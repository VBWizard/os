
Debug/cross-Linux/chrisos:     file format elf32-i386


Disassembly of section .text:

00001000 <tos>:
tos():
/home/yogi/src/os/chrisOS/asm/boot.s:15
.att_syntax noprefix
.code16
.globl tos
.type tos, @function
tos:
    ljmp $0,$tos3
    1000:	ea 05 10 00 00 e9 da 	jmp    0xdae9:0x1005

00001005 <tos3>:
tos3():
/home/yogi/src/os/chrisOS/asm/boot.s:18
tos3:
.code32
        jmp	initAP	# initialize awakened AP
    1005:	e9 da 06 00 00       	jmp    16e4 <initAP>
    100a:	66 90                	xchg   ax,ax
    100c:	02 b0 ad 1b 03 00    	add    dh,BYTE PTR [eax+0x31bad]
    1012:	00 00                	add    BYTE PTR [eax],al
    1014:	fb                   	sti    
    1015:	4f                   	dec    edi
    1016:	52                   	push   edx
    1017:	e4 e8                	in     al,0xe8

00001018 <_start>:
_start():
/home/yogi/src/os/chrisOS/asm/boot.s:84
        //mov %esp, stack_top

	# We are now ready to actually execute C code. We cannot embed that in an
	# assembly file, so we'll create a kernel.c file in a moment. In that file,
	# we'll create a C entry point called kernel_main and call it here.
	call kernel_main
    1018:	e8 b6 3a 02 00       	call   24ad3 <kernel_main>
/home/yogi/src/os/chrisOS/asm/boot.s:92
	# infinite loop. To do that, we use the clear interrupt ('cli') instruction
	# to disable interrupts, the halt instruction ('hlt') to stop the CPU until
	# the next interrupt arrives, and jumping to the halt instruction if it ever
	# continues execution, just to be safe. We will create a local label rather
	# than real symbol and jump to there endlessly.
	cli
    101d:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/boot.s:93
	hlt
    101e:	f4                   	hlt    
/home/yogi/src/os/chrisOS/asm/boot.s:95
.Lhang:
	jmp .Lhang
    101f:	eb fe                	jmp    101f <_start+0x7>
    1021:	66 90                	xchg   ax,ax
    1023:	66 90                	xchg   ax,ax
    1025:	66 90                	xchg   ax,ax
    1027:	90                   	nop

00001028 <isE820Available>:
isE820Available():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:11

.globl isE820Available
.type isE820Available, @function
isE820Available:
.code32
mov eax,0x10
    1028:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:12
mov ds,eax
    102d:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:13
mov saveESP, esp
    102f:	89 25 c3 12 00 00    	mov    DWORD PTR ds:0x12c3,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:14
mov sp, 0xfffc
    1035:	66 bc fc ff          	mov    sp,0xfffc
/home/yogi/src/os/chrisOS/asm/bootCPU.s:15
call leaveProtMode
    1039:	e8 67 00 00 00       	call   10a5 <leaveProtMode>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:17
.code16
mov ax, 0x8000
    103e:	b8 00 80 8e d0       	mov    eax,0xd08e8000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:19
mov ss, ax
pusha
    1043:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:20
mov eax,0x0000E820
    1044:	66 b8 20 e8          	mov    ax,0xe820
    1048:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:21
mov edx, 0x534D4150
    104a:	66 ba 50 41          	mov    dx,0x4150
    104e:	4d                   	dec    ebp
    104f:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:22
mov ebx, 0
    1050:	66 bb 00 00          	mov    bx,0x0
    1054:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:23
mov ecx, 100
    1056:	66 b9 64 00          	mov    cx,0x64
    105a:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:24
lea di, e820data
    105c:	8d 3e                	lea    edi,[esi]
    105e:	df 12                	fist   WORD PTR [edx]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:25
int 0x15
    1060:	cd 15                	int    0x15
/home/yogi/src/os/chrisOS/asm/bootCPU.s:26
mov savedValue, eax
    1062:	66 a3 c7 12 61 e8    	mov    ds:0xe86112c7,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:29
popa
.code32
call reenterProtMode
    1068:	83 00 00             	add    DWORD PTR [eax],0x0
    106b:	00 c3                	add    bl,al

0000106d <getInt12Memory>:
getInt12Memory():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:37

.globl getInt12Memory
.type getInt12Memory, @function
getInt12Memory:
.code32
mov eax,0x10
    106d:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:38
mov ds,eax
    1072:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:39
mov saveESP, esp
    1074:	89 25 c3 12 00 00    	mov    DWORD PTR ds:0x12c3,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:40
mov sp, 0xfffc
    107a:	66 bc fc ff          	mov    sp,0xfffc
/home/yogi/src/os/chrisOS/asm/bootCPU.s:41
call leaveProtMode
    107e:	e8 22 00 00 00       	call   10a5 <leaveProtMode>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:43
.code16
mov ax, 0x8000
    1083:	b8 00 80 8e d0       	mov    eax,0xd08e8000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:45
mov ss, ax
int 0x12
    1088:	cd 12                	int    0x12
/home/yogi/src/os/chrisOS/asm/bootCPU.s:46
movzx edx,ax
    108a:	66 0f b7 d0          	movzx  dx,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:47
mov savedValue, edx
    108e:	66 89 16             	mov    WORD PTR [esi],dx
    1091:	c7                   	(bad)  
    1092:	12 b8 12 11 30 db    	adc    bh,BYTE PTR [eax-0x24cfeeee]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:50
mov ax, 0x1112    
xor bl, bl    
int 0x10 
    1098:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:52
.code32
call reenterProtMode
    109a:	e8 50 00 00 00       	call   10ef <reenterProtMode>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:53
ret
    109f:	c3                   	ret    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:54
jmp hang
    10a0:	e9 b8 00 00 00       	jmp    115d <hang>

000010a5 <leaveProtMode>:
leaveProtMode():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:60
//background, do on team, etc.
.globl leaveProtMode
.type leaveProtMode, @function
leaveProtMode:
.code32
lgdt [rmGdtp]
    10a5:	0f 01 15 78 99 12 00 	lgdtd  ds:0x129978
/home/yogi/src/os/chrisOS/asm/bootCPU.s:61
jmp 0x8:Into16BitProt
    10ac:	ea b3 10 00 00 08 00 	jmp    0x8:0x10b3

000010b3 <Into16BitProt>:
Into16BitProt():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:64
Into16BitProt:
.code16
mov ax,0x10
    10b3:	b8 10 00 8e d8       	mov    eax,0xd88e0010
/home/yogi/src/os/chrisOS/asm/bootCPU.s:66
mov ds, ax
mov gs, ax
    10b8:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:67
mov fs, ax
    10ba:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:68
mov es, ax
    10bc:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:70
.code32
mov eax, cr0
    10be:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:71
and al, 0xFe
    10c1:	24 fe                	and    al,0xfe
/home/yogi/src/os/chrisOS/asm/bootCPU.s:72
mov cr0, eax
    10c3:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:74
.code32
jmp 0:LeaveProtModeJmp
    10c6:	ea cd 10 00 00 00 00 	jmp    0x0:0x10cd

000010cd <LeaveProtModeJmp>:
LeaveProtModeJmp():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:77
LeaveProtModeJmp:
.code16
mov ax, 0
    10cd:	b8 00 00 8e d8       	mov    eax,0xd88e0000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:79
mov ds, ax
mov es, ax
    10d2:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:80
mov fs, ax
    10d4:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:81
mov gs, ax
    10d6:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:82
sidt [saved_idt]
    10d8:	0f 01 0e             	sidtd  [esi]
    10db:	d9 12                	fst    DWORD PTR [edx]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:83
lidt [idt_real]
    10dd:	0f 01 1e             	lidtd  [esi]
    10e0:	d1 12                	rcl    DWORD PTR [edx],1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:84
sgdt [saved_gdt16_lo]
    10e2:	0f 01 06             	sgdtd  [esi]
    10e5:	bd 12 b8 00 00       	mov    ebp,0xb812
/home/yogi/src/os/chrisOS/asm/bootCPU.s:87
.code16
mov ax,0
mov ss,ax
    10ea:	8e d0                	mov    ss,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:88
mov ds, ax
    10ec:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:90
.code32
ret
    10ee:	c3                   	ret    

000010ef <reenterProtMode>:
reenterProtMode():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:96

.globl reenterProtMode
.type reenterProtMode, @function
reenterProtMode:
.code16
lgdt [saved_gdt16_lo]
    10ef:	0f 01 16             	lgdtd  [esi]
    10f2:	bd 12 0f 01 1e       	mov    ebp,0x1e010f12
/home/yogi/src/os/chrisOS/asm/bootCPU.s:97
lidt [saved_idt]
    10f7:	d9 12                	fst    DWORD PTR [edx]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:99
.code32
mov eax, cr0
    10f9:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:100
or  al, 0x1
    10fc:	0c 01                	or     al,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:102
.code16
or  eax,0x10000   #clr 05/12/2016 - added wp bit
    10fe:	66 0d 00 00          	or     ax,0x0
    1102:	01 00                	add    DWORD PTR [eax],eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:104
.code32
mov cr0, eax
    1104:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:106
.code16
ljmp 0x18:reenterProtModeJmp
    1107:	ea 0c 11 18 00 66 b8 	jmp    0xb866:0x18110c

0000110c <reenterProtModeJmp>:
reenterProtModeJmp():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:109
reenterProtModeJmp:
.code32
mov ax,0x10
    110c:	66 b8 10 00          	mov    ax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:110
mov ds,ax
    1110:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:111
mov es,ax
    1112:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:112
mov gs,ax
    1114:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:113
lgdt [kernelGDT]
    1116:	0f 01 15 88 99 12 00 	lgdtd  ds:0x129988
/home/yogi/src/os/chrisOS/asm/bootCPU.s:114
ljmp 0x8:reenterProtMode32Jmp
    111d:	ea 24 11 00 00 08 00 	jmp    0x8:0x1124

00001124 <reenterProtMode32Jmp>:
reenterProtMode32Jmp():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:117
reenterProtMode32Jmp:
.code16
mov ax,0x10
    1124:	b8 10 00 8e d8       	mov    eax,0xd88e0010
/home/yogi/src/os/chrisOS/asm/bootCPU.s:119
mov ds,ax
mov ss,ax
    1129:	8e d0                	mov    ss,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:120
mov es,ax
    112b:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:121
mov fs,ax
    112d:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:122
mov gs,ax
    112f:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:124
.code32
mov eax,savedValue
    1131:	a1 c7 12 00 00       	mov    eax,ds:0x12c7
/home/yogi/src/os/chrisOS/asm/bootCPU.s:125
mov esp,saveESP
    1136:	8b 25 c3 12 00 00    	mov    esp,DWORD PTR ds:0x12c3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:126
ret
    113c:	c3                   	ret    

0000113d <set_gdt>:
set_gdt():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:132

.globl set_gdt
.type set_gdt, @function
set_gdt:
.code32
push eax
    113d:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:133
    mov eax,[esp+8]
    113e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:134
    lgdt [eax]
    1142:	0f 01 10             	lgdtd  [eax]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:135
    jmp 0x08:.reload_CS
    1145:	ea 4c 11 00 00 08 00 	jmp    0x8:0x114c

0000114c <.reload_CS>:
.reload_CS():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:137
.reload_CS:
    mov eax, 0x10
    114c:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:138
    mov ds, ax
    1151:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:139
    mov es, ax
    1153:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:140
    mov fs, ax
    1155:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:141
    mov gs, ax
    1157:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:142
    mov ss, ax
    1159:	8e d0                	mov    ss,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:143
    pop eax
    115b:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:144
    ret
    115c:	c3                   	ret    

0000115d <hang>:
hang():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:146
hang:
    hlt
    115d:	f4                   	hlt    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:147
    jmp hang
    115e:	eb fd                	jmp    115d <hang>

00001160 <idt_load>:
idt_load():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:154
// Loads the IDT defined in '_idtp' into the processor.
// This is declared in C as 'extern void idt_load();'
.globl idt_load
.type idt_load, @function
idt_load:
    push ebp
    1160:	55                   	push   ebp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:155
    mov ebp, esp
    1161:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:156
    push eax
    1163:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:157
    push ebx
    1164:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:158
    cli
    1165:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:159
    mov eax,[ebp+12]    #size + bottom of offset
    1166:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:160
    mov ebx,[ebp+8]     #top of offset
    1169:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:161
    ror eax,16          #mov the size out of the way
    116c:	c1 c8 10             	ror    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:162
    mov ax,bx           #move the top of the address
    116f:	66 89 d8             	mov    ax,bx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:163
    ror eax,16
    1172:	c1 c8 10             	ror    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:164
    shr ebx,16
    1175:	c1 eb 10             	shr    ebx,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:165
    mov idtPtrToLoad,eax
    1178:	a3 50 15 00 00       	mov    ds:0x1550,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:166
    mov idtPtrToLoad+4,ebx
    117d:	89 1d 54 15 00 00    	mov    DWORD PTR ds:0x1554,ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:169
    //we always put our IDT in idtPtrToLoad before calling idt_load
//    mov eax, word ptr idtPtrToLoad
    lidt [idtPtrToLoad]
    1183:	0f 01 1d 50 15 00 00 	lidtd  ds:0x1550
/home/yogi/src/os/chrisOS/asm/bootCPU.s:170
    sti
    118a:	fb                   	sti    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:171
    pop ebx
    118b:	5b                   	pop    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:172
    pop eax
    118c:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:173
    pop ebp
    118d:	5d                   	pop    ebp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:174
    ret
    118e:	c3                   	ret    

0000118f <init_PIT>:
init_PIT():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:180
 #Input
 # ebx   Desired PIT frequency in Hz
 .globl init_PIT
.type init_PIT, @function
init_PIT:
    push ebp
    118f:	55                   	push   ebp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:181
    mov ebp, esp
    1190:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:183
    # Do some checking
    mov ebx,[ebp+8]
    1192:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:184
    pushad
    1195:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:185
    mov eax,0x10000                   #eax = reload value for slowest possible frequency (65536)
    1196:	b8 00 00 01 00       	mov    eax,0x10000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:186
    cmp ebx,18                        #Is the requested frequency too low?
    119b:	83 fb 12             	cmp    ebx,0x12
/home/yogi/src/os/chrisOS/asm/bootCPU.s:187
    jbe .gotReloadValue               # yes, use slowest possible frequency
    119e:	76 34                	jbe    11d4 <.gotReloadValue>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:189
 
    mov eax,1                         #ax = reload value for fastest possible frequency (1)
    11a0:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:190
    cmp ebx,1193181                   #Is the requested frequency too high?
    11a5:	81 fb dd 34 12 00    	cmp    ebx,0x1234dd
/home/yogi/src/os/chrisOS/asm/bootCPU.s:191
    jae .gotReloadValue               # yes, use fastest possible frequency
    11ab:	73 27                	jae    11d4 <.gotReloadValue>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:195
 
    # Calculate the reload value
 
    mov eax,3579545
    11ad:	b8 99 9e 36 00       	mov    eax,0x369e99
/home/yogi/src/os/chrisOS/asm/bootCPU.s:196
    mov edx,0                         #edx:eax = 3579545
    11b2:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:197
    div ebx                           #eax = 3579545 / frequency, edx = remainder
    11b7:	f7 f3                	div    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:198
    cmp edx,3579545 / 2               #Is the remainder more than half?
    11b9:	81 fa 4c 4f 1b 00    	cmp    edx,0x1b4f4c
/home/yogi/src/os/chrisOS/asm/bootCPU.s:199
    jb .l1                            # no, round down
    11bf:	72 01                	jb     11c2 <.l1>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:200
    inc eax                           # yes, round up
    11c1:	40                   	inc    eax

000011c2 <.l1>:
.l1():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:202
 .l1:
    mov ebx,3
    11c2:	bb 03 00 00 00       	mov    ebx,0x3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:203
    mov edx,0                         #edx:eax = 3579545 * 256 / frequency
    11c7:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:204
    div ebx                           #eax = (3579545 * 256 / 3 * 256) / frequency
    11cc:	f7 f3                	div    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:205
    cmp edx,3 / 2                     #Is the remainder more than half?
    11ce:	83 fa 01             	cmp    edx,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:206
    jb .l2                            # no, round down
    11d1:	72 01                	jb     11d4 <.gotReloadValue>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:207
    inc eax                           # yes, round up
    11d3:	40                   	inc    eax

000011d4 <.gotReloadValue>:
.gotReloadValue():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:214
 
 
 # Store the reload value and calculate the actual frequency
 
 .gotReloadValue:
    push eax                          #Store reload_value for later
    11d4:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:215
    mov [PIT_reload_value],ax         #Store the reload value for later
    11d5:	66 a3 21 13 00 00    	mov    ds:0x1321,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:216
    mov ebx,eax                       #ebx = reload value
    11db:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:218
 
    mov eax,3579545
    11dd:	b8 99 9e 36 00       	mov    eax,0x369e99
/home/yogi/src/os/chrisOS/asm/bootCPU.s:219
    mov edx,0                         #edx:eax = 3579545
    11e2:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:220
    div ebx                           #eax = 3579545 / reload_value, edx = remainder
    11e7:	f7 f3                	div    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:221
    cmp edx,3579545 / 2               #Is the remainder more than half?
    11e9:	81 fa 4c 4f 1b 00    	cmp    edx,0x1b4f4c
/home/yogi/src/os/chrisOS/asm/bootCPU.s:222
    jb .l3                            # no, round down
    11ef:	72 01                	jb     11f2 <.l3>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:223
    inc eax                           # yes, round up
    11f1:	40                   	inc    eax

000011f2 <.l3>:
.l3():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:225
 .l3:
    mov ebx,3
    11f2:	bb 03 00 00 00       	mov    ebx,0x3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:226
    mov edx,0                         #edx:eax = 3579545 / reload_value
    11f7:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:227
    div ebx                           #eax = (3579545 / 3) / frequency
    11fc:	f7 f3                	div    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:228
    cmp edx,3 / 2                     #Is the remainder more than half?
    11fe:	83 fa 01             	cmp    edx,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:229
    jb .l4                            # no, round down
    1201:	72 01                	jb     1204 <.l4>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:230
    inc eax                           # yes, round up
    1203:	40                   	inc    eax

00001204 <.l4>:
.l4():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:232
 .l4:
    mov [IRQ0_frequency],eax          #Store the actual frequency for displaying later
    1204:	a3 19 13 00 00       	mov    ds:0x1319,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:246
 #           time in ms = reload_value * 3000 / 3579545 * (2^42)/(2^42)
 #           time in ms = reload_value * 3000 * (2^42) / 3579545 / (2^42)
 #           time in ms * 2^32 = reload_value * 3000 * (2^42) / 3579545 / (2^42) * (2^32)
 #           time in ms * 2^32 = reload_value * 3000 * (2^42) / 3579545 / (2^10)
 
    pop ebx                           #ebx = reload_value
    1209:	5b                   	pop    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:247
    mov eax,0xDBB3A062                #eax = 3000 * (2^42) / 3579545
    120a:	b8 62 a0 b3 db       	mov    eax,0xdbb3a062
/home/yogi/src/os/chrisOS/asm/bootCPU.s:248
    mul ebx                           #edx:eax = reload_value * 3000 * (2^42) / 3579545
    120f:	f7 e3                	mul    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:249
    shrd eax,edx,10
    1211:	0f ac d0 0a          	shrd   eax,edx,0xa
/home/yogi/src/os/chrisOS/asm/bootCPU.s:250
    shr edx,10                        #edx:eax = reload_value * 3000 * (2^42) / 3579545 / (2^10)
    1215:	c1 ea 0a             	shr    edx,0xa
/home/yogi/src/os/chrisOS/asm/bootCPU.s:252
 
    mov [IRQ0_ms],edx                 #Set whole ms between IRQs
    1218:	89 15 11 13 00 00    	mov    DWORD PTR ds:0x1311,edx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:253
    mov [IRQ0_fractions],eax          #Set fractions of 1 ms between IRQs
    121e:	a3 09 13 00 00       	mov    ds:0x1309,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:258
 
 
 # Program the PIT channel
 
    pushfd
    1223:	9c                   	pushf  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:259
    cli                               #Disabled interrupts (just in case)
    1224:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:261
 
    mov al,0b00110100                  #channel 0, lobyte/hibyte, rate generator
    1225:	b0 34                	mov    al,0x34
/home/yogi/src/os/chrisOS/asm/bootCPU.s:262
    out 0x43, al
    1227:	e6 43                	out    0x43,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:264
 
    mov ax,[PIT_reload_value]         #ax = 16 bit reload value
    1229:	66 a1 21 13 00 00    	mov    ax,ds:0x1321
/home/yogi/src/os/chrisOS/asm/bootCPU.s:265
    out 0x40,al                       #Set low byte of PIT reload value
    122f:	e6 40                	out    0x40,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:266
    mov al,ah                         #ax = high 8 bits of reload value
    1231:	88 e0                	mov    al,ah
/home/yogi/src/os/chrisOS/asm/bootCPU.s:267
    out 0x40,al                       #Set high byte of PIT reload value
    1233:	e6 40                	out    0x40,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:269
 
    popfd
    1235:	9d                   	popf   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:271
 
    popad
    1236:	61                   	popa   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:272
    pop ebp
    1237:	5d                   	pop    ebp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:273
    sti
    1238:	fb                   	sti    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:274
    ret
    1239:	c3                   	ret    

0000123a <getE820Memory_asm>:
getE820Memory_asm():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:280

 .globl getE820Memory_asm
.type getE820Memory_asm, @function
getE820Memory_asm:
.code32
mov eax,0x10
    123a:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:281
mov ds,eax
    123f:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:282
mov saveESP, esp
    1241:	89 25 c3 12 00 00    	mov    DWORD PTR ds:0x12c3,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:283
mov sp, 0xfff7
    1247:	66 bc f7 ff          	mov    sp,0xfff7
/home/yogi/src/os/chrisOS/asm/bootCPU.s:284
call leaveProtMode
    124b:	e8 55 fe ff ff       	call   10a5 <leaveProtMode>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:285
pusha
    1250:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:287
.code16
lea eax, word ptr lowSmapTbl
    1251:	66 8d 06             	lea    ax,[esi]
    1254:	70 13                	jo     1269 <getE820Memory_asm+0x2f>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:289
.code32
movzx eax,ax
    1256:	0f b7 c0             	movzx  eax,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:290
mov lowSmapTablePtr,eax
    1259:	a3 68 13 00 00       	mov    ds:0x1368,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:291
mov ax, 0
    125e:	66 b8 00 00          	mov    ax,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:292
mov es, ax
    1262:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:293
mov ebx, 0
    1264:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:295
.code16
lea edi, word ptr [lowSmapTbl]
    1269:	66 8d 3e             	lea    di,[esi]
    126c:	70 13                	jo     1281 <getE820Memory_asm_getNext+0x13>

0000126e <getE820Memory_asm_getNext>:
.code32():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:298
.code32:
getE820Memory_asm_getNext:
mov eax, 0xe820
    126e:	66 b8 20 e8          	mov    ax,0xe820
    1272:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:299
mov edx, 0x534D4150
    1274:	66 ba 50 41          	mov    dx,0x4150
    1278:	4d                   	dec    ebp
    1279:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:300
mov ecx, 0x24
    127a:	66 b9 24 00          	mov    cx,0x24
    127e:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:301
int 0x15
    1280:	cd 15                	int    0x15
/home/yogi/src/os/chrisOS/asm/bootCPU.s:302
add edi,24
    1282:	66 83 c7 18          	add    di,0x18
/home/yogi/src/os/chrisOS/asm/bootCPU.s:303
cmp eax, 0x534D4150
    1286:	66 3d 50 41          	cmp    ax,0x4150
    128a:	4d                   	dec    ebp
    128b:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:304
jne getE820Memory_asm_exit
    128c:	75 1c                	jne    12aa <getE820Memory_asm_exit>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:305
cmp ecx,20
    128e:	66 83 f9 14          	cmp    cx,0x14
/home/yogi/src/os/chrisOS/asm/bootCPU.s:306
jl getE820Memory_asm_exit
    1292:	7c 16                	jl     12aa <getE820Memory_asm_exit>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:307
push eax
    1294:	66 50                	push   ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:308
mov eax,recCnt
    1296:	66 a1 cf 12 66 40    	mov    ax,ds:0x406612cf
/home/yogi/src/os/chrisOS/asm/bootCPU.s:310
inc eax
mov recCnt, eax
    129c:	66 a3 cf 12 66 58    	mov    ds:0x586612cf,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:312
pop eax
cmp ebx,0
    12a2:	66 83 fb 00          	cmp    bx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:313
je  getE820Memory_asm_exit
    12a6:	74 02                	je     12aa <getE820Memory_asm_exit>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:314
jmp getE820Memory_asm_getNext
    12a8:	eb c4                	jmp    126e <getE820Memory_asm_getNext>

000012aa <getE820Memory_asm_exit>:
getE820Memory_asm_exit():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:316
getE820Memory_asm_exit:
mov eax,recCnt
    12aa:	66 a1 cf 12 66 a3    	mov    ax,ds:0xa36612cf
/home/yogi/src/os/chrisOS/asm/bootCPU.s:317
mov savedValue, eax
    12b0:	c7                   	(bad)  
    12b1:	12 61 66             	adc    ah,BYTE PTR [ecx+0x66]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:321


popa
mov eax, savedValue
    12b4:	a1 c7 12 e8 33       	mov    eax,ds:0x33e812c7
/home/yogi/src/os/chrisOS/asm/bootCPU.s:323
.code32
call reenterProtMode
    12b9:	fe                   	(bad)  
    12ba:	ff                   	(bad)  
    12bb:	ff c3                	inc    ebx

000012bd <saved_gdt16_lo>:
	...

000012bf <saved_gdt16_hi>:
	...

000012c1 <saved_gdt16_hi2>:
	...

000012c3 <saveESP>:
saveESP():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:324
ret
    12c3:	00 00                	add    BYTE PTR [eax],al
	...

000012c7 <savedValue>:
	...

000012cf <recCnt>:
	...

000012d1 <idt_real>:
idt_real():
    12d1:	ff 03                	inc    DWORD PTR [ebx]
    12d3:	00 00                	add    BYTE PTR [eax],al
	...

000012d7 <retVal>:
	...

000012d9 <saved_idt>:
saved_idt():
    12d9:	00 00                	add    BYTE PTR [eax],al
    12db:	00 00                	add    BYTE PTR [eax],al
	...

000012df <e820data>:
	...

000012f9 <system_timer_fractions>:
	...

00001301 <system_timer_ms>:
	...

00001309 <IRQ0_fractions>:
	...

00001311 <IRQ0_ms>:
	...

00001319 <IRQ0_frequency>:
	...

00001321 <PIT_reload_value>:
PIT_reload_value():
    1321:	12 00                	adc    al,BYTE PTR [eax]
    1323:	00 00                	add    BYTE PTR [eax],al
    1325:	00 00                	add    BYTE PTR [eax],al
	...

00001329 <doPagingJump>:
doPagingJump():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:369
                         .word 0
 .globl doPagingJump
.type doPagingJump, @function
doPagingJump:
.code32
cli #turn off interrupts until we get the IDT fixed up
    1329:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:370
ljmp 0x20:pagingEnableJmp
    132a:	ea 31 13 00 00 20 00 	jmp    0x20:0x1331

00001331 <pagingEnableJmp>:
pagingEnableJmp():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:372
pagingEnableJmp:
push eax
    1331:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:373
mov ax, 0x10
    1332:	66 b8 10 00          	mov    ax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:374
mov ds, ax
    1336:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:375
mov es, ax
    1338:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:376
mov gs, ax
    133a:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:377
mov fs, ax
    133c:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:378
pop eax
    133e:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:379
ret
    133f:	c3                   	ret    

00001340 <doNonPagingJump>:
doNonPagingJump():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:383
 .globl doNonPagingJump
.type doNonPagingJump, @function
doNonPagingJump:
ljmp 0x28:pagingDisableJmp1
    1340:	ea 47 13 00 00 28 00 	jmp    0x28:0x1347

00001347 <pagingDisableJmp1>:
pagingDisableJmp1():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:385
pagingDisableJmp1:
push eax
    1347:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:386
mov eax,cr0
    1348:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:387
and eax,0x7FFFFFFF
    134b:	25 ff ff ff 7f       	and    eax,0x7fffffff
/home/yogi/src/os/chrisOS/asm/bootCPU.s:388
mov cr0,eax
    1350:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:389
ljmp 0x28:pagingDisableJmp2
    1353:	ea 5a 13 00 00 28 00 	jmp    0x28:0x135a

0000135a <pagingDisableJmp2>:
pagingDisableJmp2():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:391
pagingDisableJmp2:
mov ax, 0x18
    135a:	66 b8 18 00          	mov    ax,0x18
/home/yogi/src/os/chrisOS/asm/bootCPU.s:392
mov ds, ax
    135e:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:393
mov es, ax
    1360:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:394
mov gs, ax
    1362:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:395
mov fs, ax
    1364:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:396
pop eax
    1366:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:397
ret
    1367:	c3                   	ret    

00001368 <lowSmapTablePtr>:
	...

00001370 <lowSmapTbl>:
	...

00001550 <idtPtrToLoad>:
	...

00001558 <msg>:
msg():
    1558:	48                   	dec    eax
    1559:	65                   	gs
    155a:	6c                   	ins    BYTE PTR es:[edi],dx
    155b:	6c                   	ins    BYTE PTR es:[edi],dx
    155c:	6f                   	outs   dx,DWORD PTR ds:[esi]
    155d:	20 66 72             	and    BYTE PTR [esi+0x72],ah
    1560:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1561:	6d                   	ins    DWORD PTR es:[edi],dx
    1562:	20 70 72             	and    BYTE PTR [eax+0x72],dh
    1565:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1566:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
    1569:	73 6f                	jae    15da <AP_startup+0x14>
    156b:	72 20                	jb     158d <msg2+0xa>

0000156c <pid>:
pid():
    156c:	20 20                	and    BYTE PTR [eax],ah
    156e:	20 43 52             	and    BYTE PTR [ebx+0x52],al
    1571:	30 3d 78 78 78 78    	xor    BYTE PTR ds:0x78787878,bh

00001573 <msw>:
msw():
    1573:	78 78                	js     15ed <broadcast_AP_startup+0x4>
    1575:	78 78                	js     15ef <broadcast_AP_startup+0x6>
    1577:	78 78                	js     15f1 <broadcast_AP_startup+0x8>
    1579:	78 78                	js     15f3 <broadcast_AP_startup+0xa>
    157b:	20 0a                	and    BYTE PTR [edx],cl
    157d:	0d 26 00 00 00       	or     eax,0x26

0000157e <len>:
len():
    157e:	26 00 00             	add    BYTE PTR es:[eax],al
	...

00001582 <att>:
att():
    1582:	0b 57 61             	or     edx,DWORD PTR [edi+0x61]

00001583 <msg2>:
msg2():
    1583:	57                   	push   edi
    1584:	61                   	popa   
    1585:	6b 69 6e 67          	imul   ebp,DWORD PTR [ecx+0x6e],0x67
    1589:	20 75 70             	and    BYTE PTR [ebp+0x70],dh
    158c:	20 41 50             	and    BYTE PTR [ecx+0x50],al
    158f:	20 70 72             	and    BYTE PTR [eax+0x72],dh
    1592:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1593:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
    1596:	73 6f                	jae    1607 <.B0+0x5>
    1598:	72 73                	jb     160d <.B0+0xb>
    159a:	0a 0d 19 00 00 00    	or     cl,BYTE PTR ds:0x19

0000159c <len2>:
len2():
    159c:	19 00                	sbb    DWORD PTR [eax],eax
	...

000015a0 <att2>:
att2():
    15a0:	0c 01                	or     al,0x1

000015a1 <mutex>:
mutex():
    15a1:	01 00                	add    DWORD PTR [eax],eax

000015a3 <smpBootCPUCount>:
	...

000015a5 <smpBootCPUsStarted>:
	...

000015a7 <newSS>:
newSS():
    15a7:	00 20                	add    BYTE PTR [eax],ah
    15a9:	00 00                	add    BYTE PTR [eax],al
    15ab:	00 00                	add    BYTE PTR [eax],al
    15ad:	00 00                	add    BYTE PTR [eax],al
	...

000015b0 <theGDT>:
	...
theGDT():
    15b8:	ff                   	(bad)  
    15b9:	ff 00                	inc    DWORD PTR [eax]
    15bb:	00 00                	add    BYTE PTR [eax],al
    15bd:	92                   	xchg   edx,eax
    15be:	8f 00                	pop    DWORD PTR [eax]

000015c0 <regGDT>:
regGDT():
    15c0:	0f 00                	(bad)  
    15c2:	b0 15                	mov    al,0x15
	...

000015c6 <AP_startup>:
AP_startup():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:446
#-----------------------------------------------------------------
#-----------------------------------------------------------------#-----------------------------------------------------------------

.global AP_startup
AP_startup:
movl     %esp, saveESP
    15c6:	89 25 c3 12 00 00    	mov    DWORD PTR ds:0x12c3,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:448
//lea	tos, %esp		# and set up new stack
call    setup_timer_channel2
    15cc:	e8 7e 00 00 00       	call   164f <setup_timer_channel2>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:450
//call	display_APIC_LocalID
call	broadcast_AP_startup
    15d1:	e8 13 00 00 00       	call   15e9 <broadcast_AP_startup>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:451
call	delay_until_APs_halt
    15d6:	e8 64 00 00 00       	call   163f <delay_until_APs_halt>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:452
mov     $0x10, %eax
    15db:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:453
mov     %eax, %ds
    15e0:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:454
mov     saveESP, %esp
    15e2:	8b 25 c3 12 00 00    	mov    esp,DWORD PTR ds:0x12c3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:455
ret
    15e8:	c3                   	ret    

000015e9 <broadcast_AP_startup>:
broadcast_AP_startup():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:462
.global broadcast_AP_startup
broadcast_AP_startup:
#
# This procedure is called by the main CPU to awaken other CPUs.
#
	push	%ebx
    15e9:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:463
	push	%ds
    15ea:	1e                   	push   ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:466

	# address the Local-APIC registers' page
	mov	$0x10, %ax
    15eb:	66 b8 10 00          	mov    ax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:467
	mov	%ax, %ds
    15ef:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:468
    	mov     kAPICRegisterRemapAddress, %ebx
    15f1:	8b 1d 70 98 12 00    	mov    ebx,DWORD PTR ds:0x129870
/home/yogi/src/os/chrisOS/asm/bootCPU.s:471

	# issue an 'INIT' Inter-Processor Interrupt command
	mov	$0x000C4500, %eax	# broadcase INIT-IPI
    15f7:	b8 00 45 0c 00       	mov    eax,0xc4500
/home/yogi/src/os/chrisOS/asm/bootCPU.s:472
	mov	%eax, 0x300(%ebx)	# to all-except-self
    15fc:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax

00001602 <.B0>:
.B0():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:473
.B0:	bt	$12, 0x300(%ebx)	# command in progress?
    1602:	0f ba a3 00 03 00 00 	bt     DWORD PTR [ebx+0x300],0xc
    1609:	0c 
/home/yogi/src/os/chrisOS/asm/bootCPU.s:474
	jc	.B0			# yes, spin till done
    160a:	72 f6                	jb     1602 <.B0>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:477

	# do ten-millisecond delay, allow time for APs to awaken
	mov	$10000, %eax		# number of microseconds
    160c:	b8 10 27 00 00       	mov    eax,0x2710
/home/yogi/src/os/chrisOS/asm/bootCPU.s:478
	call	delay_EAX_micro_secs	# for a programmed delay
    1611:	e8 f9 00 00 00       	call   170f <delay_EAX_micro_secs>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:481
	
	# finish the Intel 'MP Initialization Protocol'
	mov	$5, %ecx		# issue 'Startup' twice
    1616:	b9 05 00 00 00       	mov    ecx,0x5

0000161b <nxIPI>:
nxIPI():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:483
#nxIPI:	mov	$0x000C4601, %eax	# broadcast Startup-IPI #startup IPI for base address of 4096
nxIPI:	mov	$0x000C4601, %eax	# broadcast Startup-IPI 
    161b:	b8 01 46 0c 00       	mov    eax,0xc4601
/home/yogi/src/os/chrisOS/asm/bootCPU.s:484
	mov	%eax, 0x300(%ebx)	# to all-except-self
    1620:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax

00001626 <.B1>:
.B1():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:485
.B1:	bt	$12, 0x300(%ebx)	# command in progress?
    1626:	0f ba a3 00 03 00 00 	bt     DWORD PTR [ebx+0x300],0xc
    162d:	0c 
/home/yogi/src/os/chrisOS/asm/bootCPU.s:486
	jc	.B1			# yes, spin till done
    162e:	72 f6                	jb     1626 <.B1>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:489

	# delay for 200 microseconds	
	mov	$200, %eax		# number of microseconds
    1630:	b8 c8 00 00 00       	mov    eax,0xc8
/home/yogi/src/os/chrisOS/asm/bootCPU.s:490
	call	delay_EAX_micro_secs	# for a programmed delay
    1635:	e8 d5 00 00 00       	call   170f <delay_EAX_micro_secs>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:491
	loop	nxIPI	
    163a:	e2 df                	loop   161b <nxIPI>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:493
		
	pop	%ds
    163c:	1f                   	pop    ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:494
	pop	%ebx
    163d:	5b                   	pop    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:495
	ret
    163e:	c3                   	ret    

0000163f <delay_until_APs_halt>:
delay_until_APs_halt():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:502
delay_until_APs_halt:
#
# This procedure is called by the main CPU so that it will not
# terminate our program until the other CPUs have been halted.
#
.W0:	mov	smpBootCPUCount, %ax		# number of APs awoken
    163f:	66 a1 a3 15 00 00    	mov    ax,ds:0x15a3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:503
	sub	smpBootCPUsStarted, %ax		# less number finished
    1645:	66 2b 05 a5 15 00 00 	sub    ax,WORD PTR ds:0x15a5
/home/yogi/src/os/chrisOS/asm/bootCPU.s:504
	jnz	.W0			# spin unless all done
    164c:	75 f1                	jne    163f <delay_until_APs_halt>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:505
	ret
    164e:	c3                   	ret    

0000164f <setup_timer_channel2>:
setup_timer_channel2():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:514
#
# This procedure initializes the 8254 Programmable Timer/Counter
# so Timer Channel 2 can be used in 'one-shot' timing durations.
#
	# enable the 8254 Channel-2 counter
	in	$0x61, %al		# get PORT_B settings
    164f:	e4 61                	in     al,0x61
/home/yogi/src/os/chrisOS/asm/bootCPU.s:515
	and	$0xFD, %al		# turn PC speaker off
    1651:	24 fd                	and    al,0xfd
/home/yogi/src/os/chrisOS/asm/bootCPU.s:516
	or	$0x01, %al		# turn on Gate2 input
    1653:	0c 01                	or     al,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:517
	out	%al, $0x61		# output new settings
    1655:	e6 61                	out    0x61,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:520

	# program channel-2 for one-shot countdown
	mov	$0xB0, %al		# chn2, r/w LSB/MSB
    1657:	b0 b0                	mov    al,0xb0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:521
	out	%al, $0x43		# issue PIT command
    1659:	e6 43                	out    0x43,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:522
	ret
    165b:	c3                   	ret    

0000165c <display_APIC_LocalID>:
display_APIC_LocalID():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:536
# video services.  Because ROM-BIOS routines are not 'reentrant'
# it is necessary to employ a 'spinlock' to insure that only one
# processor at a time will be executing these ROM-BIOS services. 
#
	# read the Local-APIC ID-register
	push	%ds
    165c:	1e                   	push   ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:537
	xor	%ax, %ax
    165d:	31 c0                	xor    eax,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:538
	mov	%ax, %ds
    165f:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:539
	mov	$0xFEE00020, %ebx
    1661:	66 bb 20 00          	mov    bx,0x20
    1665:	e0 fe                	loopne 1665 <display_APIC_LocalID+0x9>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:540
	mov	(%ebx), %eax
    1667:	67 66 8b 03          	mov    ax,WORD PTR [bp+di]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:541
	pop	%ds
    166b:	1f                   	pop    ds

0000166c <spin>:
spin():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:544

	# acquire the spinlock -- allow only one CPU at a time
spin:	bt	$0, mutex
    166c:	0f ba 26 a1          	bt     DWORD PTR [esi],0xa1
    1670:	15 00 73 f8 f0       	adc    eax,0xf0f87300
/home/yogi/src/os/chrisOS/asm/bootCPU.s:547
	jnc	spin
	lock	
	btr	$0, mutex
    1675:	0f ba 36 a1          	btr    DWORD PTR [esi],0xa1
    1679:	15 00 73 ef 66       	adc    eax,0x66ef7300
/home/yogi/src/os/chrisOS/asm/bootCPU.s:551
	jnc	spin

	# write CPU Local-APIC ID-number into shared buffer
	rol	$8, %eax		# get ID-number in AL
    167e:	c1 c0 08             	rol    eax,0x8
/home/yogi/src/os/chrisOS/asm/bootCPU.s:552
	and	$0xF, %al		# isolate lowest nybble
    1681:	24 0f                	and    al,0xf
/home/yogi/src/os/chrisOS/asm/bootCPU.s:555

#unremark to have the first CPu clear the screen
        pusha
    1683:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:556
        cmp $0x1,%al
    1684:	3c 01                	cmp    al,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:557
        ja overClearScreen
    1686:	77 28                	ja     16b0 <overClearScreen>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:558
        call clearScreen
    1688:	e8 01 01 b4 0f       	call   fb4178e <_months_abbrev+0xfa17d6e>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:561
#jmp overClearScreen
	mov	$0x0F, %ah		# get display-page
	int	$0x10			# call video bios
    168d:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:563

	mov	$0x02, %ah		# set cursor position
    168f:	b4 02                	mov    ah,0x2
/home/yogi/src/os/chrisOS/asm/bootCPU.s:564
        mov     $0,%bh
    1691:	b7 00                	mov    bh,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:565
        mov     $0x2000,%dx
    1693:	ba 00 20 cd 10       	mov    edx,0x10cd2000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:567
	int	$0x10			# call video bios
        mov     $0x3,ah
    1698:	b4 03                	mov    ah,0x3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:568
        int     $0x10
    169a:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:569
	mov	$0x1301, %ax		# write_string
    169c:	b8 01 13 8d 2e       	mov    eax,0x2e8d1301
/home/yogi/src/os/chrisOS/asm/bootCPU.s:570
	lea	msg2, %bp		# point ES:BP to string
    16a1:	83 15 8b 0e 9c 15 8a 	adc    DWORD PTR ds:0x159c0e8b,0xffffff8a
/home/yogi/src/os/chrisOS/asm/bootCPU.s:572
	mov	len2, %cx		# number of characters
	mov	att2, %bl		# display attributes
    16a8:	1e                   	push   ds
    16a9:	a0 15 b8 01 13       	mov    al,ds:0x1301b815
/home/yogi/src/os/chrisOS/asm/bootCPU.s:574
	mov	$0x1301, %ax		# write_string
	int	$0x10			# call video bios 
    16ae:	cd 10                	int    0x10

000016b0 <overClearScreen>:
overClearScreen():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:577

overClearScreen:
        popa
    16b0:	61                   	popa   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:578
        or	$'0', %al		# convert to numeral	
    16b1:	0c 30                	or     al,0x30
/home/yogi/src/os/chrisOS/asm/bootCPU.s:579
	movb	%al, pid		# write to shared buffer	
    16b3:	a2 6c 15 8d 3e       	mov    ds:0x3e8d156c,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:582
#jmp overPrinting
	# format the contents of register CR0 for display
	lea	msw, %di
    16b8:	73 15                	jae    16cf <overClearScreen+0x1f>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:583
	mov	%cr0, %eax
    16ba:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:584
	call	eax2hex
    16bd:	e8 a4 00 b4 0f       	call   fb41766 <_months_abbrev+0xfa17d46>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:587
	# display the information using ROM-BIOS routines
	mov	$0x0F, %ah		# get display-page
	int	$0x10			# call video bios
    16c2:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:589

	mov	$0x03, %ah		# get cursor position
    16c4:	b4 03                	mov    ah,0x3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:590
	int	$0x10			# call video bios
    16c6:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:592

	mov	$0x1301, %ax		# write_string
    16c8:	b8 01 13 8d 2e       	mov    eax,0x2e8d1301
/home/yogi/src/os/chrisOS/asm/bootCPU.s:593
	lea	msg, %bp		# point ES:BP to string
    16cd:	58                   	pop    eax
    16ce:	15 8b 0e 7e 15       	adc    eax,0x157e0e8b
/home/yogi/src/os/chrisOS/asm/bootCPU.s:595
	mov	len, %cx		# number of characters
	mov	att, %bl		# display attributes
    16d3:	8a 1e                	mov    bl,BYTE PTR [esi]
    16d5:	82                   	(bad)  
    16d6:	15 b8 01 13 cd       	adc    eax,0xcd1301b8
/home/yogi/src/os/chrisOS/asm/bootCPU.s:597
	mov	$0x1301, %ax		# write_string
	int	$0x10			# call video bios 
    16db:	10 f0                	adc    al,dh

000016dc <overPrinting>:
overPrinting():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:600
overPrinting:
	# release spinlock -- finished with 'non-reentrant' code
	lock 	
    16dc:	f0 0f ba 2e a1       	lock bts DWORD PTR [esi],0xa1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:601
	bts 	$0, mutex
    16e1:	15 00 c3 fa 8c       	adc    eax,0x8cfac300

000016e4 <initAP>:
initAP():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:612
#=================================================================
#-----------------------------------------------------------------
.code16
.globl initAP
.type initAP, @function
initAP:	cli
    16e4:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:613
	mov	%cs, %ax		# address program's data
    16e5:	8c c8                	mov    eax,cs
/home/yogi/src/os/chrisOS/asm/bootCPU.s:614
	mov	%ax, %ds		#    with DS register
    16e7:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:615
	mov	%ax, %es		#    also ES register
    16e9:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:616
	lock				# insure 'atomic' update
    16eb:	f0 ff 06             	lock inc DWORD PTR [esi]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:617
	incw	smpBootCPUCount			# increment count of APs
    16ee:	a3 15 b8 00 10       	mov    ds:0x1000b815,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:621

	# setup an exclusive stack-area for this processor
	mov	$0x1000, %ax		# paragraphs in segment
	xadd	%ax, newSS		# 'atomic' xchg-and-add
    16f3:	0f c1 06             	xadd   DWORD PTR [esi],eax
    16f6:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    16f7:	15 8e d0 66 31       	adc    eax,0x3166d08e
/home/yogi/src/os/chrisOS/asm/bootCPU.s:623
	mov	%ax, %ss		# segment-address in SS
	xor	%esp, %esp		# top-of-stack into ESP
    16fc:	e4 66                	in     al,0x66
/home/yogi/src/os/chrisOS/asm/bootCPU.s:624
        mov     $0,%esp
    16fe:	bc 00 00 00 00       	mov    esp,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:625
	call	allow_4GB_addressing	# adjust DS's seg-limit
    1703:	e8 38 00 f0 ff       	call   fff01740 <CHECKSUM+0x1b9dc745>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:630
#	call	display_APIC_LocalID	# display this CPU's ID

	# put this processor to sleep
	lock				# insure 'atomic' update
	incw	smpBootCPUsStarted			# increment count of APs
    1708:	06                   	push   es
    1709:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    170a:	15 fa f4 eb fc       	adc    eax,0xfcebf4fa

0000170b <freeze>:
freeze():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:632

freeze:	cli				# do not awaken this CPU
    170b:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:633
	hlt				# 'fetch-execute' ceases	
    170c:	f4                   	hlt    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:634
	jmp	freeze			# just-in-case of an NMI
    170d:	eb fc                	jmp    170b <freeze>

0000170f <delay_EAX_micro_secs>:
delay_EAX_micro_secs():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:641
#-----------------------------------------------------------------
delay_EAX_micro_secs:
#
# This procedure creates a programmed delay for EAX microseconds.
#
	pushal
    170f:	66 60                	pushaw 
/home/yogi/src/os/chrisOS/asm/bootCPU.s:643

	mov	%eax, %ecx		# number of microseconds
    1711:	66 89 c1             	mov    cx,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:644
	mov	$100000, %eax		# microseconds-per-second
    1714:	66 b8 a0 86          	mov    ax,0x86a0
    1718:	01 00                	add    DWORD PTR [eax],eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:645
	xor	%edx, %edx		# is extended to quadword
    171a:	66 31 d2             	xor    dx,dx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:646
	div	%ecx			# division by double-word
    171d:	66 f7 f1             	div    cx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:648
	
	mov	%eax, %ecx		# input-frequency divisor
    1720:	66 89 c1             	mov    cx,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:649
	mov	$1193182, %eax		# timer's input-frequency
    1723:	66 b8 de 34          	mov    ax,0x34de
    1727:	12 00                	adc    al,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:650
	xor	%edx, %edx		# is extended to quadword
    1729:	66 31 d2             	xor    dx,dx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:651
	div	%ecx			# division by double-word
    172c:	66 f7 f1             	div    cx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:653

	out	%al, $0x42		# transfer to Latch LSB
    172f:	e6 42                	out    0x42,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:654
	xchg	%al, %ah		# LSB swapped with MSB
    1731:	86 c4                	xchg   ah,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:655
	out	%al, $0x42		# transfer to Latch MSB
    1733:	e6 42                	out    0x42,al

00001735 <.T0>:
.T0():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:657

.T0:	in	$0x61, %al		# check PORT_B settings
    1735:	e4 61                	in     al,0x61
/home/yogi/src/os/chrisOS/asm/bootCPU.s:658
	test	$0x20, %al		# has counter2 expired?
    1737:	a8 20                	test   al,0x20
/home/yogi/src/os/chrisOS/asm/bootCPU.s:659
	jz	.T0			# no, continue polling
    1739:	74 fa                	je     1735 <.T0>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:661
	
	popal
    173b:	66 61                	popaw  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:662
	ret
    173d:	c3                   	ret    

0000173e <allow_4GB_addressing>:
allow_4GB_addressing():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:671
#
# This procedure will be called by each processor in order to 
# raise the 'hidden' segment-limit in its DS segment-register
# which permits Local-APIC registers to be addressed with DS.   
#
	pushf				# preserve FLAGS settings
    173e:	9c                   	pushf  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:672
	push	%ds			# preserve DS contents
    173f:	1e                   	push   ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:674

	cli				# no device interrupts
    1740:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:676

	mov	%cr0, %eax		# get machine status
    1741:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:677
	bts	$0, %eax		# set PE-bit to 1
    1744:	66 0f ba e8 00       	bts    ax,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:678
	mov	%eax, %cr0		# enter protected mode
    1749:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:679
	lgdt	regGDT			# load GDTR register-image
    174c:	0f 01 16             	lgdtd  [esi]
    174f:	c0 15 b8 08 00 8e d8 	rcl    BYTE PTR ds:0x8e0008b8,0xd8
/home/yogi/src/os/chrisOS/asm/bootCPU.s:683
	mov	$sel_FS, %ax		# address 4GB data-segment
	mov	%ax, %ds		#   with the DS register

	mov	%cr0, %eax		# get machine status
    1756:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:684
	btr	$0, %eax		# reset PE-bit to 0
    1759:	66 0f ba f0 00       	btr    ax,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:685
	mov	%eax, %cr0		# leave protected mode
    175e:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:687
.code16		
	pop	%ds			# restore register DS
    1761:	1f                   	pop    ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:688
	popf				# restore FLAGS value
    1762:	9d                   	popf   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:689
	ret				
    1763:	c3                   	ret    

00001764 <eax2hex>:
eax2hex():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:692
#-----------------------------------------------------------------
eax2hex:  # converts value in EAX to hexadecimal string at DS:DI
	pusha	
    1764:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:694

	mov	$8, %cx
    1765:	b9 08 00 66 c1       	mov    ecx,0xc1660008

00001768 <nxnyb>:
nxnyb():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:696
nxnyb:
	rol	$4, %eax
    1768:	66 c1 c0 04          	rol    ax,0x4
/home/yogi/src/os/chrisOS/asm/bootCPU.s:697
	mov	%al, %bl
    176c:	88 c3                	mov    bl,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:698
	and	$0xF, %bx
    176e:	83 e3 0f             	and    ebx,0xf
/home/yogi/src/os/chrisOS/asm/bootCPU.s:699
	mov	hex(%bx), %dl
    1771:	8a 97 7c 17 88 15    	mov    dl,BYTE PTR [edi+0x1588177c]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:701
	mov	%dl, (%di)
	inc	%di
    1777:	47                   	inc    edi
/home/yogi/src/os/chrisOS/asm/bootCPU.s:702
	loop	nxnyb	
    1778:	e2 ee                	loop   1768 <nxnyb>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:704

	popa
    177a:	61                   	popa   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:705
	ret
    177b:	c3                   	ret    

0000177c <hex>:
hex():
    177c:	30 31                	xor    BYTE PTR [ecx],dh
    177e:	32 33                	xor    dh,BYTE PTR [ebx]
    1780:	34 35                	xor    al,0x35
    1782:	36                   	ss
    1783:	37                   	aaa    
    1784:	38 39                	cmp    BYTE PTR [ecx],bh
    1786:	41                   	inc    ecx
    1787:	42                   	inc    edx
    1788:	43                   	inc    ebx
    1789:	44                   	inc    esp
    178a:	45                   	inc    ebp
    178b:	46                   	inc    esi

0000178c <clearScreen>:
clearScreen():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:711
#-----------------------------------------------------------------
hex:	.ascii	"0123456789ABCDEF"	# array of hex numerals

.intel_syntax noprefix
clearScreen:
    pusha
    178c:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:713

    mov ax, 0x0700  # function 07, AL=0 means scroll whole window
    178d:	b8 00 07 b7 07       	mov    eax,0x7b70700
/home/yogi/src/os/chrisOS/asm/bootCPU.s:715
    mov bh, 0x07    # character attribute = white on black
    mov cx, 0x0000  # row = 0, col = 0
    1792:	b9 00 00 ba 4f       	mov    ecx,0x4fba0000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:716
    mov dx, 0x184f  # row = 24 (0x18), col = 79 (0x4f)
    1797:	18 cd                	sbb    ch,cl
/home/yogi/src/os/chrisOS/asm/bootCPU.s:717
    int 0x10        # call BIOS video interrupt
    1799:	10 b4 02 b7 00 ba 00 	adc    BYTE PTR [edx+eax*1+0xba00b7],dh
/home/yogi/src/os/chrisOS/asm/bootCPU.s:720
    mov ah,02
    mov bh,0
    mov dx,0
    17a0:	00 cd                	add    ch,cl
/home/yogi/src/os/chrisOS/asm/bootCPU.s:721
    int 0x10
    17a2:	10 61 c3             	adc    BYTE PTR [ecx-0x3d],ah
	...

0000fec5 <stk>:
stk():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:723
    popa
    ret
    fec5:	fa                   	cli    
    fec6:	fa                   	cli    
    fec7:	fa                   	cli    
    fec8:	fa                   	cli    
    fec9:	fa                   	cli    
    feca:	fa                   	cli    
    fecb:	fa                   	cli    
    fecc:	fa                   	cli    
    fecd:	fa                   	cli    
    fece:	fa                   	cli    
    fecf:	fa                   	cli    
    fed0:	fa                   	cli    
    fed1:	fa                   	cli    
    fed2:	fa                   	cli    
    fed3:	fa                   	cli    
    fed4:	fa                   	cli    
    fed5:	fa                   	cli    
    fed6:	fa                   	cli    
    fed7:	fa                   	cli    
    fed8:	fa                   	cli    
    fed9:	fa                   	cli    
    feda:	fa                   	cli    
    fedb:	fa                   	cli    
    fedc:	fa                   	cli    
    fedd:	fa                   	cli    
    fede:	fa                   	cli    
    fedf:	fa                   	cli    
    fee0:	fa                   	cli    
    fee1:	fa                   	cli    
    fee2:	fa                   	cli    
    fee3:	fa                   	cli    
    fee4:	fa                   	cli    
    fee5:	fa                   	cli    
    fee6:	fa                   	cli    
    fee7:	fa                   	cli    
    fee8:	fa                   	cli    
    fee9:	fa                   	cli    
    feea:	fa                   	cli    
    feeb:	fa                   	cli    
    feec:	fa                   	cli    
    feed:	fa                   	cli    
    feee:	fa                   	cli    
    feef:	fa                   	cli    
    fef0:	fa                   	cli    
    fef1:	fa                   	cli    
    fef2:	fa                   	cli    
    fef3:	fa                   	cli    
    fef4:	fa                   	cli    
    fef5:	fa                   	cli    
    fef6:	fa                   	cli    
    fef7:	fa                   	cli    
    fef8:	fa                   	cli    
    fef9:	fa                   	cli    
    fefa:	fa                   	cli    
    fefb:	fa                   	cli    
    fefc:	fa                   	cli    
    fefd:	fa                   	cli    
    fefe:	fa                   	cli    
    feff:	fa                   	cli    
    ff00:	fa                   	cli    
    ff01:	fa                   	cli    
    ff02:	fa                   	cli    
    ff03:	fa                   	cli    
    ff04:	fa                   	cli    
    ff05:	fa                   	cli    
    ff06:	fa                   	cli    
    ff07:	fa                   	cli    
    ff08:	fa                   	cli    
    ff09:	fa                   	cli    
    ff0a:	fa                   	cli    
    ff0b:	fa                   	cli    
    ff0c:	fa                   	cli    
    ff0d:	fa                   	cli    
    ff0e:	fa                   	cli    
    ff0f:	fa                   	cli    
    ff10:	fa                   	cli    
    ff11:	fa                   	cli    
    ff12:	fa                   	cli    
    ff13:	fa                   	cli    
    ff14:	fa                   	cli    
    ff15:	fa                   	cli    
    ff16:	fa                   	cli    
    ff17:	fa                   	cli    
    ff18:	fa                   	cli    
    ff19:	fa                   	cli    
    ff1a:	fa                   	cli    
    ff1b:	fa                   	cli    
    ff1c:	fa                   	cli    
    ff1d:	fa                   	cli    
    ff1e:	fa                   	cli    
    ff1f:	fa                   	cli    
    ff20:	fa                   	cli    
    ff21:	fa                   	cli    
    ff22:	fa                   	cli    
    ff23:	fa                   	cli    
    ff24:	fa                   	cli    
    ff25:	fa                   	cli    
    ff26:	fa                   	cli    
    ff27:	fa                   	cli    
    ff28:	fa                   	cli    
    ff29:	fa                   	cli    
    ff2a:	fa                   	cli    
    ff2b:	fa                   	cli    
    ff2c:	fa                   	cli    
    ff2d:	fa                   	cli    
    ff2e:	fa                   	cli    
    ff2f:	fa                   	cli    
    ff30:	fa                   	cli    
    ff31:	fa                   	cli    
    ff32:	fa                   	cli    
    ff33:	fa                   	cli    
    ff34:	fa                   	cli    
    ff35:	fa                   	cli    
    ff36:	fa                   	cli    
    ff37:	fa                   	cli    
    ff38:	fa                   	cli    
    ff39:	fa                   	cli    
    ff3a:	fa                   	cli    
    ff3b:	fa                   	cli    
    ff3c:	fa                   	cli    
    ff3d:	fa                   	cli    
    ff3e:	fa                   	cli    
    ff3f:	fa                   	cli    
    ff40:	fa                   	cli    
    ff41:	fa                   	cli    
    ff42:	fa                   	cli    
    ff43:	fa                   	cli    
    ff44:	fa                   	cli    
    ff45:	fa                   	cli    
    ff46:	fa                   	cli    
    ff47:	fa                   	cli    
    ff48:	fa                   	cli    
    ff49:	fa                   	cli    
    ff4a:	fa                   	cli    
    ff4b:	fa                   	cli    
    ff4c:	fa                   	cli    
    ff4d:	fa                   	cli    
    ff4e:	fa                   	cli    
    ff4f:	fa                   	cli    
    ff50:	fa                   	cli    
    ff51:	fa                   	cli    
    ff52:	fa                   	cli    
    ff53:	fa                   	cli    
    ff54:	fa                   	cli    
    ff55:	fa                   	cli    
    ff56:	fa                   	cli    
    ff57:	fa                   	cli    
    ff58:	fa                   	cli    
    ff59:	fa                   	cli    
    ff5a:	fa                   	cli    
    ff5b:	fa                   	cli    
    ff5c:	fa                   	cli    
    ff5d:	fa                   	cli    
    ff5e:	fa                   	cli    
    ff5f:	fa                   	cli    
    ff60:	fa                   	cli    
    ff61:	fa                   	cli    
    ff62:	fa                   	cli    
    ff63:	fa                   	cli    
    ff64:	fa                   	cli    
    ff65:	fa                   	cli    
    ff66:	fa                   	cli    
    ff67:	fa                   	cli    
    ff68:	fa                   	cli    
    ff69:	fa                   	cli    
    ff6a:	fa                   	cli    
    ff6b:	fa                   	cli    
    ff6c:	fa                   	cli    
    ff6d:	fa                   	cli    
    ff6e:	fa                   	cli    
    ff6f:	fa                   	cli    
    ff70:	fa                   	cli    
    ff71:	fa                   	cli    
    ff72:	fa                   	cli    
    ff73:	fa                   	cli    
    ff74:	fa                   	cli    
    ff75:	fa                   	cli    
    ff76:	fa                   	cli    
    ff77:	fa                   	cli    
    ff78:	fa                   	cli    
    ff79:	fa                   	cli    
    ff7a:	fa                   	cli    
    ff7b:	fa                   	cli    
    ff7c:	fa                   	cli    
    ff7d:	fa                   	cli    
    ff7e:	fa                   	cli    
    ff7f:	fa                   	cli    
    ff80:	fa                   	cli    
    ff81:	fa                   	cli    
    ff82:	fa                   	cli    
    ff83:	fa                   	cli    
    ff84:	fa                   	cli    
    ff85:	fa                   	cli    
    ff86:	fa                   	cli    
    ff87:	fa                   	cli    
    ff88:	fa                   	cli    
    ff89:	fa                   	cli    
    ff8a:	fa                   	cli    
    ff8b:	fa                   	cli    
    ff8c:	fa                   	cli    
    ff8d:	fa                   	cli    
    ff8e:	fa                   	cli    
    ff8f:	fa                   	cli    
    ff90:	fa                   	cli    
    ff91:	fa                   	cli    
    ff92:	fa                   	cli    
    ff93:	fa                   	cli    
    ff94:	fa                   	cli    
    ff95:	fa                   	cli    
    ff96:	fa                   	cli    
    ff97:	fa                   	cli    
    ff98:	fa                   	cli    
    ff99:	fa                   	cli    
    ff9a:	fa                   	cli    
    ff9b:	fa                   	cli    
    ff9c:	fa                   	cli    
    ff9d:	fa                   	cli    
    ff9e:	fa                   	cli    
    ff9f:	fa                   	cli    
    ffa0:	fa                   	cli    
    ffa1:	fa                   	cli    
    ffa2:	fa                   	cli    
    ffa3:	fa                   	cli    
    ffa4:	fa                   	cli    
    ffa5:	fa                   	cli    
    ffa6:	fa                   	cli    
    ffa7:	fa                   	cli    
    ffa8:	fa                   	cli    
    ffa9:	fa                   	cli    
    ffaa:	fa                   	cli    
    ffab:	fa                   	cli    
    ffac:	fa                   	cli    
    ffad:	fa                   	cli    
    ffae:	fa                   	cli    
    ffaf:	fa                   	cli    
    ffb0:	fa                   	cli    
    ffb1:	fa                   	cli    
    ffb2:	fa                   	cli    
    ffb3:	fa                   	cli    
    ffb4:	fa                   	cli    
    ffb5:	fa                   	cli    
    ffb6:	fa                   	cli    
    ffb7:	fa                   	cli    
    ffb8:	fa                   	cli    
    ffb9:	fa                   	cli    
    ffba:	fa                   	cli    
    ffbb:	fa                   	cli    
    ffbc:	fa                   	cli    
    ffbd:	fa                   	cli    
    ffbe:	fa                   	cli    
    ffbf:	fa                   	cli    
    ffc0:	fa                   	cli    
    ffc1:	fa                   	cli    
    ffc2:	fa                   	cli    
    ffc3:	fa                   	cli    

0000ffc4 <irq13ESP>:
irq13ESP():
    ffc4:	00 00                	add    BYTE PTR [eax],al
    ffc6:	10 00                	adc    BYTE PTR [eax],al
    ffc8:	10 00                	adc    BYTE PTR [eax],al
	...

0000ffcc <irq13SavedESP>:
	...

0000ffd4 <irq14ESP>:
irq14ESP():
    ffd4:	00 00                	add    BYTE PTR [eax],al
    ffd6:	10 00                	adc    BYTE PTR [eax],al
    ffd8:	10 00                	adc    BYTE PTR [eax],al
	...

0000ffdc <irq14SavedESP>:
	...

0000ffe4 <espForFatalExceptions>:
espForFatalExceptions():
    ffe4:	00 00                	add    BYTE PTR [eax],al
    ffe6:	10 00                	adc    BYTE PTR [eax],al
    ffe8:	10 00                	adc    BYTE PTR [eax],al
	...

0000ffec <savedESP>:
	...

0000fff4 <bufr>:
	...

00010004 <savedESP_irq0>:
	...

00010014 <debugReturnFlags>:
	...

0001001c <debugESP>:
debugESP():
   1001c:	00 00                	add    BYTE PTR [eax],al
	...

00010020 <_isr_00_wrapper>:
_isr_00_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:38
debugESP: .WORD 0,0


.global _isr_00_wrapper        
_isr_00_wrapper:                #remapped to 0x0a
        mov exceptionSavedESP, esp
   10020:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:39
        mov exceptionAX,eax
   10026:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:40
        mov exceptionBP, ebp
   1002b:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:41
        mov     ebp, esp
   10031:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:42
        mov     ax, 0x0                  # save exception number
   10033:	66 b8 00 00          	mov    ax,0x0
/home/yogi/src/os//chrisOS/asm/isr.s:43
        jmp isr_My_Common
   10037:	e9 5e 01 00 00       	jmp    1019a <isr_My_Common>

0001003c <_isr_02_wrapper>:
_isr_02_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:46
.global _isr_02_wrapper        
_isr_02_wrapper:                #remapped to 0x0a
        mov exceptionSavedESP, esp
   1003c:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:47
        mov exceptionAX,eax
   10042:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:48
        mov exceptionBP, ebp
   10047:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:49
        mov     ebp, esp
   1004d:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:50
        mov     ax, 0x2                  # save exception number
   1004f:	66 b8 02 00          	mov    ax,0x2
/home/yogi/src/os//chrisOS/asm/isr.s:51
        jmp isr_My_Common
   10053:	e9 42 01 00 00       	jmp    1019a <isr_My_Common>

00010058 <_isr_03_wrapper>:
_isr_03_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:60
        mov exceptionAX,eax
        mov exceptionBP, ebp
        mov     ebp, esp
        mov     ax, 0x3                  # save exception number
*/
        orw [esp+8],0x100
   10058:	66 81 4c 24 08 00 01 	or     WORD PTR [esp+0x8],0x100
/home/yogi/src/os//chrisOS/asm/isr.s:61
        pusha
   1005f:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:62
        call activateDebugger
   10060:	e8 6b af 00 00       	call   1afd0 <activateDebugger>
/home/yogi/src/os//chrisOS/asm/isr.s:65
 /*       jmp isr_My_Common
*/
        popa
   10065:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:66
        sti
   10066:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:67
        iretd
   10067:	cf                   	iret   

00010068 <_isr_04_wrapper>:
_isr_04_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:70
.global _isr_04_wrapper        
_isr_04_wrapper:                #remapped to 0x0c
        mov exceptionSavedESP, esp
   10068:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:71
        mov exceptionAX,eax
   1006e:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:72
        mov exceptionBP, ebp
   10073:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:73
        mov     ebp, esp
   10079:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:74
        mov     ax, 0x4                  # save exception number
   1007b:	66 b8 04 00          	mov    ax,0x4
/home/yogi/src/os//chrisOS/asm/isr.s:75
        jmp isr_My_Common
   1007f:	e9 16 01 00 00       	jmp    1019a <isr_My_Common>

00010084 <_isr_05_wrapper>:
_isr_05_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:78
.global _isr_05_wrapper        
_isr_05_wrapper:                #remapped to 0x0d
        mov exceptionSavedESP, esp
   10084:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:79
        mov exceptionAX,eax
   1008a:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:80
        mov exceptionBP, ebp
   1008f:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:81
        mov     ebp, esp
   10095:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:82
        mov     ax, 0x5                  # save exception number
   10097:	66 b8 05 00          	mov    ax,0x5
/home/yogi/src/os//chrisOS/asm/isr.s:83
        jmp isr_My_Common
   1009b:	e9 fa 00 00 00       	jmp    1019a <isr_My_Common>

000100a0 <_isr_06_wrapper>:
_isr_06_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:86
.global _isr_06_wrapper
_isr_06_wrapper:                #remapped to 0x0e
        mov exceptionSavedESP, esp
   100a0:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:87
        mov exceptionAX,eax
   100a6:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:88
        mov exceptionBP, ebp
   100ab:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:89
        mov     ebp, esp
   100b1:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:90
        mov     ax, 0x6                  # save exception number
   100b3:	66 b8 06 00          	mov    ax,0x6
/home/yogi/src/os//chrisOS/asm/isr.s:91
        jmp isr_My_Common
   100b7:	e9 de 00 00 00       	jmp    1019a <isr_My_Common>

000100bc <_isr_07_wrapper>:
_isr_07_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:94
.global _isr_07_wrapper        
_isr_07_wrapper:                #remapped to 0x0f
        mov exceptionSavedESP, esp
   100bc:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:95
        mov exceptionAX,eax
   100c2:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:96
        mov exceptionBP, ebp
   100c7:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:97
        mov     ebp, esp
   100cd:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:98
        mov     ax, 0x7                  # save exception number
   100cf:	66 b8 07 00          	mov    ax,0x7
/home/yogi/src/os//chrisOS/asm/isr.s:99
        jmp isr_My_Common
   100d3:	e9 c2 00 00 00       	jmp    1019a <isr_My_Common>

000100d8 <_isr_08_wrapper>:
_isr_08_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:102
.global _isr_08_wrapper                 #remapped to 0x10
_isr_08_wrapper:                
        mov exceptionSavedESP, esp
   100d8:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:103
        mov exceptionAX,eax
   100de:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:104
        mov exceptionBP, ebp
   100e3:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:105
        mov     ebp, esp
   100e9:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:106
        mov     ax, 0x8                  # save exception number
   100eb:	66 b8 08 00          	mov    ax,0x8
/home/yogi/src/os//chrisOS/asm/isr.s:107
        jmp isr_My_Common
   100ef:	e9 a6 00 00 00       	jmp    1019a <isr_My_Common>
/home/yogi/src/os//chrisOS/asm/isr.s:130
#        mov ebx, cr2
#        mov exceptionCR2, ebx
#        pop ebx
#        pop ebp
        //push bx                         #clr 05/20/2016- We're not going to recover from a double fault so don't try pushing things on the stack to save them because the stack may be corrupted
        mov bx,10
   100f4:	66 bb 0a 00          	mov    bx,0xa
/home/yogi/src/os//chrisOS/asm/isr.s:131
        mov ds,bx
   100f8:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:132
        mov es,bx
   100fa:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:133
        mov fs,bx
   100fc:	8e e3                	mov    fs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:134
        mov gs,bx
   100fe:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:136
        //pop bx                        #clr 05/20/2016- We're not going to recover from a double fault so don't try pushing things on the stack to save them because the stack may be corrupted
        call    doubleFaultHandler     # jump to the common code
   10100:	e8 26 9b 00 00       	call   19c2b <doubleFaultHandler>

00010105 <_isr_09_wrapper>:
_isr_09_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:139
.global _isr_09_wrapper                 #remapped to 0x11
_isr_09_wrapper:
        mov exceptionSavedESP, esp
   10105:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:140
        mov exceptionAX,eax
   1010b:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:141
        mov exceptionBP, ebp
   10110:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:142
        mov     ebp, esp
   10116:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:143
        mov     ax, 0x9                  # save exception number
   10118:	66 b8 09 00          	mov    ax,0x9
/home/yogi/src/os//chrisOS/asm/isr.s:144
        jmp isr_My_Common
   1011c:	eb 7c                	jmp    1019a <isr_My_Common>

0001011e <_isr_10_wrapper>:
_isr_10_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:147
.global _isr_10_wrapper                 #remapped to 0x12
_isr_10_wrapper:                        
        mov exceptionSavedESP, esp
   1011e:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:148
        mov exceptionAX,eax
   10124:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:149
        mov exceptionBP, ebp
   10129:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:150
        mov     ebp, esp
   1012f:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:151
        mov     ax, 0xa                  # save exception number
   10131:	66 b8 0a 00          	mov    ax,0xa
/home/yogi/src/os//chrisOS/asm/isr.s:152
        jmp isr_My_Common
   10135:	eb 63                	jmp    1019a <isr_My_Common>

00010137 <_isr_11_wrapper>:
_isr_11_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:155
.global _isr_11_wrapper                 #remapped to 0x13
_isr_11_wrapper:
        mov exceptionSavedESP, esp
   10137:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:156
        mov exceptionAX,eax
   1013d:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:157
        mov exceptionBP, ebp
   10142:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:158
        mov     ebp, esp
   10148:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:159
        mov     ax, 0x8                  # save exception number
   1014a:	66 b8 08 00          	mov    ax,0x8
/home/yogi/src/os//chrisOS/asm/isr.s:160
        jmp isr_My_Common
   1014e:	eb 4a                	jmp    1019a <isr_My_Common>

00010150 <_isr_12_wrapper>:
_isr_12_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:163
.global _isr_12_wrapper        
_isr_12_wrapper:                        #remapped to 0x14
        mov exceptionSavedESP, esp
   10150:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:164
        mov exceptionAX,eax
   10156:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:165
        mov exceptionBP, ebp
   1015b:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:166
        mov     ebp, esp
   10161:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:167
        mov     ax, 0xc                  # save exception number
   10163:	66 b8 0c 00          	mov    ax,0xc
/home/yogi/src/os//chrisOS/asm/isr.s:168
        jmp isr_My_Common
   10167:	eb 31                	jmp    1019a <isr_My_Common>

00010169 <_isr_13_wrapper>:
_isr_13_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:171
.global _isr_13_wrapper                 #remapped to 0x15
_isr_13_wrapper:
cli;
   10169:	fa                   	cli    
/home/yogi/src/os//chrisOS/asm/isr.s:172
        mov exceptionSavedESP, esp
   1016a:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:173
        mov exceptionAX,eax
   10170:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:174
        mov exceptionBP, ebp
   10175:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:175
        mov     ebp, esp
   1017b:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:176
        mov     ax, 0xd                  # save exception number
   1017d:	66 b8 0d 00          	mov    ax,0xd
/home/yogi/src/os//chrisOS/asm/isr.s:177
        jmp isr_My_Common
   10181:	eb 17                	jmp    1019a <isr_My_Common>

00010183 <_isr_14_wrapper>:
_isr_14_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:181
.global _isr_14_wrapper                 #remapped to 0x16
_isr_14_wrapper:
#cli;hlt;
mov exceptionSavedESP, esp
   10183:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:182
        mov exceptionAX,eax
   10189:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:183
        mov exceptionBP, ebp
   1018e:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:184
        mov     ebp, esp
   10194:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:185
        mov     ax, 0xe                  # save exception number
   10196:	66 b8 0e 00          	mov    ax,0xe

0001019a <isr_My_Common>:
isr_My_Common():
/home/yogi/src/os//chrisOS/asm/isr.s:187
isr_My_Common:
        mov exceptionNumber,ax
   1019a:	66 a3 e4 96 12 00    	mov    ds:0x1296e4,ax
/home/yogi/src/os//chrisOS/asm/isr.s:188
        pushad                          # other regs because its an ISR
   101a0:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:189
        mov eax,ds
   101a1:	8c d8                	mov    eax,ds
/home/yogi/src/os//chrisOS/asm/isr.s:190
        mov exceptionDS,eax
   101a3:	a3 18 97 12 00       	mov    ds:0x129718,eax
/home/yogi/src/os//chrisOS/asm/isr.s:191
        mov exceptionBX, ebx
   101a8:	89 1d f4 96 12 00    	mov    DWORD PTR ds:0x1296f4,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:192
        mov exceptionCX, ecx
   101ae:	89 0d f8 96 12 00    	mov    DWORD PTR ds:0x1296f8,ecx
/home/yogi/src/os//chrisOS/asm/isr.s:193
        mov exceptionDX, edx
   101b4:	89 15 fc 96 12 00    	mov    DWORD PTR ds:0x1296fc,edx
/home/yogi/src/os//chrisOS/asm/isr.s:194
        mov exceptionSI, esi
   101ba:	89 35 00 97 12 00    	mov    DWORD PTR ds:0x129700,esi
/home/yogi/src/os//chrisOS/asm/isr.s:195
        mov exceptionDI, edi
   101c0:	89 3d 04 97 12 00    	mov    DWORD PTR ds:0x129704,edi
/home/yogi/src/os//chrisOS/asm/isr.s:196
        str exceptionTR
   101c6:	0f 00 0d 44 97 12 00 	str    WORD PTR ds:0x129744
/home/yogi/src/os//chrisOS/asm/isr.s:197
        mov eax, cr0
   101cd:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os//chrisOS/asm/isr.s:198
        mov exceptionCR0, eax
   101d0:	a3 0c 97 12 00       	mov    ds:0x12970c,eax
/home/yogi/src/os//chrisOS/asm/isr.s:199
        mov eax, cr3
   101d5:	0f 20 d8             	mov    eax,cr3
/home/yogi/src/os//chrisOS/asm/isr.s:200
        mov exceptionCR3, eax
   101d8:	a3 10 97 12 00       	mov    ds:0x129710,eax
/home/yogi/src/os//chrisOS/asm/isr.s:201
        mov eax, cr4
   101dd:	0f 20 e0             	mov    eax,cr4
/home/yogi/src/os//chrisOS/asm/isr.s:202
        mov exceptionCR4, eax
   101e0:	a3 14 97 12 00       	mov    ds:0x129714,eax
/home/yogi/src/os//chrisOS/asm/isr.s:203
        mov eax,es
   101e5:	8c c0                	mov    eax,es
/home/yogi/src/os//chrisOS/asm/isr.s:204
        mov exceptionES,eax
   101e7:	a3 1c 97 12 00       	mov    ds:0x12971c,eax
/home/yogi/src/os//chrisOS/asm/isr.s:205
        mov eax,fs
   101ec:	8c e0                	mov    eax,fs
/home/yogi/src/os//chrisOS/asm/isr.s:206
        mov exceptionFS,eax
   101ee:	a3 20 97 12 00       	mov    ds:0x129720,eax
/home/yogi/src/os//chrisOS/asm/isr.s:207
        mov eax,gs
   101f3:	8c e8                	mov    eax,gs
/home/yogi/src/os//chrisOS/asm/isr.s:208
        mov exceptionGS,eax
   101f5:	a3 24 97 12 00       	mov    ds:0x129724,eax
/home/yogi/src/os//chrisOS/asm/isr.s:209
        mov eax,ss
   101fa:	8c d0                	mov    eax,ss
/home/yogi/src/os//chrisOS/asm/isr.s:210
        mov exceptionSS,eax
   101fc:	a3 28 97 12 00       	mov    ds:0x129728,eax
/home/yogi/src/os//chrisOS/asm/isr.s:211
        mov eax, exceptionAX
   10201:	a1 f0 96 12 00       	mov    eax,ds:0x1296f0
/home/yogi/src/os//chrisOS/asm/isr.s:212
        mov     bx, 0x10
   10206:	66 bb 10 00          	mov    bx,0x10
/home/yogi/src/os//chrisOS/asm/isr.s:213
        mov     ds, bx
   1020a:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:214
        mov     es, bx                  # load ds and es with valid selector
   1020c:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:215
	mov     gs, bx
   1020e:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:217
    
    mov ebx,exceptionNumber
   10210:	8b 1d e4 96 12 00    	mov    ebx,DWORD PTR ds:0x1296e4
/home/yogi/src/os//chrisOS/asm/isr.s:218
    mov bl,[_isr_has_errorCode+ebx]
   10216:	8a 9b 91 06 01 00    	mov    bl,BYTE PTR [ebx+0x10691]
/home/yogi/src/os//chrisOS/asm/isr.s:219
    cmp bl,1
   1021c:	80 fb 01             	cmp    bl,0x1
/home/yogi/src/os//chrisOS/asm/isr.s:220
    je  getExceptionDetailsWithError
   1021f:	74 1f                	je     10240 <getExceptionDetailsWithError>
/home/yogi/src/os//chrisOS/asm/isr.s:221
    mov ebx, [ebp+8]
   10221:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:222
    mov exceptionFlags, ebx
   10224:	89 1d 30 97 12 00    	mov    DWORD PTR ds:0x129730,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:223
    mov bx, [ebp+4]
   1022a:	66 8b 5d 04          	mov    bx,WORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:224
    mov exceptionCS, bx
   1022e:	66 89 1d 3c 97 12 00 	mov    WORD PTR ds:0x12973c,bx
/home/yogi/src/os//chrisOS/asm/isr.s:225
    mov ebx, [ebp+0]
   10235:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/src/os//chrisOS/asm/isr.s:226
    mov exceptionEIP, ebx
   10238:	89 1d 38 97 12 00    	mov    DWORD PTR ds:0x129738,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:227
    jmp saveTheStack
   1023e:	eb 33                	jmp    10273 <saveTheStack>

00010240 <getExceptionDetailsWithError>:
getExceptionDetailsWithError():
/home/yogi/src/os//chrisOS/asm/isr.s:230

getExceptionDetailsWithError:
     mov ebx, [ebp+12]
   10240:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os//chrisOS/asm/isr.s:231
     mov exceptionFlags, ebx
   10243:	89 1d 30 97 12 00    	mov    DWORD PTR ds:0x129730,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:232
     mov bx, [ebp+8]
   10249:	66 8b 5d 08          	mov    bx,WORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:233
     mov exceptionCS, bx
   1024d:	66 89 1d 3c 97 12 00 	mov    WORD PTR ds:0x12973c,bx
/home/yogi/src/os//chrisOS/asm/isr.s:234
     mov ebx, [ebp+4]
   10254:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:235
     mov exceptionEIP, ebx
   10257:	89 1d 38 97 12 00    	mov    DWORD PTR ds:0x129738,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:236
     mov ebx, cr2
   1025d:	0f 20 d3             	mov    ebx,cr2
/home/yogi/src/os//chrisOS/asm/isr.s:237
     mov exceptionCR2, ebx
   10260:	89 1d 40 97 12 00    	mov    DWORD PTR ds:0x129740,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:238
     mov ebx, [ebp]
   10266:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/src/os//chrisOS/asm/isr.s:239
     movzx ebx,bx
   10269:	0f b7 db             	movzx  ebx,bx
/home/yogi/src/os//chrisOS/asm/isr.s:240
     mov exceptionErrorCode, bx
   1026c:	66 89 1d 34 97 12 00 	mov    WORD PTR ds:0x129734,bx

00010273 <saveTheStack>:
saveTheStack():
/home/yogi/src/os//chrisOS/asm/isr.s:243

saveTheStack:
jmp overSaveTheStack
   10273:	eb 13                	jmp    10288 <overSaveTheStack>
/home/yogi/src/os//chrisOS/asm/isr.s:244
        mov esi, exceptionSavedESP
   10275:	8b 35 2c 97 12 00    	mov    esi,DWORD PTR ds:0x12972c
/home/yogi/src/os//chrisOS/asm/isr.s:246
//        add esi, 16 #drop the 4 dwords that are passed to the proc
        mov edi, exceptionSavedStack
   1027b:	8b 3d e8 96 12 00    	mov    edi,DWORD PTR ds:0x1296e8
/home/yogi/src/os//chrisOS/asm/isr.s:247
        mov cx, 30
   10281:	66 b9 1e 00          	mov    cx,0x1e
/home/yogi/src/os//chrisOS/asm/isr.s:248
        cld
   10285:	fc                   	cld    
/home/yogi/src/os//chrisOS/asm/isr.s:249
        rep movsd
   10286:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]

00010288 <overSaveTheStack>:
overSaveTheStack():
/home/yogi/src/os//chrisOS/asm/isr.s:253

        #Figure out which exception handler to call
overSaveTheStack:
        mov ax,exceptionNumber
   10288:	66 a1 e4 96 12 00    	mov    ax,ds:0x1296e4
/home/yogi/src/os//chrisOS/asm/isr.s:254
        cmp ax,0xe
   1028e:	66 83 f8 0e          	cmp    ax,0xe
/home/yogi/src/os//chrisOS/asm/isr.s:255
        jne notPagingHandler
   10292:	75 09                	jne    1029d <notPagingHandler>
/home/yogi/src/os//chrisOS/asm/isr.s:256
        call 0x08:pagingExceptionHandler
   10294:	9a 1d 9a 01 00 08 00 	call   0x8:0x19a1d
/home/yogi/src/os//chrisOS/asm/isr.s:257
        jmp onTheWayOut
   1029b:	eb 07                	jmp    102a4 <onTheWayOut>

0001029d <notPagingHandler>:
notPagingHandler():
/home/yogi/src/os//chrisOS/asm/isr.s:261

notPagingHandler:
toDefaultHandler:
        call 0x08:defaultISRHandler
   1029d:	9a d5 9b 01 00 08 00 	call   0x8:0x19bd5

000102a4 <onTheWayOut>:
onTheWayOut():
/home/yogi/src/os//chrisOS/asm/isr.s:263
onTheWayOut:
        popad                           # restoring the regs
   102a4:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:264
        mov esp, exceptionSavedESP
   102a5:	8b 25 2c 97 12 00    	mov    esp,DWORD PTR ds:0x12972c
/home/yogi/src/os//chrisOS/asm/isr.s:266
#        add esp, 4 #get rid of error code per prolog http://geezer.osdevbrasil.net/osd/intr/index.htm 9. If the exception pushed an error code, the handler must pop it now and discard it. 
        mov ebx,exceptionNumber
   102ab:	8b 1d e4 96 12 00    	mov    ebx,DWORD PTR ds:0x1296e4
/home/yogi/src/os//chrisOS/asm/isr.s:267
        mov bl,[_isr_has_errorCode+ebx]
   102b1:	8a 9b 91 06 01 00    	mov    bl,BYTE PTR [ebx+0x10691]
/home/yogi/src/os//chrisOS/asm/isr.s:268
        cmp bl,1
   102b7:	80 fb 01             	cmp    bl,0x1
/home/yogi/src/os//chrisOS/asm/isr.s:269
        jnz overCorrection
   102ba:	75 03                	jne    102bf <overCorrection>
/home/yogi/src/os//chrisOS/asm/isr.s:270
        add esp, 4 #get rid of error code per prolog http://geezer.osdevbrasil.net/osd/intr/index.htm 9. If the exception pushed an error code, the handler must pop it now and discard it. 
   102bc:	83 c4 04             	add    esp,0x4

000102bf <overCorrection>:
overCorrection():
/home/yogi/src/os//chrisOS/asm/isr.s:272
overCorrection:
        mov     bx, exceptionDS
   102bf:	66 8b 1d 18 97 12 00 	mov    bx,WORD PTR ds:0x129718
/home/yogi/src/os//chrisOS/asm/isr.s:273
        mov     ds, bx
   102c6:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:274
        mov     bx, exceptionES
   102c8:	66 8b 1d 1c 97 12 00 	mov    bx,WORD PTR ds:0x12971c
/home/yogi/src/os//chrisOS/asm/isr.s:275
        mov     es, bx                  # load ds and es with valid selector
   102cf:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:276
        mov     bx, exceptionFS
   102d1:	66 8b 1d 20 97 12 00 	mov    bx,WORD PTR ds:0x129720
/home/yogi/src/os//chrisOS/asm/isr.s:277
        mov     fs,bx
   102d8:	8e e3                	mov    fs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:278
        mov     bx, exceptionGS
   102da:	66 8b 1d 24 97 12 00 	mov    bx,WORD PTR ds:0x129724
/home/yogi/src/os//chrisOS/asm/isr.s:279
	mov     gs, bx
   102e1:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:280
        mov ebp,exceptionBP
   102e3:	8b 2d 08 97 12 00    	mov    ebp,DWORD PTR ds:0x129708
/home/yogi/src/os//chrisOS/asm/isr.s:281
        mov ebx,exceptionBX
   102e9:	8b 1d f4 96 12 00    	mov    ebx,DWORD PTR ds:0x1296f4
/home/yogi/src/os//chrisOS/asm/isr.s:282
        mov eax, exceptionAX
   102ef:	a1 f0 96 12 00       	mov    eax,ds:0x1296f0
/home/yogi/src/os//chrisOS/asm/isr.s:283
        sti
   102f4:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:284
        iretd
   102f5:	cf                   	iret   

000102f6 <_isr_15_wrapper>:
_isr_15_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:288

.global _isr_15_wrapper        
_isr_15_wrapper:
        mov exceptionSavedESP, esp
   102f6:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:289
        mov exceptionAX,eax
   102fc:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:290
        mov exceptionBP, ebp
   10301:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:291
        mov     ebp, esp
   10307:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:292
        mov     ax, 0xf                  # save exception number
   10309:	66 b8 0f 00          	mov    ax,0xf
/home/yogi/src/os//chrisOS/asm/isr.s:293
        jmp isr_My_Common
   1030d:	e9 88 fe ff ff       	jmp    1019a <isr_My_Common>

00010312 <_isr_16_wrapper>:
_isr_16_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:296
.global _isr_16_wrapper        
_isr_16_wrapper:
        mov exceptionSavedESP, esp
   10312:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:297
        mov exceptionAX,eax
   10318:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:298
        mov exceptionBP, ebp
   1031d:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:299
        mov     ebp, esp
   10323:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:300
        mov     ax, 0x10                  # save exception number
   10325:	66 b8 10 00          	mov    ax,0x10
/home/yogi/src/os//chrisOS/asm/isr.s:301
        jmp isr_My_Common
   10329:	e9 6c fe ff ff       	jmp    1019a <isr_My_Common>

0001032e <_isr_17_wrapper>:
_isr_17_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:304
.global _isr_17_wrapper        
_isr_17_wrapper:
        mov exceptionSavedESP, esp
   1032e:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:305
        mov exceptionAX,eax
   10334:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:306
        mov exceptionBP, ebp
   10339:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:307
        mov     ebp, esp
   1033f:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:308
        mov     ax, 0x11                  # save exception number
   10341:	66 b8 11 00          	mov    ax,0x11
/home/yogi/src/os//chrisOS/asm/isr.s:309
        jmp isr_My_Common
   10345:	e9 50 fe ff ff       	jmp    1019a <isr_My_Common>

0001034a <_isr_18_wrapper>:
_isr_18_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:312
.global _isr_18_wrapper        
_isr_18_wrapper:
        mov exceptionSavedESP, esp
   1034a:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:313
        mov exceptionAX,eax
   10350:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:314
        mov exceptionBP, ebp
   10355:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:315
        mov     ebp, esp
   1035b:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:316
        mov     ax, 0x12                  # save exception number
   1035d:	66 b8 12 00          	mov    ax,0x12
/home/yogi/src/os//chrisOS/asm/isr.s:317
        jmp isr_My_Common
   10361:	e9 34 fe ff ff       	jmp    1019a <isr_My_Common>

00010366 <_isr_19_wrapper>:
_isr_19_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:320
.global _isr_19_wrapper        
_isr_19_wrapper:
        mov exceptionSavedESP, esp
   10366:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:321
        mov exceptionAX,eax
   1036c:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:322
        mov exceptionBP, ebp
   10371:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:323
        mov     ebp, esp
   10377:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:324
        mov     ax, 0x13                  # save exception number
   10379:	66 b8 13 00          	mov    ax,0x13
/home/yogi/src/os//chrisOS/asm/isr.s:325
        jmp isr_My_Common
   1037d:	e9 18 fe ff ff       	jmp    1019a <isr_My_Common>

00010382 <_isr_20_wrapper>:
_isr_20_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:328
.global _isr_20_wrapper        #8 based exception 0x14
_isr_20_wrapper:
        mov exceptionSavedESP, esp
   10382:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:329
        mov exceptionAX,eax
   10388:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:330
        mov exceptionBP, ebp
   1038d:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:331
        mov     ebp, esp
   10393:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:332
        mov     ax, 0x14                  # save exception number
   10395:	66 b8 14 00          	mov    ax,0x14
/home/yogi/src/os//chrisOS/asm/isr.s:333
        jmp isr_My_Common
   10399:	e9 fc fd ff ff       	jmp    1019a <isr_My_Common>

0001039e <_isr_21_wrapper>:
_isr_21_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:336
.global _isr_21_wrapper        
_isr_21_wrapper:
        mov exceptionSavedESP, esp
   1039e:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:337
        mov exceptionAX,eax
   103a4:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:338
        mov exceptionBP, ebp
   103a9:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:339
        mov     ebp, esp
   103af:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:340
        mov     ax, 0x15                  # save exception number
   103b1:	66 b8 15 00          	mov    ax,0x15
/home/yogi/src/os//chrisOS/asm/isr.s:341
        jmp isr_My_Common
   103b5:	e9 e0 fd ff ff       	jmp    1019a <isr_My_Common>

000103ba <_isr_22_wrapper>:
_isr_22_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:344
.global _isr_22_wrapper        
_isr_22_wrapper:
        mov exceptionSavedESP, esp
   103ba:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:345
        mov exceptionAX,eax
   103c0:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:346
        mov exceptionBP, ebp
   103c5:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:347
        mov     ebp, esp
   103cb:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:348
        mov     ax, 0x16                  # save exception number
   103cd:	66 b8 16 00          	mov    ax,0x16
/home/yogi/src/os//chrisOS/asm/isr.s:349
        jmp isr_My_Common
   103d1:	e9 c4 fd ff ff       	jmp    1019a <isr_My_Common>

000103d6 <_isr_23_wrapper>:
_isr_23_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:352
.global _isr_23_wrapper        
_isr_23_wrapper:
        mov exceptionSavedESP, esp
   103d6:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:353
        mov exceptionAX,eax
   103dc:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:354
        mov exceptionBP, ebp
   103e1:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:355
        mov     ebp, esp
   103e7:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:356
        mov     ax, 0x17                  # save exception number
   103e9:	66 b8 17 00          	mov    ax,0x17
/home/yogi/src/os//chrisOS/asm/isr.s:357
        jmp isr_My_Common
   103ed:	e9 a8 fd ff ff       	jmp    1019a <isr_My_Common>

000103f2 <_isr_24_wrapper>:
_isr_24_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:360
.global _isr_24_wrapper        
_isr_24_wrapper:
        mov exceptionSavedESP, esp
   103f2:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:361
        mov exceptionAX,eax
   103f8:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:362
        mov exceptionBP, ebp
   103fd:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:363
        mov     ebp, esp
   10403:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:364
        mov     ax, 0x18                  # save exception number
   10405:	66 b8 18 00          	mov    ax,0x18
/home/yogi/src/os//chrisOS/asm/isr.s:365
        jmp isr_My_Common
   10409:	e9 8c fd ff ff       	jmp    1019a <isr_My_Common>

0001040e <_isr_25_wrapper>:
_isr_25_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:368
.global _isr_25_wrapper        
_isr_25_wrapper:
        mov exceptionSavedESP, esp
   1040e:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:369
        mov exceptionAX,eax
   10414:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:370
        mov exceptionBP, ebp
   10419:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:371
        mov     ebp, esp
   1041f:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:372
        mov     ax, 0x19                  # save exception number
   10421:	66 b8 19 00          	mov    ax,0x19
/home/yogi/src/os//chrisOS/asm/isr.s:373
        jmp isr_My_Common
   10425:	e9 70 fd ff ff       	jmp    1019a <isr_My_Common>

0001042a <_isr_26_wrapper>:
_isr_26_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:376
.global _isr_26_wrapper        
_isr_26_wrapper:
        mov exceptionSavedESP, esp
   1042a:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:377
        mov exceptionAX,eax
   10430:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:378
        mov exceptionBP, ebp
   10435:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:379
        mov     ebp, esp
   1043b:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:380
        mov     ax, 0x1a                  # save exception number
   1043d:	66 b8 1a 00          	mov    ax,0x1a
/home/yogi/src/os//chrisOS/asm/isr.s:381
        jmp isr_My_Common
   10441:	e9 54 fd ff ff       	jmp    1019a <isr_My_Common>

00010446 <_isr_27_wrapper>:
_isr_27_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:384
.global _isr_27_wrapper        
_isr_27_wrapper:
        mov exceptionSavedESP, esp
   10446:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:385
        mov exceptionAX,eax
   1044c:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:386
        mov exceptionBP, ebp
   10451:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:387
        mov     ebp, esp
   10457:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:388
        mov     ax, 0x1b                  # save exception number
   10459:	66 b8 1b 00          	mov    ax,0x1b
/home/yogi/src/os//chrisOS/asm/isr.s:389
        jmp isr_My_Common
   1045d:	e9 38 fd ff ff       	jmp    1019a <isr_My_Common>

00010462 <_isr_28_wrapper>:
_isr_28_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:392
.global _isr_28_wrapper        
_isr_28_wrapper:
        mov exceptionSavedESP, esp
   10462:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:393
        mov exceptionAX,eax
   10468:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:394
        mov exceptionBP, ebp
   1046d:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:395
        mov     ebp, esp
   10473:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:396
        mov     ax, 0x1c                  # save exception number
   10475:	66 b8 1c 00          	mov    ax,0x1c
/home/yogi/src/os//chrisOS/asm/isr.s:397
        jmp isr_My_Common
   10479:	e9 1c fd ff ff       	jmp    1019a <isr_My_Common>

0001047e <_isr_29_wrapper>:
_isr_29_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:400
.global _isr_29_wrapper        
_isr_29_wrapper:
        mov exceptionSavedESP, esp
   1047e:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:401
        mov exceptionAX,eax
   10484:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:402
        mov exceptionBP, ebp
   10489:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:403
        mov     ebp, esp
   1048f:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:404
        mov     ax, 0x1d                  # save exception number
   10491:	66 b8 1d 00          	mov    ax,0x1d
/home/yogi/src/os//chrisOS/asm/isr.s:405
        jmp isr_My_Common
   10495:	e9 00 fd ff ff       	jmp    1019a <isr_My_Common>

0001049a <_isr_30_wrapper>:
_isr_30_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:408
.global _isr_30_wrapper        
_isr_30_wrapper:
        mov exceptionSavedESP, esp
   1049a:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:409
        mov exceptionAX,eax
   104a0:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:410
        mov exceptionBP, ebp
   104a5:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:411
        mov     ebp, esp
   104ab:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:412
        mov     ax, 0x1e                  # save exception number
   104ad:	66 b8 1e 00          	mov    ax,0x1e
/home/yogi/src/os//chrisOS/asm/isr.s:413
        jmp isr_My_Common
   104b1:	e9 e4 fc ff ff       	jmp    1019a <isr_My_Common>

000104b6 <_isr_31_wrapper>:
_isr_31_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:416
.global _isr_31_wrapper        
_isr_31_wrapper:                            #DEBUG EXCEPTION
cli
   104b6:	fa                   	cli    
/home/yogi/src/os//chrisOS/asm/isr.s:417
    mov debugBP,ebp
   104b7:	89 2d 60 97 12 00    	mov    DWORD PTR ds:0x129760,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:418
    mov debugSavedESP, esp
   104bd:	89 25 84 97 12 00    	mov    DWORD PTR ds:0x129784,esp
/home/yogi/src/os//chrisOS/asm/isr.s:419
    mov debugESP,esp
   104c3:	89 25 1c 00 01 00    	mov    DWORD PTR ds:0x1001c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:420
    pushad
   104c9:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:421
    mov ebp, debugESP
   104ca:	8b 2d 1c 00 01 00    	mov    ebp,DWORD PTR ds:0x1001c
/home/yogi/src/os//chrisOS/asm/isr.s:423
    
    mov debugBX, ebx
   104d0:	89 1d 4c 97 12 00    	mov    DWORD PTR ds:0x12974c,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:424
    mov ebx,debugSavedESP
   104d6:	8b 1d 84 97 12 00    	mov    ebx,DWORD PTR ds:0x129784
/home/yogi/src/os//chrisOS/asm/isr.s:425
    add ebx,12
   104dc:	83 c3 0c             	add    ebx,0xc
/home/yogi/src/os//chrisOS/asm/isr.s:426
    mov debugSavedESP,ebx
   104df:	89 1d 84 97 12 00    	mov    DWORD PTR ds:0x129784,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:427
    mov ebx, [ebp+8]
   104e5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:428
    mov debugFlags, ebx
   104e8:	89 1d 88 97 12 00    	mov    DWORD PTR ds:0x129788,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:429
    mov debugReturnFlags,ebx
   104ee:	89 1d 14 00 01 00    	mov    DWORD PTR ds:0x10014,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:430
    movw bx, [ebp+4]
   104f4:	66 8b 5d 04          	mov    bx,WORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:431
    movw debugCS, bx
   104f8:	66 89 1d 90 97 12 00 	mov    WORD PTR ds:0x129790,bx
/home/yogi/src/os//chrisOS/asm/isr.s:432
    mov ebx, [ebp+0]
   104ff:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/src/os//chrisOS/asm/isr.s:433
    mov debugEIP, ebx
   10502:	89 1d 94 97 12 00    	mov    DWORD PTR ds:0x129794,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:435

    mov debugCX, ecx
   10508:	89 0d 50 97 12 00    	mov    DWORD PTR ds:0x129750,ecx
/home/yogi/src/os//chrisOS/asm/isr.s:436
    mov debugDX, edx
   1050e:	89 15 54 97 12 00    	mov    DWORD PTR ds:0x129754,edx
/home/yogi/src/os//chrisOS/asm/isr.s:437
    mov debugSI, esi
   10514:	89 35 58 97 12 00    	mov    DWORD PTR ds:0x129758,esi
/home/yogi/src/os//chrisOS/asm/isr.s:438
    mov debugDI, edi
   1051a:	89 3d 5c 97 12 00    	mov    DWORD PTR ds:0x12975c,edi
/home/yogi/src/os//chrisOS/asm/isr.s:439
    mov debugAX,eax
   10520:	a3 48 97 12 00       	mov    ds:0x129748,eax
/home/yogi/src/os//chrisOS/asm/isr.s:441

    movw ax,ds
   10525:	66 8c d8             	mov    ax,ds
/home/yogi/src/os//chrisOS/asm/isr.s:442
    movw debugDS,eax
   10528:	66 a3 70 97 12 00    	mov    ds:0x129770,ax
/home/yogi/src/os//chrisOS/asm/isr.s:443
    mov eax, cr0
   1052e:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os//chrisOS/asm/isr.s:444
    mov debugCR0, eax
   10531:	a3 64 97 12 00       	mov    ds:0x129764,eax
/home/yogi/src/os//chrisOS/asm/isr.s:445
    mov eax, cr3
   10536:	0f 20 d8             	mov    eax,cr3
/home/yogi/src/os//chrisOS/asm/isr.s:446
    mov debugCR3, eax
   10539:	a3 68 97 12 00       	mov    ds:0x129768,eax
/home/yogi/src/os//chrisOS/asm/isr.s:447
    mov eax, cr4
   1053e:	0f 20 e0             	mov    eax,cr4
/home/yogi/src/os//chrisOS/asm/isr.s:448
    mov debugCR4, eax
   10541:	a3 6c 97 12 00       	mov    ds:0x12976c,eax
/home/yogi/src/os//chrisOS/asm/isr.s:449
    mov eax,es
   10546:	8c c0                	mov    eax,es
/home/yogi/src/os//chrisOS/asm/isr.s:450
    mov debugES,eax
   10548:	a3 74 97 12 00       	mov    ds:0x129774,eax
/home/yogi/src/os//chrisOS/asm/isr.s:451
    mov eax,fs
   1054d:	8c e0                	mov    eax,fs
/home/yogi/src/os//chrisOS/asm/isr.s:452
    mov debugFS,eax
   1054f:	a3 78 97 12 00       	mov    ds:0x129778,eax
/home/yogi/src/os//chrisOS/asm/isr.s:453
    mov eax,gs
   10554:	8c e8                	mov    eax,gs
/home/yogi/src/os//chrisOS/asm/isr.s:454
    mov debugGS,eax
   10556:	a3 7c 97 12 00       	mov    ds:0x12977c,eax
/home/yogi/src/os//chrisOS/asm/isr.s:455
    mov eax,ss
   1055b:	8c d0                	mov    eax,ss
/home/yogi/src/os//chrisOS/asm/isr.s:456
    mov debugSS,eax
   1055d:	a3 80 97 12 00       	mov    ds:0x129780,eax
/home/yogi/src/os//chrisOS/asm/isr.s:458

    mov esi, debugSavedESP
   10562:	8b 35 84 97 12 00    	mov    esi,DWORD PTR ds:0x129784
/home/yogi/src/os//chrisOS/asm/isr.s:459
    mov edi, debugSavedStack
   10568:	8b 3d ec 96 12 00    	mov    edi,DWORD PTR ds:0x1296ec
/home/yogi/src/os//chrisOS/asm/isr.s:460
    mov cx, 30
   1056e:	66 b9 1e 00          	mov    cx,0x1e
/home/yogi/src/os//chrisOS/asm/isr.s:461
    cld
   10572:	fc                   	cld    
/home/yogi/src/os//chrisOS/asm/isr.s:462
    rep movsd
   10573:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
/home/yogi/src/os//chrisOS/asm/isr.s:463
    call debugStep
   10575:	e8 47 ab 00 00       	call   1b0c1 <debugStep>
/home/yogi/src/os//chrisOS/asm/isr.s:464
    popa
   1057a:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:465
    sti
   1057b:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:466
    iretd
   1057c:	cf                   	iret   

0001057d <_isr_32_wrapper>:
_isr_32_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:469
.global _isr_32_wrapper        
_isr_32_wrapper:
        mov exceptionSavedESP, esp
   1057d:	89 25 2c 97 12 00    	mov    DWORD PTR ds:0x12972c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:470
        mov exceptionAX,eax
   10583:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:471
        mov exceptionBP, ebp
   10588:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:472
        mov     ebp, esp
   1058e:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:473
        mov     ax, 0x20                  # save exception number
   10590:	66 b8 20 00          	mov    ax,0x20
/home/yogi/src/os//chrisOS/asm/isr.s:474
        jmp isr_My_Common
   10594:	e9 01 fc ff ff       	jmp    1019a <isr_My_Common>

00010599 <_irq0_handler>:
_irq0_handler():
/home/yogi/src/os//chrisOS/asm/isr.s:479


.global _irq0_handler
_irq0_handler:                #remapped to 0x08
cli
   10599:	fa                   	cli    
/home/yogi/src/os//chrisOS/asm/isr.s:481
#cli;hlt;
        push    ebp
   1059a:	55                   	push   ebp
/home/yogi/src/os//chrisOS/asm/isr.s:482
        pushf
   1059b:	9c                   	pushf  
/home/yogi/src/os//chrisOS/asm/isr.s:483
        mov     ebp, esp
   1059c:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:484
        add ebp,4
   1059e:	83 c5 04             	add    ebp,0x4
/home/yogi/src/os//chrisOS/asm/isr.s:485
        push eax
   105a1:	50                   	push   eax
/home/yogi/src/os//chrisOS/asm/isr.s:486
        mov ax,0xFFFF
   105a2:	66 b8 ff ff          	mov    ax,0xffff
/home/yogi/src/os//chrisOS/asm/isr.s:487
cld
   105a6:	fc                   	cld    
/home/yogi/src/os//chrisOS/asm/isr.s:489
#cld #C code following the sysV ABI requires DF to be clear on function entry
        push    ebx
   105a7:	53                   	push   ebx
/home/yogi/src/os//chrisOS/asm/isr.s:490
        mov ebx, [ebp+12]
   105a8:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os//chrisOS/asm/isr.s:491
        mov exceptionFlags, ebx
   105ab:	89 1d 30 97 12 00    	mov    DWORD PTR ds:0x129730,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:492
        mov bx, [ebp+8]
   105b1:	66 8b 5d 08          	mov    bx,WORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:493
        mov exceptionCS, bx
   105b5:	66 89 1d 3c 97 12 00 	mov    WORD PTR ds:0x12973c,bx
/home/yogi/src/os//chrisOS/asm/isr.s:494
        mov ebx, [ebp+4]
   105bc:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:495
        mov exceptionEIP, ebx
   105bf:	89 1d 38 97 12 00    	mov    DWORD PTR ds:0x129738,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:496
        pop ebx
   105c5:	5b                   	pop    ebx
/home/yogi/src/os//chrisOS/asm/isr.s:497
        pushad                          # other regs because its an ISR
   105c6:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:498
         mov     bx, 0x10
   105c7:	66 bb 10 00          	mov    bx,0x10
/home/yogi/src/os//chrisOS/asm/isr.s:499
        mov     ds, bx
   105cb:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:500
        mov     es, bx                  # load ds and es with valid selector
   105cd:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:501
	mov     gs, bx
   105cf:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:502
        call    irq0_handler          # call actual ISR code
   105d1:	e8 3e 8f 00 00       	call   19514 <irq0_handler>
/home/yogi/src/os//chrisOS/asm/isr.s:503
        popad  
   105d6:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:504
mov al,0x20
   105d7:	b0 20                	mov    al,0x20
/home/yogi/src/os//chrisOS/asm/isr.s:505
out 0x20,al
   105d9:	e6 20                	out    0x20,al
/home/yogi/src/os//chrisOS/asm/isr.s:508
//mov eax,0
//mov [0xa000B0],eax
        pop eax
   105db:	58                   	pop    eax
/home/yogi/src/os//chrisOS/asm/isr.s:509
        popf
   105dc:	9d                   	popf   
/home/yogi/src/os//chrisOS/asm/isr.s:510
        pop ebp                         # restoring the regs
   105dd:	5d                   	pop    ebp
/home/yogi/src/os//chrisOS/asm/isr.s:511
        sti
   105de:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:512
        iretd
   105df:	cf                   	iret   

000105e0 <_isr_01_wrapper>:
_isr_01_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:515
.global _isr_01_wrapper        
_isr_01_wrapper:                #KEYBOARD HANDLER
cli
   105e0:	fa                   	cli    
/home/yogi/src/os//chrisOS/asm/isr.s:520
#cli;hlt;
        //clear the trap flag if it is set
        //we'll re-set it later if need be
        //andw [esp+8],0xFEFF
        mov exceptionAX, eax
   105e1:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:521
        mov exceptionBX, ebx
   105e6:	89 1d f4 96 12 00    	mov    DWORD PTR ds:0x1296f4,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:522
        mov exceptionCX, ecx
   105ec:	89 0d f8 96 12 00    	mov    DWORD PTR ds:0x1296f8,ecx
/home/yogi/src/os//chrisOS/asm/isr.s:523
        mov exceptionDX, edx
   105f2:	89 15 fc 96 12 00    	mov    DWORD PTR ds:0x1296fc,edx
/home/yogi/src/os//chrisOS/asm/isr.s:524
        mov exceptionSI, esi
   105f8:	89 35 00 97 12 00    	mov    DWORD PTR ds:0x129700,esi
/home/yogi/src/os//chrisOS/asm/isr.s:525
        mov exceptionDI, edi
   105fe:	89 3d 04 97 12 00    	mov    DWORD PTR ds:0x129704,edi
/home/yogi/src/os//chrisOS/asm/isr.s:526
        str exceptionTR
   10604:	0f 00 0d 44 97 12 00 	str    WORD PTR ds:0x129744
/home/yogi/src/os//chrisOS/asm/isr.s:527
        mov exceptionBP, ebp
   1060b:	89 2d 08 97 12 00    	mov    DWORD PTR ds:0x129708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:528
        mov eax, cr0
   10611:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os//chrisOS/asm/isr.s:529
        mov exceptionCR0, eax
   10614:	a3 0c 97 12 00       	mov    ds:0x12970c,eax
/home/yogi/src/os//chrisOS/asm/isr.s:530
        mov eax, cr3
   10619:	0f 20 d8             	mov    eax,cr3
/home/yogi/src/os//chrisOS/asm/isr.s:531
        mov exceptionCR3, eax
   1061c:	a3 10 97 12 00       	mov    ds:0x129710,eax
/home/yogi/src/os//chrisOS/asm/isr.s:532
        mov eax, cr4
   10621:	0f 20 e0             	mov    eax,cr4
/home/yogi/src/os//chrisOS/asm/isr.s:533
        mov exceptionCR4, eax
   10624:	a3 14 97 12 00       	mov    ds:0x129714,eax
/home/yogi/src/os//chrisOS/asm/isr.s:534
        mov eax, exceptionAX
   10629:	a1 f0 96 12 00       	mov    eax,ds:0x1296f0
/home/yogi/src/os//chrisOS/asm/isr.s:535
        pushad
   1062e:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:536
        pushf
   1062f:	9c                   	pushf  
/home/yogi/src/os//chrisOS/asm/isr.s:537
        mov     ebp, esp
   10630:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:538
        add ebp,36
   10632:	83 c5 24             	add    ebp,0x24
/home/yogi/src/os//chrisOS/asm/isr.s:539
        mov ax,0x0001
   10635:	66 b8 01 00          	mov    ax,0x1
/home/yogi/src/os//chrisOS/asm/isr.s:540
cld
   10639:	fc                   	cld    
/home/yogi/src/os//chrisOS/asm/isr.s:542
#cld #C code following the sysV ABI requires DF to be clear on function entry
        mov ebx, [ebp+8]
   1063a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:543
        mov exceptionFlags, ebx
   1063d:	89 1d 30 97 12 00    	mov    DWORD PTR ds:0x129730,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:544
        mov bx, [ebp+4]
   10643:	66 8b 5d 04          	mov    bx,WORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:545
        mov exceptionCS, bx
   10647:	66 89 1d 3c 97 12 00 	mov    WORD PTR ds:0x12973c,bx
/home/yogi/src/os//chrisOS/asm/isr.s:546
        mov ebx, [ebp+0]
   1064e:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/src/os//chrisOS/asm/isr.s:547
        mov exceptionEIP, ebx
   10651:	89 1d 38 97 12 00    	mov    DWORD PTR ds:0x129738,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:548
        mov     bx, 0x10
   10657:	66 bb 10 00          	mov    bx,0x10
/home/yogi/src/os//chrisOS/asm/isr.s:549
        mov     ds, bx
   1065b:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:550
        mov     es, bx                  # load ds and es with valid selector
   1065d:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:551
	mov     gs, bx
   1065f:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:552
        call    kbd_handler          # call actual ISR code
   10661:	e8 f9 8f 00 00       	call   1965f <kbd_handler>
/home/yogi/src/os//chrisOS/asm/isr.s:553
        popf
   10666:	9d                   	popf   
/home/yogi/src/os//chrisOS/asm/isr.s:554
        popad  
   10667:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:555
mov al,0x20
   10668:	b0 20                	mov    al,0x20
/home/yogi/src/os//chrisOS/asm/isr.s:556
out 0x20,al
   1066a:	e6 20                	out    0x20,al
/home/yogi/src/os//chrisOS/asm/isr.s:557
        mov     al,kKbdHandlerActivateDebugger
   1066c:	a0 74 65 09 00       	mov    al,ds:0x96574
/home/yogi/src/os//chrisOS/asm/isr.s:558
        cmp     al,1
   10671:	3c 01                	cmp    al,0x1
/home/yogi/src/os//chrisOS/asm/isr.s:559
        jne done
   10673:	75 13                	jne    10688 <done>
/home/yogi/src/os//chrisOS/asm/isr.s:560
        orw [esp+8],0x100
   10675:	66 81 4c 24 08 00 01 	or     WORD PTR [esp+0x8],0x100
/home/yogi/src/os//chrisOS/asm/isr.s:561
        mov al,0
   1067c:	b0 00                	mov    al,0x0
/home/yogi/src/os//chrisOS/asm/isr.s:562
        mov kKbdHandlerActivateDebugger,al
   1067e:	a2 74 65 09 00       	mov    ds:0x96574,al
/home/yogi/src/os//chrisOS/asm/isr.s:563
        mov eax,exceptionAX
   10683:	a1 f0 96 12 00       	mov    eax,ds:0x1296f0

00010688 <done>:
done():
/home/yogi/src/os//chrisOS/asm/isr.s:565
done:
        sti
   10688:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:566
        iretd
   10689:	cf                   	iret   

0001068a <_call_gate_wrapper>:
_call_gate_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:571


.global _call_gate_wrapper
_call_gate_wrapper:
        push    ds
   1068a:	1e                   	push   ds
/home/yogi/src/os//chrisOS/asm/isr.s:572
        push    es                      # saving segment registers and
   1068b:	06                   	push   es
/home/yogi/src/os//chrisOS/asm/isr.s:573
        pushad                          # other regs because its an ISR
   1068c:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:575
 #       call    call_gate_proc
        popad                           # restoring the regs
   1068d:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:576
        pop     es
   1068e:	07                   	pop    es
/home/yogi/src/os//chrisOS/asm/isr.s:577
        pop     ds
   1068f:	1f                   	pop    ds
/home/yogi/src/os//chrisOS/asm/isr.s:578
        retf
   10690:	cb                   	retf   

00010691 <_isr_has_errorCode>:
	...
_isr_has_errorCode():
   10699:	01 00                	add    DWORD PTR [eax],eax
   1069b:	01 01                	add    DWORD PTR [ecx],eax
   1069d:	01 01                	add    DWORD PTR [ecx],eax
   1069f:	01 00                	add    DWORD PTR [eax],eax
   106a1:	00 01                	add    BYTE PTR [ecx],al
	...

000106b1 <_ltr>:
_ltr():
/home/yogi/src/os//chrisOS/asm/isr.s:584

        _isr_has_errorCode:  .byte      0,0,0,0,0,0,0,0, 1,0,1,1,1,1,1,0
                             .byte      0,1,0,0,0,0,0,0, 0,0,0,0,0,0,0,0
.global _ltr
_ltr:
		push ax
   106b1:	66 50                	push   ax
/home/yogi/src/os//chrisOS/asm/isr.s:585
		mov ax, 0x58
   106b3:	66 b8 58 00          	mov    ax,0x58
/home/yogi/src/os//chrisOS/asm/isr.s:586
        ltr     ax
   106b7:	0f 00 d8             	ltr    ax
/home/yogi/src/os//chrisOS/asm/isr.s:587
        pop ax
   106ba:	66 58                	pop    ax
/home/yogi/src/os//chrisOS/asm/isr.s:588
        ret
   106bc:	c3                   	ret    
   106bd:	66 90                	xchg   ax,ax
   106bf:	90                   	nop

000106c0 <strftime>:
strftime():
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:58

static char *_fmt(const char *format, const struct tm *t, char *pt, const char *ptlim);
static char *_conv(const int n, char *format, char *pt, const char *ptlim);
static char *_add(const char *str, char *pt, const char *ptlim);

size_t HIGH_CODE_SECTION strftime(char *s, size_t maxsize, const char *format, const struct tm *t) {
   106c0:	55                   	push   ebp
   106c1:	89 e5                	mov    ebp,esp
   106c3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:61
  char *p;

  p = _fmt(((format == NULL) ? "%c" : format), t, s, s + maxsize);
   106c6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   106c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   106cc:	01 c2                	add    edx,eax
   106ce:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   106d2:	74 05                	je     106d9 <strftime+0x19>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:61 (discriminator 1)
   106d4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   106d7:	eb 05                	jmp    106de <strftime+0x1e>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:61 (discriminator 2)
   106d9:	b8 00 50 04 00       	mov    eax,0x45000
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:61 (discriminator 4)
   106de:	52                   	push   edx
   106df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   106e2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   106e5:	50                   	push   eax
   106e6:	e8 2c 00 00 00       	call   10717 <_fmt>
   106eb:	83 c4 10             	add    esp,0x10
   106ee:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:62 (discriminator 4)
  if (p == s + maxsize) return 0;
   106f1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   106f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   106f7:	01 d0                	add    eax,edx
   106f9:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   106fc:	75 07                	jne    10705 <strftime+0x45>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:62 (discriminator 1)
   106fe:	b8 00 00 00 00       	mov    eax,0x0
   10703:	eb 10                	jmp    10715 <strftime+0x55>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:63
  *p = '\0';
   10705:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   10708:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:64
  return p - s;
   1070b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1070e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10711:	29 c2                	sub    edx,eax
   10713:	89 d0                	mov    eax,edx
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:65
}
   10715:	c9                   	leave  
   10716:	c3                   	ret    

00010717 <_fmt>:
_fmt():
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:67

static HIGH_CODE_SECTION char *_fmt(const char *format, const struct tm *t, char *pt, const char *ptlim) {
   10717:	55                   	push   ebp
   10718:	89 e5                	mov    ebp,esp
   1071a:	53                   	push   ebx
   1071b:	83 ec 74             	sub    esp,0x74
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:68
  for ( ; *format; ++format) {
   1071e:	e9 68 0a 00 00       	jmp    1118b <_fmt+0xa74>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:69
    if (*format == '%') {
   10723:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10726:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10729:	3c 25                	cmp    al,0x25
   1072b:	0f 85 3d 0a 00 00    	jne    1116e <_fmt+0xa57>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:70
      if (*format == 'E') {
   10731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10734:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10737:	3c 45                	cmp    al,0x45
   10739:	75 06                	jne    10741 <_fmt+0x2a>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:71
        format++; // Alternate Era
   1073b:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   1073f:	eb 0e                	jmp    1074f <_fmt+0x38>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:72
      } else if (*format == 'O') {
   10741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10744:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10747:	3c 4f                	cmp    al,0x4f
   10749:	75 04                	jne    1074f <_fmt+0x38>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:73
        format++; // Alternate numeric symbols
   1074b:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:76
      }

      switch (*++format) {
   1074f:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   10753:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10756:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10759:	0f be c0             	movsx  eax,al
   1075c:	83 f8 7a             	cmp    eax,0x7a
   1075f:	0f 87 08 0a 00 00    	ja     1116d <_fmt+0xa56>
   10765:	8b 04 85 94 50 04 00 	mov    eax,DWORD PTR [eax*4+0x45094]
   1076c:	ff e0                	jmp    eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:78
        case '\0':
          --format;
   1076e:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:79
          break;
   10772:	e9 f7 09 00 00       	jmp    1116e <_fmt+0xa57>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82

        case 'A':
          pt = _add((t->tm_wday < 0 || t->tm_wday > 6) ? "?" : _days[t->tm_wday], pt, ptlim);
   10777:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1077a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   1077d:	85 c0                	test   eax,eax
   1077f:	78 1a                	js     1079b <_fmt+0x84>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82 (discriminator 1)
   10781:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10784:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10787:	83 f8 06             	cmp    eax,0x6
   1078a:	7f 0f                	jg     1079b <_fmt+0x84>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82 (discriminator 3)
   1078c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1078f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10792:	8b 04 85 9c 99 12 00 	mov    eax,DWORD PTR [eax*4+0x12999c]
   10799:	eb 05                	jmp    107a0 <_fmt+0x89>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82 (discriminator 4)
   1079b:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82 (discriminator 6)
   107a0:	83 ec 04             	sub    esp,0x4
   107a3:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   107a6:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   107a9:	50                   	push   eax
   107aa:	e8 27 0a 00 00       	call   111d6 <_add>
   107af:	83 c4 10             	add    esp,0x10
   107b2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:83 (discriminator 6)
          continue;
   107b5:	e9 cd 09 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86

        case 'a':
          pt = _add((t->tm_wday < 0 || t->tm_wday > 6) ? "?" : _days_abbrev[t->tm_wday], pt, ptlim);
   107ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107bd:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   107c0:	85 c0                	test   eax,eax
   107c2:	78 1a                	js     107de <_fmt+0xc7>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86 (discriminator 1)
   107c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107c7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   107ca:	83 f8 06             	cmp    eax,0x6
   107cd:	7f 0f                	jg     107de <_fmt+0xc7>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86 (discriminator 3)
   107cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107d2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   107d5:	8b 04 85 b8 99 12 00 	mov    eax,DWORD PTR [eax*4+0x1299b8]
   107dc:	eb 05                	jmp    107e3 <_fmt+0xcc>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86 (discriminator 4)
   107de:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86 (discriminator 6)
   107e3:	83 ec 04             	sub    esp,0x4
   107e6:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   107e9:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   107ec:	50                   	push   eax
   107ed:	e8 e4 09 00 00       	call   111d6 <_add>
   107f2:	83 c4 10             	add    esp,0x10
   107f5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:87 (discriminator 6)
          continue;
   107f8:	e9 8a 09 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90

        case 'B':
          pt = _add((t->tm_mon < 0 || t->tm_mon > 11) ? "?" : _months[t->tm_mon], pt, ptlim);
   107fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10800:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10803:	85 c0                	test   eax,eax
   10805:	78 1a                	js     10821 <_fmt+0x10a>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90 (discriminator 1)
   10807:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1080a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1080d:	83 f8 0b             	cmp    eax,0xb
   10810:	7f 0f                	jg     10821 <_fmt+0x10a>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90 (discriminator 3)
   10812:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10815:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10818:	8b 04 85 e0 99 12 00 	mov    eax,DWORD PTR [eax*4+0x1299e0]
   1081f:	eb 05                	jmp    10826 <_fmt+0x10f>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90 (discriminator 4)
   10821:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90 (discriminator 6)
   10826:	83 ec 04             	sub    esp,0x4
   10829:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1082c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1082f:	50                   	push   eax
   10830:	e8 a1 09 00 00       	call   111d6 <_add>
   10835:	83 c4 10             	add    esp,0x10
   10838:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:91 (discriminator 6)
          continue;
   1083b:	e9 47 09 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95

        case 'b':
        case 'h':
          pt = _add((t->tm_mon < 0 || t->tm_mon > 11) ? "?" : _months_abbrev[t->tm_mon], pt, ptlim);
   10840:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10843:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10846:	85 c0                	test   eax,eax
   10848:	78 1a                	js     10864 <_fmt+0x14d>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95 (discriminator 1)
   1084a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1084d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10850:	83 f8 0b             	cmp    eax,0xb
   10853:	7f 0f                	jg     10864 <_fmt+0x14d>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95 (discriminator 3)
   10855:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10858:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1085b:	8b 04 85 20 9a 12 00 	mov    eax,DWORD PTR [eax*4+0x129a20]
   10862:	eb 05                	jmp    10869 <_fmt+0x152>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95 (discriminator 4)
   10864:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95 (discriminator 6)
   10869:	83 ec 04             	sub    esp,0x4
   1086c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1086f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10872:	50                   	push   eax
   10873:	e8 5e 09 00 00       	call   111d6 <_add>
   10878:	83 c4 10             	add    esp,0x10
   1087b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:96 (discriminator 6)
          continue;
   1087e:	e9 04 09 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:99

        case 'C':
          pt = _conv((t->tm_year + TM_YEAR_BASE) / 100, "%02d", pt, ptlim);
   10883:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10886:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   10889:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   1088f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10894:	89 c8                	mov    eax,ecx
   10896:	f7 ea                	imul   edx
   10898:	c1 fa 05             	sar    edx,0x5
   1089b:	89 c8                	mov    eax,ecx
   1089d:	c1 f8 1f             	sar    eax,0x1f
   108a0:	29 c2                	sub    edx,eax
   108a2:	89 d0                	mov    eax,edx
   108a4:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   108a7:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   108aa:	68 05 50 04 00       	push   0x45005
   108af:	50                   	push   eax
   108b0:	e8 ef 08 00 00       	call   111a4 <_conv>
   108b5:	83 c4 10             	add    esp,0x10
   108b8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:100
          continue;
   108bb:	e9 c7 08 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:103

        case 'c':
          pt = _fmt("%a %b %e %H:%M:%S %Y", t, pt, ptlim);
   108c0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   108c3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   108c6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   108c9:	68 0a 50 04 00       	push   0x4500a
   108ce:	e8 44 fe ff ff       	call   10717 <_fmt>
   108d3:	83 c4 10             	add    esp,0x10
   108d6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:104
          continue;
   108d9:	e9 a9 08 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:107

        case 'D':
          pt = _fmt("%m/%d/%y", t, pt, ptlim);
   108de:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   108e1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   108e4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   108e7:	68 1f 50 04 00       	push   0x4501f
   108ec:	e8 26 fe ff ff       	call   10717 <_fmt>
   108f1:	83 c4 10             	add    esp,0x10
   108f4:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:108
          continue;
   108f7:	e9 8b 08 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:111

        case 'd':
          pt = _conv(t->tm_mday, "%02d", pt, ptlim);
   108fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   108ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   10902:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10905:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10908:	68 05 50 04 00       	push   0x45005
   1090d:	50                   	push   eax
   1090e:	e8 91 08 00 00       	call   111a4 <_conv>
   10913:	83 c4 10             	add    esp,0x10
   10916:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:112
          continue;
   10919:	e9 69 08 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:115

        case 'e':
          pt = _conv(t->tm_mday, "%2d", pt, ptlim);
   1091e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10921:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   10924:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10927:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1092a:	68 28 50 04 00       	push   0x45028
   1092f:	50                   	push   eax
   10930:	e8 6f 08 00 00       	call   111a4 <_conv>
   10935:	83 c4 10             	add    esp,0x10
   10938:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:116
          continue;
   1093b:	e9 47 08 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:119

        case 'F':
          pt = _fmt("%Y-%m-%d", t, pt, ptlim);
   10940:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10943:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10946:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10949:	68 2c 50 04 00       	push   0x4502c
   1094e:	e8 c4 fd ff ff       	call   10717 <_fmt>
   10953:	83 c4 10             	add    esp,0x10
   10956:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:120
          continue;
   10959:	e9 29 08 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:123

        case 'H':
          pt = _conv(t->tm_hour, "%02d", pt, ptlim);
   1095e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10961:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   10964:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10967:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1096a:	68 05 50 04 00       	push   0x45005
   1096f:	50                   	push   eax
   10970:	e8 2f 08 00 00       	call   111a4 <_conv>
   10975:	83 c4 10             	add    esp,0x10
   10978:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:124
          continue;
   1097b:	e9 07 08 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:127

        case 'I':
          pt = _conv((t->tm_hour % 12) ? (t->tm_hour % 12) : 12, "%02d", pt, ptlim);
   10980:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10983:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   10986:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   1098b:	89 c8                	mov    eax,ecx
   1098d:	f7 ea                	imul   edx
   1098f:	d1 fa                	sar    edx,1
   10991:	89 c8                	mov    eax,ecx
   10993:	c1 f8 1f             	sar    eax,0x1f
   10996:	29 c2                	sub    edx,eax
   10998:	89 d0                	mov    eax,edx
   1099a:	01 c0                	add    eax,eax
   1099c:	01 d0                	add    eax,edx
   1099e:	c1 e0 02             	shl    eax,0x2
   109a1:	29 c1                	sub    ecx,eax
   109a3:	89 ca                	mov    edx,ecx
   109a5:	85 d2                	test   edx,edx
   109a7:	74 27                	je     109d0 <_fmt+0x2b9>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:127 (discriminator 1)
   109a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   109ac:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   109af:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   109b4:	89 c8                	mov    eax,ecx
   109b6:	f7 ea                	imul   edx
   109b8:	d1 fa                	sar    edx,1
   109ba:	89 c8                	mov    eax,ecx
   109bc:	c1 f8 1f             	sar    eax,0x1f
   109bf:	29 c2                	sub    edx,eax
   109c1:	89 d0                	mov    eax,edx
   109c3:	01 c0                	add    eax,eax
   109c5:	01 d0                	add    eax,edx
   109c7:	c1 e0 02             	shl    eax,0x2
   109ca:	29 c1                	sub    ecx,eax
   109cc:	89 ca                	mov    edx,ecx
   109ce:	eb 05                	jmp    109d5 <_fmt+0x2be>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:127 (discriminator 2)
   109d0:	ba 0c 00 00 00       	mov    edx,0xc
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:127 (discriminator 4)
   109d5:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   109d8:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   109db:	68 05 50 04 00       	push   0x45005
   109e0:	52                   	push   edx
   109e1:	e8 be 07 00 00       	call   111a4 <_conv>
   109e6:	83 c4 10             	add    esp,0x10
   109e9:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:128 (discriminator 4)
          continue;
   109ec:	e9 96 07 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:131

        case 'j':
          pt = _conv(t->tm_yday + 1, "%03d", pt, ptlim);
   109f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   109f4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   109f7:	83 c0 01             	add    eax,0x1
   109fa:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   109fd:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10a00:	68 35 50 04 00       	push   0x45035
   10a05:	50                   	push   eax
   10a06:	e8 99 07 00 00       	call   111a4 <_conv>
   10a0b:	83 c4 10             	add    esp,0x10
   10a0e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:132
          continue;
   10a11:	e9 71 07 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:135

        case 'k':
          pt = _conv(t->tm_hour, "%2d", pt, ptlim);
   10a16:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10a19:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   10a1c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10a1f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10a22:	68 28 50 04 00       	push   0x45028
   10a27:	50                   	push   eax
   10a28:	e8 77 07 00 00       	call   111a4 <_conv>
   10a2d:	83 c4 10             	add    esp,0x10
   10a30:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:136
          continue;
   10a33:	e9 4f 07 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:139

        case 'l':
          pt = _conv((t->tm_hour % 12) ? (t->tm_hour % 12) : 12, "%2d", pt, ptlim);
   10a38:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10a3b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   10a3e:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   10a43:	89 c8                	mov    eax,ecx
   10a45:	f7 ea                	imul   edx
   10a47:	d1 fa                	sar    edx,1
   10a49:	89 c8                	mov    eax,ecx
   10a4b:	c1 f8 1f             	sar    eax,0x1f
   10a4e:	29 c2                	sub    edx,eax
   10a50:	89 d0                	mov    eax,edx
   10a52:	01 c0                	add    eax,eax
   10a54:	01 d0                	add    eax,edx
   10a56:	c1 e0 02             	shl    eax,0x2
   10a59:	29 c1                	sub    ecx,eax
   10a5b:	89 ca                	mov    edx,ecx
   10a5d:	85 d2                	test   edx,edx
   10a5f:	74 27                	je     10a88 <_fmt+0x371>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:139 (discriminator 1)
   10a61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10a64:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   10a67:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   10a6c:	89 c8                	mov    eax,ecx
   10a6e:	f7 ea                	imul   edx
   10a70:	d1 fa                	sar    edx,1
   10a72:	89 c8                	mov    eax,ecx
   10a74:	c1 f8 1f             	sar    eax,0x1f
   10a77:	29 c2                	sub    edx,eax
   10a79:	89 d0                	mov    eax,edx
   10a7b:	01 c0                	add    eax,eax
   10a7d:	01 d0                	add    eax,edx
   10a7f:	c1 e0 02             	shl    eax,0x2
   10a82:	29 c1                	sub    ecx,eax
   10a84:	89 ca                	mov    edx,ecx
   10a86:	eb 05                	jmp    10a8d <_fmt+0x376>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:139 (discriminator 2)
   10a88:	ba 0c 00 00 00       	mov    edx,0xc
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:139 (discriminator 4)
   10a8d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10a90:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10a93:	68 28 50 04 00       	push   0x45028
   10a98:	52                   	push   edx
   10a99:	e8 06 07 00 00       	call   111a4 <_conv>
   10a9e:	83 c4 10             	add    esp,0x10
   10aa1:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:140 (discriminator 4)
          continue;
   10aa4:	e9 de 06 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:143

        case 'M':
          pt = _conv(t->tm_min, "%02d", pt, ptlim);
   10aa9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10aac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   10aaf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10ab2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10ab5:	68 05 50 04 00       	push   0x45005
   10aba:	50                   	push   eax
   10abb:	e8 e4 06 00 00       	call   111a4 <_conv>
   10ac0:	83 c4 10             	add    esp,0x10
   10ac3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:144
          continue;
   10ac6:	e9 bc 06 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:148

        case 'm':
          //CLR 05/02/2016 - removed odd +1 after tm_mon
          pt = _conv(t->tm_mon, "%02d", pt, ptlim);
   10acb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10ace:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10ad1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10ad4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10ad7:	68 05 50 04 00       	push   0x45005
   10adc:	50                   	push   eax
   10add:	e8 c2 06 00 00       	call   111a4 <_conv>
   10ae2:	83 c4 10             	add    esp,0x10
   10ae5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:149
          continue;
   10ae8:	e9 9a 06 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:152

        case 'n':
          pt = _add("\n", pt, ptlim);
   10aed:	83 ec 04             	sub    esp,0x4
   10af0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10af3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10af6:	68 3a 50 04 00       	push   0x4503a
   10afb:	e8 d6 06 00 00       	call   111d6 <_add>
   10b00:	83 c4 10             	add    esp,0x10
   10b03:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:153
          continue;
   10b06:	e9 7c 06 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:156

        case 'p':
          pt = _add((t->tm_hour >= 12) ? "pm" : "am", pt, ptlim);
   10b0b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10b0e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   10b11:	83 f8 0b             	cmp    eax,0xb
   10b14:	7e 07                	jle    10b1d <_fmt+0x406>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:156 (discriminator 1)
   10b16:	b8 3c 50 04 00       	mov    eax,0x4503c
   10b1b:	eb 05                	jmp    10b22 <_fmt+0x40b>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:156 (discriminator 2)
   10b1d:	b8 3f 50 04 00       	mov    eax,0x4503f
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:156 (discriminator 4)
   10b22:	83 ec 04             	sub    esp,0x4
   10b25:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b28:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b2b:	50                   	push   eax
   10b2c:	e8 a5 06 00 00       	call   111d6 <_add>
   10b31:	83 c4 10             	add    esp,0x10
   10b34:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:157 (discriminator 4)
          continue;
   10b37:	e9 4b 06 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:160

        case 'R':
          pt = _fmt("%H:%M", t, pt, ptlim);
   10b3c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b3f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b42:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10b45:	68 42 50 04 00       	push   0x45042
   10b4a:	e8 c8 fb ff ff       	call   10717 <_fmt>
   10b4f:	83 c4 10             	add    esp,0x10
   10b52:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:161
          continue;
   10b55:	e9 2d 06 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:164

        case 'r':
          pt = _fmt("%I:%M:%S %p", t, pt, ptlim);
   10b5a:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b5d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b60:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10b63:	68 48 50 04 00       	push   0x45048
   10b68:	e8 aa fb ff ff       	call   10717 <_fmt>
   10b6d:	83 c4 10             	add    esp,0x10
   10b70:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:165
          continue;
   10b73:	e9 0f 06 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:168

        case 'S':
          pt = _conv(t->tm_sec, "%02d", pt, ptlim);
   10b78:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10b7b:	8b 00                	mov    eax,DWORD PTR [eax]
   10b7d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b80:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b83:	68 05 50 04 00       	push   0x45005
   10b88:	50                   	push   eax
   10b89:	e8 16 06 00 00       	call   111a4 <_conv>
   10b8e:	83 c4 10             	add    esp,0x10
   10b91:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:169
          continue;
   10b94:	e9 ee 05 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:176
        case 's': {
          struct tm  tm;
          char buf[32];
          time_t mkt;

          tm = *t;
   10b99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10b9c:	8b 10                	mov    edx,DWORD PTR [eax]
   10b9e:	89 55 a8             	mov    DWORD PTR [ebp-0x58],edx
   10ba1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   10ba4:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
   10ba7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   10baa:	89 55 b0             	mov    DWORD PTR [ebp-0x50],edx
   10bad:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   10bb0:	89 55 b4             	mov    DWORD PTR [ebp-0x4c],edx
   10bb3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   10bb6:	89 55 b8             	mov    DWORD PTR [ebp-0x48],edx
   10bb9:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   10bbc:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
   10bbf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   10bc2:	89 55 c0             	mov    DWORD PTR [ebp-0x40],edx
   10bc5:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   10bc8:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
   10bcb:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
   10bce:	89 55 c8             	mov    DWORD PTR [ebp-0x38],edx
   10bd1:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
   10bd4:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
   10bd7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   10bda:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:177
          mkt = mktime(&tm);
   10bdd:	83 ec 0c             	sub    esp,0xc
   10be0:	8d 45 a8             	lea    eax,[ebp-0x58]
   10be3:	50                   	push   eax
   10be4:	e8 2e 75 01 00       	call   28117 <mktime>
   10be9:	83 c4 10             	add    esp,0x10
   10bec:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:178
          sprintf(buf, "%lu", mkt);
   10bef:	83 ec 04             	sub    esp,0x4
   10bf2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   10bf5:	68 54 50 04 00       	push   0x45054
   10bfa:	8d 45 88             	lea    eax,[ebp-0x78]
   10bfd:	50                   	push   eax
   10bfe:	e8 ac 6b 01 00       	call   277af <sprintf>
   10c03:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:179
          pt = _add(buf, pt, ptlim);
   10c06:	83 ec 04             	sub    esp,0x4
   10c09:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10c0c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10c0f:	8d 45 88             	lea    eax,[ebp-0x78]
   10c12:	50                   	push   eax
   10c13:	e8 be 05 00 00       	call   111d6 <_add>
   10c18:	83 c4 10             	add    esp,0x10
   10c1b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
   10c1e:	e9 64 05 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:184
          continue;
        }

        case 'T':
          pt = _fmt("%H:%M:%S", t, pt, ptlim);
   10c23:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10c26:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10c29:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10c2c:	68 58 50 04 00       	push   0x45058
   10c31:	e8 e1 fa ff ff       	call   10717 <_fmt>
   10c36:	83 c4 10             	add    esp,0x10
   10c39:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:185
          continue;
   10c3c:	e9 46 05 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:188

        case 't':
          pt = _add("\t", pt, ptlim);
   10c41:	83 ec 04             	sub    esp,0x4
   10c44:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10c47:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10c4a:	68 61 50 04 00       	push   0x45061
   10c4f:	e8 82 05 00 00       	call   111d6 <_add>
   10c54:	83 c4 10             	add    esp,0x10
   10c57:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:189
          continue;
   10c5a:	e9 28 05 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:192

        case 'U':
          pt = _conv((t->tm_yday + 7 - t->tm_wday) / 7, "%02d", pt, ptlim);
   10c5f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10c62:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   10c65:	8d 50 07             	lea    edx,[eax+0x7]
   10c68:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10c6b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10c6e:	89 d1                	mov    ecx,edx
   10c70:	29 c1                	sub    ecx,eax
   10c72:	ba 93 24 49 92       	mov    edx,0x92492493
   10c77:	89 c8                	mov    eax,ecx
   10c79:	f7 ea                	imul   edx
   10c7b:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10c7e:	c1 f8 02             	sar    eax,0x2
   10c81:	89 c2                	mov    edx,eax
   10c83:	89 c8                	mov    eax,ecx
   10c85:	c1 f8 1f             	sar    eax,0x1f
   10c88:	29 c2                	sub    edx,eax
   10c8a:	89 d0                	mov    eax,edx
   10c8c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10c8f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10c92:	68 05 50 04 00       	push   0x45005
   10c97:	50                   	push   eax
   10c98:	e8 07 05 00 00       	call   111a4 <_conv>
   10c9d:	83 c4 10             	add    esp,0x10
   10ca0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:193
          continue;
   10ca3:	e9 df 04 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:196

        case 'u':
          pt = _conv((t->tm_wday == 0) ? 7 : t->tm_wday, "%d", pt, ptlim);
   10ca8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10cab:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10cae:	85 c0                	test   eax,eax
   10cb0:	74 08                	je     10cba <_fmt+0x5a3>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:196 (discriminator 1)
   10cb2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10cb5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10cb8:	eb 05                	jmp    10cbf <_fmt+0x5a8>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:196 (discriminator 2)
   10cba:	b8 07 00 00 00       	mov    eax,0x7
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:196 (discriminator 4)
   10cbf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10cc2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10cc5:	68 63 50 04 00       	push   0x45063
   10cca:	50                   	push   eax
   10ccb:	e8 d4 04 00 00       	call   111a4 <_conv>
   10cd0:	83 c4 10             	add    esp,0x10
   10cd3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:197 (discriminator 4)
          continue;
   10cd6:	e9 ac 04 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:207
          int  year;
          int  yday;
          int  wday;
          int  w;

          year = t->tm_year + TM_YEAR_BASE;
   10cdb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10cde:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   10ce1:	05 6c 07 00 00       	add    eax,0x76c
   10ce6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:208
          yday = t->tm_yday;
   10ce9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10cec:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   10cef:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:209
          wday = t->tm_wday;
   10cf2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10cf5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10cf8:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215
          while (1) {
            int  len;
            int  bot;
            int  top;

            len = LEAPYEAR(year) ? DAYSPERLYEAR : DAYSPERNYEAR;
   10cfb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   10cfe:	83 e0 03             	and    eax,0x3
   10d01:	85 c0                	test   eax,eax
   10d03:	75 50                	jne    10d55 <_fmt+0x63e>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 1)
   10d05:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10d08:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10d0d:	89 c8                	mov    eax,ecx
   10d0f:	f7 ea                	imul   edx
   10d11:	c1 fa 05             	sar    edx,0x5
   10d14:	89 c8                	mov    eax,ecx
   10d16:	c1 f8 1f             	sar    eax,0x1f
   10d19:	29 c2                	sub    edx,eax
   10d1b:	89 d0                	mov    eax,edx
   10d1d:	6b c0 64             	imul   eax,eax,0x64
   10d20:	29 c1                	sub    ecx,eax
   10d22:	89 c8                	mov    eax,ecx
   10d24:	85 c0                	test   eax,eax
   10d26:	75 26                	jne    10d4e <_fmt+0x637>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 4)
   10d28:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10d2b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10d30:	89 c8                	mov    eax,ecx
   10d32:	f7 ea                	imul   edx
   10d34:	c1 fa 07             	sar    edx,0x7
   10d37:	89 c8                	mov    eax,ecx
   10d39:	c1 f8 1f             	sar    eax,0x1f
   10d3c:	29 c2                	sub    edx,eax
   10d3e:	89 d0                	mov    eax,edx
   10d40:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   10d46:	29 c1                	sub    ecx,eax
   10d48:	89 c8                	mov    eax,ecx
   10d4a:	85 c0                	test   eax,eax
   10d4c:	75 07                	jne    10d55 <_fmt+0x63e>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 5)
   10d4e:	b8 6e 01 00 00       	mov    eax,0x16e
   10d53:	eb 05                	jmp    10d5a <_fmt+0x643>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 6)
   10d55:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 8)
   10d5a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:216 (discriminator 8)
            bot = ((yday + 11 - wday) % DAYSPERWEEK) - 3;
   10d5d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10d60:	83 c0 0b             	add    eax,0xb
   10d63:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
   10d66:	89 c1                	mov    ecx,eax
   10d68:	ba 93 24 49 92       	mov    edx,0x92492493
   10d6d:	89 c8                	mov    eax,ecx
   10d6f:	f7 ea                	imul   edx
   10d71:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10d74:	c1 f8 02             	sar    eax,0x2
   10d77:	89 c2                	mov    edx,eax
   10d79:	89 c8                	mov    eax,ecx
   10d7b:	c1 f8 1f             	sar    eax,0x1f
   10d7e:	29 c2                	sub    edx,eax
   10d80:	89 d0                	mov    eax,edx
   10d82:	89 c2                	mov    edx,eax
   10d84:	c1 e2 03             	shl    edx,0x3
   10d87:	29 c2                	sub    edx,eax
   10d89:	89 c8                	mov    eax,ecx
   10d8b:	29 d0                	sub    eax,edx
   10d8d:	83 e8 03             	sub    eax,0x3
   10d90:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:217 (discriminator 8)
            top = bot - (len % DAYSPERWEEK);
   10d93:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   10d96:	ba 93 24 49 92       	mov    edx,0x92492493
   10d9b:	89 c8                	mov    eax,ecx
   10d9d:	f7 ea                	imul   edx
   10d9f:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10da2:	c1 f8 02             	sar    eax,0x2
   10da5:	89 c2                	mov    edx,eax
   10da7:	89 c8                	mov    eax,ecx
   10da9:	c1 f8 1f             	sar    eax,0x1f
   10dac:	29 c2                	sub    edx,eax
   10dae:	89 d0                	mov    eax,edx
   10db0:	89 c2                	mov    edx,eax
   10db2:	c1 e2 03             	shl    edx,0x3
   10db5:	29 c2                	sub    edx,eax
   10db7:	89 c8                	mov    eax,ecx
   10db9:	29 d0                	sub    eax,edx
   10dbb:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
   10dbe:	29 c2                	sub    edx,eax
   10dc0:	89 d0                	mov    eax,edx
   10dc2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:218 (discriminator 8)
            if (top < -3) top += DAYSPERWEEK;
   10dc5:	83 7d e8 fd          	cmp    DWORD PTR [ebp-0x18],0xfffffffd
   10dc9:	7d 04                	jge    10dcf <_fmt+0x6b8>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:218 (discriminator 1)
   10dcb:	83 45 e8 07          	add    DWORD PTR [ebp-0x18],0x7
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:219
            top += len;
   10dcf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   10dd2:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:220
            if (yday >= top) {
   10dd5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10dd8:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   10ddb:	7c 10                	jl     10ded <_fmt+0x6d6>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:221
              ++year;
   10ddd:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:222
              w = 1;
   10de1:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:223
              break;
   10de8:	e9 9d 00 00 00       	jmp    10e8a <_fmt+0x773>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:225
            }
            if (yday >= bot) {
   10ded:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10df0:	3b 45 d4             	cmp    eax,DWORD PTR [ebp-0x2c]
   10df3:	7c 2a                	jl     10e1f <_fmt+0x708>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:226
              w = 1 + ((yday - bot) / DAYSPERWEEK);
   10df5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10df8:	2b 45 d4             	sub    eax,DWORD PTR [ebp-0x2c]
   10dfb:	89 c1                	mov    ecx,eax
   10dfd:	ba 93 24 49 92       	mov    edx,0x92492493
   10e02:	89 c8                	mov    eax,ecx
   10e04:	f7 ea                	imul   edx
   10e06:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10e09:	c1 f8 02             	sar    eax,0x2
   10e0c:	89 c2                	mov    edx,eax
   10e0e:	89 c8                	mov    eax,ecx
   10e10:	c1 f8 1f             	sar    eax,0x1f
   10e13:	29 c2                	sub    edx,eax
   10e15:	89 d0                	mov    eax,edx
   10e17:	83 c0 01             	add    eax,0x1
   10e1a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:227
              break;
   10e1d:	eb 6b                	jmp    10e8a <_fmt+0x773>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:229
            }
            --year;
   10e1f:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230
            yday += LEAPYEAR(year) ? DAYSPERLYEAR : DAYSPERNYEAR;
   10e23:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   10e26:	83 e0 03             	and    eax,0x3
   10e29:	85 c0                	test   eax,eax
   10e2b:	75 50                	jne    10e7d <_fmt+0x766>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 1)
   10e2d:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10e30:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10e35:	89 c8                	mov    eax,ecx
   10e37:	f7 ea                	imul   edx
   10e39:	c1 fa 05             	sar    edx,0x5
   10e3c:	89 c8                	mov    eax,ecx
   10e3e:	c1 f8 1f             	sar    eax,0x1f
   10e41:	29 c2                	sub    edx,eax
   10e43:	89 d0                	mov    eax,edx
   10e45:	6b c0 64             	imul   eax,eax,0x64
   10e48:	29 c1                	sub    ecx,eax
   10e4a:	89 c8                	mov    eax,ecx
   10e4c:	85 c0                	test   eax,eax
   10e4e:	75 26                	jne    10e76 <_fmt+0x75f>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 4)
   10e50:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10e53:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10e58:	89 c8                	mov    eax,ecx
   10e5a:	f7 ea                	imul   edx
   10e5c:	c1 fa 07             	sar    edx,0x7
   10e5f:	89 c8                	mov    eax,ecx
   10e61:	c1 f8 1f             	sar    eax,0x1f
   10e64:	29 c2                	sub    edx,eax
   10e66:	89 d0                	mov    eax,edx
   10e68:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   10e6e:	29 c1                	sub    ecx,eax
   10e70:	89 c8                	mov    eax,ecx
   10e72:	85 c0                	test   eax,eax
   10e74:	75 07                	jne    10e7d <_fmt+0x766>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 5)
   10e76:	b8 6e 01 00 00       	mov    eax,0x16e
   10e7b:	eb 05                	jmp    10e82 <_fmt+0x76b>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 6)
   10e7d:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 8)
   10e82:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:231 (discriminator 8)
          }
   10e85:	e9 71 fe ff ff       	jmp    10cfb <_fmt+0x5e4>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:232
          if (*format == 'V') {
   10e8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10e8d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10e90:	3c 56                	cmp    al,0x56
   10e92:	75 1e                	jne    10eb2 <_fmt+0x79b>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:233
            pt = _conv(w, "%02d", pt, ptlim);
   10e94:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10e97:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10e9a:	68 05 50 04 00       	push   0x45005
   10e9f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   10ea2:	e8 fd 02 00 00       	call   111a4 <_conv>
   10ea7:	83 c4 10             	add    esp,0x10
   10eaa:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:239
          } else if (*format == 'g') {
            pt = _conv(year % 100, "%02d", pt, ptlim);
          } else {
            pt = _conv(year, "%04d", pt, ptlim);
          }
          continue;
   10ead:	e9 d5 02 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:234
            --year;
            yday += LEAPYEAR(year) ? DAYSPERLYEAR : DAYSPERNYEAR;
          }
          if (*format == 'V') {
            pt = _conv(w, "%02d", pt, ptlim);
          } else if (*format == 'g') {
   10eb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10eb5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10eb8:	3c 67                	cmp    al,0x67
   10eba:	75 3b                	jne    10ef7 <_fmt+0x7e0>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:235
            pt = _conv(year % 100, "%02d", pt, ptlim);
   10ebc:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10ebf:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10ec4:	89 c8                	mov    eax,ecx
   10ec6:	f7 ea                	imul   edx
   10ec8:	c1 fa 05             	sar    edx,0x5
   10ecb:	89 c8                	mov    eax,ecx
   10ecd:	c1 f8 1f             	sar    eax,0x1f
   10ed0:	29 c2                	sub    edx,eax
   10ed2:	89 d0                	mov    eax,edx
   10ed4:	6b c0 64             	imul   eax,eax,0x64
   10ed7:	29 c1                	sub    ecx,eax
   10ed9:	89 c8                	mov    eax,ecx
   10edb:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10ede:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10ee1:	68 05 50 04 00       	push   0x45005
   10ee6:	50                   	push   eax
   10ee7:	e8 b8 02 00 00       	call   111a4 <_conv>
   10eec:	83 c4 10             	add    esp,0x10
   10eef:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:239
          } else {
            pt = _conv(year, "%04d", pt, ptlim);
          }
          continue;
   10ef2:	e9 90 02 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:237
          if (*format == 'V') {
            pt = _conv(w, "%02d", pt, ptlim);
          } else if (*format == 'g') {
            pt = _conv(year % 100, "%02d", pt, ptlim);
          } else {
            pt = _conv(year, "%04d", pt, ptlim);
   10ef7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10efa:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10efd:	68 66 50 04 00       	push   0x45066
   10f02:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   10f05:	e8 9a 02 00 00       	call   111a4 <_conv>
   10f0a:	83 c4 10             	add    esp,0x10
   10f0d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:239
          }
          continue;
   10f10:	e9 72 02 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:243
        }

        case 'v':
          pt = _fmt("%e-%b-%Y", t, pt, ptlim);
   10f15:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10f18:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10f1b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10f1e:	68 6b 50 04 00       	push   0x4506b
   10f23:	e8 ef f7 ff ff       	call   10717 <_fmt>
   10f28:	83 c4 10             	add    esp,0x10
   10f2b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:244
          continue;
   10f2e:	e9 54 02 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:247

        case 'W':
          pt = _conv((t->tm_yday + 7 - (t->tm_wday ? (t->tm_wday - 1) : 6)) / 7, "%02d", pt, ptlim);
   10f33:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f36:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   10f39:	8d 50 07             	lea    edx,[eax+0x7]
   10f3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f3f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10f42:	85 c0                	test   eax,eax
   10f44:	74 0b                	je     10f51 <_fmt+0x83a>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:247 (discriminator 1)
   10f46:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f49:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10f4c:	83 e8 01             	sub    eax,0x1
   10f4f:	eb 05                	jmp    10f56 <_fmt+0x83f>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:247 (discriminator 2)
   10f51:	b8 06 00 00 00       	mov    eax,0x6
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:247 (discriminator 4)
   10f56:	89 d1                	mov    ecx,edx
   10f58:	29 c1                	sub    ecx,eax
   10f5a:	ba 93 24 49 92       	mov    edx,0x92492493
   10f5f:	89 c8                	mov    eax,ecx
   10f61:	f7 ea                	imul   edx
   10f63:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10f66:	c1 f8 02             	sar    eax,0x2
   10f69:	89 c2                	mov    edx,eax
   10f6b:	89 c8                	mov    eax,ecx
   10f6d:	c1 f8 1f             	sar    eax,0x1f
   10f70:	29 c2                	sub    edx,eax
   10f72:	89 d0                	mov    eax,edx
   10f74:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10f77:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10f7a:	68 05 50 04 00       	push   0x45005
   10f7f:	50                   	push   eax
   10f80:	e8 1f 02 00 00       	call   111a4 <_conv>
   10f85:	83 c4 10             	add    esp,0x10
   10f88:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:248 (discriminator 4)
          continue;
   10f8b:	e9 f7 01 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:251

        case 'w':
          pt = _conv(t->tm_wday, "%d", pt, ptlim);
   10f90:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f93:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10f96:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10f99:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10f9c:	68 63 50 04 00       	push   0x45063
   10fa1:	50                   	push   eax
   10fa2:	e8 fd 01 00 00       	call   111a4 <_conv>
   10fa7:	83 c4 10             	add    esp,0x10
   10faa:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:252
          continue;
   10fad:	e9 d5 01 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:255

        case 'X':
          pt = _fmt("%H:%M:%S", t, pt, ptlim);
   10fb2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10fb5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10fb8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10fbb:	68 58 50 04 00       	push   0x45058
   10fc0:	e8 52 f7 ff ff       	call   10717 <_fmt>
   10fc5:	83 c4 10             	add    esp,0x10
   10fc8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:256
          continue;
   10fcb:	e9 b7 01 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:259

        case 'x':
          pt = _fmt("%m/%d/%y", t, pt, ptlim);
   10fd0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10fd3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10fd6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10fd9:	68 1f 50 04 00       	push   0x4501f
   10fde:	e8 34 f7 ff ff       	call   10717 <_fmt>
   10fe3:	83 c4 10             	add    esp,0x10
   10fe6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:260
          continue;
   10fe9:	e9 99 01 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:263

        case 'y':
          pt = _conv((t->tm_year + TM_YEAR_BASE) % 100, "%02d", pt, ptlim);
   10fee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10ff1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   10ff4:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   10ffa:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10fff:	89 c8                	mov    eax,ecx
   11001:	f7 ea                	imul   edx
   11003:	c1 fa 05             	sar    edx,0x5
   11006:	89 c8                	mov    eax,ecx
   11008:	c1 f8 1f             	sar    eax,0x1f
   1100b:	29 c2                	sub    edx,eax
   1100d:	89 d0                	mov    eax,edx
   1100f:	6b c0 64             	imul   eax,eax,0x64
   11012:	29 c1                	sub    ecx,eax
   11014:	89 c8                	mov    eax,ecx
   11016:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   11019:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1101c:	68 05 50 04 00       	push   0x45005
   11021:	50                   	push   eax
   11022:	e8 7d 01 00 00       	call   111a4 <_conv>
   11027:	83 c4 10             	add    esp,0x10
   1102a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:264
          continue;
   1102d:	e9 55 01 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:267

        case 'Y':
          pt = _conv(t->tm_year + TM_YEAR_BASE, "%04d", pt, ptlim);
   11032:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11035:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   11038:	05 6c 07 00 00       	add    eax,0x76c
   1103d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   11040:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11043:	68 66 50 04 00       	push   0x45066
   11048:	50                   	push   eax
   11049:	e8 56 01 00 00       	call   111a4 <_conv>
   1104e:	83 c4 10             	add    esp,0x10
   11051:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:268
          continue;
   11054:	e9 2e 01 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:271

        case 'Z':
          pt = _add("?", pt, ptlim);
   11059:	83 ec 04             	sub    esp,0x4
   1105c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1105f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11062:	68 03 50 04 00       	push   0x45003
   11067:	e8 6a 01 00 00       	call   111d6 <_add>
   1106c:	83 c4 10             	add    esp,0x10
   1106f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:272
          continue;
   11072:	e9 10 01 00 00       	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:276

        case 'z': {
          long absoff;
          if (kTimeZone >= 0) {
   11077:	a1 d0 97 12 00       	mov    eax,ds:0x1297d0
   1107c:	85 c0                	test   eax,eax
   1107e:	78 23                	js     110a3 <_fmt+0x98c>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:277
            absoff = kTimeZone;
   11080:	a1 d0 97 12 00       	mov    eax,ds:0x1297d0
   11085:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:278
            pt = _add("+", pt, ptlim);
   11088:	83 ec 04             	sub    esp,0x4
   1108b:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1108e:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11091:	68 74 50 04 00       	push   0x45074
   11096:	e8 3b 01 00 00       	call   111d6 <_add>
   1109b:	83 c4 10             	add    esp,0x10
   1109e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
   110a1:	eb 21                	jmp    110c4 <_fmt+0x9ad>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:280
          } else {
            absoff = kTimeZone;
   110a3:	a1 d0 97 12 00       	mov    eax,ds:0x1297d0
   110a8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:281
            pt = _add("-", pt, ptlim);
   110ab:	83 ec 04             	sub    esp,0x4
   110ae:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   110b1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   110b4:	68 76 50 04 00       	push   0x45076
   110b9:	e8 18 01 00 00       	call   111d6 <_add>
   110be:	83 c4 10             	add    esp,0x10
   110c1:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:283
          }
          pt = _conv(absoff / 3600, "%02d", pt, ptlim);
   110c4:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
   110c7:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   110cc:	89 c8                	mov    eax,ecx
   110ce:	f7 ea                	imul   edx
   110d0:	8d 04 0a             	lea    eax,[edx+ecx*1]
   110d3:	c1 f8 0b             	sar    eax,0xb
   110d6:	89 c2                	mov    edx,eax
   110d8:	89 c8                	mov    eax,ecx
   110da:	c1 f8 1f             	sar    eax,0x1f
   110dd:	29 c2                	sub    edx,eax
   110df:	89 d0                	mov    eax,edx
   110e1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   110e4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   110e7:	68 05 50 04 00       	push   0x45005
   110ec:	50                   	push   eax
   110ed:	e8 b2 00 00 00       	call   111a4 <_conv>
   110f2:	83 c4 10             	add    esp,0x10
   110f5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:284
          pt = _conv((absoff % 3600) / 60, "%02d", pt, ptlim);
   110f8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
   110fb:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   11100:	89 d8                	mov    eax,ebx
   11102:	f7 ea                	imul   edx
   11104:	8d 04 1a             	lea    eax,[edx+ebx*1]
   11107:	c1 f8 0b             	sar    eax,0xb
   1110a:	89 c2                	mov    edx,eax
   1110c:	89 d8                	mov    eax,ebx
   1110e:	c1 f8 1f             	sar    eax,0x1f
   11111:	89 d1                	mov    ecx,edx
   11113:	29 c1                	sub    ecx,eax
   11115:	69 c1 10 0e 00 00    	imul   eax,ecx,0xe10
   1111b:	29 c3                	sub    ebx,eax
   1111d:	89 d9                	mov    ecx,ebx
   1111f:	ba 89 88 88 88       	mov    edx,0x88888889
   11124:	89 c8                	mov    eax,ecx
   11126:	f7 ea                	imul   edx
   11128:	8d 04 0a             	lea    eax,[edx+ecx*1]
   1112b:	c1 f8 05             	sar    eax,0x5
   1112e:	89 c2                	mov    edx,eax
   11130:	89 c8                	mov    eax,ecx
   11132:	c1 f8 1f             	sar    eax,0x1f
   11135:	29 c2                	sub    edx,eax
   11137:	89 d0                	mov    eax,edx
   11139:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1113c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1113f:	68 05 50 04 00       	push   0x45005
   11144:	50                   	push   eax
   11145:	e8 5a 00 00 00       	call   111a4 <_conv>
   1114a:	83 c4 10             	add    esp,0x10
   1114d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:286

          continue;
   11150:	eb 35                	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:290
        }

        case '+':
          pt = _fmt("%a, %d %b %Y %H:%M:%S %z", t, pt, ptlim);
   11152:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   11155:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11158:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1115b:	68 78 50 04 00       	push   0x45078
   11160:	e8 b2 f5 ff ff       	call   10717 <_fmt>
   11165:	83 c4 10             	add    esp,0x10
   11168:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:291
          continue;
   1116b:	eb 1a                	jmp    11187 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:295

        case '%':
        default:
          break;
   1116d:	90                   	nop
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:299
      }
    }

    if (pt == ptlim) break;
   1116e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11171:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
   11174:	74 25                	je     1119b <_fmt+0xa84>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:300
    *pt++ = *format;
   11176:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11179:	8d 50 01             	lea    edx,[eax+0x1]
   1117c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   1117f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   11182:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   11185:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:68
  *p = '\0';
  return p - s;
}

static HIGH_CODE_SECTION char *_fmt(const char *format, const struct tm *t, char *pt, const char *ptlim) {
  for ( ; *format; ++format) {
   11187:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:68 (discriminator 1)
   1118b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1118e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11191:	84 c0                	test   al,al
   11193:	0f 85 8a f5 ff ff    	jne    10723 <_fmt+0xc>
   11199:	eb 01                	jmp    1119c <_fmt+0xa85>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:299
        default:
          break;
      }
    }

    if (pt == ptlim) break;
   1119b:	90                   	nop
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:303
    *pt++ = *format;
  }

  return pt;
   1119c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:304
}
   1119f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   111a2:	c9                   	leave  
   111a3:	c3                   	ret    

000111a4 <_conv>:
_conv():
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:306

static char *_conv(const int n, char *format, char *pt, const char *ptlim) {
   111a4:	55                   	push   ebp
   111a5:	89 e5                	mov    ebp,esp
   111a7:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:309
  char  buf[32];

  sprintf(buf, format, n);
   111aa:	83 ec 04             	sub    esp,0x4
   111ad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   111b0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   111b3:	8d 45 d8             	lea    eax,[ebp-0x28]
   111b6:	50                   	push   eax
   111b7:	e8 f3 65 01 00       	call   277af <sprintf>
   111bc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:310
  return _add(buf, pt, ptlim);
   111bf:	83 ec 04             	sub    esp,0x4
   111c2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   111c5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   111c8:	8d 45 d8             	lea    eax,[ebp-0x28]
   111cb:	50                   	push   eax
   111cc:	e8 05 00 00 00       	call   111d6 <_add>
   111d1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:311
}
   111d4:	c9                   	leave  
   111d5:	c3                   	ret    

000111d6 <_add>:
_add():
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:313

static char *_add(const char *str, char *pt, const char *ptlim) {
   111d6:	55                   	push   ebp
   111d7:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:314
  while (pt < ptlim && (*pt = *str++) != '\0') ++pt;
   111d9:	eb 04                	jmp    111df <_add+0x9>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:314 (discriminator 3)
   111db:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:314 (discriminator 1)
   111df:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   111e2:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   111e5:	73 1b                	jae    11202 <_add+0x2c>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:314 (discriminator 2)
   111e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   111ea:	8d 50 01             	lea    edx,[eax+0x1]
   111ed:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   111f0:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   111f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   111f6:	88 10                	mov    BYTE PTR [eax],dl
   111f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   111fb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   111fe:	84 c0                	test   al,al
   11200:	75 d9                	jne    111db <_add+0x5>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:315
  return pt;
   11202:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:316
}
   11205:	5d                   	pop    ebp
   11206:	c3                   	ret    
   11207:	90                   	nop

00011208 <keyboardGetKeyFromBuffer>:
keyboardGetKeyFromBuffer():
/home/yogi/src/os//chrisOS/src/char/keyboard.c:17
extern volatile char* kKbdBuffCurrChar;
//Get a key from the keyboard buffer
//Curr moves when a key is put into the buffer
//Base moves when a key is taken from the buffer
uint8_t keyboardGetKeyFromBuffer()
{
   11208:	55                   	push   ebp
   11209:	89 e5                	mov    ebp,esp
   1120b:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:18
    char lTemp=0;
   1120e:	c6 45 ff 00          	mov    BYTE PTR [ebp-0x1],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:20
    //If top > buffer address, there are new characters to be processed
    if (kKbdBuffCurrTop>(char*)KEYBOARD_BUFFER_ADDRESS)
   11212:	a1 60 99 12 00       	mov    eax,ds:0x129960
   11217:	3d b0 24 16 00       	cmp    eax,0x1624b0
   1121c:	76 3b                	jbe    11259 <keyboardGetKeyFromBuffer+0x51>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:23
    {
        //increment the current character pointer
        kKbdBuffCurrChar++;
   1121e:	a1 90 99 12 00       	mov    eax,ds:0x129990
   11223:	83 c0 01             	add    eax,0x1
   11226:	a3 90 99 12 00       	mov    ds:0x129990,eax
/home/yogi/src/os//chrisOS/src/char/keyboard.c:25
        //get the character from the buffer
        lTemp=*kKbdBuffCurrChar;
   1122b:	a1 90 99 12 00       	mov    eax,ds:0x129990
   11230:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11233:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os//chrisOS/src/char/keyboard.c:27
        //If we've reached top, reset both char and top
        if (kKbdBuffCurrChar>=kKbdBuffCurrTop)
   11236:	8b 15 90 99 12 00    	mov    edx,DWORD PTR ds:0x129990
   1123c:	a1 60 99 12 00       	mov    eax,ds:0x129960
   11241:	39 c2                	cmp    edx,eax
   11243:	72 14                	jb     11259 <keyboardGetKeyFromBuffer+0x51>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:29
        {
            kKbdBuffCurrChar=(char*)KEYBOARD_BUFFER_ADDRESS;
   11245:	c7 05 90 99 12 00 b0 	mov    DWORD PTR ds:0x129990,0x1624b0
   1124c:	24 16 00 
/home/yogi/src/os//chrisOS/src/char/keyboard.c:30
            kKbdBuffCurrTop=(char*)KEYBOARD_BUFFER_ADDRESS;
   1124f:	c7 05 60 99 12 00 b0 	mov    DWORD PTR ds:0x129960,0x1624b0
   11256:	24 16 00 
/home/yogi/src/os//chrisOS/src/char/keyboard.c:33
        }
    }
    return lTemp;
   11259:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os//chrisOS/src/char/keyboard.c:34
}
   1125d:	c9                   	leave  
   1125e:	c3                   	ret    

0001125f <waitForKeyboardKey>:
waitForKeyboardKey():
/home/yogi/src/os//chrisOS/src/char/keyboard.c:37

char waitForKeyboardKey()
{
   1125f:	55                   	push   ebp
   11260:	89 e5                	mov    ebp,esp
   11262:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/char/keyboard.c:38
    printd(DEBUG_KEYBOARD_DRIVER,"buffer=%08X, char=%08X, top=%08X\t", KEYBOARD_BUFFER_ADDRESS, kKbdBuffCurrChar, kKbdBuffCurrTop);
   11265:	8b 15 60 99 12 00    	mov    edx,DWORD PTR ds:0x129960
   1126b:	a1 90 99 12 00       	mov    eax,ds:0x129990
   11270:	83 ec 0c             	sub    esp,0xc
   11273:	52                   	push   edx
   11274:	50                   	push   eax
   11275:	68 b0 24 16 00       	push   0x1624b0
   1127a:	68 80 53 04 00       	push   0x45380
   1127f:	68 00 00 10 00       	push   0x100000
   11284:	e8 f2 64 01 00       	call   2777b <printd>
   11289:	83 c4 20             	add    esp,0x20
/home/yogi/src/os//chrisOS/src/char/keyboard.c:39
    char lTemp=0;
   1128c:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:40
    bool debugMsgPrinted=false;
   11290:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:42
    //CLR 02/19/2017 - Had to change the conditon because of modifications I made to how buffer & bufferbase are used.
    while (kKbdBuffCurrTop==(char*)KEYBOARD_BUFFER_ADDRESS)
   11294:	eb 1e                	jmp    112b4 <waitForKeyboardKey+0x55>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:44
    {
        if (!debugMsgPrinted)
   11296:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1129a:	83 f0 01             	xor    eax,0x1
   1129d:	84 c0                	test   al,al
   1129f:	74 04                	je     112a5 <waitForKeyboardKey+0x46>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:46
        {
            debugMsgPrinted=true;
   112a1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
/home/yogi/src/os//chrisOS/src/char/keyboard.c:48
        }
        __asm__("sti\nhlt\n");
   112a5:	fb                   	sti    
   112a6:	f4                   	hlt    
/home/yogi/src/os//chrisOS/src/char/keyboard.c:49
        waitTicks(1);
   112a7:	83 ec 0c             	sub    esp,0xc
   112aa:	6a 01                	push   0x1
   112ac:	e8 ce 76 01 00       	call   2897f <waitTicks>
   112b1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:42
{
    printd(DEBUG_KEYBOARD_DRIVER,"buffer=%08X, char=%08X, top=%08X\t", KEYBOARD_BUFFER_ADDRESS, kKbdBuffCurrChar, kKbdBuffCurrTop);
    char lTemp=0;
    bool debugMsgPrinted=false;
    //CLR 02/19/2017 - Had to change the conditon because of modifications I made to how buffer & bufferbase are used.
    while (kKbdBuffCurrTop==(char*)KEYBOARD_BUFFER_ADDRESS)
   112b4:	a1 60 99 12 00       	mov    eax,ds:0x129960
   112b9:	3d b0 24 16 00       	cmp    eax,0x1624b0
   112be:	74 d6                	je     11296 <waitForKeyboardKey+0x37>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:51
            debugMsgPrinted=true;
        }
        __asm__("sti\nhlt\n");
        waitTicks(1);
    }
    lTemp=keyboardGetKeyFromBuffer();
   112c0:	e8 43 ff ff ff       	call   11208 <keyboardGetKeyFromBuffer>
   112c5:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os//chrisOS/src/char/keyboard.c:52
    printd(DEBUG_KEYBOARD_DRIVER,"got a key %u!\n", lTemp);
   112c8:	0f be 45 f6          	movsx  eax,BYTE PTR [ebp-0xa]
   112cc:	83 ec 04             	sub    esp,0x4
   112cf:	50                   	push   eax
   112d0:	68 a2 53 04 00       	push   0x453a2
   112d5:	68 00 00 10 00       	push   0x100000
   112da:	e8 9c 64 01 00       	call   2777b <printd>
   112df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:53
    return lTemp;
   112e2:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
/home/yogi/src/os//chrisOS/src/char/keyboard.c:54
}
   112e6:	c9                   	leave  
   112e7:	c3                   	ret    

000112e8 <gets>:
gets():
/home/yogi/src/os//chrisOS/src/char/keyboard.c:57

void gets(char* buffer, int len)
{
   112e8:	55                   	push   ebp
   112e9:	89 e5                	mov    ebp,esp
   112eb:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/char/keyboard.c:58
    volatile char inchar=0;
   112ee:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:59
    int cnt=0;
   112f2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:60
    memset(buffer,0,len);
   112f9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   112fc:	83 ec 04             	sub    esp,0x4
   112ff:	50                   	push   eax
   11300:	6a 00                	push   0x0
   11302:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11305:	e8 ff 42 01 00       	call   25609 <memset>
   1130a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:63
    while (1==1)
    {
        inchar=waitForKeyboardKey();
   1130d:	e8 4d ff ff ff       	call   1125f <waitForKeyboardKey>
   11312:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os//chrisOS/src/char/keyboard.c:64
        if (inchar=='\b' && cnt>0)
   11315:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   11319:	3c 08                	cmp    al,0x8
   1131b:	75 27                	jne    11344 <gets+0x5c>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:64 (discriminator 1)
   1131d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11321:	7e 21                	jle    11344 <gets+0x5c>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:66
        {
            buffer[cnt]=0;
   11323:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   11326:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11329:	01 d0                	add    eax,edx
   1132b:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:67
            cnt--;
   1132e:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os//chrisOS/src/char/keyboard.c:68
            puts("\b");
   11332:	83 ec 0c             	sub    esp,0xc
   11335:	68 b1 53 04 00       	push   0x453b1
   1133a:	e8 cb 70 00 00       	call   1840a <puts>
   1133f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:65
    memset(buffer,0,len);
    while (1==1)
    {
        inchar=waitForKeyboardKey();
        if (inchar=='\b' && cnt>0)
        {
   11342:	eb 63                	jmp    113a7 <gets+0xbf>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:70
            buffer[cnt]=0;
            cnt--;
            puts("\b");
        }
        else if (inchar>0)
   11344:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   11348:	84 c0                	test   al,al
   1134a:	7e c1                	jle    1130d <gets+0x25>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:72
        {
            if (inchar==0x0a)
   1134c:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   11350:	3c 0a                	cmp    al,0xa
   11352:	75 1a                	jne    1136e <gets+0x86>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:74
            {
                printk("%c",inchar);
   11354:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   11358:	0f be c0             	movsx  eax,al
   1135b:	83 ec 08             	sub    esp,0x8
   1135e:	50                   	push   eax
   1135f:	68 b3 53 04 00       	push   0x453b3
   11364:	e8 f2 63 01 00       	call   2775b <printk>
   11369:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:75
                return;
   1136c:	eb 3e                	jmp    113ac <gets+0xc4>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:77
            }
            if (cnt<len-2)
   1136e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11371:	83 e8 02             	sub    eax,0x2
   11374:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   11377:	7e 94                	jle    1130d <gets+0x25>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:79
            {
                printk("%c",inchar);
   11379:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   1137d:	0f be c0             	movsx  eax,al
   11380:	83 ec 08             	sub    esp,0x8
   11383:	50                   	push   eax
   11384:	68 b3 53 04 00       	push   0x453b3
   11389:	e8 cd 63 01 00       	call   2775b <printk>
   1138e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:80
                buffer[cnt++]=inchar;
   11391:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11394:	8d 50 01             	lea    edx,[eax+0x1]
   11397:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   1139a:	89 c2                	mov    edx,eax
   1139c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1139f:	01 c2                	add    edx,eax
   113a1:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   113a5:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os//chrisOS/src/char/keyboard.c:83
            }
        }
    }
   113a7:	e9 61 ff ff ff       	jmp    1130d <gets+0x25>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:84
}
   113ac:	c9                   	leave  
   113ad:	c3                   	ret    

000113ae <getc>:
getc():
/home/yogi/src/os//chrisOS/src/char/keyboard.c:87

char getc()
{
   113ae:	55                   	push   ebp
   113af:	89 e5                	mov    ebp,esp
   113b1:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/char/keyboard.c:88
   int inchar=waitForKeyboardKey();
   113b4:	e8 a6 fe ff ff       	call   1125f <waitForKeyboardKey>
   113b9:	0f be c0             	movsx  eax,al
   113bc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/char/keyboard.c:90
   
   while (inchar==0)
   113bf:	eb 0b                	jmp    113cc <getc+0x1e>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:92
   {
       inchar=waitForKeyboardKey();
   113c1:	e8 99 fe ff ff       	call   1125f <waitForKeyboardKey>
   113c6:	0f be c0             	movsx  eax,al
   113c9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/char/keyboard.c:90

char getc()
{
   int inchar=waitForKeyboardKey();
   
   while (inchar==0)
   113cc:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   113d0:	74 ef                	je     113c1 <getc+0x13>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:94
   {
       inchar=waitForKeyboardKey();
   }
   return inchar;
   113d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os//chrisOS/src/char/keyboard.c:95
}
   113d5:	c9                   	leave  
   113d6:	c3                   	ret    
   113d7:	90                   	nop

000113d8 <kPagingGet4kPDEntryValueCR3>:
kPagingGet4kPDEntryValueCR3():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:21
extern uint32_t kDebugLevel;



uint32_t kPagingGet4kPDEntryValueCR3(uintptr_t PageDirAddress, uint32_t address)
{
   113d8:	55                   	push   ebp
   113d9:	89 e5                	mov    ebp,esp
   113db:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/init/kpaging.c:22
    address&=0xFFFFF000;
   113de:	81 65 0c 00 f0 ff ff 	and    DWORD PTR [ebp+0xc],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:23
    uintptr_t*pageDirEntry=((PageDirAddress + (((address & 0xFFC00000) >> 22) << 2)));
   113e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   113e8:	c1 e8 16             	shr    eax,0x16
   113eb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   113f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   113f5:	01 d0                	add    eax,edx
   113f7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:24
    uintptr_t* lTemp=(uint32_t*)((PageDirAddress + (((address & 0xFFC00000) >> 22) << 2)));
   113fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   113fd:	c1 e8 16             	shr    eax,0x16
   11400:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11407:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1140a:	01 d0                	add    eax,edx
   1140c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:26
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   1140f:	a1 78 98 12 00       	mov    eax,ds:0x129878
   11414:	83 e0 40             	and    eax,0x40
   11417:	85 c0                	test   eax,eax
   11419:	74 19                	je     11434 <kPagingGet4kPDEntryValueCR3+0x5c>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:27
            printk("kPagingGet4kPDEntryValueCR3: dirAddressPtr=0x%08x (PDIR=0x%08X)\n", *lTemp,PageDirAddress);
   1141b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1141e:	8b 00                	mov    eax,DWORD PTR [eax]
   11420:	83 ec 04             	sub    esp,0x4
   11423:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11426:	50                   	push   eax
   11427:	68 c0 54 04 00       	push   0x454c0
   1142c:	e8 2a 63 01 00       	call   2775b <printk>
   11431:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:29
#endif
    return (uint32_t)*lTemp;
   11434:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11437:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os//chrisOS/src/init/kpaging.c:30
}
   11439:	c9                   	leave  
   1143a:	c3                   	ret    

0001143b <kPagingGet4kPDEntryValue>:
kPagingGet4kPDEntryValue():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:33

uint32_t kPagingGet4kPDEntryValue(uint32_t address)
{
   1143b:	55                   	push   ebp
   1143c:	89 e5                	mov    ebp,esp
   1143e:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os//chrisOS/src/init/kpaging.c:34
    return kPagingGet4kPDEntryValueCR3(KERNEL_PAGE_DIR_ADDRESS,address);
   11441:	83 ec 08             	sub    esp,0x8
   11444:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11447:	68 00 a0 4b 00       	push   0x4ba000
   1144c:	e8 87 ff ff ff       	call   113d8 <kPagingGet4kPDEntryValueCR3>
   11451:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:35
}
   11454:	c9                   	leave  
   11455:	c3                   	ret    

00011456 <kPagingGet4kPDEntryAddressCR3>:
kPagingGet4kPDEntryAddressCR3():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:38

uint32_t kPagingGet4kPDEntryAddressCR3(uintptr_t PageDirAddress, uint32_t address)
{
   11456:	55                   	push   ebp
   11457:	89 e5                	mov    ebp,esp
   11459:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/init/kpaging.c:39
    address&=0xFFFFF000;
   1145c:	81 65 0c 00 f0 ff ff 	and    DWORD PTR [ebp+0xc],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:40
    uintptr_t lTemp=((PageDirAddress  | (((address & 0xFFC00000) >> 22) << 2)));
   11463:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11466:	c1 e8 16             	shr    eax,0x16
   11469:	c1 e0 02             	shl    eax,0x2
   1146c:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
   1146f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:42
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11472:	a1 78 98 12 00       	mov    eax,ds:0x129878
   11477:	83 e0 40             	and    eax,0x40
   1147a:	85 c0                	test   eax,eax
   1147c:	74 16                	je     11494 <kPagingGet4kPDEntryAddressCR3+0x3e>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:43
            printk("kPagingGet4kPDEntryAddressCR3: dirEntryAddress=0x%08x  (PDIR=0x%08X)\n", lTemp, PageDirAddress);
   1147e:	83 ec 04             	sub    esp,0x4
   11481:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11484:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11487:	68 04 55 04 00       	push   0x45504
   1148c:	e8 ca 62 01 00       	call   2775b <printk>
   11491:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:45
#endif
    return (uint32_t)lTemp & 0xFFFFFFFF;
   11494:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os//chrisOS/src/init/kpaging.c:46
}
   11497:	c9                   	leave  
   11498:	c3                   	ret    

00011499 <kPagingGet4kPDEntryAddress>:
kPagingGet4kPDEntryAddress():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:49

uint32_t kPagingGet4kPDEntryAddress(uint32_t address)
{
   11499:	55                   	push   ebp
   1149a:	89 e5                	mov    ebp,esp
   1149c:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os//chrisOS/src/init/kpaging.c:50
    return kPagingGet4kPDEntryAddressCR3(KERNEL_PAGE_DIR_ADDRESS,address);
   1149f:	83 ec 08             	sub    esp,0x8
   114a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   114a5:	68 00 a0 4b 00       	push   0x4ba000
   114aa:	e8 a7 ff ff ff       	call   11456 <kPagingGet4kPDEntryAddressCR3>
   114af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:51
}
   114b2:	c9                   	leave  
   114b3:	c3                   	ret    

000114b4 <kPagingGet4kPTEntryAddressCR3>:
kPagingGet4kPTEntryAddressCR3():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:54

uint32_t kPagingGet4kPTEntryAddressCR3(uintptr_t pageDirAddress, uint32_t address)
{
   114b4:	55                   	push   ebp
   114b5:	89 e5                	mov    ebp,esp
   114b7:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/init/kpaging.c:55
    address&=0xFFFFF000;
   114ba:	81 65 0c 00 f0 ff ff 	and    DWORD PTR [ebp+0xc],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:56
    uintptr_t pDirPtr=kPagingGet4kPDEntryValueCR3(pageDirAddress,address) & 0xFFFFF000;
   114c1:	83 ec 08             	sub    esp,0x8
   114c4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   114c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   114ca:	e8 09 ff ff ff       	call   113d8 <kPagingGet4kPDEntryValueCR3>
   114cf:	83 c4 10             	add    esp,0x10
   114d2:	25 00 f0 ff ff       	and    eax,0xfffff000
   114d7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:57
    return ((address & 0x3FF000) >> 12) << 2 | pDirPtr;
   114da:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   114dd:	25 00 f0 3f 00       	and    eax,0x3ff000
   114e2:	c1 e8 0c             	shr    eax,0xc
   114e5:	c1 e0 02             	shl    eax,0x2
   114e8:	0b 45 f4             	or     eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os//chrisOS/src/init/kpaging.c:58
}
   114eb:	c9                   	leave  
   114ec:	c3                   	ret    

000114ed <kPagingGet4kPTEntryAddress>:
kPagingGet4kPTEntryAddress():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:61

uint32_t kPagingGet4kPTEntryAddress(uint32_t address)
{
   114ed:	55                   	push   ebp
   114ee:	89 e5                	mov    ebp,esp
   114f0:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os//chrisOS/src/init/kpaging.c:62
    return kPagingGet4kPTEntryAddressCR3(KERNEL_PAGE_DIR_ADDRESS,address);
   114f3:	83 ec 08             	sub    esp,0x8
   114f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   114f9:	68 00 a0 4b 00       	push   0x4ba000
   114fe:	e8 b1 ff ff ff       	call   114b4 <kPagingGet4kPTEntryAddressCR3>
   11503:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:63
}
   11506:	c9                   	leave  
   11507:	c3                   	ret    

00011508 <kPagingGet4kPTEntryValueCR3>:
kPagingGet4kPTEntryValueCR3():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:66

uint32_t kPagingGet4kPTEntryValueCR3(uintptr_t pageDirAddress, uint32_t address)
{
   11508:	55                   	push   ebp
   11509:	89 e5                	mov    ebp,esp
   1150b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/init/kpaging.c:67
    address&=0xFFFFF000;
   1150e:	81 65 0c 00 f0 ff ff 	and    DWORD PTR [ebp+0xc],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:68
    uint32_t* pTablePtr=(uint32_t*)kPagingGet4kPTEntryAddressCR3(pageDirAddress,address);
   11515:	83 ec 08             	sub    esp,0x8
   11518:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1151b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1151e:	e8 91 ff ff ff       	call   114b4 <kPagingGet4kPTEntryAddressCR3>
   11523:	83 c4 10             	add    esp,0x10
   11526:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:70
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11529:	a1 78 98 12 00       	mov    eax,ds:0x129878
   1152e:	83 e0 40             	and    eax,0x40
   11531:	85 c0                	test   eax,eax
   11533:	74 19                	je     1154e <kPagingGet4kPTEntryValueCR3+0x46>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:71
             printk("kPagingGet4kPTEntryValueCR3: PTAddress=0x%08X, PTValue=0x%08X (PDIR=0x%08X)\n", pTablePtr,*pTablePtr,pageDirAddress);
   11535:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11538:	8b 00                	mov    eax,DWORD PTR [eax]
   1153a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1153d:	50                   	push   eax
   1153e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11541:	68 4c 55 04 00       	push   0x4554c
   11546:	e8 10 62 01 00       	call   2775b <printk>
   1154b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:73
#endif
    return *pTablePtr;
   1154e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11551:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os//chrisOS/src/init/kpaging.c:74
}
   11553:	c9                   	leave  
   11554:	c3                   	ret    

00011555 <kPagingGet4kPTEntryValue>:
kPagingGet4kPTEntryValue():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:77

uint32_t kPagingGet4kPTEntryValue(uint32_t address)
{
   11555:	55                   	push   ebp
   11556:	89 e5                	mov    ebp,esp
   11558:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os//chrisOS/src/init/kpaging.c:78
    return kPagingGet4kPTEntryValueCR3(KERNEL_PAGE_DIR_ADDRESS,address);
   1155b:	83 ec 08             	sub    esp,0x8
   1155e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11561:	68 00 a0 4b 00       	push   0x4ba000
   11566:	e8 9d ff ff ff       	call   11508 <kPagingGet4kPTEntryValueCR3>
   1156b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:79
}
   1156e:	c9                   	leave  
   1156f:	c3                   	ret    

00011570 <kPagingSetPageReadOnlyFlag>:
kPagingSetPageReadOnlyFlag():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:85




void kPagingSetPageReadOnlyFlag(uintptr_t* ptEntry, bool readOnly)
{
   11570:	55                   	push   ebp
   11571:	89 e5                	mov    ebp,esp
   11573:	83 ec 18             	sub    esp,0x18
   11576:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11579:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:87
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   1157c:	a1 78 98 12 00       	mov    eax,ds:0x129878
   11581:	83 e0 40             	and    eax,0x40
   11584:	85 c0                	test   eax,eax
   11586:	74 19                	je     115a1 <kPagingSetPageReadOnlyFlag+0x31>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:88
            printk("pagingMakePageReadOnly: 0x%08X - before/after: 0x%08X/", ptEntry, *ptEntry);
   11588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1158b:	8b 00                	mov    eax,DWORD PTR [eax]
   1158d:	83 ec 04             	sub    esp,0x4
   11590:	50                   	push   eax
   11591:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11594:	68 9c 55 04 00       	push   0x4559c
   11599:	e8 bd 61 01 00       	call   2775b <printk>
   1159e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:90
#endif
         if (readOnly)
   115a1:	80 7d f4 00          	cmp    BYTE PTR [ebp-0xc],0x0
   115a5:	74 11                	je     115b8 <kPagingSetPageReadOnlyFlag+0x48>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:91
            *ptEntry&=0xFFFFFFFD;
   115a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115aa:	8b 00                	mov    eax,DWORD PTR [eax]
   115ac:	83 e0 fd             	and    eax,0xfffffffd
   115af:	89 c2                	mov    edx,eax
   115b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115b4:	89 10                	mov    DWORD PTR [eax],edx
   115b6:	eb 0f                	jmp    115c7 <kPagingSetPageReadOnlyFlag+0x57>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:93
         else
            *ptEntry|=2; 
   115b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115bb:	8b 00                	mov    eax,DWORD PTR [eax]
   115bd:	83 c8 02             	or     eax,0x2
   115c0:	89 c2                	mov    edx,eax
   115c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115c5:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:94
    RELOAD_CR3
   115c7:	0f 20 d8             	mov    eax,cr3
   115ca:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:96
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   115cd:	a1 78 98 12 00       	mov    eax,ds:0x129878
   115d2:	83 e0 40             	and    eax,0x40
   115d5:	85 c0                	test   eax,eax
   115d7:	74 16                	je     115ef <kPagingSetPageReadOnlyFlag+0x7f>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:97
            printk("0x%08X\n", *ptEntry);
   115d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115dc:	8b 00                	mov    eax,DWORD PTR [eax]
   115de:	83 ec 08             	sub    esp,0x8
   115e1:	50                   	push   eax
   115e2:	68 d3 55 04 00       	push   0x455d3
   115e7:	e8 6f 61 01 00       	call   2775b <printk>
   115ec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:99
#endif
}
   115ef:	90                   	nop
   115f0:	c9                   	leave  
   115f1:	c3                   	ret    

000115f2 <kPagingUpdatePTEPresentFlag>:
kPagingUpdatePTEPresentFlag():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:102

void kPagingUpdatePTEPresentFlag(uintptr_t* ptEntry, bool present)
{
   115f2:	55                   	push   ebp
   115f3:	89 e5                	mov    ebp,esp
   115f5:	83 ec 18             	sub    esp,0x18
   115f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   115fb:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:103
         printd(DEBUG_PAGING,"pagingUpdatePTEPresentFlag: 0x%08X - before/after: 0x%08X/", ptEntry, *ptEntry);
   115fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11601:	8b 00                	mov    eax,DWORD PTR [eax]
   11603:	50                   	push   eax
   11604:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11607:	68 dc 55 04 00       	push   0x455dc
   1160c:	6a 40                	push   0x40
   1160e:	e8 68 61 01 00       	call   2777b <printd>
   11613:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:104
         if (present)
   11616:	80 7d f4 00          	cmp    BYTE PTR [ebp-0xc],0x0
   1161a:	74 11                	je     1162d <kPagingUpdatePTEPresentFlag+0x3b>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:105
             *ptEntry=*ptEntry | 1;
   1161c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1161f:	8b 00                	mov    eax,DWORD PTR [eax]
   11621:	83 c8 01             	or     eax,0x1
   11624:	89 c2                	mov    edx,eax
   11626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11629:	89 10                	mov    DWORD PTR [eax],edx
   1162b:	eb 0f                	jmp    1163c <kPagingUpdatePTEPresentFlag+0x4a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:107
         else
             *ptEntry&=0xFFFFFFFE;
   1162d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11630:	8b 00                	mov    eax,DWORD PTR [eax]
   11632:	83 e0 fe             	and    eax,0xfffffffe
   11635:	89 c2                	mov    edx,eax
   11637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1163a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:108
         __asm__("mov eax,cr3\nmov cr3,eax\n":::"eax");
   1163c:	0f 20 d8             	mov    eax,cr3
   1163f:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:109
         printd(DEBUG_PAGING,"0x%08X\n", *ptEntry);
   11642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11645:	8b 00                	mov    eax,DWORD PTR [eax]
   11647:	83 ec 04             	sub    esp,0x4
   1164a:	50                   	push   eax
   1164b:	68 d3 55 04 00       	push   0x455d3
   11650:	6a 40                	push   0x40
   11652:	e8 24 61 01 00       	call   2777b <printd>
   11657:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:110
}
   1165a:	90                   	nop
   1165b:	c9                   	leave  
   1165c:	c3                   	ret    

0001165d <kSetVirtualRangeRO>:
kSetVirtualRangeRO():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:113

void kSetVirtualRangeRO(uint32_t startAddy, uint32_t endAddy, bool readOnly)
{
   1165d:	55                   	push   ebp
   1165e:	89 e5                	mov    ebp,esp
   11660:	83 ec 28             	sub    esp,0x28
   11663:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11666:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:116
    uintptr_t* startPTE;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11669:	a1 78 98 12 00       	mov    eax,ds:0x129878
   1166e:	83 e0 40             	and    eax,0x40
   11671:	85 c0                	test   eax,eax
   11673:	74 16                	je     1168b <kSetVirtualRangeRO+0x2e>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:117
           printk("kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
   11675:	83 ec 04             	sub    esp,0x4
   11678:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1167b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1167e:	68 18 56 04 00       	push   0x45618
   11683:	e8 d3 60 01 00       	call   2775b <printk>
   11688:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:119
#endif
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
   1168b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1168e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   11691:	eb 64                	jmp    116f7 <kSetVirtualRangeRO+0x9a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:121
    {
        startPTE=(uintptr_t*)kPagingGet4kPTEntryAddress(cnt);
   11693:	83 ec 0c             	sub    esp,0xc
   11696:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11699:	e8 4f fe ff ff       	call   114ed <kPagingGet4kPTEntryAddress>
   1169e:	83 c4 10             	add    esp,0x10
   116a1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:123
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   116a4:	a1 78 98 12 00       	mov    eax,ds:0x129878
   116a9:	83 e0 40             	and    eax,0x40
   116ac:	85 c0                	test   eax,eax
   116ae:	74 26                	je     116d6 <kSetVirtualRangeRO+0x79>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:124
            printk("0x%08X (0x%08X) %s --> ", cnt, startPTE, readOnly?"ro":"rw");
   116b0:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   116b4:	74 07                	je     116bd <kSetVirtualRangeRO+0x60>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:124 (discriminator 1)
   116b6:	b8 45 56 04 00       	mov    eax,0x45645
   116bb:	eb 05                	jmp    116c2 <kSetVirtualRangeRO+0x65>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:124 (discriminator 2)
   116bd:	b8 48 56 04 00       	mov    eax,0x45648
/home/yogi/src/os//chrisOS/src/init/kpaging.c:124 (discriminator 4)
   116c2:	50                   	push   eax
   116c3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   116c6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   116c9:	68 4b 56 04 00       	push   0x4564b
   116ce:	e8 88 60 01 00       	call   2775b <printk>
   116d3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:126 (discriminator 2)
#endif
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
   116d6:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
   116da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   116dd:	8d 48 04             	lea    ecx,[eax+0x4]
   116e0:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   116e3:	83 ec 08             	sub    esp,0x8
   116e6:	52                   	push   edx
   116e7:	50                   	push   eax
   116e8:	e8 83 fe ff ff       	call   11570 <kPagingSetPageReadOnlyFlag>
   116ed:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:119 (discriminator 2)
    uintptr_t* startPTE;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
           printk("kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
#endif
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
   116f0:	81 45 f4 00 10 00 00 	add    DWORD PTR [ebp-0xc],0x1000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:119 (discriminator 1)
   116f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   116fa:	83 c0 01             	add    eax,0x1
   116fd:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   11700:	73 91                	jae    11693 <kSetVirtualRangeRO+0x36>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:130
#endif
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
            
    }
        //for cnt=0;cnt<=8192;cnt+=4096
}
   11702:	90                   	nop
   11703:	c9                   	leave  
   11704:	c3                   	ret    

00011705 <kpagingUpdatePresentFlagA>:
kpagingUpdatePresentFlagA():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:134

//Absolute version, page passed is already virtual
void kpagingUpdatePresentFlagA(uint32_t address, bool present)
{
   11705:	55                   	push   ebp
   11706:	89 e5                	mov    ebp,esp
   11708:	83 ec 28             	sub    esp,0x28
   1170b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1170e:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:136
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11711:	a1 78 98 12 00       	mov    eax,ds:0x129878
   11716:	83 e0 40             	and    eax,0x40
   11719:	85 c0                	test   eax,eax
   1171b:	74 26                	je     11743 <kpagingUpdatePresentFlagA+0x3e>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:137
            printk("kpagingUpdatePresentFlagA: Make 0x%08X %s\n", address, present?"present":"not present");
   1171d:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   11721:	74 07                	je     1172a <kpagingUpdatePresentFlagA+0x25>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:137 (discriminator 1)
   11723:	b8 63 56 04 00       	mov    eax,0x45663
   11728:	eb 05                	jmp    1172f <kpagingUpdatePresentFlagA+0x2a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:137 (discriminator 2)
   1172a:	b8 6b 56 04 00       	mov    eax,0x4566b
/home/yogi/src/os//chrisOS/src/init/kpaging.c:137 (discriminator 4)
   1172f:	83 ec 04             	sub    esp,0x4
   11732:	50                   	push   eax
   11733:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11736:	68 78 56 04 00       	push   0x45678
   1173b:	e8 1b 60 01 00       	call   2775b <printk>
   11740:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:139
#endif
        uintptr_t* pagePTE= (uintptr_t*)kPagingGet4kPTEntryAddress(address&0xFFFFF000);
   11743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11746:	25 00 f0 ff ff       	and    eax,0xfffff000
   1174b:	83 ec 0c             	sub    esp,0xc
   1174e:	50                   	push   eax
   1174f:	e8 99 fd ff ff       	call   114ed <kPagingGet4kPTEntryAddress>
   11754:	83 c4 10             	add    esp,0x10
   11757:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:141
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   1175a:	a1 78 98 12 00       	mov    eax,ds:0x129878
   1175f:	83 e0 40             	and    eax,0x40
   11762:	85 c0                	test   eax,eax
   11764:	74 13                	je     11779 <kpagingUpdatePresentFlagA+0x74>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:142
            printk("kpagingUpdatePresentFlagA: updating entry 0x%08X\n", pagePTE);
   11766:	83 ec 08             	sub    esp,0x8
   11769:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1176c:	68 a4 56 04 00       	push   0x456a4
   11771:	e8 e5 5f 01 00       	call   2775b <printk>
   11776:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:144
#endif
        kPagingUpdatePTEPresentFlag(pagePTE, present);
   11779:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   1177d:	83 ec 08             	sub    esp,0x8
   11780:	50                   	push   eax
   11781:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11784:	e8 69 fe ff ff       	call   115f2 <kPagingUpdatePTEPresentFlag>
   11789:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:145
}
   1178c:	90                   	nop
   1178d:	c9                   	leave  
   1178e:	c3                   	ret    

0001178f <kpagingUpdatePresentFlagV>:
kpagingUpdatePresentFlagV():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:148

void kpagingUpdatePresentFlagV(uint32_t address, bool present)
{
   1178f:	55                   	push   ebp
   11790:	89 e5                	mov    ebp,esp
   11792:	83 ec 18             	sub    esp,0x18
   11795:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11798:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:149
    address+=KERNEL_PAGED_BASE_ADDRESS; 
   1179b:	81 6d 08 00 00 00 40 	sub    DWORD PTR [ebp+0x8],0x40000000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:150
    kpagingUpdatePresentFlagA(address, present);
   117a2:	0f b6 45 f4          	movzx  eax,BYTE PTR [ebp-0xc]
   117a6:	83 ec 08             	sub    esp,0x8
   117a9:	50                   	push   eax
   117aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   117ad:	e8 53 ff ff ff       	call   11705 <kpagingUpdatePresentFlagA>
   117b2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:151
}
   117b5:	90                   	nop
   117b6:	c9                   	leave  
   117b7:	c3                   	ret    

000117b8 <kMapPage>:
kMapPage():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:154

void kMapPage(uintptr_t mapTo, uintptr_t mapFrom, uint8_t flags)
{
   117b8:	55                   	push   ebp
   117b9:	89 e5                	mov    ebp,esp
   117bb:	53                   	push   ebx
   117bc:	83 ec 24             	sub    esp,0x24
   117bf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   117c2:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:158
    uint32_t *ptr;
    uint32_t ptrVal;
    uint32_t *ptrT;
    ptr=(uint32_t*)kKernelPageDir;
   117c5:	a1 e4 97 12 00       	mov    eax,ds:0x1297e4
   117ca:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:159
    ptrVal=ptr[(mapTo>>22)];
   117cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   117d0:	c1 e8 16             	shr    eax,0x16
   117d3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   117da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   117dd:	01 d0                	add    eax,edx
   117df:	8b 00                	mov    eax,DWORD PTR [eax]
   117e1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:160
    if (ptrVal==0 && mapTo < kE820MemoryBytes)
   117e4:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   117e8:	0f 85 cb 00 00 00    	jne    118b9 <kMapPage+0x101>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:160 (discriminator 1)
   117ee:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   117f1:	bb 00 00 00 00       	mov    ebx,0x0
   117f6:	a1 88 95 12 00       	mov    eax,ds:0x129588
   117fb:	8b 15 8c 95 12 00    	mov    edx,DWORD PTR ds:0x12958c
   11801:	39 d3                	cmp    ebx,edx
   11803:	0f 87 b0 00 00 00    	ja     118b9 <kMapPage+0x101>
   11809:	39 d3                	cmp    ebx,edx
   1180b:	72 08                	jb     11815 <kMapPage+0x5d>
   1180d:	39 c1                	cmp    ecx,eax
   1180f:	0f 83 a4 00 00 00    	jae    118b9 <kMapPage+0x101>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:162
    {
        ptrT=(uint32_t*)0x20000000;
   11815:	c7 45 ec 00 00 00 20 	mov    DWORD PTR [ebp-0x14],0x20000000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:163
        ptr[(mapTo>>22)]=0x20000063;
   1181c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1181f:	c1 e8 16             	shr    eax,0x16
   11822:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11829:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1182c:	01 d0                	add    eax,edx
   1182e:	c7 00 63 00 00 20    	mov    DWORD PTR [eax],0x20000063
/home/yogi/src/os//chrisOS/src/init/kpaging.c:164
        ptrT[(mapTo&0x003FFFFF/4096)]=mapFrom | flags;
   11834:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11837:	25 ff 03 00 00       	and    eax,0x3ff
   1183c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11843:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11846:	01 c2                	add    edx,eax
   11848:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   1184c:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
   1184f:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:166
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11851:	a1 78 98 12 00       	mov    eax,ds:0x129878
   11856:	83 e0 40             	and    eax,0x40
   11859:	85 c0                	test   eax,eax
   1185b:	0f 84 41 01 00 00    	je     119a2 <kMapPage+0x1ea>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:167
            printk("kMapPage: Mapped 0x%08X via dir=0x%08X, page=0x%08X, to 0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[(mapTo&0x003FFFFF/4096)],ptrT[(mapTo&0x003FFFFF/4096)]);
   11861:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11864:	25 ff 03 00 00       	and    eax,0x3ff
   11869:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11870:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11873:	01 d0                	add    eax,edx
   11875:	8b 00                	mov    eax,DWORD PTR [eax]
   11877:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1187a:	81 e2 ff 03 00 00    	and    edx,0x3ff
   11880:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
   11887:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1188a:	01 d1                	add    ecx,edx
   1188c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1188f:	c1 ea 16             	shr    edx,0x16
   11892:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
   11899:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1189c:	01 da                	add    edx,ebx
   1189e:	83 ec 0c             	sub    esp,0xc
   118a1:	50                   	push   eax
   118a2:	51                   	push   ecx
   118a3:	52                   	push   edx
   118a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   118a7:	68 d8 56 04 00       	push   0x456d8
   118ac:	e8 aa 5e 01 00       	call   2775b <printk>
   118b1:	83 c4 20             	add    esp,0x20
/home/yogi/src/os//chrisOS/src/init/kpaging.c:166
    {
        ptrT=(uint32_t*)0x20000000;
        ptr[(mapTo>>22)]=0x20000063;
        ptrT[(mapTo&0x003FFFFF/4096)]=mapFrom | flags;
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   118b4:	e9 e9 00 00 00       	jmp    119a2 <kMapPage+0x1ea>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:173
#endif
    }
    else
    {
        //ptrVal right now points to the pdir entry
        ptr=(uint32_t*)kKernelPageDir;
   118b9:	a1 e4 97 12 00       	mov    eax,ds:0x1297e4
   118be:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:174
        if (ptr[(mapTo>>22)]==0)
   118c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   118c4:	c1 e8 16             	shr    eax,0x16
   118c7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   118ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   118d1:	01 d0                	add    eax,edx
   118d3:	8b 00                	mov    eax,DWORD PTR [eax]
   118d5:	85 c0                	test   eax,eax
   118d7:	75 29                	jne    11902 <kMapPage+0x14a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:175
            ptr[mapTo>>22]=(KERNEL_PAGE_TABLE_BASE_ADDRESS + ((mapTo&0x003FFFFF)/4096)) | 0x63;
   118d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   118dc:	c1 e8 16             	shr    eax,0x16
   118df:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   118e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   118e9:	01 d0                	add    eax,edx
   118eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   118ee:	81 e2 ff ff 3f 00    	and    edx,0x3fffff
   118f4:	c1 ea 0c             	shr    edx,0xc
   118f7:	81 c2 00 c0 4c 00    	add    edx,0x4cc000
   118fd:	83 ca 63             	or     edx,0x63
   11900:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:176
        ptrVal=ptr[mapTo>>22];
   11902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11905:	c1 e8 16             	shr    eax,0x16
   11908:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   1190f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11912:	01 d0                	add    eax,edx
   11914:	8b 00                	mov    eax,DWORD PTR [eax]
   11916:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:177
        ptrVal=(ptrVal&0xFFFFF000);
   11919:	81 65 f0 00 f0 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:178
        ptrT=(uint32_t*)ptrVal;
   11920:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11923:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:180
        //Now ptrVal will point to offset within page table
        ptrVal=(mapTo&0x003FFFFF)/4096;
   11926:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11929:	25 ff ff 3f 00       	and    eax,0x3fffff
   1192e:	c1 e8 0c             	shr    eax,0xc
   11931:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:181
        ptrT[ptrVal]=mapFrom | flags;
   11934:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11937:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   1193e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11941:	01 c2                	add    edx,eax
   11943:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   11947:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
   1194a:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:185
//                printk("ptrT=%X(%X)\n",&ptrT[ptrVal],ptrT[ptrVal]);
//                STOPHERE2
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   1194c:	a1 78 98 12 00       	mov    eax,ds:0x129878
   11951:	83 e0 40             	and    eax,0x40
   11954:	85 c0                	test   eax,eax
   11956:	74 4a                	je     119a2 <kMapPage+0x1ea>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:186
            printk("2) Mapped 0x%08X via dir=0x%08X, page=0x%08X, to 0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[ptrVal],ptrT[ptrVal]);
   11958:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1195b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11962:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11965:	01 d0                	add    eax,edx
   11967:	8b 00                	mov    eax,DWORD PTR [eax]
   11969:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1196c:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
   11973:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   11976:	01 d1                	add    ecx,edx
   11978:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1197b:	c1 ea 16             	shr    edx,0x16
   1197e:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
   11985:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   11988:	01 da                	add    edx,ebx
   1198a:	83 ec 0c             	sub    esp,0xc
   1198d:	50                   	push   eax
   1198e:	51                   	push   ecx
   1198f:	52                   	push   edx
   11990:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11993:	68 18 57 04 00       	push   0x45718
   11998:	e8 be 5d 01 00       	call   2775b <printk>
   1199d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os//chrisOS/src/init/kpaging.c:190
#endif
    }
//    if (ptrT[(src&0x003FFFFF/1000)]==0)
}
   119a0:	eb 00                	jmp    119a2 <kMapPage+0x1ea>
   119a2:	90                   	nop
   119a3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   119a6:	c9                   	leave  
   119a7:	c3                   	ret    

000119a8 <kIsPageMapped>:
kIsPageMapped():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:193

bool kIsPageMapped(uintptr_t Address)
{
   119a8:	55                   	push   ebp
   119a9:	89 e5                	mov    ebp,esp
   119ab:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os//chrisOS/src/init/kpaging.c:194
    if (!kPagingGet4kPTEntryValue(Address))
   119ae:	83 ec 0c             	sub    esp,0xc
   119b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   119b4:	e8 9c fb ff ff       	call   11555 <kPagingGet4kPTEntryValue>
   119b9:	83 c4 10             	add    esp,0x10
   119bc:	85 c0                	test   eax,eax
   119be:	75 07                	jne    119c7 <kIsPageMapped+0x1f>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:195
        return false;
   119c0:	b8 00 00 00 00       	mov    eax,0x0
   119c5:	eb 05                	jmp    119cc <kIsPageMapped+0x24>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:196
    return true;
   119c7:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os//chrisOS/src/init/kpaging.c:197
}
   119cc:	c9                   	leave  
   119cd:	c3                   	ret    

000119ce <kUnMapPage>:
kUnMapPage():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:200

void kUnMapPage(uintptr_t mapTo)
{
   119ce:	55                   	push   ebp
   119cf:	89 e5                	mov    ebp,esp
   119d1:	53                   	push   ebx
   119d2:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os//chrisOS/src/init/kpaging.c:204
    uint32_t *ptr;
    uint32_t ptrVal;
    uint32_t *ptrT;
    ptr=(uint32_t*)kKernelPageDir;
   119d5:	a1 e4 97 12 00       	mov    eax,ds:0x1297e4
   119da:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:205
    ptrVal=ptr[(mapTo>>22)];
   119dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   119e0:	c1 e8 16             	shr    eax,0x16
   119e3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   119ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   119ed:	01 d0                	add    eax,edx
   119ef:	8b 00                	mov    eax,DWORD PTR [eax]
   119f1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:206
    if (ptrVal==0 && mapTo < kE820MemoryBytes)
   119f4:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   119f8:	0f 85 ad 00 00 00    	jne    11aab <kUnMapPage+0xdd>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:206 (discriminator 1)
   119fe:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   11a01:	bb 00 00 00 00       	mov    ebx,0x0
   11a06:	a1 88 95 12 00       	mov    eax,ds:0x129588
   11a0b:	8b 15 8c 95 12 00    	mov    edx,DWORD PTR ds:0x12958c
   11a11:	39 d3                	cmp    ebx,edx
   11a13:	0f 87 92 00 00 00    	ja     11aab <kUnMapPage+0xdd>
   11a19:	39 d3                	cmp    ebx,edx
   11a1b:	72 08                	jb     11a25 <kUnMapPage+0x57>
   11a1d:	39 c1                	cmp    ecx,eax
   11a1f:	0f 83 86 00 00 00    	jae    11aab <kUnMapPage+0xdd>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:208
    {
        ptrT=(uint32_t*)0x20000000;
   11a25:	c7 45 ec 00 00 00 20 	mov    DWORD PTR [ebp-0x14],0x20000000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:209
        ptr[(mapTo>>22)]=0x20000063;
   11a2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a2f:	c1 e8 16             	shr    eax,0x16
   11a32:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11a39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11a3c:	01 d0                	add    eax,edx
   11a3e:	c7 00 63 00 00 20    	mov    DWORD PTR [eax],0x20000063
/home/yogi/src/os//chrisOS/src/init/kpaging.c:210
        ptrT[(mapTo&0x003FFFFF/4096)]=0;
   11a44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a47:	25 ff 03 00 00       	and    eax,0x3ff
   11a4c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11a53:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11a56:	01 d0                	add    eax,edx
   11a58:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/init/kpaging.c:212
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11a5e:	a1 78 98 12 00       	mov    eax,ds:0x129878
   11a63:	83 e0 40             	and    eax,0x40
   11a66:	85 c0                	test   eax,eax
   11a68:	0f 84 cd 00 00 00    	je     11b3b <kUnMapPage+0x16d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:213
            printk("kMapPage: Unmapped 0x%08X via dir=0x%08X, page=0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[(mapTo&0x003FFFFF/4096)]);
   11a6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a71:	25 ff 03 00 00       	and    eax,0x3ff
   11a76:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11a7d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11a80:	01 c2                	add    edx,eax
   11a82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a85:	c1 e8 16             	shr    eax,0x16
   11a88:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
   11a8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11a92:	01 c8                	add    eax,ecx
   11a94:	52                   	push   edx
   11a95:	50                   	push   eax
   11a96:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11a99:	68 54 57 04 00       	push   0x45754
   11a9e:	e8 b8 5c 01 00       	call   2775b <printk>
   11aa3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:212
    {
        ptrT=(uint32_t*)0x20000000;
        ptr[(mapTo>>22)]=0x20000063;
        ptrT[(mapTo&0x003FFFFF/4096)]=0;
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11aa6:	e9 90 00 00 00       	jmp    11b3b <kUnMapPage+0x16d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:219
#endif
    }
    else
    {
        //ptrVal right now points to the pdir entry
        ptr=(uint32_t*)kKernelPageDir;
   11aab:	a1 e4 97 12 00       	mov    eax,ds:0x1297e4
   11ab0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:220
        ptrVal=ptr[mapTo>>22];
   11ab3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11ab6:	c1 e8 16             	shr    eax,0x16
   11ab9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11ac0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11ac3:	01 d0                	add    eax,edx
   11ac5:	8b 00                	mov    eax,DWORD PTR [eax]
   11ac7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:221
        ptrVal=(ptrVal&0xFFFFF000);
   11aca:	81 65 f0 00 f0 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:222
        ptrT=(uint32_t*)ptrVal;
   11ad1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11ad4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:224
        //Now ptrVal will point to offset within page table
        ptrVal=(mapTo&0x003FFFFF)/4096;
   11ad7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11ada:	25 ff ff 3f 00       	and    eax,0x3fffff
   11adf:	c1 e8 0c             	shr    eax,0xc
   11ae2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:225
        ptrT[ptrVal]=0;
   11ae5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11ae8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11aef:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11af2:	01 d0                	add    eax,edx
   11af4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/init/kpaging.c:229
//                printk("ptrT=%X(%X)\n",&ptrT[ptrVal],ptrT[ptrVal]);
//                STOPHERE2
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11afa:	a1 78 98 12 00       	mov    eax,ds:0x129878
   11aff:	83 e0 40             	and    eax,0x40
   11b02:	85 c0                	test   eax,eax
   11b04:	74 35                	je     11b3b <kUnMapPage+0x16d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:230
            printk("2) Unmapped 0x%08X via dir=0x%08X, page=0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[ptrVal]);
   11b06:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11b09:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11b10:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11b13:	01 c2                	add    edx,eax
   11b15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11b18:	c1 e8 16             	shr    eax,0x16
   11b1b:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
   11b22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11b25:	01 c8                	add    eax,ecx
   11b27:	52                   	push   edx
   11b28:	50                   	push   eax
   11b29:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11b2c:	68 8c 57 04 00       	push   0x4578c
   11b31:	e8 25 5c 01 00       	call   2775b <printk>
   11b36:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:234
#endif
    }
//    if (ptrT[(src&0x003FFFFF/1000)]==0)
}
   11b39:	eb 00                	jmp    11b3b <kUnMapPage+0x16d>
   11b3b:	90                   	nop
   11b3c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   11b3f:	c9                   	leave  
   11b40:	c3                   	ret    

00011b41 <kSetPhysicalRangeRO>:
kSetPhysicalRangeRO():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:237

void kSetPhysicalRangeRO(uint32_t startAddy, uint32_t endAddy, bool readOnly)
{
   11b41:	55                   	push   ebp
   11b42:	89 e5                	mov    ebp,esp
   11b44:	83 ec 18             	sub    esp,0x18
   11b47:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11b4a:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:239
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11b4d:	a1 78 98 12 00       	mov    eax,ds:0x129878
   11b52:	83 e0 40             	and    eax,0x40
   11b55:	85 c0                	test   eax,eax
   11b57:	74 2a                	je     11b83 <kSetPhysicalRangeRO+0x42>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:240
            printk("kMakePhysicalRangeRO: Make 0x%08X(0x%08X)-0x%08X(0x%08X) r/o\n", startAddy, startAddy&0xFffff000, endAddy, endAddy&0xFFFFF000);
   11b59:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11b5c:	25 00 f0 ff ff       	and    eax,0xfffff000
   11b61:	89 c2                	mov    edx,eax
   11b63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11b66:	25 00 f0 ff ff       	and    eax,0xfffff000
   11b6b:	83 ec 0c             	sub    esp,0xc
   11b6e:	52                   	push   edx
   11b6f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   11b72:	50                   	push   eax
   11b73:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11b76:	68 bc 57 04 00       	push   0x457bc
   11b7b:	e8 db 5b 01 00       	call   2775b <printk>
   11b80:	83 c4 20             	add    esp,0x20
/home/yogi/src/os//chrisOS/src/init/kpaging.c:242
#endif
    kSetVirtualRangeRO((startAddy + KERNEL_PAGED_BASE_ADDRESS) & 0xFFFFF000, (endAddy + KERNEL_PAGED_BASE_ADDRESS) & 0xFFFFF000, readOnly);
   11b83:	0f b6 45 f4          	movzx  eax,BYTE PTR [ebp-0xc]
   11b87:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   11b8a:	81 ea 00 00 00 40    	sub    edx,0x40000000
   11b90:	89 d1                	mov    ecx,edx
   11b92:	81 e1 00 f0 ff ff    	and    ecx,0xfffff000
   11b98:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   11b9b:	81 ea 00 00 00 40    	sub    edx,0x40000000
   11ba1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
   11ba7:	83 ec 04             	sub    esp,0x4
   11baa:	50                   	push   eax
   11bab:	51                   	push   ecx
   11bac:	52                   	push   edx
   11bad:	e8 ab fa ff ff       	call   1165d <kSetVirtualRangeRO>
   11bb2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:243
}
   11bb5:	90                   	nop
   11bb6:	c9                   	leave  
   11bb7:	c3                   	ret    

00011bb8 <mmKernelSetPageInUseFlag>:
mmKernelSetPageInUseFlag():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:246

void mmKernelSetPageInUseFlag(uintptr_t address, bool inUse)
{
   11bb8:	55                   	push   ebp
   11bb9:	89 e5                	mov    ebp,esp
   11bbb:	83 ec 28             	sub    esp,0x28
   11bbe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11bc1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:249
    uintptr_t* ptEntry;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11bc4:	a1 78 98 12 00       	mov    eax,ds:0x129878
   11bc9:	83 e0 40             	and    eax,0x40
   11bcc:	85 c0                	test   eax,eax
   11bce:	74 25                	je     11bf5 <mmKernelSetPageInUseFlag+0x3d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:250
           printd(DEBUG_PAGING, "mmKernelSetPageInUseFlag: Marking page with address 0x%08X as %s\n", address, inUse?"in use":"not in use");
   11bd0:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   11bd4:	74 07                	je     11bdd <mmKernelSetPageInUseFlag+0x25>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:250 (discriminator 1)
   11bd6:	b8 fa 57 04 00       	mov    eax,0x457fa
   11bdb:	eb 05                	jmp    11be2 <mmKernelSetPageInUseFlag+0x2a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:250 (discriminator 2)
   11bdd:	b8 01 58 04 00       	mov    eax,0x45801
/home/yogi/src/os//chrisOS/src/init/kpaging.c:250 (discriminator 4)
   11be2:	50                   	push   eax
   11be3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11be6:	68 0c 58 04 00       	push   0x4580c
   11beb:	6a 40                	push   0x40
   11bed:	e8 89 5b 01 00       	call   2777b <printd>
   11bf2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:252
#endif
        ptEntry=(uintptr_t*)kPagingGet4kPTEntryAddress(address);
   11bf5:	83 ec 0c             	sub    esp,0xc
   11bf8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11bfb:	e8 ed f8 ff ff       	call   114ed <kPagingGet4kPTEntryAddress>
   11c00:	83 c4 10             	add    esp,0x10
   11c03:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:253
        printd(DEBUG_PAGING,"mmKernelSetPageInUseFlag: PTE=0x%08X, Before PTE value=0x%08X\n",ptEntry,*ptEntry);
   11c06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11c09:	8b 00                	mov    eax,DWORD PTR [eax]
   11c0b:	50                   	push   eax
   11c0c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11c0f:	68 50 58 04 00       	push   0x45850
   11c14:	6a 40                	push   0x40
   11c16:	e8 60 5b 01 00       	call   2777b <printd>
   11c1b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:254
        if (inUse)
   11c1e:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   11c22:	74 11                	je     11c35 <mmKernelSetPageInUseFlag+0x7d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:255
            *ptEntry|=PAGING_IN_USE_FLAG_MASK;
   11c24:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11c27:	8b 00                	mov    eax,DWORD PTR [eax]
   11c29:	80 cc 08             	or     ah,0x8
   11c2c:	89 c2                	mov    edx,eax
   11c2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11c31:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:258
        else
            *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
}
   11c33:	eb 0f                	jmp    11c44 <mmKernelSetPageInUseFlag+0x8c>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:257
        ptEntry=(uintptr_t*)kPagingGet4kPTEntryAddress(address);
        printd(DEBUG_PAGING,"mmKernelSetPageInUseFlag: PTE=0x%08X, Before PTE value=0x%08X\n",ptEntry,*ptEntry);
        if (inUse)
            *ptEntry|=PAGING_IN_USE_FLAG_MASK;
        else
            *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
   11c35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11c38:	8b 00                	mov    eax,DWORD PTR [eax]
   11c3a:	80 e4 f7             	and    ah,0xf7
   11c3d:	89 c2                	mov    edx,eax
   11c3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11c42:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:258
}
   11c44:	90                   	nop
   11c45:	c9                   	leave  
   11c46:	c3                   	ret    

00011c47 <mmKernelSetPageRangeInUseFlag>:
mmKernelSetPageRangeInUseFlag():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:261

void mmKernelSetPageRangeInUseFlag(uintptr_t startAddress, uintptr_t endAddress, int pageSize, bool inUse)
{
   11c47:	55                   	push   ebp
   11c48:	89 e5                	mov    ebp,esp
   11c4a:	83 ec 28             	sub    esp,0x28
   11c4d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   11c50:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:262
    for (uintptr_t cnt=startAddress;cnt<endAddress;cnt+=pageSize)
   11c53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11c56:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   11c59:	eb 19                	jmp    11c74 <mmKernelSetPageRangeInUseFlag+0x2d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:263 (discriminator 3)
        mmKernelSetPageInUseFlag(cnt,inUse);
   11c5b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   11c5f:	83 ec 08             	sub    esp,0x8
   11c62:	50                   	push   eax
   11c63:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11c66:	e8 4d ff ff ff       	call   11bb8 <mmKernelSetPageInUseFlag>
   11c6b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:262 (discriminator 3)
            *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
}

void mmKernelSetPageRangeInUseFlag(uintptr_t startAddress, uintptr_t endAddress, int pageSize, bool inUse)
{
    for (uintptr_t cnt=startAddress;cnt<endAddress;cnt+=pageSize)
   11c6e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11c71:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:262 (discriminator 1)
   11c74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11c77:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   11c7a:	72 df                	jb     11c5b <mmKernelSetPageRangeInUseFlag+0x14>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:264
        mmKernelSetPageInUseFlag(cnt,inUse);
}
   11c7c:	90                   	nop
   11c7d:	c9                   	leave  
   11c7e:	c3                   	ret    

00011c7f <mmUnusePageRange>:
mmUnusePageRange():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:267

void mmUnusePageRange()
{
   11c7f:	55                   	push   ebp
   11c80:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/src/init/kpaging.c:269
    
}
   11c82:	90                   	nop
   11c83:	5d                   	pop    ebp
   11c84:	c3                   	ret    
   11c85:	66 90                	xchg   ax,ax
   11c87:	90                   	nop

00011c88 <strncmp>:
strncmp():
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
   11c88:	55                   	push   ebp
   11c89:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
   11c8b:	eb 4b                	jmp    11cd8 <strncmp+0x50>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
   11c8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11c90:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   11c93:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11c96:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11c99:	38 c2                	cmp    dl,al
   11c9b:	74 1e                	je     11cbb <strncmp+0x33>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
   11c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11ca0:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   11ca3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11ca6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11ca9:	38 c2                	cmp    dl,al
   11cab:	73 07                	jae    11cb4 <strncmp+0x2c>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:16 (discriminator 1)
   11cad:	b8 ff ff ff ff       	mov    eax,0xffffffff
   11cb2:	eb 2f                	jmp    11ce3 <strncmp+0x5b>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:16 (discriminator 2)
   11cb4:	b8 01 00 00 00       	mov    eax,0x1
   11cb9:	eb 28                	jmp    11ce3 <strncmp+0x5b>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
   11cbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11cbe:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11cc1:	84 c0                	test   al,al
   11cc3:	75 07                	jne    11ccc <strncmp+0x44>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:18
	    return 0;
   11cc5:	b8 00 00 00 00       	mov    eax,0x0
   11cca:	eb 17                	jmp    11ce3 <strncmp+0x5b>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
   11ccc:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   11cd0:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
   11cd4:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:14 (discriminator 1)
   11cd8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   11cdc:	75 af                	jne    11c8d <strncmp+0x5>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
   11cde:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:20
}
   11ce3:	5d                   	pop    ebp
   11ce4:	c3                   	ret    
   11ce5:	66 90                	xchg   ax,ax
   11ce7:	90                   	nop

00011ce8 <strncpy>:
strncpy():
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char * strncpy(char *s1, const char *s2, size_t n)
{
   11ce8:	55                   	push   ebp
   11ce9:	89 e5                	mov    ebp,esp
   11ceb:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:15
    char *s = s1;
   11cee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11cf1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
   11cf4:	eb 1b                	jmp    11d11 <strncpy+0x29>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
   11cf6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   11cf9:	8d 50 01             	lea    edx,[eax+0x1]
   11cfc:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   11cff:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   11d02:	8d 4a 01             	lea    ecx,[edx+0x1]
   11d05:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   11d08:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   11d0b:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:18
	--n;
   11d0d:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char * strncpy(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
   11d11:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   11d15:	74 1c                	je     11d33 <strncpy+0x4b>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:16 (discriminator 1)
   11d17:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11d1a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11d1d:	84 c0                	test   al,al
   11d1f:	75 d5                	jne    11cf6 <strncpy+0xe>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
   11d21:	eb 10                	jmp    11d33 <strncpy+0x4b>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
   11d23:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   11d26:	8d 50 01             	lea    edx,[eax+0x1]
   11d29:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   11d2c:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:22
	--n;
   11d2f:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
   11d33:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   11d37:	75 ea                	jne    11d23 <strncpy+0x3b>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    return s1;
   11d39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:25
}
   11d3c:	c9                   	leave  
   11d3d:	c3                   	ret    
   11d3e:	66 90                	xchg   ax,ax

00011d40 <dumpregs>:
dumpregs():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:22

.globl dumpregs
.type dumpregs, @function
dumpregs:
.code32
        mov exceptionAX, eax
   11d40:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:23
        mov exceptionBX, ebx
   11d45:	89 1d f4 96 12 00    	mov    DWORD PTR ds:0x1296f4,ebx
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:24
        mov exceptionCX, ecx
   11d4b:	89 0d f8 96 12 00    	mov    DWORD PTR ds:0x1296f8,ecx
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:25
        mov exceptionDX, edx
   11d51:	89 15 fc 96 12 00    	mov    DWORD PTR ds:0x1296fc,edx
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:26
        mov exceptionSI, esi
   11d57:	89 35 00 97 12 00    	mov    DWORD PTR ds:0x129700,esi
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:27
        mov exceptionDI, edi
   11d5d:	89 3d 04 97 12 00    	mov    DWORD PTR ds:0x129704,edi
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:28
        mov exceptionBP, eax
   11d63:	a3 08 97 12 00       	mov    ds:0x129708,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:29
        mov eax, cr0
   11d68:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:30
        mov exceptionCR0, eax
   11d6b:	a3 0c 97 12 00       	mov    ds:0x12970c,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:31
        mov eax, cr3
   11d70:	0f 20 d8             	mov    eax,cr3
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:32
        mov exceptionCR3, eax
   11d73:	a3 10 97 12 00       	mov    ds:0x129710,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:33
        mov eax, cr4
   11d78:	0f 20 e0             	mov    eax,cr4
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:34
        mov exceptionCR4, eax
   11d7b:	a3 14 97 12 00       	mov    ds:0x129714,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:35
        mov eax, exceptionAX
   11d80:	a1 f0 96 12 00       	mov    eax,ds:0x1296f0
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:36
        ret 
   11d85:	c3                   	ret    

00011d86 <storeGDT>:
storeGDT():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:42

.global storeGDT
.type storeGDT, @function
storeGDT:
.code32
    mov eax,[esp+4]
   11d86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:43
    sgdt [eax]
   11d8a:	0f 01 00             	sgdtd  [eax]
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:44
    ret
   11d8d:	c3                   	ret    

00011d8e <getCS>:
getCS():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:50

.global getCS
.type getCS, @function
getCS:
.code32
    push cs
   11d8e:	0e                   	push   cs
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:51
    pop eax
   11d8f:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:52
    ret
   11d90:	c3                   	ret    

00011d91 <getDS>:
getDS():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:58

.global getDS
.type getDS, @function
getDS:
.code32
    push DS
   11d91:	1e                   	push   ds
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:59
    pop eax
   11d92:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:60
    ret
   11d93:	c3                   	ret    

00011d94 <getES>:
getES():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:66

.global getES
.type getES, @function
getES:
.code32
    push ES
   11d94:	06                   	push   es
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:67
    pop eax
   11d95:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:68
    ret
   11d96:	c3                   	ret    

00011d97 <getFS>:
getFS():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:74

.global getFS
.type getFS, @function
getFS:
.code32
    push FS
   11d97:	0f a0                	push   fs
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:75
    pop eax
   11d99:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:76
    ret
   11d9a:	c3                   	ret    

00011d9b <getGS>:
getGS():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:82

.global getGS
.type getGS, @function
getGS:
.code32
    push GS
   11d9b:	0f a8                	push   gs
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:83
    pop eax
   11d9d:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:84
    ret
   11d9e:	c3                   	ret    

00011d9f <getSS>:
getSS():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:90

.global getSS
.type getSS, @function
getSS:
.code32
    push SS
   11d9f:	16                   	push   ss
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:91
    pop eax
   11da0:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:92
    ret
   11da1:	c3                   	ret    

00011da2 <getESP>:
getESP():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:98

.global getESP
.type getESP, @function
getESP:
.code32
    push ESP
   11da2:	54                   	push   esp
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:99
    pop eax
   11da3:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:100
    sub eax,4
   11da4:	83 e8 04             	sub    eax,0x4
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:101
    ret
   11da7:	c3                   	ret    

00011da8 <getEFlags>:
getEFlags():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:108

.global getEFlags
.type getEFlags, @function
getEFlags:
.code32
    pushfd
   11da8:	9c                   	pushf  
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:109
    pop eax
   11da9:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:110
    ret
   11daa:	c3                   	ret    

00011dab <enableCR0_WP>:
enableCR0_WP():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:116


.global enableCR0_WP
.type enableCR0_WP, @function
enableCR0_WP:
    push eax
   11dab:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:117
    mov eax,cr0
   11dac:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:118
    or eax,0x10000
   11daf:	0d 00 00 01 00       	or     eax,0x10000
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:119
    mov cr0,eax
   11db4:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:120
    pop eax
   11db7:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:121
    ret
   11db8:	c3                   	ret    
   11db9:	66 90                	xchg   ax,ax
   11dbb:	90                   	nop

00011dbc <selectHDNum>:
selectHDNum():
/home/yogi/src/os/chrisOS/src/bishell.c:523
        printk("\tMapping based on current CR3\n\tPD address=0x%08X, \n\tPD value=0x%08X, \n\tPT address=0x%08X, \n\tPT value=0x%08X\n\tPhysical Address=0x%08X\n",kPagingGet4kPDEntryAddress(lAddress),kPagingGet4kPDEntryValue(lAddress),kPagingGet4kPTEntryAddress(lAddress),kPagingGet4kPTEntryValue(lAddress),(kPagingGet4kPTEntryValue(lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF));
    }
}

void HIGH_CODE_SECTION selectHDNum (char* cmdline)
{
   11dbc:	55                   	push   ebp
   11dbd:	89 e5                	mov    ebp,esp
   11dbf:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:525
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int lTemp=0;
   11dc5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:526
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   11dcc:	83 ec 04             	sub    esp,0x4
   11dcf:	68 00 14 00 00       	push   0x1400
   11dd4:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11dda:	50                   	push   eax
   11ddb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11dde:	e8 1d 07 00 00       	call   12500 <parseParamsShell>
   11de3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:528

    lTemp =strtol(params[0],0,10);
   11de6:	83 ec 04             	sub    esp,0x4
   11de9:	6a 0a                	push   0xa
   11deb:	6a 00                	push   0x0
   11ded:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11df3:	50                   	push   eax
   11df4:	e8 e3 5c 01 00       	call   27adc <strtol>
   11df9:	83 c4 10             	add    esp,0x10
   11dfc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:530
 
    if (lTemp<0 || lTemp>kATADeviceInfoCount)
   11dff:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11e03:	78 0a                	js     11e0f <selectHDNum+0x53>
/home/yogi/src/os/chrisOS/src/bishell.c:530 (discriminator 1)
   11e05:	a1 04 98 12 00       	mov    eax,ds:0x129804
   11e0a:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   11e0d:	7e 1b                	jle    11e2a <selectHDNum+0x6e>
/home/yogi/src/os/chrisOS/src/bishell.c:531
        printk("Error, selected disk number (%u) is not valid.  It must be >=0 and <= %u\n",lTemp,kATADeviceInfoCount);
   11e0f:	a1 04 98 12 00       	mov    eax,ds:0x129804
   11e14:	83 ec 04             	sub    esp,0x4
   11e17:	50                   	push   eax
   11e18:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11e1b:	68 a0 59 04 00       	push   0x459a0
   11e20:	e8 36 59 01 00       	call   2775b <printk>
   11e25:	83 c4 10             	add    esp,0x10
   11e28:	eb 08                	jmp    11e32 <selectHDNum+0x76>
/home/yogi/src/os/chrisOS/src/bishell.c:533
    else
        kSelectedDiskNum=lTemp;
   11e2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11e2d:	a3 44 99 12 00       	mov    ds:0x129944,eax
/home/yogi/src/os/chrisOS/src/bishell.c:534
    parseMBR(&kATADeviceInfo[kSelectedDiskNum],&mbr);
   11e32:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   11e38:	a1 44 99 12 00       	mov    eax,ds:0x129944
   11e3d:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   11e43:	01 d0                	add    eax,edx
   11e45:	83 ec 08             	sub    esp,0x8
   11e48:	68 40 5f 09 00       	push   0x95f40
   11e4d:	50                   	push   eax
   11e4e:	e8 80 fb 00 00       	call   219d3 <parseMBR>
   11e53:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:535
    printk("Disk %u selected\n",kSelectedDiskNum);
   11e56:	a1 44 99 12 00       	mov    eax,ds:0x129944
   11e5b:	83 ec 08             	sub    esp,0x8
   11e5e:	50                   	push   eax
   11e5f:	68 ea 59 04 00       	push   0x459ea
   11e64:	e8 f2 58 01 00       	call   2775b <printk>
   11e69:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:536
}
   11e6c:	90                   	nop
   11e6d:	c9                   	leave  
   11e6e:	c3                   	ret    

00011e6f <selectPart>:
selectPart():
/home/yogi/src/os/chrisOS/src/bishell.c:565
    parseMBR(&kATADeviceInfo[driveNo],&mbr);
    printMBR(&mbr);
}

void HIGH_CODE_SECTION selectPart(char* cmdline)
{
   11e6f:	55                   	push   ebp
   11e70:	89 e5                	mov    ebp,esp
   11e72:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:567
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int lTemp=-1;
   11e78:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/bishell.c:568
    if (kSelectedDiskNum==-1)
   11e7f:	a1 44 99 12 00       	mov    eax,ds:0x129944
   11e84:	83 f8 ff             	cmp    eax,0xffffffff
   11e87:	75 10                	jne    11e99 <selectPart+0x2a>
/home/yogi/src/os/chrisOS/src/bishell.c:570
    {
        printk("You must select a disk with 'disk' before selecting a partition");
   11e89:	83 ec 0c             	sub    esp,0xc
   11e8c:	68 fc 59 04 00       	push   0x459fc
   11e91:	e8 c5 58 01 00       	call   2775b <printk>
   11e96:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:572
    }
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   11e99:	83 ec 04             	sub    esp,0x4
   11e9c:	68 00 14 00 00       	push   0x1400
   11ea1:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11ea7:	50                   	push   eax
   11ea8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11eab:	e8 50 06 00 00       	call   12500 <parseParamsShell>
   11eb0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:574

    lTemp =strtol(params[0],0,10);
   11eb3:	83 ec 04             	sub    esp,0x4
   11eb6:	6a 0a                	push   0xa
   11eb8:	6a 00                	push   0x0
   11eba:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11ec0:	50                   	push   eax
   11ec1:	e8 16 5c 01 00       	call   27adc <strtol>
   11ec6:	83 c4 10             	add    esp,0x10
   11ec9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:576
    //printk("parameter 1=%u\n",lTemp);
    if (lTemp<0 || lTemp>mbr.partCount)
   11ecc:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11ed0:	78 0a                	js     11edc <selectPart+0x6d>
/home/yogi/src/os/chrisOS/src/bishell.c:576 (discriminator 1)
   11ed2:	a1 40 63 09 00       	mov    eax,ds:0x96340
   11ed7:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   11eda:	7d 1b                	jge    11ef7 <selectPart+0x88>
/home/yogi/src/os/chrisOS/src/bishell.c:578
    {
        printk("Error, selected partition number (%u) is not valid.  It must be >=1 and <=%u\n",lTemp,mbr.partCount);
   11edc:	a1 40 63 09 00       	mov    eax,ds:0x96340
   11ee1:	83 ec 04             	sub    esp,0x4
   11ee4:	50                   	push   eax
   11ee5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11ee8:	68 3c 5a 04 00       	push   0x45a3c
   11eed:	e8 69 58 01 00       	call   2775b <printk>
   11ef2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:579
        return;
   11ef5:	eb 7d                	jmp    11f74 <selectPart+0x105>
/home/yogi/src/os/chrisOS/src/bishell.c:581
    }
    if (mbr.parts[lTemp].partTotalSectors==0)
   11ef7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11efa:	c1 e0 04             	shl    eax,0x4
   11efd:	05 40 5f 09 00       	add    eax,0x95f40
   11f02:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   11f05:	85 c0                	test   eax,eax
   11f07:	75 25                	jne    11f2e <selectPart+0xbf>
/home/yogi/src/os/chrisOS/src/bishell.c:583
    {
        printk("Error, selected partition (number %u) is not a valid partition as its total sector count is 0.",lTemp);
   11f09:	83 ec 08             	sub    esp,0x8
   11f0c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11f0f:	68 8c 5a 04 00       	push   0x45a8c
   11f14:	e8 42 58 01 00       	call   2775b <printk>
   11f19:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:584
        printMBR(&mbr);   
   11f1c:	83 ec 0c             	sub    esp,0xc
   11f1f:	68 40 5f 09 00       	push   0x95f40
   11f24:	e8 cf f9 00 00       	call   218f8 <printMBR>
   11f29:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:585
        return;
   11f2c:	eb 46                	jmp    11f74 <selectPart+0x105>
/home/yogi/src/os/chrisOS/src/bishell.c:587
    }
    kSelectedPartNum = lTemp;
   11f2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11f31:	a3 48 99 12 00       	mov    ds:0x129948,eax
/home/yogi/src/os/chrisOS/src/bishell.c:588
    ahciSetCurrentPart(mbr.parts[lTemp]);
   11f36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11f39:	c1 e0 04             	shl    eax,0x4
   11f3c:	05 40 5f 09 00       	add    eax,0x95f40
   11f41:	83 ec 10             	sub    esp,0x10
   11f44:	89 e2                	mov    edx,esp
   11f46:	8b 08                	mov    ecx,DWORD PTR [eax]
   11f48:	89 0a                	mov    DWORD PTR [edx],ecx
   11f4a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   11f4d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   11f50:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   11f53:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   11f56:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   11f59:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
   11f5c:	e8 14 34 00 00       	call   15375 <ahciSetCurrentPart>
   11f61:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:590
    //printk("Partition %u selected\n",kSelectedPartNum);
    attach("");
   11f64:	83 ec 0c             	sub    esp,0xc
   11f67:	68 eb 5a 04 00       	push   0x45aeb
   11f6c:	e8 1a 01 00 00       	call   1208b <attach>
   11f71:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:591
}
   11f74:	c9                   	leave  
   11f75:	c3                   	ret    

00011f76 <listParts>:
listParts():
/home/yogi/src/os/chrisOS/src/bishell.c:539
    parseMBR(&kATADeviceInfo[kSelectedDiskNum],&mbr);
    printk("Disk %u selected\n",kSelectedDiskNum);
}

void HIGH_CODE_SECTION listParts(char* cmdline)
{
   11f76:	55                   	push   ebp
   11f77:	89 e5                	mov    ebp,esp
   11f79:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:541
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   11f7f:	83 ec 04             	sub    esp,0x4
   11f82:	68 00 14 00 00       	push   0x1400
   11f87:	8d 85 f0 eb ff ff    	lea    eax,[ebp-0x1410]
   11f8d:	50                   	push   eax
   11f8e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11f91:	e8 6a 05 00 00       	call   12500 <parseParamsShell>
   11f96:	83 c4 10             	add    esp,0x10
   11f99:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:542
    int driveNo=-1;
   11f9c:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/bishell.c:544

    if (paramCount>0)
   11fa3:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   11fa7:	7e 1b                	jle    11fc4 <listParts+0x4e>
/home/yogi/src/os/chrisOS/src/bishell.c:545
        driveNo=strtol(params[0],0,10);
   11fa9:	83 ec 04             	sub    esp,0x4
   11fac:	6a 0a                	push   0xa
   11fae:	6a 00                	push   0x0
   11fb0:	8d 85 f0 eb ff ff    	lea    eax,[ebp-0x1410]
   11fb6:	50                   	push   eax
   11fb7:	e8 20 5b 01 00       	call   27adc <strtol>
   11fbc:	83 c4 10             	add    esp,0x10
   11fbf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   11fc2:	eb 08                	jmp    11fcc <listParts+0x56>
/home/yogi/src/os/chrisOS/src/bishell.c:547
    else
        driveNo=kSelectedDiskNum;
   11fc4:	a1 44 99 12 00       	mov    eax,ds:0x129944
   11fc9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:548
    if (driveNo<0 || driveNo>kATADeviceInfoCount)
   11fcc:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11fd0:	78 0a                	js     11fdc <listParts+0x66>
/home/yogi/src/os/chrisOS/src/bishell.c:548 (discriminator 1)
   11fd2:	a1 04 98 12 00       	mov    eax,ds:0x129804
   11fd7:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   11fda:	7e 1e                	jle    11ffa <listParts+0x84>
/home/yogi/src/os/chrisOS/src/bishell.c:550
    {
        printk("Error, selected disk number (%u) is not valid.  It must be >=0 and <= %u\n",driveNo,kATADeviceInfoCount);
   11fdc:	a1 04 98 12 00       	mov    eax,ds:0x129804
   11fe1:	83 ec 04             	sub    esp,0x4
   11fe4:	50                   	push   eax
   11fe5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11fe8:	68 a0 59 04 00       	push   0x459a0
   11fed:	e8 69 57 01 00       	call   2775b <printk>
   11ff2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:551
        return;
   11ff5:	e9 8f 00 00 00       	jmp    12089 <listParts+0x113>
/home/yogi/src/os/chrisOS/src/bishell.c:553
    }
    printk("Partitions for disk # %u\n",driveNo);
   11ffa:	83 ec 08             	sub    esp,0x8
   11ffd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   12000:	68 ec 5a 04 00       	push   0x45aec
   12005:	e8 51 57 01 00       	call   2775b <printk>
   1200a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:554
    port=(HBA_PORT*)kATADeviceInfo[driveNo].ioPort;
   1200d:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   12013:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12016:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   1201c:	01 d0                	add    eax,edx
   1201e:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   12024:	a3 5c 63 09 00       	mov    ds:0x9635c,eax
/home/yogi/src/os/chrisOS/src/bishell.c:555
    if (kATADeviceInfo[driveNo].ATADeviceType != ATA_DEVICE_TYPE_SATA_HD)
   12029:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   1202f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12032:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   12038:	01 d0                	add    eax,edx
   1203a:	8b 80 52 02 00 00    	mov    eax,DWORD PTR [eax+0x252]
   12040:	83 f8 02             	cmp    eax,0x2
   12043:	74 12                	je     12057 <listParts+0xe1>
/home/yogi/src/os/chrisOS/src/bishell.c:557
    {
        printk("Invalid device type.  Only SATA disks can be listed at the moment\n");
   12045:	83 ec 0c             	sub    esp,0xc
   12048:	68 08 5b 04 00       	push   0x45b08
   1204d:	e8 09 57 01 00       	call   2775b <printk>
   12052:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:558
        return;
   12055:	eb 32                	jmp    12089 <listParts+0x113>
/home/yogi/src/os/chrisOS/src/bishell.c:560
    }
    parseMBR(&kATADeviceInfo[driveNo],&mbr);
   12057:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   1205d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12060:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   12066:	01 d0                	add    eax,edx
   12068:	83 ec 08             	sub    esp,0x8
   1206b:	68 40 5f 09 00       	push   0x95f40
   12070:	50                   	push   eax
   12071:	e8 5d f9 00 00       	call   219d3 <parseMBR>
   12076:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:561
    printMBR(&mbr);
   12079:	83 ec 0c             	sub    esp,0xc
   1207c:	68 40 5f 09 00       	push   0x95f40
   12081:	e8 72 f8 00 00       	call   218f8 <printMBR>
   12086:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:562
}
   12089:	c9                   	leave  
   1208a:	c3                   	ret    

0001208b <attach>:
attach():
/home/yogi/src/os/chrisOS/src/bishell.c:594
    //printk("Partition %u selected\n",kSelectedPartNum);
    attach("");
}

void HIGH_CODE_SECTION attach(char* cmdline)
{
   1208b:	55                   	push   ebp
   1208c:	89 e5                	mov    ebp,esp
   1208e:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:596
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   12094:	83 ec 04             	sub    esp,0x4
   12097:	68 00 14 00 00       	push   0x1400
   1209c:	8d 85 f0 eb ff ff    	lea    eax,[ebp-0x1410]
   120a2:	50                   	push   eax
   120a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   120a6:	e8 55 04 00 00       	call   12500 <parseParamsShell>
   120ab:	83 c4 10             	add    esp,0x10
   120ae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:598

    if (kSelectedDiskNum < 0 || kSelectedPartNum < 0)
   120b1:	a1 44 99 12 00       	mov    eax,ds:0x129944
   120b6:	85 c0                	test   eax,eax
   120b8:	78 09                	js     120c3 <attach+0x38>
/home/yogi/src/os/chrisOS/src/bishell.c:598 (discriminator 1)
   120ba:	a1 48 99 12 00       	mov    eax,ds:0x129948
   120bf:	85 c0                	test   eax,eax
   120c1:	79 1d                	jns    120e0 <attach+0x55>
/home/yogi/src/os/chrisOS/src/bishell.c:600
    {
        printk("Must first select a disk (%u) and a partition (%u) using 'selectpart'",kSelectedDiskNum,kSelectedPartNum);
   120c3:	8b 15 48 99 12 00    	mov    edx,DWORD PTR ds:0x129948
   120c9:	a1 44 99 12 00       	mov    eax,ds:0x129944
   120ce:	83 ec 04             	sub    esp,0x4
   120d1:	52                   	push   edx
   120d2:	50                   	push   eax
   120d3:	68 4c 5b 04 00       	push   0x45b4c
   120d8:	e8 7e 56 01 00       	call   2775b <printk>
   120dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:602
    }
    strcpy(selectedDir,"/");
   120e0:	83 ec 08             	sub    esp,0x8
   120e3:	68 92 5b 04 00       	push   0x45b92
   120e8:	68 c0 b4 08 00       	push   0x8b4c0
   120ed:	e8 ca 57 01 00       	call   278bc <strcpy>
   120f2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:603
    ahciSetCurrentDisk((HBA_PORT*)kATADeviceInfo[kSelectedDiskNum].ioPort);
   120f5:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   120fb:	a1 44 99 12 00       	mov    eax,ds:0x129944
   12100:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   12106:	01 d0                	add    eax,edx
   12108:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   1210e:	83 ec 0c             	sub    esp,0xc
   12111:	50                   	push   eax
   12112:	e8 50 32 00 00       	call   15367 <ahciSetCurrentDisk>
   12117:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:604
    int lRetVal=fl_attach_media((fn_diskio_read)ahciBlockingRead28, (fn_diskio_write)ahciBlockingWrite28);
   1211a:	83 ec 08             	sub    esp,0x8
   1211d:	68 a6 56 01 00       	push   0x156a6
   12122:	68 d2 53 01 00       	push   0x153d2
   12127:	e8 54 b7 00 00       	call   1d880 <fl_attach_media>
   1212c:	83 c4 10             	add    esp,0x10
   1212f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:605
    if (lRetVal!=0)
   12132:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   12136:	74 1f                	je     12157 <attach+0xcc>
/home/yogi/src/os/chrisOS/src/bishell.c:607
    {
        printk("Error attaching to disk %u, partition %u.  Error number %u",kSelectedDiskNum,kSelectedPartNum,lRetVal);
   12138:	8b 15 48 99 12 00    	mov    edx,DWORD PTR ds:0x129948
   1213e:	a1 44 99 12 00       	mov    eax,ds:0x129944
   12143:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   12146:	52                   	push   edx
   12147:	50                   	push   eax
   12148:	68 94 5b 04 00       	push   0x45b94
   1214d:	e8 09 56 01 00       	call   2775b <printk>
   12152:	83 c4 10             	add    esp,0x10
   12155:	eb 1d                	jmp    12174 <attach+0xe9>
/home/yogi/src/os/chrisOS/src/bishell.c:610
        return;
    }
    printk("Attached to disk %u, partition %u.\n",kSelectedDiskNum,kSelectedPartNum);
   12157:	8b 15 48 99 12 00    	mov    edx,DWORD PTR ds:0x129948
   1215d:	a1 44 99 12 00       	mov    eax,ds:0x129944
   12162:	83 ec 04             	sub    esp,0x4
   12165:	52                   	push   edx
   12166:	50                   	push   eax
   12167:	68 d0 5b 04 00       	push   0x45bd0
   1216c:	e8 ea 55 01 00       	call   2775b <printk>
   12171:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:613
    
    //fl_listdirectory(selectedDir);
}
   12174:	c9                   	leave  
   12175:	c3                   	ret    

00012176 <listDir>:
listDir():
/home/yogi/src/os/chrisOS/src/bishell.c:616

void HIGH_CODE_SECTION listDir(char* cmdline)
{
   12176:	55                   	push   ebp
   12177:	89 e5                	mov    ebp,esp
   12179:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:618
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   1217f:	83 ec 04             	sub    esp,0x4
   12182:	68 00 14 00 00       	push   0x1400
   12187:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   1218d:	50                   	push   eax
   1218e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12191:	e8 6a 03 00 00       	call   12500 <parseParamsShell>
   12196:	83 c4 10             	add    esp,0x10
   12199:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:622
    
    //printk("Kernel Debug: Listing of directory %s + %s\n",params[0],params[1]);
    
    fl_listdirectory(params[0]);
   1219c:	83 ec 0c             	sub    esp,0xc
   1219f:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   121a5:	50                   	push   eax
   121a6:	e8 b5 c5 00 00       	call   1e760 <fl_listdirectory>
   121ab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:623
}
   121ae:	90                   	nop
   121af:	c9                   	leave  
   121b0:	c3                   	ret    

000121b1 <execCommand>:
execCommand():
/home/yogi/src/os/chrisOS/src/bishell.c:626

void HIGH_CODE_SECTION execCommand(char* cmdline)
{
   121b1:	55                   	push   ebp
   121b2:	89 e5                	mov    ebp,esp
   121b4:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:628
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   121ba:	83 ec 04             	sub    esp,0x4
   121bd:	68 00 14 00 00       	push   0x1400
   121c2:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   121c8:	50                   	push   eax
   121c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   121cc:	e8 2f 03 00 00       	call   12500 <parseParamsShell>
   121d1:	83 c4 10             	add    esp,0x10
   121d4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:631

    
    strcpy(sExecutingProgram,params[0]+1);
   121d7:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   121dd:	83 c0 01             	add    eax,0x1
   121e0:	83 ec 08             	sub    esp,0x8
   121e3:	50                   	push   eax
   121e4:	68 40 b4 08 00       	push   0x8b440
   121e9:	e8 ce 56 01 00       	call   278bc <strcpy>
   121ee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:634
    //printk("execProgram: param count = %u\n",paramCount);

    lTemp=buildargv(cmdline);
   121f1:	83 ec 0c             	sub    esp,0xc
   121f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   121f7:	e8 4e 04 00 00       	call   1264a <buildargv>
   121fc:	83 c4 10             	add    esp,0x10
   121ff:	a3 20 b4 08 00       	mov    ds:0x8b420,eax
/home/yogi/src/os/chrisOS/src/bishell.c:641

//    printk("listing parameters:\n");
//    for (int cnt=0;cnt<paramCount;cnt++)
//        printk("%u = '%s'\n",cnt,lTemp[cnt]);
   
    exec (params[0],paramCount,lTemp);
   12204:	a1 20 b4 08 00       	mov    eax,ds:0x8b420
   12209:	83 ec 04             	sub    esp,0x4
   1220c:	50                   	push   eax
   1220d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   12210:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   12216:	50                   	push   eax
   12217:	e8 84 4f 01 00       	call   271a0 <exec>
   1221c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:642
    strcpy(sExecutingProgram,sbiShellProgramName);
   1221f:	83 ec 08             	sub    esp,0x8
   12222:	68 c0 91 02 00       	push   0x291c0
   12227:	68 40 b4 08 00       	push   0x8b440
   1222c:	e8 8b 56 01 00       	call   278bc <strcpy>
   12231:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:643
}
   12234:	90                   	nop
   12235:	c9                   	leave  
   12236:	c3                   	ret    

00012237 <displayGDTTable>:
displayGDTTable():
/home/yogi/src/os/chrisOS/src/bishell.c:212
  //printk("buildargv: exiting\n");
  return (argv);
}

void HIGH_CODE_SECTION displayGDTTable(char *cmdline)
{
   12237:	55                   	push   ebp
   12238:	89 e5                	mov    ebp,esp
   1223a:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/bishell.c:213
    displayGDT();
   1223d:	e8 88 3d 01 00       	call   25fca <displayGDT>
/home/yogi/src/os/chrisOS/src/bishell.c:214
}
   12242:	90                   	nop
   12243:	c9                   	leave  
   12244:	c3                   	ret    

00012245 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   12245:	55                   	push   ebp
   12246:	89 e5                	mov    ebp,esp
   12248:	83 ec 08             	sub    esp,0x8
   1224b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1224e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12251:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   12255:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   12258:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   1225c:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   12260:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   12261:	90                   	nop
   12262:	c9                   	leave  
   12263:	c3                   	ret    

00012264 <outw>:
outw():
/home/yogi/src/os/chrisOS/include/io.h:27

static __inline void outw(unsigned short __port, unsigned short __val)
{
   12264:	55                   	push   ebp
   12265:	89 e5                	mov    ebp,esp
   12267:	83 ec 08             	sub    esp,0x8
   1226a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1226d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12270:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   12274:	66 89 45 f8          	mov    WORD PTR [ebp-0x8],ax
/home/yogi/src/os/chrisOS/include/io.h:28
	__asm__ volatile ("outw %1, %0" : : "a" (__val), "dN" (__port));
   12278:	0f b7 45 f8          	movzx  eax,WORD PTR [ebp-0x8]
   1227c:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   12280:	66 ef                	out    dx,ax
/home/yogi/src/os/chrisOS/include/io.h:29
}
   12282:	90                   	nop
   12283:	c9                   	leave  
   12284:	c3                   	ret    

00012285 <outl>:
outl():
/home/yogi/src/os/chrisOS/include/io.h:32

static __inline void outl(unsigned short __port, unsigned int __val)
{
   12285:	55                   	push   ebp
   12286:	89 e5                	mov    ebp,esp
   12288:	83 ec 04             	sub    esp,0x4
   1228b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1228e:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/include/io.h:33
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
   12292:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12295:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   12299:	ef                   	out    dx,eax
/home/yogi/src/os/chrisOS/include/io.h:34
}
   1229a:	90                   	nop
   1229b:	c9                   	leave  
   1229c:	c3                   	ret    

0001229d <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37

static __inline unsigned char inb(unsigned short __port)
{
   1229d:	55                   	push   ebp
   1229e:	89 e5                	mov    ebp,esp
   122a0:	83 ec 14             	sub    esp,0x14
   122a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   122a6:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   122aa:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   122ae:	89 c2                	mov    edx,eax
   122b0:	ec                   	in     al,dx
   122b1:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   122b4:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   122b8:	c9                   	leave  
   122b9:	c3                   	ret    

000122ba <inw>:
inw():
/home/yogi/src/os/chrisOS/include/io.h:44

static __inline unsigned short inw(unsigned short __port)
{
   122ba:	55                   	push   ebp
   122bb:	89 e5                	mov    ebp,esp
   122bd:	83 ec 14             	sub    esp,0x14
   122c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   122c3:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:46
	unsigned short __val;
	__asm__ volatile ("inw %0, %1" : "=a" (__val) : "dN" (__port));
   122c7:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   122cb:	89 c2                	mov    edx,eax
   122cd:	66 ed                	in     ax,dx
   122cf:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/include/io.h:47
	return __val;
   122d3:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/src/os/chrisOS/include/io.h:48
}
   122d7:	c9                   	leave  
   122d8:	c3                   	ret    

000122d9 <inl>:
inl():
/home/yogi/src/os/chrisOS/include/io.h:51

static __inline unsigned int inl(unsigned short __port)
{
   122d9:	55                   	push   ebp
   122da:	89 e5                	mov    ebp,esp
   122dc:	83 ec 14             	sub    esp,0x14
   122df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   122e2:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:53
	unsigned int __val;
	__asm__ volatile ("ind %0, %1" : "=a" (__val) : "dN" (__port));
   122e6:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   122ea:	89 c2                	mov    edx,eax
   122ec:	ed                   	in     eax,dx
   122ed:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/include/io.h:54
	return __val;
   122f0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/include/io.h:55
}
   122f3:	c9                   	leave  
   122f4:	c3                   	ret    

000122f5 <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   122f5:	55                   	push   ebp
   122f6:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   122f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   122fb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   12302:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12305:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   12308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1230b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:51
}
   1230d:	90                   	nop
   1230e:	5d                   	pop    ebp
   1230f:	c3                   	ret    

00012310 <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   12310:	55                   	push   ebp
   12311:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12313:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12316:	8b 00                	mov    eax,DWORD PTR [eax]
   12318:	85 c0                	test   eax,eax
   1231a:	75 0d                	jne    12329 <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   1231c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1231f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   12322:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12325:	89 10                	mov    DWORD PTR [eax],edx
   12327:	eb 0e                	jmp    12337 <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   12329:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1232c:	8b 00                	mov    eax,DWORD PTR [eax]
   1232e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   12331:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   12334:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   12337:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1233a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1233d:	85 c0                	test   eax,eax
   1233f:	75 0d                	jne    1234e <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   12341:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12344:	8b 10                	mov    edx,DWORD PTR [eax]
   12346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12349:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   1234c:	eb 0d                	jmp    1235b <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   1234e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12351:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   12354:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   12357:	8b 12                	mov    edx,DWORD PTR [edx]
   12359:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
}
   1235b:	90                   	nop
   1235c:	5d                   	pop    ebp
   1235d:	c3                   	ret    

0001235e <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1235e:	55                   	push   ebp
   1235f:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   12361:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   12364:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   12367:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   12369:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1236c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1236f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   12372:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   12375:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12378:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1237b:	85 c0                	test   eax,eax
   1237d:	75 0b                	jne    1238a <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   1237f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12382:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   12385:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   12388:	eb 0b                	jmp    12395 <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   1238a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1238d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   12390:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   12393:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   12395:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1239b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:86
}
   1239e:	90                   	nop
   1239f:	5d                   	pop    ebp
   123a0:	c3                   	ret    

000123a1 <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   123a1:	55                   	push   ebp
   123a2:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   123a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   123a7:	8b 10                	mov    edx,DWORD PTR [eax]
   123a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   123ac:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   123ae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   123b1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   123b4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   123b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   123ba:	8b 00                	mov    eax,DWORD PTR [eax]
   123bc:	85 c0                	test   eax,eax
   123be:	75 0a                	jne    123ca <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   123c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   123c3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   123c6:	89 10                	mov    DWORD PTR [eax],edx
   123c8:	eb 0b                	jmp    123d5 <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   123ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   123cd:	8b 00                	mov    eax,DWORD PTR [eax]
   123cf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   123d2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   123d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   123d8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   123db:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:103
}
   123dd:	90                   	nop
   123de:	5d                   	pop    ebp
   123df:	c3                   	ret    

000123e0 <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   123e0:	55                   	push   ebp
   123e1:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   123e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   123e6:	8b 00                	mov    eax,DWORD PTR [eax]
   123e8:	85 c0                	test   eax,eax
   123ea:	75 26                	jne    12412 <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   123ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   123ef:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   123f2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   123f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   123f7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   123fa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   123fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12400:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   12406:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12409:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   12410:	eb 14                	jmp    12426 <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   12412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12415:	8b 00                	mov    eax,DWORD PTR [eax]
   12417:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1241a:	50                   	push   eax
   1241b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1241e:	e8 7e ff ff ff       	call   123a1 <fat_list_insert_before>
   12423:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
}
   12426:	90                   	nop
   12427:	c9                   	leave  
   12428:	c3                   	ret    

00012429 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   12429:	55                   	push   ebp
   1242a:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   1242c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1242f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   12432:	85 c0                	test   eax,eax
   12434:	75 10                	jne    12446 <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   12436:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   12439:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1243c:	e8 9f ff ff ff       	call   123e0 <fat_list_insert_first>
   12441:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   12444:	eb 15                	jmp    1245b <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   12446:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12449:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1244c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1244f:	50                   	push   eax
   12450:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12453:	e8 06 ff ff ff       	call   1235e <fat_list_insert_after>
   12458:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
}
   1245b:	90                   	nop
   1245c:	c9                   	leave  
   1245d:	c3                   	ret    

0001245e <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   1245e:	55                   	push   ebp
   1245f:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   12461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12464:	8b 00                	mov    eax,DWORD PTR [eax]
   12466:	85 c0                	test   eax,eax
   12468:	0f 94 c0             	sete   al
   1246b:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:143
}
   1246e:	5d                   	pop    ebp
   1246f:	c3                   	ret    

00012470 <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   12470:	55                   	push   ebp
   12471:	89 e5                	mov    ebp,esp
   12473:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   12476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12479:	8b 00                	mov    eax,DWORD PTR [eax]
   1247b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:154
    if (node)
   1247e:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   12482:	74 0e                	je     12492 <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   12484:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   12487:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1248a:	e8 81 fe ff ff       	call   12310 <fat_list_remove>
   1248f:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:157

    return node;
   12492:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:158
}
   12495:	c9                   	leave  
   12496:	c3                   	ret    

00012497 <findCommand>:
findCommand():
/home/yogi/src/os/chrisOS/src/bishell.c:38
char programParams[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
char** lTemp;


int HIGH_CODE_SECTION findCommand(char* command)
{
   12497:	55                   	push   ebp
   12498:	89 e5                	mov    ebp,esp
   1249a:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/bishell.c:42
    unsigned i;
    int ret;
    
    for(i = 0; i < NUMBER_OF_COMMANDS; i++)
   1249d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   124a4:	eb 4d                	jmp    124f3 <findCommand+0x5c>
/home/yogi/src/os/chrisOS/src/bishell.c:44
    {
        ret = strncmp(command, cmds[i].name,strlen(cmds[i].name));
   124a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   124a9:	c1 e0 04             	shl    eax,0x4
   124ac:	05 00 90 02 00       	add    eax,0x29000
   124b1:	8b 00                	mov    eax,DWORD PTR [eax]
   124b3:	83 ec 0c             	sub    esp,0xc
   124b6:	50                   	push   eax
   124b7:	e8 70 54 01 00       	call   2792c <strlen>
   124bc:	83 c4 10             	add    esp,0x10
   124bf:	89 c2                	mov    edx,eax
   124c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   124c4:	c1 e0 04             	shl    eax,0x4
   124c7:	05 00 90 02 00       	add    eax,0x29000
   124cc:	8b 00                	mov    eax,DWORD PTR [eax]
   124ce:	83 ec 04             	sub    esp,0x4
   124d1:	52                   	push   edx
   124d2:	50                   	push   eax
   124d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   124d6:	e8 ad f7 ff ff       	call   11c88 <strncmp>
   124db:	83 c4 10             	add    esp,0x10
   124de:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:46
        //printk("findCommand compared %s and %s for %u, returned %u\n", command, cmds[i].name, strlen(cmds[i].name), ret);
        if(ret==0)
   124e1:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   124e5:	75 08                	jne    124ef <findCommand+0x58>
/home/yogi/src/os/chrisOS/src/bishell.c:49
        {
            //printk("findCommand returning %u", i+1);
            return i+1;
   124e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   124ea:	83 c0 01             	add    eax,0x1
   124ed:	eb 0f                	jmp    124fe <findCommand+0x67>
/home/yogi/src/os/chrisOS/src/bishell.c:42 (discriminator 2)
int HIGH_CODE_SECTION findCommand(char* command)
{
    unsigned i;
    int ret;
    
    for(i = 0; i < NUMBER_OF_COMMANDS; i++)
   124ef:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:42 (discriminator 1)
   124f3:	83 7d f4 1b          	cmp    DWORD PTR [ebp-0xc],0x1b
   124f7:	76 ad                	jbe    124a6 <findCommand+0xf>
/home/yogi/src/os/chrisOS/src/bishell.c:53
            //printk("findCommand returning %u", i+1);
            return i+1;
        }
    }
    //printk("findCommand returning -1");
            return -1;
   124f9:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/bishell.c:54
}
   124fe:	c9                   	leave  
   124ff:	c3                   	ret    

00012500 <parseParamsShell>:
parseParamsShell():
/home/yogi/src/os/chrisOS/src/bishell.c:57

int HIGH_CODE_SECTION parseParamsShell(char* cmdLine, char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH], int size)
    {
   12500:	55                   	push   ebp
   12501:	89 e5                	mov    ebp,esp
   12503:	53                   	push   ebx
   12504:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/bishell.c:58
    int x=0,y=0;
   12507:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1250e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:59
    int lRetVal=0,parsedChars=0;
   12515:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   1251c:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:61
    
    memset(params,0, size);
   12523:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   12526:	83 ec 04             	sub    esp,0x4
   12529:	50                   	push   eax
   1252a:	6a 00                	push   0x0
   1252c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1252f:	e8 d5 30 01 00       	call   25609 <memset>
   12534:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:63
    //printk("commandLine=%s\n",cmdLine);
    for (unsigned cnt=0;cnt<strlen(cmdLine);cnt++)
   12537:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   1253e:	e9 c9 00 00 00       	jmp    1260c <parseParamsShell+0x10c>
/home/yogi/src/os/chrisOS/src/bishell.c:66
    {
        //printk("c=%c\n", cmdLine[cnt]);
        if ( (cmdLine[cnt]==' ' || cmdLine[cnt]=='-') || cmdLine[cnt]==',')
   12543:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12546:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   12549:	01 d0                	add    eax,edx
   1254b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1254e:	3c 20                	cmp    al,0x20
   12550:	74 1e                	je     12570 <parseParamsShell+0x70>
/home/yogi/src/os/chrisOS/src/bishell.c:66 (discriminator 1)
   12552:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12555:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   12558:	01 d0                	add    eax,edx
   1255a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1255d:	3c 2d                	cmp    al,0x2d
   1255f:	74 0f                	je     12570 <parseParamsShell+0x70>
/home/yogi/src/os/chrisOS/src/bishell.c:66 (discriminator 2)
   12561:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12564:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   12567:	01 d0                	add    eax,edx
   12569:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1256c:	3c 2c                	cmp    al,0x2c
   1256e:	75 6f                	jne    125df <parseParamsShell+0xdf>
/home/yogi/src/os/chrisOS/src/bishell.c:69
        {
            //printk("Found a delimiter (%c), incrementing y to %u, setting x to 0\n",cmdLine[cnt],y+1);
            if (cmdLine[cnt]=='-' || cmdLine[cnt]=='/')
   12570:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12573:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   12576:	01 d0                	add    eax,edx
   12578:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1257b:	3c 2d                	cmp    al,0x2d
   1257d:	74 0f                	je     1258e <parseParamsShell+0x8e>
/home/yogi/src/os/chrisOS/src/bishell.c:69 (discriminator 1)
   1257f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12582:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   12585:	01 d0                	add    eax,edx
   12587:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1258a:	3c 2f                	cmp    al,0x2f
   1258c:	75 25                	jne    125b3 <parseParamsShell+0xb3>
/home/yogi/src/os/chrisOS/src/bishell.c:70
                params[y][x++]=cmdLine[cnt];
   1258e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12591:	c1 e0 09             	shl    eax,0x9
   12594:	89 c2                	mov    edx,eax
   12596:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12599:	8d 0c 02             	lea    ecx,[edx+eax*1]
   1259c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1259f:	8d 50 01             	lea    edx,[eax+0x1]
   125a2:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   125a5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   125a8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   125ab:	01 da                	add    edx,ebx
   125ad:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   125b0:	88 14 01             	mov    BYTE PTR [ecx+eax*1],dl
/home/yogi/src/os/chrisOS/src/bishell.c:71
            params[y][x]='\0';
   125b3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   125b6:	c1 e0 09             	shl    eax,0x9
   125b9:	89 c2                	mov    edx,eax
   125bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   125be:	01 c2                	add    edx,eax
   125c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   125c3:	01 d0                	add    eax,edx
   125c5:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:72
            if (cnt>0)
   125c8:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   125cc:	74 36                	je     12604 <parseParamsShell+0x104>
/home/yogi/src/os/chrisOS/src/bishell.c:73
                {x=0;y++;lRetVal++;}
   125ce:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   125d5:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
   125d9:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:72
        {
            //printk("Found a delimiter (%c), incrementing y to %u, setting x to 0\n",cmdLine[cnt],y+1);
            if (cmdLine[cnt]=='-' || cmdLine[cnt]=='/')
                params[y][x++]=cmdLine[cnt];
            params[y][x]='\0';
            if (cnt>0)
   125dd:	eb 25                	jmp    12604 <parseParamsShell+0x104>
/home/yogi/src/os/chrisOS/src/bishell.c:78
                {x=0;y++;lRetVal++;}
        }
        else
        {
            //printk("Found a character to put at position %u,%u\n",y,x);
            params[y][x++]=cmdLine[cnt];
   125df:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   125e2:	c1 e0 09             	shl    eax,0x9
   125e5:	89 c2                	mov    edx,eax
   125e7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   125ea:	8d 0c 02             	lea    ecx,[edx+eax*1]
   125ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   125f0:	8d 50 01             	lea    edx,[eax+0x1]
   125f3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   125f6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   125f9:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   125fc:	01 da                	add    edx,ebx
   125fe:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   12601:	88 14 01             	mov    BYTE PTR [ecx+eax*1],dl
/home/yogi/src/os/chrisOS/src/bishell.c:80 (discriminator 2)
        }
        parsedChars++;
   12604:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:63 (discriminator 2)
    int x=0,y=0;
    int lRetVal=0,parsedChars=0;
    
    memset(params,0, size);
    //printk("commandLine=%s\n",cmdLine);
    for (unsigned cnt=0;cnt<strlen(cmdLine);cnt++)
   12608:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:63 (discriminator 1)
   1260c:	83 ec 0c             	sub    esp,0xc
   1260f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12612:	e8 15 53 01 00       	call   2792c <strlen>
   12617:	83 c4 10             	add    esp,0x10
   1261a:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   1261d:	0f 87 20 ff ff ff    	ja     12543 <parseParamsShell+0x43>
/home/yogi/src/os/chrisOS/src/bishell.c:82
            //printk("Found a character to put at position %u,%u\n",y,x);
            params[y][x++]=cmdLine[cnt];
        }
        parsedChars++;
    }
    if (parsedChars)
   12623:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   12627:	74 19                	je     12642 <parseParamsShell+0x142>
/home/yogi/src/os/chrisOS/src/bishell.c:84
    {
        lRetVal++;
   12629:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:85
        params[y][x]='\0';
   1262d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12630:	c1 e0 09             	shl    eax,0x9
   12633:	89 c2                	mov    edx,eax
   12635:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12638:	01 c2                	add    edx,eax
   1263a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1263d:	01 d0                	add    eax,edx
   1263f:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:90
    }
    //printk("Returning %u parameters:\n", lRetVal);
    //for (int cnt=0;cnt<lRetVal;cnt++)
        //printk("\tParameter %u: '%s'\n", cnt, params[cnt]);
    return lRetVal;
   12642:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/chrisOS/src/bishell.c:91
}
   12645:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   12648:	c9                   	leave  
   12649:	c3                   	ret    

0001264a <buildargv>:
buildargv():
/home/yogi/src/os/chrisOS/src/bishell.c:95

/*parts from http://*/
char **buildargv (const char *input)
{
   1264a:	55                   	push   ebp
   1264b:	89 e5                	mov    ebp,esp
   1264d:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/bishell.c:98
  char *arg;
  char *copybuf;
  int squote = 0;
   12650:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:99
  int dquote = 0;
   12657:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:100
  int bsquote = 0;
   1265e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:101
  int argc = 0;
   12665:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:102
  int maxargc = 0;
   1266c:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:103
  char **argv = NULL;
   12673:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:107
  char **nargv;
  //printk("buildargv: entering\n");
  
  if (input != NULL)
   1267a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1267e:	0f 84 17 02 00 00    	je     1289b <buildargv+0x251>
/home/yogi/src/os/chrisOS/src/bishell.c:110
    {
      //printk("buildargv: command to parse (%u chars) is: '%s'\n",strlen (input) + 1,input);
      copybuf = (char *) mallocTemp (strlen (input) + 1);
   12684:	83 ec 0c             	sub    esp,0xc
   12687:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1268a:	e8 9d 52 01 00       	call   2792c <strlen>
   1268f:	83 c4 10             	add    esp,0x10
   12692:	83 c0 01             	add    eax,0x1
   12695:	83 ec 0c             	sub    esp,0xc
   12698:	50                   	push   eax
   12699:	e8 09 39 01 00       	call   25fa7 <mallocTemp>
   1269e:	83 c4 10             	add    esp,0x10
   126a1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:118
	 argv, even for null strings.  See NOTES above, test case below. */
      do
	{
	  /* Pick off argv[argc] */

	  if ((maxargc == 0) || (argc >= (maxargc - 1)))
   126a4:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
   126a8:	74 0b                	je     126b5 <buildargv+0x6b>
/home/yogi/src/os/chrisOS/src/bishell.c:118 (discriminator 1)
   126aa:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   126ad:	83 e8 01             	sub    eax,0x1
   126b0:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   126b3:	7f 3d                	jg     126f2 <buildargv+0xa8>
/home/yogi/src/os/chrisOS/src/bishell.c:121
	    {
	      /* argv needs initialization, or expansion */
	      if (argv == NULL)
   126b5:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
   126b9:	75 1c                	jne    126d7 <buildargv+0x8d>
/home/yogi/src/os/chrisOS/src/bishell.c:123
		{
		  maxargc = INITIAL_MAXARGC;
   126bb:	c7 45 dc 14 00 00 00 	mov    DWORD PTR [ebp-0x24],0x14
/home/yogi/src/os/chrisOS/src/bishell.c:124
		  nargv = (char **) mallocTemp (maxargc * sizeof (char *));
   126c2:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   126c5:	c1 e0 02             	shl    eax,0x2
   126c8:	83 ec 0c             	sub    esp,0xc
   126cb:	50                   	push   eax
   126cc:	e8 d6 38 01 00       	call   25fa7 <mallocTemp>
   126d1:	83 c4 10             	add    esp,0x10
   126d4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:126
		}
	      argv = nargv;
   126d7:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   126da:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/bishell.c:127
	      argv[argc] = NULL;
   126dd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   126e0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   126e7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   126ea:	01 d0                	add    eax,edx
   126ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:130
	    }
	  /* Begin scanning arg */
	  arg = copybuf;
   126f2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   126f5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:131
	  while (*input != EOS)
   126f8:	e9 ec 00 00 00       	jmp    127e9 <buildargv+0x19f>
/home/yogi/src/os/chrisOS/src/bishell.c:133
	    {
	      if ((*input)==' ' && !squote && !dquote && !bsquote)
   126fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12700:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12703:	3c 20                	cmp    al,0x20
   12705:	75 16                	jne    1271d <buildargv+0xd3>
/home/yogi/src/os/chrisOS/src/bishell.c:133 (discriminator 1)
   12707:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   1270b:	75 10                	jne    1271d <buildargv+0xd3>
/home/yogi/src/os/chrisOS/src/bishell.c:133 (discriminator 2)
   1270d:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   12711:	75 0a                	jne    1271d <buildargv+0xd3>
/home/yogi/src/os/chrisOS/src/bishell.c:133 (discriminator 3)
   12713:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   12717:	0f 84 da 00 00 00    	je     127f7 <buildargv+0x1ad>
/home/yogi/src/os/chrisOS/src/bishell.c:139
		{
		  break;
		}
	      else
		{
		  if (bsquote)
   1271d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   12721:	74 1d                	je     12740 <buildargv+0xf6>
/home/yogi/src/os/chrisOS/src/bishell.c:141
		    {
		      bsquote = 0;
   12723:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:142
		      *arg++ = *input;
   1272a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1272d:	8d 50 01             	lea    edx,[eax+0x1]
   12730:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   12733:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12736:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   12739:	88 10                	mov    BYTE PTR [eax],dl
   1273b:	e9 a5 00 00 00       	jmp    127e5 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:144
		    }
		  else if (*input == '\\')
   12740:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12743:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12746:	3c 5c                	cmp    al,0x5c
   12748:	75 0c                	jne    12756 <buildargv+0x10c>
/home/yogi/src/os/chrisOS/src/bishell.c:146
		    {
		      bsquote = 1;
   1274a:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
   12751:	e9 8f 00 00 00       	jmp    127e5 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:148
		    }
		  else if (squote)
   12756:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   1275a:	74 26                	je     12782 <buildargv+0x138>
/home/yogi/src/os/chrisOS/src/bishell.c:150
		    {
		      if (*input == '\'')
   1275c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1275f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12762:	3c 27                	cmp    al,0x27
   12764:	75 09                	jne    1276f <buildargv+0x125>
/home/yogi/src/os/chrisOS/src/bishell.c:152
			{
			  squote = 0;
   12766:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   1276d:	eb 76                	jmp    127e5 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:156
			}
		      else
			{
			  *arg++ = *input;
   1276f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12772:	8d 50 01             	lea    edx,[eax+0x1]
   12775:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   12778:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1277b:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1277e:	88 10                	mov    BYTE PTR [eax],dl
   12780:	eb 63                	jmp    127e5 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:159
			}
		    }
		  else if (dquote)
   12782:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   12786:	74 26                	je     127ae <buildargv+0x164>
/home/yogi/src/os/chrisOS/src/bishell.c:161
		    {
		      if (*input == '"')
   12788:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1278b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1278e:	3c 22                	cmp    al,0x22
   12790:	75 09                	jne    1279b <buildargv+0x151>
/home/yogi/src/os/chrisOS/src/bishell.c:163
			{
			  dquote = 0;
   12792:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   12799:	eb 4a                	jmp    127e5 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:167
			}
		      else
			{
			  *arg++ = *input;
   1279b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1279e:	8d 50 01             	lea    edx,[eax+0x1]
   127a1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   127a4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   127a7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   127aa:	88 10                	mov    BYTE PTR [eax],dl
   127ac:	eb 37                	jmp    127e5 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:172
			}
		    }
		  else
		    {
		      if (*input == '\'')
   127ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   127b1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   127b4:	3c 27                	cmp    al,0x27
   127b6:	75 09                	jne    127c1 <buildargv+0x177>
/home/yogi/src/os/chrisOS/src/bishell.c:174
			{
			  squote = 1;
   127b8:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
   127bf:	eb 24                	jmp    127e5 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:176
			}
		      else if (*input == '"')
   127c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   127c4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   127c7:	3c 22                	cmp    al,0x22
   127c9:	75 09                	jne    127d4 <buildargv+0x18a>
/home/yogi/src/os/chrisOS/src/bishell.c:178
			{
			  dquote = 1;
   127cb:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
   127d2:	eb 11                	jmp    127e5 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:182
			}
		      else
			{
			  *arg++ = *input;
   127d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   127d7:	8d 50 01             	lea    edx,[eax+0x1]
   127da:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   127dd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   127e0:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   127e3:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/bishell.c:186
                          //printk("Incremented input to %u, char=%u,value='%c'\n",input,*input,*input);
			}
		    }
		  input++;
   127e5:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:131
	      argv = nargv;
	      argv[argc] = NULL;
	    }
	  /* Begin scanning arg */
	  arg = copybuf;
	  while (*input != EOS)
   127e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   127ec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   127ef:	84 c0                	test   al,al
   127f1:	0f 85 06 ff ff ff    	jne    126fd <buildargv+0xb3>
/home/yogi/src/os/chrisOS/src/bishell.c:189
			}
		    }
		  input++;
		}
	    }
	  *arg = EOS;
   127f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   127fa:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:191
          //printk("Found an EOS\n");
          if (copybuf[0]!='\0')
   127fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12800:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12803:	84 c0                	test   al,al
   12805:	0f 84 82 00 00 00    	je     1288d <buildargv+0x243>
/home/yogi/src/os/chrisOS/src/bishell.c:193
          {
            char* temp=mallocTemp(strlen(copybuf)+1);
   1280b:	83 ec 0c             	sub    esp,0xc
   1280e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   12811:	e8 16 51 01 00       	call   2792c <strlen>
   12816:	83 c4 10             	add    esp,0x10
   12819:	83 c0 01             	add    eax,0x1
   1281c:	83 ec 0c             	sub    esp,0xc
   1281f:	50                   	push   eax
   12820:	e8 82 37 01 00       	call   25fa7 <mallocTemp>
   12825:	83 c4 10             	add    esp,0x10
   12828:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/chrisOS/src/bishell.c:196
            //printk("*malloc'd temp to 0x%08X for %u characters\n",temp,strlen(copybuf));
            //printk("Copied copybuf @ 0x%08X to temp @ 0x%08X\n",copybuf,temp);
            strcpy(temp,copybuf);
   1282b:	83 ec 08             	sub    esp,0x8
   1282e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   12831:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   12834:	e8 83 50 01 00       	call   278bc <strcpy>
   12839:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:197
            copybuf = (char *) mallocTemp (strlen (input) + 1);
   1283c:	83 ec 0c             	sub    esp,0xc
   1283f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12842:	e8 e5 50 01 00       	call   2792c <strlen>
   12847:	83 c4 10             	add    esp,0x10
   1284a:	83 c0 01             	add    eax,0x1
   1284d:	83 ec 0c             	sub    esp,0xc
   12850:	50                   	push   eax
   12851:	e8 51 37 01 00       	call   25fa7 <mallocTemp>
   12856:	83 c4 10             	add    esp,0x10
   12859:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:198
            argv[argc] = temp;
   1285c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1285f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   12866:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   12869:	01 c2                	add    edx,eax
   1286b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1286e:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/bishell.c:200
            //printk("set argv[%u] to 0x%08X\n",argc,temp);
            argc++;
   12870:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:201
            argv[argc] = NULL;
   12874:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   12877:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   1287e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   12881:	01 d0                	add    eax,edx
   12883:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:202
            input++;
   12889:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:205
          }
	}
      while (*input != EOS);
   1288d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12890:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12893:	84 c0                	test   al,al
   12895:	0f 85 09 fe ff ff    	jne    126a4 <buildargv+0x5a>
/home/yogi/src/os/chrisOS/src/bishell.c:208
    }
  //printk("buildargv: exiting\n");
  return (argv);
   1289b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/chrisOS/src/bishell.c:209
}
   1289e:	c9                   	leave  
   1289f:	c3                   	ret    

000128a0 <QueryBDF>:
QueryBDF():
/home/yogi/src/os/chrisOS/src/bishell.c:217
{
    displayGDT();
}

void HIGH_CODE_SECTION QueryBDF(char* cmdline)
{
   128a0:	55                   	push   ebp
   128a1:	89 e5                	mov    ebp,esp
   128a3:	56                   	push   esi
   128a4:	53                   	push   ebx
   128a5:	81 ec 00 14 00 00    	sub    esp,0x1400
/home/yogi/src/os/chrisOS/src/bishell.c:220
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];

    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   128ab:	83 ec 04             	sub    esp,0x4
   128ae:	68 00 14 00 00       	push   0x1400
   128b3:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   128b9:	50                   	push   eax
   128ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   128bd:	e8 3e fc ff ff       	call   12500 <parseParamsShell>
   128c2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:222
    //printk("Params: 0=%u, 1=%u, 2=%u",strtoul(params[0],0,16),strtoul(params[1],0,16),strtoul(params[2],0,16));
    pciQueryBDF(strtoul(params[0],0,16),strtoul(params[1],0,16),strtoul(params[2],0,16));
   128c5:	83 ec 04             	sub    esp,0x4
   128c8:	6a 10                	push   0x10
   128ca:	6a 00                	push   0x0
   128cc:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   128d2:	05 00 04 00 00       	add    eax,0x400
   128d7:	50                   	push   eax
   128d8:	e8 77 50 01 00       	call   27954 <strtoul>
   128dd:	83 c4 10             	add    esp,0x10
   128e0:	0f b6 f0             	movzx  esi,al
   128e3:	83 ec 04             	sub    esp,0x4
   128e6:	6a 10                	push   0x10
   128e8:	6a 00                	push   0x0
   128ea:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   128f0:	05 00 02 00 00       	add    eax,0x200
   128f5:	50                   	push   eax
   128f6:	e8 59 50 01 00       	call   27954 <strtoul>
   128fb:	83 c4 10             	add    esp,0x10
   128fe:	0f b6 d8             	movzx  ebx,al
   12901:	83 ec 04             	sub    esp,0x4
   12904:	6a 10                	push   0x10
   12906:	6a 00                	push   0x0
   12908:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   1290e:	50                   	push   eax
   1290f:	e8 40 50 01 00       	call   27954 <strtoul>
   12914:	83 c4 10             	add    esp,0x10
   12917:	0f b6 c0             	movzx  eax,al
   1291a:	83 ec 04             	sub    esp,0x4
   1291d:	56                   	push   esi
   1291e:	53                   	push   ebx
   1291f:	50                   	push   eax
   12920:	e8 3c 41 00 00       	call   16a61 <pciQueryBDF>
   12925:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:223
}
   12928:	90                   	nop
   12929:	8d 65 f8             	lea    esp,[ebp-0x8]
   1292c:	5b                   	pop    ebx
   1292d:	5e                   	pop    esi
   1292e:	5d                   	pop    ebp
   1292f:	c3                   	ret    

00012930 <dumpP>:
dumpP():
/home/yogi/src/os/chrisOS/src/bishell.c:226

void HIGH_CODE_SECTION dumpP(char* cmdline)
{
   12930:	55                   	push   ebp
   12931:	89 e5                	mov    ebp,esp
   12933:	81 ec 58 16 00 00    	sub    esp,0x1658
/home/yogi/src/os/chrisOS/src/bishell.c:228
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   12939:	83 ec 04             	sub    esp,0x4
   1293c:	68 00 14 00 00       	push   0x1400
   12941:	8d 85 b4 eb ff ff    	lea    eax,[ebp-0x144c]
   12947:	50                   	push   eax
   12948:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1294b:	e8 b0 fb ff ff       	call   12500 <parseParamsShell>
   12950:	83 c4 10             	add    esp,0x10
   12953:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:229
    int lCount=0;
   12956:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:230
    uint32_t lAddress=0;
   1295d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:231
    char lCharType=' ', lCharSize=' ';
   12964:	c6 45 ef 20          	mov    BYTE PTR [ebp-0x11],0x20
   12968:	c6 45 ee 20          	mov    BYTE PTR [ebp-0x12],0x20
/home/yogi/src/os/chrisOS/src/bishell.c:232
    int lTemp=0;
   1296c:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:234
    char lTempS[MAX_PARAM_WIDTH];
    bool addrIsVirtual=false;
   12973:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:235
    uint32_t cr3=0;
   12977:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:240
    
//    for (int cnt=0;cnt<paramCount;cnt++)
//        printk("Param # %u is %s\n", cnt, params[cnt]);
    
    memset(lTempS,0,MAX_PARAM_WIDTH);
   1297e:	83 ec 04             	sub    esp,0x4
   12981:	68 00 02 00 00       	push   0x200
   12986:	6a 00                	push   0x0
   12988:	8d 85 b4 e9 ff ff    	lea    eax,[ebp-0x164c]
   1298e:	50                   	push   eax
   1298f:	e8 75 2c 01 00       	call   25609 <memset>
   12994:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:241
    for (int cnt=0;cnt<=paramCount;cnt++)
   12997:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   1299e:	e9 84 01 00 00       	jmp    12b27 <dumpP+0x1f7>
/home/yogi/src/os/chrisOS/src/bishell.c:243
    {
        printk("Processing parameter %u, value='%s'\n",cnt,params[cnt]);
   129a3:	8d 85 b4 eb ff ff    	lea    eax,[ebp-0x144c]
   129a9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   129ac:	c1 e2 09             	shl    edx,0x9
   129af:	01 d0                	add    eax,edx
   129b1:	83 ec 04             	sub    esp,0x4
   129b4:	50                   	push   eax
   129b5:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   129b8:	68 44 5f 04 00       	push   0x45f44
   129bd:	e8 99 4d 01 00       	call   2775b <printk>
   129c2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:244
        if (params[cnt][0]=='v')
   129c5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   129c8:	c1 e0 09             	shl    eax,0x9
   129cb:	8d 4d f8             	lea    ecx,[ebp-0x8]
   129ce:	01 c8                	add    eax,ecx
   129d0:	2d 44 14 00 00       	sub    eax,0x1444
   129d5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   129d8:	3c 76                	cmp    al,0x76
   129da:	75 09                	jne    129e5 <dumpP+0xb5>
/home/yogi/src/os/chrisOS/src/bishell.c:247
        {
            //printk("Address is virtual parameter found\n");
            addrIsVirtual=true;
   129dc:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
   129e0:	e9 3e 01 00 00       	jmp    12b23 <dumpP+0x1f3>
/home/yogi/src/os/chrisOS/src/bishell.c:249
        }
        else if (params[cnt][0]=='/')
   129e5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   129e8:	c1 e0 09             	shl    eax,0x9
   129eb:	8d 4d f8             	lea    ecx,[ebp-0x8]
   129ee:	01 c8                	add    eax,ecx
   129f0:	2d 44 14 00 00       	sub    eax,0x1444
   129f5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   129f8:	3c 2f                	cmp    al,0x2f
   129fa:	0f 85 af 00 00 00    	jne    12aaf <dumpP+0x17f>
/home/yogi/src/os/chrisOS/src/bishell.c:251
        {
            lTemp=1;
   12a00:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:252
            while (ISDIGIT(params[cnt][lTemp]))
   12a07:	eb 29                	jmp    12a32 <dumpP+0x102>
/home/yogi/src/os/chrisOS/src/bishell.c:254
            {
                lTempS[lTemp-1]=params[cnt][lTemp];
   12a09:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12a0c:	8d 50 ff             	lea    edx,[eax-0x1]
   12a0f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   12a12:	c1 e0 09             	shl    eax,0x9
   12a15:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12a18:	01 c1                	add    ecx,eax
   12a1a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12a1d:	01 c8                	add    eax,ecx
   12a1f:	2d 44 14 00 00       	sub    eax,0x1444
   12a24:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12a27:	88 84 15 b4 e9 ff ff 	mov    BYTE PTR [ebp+edx*1-0x164c],al
/home/yogi/src/os/chrisOS/src/bishell.c:255
                lTemp++;
   12a2e:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:252
            addrIsVirtual=true;
        }
        else if (params[cnt][0]=='/')
        {
            lTemp=1;
            while (ISDIGIT(params[cnt][lTemp]))
   12a32:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   12a35:	c1 e0 09             	shl    eax,0x9
   12a38:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12a3b:	8d 14 01             	lea    edx,[ecx+eax*1]
   12a3e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12a41:	01 d0                	add    eax,edx
   12a43:	2d 44 14 00 00       	sub    eax,0x1444
   12a48:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12a4b:	0f be c0             	movsx  eax,al
   12a4e:	83 e8 30             	sub    eax,0x30
   12a51:	83 f8 09             	cmp    eax,0x9
   12a54:	76 b3                	jbe    12a09 <dumpP+0xd9>
/home/yogi/src/os/chrisOS/src/bishell.c:257
            {
                lTempS[lTemp-1]=params[cnt][lTemp];
                lTemp++;
            }
            lCount=atoi(lTempS);
   12a56:	83 ec 0c             	sub    esp,0xc
   12a59:	8d 85 b4 e9 ff ff    	lea    eax,[ebp-0x164c]
   12a5f:	50                   	push   eax
   12a60:	e8 6c 2a 01 00       	call   254d1 <atoi>
   12a65:	83 c4 10             	add    esp,0x10
   12a68:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:258
            lCharSize=params[cnt][lTemp++];
   12a6b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12a6e:	8d 50 01             	lea    edx,[eax+0x1]
   12a71:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   12a74:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   12a77:	c1 e2 09             	shl    edx,0x9
   12a7a:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12a7d:	01 ca                	add    edx,ecx
   12a7f:	01 d0                	add    eax,edx
   12a81:	2d 44 14 00 00       	sub    eax,0x1444
   12a86:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12a89:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
/home/yogi/src/os/chrisOS/src/bishell.c:259
            lCharType=params[cnt][lTemp++];
   12a8c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12a8f:	8d 50 01             	lea    edx,[eax+0x1]
   12a92:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   12a95:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   12a98:	c1 e2 09             	shl    edx,0x9
   12a9b:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12a9e:	01 ca                	add    edx,ecx
   12aa0:	01 d0                	add    eax,edx
   12aa2:	2d 44 14 00 00       	sub    eax,0x1444
   12aa7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12aaa:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
   12aad:	eb 74                	jmp    12b23 <dumpP+0x1f3>
/home/yogi/src/os/chrisOS/src/bishell.c:261
        }
        else if (lAddress==0)
   12aaf:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   12ab3:	75 23                	jne    12ad8 <dumpP+0x1a8>
/home/yogi/src/os/chrisOS/src/bishell.c:263
        {
            lAddress=strtoul(params[cnt],0,16);
   12ab5:	8d 85 b4 eb ff ff    	lea    eax,[ebp-0x144c]
   12abb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   12abe:	c1 e2 09             	shl    edx,0x9
   12ac1:	01 d0                	add    eax,edx
   12ac3:	83 ec 04             	sub    esp,0x4
   12ac6:	6a 10                	push   0x10
   12ac8:	6a 00                	push   0x0
   12aca:	50                   	push   eax
   12acb:	e8 84 4e 01 00       	call   27954 <strtoul>
   12ad0:	83 c4 10             	add    esp,0x10
   12ad3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   12ad6:	eb 4b                	jmp    12b23 <dumpP+0x1f3>
/home/yogi/src/os/chrisOS/src/bishell.c:265
        }
        else if (params[cnt][0]!=0)
   12ad8:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   12adb:	c1 e0 09             	shl    eax,0x9
   12ade:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12ae1:	01 c8                	add    eax,ecx
   12ae3:	2d 44 14 00 00       	sub    eax,0x1444
   12ae8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12aeb:	84 c0                	test   al,al
   12aed:	74 34                	je     12b23 <dumpP+0x1f3>
/home/yogi/src/os/chrisOS/src/bishell.c:267
        {
            cr3=strtoul(params[cnt],0,16);
   12aef:	8d 85 b4 eb ff ff    	lea    eax,[ebp-0x144c]
   12af5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   12af8:	c1 e2 09             	shl    edx,0x9
   12afb:	01 d0                	add    eax,edx
   12afd:	83 ec 04             	sub    esp,0x4
   12b00:	6a 10                	push   0x10
   12b02:	6a 00                	push   0x0
   12b04:	50                   	push   eax
   12b05:	e8 4a 4e 01 00       	call   27954 <strtoul>
   12b0a:	83 c4 10             	add    esp,0x10
   12b0d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/bishell.c:268
            printk("Using CR3=0x%08X",cr3);
   12b10:	83 ec 08             	sub    esp,0x8
   12b13:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   12b16:	68 69 5f 04 00       	push   0x45f69
   12b1b:	e8 3b 4c 01 00       	call   2775b <printk>
   12b20:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:241 (discriminator 2)
    
//    for (int cnt=0;cnt<paramCount;cnt++)
//        printk("Param # %u is %s\n", cnt, params[cnt]);
    
    memset(lTempS,0,MAX_PARAM_WIDTH);
    for (int cnt=0;cnt<=paramCount;cnt++)
   12b23:	83 45 dc 01          	add    DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:241 (discriminator 1)
   12b27:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   12b2a:	3b 45 c4             	cmp    eax,DWORD PTR [ebp-0x3c]
   12b2d:	0f 8e 70 fe ff ff    	jle    129a3 <dumpP+0x73>
/home/yogi/src/os/chrisOS/src/bishell.c:277
//    {
//        printk("Converted 0x%08X to ",lAddress);
//        lAddress=__pa(lAddress);
//        printk("%0x%08X\n", lAddress);
//    }
    if (lCount>65535)
   12b33:	81 7d f4 ff ff 00 00 	cmp    DWORD PTR [ebp-0xc],0xffff
   12b3a:	7e 18                	jle    12b54 <dumpP+0x224>
/home/yogi/src/os/chrisOS/src/bishell.c:279
    {
        printk("\nError: Count is too large (%u), max is 500, can't dump", lCount);
   12b3c:	83 ec 08             	sub    esp,0x8
   12b3f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   12b42:	68 7c 5f 04 00       	push   0x45f7c
   12b47:	e8 0f 4c 01 00       	call   2775b <printk>
   12b4c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:280
        return;
   12b4f:	e9 1d 05 00 00       	jmp    13071 <pEnableJmp+0x18>
/home/yogi/src/os/chrisOS/src/bishell.c:282
    }
    if (lCharSize!='b' && lCharSize!='h' && lCharSize!='w' && lCharSize!='d')
   12b54:	80 7d ee 62          	cmp    BYTE PTR [ebp-0x12],0x62
   12b58:	74 2c                	je     12b86 <dumpP+0x256>
/home/yogi/src/os/chrisOS/src/bishell.c:282 (discriminator 1)
   12b5a:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12b5e:	74 26                	je     12b86 <dumpP+0x256>
/home/yogi/src/os/chrisOS/src/bishell.c:282 (discriminator 2)
   12b60:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12b64:	74 20                	je     12b86 <dumpP+0x256>
/home/yogi/src/os/chrisOS/src/bishell.c:282 (discriminator 3)
   12b66:	80 7d ee 64          	cmp    BYTE PTR [ebp-0x12],0x64
   12b6a:	74 1a                	je     12b86 <dumpP+0x256>
/home/yogi/src/os/chrisOS/src/bishell.c:284
    {
        printk("\nError: Character size (%c) must be in bhwd", lCharSize);
   12b6c:	0f be 45 ee          	movsx  eax,BYTE PTR [ebp-0x12]
   12b70:	83 ec 08             	sub    esp,0x8
   12b73:	50                   	push   eax
   12b74:	68 b4 5f 04 00       	push   0x45fb4
   12b79:	e8 dd 4b 01 00       	call   2775b <printk>
   12b7e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:285
        return;
   12b81:	e9 eb 04 00 00       	jmp    13071 <pEnableJmp+0x18>
/home/yogi/src/os/chrisOS/src/bishell.c:287
    }
    if (lCharType!='x' && lCharType!='c' && lCharType!='e')
   12b86:	80 7d ef 78          	cmp    BYTE PTR [ebp-0x11],0x78
   12b8a:	74 26                	je     12bb2 <dumpP+0x282>
/home/yogi/src/os/chrisOS/src/bishell.c:287 (discriminator 1)
   12b8c:	80 7d ef 63          	cmp    BYTE PTR [ebp-0x11],0x63
   12b90:	74 20                	je     12bb2 <dumpP+0x282>
/home/yogi/src/os/chrisOS/src/bishell.c:287 (discriminator 2)
   12b92:	80 7d ef 65          	cmp    BYTE PTR [ebp-0x11],0x65
   12b96:	74 1a                	je     12bb2 <dumpP+0x282>
/home/yogi/src/os/chrisOS/src/bishell.c:289
    {
        printk("\nError: Character type (%c) must be in xce", lCharType);
   12b98:	0f be 45 ef          	movsx  eax,BYTE PTR [ebp-0x11]
   12b9c:	83 ec 08             	sub    esp,0x8
   12b9f:	50                   	push   eax
   12ba0:	68 e0 5f 04 00       	push   0x45fe0
   12ba5:	e8 b1 4b 01 00       	call   2775b <printk>
   12baa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:290
        return;
   12bad:	e9 bf 04 00 00       	jmp    13071 <pEnableJmp+0x18>
/home/yogi/src/os/chrisOS/src/bishell.c:298
    {
        printk("Error: Requested address (0x%08X) or address+count (0x%08X) > memory size ()", lAddress, lAddress+lCount);
        return;
    }*/
    
    if (cr3!=0)
   12bb2:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   12bb6:	74 37                	je     12bef <dumpP+0x2bf>
/home/yogi/src/os/chrisOS/src/bishell.c:300
    {
        lAddress=(kPagingGet4kPTEntryValueCR3(cr3,lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF) ;
   12bb8:	83 ec 08             	sub    esp,0x8
   12bbb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   12bbe:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   12bc1:	e8 42 e9 ff ff       	call   11508 <kPagingGet4kPTEntryValueCR3>
   12bc6:	83 c4 10             	add    esp,0x10
   12bc9:	25 00 f0 ff ff       	and    eax,0xfffff000
   12bce:	89 c2                	mov    edx,eax
   12bd0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12bd3:	25 ff 0f 00 00       	and    eax,0xfff
   12bd8:	09 d0                	or     eax,edx
   12bda:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:301
        printk(", physical address is 0x%08X\n");
   12bdd:	83 ec 0c             	sub    esp,0xc
   12be0:	68 0b 60 04 00       	push   0x4600b
   12be5:	e8 71 4b 01 00       	call   2775b <printk>
   12bea:	83 c4 10             	add    esp,0x10
   12bed:	eb 10                	jmp    12bff <dumpP+0x2cf>
/home/yogi/src/os/chrisOS/src/bishell.c:304
    }
    else
        printk("\n");
   12bef:	83 ec 0c             	sub    esp,0xc
   12bf2:	68 29 60 04 00       	push   0x46029
   12bf7:	e8 5f 4b 01 00       	call   2775b <printk>
   12bfc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:306
    
    printk("dump");
   12bff:	83 ec 0c             	sub    esp,0xc
   12c02:	68 2b 60 04 00       	push   0x4602b
   12c07:	e8 4f 4b 01 00       	call   2775b <printk>
   12c0c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:307
    if (addrIsVirtual)
   12c0f:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
   12c13:	74 12                	je     12c27 <dumpP+0x2f7>
/home/yogi/src/os/chrisOS/src/bishell.c:308
        printk("V");
   12c15:	83 ec 0c             	sub    esp,0xc
   12c18:	68 30 60 04 00       	push   0x46030
   12c1d:	e8 39 4b 01 00       	call   2775b <printk>
   12c22:	83 c4 10             	add    esp,0x10
   12c25:	eb 10                	jmp    12c37 <dumpP+0x307>
/home/yogi/src/os/chrisOS/src/bishell.c:310
    else
        printk("P");
   12c27:	83 ec 0c             	sub    esp,0xc
   12c2a:	68 32 60 04 00       	push   0x46032
   12c2f:	e8 27 4b 01 00       	call   2775b <printk>
   12c34:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:311
    printk(": Dumping %u %c (%c) from 0x%08X\n", lCount, lCharSize , lCharType, lAddress);
   12c37:	0f be 55 ef          	movsx  edx,BYTE PTR [ebp-0x11]
   12c3b:	0f be 45 ee          	movsx  eax,BYTE PTR [ebp-0x12]
   12c3f:	83 ec 0c             	sub    esp,0xc
   12c42:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   12c45:	52                   	push   edx
   12c46:	50                   	push   eax
   12c47:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   12c4a:	68 34 60 04 00       	push   0x46034
   12c4f:	e8 07 4b 01 00       	call   2775b <printk>
   12c54:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/bishell.c:312
    uint8_t* mem=(uint8_t*)lAddress;
   12c57:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12c5a:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
/home/yogi/src/os/chrisOS/src/bishell.c:313
    uint16_t* memw=(uint16_t*)lAddress;
   12c5d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12c60:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
/home/yogi/src/os/chrisOS/src/bishell.c:314
    uint32_t* memd=(uint32_t*)lAddress;
   12c63:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12c66:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
/home/yogi/src/os/chrisOS/src/bishell.c:315
    uint32_t* memq=(uint32_t*)lAddress;
   12c69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12c6c:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:316
    int lineCount=0;
   12c6f:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:318
    int lEntriesPerLine;
    if (lCharSize=='b')
   12c76:	80 7d ee 62          	cmp    BYTE PTR [ebp-0x12],0x62
   12c7a:	75 07                	jne    12c83 <dumpP+0x353>
/home/yogi/src/os/chrisOS/src/bishell.c:319
        lEntriesPerLine=15;
   12c7c:	c7 45 d4 0f 00 00 00 	mov    DWORD PTR [ebp-0x2c],0xf
/home/yogi/src/os/chrisOS/src/bishell.c:320
    if (lCharSize=='h')
   12c83:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12c87:	75 09                	jne    12c92 <dumpP+0x362>
/home/yogi/src/os/chrisOS/src/bishell.c:321
        lEntriesPerLine=8;
   12c89:	c7 45 d4 08 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x8
   12c90:	eb 16                	jmp    12ca8 <dumpP+0x378>
/home/yogi/src/os/chrisOS/src/bishell.c:322
    else if (lCharSize=='w')
   12c92:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12c96:	75 09                	jne    12ca1 <dumpP+0x371>
/home/yogi/src/os/chrisOS/src/bishell.c:323
        lEntriesPerLine=4;
   12c98:	c7 45 d4 04 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x4
   12c9f:	eb 07                	jmp    12ca8 <dumpP+0x378>
/home/yogi/src/os/chrisOS/src/bishell.c:325
    else
        lEntriesPerLine=3;
   12ca1:	c7 45 d4 03 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x3
/home/yogi/src/os/chrisOS/src/bishell.c:326
    lTemp=0; //column
   12ca8:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:327
    if (!addrIsVirtual)
   12caf:	0f b6 45 e7          	movzx  eax,BYTE PTR [ebp-0x19]
   12cb3:	83 f0 01             	xor    eax,0x1
   12cb6:	84 c0                	test   al,al
   12cb8:	74 17                	je     12cd1 <dumpP+0x3a1>
/home/yogi/src/os/chrisOS/src/bishell.c:329
    {
        SWITCH_TO_NON_KERNEL_DATA_AND_STACK
   12cba:	50                   	push   eax
   12cbb:	b8 18 00 00 00       	mov    eax,0x18
   12cc0:	8e d8                	mov    ds,eax
   12cc2:	8e c0                	mov    es,eax
   12cc4:	8e e0                	mov    fs,eax
   12cc6:	8e e8                	mov    gs,eax
   12cc8:	8e d0                	mov    ss,eax
   12cca:	58                   	pop    eax
/home/yogi/src/os/chrisOS/src/bishell.c:330
        __asm__("cli\n");
   12ccb:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/bishell.c:331
        doNonPagingJump();
   12ccc:	e8 6f e6 fe ff       	call   1340 <doNonPagingJump>
/home/yogi/src/os/chrisOS/src/bishell.c:333
    }
    if (lCharSize=='b')
   12cd1:	80 7d ee 62          	cmp    BYTE PTR [ebp-0x12],0x62
   12cd5:	0f 85 10 02 00 00    	jne    12eeb <dumpP+0x5bb>
/home/yogi/src/os/chrisOS/src/bishell.c:335
    {
        printk("%08X:\t", &mem[0]);
   12cdb:	83 ec 08             	sub    esp,0x8
   12cde:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
   12ce1:	68 56 60 04 00       	push   0x46056
   12ce6:	e8 70 4a 01 00       	call   2775b <printk>
   12ceb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:336
        for (int cnt=0;cnt<lCount;cnt++)
   12cee:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
   12cf5:	e9 e3 01 00 00       	jmp    12edd <dumpP+0x5ad>
/home/yogi/src/os/chrisOS/src/bishell.c:339
        {
            //After every 16 bytes, print the character values, a newline, and the start address of the next 16 bytes
            if (lTemp==16)
   12cfa:	83 7d e8 10          	cmp    DWORD PTR [ebp-0x18],0x10
   12cfe:	0f 85 81 01 00 00    	jne    12e85 <dumpP+0x555>
/home/yogi/src/os/chrisOS/src/bishell.c:341
            {
                puts(" ");
   12d04:	83 ec 0c             	sub    esp,0xc
   12d07:	68 5d 60 04 00       	push   0x4605d
   12d0c:	e8 f9 56 00 00       	call   1840a <puts>
   12d11:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:342
                for (int cnt2=0;cnt2<16;cnt2++)
   12d14:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
   12d1b:	e9 05 01 00 00       	jmp    12e25 <dumpP+0x4f5>
/home/yogi/src/os/chrisOS/src/bishell.c:344
                {
                    if (ISALPHA(lTempS[cnt2]) || ISDIGIT(lTempS[cnt2]) || (lTempS[cnt2]>=32&&lTempS[cnt2]<=47) || (lTempS[cnt2]>=123&&lTempS[cnt2]<=126) || (lTempS[cnt2]>=91&&lTempS[cnt2]<=96) || (lTempS[cnt2]>=58&&lTempS[cnt2]<=64) )
   12d20:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12d26:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12d29:	01 d0                	add    eax,edx
   12d2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12d2e:	83 c8 20             	or     eax,0x20
   12d31:	0f be c0             	movsx  eax,al
   12d34:	83 e8 61             	sub    eax,0x61
   12d37:	83 f8 19             	cmp    eax,0x19
   12d3a:	0f 86 ad 00 00 00    	jbe    12ded <dumpP+0x4bd>
/home/yogi/src/os/chrisOS/src/bishell.c:344 (discriminator 1)
   12d40:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12d46:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12d49:	01 d0                	add    eax,edx
   12d4b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12d4e:	0f be c0             	movsx  eax,al
   12d51:	83 e8 30             	sub    eax,0x30
   12d54:	83 f8 09             	cmp    eax,0x9
   12d57:	0f 86 90 00 00 00    	jbe    12ded <dumpP+0x4bd>
/home/yogi/src/os/chrisOS/src/bishell.c:344 (discriminator 2)
   12d5d:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12d63:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12d66:	01 d0                	add    eax,edx
   12d68:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12d6b:	3c 1f                	cmp    al,0x1f
   12d6d:	7e 12                	jle    12d81 <dumpP+0x451>
/home/yogi/src/os/chrisOS/src/bishell.c:344 (discriminator 3)
   12d6f:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12d75:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12d78:	01 d0                	add    eax,edx
   12d7a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12d7d:	3c 2f                	cmp    al,0x2f
   12d7f:	7e 6c                	jle    12ded <dumpP+0x4bd>
/home/yogi/src/os/chrisOS/src/bishell.c:344 (discriminator 5)
   12d81:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12d87:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12d8a:	01 d0                	add    eax,edx
   12d8c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12d8f:	3c 7a                	cmp    al,0x7a
   12d91:	7e 12                	jle    12da5 <dumpP+0x475>
/home/yogi/src/os/chrisOS/src/bishell.c:344 (discriminator 6)
   12d93:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12d99:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12d9c:	01 d0                	add    eax,edx
   12d9e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12da1:	3c 7f                	cmp    al,0x7f
   12da3:	75 48                	jne    12ded <dumpP+0x4bd>
/home/yogi/src/os/chrisOS/src/bishell.c:344 (discriminator 8)
   12da5:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12dab:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12dae:	01 d0                	add    eax,edx
   12db0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12db3:	3c 5a                	cmp    al,0x5a
   12db5:	7e 12                	jle    12dc9 <dumpP+0x499>
/home/yogi/src/os/chrisOS/src/bishell.c:344 (discriminator 9)
   12db7:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12dbd:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12dc0:	01 d0                	add    eax,edx
   12dc2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12dc5:	3c 60                	cmp    al,0x60
   12dc7:	7e 24                	jle    12ded <dumpP+0x4bd>
/home/yogi/src/os/chrisOS/src/bishell.c:344 (discriminator 11)
   12dc9:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12dcf:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12dd2:	01 d0                	add    eax,edx
   12dd4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12dd7:	3c 39                	cmp    al,0x39
   12dd9:	7e 36                	jle    12e11 <dumpP+0x4e1>
/home/yogi/src/os/chrisOS/src/bishell.c:344 (discriminator 12)
   12ddb:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12de1:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12de4:	01 d0                	add    eax,edx
   12de6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12de9:	3c 40                	cmp    al,0x40
   12deb:	7f 24                	jg     12e11 <dumpP+0x4e1>
/home/yogi/src/os/chrisOS/src/bishell.c:345
                        printk("%c",lTempS[cnt2]);
   12ded:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12df3:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12df6:	01 d0                	add    eax,edx
   12df8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12dfb:	0f be c0             	movsx  eax,al
   12dfe:	83 ec 08             	sub    esp,0x8
   12e01:	50                   	push   eax
   12e02:	68 5f 60 04 00       	push   0x4605f
   12e07:	e8 4f 49 01 00       	call   2775b <printk>
   12e0c:	83 c4 10             	add    esp,0x10
   12e0f:	eb 10                	jmp    12e21 <dumpP+0x4f1>
/home/yogi/src/os/chrisOS/src/bishell.c:347
                    else
                        puts(".");
   12e11:	83 ec 0c             	sub    esp,0xc
   12e14:	68 62 60 04 00       	push   0x46062
   12e19:	e8 ec 55 00 00       	call   1840a <puts>
   12e1e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:342 (discriminator 2)
        {
            //After every 16 bytes, print the character values, a newline, and the start address of the next 16 bytes
            if (lTemp==16)
            {
                puts(" ");
                for (int cnt2=0;cnt2<16;cnt2++)
   12e21:	83 45 cc 01          	add    DWORD PTR [ebp-0x34],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:342 (discriminator 1)
   12e25:	83 7d cc 0f          	cmp    DWORD PTR [ebp-0x34],0xf
   12e29:	0f 8e f1 fe ff ff    	jle    12d20 <dumpP+0x3f0>
/home/yogi/src/os/chrisOS/src/bishell.c:349
                    if (ISALPHA(lTempS[cnt2]) || ISDIGIT(lTempS[cnt2]) || (lTempS[cnt2]>=32&&lTempS[cnt2]<=47) || (lTempS[cnt2]>=123&&lTempS[cnt2]<=126) || (lTempS[cnt2]>=91&&lTempS[cnt2]<=96) || (lTempS[cnt2]>=58&&lTempS[cnt2]<=64) )
                        printk("%c",lTempS[cnt2]);
                    else
                        puts(".");
                }
                puts("\n");
   12e2f:	83 ec 0c             	sub    esp,0xc
   12e32:	68 29 60 04 00       	push   0x46029
   12e37:	e8 ce 55 00 00       	call   1840a <puts>
   12e3c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:350
                if (++lineCount==SYS_VGA_HEIGHT-1)
   12e3f:	83 45 d8 01          	add    DWORD PTR [ebp-0x28],0x1
   12e43:	83 7d d8 31          	cmp    DWORD PTR [ebp-0x28],0x31
   12e47:	75 1c                	jne    12e65 <dumpP+0x535>
/home/yogi/src/os/chrisOS/src/bishell.c:352
                {
                    if (pauseDisplay(true))
   12e49:	83 ec 0c             	sub    esp,0xc
   12e4c:	6a 01                	push   0x1
   12e4e:	e8 d4 30 01 00       	call   25f27 <pauseDisplay>
   12e53:	83 c4 10             	add    esp,0x10
   12e56:	84 c0                	test   al,al
   12e58:	0f 85 a2 00 00 00    	jne    12f00 <dumpP+0x5d0>
/home/yogi/src/os/chrisOS/src/bishell.c:354
                        break;
                    lineCount=0;
   12e5e:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:356
                }
                printk("%08X:\t", &mem[cnt]);
   12e65:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
   12e68:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
   12e6b:	01 d0                	add    eax,edx
   12e6d:	83 ec 08             	sub    esp,0x8
   12e70:	50                   	push   eax
   12e71:	68 56 60 04 00       	push   0x46056
   12e76:	e8 e0 48 01 00       	call   2775b <printk>
   12e7b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:357
                lTemp=0;
   12e7e:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:359
            }
            printk("%02X ",mem[cnt]);
   12e85:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
   12e88:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
   12e8b:	01 d0                	add    eax,edx
   12e8d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12e90:	0f b6 c0             	movzx  eax,al
   12e93:	83 ec 08             	sub    esp,0x8
   12e96:	50                   	push   eax
   12e97:	68 64 60 04 00       	push   0x46064
   12e9c:	e8 ba 48 01 00       	call   2775b <printk>
   12ea1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:360
            lTempS[lTemp++]=mem[cnt];
   12ea4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12ea7:	8d 50 01             	lea    edx,[eax+0x1]
   12eaa:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   12ead:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
   12eb0:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
   12eb3:	01 ca                	add    edx,ecx
   12eb5:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   12eb8:	88 94 05 b4 e9 ff ff 	mov    BYTE PTR [ebp+eax*1-0x164c],dl
/home/yogi/src/os/chrisOS/src/bishell.c:361
            if (lTemp%4==0)
   12ebf:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12ec2:	83 e0 03             	and    eax,0x3
   12ec5:	85 c0                	test   eax,eax
   12ec7:	75 10                	jne    12ed9 <dumpP+0x5a9>
/home/yogi/src/os/chrisOS/src/bishell.c:362
                printk(" ");
   12ec9:	83 ec 0c             	sub    esp,0xc
   12ecc:	68 5d 60 04 00       	push   0x4605d
   12ed1:	e8 85 48 01 00       	call   2775b <printk>
   12ed6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:336 (discriminator 2)
        doNonPagingJump();
    }
    if (lCharSize=='b')
    {
        printk("%08X:\t", &mem[0]);
        for (int cnt=0;cnt<lCount;cnt++)
   12ed9:	83 45 d0 01          	add    DWORD PTR [ebp-0x30],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:336 (discriminator 1)
   12edd:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12ee0:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   12ee3:	0f 8c 11 fe ff ff    	jl     12cfa <dumpP+0x3ca>
   12ee9:	eb 16                	jmp    12f01 <dumpP+0x5d1>
/home/yogi/src/os/chrisOS/src/bishell.c:366
            if (lTemp%4==0)
                printk(" ");
        }
    }
    else
        printk("%08X:", &memw[0]);
   12eeb:	83 ec 08             	sub    esp,0x8
   12eee:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
   12ef1:	68 6a 60 04 00       	push   0x4606a
   12ef6:	e8 60 48 01 00       	call   2775b <printk>
   12efb:	83 c4 10             	add    esp,0x10
   12efe:	eb 01                	jmp    12f01 <dumpP+0x5d1>
/home/yogi/src/os/chrisOS/src/bishell.c:353
                }
                puts("\n");
                if (++lineCount==SYS_VGA_HEIGHT-1)
                {
                    if (pauseDisplay(true))
                        break;
   12f00:	90                   	nop
/home/yogi/src/os/chrisOS/src/bishell.c:367
                printk(" ");
        }
    }
    else
        printk("%08X:", &memw[0]);
        for (int cnt=0;cnt<lCount;cnt++)
   12f01:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
   12f08:	e9 0f 01 00 00       	jmp    1301c <dumpP+0x6ec>
/home/yogi/src/os/chrisOS/src/bishell.c:369
        {
            if (lTemp==lEntriesPerLine)
   12f0d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12f10:	3b 45 d4             	cmp    eax,DWORD PTR [ebp-0x2c]
   12f13:	0f 85 a9 00 00 00    	jne    12fc2 <dumpP+0x692>
/home/yogi/src/os/chrisOS/src/bishell.c:371
            {
                puts("\n");
   12f19:	83 ec 0c             	sub    esp,0xc
   12f1c:	68 29 60 04 00       	push   0x46029
   12f21:	e8 e4 54 00 00       	call   1840a <puts>
   12f26:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:372
                if (++lineCount==SYS_VGA_HEIGHT-1)
   12f29:	83 45 d8 01          	add    DWORD PTR [ebp-0x28],0x1
   12f2d:	83 7d d8 31          	cmp    DWORD PTR [ebp-0x28],0x31
   12f31:	75 1c                	jne    12f4f <dumpP+0x61f>
/home/yogi/src/os/chrisOS/src/bishell.c:374
                {
                    if (pauseDisplay(true))
   12f33:	83 ec 0c             	sub    esp,0xc
   12f36:	6a 01                	push   0x1
   12f38:	e8 ea 2f 01 00       	call   25f27 <pauseDisplay>
   12f3d:	83 c4 10             	add    esp,0x10
   12f40:	84 c0                	test   al,al
   12f42:	0f 85 e2 00 00 00    	jne    1302a <dumpP+0x6fa>
/home/yogi/src/os/chrisOS/src/bishell.c:376
                        break;
                    lineCount=0;
   12f48:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:378
                }
                lTemp=0;
   12f4f:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:379
                if (lCharSize=='h')
   12f56:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12f5a:	75 1e                	jne    12f7a <dumpP+0x64a>
/home/yogi/src/os/chrisOS/src/bishell.c:380
                    printk("%08X:", &memw[cnt]);
   12f5c:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
   12f5f:	8d 14 00             	lea    edx,[eax+eax*1]
   12f62:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
   12f65:	01 d0                	add    eax,edx
   12f67:	83 ec 08             	sub    esp,0x8
   12f6a:	50                   	push   eax
   12f6b:	68 6a 60 04 00       	push   0x4606a
   12f70:	e8 e6 47 01 00       	call   2775b <printk>
   12f75:	83 c4 10             	add    esp,0x10
   12f78:	eb 48                	jmp    12fc2 <dumpP+0x692>
/home/yogi/src/os/chrisOS/src/bishell.c:381
                else if (lCharSize=='w')
   12f7a:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12f7e:	75 22                	jne    12fa2 <dumpP+0x672>
/home/yogi/src/os/chrisOS/src/bishell.c:382
                    printk("%08X:", &memd[cnt]);
   12f80:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
   12f83:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   12f8a:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
   12f8d:	01 d0                	add    eax,edx
   12f8f:	83 ec 08             	sub    esp,0x8
   12f92:	50                   	push   eax
   12f93:	68 6a 60 04 00       	push   0x4606a
   12f98:	e8 be 47 01 00       	call   2775b <printk>
   12f9d:	83 c4 10             	add    esp,0x10
   12fa0:	eb 20                	jmp    12fc2 <dumpP+0x692>
/home/yogi/src/os/chrisOS/src/bishell.c:384
                else
                    printk("%08X:", &memq[cnt]);
   12fa2:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
   12fa5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   12fac:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   12faf:	01 d0                	add    eax,edx
   12fb1:	83 ec 08             	sub    esp,0x8
   12fb4:	50                   	push   eax
   12fb5:	68 6a 60 04 00       	push   0x4606a
   12fba:	e8 9c 47 01 00       	call   2775b <printk>
   12fbf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:386
            }
            if (lCharSize=='h')
   12fc2:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12fc6:	75 24                	jne    12fec <dumpP+0x6bc>
/home/yogi/src/os/chrisOS/src/bishell.c:387
                printk("%04X ",memw[cnt]);
   12fc8:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
   12fcb:	8d 14 00             	lea    edx,[eax+eax*1]
   12fce:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
   12fd1:	01 d0                	add    eax,edx
   12fd3:	0f b7 00             	movzx  eax,WORD PTR [eax]
   12fd6:	0f b7 c0             	movzx  eax,ax
   12fd9:	83 ec 08             	sub    esp,0x8
   12fdc:	50                   	push   eax
   12fdd:	68 70 60 04 00       	push   0x46070
   12fe2:	e8 74 47 01 00       	call   2775b <printk>
   12fe7:	83 c4 10             	add    esp,0x10
   12fea:	eb 28                	jmp    13014 <dumpP+0x6e4>
/home/yogi/src/os/chrisOS/src/bishell.c:388
            else if (lCharSize=='w')
   12fec:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12ff0:	75 22                	jne    13014 <dumpP+0x6e4>
/home/yogi/src/os/chrisOS/src/bishell.c:389
                printk("%08X ", memd[cnt]);
   12ff2:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
   12ff5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   12ffc:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
   12fff:	01 d0                	add    eax,edx
   13001:	8b 00                	mov    eax,DWORD PTR [eax]
   13003:	83 ec 08             	sub    esp,0x8
   13006:	50                   	push   eax
   13007:	68 76 60 04 00       	push   0x46076
   1300c:	e8 4a 47 01 00       	call   2775b <printk>
   13011:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:390 (discriminator 2)
            lTemp++;
   13014:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:367 (discriminator 2)
                printk(" ");
        }
    }
    else
        printk("%08X:", &memw[0]);
        for (int cnt=0;cnt<lCount;cnt++)
   13018:	83 45 c8 01          	add    DWORD PTR [ebp-0x38],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:367 (discriminator 1)
   1301c:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
   1301f:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   13022:	0f 8c e5 fe ff ff    	jl     12f0d <dumpP+0x5dd>
   13028:	eb 01                	jmp    1302b <dumpP+0x6fb>
/home/yogi/src/os/chrisOS/src/bishell.c:375
            {
                puts("\n");
                if (++lineCount==SYS_VGA_HEIGHT-1)
                {
                    if (pauseDisplay(true))
                        break;
   1302a:	90                   	nop
/home/yogi/src/os/chrisOS/src/bishell.c:392
                printk("%04X ",memw[cnt]);
            else if (lCharSize=='w')
                printk("%08X ", memd[cnt]);
            lTemp++;
        }
    puts("\n");
   1302b:	83 ec 0c             	sub    esp,0xc
   1302e:	68 29 60 04 00       	push   0x46029
   13033:	e8 d2 53 00 00       	call   1840a <puts>
   13038:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:393
    if (!addrIsVirtual)
   1303b:	0f b6 45 e7          	movzx  eax,BYTE PTR [ebp-0x19]
   1303f:	83 f0 01             	xor    eax,0x1
   13042:	84 c0                	test   al,al
   13044:	74 2b                	je     13071 <pEnableJmp+0x18>
/home/yogi/src/os/chrisOS/src/bishell.c:395
    {
        __asm__("push eax\nmov eax,cr0\n or eax,0x80000000\n mov cr0,eax\nljmp 0x20:pEnableJmp\npEnableJmp:pop eax\n");
   13046:	50                   	push   eax
   13047:	0f 20 c0             	mov    eax,cr0
   1304a:	0d 00 00 00 80       	or     eax,0x80000000
   1304f:	0f 22 c0             	mov    cr0,eax
   13052:	ea 59 30 01 00 20 00 	jmp    0x20:0x13059

00013059 <pEnableJmp>:
   13059:	58                   	pop    eax
/home/yogi/src/os/chrisOS/src/bishell.c:396
       doPagingJump();
   1305a:	e8 ca e2 fe ff       	call   1329 <doPagingJump>
/home/yogi/src/os/chrisOS/src/bishell.c:397
        SWITCH_TO_KERNEL_DATA_AND_STACK
   1305f:	50                   	push   eax
   13060:	b8 10 00 00 00       	mov    eax,0x10
   13065:	8e d8                	mov    ds,eax
   13067:	8e c0                	mov    es,eax
   13069:	8e e0                	mov    fs,eax
   1306b:	8e e8                	mov    gs,eax
   1306d:	8e d0                	mov    ss,eax
   1306f:	58                   	pop    eax
/home/yogi/src/os/chrisOS/src/bishell.c:398
        __asm__("sti\n");
   13070:	fb                   	sti    
/home/yogi/src/os/chrisOS/src/bishell.c:400
    }
}
   13071:	c9                   	leave  
   13072:	c3                   	ret    

00013073 <dumpV>:
dumpV():
/home/yogi/src/os/chrisOS/src/bishell.c:403

void HIGH_CODE_SECTION dumpV(char* cmdline)
{
   13073:	55                   	push   ebp
   13074:	89 e5                	mov    ebp,esp
   13076:	81 ec 08 02 00 00    	sub    esp,0x208
/home/yogi/src/os/chrisOS/src/bishell.c:405
    char newCmdLine[MAX_PARAM_WIDTH];
    strcpy(newCmdLine,cmdline);
   1307c:	83 ec 08             	sub    esp,0x8
   1307f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13082:	8d 85 f8 fd ff ff    	lea    eax,[ebp-0x208]
   13088:	50                   	push   eax
   13089:	e8 2e 48 01 00       	call   278bc <strcpy>
   1308e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:406
    strcat(newCmdLine," v");
   13091:	83 ec 08             	sub    esp,0x8
   13094:	68 7c 60 04 00       	push   0x4607c
   13099:	8d 85 f8 fd ff ff    	lea    eax,[ebp-0x208]
   1309f:	50                   	push   eax
   130a0:	e8 2f 47 01 00       	call   277d4 <strcat>
   130a5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:407
    dumpP(newCmdLine);
   130a8:	83 ec 0c             	sub    esp,0xc
   130ab:	8d 85 f8 fd ff ff    	lea    eax,[ebp-0x208]
   130b1:	50                   	push   eax
   130b2:	e8 79 f8 ff ff       	call   12930 <dumpP>
   130b7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:408
}
   130ba:	90                   	nop
   130bb:	c9                   	leave  
   130bc:	c3                   	ret    

000130bd <helpMe>:
helpMe():
/home/yogi/src/os/chrisOS/src/bishell.c:411

void HIGH_CODE_SECTION helpMe()
{
   130bd:	55                   	push   ebp
   130be:	89 e5                	mov    ebp,esp
   130c0:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/bishell.c:412
    printk("Help:\n");
   130c3:	83 ec 0c             	sub    esp,0xc
   130c6:	68 7f 60 04 00       	push   0x4607f
   130cb:	e8 8b 46 01 00       	call   2775b <printk>
   130d0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:413
    for (unsigned cnt=0;cnt<sizeof(cmds)/sizeof(command_table_t);cnt++)
   130d3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   130da:	eb 30                	jmp    1310c <helpMe+0x4f>
/home/yogi/src/os/chrisOS/src/bishell.c:414 (discriminator 3)
        printk("\t%s: %s\n", cmds[cnt].name, cmds[cnt].description);
   130dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   130df:	c1 e0 04             	shl    eax,0x4
   130e2:	05 04 90 02 00       	add    eax,0x29004
   130e7:	8b 10                	mov    edx,DWORD PTR [eax]
   130e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   130ec:	c1 e0 04             	shl    eax,0x4
   130ef:	05 00 90 02 00       	add    eax,0x29000
   130f4:	8b 00                	mov    eax,DWORD PTR [eax]
   130f6:	83 ec 04             	sub    esp,0x4
   130f9:	52                   	push   edx
   130fa:	50                   	push   eax
   130fb:	68 86 60 04 00       	push   0x46086
   13100:	e8 56 46 01 00       	call   2775b <printk>
   13105:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:413 (discriminator 3)
}

void HIGH_CODE_SECTION helpMe()
{
    printk("Help:\n");
    for (unsigned cnt=0;cnt<sizeof(cmds)/sizeof(command_table_t);cnt++)
   13108:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:413 (discriminator 1)
   1310c:	83 7d f4 1b          	cmp    DWORD PTR [ebp-0xc],0x1b
   13110:	76 ca                	jbe    130dc <helpMe+0x1f>
/home/yogi/src/os/chrisOS/src/bishell.c:415
        printk("\t%s: %s\n", cmds[cnt].name, cmds[cnt].description);
}
   13112:	90                   	nop
   13113:	c9                   	leave  
   13114:	c3                   	ret    

00013115 <inPortB>:
inPortB():
/home/yogi/src/os/chrisOS/src/bishell.c:418

void HIGH_CODE_SECTION inPortB(char* cmdline)
{
   13115:	55                   	push   ebp
   13116:	89 e5                	mov    ebp,esp
   13118:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:420
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   1311e:	83 ec 04             	sub    esp,0x4
   13121:	68 00 14 00 00       	push   0x1400
   13126:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   1312c:	50                   	push   eax
   1312d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13130:	e8 cb f3 ff ff       	call   12500 <parseParamsShell>
   13135:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:422
   
   uint8_t inVal=inb(strtoul(params[0],0,16));
   13138:	83 ec 04             	sub    esp,0x4
   1313b:	6a 10                	push   0x10
   1313d:	6a 00                	push   0x0
   1313f:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   13145:	50                   	push   eax
   13146:	e8 09 48 01 00       	call   27954 <strtoul>
   1314b:	83 c4 10             	add    esp,0x10
   1314e:	0f b7 c0             	movzx  eax,ax
   13151:	83 ec 0c             	sub    esp,0xc
   13154:	50                   	push   eax
   13155:	e8 43 f1 ff ff       	call   1229d <inb>
   1315a:	83 c4 10             	add    esp,0x10
   1315d:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/bishell.c:423
   printk("0x%02X\n",inVal);
   13160:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   13164:	83 ec 08             	sub    esp,0x8
   13167:	50                   	push   eax
   13168:	68 8f 60 04 00       	push   0x4608f
   1316d:	e8 e9 45 01 00       	call   2775b <printk>
   13172:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:424
}
   13175:	90                   	nop
   13176:	c9                   	leave  
   13177:	c3                   	ret    

00013178 <inPortW>:
inPortW():
/home/yogi/src/os/chrisOS/src/bishell.c:427

void HIGH_CODE_SECTION inPortW(char* cmdline)
{
   13178:	55                   	push   ebp
   13179:	89 e5                	mov    ebp,esp
   1317b:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:429
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13181:	83 ec 04             	sub    esp,0x4
   13184:	68 00 14 00 00       	push   0x1400
   13189:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   1318f:	50                   	push   eax
   13190:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13193:	e8 68 f3 ff ff       	call   12500 <parseParamsShell>
   13198:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:431
   
   uint8_t inVal=inw(strtoul(params[0],0,16));
   1319b:	83 ec 04             	sub    esp,0x4
   1319e:	6a 10                	push   0x10
   131a0:	6a 00                	push   0x0
   131a2:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   131a8:	50                   	push   eax
   131a9:	e8 a6 47 01 00       	call   27954 <strtoul>
   131ae:	83 c4 10             	add    esp,0x10
   131b1:	0f b7 c0             	movzx  eax,ax
   131b4:	83 ec 0c             	sub    esp,0xc
   131b7:	50                   	push   eax
   131b8:	e8 fd f0 ff ff       	call   122ba <inw>
   131bd:	83 c4 10             	add    esp,0x10
   131c0:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/bishell.c:432
   printk("0x%04X\n",inVal);
   131c3:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   131c7:	83 ec 08             	sub    esp,0x8
   131ca:	50                   	push   eax
   131cb:	68 97 60 04 00       	push   0x46097
   131d0:	e8 86 45 01 00       	call   2775b <printk>
   131d5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:433
}
   131d8:	90                   	nop
   131d9:	c9                   	leave  
   131da:	c3                   	ret    

000131db <inPortD>:
inPortD():
/home/yogi/src/os/chrisOS/src/bishell.c:436

void HIGH_CODE_SECTION inPortD(char* cmdline)
{
   131db:	55                   	push   ebp
   131dc:	89 e5                	mov    ebp,esp
   131de:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:438
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   131e4:	83 ec 04             	sub    esp,0x4
   131e7:	68 00 14 00 00       	push   0x1400
   131ec:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   131f2:	50                   	push   eax
   131f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   131f6:	e8 05 f3 ff ff       	call   12500 <parseParamsShell>
   131fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:440
   
   uint8_t inVal=inl(strtoul(params[0],0,16));
   131fe:	83 ec 04             	sub    esp,0x4
   13201:	6a 10                	push   0x10
   13203:	6a 00                	push   0x0
   13205:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   1320b:	50                   	push   eax
   1320c:	e8 43 47 01 00       	call   27954 <strtoul>
   13211:	83 c4 10             	add    esp,0x10
   13214:	0f b7 c0             	movzx  eax,ax
   13217:	83 ec 0c             	sub    esp,0xc
   1321a:	50                   	push   eax
   1321b:	e8 b9 f0 ff ff       	call   122d9 <inl>
   13220:	83 c4 10             	add    esp,0x10
   13223:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/bishell.c:441
   printk("0x%08X\n",inVal);
   13226:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1322a:	83 ec 08             	sub    esp,0x8
   1322d:	50                   	push   eax
   1322e:	68 9f 60 04 00       	push   0x4609f
   13233:	e8 23 45 01 00       	call   2775b <printk>
   13238:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:442
}
   1323b:	90                   	nop
   1323c:	c9                   	leave  
   1323d:	c3                   	ret    

0001323e <outPortB>:
outPortB():
/home/yogi/src/os/chrisOS/src/bishell.c:445

void HIGH_CODE_SECTION outPortB(char* cmdline)
{
   1323e:	55                   	push   ebp
   1323f:	89 e5                	mov    ebp,esp
   13241:	53                   	push   ebx
   13242:	81 ec 04 14 00 00    	sub    esp,0x1404
/home/yogi/src/os/chrisOS/src/bishell.c:447
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13248:	83 ec 04             	sub    esp,0x4
   1324b:	68 00 14 00 00       	push   0x1400
   13250:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   13256:	50                   	push   eax
   13257:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1325a:	e8 a1 f2 ff ff       	call   12500 <parseParamsShell>
   1325f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:449
   
   outb(strtoul(params[0],0,16),strtoul(params[1],0,16));
   13262:	83 ec 04             	sub    esp,0x4
   13265:	6a 10                	push   0x10
   13267:	6a 00                	push   0x0
   13269:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   1326f:	05 00 02 00 00       	add    eax,0x200
   13274:	50                   	push   eax
   13275:	e8 da 46 01 00       	call   27954 <strtoul>
   1327a:	83 c4 10             	add    esp,0x10
   1327d:	0f b6 d8             	movzx  ebx,al
   13280:	83 ec 04             	sub    esp,0x4
   13283:	6a 10                	push   0x10
   13285:	6a 00                	push   0x0
   13287:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   1328d:	50                   	push   eax
   1328e:	e8 c1 46 01 00       	call   27954 <strtoul>
   13293:	83 c4 10             	add    esp,0x10
   13296:	0f b7 c0             	movzx  eax,ax
   13299:	83 ec 08             	sub    esp,0x8
   1329c:	53                   	push   ebx
   1329d:	50                   	push   eax
   1329e:	e8 a2 ef ff ff       	call   12245 <outb>
   132a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:450
}
   132a6:	90                   	nop
   132a7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   132aa:	c9                   	leave  
   132ab:	c3                   	ret    

000132ac <outPortW>:
outPortW():
/home/yogi/src/os/chrisOS/src/bishell.c:453

void HIGH_CODE_SECTION outPortW(char* cmdline)
{
   132ac:	55                   	push   ebp
   132ad:	89 e5                	mov    ebp,esp
   132af:	53                   	push   ebx
   132b0:	81 ec 04 14 00 00    	sub    esp,0x1404
/home/yogi/src/os/chrisOS/src/bishell.c:455
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   132b6:	83 ec 04             	sub    esp,0x4
   132b9:	68 00 14 00 00       	push   0x1400
   132be:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   132c4:	50                   	push   eax
   132c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   132c8:	e8 33 f2 ff ff       	call   12500 <parseParamsShell>
   132cd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:457
   
   outw(strtoul(params[0],0,16),strtoul(params[1],0,16));
   132d0:	83 ec 04             	sub    esp,0x4
   132d3:	6a 10                	push   0x10
   132d5:	6a 00                	push   0x0
   132d7:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   132dd:	05 00 02 00 00       	add    eax,0x200
   132e2:	50                   	push   eax
   132e3:	e8 6c 46 01 00       	call   27954 <strtoul>
   132e8:	83 c4 10             	add    esp,0x10
   132eb:	0f b7 d8             	movzx  ebx,ax
   132ee:	83 ec 04             	sub    esp,0x4
   132f1:	6a 10                	push   0x10
   132f3:	6a 00                	push   0x0
   132f5:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   132fb:	50                   	push   eax
   132fc:	e8 53 46 01 00       	call   27954 <strtoul>
   13301:	83 c4 10             	add    esp,0x10
   13304:	0f b7 c0             	movzx  eax,ax
   13307:	83 ec 08             	sub    esp,0x8
   1330a:	53                   	push   ebx
   1330b:	50                   	push   eax
   1330c:	e8 53 ef ff ff       	call   12264 <outw>
   13311:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:458
}
   13314:	90                   	nop
   13315:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   13318:	c9                   	leave  
   13319:	c3                   	ret    

0001331a <outPortD>:
outPortD():
/home/yogi/src/os/chrisOS/src/bishell.c:461

void HIGH_CODE_SECTION outPortD(char* cmdline)
{
   1331a:	55                   	push   ebp
   1331b:	89 e5                	mov    ebp,esp
   1331d:	53                   	push   ebx
   1331e:	81 ec 04 14 00 00    	sub    esp,0x1404
/home/yogi/src/os/chrisOS/src/bishell.c:463
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13324:	83 ec 04             	sub    esp,0x4
   13327:	68 00 14 00 00       	push   0x1400
   1332c:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   13332:	50                   	push   eax
   13333:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13336:	e8 c5 f1 ff ff       	call   12500 <parseParamsShell>
   1333b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:465
   
   outl(strtoul(params[0],0,16),strtoul(params[1],0,16));
   1333e:	83 ec 04             	sub    esp,0x4
   13341:	6a 10                	push   0x10
   13343:	6a 00                	push   0x0
   13345:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   1334b:	05 00 02 00 00       	add    eax,0x200
   13350:	50                   	push   eax
   13351:	e8 fe 45 01 00       	call   27954 <strtoul>
   13356:	83 c4 10             	add    esp,0x10
   13359:	89 c3                	mov    ebx,eax
   1335b:	83 ec 04             	sub    esp,0x4
   1335e:	6a 10                	push   0x10
   13360:	6a 00                	push   0x0
   13362:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   13368:	50                   	push   eax
   13369:	e8 e6 45 01 00       	call   27954 <strtoul>
   1336e:	83 c4 10             	add    esp,0x10
   13371:	0f b7 c0             	movzx  eax,ax
   13374:	83 ec 08             	sub    esp,0x8
   13377:	53                   	push   ebx
   13378:	50                   	push   eax
   13379:	e8 07 ef ff ff       	call   12285 <outl>
   1337e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:466
}
   13381:	90                   	nop
   13382:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   13385:	c9                   	leave  
   13386:	c3                   	ret    

00013387 <writeBytes>:
writeBytes():
/home/yogi/src/os/chrisOS/src/bishell.c:469

void HIGH_CODE_SECTION writeBytes(char* cmdline)
{
   13387:	55                   	push   ebp
   13388:	89 e5                	mov    ebp,esp
   1338a:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:471
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13390:	83 ec 04             	sub    esp,0x4
   13393:	68 00 14 00 00       	push   0x1400
   13398:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   1339e:	50                   	push   eax
   1339f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   133a2:	e8 59 f1 ff ff       	call   12500 <parseParamsShell>
   133a7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:473

    uint8_t* bytes=(uint8_t*)strtoul(params[0],0,16);
   133aa:	83 ec 04             	sub    esp,0x4
   133ad:	6a 10                	push   0x10
   133af:	6a 00                	push   0x0
   133b1:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   133b7:	50                   	push   eax
   133b8:	e8 97 45 01 00       	call   27954 <strtoul>
   133bd:	83 c4 10             	add    esp,0x10
   133c0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:474
    bytes[0]=strtoul(params[1],0,16);
   133c3:	83 ec 04             	sub    esp,0x4
   133c6:	6a 10                	push   0x10
   133c8:	6a 00                	push   0x0
   133ca:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   133d0:	05 00 02 00 00       	add    eax,0x200
   133d5:	50                   	push   eax
   133d6:	e8 79 45 01 00       	call   27954 <strtoul>
   133db:	83 c4 10             	add    esp,0x10
   133de:	89 c2                	mov    edx,eax
   133e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   133e3:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/bishell.c:475
}
   133e5:	90                   	nop
   133e6:	c9                   	leave  
   133e7:	c3                   	ret    

000133e8 <writeWords>:
writeWords():
/home/yogi/src/os/chrisOS/src/bishell.c:478

void HIGH_CODE_SECTION writeWords(char* cmdline)
{
   133e8:	55                   	push   ebp
   133e9:	89 e5                	mov    ebp,esp
   133eb:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:480
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   133f1:	83 ec 04             	sub    esp,0x4
   133f4:	68 00 14 00 00       	push   0x1400
   133f9:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   133ff:	50                   	push   eax
   13400:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13403:	e8 f8 f0 ff ff       	call   12500 <parseParamsShell>
   13408:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:482

    uint16_t* words=(uint16_t*)strtoul(params[0],0,16);
   1340b:	83 ec 04             	sub    esp,0x4
   1340e:	6a 10                	push   0x10
   13410:	6a 00                	push   0x0
   13412:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   13418:	50                   	push   eax
   13419:	e8 36 45 01 00       	call   27954 <strtoul>
   1341e:	83 c4 10             	add    esp,0x10
   13421:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:483
    words[0]=strtoul(params[1],0,16);
   13424:	83 ec 04             	sub    esp,0x4
   13427:	6a 10                	push   0x10
   13429:	6a 00                	push   0x0
   1342b:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   13431:	05 00 02 00 00       	add    eax,0x200
   13436:	50                   	push   eax
   13437:	e8 18 45 01 00       	call   27954 <strtoul>
   1343c:	83 c4 10             	add    esp,0x10
   1343f:	89 c2                	mov    edx,eax
   13441:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13444:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/bishell.c:484
}
   13447:	90                   	nop
   13448:	c9                   	leave  
   13449:	c3                   	ret    

0001344a <writeDWords>:
writeDWords():
/home/yogi/src/os/chrisOS/src/bishell.c:487

void HIGH_CODE_SECTION writeDWords(char* cmdline)
{
   1344a:	55                   	push   ebp
   1344b:	89 e5                	mov    ebp,esp
   1344d:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:489
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13453:	83 ec 04             	sub    esp,0x4
   13456:	68 00 14 00 00       	push   0x1400
   1345b:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   13461:	50                   	push   eax
   13462:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13465:	e8 96 f0 ff ff       	call   12500 <parseParamsShell>
   1346a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:491

    uint32_t* dwords=(uint32_t*)strtoul(params[0],0,16);
   1346d:	83 ec 04             	sub    esp,0x4
   13470:	6a 10                	push   0x10
   13472:	6a 00                	push   0x0
   13474:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   1347a:	50                   	push   eax
   1347b:	e8 d4 44 01 00       	call   27954 <strtoul>
   13480:	83 c4 10             	add    esp,0x10
   13483:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:492
    dwords[0]=strtoul(params[1],0,16);
   13486:	83 ec 04             	sub    esp,0x4
   13489:	6a 10                	push   0x10
   1348b:	6a 00                	push   0x0
   1348d:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   13493:	05 00 02 00 00       	add    eax,0x200
   13498:	50                   	push   eax
   13499:	e8 b6 44 01 00       	call   27954 <strtoul>
   1349e:	83 c4 10             	add    esp,0x10
   134a1:	89 c2                	mov    edx,eax
   134a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   134a6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/bishell.c:493
}
   134a8:	90                   	nop
   134a9:	c9                   	leave  
   134aa:	c3                   	ret    

000134ab <showMapping>:
showMapping():
/home/yogi/src/os/chrisOS/src/bishell.c:496

void HIGH_CODE_SECTION showMapping(char* cmdline)
{
   134ab:	55                   	push   ebp
   134ac:	89 e5                	mov    ebp,esp
   134ae:	57                   	push   edi
   134af:	56                   	push   esi
   134b0:	53                   	push   ebx
   134b1:	81 ec 2c 14 00 00    	sub    esp,0x142c
/home/yogi/src/os/chrisOS/src/bishell.c:498
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   134b7:	83 ec 04             	sub    esp,0x4
   134ba:	68 00 14 00 00       	push   0x1400
   134bf:	8d 85 dc eb ff ff    	lea    eax,[ebp-0x1424]
   134c5:	50                   	push   eax
   134c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   134c9:	e8 32 f0 ff ff       	call   12500 <parseParamsShell>
   134ce:	83 c4 10             	add    esp,0x10
   134d1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:502

    uintptr_t CR3;
    uintptr_t lAddress;
    printk("Param count = %u\n",paramCount);
   134d4:	83 ec 08             	sub    esp,0x8
   134d7:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   134da:	68 a7 60 04 00       	push   0x460a7
   134df:	e8 77 42 01 00       	call   2775b <printk>
   134e4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:503
    if (paramCount==2)
   134e7:	83 7d e4 02          	cmp    DWORD PTR [ebp-0x1c],0x2
   134eb:	0f 85 cb 00 00 00    	jne    135bc <showMapping+0x111>
/home/yogi/src/os/chrisOS/src/bishell.c:505
    {
        CR3=strtoul(params[0],0,16);
   134f1:	83 ec 04             	sub    esp,0x4
   134f4:	6a 10                	push   0x10
   134f6:	6a 00                	push   0x0
   134f8:	8d 85 dc eb ff ff    	lea    eax,[ebp-0x1424]
   134fe:	50                   	push   eax
   134ff:	e8 50 44 01 00       	call   27954 <strtoul>
   13504:	83 c4 10             	add    esp,0x10
   13507:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/bishell.c:506
        lAddress=strtoul(params[1],0,16);
   1350a:	83 ec 04             	sub    esp,0x4
   1350d:	6a 10                	push   0x10
   1350f:	6a 00                	push   0x0
   13511:	8d 85 dc eb ff ff    	lea    eax,[ebp-0x1424]
   13517:	05 00 02 00 00       	add    eax,0x200
   1351c:	50                   	push   eax
   1351d:	e8 32 44 01 00       	call   27954 <strtoul>
   13522:	83 c4 10             	add    esp,0x10
   13525:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/bishell.c:513
                CR3,
                kPagingGet4kPDEntryAddressCR3(CR3,lAddress),
                kPagingGet4kPDEntryValueCR3(CR3,lAddress),
                kPagingGet4kPTEntryAddressCR3(CR3,lAddress),
                kPagingGet4kPTEntryValueCR3(CR3,lAddress),
                (kPagingGet4kPTEntryValueCR3(CR3,lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF));
   13528:	83 ec 08             	sub    esp,0x8
   1352b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   1352e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   13531:	e8 d2 df ff ff       	call   11508 <kPagingGet4kPTEntryValueCR3>
   13536:	83 c4 10             	add    esp,0x10
   13539:	25 00 f0 ff ff       	and    eax,0xfffff000
   1353e:	89 c2                	mov    edx,eax
   13540:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   13543:	25 ff 0f 00 00       	and    eax,0xfff
/home/yogi/src/os/chrisOS/src/bishell.c:507
    printk("Param count = %u\n",paramCount);
    if (paramCount==2)
    {
        CR3=strtoul(params[0],0,16);
        lAddress=strtoul(params[1],0,16);
        printk("\tMapping based on CR3=0x%08X\n\tPD address=0x%08X, \n\tPD value=0x%08X, \n\tPT address=0x%08X, \n\tPT value=0x%08X\n\tPhysical Address=0x%08X\n",
   13548:	09 c2                	or     edx,eax
   1354a:	89 d3                	mov    ebx,edx
   1354c:	83 ec 08             	sub    esp,0x8
   1354f:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   13552:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   13555:	e8 ae df ff ff       	call   11508 <kPagingGet4kPTEntryValueCR3>
   1355a:	83 c4 10             	add    esp,0x10
   1355d:	89 85 d4 eb ff ff    	mov    DWORD PTR [ebp-0x142c],eax
   13563:	83 ec 08             	sub    esp,0x8
   13566:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   13569:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1356c:	e8 43 df ff ff       	call   114b4 <kPagingGet4kPTEntryAddressCR3>
   13571:	83 c4 10             	add    esp,0x10
   13574:	89 c7                	mov    edi,eax
   13576:	83 ec 08             	sub    esp,0x8
   13579:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   1357c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1357f:	e8 54 de ff ff       	call   113d8 <kPagingGet4kPDEntryValueCR3>
   13584:	83 c4 10             	add    esp,0x10
   13587:	89 c6                	mov    esi,eax
   13589:	83 ec 08             	sub    esp,0x8
   1358c:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   1358f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   13592:	e8 bf de ff ff       	call   11456 <kPagingGet4kPDEntryAddressCR3>
   13597:	83 c4 10             	add    esp,0x10
   1359a:	83 ec 04             	sub    esp,0x4
   1359d:	53                   	push   ebx
   1359e:	ff b5 d4 eb ff ff    	push   DWORD PTR [ebp-0x142c]
   135a4:	57                   	push   edi
   135a5:	56                   	push   esi
   135a6:	50                   	push   eax
   135a7:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   135aa:	68 bc 60 04 00       	push   0x460bc
   135af:	e8 a7 41 01 00       	call   2775b <printk>
   135b4:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/bishell.c:520
    else
    {
        lAddress=strtoul(params[0],0,16);
        printk("\tMapping based on current CR3\n\tPD address=0x%08X, \n\tPD value=0x%08X, \n\tPT address=0x%08X, \n\tPT value=0x%08X\n\tPhysical Address=0x%08X\n",kPagingGet4kPDEntryAddress(lAddress),kPagingGet4kPDEntryValue(lAddress),kPagingGet4kPTEntryAddress(lAddress),kPagingGet4kPTEntryValue(lAddress),(kPagingGet4kPTEntryValue(lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF));
    }
}
   135b7:	e9 96 00 00 00       	jmp    13652 <showMapping+0x1a7>
/home/yogi/src/os/chrisOS/src/bishell.c:517
                kPagingGet4kPTEntryValueCR3(CR3,lAddress),
                (kPagingGet4kPTEntryValueCR3(CR3,lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF));
    }
    else
    {
        lAddress=strtoul(params[0],0,16);
   135bc:	83 ec 04             	sub    esp,0x4
   135bf:	6a 10                	push   0x10
   135c1:	6a 00                	push   0x0
   135c3:	8d 85 dc eb ff ff    	lea    eax,[ebp-0x1424]
   135c9:	50                   	push   eax
   135ca:	e8 85 43 01 00       	call   27954 <strtoul>
   135cf:	83 c4 10             	add    esp,0x10
   135d2:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/bishell.c:518
        printk("\tMapping based on current CR3\n\tPD address=0x%08X, \n\tPD value=0x%08X, \n\tPT address=0x%08X, \n\tPT value=0x%08X\n\tPhysical Address=0x%08X\n",kPagingGet4kPDEntryAddress(lAddress),kPagingGet4kPDEntryValue(lAddress),kPagingGet4kPTEntryAddress(lAddress),kPagingGet4kPTEntryValue(lAddress),(kPagingGet4kPTEntryValue(lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF));
   135d5:	83 ec 0c             	sub    esp,0xc
   135d8:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   135db:	e8 75 df ff ff       	call   11555 <kPagingGet4kPTEntryValue>
   135e0:	83 c4 10             	add    esp,0x10
   135e3:	25 00 f0 ff ff       	and    eax,0xfffff000
   135e8:	89 c2                	mov    edx,eax
   135ea:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   135ed:	25 ff 0f 00 00       	and    eax,0xfff
   135f2:	89 d3                	mov    ebx,edx
   135f4:	09 c3                	or     ebx,eax
   135f6:	83 ec 0c             	sub    esp,0xc
   135f9:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   135fc:	e8 54 df ff ff       	call   11555 <kPagingGet4kPTEntryValue>
   13601:	83 c4 10             	add    esp,0x10
   13604:	89 85 d4 eb ff ff    	mov    DWORD PTR [ebp-0x142c],eax
   1360a:	83 ec 0c             	sub    esp,0xc
   1360d:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   13610:	e8 d8 de ff ff       	call   114ed <kPagingGet4kPTEntryAddress>
   13615:	83 c4 10             	add    esp,0x10
   13618:	89 c7                	mov    edi,eax
   1361a:	83 ec 0c             	sub    esp,0xc
   1361d:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   13620:	e8 16 de ff ff       	call   1143b <kPagingGet4kPDEntryValue>
   13625:	83 c4 10             	add    esp,0x10
   13628:	89 c6                	mov    esi,eax
   1362a:	83 ec 0c             	sub    esp,0xc
   1362d:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   13630:	e8 64 de ff ff       	call   11499 <kPagingGet4kPDEntryAddress>
   13635:	83 c4 10             	add    esp,0x10
   13638:	83 ec 08             	sub    esp,0x8
   1363b:	53                   	push   ebx
   1363c:	ff b5 d4 eb ff ff    	push   DWORD PTR [ebp-0x142c]
   13642:	57                   	push   edi
   13643:	56                   	push   esi
   13644:	50                   	push   eax
   13645:	68 44 61 04 00       	push   0x46144
   1364a:	e8 0c 41 01 00       	call   2775b <printk>
   1364f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/bishell.c:520
    }
}
   13652:	90                   	nop
   13653:	8d 65 f4             	lea    esp,[ebp-0xc]
   13656:	5b                   	pop    ebx
   13657:	5e                   	pop    esi
   13658:	5f                   	pop    edi
   13659:	5d                   	pop    ebp
   1365a:	c3                   	ret    

0001365b <execInternalCommand>:
execInternalCommand():
/home/yogi/src/os/chrisOS/src/bishell.c:646
    exec (params[0],paramCount,lTemp);
    strcpy(sExecutingProgram,sbiShellProgramName);
}

void HIGH_CODE_SECTION execInternalCommand(char lCommand[256])
{
   1365b:	55                   	push   ebp
   1365c:	89 e5                	mov    ebp,esp
   1365e:	53                   	push   ebx
   1365f:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/bishell.c:647
    int i = findCommand(lCommand);
   13662:	83 ec 0c             	sub    esp,0xc
   13665:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13668:	e8 2a ee ff ff       	call   12497 <findCommand>
   1366d:	83 c4 10             	add    esp,0x10
   13670:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:649

    if(i>0)
   13673:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   13677:	7e 74                	jle    136ed <execInternalCommand+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:651
    {
        i--;
   13679:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:653
        //printk("Executing command # %u (%s)\n", i, cmds[i].name);
        command_function = cmds[i].function;
   1367d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13680:	c1 e0 04             	shl    eax,0x4
   13683:	05 08 90 02 00       	add    eax,0x29008
   13688:	8b 00                	mov    eax,DWORD PTR [eax]
   1368a:	a3 58 63 09 00       	mov    ds:0x96358,eax
/home/yogi/src/os/chrisOS/src/bishell.c:654
        command_function_p = cmds[i].function;
   1368f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13692:	c1 e0 04             	shl    eax,0x4
   13695:	05 08 90 02 00       	add    eax,0x29008
   1369a:	8b 00                	mov    eax,DWORD PTR [eax]
   1369c:	a3 a4 b4 08 00       	mov    ds:0x8b4a4,eax
/home/yogi/src/os/chrisOS/src/bishell.c:655
        if (cmds[i].paramCount==0)
   136a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   136a4:	c1 e0 04             	shl    eax,0x4
   136a7:	05 0c 90 02 00       	add    eax,0x2900c
   136ac:	8b 00                	mov    eax,DWORD PTR [eax]
   136ae:	85 c0                	test   eax,eax
   136b0:	75 09                	jne    136bb <execInternalCommand+0x60>
/home/yogi/src/os/chrisOS/src/bishell.c:656
            command_function();
   136b2:	a1 58 63 09 00       	mov    eax,ds:0x96358
   136b7:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/bishell.c:666
    }
    else
    {
        printk("Invalid command '%s' ya dummy!\n",lCommand);
    }
}
   136b9:	eb 45                	jmp    13700 <execInternalCommand+0xa5>
/home/yogi/src/os/chrisOS/src/bishell.c:659
        command_function_p = cmds[i].function;
        if (cmds[i].paramCount==0)
            command_function();
        else
        {
            command_function_p(&lCommand[strlen(cmds[i].name)+1]);  
   136bb:	8b 1d a4 b4 08 00    	mov    ebx,DWORD PTR ds:0x8b4a4
   136c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   136c4:	c1 e0 04             	shl    eax,0x4
   136c7:	05 00 90 02 00       	add    eax,0x29000
   136cc:	8b 00                	mov    eax,DWORD PTR [eax]
   136ce:	83 ec 0c             	sub    esp,0xc
   136d1:	50                   	push   eax
   136d2:	e8 55 42 01 00       	call   2792c <strlen>
   136d7:	83 c4 10             	add    esp,0x10
   136da:	8d 50 01             	lea    edx,[eax+0x1]
   136dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   136e0:	01 d0                	add    eax,edx
   136e2:	83 ec 0c             	sub    esp,0xc
   136e5:	50                   	push   eax
   136e6:	ff d3                	call   ebx
   136e8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:666
    }
    else
    {
        printk("Invalid command '%s' ya dummy!\n",lCommand);
    }
}
   136eb:	eb 13                	jmp    13700 <execInternalCommand+0xa5>
/home/yogi/src/os/chrisOS/src/bishell.c:664
            command_function_p(&lCommand[strlen(cmds[i].name)+1]);  
        }
    }
    else
    {
        printk("Invalid command '%s' ya dummy!\n",lCommand);
   136ed:	83 ec 08             	sub    esp,0x8
   136f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   136f3:	68 cc 61 04 00       	push   0x461cc
   136f8:	e8 5e 40 01 00       	call   2775b <printk>
   136fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:666
    }
}
   13700:	90                   	nop
   13701:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   13704:	c9                   	leave  
   13705:	c3                   	ret    

00013706 <biShell>:
biShell():
/home/yogi/src/os/chrisOS/src/bishell.c:669

void HIGH_CODE_SECTION biShell()
{
   13706:	55                   	push   ebp
   13707:	89 e5                	mov    ebp,esp
   13709:	53                   	push   ebx
   1370a:	81 ec 74 0b 00 00    	sub    esp,0xb74
/home/yogi/src/os/chrisOS/src/bishell.c:671
    char lCommand[256];
    unsigned lCurrKey=0;
   13710:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:672
    int lCurrKeyCount=0;
   13717:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:674
    char commands[50][50];
    int commandsPtr=0;
   1371e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:675
    int commandBuffPtr=0;
   13725:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:676
    int commandWasFromThisBufferPtr=0;
   1372c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:677
    bool stopCountingKeys=false;
   13733:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:678
    strcpy(sExecutingProgram,sbiShellProgramName);
   13737:	83 ec 08             	sub    esp,0x8
   1373a:	68 c0 91 02 00       	push   0x291c0
   1373f:	68 40 b4 08 00       	push   0x8b440
   13744:	e8 73 41 01 00       	call   278bc <strcpy>
   13749:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:679
    puts("\nWelcome to biShell ... hang a while!\n");
   1374c:	83 ec 0c             	sub    esp,0xc
   1374f:	68 ec 61 04 00       	push   0x461ec
   13754:	e8 b1 4c 00 00       	call   1840a <puts>
   13759:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:683
    
    /*******************************************************/
    //CLR 02/23/2017 - Temporary code to execute commands on boot
    char lcmd1[40]="disk 4";
   1375c:	c7 85 e0 f4 ff ff 64 	mov    DWORD PTR [ebp-0xb20],0x6b736964
   13763:	69 73 6b 
   13766:	c7 85 e4 f4 ff ff 20 	mov    DWORD PTR [ebp-0xb1c],0x3420
   1376d:	34 00 00 
   13770:	b9 00 00 00 00       	mov    ecx,0x0
   13775:	b8 20 00 00 00       	mov    eax,0x20
   1377a:	83 e0 fc             	and    eax,0xfffffffc
   1377d:	89 c2                	mov    edx,eax
   1377f:	b8 00 00 00 00       	mov    eax,0x0
   13784:	89 8c 05 e8 f4 ff ff 	mov    DWORD PTR [ebp+eax*1-0xb18],ecx
   1378b:	83 c0 04             	add    eax,0x4
   1378e:	39 d0                	cmp    eax,edx
   13790:	72 f2                	jb     13784 <biShell+0x7e>
/home/yogi/src/os/chrisOS/src/bishell.c:684
    execInternalCommand(lcmd1);
   13792:	83 ec 0c             	sub    esp,0xc
   13795:	8d 85 e0 f4 ff ff    	lea    eax,[ebp-0xb20]
   1379b:	50                   	push   eax
   1379c:	e8 ba fe ff ff       	call   1365b <execInternalCommand>
   137a1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:685
    char lcmd2[40]="part 5";
   137a4:	c7 85 b8 f4 ff ff 70 	mov    DWORD PTR [ebp-0xb48],0x74726170
   137ab:	61 72 74 
   137ae:	c7 85 bc f4 ff ff 20 	mov    DWORD PTR [ebp-0xb44],0x3520
   137b5:	35 00 00 
   137b8:	b9 00 00 00 00       	mov    ecx,0x0
   137bd:	b8 20 00 00 00       	mov    eax,0x20
   137c2:	83 e0 fc             	and    eax,0xfffffffc
   137c5:	89 c2                	mov    edx,eax
   137c7:	b8 00 00 00 00       	mov    eax,0x0
   137cc:	89 8c 05 c0 f4 ff ff 	mov    DWORD PTR [ebp+eax*1-0xb40],ecx
   137d3:	83 c0 04             	add    eax,0x4
   137d6:	39 d0                	cmp    eax,edx
   137d8:	72 f2                	jb     137cc <biShell+0xc6>
/home/yogi/src/os/chrisOS/src/bishell.c:686
    execInternalCommand(lcmd2);
   137da:	83 ec 0c             	sub    esp,0xc
   137dd:	8d 85 b8 f4 ff ff    	lea    eax,[ebp-0xb48]
   137e3:	50                   	push   eax
   137e4:	e8 72 fe ff ff       	call   1365b <execInternalCommand>
   137e9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:687
    char lcmd3[40]="exec /kernel";
   137ec:	c7 85 90 f4 ff ff 65 	mov    DWORD PTR [ebp-0xb70],0x63657865
   137f3:	78 65 63 
   137f6:	c7 85 94 f4 ff ff 20 	mov    DWORD PTR [ebp-0xb6c],0x656b2f20
   137fd:	2f 6b 65 
   13800:	c7 85 98 f4 ff ff 72 	mov    DWORD PTR [ebp-0xb68],0x6c656e72
   13807:	6e 65 6c 
   1380a:	c7 85 9c f4 ff ff 00 	mov    DWORD PTR [ebp-0xb64],0x0
   13811:	00 00 00 
   13814:	b9 00 00 00 00       	mov    ecx,0x0
   13819:	b8 18 00 00 00       	mov    eax,0x18
   1381e:	83 e0 fc             	and    eax,0xfffffffc
   13821:	89 c2                	mov    edx,eax
   13823:	b8 00 00 00 00       	mov    eax,0x0
   13828:	89 8c 05 a0 f4 ff ff 	mov    DWORD PTR [ebp+eax*1-0xb60],ecx
   1382f:	83 c0 04             	add    eax,0x4
   13832:	39 d0                	cmp    eax,edx
   13834:	72 f2                	jb     13828 <biShell+0x122>
/home/yogi/src/os/chrisOS/src/bishell.c:688
    execInternalCommand(lcmd3);
   13836:	83 ec 0c             	sub    esp,0xc
   13839:	8d 85 90 f4 ff ff    	lea    eax,[ebp-0xb70]
   1383f:	50                   	push   eax
   13840:	e8 16 fe ff ff       	call   1365b <execInternalCommand>
   13845:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:695
    
    
    while (1==1)
    {
getACommand:
        lCurrKey=0;
   13848:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:696
        lCurrKeyCount=0;
   1384f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:697
        memset(lCommand,0,256);
   13856:	83 ec 04             	sub    esp,0x4
   13859:	68 00 01 00 00       	push   0x100
   1385e:	6a 00                	push   0x0
   13860:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13866:	50                   	push   eax
   13867:	e8 9d 1d 01 00       	call   25609 <memset>
   1386c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:698
        printk("%s> ",sExecutingProgram);
   1386f:	83 ec 08             	sub    esp,0x8
   13872:	68 40 b4 08 00       	push   0x8b440
   13877:	68 13 62 04 00       	push   0x46213
   1387c:	e8 da 3e 01 00       	call   2775b <printk>
   13881:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:700
getAKey:
        lCurrKey=0;
   13884:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:701
        while(lCurrKey==0)
   1388b:	eb 0b                	jmp    13898 <biShell+0x192>
/home/yogi/src/os/chrisOS/src/bishell.c:703
        {
            lCurrKey=waitForKeyboardKey();
   1388d:	e8 cd d9 ff ff       	call   1125f <waitForKeyboardKey>
   13892:	0f be c0             	movsx  eax,al
   13895:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:701
        lCurrKeyCount=0;
        memset(lCommand,0,256);
        printk("%s> ",sExecutingProgram);
getAKey:
        lCurrKey=0;
        while(lCurrKey==0)
   13898:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1389c:	74 ef                	je     1388d <biShell+0x187>
/home/yogi/src/os/chrisOS/src/bishell.c:706
        {
            lCurrKey=waitForKeyboardKey();
        }
        //printk("key='%08X'",lCurrKey);
        if(lCurrKey==0xc8) //up
   1389e:	81 7d f4 c8 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xc8
   138a5:	0f 85 8f 00 00 00    	jne    1393a <biShell+0x234>
/home/yogi/src/os/chrisOS/src/bishell.c:708
        {
            if (commandBuffPtr>=0)
   138ab:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   138af:	78 d3                	js     13884 <biShell+0x17e>
/home/yogi/src/os/chrisOS/src/bishell.c:710
            {
                int lTemp=cursorGetPosY();
   138b1:	e8 c5 4a 00 00       	call   1837b <cursorGetPosY>
   138b6:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/chrisOS/src/bishell.c:711
                strcpy(lCommand,commands[--commandBuffPtr]);
   138b9:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
   138bd:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   138c3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   138c6:	6b c0 32             	imul   eax,eax,0x32
   138c9:	01 d0                	add    eax,edx
   138cb:	83 ec 08             	sub    esp,0x8
   138ce:	50                   	push   eax
   138cf:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   138d5:	50                   	push   eax
   138d6:	e8 e1 3f 01 00       	call   278bc <strcpy>
   138db:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:712
                commandWasFromThisBufferPtr=commandBuffPtr;
   138de:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   138e1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:713
                cursorMoveTo(4,lTemp);
   138e4:	83 ec 08             	sub    esp,0x8
   138e7:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
   138ea:	6a 04                	push   0x4
   138ec:	e8 ea 49 00 00       	call   182db <cursorMoveTo>
   138f1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:714
                printk("%s                                                                                ",lCommand);
   138f4:	83 ec 08             	sub    esp,0x8
   138f7:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   138fd:	50                   	push   eax
   138fe:	68 18 62 04 00       	push   0x46218
   13903:	e8 53 3e 01 00       	call   2775b <printk>
   13908:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:715
                lCurrKeyCount=strlen(lCommand);
   1390b:	83 ec 0c             	sub    esp,0xc
   1390e:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13914:	50                   	push   eax
   13915:	e8 12 40 01 00       	call   2792c <strlen>
   1391a:	83 c4 10             	add    esp,0x10
   1391d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:716
                cursorMoveTo(4+lCurrKeyCount,lTemp);
   13920:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13923:	83 c0 04             	add    eax,0x4
   13926:	83 ec 08             	sub    esp,0x8
   13929:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
   1392c:	50                   	push   eax
   1392d:	e8 a9 49 00 00       	call   182db <cursorMoveTo>
   13932:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:717
                goto getAKey;
   13935:	e9 4a ff ff ff       	jmp    13884 <biShell+0x17e>
/home/yogi/src/os/chrisOS/src/bishell.c:722
            }
            else
                goto getAKey;
        }
        if (lCurrKey==0xD0)  //down
   1393a:	81 7d f4 d0 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xd0
   13941:	0f 85 95 00 00 00    	jne    139dc <biShell+0x2d6>
/home/yogi/src/os/chrisOS/src/bishell.c:724
        {
            if (commandBuffPtr<=commandsPtr)
   13947:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1394a:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   1394d:	0f 8f 31 ff ff ff    	jg     13884 <biShell+0x17e>
/home/yogi/src/os/chrisOS/src/bishell.c:726
            {
                int lTemp=cursorGetPosY();
   13953:	e8 23 4a 00 00       	call   1837b <cursorGetPosY>
   13958:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/chrisOS/src/bishell.c:727
                strcpy(lCommand,commands[++commandBuffPtr]);
   1395b:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
   1395f:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   13965:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13968:	6b c0 32             	imul   eax,eax,0x32
   1396b:	01 d0                	add    eax,edx
   1396d:	83 ec 08             	sub    esp,0x8
   13970:	50                   	push   eax
   13971:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13977:	50                   	push   eax
   13978:	e8 3f 3f 01 00       	call   278bc <strcpy>
   1397d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:728
                commandWasFromThisBufferPtr=commandBuffPtr;
   13980:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13983:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:729
                cursorMoveTo(4,lTemp);
   13986:	83 ec 08             	sub    esp,0x8
   13989:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   1398c:	6a 04                	push   0x4
   1398e:	e8 48 49 00 00       	call   182db <cursorMoveTo>
   13993:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:730
                printk("%s                                                                                ",lCommand);
   13996:	83 ec 08             	sub    esp,0x8
   13999:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   1399f:	50                   	push   eax
   139a0:	68 18 62 04 00       	push   0x46218
   139a5:	e8 b1 3d 01 00       	call   2775b <printk>
   139aa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:731
                lCurrKeyCount=strlen(lCommand);
   139ad:	83 ec 0c             	sub    esp,0xc
   139b0:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   139b6:	50                   	push   eax
   139b7:	e8 70 3f 01 00       	call   2792c <strlen>
   139bc:	83 c4 10             	add    esp,0x10
   139bf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:732
                cursorMoveTo(4+lCurrKeyCount,lTemp);
   139c2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   139c5:	83 c0 04             	add    eax,0x4
   139c8:	83 ec 08             	sub    esp,0x8
   139cb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   139ce:	50                   	push   eax
   139cf:	e8 07 49 00 00       	call   182db <cursorMoveTo>
   139d4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:733
                goto getAKey;
   139d7:	e9 a8 fe ff ff       	jmp    13884 <biShell+0x17e>
/home/yogi/src/os/chrisOS/src/bishell.c:739
            }
            else
                goto getAKey;
            
        }   
        if (lCurrKey==0xcb) //left
   139dc:	81 7d f4 cb 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xcb
   139e3:	75 33                	jne    13a18 <biShell+0x312>
/home/yogi/src/os/chrisOS/src/bishell.c:741
        {
            if (cursorGetPosX()>4)
   139e5:	e8 4d 49 00 00       	call   18337 <cursorGetPosX>
   139ea:	83 f8 04             	cmp    eax,0x4
   139ed:	0f 8e 91 fe ff ff    	jle    13884 <biShell+0x17e>
/home/yogi/src/os/chrisOS/src/bishell.c:743
            {
                cursorMoveTo(cursorGetPosX()-1,cursorGetPosY());
   139f3:	e8 83 49 00 00       	call   1837b <cursorGetPosY>
   139f8:	89 c3                	mov    ebx,eax
   139fa:	e8 38 49 00 00       	call   18337 <cursorGetPosX>
   139ff:	83 e8 01             	sub    eax,0x1
   13a02:	83 ec 08             	sub    esp,0x8
   13a05:	53                   	push   ebx
   13a06:	50                   	push   eax
   13a07:	e8 cf 48 00 00       	call   182db <cursorMoveTo>
   13a0c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:744
                stopCountingKeys=true;
   13a0f:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:746
            }
            goto getAKey;
   13a13:	e9 6c fe ff ff       	jmp    13884 <biShell+0x17e>
/home/yogi/src/os/chrisOS/src/bishell.c:748
        }
        if (lCurrKey=='\b')
   13a18:	83 7d f4 08          	cmp    DWORD PTR [ebp-0xc],0x8
   13a1c:	75 61                	jne    13a7f <biShell+0x379>
/home/yogi/src/os/chrisOS/src/bishell.c:750
        {
            if (lCurrKeyCount>=0)
   13a1e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   13a22:	0f 88 5c fe ff ff    	js     13884 <biShell+0x17e>
/home/yogi/src/os/chrisOS/src/bishell.c:752
            {
                int lTemp=cursorGetPosY();
   13a28:	e8 4e 49 00 00       	call   1837b <cursorGetPosY>
   13a2d:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:754

                lCommand[lCurrKeyCount]=' ';
   13a30:	8d 95 cc fe ff ff    	lea    edx,[ebp-0x134]
   13a36:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13a39:	01 d0                	add    eax,edx
   13a3b:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/chrisOS/src/bishell.c:755
                lCurrKeyCount--;
   13a3e:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:756
                cursorMoveTo(cursorGetPosX()-1,lTemp);
   13a42:	e8 f0 48 00 00       	call   18337 <cursorGetPosX>
   13a47:	83 e8 01             	sub    eax,0x1
   13a4a:	83 ec 08             	sub    esp,0x8
   13a4d:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   13a50:	50                   	push   eax
   13a51:	e8 85 48 00 00       	call   182db <cursorMoveTo>
   13a56:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:757
                putc(' ');
   13a59:	83 ec 0c             	sub    esp,0xc
   13a5c:	6a 20                	push   0x20
   13a5e:	e8 d7 49 00 00       	call   1843a <putc>
   13a63:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:758
                cursorMoveTo(cursorGetPosX()-1,lTemp);
   13a66:	e8 cc 48 00 00       	call   18337 <cursorGetPosX>
   13a6b:	83 e8 01             	sub    eax,0x1
   13a6e:	83 ec 08             	sub    esp,0x8
   13a71:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   13a74:	50                   	push   eax
   13a75:	e8 61 48 00 00       	call   182db <cursorMoveTo>
   13a7a:	83 c4 10             	add    esp,0x10
   13a7d:	eb 61                	jmp    13ae0 <biShell+0x3da>
/home/yogi/src/os/chrisOS/src/bishell.c:763
            }
            else
                goto getAKey;
        }
        else if (lCurrKey==0xa)
   13a7f:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   13a83:	75 30                	jne    13ab5 <biShell+0x3af>
/home/yogi/src/os/chrisOS/src/bishell.c:765
        {
            putc(lCurrKey);
   13a85:	83 ec 0c             	sub    esp,0xc
   13a88:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   13a8b:	e8 aa 49 00 00       	call   1843a <putc>
   13a90:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:766
            lCommand[lCurrKeyCount++]='\0';
   13a93:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13a96:	8d 50 01             	lea    edx,[eax+0x1]
   13a99:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   13a9c:	c6 84 05 cc fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x134],0x0
   13aa3:	00 
/home/yogi/src/os/chrisOS/src/bishell.c:767
            goto doneGettingKeys;
   13aa4:	90                   	nop
/home/yogi/src/os/chrisOS/src/bishell.c:780
        }
        stopCountingKeys=false;
        goto getAKey;
//        gets(lCommand,50);
doneGettingKeys:
        if (lCommand[0]==0x0)
   13aa5:	0f b6 85 cc fe ff ff 	movzx  eax,BYTE PTR [ebp-0x134]
   13aac:	84 c0                	test   al,al
   13aae:	75 39                	jne    13ae9 <biShell+0x3e3>
   13ab0:	e9 93 fd ff ff       	jmp    13848 <biShell+0x142>
/home/yogi/src/os/chrisOS/src/bishell.c:771
            lCommand[lCurrKeyCount++]='\0';
            goto doneGettingKeys;
        }
        else
        {
            lCommand[lCurrKeyCount++]=lCurrKey;
   13ab5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13ab8:	8d 50 01             	lea    edx,[eax+0x1]
   13abb:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   13abe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   13ac1:	88 94 05 cc fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x134],dl
/home/yogi/src/os/chrisOS/src/bishell.c:772
            if (stopCountingKeys)
   13ac8:	80 7d e3 00          	cmp    BYTE PTR [ebp-0x1d],0x0
   13acc:	74 04                	je     13ad2 <biShell+0x3cc>
/home/yogi/src/os/chrisOS/src/bishell.c:773
                    lCurrKeyCount--;
   13ace:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:774
            putc(lCurrKey);
   13ad2:	83 ec 0c             	sub    esp,0xc
   13ad5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   13ad8:	e8 5d 49 00 00       	call   1843a <putc>
   13add:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:776
        }
        stopCountingKeys=false;
   13ae0:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:777
        goto getAKey;
   13ae4:	e9 9b fd ff ff       	jmp    13884 <biShell+0x17e>
/home/yogi/src/os/chrisOS/src/bishell.c:782
//        gets(lCommand,50);
doneGettingKeys:
        if (lCommand[0]==0x0)
            goto getACommand;
        int i = findCommand(lCommand);
   13ae9:	83 ec 0c             	sub    esp,0xc
   13aec:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13af2:	50                   	push   eax
   13af3:	e8 9f e9 ff ff       	call   12497 <findCommand>
   13af8:	83 c4 10             	add    esp,0x10
   13afb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/bishell.c:784

        execInternalCommand(lCommand);
   13afe:	83 ec 0c             	sub    esp,0xc
   13b01:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13b07:	50                   	push   eax
   13b08:	e8 4e fb ff ff       	call   1365b <execInternalCommand>
   13b0d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:785
        if(i>0)
   13b10:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
   13b14:	0f 8e 87 00 00 00    	jle    13ba1 <biShell+0x49b>
/home/yogi/src/os/chrisOS/src/bishell.c:787
        {
            i--;
   13b1a:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:789
            //printk("Executing command # %u (%s)\n", i, cmds[i].name);
            if (commandWasFromThisBufferPtr)
   13b1e:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   13b22:	74 4b                	je     13b6f <biShell+0x469>
/home/yogi/src/os/chrisOS/src/bishell.c:791
            {
                for (int cnt=commandWasFromThisBufferPtr;cnt<=commandsPtr;cnt++)
   13b24:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   13b27:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
   13b2a:	eb 30                	jmp    13b5c <biShell+0x456>
/home/yogi/src/os/chrisOS/src/bishell.c:792 (discriminator 3)
                    strcpy(commands[cnt],commands[cnt+1]);
   13b2c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   13b2f:	83 c0 01             	add    eax,0x1
   13b32:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   13b38:	6b c0 32             	imul   eax,eax,0x32
   13b3b:	01 c2                	add    edx,eax
   13b3d:	8d 8d 08 f5 ff ff    	lea    ecx,[ebp-0xaf8]
   13b43:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   13b46:	6b c0 32             	imul   eax,eax,0x32
   13b49:	01 c8                	add    eax,ecx
   13b4b:	83 ec 08             	sub    esp,0x8
   13b4e:	52                   	push   edx
   13b4f:	50                   	push   eax
   13b50:	e8 67 3d 01 00       	call   278bc <strcpy>
   13b55:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:791 (discriminator 3)
        {
            i--;
            //printk("Executing command # %u (%s)\n", i, cmds[i].name);
            if (commandWasFromThisBufferPtr)
            {
                for (int cnt=commandWasFromThisBufferPtr;cnt<=commandsPtr;cnt++)
   13b58:	83 45 dc 01          	add    DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:791 (discriminator 1)
   13b5c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   13b5f:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   13b62:	7e c8                	jle    13b2c <biShell+0x426>
/home/yogi/src/os/chrisOS/src/bishell.c:793
                    strcpy(commands[cnt],commands[cnt+1]);
                commandWasFromThisBufferPtr=0;
   13b64:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:794
                commandsPtr--;
   13b6b:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:796
            }
            strcpy(commands[commandsPtr++],lCommand);
   13b6f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13b72:	8d 50 01             	lea    edx,[eax+0x1]
   13b75:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   13b78:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   13b7e:	6b c0 32             	imul   eax,eax,0x32
   13b81:	01 c2                	add    edx,eax
   13b83:	83 ec 08             	sub    esp,0x8
   13b86:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13b8c:	50                   	push   eax
   13b8d:	52                   	push   edx
   13b8e:	e8 29 3d 01 00       	call   278bc <strcpy>
   13b93:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:797
            commandBuffPtr=commandsPtr;
   13b96:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13b99:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   13b9c:	e9 a7 fc ff ff       	jmp    13848 <biShell+0x142>
/home/yogi/src/os/chrisOS/src/bishell.c:801
        }
        else
        {
            printk("Invalid command '%s' ya dummy!\n",lCommand);
   13ba1:	83 ec 08             	sub    esp,0x8
   13ba4:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13baa:	50                   	push   eax
   13bab:	68 cc 61 04 00       	push   0x461cc
   13bb0:	e8 a6 3b 01 00       	call   2775b <printk>
   13bb5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:803
        }
    }
   13bb8:	e9 8b fc ff ff       	jmp    13848 <biShell+0x142>
   13bbd:	66 90                	xchg   ax,ax
   13bbf:	90                   	nop

00013bc0 <AhciIssueCmd>:
AhciIssueCmd():
/home/yogi/src/os/chrisOS/src/block/ahci.c:38


// Check device type

int AhciIssueCmd(volatile HBA_PORT *port,int cmdslot) 
{
   13bc0:	55                   	push   ebp
   13bc1:	89 e5                	mov    ebp,esp
   13bc3:	53                   	push   ebx
   13bc4:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/block/ahci.c:40
    unsigned i;
    int delay = 0;
   13bc7:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:41
    int Status = true;
   13bce:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:43

    port->cmd.ST=0;
   13bd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13bd8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13bdb:	83 e2 fe             	and    edx,0xfffffffe
   13bde:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:45
    //make sure bit0 Start set to enable process cmd list
    if (!(port->cmd.ST)) {
   13be1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13be4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   13be7:	83 e0 01             	and    eax,0x1
   13bea:	84 c0                	test   al,al
   13bec:	75 2d                	jne    13c1b <AhciIssueCmd+0x5b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:46
        printd(DEBUG_AHCI, "AHCI: ahciIssueCmd - ST was cleared, setting FRE and STE\n");
   13bee:	83 ec 08             	sub    esp,0x8
   13bf1:	68 80 63 04 00       	push   0x46380
   13bf6:	68 00 20 00 00       	push   0x2000
   13bfb:	e8 7b 3b 01 00       	call   2777b <printd>
   13c00:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:47
        port->cmd.FRE = 1;
   13c03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c06:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13c09:	83 ca 10             	or     edx,0x10
   13c0c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:48
        port->cmd.ST = 1;
   13c0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c12:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13c15:	83 ca 01             	or     edx,0x1
   13c18:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:52
    }

    //if err status or busy, reset PxCMD.
    if ((port->pxis.TFES || port->pxis.HBFS || port->pxis.HBDS || port->pxis.IFS || port->pxis.INFS || port->pxis.OFS || port->pxis.IPMS) || (port->tfd.BSY || port->tfd.BSY)) {
   13c1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c1e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13c21:	c1 e8 1e             	shr    eax,0x1e
   13c24:	83 e0 01             	and    eax,0x1
   13c27:	84 c0                	test   al,al
   13c29:	0f 85 84 00 00 00    	jne    13cb3 <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 1)
   13c2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c32:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13c35:	c1 e8 1d             	shr    eax,0x1d
   13c38:	83 e0 01             	and    eax,0x1
   13c3b:	84 c0                	test   al,al
   13c3d:	75 74                	jne    13cb3 <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 2)
   13c3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c42:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13c45:	c1 e8 1c             	shr    eax,0x1c
   13c48:	83 e0 01             	and    eax,0x1
   13c4b:	84 c0                	test   al,al
   13c4d:	75 64                	jne    13cb3 <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 3)
   13c4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c52:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13c55:	c1 e8 1b             	shr    eax,0x1b
   13c58:	83 e0 01             	and    eax,0x1
   13c5b:	84 c0                	test   al,al
   13c5d:	75 54                	jne    13cb3 <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 4)
   13c5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c62:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13c65:	c1 e8 1a             	shr    eax,0x1a
   13c68:	83 e0 01             	and    eax,0x1
   13c6b:	84 c0                	test   al,al
   13c6d:	75 44                	jne    13cb3 <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 5)
   13c6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c72:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13c75:	c1 e8 18             	shr    eax,0x18
   13c78:	83 e0 01             	and    eax,0x1
   13c7b:	84 c0                	test   al,al
   13c7d:	75 34                	jne    13cb3 <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 6)
   13c7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c82:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13c85:	c1 e8 17             	shr    eax,0x17
   13c88:	83 e0 01             	and    eax,0x1
   13c8b:	84 c0                	test   al,al
   13c8d:	75 24                	jne    13cb3 <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 7)
   13c8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c92:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13c95:	c1 e8 07             	shr    eax,0x7
   13c98:	83 e0 01             	and    eax,0x1
   13c9b:	84 c0                	test   al,al
   13c9d:	75 14                	jne    13cb3 <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 8)
   13c9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13ca2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13ca5:	c1 e8 07             	shr    eax,0x7
   13ca8:	83 e0 01             	and    eax,0x1
   13cab:	84 c0                	test   al,al
   13cad:	0f 84 8e 00 00 00    	je     13d41 <AhciIssueCmd+0x181>
/home/yogi/src/os/chrisOS/src/block/ahci.c:53
        printd(DEBUG_AHCI, "AHCI: ahciIssueCmd - clearing error/busy\n");
   13cb3:	83 ec 08             	sub    esp,0x8
   13cb6:	68 bc 63 04 00       	push   0x463bc
   13cbb:	68 00 20 00 00       	push   0x2000
   13cc0:	e8 b6 3a 01 00       	call   2777b <printd>
   13cc5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:54
        port->cmd.ST &= ~port->cmd.ST;
   13cc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13ccb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   13cce:	83 e0 01             	and    eax,0x1
   13cd1:	0f b6 c0             	movzx  eax,al
   13cd4:	f7 d0                	not    eax
   13cd6:	89 c2                	mov    edx,eax
   13cd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13cdb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   13cde:	83 e0 01             	and    eax,0x1
   13ce1:	89 c1                	mov    ecx,eax
   13ce3:	89 d0                	mov    eax,edx
   13ce5:	21 c8                	and    eax,ecx
   13ce7:	83 e0 01             	and    eax,0x1
   13cea:	89 c2                	mov    edx,eax
   13cec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13cef:	0f b6 d2             	movzx  edx,dl
   13cf2:	89 d1                	mov    ecx,edx
   13cf4:	83 e1 01             	and    ecx,0x1
   13cf7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13cfa:	83 e2 fe             	and    edx,0xfffffffe
   13cfd:	09 ca                	or     edx,ecx
   13cff:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:56
        //Start|Command List Override|FIS Receive Enable
        port->cmd.CLO=1;
   13d02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d05:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13d08:	83 ca 08             	or     edx,0x8
   13d0b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:57
        while (port->cmd.CLO);
   13d0e:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:57 (discriminator 1)
   13d0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d12:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   13d15:	c1 e8 03             	shr    eax,0x3
   13d18:	83 e0 01             	and    eax,0x1
   13d1b:	84 c0                	test   al,al
   13d1d:	75 f0                	jne    13d0f <AhciIssueCmd+0x14f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:58
        port->cmd.ST = 1;
   13d1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d22:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13d25:	83 ca 01             	or     edx,0x1
   13d28:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:59
        port->cmd.FRE = 1;
   13d2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d2e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13d31:	83 ca 10             	or     edx,0x10
   13d34:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:60
        port->pxis.AsUlong = 0;
   13d37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d3a:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:64
    }

    //issue cmd
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI before issuing command: 0x%08X\n", port->ci);
   13d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d44:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   13d47:	83 ec 04             	sub    esp,0x4
   13d4a:	50                   	push   eax
   13d4b:	68 e8 63 04 00       	push   0x463e8
   13d50:	68 00 20 00 00       	push   0x2000
   13d55:	e8 21 3a 01 00       	call   2777b <printd>
   13d5a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:65
    port->ci |= (1 << cmdslot);
   13d5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d60:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   13d63:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   13d66:	bb 01 00 00 00       	mov    ebx,0x1
   13d6b:	89 c1                	mov    ecx,eax
   13d6d:	d3 e3                	shl    ebx,cl
   13d6f:	89 d8                	mov    eax,ebx
   13d71:	09 c2                	or     edx,eax
   13d73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d76:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:66
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI after issuing command: 0x%08X\n", port->ci);
   13d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d7c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   13d7f:	83 ec 04             	sub    esp,0x4
   13d82:	50                   	push   eax
   13d83:	68 1c 64 04 00       	push   0x4641c
   13d88:	68 00 20 00 00       	push   0x2000
   13d8d:	e8 e9 39 01 00       	call   2777b <printd>
   13d92:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:69

    //wait cmd
    for (i = 0; i < 100; i++) {
   13d95:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   13d9c:	eb 21                	jmp    13dbf <AhciIssueCmd+0x1ff>
/home/yogi/src/os/chrisOS/src/block/ahci.c:70
        wait(50);
   13d9e:	83 ec 0c             	sub    esp,0xc
   13da1:	6a 32                	push   0x32
   13da3:	e8 f2 4b 01 00       	call   2899a <wait>
   13da8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:71
        if (!port->tfd.BSY)
   13dab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13dae:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13db1:	c1 e8 07             	shr    eax,0x7
   13db4:	83 e0 01             	and    eax,0x1
   13db7:	84 c0                	test   al,al
   13db9:	74 0c                	je     13dc7 <AhciIssueCmd+0x207>
/home/yogi/src/os/chrisOS/src/block/ahci.c:69 (discriminator 2)
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI before issuing command: 0x%08X\n", port->ci);
    port->ci |= (1 << cmdslot);
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI after issuing command: 0x%08X\n", port->ci);

    //wait cmd
    for (i = 0; i < 100; i++) {
   13dbb:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:69 (discriminator 1)
   13dbf:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
   13dc3:	76 d9                	jbe    13d9e <AhciIssueCmd+0x1de>
   13dc5:	eb 01                	jmp    13dc8 <AhciIssueCmd+0x208>
/home/yogi/src/os/chrisOS/src/block/ahci.c:72
        wait(50);
        if (!port->tfd.BSY)
            break;
   13dc7:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:76
    }

    // Wait for completion
    delay = 5000;
   13dc8:	c7 45 f0 88 13 00 00 	mov    DWORD PTR [ebp-0x10],0x1388
/home/yogi/src/os/chrisOS/src/block/ahci.c:77
    while (delay > 0) {
   13dcf:	eb 57                	jmp    13e28 <AhciIssueCmd+0x268>
/home/yogi/src/os/chrisOS/src/block/ahci.c:79

        if ((port->ci & (1 << cmdslot)) == 0)
   13dd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13dd4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   13dd7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   13dda:	bb 01 00 00 00       	mov    ebx,0x1
   13ddf:	89 c1                	mov    ecx,eax
   13de1:	d3 e3                	shl    ebx,cl
   13de3:	89 d8                	mov    eax,ebx
   13de5:	21 d0                	and    eax,edx
   13de7:	85 c0                	test   eax,eax
   13de9:	74 45                	je     13e30 <AhciIssueCmd+0x270>
/home/yogi/src/os/chrisOS/src/block/ahci.c:83
            break;
        // In some longer duration reads, it may be helpful to spin on the DPS bit 
        // in the PxIS port field as well (1 << 5)
        if (port->pxis.TFES) // Task file error
   13deb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13dee:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13df1:	c1 e8 1e             	shr    eax,0x1e
   13df4:	83 e0 01             	and    eax,0x1
   13df7:	84 c0                	test   al,al
   13df9:	74 1c                	je     13e17 <AhciIssueCmd+0x257>
/home/yogi/src/os/chrisOS/src/block/ahci.c:85
        {
            printd(DEBUG_AHCI, "AHCI: Read disk error\n");
   13dfb:	83 ec 08             	sub    esp,0x8
   13dfe:	68 4f 64 04 00       	push   0x4644f
   13e03:	68 00 20 00 00       	push   0x2000
   13e08:	e8 6e 39 01 00       	call   2777b <printd>
   13e0d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:86
            return -1;
   13e10:	b8 ff ff ff ff       	mov    eax,0xffffffff
   13e15:	eb 37                	jmp    13e4e <AhciIssueCmd+0x28e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:88
        }
        wait(20);
   13e17:	83 ec 0c             	sub    esp,0xc
   13e1a:	6a 14                	push   0x14
   13e1c:	e8 79 4b 01 00       	call   2899a <wait>
   13e21:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:89
        delay -= 1;
   13e24:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:77
            break;
    }

    // Wait for completion
    delay = 5000;
    while (delay > 0) {
   13e28:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   13e2c:	7f a3                	jg     13dd1 <AhciIssueCmd+0x211>
   13e2e:	eb 01                	jmp    13e31 <AhciIssueCmd+0x271>
/home/yogi/src/os/chrisOS/src/block/ahci.c:80

        if ((port->ci & (1 << cmdslot)) == 0)
            break;
   13e30:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:92
        }
        wait(20);
        delay -= 1;
    }

    if (port->tfd.ERR || delay == 0)
   13e31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e34:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13e37:	83 e0 01             	and    eax,0x1
   13e3a:	84 c0                	test   al,al
   13e3c:	75 06                	jne    13e44 <AhciIssueCmd+0x284>
/home/yogi/src/os/chrisOS/src/block/ahci.c:92 (discriminator 1)
   13e3e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   13e42:	75 07                	jne    13e4b <AhciIssueCmd+0x28b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:93
        Status = -2;
   13e44:	c7 45 ec fe ff ff ff 	mov    DWORD PTR [ebp-0x14],0xfffffffe
/home/yogi/src/os/chrisOS/src/block/ahci.c:95

    return Status;
   13e4b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/chrisOS/src/block/ahci.c:96
}
   13e4e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   13e51:	c9                   	leave  
   13e52:	c3                   	ret    

00013e53 <check_type>:
check_type():
/home/yogi/src/os/chrisOS/src/block/ahci.c:98

int check_type(volatile HBA_PORT *port, uint32_t* sig) {
   13e53:	55                   	push   ebp
   13e54:	89 e5                	mov    ebp,esp
   13e56:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:99
    uint32_t ssts = port->ssts;
   13e59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e5c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13e5f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:100
    uint8_t ipm = (ssts >> 8) & 0x0F;
   13e62:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   13e65:	c1 e8 08             	shr    eax,0x8
   13e68:	83 e0 0f             	and    eax,0xf
   13e6b:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/block/ahci.c:101
    uint8_t det = ssts & 0x0F;
   13e6e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   13e71:	83 e0 0f             	and    eax,0xf
   13e74:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/chrisOS/src/block/ahci.c:103

    if (det != HBA_PORT_DET_PRESENT) // Check drive status
   13e77:	80 7d fa 03          	cmp    BYTE PTR [ebp-0x6],0x3
   13e7b:	74 07                	je     13e84 <check_type+0x31>
/home/yogi/src/os/chrisOS/src/block/ahci.c:104
        return AHCI_DEV_NULL;
   13e7d:	b8 00 00 00 00       	mov    eax,0x0
   13e82:	eb 64                	jmp    13ee8 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:105
    if (ipm != HBA_PORT_IPM_ACTIVE)
   13e84:	80 7d fb 01          	cmp    BYTE PTR [ebp-0x5],0x1
   13e88:	74 07                	je     13e91 <check_type+0x3e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:106
        return AHCI_DEV_NULL;
   13e8a:	b8 00 00 00 00       	mov    eax,0x0
   13e8f:	eb 57                	jmp    13ee8 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:108

    *sig = port->sig;
   13e91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e94:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
   13e97:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   13e9a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:109
    switch (port->sig) {
   13e9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e9f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   13ea2:	3d 01 01 3c c3       	cmp    eax,0xc33c0101
   13ea7:	74 25                	je     13ece <check_type+0x7b>
   13ea9:	3d 01 01 3c c3       	cmp    eax,0xc33c0101
   13eae:	77 09                	ja     13eb9 <check_type+0x66>
   13eb0:	3d 01 01 69 96       	cmp    eax,0x96690101
   13eb5:	74 1e                	je     13ed5 <check_type+0x82>
   13eb7:	eb 2a                	jmp    13ee3 <check_type+0x90>
   13eb9:	3d 00 00 14 eb       	cmp    eax,0xeb140000
   13ebe:	74 1c                	je     13edc <check_type+0x89>
   13ec0:	3d 01 01 14 eb       	cmp    eax,0xeb140101
   13ec5:	75 1c                	jne    13ee3 <check_type+0x90>
/home/yogi/src/os/chrisOS/src/block/ahci.c:111
        case SATA_SIG_ATAPI:
            return AHCI_DEV_SATAPI;
   13ec7:	b8 04 00 00 00       	mov    eax,0x4
   13ecc:	eb 1a                	jmp    13ee8 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:113
        case SATA_SIG_SEMB:
            return AHCI_DEV_SEMB;
   13ece:	b8 02 00 00 00       	mov    eax,0x2
   13ed3:	eb 13                	jmp    13ee8 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:115
        case SATA_SIG_PM:
            return AHCI_DEV_PM;
   13ed5:	b8 03 00 00 00       	mov    eax,0x3
   13eda:	eb 0c                	jmp    13ee8 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:117
        case SATA_SIG_ATAPI & 0xFFFF0000:
            return AHCI_DEV_SATAPI;
   13edc:	b8 04 00 00 00       	mov    eax,0x4
   13ee1:	eb 05                	jmp    13ee8 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:119
        default:
            return AHCI_DEV_SATA;
   13ee3:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:121
    }
}
   13ee8:	c9                   	leave  
   13ee9:	c3                   	ret    

00013eea <ahciEnablePortMultiplier>:
ahciEnablePortMultiplier():
/home/yogi/src/os/chrisOS/src/block/ahci.c:123

void ahciEnablePortMultiplier(volatile HBA_PORT* port) {
   13eea:	55                   	push   ebp
   13eeb:	89 e5                	mov    ebp,esp
   13eed:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/ahci.c:124
    HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
   13ef0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13ef3:	8b 00                	mov    eax,DWORD PTR [eax]
   13ef5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:126

    port->cmd.ST = 0;
   13ef8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13efb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13efe:	83 e2 fe             	and    edx,0xfffffffe
   13f01:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:130

    //waitForPortIdle(port);

    printd(DEBUG_AHCI, "AHCI: EnablePortMultipler: port=0x%08X\n", port);
   13f04:	83 ec 04             	sub    esp,0x4
   13f07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13f0a:	68 68 64 04 00       	push   0x46468
   13f0f:	68 00 20 00 00       	push   0x2000
   13f14:	e8 62 38 01 00       	call   2777b <printd>
   13f19:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:131
    int slot = find_cmdslot(port);
   13f1c:	83 ec 0c             	sub    esp,0xc
   13f1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13f22:	e8 6a 13 00 00       	call   15291 <find_cmdslot>
   13f27:	83 c4 10             	add    esp,0x10
   13f2a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:132
    if (slot == -1)
   13f2d:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   13f31:	0f 84 94 02 00 00    	je     141cb <ahciEnablePortMultiplier+0x2e1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:134
        return;
    port->ie.AsUlong = 0; //xffffffff;
   13f37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13f3a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:135
    cmdheader += slot;
   13f41:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13f44:	c1 e0 05             	shl    eax,0x5
   13f47:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:136
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   13f4a:	83 ec 04             	sub    esp,0x4
   13f4d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   13f50:	68 90 64 04 00       	push   0x46490
   13f55:	68 00 20 00 00       	push   0x2000
   13f5a:	e8 1c 38 01 00       	call   2777b <printd>
   13f5f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:137
    cmdheader->prdtl = 1;
   13f62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13f65:	66 c7 40 02 01 00    	mov    WORD PTR [eax+0x2],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:138
    cmdheader->cfl = sizeof (FIS_REG_H2D) / sizeof (uint32_t);
   13f6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13f6e:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13f71:	83 e2 e0             	and    edx,0xffffffe0
   13f74:	83 ca 05             	or     edx,0x5
   13f77:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:139
    cmdheader->w = 0;
   13f79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13f7c:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13f7f:	83 e2 bf             	and    edx,0xffffffbf
   13f82:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:140
    cmdheader->c = 1; //required for reset
   13f84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13f87:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13f8b:	83 ca 04             	or     edx,0x4
   13f8e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:141
    cmdheader->p = 0;
   13f91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13f94:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13f97:	83 e2 7f             	and    edx,0x7f
   13f9a:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:142
    cmdheader->r = 1; //srst field
   13f9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13f9f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13fa3:	83 ca 01             	or     edx,0x1
   13fa6:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:144

    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   13fa9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13fac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   13faf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:145
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   13fb2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13fb5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   13fb8:	50                   	push   eax
   13fb9:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   13fbc:	68 a8 64 04 00       	push   0x464a8
   13fc1:	68 00 20 00 00       	push   0x2000
   13fc6:	e8 b0 37 01 00       	call   2777b <printd>
   13fcb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:146
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
   13fce:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13fd1:	c7 80 80 00 00 00 00 	mov    DWORD PTR [eax+0x80],0xc53000
   13fd8:	30 c5 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:147
    cmdtbl->prdt_entry[0].dbc = 0;
   13fdb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13fde:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [eax+0x8c]
   13fe4:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   13fea:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:148
    cmdtbl->prdt_entry[0].i = 0;
   13ff0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13ff3:	0f b6 90 8f 00 00 00 	movzx  edx,BYTE PTR [eax+0x8f]
   13ffa:	83 e2 7f             	and    edx,0x7f
   13ffd:	88 90 8f 00 00 00    	mov    BYTE PTR [eax+0x8f],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:150

    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   14003:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14006:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:151
    memset(cmdfis, 0, sizeof (FIS_REG_H2D));
   14009:	83 ec 04             	sub    esp,0x4
   1400c:	6a 14                	push   0x14
   1400e:	6a 00                	push   0x0
   14010:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   14013:	e8 f1 15 01 00       	call   25609 <memset>
   14018:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:152
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   1401b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1401e:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/src/os/chrisOS/src/block/ahci.c:153
    cmdfis->c = 0; // Control
   14021:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14024:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   14028:	83 e2 7f             	and    edx,0x7f
   1402b:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:154
    cmdfis->control |= (1 << 2); //reset bit
   1402e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14031:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   14035:	83 c8 04             	or     eax,0x4
   14038:	89 c2                	mov    edx,eax
   1403a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1403d:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:155
    cmdfis->pmport = 0xf;
   14040:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14043:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   14047:	83 ca 0f             	or     edx,0xf
   1404a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:156
    port->cmd.CLO = 1;
   1404d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14050:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14053:	83 ca 08             	or     edx,0x8
   14056:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:157
    while (port->cmd.CLO);
   14059:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:157 (discriminator 1)
   1405a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1405d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14060:	c1 e8 03             	shr    eax,0x3
   14063:	83 e0 01             	and    eax,0x1
   14066:	84 c0                	test   al,al
   14068:	75 f0                	jne    1405a <ahciEnablePortMultiplier+0x170>
/home/yogi/src/os/chrisOS/src/block/ahci.c:158
    port->cmd.ST = 1;
   1406a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1406d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14070:	83 ca 01             	or     edx,0x1
   14073:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:159
    port->ci |= slot;
   14076:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14079:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   1407c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1407f:	09 c2                	or     edx,eax
   14081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14084:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:161

    slot = find_cmdslot(port);
   14087:	83 ec 0c             	sub    esp,0xc
   1408a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1408d:	e8 ff 11 00 00       	call   15291 <find_cmdslot>
   14092:	83 c4 10             	add    esp,0x10
   14095:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:162
    if (slot == -1)
   14098:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   1409c:	0f 84 2c 01 00 00    	je     141ce <ahciEnablePortMultiplier+0x2e4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:164
        return;
    port->ie.AsUlong = 0; //xffffffff;
   140a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   140a5:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:165
    cmdheader += slot;
   140ac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   140af:	c1 e0 05             	shl    eax,0x5
   140b2:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:166
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   140b5:	83 ec 04             	sub    esp,0x4
   140b8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   140bb:	68 90 64 04 00       	push   0x46490
   140c0:	68 00 20 00 00       	push   0x2000
   140c5:	e8 b1 36 01 00       	call   2777b <printd>
   140ca:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:167
    cmdheader->prdtl = 1;
   140cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   140d0:	66 c7 40 02 01 00    	mov    WORD PTR [eax+0x2],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:168
    cmdheader->cfl = sizeof (FIS_REG_H2D) / sizeof (uint32_t);
   140d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   140d9:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   140dc:	83 e2 e0             	and    edx,0xffffffe0
   140df:	83 ca 05             	or     edx,0x5
   140e2:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:169
    cmdheader->w = 0;
   140e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   140e7:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   140ea:	83 e2 bf             	and    edx,0xffffffbf
   140ed:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:170
    cmdheader->c = 1; //required for reset
   140ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   140f2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   140f6:	83 ca 04             	or     edx,0x4
   140f9:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:171
    cmdheader->p = 0;
   140fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   140ff:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14102:	83 e2 7f             	and    edx,0x7f
   14105:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:172
    cmdheader->r = 0; //srst field
   14107:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1410a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   1410e:	83 e2 fe             	and    edx,0xfffffffe
   14111:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:173
    cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   14114:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14117:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1411a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:174
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   1411d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14120:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14123:	50                   	push   eax
   14124:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   14127:	68 a8 64 04 00       	push   0x464a8
   1412c:	68 00 20 00 00       	push   0x2000
   14131:	e8 45 36 01 00       	call   2777b <printd>
   14136:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:175
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
   14139:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1413c:	c7 80 80 00 00 00 00 	mov    DWORD PTR [eax+0x80],0xc53000
   14143:	30 c5 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:176
    cmdtbl->prdt_entry[0].dbc = 0;
   14146:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14149:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [eax+0x8c]
   1414f:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   14155:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:177
    cmdtbl->prdt_entry[0].i = 0;
   1415b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1415e:	0f b6 90 8f 00 00 00 	movzx  edx,BYTE PTR [eax+0x8f]
   14165:	83 e2 7f             	and    edx,0x7f
   14168:	88 90 8f 00 00 00    	mov    BYTE PTR [eax+0x8f],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:179

    cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   1416e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14171:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:180
    memset(cmdfis, 0, sizeof (FIS_REG_H2D));
   14174:	83 ec 04             	sub    esp,0x4
   14177:	6a 14                	push   0x14
   14179:	6a 00                	push   0x0
   1417b:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1417e:	e8 86 14 01 00       	call   25609 <memset>
   14183:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:181
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   14186:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14189:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/src/os/chrisOS/src/block/ahci.c:182
    cmdfis->c = 0; // control
   1418c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1418f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   14193:	83 e2 7f             	and    edx,0x7f
   14196:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:183
    cmdfis->control &= ~(1 << 2); //reset bit
   14199:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1419c:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   141a0:	83 e0 fb             	and    eax,0xfffffffb
   141a3:	89 c2                	mov    edx,eax
   141a5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   141a8:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:184
    cmdfis->pmport = 0xf;
   141ab:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   141ae:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   141b2:	83 ca 0f             	or     edx,0xf
   141b5:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:185
    port->ci |= slot;
   141b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   141bb:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   141be:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   141c1:	09 c2                	or     edx,eax
   141c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   141c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
   141c9:	eb 04                	jmp    141cf <ahciEnablePortMultiplier+0x2e5>
/home/yogi/src/os/chrisOS/src/block/ahci.c:133
    //waitForPortIdle(port);

    printd(DEBUG_AHCI, "AHCI: EnablePortMultipler: port=0x%08X\n", port);
    int slot = find_cmdslot(port);
    if (slot == -1)
        return;
   141cb:	90                   	nop
   141cc:	eb 01                	jmp    141cf <ahciEnablePortMultiplier+0x2e5>
/home/yogi/src/os/chrisOS/src/block/ahci.c:163
    port->cmd.ST = 1;
    port->ci |= slot;

    slot = find_cmdslot(port);
    if (slot == -1)
        return;
   141ce:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:186
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
    cmdfis->c = 0; // control
    cmdfis->control &= ~(1 << 2); //reset bit
    cmdfis->pmport = 0xf;
    port->ci |= slot;
}
   141cf:	c9                   	leave  
   141d0:	c3                   	ret    

000141d1 <ahciSpinupDrive>:
ahciSpinupDrive():
/home/yogi/src/os/chrisOS/src/block/ahci.c:188

bool ahciSpinupDrive(volatile HBA_PORT* port, int portno) {
   141d1:	55                   	push   ebp
   141d2:	89 e5                	mov    ebp,esp
   141d4:	56                   	push   esi
   141d5:	53                   	push   ebx
   141d6:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:189
    int waitMS = 0;
   141d9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:190
    port->sctl.SPD = 1;
   141e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   141e3:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   141e6:	80 e2 0f             	and    dl,0xf
   141e9:	83 ca 10             	or     edx,0x10
   141ec:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:199
    //stop_cmd(&abar->ports[i]);
    //port->cmd.PMA=1;
    //start_cmd(&abar->ports[i]);

    //Spin up the drive
    port->cmd.ST = 0;
   141ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   141f2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   141f5:	83 e2 fe             	and    edx,0xfffffffe
   141f8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:201

    port->sctl.DET = 1;
   141fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   141fe:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   14201:	83 e2 f0             	and    edx,0xfffffff0
   14204:	83 ca 01             	or     edx,0x1
   14207:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:202
    wait(100);
   1420a:	83 ec 0c             	sub    esp,0xc
   1420d:	6a 64                	push   0x64
   1420f:	e8 86 47 01 00       	call   2899a <wait>
   14214:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:203
    port->sctl.DET = 0;
   14217:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1421a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   1421d:	83 e2 f0             	and    edx,0xfffffff0
   14220:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:206


    waitMS = 1000;
   14223:	c7 45 f4 e8 03 00 00 	mov    DWORD PTR [ebp-0xc],0x3e8
/home/yogi/src/os/chrisOS/src/block/ahci.c:208
    //wait for DET to be set to 1 or 3
    while (((port->ssts & 0xF) != 3) && ((port->ssts & 0xF) != 1) && (waitMS > 0)) {
   1422a:	eb 11                	jmp    1423d <ahciSpinupDrive+0x6c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:209
        wait(10);
   1422c:	83 ec 0c             	sub    esp,0xc
   1422f:	6a 0a                	push   0xa
   14231:	e8 64 47 01 00       	call   2899a <wait>
   14236:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:210
        waitMS -= 10;
   14239:	83 6d f4 0a          	sub    DWORD PTR [ebp-0xc],0xa
/home/yogi/src/os/chrisOS/src/block/ahci.c:208
    port->sctl.DET = 0;


    waitMS = 1000;
    //wait for DET to be set to 1 or 3
    while (((port->ssts & 0xF) != 3) && ((port->ssts & 0xF) != 1) && (waitMS > 0)) {
   1423d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14240:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   14243:	83 e0 0f             	and    eax,0xf
   14246:	83 f8 03             	cmp    eax,0x3
   14249:	74 14                	je     1425f <ahciSpinupDrive+0x8e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:208 (discriminator 1)
   1424b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1424e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   14251:	83 e0 0f             	and    eax,0xf
   14254:	83 f8 01             	cmp    eax,0x1
   14257:	74 06                	je     1425f <ahciSpinupDrive+0x8e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:208 (discriminator 2)
   14259:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1425d:	7f cd                	jg     1422c <ahciSpinupDrive+0x5b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:212
        wait(10);
        waitMS -= 10;
    }
    if (waitMS == 0) {
   1425f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   14263:	75 62                	jne    142c7 <ahciSpinupDrive+0xf6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:213
        printd(DEBUG_AHCI, "AHCI: Error spinning up device,  DET not cleared (0x%08X)\n", port->ssts);
   14265:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14268:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   1426b:	83 ec 04             	sub    esp,0x4
   1426e:	50                   	push   eax
   1426f:	68 cc 64 04 00       	push   0x464cc
   14274:	68 00 20 00 00       	push   0x2000
   14279:	e8 fd 34 01 00       	call   2777b <printd>
   1427e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:215
        //printd(DEBUG_AHCI,"****status=0x%08X, error=0x%08X, count=0x%08X\n",rfis->status,rfis->error,rfis->countl);
        printd(DEBUG_AHCI, "***tfd=0x%08X, ssts=0x%08X, serr=0x%08X, is=0x%08X\n", port->tfd, port->ssts, port->serr, port->pxis.AsUlong);
   14281:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14284:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   14287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1428a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   1428d:	83 ec 08             	sub    esp,0x8
   14290:	52                   	push   edx
   14291:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   14294:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
   14297:	52                   	push   edx
   14298:	50                   	push   eax
   14299:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1429c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1429f:	50                   	push   eax
   142a0:	68 08 65 04 00       	push   0x46508
   142a5:	68 00 20 00 00       	push   0x2000
   142aa:	e8 cc 34 01 00       	call   2777b <printd>
   142af:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:216
        printd(DEBUG_AHCI, "Attempting to continue ... \n");
   142b2:	83 ec 08             	sub    esp,0x8
   142b5:	68 3c 65 04 00       	push   0x4653c
   142ba:	68 00 20 00 00       	push   0x2000
   142bf:	e8 b7 34 01 00       	call   2777b <printd>
   142c4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:219
    }
    //This should clear PxSERR
    ahciABAR->pi |= 1 << portno;
   142c7:	a1 94 99 12 00       	mov    eax,ds:0x129994
   142cc:	8b 15 94 99 12 00    	mov    edx,DWORD PTR ds:0x129994
   142d2:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
   142d5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   142d8:	be 01 00 00 00       	mov    esi,0x1
   142dd:	89 d1                	mov    ecx,edx
   142df:	d3 e6                	shl    esi,cl
   142e1:	89 f2                	mov    edx,esi
   142e3:	09 da                	or     edx,ebx
   142e5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:220
    printd(DEBUG_AHCI, "PxSERR=0x%08X\n", port->serr.AsUlong);
   142e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   142eb:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   142ee:	83 ec 04             	sub    esp,0x4
   142f1:	50                   	push   eax
   142f2:	68 59 65 04 00       	push   0x46559
   142f7:	68 00 20 00 00       	push   0x2000
   142fc:	e8 7a 34 01 00       	call   2777b <printd>
   14301:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:221
    waitMS = 1000;
   14304:	c7 45 f4 e8 03 00 00 	mov    DWORD PTR [ebp-0xc],0x3e8
/home/yogi/src/os/chrisOS/src/block/ahci.c:223
    //Now wait for BSY(, DRQ and ERR to be cleared.
    while ((port->tfd.BSY || port->tfd.ERR) && waitMS > 0) {
   1430b:	eb 11                	jmp    1431e <ahciSpinupDrive+0x14d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:224
        wait(10);
   1430d:	83 ec 0c             	sub    esp,0xc
   14310:	6a 0a                	push   0xa
   14312:	e8 83 46 01 00       	call   2899a <wait>
   14317:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:225
        waitMS -= 10;
   1431a:	83 6d f4 0a          	sub    DWORD PTR [ebp-0xc],0xa
/home/yogi/src/os/chrisOS/src/block/ahci.c:223
    //This should clear PxSERR
    ahciABAR->pi |= 1 << portno;
    printd(DEBUG_AHCI, "PxSERR=0x%08X\n", port->serr.AsUlong);
    waitMS = 1000;
    //Now wait for BSY(, DRQ and ERR to be cleared.
    while ((port->tfd.BSY || port->tfd.ERR) && waitMS > 0) {
   1431e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14321:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   14324:	c1 e8 07             	shr    eax,0x7
   14327:	83 e0 01             	and    eax,0x1
   1432a:	84 c0                	test   al,al
   1432c:	75 0d                	jne    1433b <ahciSpinupDrive+0x16a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:223 (discriminator 2)
   1432e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14331:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   14334:	83 e0 01             	and    eax,0x1
   14337:	84 c0                	test   al,al
   14339:	74 06                	je     14341 <ahciSpinupDrive+0x170>
/home/yogi/src/os/chrisOS/src/block/ahci.c:223 (discriminator 3)
   1433b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1433f:	7f cc                	jg     1430d <ahciSpinupDrive+0x13c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:227
        wait(10);
        waitMS -= 10;
    }
    if (waitMS == 0) {
   14341:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   14345:	75 62                	jne    143a9 <ahciSpinupDrive+0x1d8>
/home/yogi/src/os/chrisOS/src/block/ahci.c:228
        printd(DEBUG_AHCI, "AHCI: Error spinning up device, BSY, DRQ OR ERR not cleared (0x%08X)\n", port->ssts);
   14347:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1434a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   1434d:	83 ec 04             	sub    esp,0x4
   14350:	50                   	push   eax
   14351:	68 68 65 04 00       	push   0x46568
   14356:	68 00 20 00 00       	push   0x2000
   1435b:	e8 1b 34 01 00       	call   2777b <printd>
   14360:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:230
        //printd(DEBUG_AHCI,"****status=0x%08X, error=0x%08X, count=0x%08X\n",rfis->status,rfis->error,rfis->countl);
        printd(DEBUG_AHCI, "***tfd=0x%08X, ssts=0x%08X, serr=0x%08X, is=0x%08X\n", port->tfd, port->ssts, port->serr, port->pxis.AsUlong);
   14363:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14366:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   14369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1436c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   1436f:	83 ec 08             	sub    esp,0x8
   14372:	52                   	push   edx
   14373:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   14376:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
   14379:	52                   	push   edx
   1437a:	50                   	push   eax
   1437b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1437e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   14381:	50                   	push   eax
   14382:	68 08 65 04 00       	push   0x46508
   14387:	68 00 20 00 00       	push   0x2000
   1438c:	e8 ea 33 01 00       	call   2777b <printd>
   14391:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:231
        printd(DEBUG_AHCI, "Attempting to continue ... \n");
   14394:	83 ec 08             	sub    esp,0x8
   14397:	68 3c 65 04 00       	push   0x4653c
   1439c:	68 00 20 00 00       	push   0x2000
   143a1:	e8 d5 33 01 00       	call   2777b <printd>
   143a6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:233
    }
    port->cmd.ST = 1;
   143a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   143ac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   143af:	83 ca 01             	or     edx,0x1
   143b2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:234
    if (waitMS == 0)
   143b5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   143b9:	75 07                	jne    143c2 <ahciSpinupDrive+0x1f1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:235
        return false;
   143bb:	b8 00 00 00 00       	mov    eax,0x0
   143c0:	eb 05                	jmp    143c7 <ahciSpinupDrive+0x1f6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:236
    return true;
   143c2:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:237
}
   143c7:	8d 65 f8             	lea    esp,[ebp-0x8]
   143ca:	5b                   	pop    ebx
   143cb:	5e                   	pop    esi
   143cc:	5d                   	pop    ebp
   143cd:	c3                   	ret    

000143ce <ahciProbePorts>:
ahciProbePorts():
/home/yogi/src/os/chrisOS/src/block/ahci.c:239

void ahciProbePorts(HBA_MEM *abar) {
   143ce:	55                   	push   ebp
   143cf:	89 e5                	mov    ebp,esp
   143d1:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/block/ahci.c:241
    // Search disk in impelemented ports
    uint32_t pi = abar->pi;
   143d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   143d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   143da:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:242
    int i = 0;
   143dd:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:243
    int rb = AHCI_PORT_BASE_REMAP_ADDRESS + (0x10000 * ahciHostCount); //probably only need 0xA000
   143e4:	a1 24 92 02 00       	mov    eax,ds:0x29224
   143e9:	c1 e0 10             	shl    eax,0x10
   143ec:	05 00 30 b1 00       	add    eax,0xb13000
   143f1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:244
    if (pi > 0)
   143f4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   143f8:	0f 84 4f 02 00 00    	je     1464d <ahciProbePorts+0x27f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:245
        printd(DEBUG_AHCI, "AHCI: Probing ports via ABAR 0x%08X, value 0x%02X\n", abar, abar->pi);
   143fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14401:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   14404:	50                   	push   eax
   14405:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14408:	68 b0 65 04 00       	push   0x465b0
   1440d:	68 00 20 00 00       	push   0x2000
   14412:	e8 64 33 01 00       	call   2777b <printd>
   14417:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:246
    while (i < 32) {
   1441a:	e9 2e 02 00 00       	jmp    1464d <ahciProbePorts+0x27f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:247
        if (pi & 1) {
   1441f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14422:	83 e0 01             	and    eax,0x1
   14425:	85 c0                	test   eax,eax
   14427:	0f 84 19 02 00 00    	je     14646 <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:248
        ahci_enable_port(abar,i);
   1442d:	83 ec 08             	sub    esp,0x8
   14430:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14433:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14436:	e8 d0 1b 00 00       	call   1600b <ahci_enable_port>
   1443b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:250
        //waitForPortIdle(&abar->ports[i]);
            uint32_t sig = 0;
   1443e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:252
            //Get the SATA device signature
            int dt = check_type(&abar->ports[i], &sig);
   14445:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14448:	83 c0 02             	add    eax,0x2
   1444b:	c1 e0 07             	shl    eax,0x7
   1444e:	89 c2                	mov    edx,eax
   14450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14453:	01 c2                	add    edx,eax
   14455:	83 ec 08             	sub    esp,0x8
   14458:	8d 45 e4             	lea    eax,[ebp-0x1c]
   1445b:	50                   	push   eax
   1445c:	52                   	push   edx
   1445d:	e8 f1 f9 ff ff       	call   13e53 <check_type>
   14462:	83 c4 10             	add    esp,0x10
   14465:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:253
            printd(DEBUG_AHCI, "AHCI: Checking port %u (0x%08X), sig=%08X\n", i, &abar->ports[i], sig);
   14468:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1446b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1446e:	83 c2 02             	add    edx,0x2
   14471:	89 d1                	mov    ecx,edx
   14473:	c1 e1 07             	shl    ecx,0x7
   14476:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   14479:	01 ca                	add    edx,ecx
   1447b:	83 ec 0c             	sub    esp,0xc
   1447e:	50                   	push   eax
   1447f:	52                   	push   edx
   14480:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14483:	68 e4 65 04 00       	push   0x465e4
   14488:	68 00 20 00 00       	push   0x2000
   1448d:	e8 e9 32 01 00       	call   2777b <printd>
   14492:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:255
            //Found a SATA disk
            if (dt == AHCI_DEV_SATA) {
   14495:	83 7d e8 01          	cmp    DWORD PTR [ebp-0x18],0x1
   14499:	0f 85 a3 00 00 00    	jne    14542 <ahciProbePorts+0x174>
/home/yogi/src/os/chrisOS/src/block/ahci.c:256
                printd(DEBUG_AHCI, "AHCI: SATA drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   1449f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   144a2:	83 c0 02             	add    eax,0x2
   144a5:	c1 e0 07             	shl    eax,0x7
   144a8:	89 c2                	mov    edx,eax
   144aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   144ad:	01 d0                	add    eax,edx
   144af:	50                   	push   eax
   144b0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   144b3:	68 10 66 04 00       	push   0x46610
   144b8:	68 00 20 00 00       	push   0x2000
   144bd:	e8 b9 32 01 00       	call   2777b <printd>
   144c2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:257
                printd(DEBUG_AHCI, "AHCI:\tCLB=0x%08X, fb=0x%08X\n", abar->ports[i].clb, abar->ports[i].fb);
   144c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   144c8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   144cb:	83 c2 02             	add    edx,0x2
   144ce:	c1 e2 07             	shl    edx,0x7
   144d1:	01 d0                	add    eax,edx
   144d3:	83 c0 08             	add    eax,0x8
   144d6:	8b 10                	mov    edx,DWORD PTR [eax]
   144d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   144db:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   144de:	83 c1 02             	add    ecx,0x2
   144e1:	c1 e1 07             	shl    ecx,0x7
   144e4:	01 c8                	add    eax,ecx
   144e6:	8b 00                	mov    eax,DWORD PTR [eax]
   144e8:	52                   	push   edx
   144e9:	50                   	push   eax
   144ea:	68 3c 66 04 00       	push   0x4663c
   144ef:	68 00 20 00 00       	push   0x2000
   144f4:	e8 82 32 01 00       	call   2777b <printd>
   144f9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:258
                port_rebase(&abar->ports[i], i, rb);
   144fc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   144ff:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   14502:	83 c2 02             	add    edx,0x2
   14505:	89 d1                	mov    ecx,edx
   14507:	c1 e1 07             	shl    ecx,0x7
   1450a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1450d:	01 ca                	add    edx,ecx
   1450f:	83 ec 04             	sub    esp,0x4
   14512:	50                   	push   eax
   14513:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14516:	52                   	push   edx
   14517:	e8 5c 07 00 00       	call   14c78 <port_rebase>
   1451c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:261
                	//det reset, disable slumber and Partial state
			//reset port, send COMRESET signal
                ahciIdentify(&abar->ports[i], AHCI_DEV_SATA);
   1451f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14522:	83 c0 02             	add    eax,0x2
   14525:	c1 e0 07             	shl    eax,0x7
   14528:	89 c2                	mov    edx,eax
   1452a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1452d:	01 d0                	add    eax,edx
   1452f:	83 ec 08             	sub    esp,0x8
   14532:	6a 01                	push   0x1
   14534:	50                   	push   eax
   14535:	e8 b6 09 00 00       	call   14ef0 <ahciIdentify>
   1453a:	83 c4 10             	add    esp,0x10
   1453d:	e9 04 01 00 00       	jmp    14646 <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:271
                    printk("AHCI: Successfully read sector 0 from device to 0x%08X\n",ahciReadBuff);
                    printk("AHCI: Read Buffer: %s\n",ahciReadBuff);
                    printk("sig=0x%08X\n",abar->ports[i].sig);
                }
                 */
            } else if (dt == AHCI_DEV_SATAPI) {
   14542:	83 7d e8 04          	cmp    DWORD PTR [ebp-0x18],0x4
   14546:	0f 85 a0 00 00 00    	jne    145ec <ahciProbePorts+0x21e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:272
                printd(DEBUG_AHCI, "AHCI:SATAPI drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   1454c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1454f:	83 c0 02             	add    eax,0x2
   14552:	c1 e0 07             	shl    eax,0x7
   14555:	89 c2                	mov    edx,eax
   14557:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1455a:	01 d0                	add    eax,edx
   1455c:	50                   	push   eax
   1455d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14560:	68 5c 66 04 00       	push   0x4665c
   14565:	68 00 20 00 00       	push   0x2000
   1456a:	e8 0c 32 01 00       	call   2777b <printd>
   1456f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:273
                printd(DEBUG_AHCI, "AHCI:\tCLB=0x%08X, fb=0x%08X\n", abar->ports[i].clb, abar->ports[i].fb);
   14572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14575:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   14578:	83 c2 02             	add    edx,0x2
   1457b:	c1 e2 07             	shl    edx,0x7
   1457e:	01 d0                	add    eax,edx
   14580:	83 c0 08             	add    eax,0x8
   14583:	8b 10                	mov    edx,DWORD PTR [eax]
   14585:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14588:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   1458b:	83 c1 02             	add    ecx,0x2
   1458e:	c1 e1 07             	shl    ecx,0x7
   14591:	01 c8                	add    eax,ecx
   14593:	8b 00                	mov    eax,DWORD PTR [eax]
   14595:	52                   	push   edx
   14596:	50                   	push   eax
   14597:	68 3c 66 04 00       	push   0x4663c
   1459c:	68 00 20 00 00       	push   0x2000
   145a1:	e8 d5 31 01 00       	call   2777b <printd>
   145a6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:274
                port_rebase(&abar->ports[i], i, rb);
   145a9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   145ac:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   145af:	83 c2 02             	add    edx,0x2
   145b2:	89 d1                	mov    ecx,edx
   145b4:	c1 e1 07             	shl    ecx,0x7
   145b7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   145ba:	01 ca                	add    edx,ecx
   145bc:	83 ec 04             	sub    esp,0x4
   145bf:	50                   	push   eax
   145c0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   145c3:	52                   	push   edx
   145c4:	e8 af 06 00 00       	call   14c78 <port_rebase>
   145c9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:276
                //Run an ATA_IDENTIFY
                ahciIdentify(&abar->ports[i], AHCI_DEV_SATAPI);
   145cc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   145cf:	83 c0 02             	add    eax,0x2
   145d2:	c1 e0 07             	shl    eax,0x7
   145d5:	89 c2                	mov    edx,eax
   145d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   145da:	01 d0                	add    eax,edx
   145dc:	83 ec 08             	sub    esp,0x8
   145df:	6a 04                	push   0x4
   145e1:	50                   	push   eax
   145e2:	e8 09 09 00 00       	call   14ef0 <ahciIdentify>
   145e7:	83 c4 10             	add    esp,0x10
   145ea:	eb 5a                	jmp    14646 <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:277
            } else if (dt == AHCI_DEV_SEMB) {
   145ec:	83 7d e8 02          	cmp    DWORD PTR [ebp-0x18],0x2
   145f0:	75 28                	jne    1461a <ahciProbePorts+0x24c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:278
                printd(DEBUG_AHCI, "AHCI: SEMB drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   145f2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   145f5:	83 c0 02             	add    eax,0x2
   145f8:	c1 e0 07             	shl    eax,0x7
   145fb:	89 c2                	mov    edx,eax
   145fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14600:	01 d0                	add    eax,edx
   14602:	50                   	push   eax
   14603:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14606:	68 8c 66 04 00       	push   0x4668c
   1460b:	68 00 20 00 00       	push   0x2000
   14610:	e8 66 31 01 00       	call   2777b <printd>
   14615:	83 c4 10             	add    esp,0x10
   14618:	eb 2c                	jmp    14646 <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:280
                //port_rebase(abar->ports,i,rb+=0x10000);
            } else if (dt == AHCI_DEV_PM) {
   1461a:	83 7d e8 03          	cmp    DWORD PTR [ebp-0x18],0x3
   1461e:	75 26                	jne    14646 <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:281
                printd(DEBUG_AHCI, "AHCI: PM drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   14620:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14623:	83 c0 02             	add    eax,0x2
   14626:	c1 e0 07             	shl    eax,0x7
   14629:	89 c2                	mov    edx,eax
   1462b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1462e:	01 d0                	add    eax,edx
   14630:	50                   	push   eax
   14631:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14634:	68 b8 66 04 00       	push   0x466b8
   14639:	68 00 20 00 00       	push   0x2000
   1463e:	e8 38 31 01 00       	call   2777b <printd>
   14643:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:290
            //			{
            //				printk("No drive found at port %d\n", i);
            //			}
        }

        pi >>= 1;
   14646:	d1 6d f4             	shr    DWORD PTR [ebp-0xc],1
/home/yogi/src/os/chrisOS/src/block/ahci.c:291
        i++;
   14649:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:246
    uint32_t pi = abar->pi;
    int i = 0;
    int rb = AHCI_PORT_BASE_REMAP_ADDRESS + (0x10000 * ahciHostCount); //probably only need 0xA000
    if (pi > 0)
        printd(DEBUG_AHCI, "AHCI: Probing ports via ABAR 0x%08X, value 0x%02X\n", abar, abar->pi);
    while (i < 32) {
   1464d:	83 7d f0 1f          	cmp    DWORD PTR [ebp-0x10],0x1f
   14651:	0f 8e c8 fd ff ff    	jle    1441f <ahciProbePorts+0x51>
/home/yogi/src/os/chrisOS/src/block/ahci.c:293
        }

        pi >>= 1;
        i++;
    }
}
   14657:	90                   	nop
   14658:	c9                   	leave  
   14659:	c3                   	ret    

0001465a <printAHCICaps>:
printAHCICaps():
/home/yogi/src/os/chrisOS/src/block/ahci.c:295

void printAHCICaps() {
   1465a:	55                   	push   ebp
   1465b:	89 e5                	mov    ebp,esp
   1465d:	57                   	push   edi
   1465e:	56                   	push   esi
   1465f:	53                   	push   ebx
   14660:	81 ec 2c 02 00 00    	sub    esp,0x22c
/home/yogi/src/os/chrisOS/src/block/ahci.c:297
    //printk("ahciCaps=0x%08X, sizeof=%u\n",ahciCaps,sizeof(ahcicaps_t));
    terminal_clear();
   14666:	e8 5b 39 00 00       	call   17fc6 <terminal_clear>
/home/yogi/src/os/chrisOS/src/block/ahci.c:298
    printk("AHCI Caps:\n");
   1466b:	83 ec 0c             	sub    esp,0xc
   1466e:	68 e2 66 04 00       	push   0x466e2
   14673:	e8 e3 30 01 00       	call   2775b <printk>
   14678:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:299
    printk("\tSupports 64-bit Addressing (S64A):\t\t\t\t%s\n", ahciCaps->S64A ? "Yes" : "No");
   1467b:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14680:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   14684:	83 e0 80             	and    eax,0xffffff80
   14687:	84 c0                	test   al,al
   14689:	74 07                	je     14692 <printAHCICaps+0x38>
/home/yogi/src/os/chrisOS/src/block/ahci.c:299 (discriminator 1)
   1468b:	b8 ee 66 04 00       	mov    eax,0x466ee
   14690:	eb 05                	jmp    14697 <printAHCICaps+0x3d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:299 (discriminator 2)
   14692:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:299 (discriminator 4)
   14697:	83 ec 08             	sub    esp,0x8
   1469a:	50                   	push   eax
   1469b:	68 f8 66 04 00       	push   0x466f8
   146a0:	e8 b6 30 01 00       	call   2775b <printk>
   146a5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:300 (discriminator 4)
    printk("\tSupprorts Native Command Queueing (SNCQ):\t\t%s\n", ahciCaps->SNCQ ? "Yes" : "No");
   146a8:	a1 24 99 12 00       	mov    eax,ds:0x129924
   146ad:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   146b1:	83 e0 40             	and    eax,0x40
   146b4:	84 c0                	test   al,al
   146b6:	74 07                	je     146bf <printAHCICaps+0x65>
/home/yogi/src/os/chrisOS/src/block/ahci.c:300 (discriminator 1)
   146b8:	b8 ee 66 04 00       	mov    eax,0x466ee
   146bd:	eb 05                	jmp    146c4 <printAHCICaps+0x6a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:300 (discriminator 2)
   146bf:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:300 (discriminator 4)
   146c4:	83 ec 08             	sub    esp,0x8
   146c7:	50                   	push   eax
   146c8:	68 24 67 04 00       	push   0x46724
   146cd:	e8 89 30 01 00       	call   2775b <printk>
   146d2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:301 (discriminator 4)
    printk("\tSupports SNotification Register (SSNTF):\t\t%s\n", ahciCaps->SSNTF ? "Yes" : "No");
   146d5:	a1 24 99 12 00       	mov    eax,ds:0x129924
   146da:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   146de:	83 e0 20             	and    eax,0x20
   146e1:	84 c0                	test   al,al
   146e3:	74 07                	je     146ec <printAHCICaps+0x92>
/home/yogi/src/os/chrisOS/src/block/ahci.c:301 (discriminator 1)
   146e5:	b8 ee 66 04 00       	mov    eax,0x466ee
   146ea:	eb 05                	jmp    146f1 <printAHCICaps+0x97>
/home/yogi/src/os/chrisOS/src/block/ahci.c:301 (discriminator 2)
   146ec:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:301 (discriminator 4)
   146f1:	83 ec 08             	sub    esp,0x8
   146f4:	50                   	push   eax
   146f5:	68 54 67 04 00       	push   0x46754
   146fa:	e8 5c 30 01 00       	call   2775b <printk>
   146ff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:302 (discriminator 4)
    printk("\tSupports Mechanical Presence Switch (SMPS):\t\t%s\n", ahciCaps->SMPS ? "Yes" : "No");
   14702:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14707:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1470b:	83 e0 10             	and    eax,0x10
   1470e:	84 c0                	test   al,al
   14710:	74 07                	je     14719 <printAHCICaps+0xbf>
/home/yogi/src/os/chrisOS/src/block/ahci.c:302 (discriminator 1)
   14712:	b8 ee 66 04 00       	mov    eax,0x466ee
   14717:	eb 05                	jmp    1471e <printAHCICaps+0xc4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:302 (discriminator 2)
   14719:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:302 (discriminator 4)
   1471e:	83 ec 08             	sub    esp,0x8
   14721:	50                   	push   eax
   14722:	68 84 67 04 00       	push   0x46784
   14727:	e8 2f 30 01 00       	call   2775b <printk>
   1472c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:303 (discriminator 4)
    printk("\tSupports Staggered Spin-up (SSS):\t\t\t\t%s\n", ahciCaps->SSS ? "Yes" : "No");
   1472f:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14734:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   14738:	83 e0 08             	and    eax,0x8
   1473b:	84 c0                	test   al,al
   1473d:	74 07                	je     14746 <printAHCICaps+0xec>
/home/yogi/src/os/chrisOS/src/block/ahci.c:303 (discriminator 1)
   1473f:	b8 ee 66 04 00       	mov    eax,0x466ee
   14744:	eb 05                	jmp    1474b <printAHCICaps+0xf1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:303 (discriminator 2)
   14746:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:303 (discriminator 4)
   1474b:	83 ec 08             	sub    esp,0x8
   1474e:	50                   	push   eax
   1474f:	68 b8 67 04 00       	push   0x467b8
   14754:	e8 02 30 01 00       	call   2775b <printk>
   14759:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:304 (discriminator 4)
    printk("\tSupports Aggressive Link Power Management (SALP):\t%s\n", ahciCaps->SALP ? "Yes" : "No");
   1475c:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14761:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   14765:	83 e0 04             	and    eax,0x4
   14768:	84 c0                	test   al,al
   1476a:	74 07                	je     14773 <printAHCICaps+0x119>
/home/yogi/src/os/chrisOS/src/block/ahci.c:304 (discriminator 1)
   1476c:	b8 ee 66 04 00       	mov    eax,0x466ee
   14771:	eb 05                	jmp    14778 <printAHCICaps+0x11e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:304 (discriminator 2)
   14773:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:304 (discriminator 4)
   14778:	83 ec 08             	sub    esp,0x8
   1477b:	50                   	push   eax
   1477c:	68 e4 67 04 00       	push   0x467e4
   14781:	e8 d5 2f 01 00       	call   2775b <printk>
   14786:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:305 (discriminator 4)
    printk("\tSupports Active LED (SAL):\t\t\t\t\t%s\n", ahciCaps->SAL ? "Yes" : "No");
   14789:	a1 24 99 12 00       	mov    eax,ds:0x129924
   1478e:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   14792:	83 e0 02             	and    eax,0x2
   14795:	84 c0                	test   al,al
   14797:	74 07                	je     147a0 <printAHCICaps+0x146>
/home/yogi/src/os/chrisOS/src/block/ahci.c:305 (discriminator 1)
   14799:	b8 ee 66 04 00       	mov    eax,0x466ee
   1479e:	eb 05                	jmp    147a5 <printAHCICaps+0x14b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:305 (discriminator 2)
   147a0:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:305 (discriminator 4)
   147a5:	83 ec 08             	sub    esp,0x8
   147a8:	50                   	push   eax
   147a9:	68 1c 68 04 00       	push   0x4681c
   147ae:	e8 a8 2f 01 00       	call   2775b <printk>
   147b3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:306 (discriminator 4)
    printk("\tSupports Command List Override (SCLO):\t\t\t%s\n", ahciCaps->SCLO ? "Yes" : "No");
   147b6:	a1 24 99 12 00       	mov    eax,ds:0x129924
   147bb:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   147bf:	83 e0 01             	and    eax,0x1
   147c2:	84 c0                	test   al,al
   147c4:	74 07                	je     147cd <printAHCICaps+0x173>
/home/yogi/src/os/chrisOS/src/block/ahci.c:306 (discriminator 1)
   147c6:	b8 ee 66 04 00       	mov    eax,0x466ee
   147cb:	eb 05                	jmp    147d2 <printAHCICaps+0x178>
/home/yogi/src/os/chrisOS/src/block/ahci.c:306 (discriminator 2)
   147cd:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:306 (discriminator 4)
   147d2:	83 ec 08             	sub    esp,0x8
   147d5:	50                   	push   eax
   147d6:	68 40 68 04 00       	push   0x46840
   147db:	e8 7b 2f 01 00       	call   2775b <printk>
   147e0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 4)
    printk("\tInterface Speed Support (ISS):\t\t\t\t%s\n", ahciCaps->ISS == 1 ? "1.5 Gbps" : ahciCaps->ISS == 2 ? "3 Gbps" : ahciCaps->ISS == 3 ? "6 Gbps" : "Reserved");
   147e3:	a1 24 99 12 00       	mov    eax,ds:0x129924
   147e8:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   147ec:	83 e0 f0             	and    eax,0xfffffff0
   147ef:	3c 10                	cmp    al,0x10
   147f1:	74 35                	je     14828 <printAHCICaps+0x1ce>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 1)
   147f3:	a1 24 99 12 00       	mov    eax,ds:0x129924
   147f8:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   147fc:	83 e0 f0             	and    eax,0xfffffff0
   147ff:	3c 20                	cmp    al,0x20
   14801:	74 1e                	je     14821 <printAHCICaps+0x1c7>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 3)
   14803:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14808:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1480c:	83 e0 f0             	and    eax,0xfffffff0
   1480f:	3c 30                	cmp    al,0x30
   14811:	75 07                	jne    1481a <printAHCICaps+0x1c0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 5)
   14813:	b8 6e 68 04 00       	mov    eax,0x4686e
   14818:	eb 13                	jmp    1482d <printAHCICaps+0x1d3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 6)
   1481a:	b8 75 68 04 00       	mov    eax,0x46875
   1481f:	eb 0c                	jmp    1482d <printAHCICaps+0x1d3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 4)
   14821:	b8 7e 68 04 00       	mov    eax,0x4687e
   14826:	eb 05                	jmp    1482d <printAHCICaps+0x1d3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 2)
   14828:	b8 85 68 04 00       	mov    eax,0x46885
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 12)
   1482d:	83 ec 08             	sub    esp,0x8
   14830:	50                   	push   eax
   14831:	68 90 68 04 00       	push   0x46890
   14836:	e8 20 2f 01 00       	call   2775b <printk>
   1483b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:308 (discriminator 12)
    printk("\tSupports AHCI mode only (SAM):\t\t\t\t%s\n", ahciCaps->SAM ? "Yes" : "No");
   1483e:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14843:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   14847:	83 e0 04             	and    eax,0x4
   1484a:	84 c0                	test   al,al
   1484c:	74 07                	je     14855 <printAHCICaps+0x1fb>
/home/yogi/src/os/chrisOS/src/block/ahci.c:308 (discriminator 1)
   1484e:	b8 ee 66 04 00       	mov    eax,0x466ee
   14853:	eb 05                	jmp    1485a <printAHCICaps+0x200>
/home/yogi/src/os/chrisOS/src/block/ahci.c:308 (discriminator 2)
   14855:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:308 (discriminator 4)
   1485a:	83 ec 08             	sub    esp,0x8
   1485d:	50                   	push   eax
   1485e:	68 b8 68 04 00       	push   0x468b8
   14863:	e8 f3 2e 01 00       	call   2775b <printk>
   14868:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:309 (discriminator 4)
    printk("\tSupports Port Multiplier (SPM):\t\t\t\t%s\n", ahciCaps->SPM ? "Yes" : "No");
   1486b:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14870:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   14874:	83 e0 02             	and    eax,0x2
   14877:	84 c0                	test   al,al
   14879:	74 07                	je     14882 <printAHCICaps+0x228>
/home/yogi/src/os/chrisOS/src/block/ahci.c:309 (discriminator 1)
   1487b:	b8 ee 66 04 00       	mov    eax,0x466ee
   14880:	eb 05                	jmp    14887 <printAHCICaps+0x22d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:309 (discriminator 2)
   14882:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:309 (discriminator 4)
   14887:	83 ec 08             	sub    esp,0x8
   1488a:	50                   	push   eax
   1488b:	68 e0 68 04 00       	push   0x468e0
   14890:	e8 c6 2e 01 00       	call   2775b <printk>
   14895:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:310 (discriminator 4)
    printk("\tFIS-based Switching Support (FBSS):\t\t\t%s\n", ahciCaps->FBSS ? "Yes" : "No");   
   14898:	a1 24 99 12 00       	mov    eax,ds:0x129924
   1489d:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   148a1:	83 e0 01             	and    eax,0x1
   148a4:	84 c0                	test   al,al
   148a6:	74 07                	je     148af <printAHCICaps+0x255>
/home/yogi/src/os/chrisOS/src/block/ahci.c:310 (discriminator 1)
   148a8:	b8 ee 66 04 00       	mov    eax,0x466ee
   148ad:	eb 05                	jmp    148b4 <printAHCICaps+0x25a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:310 (discriminator 2)
   148af:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:310 (discriminator 4)
   148b4:	83 ec 08             	sub    esp,0x8
   148b7:	50                   	push   eax
   148b8:	68 08 69 04 00       	push   0x46908
   148bd:	e8 99 2e 01 00       	call   2775b <printk>
   148c2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:311 (discriminator 4)
    printk("\tPIO Multiple DRQ Block (PMD):\t\t\t\t\t%s\n", ahciCaps->PMD ? "Yes" : "No");
   148c5:	a1 24 99 12 00       	mov    eax,ds:0x129924
   148ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   148ce:	83 e0 80             	and    eax,0xffffff80
   148d1:	84 c0                	test   al,al
   148d3:	74 07                	je     148dc <printAHCICaps+0x282>
/home/yogi/src/os/chrisOS/src/block/ahci.c:311 (discriminator 1)
   148d5:	b8 ee 66 04 00       	mov    eax,0x466ee
   148da:	eb 05                	jmp    148e1 <printAHCICaps+0x287>
/home/yogi/src/os/chrisOS/src/block/ahci.c:311 (discriminator 2)
   148dc:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:311 (discriminator 4)
   148e1:	83 ec 08             	sub    esp,0x8
   148e4:	50                   	push   eax
   148e5:	68 34 69 04 00       	push   0x46934
   148ea:	e8 6c 2e 01 00       	call   2775b <printk>
   148ef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:312 (discriminator 4)
    printk("\tSlumber State Capable (SSC):\t\t\t\t\t%s\n", ahciCaps->SSC ? "Yes" : "No");
   148f2:	a1 24 99 12 00       	mov    eax,ds:0x129924
   148f7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   148fb:	83 e0 40             	and    eax,0x40
   148fe:	84 c0                	test   al,al
   14900:	74 07                	je     14909 <printAHCICaps+0x2af>
/home/yogi/src/os/chrisOS/src/block/ahci.c:312 (discriminator 1)
   14902:	b8 ee 66 04 00       	mov    eax,0x466ee
   14907:	eb 05                	jmp    1490e <printAHCICaps+0x2b4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:312 (discriminator 2)
   14909:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:312 (discriminator 4)
   1490e:	83 ec 08             	sub    esp,0x8
   14911:	50                   	push   eax
   14912:	68 5c 69 04 00       	push   0x4695c
   14917:	e8 3f 2e 01 00       	call   2775b <printk>
   1491c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:313 (discriminator 4)
    printk("\tPartial State Capable (PSC):\t\t\t\t\t%s\n", ahciCaps->PSC ? "Yes" : "No");
   1491f:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14924:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   14928:	83 e0 20             	and    eax,0x20
   1492b:	84 c0                	test   al,al
   1492d:	74 07                	je     14936 <printAHCICaps+0x2dc>
/home/yogi/src/os/chrisOS/src/block/ahci.c:313 (discriminator 1)
   1492f:	b8 ee 66 04 00       	mov    eax,0x466ee
   14934:	eb 05                	jmp    1493b <printAHCICaps+0x2e1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:313 (discriminator 2)
   14936:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:313 (discriminator 4)
   1493b:	83 ec 08             	sub    esp,0x8
   1493e:	50                   	push   eax
   1493f:	68 84 69 04 00       	push   0x46984
   14944:	e8 12 2e 01 00       	call   2775b <printk>
   14949:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:314 (discriminator 4)
    printk("\tNumber of Command Slots (NSC):\t\t\t\t%u\n", ahciCaps->NCS);
   1494c:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14951:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   14955:	83 e0 1f             	and    eax,0x1f
   14958:	0f b6 c0             	movzx  eax,al
   1495b:	83 ec 08             	sub    esp,0x8
   1495e:	50                   	push   eax
   1495f:	68 ac 69 04 00       	push   0x469ac
   14964:	e8 f2 2d 01 00       	call   2775b <printk>
   14969:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:315 (discriminator 4)
    printk("\tCommand Completion Coalescing Supported (CCCS):\t%s\n", ahciCaps->CCCS ? "Yes" : "No");
   1496c:	a1 24 99 12 00       	mov    eax,ds:0x129924
   14971:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   14974:	83 e0 80             	and    eax,0xffffff80
   14977:	84 c0                	test   al,al
   14979:	74 07                	je     14982 <printAHCICaps+0x328>
/home/yogi/src/os/chrisOS/src/block/ahci.c:315 (discriminator 1)
   1497b:	b8 ee 66 04 00       	mov    eax,0x466ee
   14980:	eb 05                	jmp    14987 <printAHCICaps+0x32d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:315 (discriminator 2)
   14982:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:315 (discriminator 4)
   14987:	83 ec 08             	sub    esp,0x8
   1498a:	50                   	push   eax
   1498b:	68 d4 69 04 00       	push   0x469d4
   14990:	e8 c6 2d 01 00       	call   2775b <printk>
   14995:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:316 (discriminator 4)
    printk("\tEnclosure Management Supported (EMS):\t\t\t%s\n", ahciCaps->EMS ? "Yes" : "No");
   14998:	a1 24 99 12 00       	mov    eax,ds:0x129924
   1499d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   149a0:	83 e0 40             	and    eax,0x40
   149a3:	84 c0                	test   al,al
   149a5:	74 07                	je     149ae <printAHCICaps+0x354>
/home/yogi/src/os/chrisOS/src/block/ahci.c:316 (discriminator 1)
   149a7:	b8 ee 66 04 00       	mov    eax,0x466ee
   149ac:	eb 05                	jmp    149b3 <printAHCICaps+0x359>
/home/yogi/src/os/chrisOS/src/block/ahci.c:316 (discriminator 2)
   149ae:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:316 (discriminator 4)
   149b3:	83 ec 08             	sub    esp,0x8
   149b6:	50                   	push   eax
   149b7:	68 0c 6a 04 00       	push   0x46a0c
   149bc:	e8 9a 2d 01 00       	call   2775b <printk>
   149c1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:317 (discriminator 4)
    printk("\tSupports External SATA (SXS):\t\t\t\t\t%s\n", ahciCaps->SXS ? "Yes" : "No");
   149c4:	a1 24 99 12 00       	mov    eax,ds:0x129924
   149c9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   149cc:	83 e0 20             	and    eax,0x20
   149cf:	84 c0                	test   al,al
   149d1:	74 07                	je     149da <printAHCICaps+0x380>
/home/yogi/src/os/chrisOS/src/block/ahci.c:317 (discriminator 1)
   149d3:	b8 ee 66 04 00       	mov    eax,0x466ee
   149d8:	eb 05                	jmp    149df <printAHCICaps+0x385>
/home/yogi/src/os/chrisOS/src/block/ahci.c:317 (discriminator 2)
   149da:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:317 (discriminator 4)
   149df:	83 ec 08             	sub    esp,0x8
   149e2:	50                   	push   eax
   149e3:	68 3c 6a 04 00       	push   0x46a3c
   149e8:	e8 6e 2d 01 00       	call   2775b <printk>
   149ed:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:318 (discriminator 4)
    printk("\tNumber of Ports (NP):\t\t\t\t\t\t%u\n", ahciCaps->NP);
   149f0:	a1 24 99 12 00       	mov    eax,ds:0x129924
   149f5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   149f8:	83 e0 1f             	and    eax,0x1f
   149fb:	0f b6 c0             	movzx  eax,al
   149fe:	83 ec 08             	sub    esp,0x8
   14a01:	50                   	push   eax
   14a02:	68 64 6a 04 00       	push   0x46a64
   14a07:	e8 4f 2d 01 00       	call   2775b <printk>
   14a0c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:321 (discriminator 4)
    //printk("Press a key for more ...");
    //waitForKeyboardKey();
    printk("AHCI: SATA Disks:\n");
   14a0f:	83 ec 0c             	sub    esp,0xc
   14a12:	68 84 6a 04 00       	push   0x46a84
   14a17:	e8 3f 2d 01 00       	call   2775b <printk>
   14a1c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:323 (discriminator 4)
    char p1[512];
    for (int cnt = 4; cnt < 10; cnt++)
   14a1f:	c7 45 e4 04 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x4
   14a26:	e9 3a 02 00 00       	jmp    14c65 <printAHCICaps+0x60b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:324
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
   14a2b:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14a31:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14a34:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14a3a:	01 d0                	add    eax,edx
   14a3c:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   14a43:	84 c0                	test   al,al
   14a45:	0f 84 16 02 00 00    	je     14c61 <printAHCICaps+0x607>
/home/yogi/src/os/chrisOS/src/block/ahci.c:325
            memset(p1, 0, 512);
   14a4b:	83 ec 04             	sub    esp,0x4
   14a4e:	68 00 02 00 00       	push   0x200
   14a53:	6a 00                	push   0x0
   14a55:	8d 85 d8 fd ff ff    	lea    eax,[ebp-0x228]
   14a5b:	50                   	push   eax
   14a5c:	e8 a8 0b 01 00       	call   25609 <memset>
   14a61:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:326
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
   14a64:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14a6a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14a6d:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14a73:	01 d0                	add    eax,edx
   14a75:	05 00 02 00 00       	add    eax,0x200
   14a7a:	83 ec 08             	sub    esp,0x8
   14a7d:	50                   	push   eax
   14a7e:	8d 85 d8 fd ff ff    	lea    eax,[ebp-0x228]
   14a84:	50                   	push   eax
   14a85:	e8 32 2e 01 00       	call   278bc <strcpy>
   14a8a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:327
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
   14a8d:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14a93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14a96:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14a9c:	01 d0                	add    eax,edx
   14a9e:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   14aa5:	3c 01                	cmp    al,0x1
   14aa7:	75 08                	jne    14ab1 <printAHCICaps+0x457>
/home/yogi/src/os/chrisOS/src/block/ahci.c:327 (discriminator 1)
   14aa9:	8d 85 d8 fd ff ff    	lea    eax,[ebp-0x228]
   14aaf:	eb 05                	jmp    14ab6 <printAHCICaps+0x45c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:327 (discriminator 2)
   14ab1:	b8 97 6a 04 00       	mov    eax,0x46a97
/home/yogi/src/os/chrisOS/src/block/ahci.c:327 (discriminator 4)
   14ab6:	83 ec 04             	sub    esp,0x4
   14ab9:	50                   	push   eax
   14aba:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   14abd:	68 9d 6a 04 00       	push   0x46a9d
   14ac2:	e8 94 2c 01 00       	call   2775b <printk>
   14ac7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:335 (discriminator 4)
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
                    kATADeviceInfo[cnt].ABAR,
                    kATADeviceInfo[cnt].ioPort);
   14aca:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14ad0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14ad3:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14ad9:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   14adb:	8b b8 69 02 00 00    	mov    edi,DWORD PTR [eax+0x269]
/home/yogi/src/os/chrisOS/src/block/ahci.c:334 (discriminator 4)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
                    kATADeviceInfo[cnt].ABAR,
   14ae1:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14ae7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14aea:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14af0:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   14af2:	8b b0 6f 02 00 00    	mov    esi,DWORD PTR [eax+0x26f]
/home/yogi/src/os/chrisOS/src/block/ahci.c:333 (discriminator 4)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
   14af8:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14afe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14b01:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14b07:	01 d0                	add    eax,edx
   14b09:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   14b10:	84 c0                	test   al,al
   14b12:	74 0c                	je     14b20 <printAHCICaps+0x4c6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 1)
   14b14:	c7 85 d4 fd ff ff b2 	mov    DWORD PTR [ebp-0x22c],0x46ab2
   14b1b:	6a 04 00 
   14b1e:	eb 0a                	jmp    14b2a <printAHCICaps+0x4d0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 2)
   14b20:	c7 85 d4 fd ff ff b7 	mov    DWORD PTR [ebp-0x22c],0x46ab7
   14b27:	6a 04 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:332 (discriminator 4)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
   14b2a:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14b30:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14b33:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14b39:	01 d0                	add    eax,edx
   14b3b:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   14b42:	84 c0                	test   al,al
   14b44:	74 0c                	je     14b52 <printAHCICaps+0x4f8>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 5)
   14b46:	c7 85 d0 fd ff ff b8 	mov    DWORD PTR [ebp-0x230],0x46ab8
   14b4d:	6a 04 00 
   14b50:	eb 0a                	jmp    14b5c <printAHCICaps+0x502>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 6)
   14b52:	c7 85 d0 fd ff ff b7 	mov    DWORD PTR [ebp-0x230],0x46ab7
   14b59:	6a 04 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:331 (discriminator 8)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
   14b5c:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14b62:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14b65:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14b6b:	01 d0                	add    eax,edx
   14b6d:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 8)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   14b74:	84 c0                	test   al,al
   14b76:	74 0c                	je     14b84 <printAHCICaps+0x52a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 9)
   14b78:	c7 85 cc fd ff ff bf 	mov    DWORD PTR [ebp-0x234],0x46abf
   14b7f:	6a 04 00 
   14b82:	eb 0a                	jmp    14b8e <printAHCICaps+0x534>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 10)
   14b84:	c7 85 cc fd ff ff b7 	mov    DWORD PTR [ebp-0x234],0x46ab7
   14b8b:	6a 04 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:330
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
   14b8e:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14b94:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14b97:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14b9d:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:328
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   14b9f:	8b 98 5a 02 00 00    	mov    ebx,DWORD PTR [eax+0x25a]
/home/yogi/src/os/chrisOS/src/block/ahci.c:329
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
   14ba5:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14bab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14bae:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14bb4:	01 d0                	add    eax,edx
   14bb6:	8b 88 56 02 00 00    	mov    ecx,DWORD PTR [eax+0x256]
   14bbc:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14bc2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14bc5:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14bcb:	01 d0                	add    eax,edx
   14bcd:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   14bd3:	0f af c1             	imul   eax,ecx
/home/yogi/src/os/chrisOS/src/block/ahci.c:328
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   14bd6:	c1 e8 14             	shr    eax,0x14
   14bd9:	57                   	push   edi
   14bda:	56                   	push   esi
   14bdb:	ff b5 d4 fd ff ff    	push   DWORD PTR [ebp-0x22c]
   14be1:	ff b5 d0 fd ff ff    	push   DWORD PTR [ebp-0x230]
   14be7:	ff b5 cc fd ff ff    	push   DWORD PTR [ebp-0x234]
   14bed:	53                   	push   ebx
   14bee:	50                   	push   eax
   14bef:	68 c4 6a 04 00       	push   0x46ac4
   14bf4:	e8 62 2b 01 00       	call   2775b <printk>
   14bf9:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:336
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
                    kATADeviceInfo[cnt].ABAR,
                    kATADeviceInfo[cnt].ioPort);
            volatile HBA_PORT* port = (HBA_PORT*) kATADeviceInfo[cnt].ioPort;
   14bfc:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   14c02:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c05:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14c0b:	01 d0                	add    eax,edx
   14c0d:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   14c13:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:337
            HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
   14c16:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   14c19:	8b 00                	mov    eax,DWORD PTR [eax]
   14c1b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:338
            HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   14c1e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   14c21:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14c24:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:339
            printk("\t\tCLB=0x%08X, FB=0x%08X\n",port->clb,port->fb);
   14c27:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   14c2a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14c2d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   14c30:	8b 00                	mov    eax,DWORD PTR [eax]
   14c32:	83 ec 04             	sub    esp,0x4
   14c35:	52                   	push   edx
   14c36:	50                   	push   eax
   14c37:	68 f6 6a 04 00       	push   0x46af6
   14c3c:	e8 1a 2b 01 00       	call   2775b <printk>
   14c41:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:340
            printk("\t\tCMDHeader=0x%08X, CMDTable=0x%08X\n", port->clb, cmdheader->ctba);
   14c44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   14c47:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14c4a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   14c4d:	8b 00                	mov    eax,DWORD PTR [eax]
   14c4f:	83 ec 04             	sub    esp,0x4
   14c52:	52                   	push   edx
   14c53:	50                   	push   eax
   14c54:	68 10 6b 04 00       	push   0x46b10
   14c59:	e8 fd 2a 01 00       	call   2775b <printk>
   14c5e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:323 (discriminator 2)
    printk("\tNumber of Ports (NP):\t\t\t\t\t\t%u\n", ahciCaps->NP);
    //printk("Press a key for more ...");
    //waitForKeyboardKey();
    printk("AHCI: SATA Disks:\n");
    char p1[512];
    for (int cnt = 4; cnt < 10; cnt++)
   14c61:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:323 (discriminator 1)
   14c65:	83 7d e4 09          	cmp    DWORD PTR [ebp-0x1c],0x9
   14c69:	0f 8e bc fd ff ff    	jle    14a2b <printAHCICaps+0x3d1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:342
            HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
            HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
            printk("\t\tCLB=0x%08X, FB=0x%08X\n",port->clb,port->fb);
            printk("\t\tCMDHeader=0x%08X, CMDTable=0x%08X\n", port->clb, cmdheader->ctba);
        }
}
   14c6f:	90                   	nop
   14c70:	8d 65 f4             	lea    esp,[ebp-0xc]
   14c73:	5b                   	pop    ebx
   14c74:	5e                   	pop    esi
   14c75:	5f                   	pop    edi
   14c76:	5d                   	pop    ebp
   14c77:	c3                   	ret    

00014c78 <port_rebase>:
port_rebase():
/home/yogi/src/os/chrisOS/src/block/ahci.c:344

void port_rebase(volatile HBA_PORT *port, int portno, uintptr_t remapBase) {
   14c78:	55                   	push   ebp
   14c79:	89 e5                	mov    ebp,esp
   14c7b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/ahci.c:346
    //each command list is 1k (32k possible per port))
    printd(DEBUG_AHCI, "AHCI: Rebasing port %u (0x%08X) clb/fb from 0x%08X/0x%08X\n\t", portno, port, port->clb, port->fb);
   14c7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14c81:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14c84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14c87:	8b 00                	mov    eax,DWORD PTR [eax]
   14c89:	83 ec 08             	sub    esp,0x8
   14c8c:	52                   	push   edx
   14c8d:	50                   	push   eax
   14c8e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14c91:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   14c94:	68 38 6b 04 00       	push   0x46b38
   14c99:	68 00 20 00 00       	push   0x2000
   14c9e:	e8 d8 2a 01 00       	call   2777b <printd>
   14ca3:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:347
    stop_cmd(port); // Stop command engine
   14ca6:	83 ec 0c             	sub    esp,0xc
   14ca9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14cac:	e8 eb 01 00 00       	call   14e9c <stop_cmd>
   14cb1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:353

    // Command list offset: 1K*portno
    // Command list entry size = 32
    // Command list entry maxim count = 32
    // Command list maxim size = 32*32 = 1K per port
    port->clbu = 0;
   14cb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14cb7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:354
    port->clb = (remapBase + (portno<<15) + 0x1000) & 0xFFFFF000;
   14cbe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   14cc1:	c1 e0 0f             	shl    eax,0xf
   14cc4:	89 c2                	mov    edx,eax
   14cc6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   14cc9:	01 d0                	add    eax,edx
   14ccb:	05 00 10 00 00       	add    eax,0x1000
   14cd0:	25 00 f0 ff ff       	and    eax,0xfffff000
   14cd5:	89 c2                	mov    edx,eax
   14cd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14cda:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:355
    memset((void*) (port->clb), 0, 1024);
   14cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14cdf:	8b 00                	mov    eax,DWORD PTR [eax]
   14ce1:	83 ec 04             	sub    esp,0x4
   14ce4:	68 00 04 00 00       	push   0x400
   14ce9:	6a 00                	push   0x0
   14ceb:	50                   	push   eax
   14cec:	e8 18 09 01 00       	call   25609 <memset>
   14cf1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:356
    kMapPage(port->clb,port->clb,0x73); //make un-cached
   14cf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14cf7:	8b 10                	mov    edx,DWORD PTR [eax]
   14cf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14cfc:	8b 00                	mov    eax,DWORD PTR [eax]
   14cfe:	83 ec 04             	sub    esp,0x4
   14d01:	6a 73                	push   0x73
   14d03:	52                   	push   edx
   14d04:	50                   	push   eax
   14d05:	e8 ae ca ff ff       	call   117b8 <kMapPage>
   14d0a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:361
    
    //each FIS is 256 bytes
    // FIS offset: 32K+256*portno
    // FIS entry size = 256 bytes per port
    port->fbu = 0;
   14d0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d10:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:363
//    port->fb = (remapBase + (32 << 10) + (portno << 12) + 0x1000) & 0xFFFFF000;
    port->fb = (port->clb + 0x1000);
   14d17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d1a:	8b 00                	mov    eax,DWORD PTR [eax]
   14d1c:	8d 90 00 10 00 00    	lea    edx,[eax+0x1000]
   14d22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d25:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:364
    memset((void*) (port->fb), 0, 256);
   14d28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d2b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14d2e:	83 ec 04             	sub    esp,0x4
   14d31:	68 00 01 00 00       	push   0x100
   14d36:	6a 00                	push   0x0
   14d38:	50                   	push   eax
   14d39:	e8 cb 08 01 00       	call   25609 <memset>
   14d3e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:365
    kMapPage(port->fb,port->fb,0x73); //make un-cached
   14d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d44:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14d47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d4a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14d4d:	83 ec 04             	sub    esp,0x4
   14d50:	6a 73                	push   0x73
   14d52:	52                   	push   edx
   14d53:	50                   	push   eax
   14d54:	e8 5f ca ff ff       	call   117b8 <kMapPage>
   14d59:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:370


    // Command table offset: 40K + 8K*portno
    // Command table size = 256*32 = 8K per port
    HBA_CMD_HEADER *cmdheader = (HBA_CMD_HEADER*) (port->clb);
   14d5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d5f:	8b 00                	mov    eax,DWORD PTR [eax]
   14d61:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:371
    for (int i = 0; i < 32; i++) {
   14d64:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   14d6b:	eb 79                	jmp    14de6 <port_rebase+0x16e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:372 (discriminator 3)
        cmdheader[i].prdtl = 8; // 8 prdt entries per command table
   14d6d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14d70:	c1 e0 05             	shl    eax,0x5
   14d73:	89 c2                	mov    edx,eax
   14d75:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14d78:	01 d0                	add    eax,edx
   14d7a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
/home/yogi/src/os/chrisOS/src/block/ahci.c:375 (discriminator 3)
        // 256 bytes per command table, 64+16+48+16*8
        // Command table offset: 40K + 8K*portno + cmdheader_index*256
        cmdheader[i].ctba = remapBase + (40 << 10) + (portno << 13) + (i << 8);
   14d80:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14d83:	c1 e0 05             	shl    eax,0x5
   14d86:	89 c2                	mov    edx,eax
   14d88:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14d8b:	01 d0                	add    eax,edx
   14d8d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   14d90:	c1 e2 0d             	shl    edx,0xd
   14d93:	89 d1                	mov    ecx,edx
   14d95:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   14d98:	01 d1                	add    ecx,edx
   14d9a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   14d9d:	c1 e2 08             	shl    edx,0x8
   14da0:	01 ca                	add    edx,ecx
   14da2:	81 c2 00 a0 00 00    	add    edx,0xa000
   14da8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:376 (discriminator 3)
        cmdheader[i].ctbau = 0;
   14dab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14dae:	c1 e0 05             	shl    eax,0x5
   14db1:	89 c2                	mov    edx,eax
   14db3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14db6:	01 d0                	add    eax,edx
   14db8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:377 (discriminator 3)
        memset((void*) cmdheader[i].ctba, 0, 256);
   14dbf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14dc2:	c1 e0 05             	shl    eax,0x5
   14dc5:	89 c2                	mov    edx,eax
   14dc7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14dca:	01 d0                	add    eax,edx
   14dcc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14dcf:	83 ec 04             	sub    esp,0x4
   14dd2:	68 00 01 00 00       	push   0x100
   14dd7:	6a 00                	push   0x0
   14dd9:	50                   	push   eax
   14dda:	e8 2a 08 01 00       	call   25609 <memset>
   14ddf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:371 (discriminator 3)


    // Command table offset: 40K + 8K*portno
    // Command table size = 256*32 = 8K per port
    HBA_CMD_HEADER *cmdheader = (HBA_CMD_HEADER*) (port->clb);
    for (int i = 0; i < 32; i++) {
   14de2:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:371 (discriminator 1)
   14de6:	83 7d f4 1f          	cmp    DWORD PTR [ebp-0xc],0x1f
   14dea:	7e 81                	jle    14d6d <port_rebase+0xf5>
/home/yogi/src/os/chrisOS/src/block/ahci.c:379
        // Command table offset: 40K + 8K*portno + cmdheader_index*256
        cmdheader[i].ctba = remapBase + (40 << 10) + (portno << 13) + (i << 8);
        cmdheader[i].ctbau = 0;
        memset((void*) cmdheader[i].ctba, 0, 256);
    }
    printd(DEBUG_AHCI, " to 0x%08X/0x%08X\n", port->clb, port->fb);
   14dec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14def:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14df2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14df5:	8b 00                	mov    eax,DWORD PTR [eax]
   14df7:	52                   	push   edx
   14df8:	50                   	push   eax
   14df9:	68 74 6b 04 00       	push   0x46b74
   14dfe:	68 00 20 00 00       	push   0x2000
   14e03:	e8 73 29 01 00       	call   2777b <printd>
   14e08:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:380
    start_cmd(port); // Start command engine
   14e0b:	83 ec 0c             	sub    esp,0xc
   14e0e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14e11:	e8 06 00 00 00       	call   14e1c <start_cmd>
   14e16:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:381
}
   14e19:	90                   	nop
   14e1a:	c9                   	leave  
   14e1b:	c3                   	ret    

00014e1c <start_cmd>:
start_cmd():
/home/yogi/src/os/chrisOS/src/block/ahci.c:385

// Start command engine

void start_cmd(volatile HBA_PORT *port) {
   14e1c:	55                   	push   ebp
   14e1d:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/block/ahci.c:387
    // Wait until CR (bit15) is cleared
    while (port->cmd.CR);
   14e1f:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:387 (discriminator 1)
   14e20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14e23:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14e26:	c1 e8 0f             	shr    eax,0xf
   14e29:	83 e0 01             	and    eax,0x1
   14e2c:	84 c0                	test   al,al
   14e2e:	75 f0                	jne    14e20 <start_cmd+0x4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:390

    // Set FRE (bit4) and ST (bit0)
    port->cmd.FRE = 1;
   14e30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14e33:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14e36:	83 ca 10             	or     edx,0x10
   14e39:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:391
    port->cmd.ST = 1;
   14e3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14e3f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14e42:	83 ca 01             	or     edx,0x1
   14e45:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:392
}
   14e48:	90                   	nop
   14e49:	5d                   	pop    ebp
   14e4a:	c3                   	ret    

00014e4b <waitForPortIdle>:
waitForPortIdle():
/home/yogi/src/os/chrisOS/src/block/ahci.c:394

void waitForPortIdle(volatile HBA_PORT *port) {
   14e4b:	55                   	push   ebp
   14e4c:	89 e5                	mov    ebp,esp
   14e4e:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/block/ahci.c:395
    while (port->cmd.ST | port->cmd.CR | port->cmd.FRE | port->cmd.FR) {
   14e51:	eb 0d                	jmp    14e60 <waitForPortIdle+0x15>
/home/yogi/src/os/chrisOS/src/block/ahci.c:396
        waitTicks(20);
   14e53:	83 ec 0c             	sub    esp,0xc
   14e56:	6a 14                	push   0x14
   14e58:	e8 22 3b 01 00       	call   2897f <waitTicks>
   14e5d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:395
    port->cmd.FRE = 1;
    port->cmd.ST = 1;
}

void waitForPortIdle(volatile HBA_PORT *port) {
    while (port->cmd.ST | port->cmd.CR | port->cmd.FRE | port->cmd.FR) {
   14e60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14e63:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14e66:	83 e0 01             	and    eax,0x1
   14e69:	89 c2                	mov    edx,eax
   14e6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14e6e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14e71:	c1 e8 0f             	shr    eax,0xf
   14e74:	83 e0 01             	and    eax,0x1
   14e77:	09 c2                	or     edx,eax
   14e79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14e7c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14e7f:	c1 e8 04             	shr    eax,0x4
   14e82:	83 e0 01             	and    eax,0x1
   14e85:	09 c2                	or     edx,eax
   14e87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14e8a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14e8d:	c1 e8 0e             	shr    eax,0xe
   14e90:	83 e0 01             	and    eax,0x1
   14e93:	09 d0                	or     eax,edx
   14e95:	84 c0                	test   al,al
   14e97:	75 ba                	jne    14e53 <waitForPortIdle+0x8>
/home/yogi/src/os/chrisOS/src/block/ahci.c:398
        waitTicks(20);
    }
}
   14e99:	90                   	nop
   14e9a:	c9                   	leave  
   14e9b:	c3                   	ret    

00014e9c <stop_cmd>:
stop_cmd():
/home/yogi/src/os/chrisOS/src/block/ahci.c:402

// Stop command engine

void stop_cmd(volatile volatile HBA_PORT *port) {
   14e9c:	55                   	push   ebp
   14e9d:	89 e5                	mov    ebp,esp
   14e9f:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/block/ahci.c:404
    // Clear ST (bit0)
    port->cmd.ST = 0;
   14ea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14ea5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14ea8:	83 e2 fe             	and    edx,0xfffffffe
   14eab:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:407
    // Wait until FR (bit14), CR (bit15) are cleared
    while (1) {
        if (!(port->cmd.FR))
   14eae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14eb1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14eb4:	c1 e8 0e             	shr    eax,0xe
   14eb7:	83 e0 01             	and    eax,0x1
   14eba:	84 c0                	test   al,al
   14ebc:	74 1f                	je     14edd <stop_cmd+0x41>
/home/yogi/src/os/chrisOS/src/block/ahci.c:409
            break;
        if (!(port->cmd.CR))
   14ebe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14ec1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14ec4:	c1 e8 0f             	shr    eax,0xf
   14ec7:	83 e0 01             	and    eax,0x1
   14eca:	84 c0                	test   al,al
   14ecc:	74 12                	je     14ee0 <stop_cmd+0x44>
/home/yogi/src/os/chrisOS/src/block/ahci.c:411
            break;
        waitTicks(20);
   14ece:	83 ec 0c             	sub    esp,0xc
   14ed1:	6a 14                	push   0x14
   14ed3:	e8 a7 3a 01 00       	call   2897f <waitTicks>
   14ed8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:412
    }
   14edb:	eb d1                	jmp    14eae <stop_cmd+0x12>
/home/yogi/src/os/chrisOS/src/block/ahci.c:408
    // Clear ST (bit0)
    port->cmd.ST = 0;
    // Wait until FR (bit14), CR (bit15) are cleared
    while (1) {
        if (!(port->cmd.FR))
            break;
   14edd:	90                   	nop
   14ede:	eb 01                	jmp    14ee1 <stop_cmd+0x45>
/home/yogi/src/os/chrisOS/src/block/ahci.c:410
        if (!(port->cmd.CR))
            break;
   14ee0:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:415
        waitTicks(20);
    }

    // Clear FRE (bit4)
    port->cmd.FRE = 0;
   14ee1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14ee4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14ee7:	83 e2 ef             	and    edx,0xffffffef
   14eea:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:416
}
   14eed:	90                   	nop
   14eee:	c9                   	leave  
   14eef:	c3                   	ret    

00014ef0 <ahciIdentify>:
ahciIdentify():
/home/yogi/src/os/chrisOS/src/block/ahci.c:418

void ahciIdentify(volatile HBA_PORT* port, int deviceType) {
   14ef0:	55                   	push   ebp
   14ef1:	89 e5                	mov    ebp,esp
   14ef3:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/block/ahci.c:419
    printd(DEBUG_AHCI, "AHCI: ahciIdentify, port@0x%08X(%u), 0x%08X\n", port, kATADeviceInfoCount, &port->clb);
   14ef6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   14ef9:	a1 04 98 12 00       	mov    eax,ds:0x129804
   14efe:	83 ec 0c             	sub    esp,0xc
   14f01:	52                   	push   edx
   14f02:	50                   	push   eax
   14f03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14f06:	68 88 6b 04 00       	push   0x46b88
   14f0b:	68 00 20 00 00       	push   0x2000
   14f10:	e8 66 28 01 00       	call   2777b <printd>
   14f15:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:420
    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) port->clb;
   14f18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14f1b:	8b 00                	mov    eax,DWORD PTR [eax]
   14f1d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:421
    int slot = find_cmdslot(port);
   14f20:	83 ec 0c             	sub    esp,0xc
   14f23:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14f26:	e8 66 03 00 00       	call   15291 <find_cmdslot>
   14f2b:	83 c4 10             	add    esp,0x10
   14f2e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:422
    if (slot == -1)
   14f31:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   14f35:	0f 84 53 03 00 00    	je     1528e <ahciIdentify+0x39e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:424
        return;
    port->ie.AsUlong = 0xFFFFFFFF;
   14f3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14f3e:	c7 40 14 ff ff ff ff 	mov    DWORD PTR [eax+0x14],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:425
    HBA_CMD_HEADER* cmdheader = cmdhdr + slot;
   14f45:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14f48:	c1 e0 05             	shl    eax,0x5
   14f4b:	89 c2                	mov    edx,eax
   14f4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14f50:	01 d0                	add    eax,edx
   14f52:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:426
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   14f55:	83 ec 04             	sub    esp,0x4
   14f58:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   14f5b:	68 90 64 04 00       	push   0x46490
   14f60:	68 00 20 00 00       	push   0x2000
   14f65:	e8 11 28 01 00       	call   2777b <printd>
   14f6a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:427
    cmdheader->prdtl = 1;
   14f6d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14f70:	66 c7 40 02 01 00    	mov    WORD PTR [eax+0x2],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:428
    cmdheader->cfl = 5; //sizeof (FIS_REG_H2D) / sizeof (uint32_t);
   14f76:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14f79:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14f7c:	83 e2 e0             	and    edx,0xffffffe0
   14f7f:	83 ca 05             	or     edx,0x5
   14f82:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:429
    cmdheader->w = 0;
   14f84:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14f87:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14f8a:	83 e2 bf             	and    edx,0xffffffbf
   14f8d:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:430
    cmdheader->a = 0;
   14f8f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14f92:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14f95:	83 e2 df             	and    edx,0xffffffdf
   14f98:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:431
    cmdheader->c = 0;
   14f9a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14f9d:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   14fa1:	83 e2 fb             	and    edx,0xfffffffb
   14fa4:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:432
    cmdheader->p = 0;
   14fa7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14faa:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14fad:	83 e2 7f             	and    edx,0x7f
   14fb0:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:433
    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   14fb2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14fb5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14fb8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:435
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
   14fbb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14fbe:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
/home/yogi/src/os/chrisOS/src/block/ahci.c:434
    cmdheader->w = 0;
    cmdheader->a = 0;
    cmdheader->c = 0;
    cmdheader->p = 0;
    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
   14fc2:	0f b7 c0             	movzx  eax,ax
   14fc5:	83 c0 08             	add    eax,0x8
   14fc8:	c1 e0 04             	shl    eax,0x4
   14fcb:	83 ec 04             	sub    esp,0x4
   14fce:	50                   	push   eax
   14fcf:	6a 00                	push   0x0
   14fd1:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   14fd4:	e8 30 06 01 00       	call   25609 <memset>
   14fd9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:436
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   14fdc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14fdf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14fe2:	50                   	push   eax
   14fe3:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   14fe6:	68 a8 64 04 00       	push   0x464a8
   14feb:	68 00 20 00 00       	push   0x2000
   14ff0:	e8 86 27 01 00       	call   2777b <printd>
   14ff5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:437
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
   14ff8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14ffb:	c7 80 80 00 00 00 00 	mov    DWORD PTR [eax+0x80],0xc53000
   15002:	30 c5 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:438
    cmdtbl->prdt_entry[0].dbc = 0x1ff;
   15005:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   15008:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [eax+0x8c]
   1500e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   15014:	81 ca ff 01 00 00    	or     edx,0x1ff
   1501a:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:439
    cmdtbl->prdt_entry[0].i = 1;
   15020:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   15023:	0f b6 90 8f 00 00 00 	movzx  edx,BYTE PTR [eax+0x8f]
   1502a:	83 ca 80             	or     edx,0xffffff80
   1502d:	88 90 8f 00 00 00    	mov    BYTE PTR [eax+0x8f],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:441

    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   15033:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   15036:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:442
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   15039:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1503c:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/src/os/chrisOS/src/block/ahci.c:443
    cmdfis->c = 1; // Command
   1503f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   15042:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   15046:	83 ca 80             	or     edx,0xffffff80
   15049:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:444
    if (deviceType == AHCI_DEV_SATAPI)
   1504c:	83 7d 0c 04          	cmp    DWORD PTR [ebp+0xc],0x4
   15050:	75 09                	jne    1505b <ahciIdentify+0x16b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:445
        cmdfis->command = ATA_IDENTIFY_CDROM_COMMAND;
   15052:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   15055:	c6 40 02 a1          	mov    BYTE PTR [eax+0x2],0xa1
   15059:	eb 07                	jmp    15062 <ahciIdentify+0x172>
/home/yogi/src/os/chrisOS/src/block/ahci.c:447
    else
        cmdfis->command = ATA_IDENTIFY_COMMAND;
   1505b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1505e:	c6 40 02 ec          	mov    BYTE PTR [eax+0x2],0xec
/home/yogi/src/os/chrisOS/src/block/ahci.c:448
    cmdfis->lba0 = 0;
   15062:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   15065:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:449
    cmdfis->lba1 = 0;
   15069:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1506c:	c6 40 05 00          	mov    BYTE PTR [eax+0x5],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:450
    cmdfis->lba2 = 0;
   15070:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   15073:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:451
    cmdfis->lba3 = 0;
   15077:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1507a:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:452
    cmdfis->lba4 = 0;
   1507e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   15081:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:453
    cmdfis->lba5 = 0;
   15085:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   15088:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:454
    cmdfis->lba5 = 0;
   1508c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1508f:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:455
    cmdfis->pmport = 0;
   15093:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   15096:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   1509a:	83 e2 f0             	and    edx,0xfffffff0
   1509d:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:456
    cmdfis->device = 0;
   150a0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   150a3:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:457
    cmdfis->countl = 1;
   150a7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   150aa:	c6 40 0c 01          	mov    BYTE PTR [eax+0xc],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:458
    cmdfis->counth = 0;
   150ae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   150b1:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:459
    int lCmdVal = AhciIssueCmd(port, slot);
   150b5:	83 ec 08             	sub    esp,0x8
   150b8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   150bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   150be:	e8 fd ea ff ff       	call   13bc0 <AhciIssueCmd>
   150c3:	83 c4 10             	add    esp,0x10
   150c6:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:460
    if (!lCmdVal) {
   150c9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   150cd:	75 18                	jne    150e7 <ahciIdentify+0x1f7>
/home/yogi/src/os/chrisOS/src/block/ahci.c:461
        printk("AHCI: ***Error identifying device (%u)***\n",lCmdVal);
   150cf:	83 ec 08             	sub    esp,0x8
   150d2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   150d5:	68 b8 6b 04 00       	push   0x46bb8
   150da:	e8 7c 26 01 00       	call   2775b <printk>
   150df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:462
        return;
   150e2:	e9 a8 01 00 00       	jmp    1528f <ahciIdentify+0x39f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:464
    }
    kATADeviceInfo[kATADeviceInfoCount].ATADeviceAvailable = true;
   150e7:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   150ed:	a1 04 98 12 00       	mov    eax,ds:0x129804
   150f2:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   150f8:	01 d0                	add    eax,edx
   150fa:	c6 80 51 02 00 00 01 	mov    BYTE PTR [eax+0x251],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:465
    kATADeviceInfo[kATADeviceInfoCount].bus = SATA;
   15101:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   15107:	a1 04 98 12 00       	mov    eax,ds:0x129804
   1510c:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   15112:	01 d0                	add    eax,edx
   15114:	c7 80 61 02 00 00 02 	mov    DWORD PTR [eax+0x261],0x2
   1511b:	00 00 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:466
    kATADeviceInfo[kATADeviceInfoCount].driveNo = kATADeviceInfoCount;
   1511e:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   15124:	a1 04 98 12 00       	mov    eax,ds:0x129804
   15129:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   1512f:	01 d0                	add    eax,edx
   15131:	8b 15 04 98 12 00    	mov    edx,DWORD PTR ds:0x129804
   15137:	89 90 65 02 00 00    	mov    DWORD PTR [eax+0x265],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:467
    kATADeviceInfo[kATADeviceInfoCount].ioPort = (uintptr_t) port;
   1513d:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   15143:	a1 04 98 12 00       	mov    eax,ds:0x129804
   15148:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   1514e:	01 c2                	add    edx,eax
   15150:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   15153:	89 82 69 02 00 00    	mov    DWORD PTR [edx+0x269],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:468
    kATADeviceInfo[kATADeviceInfoCount].irqNum = 0;
   15159:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   1515f:	a1 04 98 12 00       	mov    eax,ds:0x129804
   15164:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   1516a:	01 d0                	add    eax,edx
   1516c:	c6 80 6d 02 00 00 00 	mov    BYTE PTR [eax+0x26d],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:469
    kATADeviceInfo[kATADeviceInfoCount].driveHeadPortDesignation = 0x0;
   15173:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   15179:	a1 04 98 12 00       	mov    eax,ds:0x129804
   1517e:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   15184:	01 d0                	add    eax,edx
   15186:	c6 80 6e 02 00 00 00 	mov    BYTE PTR [eax+0x26e],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:470
    kATADeviceInfo[kATADeviceInfoCount].queryATAData = false;
   1518d:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   15193:	a1 04 98 12 00       	mov    eax,ds:0x129804
   15198:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   1519e:	01 d0                	add    eax,edx
   151a0:	c6 80 50 02 00 00 00 	mov    BYTE PTR [eax+0x250],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:471
    if (deviceType == AHCI_DEV_SATAPI)
   151a7:	83 7d 0c 04          	cmp    DWORD PTR [ebp+0xc],0x4
   151ab:	75 1f                	jne    151cc <ahciIdentify+0x2dc>
/home/yogi/src/os/chrisOS/src/block/ahci.c:472
        kATADeviceInfo[kATADeviceInfoCount].ATADeviceType=ATA_DEVICE_TYPE_SATA_CD;
   151ad:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   151b3:	a1 04 98 12 00       	mov    eax,ds:0x129804
   151b8:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   151be:	01 d0                	add    eax,edx
   151c0:	c7 80 52 02 00 00 03 	mov    DWORD PTR [eax+0x252],0x3
   151c7:	00 00 00 
   151ca:	eb 1d                	jmp    151e9 <ahciIdentify+0x2f9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:474
    else
        kATADeviceInfo[kATADeviceInfoCount].ATADeviceType=ATA_DEVICE_TYPE_SATA_HD;
   151cc:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   151d2:	a1 04 98 12 00       	mov    eax,ds:0x129804
   151d7:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   151dd:	01 d0                	add    eax,edx
   151df:	c7 80 52 02 00 00 02 	mov    DWORD PTR [eax+0x252],0x2
   151e6:	00 00 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:475
    kATADeviceInfo[kATADeviceInfoCount].ABAR=ahciABAR;
   151e9:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   151ef:	a1 04 98 12 00       	mov    eax,ds:0x129804
   151f4:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   151fa:	01 c2                	add    edx,eax
   151fc:	a1 94 99 12 00       	mov    eax,ds:0x129994
   15201:	89 82 6f 02 00 00    	mov    DWORD PTR [edx+0x26f],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:476
    memcpy(kATADeviceInfo[kATADeviceInfoCount].ATAIdentifyData, (void*) AHCI_DISK_BUFFER_ADDRESS, 512);
   15207:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   1520d:	a1 04 98 12 00       	mov    eax,ds:0x129804
   15212:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   15218:	01 d0                	add    eax,edx
   1521a:	83 ec 04             	sub    esp,0x4
   1521d:	68 00 02 00 00       	push   0x200
   15222:	68 00 30 c5 00       	push   0xc53000
   15227:	50                   	push   eax
   15228:	e8 8f 0e 01 00       	call   260bc <memcpy>
   1522d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:477
    ataIdentify(&kATADeviceInfo[kATADeviceInfoCount++]);
   15230:	8b 0d 00 98 12 00    	mov    ecx,DWORD PTR ds:0x129800
   15236:	a1 04 98 12 00       	mov    eax,ds:0x129804
   1523b:	8d 50 01             	lea    edx,[eax+0x1]
   1523e:	89 15 04 98 12 00    	mov    DWORD PTR ds:0x129804,edx
   15244:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   1524a:	01 c8                	add    eax,ecx
   1524c:	83 ec 0c             	sub    esp,0xc
   1524f:	50                   	push   eax
   15250:	e8 b9 d7 00 00       	call   22a0e <ataIdentify>
   15255:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:478
    printd(DEBUG_AHCI, "AHCI: SATA device found, name=%s\n", kATADeviceInfo[kATADeviceInfoCount - 1].ATADeviceModel);
   15258:	a1 00 98 12 00       	mov    eax,ds:0x129800
   1525d:	8b 15 04 98 12 00    	mov    edx,DWORD PTR ds:0x129804
   15263:	69 d2 73 02 00 00    	imul   edx,edx,0x273
   15269:	81 ea 73 02 00 00    	sub    edx,0x273
   1526f:	01 d0                	add    eax,edx
   15271:	05 00 02 00 00       	add    eax,0x200
   15276:	83 ec 04             	sub    esp,0x4
   15279:	50                   	push   eax
   1527a:	68 e4 6b 04 00       	push   0x46be4
   1527f:	68 00 20 00 00       	push   0x2000
   15284:	e8 f2 24 01 00       	call   2777b <printd>
   15289:	83 c4 10             	add    esp,0x10
   1528c:	eb 01                	jmp    1528f <ahciIdentify+0x39f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:423
void ahciIdentify(volatile HBA_PORT* port, int deviceType) {
    printd(DEBUG_AHCI, "AHCI: ahciIdentify, port@0x%08X(%u), 0x%08X\n", port, kATADeviceInfoCount, &port->clb);
    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) port->clb;
    int slot = find_cmdslot(port);
    if (slot == -1)
        return;
   1528e:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:479
        kATADeviceInfo[kATADeviceInfoCount].ATADeviceType=ATA_DEVICE_TYPE_SATA_HD;
    kATADeviceInfo[kATADeviceInfoCount].ABAR=ahciABAR;
    memcpy(kATADeviceInfo[kATADeviceInfoCount].ATAIdentifyData, (void*) AHCI_DISK_BUFFER_ADDRESS, 512);
    ataIdentify(&kATADeviceInfo[kATADeviceInfoCount++]);
    printd(DEBUG_AHCI, "AHCI: SATA device found, name=%s\n", kATADeviceInfo[kATADeviceInfoCount - 1].ATADeviceModel);
}
   1528f:	c9                   	leave  
   15290:	c3                   	ret    

00015291 <find_cmdslot>:
find_cmdslot():
/home/yogi/src/os/chrisOS/src/block/ahci.c:482
// Find a free command list slot

int find_cmdslot(volatile HBA_PORT *port) {
   15291:	55                   	push   ebp
   15292:	89 e5                	mov    ebp,esp
   15294:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/ahci.c:483
    printd(DEBUG_AHCI, "AHCI: find_cmdslot - finding a slot to use to execute a command\n");
   15297:	83 ec 08             	sub    esp,0x8
   1529a:	68 08 6c 04 00       	push   0x46c08
   1529f:	68 00 20 00 00       	push   0x2000
   152a4:	e8 d2 24 01 00       	call   2777b <printd>
   152a9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:487
    // An empty command slot has its respective bit cleared to �0� in both the PxCI and PxSACT registers.
    // If not set in SACT and CI, the slot is free // Checked
    
    uint32_t slots = (/*port->sact | */port->ci);
   152ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   152af:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   152b2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:488
    int num_of_slots = ahciABAR->cap.NCS;
   152b5:	a1 94 99 12 00       	mov    eax,ds:0x129994
   152ba:	8b 00                	mov    eax,DWORD PTR [eax]
   152bc:	c1 e8 08             	shr    eax,0x8
   152bf:	83 e0 1f             	and    eax,0x1f
   152c2:	0f b6 c0             	movzx  eax,al
   152c5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:489
    printd(DEBUG_AHCI,"ahciABAR = %08X, Total slots available: %d\n",ahciABAR, ahciABAR->cap.NCS);
   152c8:	a1 94 99 12 00       	mov    eax,ds:0x129994
   152cd:	8b 00                	mov    eax,DWORD PTR [eax]
   152cf:	c1 e8 08             	shr    eax,0x8
   152d2:	83 e0 1f             	and    eax,0x1f
   152d5:	0f b6 d0             	movzx  edx,al
   152d8:	a1 94 99 12 00       	mov    eax,ds:0x129994
   152dd:	52                   	push   edx
   152de:	50                   	push   eax
   152df:	68 4c 6c 04 00       	push   0x46c4c
   152e4:	68 00 20 00 00       	push   0x2000
   152e9:	e8 8d 24 01 00       	call   2777b <printd>
   152ee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:491
    int i;
    for (i = 0; i < num_of_slots; i++) {
   152f1:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   152f8:	eb 46                	jmp    15340 <find_cmdslot+0xaf>
/home/yogi/src/os/chrisOS/src/block/ahci.c:493

        if ((slots & 1) == 0) {
   152fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   152fd:	83 e0 01             	and    eax,0x1
   15300:	85 c0                	test   eax,eax
   15302:	75 1d                	jne    15321 <find_cmdslot+0x90>
/home/yogi/src/os/chrisOS/src/block/ahci.c:494
            printd(DEBUG_AHCI, "AHCI: [command slot is : %d]\n", i);
   15304:	83 ec 04             	sub    esp,0x4
   15307:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1530a:	68 78 6c 04 00       	push   0x46c78
   1530f:	68 00 20 00 00       	push   0x2000
   15314:	e8 62 24 01 00       	call   2777b <printd>
   15319:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:495
            return i;
   1531c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1531f:	eb 44                	jmp    15365 <find_cmdslot+0xd4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:498 (discriminator 2)

        }
        printd(DEBUG_AHCI, "Slot %u is busy (0x%08X)\n", i,slots);
   15321:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   15324:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   15327:	68 96 6c 04 00       	push   0x46c96
   1532c:	68 00 20 00 00       	push   0x2000
   15331:	e8 45 24 01 00       	call   2777b <printd>
   15336:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:499 (discriminator 2)
        slots >>= 1;
   15339:	d1 6d f4             	shr    DWORD PTR [ebp-0xc],1
/home/yogi/src/os/chrisOS/src/block/ahci.c:491 (discriminator 2)
    
    uint32_t slots = (/*port->sact | */port->ci);
    int num_of_slots = ahciABAR->cap.NCS;
    printd(DEBUG_AHCI,"ahciABAR = %08X, Total slots available: %d\n",ahciABAR, ahciABAR->cap.NCS);
    int i;
    for (i = 0; i < num_of_slots; i++) {
   1533c:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:491 (discriminator 1)
   15340:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15343:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   15346:	7c b2                	jl     152fa <find_cmdslot+0x69>
/home/yogi/src/os/chrisOS/src/block/ahci.c:501

        }
        printd(DEBUG_AHCI, "Slot %u is busy (0x%08X)\n", i,slots);
        slots >>= 1;
    }
    printd(DEBUG_AHCI, "AHCI: Cannot find free command list entry, count=%u, slots=0x%08X\n", num_of_slots, slots);
   15348:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1534b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1534e:	68 b0 6c 04 00       	push   0x46cb0
   15353:	68 00 20 00 00       	push   0x2000
   15358:	e8 1e 24 01 00       	call   2777b <printd>
   1535d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:502
    return -1;
   15360:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:503
}
   15365:	c9                   	leave  
   15366:	c3                   	ret    

00015367 <ahciSetCurrentDisk>:
ahciSetCurrentDisk():
/home/yogi/src/os/chrisOS/src/block/ahci.c:508

#define ATA_DEV_BUSY 0x80
#define ATA_DEV_DRQ 0x08

void ahciSetCurrentDisk(volatile HBA_PORT* port) {
   15367:	55                   	push   ebp
   15368:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/block/ahci.c:509
    kAHCICurrentDisk = port;
   1536a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1536d:	a3 4c 99 12 00       	mov    ds:0x12994c,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:510
}
   15372:	90                   	nop
   15373:	5d                   	pop    ebp
   15374:	c3                   	ret    

00015375 <ahciSetCurrentPart>:
ahciSetCurrentPart():
/home/yogi/src/os/chrisOS/src/block/ahci.c:513

void ahciSetCurrentPart(partEntry_t part) 
{
   15375:	55                   	push   ebp
   15376:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/block/ahci.c:514
    kAHCICurrentPart = part;
   15378:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1537b:	a3 50 99 12 00       	mov    ds:0x129950,eax
   15380:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15383:	a3 54 99 12 00       	mov    ds:0x129954,eax
   15388:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1538b:	a3 58 99 12 00       	mov    ds:0x129958,eax
   15390:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   15393:	a3 5c 99 12 00       	mov    ds:0x12995c,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:515
}
   15398:	90                   	nop
   15399:	5d                   	pop    ebp
   1539a:	c3                   	ret    

0001539b <ahciRead>:
ahciRead():
/home/yogi/src/os/chrisOS/src/block/ahci.c:517

int ahciRead(volatile HBA_PORT* port, int sector, uint8_t* buffer, int sector_count) {
   1539b:	55                   	push   ebp
   1539c:	89 e5                	mov    ebp,esp
   1539e:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/block/ahci.c:518
    ahciSetCurrentDisk(port);
   153a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   153a4:	e8 be ff ff ff       	call   15367 <ahciSetCurrentDisk>
   153a9:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/block/ahci.c:519
    if (ahciBlockingRead28(sector, buffer, sector_count))
   153ac:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   153af:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   153b2:	83 ec 04             	sub    esp,0x4
   153b5:	52                   	push   edx
   153b6:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   153b9:	50                   	push   eax
   153ba:	e8 13 00 00 00       	call   153d2 <ahciBlockingRead28>
   153bf:	83 c4 10             	add    esp,0x10
   153c2:	85 c0                	test   eax,eax
   153c4:	74 05                	je     153cb <ahciRead+0x30>
/home/yogi/src/os/chrisOS/src/block/ahci.c:520
        return sector_count;
   153c6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   153c9:	eb 05                	jmp    153d0 <ahciRead+0x35>
/home/yogi/src/os/chrisOS/src/block/ahci.c:522
    else
        return 0;
   153cb:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:523
}
   153d0:	c9                   	leave  
   153d1:	c3                   	ret    

000153d2 <ahciBlockingRead28>:
ahciBlockingRead28():
/home/yogi/src/os/chrisOS/src/block/ahci.c:526

///Read the current disk *partition* 
int ahciBlockingRead28(uint32_t sector, uint8_t *buffer, uint32_t sector_count) {
   153d2:	55                   	push   ebp
   153d3:	89 e5                	mov    ebp,esp
   153d5:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/block/ahci.c:527
    int prdCntr = 0;
   153d8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:530

    //CLR 06/07/2016 - Must add partition start sector
    sector+=kAHCICurrentPart.partStartSector;
   153df:	a1 50 99 12 00       	mov    eax,ds:0x129950
   153e4:	01 45 08             	add    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:532
    
    memset(buffer,0,sector_count*512);
   153e7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   153ea:	c1 e0 09             	shl    eax,0x9
   153ed:	83 ec 04             	sub    esp,0x4
   153f0:	50                   	push   eax
   153f1:	6a 00                	push   0x0
   153f3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   153f6:	e8 0e 02 01 00       	call   25609 <memset>
   153fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:534
    
    printd(DEBUG_AHCI, "AHCI: read on port=0x%08X,sector=0x%08X,buffer=0x%08X,sector_count=%u\n", kAHCICurrentDisk,sector,buffer,sector_count);
   153fe:	a1 4c 99 12 00       	mov    eax,ds:0x12994c
   15403:	83 ec 08             	sub    esp,0x8
   15406:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   15409:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1540c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1540f:	50                   	push   eax
   15410:	68 f4 6c 04 00       	push   0x46cf4
   15415:	68 00 20 00 00       	push   0x2000
   1541a:	e8 5c 23 01 00       	call   2777b <printd>
   1541f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:536

    kAHCICurrentDisk->pxis.AsUlong = (uint32_t) - 1; // Clear pending interrupt bits
   15422:	a1 4c 99 12 00       	mov    eax,ds:0x12994c
   15427:	c7 40 10 ff ff ff ff 	mov    DWORD PTR [eax+0x10],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:537
    int spin = 0; // Spin lock timeout counter
   1542e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:539

    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) kAHCICurrentDisk->clb;
   15435:	a1 4c 99 12 00       	mov    eax,ds:0x12994c
   1543a:	8b 00                	mov    eax,DWORD PTR [eax]
   1543c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:540
    int slot = find_cmdslot(kAHCICurrentDisk);
   1543f:	a1 4c 99 12 00       	mov    eax,ds:0x12994c
   15444:	83 ec 0c             	sub    esp,0xc
   15447:	50                   	push   eax
   15448:	e8 44 fe ff ff       	call   15291 <find_cmdslot>
   1544d:	83 c4 10             	add    esp,0x10
   15450:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:541
    if (slot == -1)
   15453:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   15457:	75 0a                	jne    15463 <ahciBlockingRead28+0x91>
/home/yogi/src/os/chrisOS/src/block/ahci.c:542
        return false;
   15459:	b8 00 00 00 00       	mov    eax,0x0
   1545e:	e9 41 02 00 00       	jmp    156a4 <ahciBlockingRead28+0x2d2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:543
    HBA_CMD_HEADER* cmdheader = cmdhdr + slot;
   15463:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   15466:	c1 e0 05             	shl    eax,0x5
   15469:	89 c2                	mov    edx,eax
   1546b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1546e:	01 d0                	add    eax,edx
   15470:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:544
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   15473:	83 ec 04             	sub    esp,0x4
   15476:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   15479:	68 90 64 04 00       	push   0x46490
   1547e:	68 00 20 00 00       	push   0x2000
   15483:	e8 f3 22 01 00       	call   2777b <printd>
   15488:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:545
    cmdheader->prdtl = (uint16_t) ((sector_count - 1) >> 4) + 1; // PRDT entries count
   1548b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1548e:	83 e8 01             	sub    eax,0x1
   15491:	c1 e8 04             	shr    eax,0x4
   15494:	8d 50 01             	lea    edx,[eax+0x1]
   15497:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1549a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/src/os/chrisOS/src/block/ahci.c:547

    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) (cmdheader->ctba);
   1549e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   154a1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   154a4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:549
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
   154a7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   154aa:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
/home/yogi/src/os/chrisOS/src/block/ahci.c:548
    HBA_CMD_HEADER* cmdheader = cmdhdr + slot;
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
    cmdheader->prdtl = (uint16_t) ((sector_count - 1) >> 4) + 1; // PRDT entries count

    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) (cmdheader->ctba);
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
   154ae:	0f b7 c0             	movzx  eax,ax
   154b1:	83 c0 08             	add    eax,0x8
   154b4:	c1 e0 04             	shl    eax,0x4
   154b7:	83 ec 04             	sub    esp,0x4
   154ba:	50                   	push   eax
   154bb:	6a 00                	push   0x0
   154bd:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   154c0:	e8 44 01 01 00       	call   25609 <memset>
   154c5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:550
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: read - cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   154c8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   154cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   154ce:	50                   	push   eax
   154cf:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   154d2:	68 3c 6d 04 00       	push   0x46d3c
   154d7:	68 00 20 00 00       	push   0x2000
   154dc:	e8 9a 22 01 00       	call   2777b <printd>
   154e1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:553

    // 8K bytes (16 sectors) per PRDT
    for (int i = 0; i < cmdheader->prdtl - 1; i++) {
   154e4:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   154eb:	eb 5b                	jmp    15548 <ahciBlockingRead28+0x176>
/home/yogi/src/os/chrisOS/src/block/ahci.c:554 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].dba = (uint32_t) buffer;
   154ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   154f0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   154f3:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   154f6:	83 c1 08             	add    ecx,0x8
   154f9:	c1 e1 04             	shl    ecx,0x4
   154fc:	01 ca                	add    edx,ecx
   154fe:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:555 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].dbc = 8 * 1024; // 8K bytes
   15500:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   15503:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   15506:	83 c2 08             	add    edx,0x8
   15509:	c1 e2 04             	shl    edx,0x4
   1550c:	01 d0                	add    eax,edx
   1550e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   15511:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   15517:	80 ce 20             	or     dh,0x20
   1551a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:556 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].i = 1;
   1551d:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   15520:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   15523:	83 c2 08             	add    edx,0x8
   15526:	c1 e2 04             	shl    edx,0x4
   15529:	01 d0                	add    eax,edx
   1552b:	0f b6 50 0f          	movzx  edx,BYTE PTR [eax+0xf]
   1552f:	83 ca 80             	or     edx,0xffffff80
   15532:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:557 (discriminator 3)
        buffer += 4 * 1024; // 4K words
   15535:	81 45 0c 00 10 00 00 	add    DWORD PTR [ebp+0xc],0x1000
/home/yogi/src/os/chrisOS/src/block/ahci.c:558 (discriminator 3)
        sector_count -= 16; // 16 sectors
   1553c:	83 6d 10 10          	sub    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:559 (discriminator 3)
        prdCntr++;
   15540:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:553 (discriminator 3)
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: read - cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);

    // 8K bytes (16 sectors) per PRDT
    for (int i = 0; i < cmdheader->prdtl - 1; i++) {
   15544:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:553 (discriminator 1)
   15548:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1554b:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1554f:	0f b7 c0             	movzx  eax,ax
   15552:	83 e8 01             	sub    eax,0x1
   15555:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   15558:	7f 93                	jg     154ed <ahciBlockingRead28+0x11b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:562
        buffer += 4 * 1024; // 4K words
        sector_count -= 16; // 16 sectors
        prdCntr++;
    }
    // Last entry
    cmdtbl->prdt_entry[prdCntr].dba = (uint32_t) buffer;
   1555a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1555d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   15560:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   15563:	83 c1 08             	add    ecx,0x8
   15566:	c1 e1 04             	shl    ecx,0x4
   15569:	01 ca                	add    edx,ecx
   1556b:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:563
    cmdtbl->prdt_entry[prdCntr].dbc = sector_count << 9; // 512 bytes per sector
   1556d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   15570:	c1 e0 09             	shl    eax,0x9
   15573:	25 ff ff 3f 00       	and    eax,0x3fffff
   15578:	89 c1                	mov    ecx,eax
   1557a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1557d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   15580:	83 c2 08             	add    edx,0x8
   15583:	c1 e2 04             	shl    edx,0x4
   15586:	01 d0                	add    eax,edx
   15588:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
   1558e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   15591:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   15597:	09 ca                	or     edx,ecx
   15599:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:564
    cmdtbl->prdt_entry[prdCntr].i = 1;
   1559c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1559f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   155a2:	83 c2 08             	add    edx,0x8
   155a5:	c1 e2 04             	shl    edx,0x4
   155a8:	01 d0                	add    eax,edx
   155aa:	0f b6 50 0f          	movzx  edx,BYTE PTR [eax+0xf]
   155ae:	83 ca 80             	or     edx,0xffffff80
   155b1:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:567

    // Setup command
    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   155b4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   155b7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:569

    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   155ba:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   155bd:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/src/os/chrisOS/src/block/ahci.c:570
    cmdfis->c = 1; // Command
   155c0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   155c3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   155c7:	83 ca 80             	or     edx,0xffffff80
   155ca:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:571
    cmdfis->command = ATA_CMD_READ_DMA_EX;
   155cd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   155d0:	c6 40 02 25          	mov    BYTE PTR [eax+0x2],0x25
/home/yogi/src/os/chrisOS/src/block/ahci.c:572
    cmdfis->lba0 = (uint8_t) sector;
   155d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   155d7:	89 c2                	mov    edx,eax
   155d9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   155dc:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:573
    cmdfis->lba1 = (uint8_t) (sector >> 8);
   155df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   155e2:	c1 e8 08             	shr    eax,0x8
   155e5:	89 c2                	mov    edx,eax
   155e7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   155ea:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:574
    cmdfis->lba2 = (uint8_t) (sector >> 16);
   155ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   155f0:	c1 e8 10             	shr    eax,0x10
   155f3:	89 c2                	mov    edx,eax
   155f5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   155f8:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:575
    cmdfis->device = 1 << 6; // LBA mode
   155fb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   155fe:	c6 40 07 40          	mov    BYTE PTR [eax+0x7],0x40
/home/yogi/src/os/chrisOS/src/block/ahci.c:577

    cmdfis->lba3 = (uint8_t) (sector >> 24);
   15602:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   15605:	c1 e8 18             	shr    eax,0x18
   15608:	89 c2                	mov    edx,eax
   1560a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1560d:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:578
    cmdfis->lba4 = (uint8_t) 0;
   15610:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15613:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:579
    cmdfis->lba5 = (uint8_t) 0;
   15617:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1561a:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:581

    cmdfis->countl = LOBYTE((uint16_t) sector_count);
   1561e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   15621:	89 c2                	mov    edx,eax
   15623:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15626:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:582
    cmdfis->counth = HIBYTE((uint16_t) sector_count);
   15629:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1562c:	0f b7 c0             	movzx  eax,ax
   1562f:	c1 f8 08             	sar    eax,0x8
   15632:	89 c2                	mov    edx,eax
   15634:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15637:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:584

    int lCMdVal = AhciIssueCmd(kAHCICurrentDisk, slot);
   1563a:	a1 4c 99 12 00       	mov    eax,ds:0x12994c
   1563f:	83 ec 08             	sub    esp,0x8
   15642:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   15645:	50                   	push   eax
   15646:	e8 75 e5 ff ff       	call   13bc0 <AhciIssueCmd>
   1564b:	83 c4 10             	add    esp,0x10
   1564e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:585
    if (!lCMdVal) {
   15651:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
   15655:	75 1c                	jne    15673 <ahciBlockingRead28+0x2a1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:586
        printd(DEBUG_AHCI, "AHCI: ***Error reading from disk***\n");
   15657:	83 ec 08             	sub    esp,0x8
   1565a:	68 68 6d 04 00       	push   0x46d68
   1565f:	68 00 20 00 00       	push   0x2000
   15664:	e8 12 21 01 00       	call   2777b <printd>
   15669:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:587
        return -1;
   1566c:	b8 ff ff ff ff       	mov    eax,0xffffffff
   15671:	eb 31                	jmp    156a4 <ahciBlockingRead28+0x2d2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:591
    }

    // Check again
    if (kAHCICurrentDisk->pxis.TFES) {
   15673:	a1 4c 99 12 00       	mov    eax,ds:0x12994c
   15678:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1567b:	c1 e8 1e             	shr    eax,0x1e
   1567e:	83 e0 01             	and    eax,0x1
   15681:	84 c0                	test   al,al
   15683:	74 1c                	je     156a1 <ahciBlockingRead28+0x2cf>
/home/yogi/src/os/chrisOS/src/block/ahci.c:592
        printd(DEBUG_AHCI, "AHCI: Read disk error\n");
   15685:	83 ec 08             	sub    esp,0x8
   15688:	68 4f 64 04 00       	push   0x4644f
   1568d:	68 00 20 00 00       	push   0x2000
   15692:	e8 e4 20 01 00       	call   2777b <printd>
   15697:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:593
        return false;
   1569a:	b8 00 00 00 00       	mov    eax,0x0
   1569f:	eb 03                	jmp    156a4 <ahciBlockingRead28+0x2d2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:596
    }

    return sector_count;
   156a1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
/home/yogi/src/os/chrisOS/src/block/ahci.c:597
}
   156a4:	c9                   	leave  
   156a5:	c3                   	ret    

000156a6 <ahciBlockingWrite28>:
ahciBlockingWrite28():
/home/yogi/src/os/chrisOS/src/block/ahci.c:599

int ahciBlockingWrite28(/*unsigned drive, */uint32_t sector, uint8_t *buffer, uint32_t sector_count) {
   156a6:	55                   	push   ebp
   156a7:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/block/ahci.c:600
    return 0;
   156a9:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:601
}
   156ae:	5d                   	pop    ebp
   156af:	c3                   	ret    

000156b0 <ahciInit>:
ahciInit():
/home/yogi/src/os/chrisOS/src/block/ahci.c:603

bool ahciInit() {
   156b0:	55                   	push   ebp
   156b1:	89 e5                	mov    ebp,esp
   156b3:	56                   	push   esi
   156b4:	53                   	push   ebx
   156b5:	81 ec b0 00 00 00    	sub    esp,0xb0
/home/yogi/src/os/chrisOS/src/block/ahci.c:604
    kATADeviceInfoCount = 4;
   156bb:	c7 05 04 98 12 00 04 	mov    DWORD PTR ds:0x129804,0x4
   156c2:	00 00 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:605
    bool ahciDeviceFound = false;
   156c5:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:608
    char buffer[150];

    memset(buffer, 0, 150);
   156c9:	83 ec 04             	sub    esp,0x4
   156cc:	68 96 00 00 00       	push   0x96
   156d1:	6a 00                	push   0x0
   156d3:	8d 85 56 ff ff ff    	lea    eax,[ebp-0xaa]
   156d9:	50                   	push   eax
   156da:	e8 2a ff 00 00       	call   25609 <memset>
   156df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:610

    if (!kPCIDeviceCount) {
   156e2:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
   156e9:	84 c0                	test   al,al
   156eb:	75 1f                	jne    1570c <ahciInit+0x5c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:611
        printd(DEBUG_AHCI, "AHCI: PCI not initialized, cannot initialize AHCI.");
   156ed:	83 ec 08             	sub    esp,0x8
   156f0:	68 90 6d 04 00       	push   0x46d90
   156f5:	68 00 20 00 00       	push   0x2000
   156fa:	e8 7c 20 01 00       	call   2777b <printd>
   156ff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:612
        return false;
   15702:	b8 00 00 00 00       	mov    eax,0x0
   15707:	e9 b1 04 00 00       	jmp    15bbd <ahciInit+0x50d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:615
    }

    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   1570c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   15713:	e9 35 02 00 00       	jmp    1594d <ahciInit+0x29d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:616
        if (kPCIDeviceHeaders[cnt].class == 1 && kPCIDeviceHeaders[cnt].subClass == 6) 
   15718:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   1571e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   15721:	89 d0                	mov    eax,edx
   15723:	c1 e0 02             	shl    eax,0x2
   15726:	01 d0                	add    eax,edx
   15728:	c1 e0 04             	shl    eax,0x4
   1572b:	01 c8                	add    eax,ecx
   1572d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   15730:	83 f8 01             	cmp    eax,0x1
   15733:	0f 85 10 02 00 00    	jne    15949 <ahciInit+0x299>
/home/yogi/src/os/chrisOS/src/block/ahci.c:616 (discriminator 1)
   15739:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   1573f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   15742:	89 d0                	mov    eax,edx
   15744:	c1 e0 02             	shl    eax,0x2
   15747:	01 d0                	add    eax,edx
   15749:	c1 e0 04             	shl    eax,0x4
   1574c:	01 c8                	add    eax,ecx
   1574e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   15751:	83 f8 06             	cmp    eax,0x6
   15754:	0f 85 ef 01 00 00    	jne    15949 <ahciInit+0x299>
/home/yogi/src/os/chrisOS/src/block/ahci.c:618
        {
            memcpy(&kPCISATADevice, &kPCIDeviceHeaders[cnt], sizeof (struct pci_device_t));
   1575a:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   15760:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   15763:	89 d0                	mov    eax,edx
   15765:	c1 e0 02             	shl    eax,0x2
   15768:	01 d0                	add    eax,edx
   1576a:	c1 e0 04             	shl    eax,0x4
   1576d:	01 c8                	add    eax,ecx
   1576f:	83 ec 04             	sub    esp,0x4
   15772:	6a 50                	push   0x50
   15774:	50                   	push   eax
   15775:	68 20 98 12 00       	push   0x129820
   1577a:	e8 3d 09 01 00       	call   260bc <memcpy>
   1577f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:619
            ahciDeviceFound = true;
   15782:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:620
            printd(DEBUG_AHCI, "AHCI: Found AHCI controller (D) (%02X/%02X/%02X) '%s'\n", cnt, kPCIDeviceHeaders[cnt].class, kPCIDeviceHeaders[cnt].subClass, getDeviceNameP(&kPCISATADevice, buffer));
   15786:	83 ec 08             	sub    esp,0x8
   15789:	8d 85 56 ff ff ff    	lea    eax,[ebp-0xaa]
   1578f:	50                   	push   eax
   15790:	68 20 98 12 00       	push   0x129820
   15795:	e8 d8 14 00 00       	call   16c72 <getDeviceNameP>
   1579a:	83 c4 10             	add    esp,0x10
   1579d:	89 c6                	mov    esi,eax
   1579f:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   157a5:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   157a8:	89 d0                	mov    eax,edx
   157aa:	c1 e0 02             	shl    eax,0x2
   157ad:	01 d0                	add    eax,edx
   157af:	c1 e0 04             	shl    eax,0x4
   157b2:	01 c8                	add    eax,ecx
   157b4:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
   157b7:	8b 1d f4 97 12 00    	mov    ebx,DWORD PTR ds:0x1297f4
   157bd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   157c0:	89 d0                	mov    eax,edx
   157c2:	c1 e0 02             	shl    eax,0x2
   157c5:	01 d0                	add    eax,edx
   157c7:	c1 e0 04             	shl    eax,0x4
   157ca:	01 d8                	add    eax,ebx
   157cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   157cf:	83 ec 08             	sub    esp,0x8
   157d2:	56                   	push   esi
   157d3:	51                   	push   ecx
   157d4:	50                   	push   eax
   157d5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   157d8:	68 c4 6d 04 00       	push   0x46dc4
   157dd:	68 00 20 00 00       	push   0x2000
   157e2:	e8 94 1f 01 00       	call   2777b <printd>
   157e7:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:621
            printd(DEBUG_AHCI, "ABAR is at: before/remapped - 0x%08X/", kPCISATADevice.baseAdd[5]);
   157ea:	a1 54 98 12 00       	mov    eax,ds:0x129854
   157ef:	83 ec 04             	sub    esp,0x4
   157f2:	50                   	push   eax
   157f3:	68 fc 6d 04 00       	push   0x46dfc
   157f8:	68 00 20 00 00       	push   0x2000
   157fd:	e8 79 1f 01 00       	call   2777b <printd>
   15802:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:622
            ahciABAR = (HBA_MEM*) AHCI_ABAR_REMAPPED_ADDRESS + (0x10 * ahciHostCount);
   15805:	a1 24 92 02 00       	mov    eax,ds:0x29224
   1580a:	c1 e0 0c             	shl    eax,0xc
   1580d:	89 c2                	mov    edx,eax
   1580f:	c1 e2 04             	shl    edx,0x4
   15812:	01 d0                	add    eax,edx
   15814:	05 00 30 ad 00       	add    eax,0xad3000
   15819:	a3 94 99 12 00       	mov    ds:0x129994,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:623
                kMapPage((uintptr_t) ahciABAR, kPCISATADevice.baseAdd[5] , 0x73); //0x63 + cache disabled
   1581e:	a1 54 98 12 00       	mov    eax,ds:0x129854
   15823:	8b 15 94 99 12 00    	mov    edx,DWORD PTR ds:0x129994
   15829:	83 ec 04             	sub    esp,0x4
   1582c:	6a 73                	push   0x73
   1582e:	50                   	push   eax
   1582f:	52                   	push   edx
   15830:	e8 83 bf ff ff       	call   117b8 <kMapPage>
   15835:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:624
                kMapPage(kPCISATADevice.baseAdd[5],kPCISATADevice.baseAdd[5],0x73);
   15838:	8b 15 54 98 12 00    	mov    edx,DWORD PTR ds:0x129854
   1583e:	a1 54 98 12 00       	mov    eax,ds:0x129854
   15843:	83 ec 04             	sub    esp,0x4
   15846:	6a 73                	push   0x73
   15848:	52                   	push   edx
   15849:	50                   	push   eax
   1584a:	e8 69 bf ff ff       	call   117b8 <kMapPage>
   1584f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:625
            RELOAD_CR3
   15852:	0f 20 d8             	mov    eax,cr3
   15855:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:626
            memcpy((void*) &ABARs[ahciHostCount++], (void*) ahciABAR, sizeof (HBA_MEM));
   15858:	8b 15 94 99 12 00    	mov    edx,DWORD PTR ds:0x129994
   1585e:	a1 24 92 02 00       	mov    eax,ds:0x29224
   15863:	8d 48 01             	lea    ecx,[eax+0x1]
   15866:	89 0d 24 92 02 00    	mov    DWORD PTR ds:0x29224,ecx
   1586c:	c1 e0 08             	shl    eax,0x8
   1586f:	89 c1                	mov    ecx,eax
   15871:	c1 e1 04             	shl    ecx,0x4
   15874:	01 c8                	add    eax,ecx
   15876:	05 40 b5 08 00       	add    eax,0x8b540
   1587b:	83 ec 04             	sub    esp,0x4
   1587e:	68 00 11 00 00       	push   0x1100
   15883:	52                   	push   edx
   15884:	50                   	push   eax
   15885:	e8 32 08 01 00       	call   260bc <memcpy>
   1588a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:627
            printd(DEBUG_AHCI, "0x%08X\n", ahciABAR);
   1588d:	a1 94 99 12 00       	mov    eax,ds:0x129994
   15892:	83 ec 04             	sub    esp,0x4
   15895:	50                   	push   eax
   15896:	68 22 6e 04 00       	push   0x46e22
   1589b:	68 00 20 00 00       	push   0x2000
   158a0:	e8 d6 1e 01 00       	call   2777b <printd>
   158a5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:628
            memcpy(&ahciCaps[ahciCapsCount++], (void*) ahciABAR, sizeof (ahcicaps_t));
   158a8:	8b 15 94 99 12 00    	mov    edx,DWORD PTR ds:0x129994
   158ae:	8b 1d 24 99 12 00    	mov    ebx,DWORD PTR ds:0x129924
   158b4:	a1 28 99 12 00       	mov    eax,ds:0x129928
   158b9:	8d 48 01             	lea    ecx,[eax+0x1]
   158bc:	89 0d 28 99 12 00    	mov    DWORD PTR ds:0x129928,ecx
   158c2:	c1 e0 02             	shl    eax,0x2
   158c5:	01 d8                	add    eax,ebx
   158c7:	83 ec 04             	sub    esp,0x4
   158ca:	6a 04                	push   0x4
   158cc:	52                   	push   edx
   158cd:	50                   	push   eax
   158ce:	e8 e9 07 01 00       	call   260bc <memcpy>
   158d3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:629
            if (!(ahciABAR->ghc.AE)) {
   158d6:	a1 94 99 12 00       	mov    eax,ds:0x129994
   158db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   158de:	c1 e8 1f             	shr    eax,0x1f
   158e1:	84 c0                	test   al,al
   158e3:	75 26                	jne    1590b <ahciInit+0x25b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:630
                printd(DEBUG_AHCI,"switching to AHCI mode\n");
   158e5:	83 ec 08             	sub    esp,0x8
   158e8:	68 2a 6e 04 00       	push   0x46e2a
   158ed:	68 00 20 00 00       	push   0x2000
   158f2:	e8 84 1e 01 00       	call   2777b <printd>
   158f7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:631
                ahciABAR->ghc.AE=1;
   158fa:	a1 94 99 12 00       	mov    eax,ds:0x129994
   158ff:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   15902:	81 ca 00 00 00 80    	or     edx,0x80000000
   15908:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:633
            }
            ahciABAR->ghc.IE=1;
   1590b:	a1 94 99 12 00       	mov    eax,ds:0x129994
   15910:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   15913:	83 ca 02             	or     edx,0x2
   15916:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:634
            if (ahciABAR->cap2 & 1) {
   15919:	a1 94 99 12 00       	mov    eax,ds:0x129994
   1591e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   15921:	83 e0 01             	and    eax,0x1
   15924:	85 c0                	test   eax,eax
   15926:	74 10                	je     15938 <ahciInit+0x288>
/home/yogi/src/os/chrisOS/src/block/ahci.c:635
                panic("Write support for BIOS handoff!!!");
   15928:	83 ec 0c             	sub    esp,0xc
   1592b:	68 44 6e 04 00       	push   0x46e44
   15930:	e8 a7 19 01 00       	call   272dc <panic>
   15935:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:637
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
   15938:	a1 94 99 12 00       	mov    eax,ds:0x129994
   1593d:	83 ec 0c             	sub    esp,0xc
   15940:	50                   	push   eax
   15941:	e8 88 ea ff ff       	call   143ce <ahciProbePorts>
   15946:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:615 (discriminator 2)
    if (!kPCIDeviceCount) {
        printd(DEBUG_AHCI, "AHCI: PCI not initialized, cannot initialize AHCI.");
        return false;
    }

    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   15949:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:615 (discriminator 1)
   1594d:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
   15954:	0f b6 c0             	movzx  eax,al
   15957:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   1595a:	0f 8f b8 fd ff ff    	jg     15718 <ahciInit+0x68>
/home/yogi/src/os/chrisOS/src/block/ahci.c:639
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   15960:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   15967:	e9 12 02 00 00       	jmp    15b7e <ahciInit+0x4ce>
/home/yogi/src/os/chrisOS/src/block/ahci.c:640
        if (kPCIDeviceFunctions[cnt].class == 1 && kPCIDeviceFunctions[cnt].subClass == 6) 
   1596c:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   15972:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   15975:	89 d0                	mov    eax,edx
   15977:	c1 e0 02             	shl    eax,0x2
   1597a:	01 d0                	add    eax,edx
   1597c:	c1 e0 04             	shl    eax,0x4
   1597f:	01 c8                	add    eax,ecx
   15981:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   15984:	83 f8 01             	cmp    eax,0x1
   15987:	0f 85 ed 01 00 00    	jne    15b7a <ahciInit+0x4ca>
/home/yogi/src/os/chrisOS/src/block/ahci.c:640 (discriminator 1)
   1598d:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   15993:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   15996:	89 d0                	mov    eax,edx
   15998:	c1 e0 02             	shl    eax,0x2
   1599b:	01 d0                	add    eax,edx
   1599d:	c1 e0 04             	shl    eax,0x4
   159a0:	01 c8                	add    eax,ecx
   159a2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   159a5:	83 f8 06             	cmp    eax,0x6
   159a8:	0f 85 cc 01 00 00    	jne    15b7a <ahciInit+0x4ca>
/home/yogi/src/os/chrisOS/src/block/ahci.c:642
        {
            memcpy(&kPCISATADevice, &kPCIDeviceFunctions[cnt], sizeof (struct pci_device_t));
   159ae:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   159b4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   159b7:	89 d0                	mov    eax,edx
   159b9:	c1 e0 02             	shl    eax,0x2
   159bc:	01 d0                	add    eax,edx
   159be:	c1 e0 04             	shl    eax,0x4
   159c1:	01 c8                	add    eax,ecx
   159c3:	83 ec 04             	sub    esp,0x4
   159c6:	6a 50                	push   0x50
   159c8:	50                   	push   eax
   159c9:	68 20 98 12 00       	push   0x129820
   159ce:	e8 e9 06 01 00       	call   260bc <memcpy>
   159d3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:643
            ahciDeviceFound = true;
   159d6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:644
            printd(DEBUG_AHCI, "AHCI: Found AHCI controller (F) (%02X/%02X/%02X) '%s'\n", cnt, kPCIDeviceFunctions[cnt].class, kPCIDeviceFunctions[cnt].subClass, getDeviceNameP(&kPCISATADevice, buffer));
   159da:	83 ec 08             	sub    esp,0x8
   159dd:	8d 85 56 ff ff ff    	lea    eax,[ebp-0xaa]
   159e3:	50                   	push   eax
   159e4:	68 20 98 12 00       	push   0x129820
   159e9:	e8 84 12 00 00       	call   16c72 <getDeviceNameP>
   159ee:	83 c4 10             	add    esp,0x10
   159f1:	89 c6                	mov    esi,eax
   159f3:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   159f9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   159fc:	89 d0                	mov    eax,edx
   159fe:	c1 e0 02             	shl    eax,0x2
   15a01:	01 d0                	add    eax,edx
   15a03:	c1 e0 04             	shl    eax,0x4
   15a06:	01 c8                	add    eax,ecx
   15a08:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
   15a0b:	8b 1d fc 97 12 00    	mov    ebx,DWORD PTR ds:0x1297fc
   15a11:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   15a14:	89 d0                	mov    eax,edx
   15a16:	c1 e0 02             	shl    eax,0x2
   15a19:	01 d0                	add    eax,edx
   15a1b:	c1 e0 04             	shl    eax,0x4
   15a1e:	01 d8                	add    eax,ebx
   15a20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   15a23:	83 ec 08             	sub    esp,0x8
   15a26:	56                   	push   esi
   15a27:	51                   	push   ecx
   15a28:	50                   	push   eax
   15a29:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   15a2c:	68 68 6e 04 00       	push   0x46e68
   15a31:	68 00 20 00 00       	push   0x2000
   15a36:	e8 40 1d 01 00       	call   2777b <printd>
   15a3b:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:645
            printd(DEBUG_AHCI, "ABAR is at: 0x%08X\n", kPCISATADevice.baseAdd[5]);
   15a3e:	a1 54 98 12 00       	mov    eax,ds:0x129854
   15a43:	83 ec 04             	sub    esp,0x4
   15a46:	50                   	push   eax
   15a47:	68 9f 6e 04 00       	push   0x46e9f
   15a4c:	68 00 20 00 00       	push   0x2000
   15a51:	e8 25 1d 01 00       	call   2777b <printd>
   15a56:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:646
            ahciABAR = (HBA_MEM*) AHCI_ABAR_REMAPPED_ADDRESS + (0x10 * ahciHostCount);
   15a59:	a1 24 92 02 00       	mov    eax,ds:0x29224
   15a5e:	c1 e0 0c             	shl    eax,0xc
   15a61:	89 c2                	mov    edx,eax
   15a63:	c1 e2 04             	shl    edx,0x4
   15a66:	01 d0                	add    eax,edx
   15a68:	05 00 30 ad 00       	add    eax,0xad3000
   15a6d:	a3 94 99 12 00       	mov    ds:0x129994,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:647
            kMapPage((uintptr_t) ahciABAR, kPCISATADevice.baseAdd[5], 0x73); //0x63 + cache disabled
   15a72:	a1 54 98 12 00       	mov    eax,ds:0x129854
   15a77:	8b 15 94 99 12 00    	mov    edx,DWORD PTR ds:0x129994
   15a7d:	83 ec 04             	sub    esp,0x4
   15a80:	6a 73                	push   0x73
   15a82:	50                   	push   eax
   15a83:	52                   	push   edx
   15a84:	e8 2f bd ff ff       	call   117b8 <kMapPage>
   15a89:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:648
            RELOAD_CR3
   15a8c:	0f 20 d8             	mov    eax,cr3
   15a8f:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:649
            memcpy((void*) &ABARs[ahciHostCount++], (void*) ahciABAR, sizeof (HBA_MEM));
   15a92:	8b 15 94 99 12 00    	mov    edx,DWORD PTR ds:0x129994
   15a98:	a1 24 92 02 00       	mov    eax,ds:0x29224
   15a9d:	8d 48 01             	lea    ecx,[eax+0x1]
   15aa0:	89 0d 24 92 02 00    	mov    DWORD PTR ds:0x29224,ecx
   15aa6:	c1 e0 08             	shl    eax,0x8
   15aa9:	89 c1                	mov    ecx,eax
   15aab:	c1 e1 04             	shl    ecx,0x4
   15aae:	01 c8                	add    eax,ecx
   15ab0:	05 40 b5 08 00       	add    eax,0x8b540
   15ab5:	83 ec 04             	sub    esp,0x4
   15ab8:	68 00 11 00 00       	push   0x1100
   15abd:	52                   	push   edx
   15abe:	50                   	push   eax
   15abf:	e8 f8 05 01 00       	call   260bc <memcpy>
   15ac4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:650
            printd(DEBUG_AHCI, "Remapped ABAR is now at: 0x%08X\n", ahciABAR);
   15ac7:	a1 94 99 12 00       	mov    eax,ds:0x129994
   15acc:	83 ec 04             	sub    esp,0x4
   15acf:	50                   	push   eax
   15ad0:	68 b4 6e 04 00       	push   0x46eb4
   15ad5:	68 00 20 00 00       	push   0x2000
   15ada:	e8 9c 1c 01 00       	call   2777b <printd>
   15adf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:651
            memcpy(&ahciCaps[ahciCapsCount], (void*) ahciABAR, sizeof (ahcicaps_t));
   15ae2:	a1 94 99 12 00       	mov    eax,ds:0x129994
   15ae7:	8b 15 24 99 12 00    	mov    edx,DWORD PTR ds:0x129924
   15aed:	8b 0d 28 99 12 00    	mov    ecx,DWORD PTR ds:0x129928
   15af3:	c1 e1 02             	shl    ecx,0x2
   15af6:	01 ca                	add    edx,ecx
   15af8:	83 ec 04             	sub    esp,0x4
   15afb:	6a 04                	push   0x4
   15afd:	50                   	push   eax
   15afe:	52                   	push   edx
   15aff:	e8 b8 05 01 00       	call   260bc <memcpy>
   15b04:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:652
            if (!(ahciABAR->ghc.AE)) {
   15b07:	a1 94 99 12 00       	mov    eax,ds:0x129994
   15b0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   15b0f:	c1 e8 1f             	shr    eax,0x1f
   15b12:	84 c0                	test   al,al
   15b14:	75 26                	jne    15b3c <ahciInit+0x48c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:653
                printd(DEBUG_AHCI,"switching to AHCI mode\n");
   15b16:	83 ec 08             	sub    esp,0x8
   15b19:	68 2a 6e 04 00       	push   0x46e2a
   15b1e:	68 00 20 00 00       	push   0x2000
   15b23:	e8 53 1c 01 00       	call   2777b <printd>
   15b28:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:654
                ahciABAR->ghc.AE=1;
   15b2b:	a1 94 99 12 00       	mov    eax,ds:0x129994
   15b30:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   15b33:	81 ca 00 00 00 80    	or     edx,0x80000000
   15b39:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:656
            }
            ahciABAR->ghc.IE=1;
   15b3c:	a1 94 99 12 00       	mov    eax,ds:0x129994
   15b41:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   15b44:	83 ca 02             	or     edx,0x2
   15b47:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:657
            if (ahciABAR->cap2 & 1) {
   15b4a:	a1 94 99 12 00       	mov    eax,ds:0x129994
   15b4f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   15b52:	83 e0 01             	and    eax,0x1
   15b55:	85 c0                	test   eax,eax
   15b57:	74 10                	je     15b69 <ahciInit+0x4b9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:658
                panic("Write support for BIOS handoff!!!");
   15b59:	83 ec 0c             	sub    esp,0xc
   15b5c:	68 44 6e 04 00       	push   0x46e44
   15b61:	e8 76 17 01 00       	call   272dc <panic>
   15b66:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:660
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
   15b69:	a1 94 99 12 00       	mov    eax,ds:0x129994
   15b6e:	83 ec 0c             	sub    esp,0xc
   15b71:	50                   	push   eax
   15b72:	e8 57 e8 ff ff       	call   143ce <ahciProbePorts>
   15b77:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:639 (discriminator 2)
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   15b7a:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:639 (discriminator 1)
   15b7e:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
   15b85:	0f b6 c0             	movzx  eax,al
   15b88:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   15b8b:	0f 8f db fd ff ff    	jg     1596c <ahciInit+0x2bc>
/home/yogi/src/os/chrisOS/src/block/ahci.c:662
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    if (!ahciDeviceFound) {
   15b91:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   15b95:	83 f0 01             	xor    eax,0x1
   15b98:	84 c0                	test   al,al
   15b9a:	74 1c                	je     15bb8 <ahciInit+0x508>
/home/yogi/src/os/chrisOS/src/block/ahci.c:663
        printd(DEBUG_AHCI, "AHCI: No AHCI devices found.");
   15b9c:	83 ec 08             	sub    esp,0x8
   15b9f:	68 d5 6e 04 00       	push   0x46ed5
   15ba4:	68 00 20 00 00       	push   0x2000
   15ba9:	e8 cd 1b 01 00       	call   2777b <printd>
   15bae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:664
        return false;
   15bb1:	b8 00 00 00 00       	mov    eax,0x0
   15bb6:	eb 05                	jmp    15bbd <ahciInit+0x50d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:668
    }


    return true;
   15bb8:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:669 (discriminator 1)
}
   15bbd:	8d 65 f8             	lea    esp,[ebp-0x8]
   15bc0:	5b                   	pop    ebx
   15bc1:	5e                   	pop    esi
   15bc2:	5d                   	pop    ebp
   15bc3:	c3                   	ret    

00015bc4 <ahci_port_activate_device>:
ahci_port_activate_device():
/home/yogi/src/os/chrisOS/src/block/ahci.c:672

void ahci_port_activate_device(HBA_MEM* h, HBA_PORT* p)
{
   15bc4:	55                   	push   ebp
   15bc5:	89 e5                	mov    ebp,esp
   15bc7:	53                   	push   ebx
   15bc8:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/block/ahci.c:673
    printd(DEBUG_AHCI,"activate port %d @ 0x%08X:\n", p - h->ports,p);
   15bcb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15bce:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   15bd1:	81 c2 00 01 00 00    	add    edx,0x100
   15bd7:	29 d0                	sub    eax,edx
   15bd9:	c1 f8 07             	sar    eax,0x7
   15bdc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   15bdf:	50                   	push   eax
   15be0:	68 f2 6e 04 00       	push   0x46ef2
   15be5:	68 00 20 00 00       	push   0x2000
   15bea:	e8 8c 1b 01 00       	call   2777b <printd>
   15bef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:675
    /* first check the presence flag */
    if ( (p->ssts & 0x7) == HBA_PORT_DET_NOT_PRESENT) { //check DET status
   15bf2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15bf5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15bf8:	83 e0 07             	and    eax,0x7
   15bfb:	85 c0                	test   eax,eax
   15bfd:	0f 85 38 02 00 00    	jne    15e3b <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:676
                    printd(DEBUG_AHCI,"activate: DET_NOT_PRESENT\n");
   15c03:	83 ec 08             	sub    esp,0x8
   15c06:	68 0e 6f 04 00       	push   0x46f0e
   15c0b:	68 00 20 00 00       	push   0x2000
   15c10:	e8 66 1b 01 00       	call   2777b <printd>
   15c15:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:678
                    /* nothing attached? */
                    if (p->cmd.CPD) { /* we rely on CPD */
   15c18:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15c1b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15c1e:	c1 e8 14             	shr    eax,0x14
   15c21:	83 e0 01             	and    eax,0x1
   15c24:	84 c0                	test   al,al
   15c26:	74 65                	je     15c8d <ahci_port_activate_device+0xc9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:679
                                    if (!p->cmd.CPS) {
   15c28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15c2b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15c2e:	c1 e8 10             	shr    eax,0x10
   15c31:	83 e0 01             	and    eax,0x1
   15c34:	84 c0                	test   al,al
   15c36:	75 1a                	jne    15c52 <ahci_port_activate_device+0x8e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:680
                                                    printd(DEBUG_AHCI,"confirmed by CPD\n");
   15c38:	83 ec 08             	sub    esp,0x8
   15c3b:	68 29 6f 04 00       	push   0x46f29
   15c40:	68 00 20 00 00       	push   0x2000
   15c45:	e8 31 1b 01 00       	call   2777b <printd>
   15c4a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:681
                                                    return;
   15c4d:	e9 b4 03 00 00       	jmp    16006 <ahci_port_activate_device+0x442>
/home/yogi/src/os/chrisOS/src/block/ahci.c:684
                                    }
                                    /* there's something */
                                    if (!p->cmd.POD) {
   15c52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15c55:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15c58:	c1 e8 02             	shr    eax,0x2
   15c5b:	83 e0 01             	and    eax,0x1
   15c5e:	84 c0                	test   al,al
   15c60:	75 19                	jne    15c7b <ahci_port_activate_device+0xb7>
/home/yogi/src/os/chrisOS/src/block/ahci.c:685
                                                    p->cmd.POD = 1; /* power it */
   15c62:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15c65:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15c68:	83 ca 04             	or     edx,0x4
   15c6b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:686
                                                    wait(20);
   15c6e:	83 ec 0c             	sub    esp,0xc
   15c71:	6a 14                	push   0x14
   15c73:	e8 22 2d 01 00       	call   2899a <wait>
   15c78:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:688
                                    }
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
   15c7b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15c7e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15c81:	83 e0 07             	and    eax,0x7
   15c84:	85 c0                	test   eax,eax
   15c86:	74 05                	je     15c8d <ahci_port_activate_device+0xc9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:689
                                                    goto next_step;
   15c88:	e9 ae 01 00 00       	jmp    15e3b <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:692
                    }
                    /* spin-up? */
                    if (!p->cmd.SUD) { /* always !1 if cap.sss == 0 */
   15c8d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15c90:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15c93:	d1 e8                	shr    eax,1
   15c95:	83 e0 01             	and    eax,0x1
   15c98:	84 c0                	test   al,al
   15c9a:	0f 85 f7 00 00 00    	jne    15d97 <ahci_port_activate_device+0x1d3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:693
                                    printd(DEBUG_AHCI,"not spun-up yet?\n");
   15ca0:	83 ec 08             	sub    esp,0x8
   15ca3:	68 3b 6f 04 00       	push   0x46f3b
   15ca8:	68 00 20 00 00       	push   0x2000
   15cad:	e8 c9 1a 01 00       	call   2777b <printd>
   15cb2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:694
                                    if (p->serr.AsUlong & (1 << 26)) /* eXchange bit */
   15cb5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15cb8:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15cbb:	25 00 00 00 04       	and    eax,0x4000000
   15cc0:	85 c0                	test   eax,eax
   15cc2:	74 13                	je     15cd7 <ahci_port_activate_device+0x113>
/home/yogi/src/os/chrisOS/src/block/ahci.c:695
                                                    p->serr.AsUlong |= (1 << 26); /* RWC */
   15cc4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15cc7:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15cca:	0d 00 00 00 04       	or     eax,0x4000000
   15ccf:	89 c2                	mov    edx,eax
   15cd1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15cd4:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:696
                                    if ((p->ssts & 0x7) != 0) { /* set to 0 prior sud */
   15cd7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15cda:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15cdd:	83 e0 07             	and    eax,0x7
   15ce0:	85 c0                	test   eax,eax
   15ce2:	74 19                	je     15cfd <ahci_port_activate_device+0x139>
/home/yogi/src/os/chrisOS/src/block/ahci.c:697
                                                    p->sctl.DET = 0;
   15ce4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15ce7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   15cea:	83 e2 f0             	and    edx,0xfffffff0
   15ced:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:698
                                                    wait(20);
   15cf0:	83 ec 0c             	sub    esp,0xc
   15cf3:	6a 14                	push   0x14
   15cf5:	e8 a0 2c 01 00       	call   2899a <wait>
   15cfa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:700
                                    }
                                    p->cmd.SUD = 1;
   15cfd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15d00:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15d03:	83 ca 02             	or     edx,0x2
   15d06:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:701
                                    waitTicks(5); /* wait 50 mus */
   15d09:	83 ec 0c             	sub    esp,0xc
   15d0c:	6a 05                	push   0x5
   15d0e:	e8 6c 2c 01 00       	call   2897f <waitTicks>
   15d13:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:702
                                    if (p->serr.AsUlong & ((1 << 26) | (1 << 18))) { /* received sth. */
   15d16:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15d19:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15d1c:	25 00 00 04 04       	and    eax,0x4040000
   15d21:	85 c0                	test   eax,eax
   15d23:	74 05                	je     15d2a <ahci_port_activate_device+0x166>
/home/yogi/src/os/chrisOS/src/block/ahci.c:704
                                                    /* COMRESET, COMWAKE */
                                                    goto next_step;
   15d25:	e9 11 01 00 00       	jmp    15e3b <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:707
                                    }
                                    /* send the reset */
                                    p->sctl.DET = 1;
   15d2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15d2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   15d30:	83 e2 f0             	and    edx,0xfffffff0
   15d33:	83 ca 01             	or     edx,0x1
   15d36:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:708
                                    waitTicks(100);
   15d39:	83 ec 0c             	sub    esp,0xc
   15d3c:	6a 64                	push   0x64
   15d3e:	e8 3c 2c 01 00       	call   2897f <waitTicks>
   15d43:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:709
                                    p->sctl.DET = 0;
   15d46:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15d49:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   15d4c:	83 e2 f0             	and    edx,0xfffffff0
   15d4f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:710
                                    wait(20);
   15d52:	83 ec 0c             	sub    esp,0xc
   15d55:	6a 14                	push   0x14
   15d57:	e8 3e 2c 01 00       	call   2899a <wait>
   15d5c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:711
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
   15d5f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15d62:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15d65:	83 e0 07             	and    eax,0x7
   15d68:	85 c0                	test   eax,eax
   15d6a:	74 05                	je     15d71 <ahci_port_activate_device+0x1ad>
/home/yogi/src/os/chrisOS/src/block/ahci.c:712
                                                    goto next_step;
   15d6c:	e9 ca 00 00 00       	jmp    15e3b <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:713
                                    p->cmd.SUD = 0; /* we're done enter listening mode */
   15d71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15d74:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15d77:	83 e2 fd             	and    edx,0xfffffffd
   15d7a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:714
                                    printd(DEBUG_AHCI,"not present\n");
   15d7d:	83 ec 08             	sub    esp,0x8
   15d80:	68 4d 6f 04 00       	push   0x46f4d
   15d85:	68 00 20 00 00       	push   0x2000
   15d8a:	e8 ec 19 01 00       	call   2777b <printd>
   15d8f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:715
                                    goto exit;
   15d92:	e9 47 02 00 00       	jmp    15fde <ahci_port_activate_device+0x41a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:718
                    }
                    /* just try ICC */
                    if (p->sctl.IPM != 1) {
   15d97:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15d9a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15d9d:	c1 e8 08             	shr    eax,0x8
   15da0:	83 e0 0f             	and    eax,0xf
   15da3:	3c 01                	cmp    al,0x1
   15da5:	0f 84 90 00 00 00    	je     15e3b <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:719
                                    printd(DEBUG_AHCI,"IPM != ACTIVE\n");
   15dab:	83 ec 08             	sub    esp,0x8
   15dae:	68 5a 6f 04 00       	push   0x46f5a
   15db3:	68 00 20 00 00       	push   0x2000
   15db8:	e8 be 19 01 00       	call   2777b <printd>
   15dbd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:720
                                    int ct = 50;
   15dc0:	c7 45 f4 32 00 00 00 	mov    DWORD PTR [ebp-0xc],0x32
/home/yogi/src/os/chrisOS/src/block/ahci.c:721
                                    while (p->cmd.ICC && ct--)
   15dc7:	eb 0d                	jmp    15dd6 <ahci_port_activate_device+0x212>
/home/yogi/src/os/chrisOS/src/block/ahci.c:722
                                                    waitTicks(1);
   15dc9:	83 ec 0c             	sub    esp,0xc
   15dcc:	6a 01                	push   0x1
   15dce:	e8 ac 2b 01 00       	call   2897f <waitTicks>
   15dd3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:721
                    }
                    /* just try ICC */
                    if (p->sctl.IPM != 1) {
                                    printd(DEBUG_AHCI,"IPM != ACTIVE\n");
                                    int ct = 50;
                                    while (p->cmd.ICC && ct--)
   15dd6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15dd9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15ddc:	c1 e8 1c             	shr    eax,0x1c
   15ddf:	84 c0                	test   al,al
   15de1:	74 0d                	je     15df0 <ahci_port_activate_device+0x22c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:721 (discriminator 1)
   15de3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   15de6:	8d 50 ff             	lea    edx,[eax-0x1]
   15de9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   15dec:	85 c0                	test   eax,eax
   15dee:	75 d9                	jne    15dc9 <ahci_port_activate_device+0x205>
/home/yogi/src/os/chrisOS/src/block/ahci.c:723
                                                    waitTicks(1);
                                    p->cmd.ICC = 1;
   15df0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15df3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15df6:	81 e2 ff ff ff 0f    	and    edx,0xfffffff
   15dfc:	81 ca 00 00 00 10    	or     edx,0x10000000
   15e02:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:724
                                    wait(10);
   15e05:	83 ec 0c             	sub    esp,0xc
   15e08:	6a 0a                	push   0xa
   15e0a:	e8 8b 2b 01 00       	call   2899a <wait>
   15e0f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:725
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
   15e12:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15e15:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15e18:	83 e0 07             	and    eax,0x7
   15e1b:	85 c0                	test   eax,eax
   15e1d:	74 02                	je     15e21 <ahci_port_activate_device+0x25d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:726
                                                    goto next_step;
   15e1f:	eb 1a                	jmp    15e3b <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:727
                                    printd(DEBUG_AHCI,"unable to set to active\n");
   15e21:	83 ec 08             	sub    esp,0x8
   15e24:	68 69 6f 04 00       	push   0x46f69
   15e29:	68 00 20 00 00       	push   0x2000
   15e2e:	e8 48 19 01 00       	call   2777b <printd>
   15e33:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:728
                                    goto exit;
   15e36:	e9 a3 01 00 00       	jmp    15fde <ahci_port_activate_device+0x41a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:734
                    }
    }

    /* det != 1*/
next_step:
    if ((p->ssts & 0x7) == HBA_PORT_DET_PRESENT) {
   15e3b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15e3e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15e41:	83 e0 07             	and    eax,0x7
   15e44:	83 f8 03             	cmp    eax,0x3
   15e47:	0f 85 41 01 00 00    	jne    15f8e <ahci_port_activate_device+0x3ca>
/home/yogi/src/os/chrisOS/src/block/ahci.c:736
                    /* almost done */
                    if (p->sctl.IPM != HBA_PORT_IPM_ACTIVE) {
   15e4d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15e50:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15e53:	c1 e8 08             	shr    eax,0x8
   15e56:	83 e0 0f             	and    eax,0xf
   15e59:	3c 01                	cmp    al,0x1
   15e5b:	0f 84 b8 00 00 00    	je     15f19 <ahci_port_activate_device+0x355>
/home/yogi/src/os/chrisOS/src/block/ahci.c:738
                                    int ct, wc;
                                    printd(DEBUG_AHCI,"Present but not active.\n");
   15e61:	83 ec 08             	sub    esp,0x8
   15e64:	68 82 6f 04 00       	push   0x46f82
   15e69:	68 00 20 00 00       	push   0x2000
   15e6e:	e8 08 19 01 00       	call   2777b <printd>
   15e73:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:740
activ:
                                    ct = 50, wc = 0;
   15e76:	c7 45 f0 32 00 00 00 	mov    DWORD PTR [ebp-0x10],0x32
   15e7d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:742
rewait:
                                    while (p->cmd.ICC && ct--) /* 500ms */
   15e84:	eb 0d                	jmp    15e93 <ahci_port_activate_device+0x2cf>
/home/yogi/src/os/chrisOS/src/block/ahci.c:743
                                                    waitTicks(1);
   15e86:	83 ec 0c             	sub    esp,0xc
   15e89:	6a 01                	push   0x1
   15e8b:	e8 ef 2a 01 00       	call   2897f <waitTicks>
   15e90:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:742
                                    int ct, wc;
                                    printd(DEBUG_AHCI,"Present but not active.\n");
activ:
                                    ct = 50, wc = 0;
rewait:
                                    while (p->cmd.ICC && ct--) /* 500ms */
   15e93:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15e96:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15e99:	c1 e8 1c             	shr    eax,0x1c
   15e9c:	84 c0                	test   al,al
   15e9e:	74 0d                	je     15ead <ahci_port_activate_device+0x2e9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:742 (discriminator 1)
   15ea0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15ea3:	8d 50 ff             	lea    edx,[eax-0x1]
   15ea6:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   15ea9:	85 c0                	test   eax,eax
   15eab:	75 d9                	jne    15e86 <ahci_port_activate_device+0x2c2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:744
                                                    waitTicks(1);
                                    if (p->sctl.IPM != HBA_PORT_IPM_ACTIVE && !wc) {
   15ead:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15eb0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15eb3:	c1 e8 08             	shr    eax,0x8
   15eb6:	83 e0 0f             	and    eax,0xf
   15eb9:	3c 01                	cmp    al,0x1
   15ebb:	74 35                	je     15ef2 <ahci_port_activate_device+0x32e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:744 (discriminator 1)
   15ebd:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   15ec1:	75 2f                	jne    15ef2 <ahci_port_activate_device+0x32e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:745
                                                    p->cmd.ICC = 1;
   15ec3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15ec6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15ec9:	81 e2 ff ff ff 0f    	and    edx,0xfffffff
   15ecf:	81 ca 00 00 00 10    	or     edx,0x10000000
   15ed5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:746
                                                    waitTicks(1);
   15ed8:	83 ec 0c             	sub    esp,0xc
   15edb:	6a 01                	push   0x1
   15edd:	e8 9d 2a 01 00       	call   2897f <waitTicks>
   15ee2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:747
                                                    wc++; ct = 50;
   15ee5:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
   15ee9:	c7 45 f0 32 00 00 00 	mov    DWORD PTR [ebp-0x10],0x32
/home/yogi/src/os/chrisOS/src/block/ahci.c:748
                                                    goto rewait;
   15ef0:	eb 92                	jmp    15e84 <ahci_port_activate_device+0x2c0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:750
                                    }
                                    if (wc) {
   15ef2:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   15ef6:	74 21                	je     15f19 <ahci_port_activate_device+0x355>
/home/yogi/src/os/chrisOS/src/block/ahci.c:752
                                                    /* reset */
                                                    p->sctl.DET = 1;
   15ef8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15efb:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   15efe:	83 e2 f0             	and    edx,0xfffffff0
   15f01:	83 ca 01             	or     edx,0x1
   15f04:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:753
                                                    waitTicks(100);
   15f07:	83 ec 0c             	sub    esp,0xc
   15f0a:	6a 64                	push   0x64
   15f0c:	e8 6e 2a 01 00       	call   2897f <waitTicks>
   15f11:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:754
                                                    goto next_step;
   15f14:	e9 22 ff ff ff       	jmp    15e3b <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:758
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
   15f19:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15f1c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   15f1f:	81 c2 00 01 00 00    	add    edx,0x100
   15f25:	29 d0                	sub    eax,edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:757
                                                    p->sctl.DET = 1;
                                                    waitTicks(100);
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
   15f27:	c1 f8 07             	sar    eax,0x7
   15f2a:	83 ec 04             	sub    esp,0x4
   15f2d:	50                   	push   eax
   15f2e:	68 9c 6f 04 00       	push   0x46f9c
   15f33:	68 00 20 00 00       	push   0x2000
   15f38:	e8 3e 18 01 00       	call   2777b <printd>
   15f3d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:760
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
   15f40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15f43:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15f46:	c1 e8 08             	shr    eax,0x8
   15f49:	83 e0 0f             	and    eax,0xf
/home/yogi/src/os/chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
   15f4c:	0f b6 c8             	movzx  ecx,al
/home/yogi/src/os/chrisOS/src/block/ahci.c:760
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
   15f4f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15f52:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
/home/yogi/src/os/chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
   15f55:	83 e0 07             	and    eax,0x7
   15f58:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:760
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
   15f5a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15f5d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15f60:	83 e0 01             	and    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
   15f63:	0f b6 d0             	movzx  edx,al
   15f66:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15f69:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15f6c:	83 ec 04             	sub    esp,0x4
   15f6f:	51                   	push   ecx
   15f70:	53                   	push   ebx
   15f71:	52                   	push   edx
   15f72:	50                   	push   eax
   15f73:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15f76:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15f79:	50                   	push   eax
   15f7a:	68 c6 6f 04 00       	push   0x46fc6
   15f7f:	68 00 20 00 00       	push   0x2000
   15f84:	e8 f2 17 01 00       	call   2777b <printd>
   15f89:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:761
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
                    return;
   15f8c:	eb 78                	jmp    16006 <ahci_port_activate_device+0x442>
/home/yogi/src/os/chrisOS/src/block/ahci.c:762
    } else if ((p->ssts & 0x7) == 4/*?*/) {
   15f8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15f91:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15f94:	83 e0 07             	and    eax,0x7
   15f97:	83 f8 04             	cmp    eax,0x4
   15f9a:	75 1a                	jne    15fb6 <ahci_port_activate_device+0x3f2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:764
                    /* just deactivated */
                    printd(DEBUG_AHCI,"PHY offline mode\n");
   15f9c:	83 ec 08             	sub    esp,0x8
   15f9f:	68 df 6f 04 00       	push   0x46fdf
   15fa4:	68 00 20 00 00       	push   0x2000
   15fa9:	e8 cd 17 01 00       	call   2777b <printd>
   15fae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:765
                    goto activ;
   15fb1:	e9 c0 fe ff ff       	jmp    15e76 <ahci_port_activate_device+0x2b2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:766
    } else if ((p->ssts & 0x7) == 5/*DET_PRESENT_NO_PHY*/) {
   15fb6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15fb9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15fbc:	83 e0 07             	and    eax,0x7
   15fbf:	83 f8 05             	cmp    eax,0x5
   15fc2:	75 1a                	jne    15fde <ahci_port_activate_device+0x41a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:767
                    printd(DEBUG_AHCI,"PRESENT_NO_PHY mode\n");
   15fc4:	83 ec 08             	sub    esp,0x8
   15fc7:	68 f1 6f 04 00       	push   0x46ff1
   15fcc:	68 00 20 00 00       	push   0x2000
   15fd1:	e8 a5 17 01 00       	call   2777b <printd>
   15fd6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:768
                    goto activ; /* try the same */
   15fd9:	e9 98 fe ff ff       	jmp    15e76 <ahci_port_activate_device+0x2b2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:772
    }
exit:
                    /* we're really done */
                    printd(DEBUG_AHCI,"Not present at port %d\n", p - h->ports);
   15fde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15fe1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   15fe4:	81 c2 00 01 00 00    	add    edx,0x100
   15fea:	29 d0                	sub    eax,edx
   15fec:	c1 f8 07             	sar    eax,0x7
   15fef:	83 ec 04             	sub    esp,0x4
   15ff2:	50                   	push   eax
   15ff3:	68 06 70 04 00       	push   0x47006
   15ff8:	68 00 20 00 00       	push   0x2000
   15ffd:	e8 79 17 01 00       	call   2777b <printd>
   16002:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:773
                    return;
   16005:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:774
}
   16006:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   16009:	c9                   	leave  
   1600a:	c3                   	ret    

0001600b <ahci_enable_port>:
ahci_enable_port():
/home/yogi/src/os/chrisOS/src/block/ahci.c:777

void ahci_enable_port(HBA_MEM* ad, int pt)
{
   1600b:	55                   	push   ebp
   1600c:	89 e5                	mov    ebp,esp
   1600e:	53                   	push   ebx
   1600f:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/block/ahci.c:778
        HBA_PORT* p = &ad->ports[pt];
   16012:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   16015:	83 c0 02             	add    eax,0x2
   16018:	c1 e0 07             	shl    eax,0x7
   1601b:	89 c2                	mov    edx,eax
   1601d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16020:	01 d0                	add    eax,edx
   16022:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:779
        int reset_ct = 0;
   16025:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:782
 
        /* skip non-implemented ports */
        if (!(ad->pi & (1 << pt)))
   1602c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1602f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   16032:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   16035:	bb 01 00 00 00       	mov    ebx,0x1
   1603a:	89 c1                	mov    ecx,eax
   1603c:	d3 e3                	shl    ebx,cl
   1603e:	89 d8                	mov    eax,ebx
   16040:	21 d0                	and    eax,edx
   16042:	85 c0                	test   eax,eax
   16044:	0f 84 0c 02 00 00    	je     16256 <ahci_enable_port+0x24b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:787
                return;
 
Pos1:
        /* clear old data */
        p->serr.AsUlong = 0xffffffff; /* 10.1.2 -> 6. */
   1604a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1604d:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:788
        p->pxis.AsUlong = 0xffffffff; /* clear all pending interrupts */
   16054:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16057:	c7 40 10 ff ff ff ff 	mov    DWORD PTR [eax+0x10],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:791
 
        /* first allow for the reception of FISes */
        p->cmd.FRE = 1;
   1605e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16061:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   16064:	83 ca 10             	or     edx,0x10
   16067:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:792
        wait(20); /* wait for BSY to show up */
   1606a:	83 ec 0c             	sub    esp,0xc
   1606d:	6a 14                	push   0x14
   1606f:	e8 26 29 01 00       	call   2899a <wait>
   16074:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:794
        while (1) {
                uint8_t sts = p->tfd.AsUchar;
   16077:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1607a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1607d:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/block/ahci.c:795
                if (sts & 1) {
   16080:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   16084:	83 e0 01             	and    eax,0x1
   16087:	85 c0                	test   eax,eax
   16089:	0f 84 da 00 00 00    	je     16169 <ahci_enable_port+0x15e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:797
                        /* something went wrong! */
                        if (sts == 0x7f) /* no device */
   1608f:	80 7d ef 7f          	cmp    BYTE PTR [ebp-0x11],0x7f
   16093:	0f 84 ef 00 00 00    	je     16188 <ahci_enable_port+0x17d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:799
                                break;
                        else if (sts == 0x41 && p->tfd.ERR == 0x20) {
   16099:	80 7d ef 41          	cmp    BYTE PTR [ebp-0x11],0x41
   1609d:	75 22                	jne    160c1 <ahci_enable_port+0xb6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:799 (discriminator 1)
   1609f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   160a2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   160a5:	83 e0 01             	and    eax,0x1
   160a8:	0f b6 c0             	movzx  eax,al
   160ab:	83 f8 20             	cmp    eax,0x20
   160ae:	75 11                	jne    160c1 <ahci_enable_port+0xb6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:800
                                if (p->sig == SATA_SIG_ATAPI)
   160b0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   160b3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   160b6:	3d 01 01 14 eb       	cmp    eax,0xeb140101
   160bb:	0f 84 ca 00 00 00    	je     1618b <ahci_enable_port+0x180>
/home/yogi/src/os/chrisOS/src/block/ahci.c:804
                                        break; /* no medium */
                        }
                        printk("port%d indicated task file error %x"
                                " while starting up.\n", pt, p->tfd.ERR);
   160c1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   160c4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   160c7:	83 e0 01             	and    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:803
                                break;
                        else if (sts == 0x41 && p->tfd.ERR == 0x20) {
                                if (p->sig == SATA_SIG_ATAPI)
                                        break; /* no medium */
                        }
                        printk("port%d indicated task file error %x"
   160ca:	0f b6 c0             	movzx  eax,al
   160cd:	83 ec 04             	sub    esp,0x4
   160d0:	50                   	push   eax
   160d1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   160d4:	68 20 70 04 00       	push   0x47020
   160d9:	e8 7d 16 01 00       	call   2775b <printk>
   160de:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:805
                                " while starting up.\n", pt, p->tfd.ERR);
                        printd(DEBUG_AHCI,"AHCI: scr1: %x %x\n", p->serr.AsUlong, p->tfd.ERR);
   160e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   160e4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   160e7:	83 e0 01             	and    eax,0x1
   160ea:	0f b6 d0             	movzx  edx,al
   160ed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   160f0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   160f3:	52                   	push   edx
   160f4:	50                   	push   eax
   160f5:	68 58 70 04 00       	push   0x47058
   160fa:	68 00 20 00 00       	push   0x2000
   160ff:	e8 77 16 01 00       	call   2777b <printd>
   16104:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:806
                        printd(DEBUG_AHCI,"AHCI: tfd: %x %x\n", p->tfd.AsUchar, p->tfd.ERR);
   16107:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1610a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1610d:	83 e0 01             	and    eax,0x1
   16110:	0f b6 d0             	movzx  edx,al
   16113:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16116:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   16119:	52                   	push   edx
   1611a:	50                   	push   eax
   1611b:	68 6b 70 04 00       	push   0x4706b
   16120:	68 00 20 00 00       	push   0x2000
   16125:	e8 51 16 01 00       	call   2777b <printd>
   1612a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:807
                        p->serr.AsUlong = 0xffffffff;
   1612d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16130:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:808
                        if (!reset_ct++) {
   16137:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1613a:	8d 50 01             	lea    edx,[eax+0x1]
   1613d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   16140:	85 c0                	test   eax,eax
   16142:	75 16                	jne    1615a <ahci_enable_port+0x14f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:809
                                ahci_port_activate_device(ad, p);
   16144:	83 ec 08             	sub    esp,0x8
   16147:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1614a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1614d:	e8 72 fa ff ff       	call   15bc4 <ahci_port_activate_device>
   16152:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:810
                                goto Pos1;
   16155:	e9 f0 fe ff ff       	jmp    1604a <ahci_enable_port+0x3f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:811
                        } else if (reset_ct == 1) {
   1615a:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   1615e:	0f 85 c7 00 00 00    	jne    1622b <ahci_enable_port+0x220>
/home/yogi/src/os/chrisOS/src/block/ahci.c:813
                                /*ahci_reset_port(ad->ptr, p);*/
                                goto Pos1;
   16164:	e9 e1 fe ff ff       	jmp    1604a <ahci_enable_port+0x3f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:817
                        } else
                                goto defer;
                }
                if (!(sts & (0x80 | 0x8)))
   16169:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1616d:	25 88 00 00 00       	and    eax,0x88
   16172:	85 c0                	test   eax,eax
   16174:	74 18                	je     1618e <ahci_enable_port+0x183>
/home/yogi/src/os/chrisOS/src/block/ahci.c:819
                        break;
                wait(50);
   16176:	83 ec 0c             	sub    esp,0xc
   16179:	6a 32                	push   0x32
   1617b:	e8 1a 28 01 00       	call   2899a <wait>
   16180:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:820
        }
   16183:	e9 ef fe ff ff       	jmp    16077 <ahci_enable_port+0x6c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:798
        while (1) {
                uint8_t sts = p->tfd.AsUchar;
                if (sts & 1) {
                        /* something went wrong! */
                        if (sts == 0x7f) /* no device */
                                break;
   16188:	90                   	nop
   16189:	eb 04                	jmp    1618f <ahci_enable_port+0x184>
/home/yogi/src/os/chrisOS/src/block/ahci.c:801
                        else if (sts == 0x41 && p->tfd.ERR == 0x20) {
                                if (p->sig == SATA_SIG_ATAPI)
                                        break; /* no medium */
   1618b:	90                   	nop
   1618c:	eb 01                	jmp    1618f <ahci_enable_port+0x184>
/home/yogi/src/os/chrisOS/src/block/ahci.c:818
                                goto Pos1;
                        } else
                                goto defer;
                }
                if (!(sts & (0x80 | 0x8)))
                        break;
   1618e:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:823
                wait(50);
        }
 
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
   1618f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16192:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   16195:	83 e0 07             	and    eax,0x7
   16198:	83 f8 03             	cmp    eax,0x3
   1619b:	74 11                	je     161ae <ahci_enable_port+0x1a3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:824
                ahci_port_activate_device(ad, p);
   1619d:	83 ec 08             	sub    esp,0x8
   161a0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   161a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   161a6:	e8 19 fa ff ff       	call   15bc4 <ahci_port_activate_device>
   161ab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:825
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
   161ae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   161b1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   161b4:	25 88 00 00 00       	and    eax,0x88
   161b9:	85 c0                	test   eax,eax
   161bb:	75 71                	jne    1622e <ahci_enable_port+0x223>
/home/yogi/src/os/chrisOS/src/block/ahci.c:827
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
   161bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   161c0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   161c3:	83 e0 07             	and    eax,0x7
   161c6:	83 f8 03             	cmp    eax,0x3
   161c9:	74 30                	je     161fb <ahci_enable_port+0x1f0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:827 (discriminator 1)
   161cb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   161ce:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   161d1:	c1 e8 08             	shr    eax,0x8
   161d4:	83 e0 0f             	and    eax,0xf
   161d7:	3c 02                	cmp    al,0x2
   161d9:	74 20                	je     161fb <ahci_enable_port+0x1f0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:828 (discriminator 2)
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
   161db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   161de:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   161e1:	c1 e8 08             	shr    eax,0x8
   161e4:	83 e0 0f             	and    eax,0xf
/home/yogi/src/os/chrisOS/src/block/ahci.c:827 (discriminator 2)
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
                ahci_port_activate_device(ad, p);
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
   161e7:	3c 06                	cmp    al,0x6
   161e9:	74 10                	je     161fb <ahci_enable_port+0x1f0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:828 (discriminator 3)
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
   161eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   161ee:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   161f1:	c1 e8 08             	shr    eax,0x8
   161f4:	83 e0 0f             	and    eax,0xf
/home/yogi/src/os/chrisOS/src/block/ahci.c:827 (discriminator 3)
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
                ahci_port_activate_device(ad, p);
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
   161f7:	3c 08                	cmp    al,0x8
   161f9:	75 36                	jne    16231 <ahci_enable_port+0x226>
/home/yogi/src/os/chrisOS/src/block/ahci.c:831
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
                goto defer;
        /* we're allowed so set it */
        p->cmd.ST = 1;
   161fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   161fe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   16201:	83 ca 01             	or     edx,0x1
   16204:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:833
        /* Change in PhyRdy, CPS, TFS.err, PCS, DPS(I=1), UFS, HBFS, HBDS, IFS */
        p->ie.AsUlong = (1 << 22) | (1 << 6) | (1 << 31) | (1 << 30)
   16207:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1620a:	c7 40 14 70 00 40 f8 	mov    DWORD PTR [eax+0x14],0xf8400070
/home/yogi/src/os/chrisOS/src/block/ahci.c:839
                | (1 << 5) | (1 << 4) | (1 << 29) | (1 << 28) | (1 << 27);
 
        ///* issue the IDENTIFY_(PACKET)_DEVICE command */
        //ahci_issue_command(ad, pt, 0, disk_cmd_identify, 0, 0, NULL, NULL /* wq_worker_ad*/);
 
        printd(DEBUG_AHCI,"AHCI: port %d is now processing commands\n", pt);
   16211:	83 ec 04             	sub    esp,0x4
   16214:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   16217:	68 80 70 04 00       	push   0x47080
   1621c:	68 00 20 00 00       	push   0x2000
   16221:	e8 55 15 01 00       	call   2777b <printd>
   16226:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:840
        return;
   16229:	eb 2c                	jmp    16257 <ahci_enable_port+0x24c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:815
                                goto Pos1;
                        } else if (reset_ct == 1) {
                                /*ahci_reset_port(ad->ptr, p);*/
                                goto Pos1;
                        } else
                                goto defer;
   1622b:	90                   	nop
   1622c:	eb 04                	jmp    16232 <ahci_enable_port+0x227>
/home/yogi/src/os/chrisOS/src/block/ahci.c:826
 
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
                ahci_port_activate_device(ad, p);
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
                goto defer; /* listen */
   1622e:	90                   	nop
   1622f:	eb 01                	jmp    16232 <ahci_enable_port+0x227>
/home/yogi/src/os/chrisOS/src/block/ahci.c:829
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
                goto defer;
   16231:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:843
 
        printd(DEBUG_AHCI,"AHCI: port %d is now processing commands\n", pt);
        return;
 
defer: /* we're interested in status changes only */
        printd(DEBUG_AHCI,"AHCI: port %d set to listening mode\n", pt);
   16232:	83 ec 04             	sub    esp,0x4
   16235:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   16238:	68 ac 70 04 00       	push   0x470ac
   1623d:	68 00 20 00 00       	push   0x2000
   16242:	e8 34 15 01 00       	call   2777b <printd>
   16247:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:844
        p->ie.AsUlong = (1 << 22) | (1 << 31) | (1 << 6); /* PhyRdy change, CPS, CCS */
   1624a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1624d:	c7 40 14 40 00 40 80 	mov    DWORD PTR [eax+0x14],0x80400040
   16254:	eb 01                	jmp    16257 <ahci_enable_port+0x24c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:783
        HBA_PORT* p = &ad->ports[pt];
        int reset_ct = 0;
 
        /* skip non-implemented ports */
        if (!(ad->pi & (1 << pt)))
                return;
   16256:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:845
        return;
 
defer: /* we're interested in status changes only */
        printd(DEBUG_AHCI,"AHCI: port %d set to listening mode\n", pt);
        p->ie.AsUlong = (1 << 22) | (1 << 31) | (1 << 6); /* PhyRdy change, CPS, CCS */
}
   16257:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1625a:	c9                   	leave  
   1625b:	c3                   	ret    

0001625c <outl>:
outl():
/home/yogi/src/os/chrisOS/include/io.h:32
{
	__asm__ volatile ("outw %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline void outl(unsigned short __port, unsigned int __val)
{
   1625c:	55                   	push   ebp
   1625d:	89 e5                	mov    ebp,esp
   1625f:	83 ec 04             	sub    esp,0x4
   16262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16265:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/include/io.h:33
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
   16269:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1626c:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   16270:	ef                   	out    dx,eax
/home/yogi/src/os/chrisOS/include/io.h:34
}
   16271:	90                   	nop
   16272:	c9                   	leave  
   16273:	c3                   	ret    

00016274 <inl>:
inl():
/home/yogi/src/os/chrisOS/include/io.h:51
	__asm__ volatile ("inw %0, %1" : "=a" (__val) : "dN" (__port));
	return __val;
}

static __inline unsigned int inl(unsigned short __port)
{
   16274:	55                   	push   ebp
   16275:	89 e5                	mov    ebp,esp
   16277:	83 ec 14             	sub    esp,0x14
   1627a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1627d:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:53
	unsigned int __val;
	__asm__ volatile ("ind %0, %1" : "=a" (__val) : "dN" (__port));
   16281:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   16285:	89 c2                	mov    edx,eax
   16287:	ed                   	in     eax,dx
   16288:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/include/io.h:54
	return __val;
   1628b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/include/io.h:55
}
   1628e:	c9                   	leave  
   1628f:	c3                   	ret    

00016290 <printPCIConfig>:
printPCIConfig():
/home/yogi/src/os/chrisOS/src/block/pci.c:26
extern struct pci_bridge_t* kPCIBridgeHeaders;
extern struct pci_device_t* kPCIDeviceFunctions;
extern uint32_t kDebugLevel;

void printPCIConfig()
{
   16290:	55                   	push   ebp
   16291:	89 e5                	mov    ebp,esp
   16293:	57                   	push   edi
   16294:	56                   	push   esi
   16295:	53                   	push   ebx
   16296:	81 ec dc 00 00 00    	sub    esp,0xdc
/home/yogi/src/os/chrisOS/src/block/pci.c:28
    char buffer[150];
    int totalCnt=0;
   1629c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:30
    
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
   162a3:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
   162aa:	0f b6 d0             	movzx  edx,al
   162ad:	0f b6 05 ed 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ed
   162b4:	0f b6 c0             	movzx  eax,al
   162b7:	01 d0                	add    eax,edx
   162b9:	83 ec 08             	sub    esp,0x8
   162bc:	50                   	push   eax
   162bd:	68 74 26 08 00       	push   0x82674
   162c2:	e8 94 14 01 00       	call   2775b <printk>
   162c7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:31
    puts("Devices:\n");
   162ca:	83 ec 0c             	sub    esp,0xc
   162cd:	68 9b 26 08 00       	push   0x8269b
   162d2:	e8 33 21 00 00       	call   1840a <puts>
   162d7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:32
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
   162da:	83 ec 0c             	sub    esp,0xc
   162dd:	68 a8 26 08 00       	push   0x826a8
   162e2:	e8 74 14 01 00       	call   2775b <printk>
   162e7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:33
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
   162ea:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   162f1:	e9 ed 01 00 00       	jmp    164e3 <printPCIConfig+0x253>
/home/yogi/src/os/chrisOS/src/block/pci.c:37
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
                kPCIDeviceHeaders[cnt].subClass);
   162f6:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   162fc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   162ff:	89 d0                	mov    eax,edx
   16301:	c1 e0 02             	shl    eax,0x2
   16304:	01 d0                	add    eax,edx
   16306:	c1 e0 04             	shl    eax,0x4
   16309:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   1630b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   1630e:	89 85 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   16314:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   1631a:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1631d:	89 d0                	mov    eax,edx
   1631f:	c1 e0 02             	shl    eax,0x2
   16322:	01 d0                	add    eax,edx
   16324:	c1 e0 04             	shl    eax,0x4
   16327:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   16329:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
   1632c:	89 b5 30 ff ff ff    	mov    DWORD PTR [ebp-0xd0],esi
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   16332:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   16338:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1633b:	89 d0                	mov    eax,edx
   1633d:	c1 e0 02             	shl    eax,0x2
   16340:	01 d0                	add    eax,edx
   16342:	c1 e0 04             	shl    eax,0x4
   16345:	01 c8                	add    eax,ecx
   16347:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   1634b:	0f b7 f8             	movzx  edi,ax
   1634e:	89 bd 2c ff ff ff    	mov    DWORD PTR [ebp-0xd4],edi
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   16354:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   1635a:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1635d:	89 d0                	mov    eax,edx
   1635f:	c1 e0 02             	shl    eax,0x2
   16362:	01 d0                	add    eax,edx
   16364:	c1 e0 04             	shl    eax,0x4
   16367:	01 c8                	add    eax,ecx
   16369:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   1636d:	0f b7 d8             	movzx  ebx,ax
   16370:	89 9d 28 ff ff ff    	mov    DWORD PTR [ebp-0xd8],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   16376:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   1637c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1637f:	89 d0                	mov    eax,edx
   16381:	c1 e0 02             	shl    eax,0x2
   16384:	01 d0                	add    eax,edx
   16386:	c1 e0 04             	shl    eax,0x4
   16389:	01 c8                	add    eax,ecx
   1638b:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   1638f:	0f b6 c8             	movzx  ecx,al
   16392:	89 8d 24 ff ff ff    	mov    DWORD PTR [ebp-0xdc],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   16398:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   1639e:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   163a1:	89 d0                	mov    eax,edx
   163a3:	c1 e0 02             	shl    eax,0x2
   163a6:	01 d0                	add    eax,edx
   163a8:	c1 e0 04             	shl    eax,0x4
   163ab:	01 c8                	add    eax,ecx
   163ad:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   163b1:	0f b6 f8             	movzx  edi,al
   163b4:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   163ba:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   163bd:	89 d0                	mov    eax,edx
   163bf:	c1 e0 02             	shl    eax,0x2
   163c2:	01 d0                	add    eax,edx
   163c4:	c1 e0 04             	shl    eax,0x4
   163c7:	01 c8                	add    eax,ecx
   163c9:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   163cd:	0f b6 f0             	movzx  esi,al
   163d0:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   163d6:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   163d9:	89 d0                	mov    eax,edx
   163db:	c1 e0 02             	shl    eax,0x2
   163de:	01 d0                	add    eax,edx
   163e0:	c1 e0 04             	shl    eax,0x4
   163e3:	01 c8                	add    eax,ecx
   163e5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   163e9:	0f b6 d8             	movzx  ebx,al
   163ec:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   163f2:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   163f5:	89 d0                	mov    eax,edx
   163f7:	c1 e0 02             	shl    eax,0x2
   163fa:	01 d0                	add    eax,edx
   163fc:	c1 e0 04             	shl    eax,0x4
   163ff:	01 c8                	add    eax,ecx
   16401:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   16404:	0f b6 c0             	movzx  eax,al
   16407:	83 ec 08             	sub    esp,0x8
   1640a:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   16410:	ff b5 30 ff ff ff    	push   DWORD PTR [ebp-0xd0]
   16416:	ff b5 2c ff ff ff    	push   DWORD PTR [ebp-0xd4]
   1641c:	ff b5 28 ff ff ff    	push   DWORD PTR [ebp-0xd8]
   16422:	ff b5 24 ff ff ff    	push   DWORD PTR [ebp-0xdc]
   16428:	57                   	push   edi
   16429:	56                   	push   esi
   1642a:	53                   	push   ebx
   1642b:	50                   	push   eax
   1642c:	68 e4 26 08 00       	push   0x826e4
   16431:	e8 25 13 01 00       	call   2775b <printk>
   16436:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:40
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
                kPCIDeviceHeaders[cnt].subClass);
        //getVendorLongName(kPCIDeviceHeaders[cnt].vendor, buffer);
        //printk("%s",buffer);
        getDeviceName(kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, buffer);
   16439:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   1643f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   16442:	89 d0                	mov    eax,edx
   16444:	c1 e0 02             	shl    eax,0x2
   16447:	01 d0                	add    eax,edx
   16449:	c1 e0 04             	shl    eax,0x4
   1644c:	01 c8                	add    eax,ecx
   1644e:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   16452:	0f b7 c8             	movzx  ecx,ax
   16455:	8b 1d f4 97 12 00    	mov    ebx,DWORD PTR ds:0x1297f4
   1645b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1645e:	89 d0                	mov    eax,edx
   16460:	c1 e0 02             	shl    eax,0x2
   16463:	01 d0                	add    eax,edx
   16465:	c1 e0 04             	shl    eax,0x4
   16468:	01 d8                	add    eax,ebx
   1646a:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   1646e:	0f b7 c0             	movzx  eax,ax
   16471:	83 ec 04             	sub    esp,0x4
   16474:	8d 95 42 ff ff ff    	lea    edx,[ebp-0xbe]
   1647a:	52                   	push   edx
   1647b:	51                   	push   ecx
   1647c:	50                   	push   eax
   1647d:	e8 63 07 00 00       	call   16be5 <getDeviceName>
   16482:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:41
        strleft(buffer,28);
   16485:	83 ec 08             	sub    esp,0x8
   16488:	6a 1c                	push   0x1c
   1648a:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   16490:	50                   	push   eax
   16491:	e8 32 16 01 00       	call   27ac8 <strleft>
   16496:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:42
        printk("%s\n",buffer);
   16499:	83 ec 08             	sub    esp,0x8
   1649c:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   164a2:	50                   	push   eax
   164a3:	68 18 27 08 00       	push   0x82718
   164a8:	e8 ae 12 01 00       	call   2775b <printk>
   164ad:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:43
        totalCnt++;
   164b0:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:44
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
   164b4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   164b8:	7e 25                	jle    164df <printPCIConfig+0x24f>
/home/yogi/src/os/chrisOS/src/block/pci.c:44 (discriminator 1)
   164ba:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   164bd:	8d 58 04             	lea    ebx,[eax+0x4]
   164c0:	e8 86 1e 00 00       	call   1834b <cursorGetMaxY>
   164c5:	89 c1                	mov    ecx,eax
   164c7:	89 d8                	mov    eax,ebx
   164c9:	99                   	cdq    
   164ca:	f7 f9                	idiv   ecx
   164cc:	89 d0                	mov    eax,edx
   164ce:	85 c0                	test   eax,eax
   164d0:	75 0d                	jne    164df <printPCIConfig+0x24f>
/home/yogi/src/os/chrisOS/src/block/pci.c:45
            pauseDisplay(false);
   164d2:	83 ec 0c             	sub    esp,0xc
   164d5:	6a 00                	push   0x0
   164d7:	e8 4b fa 00 00       	call   25f27 <pauseDisplay>
   164dc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:33 (discriminator 2)
    int totalCnt=0;
    
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
   164df:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:33 (discriminator 1)
   164e3:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
   164ea:	0f b6 c0             	movzx  eax,al
   164ed:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   164f0:	0f 8f 00 fe ff ff    	jg     162f6 <printPCIConfig+0x66>
/home/yogi/src/os/chrisOS/src/block/pci.c:47
        printk("%s\n",buffer);
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }
    puts("Bridges:\n");
   164f6:	83 ec 0c             	sub    esp,0xc
   164f9:	68 1c 27 08 00       	push   0x8271c
   164fe:	e8 07 1f 00 00       	call   1840a <puts>
   16503:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:48
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
   16506:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   1650d:	e9 ef 01 00 00       	jmp    16701 <printPCIConfig+0x471>
/home/yogi/src/os/chrisOS/src/block/pci.c:55
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   16512:	a1 f8 97 12 00       	mov    eax,ds:0x1297f8
   16517:	0f b6 40 26          	movzx  eax,BYTE PTR [eax+0x26]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   1651b:	0f b6 c0             	movzx  eax,al
   1651e:	89 85 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:55
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   16524:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   1652a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1652d:	6b c0 4e             	imul   eax,eax,0x4e
   16530:	01 d0                	add    eax,edx
   16532:	0f b6 40 27          	movzx  eax,BYTE PTR [eax+0x27]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16536:	0f b6 f0             	movzx  esi,al
   16539:	89 b5 30 ff ff ff    	mov    DWORD PTR [ebp-0xd0],esi
/home/yogi/src/os/chrisOS/src/block/pci.c:55
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   1653f:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   16545:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16548:	6b c0 4e             	imul   eax,eax,0x4e
   1654b:	01 d0                	add    eax,edx
   1654d:	0f b6 40 28          	movzx  eax,BYTE PTR [eax+0x28]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16551:	0f b6 f8             	movzx  edi,al
   16554:	89 bd 2c ff ff ff    	mov    DWORD PTR [ebp-0xd4],edi
/home/yogi/src/os/chrisOS/src/block/pci.c:54
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
   1655a:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   16560:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16563:	6b c0 4e             	imul   eax,eax,0x4e
   16566:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16568:	8b 58 0d             	mov    ebx,DWORD PTR [eax+0xd]
   1656b:	89 9d 28 ff ff ff    	mov    DWORD PTR [ebp-0xd8],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:54
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
   16571:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   16577:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1657a:	6b c0 4e             	imul   eax,eax,0x4e
   1657d:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   1657f:	8b 48 09             	mov    ecx,DWORD PTR [eax+0x9]
   16582:	89 8d 24 ff ff ff    	mov    DWORD PTR [ebp-0xdc],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:53
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
   16588:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   1658e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16591:	6b c0 4e             	imul   eax,eax,0x4e
   16594:	01 d0                	add    eax,edx
   16596:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   1659a:	0f b7 d0             	movzx  edx,ax
   1659d:	89 95 20 ff ff ff    	mov    DWORD PTR [ebp-0xe0],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:53
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
   165a3:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   165a9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   165ac:	6b c0 4e             	imul   eax,eax,0x4e
   165af:	01 d0                	add    eax,edx
   165b1:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   165b5:	0f b7 c0             	movzx  eax,ax
   165b8:	89 85 1c ff ff ff    	mov    DWORD PTR [ebp-0xe4],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:52
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
   165be:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   165c4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   165c7:	6b c0 4e             	imul   eax,eax,0x4e
   165ca:	01 d0                	add    eax,edx
   165cc:	0f b6 40 2b          	movzx  eax,BYTE PTR [eax+0x2b]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   165d0:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/block/pci.c:52
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
   165d3:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   165d9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   165dc:	6b c0 4e             	imul   eax,eax,0x4e
   165df:	01 d0                	add    eax,edx
   165e1:	0f b6 40 2a          	movzx  eax,BYTE PTR [eax+0x2a]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   165e5:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/block/pci.c:51
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
   165e8:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   165ee:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   165f1:	6b c0 4e             	imul   eax,eax,0x4e
   165f4:	01 d0                	add    eax,edx
   165f6:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   165fa:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:51
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
   165fd:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   16603:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16606:	6b c0 4e             	imul   eax,eax,0x4e
   16609:	01 d0                	add    eax,edx
   1660b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   1660f:	0f b6 c8             	movzx  ecx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:51
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
   16612:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   16618:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1661b:	6b c0 4e             	imul   eax,eax,0x4e
   1661e:	01 d0                	add    eax,edx
   16620:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16623:	0f b6 c0             	movzx  eax,al
   16626:	83 ec 0c             	sub    esp,0xc
   16629:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   1662f:	ff b5 30 ff ff ff    	push   DWORD PTR [ebp-0xd0]
   16635:	ff b5 2c ff ff ff    	push   DWORD PTR [ebp-0xd4]
   1663b:	ff b5 28 ff ff ff    	push   DWORD PTR [ebp-0xd8]
   16641:	ff b5 24 ff ff ff    	push   DWORD PTR [ebp-0xdc]
   16647:	ff b5 20 ff ff ff    	push   DWORD PTR [ebp-0xe0]
   1664d:	ff b5 1c ff ff ff    	push   DWORD PTR [ebp-0xe4]
   16653:	57                   	push   edi
   16654:	56                   	push   esi
   16655:	53                   	push   ebx
   16656:	51                   	push   ecx
   16657:	50                   	push   eax
   16658:	68 28 27 08 00       	push   0x82728
   1665d:	e8 f9 10 01 00       	call   2775b <printk>
   16662:	83 c4 40             	add    esp,0x40
/home/yogi/src/os/chrisOS/src/block/pci.c:60
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
        //getVendorLongName(kPCIDeviceHeaders[cnt].vendor, buffer);
        //strleft(buffer,10);
        //printk("%s",buffer);
//        strleft(buffer,20);
        getDeviceName(kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, buffer);
   16665:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
   1666b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1666e:	6b c0 4e             	imul   eax,eax,0x4e
   16671:	01 d0                	add    eax,edx
   16673:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
   16677:	0f b7 d0             	movzx  edx,ax
   1667a:	8b 0d f8 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f8
   16680:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16683:	6b c0 4e             	imul   eax,eax,0x4e
   16686:	01 c8                	add    eax,ecx
   16688:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
   1668c:	0f b7 c0             	movzx  eax,ax
   1668f:	83 ec 04             	sub    esp,0x4
   16692:	8d 8d 42 ff ff ff    	lea    ecx,[ebp-0xbe]
   16698:	51                   	push   ecx
   16699:	52                   	push   edx
   1669a:	50                   	push   eax
   1669b:	e8 45 05 00 00       	call   16be5 <getDeviceName>
   166a0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:61
        strleft(buffer,28);
   166a3:	83 ec 08             	sub    esp,0x8
   166a6:	6a 1c                	push   0x1c
   166a8:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   166ae:	50                   	push   eax
   166af:	e8 14 14 01 00       	call   27ac8 <strleft>
   166b4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:62
        printk("%s\n",buffer);
   166b7:	83 ec 08             	sub    esp,0x8
   166ba:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   166c0:	50                   	push   eax
   166c1:	68 18 27 08 00       	push   0x82718
   166c6:	e8 90 10 01 00       	call   2775b <printk>
   166cb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:63
        totalCnt++;
   166ce:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:64
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
   166d2:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   166d6:	7e 25                	jle    166fd <printPCIConfig+0x46d>
/home/yogi/src/os/chrisOS/src/block/pci.c:64 (discriminator 1)
   166d8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   166db:	8d 58 04             	lea    ebx,[eax+0x4]
   166de:	e8 68 1c 00 00       	call   1834b <cursorGetMaxY>
   166e3:	89 c1                	mov    ecx,eax
   166e5:	89 d8                	mov    eax,ebx
   166e7:	99                   	cdq    
   166e8:	f7 f9                	idiv   ecx
   166ea:	89 d0                	mov    eax,edx
   166ec:	85 c0                	test   eax,eax
   166ee:	75 0d                	jne    166fd <printPCIConfig+0x46d>
/home/yogi/src/os/chrisOS/src/block/pci.c:65
            pauseDisplay(false);
   166f0:	83 ec 0c             	sub    esp,0xc
   166f3:	6a 00                	push   0x0
   166f5:	e8 2d f8 00 00       	call   25f27 <pauseDisplay>
   166fa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:48 (discriminator 2)
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
   166fd:	83 45 dc 01          	add    DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:48 (discriminator 1)
   16701:	0f b6 05 ed 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ed
   16708:	0f b6 c0             	movzx  eax,al
   1670b:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   1670e:	0f 8f fe fd ff ff    	jg     16512 <printPCIConfig+0x282>
/home/yogi/src/os/chrisOS/src/block/pci.c:67
        printk("%s\n",buffer);
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }   
    puts("Functions:\n");
   16714:	83 ec 0c             	sub    esp,0xc
   16717:	68 6c 27 08 00       	push   0x8276c
   1671c:	e8 e9 1c 00 00       	call   1840a <puts>
   16721:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:68
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
   16724:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
   1672b:	e9 ed 01 00 00       	jmp    1691d <printPCIConfig+0x68d>
/home/yogi/src/os/chrisOS/src/block/pci.c:74
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
                    kPCIDeviceFunctions[cnt].subClass);
   16730:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   16736:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16739:	89 d0                	mov    eax,edx
   1673b:	c1 e0 02             	shl    eax,0x2
   1673e:	01 d0                	add    eax,edx
   16740:	c1 e0 04             	shl    eax,0x4
   16743:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   16745:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   16748:	89 85 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   1674e:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   16754:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16757:	89 d0                	mov    eax,edx
   16759:	c1 e0 02             	shl    eax,0x2
   1675c:	01 d0                	add    eax,edx
   1675e:	c1 e0 04             	shl    eax,0x4
   16761:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   16763:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
   16766:	89 b5 30 ff ff ff    	mov    DWORD PTR [ebp-0xd0],esi
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   1676c:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   16772:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16775:	89 d0                	mov    eax,edx
   16777:	c1 e0 02             	shl    eax,0x2
   1677a:	01 d0                	add    eax,edx
   1677c:	c1 e0 04             	shl    eax,0x4
   1677f:	01 c8                	add    eax,ecx
   16781:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   16785:	0f b7 f8             	movzx  edi,ax
   16788:	89 bd 2c ff ff ff    	mov    DWORD PTR [ebp-0xd4],edi
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   1678e:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   16794:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16797:	89 d0                	mov    eax,edx
   16799:	c1 e0 02             	shl    eax,0x2
   1679c:	01 d0                	add    eax,edx
   1679e:	c1 e0 04             	shl    eax,0x4
   167a1:	01 c8                	add    eax,ecx
   167a3:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   167a7:	0f b7 d8             	movzx  ebx,ax
   167aa:	89 9d 28 ff ff ff    	mov    DWORD PTR [ebp-0xd8],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   167b0:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   167b6:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   167b9:	89 d0                	mov    eax,edx
   167bb:	c1 e0 02             	shl    eax,0x2
   167be:	01 d0                	add    eax,edx
   167c0:	c1 e0 04             	shl    eax,0x4
   167c3:	01 c8                	add    eax,ecx
   167c5:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   167c9:	0f b6 c8             	movzx  ecx,al
   167cc:	89 8d 24 ff ff ff    	mov    DWORD PTR [ebp-0xdc],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   167d2:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   167d8:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   167db:	89 d0                	mov    eax,edx
   167dd:	c1 e0 02             	shl    eax,0x2
   167e0:	01 d0                	add    eax,edx
   167e2:	c1 e0 04             	shl    eax,0x4
   167e5:	01 c8                	add    eax,ecx
   167e7:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   167eb:	0f b6 f8             	movzx  edi,al
   167ee:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   167f4:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   167f7:	89 d0                	mov    eax,edx
   167f9:	c1 e0 02             	shl    eax,0x2
   167fc:	01 d0                	add    eax,edx
   167fe:	c1 e0 04             	shl    eax,0x4
   16801:	01 c8                	add    eax,ecx
   16803:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   16807:	0f b6 f0             	movzx  esi,al
   1680a:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   16810:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16813:	89 d0                	mov    eax,edx
   16815:	c1 e0 02             	shl    eax,0x2
   16818:	01 d0                	add    eax,edx
   1681a:	c1 e0 04             	shl    eax,0x4
   1681d:	01 c8                	add    eax,ecx
   1681f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   16823:	0f b6 d8             	movzx  ebx,al
   16826:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   1682c:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   1682f:	89 d0                	mov    eax,edx
   16831:	c1 e0 02             	shl    eax,0x2
   16834:	01 d0                	add    eax,edx
   16836:	c1 e0 04             	shl    eax,0x4
   16839:	01 c8                	add    eax,ecx
   1683b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1683e:	0f b6 c0             	movzx  eax,al
   16841:	83 ec 08             	sub    esp,0x8
   16844:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   1684a:	ff b5 30 ff ff ff    	push   DWORD PTR [ebp-0xd0]
   16850:	ff b5 2c ff ff ff    	push   DWORD PTR [ebp-0xd4]
   16856:	ff b5 28 ff ff ff    	push   DWORD PTR [ebp-0xd8]
   1685c:	ff b5 24 ff ff ff    	push   DWORD PTR [ebp-0xdc]
   16862:	57                   	push   edi
   16863:	56                   	push   esi
   16864:	53                   	push   ebx
   16865:	50                   	push   eax
   16866:	68 e4 26 08 00       	push   0x826e4
   1686b:	e8 eb 0e 01 00       	call   2775b <printk>
   16870:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:77
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
                    kPCIDeviceFunctions[cnt].subClass);
            //getVendorLongName(kPCIDeviceFunctions[cnt].vendor, buffer);
            //printk("%s",buffer);
            getDeviceName(kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, buffer);
   16873:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   16879:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   1687c:	89 d0                	mov    eax,edx
   1687e:	c1 e0 02             	shl    eax,0x2
   16881:	01 d0                	add    eax,edx
   16883:	c1 e0 04             	shl    eax,0x4
   16886:	01 c8                	add    eax,ecx
   16888:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   1688c:	0f b7 c8             	movzx  ecx,ax
   1688f:	8b 1d fc 97 12 00    	mov    ebx,DWORD PTR ds:0x1297fc
   16895:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16898:	89 d0                	mov    eax,edx
   1689a:	c1 e0 02             	shl    eax,0x2
   1689d:	01 d0                	add    eax,edx
   1689f:	c1 e0 04             	shl    eax,0x4
   168a2:	01 d8                	add    eax,ebx
   168a4:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   168a8:	0f b7 c0             	movzx  eax,ax
   168ab:	83 ec 04             	sub    esp,0x4
   168ae:	8d 95 42 ff ff ff    	lea    edx,[ebp-0xbe]
   168b4:	52                   	push   edx
   168b5:	51                   	push   ecx
   168b6:	50                   	push   eax
   168b7:	e8 29 03 00 00       	call   16be5 <getDeviceName>
   168bc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:78
            strleft(buffer,28);
   168bf:	83 ec 08             	sub    esp,0x8
   168c2:	6a 1c                	push   0x1c
   168c4:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   168ca:	50                   	push   eax
   168cb:	e8 f8 11 01 00       	call   27ac8 <strleft>
   168d0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:79
            printk("%s\n",buffer);
   168d3:	83 ec 08             	sub    esp,0x8
   168d6:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   168dc:	50                   	push   eax
   168dd:	68 18 27 08 00       	push   0x82718
   168e2:	e8 74 0e 01 00       	call   2775b <printk>
   168e7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:80
            totalCnt++;
   168ea:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:81
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
   168ee:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   168f2:	7e 25                	jle    16919 <printPCIConfig+0x689>
/home/yogi/src/os/chrisOS/src/block/pci.c:81 (discriminator 1)
   168f4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   168f7:	8d 58 04             	lea    ebx,[eax+0x4]
   168fa:	e8 4c 1a 00 00       	call   1834b <cursorGetMaxY>
   168ff:	89 c1                	mov    ecx,eax
   16901:	89 d8                	mov    eax,ebx
   16903:	99                   	cdq    
   16904:	f7 f9                	idiv   ecx
   16906:	89 d0                	mov    eax,edx
   16908:	85 c0                	test   eax,eax
   1690a:	75 0d                	jne    16919 <printPCIConfig+0x689>
/home/yogi/src/os/chrisOS/src/block/pci.c:82
            pauseDisplay(false);
   1690c:	83 ec 0c             	sub    esp,0xc
   1690f:	6a 00                	push   0x0
   16911:	e8 11 f6 00 00       	call   25f27 <pauseDisplay>
   16916:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:68 (discriminator 2)
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }   
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
   16919:	83 45 d8 01          	add    DWORD PTR [ebp-0x28],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:68 (discriminator 1)
   1691d:	0f b6 05 ee 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ee
   16924:	0f b6 c0             	movzx  eax,al
   16927:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
   1692a:	0f 8f 00 fe ff ff    	jg     16730 <printPCIConfig+0x4a0>
/home/yogi/src/os/chrisOS/src/block/pci.c:85
            totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
        }
    }
}
   16930:	90                   	nop
   16931:	8d 65 f4             	lea    esp,[ebp-0xc]
   16934:	5b                   	pop    ebx
   16935:	5e                   	pop    esi
   16936:	5f                   	pop    edi
   16937:	5d                   	pop    ebp
   16938:	c3                   	ret    

00016939 <pciConfigReadWord>:
pciConfigReadWord():
/home/yogi/src/os/chrisOS/src/block/pci.c:90

//struct pci_device_id* pci_deviceList = (struct pci_device_id*)PCI_DEVICE_LIST_ADDRESS;
  uint16_t pciConfigReadWord (uint8_t bus, uint8_t slot,
                             uint8_t func, uint8_t offset)
 {
   16939:	55                   	push   ebp
   1693a:	89 e5                	mov    ebp,esp
   1693c:	53                   	push   ebx
   1693d:	83 ec 30             	sub    esp,0x30
   16940:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   16943:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   16946:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   16949:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1694c:	88 5d d8             	mov    BYTE PTR [ebp-0x28],bl
   1694f:	88 4d d4             	mov    BYTE PTR [ebp-0x2c],cl
   16952:	88 55 d0             	mov    BYTE PTR [ebp-0x30],dl
   16955:	88 45 cc             	mov    BYTE PTR [ebp-0x34],al
/home/yogi/src/os/chrisOS/src/block/pci.c:92
    uint32_t address;
    uint32_t lbus  = (uint32_t)bus;
   16958:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
   1695c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:93
    uint32_t lslot = (uint32_t)slot;
   1695f:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   16963:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:94
    uint32_t lfunc = (uint32_t)func;
   16966:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
   1696a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:95
    uint16_t tmp = 0;
   1696d:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:97
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   16973:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   16976:	c1 e0 10             	shl    eax,0x10
   16979:	89 c2                	mov    edx,eax
   1697b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1697e:	c1 e0 0b             	shl    eax,0xb
   16981:	09 c2                	or     edx,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:98
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   16983:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16986:	c1 e0 08             	shl    eax,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:97
    uint32_t lbus  = (uint32_t)bus;
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint16_t tmp = 0;
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   16989:	09 c2                	or     edx,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:98
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   1698b:	0f b6 45 cc          	movzx  eax,BYTE PTR [ebp-0x34]
   1698f:	25 fc 00 00 00       	and    eax,0xfc
   16994:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/block/pci.c:97
    uint32_t lbus  = (uint32_t)bus;
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint16_t tmp = 0;
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   16996:	0d 00 00 00 80       	or     eax,0x80000000
   1699b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:101
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
 
    /* write out the address */
    outl (0xCF8, address);
   1699e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   169a1:	68 f8 0c 00 00       	push   0xcf8
   169a6:	e8 b1 f8 ff ff       	call   1625c <outl>
   169ab:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:104
    /* read in the data */
    /* (offset & 2) * 8) = 0 will choose the first word of the 32 bits register */
    tmp = (uint16_t)((inl (0xCFC) >> ((offset & 2) * 8)) & 0xffff);
   169ae:	68 fc 0c 00 00       	push   0xcfc
   169b3:	e8 bc f8 ff ff       	call   16274 <inl>
   169b8:	83 c4 04             	add    esp,0x4
   169bb:	89 c2                	mov    edx,eax
   169bd:	0f b6 45 cc          	movzx  eax,BYTE PTR [ebp-0x34]
   169c1:	83 e0 02             	and    eax,0x2
   169c4:	c1 e0 03             	shl    eax,0x3
   169c7:	89 c1                	mov    ecx,eax
   169c9:	d3 ea                	shr    edx,cl
   169cb:	89 d0                	mov    eax,edx
   169cd:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/src/os/chrisOS/src/block/pci.c:105
    return (tmp);
   169d1:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
/home/yogi/src/os/chrisOS/src/block/pci.c:106
 }
   169d5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   169d8:	c9                   	leave  
   169d9:	c3                   	ret    

000169da <pciConfigReadDWord>:
pciConfigReadDWord():
/home/yogi/src/os/chrisOS/src/block/pci.c:110

 uint32_t pciConfigReadDWord (uint8_t bus, uint8_t slot,
                             uint8_t func, uint8_t offset)
 {
   169da:	55                   	push   ebp
   169db:	89 e5                	mov    ebp,esp
   169dd:	53                   	push   ebx
   169de:	83 ec 30             	sub    esp,0x30
   169e1:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   169e4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   169e7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   169ea:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   169ed:	88 5d d8             	mov    BYTE PTR [ebp-0x28],bl
   169f0:	88 4d d4             	mov    BYTE PTR [ebp-0x2c],cl
   169f3:	88 55 d0             	mov    BYTE PTR [ebp-0x30],dl
   169f6:	88 45 cc             	mov    BYTE PTR [ebp-0x34],al
/home/yogi/src/os/chrisOS/src/block/pci.c:112
    uint32_t address;
    uint32_t lbus  = (uint32_t)bus;
   169f9:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
   169fd:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:113
    uint32_t lslot = (uint32_t)slot;
   16a00:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   16a04:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:114
    uint32_t lfunc = (uint32_t)func;
   16a07:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
   16a0b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:118
    uint32_t num;
    
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   16a0e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   16a11:	c1 e0 10             	shl    eax,0x10
   16a14:	89 c2                	mov    edx,eax
   16a16:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16a19:	c1 e0 0b             	shl    eax,0xb
   16a1c:	09 c2                	or     edx,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:119
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   16a1e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16a21:	c1 e0 08             	shl    eax,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:118
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint32_t num;
    
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   16a24:	09 c2                	or     edx,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:119
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   16a26:	0f b6 45 cc          	movzx  eax,BYTE PTR [ebp-0x34]
   16a2a:	25 fc 00 00 00       	and    eax,0xfc
   16a2f:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/block/pci.c:118
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint32_t num;
    
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   16a31:	0d 00 00 00 80       	or     eax,0x80000000
   16a36:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:122
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
 
    /* write out the address */
    outl (0xCF8, address);
   16a39:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   16a3c:	68 f8 0c 00 00       	push   0xcf8
   16a41:	e8 16 f8 ff ff       	call   1625c <outl>
   16a46:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:125
    /* read in the data */
    /* (offset & 2) * 8) = 0 will choose the first word of the 32 bits register */
    num = inl (0xCFC);
   16a49:	68 fc 0c 00 00       	push   0xcfc
   16a4e:	e8 21 f8 ff ff       	call   16274 <inl>
   16a53:	83 c4 04             	add    esp,0x4
   16a56:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:127
    //return ((num >> 24)) | ((num & 0x0000FF000) << 8) | ((num & 0x00FF0000)>>8) | ((num << 24));
    return num;
   16a59:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/chrisOS/src/block/pci.c:128
 }
   16a5c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   16a5f:	c9                   	leave  
   16a60:	c3                   	ret    

00016a61 <pciQueryBDF>:
pciQueryBDF():
/home/yogi/src/os/chrisOS/src/block/pci.c:131

 void pciQueryBDF(uint8_t bus, uint8_t device, uint8_t function)
 {
   16a61:	55                   	push   ebp
   16a62:	89 e5                	mov    ebp,esp
   16a64:	81 ec b8 00 00 00    	sub    esp,0xb8
   16a6a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   16a6d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   16a70:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   16a73:	88 8d 54 ff ff ff    	mov    BYTE PTR [ebp-0xac],cl
   16a79:	88 95 50 ff ff ff    	mov    BYTE PTR [ebp-0xb0],dl
   16a7f:	88 85 4c ff ff ff    	mov    BYTE PTR [ebp-0xb4],al
/home/yogi/src/os/chrisOS/src/block/pci.c:135
     struct pci_device_t header;
     struct pci_bridge_t bridge;

     printk("Retrieving info for PCI address %02X:%02X:%02X\n",bus,device,function);
   16a85:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   16a8c:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   16a93:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   16a9a:	51                   	push   ecx
   16a9b:	52                   	push   edx
   16a9c:	50                   	push   eax
   16a9d:	68 78 27 08 00       	push   0x82778
   16aa2:	e8 b4 0c 01 00       	call   2775b <printk>
   16aa7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:136
    if (!getDeviceHeader(&header, bus, device, function))
   16aaa:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   16ab1:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   16ab8:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   16abf:	51                   	push   ecx
   16ac0:	52                   	push   edx
   16ac1:	50                   	push   eax
   16ac2:	8d 45 a8             	lea    eax,[ebp-0x58]
   16ac5:	50                   	push   eax
   16ac6:	e8 bd 02 00 00       	call   16d88 <getDeviceHeader>
   16acb:	83 c4 10             	add    esp,0x10
   16ace:	83 f0 01             	xor    eax,0x1
   16ad1:	84 c0                	test   al,al
   16ad3:	74 15                	je     16aea <pciQueryBDF+0x89>
/home/yogi/src/os/chrisOS/src/block/pci.c:138
    {
        printk("No device at that address\n");
   16ad5:	83 ec 0c             	sub    esp,0xc
   16ad8:	68 a8 27 08 00       	push   0x827a8
   16add:	e8 79 0c 01 00       	call   2775b <printk>
   16ae2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:139
        return;
   16ae5:	e9 83 00 00 00       	jmp    16b6d <pciQueryBDF+0x10c>
/home/yogi/src/os/chrisOS/src/block/pci.c:141
    }
    if (header.vendor==0xFFFF)
   16aea:	0f b7 45 ae          	movzx  eax,WORD PTR [ebp-0x52]
   16aee:	66 83 f8 ff          	cmp    ax,0xffff
   16af2:	75 27                	jne    16b1b <pciQueryBDF+0xba>
/home/yogi/src/os/chrisOS/src/block/pci.c:143
    {
        printk("Nothing found at %02X:%02X:%02X\n",bus,device,function);
   16af4:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   16afb:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   16b02:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   16b09:	51                   	push   ecx
   16b0a:	52                   	push   edx
   16b0b:	50                   	push   eax
   16b0c:	68 c4 27 08 00       	push   0x827c4
   16b11:	e8 45 0c 01 00       	call   2775b <printk>
   16b16:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:144
        return;
   16b19:	eb 52                	jmp    16b6d <pciQueryBDF+0x10c>
/home/yogi/src/os/chrisOS/src/block/pci.c:146
    }
     if (header.class==0x06)
   16b1b:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
   16b1e:	83 f8 06             	cmp    eax,0x6
   16b21:	75 3b                	jne    16b5e <pciQueryBDF+0xfd>
/home/yogi/src/os/chrisOS/src/block/pci.c:148
     {
         getBridgeHeader(&bridge,bus,device,function);
   16b23:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   16b2a:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   16b31:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   16b38:	51                   	push   ecx
   16b39:	52                   	push   edx
   16b3a:	50                   	push   eax
   16b3b:	8d 85 5a ff ff ff    	lea    eax,[ebp-0xa6]
   16b41:	50                   	push   eax
   16b42:	e8 27 04 00 00       	call   16f6e <getBridgeHeader>
   16b47:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:149
         printPCIBridgeHeader(&bridge);
   16b4a:	83 ec 0c             	sub    esp,0xc
   16b4d:	8d 85 5a ff ff ff    	lea    eax,[ebp-0xa6]
   16b53:	50                   	push   eax
   16b54:	e8 5d 07 00 00       	call   172b6 <printPCIBridgeHeader>
   16b59:	83 c4 10             	add    esp,0x10
   16b5c:	eb 0f                	jmp    16b6d <pciQueryBDF+0x10c>
/home/yogi/src/os/chrisOS/src/block/pci.c:152
     }
     else
         printPCIHeader(&header);
   16b5e:	83 ec 0c             	sub    esp,0xc
   16b61:	8d 45 a8             	lea    eax,[ebp-0x58]
   16b64:	50                   	push   eax
   16b65:	e8 a1 09 00 00       	call   1750b <printPCIHeader>
   16b6a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:153
 }
   16b6d:	c9                   	leave  
   16b6e:	c3                   	ret    

00016b6f <getVendorLongName>:
getVendorLongName():
/home/yogi/src/os/chrisOS/src/block/pci.c:162
    uint32_t subvendor, subdevice;  // Subsystem ID's or PCI_ANY_ID 
    uint32_t class, class_mask;     // (class,subclass,prog-if) triplet 
    unsigned long driver_data;      // Data private to the driver 
*/
void getVendorLongName(uint32_t vendorID, char* vendorLongName)
{
   16b6f:	55                   	push   ebp
   16b70:	89 e5                	mov    ebp,esp
   16b72:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/pci.c:163
    for (unsigned cnt=0; cnt<PCI_VENTABLE_LEN;cnt++)
   16b75:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   16b7c:	eb 49                	jmp    16bc7 <getVendorLongName+0x58>
/home/yogi/src/os/chrisOS/src/block/pci.c:164
        if (PciVenTable[cnt].VenId == (uint16_t)vendorID)
   16b7e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   16b81:	89 d0                	mov    eax,edx
   16b83:	01 c0                	add    eax,eax
   16b85:	01 d0                	add    eax,edx
   16b87:	c1 e0 02             	shl    eax,0x2
   16b8a:	05 40 92 02 00       	add    eax,0x29240
   16b8f:	0f b7 00             	movzx  eax,WORD PTR [eax]
   16b92:	0f b7 d0             	movzx  edx,ax
   16b95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b98:	0f b7 c0             	movzx  eax,ax
   16b9b:	39 c2                	cmp    edx,eax
   16b9d:	75 24                	jne    16bc3 <getVendorLongName+0x54>
/home/yogi/src/os/chrisOS/src/block/pci.c:166
        {
            strcpy(vendorLongName, PciVenTable[cnt].VenFull);
   16b9f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   16ba2:	89 d0                	mov    eax,edx
   16ba4:	01 c0                	add    eax,eax
   16ba6:	01 d0                	add    eax,edx
   16ba8:	c1 e0 02             	shl    eax,0x2
   16bab:	05 48 92 02 00       	add    eax,0x29248
   16bb0:	8b 00                	mov    eax,DWORD PTR [eax]
   16bb2:	83 ec 08             	sub    esp,0x8
   16bb5:	50                   	push   eax
   16bb6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   16bb9:	e8 fe 0c 01 00       	call   278bc <strcpy>
   16bbe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:167
            return;
   16bc1:	eb 20                	jmp    16be3 <getVendorLongName+0x74>
/home/yogi/src/os/chrisOS/src/block/pci.c:163 (discriminator 2)
    uint32_t class, class_mask;     // (class,subclass,prog-if) triplet 
    unsigned long driver_data;      // Data private to the driver 
*/
void getVendorLongName(uint32_t vendorID, char* vendorLongName)
{
    for (unsigned cnt=0; cnt<PCI_VENTABLE_LEN;cnt++)
   16bc3:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:163 (discriminator 1)
   16bc7:	81 7d f4 20 06 00 00 	cmp    DWORD PTR [ebp-0xc],0x620
   16bce:	76 ae                	jbe    16b7e <getVendorLongName+0xf>
/home/yogi/src/os/chrisOS/src/block/pci.c:169
        if (PciVenTable[cnt].VenId == (uint16_t)vendorID)
        {
            strcpy(vendorLongName, PciVenTable[cnt].VenFull);
            return;
        }
    strcpy(vendorLongName,"Not Found");
   16bd0:	83 ec 08             	sub    esp,0x8
   16bd3:	68 e5 27 08 00       	push   0x827e5
   16bd8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   16bdb:	e8 dc 0c 01 00       	call   278bc <strcpy>
   16be0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:170
}
   16be3:	c9                   	leave  
   16be4:	c3                   	ret    

00016be5 <getDeviceName>:
getDeviceName():
/home/yogi/src/os/chrisOS/src/block/pci.c:173

void getDeviceName(uint32_t vendorID, uint32_t deviceID, char* deviceName)
{
   16be5:	55                   	push   ebp
   16be6:	89 e5                	mov    ebp,esp
   16be8:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/pci.c:174
    for (int cnt=0; cnt<7000;cnt++)
   16beb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   16bf2:	eb 60                	jmp    16c54 <getDeviceName+0x6f>
/home/yogi/src/os/chrisOS/src/block/pci.c:175
        if (PciDevTable[cnt].VenId == vendorID && PciDevTable[cnt].DevId==deviceID)
   16bf4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   16bf7:	89 d0                	mov    eax,edx
   16bf9:	01 c0                	add    eax,eax
   16bfb:	01 d0                	add    eax,edx
   16bfd:	c1 e0 02             	shl    eax,0x2
   16c00:	05 c0 e2 02 00       	add    eax,0x2e2c0
   16c05:	0f b7 00             	movzx  eax,WORD PTR [eax]
   16c08:	0f b7 c0             	movzx  eax,ax
   16c0b:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   16c0e:	75 40                	jne    16c50 <getDeviceName+0x6b>
/home/yogi/src/os/chrisOS/src/block/pci.c:175 (discriminator 1)
   16c10:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   16c13:	89 d0                	mov    eax,edx
   16c15:	01 c0                	add    eax,eax
   16c17:	01 d0                	add    eax,edx
   16c19:	c1 e0 02             	shl    eax,0x2
   16c1c:	05 c2 e2 02 00       	add    eax,0x2e2c2
   16c21:	0f b7 00             	movzx  eax,WORD PTR [eax]
   16c24:	0f b7 c0             	movzx  eax,ax
   16c27:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   16c2a:	75 24                	jne    16c50 <getDeviceName+0x6b>
/home/yogi/src/os/chrisOS/src/block/pci.c:177
        {
            strcpy(deviceName, PciDevTable[cnt].ChipDesc);
   16c2c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   16c2f:	89 d0                	mov    eax,edx
   16c31:	01 c0                	add    eax,eax
   16c33:	01 d0                	add    eax,edx
   16c35:	c1 e0 02             	shl    eax,0x2
   16c38:	05 c8 e2 02 00       	add    eax,0x2e2c8
   16c3d:	8b 00                	mov    eax,DWORD PTR [eax]
   16c3f:	83 ec 08             	sub    esp,0x8
   16c42:	50                   	push   eax
   16c43:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   16c46:	e8 71 0c 01 00       	call   278bc <strcpy>
   16c4b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:178
            return;
   16c4e:	eb 20                	jmp    16c70 <getDeviceName+0x8b>
/home/yogi/src/os/chrisOS/src/block/pci.c:174 (discriminator 2)
    strcpy(vendorLongName,"Not Found");
}

void getDeviceName(uint32_t vendorID, uint32_t deviceID, char* deviceName)
{
    for (int cnt=0; cnt<7000;cnt++)
   16c50:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:174 (discriminator 1)
   16c54:	81 7d f4 57 1b 00 00 	cmp    DWORD PTR [ebp-0xc],0x1b57
   16c5b:	7e 97                	jle    16bf4 <getDeviceName+0xf>
/home/yogi/src/os/chrisOS/src/block/pci.c:180
        if (PciDevTable[cnt].VenId == vendorID && PciDevTable[cnt].DevId==deviceID)
        {
            strcpy(deviceName, PciDevTable[cnt].ChipDesc);
            return;
        }
    strcpy(deviceName,"Not Found");
   16c5d:	83 ec 08             	sub    esp,0x8
   16c60:	68 e5 27 08 00       	push   0x827e5
   16c65:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   16c68:	e8 4f 0c 01 00       	call   278bc <strcpy>
   16c6d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:181
}
   16c70:	c9                   	leave  
   16c71:	c3                   	ret    

00016c72 <getDeviceNameP>:
getDeviceNameP():
/home/yogi/src/os/chrisOS/src/block/pci.c:184

char* getDeviceNameP(struct pci_device_t* node, char* buffer)
{
   16c72:	55                   	push   ebp
   16c73:	89 e5                	mov    ebp,esp
   16c75:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:185
    getDeviceName(node->vendor, node->device, buffer);
   16c78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16c7b:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   16c7f:	0f b7 d0             	movzx  edx,ax
   16c82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16c85:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   16c89:	0f b7 c0             	movzx  eax,ax
   16c8c:	83 ec 04             	sub    esp,0x4
   16c8f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   16c92:	52                   	push   edx
   16c93:	50                   	push   eax
   16c94:	e8 4c ff ff ff       	call   16be5 <getDeviceName>
   16c99:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:186
    return buffer;
   16c9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/block/pci.c:187
}
   16c9f:	c9                   	leave  
   16ca0:	c3                   	ret    

00016ca1 <getClass>:
getClass():
/home/yogi/src/os/chrisOS/src/block/pci.c:190

void getClass(uint8_t class, uint8_t subClass, char BaseDesc[], char SubDesc[] , char ProgDesc[])
{
   16ca1:	55                   	push   ebp
   16ca2:	89 e5                	mov    ebp,esp
   16ca4:	83 ec 28             	sub    esp,0x28
   16ca7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   16caa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   16cad:	88 55 e4             	mov    BYTE PTR [ebp-0x1c],dl
   16cb0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
/home/yogi/src/os/chrisOS/src/block/pci.c:192
    static char notFound[50] = "Not found\0";
    for (unsigned cnt=0;cnt<PCI_DEVTABLE_LEN;cnt++)
   16cb3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   16cba:	e9 80 00 00 00       	jmp    16d3f <getClass+0x9e>
/home/yogi/src/os/chrisOS/src/block/pci.c:194
    {
        if (PciClassCodeTable[cnt].BaseClass==class && PciClassCodeTable[cnt].SubClass==subClass /*&& PciClassCodeTable[cnt].ProgIf==prog*/ )
   16cbf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16cc2:	c1 e0 04             	shl    eax,0x4
   16cc5:	05 e0 db 02 00       	add    eax,0x2dbe0
   16cca:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   16ccd:	3a 45 e4             	cmp    al,BYTE PTR [ebp-0x1c]
   16cd0:	75 69                	jne    16d3b <getClass+0x9a>
/home/yogi/src/os/chrisOS/src/block/pci.c:194 (discriminator 1)
   16cd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16cd5:	c1 e0 04             	shl    eax,0x4
   16cd8:	05 e1 db 02 00       	add    eax,0x2dbe1
   16cdd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   16ce0:	3a 45 e0             	cmp    al,BYTE PTR [ebp-0x20]
   16ce3:	75 56                	jne    16d3b <getClass+0x9a>
/home/yogi/src/os/chrisOS/src/block/pci.c:196
        {
            strcpy(BaseDesc,PciClassCodeTable[cnt].BaseDesc);
   16ce5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16ce8:	c1 e0 04             	shl    eax,0x4
   16ceb:	05 e4 db 02 00       	add    eax,0x2dbe4
   16cf0:	8b 00                	mov    eax,DWORD PTR [eax]
   16cf2:	83 ec 08             	sub    esp,0x8
   16cf5:	50                   	push   eax
   16cf6:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   16cf9:	e8 be 0b 01 00       	call   278bc <strcpy>
   16cfe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:197
            strcpy(SubDesc,PciClassCodeTable[cnt].SubDesc);
   16d01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16d04:	c1 e0 04             	shl    eax,0x4
   16d07:	05 e8 db 02 00       	add    eax,0x2dbe8
   16d0c:	8b 00                	mov    eax,DWORD PTR [eax]
   16d0e:	83 ec 08             	sub    esp,0x8
   16d11:	50                   	push   eax
   16d12:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   16d15:	e8 a2 0b 01 00       	call   278bc <strcpy>
   16d1a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:198
            strcpy(ProgDesc,PciClassCodeTable[cnt].ProgDesc);
   16d1d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16d20:	c1 e0 04             	shl    eax,0x4
   16d23:	05 ec db 02 00       	add    eax,0x2dbec
   16d28:	8b 00                	mov    eax,DWORD PTR [eax]
   16d2a:	83 ec 08             	sub    esp,0x8
   16d2d:	50                   	push   eax
   16d2e:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   16d31:	e8 86 0b 01 00       	call   278bc <strcpy>
   16d36:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:199
            return;
   16d39:	eb 4b                	jmp    16d86 <getClass+0xe5>
/home/yogi/src/os/chrisOS/src/block/pci.c:192 (discriminator 2)
}

void getClass(uint8_t class, uint8_t subClass, char BaseDesc[], char SubDesc[] , char ProgDesc[])
{
    static char notFound[50] = "Not found\0";
    for (unsigned cnt=0;cnt<PCI_DEVTABLE_LEN;cnt++)
   16d3b:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:192 (discriminator 1)
   16d3f:	81 7d f4 28 1e 00 00 	cmp    DWORD PTR [ebp-0xc],0x1e28
   16d46:	0f 86 73 ff ff ff    	jbe    16cbf <getClass+0x1e>
/home/yogi/src/os/chrisOS/src/block/pci.c:202
            strcpy(SubDesc,PciClassCodeTable[cnt].SubDesc);
            strcpy(ProgDesc,PciClassCodeTable[cnt].ProgDesc);
            return;
        }
    }
    strcpy(BaseDesc,notFound);
   16d4c:	83 ec 08             	sub    esp,0x8
   16d4f:	68 20 e1 02 00       	push   0x2e120
   16d54:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   16d57:	e8 60 0b 01 00       	call   278bc <strcpy>
   16d5c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:203
    strcpy(SubDesc,notFound);
   16d5f:	83 ec 08             	sub    esp,0x8
   16d62:	68 20 e1 02 00       	push   0x2e120
   16d67:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   16d6a:	e8 4d 0b 01 00       	call   278bc <strcpy>
   16d6f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:204
    strcpy(ProgDesc,notFound);
   16d72:	83 ec 08             	sub    esp,0x8
   16d75:	68 20 e1 02 00       	push   0x2e120
   16d7a:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   16d7d:	e8 3a 0b 01 00       	call   278bc <strcpy>
   16d82:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:205
    return;
   16d85:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/pci.c:206
}
   16d86:	c9                   	leave  
   16d87:	c3                   	ret    

00016d88 <getDeviceHeader>:
getDeviceHeader():
/home/yogi/src/os/chrisOS/src/block/pci.c:209

bool getDeviceHeader(struct pci_device_t* node, uint8_t bus, uint8_t slot, uint8_t func)
{
   16d88:	55                   	push   ebp
   16d89:	89 e5                	mov    ebp,esp
   16d8b:	53                   	push   ebx
   16d8c:	83 ec 24             	sub    esp,0x24
   16d8f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   16d92:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   16d95:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   16d98:	88 4d e4             	mov    BYTE PTR [ebp-0x1c],cl
   16d9b:	88 55 e0             	mov    BYTE PTR [ebp-0x20],dl
   16d9e:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
/home/yogi/src/os/chrisOS/src/block/pci.c:212
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building device header for %u:%u:%u\n",bus,slot,func);
   16da1:	0f b6 4d dc          	movzx  ecx,BYTE PTR [ebp-0x24]
   16da5:	0f b6 55 e0          	movzx  edx,BYTE PTR [ebp-0x20]
   16da9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   16dad:	83 ec 0c             	sub    esp,0xc
   16db0:	51                   	push   ecx
   16db1:	52                   	push   edx
   16db2:	50                   	push   eax
   16db3:	68 f0 27 08 00       	push   0x827f0
   16db8:	68 00 01 00 00       	push   0x100
   16dbd:	e8 b9 09 01 00       	call   2777b <printd>
   16dc2:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:214
    //Get the entire header
    for (int cnt=0;cnt<16;cnt++)
   16dc5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   16dcc:	e9 6c 01 00 00       	jmp    16f3d <getDeviceHeader+0x1b5>
/home/yogi/src/os/chrisOS/src/block/pci.c:216
    {
        value=pciConfigReadDWord(bus, slot, func, cnt*4);
   16dd1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16dd4:	c1 e0 02             	shl    eax,0x2
   16dd7:	0f b6 d8             	movzx  ebx,al
   16dda:	0f b6 4d dc          	movzx  ecx,BYTE PTR [ebp-0x24]
   16dde:	0f b6 55 e0          	movzx  edx,BYTE PTR [ebp-0x20]
   16de2:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   16de6:	53                   	push   ebx
   16de7:	51                   	push   ecx
   16de8:	52                   	push   edx
   16de9:	50                   	push   eax
   16dea:	e8 eb fb ff ff       	call   169da <pciConfigReadDWord>
   16def:	83 c4 10             	add    esp,0x10
   16df2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:217
        if (value==0xFFFFFFFF)
   16df5:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   16df9:	75 0a                	jne    16e05 <getDeviceHeader+0x7d>
/home/yogi/src/os/chrisOS/src/block/pci.c:218
            return false;
   16dfb:	b8 00 00 00 00       	mov    eax,0x0
   16e00:	e9 64 01 00 00       	jmp    16f69 <getDeviceHeader+0x1e1>
/home/yogi/src/os/chrisOS/src/block/pci.c:219
        switch(cnt)
   16e05:	83 7d f4 0f          	cmp    DWORD PTR [ebp-0xc],0xf
   16e09:	0f 87 2a 01 00 00    	ja     16f39 <getDeviceHeader+0x1b1>
   16e0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16e12:	c1 e0 02             	shl    eax,0x2
   16e15:	05 18 28 08 00       	add    eax,0x82818
   16e1a:	8b 00                	mov    eax,DWORD PTR [eax]
   16e1c:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/block/pci.c:222
        {
            case 0:
                node->vendor=value;
   16e1e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16e21:	89 c2                	mov    edx,eax
   16e23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e26:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:223
                node->device=value >> 16;
   16e2a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16e2d:	c1 e8 10             	shr    eax,0x10
   16e30:	89 c2                	mov    edx,eax
   16e32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e35:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:224
                break;
   16e39:	e9 fb 00 00 00       	jmp    16f39 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:226
            case 1:
                node->command=value&0xFFFF;
   16e3e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16e41:	89 c2                	mov    edx,eax
   16e43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e46:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:227
                node->status=value>>16&0xFFFF;
   16e4a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16e4d:	c1 e8 10             	shr    eax,0x10
   16e50:	89 c2                	mov    edx,eax
   16e52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e55:	66 89 50 4a          	mov    WORD PTR [eax+0x4a],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:228
                break;
   16e59:	e9 db 00 00 00       	jmp    16f39 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:230
            case 2:
                node->class=value >> 24;
   16e5e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16e61:	c1 e8 18             	shr    eax,0x18
   16e64:	89 c2                	mov    edx,eax
   16e66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e69:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:231
                node->subClass=(value & 0x00FF0000) >> 16;
   16e6c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16e6f:	25 00 00 ff 00       	and    eax,0xff0000
   16e74:	c1 e8 10             	shr    eax,0x10
   16e77:	89 c2                	mov    edx,eax
   16e79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e7c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:232
                node->prog=(value & 0x0000FF00) >> 8;
   16e7f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16e82:	25 00 ff 00 00       	and    eax,0xff00
   16e87:	c1 e8 08             	shr    eax,0x8
   16e8a:	89 c2                	mov    edx,eax
   16e8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e8f:	88 50 18             	mov    BYTE PTR [eax+0x18],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:233
                break;
   16e92:	e9 a2 00 00 00       	jmp    16f39 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:235
            case 3:
                node->headerType=(value >> 16) & 0x7f;
   16e97:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16e9a:	c1 e8 10             	shr    eax,0x10
   16e9d:	83 e0 7f             	and    eax,0x7f
   16ea0:	89 c2                	mov    edx,eax
   16ea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ea5:	88 50 03             	mov    BYTE PTR [eax+0x3],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:236
                node->multiFunction=(value & 0x00800000)==0x00800000;
   16ea8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16eab:	25 00 00 80 00       	and    eax,0x800000
   16eb0:	85 c0                	test   eax,eax
   16eb2:	0f 95 c2             	setne  dl
   16eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16eb8:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:237
                node->cacheSize=value&0xFF;
   16ebb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16ebe:	89 c2                	mov    edx,eax
   16ec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ec3:	88 50 41             	mov    BYTE PTR [eax+0x41],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:238
                node->latencyTimer=value>>8;
   16ec6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16ec9:	c1 e8 08             	shr    eax,0x8
   16ecc:	89 c2                	mov    edx,eax
   16ece:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ed1:	88 50 40             	mov    BYTE PTR [eax+0x40],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:239
                break;
   16ed4:	eb 63                	jmp    16f39 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:241
            case 4: case 5: case 6: case 7: case 8: case 9:
                node->baseAdd[cnt+1-5]=value;
   16ed6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16ed9:	8d 50 fc             	lea    edx,[eax-0x4]
   16edc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16edf:	8d 4a 08             	lea    ecx,[edx+0x8]
   16ee2:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   16ee5:	89 14 88             	mov    DWORD PTR [eax+ecx*4],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:242
                break;
   16ee8:	eb 4f                	jmp    16f39 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:244
            case 11:
                node->subdevice=value >> 16;
   16eea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16eed:	c1 e8 10             	shr    eax,0x10
   16ef0:	89 c2                	mov    edx,eax
   16ef2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ef5:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:245
                node->subvendor=value & 0xFFFF;
   16ef9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16efc:	89 c2                	mov    edx,eax
   16efe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f01:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:246
                break;
   16f05:	eb 32                	jmp    16f39 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:248
            case 12:
                node->expROMAddress=value;
   16f07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f0a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   16f0d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:249
                break;
   16f10:	eb 27                	jmp    16f39 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:251
            case 13:
                node->caps = value & 0xFF;
   16f12:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16f15:	89 c2                	mov    edx,eax
   16f17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f1a:	88 50 3c             	mov    BYTE PTR [eax+0x3c],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:252
                break;
   16f1d:	eb 1a                	jmp    16f39 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:254
            case 15:
                node->interrupt_line=value&0xFF;
   16f1f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16f22:	89 c2                	mov    edx,eax
   16f24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f27:	88 50 3d             	mov    BYTE PTR [eax+0x3d],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:255
                node->interrupt_pin=(value >> 8)&0xFF;
   16f2a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16f2d:	c1 e8 08             	shr    eax,0x8
   16f30:	89 c2                	mov    edx,eax
   16f32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f35:	88 50 3e             	mov    BYTE PTR [eax+0x3e],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:256
                break;
   16f38:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/pci.c:214 (discriminator 2)
{
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building device header for %u:%u:%u\n",bus,slot,func);
    //Get the entire header
    for (int cnt=0;cnt<16;cnt++)
   16f39:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:214 (discriminator 1)
   16f3d:	83 7d f4 0f          	cmp    DWORD PTR [ebp-0xc],0xf
   16f41:	0f 8e 8a fe ff ff    	jle    16dd1 <getDeviceHeader+0x49>
/home/yogi/src/os/chrisOS/src/block/pci.c:259
                node->interrupt_line=value&0xFF;
                node->interrupt_pin=(value >> 8)&0xFF;
                break;
        }
    }
    node->busNo=bus;
   16f47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f4a:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
   16f4e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:260
    node->deviceNo=slot;
   16f50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f53:	0f b6 55 e0          	movzx  edx,BYTE PTR [ebp-0x20]
   16f57:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:261
    node->funcNo=func;
   16f5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f5d:	0f b6 55 dc          	movzx  edx,BYTE PTR [ebp-0x24]
   16f61:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:262
    return true;
   16f64:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:263
}
   16f69:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   16f6c:	c9                   	leave  
   16f6d:	c3                   	ret    

00016f6e <getBridgeHeader>:
getBridgeHeader():
/home/yogi/src/os/chrisOS/src/block/pci.c:266

bool getBridgeHeader(struct pci_bridge_t* node, uint8_t bus, uint8_t slot, uint8_t func)
{
   16f6e:	55                   	push   ebp
   16f6f:	89 e5                	mov    ebp,esp
   16f71:	57                   	push   edi
   16f72:	56                   	push   esi
   16f73:	53                   	push   ebx
   16f74:	83 ec 4c             	sub    esp,0x4c
   16f77:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   16f7a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   16f7d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   16f80:	88 4d d4             	mov    BYTE PTR [ebp-0x2c],cl
   16f83:	88 55 d0             	mov    BYTE PTR [ebp-0x30],dl
   16f86:	88 45 cc             	mov    BYTE PTR [ebp-0x34],al
/home/yogi/src/os/chrisOS/src/block/pci.c:269
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building bridge header for %u:%u:%u\n",bus,slot,func);
   16f89:	0f b6 4d cc          	movzx  ecx,BYTE PTR [ebp-0x34]
   16f8d:	0f b6 55 d0          	movzx  edx,BYTE PTR [ebp-0x30]
   16f91:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   16f95:	83 ec 0c             	sub    esp,0xc
   16f98:	51                   	push   ecx
   16f99:	52                   	push   edx
   16f9a:	50                   	push   eax
   16f9b:	68 58 28 08 00       	push   0x82858
   16fa0:	68 00 01 00 00       	push   0x100
   16fa5:	e8 d1 07 01 00       	call   2777b <printd>
   16faa:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:271
    //Get the entire header
    for (int cnt=0;cnt<14;cnt++)
   16fad:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   16fb4:	e9 c9 02 00 00       	jmp    17282 <getBridgeHeader+0x314>
/home/yogi/src/os/chrisOS/src/block/pci.c:273
    {
        value=pciConfigReadDWord(bus, slot, func, cnt*4);
   16fb9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   16fbc:	c1 e0 02             	shl    eax,0x2
   16fbf:	0f b6 d8             	movzx  ebx,al
   16fc2:	0f b6 4d cc          	movzx  ecx,BYTE PTR [ebp-0x34]
   16fc6:	0f b6 55 d0          	movzx  edx,BYTE PTR [ebp-0x30]
   16fca:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   16fce:	53                   	push   ebx
   16fcf:	51                   	push   ecx
   16fd0:	52                   	push   edx
   16fd1:	50                   	push   eax
   16fd2:	e8 03 fa ff ff       	call   169da <pciConfigReadDWord>
   16fd7:	83 c4 10             	add    esp,0x10
   16fda:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:274
        if (value==0xFFFFFFFF)
   16fdd:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
   16fe1:	75 0a                	jne    16fed <getBridgeHeader+0x7f>
/home/yogi/src/os/chrisOS/src/block/pci.c:275
            return false;
   16fe3:	b8 00 00 00 00       	mov    eax,0x0
   16fe8:	e9 c1 02 00 00       	jmp    172ae <getBridgeHeader+0x340>
/home/yogi/src/os/chrisOS/src/block/pci.c:276
        switch(cnt)
   16fed:	83 7d e4 0f          	cmp    DWORD PTR [ebp-0x1c],0xf
   16ff1:	0f 87 87 02 00 00    	ja     1727e <getBridgeHeader+0x310>
   16ff7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   16ffa:	c1 e0 02             	shl    eax,0x2
   16ffd:	05 80 28 08 00       	add    eax,0x82880
   17002:	8b 00                	mov    eax,DWORD PTR [eax]
   17004:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/block/pci.c:279
        {
            case 0:
                node->vendor=value;
   17006:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17009:	89 c2                	mov    edx,eax
   1700b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1700e:	66 89 50 05          	mov    WORD PTR [eax+0x5],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:280
                node->device=value >> 16;
   17012:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17015:	c1 e8 10             	shr    eax,0x10
   17018:	89 c2                	mov    edx,eax
   1701a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1701d:	66 89 50 07          	mov    WORD PTR [eax+0x7],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:281
                break;
   17021:	e9 58 02 00 00       	jmp    1727e <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:283
            case 1:
                node->command=value&0xFFFF;
   17026:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17029:	89 c2                	mov    edx,eax
   1702b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1702e:	66 89 50 3a          	mov    WORD PTR [eax+0x3a],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:284
                node->status=value>>16&0xFFFF;
   17032:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17035:	c1 e8 10             	shr    eax,0x10
   17038:	89 c2                	mov    edx,eax
   1703a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1703d:	66 89 50 38          	mov    WORD PTR [eax+0x38],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:285
                break;
   17041:	e9 38 02 00 00       	jmp    1727e <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:287
            case 2:
                node->class=value >> 24;
   17046:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17049:	c1 e8 18             	shr    eax,0x18
   1704c:	89 c2                	mov    edx,eax
   1704e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17051:	89 50 09             	mov    DWORD PTR [eax+0x9],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:288
                node->subClass=(value & 0x00FF0000) >> 16;
   17054:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17057:	25 00 00 ff 00       	and    eax,0xff0000
   1705c:	c1 e8 10             	shr    eax,0x10
   1705f:	89 c2                	mov    edx,eax
   17061:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17064:	89 50 0d             	mov    DWORD PTR [eax+0xd],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:289
                node->prog=(value & 0x0000FF00) >> 8;
   17067:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1706a:	25 00 ff 00 00       	and    eax,0xff00
   1706f:	c1 e8 08             	shr    eax,0x8
   17072:	89 c2                	mov    edx,eax
   17074:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17077:	88 50 11             	mov    BYTE PTR [eax+0x11],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:290
                break;
   1707a:	e9 ff 01 00 00       	jmp    1727e <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:292
            case 3:
                node->headerType=(value >> 16) & 0x7f;
   1707f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17082:	c1 e8 10             	shr    eax,0x10
   17085:	83 e0 7f             	and    eax,0x7f
   17088:	89 c2                	mov    edx,eax
   1708a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1708d:	88 50 03             	mov    BYTE PTR [eax+0x3],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:293
                node->multiFunction=(value & 0x00800000)==0x00800000;
   17090:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17093:	25 00 00 80 00       	and    eax,0x800000
   17098:	85 c0                	test   eax,eax
   1709a:	0f 95 c2             	setne  dl
   1709d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170a0:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:294
                node->cacheSize=value&0xFF;
   170a3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   170a6:	89 c2                	mov    edx,eax
   170a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170ab:	88 50 2e             	mov    BYTE PTR [eax+0x2e],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:295
                node->latencyTimer=value>>8;
   170ae:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   170b1:	c1 e8 08             	shr    eax,0x8
   170b4:	89 c2                	mov    edx,eax
   170b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170b9:	88 50 2d             	mov    BYTE PTR [eax+0x2d],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:296
                break;
   170bc:	e9 bd 01 00 00       	jmp    1727e <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:298
            case 4: 
                node->baseAdd[0]=value;
   170c1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   170c4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   170c7:	89 42 12             	mov    DWORD PTR [edx+0x12],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:299
                break;
   170ca:	e9 af 01 00 00       	jmp    1727e <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:301
            case 5:
                node->baseAdd[1]=value;
   170cf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   170d2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   170d5:	89 42 16             	mov    DWORD PTR [edx+0x16],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:302
                break;
   170d8:	e9 a1 01 00 00       	jmp    1727e <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:304
            case 6:
                node->secLatencyTimer=(value>>24);
   170dd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   170e0:	c1 e8 18             	shr    eax,0x18
   170e3:	89 c2                	mov    edx,eax
   170e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170e8:	88 50 31             	mov    BYTE PTR [eax+0x31],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:305
                node->subordinateBusNum=(value>>16) & 0xFF;
   170eb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   170ee:	c1 e8 10             	shr    eax,0x10
   170f1:	89 c2                	mov    edx,eax
   170f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170f6:	88 50 28             	mov    BYTE PTR [eax+0x28],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:306
                node->secondaryBusNum=(value >> 8) & 0xFF;
   170f9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   170fc:	c1 e8 08             	shr    eax,0x8
   170ff:	89 c2                	mov    edx,eax
   17101:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17104:	88 50 26             	mov    BYTE PTR [eax+0x26],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:307
                node->primaryBusNum=value & 0xFF;
   17107:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1710a:	89 c2                	mov    edx,eax
   1710c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1710f:	88 50 27             	mov    BYTE PTR [eax+0x27],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:309
                //printk("pr:se:su %02X:%02X:%02X\n", node->primaryBusNum, node->secondaryBusNum, node->subordinateBusNum);
                break;
   17112:	e9 67 01 00 00       	jmp    1727e <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:311
            case 7:
                node->secStatus=(value>>16);
   17117:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1711a:	c1 e8 10             	shr    eax,0x10
   1711d:	89 c2                	mov    edx,eax
   1711f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17122:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:312
                node->ioLimit=(value>>8)&0xFF;
   17126:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17129:	c1 e8 08             	shr    eax,0x8
   1712c:	0f b6 d0             	movzx  edx,al
   1712f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17132:	89 50 1e             	mov    DWORD PTR [eax+0x1e],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:313
                node->ioBase=value&0xFF;
   17135:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17138:	0f b6 d0             	movzx  edx,al
   1713b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1713e:	89 50 22             	mov    DWORD PTR [eax+0x22],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:314
                break;
   17141:	e9 38 01 00 00       	jmp    1727e <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:316
            case 8:
                node->memoryLimit=value>>16;
   17146:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17149:	c1 e8 10             	shr    eax,0x10
   1714c:	89 c2                	mov    edx,eax
   1714e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17151:	66 89 50 36          	mov    WORD PTR [eax+0x36],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:317
                node->memoryBase=value;
   17155:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17158:	89 c2                	mov    edx,eax
   1715a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1715d:	66 89 50 34          	mov    WORD PTR [eax+0x34],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:318
                break;
   17161:	e9 18 01 00 00       	jmp    1727e <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:320
            case 9:
                node->prefMemLimit=value>>16;
   17166:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17169:	c1 e8 10             	shr    eax,0x10
   1716c:	ba 00 00 00 00       	mov    edx,0x0
   17171:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   17174:	89 41 3e             	mov    DWORD PTR [ecx+0x3e],eax
   17177:	89 51 42             	mov    DWORD PTR [ecx+0x42],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:321
                node->prefMemBase=value&0xFFFF;
   1717a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1717d:	ba 00 00 00 00       	mov    edx,0x0
   17182:	0f b7 d8             	movzx  ebx,ax
   17185:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
   17188:	89 d0                	mov    eax,edx
   1718a:	83 e0 00             	and    eax,0x0
   1718d:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
   17190:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17193:	8b 5d c0             	mov    ebx,DWORD PTR [ebp-0x40]
   17196:	8b 75 c4             	mov    esi,DWORD PTR [ebp-0x3c]
   17199:	89 58 46             	mov    DWORD PTR [eax+0x46],ebx
   1719c:	89 70 4a             	mov    DWORD PTR [eax+0x4a],esi
/home/yogi/src/os/chrisOS/src/block/pci.c:322
                break;
   1719f:	e9 da 00 00 00       	jmp    1727e <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:324
            case 10:
                node->prefMemLimit|=value<<16;
   171a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171a7:	8b 48 3e             	mov    ecx,DWORD PTR [eax+0x3e]
   171aa:	8b 58 42             	mov    ebx,DWORD PTR [eax+0x42]
   171ad:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   171b0:	c1 e0 10             	shl    eax,0x10
   171b3:	ba 00 00 00 00       	mov    edx,0x0
   171b8:	89 cf                	mov    edi,ecx
   171ba:	09 c7                	or     edi,eax
   171bc:	89 7d b8             	mov    DWORD PTR [ebp-0x48],edi
   171bf:	89 de                	mov    esi,ebx
   171c1:	09 d6                	or     esi,edx
   171c3:	89 75 bc             	mov    DWORD PTR [ebp-0x44],esi
   171c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171c9:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
   171cc:	8b 5d bc             	mov    ebx,DWORD PTR [ebp-0x44]
   171cf:	89 48 3e             	mov    DWORD PTR [eax+0x3e],ecx
   171d2:	89 58 42             	mov    DWORD PTR [eax+0x42],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:325
                break;
   171d5:	e9 a4 00 00 00       	jmp    1727e <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:327
            case 11:
                node->prefMemBase|=value<<16;
   171da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171dd:	8b 48 46             	mov    ecx,DWORD PTR [eax+0x46]
   171e0:	8b 58 4a             	mov    ebx,DWORD PTR [eax+0x4a]
   171e3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   171e6:	c1 e0 10             	shl    eax,0x10
   171e9:	ba 00 00 00 00       	mov    edx,0x0
   171ee:	89 cf                	mov    edi,ecx
   171f0:	09 c7                	or     edi,eax
   171f2:	89 7d b0             	mov    DWORD PTR [ebp-0x50],edi
   171f5:	89 de                	mov    esi,ebx
   171f7:	09 d6                	or     esi,edx
   171f9:	89 75 b4             	mov    DWORD PTR [ebp-0x4c],esi
   171fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171ff:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
   17202:	8b 5d b4             	mov    ebx,DWORD PTR [ebp-0x4c]
   17205:	89 48 46             	mov    DWORD PTR [eax+0x46],ecx
   17208:	89 58 4a             	mov    DWORD PTR [eax+0x4a],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:328
                break;
   1720b:	eb 71                	jmp    1727e <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:330
            case 12:
                node->ioLimit|=(value&0xFFFF0000)>>8;
   1720d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17210:	8b 50 1e             	mov    edx,DWORD PTR [eax+0x1e]
   17213:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17216:	66 b8 00 00          	mov    ax,0x0
   1721a:	c1 e8 08             	shr    eax,0x8
   1721d:	09 c2                	or     edx,eax
   1721f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17222:	89 50 1e             	mov    DWORD PTR [eax+0x1e],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:331
                node->ioBase|=value&0xFFFF<<8;
   17225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17228:	8b 50 22             	mov    edx,DWORD PTR [eax+0x22]
   1722b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1722e:	25 00 ff ff 00       	and    eax,0xffff00
   17233:	09 c2                	or     edx,eax
   17235:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17238:	89 50 22             	mov    DWORD PTR [eax+0x22],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:332
                break;
   1723b:	eb 41                	jmp    1727e <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:334
            case 13:
                node->caps = value & 0xFF;
   1723d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17240:	89 c2                	mov    edx,eax
   17242:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17245:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:335
                break;
   17248:	eb 34                	jmp    1727e <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:337
            case 14:
                node->expROMAddress=value;
   1724a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1724d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17250:	89 42 1a             	mov    DWORD PTR [edx+0x1a],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:338
                break;
   17253:	eb 29                	jmp    1727e <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:340
            case 15:
                node->interrupt_line=value&0xFF;
   17255:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17258:	89 c2                	mov    edx,eax
   1725a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1725d:	88 50 2a             	mov    BYTE PTR [eax+0x2a],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:341
                node->interrupt_pin=(value >> 8)&0xFF;
   17260:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17263:	c1 e8 08             	shr    eax,0x8
   17266:	89 c2                	mov    edx,eax
   17268:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1726b:	88 50 2b             	mov    BYTE PTR [eax+0x2b],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:342
                node->bridgeControl=(value>>16)&0xFFFF;
   1726e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17271:	c1 e8 10             	shr    eax,0x10
   17274:	89 c2                	mov    edx,eax
   17276:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17279:	66 89 50 32          	mov    WORD PTR [eax+0x32],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:343
                break;
   1727d:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/pci.c:271 (discriminator 2)
{
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building bridge header for %u:%u:%u\n",bus,slot,func);
    //Get the entire header
    for (int cnt=0;cnt<14;cnt++)
   1727e:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:271 (discriminator 1)
   17282:	83 7d e4 0d          	cmp    DWORD PTR [ebp-0x1c],0xd
   17286:	0f 8e 2d fd ff ff    	jle    16fb9 <getBridgeHeader+0x4b>
/home/yogi/src/os/chrisOS/src/block/pci.c:347
                node->bridgeControl=(value>>16)&0xFFFF;
                break;

        }
    }
    node->busNo=bus;
   1728c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1728f:	0f b6 55 d4          	movzx  edx,BYTE PTR [ebp-0x2c]
   17293:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:348
    node->deviceNo=slot;
   17295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17298:	0f b6 55 d0          	movzx  edx,BYTE PTR [ebp-0x30]
   1729c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:349
    node->funcNo=func;
   1729f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   172a2:	0f b6 55 cc          	movzx  edx,BYTE PTR [ebp-0x34]
   172a6:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:350
    return true;
   172a9:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:351
}
   172ae:	8d 65 f4             	lea    esp,[ebp-0xc]
   172b1:	5b                   	pop    ebx
   172b2:	5e                   	pop    esi
   172b3:	5f                   	pop    edi
   172b4:	5d                   	pop    ebp
   172b5:	c3                   	ret    

000172b6 <printPCIBridgeHeader>:
printPCIBridgeHeader():
/home/yogi/src/os/chrisOS/src/block/pci.c:353
void printPCIBridgeHeader(struct pci_bridge_t* node)
{          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
   172b6:	55                   	push   ebp
   172b7:	89 e5                	mov    ebp,esp
   172b9:	57                   	push   edi
   172ba:	56                   	push   esi
   172bb:	53                   	push   ebx
   172bc:	81 ec ac 06 00 00    	sub    esp,0x6ac
/home/yogi/src/os/chrisOS/src/block/pci.c:356
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
   172c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   172c5:	8b 40 0d             	mov    eax,DWORD PTR [eax+0xd]
   172c8:	0f b6 d0             	movzx  edx,al
   172cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   172ce:	8b 40 09             	mov    eax,DWORD PTR [eax+0x9]
   172d1:	0f b6 c0             	movzx  eax,al
   172d4:	83 ec 0c             	sub    esp,0xc
   172d7:	8d 8d 08 fa ff ff    	lea    ecx,[ebp-0x5f8]
   172dd:	51                   	push   ecx
   172de:	8d 8d fc fb ff ff    	lea    ecx,[ebp-0x404]
   172e4:	51                   	push   ecx
   172e5:	8d 8d f0 fd ff ff    	lea    ecx,[ebp-0x210]
   172eb:	51                   	push   ecx
   172ec:	52                   	push   edx
   172ed:	50                   	push   eax
   172ee:	e8 ae f9 ff ff       	call   16ca1 <getClass>
   172f3:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:357
    printk("Bridge:\n");
   172f6:	83 ec 0c             	sub    esp,0xc
   172f9:	68 c0 28 08 00       	push   0x828c0
   172fe:	e8 58 04 01 00       	call   2775b <printk>
   17303:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:358
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
   17306:	83 ec 0c             	sub    esp,0xc
   17309:	68 a8 26 08 00       	push   0x826a8
   1730e:	e8 48 04 01 00       	call   2775b <printk>
   17313:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:364
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   17316:	a1 f8 97 12 00       	mov    eax,ds:0x1297f8
   1731b:	0f b6 40 26          	movzx  eax,BYTE PTR [eax+0x26]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   1731f:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/block/pci.c:364
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   17322:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17325:	0f b6 40 27          	movzx  eax,BYTE PTR [eax+0x27]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   17329:	0f b6 c0             	movzx  eax,al
   1732c:	89 85 64 f9 ff ff    	mov    DWORD PTR [ebp-0x69c],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:364
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   17332:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17335:	0f b6 40 28          	movzx  eax,BYTE PTR [eax+0x28]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   17339:	0f b6 d8             	movzx  ebx,al
   1733c:	89 9d 60 f9 ff ff    	mov    DWORD PTR [ebp-0x6a0],ebx
   17342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17345:	8b 70 0d             	mov    esi,DWORD PTR [eax+0xd]
   17348:	89 b5 5c f9 ff ff    	mov    DWORD PTR [ebp-0x6a4],esi
   1734e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17351:	8b 48 09             	mov    ecx,DWORD PTR [eax+0x9]
   17354:	89 8d 58 f9 ff ff    	mov    DWORD PTR [ebp-0x6a8],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:362
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
   1735a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1735d:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   17361:	0f b7 d0             	movzx  edx,ax
   17364:	89 95 54 f9 ff ff    	mov    DWORD PTR [ebp-0x6ac],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:362
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
   1736a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1736d:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   17371:	0f b7 c0             	movzx  eax,ax
   17374:	89 85 50 f9 ff ff    	mov    DWORD PTR [ebp-0x6b0],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:361
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
   1737a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1737d:	0f b6 40 2b          	movzx  eax,BYTE PTR [eax+0x2b]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   17381:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/block/pci.c:361
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
   17384:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17387:	0f b6 40 2a          	movzx  eax,BYTE PTR [eax+0x2a]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   1738b:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:360
            node->busNo, node->deviceNo, node->funcNo, 
   1738e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17391:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   17395:	0f b6 c8             	movzx  ecx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:360
            node->busNo, node->deviceNo, node->funcNo, 
   17398:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1739b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   1739f:	0f b6 d0             	movzx  edx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:360
            node->busNo, node->deviceNo, node->funcNo, 
   173a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   173a5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   173a8:	0f b6 c0             	movzx  eax,al
   173ab:	83 ec 0c             	sub    esp,0xc
   173ae:	57                   	push   edi
   173af:	ff b5 64 f9 ff ff    	push   DWORD PTR [ebp-0x69c]
   173b5:	ff b5 60 f9 ff ff    	push   DWORD PTR [ebp-0x6a0]
   173bb:	ff b5 5c f9 ff ff    	push   DWORD PTR [ebp-0x6a4]
   173c1:	ff b5 58 f9 ff ff    	push   DWORD PTR [ebp-0x6a8]
   173c7:	ff b5 54 f9 ff ff    	push   DWORD PTR [ebp-0x6ac]
   173cd:	ff b5 50 f9 ff ff    	push   DWORD PTR [ebp-0x6b0]
   173d3:	56                   	push   esi
   173d4:	53                   	push   ebx
   173d5:	51                   	push   ecx
   173d6:	52                   	push   edx
   173d7:	50                   	push   eax
   173d8:	68 cc 28 08 00       	push   0x828cc
   173dd:	e8 79 03 01 00       	call   2775b <printk>
   173e2:	83 c4 40             	add    esp,0x40
/home/yogi/src/os/chrisOS/src/block/pci.c:366
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);

    getVendorLongName(node->vendor, tempString);
   173e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   173e8:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
   173ec:	0f b7 c0             	movzx  eax,ax
   173ef:	83 ec 08             	sub    esp,0x8
   173f2:	8d 95 72 f9 ff ff    	lea    edx,[ebp-0x68e]
   173f8:	52                   	push   edx
   173f9:	50                   	push   eax
   173fa:	e8 70 f7 ff ff       	call   16b6f <getVendorLongName>
   173ff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:367
    printk("Vendor: %s\t",tempString);
   17402:	83 ec 08             	sub    esp,0x8
   17405:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   1740b:	50                   	push   eax
   1740c:	68 10 29 08 00       	push   0x82910
   17411:	e8 45 03 01 00       	call   2775b <printk>
   17416:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:368
    getDeviceName(node->vendor, node->device, tempString);
   17419:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1741c:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
   17420:	0f b7 d0             	movzx  edx,ax
   17423:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17426:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
   1742a:	0f b7 c0             	movzx  eax,ax
   1742d:	83 ec 04             	sub    esp,0x4
   17430:	8d 8d 72 f9 ff ff    	lea    ecx,[ebp-0x68e]
   17436:	51                   	push   ecx
   17437:	52                   	push   edx
   17438:	50                   	push   eax
   17439:	e8 a7 f7 ff ff       	call   16be5 <getDeviceName>
   1743e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:369
    printk("Device: %s\n",tempString);
   17441:	83 ec 08             	sub    esp,0x8
   17444:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   1744a:	50                   	push   eax
   1744b:	68 1c 29 08 00       	push   0x8291c
   17450:	e8 06 03 01 00       	call   2775b <printk>
   17455:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:370
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
   17458:	8d 85 08 fa ff ff    	lea    eax,[ebp-0x5f8]
   1745e:	50                   	push   eax
   1745f:	8d 85 fc fb ff ff    	lea    eax,[ebp-0x404]
   17465:	50                   	push   eax
   17466:	8d 85 f0 fd ff ff    	lea    eax,[ebp-0x210]
   1746c:	50                   	push   eax
   1746d:	68 28 29 08 00       	push   0x82928
   17472:	e8 e4 02 01 00       	call   2775b <printk>
   17477:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:371
    printk("Base addresses:\n");
   1747a:	83 ec 0c             	sub    esp,0xc
   1747d:	68 49 29 08 00       	push   0x82949
   17482:	e8 d4 02 01 00       	call   2775b <printk>
   17487:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:372
    for (int cnt=0;cnt<2;cnt++)
   1748a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   17491:	eb 25                	jmp    174b8 <printPCIBridgeHeader+0x202>
/home/yogi/src/os/chrisOS/src/block/pci.c:373 (discriminator 3)
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
   17493:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17496:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   17499:	83 c2 04             	add    edx,0x4
   1749c:	8b 44 90 02          	mov    eax,DWORD PTR [eax+edx*4+0x2]
   174a0:	83 ec 04             	sub    esp,0x4
   174a3:	50                   	push   eax
   174a4:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   174a7:	68 5a 29 08 00       	push   0x8295a
   174ac:	e8 aa 02 01 00       	call   2775b <printk>
   174b1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:372 (discriminator 3)
    printk("Vendor: %s\t",tempString);
    getDeviceName(node->vendor, node->device, tempString);
    printk("Device: %s\n",tempString);
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
    printk("Base addresses:\n");
    for (int cnt=0;cnt<2;cnt++)
   174b4:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:372 (discriminator 1)
   174b8:	83 7d e4 01          	cmp    DWORD PTR [ebp-0x1c],0x1
   174bc:	7e d5                	jle    17493 <printPCIBridgeHeader+0x1dd>
/home/yogi/src/os/chrisOS/src/block/pci.c:374
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
    printk("IO Base: 0x%04X\tIO Limit: 0x%04X\n",node->ioBase,node->ioLimit);
   174be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   174c1:	8b 50 1e             	mov    edx,DWORD PTR [eax+0x1e]
   174c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   174c7:	8b 40 22             	mov    eax,DWORD PTR [eax+0x22]
   174ca:	83 ec 04             	sub    esp,0x4
   174cd:	52                   	push   edx
   174ce:	50                   	push   eax
   174cf:	68 6c 29 08 00       	push   0x8296c
   174d4:	e8 82 02 01 00       	call   2775b <printk>
   174d9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:375
    printk("Command: 0x%04X, Status: 0x%04X\n",node->command,node->status);
   174dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   174df:	0f b7 40 38          	movzx  eax,WORD PTR [eax+0x38]
   174e3:	0f b7 d0             	movzx  edx,ax
   174e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   174e9:	0f b7 40 3a          	movzx  eax,WORD PTR [eax+0x3a]
   174ed:	0f b7 c0             	movzx  eax,ax
   174f0:	83 ec 04             	sub    esp,0x4
   174f3:	52                   	push   edx
   174f4:	50                   	push   eax
   174f5:	68 90 29 08 00       	push   0x82990
   174fa:	e8 5c 02 01 00       	call   2775b <printk>
   174ff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:376
}   
   17502:	90                   	nop
   17503:	8d 65 f4             	lea    esp,[ebp-0xc]
   17506:	5b                   	pop    ebx
   17507:	5e                   	pop    esi
   17508:	5f                   	pop    edi
   17509:	5d                   	pop    ebp
   1750a:	c3                   	ret    

0001750b <printPCIHeader>:
printPCIHeader():
/home/yogi/src/os/chrisOS/src/block/pci.c:379

void printPCIHeader(struct pci_device_t* node)
{
   1750b:	55                   	push   ebp
   1750c:	89 e5                	mov    ebp,esp
   1750e:	57                   	push   edi
   1750f:	56                   	push   esi
   17510:	53                   	push   ebx
   17511:	81 ec 9c 06 00 00    	sub    esp,0x69c
/home/yogi/src/os/chrisOS/src/block/pci.c:382
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
   17517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1751a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   1751d:	0f b6 d0             	movzx  edx,al
   17520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17523:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   17526:	0f b6 c0             	movzx  eax,al
   17529:	83 ec 0c             	sub    esp,0xc
   1752c:	8d 8d 08 fa ff ff    	lea    ecx,[ebp-0x5f8]
   17532:	51                   	push   ecx
   17533:	8d 8d fc fb ff ff    	lea    ecx,[ebp-0x404]
   17539:	51                   	push   ecx
   1753a:	8d 8d f0 fd ff ff    	lea    ecx,[ebp-0x210]
   17540:	51                   	push   ecx
   17541:	52                   	push   edx
   17542:	50                   	push   eax
   17543:	e8 59 f7 ff ff       	call   16ca1 <getClass>
   17548:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:386
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
   1754b:	83 ec 0c             	sub    esp,0xc
   1754e:	68 b1 29 08 00       	push   0x829b1
   17553:	e8 03 02 01 00       	call   2775b <printk>
   17558:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:387
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
   1755b:	83 ec 0c             	sub    esp,0xc
   1755e:	68 a8 26 08 00       	push   0x826a8
   17563:	e8 f3 01 01 00       	call   2775b <printk>
   17568:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:388
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   1756b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1756e:	8b 58 14             	mov    ebx,DWORD PTR [eax+0x14]
   17571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17574:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
/home/yogi/src/os/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   17577:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1757a:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
/home/yogi/src/os/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   1757e:	0f b7 c0             	movzx  eax,ax
   17581:	89 85 64 f9 ff ff    	mov    DWORD PTR [ebp-0x69c],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   17587:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1758a:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   1758e:	0f b7 f8             	movzx  edi,ax
   17591:	89 bd 60 f9 ff ff    	mov    DWORD PTR [ebp-0x6a0],edi
/home/yogi/src/os/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   17597:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1759a:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
/home/yogi/src/os/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   1759e:	0f b6 c8             	movzx  ecx,al
   175a1:	89 8d 5c f9 ff ff    	mov    DWORD PTR [ebp-0x6a4],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   175a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175aa:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
/home/yogi/src/os/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   175ae:	0f b6 f8             	movzx  edi,al
   175b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175b4:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   175b8:	0f b6 c8             	movzx  ecx,al
   175bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175be:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   175c2:	0f b6 d0             	movzx  edx,al
   175c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175c8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   175cb:	0f b6 c0             	movzx  eax,al
   175ce:	83 ec 08             	sub    esp,0x8
   175d1:	53                   	push   ebx
   175d2:	56                   	push   esi
   175d3:	ff b5 64 f9 ff ff    	push   DWORD PTR [ebp-0x69c]
   175d9:	ff b5 60 f9 ff ff    	push   DWORD PTR [ebp-0x6a0]
   175df:	ff b5 5c f9 ff ff    	push   DWORD PTR [ebp-0x6a4]
   175e5:	57                   	push   edi
   175e6:	51                   	push   ecx
   175e7:	52                   	push   edx
   175e8:	50                   	push   eax
   175e9:	68 bc 29 08 00       	push   0x829bc
   175ee:	e8 68 01 01 00       	call   2775b <printk>
   175f3:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:391
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
                node->subClass);
    getVendorLongName(node->vendor, tempString);
   175f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175f9:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   175fd:	0f b7 c0             	movzx  eax,ax
   17600:	83 ec 08             	sub    esp,0x8
   17603:	8d 95 72 f9 ff ff    	lea    edx,[ebp-0x68e]
   17609:	52                   	push   edx
   1760a:	50                   	push   eax
   1760b:	e8 5f f5 ff ff       	call   16b6f <getVendorLongName>
   17610:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:392
    printk("Vendor: %s\t",tempString);
   17613:	83 ec 08             	sub    esp,0x8
   17616:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   1761c:	50                   	push   eax
   1761d:	68 10 29 08 00       	push   0x82910
   17622:	e8 34 01 01 00       	call   2775b <printk>
   17627:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:393
    getDeviceName(node->vendor, node->device, tempString);
   1762a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1762d:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   17631:	0f b7 d0             	movzx  edx,ax
   17634:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17637:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   1763b:	0f b7 c0             	movzx  eax,ax
   1763e:	83 ec 04             	sub    esp,0x4
   17641:	8d 8d 72 f9 ff ff    	lea    ecx,[ebp-0x68e]
   17647:	51                   	push   ecx
   17648:	52                   	push   edx
   17649:	50                   	push   eax
   1764a:	e8 96 f5 ff ff       	call   16be5 <getDeviceName>
   1764f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:394
    printk("Device: %s\n",tempString);
   17652:	83 ec 08             	sub    esp,0x8
   17655:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   1765b:	50                   	push   eax
   1765c:	68 1c 29 08 00       	push   0x8291c
   17661:	e8 f5 00 01 00       	call   2775b <printk>
   17666:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:395
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
   17669:	8d 85 08 fa ff ff    	lea    eax,[ebp-0x5f8]
   1766f:	50                   	push   eax
   17670:	8d 85 fc fb ff ff    	lea    eax,[ebp-0x404]
   17676:	50                   	push   eax
   17677:	8d 85 f0 fd ff ff    	lea    eax,[ebp-0x210]
   1767d:	50                   	push   eax
   1767e:	68 28 29 08 00       	push   0x82928
   17683:	e8 d3 00 01 00       	call   2775b <printk>
   17688:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:396
    printk("Base addresses:\n");
   1768b:	83 ec 0c             	sub    esp,0xc
   1768e:	68 49 29 08 00       	push   0x82949
   17693:	e8 c3 00 01 00       	call   2775b <printk>
   17698:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:397
    for (int cnt=0;cnt<6;cnt++)
   1769b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   176a2:	eb 24                	jmp    176c8 <printPCIHeader+0x1bd>
/home/yogi/src/os/chrisOS/src/block/pci.c:398 (discriminator 3)
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
   176a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   176a7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   176aa:	83 c2 08             	add    edx,0x8
   176ad:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
   176b0:	83 ec 04             	sub    esp,0x4
   176b3:	50                   	push   eax
   176b4:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   176b7:	68 5a 29 08 00       	push   0x8295a
   176bc:	e8 9a 00 01 00       	call   2775b <printk>
   176c1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:397 (discriminator 3)
    printk("Vendor: %s\t",tempString);
    getDeviceName(node->vendor, node->device, tempString);
    printk("Device: %s\n",tempString);
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
    printk("Base addresses:\n");
    for (int cnt=0;cnt<6;cnt++)
   176c4:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:397 (discriminator 1)
   176c8:	83 7d e4 05          	cmp    DWORD PTR [ebp-0x1c],0x5
   176cc:	7e d6                	jle    176a4 <printPCIHeader+0x199>
/home/yogi/src/os/chrisOS/src/block/pci.c:399
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
    printk("Subsystem: %04X\tSubsys Vendor: %04X\n",node->subdevice,node->subvendor);
   176ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   176d1:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
   176d5:	0f b7 d0             	movzx  edx,ax
   176d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   176db:	0f b7 40 0c          	movzx  eax,WORD PTR [eax+0xc]
   176df:	0f b7 c0             	movzx  eax,ax
   176e2:	83 ec 04             	sub    esp,0x4
   176e5:	52                   	push   edx
   176e6:	50                   	push   eax
   176e7:	68 f4 29 08 00       	push   0x829f4
   176ec:	e8 6a 00 01 00       	call   2775b <printk>
   176f1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:400
    printk("Command: 0x%04X, Status: 0x%04X\n",node->command,node->status);
   176f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   176f7:	0f b7 40 4a          	movzx  eax,WORD PTR [eax+0x4a]
   176fb:	0f b7 d0             	movzx  edx,ax
   176fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17701:	0f b7 40 4c          	movzx  eax,WORD PTR [eax+0x4c]
   17705:	0f b7 c0             	movzx  eax,ax
   17708:	83 ec 04             	sub    esp,0x4
   1770b:	52                   	push   edx
   1770c:	50                   	push   eax
   1770d:	68 90 29 08 00       	push   0x82990
   17712:	e8 44 00 01 00       	call   2775b <printk>
   17717:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:401
    printk("Interrupt Pin/Line: 0x%04X/0x%04X\n",node->interrupt_pin,node->interrupt_line);
   1771a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1771d:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
   17721:	0f b6 d0             	movzx  edx,al
   17724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17727:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
   1772b:	0f b6 c0             	movzx  eax,al
   1772e:	83 ec 04             	sub    esp,0x4
   17731:	52                   	push   edx
   17732:	50                   	push   eax
   17733:	68 1c 2a 08 00       	push   0x82a1c
   17738:	e8 1e 00 01 00       	call   2775b <printk>
   1773d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:402
}
   17740:	90                   	nop
   17741:	8d 65 f4             	lea    esp,[ebp-0xc]
   17744:	5b                   	pop    ebx
   17745:	5e                   	pop    esi
   17746:	5f                   	pop    edi
   17747:	5d                   	pop    ebp
   17748:	c3                   	ret    

00017749 <addFunction>:
addFunction():
/home/yogi/src/os/chrisOS/src/block/pci.c:404
void addFunction(struct pci_device_t* node)
{
   17749:	55                   	push   ebp
   1774a:	89 e5                	mov    ebp,esp
   1774c:	53                   	push   ebx
   1774d:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOS/src/block/pci.c:405
    printd(DEBUG_PCI_DISCOVERY,"\t\t\t\tFound function: deviceID: %04X, vendorID: %04X, class: %04X, subclass %04X:%04X\n", node->device, node->vendor, node->class, node->subClass);
   17750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17753:	8b 58 14             	mov    ebx,DWORD PTR [eax+0x14]
   17756:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17759:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   1775c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1775f:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   17763:	0f b7 d0             	movzx  edx,ax
   17766:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17769:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   1776d:	0f b7 c0             	movzx  eax,ax
   17770:	83 ec 08             	sub    esp,0x8
   17773:	53                   	push   ebx
   17774:	51                   	push   ecx
   17775:	52                   	push   edx
   17776:	50                   	push   eax
   17777:	68 40 2a 08 00       	push   0x82a40
   1777c:	68 00 01 00 00       	push   0x100
   17781:	e8 f5 ff 00 00       	call   2777b <printd>
   17786:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:406
    memcpy(&kPCIDeviceFunctions[kPCIFunctionCount++],node,sizeof(struct pci_bridge_t));
   17789:	8b 0d fc 97 12 00    	mov    ecx,DWORD PTR ds:0x1297fc
   1778f:	0f b6 05 ee 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ee
   17796:	8d 50 01             	lea    edx,[eax+0x1]
   17799:	88 15 ee 97 12 00    	mov    BYTE PTR ds:0x1297ee,dl
   1779f:	0f b6 d0             	movzx  edx,al
   177a2:	89 d0                	mov    eax,edx
   177a4:	c1 e0 02             	shl    eax,0x2
   177a7:	01 d0                	add    eax,edx
   177a9:	c1 e0 04             	shl    eax,0x4
   177ac:	01 c8                	add    eax,ecx
   177ae:	83 ec 04             	sub    esp,0x4
   177b1:	6a 4e                	push   0x4e
   177b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   177b6:	50                   	push   eax
   177b7:	e8 00 e9 00 00       	call   260bc <memcpy>
   177bc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:407
    printd(DEBUG_PCI_DISCOVERY,"\t\t\t\tFunction entry created\n");
   177bf:	83 ec 08             	sub    esp,0x8
   177c2:	68 95 2a 08 00       	push   0x82a95
   177c7:	68 00 01 00 00       	push   0x100
   177cc:	e8 aa ff 00 00       	call   2777b <printd>
   177d1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:408
}
   177d4:	90                   	nop
   177d5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   177d8:	c9                   	leave  
   177d9:	c3                   	ret    

000177da <addBridge>:
addBridge():
/home/yogi/src/os/chrisOS/src/block/pci.c:410
void addBridge(struct pci_device_t* node, uint8_t bus, uint8_t device, uint8_t function)
{
   177da:	55                   	push   ebp
   177db:	89 e5                	mov    ebp,esp
   177dd:	57                   	push   edi
   177de:	56                   	push   esi
   177df:	53                   	push   ebx
   177e0:	81 ec cc 00 00 00    	sub    esp,0xcc
   177e6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   177e9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   177ec:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   177ef:	88 8d 44 ff ff ff    	mov    BYTE PTR [ebp-0xbc],cl
   177f5:	88 95 40 ff ff ff    	mov    BYTE PTR [ebp-0xc0],dl
   177fb:	88 85 3c ff ff ff    	mov    BYTE PTR [ebp-0xc4],al
/home/yogi/src/os/chrisOS/src/block/pci.c:414
    struct pci_device_t newNode;
    struct pci_bridge_t bridge;
    //int lastSubBridgeNum=0;
    getBridgeHeader(&bridge, bus, device, function);
   17801:	0f b6 8d 3c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xc4]
   17808:	0f b6 95 40 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xc0]
   1780f:	0f b6 85 44 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xbc]
   17816:	51                   	push   ecx
   17817:	52                   	push   edx
   17818:	50                   	push   eax
   17819:	8d 85 4a ff ff ff    	lea    eax,[ebp-0xb6]
   1781f:	50                   	push   eax
   17820:	e8 49 f7 ff ff       	call   16f6e <getBridgeHeader>
   17825:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:415
    if (bridge.vendor==0xFFFF)
   17828:	0f b7 85 4f ff ff ff 	movzx  eax,WORD PTR [ebp-0xb1]
   1782f:	66 83 f8 ff          	cmp    ax,0xffff
   17833:	0f 84 0e 01 00 00    	je     17947 <addBridge+0x16d>
/home/yogi/src/os/chrisOS/src/block/pci.c:418
        return;
    //         bridge.busNo=bus;bridge.deviceNo=device;bridge.funcNo=function;
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tFound bridge on %02X:%02X:%02X,Cls#%02XpBus#%02X,sBus#%02X,suBus# %02X,MF=%u\n",bus, device, function, bridge.class, bridge.primaryBusNum, bridge.secondaryBusNum, bridge.subordinateBusNum, bridge.multiFunction);
   17839:	0f b6 85 4e ff ff ff 	movzx  eax,BYTE PTR [ebp-0xb2]
   17840:	0f b6 d0             	movzx  edx,al
   17843:	0f b6 85 72 ff ff ff 	movzx  eax,BYTE PTR [ebp-0x8e]
   1784a:	0f b6 c0             	movzx  eax,al
   1784d:	89 85 38 ff ff ff    	mov    DWORD PTR [ebp-0xc8],eax
   17853:	0f b6 85 70 ff ff ff 	movzx  eax,BYTE PTR [ebp-0x90]
   1785a:	0f b6 f0             	movzx  esi,al
   1785d:	89 b5 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],esi
   17863:	0f b6 85 71 ff ff ff 	movzx  eax,BYTE PTR [ebp-0x8f]
   1786a:	0f b6 f8             	movzx  edi,al
   1786d:	8b b5 53 ff ff ff    	mov    esi,DWORD PTR [ebp-0xad]
   17873:	0f b6 9d 3c ff ff ff 	movzx  ebx,BYTE PTR [ebp-0xc4]
   1787a:	0f b6 8d 40 ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xc0]
   17881:	0f b6 85 44 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xbc]
   17888:	83 ec 08             	sub    esp,0x8
   1788b:	52                   	push   edx
   1788c:	ff b5 38 ff ff ff    	push   DWORD PTR [ebp-0xc8]
   17892:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   17898:	57                   	push   edi
   17899:	56                   	push   esi
   1789a:	53                   	push   ebx
   1789b:	51                   	push   ecx
   1789c:	50                   	push   eax
   1789d:	68 b4 2a 08 00       	push   0x82ab4
   178a2:	68 00 01 00 00       	push   0x100
   178a7:	e8 cf fe 00 00       	call   2777b <printd>
   178ac:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:419
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tdeviceID: %04X, vendorID: %04X, class: %04X, subclass %04X:%04X\n", bridge.device, bridge.vendor, bridge.class, bridge.subClass);
   178af:	8b 9d 57 ff ff ff    	mov    ebx,DWORD PTR [ebp-0xa9]
   178b5:	8b 8d 53 ff ff ff    	mov    ecx,DWORD PTR [ebp-0xad]
   178bb:	0f b7 85 4f ff ff ff 	movzx  eax,WORD PTR [ebp-0xb1]
   178c2:	0f b7 d0             	movzx  edx,ax
   178c5:	0f b7 85 51 ff ff ff 	movzx  eax,WORD PTR [ebp-0xaf]
   178cc:	0f b7 c0             	movzx  eax,ax
   178cf:	83 ec 08             	sub    esp,0x8
   178d2:	53                   	push   ebx
   178d3:	51                   	push   ecx
   178d4:	52                   	push   edx
   178d5:	50                   	push   eax
   178d6:	68 08 2b 08 00       	push   0x82b08
   178db:	68 00 01 00 00       	push   0x100
   178e0:	e8 96 fe 00 00       	call   2777b <printd>
   178e5:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:420
    memcpy(&kPCIBridgeHeaders[kPCIBridgeCount++],&bridge,sizeof(struct pci_bridge_t));
   178e8:	8b 0d f8 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f8
   178ee:	0f b6 05 ed 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ed
   178f5:	8d 50 01             	lea    edx,[eax+0x1]
   178f8:	88 15 ed 97 12 00    	mov    BYTE PTR ds:0x1297ed,dl
   178fe:	0f b6 c0             	movzx  eax,al
   17901:	6b c0 4e             	imul   eax,eax,0x4e
   17904:	8d 14 01             	lea    edx,[ecx+eax*1]
   17907:	83 ec 04             	sub    esp,0x4
   1790a:	6a 4e                	push   0x4e
   1790c:	8d 85 4a ff ff ff    	lea    eax,[ebp-0xb6]
   17912:	50                   	push   eax
   17913:	52                   	push   edx
   17914:	e8 a3 e7 00 00       	call   260bc <memcpy>
   17919:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:421
    memcpy(&newNode,node,sizeof(struct pci_device_t));
   1791c:	83 ec 04             	sub    esp,0x4
   1791f:	6a 50                	push   0x50
   17921:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   17924:	8d 45 98             	lea    eax,[ebp-0x68]
   17927:	50                   	push   eax
   17928:	e8 8f e7 00 00       	call   260bc <memcpy>
   1792d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:422
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tbridge entry created\n");
   17930:	83 ec 08             	sub    esp,0x8
   17933:	68 4c 2b 08 00       	push   0x82b4c
   17938:	68 00 01 00 00       	push   0x100
   1793d:	e8 39 fe 00 00       	call   2777b <printd>
   17942:	83 c4 10             	add    esp,0x10
   17945:	eb 01                	jmp    17948 <addBridge+0x16e>
/home/yogi/src/os/chrisOS/src/block/pci.c:416
    struct pci_device_t newNode;
    struct pci_bridge_t bridge;
    //int lastSubBridgeNum=0;
    getBridgeHeader(&bridge, bus, device, function);
    if (bridge.vendor==0xFFFF)
        return;
   17947:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/pci.c:438
//       checkBus(&newNode, bridge.secondaryBusNum);
//#ifndef DEBUG_NONE
//       printd(DEBUG_PCI_DISCOVERY,"Done checking bus %02X\n",bridge.secondaryBusNum);
//#endif
    }
}
   17948:	8d 65 f4             	lea    esp,[ebp-0xc]
   1794b:	5b                   	pop    ebx
   1794c:	5e                   	pop    esi
   1794d:	5f                   	pop    edi
   1794e:	5d                   	pop    ebp
   1794f:	c3                   	ret    

00017950 <checkFunctions>:
checkFunctions():
/home/yogi/src/os/chrisOS/src/block/pci.c:440

void checkFunctions(uint8_t bus, uint8_t device) {
   17950:	55                   	push   ebp
   17951:	89 e5                	mov    ebp,esp
   17953:	83 ec 78             	sub    esp,0x78
   17956:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17959:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1795c:	88 55 94             	mov    BYTE PTR [ebp-0x6c],dl
   1795f:	88 45 90             	mov    BYTE PTR [ebp-0x70],al
/home/yogi/src/os/chrisOS/src/block/pci.c:443
    struct pci_device_t funcDevice;

    for (int function=0;function<8;function++)
   17962:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   17969:	eb 4e                	jmp    179b9 <checkFunctions+0x69>
/home/yogi/src/os/chrisOS/src/block/pci.c:445
    {
        getDeviceHeader(&funcDevice, bus, device, function);
   1796b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1796e:	0f b6 c8             	movzx  ecx,al
   17971:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   17975:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   17979:	51                   	push   ecx
   1797a:	52                   	push   edx
   1797b:	50                   	push   eax
   1797c:	8d 45 a4             	lea    eax,[ebp-0x5c]
   1797f:	50                   	push   eax
   17980:	e8 03 f4 ff ff       	call   16d88 <getDeviceHeader>
   17985:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:446
        if (funcDevice.vendor!=0xFFFF)
   17988:	0f b7 45 aa          	movzx  eax,WORD PTR [ebp-0x56]
   1798c:	66 83 f8 ff          	cmp    ax,0xffff
   17990:	74 23                	je     179b5 <checkFunctions+0x65>
/home/yogi/src/os/chrisOS/src/block/pci.c:448
        {
            funcDevice.busNo=bus;
   17992:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   17996:	88 45 a4             	mov    BYTE PTR [ebp-0x5c],al
/home/yogi/src/os/chrisOS/src/block/pci.c:449
            funcDevice.deviceNo=device;
   17999:	0f b6 45 90          	movzx  eax,BYTE PTR [ebp-0x70]
   1799d:	88 45 a5             	mov    BYTE PTR [ebp-0x5b],al
/home/yogi/src/os/chrisOS/src/block/pci.c:450
            funcDevice.funcNo=function;
   179a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   179a3:	88 45 a6             	mov    BYTE PTR [ebp-0x5a],al
/home/yogi/src/os/chrisOS/src/block/pci.c:451
            addFunction(&funcDevice);
   179a6:	83 ec 0c             	sub    esp,0xc
   179a9:	8d 45 a4             	lea    eax,[ebp-0x5c]
   179ac:	50                   	push   eax
   179ad:	e8 97 fd ff ff       	call   17749 <addFunction>
   179b2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:443 (discriminator 2)
}

void checkFunctions(uint8_t bus, uint8_t device) {
    struct pci_device_t funcDevice;

    for (int function=0;function<8;function++)
   179b5:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:443 (discriminator 1)
   179b9:	83 7d f4 07          	cmp    DWORD PTR [ebp-0xc],0x7
   179bd:	7e ac                	jle    1796b <checkFunctions+0x1b>
/home/yogi/src/os/chrisOS/src/block/pci.c:455
            funcDevice.funcNo=function;
            addFunction(&funcDevice);
        }
    }

 }
   179bf:	90                   	nop
   179c0:	c9                   	leave  
   179c1:	c3                   	ret    

000179c2 <addDevice>:
addDevice():
/home/yogi/src/os/chrisOS/src/block/pci.c:458

void addDevice(struct pci_device_t* node)
{
   179c2:	55                   	push   ebp
   179c3:	89 e5                	mov    ebp,esp
   179c5:	57                   	push   edi
   179c6:	56                   	push   esi
   179c7:	53                   	push   ebx
   179c8:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/block/pci.c:460
#ifndef DEBUG_NONE
    printd(DEBUG_PCI_DISCOVERY,"\tFound device #%u on %02X:%02X:0, Ven# %04X Dev# %04X Cls# %02X MF=%u\n",kPCIDeviceCount, node->busNo, node->deviceNo, node->vendor, node->device, node->class, node->multiFunction);
   179cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   179ce:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
   179d2:	0f b6 c0             	movzx  eax,al
   179d5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
   179d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   179db:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
   179de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   179e1:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   179e5:	0f b7 f0             	movzx  esi,ax
   179e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   179eb:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   179ef:	0f b7 d8             	movzx  ebx,ax
   179f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   179f5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   179f9:	0f b6 c8             	movzx  ecx,al
   179fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   179ff:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   17a02:	0f b6 d0             	movzx  edx,al
   17a05:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
   17a0c:	0f b6 c0             	movzx  eax,al
   17a0f:	83 ec 0c             	sub    esp,0xc
   17a12:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   17a15:	57                   	push   edi
   17a16:	56                   	push   esi
   17a17:	53                   	push   ebx
   17a18:	51                   	push   ecx
   17a19:	52                   	push   edx
   17a1a:	50                   	push   eax
   17a1b:	68 68 2b 08 00       	push   0x82b68
   17a20:	68 00 01 00 00       	push   0x100
   17a25:	e8 51 fd 00 00       	call   2777b <printd>
   17a2a:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:462
#endif
    memcpy(&kPCIDeviceHeaders[kPCIDeviceCount++],node,sizeof(struct pci_device_t));
   17a2d:	8b 0d f4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297f4
   17a33:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
   17a3a:	8d 50 01             	lea    edx,[eax+0x1]
   17a3d:	88 15 ec 97 12 00    	mov    BYTE PTR ds:0x1297ec,dl
   17a43:	0f b6 d0             	movzx  edx,al
   17a46:	89 d0                	mov    eax,edx
   17a48:	c1 e0 02             	shl    eax,0x2
   17a4b:	01 d0                	add    eax,edx
   17a4d:	c1 e0 04             	shl    eax,0x4
   17a50:	01 c8                	add    eax,ecx
   17a52:	83 ec 04             	sub    esp,0x4
   17a55:	6a 50                	push   0x50
   17a57:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   17a5a:	50                   	push   eax
   17a5b:	e8 5c e6 00 00       	call   260bc <memcpy>
   17a60:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:463
    printd(DEBUG_PCI_DISCOVERY,"\tdevice entry created\n");
   17a63:	83 ec 08             	sub    esp,0x8
   17a66:	68 af 2b 08 00       	push   0x82baf
   17a6b:	68 00 01 00 00       	push   0x100
   17a70:	e8 06 fd 00 00       	call   2777b <printd>
   17a75:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:464
}
   17a78:	90                   	nop
   17a79:	8d 65 f4             	lea    esp,[ebp-0xc]
   17a7c:	5b                   	pop    ebx
   17a7d:	5e                   	pop    esi
   17a7e:	5f                   	pop    edi
   17a7f:	5d                   	pop    ebp
   17a80:	c3                   	ret    

00017a81 <checkDevice>:
checkDevice():
/home/yogi/src/os/chrisOS/src/block/pci.c:467

bool checkDevice(struct pci_device_t* node, uint8_t bus, uint8_t device)
{
   17a81:	55                   	push   ebp
   17a82:	89 e5                	mov    ebp,esp
   17a84:	83 ec 78             	sub    esp,0x78
   17a87:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   17a8a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   17a8d:	88 55 94             	mov    BYTE PTR [ebp-0x6c],dl
   17a90:	88 45 90             	mov    BYTE PTR [ebp-0x70],al
/home/yogi/src/os/chrisOS/src/block/pci.c:468
    int func=0;
   17a93:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:471
    struct pci_device_t newNode;

    memcpy(&newNode,node,sizeof(struct pci_device_t));
   17a9a:	83 ec 04             	sub    esp,0x4
   17a9d:	6a 50                	push   0x50
   17a9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   17aa2:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17aa5:	50                   	push   eax
   17aa6:	e8 11 e6 00 00       	call   260bc <memcpy>
   17aab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:472
    if (getDeviceHeader(&newNode, bus, device, 0))
   17aae:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   17ab2:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   17ab6:	6a 00                	push   0x0
   17ab8:	52                   	push   edx
   17ab9:	50                   	push   eax
   17aba:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17abd:	50                   	push   eax
   17abe:	e8 c5 f2 ff ff       	call   16d88 <getDeviceHeader>
   17ac3:	83 c4 10             	add    esp,0x10
   17ac6:	84 c0                	test   al,al
   17ac8:	74 6c                	je     17b36 <checkDevice+0xb5>
/home/yogi/src/os/chrisOS/src/block/pci.c:474
    {
        if (newNode.class!=6)
   17aca:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   17acd:	83 f8 06             	cmp    eax,0x6
   17ad0:	74 11                	je     17ae3 <checkDevice+0x62>
/home/yogi/src/os/chrisOS/src/block/pci.c:476
        {
            addDevice(&newNode);
   17ad2:	83 ec 0c             	sub    esp,0xc
   17ad5:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17ad8:	50                   	push   eax
   17ad9:	e8 e4 fe ff ff       	call   179c2 <addDevice>
   17ade:	83 c4 10             	add    esp,0x10
   17ae1:	eb 1d                	jmp    17b00 <checkDevice+0x7f>
/home/yogi/src/os/chrisOS/src/block/pci.c:480
        }
        else
        {
            addBridge(&newNode, bus, device,func);
   17ae3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   17ae6:	0f b6 c8             	movzx  ecx,al
   17ae9:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   17aed:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   17af1:	51                   	push   ecx
   17af2:	52                   	push   edx
   17af3:	50                   	push   eax
   17af4:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17af7:	50                   	push   eax
   17af8:	e8 dd fc ff ff       	call   177da <addBridge>
   17afd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:483
        }
#ifndef DEBUG_NONE
        printd(DEBUG_PCI_DISCOVERY,"\tChecking functions\n",device);
   17b00:	0f b6 45 90          	movzx  eax,BYTE PTR [ebp-0x70]
   17b04:	83 ec 04             	sub    esp,0x4
   17b07:	50                   	push   eax
   17b08:	68 c6 2b 08 00       	push   0x82bc6
   17b0d:	68 00 01 00 00       	push   0x100
   17b12:	e8 64 fc 00 00       	call   2777b <printd>
   17b17:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:485
#endif
        checkFunctions(bus, device);
   17b1a:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   17b1e:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   17b22:	83 ec 08             	sub    esp,0x8
   17b25:	52                   	push   edx
   17b26:	50                   	push   eax
   17b27:	e8 24 fe ff ff       	call   17950 <checkFunctions>
   17b2c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:486
        return true;
   17b2f:	b8 01 00 00 00       	mov    eax,0x1
   17b34:	eb 05                	jmp    17b3b <checkDevice+0xba>
/home/yogi/src/os/chrisOS/src/block/pci.c:488
    }
    return false;
   17b36:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:489 (discriminator 1)
}
   17b3b:	c9                   	leave  
   17b3c:	c3                   	ret    

00017b3d <checkBus>:
checkBus():
/home/yogi/src/os/chrisOS/src/block/pci.c:491

void checkBus(struct pci_device_t* node, uint8_t bus) {
   17b3d:	55                   	push   ebp
   17b3e:	89 e5                	mov    ebp,esp
   17b40:	83 ec 28             	sub    esp,0x28
   17b43:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17b46:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/block/pci.c:495
 uint8_t device;

#ifndef DEBUG_NONE
    printd(DEBUG_PCI_DISCOVERY,"\n");
   17b49:	83 ec 08             	sub    esp,0x8
   17b4c:	68 db 2b 08 00       	push   0x82bdb
   17b51:	68 00 01 00 00       	push   0x100
   17b56:	e8 20 fc 00 00       	call   2777b <printd>
   17b5b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:496
    printd(DEBUG_PCI_DISCOVERY,"Checking bus %02X\n", bus);
   17b5e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   17b62:	83 ec 04             	sub    esp,0x4
   17b65:	50                   	push   eax
   17b66:	68 dd 2b 08 00       	push   0x82bdd
   17b6b:	68 00 01 00 00       	push   0x100
   17b70:	e8 06 fc 00 00       	call   2777b <printd>
   17b75:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:500
#endif
//    printk("\n");
//    printk("Checking bus %02X\n", bus);
    for(device = 0; device < 32; device++) {
   17b78:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   17b7c:	eb 22                	jmp    17ba0 <checkBus+0x63>
/home/yogi/src/os/chrisOS/src/block/pci.c:508 (discriminator 2)
        if ((kDebugLevel & DEBUG_PCI_DISCOVERY) == DEBUG_PCI_DISCOVERY)
        {
            //waitForKeyboardKey();
        }
#endif
        checkDevice(node, bus, device);
   17b7e:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   17b82:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   17b86:	83 ec 04             	sub    esp,0x4
   17b89:	52                   	push   edx
   17b8a:	50                   	push   eax
   17b8b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   17b8e:	e8 ee fe ff ff       	call   17a81 <checkDevice>
   17b93:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:500 (discriminator 2)
    printd(DEBUG_PCI_DISCOVERY,"\n");
    printd(DEBUG_PCI_DISCOVERY,"Checking bus %02X\n", bus);
#endif
//    printk("\n");
//    printk("Checking bus %02X\n", bus);
    for(device = 0; device < 32; device++) {
   17b96:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   17b9a:	83 c0 01             	add    eax,0x1
   17b9d:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/block/pci.c:500 (discriminator 1)
   17ba0:	80 7d f7 1f          	cmp    BYTE PTR [ebp-0x9],0x1f
   17ba4:	76 d8                	jbe    17b7e <checkBus+0x41>
/home/yogi/src/os/chrisOS/src/block/pci.c:511
        }
#endif
        checkDevice(node, bus, device);
     }
 }
}
   17ba6:	90                   	nop
   17ba7:	c9                   	leave  
   17ba8:	c3                   	ret    

00017ba9 <pciInitialize>:
pciInitialize():
/home/yogi/src/os/chrisOS/src/block/pci.c:514
    
 void pciInitialize()
 {
   17ba9:	55                   	push   ebp
   17baa:	89 e5                	mov    ebp,esp
   17bac:	81 ec b8 00 00 00    	sub    esp,0xb8
/home/yogi/src/os/chrisOS/src/block/pci.c:517
    //Iterate Busses/Slots
     struct pci_device_t device, funcDevice;
     uint16_t prevDev=0,prevBus=0;
   17bb2:	66 c7 45 f6 00 00    	mov    WORD PTR [ebp-0xa],0x0
   17bb8:	66 c7 45 f4 00 00    	mov    WORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:519

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
   17bbe:	c6 05 ef 97 12 00 00 	mov    BYTE PTR ds:0x1297ef,0x0
   17bc5:	0f b6 05 ef 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ef
   17bcc:	a2 ee 97 12 00       	mov    ds:0x1297ee,al
   17bd1:	0f b6 05 ee 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ee
   17bd8:	a2 ed 97 12 00       	mov    ds:0x1297ed,al
   17bdd:	0f b6 05 ed 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ed
   17be4:	a2 ec 97 12 00       	mov    ds:0x1297ec,al
/home/yogi/src/os/chrisOS/src/block/pci.c:520
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
   17be9:	83 ec 08             	sub    esp,0x8
   17bec:	68 f0 2b 08 00       	push   0x82bf0
   17bf1:	68 00 01 00 00       	push   0x100
   17bf6:	e8 80 fb 00 00       	call   2777b <printd>
   17bfb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:521
     for (currBus=0;currBus<50;currBus++)
   17bfe:	c7 05 98 a4 09 00 00 	mov    DWORD PTR ds:0x9a498,0x0
   17c05:	00 00 00 
   17c08:	e9 cc 01 00 00       	jmp    17dd9 <pciInitialize+0x230>
/home/yogi/src/os/chrisOS/src/block/pci.c:523
     {
         for (currSlot=0;currSlot<32;currSlot++)
   17c0d:	c7 05 9c a4 09 00 00 	mov    DWORD PTR ds:0x9a49c,0x0
   17c14:	00 00 00 
   17c17:	e9 a2 01 00 00       	jmp    17dbe <pciInitialize+0x215>
/home/yogi/src/os/chrisOS/src/block/pci.c:526
         {
            //if device found print it
            currFunc=0;
   17c1c:	c7 05 a0 a4 09 00 00 	mov    DWORD PTR ds:0x9a4a0,0x0
   17c23:	00 00 00 
/home/yogi/src/os/chrisOS/src/block/pci.c:527
            prevDev=0;
   17c26:	66 c7 45 f6 00 00    	mov    WORD PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:528
            printd(DEBUG_PCI_DISCOVERY,"Current bus=%u, slot=%u\n",currBus,currSlot);
   17c2c:	8b 15 9c a4 09 00    	mov    edx,DWORD PTR ds:0x9a49c
   17c32:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17c37:	52                   	push   edx
   17c38:	50                   	push   eax
   17c39:	68 0e 2c 08 00       	push   0x82c0e
   17c3e:	68 00 01 00 00       	push   0x100
   17c43:	e8 33 fb 00 00       	call   2777b <printd>
   17c48:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:529
            if (getDeviceHeader(&device, currBus, currSlot, currFunc)==true)
   17c4b:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17c50:	0f b6 c8             	movzx  ecx,al
   17c53:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17c58:	0f b6 d0             	movzx  edx,al
   17c5b:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17c60:	0f b6 c0             	movzx  eax,al
   17c63:	51                   	push   ecx
   17c64:	52                   	push   edx
   17c65:	50                   	push   eax
   17c66:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17c69:	50                   	push   eax
   17c6a:	e8 19 f1 ff ff       	call   16d88 <getDeviceHeader>
   17c6f:	83 c4 10             	add    esp,0x10
   17c72:	84 c0                	test   al,al
   17c74:	0f 84 37 01 00 00    	je     17db1 <pciInitialize+0x208>
/home/yogi/src/os/chrisOS/src/block/pci.c:531
            {
                if (prevBus!=currBus)
   17c7a:	0f b7 55 f4          	movzx  edx,WORD PTR [ebp-0xc]
   17c7e:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17c83:	39 c2                	cmp    edx,eax
   17c85:	74 18                	je     17c9f <pciInitialize+0xf6>
/home/yogi/src/os/chrisOS/src/block/pci.c:533
                {
                    prevBus=currBus;
   17c87:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17c8c:	66 89 45 f4          	mov    WORD PTR [ebp-0xc],ax
/home/yogi/src/os/chrisOS/src/block/pci.c:534
                    kPCIBusCount++;
   17c90:	0f b6 05 ef 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ef
   17c97:	83 c0 01             	add    eax,0x1
   17c9a:	a2 ef 97 12 00       	mov    ds:0x1297ef,al
/home/yogi/src/os/chrisOS/src/block/pci.c:537
                }
                //printPCIHeader(&device);
                if (device.class==0x06)
   17c9f:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   17ca2:	83 f8 06             	cmp    eax,0x6
   17ca5:	75 29                	jne    17cd0 <pciInitialize+0x127>
/home/yogi/src/os/chrisOS/src/block/pci.c:539
                {
                    addBridge(&device, currBus, currSlot, currFunc);
   17ca7:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17cac:	0f b6 c8             	movzx  ecx,al
   17caf:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17cb4:	0f b6 d0             	movzx  edx,al
   17cb7:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17cbc:	0f b6 c0             	movzx  eax,al
   17cbf:	51                   	push   ecx
   17cc0:	52                   	push   edx
   17cc1:	50                   	push   eax
   17cc2:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17cc5:	50                   	push   eax
   17cc6:	e8 0f fb ff ff       	call   177da <addBridge>
   17ccb:	83 c4 10             	add    esp,0x10
   17cce:	eb 0f                	jmp    17cdf <pciInitialize+0x136>
/home/yogi/src/os/chrisOS/src/block/pci.c:542
                }
                else
                    addDevice(&device);
   17cd0:	83 ec 0c             	sub    esp,0xc
   17cd3:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17cd6:	50                   	push   eax
   17cd7:	e8 e6 fc ff ff       	call   179c2 <addDevice>
   17cdc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:544
  //if found device is multi-function, iterate all of the functions
                for (currFunc=0;currFunc<8;currFunc++)
   17cdf:	c7 05 a0 a4 09 00 00 	mov    DWORD PTR ds:0x9a4a0,0x0
   17ce6:	00 00 00 
   17ce9:	e9 b5 00 00 00       	jmp    17da3 <pciInitialize+0x1fa>
/home/yogi/src/os/chrisOS/src/block/pci.c:547
                {
                    //printd(DEBUG_PCI_DISCOVERY,"Current function=%u\n",currFunc);
                    getDeviceHeader(&funcDevice, currBus, currSlot, currFunc);
   17cee:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17cf3:	0f b6 c8             	movzx  ecx,al
   17cf6:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17cfb:	0f b6 d0             	movzx  edx,al
   17cfe:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17d03:	0f b6 c0             	movzx  eax,al
   17d06:	51                   	push   ecx
   17d07:	52                   	push   edx
   17d08:	50                   	push   eax
   17d09:	8d 85 54 ff ff ff    	lea    eax,[ebp-0xac]
   17d0f:	50                   	push   eax
   17d10:	e8 73 f0 ff ff       	call   16d88 <getDeviceHeader>
   17d15:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:548
                    if (funcDevice.vendor!=0xFFFF)
   17d18:	0f b7 85 5a ff ff ff 	movzx  eax,WORD PTR [ebp-0xa6]
   17d1f:	66 83 f8 ff          	cmp    ax,0xffff
   17d23:	74 71                	je     17d96 <pciInitialize+0x1ed>
/home/yogi/src/os/chrisOS/src/block/pci.c:549
                        if (funcDevice.device != device.device && funcDevice.device != prevDev)
   17d25:	0f b7 95 5c ff ff ff 	movzx  edx,WORD PTR [ebp-0xa4]
   17d2c:	0f b7 45 ac          	movzx  eax,WORD PTR [ebp-0x54]
   17d30:	66 39 c2             	cmp    dx,ax
   17d33:	74 61                	je     17d96 <pciInitialize+0x1ed>
/home/yogi/src/os/chrisOS/src/block/pci.c:549 (discriminator 1)
   17d35:	0f b7 85 5c ff ff ff 	movzx  eax,WORD PTR [ebp-0xa4]
   17d3c:	66 3b 45 f6          	cmp    ax,WORD PTR [ebp-0xa]
   17d40:	74 54                	je     17d96 <pciInitialize+0x1ed>
/home/yogi/src/os/chrisOS/src/block/pci.c:552
                        {
                            //printk("funcDevice=%X, device=%X, prevDev=%X\n",funcDevice.device, device.device, prevDev);
                            prevDev=funcDevice.device;
   17d42:	0f b7 85 5c ff ff ff 	movzx  eax,WORD PTR [ebp-0xa4]
   17d49:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
/home/yogi/src/os/chrisOS/src/block/pci.c:553
                            if (funcDevice.class == 0x06)
   17d4d:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [ebp-0x9c]
   17d53:	83 f8 06             	cmp    eax,0x6
   17d56:	75 2c                	jne    17d84 <pciInitialize+0x1db>
/home/yogi/src/os/chrisOS/src/block/pci.c:554
                                addBridge(&funcDevice, currBus, currSlot, currFunc);
   17d58:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17d5d:	0f b6 c8             	movzx  ecx,al
   17d60:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17d65:	0f b6 d0             	movzx  edx,al
   17d68:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17d6d:	0f b6 c0             	movzx  eax,al
   17d70:	51                   	push   ecx
   17d71:	52                   	push   edx
   17d72:	50                   	push   eax
   17d73:	8d 85 54 ff ff ff    	lea    eax,[ebp-0xac]
   17d79:	50                   	push   eax
   17d7a:	e8 5b fa ff ff       	call   177da <addBridge>
   17d7f:	83 c4 10             	add    esp,0x10
   17d82:	eb 12                	jmp    17d96 <pciInitialize+0x1ed>
/home/yogi/src/os/chrisOS/src/block/pci.c:556
                            else
                                addFunction(&funcDevice);
   17d84:	83 ec 0c             	sub    esp,0xc
   17d87:	8d 85 54 ff ff ff    	lea    eax,[ebp-0xac]
   17d8d:	50                   	push   eax
   17d8e:	e8 b6 f9 ff ff       	call   17749 <addFunction>
   17d93:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:544 (discriminator 2)
                    addBridge(&device, currBus, currSlot, currFunc);
                }
                else
                    addDevice(&device);
  //if found device is multi-function, iterate all of the functions
                for (currFunc=0;currFunc<8;currFunc++)
   17d96:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17d9b:	83 c0 01             	add    eax,0x1
   17d9e:	a3 a0 a4 09 00       	mov    ds:0x9a4a0,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:544 (discriminator 1)
   17da3:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17da8:	83 f8 07             	cmp    eax,0x7
   17dab:	0f 8e 3d ff ff ff    	jle    17cee <pciInitialize+0x145>
/home/yogi/src/os/chrisOS/src/block/pci.c:523 (discriminator 2)

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
     for (currBus=0;currBus<50;currBus++)
     {
         for (currSlot=0;currSlot<32;currSlot++)
   17db1:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17db6:	83 c0 01             	add    eax,0x1
   17db9:	a3 9c a4 09 00       	mov    ds:0x9a49c,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:523 (discriminator 1)
   17dbe:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17dc3:	83 f8 1f             	cmp    eax,0x1f
   17dc6:	0f 8e 50 fe ff ff    	jle    17c1c <pciInitialize+0x73>
/home/yogi/src/os/chrisOS/src/block/pci.c:521 (discriminator 2)
     struct pci_device_t device, funcDevice;
     uint16_t prevDev=0,prevBus=0;

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
     for (currBus=0;currBus<50;currBus++)
   17dcc:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17dd1:	83 c0 01             	add    eax,0x1
   17dd4:	a3 98 a4 09 00       	mov    ds:0x9a498,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:521 (discriminator 1)
   17dd9:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17dde:	83 f8 31             	cmp    eax,0x31
   17de1:	0f 8e 26 fe ff ff    	jle    17c0d <pciInitialize+0x64>
/home/yogi/src/os/chrisOS/src/block/pci.c:563
                    }
            }
 
        }
     }
   17de7:	90                   	nop
   17de8:	c9                   	leave  
   17de9:	c3                   	ret    
   17dea:	66 90                	xchg   ax,ax

00017dec <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   17dec:	55                   	push   ebp
   17ded:	89 e5                	mov    ebp,esp
   17def:	83 ec 08             	sub    esp,0x8
   17df2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17df5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17df8:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   17dfc:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   17dff:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   17e03:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   17e07:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   17e08:	90                   	nop
   17e09:	c9                   	leave  
   17e0a:	c3                   	ret    

00017e0b <update_cursor>:
update_cursor():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:25
KERNEL_DATA_SECTION uint8_t savedPosY[10];
KERNEL_DATA_SECTION int8_t savedPosPointer=0;
KERNEL_DATA_SECTION uint8_t kTerminalHeight;

void update_cursor()
 {
   17e0b:	55                   	push   ebp
   17e0c:	89 e5                	mov    ebp,esp
   17e0e:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:26
    unsigned short position=(terminal_row*VGA_WIDTH) + terminal_column;
   17e11:	a1 00 00 12 00       	mov    eax,ds:0x120000
   17e16:	89 c2                	mov    edx,eax
   17e18:	b8 50 00 00 00       	mov    eax,0x50
   17e1d:	0f af c2             	imul   eax,edx
   17e20:	8b 15 04 00 12 00    	mov    edx,DWORD PTR ds:0x120004
   17e26:	01 d0                	add    eax,edx
   17e28:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:29
 
    // cursor LOW port to vga INDEX register
    outb(0x3D4, 0x0F);
   17e2c:	6a 0f                	push   0xf
   17e2e:	68 d4 03 00 00       	push   0x3d4
   17e33:	e8 b4 ff ff ff       	call   17dec <outb>
   17e38:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:30
    outb(0x3D5, (unsigned char)(position&0xFF));
   17e3b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   17e3f:	0f b6 c0             	movzx  eax,al
   17e42:	50                   	push   eax
   17e43:	68 d5 03 00 00       	push   0x3d5
   17e48:	e8 9f ff ff ff       	call   17dec <outb>
   17e4d:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:32
    // cursor HIGH port to vga INDEX register
    outb(0x3D4, 0x0E);
   17e50:	6a 0e                	push   0xe
   17e52:	68 d4 03 00 00       	push   0x3d4
   17e57:	e8 90 ff ff ff       	call   17dec <outb>
   17e5c:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:33
    outb(0x3D5, (unsigned char )((position>>8)&0xFF));
   17e5f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   17e63:	66 c1 e8 08          	shr    ax,0x8
   17e67:	0f b6 c0             	movzx  eax,al
   17e6a:	50                   	push   eax
   17e6b:	68 d5 03 00 00       	push   0x3d5
   17e70:	e8 77 ff ff ff       	call   17dec <outb>
   17e75:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:35
    //Move the cursor in the bios data area
 }
   17e78:	90                   	nop
   17e79:	c9                   	leave  
   17e7a:	c3                   	ret    

00017e7b <make_color>:
make_color():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:37

uint8_t make_color(enum vga_color fg, enum vga_color bg) {
   17e7b:	55                   	push   ebp
   17e7c:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:38
        return fg | bg << 4;
   17e7e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17e81:	c1 e0 04             	shl    eax,0x4
   17e84:	89 c2                	mov    edx,eax
   17e86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17e89:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:39
}
   17e8b:	5d                   	pop    ebp
   17e8c:	c3                   	ret    

00017e8d <make_vgaentry>:
make_vgaentry():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:41

uint16_t make_vgaentry(char c, uint8_t color) {
   17e8d:	55                   	push   ebp
   17e8e:	89 e5                	mov    ebp,esp
   17e90:	83 ec 18             	sub    esp,0x18
   17e93:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17e96:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17e99:	88 55 ec             	mov    BYTE PTR [ebp-0x14],dl
   17e9c:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:42
        uint16_t c16 = c;
   17e9f:	66 0f be 45 ec       	movsx  ax,BYTE PTR [ebp-0x14]
   17ea4:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:43
        uint16_t color16 = color;
   17ea8:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
   17eac:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:44
        return c16 | color16 << 8;
   17eb0:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   17eb4:	c1 e0 08             	shl    eax,0x8
   17eb7:	89 c2                	mov    edx,eax
   17eb9:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   17ebd:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:45
}
   17ebf:	c9                   	leave  
   17ec0:	c3                   	ret    

00017ec1 <terminal_setcolor>:
terminal_setcolor():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:48


void terminal_setcolor(uint8_t color) {
   17ec1:	55                   	push   ebp
   17ec2:	89 e5                	mov    ebp,esp
   17ec4:	83 ec 04             	sub    esp,0x4
   17ec7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17eca:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:49
        terminal_color = color;
   17ecd:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   17ed1:	a2 08 00 12 00       	mov    ds:0x120008,al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:50
}
   17ed6:	90                   	nop
   17ed7:	c9                   	leave  
   17ed8:	c3                   	ret    

00017ed9 <terminal_putentryat>:
terminal_putentryat():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:52

void terminal_putentryat(char c, uint8_t color, size_t x, size_t y) {
   17ed9:	55                   	push   ebp
   17eda:	89 e5                	mov    ebp,esp
   17edc:	53                   	push   ebx
   17edd:	83 ec 18             	sub    esp,0x18
   17ee0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17ee3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17ee6:	88 55 e8             	mov    BYTE PTR [ebp-0x18],dl
   17ee9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:53
    const size_t index = y * VGA_WIDTH + x;
   17eec:	b8 50 00 00 00       	mov    eax,0x50
   17ef1:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
   17ef5:	89 c2                	mov    edx,eax
   17ef7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   17efa:	01 d0                	add    eax,edx
   17efc:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:54
        terminal_buffer[index] = make_vgaentry(c, color);
   17eff:	a1 0c 00 12 00       	mov    eax,ds:0x12000c
   17f04:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   17f07:	01 d2                	add    edx,edx
   17f09:	8d 1c 10             	lea    ebx,[eax+edx*1]
   17f0c:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
   17f10:	0f be 45 e8          	movsx  eax,BYTE PTR [ebp-0x18]
   17f14:	52                   	push   edx
   17f15:	50                   	push   eax
   17f16:	e8 72 ff ff ff       	call   17e8d <make_vgaentry>
   17f1b:	83 c4 08             	add    esp,0x8
   17f1e:	66 89 03             	mov    WORD PTR [ebx],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:55
}
   17f21:	90                   	nop
   17f22:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   17f25:	c9                   	leave  
   17f26:	c3                   	ret    

00017f27 <cursorSavePosition>:
cursorSavePosition():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:58

void cursorSavePosition()
{
   17f27:	55                   	push   ebp
   17f28:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:59
    if (savedPosPointer < 10)
   17f2a:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17f31:	3c 09                	cmp    al,0x9
   17f33:	7f 3b                	jg     17f70 <cursorSavePosition+0x49>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:61
    {
        savedPosX[++savedPosPointer] = terminal_column;
   17f35:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17f3c:	83 c0 01             	add    eax,0x1
   17f3f:	a2 26 00 12 00       	mov    ds:0x120026,al
   17f44:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17f4b:	0f be c0             	movsx  eax,al
   17f4e:	8b 15 04 00 12 00    	mov    edx,DWORD PTR ds:0x120004
   17f54:	88 90 10 00 12 00    	mov    BYTE PTR [eax+0x120010],dl
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:62
        savedPosY[savedPosPointer] = terminal_row;
   17f5a:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17f61:	0f be c0             	movsx  eax,al
   17f64:	8b 15 00 00 12 00    	mov    edx,DWORD PTR ds:0x120000
   17f6a:	88 90 1c 00 12 00    	mov    BYTE PTR [eax+0x12001c],dl
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:64
    }
}
   17f70:	90                   	nop
   17f71:	5d                   	pop    ebp
   17f72:	c3                   	ret    

00017f73 <cursorRestorePosition>:
cursorRestorePosition():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:67

void cursorRestorePosition()
{
   17f73:	55                   	push   ebp
   17f74:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:68
    if (savedPosPointer > 0)
   17f76:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17f7d:	84 c0                	test   al,al
   17f7f:	7e 42                	jle    17fc3 <cursorRestorePosition+0x50>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:70
    {
        terminal_column = savedPosX[savedPosPointer];
   17f81:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17f88:	0f be c0             	movsx  eax,al
   17f8b:	0f b6 80 10 00 12 00 	movzx  eax,BYTE PTR [eax+0x120010]
   17f92:	0f b6 c0             	movzx  eax,al
   17f95:	a3 04 00 12 00       	mov    ds:0x120004,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:71
        terminal_row = savedPosY[savedPosPointer--];
   17f9a:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17fa1:	89 c2                	mov    edx,eax
   17fa3:	83 ea 01             	sub    edx,0x1
   17fa6:	88 15 26 00 12 00    	mov    BYTE PTR ds:0x120026,dl
   17fac:	0f be c0             	movsx  eax,al
   17faf:	0f b6 80 1c 00 12 00 	movzx  eax,BYTE PTR [eax+0x12001c]
   17fb6:	0f b6 c0             	movzx  eax,al
   17fb9:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:72
        update_cursor();
   17fbe:	e8 48 fe ff ff       	call   17e0b <update_cursor>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:74
    }
}
   17fc3:	90                   	nop
   17fc4:	5d                   	pop    ebp
   17fc5:	c3                   	ret    

00017fc6 <terminal_clear>:
terminal_clear():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:77

void terminal_clear()
{
   17fc6:	55                   	push   ebp
   17fc7:	89 e5                	mov    ebp,esp
   17fc9:	53                   	push   ebx
   17fca:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:79
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
   17fcd:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   17fd4:	eb 53                	jmp    18029 <terminal_clear+0x63>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:80
                for (size_t x = 0; x < VGA_WIDTH; x++) {
   17fd6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   17fdd:	eb 3c                	jmp    1801b <terminal_clear+0x55>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:81 (discriminator 3)
                        const size_t index = y * VGA_WIDTH + x;
   17fdf:	b8 50 00 00 00       	mov    eax,0x50
   17fe4:	0f af 45 f8          	imul   eax,DWORD PTR [ebp-0x8]
   17fe8:	89 c2                	mov    edx,eax
   17fea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   17fed:	01 d0                	add    eax,edx
   17fef:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:82 (discriminator 3)
                        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
   17ff2:	a1 0c 00 12 00       	mov    eax,ds:0x12000c
   17ff7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   17ffa:	01 d2                	add    edx,edx
   17ffc:	8d 1c 10             	lea    ebx,[eax+edx*1]
   17fff:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
   18006:	0f b6 c0             	movzx  eax,al
   18009:	50                   	push   eax
   1800a:	6a 20                	push   0x20
   1800c:	e8 7c fe ff ff       	call   17e8d <make_vgaentry>
   18011:	83 c4 08             	add    esp,0x8
   18014:	66 89 03             	mov    WORD PTR [ebx],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:80 (discriminator 3)

void terminal_clear()
{
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
                for (size_t x = 0; x < VGA_WIDTH; x++) {
   18017:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:80 (discriminator 1)
   1801b:	b8 50 00 00 00       	mov    eax,0x50
   18020:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   18023:	72 ba                	jb     17fdf <terminal_clear+0x19>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:79 (discriminator 2)
}

void terminal_clear()
{
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
   18025:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:79 (discriminator 1)
   18029:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   18030:	0f b6 c0             	movzx  eax,al
   18033:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
   18036:	77 9e                	ja     17fd6 <terminal_clear+0x10>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:85
                for (size_t x = 0; x < VGA_WIDTH; x++) {
                        const size_t index = y * VGA_WIDTH + x;
                        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
                }
        }
    terminal_column=0;
   18038:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
   1803f:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:86
    terminal_row=0;
   18042:	c7 05 00 00 12 00 00 	mov    DWORD PTR ds:0x120000,0x0
   18049:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:87
    update_cursor();
   1804c:	e8 ba fd ff ff       	call   17e0b <update_cursor>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:88
}
   18051:	90                   	nop
   18052:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   18055:	c9                   	leave  
   18056:	c3                   	ret    

00018057 <terminal_clear_line>:
terminal_clear_line():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:91

void terminal_clear_line(unsigned lineNo)
{
   18057:	55                   	push   ebp
   18058:	89 e5                	mov    ebp,esp
   1805a:	53                   	push   ebx
   1805b:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:92
    if (lineNo>SYS_VGA_HEIGHT-1)
   1805e:	83 7d 08 31          	cmp    DWORD PTR [ebp+0x8],0x31
   18062:	77 51                	ja     180b5 <terminal_clear_line+0x5e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:94
        return;
    for (unsigned cnt=0;cnt<VGA_WIDTH;cnt++)
   18064:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   1806b:	eb 3c                	jmp    180a9 <terminal_clear_line+0x52>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:96 (discriminator 3)
    {
        const size_t index = lineNo * VGA_WIDTH + cnt;
   1806d:	b8 50 00 00 00       	mov    eax,0x50
   18072:	0f af 45 08          	imul   eax,DWORD PTR [ebp+0x8]
   18076:	89 c2                	mov    edx,eax
   18078:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1807b:	01 d0                	add    eax,edx
   1807d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:97 (discriminator 3)
        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
   18080:	a1 0c 00 12 00       	mov    eax,ds:0x12000c
   18085:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   18088:	01 d2                	add    edx,edx
   1808a:	8d 1c 10             	lea    ebx,[eax+edx*1]
   1808d:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
   18094:	0f b6 c0             	movzx  eax,al
   18097:	50                   	push   eax
   18098:	6a 20                	push   0x20
   1809a:	e8 ee fd ff ff       	call   17e8d <make_vgaentry>
   1809f:	83 c4 08             	add    esp,0x8
   180a2:	66 89 03             	mov    WORD PTR [ebx],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:94 (discriminator 3)

void terminal_clear_line(unsigned lineNo)
{
    if (lineNo>SYS_VGA_HEIGHT-1)
        return;
    for (unsigned cnt=0;cnt<VGA_WIDTH;cnt++)
   180a5:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:94 (discriminator 1)
   180a9:	b8 50 00 00 00       	mov    eax,0x50
   180ae:	39 45 f8             	cmp    DWORD PTR [ebp-0x8],eax
   180b1:	72 ba                	jb     1806d <terminal_clear_line+0x16>
   180b3:	eb 01                	jmp    180b6 <terminal_clear_line+0x5f>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:93
}

void terminal_clear_line(unsigned lineNo)
{
    if (lineNo>SYS_VGA_HEIGHT-1)
        return;
   180b5:	90                   	nop
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:99
    for (unsigned cnt=0;cnt<VGA_WIDTH;cnt++)
    {
        const size_t index = lineNo * VGA_WIDTH + cnt;
        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
    }
}
   180b6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   180b9:	c9                   	leave  
   180ba:	c3                   	ret    

000180bb <terminal_copyline>:
terminal_copyline():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:102

void terminal_copyline(unsigned dstLine, unsigned srcLine)
{
   180bb:	55                   	push   ebp
   180bc:	89 e5                	mov    ebp,esp
   180be:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:103
    unsigned rowBytes = VGA_WIDTH*2;
   180c1:	b8 50 00 00 00       	mov    eax,0x50
   180c6:	01 c0                	add    eax,eax
   180c8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:104
    uintptr_t dest=(uintptr_t)TEXTMODE_MEMORY_START+(dstLine*rowBytes);
   180cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   180ce:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   180d2:	05 00 80 0b 00       	add    eax,0xb8000
   180d7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:105
    uintptr_t src=(uintptr_t)TEXTMODE_MEMORY_START+(srcLine*rowBytes);
   180da:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   180dd:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   180e1:	05 00 80 0b 00       	add    eax,0xb8000
   180e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:107
    
    memcpy((void*)dest,(void*)src,rowBytes);
   180e9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   180ec:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   180ef:	83 ec 04             	sub    esp,0x4
   180f2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   180f5:	52                   	push   edx
   180f6:	50                   	push   eax
   180f7:	e8 c0 df 00 00       	call   260bc <memcpy>
   180fc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:108
}
   180ff:	90                   	nop
   18100:	c9                   	leave  
   18101:	c3                   	ret    

00018102 <terminal_putchar>:
terminal_putchar():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:110

void terminal_putchar(char c) {
   18102:	55                   	push   ebp
   18103:	89 e5                	mov    ebp,esp
   18105:	53                   	push   ebx
   18106:	83 ec 24             	sub    esp,0x24
   18109:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1810c:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:111
    if (c=='\n')
   1810f:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
   18113:	75 1c                	jne    18131 <terminal_putchar+0x2f>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:113
    {
            terminal_column = 0;
   18115:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
   1811c:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:114
            terminal_row += 1;
   1811f:	a1 00 00 12 00       	mov    eax,ds:0x120000
   18124:	83 c0 01             	add    eax,0x1
   18127:	a3 00 00 12 00       	mov    ds:0x120000,eax
   1812c:	e9 1f 01 00 00       	jmp    18250 <terminal_putchar+0x14e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:116
    }
    else if (c=='\b')
   18131:	80 7d e4 08          	cmp    BYTE PTR [ebp-0x1c],0x8
   18135:	75 58                	jne    1818f <terminal_putchar+0x8d>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:118
    {
        if (terminal_column > 1)
   18137:	a1 04 00 12 00       	mov    eax,ds:0x120004
   1813c:	83 f8 01             	cmp    eax,0x1
   1813f:	76 0f                	jbe    18150 <terminal_putchar+0x4e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:119
            terminal_column--;
   18141:	a1 04 00 12 00       	mov    eax,ds:0x120004
   18146:	83 e8 01             	sub    eax,0x1
   18149:	a3 04 00 12 00       	mov    ds:0x120004,eax
   1814e:	eb 17                	jmp    18167 <terminal_putchar+0x65>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:122
        else
        {
            terminal_row--;
   18150:	a1 00 00 12 00       	mov    eax,ds:0x120000
   18155:	83 e8 01             	sub    eax,0x1
   18158:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:123
            terminal_column=VGA_WIDTH;
   1815d:	b8 50 00 00 00       	mov    eax,0x50
   18162:	a3 04 00 12 00       	mov    ds:0x120004,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:125
        }
        terminal_putentryat(' ', terminal_color, terminal_column, terminal_row);
   18167:	8b 0d 00 00 12 00    	mov    ecx,DWORD PTR ds:0x120000
   1816d:	8b 15 04 00 12 00    	mov    edx,DWORD PTR ds:0x120004
   18173:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
   1817a:	0f b6 c0             	movzx  eax,al
   1817d:	51                   	push   ecx
   1817e:	52                   	push   edx
   1817f:	50                   	push   eax
   18180:	6a 20                	push   0x20
   18182:	e8 52 fd ff ff       	call   17ed9 <terminal_putentryat>
   18187:	83 c4 10             	add    esp,0x10
   1818a:	e9 c1 00 00 00       	jmp    18250 <terminal_putchar+0x14e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:128
        
    }
    else if (c=='\t')
   1818f:	80 7d e4 09          	cmp    BYTE PTR [ebp-0x1c],0x9
   18193:	75 59                	jne    181ee <terminal_putchar+0xec>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:130
    {
        uint32_t goTo= terminal_column + (SCREEN_SPACES_PER_TAB - (terminal_column % SCREEN_SPACES_PER_TAB));
   18195:	8b 1d 04 00 12 00    	mov    ebx,DWORD PTR ds:0x120004
   1819b:	8b 0d 04 00 12 00    	mov    ecx,DWORD PTR ds:0x120004
   181a1:	ba cd cc cc cc       	mov    edx,0xcccccccd
   181a6:	89 c8                	mov    eax,ecx
   181a8:	f7 e2                	mul    edx
   181aa:	c1 ea 02             	shr    edx,0x2
   181ad:	89 d0                	mov    eax,edx
   181af:	c1 e0 02             	shl    eax,0x2
   181b2:	01 d0                	add    eax,edx
   181b4:	29 c1                	sub    ecx,eax
   181b6:	89 ca                	mov    edx,ecx
   181b8:	89 d8                	mov    eax,ebx
   181ba:	29 d0                	sub    eax,edx
   181bc:	83 c0 05             	add    eax,0x5
   181bf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:131
        if (goTo==terminal_column)
   181c2:	a1 04 00 12 00       	mov    eax,ds:0x120004
   181c7:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   181ca:	75 16                	jne    181e2 <terminal_putchar+0xe0>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:132
            goTo=SCREEN_SPACES_PER_TAB;
   181cc:	c7 45 f4 05 00 00 00 	mov    DWORD PTR [ebp-0xc],0x5
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:134
        
        while (terminal_column < goTo)
   181d3:	eb 0d                	jmp    181e2 <terminal_putchar+0xe0>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:135
            terminal_putchar(' ');;
   181d5:	83 ec 0c             	sub    esp,0xc
   181d8:	6a 20                	push   0x20
   181da:	e8 23 ff ff ff       	call   18102 <terminal_putchar>
   181df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:134
    {
        uint32_t goTo= terminal_column + (SCREEN_SPACES_PER_TAB - (terminal_column % SCREEN_SPACES_PER_TAB));
        if (goTo==terminal_column)
            goTo=SCREEN_SPACES_PER_TAB;
        
        while (terminal_column < goTo)
   181e2:	a1 04 00 12 00       	mov    eax,ds:0x120004
   181e7:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   181ea:	72 e9                	jb     181d5 <terminal_putchar+0xd3>
   181ec:	eb 62                	jmp    18250 <terminal_putchar+0x14e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:141
    
    //6 - cnt=0 to (5-1) 4
    //8 - cnt= to (5-3) 2
    }
    //We're going to ignore carriage return since most systems don't use it.  Unfortunately the FAT library we are using does
    else if (c=='\r')
   181ee:	80 7d e4 0d          	cmp    BYTE PTR [ebp-0x1c],0xd
   181f2:	0f 84 b0 00 00 00    	je     182a8 <terminal_putchar+0x1a6>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:146
        return;

        else
        {
                terminal_putentryat(c, terminal_color, terminal_column, terminal_row);
   181f8:	8b 1d 00 00 12 00    	mov    ebx,DWORD PTR ds:0x120000
   181fe:	8b 0d 04 00 12 00    	mov    ecx,DWORD PTR ds:0x120004
   18204:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
   1820b:	0f b6 d0             	movzx  edx,al
   1820e:	0f be 45 e4          	movsx  eax,BYTE PTR [ebp-0x1c]
   18212:	53                   	push   ebx
   18213:	51                   	push   ecx
   18214:	52                   	push   edx
   18215:	50                   	push   eax
   18216:	e8 be fc ff ff       	call   17ed9 <terminal_putentryat>
   1821b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:147
                if (++terminal_column == VGA_WIDTH) {
   1821e:	a1 04 00 12 00       	mov    eax,ds:0x120004
   18223:	83 c0 01             	add    eax,0x1
   18226:	a3 04 00 12 00       	mov    ds:0x120004,eax
   1822b:	a1 04 00 12 00       	mov    eax,ds:0x120004
   18230:	ba 50 00 00 00       	mov    edx,0x50
   18235:	39 d0                	cmp    eax,edx
   18237:	75 17                	jne    18250 <terminal_putchar+0x14e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:148
                        terminal_column = 0;
   18239:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
   18240:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:149
                        terminal_row++;
   18243:	a1 00 00 12 00       	mov    eax,ds:0x120000
   18248:	83 c0 01             	add    eax,0x1
   1824b:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:152
                }
        }
    if (terminal_row == kTerminalHeight)
   18250:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   18257:	0f b6 d0             	movzx  edx,al
   1825a:	a1 00 00 12 00       	mov    eax,ds:0x120000
   1825f:	39 c2                	cmp    edx,eax
   18261:	75 3e                	jne    182a1 <terminal_putchar+0x19f>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:154
    {
        for (unsigned row=0;row<kTerminalHeight;row++)
   18263:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   1826a:	eb 19                	jmp    18285 <terminal_putchar+0x183>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:155 (discriminator 3)
            terminal_copyline(row, row+1);
   1826c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1826f:	83 c0 01             	add    eax,0x1
   18272:	83 ec 08             	sub    esp,0x8
   18275:	50                   	push   eax
   18276:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   18279:	e8 3d fe ff ff       	call   180bb <terminal_copyline>
   1827e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:154 (discriminator 3)
                        terminal_row++;
                }
        }
    if (terminal_row == kTerminalHeight)
    {
        for (unsigned row=0;row<kTerminalHeight;row++)
   18281:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:154 (discriminator 1)
   18285:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   1828c:	0f b6 c0             	movzx  eax,al
   1828f:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   18292:	77 d8                	ja     1826c <terminal_putchar+0x16a>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:157
            terminal_copyline(row, row+1);
        //memcpy((void *)TEXTMODE_MEMORY_START, (void *)TEXTMODE_MEMORY_START+160, 160*25);
        terminal_row--;
   18294:	a1 00 00 12 00       	mov    eax,ds:0x120000
   18299:	83 e8 01             	sub    eax,0x1
   1829c:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:159
    }
    update_cursor();
   182a1:	e8 65 fb ff ff       	call   17e0b <update_cursor>
   182a6:	eb 01                	jmp    182a9 <terminal_putchar+0x1a7>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:142
    //6 - cnt=0 to (5-1) 4
    //8 - cnt= to (5-3) 2
    }
    //We're going to ignore carriage return since most systems don't use it.  Unfortunately the FAT library we are using does
    else if (c=='\r')
        return;
   182a8:	90                   	nop
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:160
            terminal_copyline(row, row+1);
        //memcpy((void *)TEXTMODE_MEMORY_START, (void *)TEXTMODE_MEMORY_START+160, 160*25);
        terminal_row--;
    }
    update_cursor();
}
   182a9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   182ac:	c9                   	leave  
   182ad:	c3                   	ret    

000182ae <cursorUpdateBiosCursor>:
cursorUpdateBiosCursor():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:163

void cursorUpdateBiosCursor()
{
   182ae:	55                   	push   ebp
   182af:	89 e5                	mov    ebp,esp
   182b1:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:164
    uint8_t* bda=(uint8_t*)0x450;
   182b4:	c7 45 fc 50 04 00 00 	mov    DWORD PTR [ebp-0x4],0x450
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:165
    *bda=(uint8_t)(terminal_column & 0xFF);
   182bb:	a1 04 00 12 00       	mov    eax,ds:0x120004
   182c0:	89 c2                	mov    edx,eax
   182c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   182c5:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:166
    bda++;
   182c7:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:167
    *bda=(uint8_t)((terminal_row+3) & 0xFF);
   182cb:	a1 00 00 12 00       	mov    eax,ds:0x120000
   182d0:	8d 50 03             	lea    edx,[eax+0x3]
   182d3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   182d6:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:168
}
   182d8:	90                   	nop
   182d9:	c9                   	leave  
   182da:	c3                   	ret    

000182db <cursorMoveTo>:
cursorMoveTo():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:171

void cursorMoveTo(uint8_t x, uint8_t y)
{
   182db:	55                   	push   ebp
   182dc:	89 e5                	mov    ebp,esp
   182de:	83 ec 08             	sub    esp,0x8
   182e1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   182e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   182e7:	88 55 fc             	mov    BYTE PTR [ebp-0x4],dl
   182ea:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:172
    terminal_row = y;
   182ed:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   182f1:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:173
    terminal_column = x;
   182f6:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   182fa:	a3 04 00 12 00       	mov    ds:0x120004,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:174
    update_cursor();
   182ff:	e8 07 fb ff ff       	call   17e0b <update_cursor>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:175
}
   18304:	90                   	nop
   18305:	c9                   	leave  
   18306:	c3                   	ret    

00018307 <cursorMoveToX>:
cursorMoveToX():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:178

void cursorMoveToX(uint8_t x)
{
   18307:	55                   	push   ebp
   18308:	89 e5                	mov    ebp,esp
   1830a:	83 ec 04             	sub    esp,0x4
   1830d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18310:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:179
    terminal_column = x;
   18313:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   18317:	a3 04 00 12 00       	mov    ds:0x120004,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:180
}
   1831c:	90                   	nop
   1831d:	c9                   	leave  
   1831e:	c3                   	ret    

0001831f <cursorMoveToY>:
cursorMoveToY():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:183

void cursorMoveToY(uint8_t y)
{
   1831f:	55                   	push   ebp
   18320:	89 e5                	mov    ebp,esp
   18322:	83 ec 04             	sub    esp,0x4
   18325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18328:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:184
    terminal_row = y;
   1832b:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   1832f:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:185
}
   18334:	90                   	nop
   18335:	c9                   	leave  
   18336:	c3                   	ret    

00018337 <cursorGetPosX>:
cursorGetPosX():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:188

uint8_t cursorGetPosX()
{
   18337:	55                   	push   ebp
   18338:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:189
    return terminal_column;
   1833a:	a1 04 00 12 00       	mov    eax,ds:0x120004
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:190
}
   1833f:	5d                   	pop    ebp
   18340:	c3                   	ret    

00018341 <cursorGetMaxX>:
cursorGetMaxX():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:192
int cursorGetMaxX()
{
   18341:	55                   	push   ebp
   18342:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:193
    return VGA_WIDTH;
   18344:	b8 50 00 00 00       	mov    eax,0x50
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:194
}
   18349:	5d                   	pop    ebp
   1834a:	c3                   	ret    

0001834b <cursorGetMaxY>:
cursorGetMaxY():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:197

int cursorGetMaxY()
{
   1834b:	55                   	push   ebp
   1834c:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:198
    return kTerminalHeight;
   1834e:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   18355:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:199
}
   18358:	5d                   	pop    ebp
   18359:	c3                   	ret    

0001835a <displayGetMaxXY>:
displayGetMaxXY():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:202

void displayGetMaxXY(int* maxX, int* maxY)
{
   1835a:	55                   	push   ebp
   1835b:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:203
    *maxX=VGA_WIDTH;
   1835d:	b8 50 00 00 00       	mov    eax,0x50
   18362:	89 c2                	mov    edx,eax
   18364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18367:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:204
    *maxY=kTerminalHeight;
   18369:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   18370:	0f b6 d0             	movzx  edx,al
   18373:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18376:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:205
    return;
   18378:	90                   	nop
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:206
}
   18379:	5d                   	pop    ebp
   1837a:	c3                   	ret    

0001837b <cursorGetPosY>:
cursorGetPosY():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:209

uint8_t cursorGetPosY()
{
   1837b:	55                   	push   ebp
   1837c:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:210
    return terminal_row;
   1837e:	a1 00 00 12 00       	mov    eax,ds:0x120000
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:211
}
   18383:	5d                   	pop    ebp
   18384:	c3                   	ret    

00018385 <kTermPrint>:
kTermPrint():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:213

void kTermPrint(const char* data) {
   18385:	55                   	push   ebp
   18386:	89 e5                	mov    ebp,esp
   18388:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:214
        size_t datalen = strlen(data);
   1838b:	83 ec 0c             	sub    esp,0xc
   1838e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   18391:	e8 96 f5 00 00       	call   2792c <strlen>
   18396:	83 c4 10             	add    esp,0x10
   18399:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:215
        for (size_t i = 0; i < datalen; i++)
   1839c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   183a3:	eb 1e                	jmp    183c3 <kTermPrint+0x3e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:216 (discriminator 3)
                terminal_putchar(data[i]);
   183a5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   183a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   183ab:	01 d0                	add    eax,edx
   183ad:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   183b0:	0f be c0             	movsx  eax,al
   183b3:	83 ec 0c             	sub    esp,0xc
   183b6:	50                   	push   eax
   183b7:	e8 46 fd ff ff       	call   18102 <terminal_putchar>
   183bc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:215 (discriminator 3)
    return terminal_row;
}

void kTermPrint(const char* data) {
        size_t datalen = strlen(data);
        for (size_t i = 0; i < datalen; i++)
   183bf:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:215 (discriminator 1)
   183c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   183c6:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   183c9:	72 da                	jb     183a5 <kTermPrint+0x20>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:217
                terminal_putchar(data[i]);
}
   183cb:	90                   	nop
   183cc:	c9                   	leave  
   183cd:	c3                   	ret    

000183ce <kTermInit>:
kTermInit():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:220


void kTermInit() {
   183ce:	55                   	push   ebp
   183cf:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:221
    kTerminalHeight=SYS_VGA_HEIGHT;
   183d1:	c6 05 27 00 12 00 32 	mov    BYTE PTR ds:0x120027,0x32
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:222
    terminal_row = 0;
   183d8:	c7 05 00 00 12 00 00 	mov    DWORD PTR ds:0x120000,0x0
   183df:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:223
    terminal_column = 0;
   183e2:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
   183e9:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:224
    terminal_color = make_color(COLOR_LIGHT_BROWN, COLOR_BLACK);
   183ec:	6a 00                	push   0x0
   183ee:	6a 0e                	push   0xe
   183f0:	e8 86 fa ff ff       	call   17e7b <make_color>
   183f5:	83 c4 08             	add    esp,0x8
   183f8:	a2 08 00 12 00       	mov    ds:0x120008,al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:225
    terminal_buffer = (uint16_t*) TEXTMODE_MEMORY_START;
   183fd:	c7 05 0c 00 12 00 00 	mov    DWORD PTR ds:0x12000c,0xb8000
   18404:	80 0b 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:227
    //terminal_clear();
}
   18407:	90                   	nop
   18408:	c9                   	leave  
   18409:	c3                   	ret    

0001840a <puts>:
puts():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:230

void puts(char* in)
{
   1840a:	55                   	push   ebp
   1840b:	89 e5                	mov    ebp,esp
   1840d:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:231
    while (*in>'\0')
   18410:	eb 1b                	jmp    1842d <puts+0x23>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:233
    {
        terminal_putchar(*in++);
   18412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18415:	8d 50 01             	lea    edx,[eax+0x1]
   18418:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   1841b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1841e:	0f be c0             	movsx  eax,al
   18421:	83 ec 0c             	sub    esp,0xc
   18424:	50                   	push   eax
   18425:	e8 d8 fc ff ff       	call   18102 <terminal_putchar>
   1842a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:231
    //terminal_clear();
}

void puts(char* in)
{
    while (*in>'\0')
   1842d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18430:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18433:	84 c0                	test   al,al
   18435:	7f db                	jg     18412 <puts+0x8>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:235
    {
        terminal_putchar(*in++);
    }
}
   18437:	90                   	nop
   18438:	c9                   	leave  
   18439:	c3                   	ret    

0001843a <putc>:
putc():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:238

void putc(char c)
{
   1843a:	55                   	push   ebp
   1843b:	89 e5                	mov    ebp,esp
   1843d:	83 ec 18             	sub    esp,0x18
   18440:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18443:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:239
    terminal_putchar(c);
   18446:	0f be 45 f4          	movsx  eax,BYTE PTR [ebp-0xc]
   1844a:	83 ec 0c             	sub    esp,0xc
   1844d:	50                   	push   eax
   1844e:	e8 af fc ff ff       	call   18102 <terminal_putchar>
   18453:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:240
   18456:	90                   	nop
   18457:	c9                   	leave  
   18458:	c3                   	ret    
   18459:	66 90                	xchg   ax,ax
   1845b:	90                   	nop

0001845c <doRSDPSearch>:
doRSDPSearch():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:8
#include "i386/bits/types.h"

extern uint32_t kDebugLevel;

uint32_t doRSDPSearch(int from, int count)
{
   1845c:	55                   	push   ebp
   1845d:	89 e5                	mov    ebp,esp
   1845f:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:9
    uint8_t* fromPtr=(uint8_t*)from;
   18462:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18465:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:12
    
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   18468:	a1 78 98 12 00       	mov    eax,ds:0x129878
   1846d:	25 00 04 00 00       	and    eax,0x400
   18472:	85 c0                	test   eax,eax
   18474:	74 1c                	je     18492 <doRSDPSearch+0x36>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:13
            printk("doRSDPSearch: 0x%08X(0x%08X)-0x%08X\n", from, &fromPtr[0], from+count);
   18476:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18479:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1847c:	01 d0                	add    eax,edx
   1847e:	50                   	push   eax
   1847f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   18482:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   18485:	68 48 2d 08 00       	push   0x82d48
   1848a:	e8 cc f2 00 00       	call   2775b <printk>
   1848f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:15
#endif
    for (int cnt=0;cnt<count;cnt++)
   18492:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   18499:	e9 9f 00 00 00       	jmp    1853d <doRSDPSearch+0xe1>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16
        if (fromPtr[cnt]=='R' && fromPtr[cnt+1]=='S' && fromPtr[cnt+2]=='D' && fromPtr[cnt+3]==' ' && fromPtr[cnt+4]=='P' && fromPtr[cnt+5]=='T' && fromPtr[cnt+6]=='R' && fromPtr[cnt+7]==' ')
   1849e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   184a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   184a4:	01 d0                	add    eax,edx
   184a6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   184a9:	3c 52                	cmp    al,0x52
   184ab:	0f 85 88 00 00 00    	jne    18539 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 1)
   184b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   184b4:	8d 50 01             	lea    edx,[eax+0x1]
   184b7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   184ba:	01 d0                	add    eax,edx
   184bc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   184bf:	3c 53                	cmp    al,0x53
   184c1:	75 76                	jne    18539 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 2)
   184c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   184c6:	8d 50 02             	lea    edx,[eax+0x2]
   184c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   184cc:	01 d0                	add    eax,edx
   184ce:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   184d1:	3c 44                	cmp    al,0x44
   184d3:	75 64                	jne    18539 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 3)
   184d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   184d8:	8d 50 03             	lea    edx,[eax+0x3]
   184db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   184de:	01 d0                	add    eax,edx
   184e0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   184e3:	3c 20                	cmp    al,0x20
   184e5:	75 52                	jne    18539 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 4)
   184e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   184ea:	8d 50 04             	lea    edx,[eax+0x4]
   184ed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   184f0:	01 d0                	add    eax,edx
   184f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   184f5:	3c 50                	cmp    al,0x50
   184f7:	75 40                	jne    18539 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 5)
   184f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   184fc:	8d 50 05             	lea    edx,[eax+0x5]
   184ff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18502:	01 d0                	add    eax,edx
   18504:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18507:	3c 54                	cmp    al,0x54
   18509:	75 2e                	jne    18539 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 6)
   1850b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1850e:	8d 50 06             	lea    edx,[eax+0x6]
   18511:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18514:	01 d0                	add    eax,edx
   18516:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18519:	3c 52                	cmp    al,0x52
   1851b:	75 1c                	jne    18539 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 7)
   1851d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18520:	8d 50 07             	lea    edx,[eax+0x7]
   18523:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18526:	01 d0                	add    eax,edx
   18528:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1852b:	3c 20                	cmp    al,0x20
   1852d:	75 0a                	jne    18539 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:18
        {
            return (uint32_t)&fromPtr[cnt];
   1852f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   18532:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18535:	01 d0                	add    eax,edx
   18537:	eb 15                	jmp    1854e <doRSDPSearch+0xf2>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:15 (discriminator 2)
    
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
            printk("doRSDPSearch: 0x%08X(0x%08X)-0x%08X\n", from, &fromPtr[0], from+count);
#endif
    for (int cnt=0;cnt<count;cnt++)
   18539:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:15 (discriminator 1)
   1853d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18540:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   18543:	0f 8c 55 ff ff ff    	jl     1849e <doRSDPSearch+0x42>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:20
        if (fromPtr[cnt]=='R' && fromPtr[cnt+1]=='S' && fromPtr[cnt+2]=='D' && fromPtr[cnt+3]==' ' && fromPtr[cnt+4]=='P' && fromPtr[cnt+5]=='T' && fromPtr[cnt+6]=='R' && fromPtr[cnt+7]==' ')
        {
            return (uint32_t)&fromPtr[cnt];
        }
    return 0xFFFFFFFF;
   18549:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:21
}
   1854e:	c9                   	leave  
   1854f:	c3                   	ret    

00018550 <acpiFindTable>:
acpiFindTable():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:24

acpiFADT_t *acpiFindTable(void *RootSDT, char* tableSignature)
{
   18550:	55                   	push   ebp
   18551:	89 e5                	mov    ebp,esp
   18553:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:25
    acpiRSDT_t* rsdt = (acpiRSDT_t*) RootSDT;
   18556:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18559:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:26
    int entries = ((rsdt->header.Length - sizeof(rsdt->header)) / 4)+10;
   1855c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1855f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   18562:	83 e8 24             	sub    eax,0x24
   18565:	c1 e8 02             	shr    eax,0x2
   18568:	83 c0 0a             	add    eax,0xa
   1856b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:28
 
    for (int i = 0; i < entries; i++)
   1856e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   18575:	eb 48                	jmp    185bf <acpiFindTable+0x6f>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:30
    {
        acpiRSDT_t *nextRSDT = (acpiRSDT_t*)rsdt->PointerToOtherSDT[i];
   18577:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1857a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1857d:	83 c2 08             	add    edx,0x8
   18580:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
   18584:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:31
        printk("***tableSignature=%s, header sig=%s***\n", tableSignature, nextRSDT->header.Signature);
   18587:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1858a:	83 ec 04             	sub    esp,0x4
   1858d:	50                   	push   eax
   1858e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   18591:	68 70 2d 08 00       	push   0x82d70
   18596:	e8 c0 f1 00 00       	call   2775b <printk>
   1859b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:32
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
   1859e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   185a1:	83 ec 04             	sub    esp,0x4
   185a4:	6a 04                	push   0x4
   185a6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   185a9:	50                   	push   eax
   185aa:	e8 d9 96 ff ff       	call   11c88 <strncmp>
   185af:	83 c4 10             	add    esp,0x10
   185b2:	85 c0                	test   eax,eax
   185b4:	75 05                	jne    185bb <acpiFindTable+0x6b>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:33
            return (acpiFADT_t*)nextRSDT;
   185b6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   185b9:	eb 11                	jmp    185cc <acpiFindTable+0x7c>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:28 (discriminator 2)
acpiFADT_t *acpiFindTable(void *RootSDT, char* tableSignature)
{
    acpiRSDT_t* rsdt = (acpiRSDT_t*) RootSDT;
    int entries = ((rsdt->header.Length - sizeof(rsdt->header)) / 4)+10;
 
    for (int i = 0; i < entries; i++)
   185bb:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:28 (discriminator 1)
   185bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   185c2:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   185c5:	7c b0                	jl     18577 <acpiFindTable+0x27>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:37
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
            return (acpiFADT_t*)nextRSDT;
    }
 
    // No FACP found
    return NULL;
   185c7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:38
}
   185cc:	c9                   	leave  
   185cd:	c3                   	ret    

000185ce <acpiFindTable2>:
acpiFindTable2():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:40
void *acpiFindTable2(void *RootSDT, char* tableSignature)
{
   185ce:	55                   	push   ebp
   185cf:	89 e5                	mov    ebp,esp
   185d1:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:41
    acpiRSDT_t *rsdt = (acpiRSDT_t*) RootSDT;
   185d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   185d7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:42
    int entries = (rsdt->header.Length - sizeof(rsdt->header)) / 4;
   185da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   185dd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   185e0:	83 e8 24             	sub    eax,0x24
   185e3:	c1 e8 02             	shr    eax,0x2
   185e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:44
 
    for (int i = 0; i < entries; i++)
   185e9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   185f0:	eb 48                	jmp    1863a <acpiFindTable2+0x6c>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:46
    {
        acpiRSDT_t *nextRSDT = (acpiRSDT_t *) rsdt->PointerToOtherSDT[i];
   185f2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   185f5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   185f8:	83 c2 08             	add    edx,0x8
   185fb:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
   185ff:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:47
        printk("***tableSignature=%s, header sig=%s***\n", tableSignature, nextRSDT->header.Signature);
   18602:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18605:	83 ec 04             	sub    esp,0x4
   18608:	50                   	push   eax
   18609:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1860c:	68 70 2d 08 00       	push   0x82d70
   18611:	e8 45 f1 00 00       	call   2775b <printk>
   18616:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:48
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
   18619:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1861c:	83 ec 04             	sub    esp,0x4
   1861f:	6a 04                	push   0x4
   18621:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   18624:	50                   	push   eax
   18625:	e8 5e 96 ff ff       	call   11c88 <strncmp>
   1862a:	83 c4 10             	add    esp,0x10
   1862d:	85 c0                	test   eax,eax
   1862f:	75 05                	jne    18636 <acpiFindTable2+0x68>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:49
            return (void *) nextRSDT;
   18631:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18634:	eb 11                	jmp    18647 <acpiFindTable2+0x79>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:44 (discriminator 2)
void *acpiFindTable2(void *RootSDT, char* tableSignature)
{
    acpiRSDT_t *rsdt = (acpiRSDT_t*) RootSDT;
    int entries = (rsdt->header.Length - sizeof(rsdt->header)) / 4;
 
    for (int i = 0; i < entries; i++)
   18636:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:44 (discriminator 1)
   1863a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1863d:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   18640:	7c b0                	jl     185f2 <acpiFindTable2+0x24>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:53
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
            return (void *) nextRSDT;
    }
 
    // No FACP found
    return NULL;
   18642:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:54
}
   18647:	c9                   	leave  
   18648:	c3                   	ret    

00018649 <acpiFindTables>:
acpiFindTables():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:56
void acpiFindTables()
{
   18649:	55                   	push   ebp
   1864a:	89 e5                	mov    ebp,esp
   1864c:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:61
    acpiRSDPHeader_t* lRSDPTable;
    acpiRSDT_t* lRootSDP;
    acpiFADT_t* lFADTSDP;
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   1864f:	a1 78 98 12 00       	mov    eax,ds:0x129878
   18654:	25 00 04 00 00       	and    eax,0x400
   18659:	85 c0                	test   eax,eax
   1865b:	74 10                	je     1866d <acpiFindTables+0x24>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:62
             printk("acpiFindTables: Looking for ACPI tables\n");
   1865d:	83 ec 0c             	sub    esp,0xc
   18660:	68 98 2d 08 00       	push   0x82d98
   18665:	e8 f1 f0 00 00       	call   2775b <printk>
   1866a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:64
#endif
             uint16_t* lEBDABIOSPtr=(uint16_t*)0x40e;
   1866d:	c7 45 e8 0e 04 00 00 	mov    DWORD PTR [ebp-0x18],0x40e
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:65
    int32_t lRSDPPtr, lRSDPBaseAddress=0xFFFFFFFF;
   18674:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:68
    
    //Start by looking in the bios for the extended bios data area (EBDA) segment address, and search there
    if (lEBDABIOSPtr != 0)
   1867b:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1867f:	74 2b                	je     186ac <acpiFindTables+0x63>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:70
    {
        lRSDPPtr=*lEBDABIOSPtr*10;
   18681:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18684:	0f b7 00             	movzx  eax,WORD PTR [eax]
   18687:	0f b7 d0             	movzx  edx,ax
   1868a:	89 d0                	mov    eax,edx
   1868c:	c1 e0 02             	shl    eax,0x2
   1868f:	01 d0                	add    eax,edx
   18691:	01 c0                	add    eax,eax
   18693:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:71
        lRSDPBaseAddress = doRSDPSearch(lRSDPPtr, 0xFFFF);
   18696:	83 ec 08             	sub    esp,0x8
   18699:	68 ff ff 00 00       	push   0xffff
   1869e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   186a1:	e8 b6 fd ff ff       	call   1845c <doRSDPSearch>
   186a6:	83 c4 10             	add    esp,0x10
   186a9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:74
    }
    //If we didn't find the RSDP table there, look from 0xE0000->0xFFFFF
    if (lRSDPBaseAddress==0xFFFFFFFF)
   186ac:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
   186b0:	75 18                	jne    186ca <acpiFindTables+0x81>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:76
    {
        lRSDPBaseAddress=doRSDPSearch(0xE0000, 0x1FFFF);
   186b2:	83 ec 08             	sub    esp,0x8
   186b5:	68 ff ff 01 00       	push   0x1ffff
   186ba:	68 00 00 0e 00       	push   0xe0000
   186bf:	e8 98 fd ff ff       	call   1845c <doRSDPSearch>
   186c4:	83 c4 10             	add    esp,0x10
   186c7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:78
    }
    if (lRSDPBaseAddress==-1)
   186ca:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
   186ce:	75 2a                	jne    186fa <acpiFindTables+0xb1>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:81
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   186d0:	a1 78 98 12 00       	mov    eax,ds:0x129878
   186d5:	25 00 04 00 00       	and    eax,0x400
   186da:	85 c0                	test   eax,eax
   186dc:	0f 84 51 01 00 00    	je     18833 <acpiFindTables+0x1ea>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:82
           printk(" table not found\n", lRSDPPtr);
   186e2:	83 ec 08             	sub    esp,0x8
   186e5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   186e8:	68 c1 2d 08 00       	push   0x82dc1
   186ed:	e8 69 f0 00 00       	call   2775b <printk>
   186f2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:84
#endif
        return;
   186f5:	e9 39 01 00 00       	jmp    18833 <acpiFindTables+0x1ea>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:86
    }
    lRSDPTable=(acpiRSDPHeader_t*)lRSDPBaseAddress;
   186fa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   186fd:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:88
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   18700:	a1 78 98 12 00       	mov    eax,ds:0x129878
   18705:	25 00 04 00 00       	and    eax,0x400
   1870a:	85 c0                	test   eax,eax
   1870c:	74 42                	je     18750 <acpiFindTables+0x107>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:90
    {
        printk(" table found at 0x%08X\n", lRSDPBaseAddress);
   1870e:	83 ec 08             	sub    esp,0x8
   18711:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   18714:	68 d3 2d 08 00       	push   0x82dd3
   18719:	e8 3d f0 00 00       	call   2775b <printk>
   1871e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:91
        printk("ACPI version %s, RSPD OEM Id: %s\n", lRSDPTable->firstPart.Revision==0?"1.0":"2+", lRSDPTable->firstPart.OEMID);
   18721:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   18724:	8d 50 09             	lea    edx,[eax+0x9]
   18727:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1872a:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   1872e:	84 c0                	test   al,al
   18730:	75 07                	jne    18739 <acpiFindTables+0xf0>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:91 (discriminator 1)
   18732:	b8 eb 2d 08 00       	mov    eax,0x82deb
   18737:	eb 05                	jmp    1873e <acpiFindTables+0xf5>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:91 (discriminator 2)
   18739:	b8 ef 2d 08 00       	mov    eax,0x82def
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:91 (discriminator 4)
   1873e:	83 ec 04             	sub    esp,0x4
   18741:	52                   	push   edx
   18742:	50                   	push   eax
   18743:	68 f4 2d 08 00       	push   0x82df4
   18748:	e8 0e f0 00 00       	call   2775b <printk>
   1874d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:93
    }
    if (lRSDPTable->firstPart.Revision==0)
   18750:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   18753:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   18757:	84 c0                	test   al,al
   18759:	75 29                	jne    18784 <acpiFindTables+0x13b>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:95
    {
        lRootSDP=(acpiRSDT_t*)lRSDPTable->firstPart.RsdtAddress;
   1875b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1875e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   18761:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:96
        printk("RSDP is at 0x%08X, OEM Id: %s, OSDT=0x%08X\n", lRootSDP, lRootSDP->header.OEMID, lRootSDP->PointerToOtherSDT);
   18764:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18767:	8d 50 24             	lea    edx,[eax+0x24]
   1876a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1876d:	83 c0 0a             	add    eax,0xa
   18770:	52                   	push   edx
   18771:	50                   	push   eax
   18772:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   18775:	68 18 2e 08 00       	push   0x82e18
   1877a:	e8 dc ef 00 00       	call   2775b <printk>
   1877f:	83 c4 10             	add    esp,0x10
   18782:	eb 2a                	jmp    187ae <acpiFindTables+0x165>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:100
    }
    else
    {
        lRootSDP=(acpiRSDT_t*)lRSDPTable->XsdtAddress;
   18784:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   18787:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1878a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   1878d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:101
        printk("RSDP is at 0x%08X, OEM Id: %s, OSDT=0x%08X\n", lRootSDP, lRootSDP->header.OEMID, lRootSDP->PointerToOtherSDT);
   18790:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18793:	8d 50 24             	lea    edx,[eax+0x24]
   18796:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18799:	83 c0 0a             	add    eax,0xa
   1879c:	52                   	push   edx
   1879d:	50                   	push   eax
   1879e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   187a1:	68 18 2e 08 00       	push   0x82e18
   187a6:	e8 b0 ef 00 00       	call   2775b <printk>
   187ab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:103
    }
    lFADTSDP=acpiFindTable(lRootSDP,"FACP");
   187ae:	83 ec 08             	sub    esp,0x8
   187b1:	68 44 2e 08 00       	push   0x82e44
   187b6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   187b9:	e8 92 fd ff ff       	call   18550 <acpiFindTable>
   187be:	83 c4 10             	add    esp,0x10
   187c1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:104
    if (lFADTSDP!=NULL)
   187c4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   187c8:	74 2e                	je     187f8 <acpiFindTables+0x1af>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:106
    {
        printk("FACP found at 0x%08X. resetReg=0x%08X\n", lFADTSDP, lFADTSDP->ResetReg);
   187ca:	83 ec 0c             	sub    esp,0xc
   187cd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   187d0:	83 ec 0c             	sub    esp,0xc
   187d3:	89 e2                	mov    edx,esp
   187d5:	8b 48 74             	mov    ecx,DWORD PTR [eax+0x74]
   187d8:	89 0a                	mov    DWORD PTR [edx],ecx
   187da:	8b 48 78             	mov    ecx,DWORD PTR [eax+0x78]
   187dd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   187e0:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
   187e3:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
   187e6:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   187e9:	68 4c 2e 08 00       	push   0x82e4c
   187ee:	e8 68 ef 00 00       	call   2775b <printk>
   187f3:	83 c4 20             	add    esp,0x20
   187f6:	eb 10                	jmp    18808 <acpiFindTables+0x1bf>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:110
    }
    else
    {
        printk("Failed to find FACP table, cannot continue ACPI discovery.\n");
   187f8:	83 ec 0c             	sub    esp,0xc
   187fb:	68 74 2e 08 00       	push   0x82e74
   18800:	e8 56 ef 00 00       	call   2775b <printk>
   18805:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:112
    }
    uint32_t* ltemp=acpiFindTable(lFADTSDP,"DSDT");
   18808:	83 ec 08             	sub    esp,0x8
   1880b:	68 b0 2e 08 00       	push   0x82eb0
   18810:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   18813:	e8 38 fd ff ff       	call   18550 <acpiFindTable>
   18818:	83 c4 10             	add    esp,0x10
   1881b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:113
    printk("lTemp=0x%08X\n", ltemp);
   1881e:	83 ec 08             	sub    esp,0x8
   18821:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   18824:	68 b5 2e 08 00       	push   0x82eb5
   18829:	e8 2d ef 00 00       	call   2775b <printk>
   1882e:	83 c4 10             	add    esp,0x10
   18831:	eb 01                	jmp    18834 <acpiFindTables+0x1eb>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:84
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
           printk(" table not found\n", lRSDPPtr);
#endif
        return;
   18833:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:118
    printk("lTemp=0x%08X\n", ltemp);
    
#endif
    
   
}
   18834:	c9                   	leave  
   18835:	c3                   	ret    

00018836 <acpiInitialize>:
acpiInitialize():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:122
    
   
void acpiInitialize()
{
   18836:	55                   	push   ebp
   18837:	89 e5                	mov    ebp,esp
   18839:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:123
    acpiFindTables();
   1883c:	e8 08 fe ff ff       	call   18649 <acpiFindTables>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:125
    
}
   18841:	90                   	nop
   18842:	c9                   	leave  
   18843:	c3                   	ret    

00018844 <__get_cpuid_max>:
__get_cpuid_max():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:179
   pointer is non-null, then first four bytes of the signature
   (as found in ebx register) are returned in location pointed by sig.  */

static __inline unsigned int
__get_cpuid_max (unsigned int __ext, unsigned int *__sig)
{
   18844:	55                   	push   ebp
   18845:	89 e5                	mov    ebp,esp
   18847:	53                   	push   ebx
   18848:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:185
  unsigned int __eax, __ebx, __ecx, __edx;

#ifndef __x86_64__
  /* See if we can use cpuid.  On AMD64 we always can.  */
#if __GNUC__ >= 3
  __asm__ ("pushf{l|d}\n\t"
   1884b:	9c                   	pushf  
   1884c:	9c                   	pushf  
   1884d:	5a                   	pop    edx
   1884e:	89 d0                	mov    eax,edx
   18850:	81 f2 00 00 20 00    	xor    edx,0x200000
   18856:	52                   	push   edx
   18857:	9d                   	popf   
   18858:	9c                   	pushf  
   18859:	5a                   	pop    edx
   1885a:	9d                   	popf   
   1885b:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   1885e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:214
	   "popfl\n\t"
	   : "=&r" (__eax), "=&r" (__ebx)
	   : "i" (0x00200000));
#endif

  if (!((__eax ^ __ebx) & 0x00200000))
   18861:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   18864:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
   18867:	25 00 00 20 00       	and    eax,0x200000
   1886c:	85 c0                	test   eax,eax
   1886e:	75 07                	jne    18877 <__get_cpuid_max+0x33>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:215
    return 0;
   18870:	b8 00 00 00 00       	mov    eax,0x0
   18875:	eb 22                	jmp    18899 <__get_cpuid_max+0x55>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:219
#endif

  /* Host supports cpuid.  Return highest supported cpuid input value.  */
  __cpuid (__ext, __eax, __ebx, __ecx, __edx);
   18877:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1887a:	0f a2                	cpuid  
   1887c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   1887f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
   18882:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   18885:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:221

  if (__sig)
   18888:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1888c:	74 08                	je     18896 <__get_cpuid_max+0x52>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:222
    *__sig = __ebx;
   1888e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18891:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   18894:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:224

  return __eax;
   18896:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:225
}
   18899:	83 c4 10             	add    esp,0x10
   1889c:	5b                   	pop    ebx
   1889d:	5d                   	pop    ebp
   1889e:	c3                   	ret    

0001889f <__get_cpuid>:
__get_cpuid():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:236

static __inline int
__get_cpuid (unsigned int __level,
	     unsigned int *__eax, unsigned int *__ebx,
	     unsigned int *__ecx, unsigned int *__edx)
{
   1889f:	55                   	push   ebp
   188a0:	89 e5                	mov    ebp,esp
   188a2:	56                   	push   esi
   188a3:	53                   	push   ebx
   188a4:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:237
  unsigned int __ext = __level & 0x80000000;
   188a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   188aa:	25 00 00 00 80       	and    eax,0x80000000
   188af:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:239

  if (__get_cpuid_max (__ext, 0) < __level)
   188b2:	6a 00                	push   0x0
   188b4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   188b7:	e8 88 ff ff ff       	call   18844 <__get_cpuid_max>
   188bc:	83 c4 08             	add    esp,0x8
   188bf:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   188c2:	73 07                	jae    188cb <__get_cpuid+0x2c>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:240
    return 0;
   188c4:	b8 00 00 00 00       	mov    eax,0x0
   188c9:	eb 1e                	jmp    188e9 <__get_cpuid+0x4a>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:242

  __cpuid (__level, *__eax, *__ebx, *__ecx, *__edx);
   188cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   188ce:	0f a2                	cpuid  
   188d0:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
   188d3:	89 06                	mov    DWORD PTR [esi],eax
   188d5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   188d8:	89 18                	mov    DWORD PTR [eax],ebx
   188da:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   188dd:	89 08                	mov    DWORD PTR [eax],ecx
   188df:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   188e2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:243
  return 1;
   188e4:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:244
}
   188e9:	8d 65 f8             	lea    esp,[ebp-0x8]
   188ec:	5b                   	pop    ebx
   188ed:	5e                   	pop    esi
   188ee:	5d                   	pop    ebp
   188ef:	c3                   	ret    

000188f0 <rdtsc>:
rdtsc():
/home/yogi/src/os/chrisOS/include/utility.h:57
void displayGDT();

#if defined(__i386__)

static __inline__ unsigned long long rdtsc(void)
{
   188f0:	55                   	push   ebp
   188f1:	89 e5                	mov    ebp,esp
   188f3:	83 ec 10             	sub    esp,0x10
   188f6:	0f 31                	rdtsc  
/home/yogi/src/os/chrisOS/include/utility.h:59
    unsigned long long int x;
    __asm__ volatile (".byte 0x0f, 0x31" : "=A" (x));
   188f8:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   188fb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/chrisOS/include/utility.h:60
    return x;
   188fe:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   18901:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/include/utility.h:61
}
   18904:	c9                   	leave  
   18905:	c3                   	ret    

00018906 <apicCheckFor>:
apicCheckFor():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:12
 *  and if the local APIC hasn't been disabled in MSRs
 *  note that this requires CPUID to be supported.
 */

extern cpu_t kCPU[];
bool apicCheckFor() {
   18906:	55                   	push   ebp
   18907:	89 e5                	mov    ebp,esp
   18909:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:13
   uint32_t eax=0, edx=0, notused=0;
   1890c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   18913:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   1891a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:14
   __get_cpuid(1, &eax, &notused, &notused, &edx);
   18921:	8d 45 f8             	lea    eax,[ebp-0x8]
   18924:	50                   	push   eax
   18925:	8d 45 f4             	lea    eax,[ebp-0xc]
   18928:	50                   	push   eax
   18929:	8d 45 f4             	lea    eax,[ebp-0xc]
   1892c:	50                   	push   eax
   1892d:	8d 45 fc             	lea    eax,[ebp-0x4]
   18930:	50                   	push   eax
   18931:	6a 01                	push   0x1
   18933:	e8 67 ff ff ff       	call   1889f <__get_cpuid>
   18938:	83 c4 14             	add    esp,0x14
/home/yogi/src/os/chrisOS/src/cpu/apic.c:15
   return edx & CPUID_FLAG_APIC;
   1893b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1893e:	25 00 02 00 00       	and    eax,0x200
   18943:	85 c0                	test   eax,eax
   18945:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOS/src/cpu/apic.c:16
}
   18948:	c9                   	leave  
   18949:	c3                   	ret    

0001894a <acpiGetAPICVersion>:
acpiGetAPICVersion():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:19

uint8_t acpiGetAPICVersion()
{
   1894a:	55                   	push   ebp
   1894b:	89 e5                	mov    ebp,esp
   1894d:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/apic.c:20
    return apicReadRegister(APIC_REGISTER_VERSION);
   18950:	83 ec 0c             	sub    esp,0xc
   18953:	6a 30                	push   0x30
   18955:	e8 3f 00 00 00       	call   18999 <apicReadRegister>
   1895a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:21
}
   1895d:	c9                   	leave  
   1895e:	c3                   	ret    

0001895f <apciGetAPICID>:
apciGetAPICID():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:24

uint8_t apciGetAPICID(unsigned whichAPIC)
{
   1895f:	55                   	push   ebp
   18960:	89 e5                	mov    ebp,esp
   18962:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/apic.c:25
    return apicReadRegister(APIC_REGISTER_APIC_ID_OFFSET);
   18965:	83 ec 0c             	sub    esp,0xc
   18968:	6a 20                	push   0x20
   1896a:	e8 2a 00 00 00       	call   18999 <apicReadRegister>
   1896f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:26
}
   18972:	c9                   	leave  
   18973:	c3                   	ret    

00018974 <apicGetAPICBase>:
apicGetAPICBase():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:29

uint32_t apicGetAPICBase(void)
{
   18974:	55                   	push   ebp
   18975:	89 e5                	mov    ebp,esp
   18977:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:31
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   1897a:	83 ec 04             	sub    esp,0x4
   1897d:	8d 45 f0             	lea    eax,[ebp-0x10]
   18980:	50                   	push   eax
   18981:	8d 45 f4             	lea    eax,[ebp-0xc]
   18984:	50                   	push   eax
   18985:	6a 1b                	push   0x1b
   18987:	e8 53 13 00 00       	call   19cdf <rdmsr32>
   1898c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:33

   return (eax & 0xfffff000);
   1898f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18992:	25 00 f0 ff ff       	and    eax,0xfffff000
/home/yogi/src/os/chrisOS/src/cpu/apic.c:34
}
   18997:	c9                   	leave  
   18998:	c3                   	ret    

00018999 <apicReadRegister>:
apicReadRegister():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:37

uint32_t apicReadRegister(uint32_t reg) 
{
   18999:	55                   	push   ebp
   1899a:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/cpu/apic.c:38
    return *((volatile uint32_t *) (kCPU[0].registerBase + reg));
   1899c:	8b 15 a4 98 12 00    	mov    edx,DWORD PTR ds:0x1298a4
   189a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   189a5:	01 d0                	add    eax,edx
   189a7:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/cpu/apic.c:39
}
   189a9:	5d                   	pop    ebp
   189aa:	c3                   	ret    

000189ab <apicWriteRegister>:
apicWriteRegister():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:41

void apicWriteRegister(uint32_t reg, uint32_t value) {
   189ab:	55                   	push   ebp
   189ac:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/cpu/apic.c:42
    *((volatile uint32_t *) (kCPU[0].registerBase + reg)) = value;
   189ae:	8b 15 a4 98 12 00    	mov    edx,DWORD PTR ds:0x1298a4
   189b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   189b7:	01 d0                	add    eax,edx
   189b9:	89 c2                	mov    edx,eax
   189bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   189be:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/cpu/apic.c:43
}
   189c0:	90                   	nop
   189c1:	5d                   	pop    ebp
   189c2:	c3                   	ret    

000189c3 <apicSetAPICBase>:
apicSetAPICBase():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:46

/* Set the physical address for local APIC registers */
void apicSetAPICBase(uintptr_t apic) {
   189c3:	55                   	push   ebp
   189c4:	89 e5                	mov    ebp,esp
   189c6:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:47
   uint32_t edx = 0;
   189c9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:48
   uint32_t eax = (apic & 0xfffff100) | IA32_APIC_BASE_MSR_ENABLE;
   189d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   189d3:	25 00 f1 ff ff       	and    eax,0xfffff100
   189d8:	80 cc 08             	or     ah,0x8
   189db:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/apic.c:54
 
#ifdef __PHYSICAL_MEMORY_EXTENSION__
   edx = (apic >> 32) & 0x0f;
#endif
 
   wrmsr32(IA32_APIC_BASE_MSR, eax, edx);
   189de:	83 ec 04             	sub    esp,0x4
   189e1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   189e4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   189e7:	6a 1b                	push   0x1b
   189e9:	e8 47 13 00 00       	call   19d35 <wrmsr32>
   189ee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:55
   kCPU[0].registerBase=apic;
   189f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   189f4:	a3 a4 98 12 00       	mov    ds:0x1298a4,eax
/home/yogi/src/os/chrisOS/src/cpu/apic.c:56
}
   189f9:	90                   	nop
   189fa:	c9                   	leave  
   189fb:	c3                   	ret    

000189fc <cpu_get_apic_base>:
cpu_get_apic_base():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:62
 
/**
 * Get the physical address of the APIC registers page
 * make sure you map it to virtual memory ;)
 */
uintptr_t cpu_get_apic_base() {
   189fc:	55                   	push   ebp
   189fd:	89 e5                	mov    ebp,esp
   189ff:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:64
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   18a02:	83 ec 04             	sub    esp,0x4
   18a05:	8d 45 f0             	lea    eax,[ebp-0x10]
   18a08:	50                   	push   eax
   18a09:	8d 45 f4             	lea    eax,[ebp-0xc]
   18a0c:	50                   	push   eax
   18a0d:	6a 1b                	push   0x1b
   18a0f:	e8 cb 12 00 00       	call   19cdf <rdmsr32>
   18a14:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:69
 
#ifdef __PHYSICAL_MEMORY_EXTENSION__
   return (eax & 0xfffff000) | ((edx & 0x0f) << 32);
#else
   return (eax & 0xfffff000);
   18a17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18a1a:	25 00 f0 ff ff       	and    eax,0xfffff000
/home/yogi/src/os/chrisOS/src/cpu/apic.c:71
#endif
}
   18a1f:	c9                   	leave  
   18a20:	c3                   	ret    

00018a21 <apicIsEnabled>:
apicIsEnabled():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:73

bool apicIsEnabled() {
   18a21:	55                   	push   ebp
   18a22:	89 e5                	mov    ebp,esp
   18a24:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:75
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   18a27:	83 ec 04             	sub    esp,0x4
   18a2a:	8d 45 f0             	lea    eax,[ebp-0x10]
   18a2d:	50                   	push   eax
   18a2e:	8d 45 f4             	lea    eax,[ebp-0xc]
   18a31:	50                   	push   eax
   18a32:	6a 1b                	push   0x1b
   18a34:	e8 a6 12 00 00       	call   19cdf <rdmsr32>
   18a39:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:76
   return (eax & (1<<11)) == (1<11);
   18a3c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:77
} 
   18a41:	c9                   	leave  
   18a42:	c3                   	ret    

00018a43 <apicEnable>:
apicEnable():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:79

void apicEnable() {
   18a43:	55                   	push   ebp
   18a44:	89 e5                	mov    ebp,esp
   18a46:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:81
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   18a49:	83 ec 04             	sub    esp,0x4
   18a4c:	8d 45 f0             	lea    eax,[ebp-0x10]
   18a4f:	50                   	push   eax
   18a50:	8d 45 f4             	lea    eax,[ebp-0xc]
   18a53:	50                   	push   eax
   18a54:	6a 1b                	push   0x1b
   18a56:	e8 84 12 00 00       	call   19cdf <rdmsr32>
   18a5b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:82
   eax |=IA32_APIC_BASE_MSR_ENABLE;
   18a5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18a61:	80 cc 08             	or     ah,0x8
   18a64:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/apic.c:83
   wrmsr32(IA32_APIC_BASE_MSR, eax, edx);
   18a67:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   18a6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18a6d:	83 ec 04             	sub    esp,0x4
   18a70:	52                   	push   edx
   18a71:	50                   	push   eax
   18a72:	6a 1b                	push   0x1b
   18a74:	e8 bc 12 00 00       	call   19d35 <wrmsr32>
   18a79:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:84
} 
   18a7c:	90                   	nop
   18a7d:	c9                   	leave  
   18a7e:	c3                   	ret    

00018a7f <apicDisable>:
apicDisable():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:86

void apicDisable() {
   18a7f:	55                   	push   ebp
   18a80:	89 e5                	mov    ebp,esp
   18a82:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:88
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   18a85:	83 ec 04             	sub    esp,0x4
   18a88:	8d 45 f0             	lea    eax,[ebp-0x10]
   18a8b:	50                   	push   eax
   18a8c:	8d 45 f4             	lea    eax,[ebp-0xc]
   18a8f:	50                   	push   eax
   18a90:	6a 1b                	push   0x1b
   18a92:	e8 48 12 00 00       	call   19cdf <rdmsr32>
   18a97:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:89
   eax&=!IA32_APIC_BASE_MSR_ENABLE;
   18a9a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:90
   wrmsr32(IA32_APIC_BASE_MSR, eax, edx);
   18aa1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   18aa4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18aa7:	83 ec 04             	sub    esp,0x4
   18aaa:	52                   	push   edx
   18aab:	50                   	push   eax
   18aac:	6a 1b                	push   0x1b
   18aae:	e8 82 12 00 00       	call   19d35 <wrmsr32>
   18ab3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:91
} 
   18ab6:	90                   	nop
   18ab7:	c9                   	leave  
   18ab8:	c3                   	ret    

00018ab9 <apicGetHZ>:
apicGetHZ():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:92
uint32_t apicGetHZ() {
   18ab9:	55                   	push   ebp
   18aba:	89 e5                	mov    ebp,esp
   18abc:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:94

    int timerTimeout=500;
   18abf:	c7 45 f4 f4 01 00 00 	mov    DWORD PTR [ebp-0xc],0x1f4
/home/yogi/src/os/chrisOS/src/cpu/apic.c:106
    apicWriteRegister(APIC_REGISTER_LVT_TIMER, APIC_TIMER_INT_DISABLE);
*/

    // Prepare the PIT to sleep for 10ms (10000µs)

    apicEnable();
   18ac6:	e8 78 ff ff ff       	call   18a43 <apicEnable>
/home/yogi/src/os/chrisOS/src/cpu/apic.c:107
    apicWriteRegister(APIC_REGISTER_SPURIOUS, 39+APIC_SW_ENABLE);
   18acb:	83 ec 08             	sub    esp,0x8
   18ace:	68 27 01 00 00       	push   0x127
   18ad3:	68 f0 00 00 00       	push   0xf0
   18ad8:	e8 ce fe ff ff       	call   189ab <apicWriteRegister>
   18add:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:109
    // Set APIC init counter to -1
    apicWriteRegister(APIC_REGISTER_LVT_TIMER, 32 | APIC_TIMER_MODE_ONESHOT );
   18ae0:	83 ec 08             	sub    esp,0x8
   18ae3:	6a 20                	push   0x20
   18ae5:	68 20 03 00 00       	push   0x320
   18aea:	e8 bc fe ff ff       	call   189ab <apicWriteRegister>
   18aef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:111
    // Tell APIC timer to use divider 16
    apicWriteRegister(APIC_REGISTER_TIMER_DIV, 0x11);
   18af2:	83 ec 08             	sub    esp,0x8
   18af5:	6a 11                	push   0x11
   18af7:	68 e0 03 00 00       	push   0x3e0
   18afc:	e8 aa fe ff ff       	call   189ab <apicWriteRegister>
   18b01:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:112
    apicWriteRegister(APIC_REGISTER_TIMER_INITIAL, 0xFFFFFFFF);
   18b04:	83 ec 08             	sub    esp,0x8
   18b07:	6a ff                	push   0xffffffff
   18b09:	68 80 03 00 00       	push   0x380
   18b0e:	e8 98 fe ff ff       	call   189ab <apicWriteRegister>
   18b13:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:115

    // Perform PIT-supported sleep
    wait(timerTimeout);
   18b16:	83 ec 0c             	sub    esp,0xc
   18b19:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   18b1c:	e8 79 fe 00 00       	call   2899a <wait>
   18b21:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:117

    apicWriteRegister(APIC_REGISTER_LVT_TIMER, APIC_TIMER_INT_DISABLE);
   18b24:	83 ec 08             	sub    esp,0x8
   18b27:	68 00 00 01 00       	push   0x10000
   18b2c:	68 20 03 00 00       	push   0x320
   18b31:	e8 75 fe ff ff       	call   189ab <apicWriteRegister>
   18b36:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:119
    // Now we know how often the APIC timer has ticked in 10ms
    uint64_t ticksPer10ms = 0xFFFFFFFF - apicReadRegister(APIC_REGISTER_TIMER_CURRENT);
   18b39:	83 ec 0c             	sub    esp,0xc
   18b3c:	68 90 03 00 00       	push   0x390
   18b41:	e8 53 fe ff ff       	call   18999 <apicReadRegister>
   18b46:	83 c4 10             	add    esp,0x10
   18b49:	f7 d0                	not    eax
   18b4b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   18b4e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:120
    ticksPer10ms=ticksPer10ms/(timerTimeout/10);
   18b55:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   18b58:	ba 67 66 66 66       	mov    edx,0x66666667
   18b5d:	89 c8                	mov    eax,ecx
   18b5f:	f7 ea                	imul   edx
   18b61:	c1 fa 02             	sar    edx,0x2
   18b64:	89 c8                	mov    eax,ecx
   18b66:	c1 f8 1f             	sar    eax,0x1f
   18b69:	29 c2                	sub    edx,eax
   18b6b:	89 d0                	mov    eax,edx
   18b6d:	99                   	cdq    
   18b6e:	52                   	push   edx
   18b6f:	50                   	push   eax
   18b70:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   18b73:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   18b76:	e8 65 ff 00 00       	call   28ae0 <__udivdi3>
   18b7b:	83 c4 10             	add    esp,0x10
   18b7e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   18b81:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/src/os/chrisOS/src/cpu/apic.c:124
    
    // Start timer as periodic on IRQ 0, divider 16, with the number of ticks we counted
//    apicWriteRegister(APIC_REGISTER_LVT_TIMER, 32  | APIC_TIMER_MODE_PERIODIC ); //clears the INT DISABLE pin
    apicWriteRegister(APIC_REGISTER_TIMER_DIV, 0x3);
   18b84:	83 ec 08             	sub    esp,0x8
   18b87:	6a 03                	push   0x3
   18b89:	68 e0 03 00 00       	push   0x3e0
   18b8e:	e8 18 fe ff ff       	call   189ab <apicWriteRegister>
   18b93:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:125
    apicWriteRegister(APIC_REGISTER_TIMER_INITIAL, ticksPer10ms);
   18b96:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18b99:	83 ec 08             	sub    esp,0x8
   18b9c:	50                   	push   eax
   18b9d:	68 80 03 00 00       	push   0x380
   18ba2:	e8 04 fe ff ff       	call   189ab <apicWriteRegister>
   18ba7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:126
    return ticksPer10ms;
   18baa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/chrisOS/src/cpu/apic.c:127
}
   18bad:	c9                   	leave  
   18bae:	c3                   	ret    

00018baf <tscGetTicksPerSecond>:
tscGetTicksPerSecond():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:130

int tscGetTicksPerSecond()
{
   18baf:	55                   	push   ebp
   18bb0:	89 e5                	mov    ebp,esp
   18bb2:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:131
    uint64_t ticksBefore=rdtsc();
   18bb5:	e8 36 fd ff ff       	call   188f0 <rdtsc>
   18bba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   18bbd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/chrisOS/src/cpu/apic.c:132
    wait(1000);
   18bc0:	83 ec 0c             	sub    esp,0xc
   18bc3:	68 e8 03 00 00       	push   0x3e8
   18bc8:	e8 cd fd 00 00       	call   2899a <wait>
   18bcd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:133
    return rdtsc()-ticksBefore;
   18bd0:	e8 1b fd ff ff       	call   188f0 <rdtsc>
   18bd5:	89 c2                	mov    edx,eax
   18bd7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18bda:	29 c2                	sub    edx,eax
   18bdc:	89 d0                	mov    eax,edx
/home/yogi/src/os/chrisOS/src/cpu/apic.c:134
   18bde:	c9                   	leave  
   18bdf:	c3                   	ret    

00018be0 <bitsSet>:
bitsSet():
/home/yogi/src/os/chrisOS/src/cpu/bits.c:5
#include <stdint.h>
#include <stdbool.h>

bool bitsSet(volatile uint32_t* array, uint32_t bit)
{
   18be0:	55                   	push   ebp
   18be1:	89 e5                	mov    ebp,esp
   18be3:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/bits.c:6
    int lRetVal=0;
   18be6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:7
    __asm__ volatile ("bts [%[array]],%[bit]\nmov eax,0\nsetc al\n" : [array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
   18bed:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18bf0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18bf3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18bf6:	0f ab 02             	bts    DWORD PTR [edx],eax
   18bf9:	b8 00 00 00 00       	mov    eax,0x0
   18bfe:	0f 92 c0             	setb   al
   18c01:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/cpu/bits.c:8
    return lRetVal;
   18c04:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   18c08:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOS/src/cpu/bits.c:9
}
   18c0b:	c9                   	leave  
   18c0c:	c3                   	ret    

00018c0d <bitsReset>:
bitsReset():
/home/yogi/src/os/chrisOS/src/cpu/bits.c:11
bool bitsReset(volatile uint32_t* array, uint32_t bit)
{
   18c0d:	55                   	push   ebp
   18c0e:	89 e5                	mov    ebp,esp
   18c10:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/bits.c:12
    int lRetVal=0;
   18c13:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:13
    __asm__ volatile ("btr [%[array]],%[bit]\nmov eax,0\nsetc al\n" : [array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
   18c1a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18c1d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18c20:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18c23:	0f b3 02             	btr    DWORD PTR [edx],eax
   18c26:	b8 00 00 00 00       	mov    eax,0x0
   18c2b:	0f 92 c0             	setb   al
   18c2e:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/cpu/bits.c:14
    return lRetVal;
   18c31:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   18c35:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOS/src/cpu/bits.c:15
}
   18c38:	c9                   	leave  
   18c39:	c3                   	ret    

00018c3a <bitsTest>:
bitsTest():
/home/yogi/src/os/chrisOS/src/cpu/bits.c:17
bool bitsTest(volatile uint32_t* array, uint32_t bit)
{
   18c3a:	55                   	push   ebp
   18c3b:	89 e5                	mov    ebp,esp
   18c3d:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/bits.c:18
    int lRetVal=0;
   18c40:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:19
    __asm__ volatile ("bt [%[array]],%[bit]\nmov eax,0\nsetc al\n" :[array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
   18c47:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18c4a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18c4d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18c50:	0f a3 02             	bt     DWORD PTR [edx],eax
   18c53:	b8 00 00 00 00       	mov    eax,0x0
   18c58:	0f 92 c0             	setb   al
   18c5b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/cpu/bits.c:20
    return lRetVal;
   18c5e:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   18c62:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOS/src/cpu/bits.c:21
}
   18c65:	c9                   	leave  
   18c66:	c3                   	ret    

00018c67 <bitsScanF>:
bitsScanF():
/home/yogi/src/os/chrisOS/src/cpu/bits.c:24

int bitsScanF(volatile uint32_t* array)
{
   18c67:	55                   	push   ebp
   18c68:	89 e5                	mov    ebp,esp
   18c6a:	53                   	push   ebx
   18c6b:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/bits.c:25
    int lRetVal=0;
   18c6e:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:26
    bool lErr=false;
   18c75:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:27
    __asm__ volatile ("bsf %[ret],[%[array]]\nsetz cl\n" : [ret] "=b" (lRetVal), [lErr] "=c" (lErr) : [array] "m" (*array));
   18c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18c7c:	0f bc 18             	bsf    ebx,DWORD PTR [eax]
   18c7f:	0f 94 c1             	sete   cl
   18c82:	89 c8                	mov    eax,ecx
   18c84:	89 da                	mov    edx,ebx
   18c86:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   18c89:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/cpu/bits.c:28
    if (lErr==false)
   18c8c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   18c90:	83 f0 01             	xor    eax,0x1
   18c93:	84 c0                	test   al,al
   18c95:	74 05                	je     18c9c <bitsScanF+0x35>
/home/yogi/src/os/chrisOS/src/cpu/bits.c:29
        return lRetVal;
   18c97:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   18c9a:	eb 05                	jmp    18ca1 <bitsScanF+0x3a>
/home/yogi/src/os/chrisOS/src/cpu/bits.c:31
    else
        return -1;
   18c9c:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/cpu/bits.c:32
   18ca1:	83 c4 10             	add    esp,0x10
   18ca4:	5b                   	pop    ebx
   18ca5:	5d                   	pop    ebp
   18ca6:	c3                   	ret    
   18ca7:	90                   	nop

00018ca8 <getNonKernelCodeGDTIndex>:
getNonKernelCodeGDTIndex():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:11
extern sGDT* rmGdt;
extern sGDT* bootGdt;
extern uint32_t* kGDTSlotAvailableInd;

uint16_t HIGH_CODE_SECTION getNonKernelCodeGDTIndex()
{
   18ca8:	55                   	push   ebp
   18ca9:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:12
    return 7<<3;
   18cab:	b8 38 00 00 00       	mov    eax,0x38
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:13
}
   18cb0:	5d                   	pop    ebp
   18cb1:	c3                   	ret    

00018cb2 <getNonKernelDataGDTIndex>:
getNonKernelDataGDTIndex():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:16

uint16_t HIGH_CODE_SECTION getNonKernelDataGDTIndex()
{
   18cb2:	55                   	push   ebp
   18cb3:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:17
    return 6<<3;
   18cb5:	b8 30 00 00 00       	mov    eax,0x30
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:18
}
   18cba:	5d                   	pop    ebp
   18cbb:	c3                   	ret    

00018cbc <getKernelCodeGDTIndex>:
getKernelCodeGDTIndex():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:21

uint16_t HIGH_CODE_SECTION getKernelCodeGDTIndex()
{
   18cbc:	55                   	push   ebp
   18cbd:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:22
    return 4<<3;
   18cbf:	b8 20 00 00 00       	mov    eax,0x20
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:23
}
   18cc4:	5d                   	pop    ebp
   18cc5:	c3                   	ret    

00018cc6 <getKernelDataGDTIndex>:
getKernelDataGDTIndex():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:26

uint16_t HIGH_CODE_SECTION getKernelDataGDTIndex()
{
   18cc6:	55                   	push   ebp
   18cc7:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:27
    return 2<<3;
   18cc9:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:28
}
   18cce:	5d                   	pop    ebp
   18ccf:	c3                   	ret    

00018cd0 <getNewGDTEntry>:
getNewGDTEntry():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:31

sGDT* HIGH_CODE_SECTION getNewGDTEntry()
{
   18cd0:	55                   	push   ebp
   18cd1:	89 e5                	mov    ebp,esp
   18cd3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:32
   int cnt=0,slot=0;
   18cd6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   18cdd:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:33
   uint32_t* ptr=kGDTSlotAvailableInd;
   18ce4:	a1 2c 99 12 00       	mov    eax,ds:0x12992c
   18ce9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:34
    slot=bitsScanF(ptr);
   18cec:	83 ec 0c             	sub    esp,0xc
   18cef:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   18cf2:	e8 70 ff ff ff       	call   18c67 <bitsScanF>
   18cf7:	83 c4 10             	add    esp,0x10
   18cfa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:35
   sGDT* gdt=bootGdt+slot; 
   18cfd:	a1 84 99 12 00       	mov    eax,ds:0x129984
   18d02:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   18d05:	c1 e2 03             	shl    edx,0x3
   18d08:	01 d0                	add    eax,edx
   18d0a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:36
   return gdt;
   18d0d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:37
}
   18d10:	c9                   	leave  
   18d11:	c3                   	ret    

00018d12 <gdtEntry>:
gdtEntry():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:41

//Create/modify entries in the protected mode GDT
void HIGH_CODE_SECTION gdtEntry(int entryNo, int base, int limit, char access, char flags,bool inUse)
{
   18d12:	55                   	push   ebp
   18d13:	89 e5                	mov    ebp,esp
   18d15:	83 ec 18             	sub    esp,0x18
   18d18:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
   18d1b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
   18d1e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
   18d21:	88 4d f4             	mov    BYTE PTR [ebp-0xc],cl
   18d24:	88 55 f0             	mov    BYTE PTR [ebp-0x10],dl
   18d27:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:42
    bootGdt[entryNo].base_low        = base & 0xFFFF;
   18d2a:	a1 84 99 12 00       	mov    eax,ds:0x129984
   18d2f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18d32:	c1 e2 03             	shl    edx,0x3
   18d35:	01 d0                	add    eax,edx
   18d37:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18d3a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:43
    bootGdt[entryNo].base_middle     = (base >> 16) & 0xFF;
   18d3e:	a1 84 99 12 00       	mov    eax,ds:0x129984
   18d43:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18d46:	c1 e2 03             	shl    edx,0x3
   18d49:	01 d0                	add    eax,edx
   18d4b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18d4e:	c1 fa 10             	sar    edx,0x10
   18d51:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:44
    bootGdt[entryNo].base_high       = (base >> 24) & 0xFF;
   18d54:	a1 84 99 12 00       	mov    eax,ds:0x129984
   18d59:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18d5c:	c1 e2 03             	shl    edx,0x3
   18d5f:	01 d0                	add    eax,edx
   18d61:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18d64:	c1 ea 18             	shr    edx,0x18
   18d67:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:45
    bootGdt[entryNo].limit_low       = limit & 0xFFFF;
   18d6a:	a1 84 99 12 00       	mov    eax,ds:0x129984
   18d6f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18d72:	c1 e2 03             	shl    edx,0x3
   18d75:	01 d0                	add    eax,edx
   18d77:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   18d7a:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:46
    bootGdt[entryNo].flags_and_limit = flags | (((limit >> 8) & 0xF));
   18d7d:	a1 84 99 12 00       	mov    eax,ds:0x129984
   18d82:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18d85:	c1 e2 03             	shl    edx,0x3
   18d88:	01 c2                	add    edx,eax
   18d8a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18d8d:	c1 f8 08             	sar    eax,0x8
   18d90:	83 e0 0f             	and    eax,0xf
   18d93:	0a 45 f0             	or     al,BYTE PTR [ebp-0x10]
   18d96:	88 42 06             	mov    BYTE PTR [edx+0x6],al
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:47
    bootGdt[entryNo].access          = access | 0x10;
   18d99:	a1 84 99 12 00       	mov    eax,ds:0x129984
   18d9e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18da1:	c1 e2 03             	shl    edx,0x3
   18da4:	01 d0                	add    eax,edx
   18da6:	0f b6 55 f4          	movzx  edx,BYTE PTR [ebp-0xc]
   18daa:	83 ca 10             	or     edx,0x10
   18dad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:48
    if (inUse)
   18db0:	80 7d ec 00          	cmp    BYTE PTR [ebp-0x14],0x0
   18db4:	74 17                	je     18dcd <gdtEntry+0xbb>
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:49
        bitsReset(kGDTSlotAvailableInd,entryNo);
   18db6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18db9:	a1 2c 99 12 00       	mov    eax,ds:0x12992c
   18dbe:	83 ec 08             	sub    esp,0x8
   18dc1:	52                   	push   edx
   18dc2:	50                   	push   eax
   18dc3:	e8 45 fe ff ff       	call   18c0d <bitsReset>
   18dc8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:52
    else
        bitsSet(kGDTSlotAvailableInd,entryNo);
}
   18dcb:	eb 15                	jmp    18de2 <gdtEntry+0xd0>
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:51
    bootGdt[entryNo].flags_and_limit = flags | (((limit >> 8) & 0xF));
    bootGdt[entryNo].access          = access | 0x10;
    if (inUse)
        bitsReset(kGDTSlotAvailableInd,entryNo);
    else
        bitsSet(kGDTSlotAvailableInd,entryNo);
   18dcd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18dd0:	a1 2c 99 12 00       	mov    eax,ds:0x12992c
   18dd5:	83 ec 08             	sub    esp,0x8
   18dd8:	52                   	push   edx
   18dd9:	50                   	push   eax
   18dda:	e8 01 fe ff ff       	call   18be0 <bitsSet>
   18ddf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:52
}
   18de2:	90                   	nop
   18de3:	c9                   	leave  
   18de4:	c3                   	ret    

00018de5 <gdtEntryRM>:
gdtEntryRM():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:56

//Create entries in the real mode GDT table
void HIGH_CODE_SECTION gdtEntryRM(int entryNo, int base, int limit, char access, char flags)
{
   18de5:	55                   	push   ebp
   18de6:	89 e5                	mov    ebp,esp
   18de8:	83 ec 08             	sub    esp,0x8
   18deb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   18dee:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   18df1:	88 55 fc             	mov    BYTE PTR [ebp-0x4],dl
   18df4:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:57
    rmGdt[entryNo].base_low        = base & 0xFFFF;
   18df7:	a1 80 99 12 00       	mov    eax,ds:0x129980
   18dfc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18dff:	c1 e2 03             	shl    edx,0x3
   18e02:	01 d0                	add    eax,edx
   18e04:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18e07:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:58
    rmGdt[entryNo].base_middle     = base >> 16 & 0xFF;
   18e0b:	a1 80 99 12 00       	mov    eax,ds:0x129980
   18e10:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18e13:	c1 e2 03             	shl    edx,0x3
   18e16:	01 d0                	add    eax,edx
   18e18:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18e1b:	c1 fa 10             	sar    edx,0x10
   18e1e:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:59
    rmGdt[entryNo].base_high       = base >> 24 & 0xFF;
   18e21:	a1 80 99 12 00       	mov    eax,ds:0x129980
   18e26:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18e29:	c1 e2 03             	shl    edx,0x3
   18e2c:	01 d0                	add    eax,edx
   18e2e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18e31:	c1 ea 18             	shr    edx,0x18
   18e34:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:60
    rmGdt[entryNo].limit_low       = limit & 0xFFFF;
   18e37:	a1 80 99 12 00       	mov    eax,ds:0x129980
   18e3c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18e3f:	c1 e2 03             	shl    edx,0x3
   18e42:	01 d0                	add    eax,edx
   18e44:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   18e47:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:61
    rmGdt[entryNo].flags_and_limit = flags | (limit >> 8 & 0xF);
   18e4a:	a1 80 99 12 00       	mov    eax,ds:0x129980
   18e4f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18e52:	c1 e2 03             	shl    edx,0x3
   18e55:	01 c2                	add    edx,eax
   18e57:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18e5a:	c1 f8 08             	sar    eax,0x8
   18e5d:	83 e0 0f             	and    eax,0xf
   18e60:	0a 45 f8             	or     al,BYTE PTR [ebp-0x8]
   18e63:	88 42 06             	mov    BYTE PTR [edx+0x6],al
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:62
    rmGdt[entryNo].access          = access | 0x10;
   18e66:	a1 80 99 12 00       	mov    eax,ds:0x129980
   18e6b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18e6e:	c1 e2 03             	shl    edx,0x3
   18e71:	01 d0                	add    eax,edx
   18e73:	0f b6 55 fc          	movzx  edx,BYTE PTR [ebp-0x4]
   18e77:	83 ca 10             	or     edx,0x10
   18e7a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:63
}
   18e7d:	90                   	nop
   18e7e:	c9                   	leave  
   18e7f:	c3                   	ret    

00018e80 <identifyCPUFeatures>:
identifyCPUFeatures():
/home/yogi/src/os/chrisOS/src/cpu/identify_cpu_features.c:8

extern cpuid_features_t kCPUFeatures;


void identifyCPUFeatures(cpuid_features_t* cpuFeatures)
{
   18e80:	55                   	push   ebp
   18e81:	89 e5                	mov    ebp,esp
   18e83:	53                   	push   ebx
   18e84:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/identify_cpu_features.c:11
    uint32_t eax, ebx, ecx, edx;

    __cpuid(1, eax, ebx, cpuFeatures->cpuid_feature_bits_2.cpuid_feature_bits_ecx_reg, cpuFeatures->cpuid_feature_bits.cpuid_features_edx_reg);
   18e87:	b8 01 00 00 00       	mov    eax,0x1
   18e8c:	0f a2                	cpuid  
   18e8e:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   18e91:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
   18e94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18e97:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
   18e9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18e9d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/identify_cpu_features.c:12
    __cpuid(7, eax, cpuFeatures->cpuid_extended_feature_bits_3.cpuid_extended_feature_bits_ebx_reg , ecx, edx);
   18e9f:	b8 07 00 00 00       	mov    eax,0x7
   18ea4:	0f a2                	cpuid  
   18ea6:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   18ea9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18eac:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
   18eaf:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   18eb2:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/src/os/chrisOS/src/cpu/identify_cpu_features.c:13
}
   18eb5:	90                   	nop
   18eb6:	83 c4 10             	add    esp,0x10
   18eb9:	5b                   	pop    ebx
   18eba:	5d                   	pop    ebp
   18ebb:	c3                   	ret    

00018ebc <idt_set_gate>:
idt_set_gate():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:10
//extern void idt_load();//Defined in CPU.h

/* Use this function to set an entry in the IDT. Alot simpler
*  than twiddling with the GDT ;) */
void idt_set_gate(struct idt_entry *idt, unsigned short sel, uint32_t base, unsigned char flags)
{
   18ebc:	55                   	push   ebp
   18ebd:	89 e5                	mov    ebp,esp
   18ebf:	83 ec 08             	sub    esp,0x8
   18ec2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18ec5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   18ec8:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   18ecc:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/src/cpu/idt.c:11
  idt->base_lo = base & 0xFFFF;
   18ecf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18ed2:	89 c2                	mov    edx,eax
   18ed4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18ed7:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/cpu/idt.c:12
  idt->sel = sel;
   18eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18edd:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   18ee1:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/src/os/chrisOS/src/cpu/idt.c:13
  idt->flags = flags | 0x80;
   18ee5:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   18ee9:	83 c8 80             	or     eax,0xffffff80
   18eec:	89 c2                	mov    edx,eax
   18eee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18ef1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/src/os/chrisOS/src/cpu/idt.c:14
  idt->base_hi = (base >> 16) & 0xFFFF;}
   18ef4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18ef7:	c1 e8 10             	shr    eax,0x10
   18efa:	89 c2                	mov    edx,eax
   18efc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18eff:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
   18f03:	90                   	nop
   18f04:	c9                   	leave  
   18f05:	c3                   	ret    

00018f06 <idt_install>:
idt_install():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:18

/* Installs the IDT */
void idt_install(struct idt_ptr* idtp)
{
   18f06:	55                   	push   ebp
   18f07:	89 e5                	mov    ebp,esp
   18f09:	57                   	push   edi
   18f0a:	56                   	push   esi
   18f0b:	53                   	push   ebx
   18f0c:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/cpu/idt.c:20
    /* Sets the special IDT pointer up, just like in 'gdt.c' */
    idtp->limit = (sizeof (struct idt_entry) * 256) - 1;
   18f0f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18f12:	66 c7 01 ff 07       	mov    WORD PTR [ecx],0x7ff
/home/yogi/src/os/chrisOS/src/cpu/idt.c:21
    idtp->base = (int)IDT_TABLE_ADDRESS;
   18f17:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18f1a:	c7 41 02 00 30 16 00 	mov    DWORD PTR [ecx+0x2],0x163000
/home/yogi/src/os/chrisOS/src/cpu/idt.c:29
    //memset(&idt, 0, sizeof(struct idt_entry) * 256);

    /* Add any new ISRs to the IDT here using idt_set_gate */

    /* Points the processor's internal register to the new IDT */
    idt_load((uint64_t)((uint64_t)(idtp->limit)<<32 | idtp->base));
   18f21:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18f24:	0f b7 31             	movzx  esi,WORD PTR [ecx]
   18f27:	0f b7 ce             	movzx  ecx,si
   18f2a:	bb 00 00 00 00       	mov    ebx,0x0
   18f2f:	89 cb                	mov    ebx,ecx
   18f31:	b9 00 00 00 00       	mov    ecx,0x0
   18f36:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
   18f39:	8b 76 02             	mov    esi,DWORD PTR [esi+0x2]
   18f3c:	bf 00 00 00 00       	mov    edi,0x0
   18f41:	89 c8                	mov    eax,ecx
   18f43:	09 f0                	or     eax,esi
   18f45:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
   18f48:	89 d8                	mov    eax,ebx
   18f4a:	09 f8                	or     eax,edi
   18f4c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
   18f4f:	83 ec 08             	sub    esp,0x8
   18f52:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   18f55:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   18f58:	e8 03 82 fe ff       	call   1160 <idt_load>
   18f5d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:30
}
   18f60:	90                   	nop
   18f61:	8d 65 f4             	lea    esp,[ebp-0xc]
   18f64:	5b                   	pop    ebx
   18f65:	5e                   	pop    esi
   18f66:	5f                   	pop    edi
   18f67:	5d                   	pop    ebp
   18f68:	c3                   	ret    

00018f69 <idt_init>:
idt_init():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:33

void idt_init(struct idt_ptr* idtp, int remap_offset)
{
   18f69:	55                   	push   ebp
   18f6a:	89 e5                	mov    ebp,esp
   18f6c:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/idt.c:36
    //CLR 05/02/2016 - Left off here, ITD stuff isn't working, have an endless loop in cpuFunc.s idt_load
/* setting up the exception handlers and timer, keyboard ISRs */
    struct idt_entry* idtTable=(struct idt_entry*)IDT_TABLE_ADDRESS;
   18f6f:	c7 45 f0 00 30 16 00 	mov    DWORD PTR [ebp-0x10],0x163000
/home/yogi/src/os/chrisOS/src/cpu/idt.c:37
    idt_set_gate (&idtTable[0], 0x08, (int)&_isr_00_wrapper, ACS_INT); //Move this out of the way of the exception handlers
   18f76:	b8 20 00 01 00       	mov    eax,0x10020
   18f7b:	68 8e 00 00 00       	push   0x8e
   18f80:	50                   	push   eax
   18f81:	6a 08                	push   0x8
   18f83:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   18f86:	e8 31 ff ff ff       	call   18ebc <idt_set_gate>
   18f8b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:38
    idt_set_gate (&idtTable[0+remap_offset], 0x08, (int)&_irq0_handler, ACS_INT); //Move this out of the way of the exception handlers
   18f8e:	b9 99 05 01 00       	mov    ecx,0x10599
   18f93:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18f96:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18f9d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18fa0:	01 d0                	add    eax,edx
   18fa2:	68 8e 00 00 00       	push   0x8e
   18fa7:	51                   	push   ecx
   18fa8:	6a 08                	push   0x8
   18faa:	50                   	push   eax
   18fab:	e8 0c ff ff ff       	call   18ebc <idt_set_gate>
   18fb0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:39
    idt_set_gate (&idtTable[1+remap_offset], 0x08, (int)&_isr_01_wrapper, ACS_INT); //move this out of the way of the exception handlers
   18fb3:	b9 e0 05 01 00       	mov    ecx,0x105e0
   18fb8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18fbb:	83 c0 01             	add    eax,0x1
   18fbe:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18fc5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18fc8:	01 d0                	add    eax,edx
   18fca:	68 8e 00 00 00       	push   0x8e
   18fcf:	51                   	push   ecx
   18fd0:	6a 08                	push   0x8
   18fd2:	50                   	push   eax
   18fd3:	e8 e4 fe ff ff       	call   18ebc <idt_set_gate>
   18fd8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:40
    idt_set_gate (&idtTable[1], 0x08, (int)&_isr_31_wrapper, ACS_INT); //move this out of the way of the exception handlers
   18fdb:	ba b6 04 01 00       	mov    edx,0x104b6
   18fe0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18fe3:	83 c0 08             	add    eax,0x8
   18fe6:	68 8e 00 00 00       	push   0x8e
   18feb:	52                   	push   edx
   18fec:	6a 08                	push   0x8
   18fee:	50                   	push   eax
   18fef:	e8 c8 fe ff ff       	call   18ebc <idt_set_gate>
   18ff4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:41
    idt_set_gate (&idtTable[2], 0x08, (int)&_isr_02_wrapper, ACS_INT);
   18ff7:	ba 3c 00 01 00       	mov    edx,0x1003c
   18ffc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18fff:	83 c0 10             	add    eax,0x10
   19002:	68 8e 00 00 00       	push   0x8e
   19007:	52                   	push   edx
   19008:	6a 08                	push   0x8
   1900a:	50                   	push   eax
   1900b:	e8 ac fe ff ff       	call   18ebc <idt_set_gate>
   19010:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:42
    idt_set_gate (&idtTable[3], 0x08, (int)&_isr_03_wrapper, ACS_INT);
   19013:	ba 58 00 01 00       	mov    edx,0x10058
   19018:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1901b:	83 c0 18             	add    eax,0x18
   1901e:	68 8e 00 00 00       	push   0x8e
   19023:	52                   	push   edx
   19024:	6a 08                	push   0x8
   19026:	50                   	push   eax
   19027:	e8 90 fe ff ff       	call   18ebc <idt_set_gate>
   1902c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:43
    idt_set_gate (&idtTable[4], 0x08, (int)&_isr_04_wrapper, ACS_INT);
   1902f:	ba 68 00 01 00       	mov    edx,0x10068
   19034:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19037:	83 c0 20             	add    eax,0x20
   1903a:	68 8e 00 00 00       	push   0x8e
   1903f:	52                   	push   edx
   19040:	6a 08                	push   0x8
   19042:	50                   	push   eax
   19043:	e8 74 fe ff ff       	call   18ebc <idt_set_gate>
   19048:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:44
    idt_set_gate (&idtTable[5], 0x08, (int)&_isr_05_wrapper, ACS_INT);
   1904b:	ba 84 00 01 00       	mov    edx,0x10084
   19050:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19053:	83 c0 28             	add    eax,0x28
   19056:	68 8e 00 00 00       	push   0x8e
   1905b:	52                   	push   edx
   1905c:	6a 08                	push   0x8
   1905e:	50                   	push   eax
   1905f:	e8 58 fe ff ff       	call   18ebc <idt_set_gate>
   19064:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:45
    idt_set_gate (&idtTable[0x6], 0x08, (int)&_isr_06_wrapper, ACS_INT);    //Invalid Opcode
   19067:	ba a0 00 01 00       	mov    edx,0x100a0
   1906c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1906f:	83 c0 30             	add    eax,0x30
   19072:	68 8e 00 00 00       	push   0x8e
   19077:	52                   	push   edx
   19078:	6a 08                	push   0x8
   1907a:	50                   	push   eax
   1907b:	e8 3c fe ff ff       	call   18ebc <idt_set_gate>
   19080:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:46
    idt_set_gate (&idtTable[0x7], 0x08, (int)&_isr_07_wrapper, ACS_INT);
   19083:	ba bc 00 01 00       	mov    edx,0x100bc
   19088:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1908b:	83 c0 38             	add    eax,0x38
   1908e:	68 8e 00 00 00       	push   0x8e
   19093:	52                   	push   edx
   19094:	6a 08                	push   0x8
   19096:	50                   	push   eax
   19097:	e8 20 fe ff ff       	call   18ebc <idt_set_gate>
   1909c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:47
    idt_set_gate (&idtTable[0x8], 0x08, (int)&_isr_08_wrapper, ACS_INT);   //Double Fault
   1909f:	ba d8 00 01 00       	mov    edx,0x100d8
   190a4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   190a7:	83 c0 40             	add    eax,0x40
   190aa:	68 8e 00 00 00       	push   0x8e
   190af:	52                   	push   edx
   190b0:	6a 08                	push   0x8
   190b2:	50                   	push   eax
   190b3:	e8 04 fe ff ff       	call   18ebc <idt_set_gate>
   190b8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:48
    idt_set_gate (&idtTable[0x9], 0x08, (int)&_isr_09_wrapper, ACS_INT);
   190bb:	ba 05 01 01 00       	mov    edx,0x10105
   190c0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   190c3:	83 c0 48             	add    eax,0x48
   190c6:	68 8e 00 00 00       	push   0x8e
   190cb:	52                   	push   edx
   190cc:	6a 08                	push   0x8
   190ce:	50                   	push   eax
   190cf:	e8 e8 fd ff ff       	call   18ebc <idt_set_gate>
   190d4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:49
    idt_set_gate (&idtTable[0xa], 0x08, (int)&_isr_10_wrapper, ACS_INT);
   190d7:	ba 1e 01 01 00       	mov    edx,0x1011e
   190dc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   190df:	83 c0 50             	add    eax,0x50
   190e2:	68 8e 00 00 00       	push   0x8e
   190e7:	52                   	push   edx
   190e8:	6a 08                	push   0x8
   190ea:	50                   	push   eax
   190eb:	e8 cc fd ff ff       	call   18ebc <idt_set_gate>
   190f0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:50
    idt_set_gate (&idtTable[0xb], 0x08, (int)&_isr_11_wrapper, ACS_INT);
   190f3:	ba 37 01 01 00       	mov    edx,0x10137
   190f8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   190fb:	83 c0 58             	add    eax,0x58
   190fe:	68 8e 00 00 00       	push   0x8e
   19103:	52                   	push   edx
   19104:	6a 08                	push   0x8
   19106:	50                   	push   eax
   19107:	e8 b0 fd ff ff       	call   18ebc <idt_set_gate>
   1910c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:51
    idt_set_gate (&idtTable[0xc], 0x08, (int)&_isr_12_wrapper, ACS_INT);
   1910f:	ba 50 01 01 00       	mov    edx,0x10150
   19114:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19117:	83 c0 60             	add    eax,0x60
   1911a:	68 8e 00 00 00       	push   0x8e
   1911f:	52                   	push   edx
   19120:	6a 08                	push   0x8
   19122:	50                   	push   eax
   19123:	e8 94 fd ff ff       	call   18ebc <idt_set_gate>
   19128:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:52
    idt_set_gate (&idtTable[0xd/*+remap_offset*/], 0x08, (int)&_isr_13_wrapper, ACS_INT);
   1912b:	ba 69 01 01 00       	mov    edx,0x10169
   19130:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19133:	83 c0 68             	add    eax,0x68
   19136:	68 8e 00 00 00       	push   0x8e
   1913b:	52                   	push   edx
   1913c:	6a 08                	push   0x8
   1913e:	50                   	push   eax
   1913f:	e8 78 fd ff ff       	call   18ebc <idt_set_gate>
   19144:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:53
    idt_set_gate (&idtTable[0xe/*+remap_offset*/], 0x08, (int)&_isr_14_wrapper, ACS_INT);   //paging exception
   19147:	ba 83 01 01 00       	mov    edx,0x10183
   1914c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1914f:	83 c0 70             	add    eax,0x70
   19152:	68 8e 00 00 00       	push   0x8e
   19157:	52                   	push   edx
   19158:	6a 08                	push   0x8
   1915a:	50                   	push   eax
   1915b:	e8 5c fd ff ff       	call   18ebc <idt_set_gate>
   19160:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:54
    idt_set_gate (&idtTable[0xf], 0x08, (int)&_isr_15_wrapper, ACS_INT);
   19163:	ba f6 02 01 00       	mov    edx,0x102f6
   19168:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1916b:	83 c0 78             	add    eax,0x78
   1916e:	68 8e 00 00 00       	push   0x8e
   19173:	52                   	push   edx
   19174:	6a 08                	push   0x8
   19176:	50                   	push   eax
   19177:	e8 40 fd ff ff       	call   18ebc <idt_set_gate>
   1917c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:55
    idt_set_gate (&idtTable[0x10], 0x08, (int)&_isr_16_wrapper, ACS_INT);
   1917f:	ba 12 03 01 00       	mov    edx,0x10312
   19184:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19187:	83 e8 80             	sub    eax,0xffffff80
   1918a:	68 8e 00 00 00       	push   0x8e
   1918f:	52                   	push   edx
   19190:	6a 08                	push   0x8
   19192:	50                   	push   eax
   19193:	e8 24 fd ff ff       	call   18ebc <idt_set_gate>
   19198:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:56
    idt_set_gate (&idtTable[0x11], 0x08, (int)&_isr_17_wrapper, ACS_INT);
   1919b:	ba 2e 03 01 00       	mov    edx,0x1032e
   191a0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   191a3:	05 88 00 00 00       	add    eax,0x88
   191a8:	68 8e 00 00 00       	push   0x8e
   191ad:	52                   	push   edx
   191ae:	6a 08                	push   0x8
   191b0:	50                   	push   eax
   191b1:	e8 06 fd ff ff       	call   18ebc <idt_set_gate>
   191b6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:57
    idt_set_gate (&idtTable[0x12], 0x08, (int)&_isr_18_wrapper, ACS_INT);
   191b9:	ba 4a 03 01 00       	mov    edx,0x1034a
   191be:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   191c1:	05 90 00 00 00       	add    eax,0x90
   191c6:	68 8e 00 00 00       	push   0x8e
   191cb:	52                   	push   edx
   191cc:	6a 08                	push   0x8
   191ce:	50                   	push   eax
   191cf:	e8 e8 fc ff ff       	call   18ebc <idt_set_gate>
   191d4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:58
    idt_set_gate (&idtTable[0x13], 0x08, (int)&_isr_19_wrapper, ACS_INT);
   191d7:	ba 66 03 01 00       	mov    edx,0x10366
   191dc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   191df:	05 98 00 00 00       	add    eax,0x98
   191e4:	68 8e 00 00 00       	push   0x8e
   191e9:	52                   	push   edx
   191ea:	6a 08                	push   0x8
   191ec:	50                   	push   eax
   191ed:	e8 ca fc ff ff       	call   18ebc <idt_set_gate>
   191f2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:59
    idt_set_gate (&idtTable[0x14+remap_offset], 0x08, (int)&_isr_20_wrapper, ACS_INT);   
   191f5:	b9 82 03 01 00       	mov    ecx,0x10382
   191fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   191fd:	83 c0 14             	add    eax,0x14
   19200:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   19207:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1920a:	01 d0                	add    eax,edx
   1920c:	68 8e 00 00 00       	push   0x8e
   19211:	51                   	push   ecx
   19212:	6a 08                	push   0x8
   19214:	50                   	push   eax
   19215:	e8 a2 fc ff ff       	call   18ebc <idt_set_gate>
   1921a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:60
    idt_set_gate (&idtTable[0x15+remap_offset], 0x08, (int)&_isr_21_wrapper, ACS_INT);  //leave this alone because this is the initially remapped keyboard irq
   1921d:	b9 9e 03 01 00       	mov    ecx,0x1039e
   19222:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19225:	83 c0 15             	add    eax,0x15
   19228:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   1922f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19232:	01 d0                	add    eax,edx
   19234:	68 8e 00 00 00       	push   0x8e
   19239:	51                   	push   ecx
   1923a:	6a 08                	push   0x8
   1923c:	50                   	push   eax
   1923d:	e8 7a fc ff ff       	call   18ebc <idt_set_gate>
   19242:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:61
    idt_set_gate (&idtTable[0x16], 0x08, (int)&_isr_22_wrapper, ACS_INT);
   19245:	ba ba 03 01 00       	mov    edx,0x103ba
   1924a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1924d:	05 b0 00 00 00       	add    eax,0xb0
   19252:	68 8e 00 00 00       	push   0x8e
   19257:	52                   	push   edx
   19258:	6a 08                	push   0x8
   1925a:	50                   	push   eax
   1925b:	e8 5c fc ff ff       	call   18ebc <idt_set_gate>
   19260:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:62
    idt_set_gate (&idtTable[0x17], 0x08, (int)&_isr_23_wrapper, ACS_INT);
   19263:	ba d6 03 01 00       	mov    edx,0x103d6
   19268:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1926b:	05 b8 00 00 00       	add    eax,0xb8
   19270:	68 8e 00 00 00       	push   0x8e
   19275:	52                   	push   edx
   19276:	6a 08                	push   0x8
   19278:	50                   	push   eax
   19279:	e8 3e fc ff ff       	call   18ebc <idt_set_gate>
   1927e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:63
    idt_set_gate (&idtTable[0x18], 0x08, (int)&_isr_24_wrapper, ACS_INT);
   19281:	ba f2 03 01 00       	mov    edx,0x103f2
   19286:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19289:	05 c0 00 00 00       	add    eax,0xc0
   1928e:	68 8e 00 00 00       	push   0x8e
   19293:	52                   	push   edx
   19294:	6a 08                	push   0x8
   19296:	50                   	push   eax
   19297:	e8 20 fc ff ff       	call   18ebc <idt_set_gate>
   1929c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:64
    idt_set_gate (&idtTable[0x19], 0x08, (int)&_isr_25_wrapper, ACS_INT);
   1929f:	ba 0e 04 01 00       	mov    edx,0x1040e
   192a4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   192a7:	05 c8 00 00 00       	add    eax,0xc8
   192ac:	68 8e 00 00 00       	push   0x8e
   192b1:	52                   	push   edx
   192b2:	6a 08                	push   0x8
   192b4:	50                   	push   eax
   192b5:	e8 02 fc ff ff       	call   18ebc <idt_set_gate>
   192ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:65
    idt_set_gate (&idtTable[0x1a], 0x08, (int)&_isr_26_wrapper, ACS_INT);
   192bd:	ba 2a 04 01 00       	mov    edx,0x1042a
   192c2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   192c5:	05 d0 00 00 00       	add    eax,0xd0
   192ca:	68 8e 00 00 00       	push   0x8e
   192cf:	52                   	push   edx
   192d0:	6a 08                	push   0x8
   192d2:	50                   	push   eax
   192d3:	e8 e4 fb ff ff       	call   18ebc <idt_set_gate>
   192d8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:66
    idt_set_gate (&idtTable[0x1b], 0x08, (int)&_isr_27_wrapper, ACS_INT);
   192db:	ba 46 04 01 00       	mov    edx,0x10446
   192e0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   192e3:	05 d8 00 00 00       	add    eax,0xd8
   192e8:	68 8e 00 00 00       	push   0x8e
   192ed:	52                   	push   edx
   192ee:	6a 08                	push   0x8
   192f0:	50                   	push   eax
   192f1:	e8 c6 fb ff ff       	call   18ebc <idt_set_gate>
   192f6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:67
    idt_set_gate (&idtTable[0x1c], 0x08, (int)&_isr_28_wrapper, ACS_INT);
   192f9:	ba 62 04 01 00       	mov    edx,0x10462
   192fe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19301:	05 e0 00 00 00       	add    eax,0xe0
   19306:	68 8e 00 00 00       	push   0x8e
   1930b:	52                   	push   edx
   1930c:	6a 08                	push   0x8
   1930e:	50                   	push   eax
   1930f:	e8 a8 fb ff ff       	call   18ebc <idt_set_gate>
   19314:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:68
    idt_set_gate (&idtTable[0x1d], 0x08, (int)&_isr_29_wrapper, ACS_INT);
   19317:	ba 7e 04 01 00       	mov    edx,0x1047e
   1931c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1931f:	05 e8 00 00 00       	add    eax,0xe8
   19324:	68 8e 00 00 00       	push   0x8e
   19329:	52                   	push   edx
   1932a:	6a 08                	push   0x8
   1932c:	50                   	push   eax
   1932d:	e8 8a fb ff ff       	call   18ebc <idt_set_gate>
   19332:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:69
    idt_set_gate (&idtTable[0x1e], 0x08, (int)&_isr_30_wrapper, ACS_INT);
   19335:	ba 9a 04 01 00       	mov    edx,0x1049a
   1933a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1933d:	05 f0 00 00 00       	add    eax,0xf0
   19342:	68 8e 00 00 00       	push   0x8e
   19347:	52                   	push   edx
   19348:	6a 08                	push   0x8
   1934a:	50                   	push   eax
   1934b:	e8 6c fb ff ff       	call   18ebc <idt_set_gate>
   19350:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:70
    idt_set_gate (&idtTable[0x1f], 0x08, (int)&_isr_31_wrapper, ACS_INT);
   19353:	ba b6 04 01 00       	mov    edx,0x104b6
   19358:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1935b:	05 f8 00 00 00       	add    eax,0xf8
   19360:	68 8e 00 00 00       	push   0x8e
   19365:	52                   	push   edx
   19366:	6a 08                	push   0x8
   19368:	50                   	push   eax
   19369:	e8 4e fb ff ff       	call   18ebc <idt_set_gate>
   1936e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:71
    idt_set_gate (&idtTable[0x20+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //
   19371:	b9 7d 05 01 00       	mov    ecx,0x1057d
   19376:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19379:	83 c0 20             	add    eax,0x20
   1937c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   19383:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19386:	01 d0                	add    eax,edx
   19388:	68 8e 00 00 00       	push   0x8e
   1938d:	51                   	push   ecx
   1938e:	6a 08                	push   0x8
   19390:	50                   	push   eax
   19391:	e8 26 fb ff ff       	call   18ebc <idt_set_gate>
   19396:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:72
    idt_set_gate (&idtTable[0x21+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //
   19399:	b9 7d 05 01 00       	mov    ecx,0x1057d
   1939e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   193a1:	83 c0 21             	add    eax,0x21
   193a4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   193ab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   193ae:	01 d0                	add    eax,edx
   193b0:	68 8e 00 00 00       	push   0x8e
   193b5:	51                   	push   ecx
   193b6:	6a 08                	push   0x8
   193b8:	50                   	push   eax
   193b9:	e8 fe fa ff ff       	call   18ebc <idt_set_gate>
   193be:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:74

    for (int cnt=0x22;cnt<0xff;cnt++)
   193c1:	c7 45 f4 22 00 00 00 	mov    DWORD PTR [ebp-0xc],0x22
   193c8:	eb 29                	jmp    193f3 <idt_init+0x48a>
/home/yogi/src/os/chrisOS/src/cpu/idt.c:75 (discriminator 3)
        idt_set_gate (&idtTable[cnt], 0x08, (int)&_isr_32_wrapper, ACS_INT);
   193ca:	b9 7d 05 01 00       	mov    ecx,0x1057d
   193cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   193d2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   193d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   193dc:	01 d0                	add    eax,edx
   193de:	68 8e 00 00 00       	push   0x8e
   193e3:	51                   	push   ecx
   193e4:	6a 08                	push   0x8
   193e6:	50                   	push   eax
   193e7:	e8 d0 fa ff ff       	call   18ebc <idt_set_gate>
   193ec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:74 (discriminator 3)
    idt_set_gate (&idtTable[0x1e], 0x08, (int)&_isr_30_wrapper, ACS_INT);
    idt_set_gate (&idtTable[0x1f], 0x08, (int)&_isr_31_wrapper, ACS_INT);
    idt_set_gate (&idtTable[0x20+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //
    idt_set_gate (&idtTable[0x21+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //

    for (int cnt=0x22;cnt<0xff;cnt++)
   193ef:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/idt.c:74 (discriminator 1)
   193f3:	81 7d f4 fe 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xfe
   193fa:	7e ce                	jle    193ca <idt_init+0x461>
/home/yogi/src/os/chrisOS/src/cpu/idt.c:76
        idt_set_gate (&idtTable[cnt], 0x08, (int)&_isr_32_wrapper, ACS_INT);
    idt_install(idtp);
   193fc:	83 ec 0c             	sub    esp,0xc
   193ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   19402:	e8 ff fa ff ff       	call   18f06 <idt_install>
   19407:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:78

    idt_set_gate (&idtTable[0x80], 0x3b, (int)&_call_gate_wrapper, ACS_TASK_GATE | ACS_DPL_0);               //
   1940a:	ba 8a 06 01 00       	mov    edx,0x1068a
   1940f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19412:	05 00 04 00 00       	add    eax,0x400
   19417:	6a 05                	push   0x5
   19419:	52                   	push   edx
   1941a:	6a 3b                	push   0x3b
   1941c:	50                   	push   eax
   1941d:	e8 9a fa ff ff       	call   18ebc <idt_set_gate>
   19422:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:80
    
}
   19425:	90                   	nop
   19426:	c9                   	leave  
   19427:	c3                   	ret    

00019428 <idt_get_gate>:
idt_get_gate():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:84

//void idt_get_gate(struct idt_entry* idtTable, uint8_t idtIndex, unsigned short *sel, uint32_t *base, unsigned *char flags)
void idt_get_gate(struct idt_entry *idt, uint8_t idtIndex, unsigned short *sel, uint32_t *base, unsigned char *flags)
{
   19428:	55                   	push   ebp
   19429:	89 e5                	mov    ebp,esp
   1942b:	83 ec 04             	sub    esp,0x4
   1942e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19431:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/cpu/idt.c:85
    *sel = idt[idtIndex].sel;
   19434:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   19438:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   1943f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19442:	01 d0                	add    eax,edx
   19444:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
   19448:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1944b:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/cpu/idt.c:86
    *base = (idt[idtIndex].base_hi << 16) | idt[idtIndex].base_lo;
   1944e:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   19452:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   19459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1945c:	01 d0                	add    eax,edx
   1945e:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   19462:	0f b7 c0             	movzx  eax,ax
   19465:	c1 e0 10             	shl    eax,0x10
   19468:	89 c2                	mov    edx,eax
   1946a:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   1946e:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
   19475:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19478:	01 c8                	add    eax,ecx
   1947a:	0f b7 00             	movzx  eax,WORD PTR [eax]
   1947d:	0f b7 c0             	movzx  eax,ax
   19480:	09 d0                	or     eax,edx
   19482:	89 c2                	mov    edx,eax
   19484:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   19487:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/idt.c:87
    *flags = idt[idtIndex].flags;
   19489:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   1948d:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   19494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19497:	01 d0                	add    eax,edx
   19499:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
   1949d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   194a0:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/cpu/idt.c:88
}
   194a2:	90                   	nop
   194a3:	c9                   	leave  
   194a4:	c3                   	ret    

000194a5 <idt_get_gate_address>:
idt_get_gate_address():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:91

uintptr_t idt_get_gate_address(int vector)
{
   194a5:	55                   	push   ebp
   194a6:	89 e5                	mov    ebp,esp
   194a8:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:92
   struct idt_entry* idtTable=(struct idt_entry*)IDT_TABLE_ADDRESS;
   194ab:	c7 45 fc 00 30 16 00 	mov    DWORD PTR [ebp-0x4],0x163000
/home/yogi/src/os/chrisOS/src/cpu/idt.c:96
    unsigned short sel;
    uint32_t base;
    unsigned char flags;
    idt_get_gate(idtTable,vector,&sel,&base,&flags);
   194b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   194b5:	0f b6 c0             	movzx  eax,al
   194b8:	8d 55 f3             	lea    edx,[ebp-0xd]
   194bb:	52                   	push   edx
   194bc:	8d 55 f4             	lea    edx,[ebp-0xc]
   194bf:	52                   	push   edx
   194c0:	8d 55 fa             	lea    edx,[ebp-0x6]
   194c3:	52                   	push   edx
   194c4:	50                   	push   eax
   194c5:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   194c8:	e8 5b ff ff ff       	call   19428 <idt_get_gate>
   194cd:	83 c4 14             	add    esp,0x14
/home/yogi/src/os/chrisOS/src/cpu/idt.c:97
    return base;
   194d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/cpu/idt.c:98
   194d3:	c9                   	leave  
   194d4:	c3                   	ret    
   194d5:	66 90                	xchg   ax,ax
   194d7:	90                   	nop

000194d8 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   194d8:	55                   	push   ebp
   194d9:	89 e5                	mov    ebp,esp
   194db:	83 ec 08             	sub    esp,0x8
   194de:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   194e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   194e4:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   194e8:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   194eb:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   194ef:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   194f3:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   194f4:	90                   	nop
   194f5:	c9                   	leave  
   194f6:	c3                   	ret    

000194f7 <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   194f7:	55                   	push   ebp
   194f8:	89 e5                	mov    ebp,esp
   194fa:	83 ec 14             	sub    esp,0x14
   194fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19500:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   19504:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   19508:	89 c2                	mov    edx,eax
   1950a:	ec                   	in     al,dx
   1950b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   1950e:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   19512:	c9                   	leave  
   19513:	c3                   	ret    

00019514 <irq0_handler>:
irq0_handler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:42
unsigned volatile char kKeyStatus[11];
extern struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf);
extern void kpagingUpdatePresentFlagA(uint32_t address, bool present);

void irq0_handler()
{
   19514:	55                   	push   ebp
   19515:	89 e5                	mov    ebp,esp
   19517:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:47
#ifndef DEBUG_NONE
static char currTime[50];
static struct tm theDateTime;
#endif
        *kTicksSinceStart=*kTicksSinceStart+1;
   1951a:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   1951f:	8b 15 a4 97 12 00    	mov    edx,DWORD PTR ds:0x1297a4
   19525:	8b 12                	mov    edx,DWORD PTR [edx]
   19527:	83 c2 01             	add    edx,0x1
   1952a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:48
        if (*kTicksSinceStart % kTicksPerSecond == 0)
   1952c:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   19531:	8b 00                	mov    eax,DWORD PTR [eax]
   19533:	8b 15 c0 97 12 00    	mov    edx,DWORD PTR ds:0x1297c0
   19539:	89 d1                	mov    ecx,edx
   1953b:	ba 00 00 00 00       	mov    edx,0x0
   19540:	f7 f1                	div    ecx
   19542:	89 d0                	mov    eax,edx
   19544:	85 c0                	test   eax,eax
   19546:	75 0d                	jne    19555 <irq0_handler+0x41>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:49
            kSystemCurrentTime++;
   19548:	a1 cc 97 12 00       	mov    eax,ds:0x1297cc
   1954d:	83 c0 01             	add    eax,0x1
   19550:	a3 cc 97 12 00       	mov    ds:0x1297cc,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:51
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_EXPANDED_TICK) == DEBUG_EXPANDED_TICK)
   19555:	a1 78 98 12 00       	mov    eax,ds:0x129878
   1955a:	83 e0 04             	and    eax,0x4
   1955d:	85 c0                	test   eax,eax
   1955f:	0f 84 83 00 00 00    	je     195e8 <irq0_handler+0xd4>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:53
        {
            cursorSavePosition();
   19565:	e8 bd e9 ff ff       	call   17f27 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:54
            gmtime_r((time_t*)&kSystemCurrentTime,&theDateTime);
   1956a:	83 ec 08             	sub    esp,0x8
   1956d:	68 e0 a4 09 00       	push   0x9a4e0
   19572:	68 cc 97 12 00       	push   0x1297cc
   19577:	e8 41 e8 00 00       	call   27dbd <gmtime_r>
   1957c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:55
            strftime((char*)&currTime, 50, "%m/%d/%Y %H:%M:%S", &theDateTime);
   1957f:	68 e0 a4 09 00       	push   0x9a4e0
   19584:	68 e0 2f 08 00       	push   0x82fe0
   19589:	6a 32                	push   0x32
   1958b:	68 20 a5 09 00       	push   0x9a520
   19590:	e8 2b 71 ff ff       	call   106c0 <strftime>
   19595:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:56
            cursorMoveTo(0,24);
   19598:	83 ec 08             	sub    esp,0x8
   1959b:	6a 18                	push   0x18
   1959d:	6a 00                	push   0x0
   1959f:	e8 37 ed ff ff       	call   182db <cursorMoveTo>
   195a4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:57
            printk("The time is currently %s", &currTime);
   195a7:	83 ec 08             	sub    esp,0x8
   195aa:	68 20 a5 09 00       	push   0x9a520
   195af:	68 f2 2f 08 00       	push   0x82ff2
   195b4:	e8 a2 e1 00 00       	call   2775b <printk>
   195b9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:58
            cursorMoveTo(65,24);
   195bc:	83 ec 08             	sub    esp,0x8
   195bf:	6a 18                	push   0x18
   195c1:	6a 41                	push   0x41
   195c3:	e8 13 ed ff ff       	call   182db <cursorMoveTo>
   195c8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:59
            printk("ticks=%d", *kTicksSinceStart);
   195cb:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   195d0:	8b 00                	mov    eax,DWORD PTR [eax]
   195d2:	83 ec 08             	sub    esp,0x8
   195d5:	50                   	push   eax
   195d6:	68 0b 30 08 00       	push   0x8300b
   195db:	e8 7b e1 00 00       	call   2775b <printk>
   195e0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:60
            cursorRestorePosition();
   195e3:	e8 8b e9 ff ff       	call   17f73 <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:64
        }
#endif
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_TICK) == DEBUG_TICK)
   195e8:	a1 78 98 12 00       	mov    eax,ds:0x129878
   195ed:	83 e0 02             	and    eax,0x2
   195f0:	85 c0                	test   eax,eax
   195f2:	74 68                	je     1965c <irq0_handler+0x148>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:66
        {
            cursorSavePosition();
   195f4:	e8 2e e9 ff ff       	call   17f27 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:67
            cursorMoveTo(55,SYS_VGA_HEIGHT-1);
   195f9:	83 ec 08             	sub    esp,0x8
   195fc:	6a 31                	push   0x31
   195fe:	6a 37                	push   0x37
   19600:	e8 d6 ec ff ff       	call   182db <cursorMoveTo>
   19605:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:70
            //printf("0x%04X:0x%08X 0x%08X",exceptionCS, exceptionEIP, exceptionFlags);
            //kTermMoveTo(65,0);
            printk("%u",*kTicksSinceStart);
   19608:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   1960d:	8b 00                	mov    eax,DWORD PTR [eax]
   1960f:	83 ec 08             	sub    esp,0x8
   19612:	50                   	push   eax
   19613:	68 14 30 08 00       	push   0x83014
   19618:	e8 3e e1 00 00       	call   2775b <printk>
   1961d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:71
            printk("-%c-%04X:%08X",(exceptionFlags & 0x200)==0x200?'I':'i',exceptionCS, exceptionEIP);
   19620:	8b 15 38 97 12 00    	mov    edx,DWORD PTR ds:0x129738
   19626:	a1 3c 97 12 00       	mov    eax,ds:0x12973c
   1962b:	8b 0d 30 97 12 00    	mov    ecx,DWORD PTR ds:0x129730
   19631:	81 e1 00 02 00 00    	and    ecx,0x200
   19637:	85 c9                	test   ecx,ecx
   19639:	74 07                	je     19642 <irq0_handler+0x12e>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:71 (discriminator 1)
   1963b:	b9 49 00 00 00       	mov    ecx,0x49
   19640:	eb 05                	jmp    19647 <irq0_handler+0x133>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:71 (discriminator 2)
   19642:	b9 69 00 00 00       	mov    ecx,0x69
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:71 (discriminator 4)
   19647:	52                   	push   edx
   19648:	50                   	push   eax
   19649:	51                   	push   ecx
   1964a:	68 17 30 08 00       	push   0x83017
   1964f:	e8 07 e1 00 00       	call   2775b <printk>
   19654:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:76 (discriminator 4)
            //gmtime_r((time_t*)&kSystemCurrentTime,&theDateTime);
            //strftime((char*)&currTime, 50, "%H:%M:%S", &theDateTime);
            //kTermMoveTo(65,0);
            //printf("%s",currTime);
            cursorRestorePosition();
   19657:	e8 17 e9 ff ff       	call   17f73 <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:79
        }
#endif
}
   1965c:	90                   	nop
   1965d:	c9                   	leave  
   1965e:	c3                   	ret    

0001965f <kbd_handler>:
kbd_handler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:82

void kbd_handler()
{
   1965f:	55                   	push   ebp
   19660:	89 e5                	mov    ebp,esp
   19662:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:83
    unsigned char lKeyControlVal=0;
   19665:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:84
    unsigned char rawKey=0;
   19669:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:85
    unsigned char translatedKeypress=0;
   1966d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:89
    static char currTime[50];
    static struct tm theDateTime;
   
    rawKey = inb(KEYB_DATA_PORT);
   19671:	6a 60                	push   0x60
   19673:	e8 7f fe ff ff       	call   194f7 <inb>
   19678:	83 c4 04             	add    esp,0x4
   1967b:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:90
    kKeyChar = rawKey;//& 0x80;
   1967e:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   19682:	a2 c0 a4 09 00       	mov    ds:0x9a4c0,al
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:92

    __asm__("cli\n");
   19687:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:94
    
    switch(rawKey)  
   19688:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   1968c:	3d 9d 00 00 00       	cmp    eax,0x9d
   19691:	74 53                	je     196e6 <kbd_handler+0x87>
   19693:	3d 9d 00 00 00       	cmp    eax,0x9d
   19698:	7f 11                	jg     196ab <kbd_handler+0x4c>
   1969a:	83 f8 2a             	cmp    eax,0x2a
   1969d:	74 23                	je     196c2 <kbd_handler+0x63>
   1969f:	83 f8 38             	cmp    eax,0x38
   196a2:	74 4e                	je     196f2 <kbd_handler+0x93>
   196a4:	83 f8 1d             	cmp    eax,0x1d
   196a7:	74 31                	je     196da <kbd_handler+0x7b>
   196a9:	eb 75                	jmp    19720 <kbd_handler+0xc1>
   196ab:	3d b8 00 00 00       	cmp    eax,0xb8
   196b0:	74 4c                	je     196fe <kbd_handler+0x9f>
   196b2:	3d ba 00 00 00       	cmp    eax,0xba
   196b7:	74 51                	je     1970a <kbd_handler+0xab>
   196b9:	3d aa 00 00 00       	cmp    eax,0xaa
   196be:	74 0e                	je     196ce <kbd_handler+0x6f>
   196c0:	eb 5e                	jmp    19720 <kbd_handler+0xc1>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:96
    {
        case KEY_SHIFT_DN: kKeyStatus[INDEX_SHIFT]=1;break;
   196c2:	c6 05 64 65 09 00 01 	mov    BYTE PTR ds:0x96564,0x1
   196c9:	e9 10 03 00 00       	jmp    199de <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:97
        case KEY_SHIFT_UP: kKeyStatus[INDEX_SHIFT]=0;break;
   196ce:	c6 05 64 65 09 00 00 	mov    BYTE PTR ds:0x96564,0x0
   196d5:	e9 04 03 00 00       	jmp    199de <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:98
        case KEY_CTRL_DN: kKeyStatus[INDEX_CTRL]=1;break;
   196da:	c6 05 65 65 09 00 01 	mov    BYTE PTR ds:0x96565,0x1
   196e1:	e9 f8 02 00 00       	jmp    199de <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:99
        case KEY_CTRL_UP: kKeyStatus[INDEX_CTRL]=0;break;
   196e6:	c6 05 65 65 09 00 00 	mov    BYTE PTR ds:0x96565,0x0
   196ed:	e9 ec 02 00 00       	jmp    199de <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:100
        case KEY_ALT_DN: kKeyStatus[INDEX_ALT]=1;break;
   196f2:	c6 05 66 65 09 00 01 	mov    BYTE PTR ds:0x96566,0x1
   196f9:	e9 e0 02 00 00       	jmp    199de <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:101
        case KEY_ALT_UP: kKeyStatus[INDEX_ALT]=0;break;
   196fe:	c6 05 66 65 09 00 00 	mov    BYTE PTR ds:0x96566,0x0
   19705:	e9 d4 02 00 00       	jmp    199de <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:102
        case KEY_CAPSLOCK_UP: kKeyStatus[INDEX_CAPSLOCK]=!kKeyStatus[INDEX_CAPSLOCK];break;
   1970a:	0f b6 05 67 65 09 00 	movzx  eax,BYTE PTR ds:0x96567
   19711:	84 c0                	test   al,al
   19713:	0f 94 c0             	sete   al
   19716:	a2 67 65 09 00       	mov    ds:0x96567,al
   1971b:	e9 be 02 00 00       	jmp    199de <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:110
//        case MAKE_UP: kKeyStatus[INDEX_UP]=0;break;
//        case MAKE_DOWN: kKeyStatus[INDEX_DOWN]=0;break;
       default:
//printk("%02X",rawKey);
           //changed from if rawkey & 0x80, so that keydown triggers the key being input
           if (rawKey==BREAK_RIGHT || rawKey==BREAK_LEFT || rawKey==BREAK_UP || rawKey==BREAK_DOWN)
   19720:	80 7d f5 cd          	cmp    BYTE PTR [ebp-0xb],0xcd
   19724:	74 12                	je     19738 <kbd_handler+0xd9>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:110 (discriminator 1)
   19726:	80 7d f5 cb          	cmp    BYTE PTR [ebp-0xb],0xcb
   1972a:	74 0c                	je     19738 <kbd_handler+0xd9>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:110 (discriminator 2)
   1972c:	80 7d f5 c8          	cmp    BYTE PTR [ebp-0xb],0xc8
   19730:	74 06                	je     19738 <kbd_handler+0xd9>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:110 (discriminator 3)
   19732:	80 7d f5 d0          	cmp    BYTE PTR [ebp-0xb],0xd0
   19736:	75 2f                	jne    19767 <kbd_handler+0x108>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:111
               if (kKbdBuffCurrTop<(char*)KEYBOARD_BUFFER_ADDRESS+KEYBOARD_BUFFER_SIZE && !kKeyStatus[INDEX_ALT])
   19738:	a1 60 99 12 00       	mov    eax,ds:0x129960
   1973d:	3d 2f 25 16 00       	cmp    eax,0x16252f
   19742:	77 23                	ja     19767 <kbd_handler+0x108>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:111 (discriminator 1)
   19744:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   1974b:	84 c0                	test   al,al
   1974d:	75 18                	jne    19767 <kbd_handler+0x108>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:114
               //CLR 01/10/2017: Increment the buffer pointer first
               {    
                   kKbdBuffCurrTop++;
   1974f:	a1 60 99 12 00       	mov    eax,ds:0x129960
   19754:	83 c0 01             	add    eax,0x1
   19757:	a3 60 99 12 00       	mov    ds:0x129960,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:115
                   *kKbdBuffCurrTop=rawKey;
   1975c:	a1 60 99 12 00       	mov    eax,ds:0x129960
   19761:	0f b6 55 f5          	movzx  edx,BYTE PTR [ebp-0xb]
   19765:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:117
               }
           if (!(rawKey & 0x80))
   19767:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   1976b:	84 c0                	test   al,al
   1976d:	0f 88 6a 02 00 00    	js     199dd <kbd_handler+0x37e>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:121
           {
                //rawKey &= 0x7f;
               //printk("%02X",rawKey); 48=up, 50=down
                 if (kKeyStatus[INDEX_SHIFT] || kKeyStatus[INDEX_CAPSLOCK])
   19773:	0f b6 05 64 65 09 00 	movzx  eax,BYTE PTR ds:0x96564
   1977a:	84 c0                	test   al,al
   1977c:	75 0b                	jne    19789 <kbd_handler+0x12a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:121 (discriminator 1)
   1977e:	0f b6 05 67 65 09 00 	movzx  eax,BYTE PTR ds:0x96567
   19785:	84 c0                	test   al,al
   19787:	74 10                	je     19799 <kbd_handler+0x13a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:123
                 {
                     translatedKeypress=keyboard_map_up[rawKey];
   19789:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   1978d:	0f b6 80 60 2f 08 00 	movzx  eax,BYTE PTR [eax+0x82f60]
   19794:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
   19797:	eb 0e                	jmp    197a7 <kbd_handler+0x148>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:126
                 }
                 else
                     translatedKeypress=keyboard_map[rawKey];
   19799:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   1979d:	0f b6 80 e0 2e 08 00 	movzx  eax,BYTE PTR [eax+0x82ee0]
   197a4:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:133
//                 if ((kDebugLevel & DEBUG_KEYBOARD) == DEBUG_KEYBOARD)
//                 {
//                      printf("%u, %u, %c\n",kKeyChar, rawKey, translatedKeypress);
//                 }
#endif
                if (kKeyStatus[INDEX_CTRL])
   197a7:	0f b6 05 65 65 09 00 	movzx  eax,BYTE PTR ds:0x96565
   197ae:	84 c0                	test   al,al
   197b0:	74 14                	je     197c6 <kbd_handler+0x167>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:135
                {
                    printk("^");
   197b2:	83 ec 0c             	sub    esp,0xc
   197b5:	68 25 30 08 00       	push   0x83025
   197ba:	e8 9c df 00 00       	call   2775b <printk>
   197bf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:136
                    translatedKeypress-=32;
   197c2:	80 6d f7 20          	sub    BYTE PTR [ebp-0x9],0x20
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:138
                }
            if (kKbdBuffCurrTop<(char*)KEYBOARD_BUFFER_ADDRESS+KEYBOARD_BUFFER_SIZE && !kKeyStatus[INDEX_ALT])
   197c6:	a1 60 99 12 00       	mov    eax,ds:0x129960
   197cb:	3d 2f 25 16 00       	cmp    eax,0x16252f
   197d0:	77 78                	ja     1984a <kbd_handler+0x1eb>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:138 (discriminator 1)
   197d2:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   197d9:	84 c0                	test   al,al
   197db:	75 6d                	jne    1984a <kbd_handler+0x1eb>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:142
            {
                //CLR 01/10/2017: Increment the buffer pointer first
                {   
                    kKbdBuffCurrTop++;
   197dd:	a1 60 99 12 00       	mov    eax,ds:0x129960
   197e2:	83 c0 01             	add    eax,0x1
   197e5:	a3 60 99 12 00       	mov    ds:0x129960,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:143
                    *kKbdBuffCurrTop=translatedKeypress;
   197ea:	a1 60 99 12 00       	mov    eax,ds:0x129960
   197ef:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   197f3:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:146
                }
#ifndef DEBUG_NONE
                 if ((kDebugLevel & DEBUG_KEYBOARD) == DEBUG_KEYBOARD)
   197f5:	a1 78 98 12 00       	mov    eax,ds:0x129878
   197fa:	83 e0 10             	and    eax,0x10
   197fd:	85 c0                	test   eax,eax
   197ff:	74 1c                	je     1981d <kbd_handler+0x1be>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:147
                    printk("kbd_handler: %c-(%08X)\n",translatedKeypress, kKbdBuffCurrTop);
   19801:	8b 15 60 99 12 00    	mov    edx,DWORD PTR ds:0x129960
   19807:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1980b:	83 ec 04             	sub    esp,0x4
   1980e:	52                   	push   edx
   1980f:	50                   	push   eax
   19810:	68 27 30 08 00       	push   0x83027
   19815:	e8 41 df 00 00       	call   2775b <printk>
   1981a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:149
#endif
                cursorSavePosition();
   1981d:	e8 05 e7 ff ff       	call   17f27 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:150
                cursorMoveTo(78,0);
   19822:	83 ec 08             	sub    esp,0x8
   19825:	6a 00                	push   0x0
   19827:	6a 4e                	push   0x4e
   19829:	e8 ad ea ff ff       	call   182db <cursorMoveTo>
   1982e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:151
                printk("%c",'k');
   19831:	83 ec 08             	sub    esp,0x8
   19834:	6a 6b                	push   0x6b
   19836:	68 3f 30 08 00       	push   0x8303f
   1983b:	e8 1b df 00 00       	call   2775b <printk>
   19840:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:152
                cursorRestorePosition();
   19843:	e8 2b e7 ff ff       	call   17f73 <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:139
                {
                    printk("^");
                    translatedKeypress-=32;
                }
            if (kKbdBuffCurrTop<(char*)KEYBOARD_BUFFER_ADDRESS+KEYBOARD_BUFFER_SIZE && !kKeyStatus[INDEX_ALT])
            {
   19848:	eb 4d                	jmp    19897 <kbd_handler+0x238>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:157
                cursorRestorePosition();
            }
            else
            {
#ifndef DEBUG_NONE
                if ((kDebugLevel & DEBUG_KEYBOARD) == DEBUG_KEYBOARD)
   1984a:	a1 78 98 12 00       	mov    eax,ds:0x129878
   1984f:	83 e0 10             	and    eax,0x10
   19852:	85 c0                	test   eax,eax
   19854:	74 16                	je     1986c <kbd_handler+0x20d>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:158
                      printk("noRoomForKey: %c\n",kKbdBuffCurrTop);
   19856:	a1 60 99 12 00       	mov    eax,ds:0x129960
   1985b:	83 ec 08             	sub    esp,0x8
   1985e:	50                   	push   eax
   1985f:	68 42 30 08 00       	push   0x83042
   19864:	e8 f2 de 00 00       	call   2775b <printk>
   19869:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:160
#endif
                cursorSavePosition();
   1986c:	e8 b6 e6 ff ff       	call   17f27 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:161
                cursorMoveTo(78,0);
   19871:	83 ec 08             	sub    esp,0x8
   19874:	6a 00                	push   0x0
   19876:	6a 4e                	push   0x4e
   19878:	e8 5e ea ff ff       	call   182db <cursorMoveTo>
   1987d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:162
                printk("%c",'K');
   19880:	83 ec 08             	sub    esp,0x8
   19883:	6a 4b                	push   0x4b
   19885:	68 3f 30 08 00       	push   0x8303f
   1988a:	e8 cc de 00 00       	call   2775b <printk>
   1988f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:163
                cursorRestorePosition();
   19892:	e8 dc e6 ff ff       	call   17f73 <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:166
            }
                 //Debug
                 if (kKeyStatus[INDEX_ALT] && translatedKeypress==0x6A)
   19897:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   1989e:	84 c0                	test   al,al
   198a0:	74 07                	je     198a9 <kbd_handler+0x24a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:166 (discriminator 1)
   198a2:	80 7d f7 6a          	cmp    BYTE PTR [ebp-0x9],0x6a
   198a6:	75 01                	jne    198a9 <kbd_handler+0x24a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:168
                 {
                     __asm("int 0x3");
   198a8:	cc                   	int3   
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:170
                 }
            if (kKeyStatus[INDEX_ALT] && kKeyStatus[INDEX_CTRL] && translatedKeypress==0xE0)
   198a9:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   198b0:	84 c0                	test   al,al
   198b2:	74 22                	je     198d6 <kbd_handler+0x277>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:170 (discriminator 1)
   198b4:	0f b6 05 65 65 09 00 	movzx  eax,BYTE PTR ds:0x96565
   198bb:	84 c0                	test   al,al
   198bd:	74 17                	je     198d6 <kbd_handler+0x277>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:170 (discriminator 2)
   198bf:	80 7d f7 e0          	cmp    BYTE PTR [ebp-0x9],0xe0
   198c3:	75 11                	jne    198d6 <kbd_handler+0x277>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:172
            {
                translatedKeypress=0;
   198c5:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:173
                reboot(false);
   198c9:	83 ec 0c             	sub    esp,0xc
   198cc:	6a 00                	push   0x0
   198ce:	e8 49 c3 00 00       	call   25c1c <reboot>
   198d3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:175
            }
            if (kKeyStatus[INDEX_ALT])
   198d6:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   198dd:	84 c0                	test   al,al
   198df:	0f 84 f8 00 00 00    	je     199dd <kbd_handler+0x37e>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:177
            {
                if (translatedKeypress=='c')
   198e5:	80 7d f7 63          	cmp    BYTE PTR [ebp-0x9],0x63
   198e9:	75 4f                	jne    1993a <kbd_handler+0x2db>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:179
                {
                    printk("%u",*kTicksSinceStart);
   198eb:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   198f0:	8b 00                	mov    eax,DWORD PTR [eax]
   198f2:	83 ec 08             	sub    esp,0x8
   198f5:	50                   	push   eax
   198f6:	68 14 30 08 00       	push   0x83014
   198fb:	e8 5b de 00 00       	call   2775b <printk>
   19900:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:180
                    printk("-%c-%04X:%08X",(exceptionFlags & 0x200)==0x200?'I':'i',exceptionCS, exceptionEIP);
   19903:	8b 15 38 97 12 00    	mov    edx,DWORD PTR ds:0x129738
   19909:	a1 3c 97 12 00       	mov    eax,ds:0x12973c
   1990e:	8b 0d 30 97 12 00    	mov    ecx,DWORD PTR ds:0x129730
   19914:	81 e1 00 02 00 00    	and    ecx,0x200
   1991a:	85 c9                	test   ecx,ecx
   1991c:	74 07                	je     19925 <kbd_handler+0x2c6>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:180 (discriminator 1)
   1991e:	b9 49 00 00 00       	mov    ecx,0x49
   19923:	eb 05                	jmp    1992a <kbd_handler+0x2cb>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:180 (discriminator 2)
   19925:	b9 69 00 00 00       	mov    ecx,0x69
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:180 (discriminator 4)
   1992a:	52                   	push   edx
   1992b:	50                   	push   eax
   1992c:	51                   	push   ecx
   1992d:	68 17 30 08 00       	push   0x83017
   19932:	e8 24 de 00 00       	call   2775b <printk>
   19937:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:182
                }
                if (translatedKeypress=='b')
   1993a:	80 7d f7 62          	cmp    BYTE PTR [ebp-0x9],0x62
   1993e:	0f 85 83 00 00 00    	jne    199c7 <kbd_handler+0x368>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:184
                {
                    cursorSavePosition();
   19944:	e8 de e5 ff ff       	call   17f27 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:185
                    gmtime_r((time_t*)&kSystemCurrentTime,&theDateTime);
   19949:	83 ec 08             	sub    esp,0x8
   1994c:	68 60 a5 09 00       	push   0x9a560
   19951:	68 cc 97 12 00       	push   0x1297cc
   19956:	e8 62 e4 00 00       	call   27dbd <gmtime_r>
   1995b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:186
                    strftime((char*)&currTime, 50, "%m/%d/%Y %H:%M:%S", &theDateTime);
   1995e:	68 60 a5 09 00       	push   0x9a560
   19963:	68 e0 2f 08 00       	push   0x82fe0
   19968:	6a 32                	push   0x32
   1996a:	68 a0 a5 09 00       	push   0x9a5a0
   1996f:	e8 4c 6d ff ff       	call   106c0 <strftime>
   19974:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:187
                    cursorMoveTo(0,SYS_VGA_HEIGHT-1);
   19977:	83 ec 08             	sub    esp,0x8
   1997a:	6a 31                	push   0x31
   1997c:	6a 00                	push   0x0
   1997e:	e8 58 e9 ff ff       	call   182db <cursorMoveTo>
   19983:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:188
                    printk("The time is currently %s", &currTime);
   19986:	83 ec 08             	sub    esp,0x8
   19989:	68 a0 a5 09 00       	push   0x9a5a0
   1998e:	68 f2 2f 08 00       	push   0x82ff2
   19993:	e8 c3 dd 00 00       	call   2775b <printk>
   19998:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:189
                    cursorMoveTo(65,SYS_VGA_HEIGHT-1);
   1999b:	83 ec 08             	sub    esp,0x8
   1999e:	6a 31                	push   0x31
   199a0:	6a 41                	push   0x41
   199a2:	e8 34 e9 ff ff       	call   182db <cursorMoveTo>
   199a7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:190
                    printk("ticks=%d", *kTicksSinceStart);
   199aa:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   199af:	8b 00                	mov    eax,DWORD PTR [eax]
   199b1:	83 ec 08             	sub    esp,0x8
   199b4:	50                   	push   eax
   199b5:	68 0b 30 08 00       	push   0x8300b
   199ba:	e8 9c dd 00 00       	call   2775b <printk>
   199bf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:191
                    cursorRestorePosition();
   199c2:	e8 ac e5 ff ff       	call   17f73 <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:193
                }
                if (translatedKeypress=='d')
   199c7:	80 7d f7 64          	cmp    BYTE PTR [ebp-0x9],0x64
   199cb:	75 05                	jne    199d2 <kbd_handler+0x373>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:195
                {
                    printDumpedRegs();
   199cd:	e8 37 bf 00 00       	call   25909 <printDumpedRegs>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:197
                }
                if (translatedKeypress=='e')
   199d2:	80 7d f7 65          	cmp    BYTE PTR [ebp-0x9],0x65
   199d6:	75 05                	jne    199dd <kbd_handler+0x37e>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:199
                {
                    dumpKernelAddresses();
   199d8:	e8 bb c2 00 00       	call   25c98 <dumpKernelAddresses>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:203
                }
            }
        }
        break;
   199dd:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:206
    }
        
    lKeyControlVal = inb(KEYB_CTRL_PORT);
   199de:	83 ec 0c             	sub    esp,0xc
   199e1:	6a 61                	push   0x61
   199e3:	e8 0f fb ff ff       	call   194f7 <inb>
   199e8:	83 c4 10             	add    esp,0x10
   199eb:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:207
    lKeyControlVal |= 0x82;
   199ee:	80 4d f6 82          	or     BYTE PTR [ebp-0xa],0x82
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:208
    outb(KEYB_CTRL_PORT, lKeyControlVal);
   199f2:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   199f6:	83 ec 08             	sub    esp,0x8
   199f9:	50                   	push   eax
   199fa:	6a 61                	push   0x61
   199fc:	e8 d7 fa ff ff       	call   194d8 <outb>
   19a01:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:209
    lKeyControlVal &= 0x7f;
   19a04:	80 65 f6 7f          	and    BYTE PTR [ebp-0xa],0x7f
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:210
    outb(KEYB_CTRL_PORT, lKeyControlVal);
   19a08:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   19a0c:	83 ec 08             	sub    esp,0x8
   19a0f:	50                   	push   eax
   19a10:	6a 61                	push   0x61
   19a12:	e8 c1 fa ff ff       	call   194d8 <outb>
   19a17:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:211
    return;
   19a1a:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:212
}
   19a1b:	c9                   	leave  
   19a1c:	c3                   	ret    

00019a1d <pagingExceptionHandler>:
pagingExceptionHandler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:215

void pagingExceptionHandler()
{
   19a1d:	55                   	push   ebp
   19a1e:	89 e5                	mov    ebp,esp
   19a20:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:216
    uint32_t lPDEValue=0;
   19a23:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:217
    uint32_t lPTEValue=0;
   19a2a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:218
    uint32_t lPDEAddress=0, lPTEAddress=0;
   19a31:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   19a38:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:219
    uint32_t lOldDebugLevel=0;
   19a3f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:221

    if (exceptionNumber==0x0e)
   19a46:	0f b7 05 e4 96 12 00 	movzx  eax,WORD PTR ds:0x1296e4
   19a4d:	66 83 f8 0e          	cmp    ax,0xe
   19a51:	75 14                	jne    19a67 <pagingExceptionHandler+0x4a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:223
        //Get the address of the page table entry for the exception
        lPTEAddress=kPagingGet4kPTEntryAddress(exceptionCR2);
   19a53:	a1 40 97 12 00       	mov    eax,ds:0x129740
   19a58:	83 ec 0c             	sub    esp,0xc
   19a5b:	50                   	push   eax
   19a5c:	e8 8c 7a ff ff       	call   114ed <kPagingGet4kPTEntryAddress>
   19a61:	83 c4 10             	add    esp,0x10
   19a64:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:226

#ifndef DEBUG_NONE
    if (!kPagingInitDone)
   19a67:	0f b6 05 e1 97 12 00 	movzx  eax,BYTE PTR ds:0x1297e1
   19a6e:	83 f0 01             	xor    eax,0x1
   19a71:	84 c0                	test   al,al
   19a73:	74 12                	je     19a87 <pagingExceptionHandler+0x6a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:228
    {
        lOldDebugLevel=kDebugLevel;
   19a75:	a1 78 98 12 00       	mov    eax,ds:0x129878
   19a7a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:229
        kDebugLevel&=!DEBUG_EXCEPTIONS;
   19a7d:	c7 05 78 98 12 00 00 	mov    DWORD PTR ds:0x129878,0x0
   19a84:	00 00 00 
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:231
    }
    if ((kDebugLevel & DEBUG_EXCEPTIONS) == DEBUG_EXCEPTIONS)
   19a87:	a1 78 98 12 00       	mov    eax,ds:0x129878
   19a8c:	25 00 10 00 00       	and    eax,0x1000
   19a91:	85 c0                	test   eax,eax
   19a93:	0f 84 99 00 00 00    	je     19b32 <pagingExceptionHandler+0x115>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:233
    {
        lPDEValue=kPagingGet4kPDEntryValue(exceptionCR2);
   19a99:	a1 40 97 12 00       	mov    eax,ds:0x129740
   19a9e:	83 ec 0c             	sub    esp,0xc
   19aa1:	50                   	push   eax
   19aa2:	e8 94 79 ff ff       	call   1143b <kPagingGet4kPDEntryValue>
   19aa7:	83 c4 10             	add    esp,0x10
   19aaa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:234
        lPTEValue=kPagingGet4kPTEntryValue(exceptionCR2);
   19aad:	a1 40 97 12 00       	mov    eax,ds:0x129740
   19ab2:	83 ec 0c             	sub    esp,0xc
   19ab5:	50                   	push   eax
   19ab6:	e8 9a 7a ff ff       	call   11555 <kPagingGet4kPTEntryValue>
   19abb:	83 c4 10             	add    esp,0x10
   19abe:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:235
        lPDEAddress=kPagingGet4kPDEntryAddress(exceptionCR2);
   19ac1:	a1 40 97 12 00       	mov    eax,ds:0x129740
   19ac6:	83 ec 0c             	sub    esp,0xc
   19ac9:	50                   	push   eax
   19aca:	e8 ca 79 ff ff       	call   11499 <kPagingGet4kPDEntryAddress>
   19acf:	83 c4 10             	add    esp,0x10
   19ad2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:236
        if (exceptionNumber==0x0e)
   19ad5:	0f b7 05 e4 96 12 00 	movzx  eax,WORD PTR ds:0x1296e4
   19adc:	66 83 f8 0e          	cmp    ax,0xe
   19ae0:	75 16                	jne    19af8 <pagingExceptionHandler+0xdb>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:237
          printk("\nPaging handler called for virtual address 0x%02X\n",exceptionCR2);
   19ae2:	a1 40 97 12 00       	mov    eax,ds:0x129740
   19ae7:	83 ec 08             	sub    esp,0x8
   19aea:	50                   	push   eax
   19aeb:	68 54 30 08 00       	push   0x83054
   19af0:	e8 66 dc 00 00       	call   2775b <printk>
   19af5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:238
          printk("PDE@0x%08X=0x%08X, PTE@0x%08X=0x%08X\n", lPDEAddress, lPDEValue, lPTEAddress, lPTEValue);
   19af8:	83 ec 0c             	sub    esp,0xc
   19afb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   19afe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   19b01:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   19b04:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   19b07:	68 88 30 08 00       	push   0x83088
   19b0c:	e8 4a dc 00 00       	call   2775b <printk>
   19b11:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:239
          printDumpedRegs();
   19b14:	e8 f0 bd 00 00       	call   25909 <printDumpedRegs>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:240
          printk("handler called %u times since system start\n",kPagingExceptionsSinceStart+1);
   19b19:	a1 b8 97 12 00       	mov    eax,ds:0x1297b8
   19b1e:	83 c0 01             	add    eax,0x1
   19b21:	83 ec 08             	sub    esp,0x8
   19b24:	50                   	push   eax
   19b25:	68 b0 30 08 00       	push   0x830b0
   19b2a:	e8 2c dc 00 00       	call   2775b <printk>
   19b2f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:243
    }
#endif
    if (lOldDebugLevel)
   19b32:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   19b36:	74 08                	je     19b40 <pagingExceptionHandler+0x123>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:244
        kDebugLevel=lOldDebugLevel;
   19b38:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19b3b:	a3 78 98 12 00       	mov    ds:0x129878,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:245
    if ((exceptionCR2&0xFFFFF000)==0xC0000000 && (!kPagingInitDone))
   19b40:	a1 40 97 12 00       	mov    eax,ds:0x129740
   19b45:	25 00 f0 ff ff       	and    eax,0xfffff000
   19b4a:	3d 00 00 00 c0       	cmp    eax,0xc0000000
   19b4f:	75 41                	jne    19b92 <pagingExceptionHandler+0x175>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:245 (discriminator 1)
   19b51:	0f b6 05 e1 97 12 00 	movzx  eax,BYTE PTR ds:0x1297e1
   19b58:	83 f0 01             	xor    eax,0x1
   19b5b:	84 c0                	test   al,al
   19b5d:	74 33                	je     19b92 <pagingExceptionHandler+0x175>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:248
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   19b5f:	a1 78 98 12 00       	mov    eax,ds:0x129878
   19b64:	83 e0 40             	and    eax,0x40
   19b67:	85 c0                	test   eax,eax
   19b69:	74 16                	je     19b81 <pagingExceptionHandler+0x164>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:249
            printk("\n\tpagingExceptionHandler: Updating 0x%08X to read/write for WP test ...\n\t",exceptionCR2);
   19b6b:	a1 40 97 12 00       	mov    eax,ds:0x129740
   19b70:	83 ec 08             	sub    esp,0x8
   19b73:	50                   	push   eax
   19b74:	68 dc 30 08 00       	push   0x830dc
   19b79:	e8 dd db 00 00       	call   2775b <printk>
   19b7e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:251
#endif
        kPagingSetPageReadOnlyFlag((uintptr_t*)lPTEAddress, false);
   19b81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   19b84:	83 ec 08             	sub    esp,0x8
   19b87:	6a 00                	push   0x0
   19b89:	50                   	push   eax
   19b8a:	e8 e1 79 ff ff       	call   11570 <kPagingSetPageReadOnlyFlag>
   19b8f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:254
    }
    
    kPagingExceptionsSinceStart++;
   19b92:	a1 b8 97 12 00       	mov    eax,ds:0x1297b8
   19b97:	83 c0 01             	add    eax,0x1
   19b9a:	a3 b8 97 12 00       	mov    ds:0x1297b8,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:261
//    if ((kDebugLevel & DEBUG_EXCEPTIONS) == DEBUG_EXCEPTIONS)
//    {
//        waitForKeyboardKey();
//    }
#endif
    __asm__("push eax\n mov eax,0\nmov cr2,eax\npop eax\n  #reset CR2 after paging exception handled");
   19b9f:	50                   	push   eax
   19ba0:	b8 00 00 00 00       	mov    eax,0x0
   19ba5:	0f 22 d0             	mov    cr2,eax
   19ba8:	58                   	pop    eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:262
    if ((!kPagingInitDone) && exceptionCR2==0xC0000000)
   19ba9:	0f b6 05 e1 97 12 00 	movzx  eax,BYTE PTR ds:0x1297e1
   19bb0:	83 f0 01             	xor    eax,0x1
   19bb3:	84 c0                	test   al,al
   19bb5:	74 18                	je     19bcf <pagingExceptionHandler+0x1b2>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:262 (discriminator 1)
   19bb7:	a1 40 97 12 00       	mov    eax,ds:0x129740
   19bbc:	3d 00 00 00 c0       	cmp    eax,0xc0000000
   19bc1:	75 0c                	jne    19bcf <pagingExceptionHandler+0x1b2>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:264
    {
        exceptionCR2=0;
   19bc3:	c7 05 40 97 12 00 00 	mov    DWORD PTR ds:0x129740,0x0
   19bca:	00 00 00 
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:265
        return;
   19bcd:	eb 04                	jmp    19bd3 <pagingExceptionHandler+0x1b6>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:267
    }
    __asm__("sti\n");
   19bcf:	fb                   	sti    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:268 (discriminator 1)
    pagingExceptionStop: __asm__("hlt\n"); goto pagingExceptionStop;
   19bd0:	f4                   	hlt    
   19bd1:	eb fd                	jmp    19bd0 <pagingExceptionHandler+0x1b3>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:271
    __asm__("cli");
    __asm__("hlt");
}
   19bd3:	c9                   	leave  
   19bd4:	c3                   	ret    

00019bd5 <defaultISRHandler>:
defaultISRHandler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:274

void defaultISRHandler()
{
   19bd5:	55                   	push   ebp
   19bd6:	89 e5                	mov    ebp,esp
   19bd8:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:277
    //terminal_clear();
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_EXCEPTIONS) == DEBUG_EXCEPTIONS)
   19bdb:	a1 78 98 12 00       	mov    eax,ds:0x129878
   19be0:	25 00 10 00 00       	and    eax,0x1000
   19be5:	85 c0                	test   eax,eax
   19be7:	74 3e                	je     19c27 <defaultISRHandler+0x52>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:279
    {
        printk("Exception handler called for exception # 0x%02x\n\n", exceptionNumber);
   19be9:	0f b7 05 e4 96 12 00 	movzx  eax,WORD PTR ds:0x1296e4
   19bf0:	0f b7 c0             	movzx  eax,ax
   19bf3:	83 ec 08             	sub    esp,0x8
   19bf6:	50                   	push   eax
   19bf7:	68 28 31 08 00       	push   0x83128
   19bfc:	e8 5a db 00 00       	call   2775b <printk>
   19c01:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:280
        printDumpedRegs();
   19c04:	e8 00 bd 00 00       	call   25909 <printDumpedRegs>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:281
        printd(DEBUG_EXCEPTIONS,"handler called %u times since system start\n",kPagingExceptionsSinceStart+1);
   19c09:	a1 b8 97 12 00       	mov    eax,ds:0x1297b8
   19c0e:	83 c0 01             	add    eax,0x1
   19c11:	83 ec 04             	sub    esp,0x4
   19c14:	50                   	push   eax
   19c15:	68 b0 30 08 00       	push   0x830b0
   19c1a:	68 00 10 00 00       	push   0x1000
   19c1f:	e8 57 db 00 00       	call   2777b <printd>
   19c24:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:295 (discriminator 1)

//    __asm__("mov eax,%0\nmov ebx,%1\n"::"r" (exceptionAX), "r" (exceptionEIP));
//    return;
    
defaultHandlerLoop:
    __asm__("cli");
   19c27:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:296 (discriminator 1)
    __asm__("hlt");
   19c28:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:297 (discriminator 1)
    goto defaultHandlerLoop;
   19c29:	eb fc                	jmp    19c27 <defaultISRHandler+0x52>

00019c2b <doubleFaultHandler>:
doubleFaultHandler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:301
}

void doubleFaultHandler()
{
   19c2b:	55                   	push   ebp
   19c2c:	89 e5                	mov    ebp,esp
   19c2e:	53                   	push   ebx
   19c2f:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:302
    uint32_t esp = (uint32_t)exceptionSavedESP;
   19c32:	a1 2c 97 12 00       	mov    eax,ds:0x12972c
   19c37:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:303
        terminal_clear();
   19c3a:	e8 87 e3 ff ff       	call   17fc6 <terminal_clear>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:304
        printk("Double Fault for exception %02X, CS:EIP = %04X:%08x, error = %08X\n", exceptionNumber, exceptionCS, exceptionEIP, exceptionCR2);
   19c3f:	8b 1d 40 97 12 00    	mov    ebx,DWORD PTR ds:0x129740
   19c45:	8b 0d 38 97 12 00    	mov    ecx,DWORD PTR ds:0x129738
   19c4b:	8b 15 3c 97 12 00    	mov    edx,DWORD PTR ds:0x12973c
   19c51:	0f b7 05 e4 96 12 00 	movzx  eax,WORD PTR ds:0x1296e4
   19c58:	0f b7 c0             	movzx  eax,ax
   19c5b:	83 ec 0c             	sub    esp,0xc
   19c5e:	53                   	push   ebx
   19c5f:	51                   	push   ecx
   19c60:	52                   	push   edx
   19c61:	50                   	push   eax
   19c62:	68 5c 31 08 00       	push   0x8315c
   19c67:	e8 ef da 00 00       	call   2775b <printk>
   19c6c:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:305
        printk ("Stack:\n");
   19c6f:	83 ec 0c             	sub    esp,0xc
   19c72:	68 9f 31 08 00       	push   0x8319f
   19c77:	e8 df da 00 00       	call   2775b <printk>
   19c7c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:306
        for (int cnt=0;cnt<10;cnt++)
   19c7f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   19c86:	eb 2b                	jmp    19cb3 <doubleFaultHandler+0x88>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:308 (discriminator 3)
        {
            printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
   19c88:	a1 e8 96 12 00       	mov    eax,ds:0x1296e8
   19c8d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   19c90:	c1 e2 02             	shl    edx,0x2
   19c93:	01 d0                	add    eax,edx
   19c95:	8b 00                	mov    eax,DWORD PTR [eax]
   19c97:	83 ec 04             	sub    esp,0x4
   19c9a:	50                   	push   eax
   19c9b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   19c9e:	68 a7 31 08 00       	push   0x831a7
   19ca3:	e8 b3 da 00 00       	call   2775b <printk>
   19ca8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:309 (discriminator 3)
            esp+=4;
   19cab:	83 45 f4 04          	add    DWORD PTR [ebp-0xc],0x4
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:306 (discriminator 3)
{
    uint32_t esp = (uint32_t)exceptionSavedESP;
        terminal_clear();
        printk("Double Fault for exception %02X, CS:EIP = %04X:%08x, error = %08X\n", exceptionNumber, exceptionCS, exceptionEIP, exceptionCR2);
        printk ("Stack:\n");
        for (int cnt=0;cnt<10;cnt++)
   19caf:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:306 (discriminator 1)
   19cb3:	83 7d f0 09          	cmp    DWORD PTR [ebp-0x10],0x9
   19cb7:	7e cf                	jle    19c88 <doubleFaultHandler+0x5d>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:311
        {
            printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
            esp+=4;
        }
    __asm__("cli");
   19cb9:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:312
    __asm__("hlt");
   19cba:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:313
   19cbb:	90                   	nop
   19cbc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   19cbf:	c9                   	leave  
   19cc0:	c3                   	ret    
   19cc1:	66 90                	xchg   ax,ax
   19cc3:	90                   	nop

00019cc4 <rdmsr64>:
rdmsr64():
/home/yogi/src/os/chrisOS/src/cpu/msr.c:4
#include "i386/cpu.h"

uint64_t rdmsr64(unsigned index)
{
   19cc4:	55                   	push   ebp
   19cc5:	89 e5                	mov    ebp,esp
   19cc7:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/msr.c:7
    unsigned long long ret;

    __asm__ ("rdmsr" : "=A"(ret) : "c"(index));
   19cca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19ccd:	89 c1                	mov    ecx,eax
   19ccf:	0f 32                	rdmsr  
   19cd1:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   19cd4:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/chrisOS/src/cpu/msr.c:8
    return ret;
   19cd7:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   19cda:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/cpu/msr.c:9
}
   19cdd:	c9                   	leave  
   19cde:	c3                   	ret    

00019cdf <rdmsr32>:
rdmsr32():
/home/yogi/src/os/chrisOS/src/cpu/msr.c:12

void rdmsr32(unsigned index,uint32_t* loVal, uint32_t* hiVal)
{
   19cdf:	55                   	push   ebp
   19ce0:	89 e5                	mov    ebp,esp
   19ce2:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/msr.c:13
    unsigned long long lTemp = rdmsr64(index);
   19ce5:	83 ec 04             	sub    esp,0x4
   19ce8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   19ceb:	e8 d4 ff ff ff       	call   19cc4 <rdmsr64>
   19cf0:	83 c4 08             	add    esp,0x8
   19cf3:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   19cf6:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/chrisOS/src/cpu/msr.c:14
    *hiVal = lTemp >> 32;
   19cf9:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   19cfc:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   19cff:	89 d0                	mov    eax,edx
   19d01:	31 d2                	xor    edx,edx
   19d03:	89 c2                	mov    edx,eax
   19d05:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   19d08:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/msr.c:15
    *loVal = lTemp & 0xFFFFFFFF;
   19d0a:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   19d0d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19d10:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/msr.c:16
}
   19d12:	90                   	nop
   19d13:	c9                   	leave  
   19d14:	c3                   	ret    

00019d15 <wrmsr64>:
wrmsr64():
/home/yogi/src/os/chrisOS/src/cpu/msr.c:19

void wrmsr64(unsigned index, uint64_t val)
{
   19d15:	55                   	push   ebp
   19d16:	89 e5                	mov    ebp,esp
   19d18:	83 ec 08             	sub    esp,0x8
   19d1b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19d1e:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   19d21:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   19d24:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/cpu/msr.c:20
    __asm__ volatile ("wrmsr" : : "c"(index), "A"(val));
   19d27:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   19d2a:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   19d2d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   19d30:	0f 30                	wrmsr  
/home/yogi/src/os/chrisOS/src/cpu/msr.c:21
}
   19d32:	90                   	nop
   19d33:	c9                   	leave  
   19d34:	c3                   	ret    

00019d35 <wrmsr32>:
wrmsr32():
/home/yogi/src/os/chrisOS/src/cpu/msr.c:24

void wrmsr32(unsigned index, uint32_t loVal, uint32_t hiVal)
{
   19d35:	55                   	push   ebp
   19d36:	89 e5                	mov    ebp,esp
   19d38:	57                   	push   edi
   19d39:	56                   	push   esi
   19d3a:	53                   	push   ebx
   19d3b:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOS/src/cpu/msr.c:27
    //NOTE: hiVal=EDX, loVal=EAX
    //asm volatile ("wrmsr" : : "c"(index), "a"(eaxVal), "d" edxVal);
    wrmsr64(index, ((uint64_t)hiVal << 32) | loVal);
   19d3e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   19d41:	bb 00 00 00 00       	mov    ebx,0x0
   19d46:	89 cb                	mov    ebx,ecx
   19d48:	b9 00 00 00 00       	mov    ecx,0x0
   19d4d:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
   19d50:	bf 00 00 00 00       	mov    edi,0x0
   19d55:	89 c8                	mov    eax,ecx
   19d57:	09 f0                	or     eax,esi
   19d59:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   19d5c:	89 d8                	mov    eax,ebx
   19d5e:	09 f8                	or     eax,edi
   19d60:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
   19d63:	83 ec 04             	sub    esp,0x4
   19d66:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   19d69:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   19d6c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   19d6f:	e8 a1 ff ff ff       	call   19d15 <wrmsr64>
   19d74:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/msr.c:29
    
}
   19d77:	90                   	nop
   19d78:	8d 65 f4             	lea    esp,[ebp-0xc]
   19d7b:	5b                   	pop    ebx
   19d7c:	5e                   	pop    esi
   19d7d:	5f                   	pop    edi
   19d7e:	5d                   	pop    ebp
   19d7f:	c3                   	ret    

00019d80 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   19d80:	55                   	push   ebp
   19d81:	89 e5                	mov    ebp,esp
   19d83:	83 ec 08             	sub    esp,0x8
   19d86:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   19d89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19d8c:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   19d90:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   19d93:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   19d97:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   19d9b:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   19d9c:	90                   	nop
   19d9d:	c9                   	leave  
   19d9e:	c3                   	ret    

00019d9f <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   19d9f:	55                   	push   ebp
   19da0:	89 e5                	mov    ebp,esp
   19da2:	83 ec 14             	sub    esp,0x14
   19da5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19da8:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   19dac:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   19db0:	89 c2                	mov    edx,eax
   19db2:	ec                   	in     al,dx
   19db3:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   19db6:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   19dba:	c9                   	leave  
   19dbb:	c3                   	ret    

00019dbc <IRQ_set_mask>:
IRQ_set_mask():
/home/yogi/src/os/chrisOS/src/cpu/ports.c:4
#include "io.h"
#include "i386/bits/types.h"

void IRQ_set_mask(unsigned char IRQline) {
   19dbc:	55                   	push   ebp
   19dbd:	89 e5                	mov    ebp,esp
   19dbf:	53                   	push   ebx
   19dc0:	83 ec 14             	sub    esp,0x14
   19dc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19dc6:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:8
    uint16_t port;
    uint8_t value;
 
    if(IRQline < 8) {
   19dc9:	80 7d e8 07          	cmp    BYTE PTR [ebp-0x18],0x7
   19dcd:	77 08                	ja     19dd7 <IRQ_set_mask+0x1b>
/home/yogi/src/os/chrisOS/src/cpu/ports.c:9
        port = PIC1_DATA;
   19dcf:	66 c7 45 fa 21 00    	mov    WORD PTR [ebp-0x6],0x21
   19dd5:	eb 0a                	jmp    19de1 <IRQ_set_mask+0x25>
/home/yogi/src/os/chrisOS/src/cpu/ports.c:11
    } else {
        port = PIC2_DATA;
   19dd7:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
/home/yogi/src/os/chrisOS/src/cpu/ports.c:12
        IRQline -= 8;
   19ddd:	80 6d e8 08          	sub    BYTE PTR [ebp-0x18],0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:14
    }
    value = inb(port) | (1 << IRQline);
   19de1:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   19de5:	50                   	push   eax
   19de6:	e8 b4 ff ff ff       	call   19d9f <inb>
   19deb:	83 c4 04             	add    esp,0x4
   19dee:	89 c3                	mov    ebx,eax
   19df0:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
   19df4:	ba 01 00 00 00       	mov    edx,0x1
   19df9:	89 c1                	mov    ecx,eax
   19dfb:	d3 e2                	shl    edx,cl
   19dfd:	89 d0                	mov    eax,edx
   19dff:	09 d8                	or     eax,ebx
   19e01:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:15
    outb(port, value);        
   19e04:	0f b6 55 f9          	movzx  edx,BYTE PTR [ebp-0x7]
   19e08:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   19e0c:	52                   	push   edx
   19e0d:	50                   	push   eax
   19e0e:	e8 6d ff ff ff       	call   19d80 <outb>
   19e13:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:16
}
   19e16:	90                   	nop
   19e17:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   19e1a:	c9                   	leave  
   19e1b:	c3                   	ret    

00019e1c <IRQ_clear_mask>:
IRQ_clear_mask():
/home/yogi/src/os/chrisOS/src/cpu/ports.c:18
 
void IRQ_clear_mask(unsigned char IRQline) {
   19e1c:	55                   	push   ebp
   19e1d:	89 e5                	mov    ebp,esp
   19e1f:	53                   	push   ebx
   19e20:	83 ec 14             	sub    esp,0x14
   19e23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19e26:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:22
    uint16_t port;
    uint8_t value;
 
    if(IRQline < 8) {
   19e29:	80 7d e8 07          	cmp    BYTE PTR [ebp-0x18],0x7
   19e2d:	77 08                	ja     19e37 <IRQ_clear_mask+0x1b>
/home/yogi/src/os/chrisOS/src/cpu/ports.c:23
        port = PIC1_DATA;
   19e2f:	66 c7 45 fa 21 00    	mov    WORD PTR [ebp-0x6],0x21
   19e35:	eb 0a                	jmp    19e41 <IRQ_clear_mask+0x25>
/home/yogi/src/os/chrisOS/src/cpu/ports.c:25
    } else {
        port = PIC2_DATA;
   19e37:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
/home/yogi/src/os/chrisOS/src/cpu/ports.c:26
        IRQline -= 8;
   19e3d:	80 6d e8 08          	sub    BYTE PTR [ebp-0x18],0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:28
    }
    value = inb(port) & ~(1 << IRQline);
   19e41:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   19e45:	50                   	push   eax
   19e46:	e8 54 ff ff ff       	call   19d9f <inb>
   19e4b:	83 c4 04             	add    esp,0x4
   19e4e:	89 c2                	mov    edx,eax
   19e50:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
   19e54:	bb 01 00 00 00       	mov    ebx,0x1
   19e59:	89 c1                	mov    ecx,eax
   19e5b:	d3 e3                	shl    ebx,cl
   19e5d:	89 d8                	mov    eax,ebx
   19e5f:	f7 d0                	not    eax
   19e61:	21 d0                	and    eax,edx
   19e63:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:29
    outb(port, value);        
   19e66:	0f b6 55 f9          	movzx  edx,BYTE PTR [ebp-0x7]
   19e6a:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   19e6e:	52                   	push   edx
   19e6f:	50                   	push   eax
   19e70:	e8 0b ff ff ff       	call   19d80 <outb>
   19e75:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:30
}
   19e78:	90                   	nop
   19e79:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   19e7c:	c9                   	leave  
   19e7d:	c3                   	ret    

00019e7e <PIC_remap>:
PIC_remap():
/home/yogi/src/os/chrisOS/src/cpu/ports.c:54
	offset1 - vector offset for master PIC
		vectors on the master become offset1..offset1+7
	offset2 - same for slave PIC: offset2..offset2+7
*/
void PIC_remap(int offset1, int offset2)
{
   19e7e:	55                   	push   ebp
   19e7f:	89 e5                	mov    ebp,esp
   19e81:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/ports.c:57
	unsigned char a1, a2;
 
	a1 = inb(PIC1_DATA);                        // save masks
   19e84:	6a 21                	push   0x21
   19e86:	e8 14 ff ff ff       	call   19d9f <inb>
   19e8b:	83 c4 04             	add    esp,0x4
   19e8e:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:58
	a2 = inb(PIC2_DATA);
   19e91:	68 a1 00 00 00       	push   0xa1
   19e96:	e8 04 ff ff ff       	call   19d9f <inb>
   19e9b:	83 c4 04             	add    esp,0x4
   19e9e:	88 45 fe             	mov    BYTE PTR [ebp-0x2],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:60
 
	outb(PIC1_CMD, ICW1_INIT+ICW1_ICW4);  // starts the initialization sequence (in cascade mode)
   19ea1:	6a 11                	push   0x11
   19ea3:	6a 20                	push   0x20
   19ea5:	e8 d6 fe ff ff       	call   19d80 <outb>
   19eaa:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:61
	__asm__("nop;");
   19ead:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:62
	outb(PIC2_CMD, ICW1_INIT+ICW1_ICW4);
   19eae:	6a 11                	push   0x11
   19eb0:	68 a0 00 00 00       	push   0xa0
   19eb5:	e8 c6 fe ff ff       	call   19d80 <outb>
   19eba:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:63
	__asm__("nop;");
   19ebd:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:64
	outb(PIC1_DATA, offset1);                 // ICW2: Master PIC vector offset
   19ebe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19ec1:	0f b6 c0             	movzx  eax,al
   19ec4:	50                   	push   eax
   19ec5:	6a 21                	push   0x21
   19ec7:	e8 b4 fe ff ff       	call   19d80 <outb>
   19ecc:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:65
	__asm__("nop;");
   19ecf:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:66
	outb(PIC2_DATA, offset2);                 // ICW2: Slave PIC vector offset
   19ed0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19ed3:	0f b6 c0             	movzx  eax,al
   19ed6:	50                   	push   eax
   19ed7:	68 a1 00 00 00       	push   0xa1
   19edc:	e8 9f fe ff ff       	call   19d80 <outb>
   19ee1:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:67
	__asm__("nop;");
   19ee4:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:68
	outb(PIC1_DATA, 4);                       // ICW3: tell Master PIC that there is a slave PIC at IRQ2 (0000 0100)
   19ee5:	6a 04                	push   0x4
   19ee7:	6a 21                	push   0x21
   19ee9:	e8 92 fe ff ff       	call   19d80 <outb>
   19eee:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:69
	__asm__("nop;");
   19ef1:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:70
	outb(PIC2_DATA, 2);                       // ICW3: tell Slave PIC its cascade identity (0000 0010)
   19ef2:	6a 02                	push   0x2
   19ef4:	68 a1 00 00 00       	push   0xa1
   19ef9:	e8 82 fe ff ff       	call   19d80 <outb>
   19efe:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:71
	__asm__("nop;");
   19f01:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:73
 
	outb(PIC1_DATA, ICW4_8086);
   19f02:	6a 01                	push   0x1
   19f04:	6a 21                	push   0x21
   19f06:	e8 75 fe ff ff       	call   19d80 <outb>
   19f0b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:74
	__asm__("nop;");
   19f0e:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:75
	outb(PIC2_DATA, ICW4_8086);
   19f0f:	6a 01                	push   0x1
   19f11:	68 a1 00 00 00       	push   0xa1
   19f16:	e8 65 fe ff ff       	call   19d80 <outb>
   19f1b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:76
	__asm__("nop;");
   19f1e:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:78
 
	outb(PIC1_DATA, a1);   // restore saved masks.
   19f1f:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   19f23:	50                   	push   eax
   19f24:	6a 21                	push   0x21
   19f26:	e8 55 fe ff ff       	call   19d80 <outb>
   19f2b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:79
	outb(PIC2_DATA, a2);
   19f2e:	0f b6 45 fe          	movzx  eax,BYTE PTR [ebp-0x2]
   19f32:	50                   	push   eax
   19f33:	68 a1 00 00 00       	push   0xa1
   19f38:	e8 43 fe ff ff       	call   19d80 <outb>
   19f3d:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:80
   19f40:	90                   	nop
   19f41:	c9                   	leave  
   19f42:	c3                   	ret    
   19f43:	90                   	nop

00019f44 <mpScanForConfig>:
mpScanForConfig():
/home/yogi/src/os/chrisOS/src/cpu/smp.c:19
extern uint32_t kDebugLevel;
extern mpConfig_t* kMPConfigTable;
extern uintptr_t* kIOAPICPtr;

bool HIGH_CODE_SECTION mpScanForConfig(int start, int length)
{
   19f44:	55                   	push   ebp
   19f45:	89 e5                	mov    ebp,esp
   19f47:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/smp.c:22
    struct mpf_intel* lMP;
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
   19f4a:	a1 78 98 12 00       	mov    eax,ds:0x129878
   19f4f:	25 00 08 00 00       	and    eax,0x800
   19f54:	85 c0                	test   eax,eax
   19f56:	74 1e                	je     19f76 <mpScanForConfig+0x32>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:23
        printd(DEBUG_MP,"mpScanForConfig; 0x%08X-->0x%08X\n", start, start+length);
   19f58:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   19f5b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19f5e:	01 d0                	add    eax,edx
   19f60:	50                   	push   eax
   19f61:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   19f64:	68 c0 32 08 00       	push   0x832c0
   19f69:	68 00 08 00 00       	push   0x800
   19f6e:	e8 08 d8 00 00       	call   2777b <printd>
   19f73:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:25
#endif
    for (int cnt=start;cnt<start+length;cnt++)
   19f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19f79:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   19f7c:	eb 33                	jmp    19fb1 <mpScanForConfig+0x6d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:27
    {
        lMP=(struct mpf_intel*)cnt;
   19f7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   19f81:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:28
        if(!strncmp(lMP->signature,"_MP_",4))
   19f84:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19f87:	83 ec 04             	sub    esp,0x4
   19f8a:	6a 04                	push   0x4
   19f8c:	68 e2 32 08 00       	push   0x832e2
   19f91:	50                   	push   eax
   19f92:	e8 f1 7c ff ff       	call   11c88 <strncmp>
   19f97:	83 c4 10             	add    esp,0x10
   19f9a:	85 c0                	test   eax,eax
   19f9c:	75 0f                	jne    19fad <mpScanForConfig+0x69>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:30
        {
            mp=(struct mpf_intel*)cnt;
   19f9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   19fa1:	a3 70 65 09 00       	mov    ds:0x96570,eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:31
            return true;
   19fa6:	b8 01 00 00 00       	mov    eax,0x1
   19fab:	eb 16                	jmp    19fc3 <mpScanForConfig+0x7f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:25 (discriminator 2)
    struct mpf_intel* lMP;
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
        printd(DEBUG_MP,"mpScanForConfig; 0x%08X-->0x%08X\n", start, start+length);
#endif
    for (int cnt=start;cnt<start+length;cnt++)
   19fad:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:25 (discriminator 1)
   19fb1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   19fb4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19fb7:	01 d0                	add    eax,edx
   19fb9:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   19fbc:	7f c0                	jg     19f7e <mpScanForConfig+0x3a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:34
        {
            mp=(struct mpf_intel*)cnt;
            return true;
        }
    }
    return false;
   19fbe:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:35
}
   19fc3:	c9                   	leave  
   19fc4:	c3                   	ret    

00019fc5 <mpFindTables>:
mpFindTables():
/home/yogi/src/os/chrisOS/src/cpu/smp.c:38

bool HIGH_CODE_SECTION  mpFindTables()
{
   19fc5:	55                   	push   ebp
   19fc6:	89 e5                	mov    ebp,esp
   19fc8:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/smp.c:39
    uint16_t* lEBDAPtr=(uint16_t*)0x40e;
   19fcb:	c7 45 f0 0e 04 00 00 	mov    DWORD PTR [ebp-0x10],0x40e
/home/yogi/src/os/chrisOS/src/cpu/smp.c:42
    bool lResult;
    
    if (lEBDAPtr != 0)
   19fd2:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   19fd6:	74 20                	je     19ff8 <mpFindTables+0x33>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:43
        lResult=mpScanForConfig(*lEBDAPtr<<4, 0x400);
   19fd8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19fdb:	0f b7 00             	movzx  eax,WORD PTR [eax]
   19fde:	0f b7 c0             	movzx  eax,ax
   19fe1:	c1 e0 04             	shl    eax,0x4
   19fe4:	83 ec 08             	sub    esp,0x8
   19fe7:	68 00 04 00 00       	push   0x400
   19fec:	50                   	push   eax
   19fed:	e8 52 ff ff ff       	call   19f44 <mpScanForConfig>
   19ff2:	83 c4 10             	add    esp,0x10
   19ff5:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:44
    if (!lResult)
   19ff8:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   19ffc:	83 f0 01             	xor    eax,0x1
   19fff:	84 c0                	test   al,al
   1a001:	74 62                	je     1a065 <mpFindTables+0xa0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:45
        if (!mpScanForConfig(0x9fc00, 0x400))
   1a003:	83 ec 08             	sub    esp,0x8
   1a006:	68 00 04 00 00       	push   0x400
   1a00b:	68 00 fc 09 00       	push   0x9fc00
   1a010:	e8 2f ff ff ff       	call   19f44 <mpScanForConfig>
   1a015:	83 c4 10             	add    esp,0x10
   1a018:	83 f0 01             	xor    eax,0x1
   1a01b:	84 c0                	test   al,al
   1a01d:	74 46                	je     1a065 <mpFindTables+0xa0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:46
            if (!mpScanForConfig(0xF0000, 0xFFFF))
   1a01f:	83 ec 08             	sub    esp,0x8
   1a022:	68 ff ff 00 00       	push   0xffff
   1a027:	68 00 00 0f 00       	push   0xf0000
   1a02c:	e8 13 ff ff ff       	call   19f44 <mpScanForConfig>
   1a031:	83 c4 10             	add    esp,0x10
   1a034:	83 f0 01             	xor    eax,0x1
   1a037:	84 c0                	test   al,al
   1a039:	74 2a                	je     1a065 <mpFindTables+0xa0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:49
            {
#ifndef DEBUG_NONE
                 if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
   1a03b:	a1 78 98 12 00       	mov    eax,ds:0x129878
   1a040:	25 00 08 00 00       	and    eax,0x800
   1a045:	85 c0                	test   eax,eax
   1a047:	74 15                	je     1a05e <mpFindTables+0x99>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:50
                    printd(DEBUG_MP,"MP tables not found, MP not allowed, proceeding as single processor.\n");
   1a049:	83 ec 08             	sub    esp,0x8
   1a04c:	68 e8 32 08 00       	push   0x832e8
   1a051:	68 00 08 00 00       	push   0x800
   1a056:	e8 20 d7 00 00       	call   2777b <printd>
   1a05b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:52
#endif
                return false;
   1a05e:	b8 00 00 00 00       	mov    eax,0x0
   1a063:	eb 38                	jmp    1a09d <mpFindTables+0xd8>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:55
            }
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
   1a065:	a1 78 98 12 00       	mov    eax,ds:0x129878
   1a06a:	25 00 08 00 00       	and    eax,0x800
   1a06f:	85 c0                	test   eax,eax
   1a071:	74 25                	je     1a098 <mpFindTables+0xd3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:56
        printd(DEBUG_MP,"MP tables found at 0x%08X, spec %c\n", mp, mp->specification);
   1a073:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a078:	0f b6 40 09          	movzx  eax,BYTE PTR [eax+0x9]
   1a07c:	0f b6 d0             	movzx  edx,al
   1a07f:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a084:	52                   	push   edx
   1a085:	50                   	push   eax
   1a086:	68 30 33 08 00       	push   0x83330
   1a08b:	68 00 08 00 00       	push   0x800
   1a090:	e8 e6 d6 00 00       	call   2777b <printd>
   1a095:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:58
#endif
    return true;
   1a098:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:60
        
}
   1a09d:	c9                   	leave  
   1a09e:	c3                   	ret    

0001a09f <printMPTable>:
printMPTable():
/home/yogi/src/os/chrisOS/src/cpu/smp.c:63

void HIGH_CODE_SECTION printMPTable()
{
   1a09f:	55                   	push   ebp
   1a0a0:	89 e5                	mov    ebp,esp
   1a0a2:	57                   	push   edi
   1a0a3:	56                   	push   esi
   1a0a4:	53                   	push   ebx
   1a0a5:	83 ec 2c             	sub    esp,0x2c
/home/yogi/src/os/chrisOS/src/cpu/smp.c:64
    mpConfig_t* mpptr=kMPConfigTable;
   1a0a8:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a0ad:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:65
    int cnt=0;
   1a0b0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:67
    
    while (mpptr->nextRecAddress!=0xFFFFFFFF)
   1a0b7:	e9 d5 03 00 00       	jmp    1a491 <printMPTable+0x3f2>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:69
    {
        switch (mpptr->recType)
   1a0bc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a0bf:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   1a0c2:	83 f8 04             	cmp    eax,0x4
   1a0c5:	0f 87 d7 03 00 00    	ja     1a4a2 <printMPTable+0x403>
   1a0cb:	8b 04 85 98 34 08 00 	mov    eax,DWORD PTR [eax*4+0x83498]
   1a0d2:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72
        {
            case CPU:
                printk("CPU: APICId=%u, Enabled=%s, %s\n", mpptr->cpu.apicid, (mpptr->cpu.cpuflag&0x1)?"yes":"no", (mpptr->cpu.cpuflag&0x2)?"BSP":"");
   1a0d4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a0d7:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a0db:	0f b6 c0             	movzx  eax,al
   1a0de:	83 e0 02             	and    eax,0x2
   1a0e1:	85 c0                	test   eax,eax
   1a0e3:	74 07                	je     1a0ec <printMPTable+0x4d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 1)
   1a0e5:	b9 54 33 08 00       	mov    ecx,0x83354
   1a0ea:	eb 05                	jmp    1a0f1 <printMPTable+0x52>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 2)
   1a0ec:	b9 58 33 08 00       	mov    ecx,0x83358
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 4)
   1a0f1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a0f4:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a0f8:	0f b6 c0             	movzx  eax,al
   1a0fb:	83 e0 01             	and    eax,0x1
   1a0fe:	85 c0                	test   eax,eax
   1a100:	74 07                	je     1a109 <printMPTable+0x6a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 5)
   1a102:	ba 59 33 08 00       	mov    edx,0x83359
   1a107:	eb 05                	jmp    1a10e <printMPTable+0x6f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 6)
   1a109:	ba 5d 33 08 00       	mov    edx,0x8335d
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 8)
   1a10e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a111:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a115:	0f b6 c0             	movzx  eax,al
   1a118:	51                   	push   ecx
   1a119:	52                   	push   edx
   1a11a:	50                   	push   eax
   1a11b:	68 60 33 08 00       	push   0x83360
   1a120:	e8 36 d6 00 00       	call   2775b <printk>
   1a125:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:73 (discriminator 8)
                break;
   1a128:	e9 16 03 00 00       	jmp    1a443 <printMPTable+0x3a4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:75
            case BUS:
                printk("BUS: ID=%u, BusType=%c%c%c%c%c%c, Type=%c\n", mpptr->bus.busid, mpptr->bus.bustype[0], mpptr->bus.bustype[1], mpptr->bus.bustype[2], mpptr->bus.bustype[3], mpptr->bus.bustype[4], mpptr->bus.bustype[5], mpptr->bus.type );
   1a12d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a130:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a133:	0f b6 c8             	movzx  ecx,al
   1a136:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a139:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
   1a13d:	0f b6 c0             	movzx  eax,al
   1a140:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
   1a143:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a146:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
   1a14a:	0f b6 f0             	movzx  esi,al
   1a14d:	89 75 d0             	mov    DWORD PTR [ebp-0x30],esi
   1a150:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a153:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
   1a157:	0f b6 f8             	movzx  edi,al
   1a15a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a15d:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
   1a161:	0f b6 f0             	movzx  esi,al
   1a164:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a167:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a16b:	0f b6 d8             	movzx  ebx,al
   1a16e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a171:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1a175:	0f b6 d0             	movzx  edx,al
   1a178:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a17b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a17f:	0f b6 c0             	movzx  eax,al
   1a182:	83 ec 0c             	sub    esp,0xc
   1a185:	51                   	push   ecx
   1a186:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   1a189:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   1a18c:	57                   	push   edi
   1a18d:	56                   	push   esi
   1a18e:	53                   	push   ebx
   1a18f:	52                   	push   edx
   1a190:	50                   	push   eax
   1a191:	68 80 33 08 00       	push   0x83380
   1a196:	e8 c0 d5 00 00       	call   2775b <printk>
   1a19b:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:76
                break;
   1a19e:	e9 a0 02 00 00       	jmp    1a443 <printMPTable+0x3a4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:78
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
   1a1a3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a1a6:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a1aa:	0f b6 c0             	movzx  eax,al
   1a1ad:	83 e0 01             	and    eax,0x1
   1a1b0:	85 c0                	test   eax,eax
   1a1b2:	74 07                	je     1a1bb <printMPTable+0x11c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:78 (discriminator 1)
   1a1b4:	b9 59 33 08 00       	mov    ecx,0x83359
   1a1b9:	eb 05                	jmp    1a1c0 <printMPTable+0x121>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:78 (discriminator 2)
   1a1bb:	b9 5d 33 08 00       	mov    ecx,0x8335d
/home/yogi/src/os/chrisOS/src/cpu/smp.c:78 (discriminator 4)
   1a1c0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a1c3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1a1c6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a1c9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a1cd:	0f b6 c0             	movzx  eax,al
   1a1d0:	51                   	push   ecx
   1a1d1:	52                   	push   edx
   1a1d2:	50                   	push   eax
   1a1d3:	68 ac 33 08 00       	push   0x833ac
   1a1d8:	e8 7e d5 00 00       	call   2775b <printk>
   1a1dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:79 (discriminator 4)
                break;
   1a1e0:	e9 5e 02 00 00       	jmp    1a443 <printMPTable+0x3a4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   1a1e5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a1e8:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a1ec:	0f b6 c0             	movzx  eax,al
   1a1ef:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   1a1f2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a1f5:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a1f9:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   1a1fc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a1ff:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a203:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   1a206:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a209:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a20d:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:90
                            :mpptr->irqSrc.irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
   1a210:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a213:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a217:	0f b7 c0             	movzx  eax,ax
   1a21a:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a21d:	85 c0                	test   eax,eax
   1a21f:	74 39                	je     1a25a <printMPTable+0x1bb>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:91
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
   1a221:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a224:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a228:	0f b7 c0             	movzx  eax,ax
   1a22b:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
   1a22e:	83 f8 04             	cmp    eax,0x4
   1a231:	74 20                	je     1a253 <printMPTable+0x1b4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92 (discriminator 1)
   1a233:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a236:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a23a:	0f b7 c0             	movzx  eax,ax
   1a23d:	83 e0 0c             	and    eax,0xc
   1a240:	83 f8 08             	cmp    eax,0x8
   1a243:	75 07                	jne    1a24c <printMPTable+0x1ad>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92 (discriminator 3)
   1a245:	b9 d8 33 08 00       	mov    ecx,0x833d8
   1a24a:	eb 13                	jmp    1a25f <printMPTable+0x1c0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92 (discriminator 4)
   1a24c:	b9 da 33 08 00       	mov    ecx,0x833da
   1a251:	eb 0c                	jmp    1a25f <printMPTable+0x1c0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92 (discriminator 2)
   1a253:	b9 dc 33 08 00       	mov    ecx,0x833dc
   1a258:	eb 05                	jmp    1a25f <printMPTable+0x1c0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 1)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a25a:	b9 e1 33 08 00       	mov    ecx,0x833e1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:87 (discriminator 3)
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
                            :mpptr->irqSrc.irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
   1a25f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a262:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a266:	0f b7 c0             	movzx  eax,ax
   1a269:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 3)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a26c:	85 c0                	test   eax,eax
   1a26e:	74 39                	je     1a2a9 <printMPTable+0x20a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:88
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
                            :mpptr->irqSrc.irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
   1a270:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a273:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a277:	0f b7 c0             	movzx  eax,ax
   1a27a:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   1a27d:	83 f8 01             	cmp    eax,0x1
   1a280:	74 20                	je     1a2a2 <printMPTable+0x203>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89 (discriminator 1)
   1a282:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a285:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a289:	0f b7 c0             	movzx  eax,ax
   1a28c:	83 e0 03             	and    eax,0x3
   1a28f:	83 f8 02             	cmp    eax,0x2
   1a292:	75 07                	jne    1a29b <printMPTable+0x1fc>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89 (discriminator 3)
   1a294:	ba e3 33 08 00       	mov    edx,0x833e3
   1a299:	eb 13                	jmp    1a2ae <printMPTable+0x20f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89 (discriminator 4)
   1a29b:	ba e7 33 08 00       	mov    edx,0x833e7
   1a2a0:	eb 0c                	jmp    1a2ae <printMPTable+0x20f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89 (discriminator 2)
   1a2a2:	ba ed 33 08 00       	mov    edx,0x833ed
   1a2a7:	eb 05                	jmp    1a2ae <printMPTable+0x20f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 4)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a2a9:	ba f0 33 08 00       	mov    edx,0x833f0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:82 (discriminator 6)
                        mpptr->irqSrc.irqtype==0?"INT"                      
   1a2ae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a2b1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 6)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a2b5:	84 c0                	test   al,al
   1a2b7:	74 3d                	je     1a2f6 <printMPTable+0x257>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:83
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
   1a2b9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a2bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:84
                            :mpptr->irqSrc.irqtype==2?"SMI"
   1a2c0:	3c 01                	cmp    al,0x1
   1a2c2:	74 2b                	je     1a2ef <printMPTable+0x250>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:84 (discriminator 1)
   1a2c4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a2c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:85 (discriminator 1)
                            :mpptr->irqSrc.irqtype==3?"Ext"
   1a2cb:	3c 02                	cmp    al,0x2
   1a2cd:	74 19                	je     1a2e8 <printMPTable+0x249>
   1a2cf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a2d2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:86 (discriminator 1)
                            :"unk",                                 //iType
   1a2d6:	3c 03                	cmp    al,0x3
   1a2d8:	75 07                	jne    1a2e1 <printMPTable+0x242>
   1a2da:	b8 f3 33 08 00       	mov    eax,0x833f3
   1a2df:	eb 1a                	jmp    1a2fb <printMPTable+0x25c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:86 (discriminator 2)
   1a2e1:	b8 f7 33 08 00       	mov    eax,0x833f7
   1a2e6:	eb 13                	jmp    1a2fb <printMPTable+0x25c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:85 (discriminator 2)
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
                            :mpptr->irqSrc.irqtype==3?"Ext"
   1a2e8:	b8 fb 33 08 00       	mov    eax,0x833fb
   1a2ed:	eb 0c                	jmp    1a2fb <printMPTable+0x25c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:84 (discriminator 2)
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
   1a2ef:	b8 ff 33 08 00       	mov    eax,0x833ff
   1a2f4:	eb 05                	jmp    1a2fb <printMPTable+0x25c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 7)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a2f6:	b8 03 34 08 00       	mov    eax,0x83403
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 9)
   1a2fb:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   1a2fe:	57                   	push   edi
   1a2ff:	56                   	push   esi
   1a300:	53                   	push   ebx
   1a301:	51                   	push   ecx
   1a302:	52                   	push   edx
   1a303:	50                   	push   eax
   1a304:	68 08 34 08 00       	push   0x83408
   1a309:	e8 4d d4 00 00       	call   2775b <printk>
   1a30e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:94 (discriminator 9)
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
   1a311:	e9 2d 01 00 00       	jmp    1a443 <printMPTable+0x3a4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   1a316:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a319:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a31d:	0f b6 c0             	movzx  eax,al
   1a320:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   1a323:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a326:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a32a:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   1a32d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a330:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a334:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   1a337:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a33a:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a33e:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:105
                            :mpptr->lintSrc.irqtype==3?"Ext"
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
   1a341:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a344:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a348:	0f b7 c0             	movzx  eax,ax
   1a34b:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a34e:	85 c0                	test   eax,eax
   1a350:	74 39                	je     1a38b <printMPTable+0x2ec>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:106
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
   1a352:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a355:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a359:	0f b7 c0             	movzx  eax,ax
   1a35c:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
   1a35f:	83 f8 04             	cmp    eax,0x4
   1a362:	74 20                	je     1a384 <printMPTable+0x2e5>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107 (discriminator 1)
   1a364:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a367:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a36b:	0f b7 c0             	movzx  eax,ax
   1a36e:	83 e0 0c             	and    eax,0xc
   1a371:	83 f8 08             	cmp    eax,0x8
   1a374:	75 07                	jne    1a37d <printMPTable+0x2de>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107 (discriminator 3)
   1a376:	b9 d8 33 08 00       	mov    ecx,0x833d8
   1a37b:	eb 13                	jmp    1a390 <printMPTable+0x2f1>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107 (discriminator 4)
   1a37d:	b9 da 33 08 00       	mov    ecx,0x833da
   1a382:	eb 0c                	jmp    1a390 <printMPTable+0x2f1>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107 (discriminator 2)
   1a384:	b9 dc 33 08 00       	mov    ecx,0x833dc
   1a389:	eb 05                	jmp    1a390 <printMPTable+0x2f1>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 1)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a38b:	b9 e1 33 08 00       	mov    ecx,0x833e1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:102 (discriminator 3)
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
                            :mpptr->lintSrc.irqtype==3?"Ext"
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
   1a390:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a393:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a397:	0f b7 c0             	movzx  eax,ax
   1a39a:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 3)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a39d:	85 c0                	test   eax,eax
   1a39f:	74 39                	je     1a3da <printMPTable+0x33b>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:103
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
                            :mpptr->lintSrc.irqtype==3?"Ext"
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
   1a3a1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a3a4:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a3a8:	0f b7 c0             	movzx  eax,ax
   1a3ab:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   1a3ae:	83 f8 01             	cmp    eax,0x1
   1a3b1:	74 20                	je     1a3d3 <printMPTable+0x334>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104 (discriminator 1)
   1a3b3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a3b6:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a3ba:	0f b7 c0             	movzx  eax,ax
   1a3bd:	83 e0 03             	and    eax,0x3
   1a3c0:	83 f8 02             	cmp    eax,0x2
   1a3c3:	75 07                	jne    1a3cc <printMPTable+0x32d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104 (discriminator 3)
   1a3c5:	ba e3 33 08 00       	mov    edx,0x833e3
   1a3ca:	eb 13                	jmp    1a3df <printMPTable+0x340>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104 (discriminator 4)
   1a3cc:	ba e7 33 08 00       	mov    edx,0x833e7
   1a3d1:	eb 0c                	jmp    1a3df <printMPTable+0x340>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104 (discriminator 2)
   1a3d3:	ba ed 33 08 00       	mov    edx,0x833ed
   1a3d8:	eb 05                	jmp    1a3df <printMPTable+0x340>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 4)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a3da:	ba f0 33 08 00       	mov    edx,0x833f0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:97 (discriminator 6)
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
   1a3df:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a3e2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 6)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a3e6:	84 c0                	test   al,al
   1a3e8:	74 3d                	je     1a427 <printMPTable+0x388>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:98
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
   1a3ea:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a3ed:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:99
                            :mpptr->lintSrc.irqtype==2?"SMI"
   1a3f1:	3c 01                	cmp    al,0x1
   1a3f3:	74 2b                	je     1a420 <printMPTable+0x381>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:99 (discriminator 1)
   1a3f5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a3f8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:100 (discriminator 1)
                            :mpptr->lintSrc.irqtype==3?"Ext"
   1a3fc:	3c 02                	cmp    al,0x2
   1a3fe:	74 19                	je     1a419 <printMPTable+0x37a>
   1a400:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a403:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:101 (discriminator 1)
                            :"unk", //iType
   1a407:	3c 03                	cmp    al,0x3
   1a409:	75 07                	jne    1a412 <printMPTable+0x373>
   1a40b:	b8 f3 33 08 00       	mov    eax,0x833f3
   1a410:	eb 1a                	jmp    1a42c <printMPTable+0x38d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:101 (discriminator 2)
   1a412:	b8 f7 33 08 00       	mov    eax,0x833f7
   1a417:	eb 13                	jmp    1a42c <printMPTable+0x38d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:100 (discriminator 2)
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
                            :mpptr->lintSrc.irqtype==3?"Ext"
   1a419:	b8 fb 33 08 00       	mov    eax,0x833fb
   1a41e:	eb 0c                	jmp    1a42c <printMPTable+0x38d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:99 (discriminator 2)
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
   1a420:	b8 ff 33 08 00       	mov    eax,0x833ff
   1a425:	eb 05                	jmp    1a42c <printMPTable+0x38d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 7)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a427:	b8 03 34 08 00       	mov    eax,0x83403
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 9)
   1a42c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   1a42f:	57                   	push   edi
   1a430:	56                   	push   esi
   1a431:	53                   	push   ebx
   1a432:	51                   	push   ecx
   1a433:	52                   	push   edx
   1a434:	50                   	push   eax
   1a435:	68 40 34 08 00       	push   0x83440
   1a43a:	e8 1c d3 00 00       	call   2775b <printk>
   1a43f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:109 (discriminator 9)
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
                break;
   1a442:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/smp.c:113
            default:
                return;
        }
        mpptr++;
   1a443:	83 45 e4 20          	add    DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:114
        cnt++;
   1a447:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:115
        if (cnt>0 && ((cnt+2)%cursorGetMaxY())==0)
   1a44b:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a44f:	7e 40                	jle    1a491 <printMPTable+0x3f2>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:115 (discriminator 1)
   1a451:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1a454:	8d 58 02             	lea    ebx,[eax+0x2]
   1a457:	e8 ef de ff ff       	call   1834b <cursorGetMaxY>
   1a45c:	89 c1                	mov    ecx,eax
   1a45e:	89 d8                	mov    eax,ebx
   1a460:	99                   	cdq    
   1a461:	f7 f9                	idiv   ecx
   1a463:	89 d0                	mov    eax,edx
   1a465:	85 c0                	test   eax,eax
   1a467:	75 28                	jne    1a491 <printMPTable+0x3f2>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:117
        {
            puts("Paused, press a key to continue");
   1a469:	83 ec 0c             	sub    esp,0xc
   1a46c:	68 78 34 08 00       	push   0x83478
   1a471:	e8 94 df ff ff       	call   1840a <puts>
   1a476:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:118
            waitForKeyboardKey();
   1a479:	e8 e1 6d ff ff       	call   1125f <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:119
            cursorMoveTo(0,cursorGetPosY());
   1a47e:	e8 f8 de ff ff       	call   1837b <cursorGetPosY>
   1a483:	83 ec 08             	sub    esp,0x8
   1a486:	50                   	push   eax
   1a487:	6a 00                	push   0x0
   1a489:	e8 4d de ff ff       	call   182db <cursorMoveTo>
   1a48e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:67
void HIGH_CODE_SECTION printMPTable()
{
    mpConfig_t* mpptr=kMPConfigTable;
    int cnt=0;
    
    while (mpptr->nextRecAddress!=0xFFFFFFFF)
   1a491:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a494:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   1a497:	83 f8 ff             	cmp    eax,0xffffffff
   1a49a:	0f 85 1c fc ff ff    	jne    1a0bc <printMPTable+0x1d>
   1a4a0:	eb 01                	jmp    1a4a3 <printMPTable+0x404>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:111
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
                break;
            default:
                return;
   1a4a2:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/smp.c:123
            waitForKeyboardKey();
            cursorMoveTo(0,cursorGetPosY());
        }

    }
}
   1a4a3:	8d 65 f4             	lea    esp,[ebp-0xc]
   1a4a6:	5b                   	pop    ebx
   1a4a7:	5e                   	pop    esi
   1a4a8:	5f                   	pop    edi
   1a4a9:	5d                   	pop    ebp
   1a4aa:	c3                   	ret    

0001a4ab <mpInit>:
mpInit():
/home/yogi/src/os/chrisOS/src/cpu/smp.c:126

unsigned HIGH_CODE_SECTION mpInit()
{
   1a4ab:	55                   	push   ebp
   1a4ac:	89 e5                	mov    ebp,esp
   1a4ae:	57                   	push   edi
   1a4af:	56                   	push   esi
   1a4b0:	53                   	push   ebx
   1a4b1:	83 ec 5c             	sub    esp,0x5c
/home/yogi/src/os/chrisOS/src/cpu/smp.c:129
    uint8_t* recPtr;
    char lTempString[15];
    memset(lTempString, 0, 15);
   1a4b4:	83 ec 04             	sub    esp,0x4
   1a4b7:	6a 0f                	push   0xf
   1a4b9:	6a 00                	push   0x0
   1a4bb:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a4be:	50                   	push   eax
   1a4bf:	e8 45 b1 00 00       	call   25609 <memset>
   1a4c4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:130
    mpFindTables();
   1a4c7:	e8 f9 fa ff ff       	call   19fc5 <mpFindTables>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:131
    printd(DEBUG_MP,"MP table found @ 0x%08X, sig=%c%c%c%c, features=%u/%u/%u/%u/%u, length=%u\n", mp, mp->signature[0], mp->signature[1], mp->signature[2], mp->signature[3], mp->feature1, mp->feature2, mp->feature3, mp->feature4, mp->feature5, mp->length);
   1a4cc:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a4d1:	0f b6 40 08          	movzx  eax,BYTE PTR [eax+0x8]
   1a4d5:	0f b6 f0             	movzx  esi,al
   1a4d8:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a4dd:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   1a4e1:	0f b6 f8             	movzx  edi,al
   1a4e4:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a4e9:	0f b6 40 0e          	movzx  eax,BYTE PTR [eax+0xe]
   1a4ed:	0f b6 c0             	movzx  eax,al
   1a4f0:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
   1a4f3:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a4f8:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
   1a4fc:	0f b6 d8             	movzx  ebx,al
   1a4ff:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
   1a502:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a507:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
   1a50b:	0f b6 c8             	movzx  ecx,al
   1a50e:	89 4d ac             	mov    DWORD PTR [ebp-0x54],ecx
   1a511:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a516:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1a51a:	0f b6 d0             	movzx  edx,al
   1a51d:	89 55 a8             	mov    DWORD PTR [ebp-0x58],edx
   1a520:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a525:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a529:	0f be c0             	movsx  eax,al
   1a52c:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
   1a52f:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a534:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1a538:	0f be d8             	movsx  ebx,al
   1a53b:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a540:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a544:	0f be c8             	movsx  ecx,al
   1a547:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a54c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a54f:	0f be d0             	movsx  edx,al
   1a552:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a557:	83 ec 0c             	sub    esp,0xc
   1a55a:	56                   	push   esi
   1a55b:	57                   	push   edi
   1a55c:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1a55f:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
   1a562:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
   1a565:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
   1a568:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
   1a56b:	53                   	push   ebx
   1a56c:	51                   	push   ecx
   1a56d:	52                   	push   edx
   1a56e:	50                   	push   eax
   1a56f:	68 ac 34 08 00       	push   0x834ac
   1a574:	68 00 08 00 00       	push   0x800
   1a579:	e8 fd d1 00 00       	call   2777b <printd>
   1a57e:	83 c4 40             	add    esp,0x40
/home/yogi/src/os/chrisOS/src/cpu/smp.c:132
    if (mp->feature1!=0)
   1a581:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a586:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1a58a:	84 c0                	test   al,al
   1a58c:	74 27                	je     1a5b5 <mpInit+0x10a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:134
    {
        printk("NOTE: need to implement Intel MP default configurations (%u)",mp->feature1);
   1a58e:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a593:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1a597:	0f b6 c0             	movzx  eax,al
   1a59a:	83 ec 08             	sub    esp,0x8
   1a59d:	50                   	push   eax
   1a59e:	68 f8 34 08 00       	push   0x834f8
   1a5a3:	e8 b3 d1 00 00       	call   2775b <printk>
   1a5a8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:135
        return false;
   1a5ab:	b8 00 00 00 00       	mov    eax,0x0
   1a5b0:	e9 12 0a 00 00       	jmp    1afc7 <mpInit+0xb1c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:137
    }
    mc=(struct mpc_table*)mp->physptr;
   1a5b5:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a5ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1a5bd:	a3 6c 65 09 00       	mov    ds:0x9656c,eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:138
    printd(DEBUG_MP,"MC table found @ 0x%08X, sig=%c%c%c%c, length=%u, lapic=0x%08X, OEM tbl=0x%08X\n", mc, mc->signature[0], mc->signature[1], mc->signature[2], mc->signature[3], mc->length, mc->lapic, mc->oemptr);
   1a5c2:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a5c7:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
   1a5ca:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a5cf:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   1a5d2:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
   1a5d5:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a5da:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
   1a5de:	0f b7 f0             	movzx  esi,ax
   1a5e1:	89 75 b0             	mov    DWORD PTR [ebp-0x50],esi
   1a5e4:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a5e9:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a5ed:	0f be f8             	movsx  edi,al
   1a5f0:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a5f5:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1a5f9:	0f be f0             	movsx  esi,al
   1a5fc:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a601:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a605:	0f be d8             	movsx  ebx,al
   1a608:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a60d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a610:	0f be d0             	movsx  edx,al
   1a613:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a618:	83 ec 08             	sub    esp,0x8
   1a61b:	51                   	push   ecx
   1a61c:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1a61f:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
   1a622:	57                   	push   edi
   1a623:	56                   	push   esi
   1a624:	53                   	push   ebx
   1a625:	52                   	push   edx
   1a626:	50                   	push   eax
   1a627:	68 38 35 08 00       	push   0x83538
   1a62c:	68 00 08 00 00       	push   0x800
   1a631:	e8 45 d1 00 00       	call   2777b <printd>
   1a636:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:139
    memcpy(lTempString, mc->oem,4);
   1a639:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a63e:	83 c0 08             	add    eax,0x8
   1a641:	83 ec 04             	sub    esp,0x4
   1a644:	6a 04                	push   0x4
   1a646:	50                   	push   eax
   1a647:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a64a:	50                   	push   eax
   1a64b:	e8 6c ba 00 00       	call   260bc <memcpy>
   1a650:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:140
    printd(DEBUG_MP,"\tMPC OEM '%s'", lTempString);
   1a653:	83 ec 04             	sub    esp,0x4
   1a656:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a659:	50                   	push   eax
   1a65a:	68 88 35 08 00       	push   0x83588
   1a65f:	68 00 08 00 00       	push   0x800
   1a664:	e8 12 d1 00 00       	call   2777b <printd>
   1a669:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:141
    memset(lTempString, 0, 15);
   1a66c:	83 ec 04             	sub    esp,0x4
   1a66f:	6a 0f                	push   0xf
   1a671:	6a 00                	push   0x0
   1a673:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a676:	50                   	push   eax
   1a677:	e8 8d af 00 00       	call   25609 <memset>
   1a67c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:142
        memcpy(lTempString, mc->productid,12);
   1a67f:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a684:	83 c0 10             	add    eax,0x10
   1a687:	83 ec 04             	sub    esp,0x4
   1a68a:	6a 0c                	push   0xc
   1a68c:	50                   	push   eax
   1a68d:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a690:	50                   	push   eax
   1a691:	e8 26 ba 00 00       	call   260bc <memcpy>
   1a696:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:143
    printd(DEBUG_MP,", product '%s': %s\n", lTempString);
   1a699:	83 ec 04             	sub    esp,0x4
   1a69c:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a69f:	50                   	push   eax
   1a6a0:	68 96 35 08 00       	push   0x83596
   1a6a5:	68 00 08 00 00       	push   0x800
   1a6aa:	e8 cc d0 00 00       	call   2777b <printd>
   1a6af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:144
    recPtr=(uint8_t*)mp->physptr+sizeof(struct mpc_table);
   1a6b2:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a6b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1a6ba:	83 c0 2c             	add    eax,0x2c
   1a6bd:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:145
    printd(DEBUG_MP,"Parsing MC %u table entries at 0x%08X\n", mc->count, recPtr);
   1a6c0:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a6c5:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a6c9:	0f b7 c0             	movzx  eax,ax
   1a6cc:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a6cf:	50                   	push   eax
   1a6d0:	68 ac 35 08 00       	push   0x835ac
   1a6d5:	68 00 08 00 00       	push   0x800
   1a6da:	e8 9c d0 00 00       	call   2777b <printd>
   1a6df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:146
    for (int cnt=0;cnt< mc->count;cnt++)
   1a6e2:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   1a6e9:	e9 6f 08 00 00       	jmp    1af5d <mpInit+0xab2>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:148
    {
        switch((int)*(uint8_t*)recPtr)
   1a6ee:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a6f1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a6f4:	0f b6 c0             	movzx  eax,al
   1a6f7:	83 f8 04             	cmp    eax,0x4
   1a6fa:	0f 87 04 08 00 00    	ja     1af04 <mpInit+0xa59>
   1a700:	8b 04 85 18 37 08 00 	mov    eax,DWORD PTR [eax*4+0x83718]
   1a707:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:152
        {
            case 0:
                //TODO: Add all this info to a kernel structure
                printd(DEBUG_MP,"\tCPU:  ");
   1a709:	83 ec 08             	sub    esp,0x8
   1a70c:	68 d3 35 08 00       	push   0x835d3
   1a711:	68 00 08 00 00       	push   0x800
   1a716:	e8 60 d0 00 00       	call   2777b <printd>
   1a71b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:153
                struct mpc_cpu* cpu=(struct mpc_cpu*)recPtr;
   1a71e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a721:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:154
                memcpy(kMPConfigTable[cnt].rec,recPtr,20);
   1a724:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a729:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a72c:	c1 e2 05             	shl    edx,0x5
   1a72f:	01 d0                	add    eax,edx
   1a731:	83 ec 04             	sub    esp,0x4
   1a734:	6a 14                	push   0x14
   1a736:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a739:	50                   	push   eax
   1a73a:	e8 7d b9 00 00       	call   260bc <memcpy>
   1a73f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:155
                if (cnt==0)
   1a742:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a746:	75 16                	jne    1a75e <mpInit+0x2b3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:156
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a748:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a74d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a750:	c1 e2 05             	shl    edx,0x5
   1a753:	01 d0                	add    eax,edx
   1a755:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a75c:	eb 72                	jmp    1a7d0 <mpInit+0x325>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:157
                else if (cnt==mc->count-1)
   1a75e:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a763:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a767:	0f b7 c0             	movzx  eax,ax
   1a76a:	83 e8 01             	sub    eax,0x1
   1a76d:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a770:	75 16                	jne    1a788 <mpInit+0x2dd>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:158
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a772:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a777:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a77a:	c1 e2 05             	shl    edx,0x5
   1a77d:	01 d0                	add    eax,edx
   1a77f:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a786:	eb 48                	jmp    1a7d0 <mpInit+0x325>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:161
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a788:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a78d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a790:	c1 e2 05             	shl    edx,0x5
   1a793:	01 d0                	add    eax,edx
   1a795:	8b 15 80 98 12 00    	mov    edx,DWORD PTR ds:0x129880
   1a79b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a79e:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a7a4:	c1 e1 05             	shl    ecx,0x5
   1a7a7:	01 ca                	add    edx,ecx
   1a7a9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:162
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a7ac:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a7b1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a7b4:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1a7ba:	c1 e2 05             	shl    edx,0x5
   1a7bd:	01 d0                	add    eax,edx
   1a7bf:	8b 15 80 98 12 00    	mov    edx,DWORD PTR ds:0x129880
   1a7c5:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a7c8:	c1 e1 05             	shl    ecx,0x5
   1a7cb:	01 ca                	add    edx,ecx
   1a7cd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:164
                }
                kMPConfigTable[cnt].recType=CPU;
   1a7d0:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a7d5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a7d8:	c1 e2 05             	shl    edx,0x5
   1a7db:	01 d0                	add    eax,edx
   1a7dd:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165
                printd(DEBUG_MP,"APICId=%u, Enabled=%s, %s\n", cpu->apicid, (cpu->cpuflag&0x1)?"yes":"no", (cpu->cpuflag&0x2)?"BSP":"");
   1a7e4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1a7e7:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a7eb:	0f b6 c0             	movzx  eax,al
   1a7ee:	83 e0 02             	and    eax,0x2
   1a7f1:	85 c0                	test   eax,eax
   1a7f3:	74 07                	je     1a7fc <mpInit+0x351>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 1)
   1a7f5:	b9 54 33 08 00       	mov    ecx,0x83354
   1a7fa:	eb 05                	jmp    1a801 <mpInit+0x356>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 2)
   1a7fc:	b9 58 33 08 00       	mov    ecx,0x83358
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 4)
   1a801:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1a804:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a808:	0f b6 c0             	movzx  eax,al
   1a80b:	83 e0 01             	and    eax,0x1
   1a80e:	85 c0                	test   eax,eax
   1a810:	74 07                	je     1a819 <mpInit+0x36e>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 5)
   1a812:	ba 59 33 08 00       	mov    edx,0x83359
   1a817:	eb 05                	jmp    1a81e <mpInit+0x373>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 6)
   1a819:	ba 5d 33 08 00       	mov    edx,0x8335d
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 8)
   1a81e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1a821:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a825:	0f b6 c0             	movzx  eax,al
   1a828:	83 ec 0c             	sub    esp,0xc
   1a82b:	51                   	push   ecx
   1a82c:	52                   	push   edx
   1a82d:	50                   	push   eax
   1a82e:	68 db 35 08 00       	push   0x835db
   1a833:	68 00 08 00 00       	push   0x800
   1a838:	e8 3e cf 00 00       	call   2777b <printd>
   1a83d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:166 (discriminator 8)
                recPtr+=20;
   1a840:	83 45 e4 14          	add    DWORD PTR [ebp-0x1c],0x14
/home/yogi/src/os/chrisOS/src/cpu/smp.c:167 (discriminator 8)
                break;
   1a844:	e9 df 06 00 00       	jmp    1af28 <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:169
            case 1:
                printd(DEBUG_MP,"\tBus:  ");
   1a849:	83 ec 08             	sub    esp,0x8
   1a84c:	68 f6 35 08 00       	push   0x835f6
   1a851:	68 00 08 00 00       	push   0x800
   1a856:	e8 20 cf 00 00       	call   2777b <printd>
   1a85b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:170
                struct mpc_bus* bus=(struct mpc_bus*)recPtr;
   1a85e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a861:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:171
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1a864:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a869:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a86c:	c1 e2 05             	shl    edx,0x5
   1a86f:	01 d0                	add    eax,edx
   1a871:	83 ec 04             	sub    esp,0x4
   1a874:	6a 08                	push   0x8
   1a876:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a879:	50                   	push   eax
   1a87a:	e8 3d b8 00 00       	call   260bc <memcpy>
   1a87f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:172
                if (cnt==0)
   1a882:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a886:	75 16                	jne    1a89e <mpInit+0x3f3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:173
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a888:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a88d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a890:	c1 e2 05             	shl    edx,0x5
   1a893:	01 d0                	add    eax,edx
   1a895:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a89c:	eb 72                	jmp    1a910 <mpInit+0x465>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:174
                else if (cnt==mc->count-1)
   1a89e:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a8a3:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a8a7:	0f b7 c0             	movzx  eax,ax
   1a8aa:	83 e8 01             	sub    eax,0x1
   1a8ad:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a8b0:	75 16                	jne    1a8c8 <mpInit+0x41d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:175
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a8b2:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a8b7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a8ba:	c1 e2 05             	shl    edx,0x5
   1a8bd:	01 d0                	add    eax,edx
   1a8bf:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a8c6:	eb 48                	jmp    1a910 <mpInit+0x465>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:178
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a8c8:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a8cd:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a8d0:	c1 e2 05             	shl    edx,0x5
   1a8d3:	01 d0                	add    eax,edx
   1a8d5:	8b 15 80 98 12 00    	mov    edx,DWORD PTR ds:0x129880
   1a8db:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a8de:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a8e4:	c1 e1 05             	shl    ecx,0x5
   1a8e7:	01 ca                	add    edx,ecx
   1a8e9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:179
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a8ec:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a8f1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a8f4:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1a8fa:	c1 e2 05             	shl    edx,0x5
   1a8fd:	01 d0                	add    eax,edx
   1a8ff:	8b 15 80 98 12 00    	mov    edx,DWORD PTR ds:0x129880
   1a905:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a908:	c1 e1 05             	shl    ecx,0x5
   1a90b:	01 ca                	add    edx,ecx
   1a90d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:181
                }
                recPtr+=8;
   1a910:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:182
                kMPConfigTable[cnt].recType=BUS;
   1a914:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a919:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a91c:	c1 e2 05             	shl    edx,0x5
   1a91f:	01 d0                	add    eax,edx
   1a921:	c7 40 14 01 00 00 00 	mov    DWORD PTR [eax+0x14],0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:183
                printd(DEBUG_MP,"ID=%u, BusType=%c%c%c%c%c%c, Type=%c\n", bus->busid, bus->bustype[0], bus->bustype[1], bus->bustype[2], bus->bustype[3], bus->bustype[4], bus->bustype[5], bus->type );
   1a928:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a92b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a92e:	0f b6 c8             	movzx  ecx,al
   1a931:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a934:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
   1a938:	0f b6 c0             	movzx  eax,al
   1a93b:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
   1a93e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a941:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
   1a945:	0f b6 f8             	movzx  edi,al
   1a948:	89 7d b0             	mov    DWORD PTR [ebp-0x50],edi
   1a94b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a94e:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
   1a952:	0f b6 f8             	movzx  edi,al
   1a955:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a958:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
   1a95c:	0f b6 f0             	movzx  esi,al
   1a95f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a962:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a966:	0f b6 d8             	movzx  ebx,al
   1a969:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a96c:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1a970:	0f b6 d0             	movzx  edx,al
   1a973:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a976:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a97a:	0f b6 c0             	movzx  eax,al
   1a97d:	83 ec 08             	sub    esp,0x8
   1a980:	51                   	push   ecx
   1a981:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1a984:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
   1a987:	57                   	push   edi
   1a988:	56                   	push   esi
   1a989:	53                   	push   ebx
   1a98a:	52                   	push   edx
   1a98b:	50                   	push   eax
   1a98c:	68 00 36 08 00       	push   0x83600
   1a991:	68 00 08 00 00       	push   0x800
   1a996:	e8 e0 cd 00 00       	call   2777b <printd>
   1a99b:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:184
                break;
   1a99e:	e9 85 05 00 00       	jmp    1af28 <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:186
            case 2:
                printd(DEBUG_MP,"\tAPIC: ");
   1a9a3:	83 ec 08             	sub    esp,0x8
   1a9a6:	68 26 36 08 00       	push   0x83626
   1a9ab:	68 00 08 00 00       	push   0x800
   1a9b0:	e8 c6 cd 00 00       	call   2777b <printd>
   1a9b5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:187
                struct mpc_ioapic* apic=(struct mpc_ioapic*)recPtr;
   1a9b8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a9bb:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:188
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1a9be:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a9c3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a9c6:	c1 e2 05             	shl    edx,0x5
   1a9c9:	01 d0                	add    eax,edx
   1a9cb:	83 ec 04             	sub    esp,0x4
   1a9ce:	6a 08                	push   0x8
   1a9d0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a9d3:	50                   	push   eax
   1a9d4:	e8 e3 b6 00 00       	call   260bc <memcpy>
   1a9d9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:189
                if (cnt==0)
   1a9dc:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a9e0:	75 16                	jne    1a9f8 <mpInit+0x54d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:190
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a9e2:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1a9e7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a9ea:	c1 e2 05             	shl    edx,0x5
   1a9ed:	01 d0                	add    eax,edx
   1a9ef:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a9f6:	eb 72                	jmp    1aa6a <mpInit+0x5bf>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:191
                else if (cnt==mc->count-1)
   1a9f8:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a9fd:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1aa01:	0f b7 c0             	movzx  eax,ax
   1aa04:	83 e8 01             	sub    eax,0x1
   1aa07:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1aa0a:	75 16                	jne    1aa22 <mpInit+0x577>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:192
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1aa0c:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1aa11:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1aa14:	c1 e2 05             	shl    edx,0x5
   1aa17:	01 d0                	add    eax,edx
   1aa19:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1aa20:	eb 48                	jmp    1aa6a <mpInit+0x5bf>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:195
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1aa22:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1aa27:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1aa2a:	c1 e2 05             	shl    edx,0x5
   1aa2d:	01 d0                	add    eax,edx
   1aa2f:	8b 15 80 98 12 00    	mov    edx,DWORD PTR ds:0x129880
   1aa35:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1aa38:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1aa3e:	c1 e1 05             	shl    ecx,0x5
   1aa41:	01 ca                	add    edx,ecx
   1aa43:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:196
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1aa46:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1aa4b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1aa4e:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1aa54:	c1 e2 05             	shl    edx,0x5
   1aa57:	01 d0                	add    eax,edx
   1aa59:	8b 15 80 98 12 00    	mov    edx,DWORD PTR ds:0x129880
   1aa5f:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1aa62:	c1 e1 05             	shl    ecx,0x5
   1aa65:	01 ca                	add    edx,ecx
   1aa67:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:198
                }
                kMPConfigTable[cnt].recType=IOAPIC;
   1aa6a:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1aa6f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1aa72:	c1 e2 05             	shl    edx,0x5
   1aa75:	01 d0                	add    eax,edx
   1aa77:	c7 40 14 02 00 00 00 	mov    DWORD PTR [eax+0x14],0x2
/home/yogi/src/os/chrisOS/src/cpu/smp.c:199
                recPtr+=8;
   1aa7e:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:200
                printd(DEBUG_MP,"ID=%02X, Address=0x%08X, Enabled=%s\n",apic->apicid, apic->apicaddr, apic->flags&0x1?"yes":"no");
   1aa82:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1aa85:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1aa89:	0f b6 c0             	movzx  eax,al
   1aa8c:	83 e0 01             	and    eax,0x1
   1aa8f:	85 c0                	test   eax,eax
   1aa91:	74 07                	je     1aa9a <mpInit+0x5ef>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:200 (discriminator 1)
   1aa93:	b9 59 33 08 00       	mov    ecx,0x83359
   1aa98:	eb 05                	jmp    1aa9f <mpInit+0x5f4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:200 (discriminator 2)
   1aa9a:	b9 5d 33 08 00       	mov    ecx,0x8335d
/home/yogi/src/os/chrisOS/src/cpu/smp.c:200 (discriminator 4)
   1aa9f:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1aaa2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1aaa5:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1aaa8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1aaac:	0f b6 c0             	movzx  eax,al
   1aaaf:	83 ec 0c             	sub    esp,0xc
   1aab2:	51                   	push   ecx
   1aab3:	52                   	push   edx
   1aab4:	50                   	push   eax
   1aab5:	68 30 36 08 00       	push   0x83630
   1aaba:	68 00 08 00 00       	push   0x800
   1aabf:	e8 b7 cc 00 00       	call   2777b <printd>
   1aac4:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:201 (discriminator 4)
                kIOAPICPtr=(uintptr_t*)apic->apicaddr;
   1aac7:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1aaca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1aacd:	a3 7c 98 12 00       	mov    ds:0x12987c,eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:202 (discriminator 4)
                break;
   1aad2:	e9 51 04 00 00       	jmp    1af28 <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:204
            case 3:
                printd(DEBUG_MP,"\tIRQ:  ");
   1aad7:	83 ec 08             	sub    esp,0x8
   1aada:	68 55 36 08 00       	push   0x83655
   1aadf:	68 00 08 00 00       	push   0x800
   1aae4:	e8 92 cc 00 00       	call   2777b <printd>
   1aae9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:205
                struct mpc_intsrc*intr=(struct mpc_intsrc*)recPtr;
   1aaec:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1aaef:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:206
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1aaf2:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1aaf7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1aafa:	c1 e2 05             	shl    edx,0x5
   1aafd:	01 d0                	add    eax,edx
   1aaff:	83 ec 04             	sub    esp,0x4
   1ab02:	6a 08                	push   0x8
   1ab04:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1ab07:	50                   	push   eax
   1ab08:	e8 af b5 00 00       	call   260bc <memcpy>
   1ab0d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:207
                if (cnt==0)
   1ab10:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1ab14:	75 16                	jne    1ab2c <mpInit+0x681>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:208
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1ab16:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1ab1b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1ab1e:	c1 e2 05             	shl    edx,0x5
   1ab21:	01 d0                	add    eax,edx
   1ab23:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1ab2a:	eb 72                	jmp    1ab9e <mpInit+0x6f3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:209
                else if (cnt==mc->count-1)
   1ab2c:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1ab31:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1ab35:	0f b7 c0             	movzx  eax,ax
   1ab38:	83 e8 01             	sub    eax,0x1
   1ab3b:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1ab3e:	75 16                	jne    1ab56 <mpInit+0x6ab>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:210
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1ab40:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1ab45:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1ab48:	c1 e2 05             	shl    edx,0x5
   1ab4b:	01 d0                	add    eax,edx
   1ab4d:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1ab54:	eb 48                	jmp    1ab9e <mpInit+0x6f3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:213
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1ab56:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1ab5b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1ab5e:	c1 e2 05             	shl    edx,0x5
   1ab61:	01 d0                	add    eax,edx
   1ab63:	8b 15 80 98 12 00    	mov    edx,DWORD PTR ds:0x129880
   1ab69:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1ab6c:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1ab72:	c1 e1 05             	shl    ecx,0x5
   1ab75:	01 ca                	add    edx,ecx
   1ab77:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:214
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1ab7a:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1ab7f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1ab82:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1ab88:	c1 e2 05             	shl    edx,0x5
   1ab8b:	01 d0                	add    eax,edx
   1ab8d:	8b 15 80 98 12 00    	mov    edx,DWORD PTR ds:0x129880
   1ab93:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1ab96:	c1 e1 05             	shl    ecx,0x5
   1ab99:	01 ca                	add    edx,ecx
   1ab9b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:216
                }
                kMPConfigTable[cnt].recType = IOINTASS;
   1ab9e:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1aba3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1aba6:	c1 e2 05             	shl    edx,0x5
   1aba9:	01 d0                	add    eax,edx
   1abab:	c7 40 14 03 00 00 00 	mov    DWORD PTR [eax+0x14],0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:217
                recPtr+=8;
   1abb2:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1abb6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1abb9:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1abbd:	0f b6 c0             	movzx  eax,al
   1abc0:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1abc3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1abc6:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1abca:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1abcd:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1abd0:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1abd4:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1abd7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1abda:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1abde:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:227
                            :intr->irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
   1abe1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1abe4:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1abe8:	0f b7 c0             	movzx  eax,ax
   1abeb:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1abee:	85 c0                	test   eax,eax
   1abf0:	74 39                	je     1ac2b <mpInit+0x780>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:228
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
   1abf2:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1abf5:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1abf9:	0f b7 c0             	movzx  eax,ax
   1abfc:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
   1abff:	83 f8 04             	cmp    eax,0x4
   1ac02:	74 20                	je     1ac24 <mpInit+0x779>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229 (discriminator 1)
   1ac04:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1ac07:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ac0b:	0f b7 c0             	movzx  eax,ax
   1ac0e:	83 e0 0c             	and    eax,0xc
   1ac11:	83 f8 08             	cmp    eax,0x8
   1ac14:	75 07                	jne    1ac1d <mpInit+0x772>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229 (discriminator 3)
   1ac16:	b9 d8 33 08 00       	mov    ecx,0x833d8
   1ac1b:	eb 13                	jmp    1ac30 <mpInit+0x785>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229 (discriminator 4)
   1ac1d:	b9 da 33 08 00       	mov    ecx,0x833da
   1ac22:	eb 0c                	jmp    1ac30 <mpInit+0x785>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229 (discriminator 2)
   1ac24:	b9 dc 33 08 00       	mov    ecx,0x833dc
   1ac29:	eb 05                	jmp    1ac30 <mpInit+0x785>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 1)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1ac2b:	b9 e1 33 08 00       	mov    ecx,0x833e1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:224 (discriminator 3)
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
                            :intr->irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
   1ac30:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1ac33:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ac37:	0f b7 c0             	movzx  eax,ax
   1ac3a:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 3)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1ac3d:	85 c0                	test   eax,eax
   1ac3f:	74 39                	je     1ac7a <mpInit+0x7cf>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:225
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
                            :intr->irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
                            :(intr->irqflag&0x3)==0x1?"AH"
   1ac41:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1ac44:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ac48:	0f b7 c0             	movzx  eax,ax
   1ac4b:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   1ac4e:	83 f8 01             	cmp    eax,0x1
   1ac51:	74 20                	je     1ac73 <mpInit+0x7c8>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226 (discriminator 1)
   1ac53:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1ac56:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ac5a:	0f b7 c0             	movzx  eax,ax
   1ac5d:	83 e0 03             	and    eax,0x3
   1ac60:	83 f8 02             	cmp    eax,0x2
   1ac63:	75 07                	jne    1ac6c <mpInit+0x7c1>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226 (discriminator 3)
   1ac65:	ba e3 33 08 00       	mov    edx,0x833e3
   1ac6a:	eb 13                	jmp    1ac7f <mpInit+0x7d4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226 (discriminator 4)
   1ac6c:	ba e7 33 08 00       	mov    edx,0x833e7
   1ac71:	eb 0c                	jmp    1ac7f <mpInit+0x7d4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226 (discriminator 2)
   1ac73:	ba ed 33 08 00       	mov    edx,0x833ed
   1ac78:	eb 05                	jmp    1ac7f <mpInit+0x7d4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 4)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1ac7a:	ba f0 33 08 00       	mov    edx,0x833f0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:219 (discriminator 6)
                        intr->irqtype==0?"INT"                      
   1ac7f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1ac82:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 6)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1ac86:	84 c0                	test   al,al
   1ac88:	74 3d                	je     1acc7 <mpInit+0x81c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:220
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
   1ac8a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1ac8d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:221
                            :intr->irqtype==2?"SMI"
   1ac91:	3c 01                	cmp    al,0x1
   1ac93:	74 2b                	je     1acc0 <mpInit+0x815>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:221 (discriminator 1)
   1ac95:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1ac98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:222 (discriminator 1)
                            :intr->irqtype==3?"Ext"
   1ac9c:	3c 02                	cmp    al,0x2
   1ac9e:	74 19                	je     1acb9 <mpInit+0x80e>
   1aca0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1aca3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:223 (discriminator 1)
                            :"unk",                                 //iType
   1aca7:	3c 03                	cmp    al,0x3
   1aca9:	75 07                	jne    1acb2 <mpInit+0x807>
   1acab:	b8 f3 33 08 00       	mov    eax,0x833f3
   1acb0:	eb 1a                	jmp    1accc <mpInit+0x821>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:223 (discriminator 2)
   1acb2:	b8 f7 33 08 00       	mov    eax,0x833f7
   1acb7:	eb 13                	jmp    1accc <mpInit+0x821>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:222 (discriminator 2)
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
                            :intr->irqtype==3?"Ext"
   1acb9:	b8 fb 33 08 00       	mov    eax,0x833fb
   1acbe:	eb 0c                	jmp    1accc <mpInit+0x821>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:221 (discriminator 2)
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
   1acc0:	b8 ff 33 08 00       	mov    eax,0x833ff
   1acc5:	eb 05                	jmp    1accc <mpInit+0x821>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 7)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1acc7:	b8 03 34 08 00       	mov    eax,0x83403
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 9)
   1accc:	83 ec 0c             	sub    esp,0xc
   1accf:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1acd2:	57                   	push   edi
   1acd3:	56                   	push   esi
   1acd4:	53                   	push   ebx
   1acd5:	51                   	push   ecx
   1acd6:	52                   	push   edx
   1acd7:	50                   	push   eax
   1acd8:	68 60 36 08 00       	push   0x83660
   1acdd:	68 00 08 00 00       	push   0x800
   1ace2:	e8 94 ca 00 00       	call   2777b <printd>
   1ace7:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:231 (discriminator 9)
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
                break;
   1acea:	e9 39 02 00 00       	jmp    1af28 <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:233
            case 4:
                printd(DEBUG_MP,"\tLINT: ");
   1acef:	83 ec 08             	sub    esp,0x8
   1acf2:	68 9e 36 08 00       	push   0x8369e
   1acf7:	68 00 08 00 00       	push   0x800
   1acfc:	e8 7a ca 00 00       	call   2777b <printd>
   1ad01:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:234
                struct mpc_lintsrc* lint=(struct mpc_lintsrc*)recPtr;
   1ad04:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1ad07:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:235
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1ad0a:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1ad0f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1ad12:	c1 e2 05             	shl    edx,0x5
   1ad15:	01 d0                	add    eax,edx
   1ad17:	83 ec 04             	sub    esp,0x4
   1ad1a:	6a 08                	push   0x8
   1ad1c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1ad1f:	50                   	push   eax
   1ad20:	e8 97 b3 00 00       	call   260bc <memcpy>
   1ad25:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:236
                if (cnt==0)
   1ad28:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1ad2c:	75 16                	jne    1ad44 <mpInit+0x899>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:237
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1ad2e:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1ad33:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1ad36:	c1 e2 05             	shl    edx,0x5
   1ad39:	01 d0                	add    eax,edx
   1ad3b:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1ad42:	eb 72                	jmp    1adb6 <mpInit+0x90b>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:238
                else if (cnt==mc->count-1)
   1ad44:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1ad49:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1ad4d:	0f b7 c0             	movzx  eax,ax
   1ad50:	83 e8 01             	sub    eax,0x1
   1ad53:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1ad56:	75 16                	jne    1ad6e <mpInit+0x8c3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:239
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1ad58:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1ad5d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1ad60:	c1 e2 05             	shl    edx,0x5
   1ad63:	01 d0                	add    eax,edx
   1ad65:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1ad6c:	eb 48                	jmp    1adb6 <mpInit+0x90b>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:242
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1ad6e:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1ad73:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1ad76:	c1 e2 05             	shl    edx,0x5
   1ad79:	01 d0                	add    eax,edx
   1ad7b:	8b 15 80 98 12 00    	mov    edx,DWORD PTR ds:0x129880
   1ad81:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1ad84:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1ad8a:	c1 e1 05             	shl    ecx,0x5
   1ad8d:	01 ca                	add    edx,ecx
   1ad8f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:243
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1ad92:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1ad97:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1ad9a:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1ada0:	c1 e2 05             	shl    edx,0x5
   1ada3:	01 d0                	add    eax,edx
   1ada5:	8b 15 80 98 12 00    	mov    edx,DWORD PTR ds:0x129880
   1adab:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1adae:	c1 e1 05             	shl    ecx,0x5
   1adb1:	01 ca                	add    edx,ecx
   1adb3:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:245
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
   1adb6:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1adbb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1adbe:	c1 e2 05             	shl    edx,0x5
   1adc1:	01 d0                	add    eax,edx
   1adc3:	c7 40 14 04 00 00 00 	mov    DWORD PTR [eax+0x14],0x4
/home/yogi/src/os/chrisOS/src/cpu/smp.c:246
                recPtr+=8;
   1adca:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1adce:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1add1:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1add5:	0f b6 c0             	movzx  eax,al
   1add8:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1addb:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1adde:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1ade2:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1ade5:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ade8:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1adec:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1adef:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1adf2:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1adf6:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:256
                            :lint->irqtype==3?"Ext"
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
   1adf9:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1adfc:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ae00:	0f b7 c0             	movzx  eax,ax
   1ae03:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1ae06:	85 c0                	test   eax,eax
   1ae08:	74 39                	je     1ae43 <mpInit+0x998>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:257
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
   1ae0a:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ae0d:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ae11:	0f b7 c0             	movzx  eax,ax
   1ae14:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
   1ae17:	83 f8 04             	cmp    eax,0x4
   1ae1a:	74 20                	je     1ae3c <mpInit+0x991>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258 (discriminator 1)
   1ae1c:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ae1f:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ae23:	0f b7 c0             	movzx  eax,ax
   1ae26:	83 e0 0c             	and    eax,0xc
   1ae29:	83 f8 08             	cmp    eax,0x8
   1ae2c:	75 07                	jne    1ae35 <mpInit+0x98a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258 (discriminator 3)
   1ae2e:	b9 d8 33 08 00       	mov    ecx,0x833d8
   1ae33:	eb 13                	jmp    1ae48 <mpInit+0x99d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258 (discriminator 4)
   1ae35:	b9 da 33 08 00       	mov    ecx,0x833da
   1ae3a:	eb 0c                	jmp    1ae48 <mpInit+0x99d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258 (discriminator 2)
   1ae3c:	b9 dc 33 08 00       	mov    ecx,0x833dc
   1ae41:	eb 05                	jmp    1ae48 <mpInit+0x99d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 1)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1ae43:	b9 e1 33 08 00       	mov    ecx,0x833e1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:253 (discriminator 3)
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
                            :lint->irqtype==3?"Ext"
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
   1ae48:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ae4b:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ae4f:	0f b7 c0             	movzx  eax,ax
   1ae52:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 3)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1ae55:	85 c0                	test   eax,eax
   1ae57:	74 39                	je     1ae92 <mpInit+0x9e7>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:254
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
                            :lint->irqtype==3?"Ext"
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
                            :(lint->irqflag&0x3)==0x1?"AH"
   1ae59:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ae5c:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ae60:	0f b7 c0             	movzx  eax,ax
   1ae63:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   1ae66:	83 f8 01             	cmp    eax,0x1
   1ae69:	74 20                	je     1ae8b <mpInit+0x9e0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255 (discriminator 1)
   1ae6b:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ae6e:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ae72:	0f b7 c0             	movzx  eax,ax
   1ae75:	83 e0 03             	and    eax,0x3
   1ae78:	83 f8 02             	cmp    eax,0x2
   1ae7b:	75 07                	jne    1ae84 <mpInit+0x9d9>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255 (discriminator 3)
   1ae7d:	ba e3 33 08 00       	mov    edx,0x833e3
   1ae82:	eb 13                	jmp    1ae97 <mpInit+0x9ec>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255 (discriminator 4)
   1ae84:	ba e7 33 08 00       	mov    edx,0x833e7
   1ae89:	eb 0c                	jmp    1ae97 <mpInit+0x9ec>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255 (discriminator 2)
   1ae8b:	ba ed 33 08 00       	mov    edx,0x833ed
   1ae90:	eb 05                	jmp    1ae97 <mpInit+0x9ec>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 4)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1ae92:	ba f0 33 08 00       	mov    edx,0x833f0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:248 (discriminator 6)
                             lint->irqtype==0?"INT"                      //type
   1ae97:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ae9a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 6)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1ae9e:	84 c0                	test   al,al
   1aea0:	74 3d                	je     1aedf <mpInit+0xa34>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:249
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
   1aea2:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1aea5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:250
                            :lint->irqtype==2?"SMI"
   1aea9:	3c 01                	cmp    al,0x1
   1aeab:	74 2b                	je     1aed8 <mpInit+0xa2d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:250 (discriminator 1)
   1aead:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1aeb0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:251 (discriminator 1)
                            :lint->irqtype==3?"Ext"
   1aeb4:	3c 02                	cmp    al,0x2
   1aeb6:	74 19                	je     1aed1 <mpInit+0xa26>
   1aeb8:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1aebb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:252 (discriminator 1)
                            :"unk", //iType
   1aebf:	3c 03                	cmp    al,0x3
   1aec1:	75 07                	jne    1aeca <mpInit+0xa1f>
   1aec3:	b8 f3 33 08 00       	mov    eax,0x833f3
   1aec8:	eb 1a                	jmp    1aee4 <mpInit+0xa39>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:252 (discriminator 2)
   1aeca:	b8 f7 33 08 00       	mov    eax,0x833f7
   1aecf:	eb 13                	jmp    1aee4 <mpInit+0xa39>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:251 (discriminator 2)
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
                            :lint->irqtype==3?"Ext"
   1aed1:	b8 fb 33 08 00       	mov    eax,0x833fb
   1aed6:	eb 0c                	jmp    1aee4 <mpInit+0xa39>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:250 (discriminator 2)
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
   1aed8:	b8 ff 33 08 00       	mov    eax,0x833ff
   1aedd:	eb 05                	jmp    1aee4 <mpInit+0xa39>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 7)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1aedf:	b8 03 34 08 00       	mov    eax,0x83403
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 9)
   1aee4:	83 ec 0c             	sub    esp,0xc
   1aee7:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1aeea:	57                   	push   edi
   1aeeb:	56                   	push   esi
   1aeec:	53                   	push   ebx
   1aeed:	51                   	push   ecx
   1aeee:	52                   	push   edx
   1aeef:	50                   	push   eax
   1aef0:	68 a8 36 08 00       	push   0x836a8
   1aef5:	68 00 08 00 00       	push   0x800
   1aefa:	e8 7c c8 00 00       	call   2777b <printd>
   1aeff:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:260 (discriminator 9)
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
                break;
   1af02:	eb 24                	jmp    1af28 <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:262
            default:
                printd(DEBUG_MP,"\tue %04X, ", (int)*(uint8_t*)recPtr);
   1af04:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1af07:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1af0a:	0f b6 c0             	movzx  eax,al
   1af0d:	83 ec 04             	sub    esp,0x4
   1af10:	50                   	push   eax
   1af11:	68 e6 36 08 00       	push   0x836e6
   1af16:	68 00 08 00 00       	push   0x800
   1af1b:	e8 5b c8 00 00       	call   2777b <printd>
   1af20:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:263
                recPtr+=8;
   1af23:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:264
                break;
   1af27:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/smp.c:266
        }
        if (cnt > 0 && cnt%250==0)
   1af28:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1af2c:	7e 2b                	jle    1af59 <mpInit+0xaae>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:266 (discriminator 1)
   1af2e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1af31:	ba d3 4d 62 10       	mov    edx,0x10624dd3
   1af36:	89 c8                	mov    eax,ecx
   1af38:	f7 ea                	imul   edx
   1af3a:	c1 fa 04             	sar    edx,0x4
   1af3d:	89 c8                	mov    eax,ecx
   1af3f:	c1 f8 1f             	sar    eax,0x1f
   1af42:	29 c2                	sub    edx,eax
   1af44:	89 d0                	mov    eax,edx
   1af46:	69 c0 fa 00 00 00    	imul   eax,eax,0xfa
   1af4c:	29 c1                	sub    ecx,eax
   1af4e:	89 c8                	mov    eax,ecx
   1af50:	85 c0                	test   eax,eax
   1af52:	75 05                	jne    1af59 <mpInit+0xaae>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:267
            waitForKeyboardKey();
   1af54:	e8 06 63 ff ff       	call   1125f <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:146 (discriminator 2)
    memset(lTempString, 0, 15);
        memcpy(lTempString, mc->productid,12);
    printd(DEBUG_MP,", product '%s': %s\n", lTempString);
    recPtr=(uint8_t*)mp->physptr+sizeof(struct mpc_table);
    printd(DEBUG_MP,"Parsing MC %u table entries at 0x%08X\n", mc->count, recPtr);
    for (int cnt=0;cnt< mc->count;cnt++)
   1af59:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:146 (discriminator 1)
   1af5d:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1af62:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1af66:	0f b7 c0             	movzx  eax,ax
   1af69:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1af6c:	0f 8f 7c f7 ff ff    	jg     1a6ee <mpInit+0x243>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:269
                break;
        }
        if (cnt > 0 && cnt%250==0)
            waitForKeyboardKey();
    }
    printd(DEBUG_MP,"rec5 pp=%08X(%08X),np=%08X(%08X)\n", kMPConfigTable[5].prevRecAddress, &kMPConfigTable[4], kMPConfigTable[5].nextRecAddress, &kMPConfigTable[6]);
   1af72:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1af77:	8d 98 c0 00 00 00    	lea    ebx,[eax+0xc0]
   1af7d:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1af82:	05 a0 00 00 00       	add    eax,0xa0
   1af87:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1af8a:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1af8f:	8d 88 80 00 00 00    	lea    ecx,[eax+0x80]
   1af95:	a1 80 98 12 00       	mov    eax,ds:0x129880
   1af9a:	05 a0 00 00 00       	add    eax,0xa0
   1af9f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   1afa2:	83 ec 08             	sub    esp,0x8
   1afa5:	53                   	push   ebx
   1afa6:	52                   	push   edx
   1afa7:	51                   	push   ecx
   1afa8:	50                   	push   eax
   1afa9:	68 f4 36 08 00       	push   0x836f4
   1afae:	68 00 08 00 00       	push   0x800
   1afb3:	e8 c3 c7 00 00       	call   2777b <printd>
   1afb8:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:270
    return mc->count;
   1afbb:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1afc0:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1afc4:	0f b7 c0             	movzx  eax,ax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:271 (discriminator 1)
   1afc7:	8d 65 f4             	lea    esp,[ebp-0xc]
   1afca:	5b                   	pop    ebx
   1afcb:	5e                   	pop    esi
   1afcc:	5f                   	pop    edi
   1afcd:	5d                   	pop    ebp
   1afce:	c3                   	ret    
   1afcf:	90                   	nop

0001afd0 <activateDebugger>:
activateDebugger():
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:19
extern uint8_t kTerminalHeight;
extern uint32_t exceptionCS;
extern uint32_t debugReturnFlags;

void activateDebugger()
{
   1afd0:	55                   	push   ebp
   1afd1:	89 e5                	mov    ebp,esp
   1afd3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:20
    kDebuggerActive=!kDebuggerActive;
   1afd6:	0f b6 05 d4 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d4
   1afdd:	0f b6 c0             	movzx  eax,al
   1afe0:	85 c0                	test   eax,eax
   1afe2:	0f 95 c0             	setne  al
   1afe5:	83 f0 01             	xor    eax,0x1
   1afe8:	0f b6 c0             	movzx  eax,al
   1afeb:	83 e0 01             	and    eax,0x1
   1afee:	a2 d4 a5 09 00       	mov    ds:0x9a5d4,al
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:21
    if (kDebuggerActive)
   1aff3:	0f b6 05 d4 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d4
   1affa:	84 c0                	test   al,al
   1affc:	0f 84 87 00 00 00    	je     1b089 <activateDebugger+0xb9>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:24
    {
        //Activate the debugger
        savedTermHeight=kTerminalHeight;
   1b002:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   1b009:	a2 d5 a5 09 00       	mov    ds:0x9a5d5,al
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:25
        kTerminalHeight=20;
   1b00e:	c6 05 27 00 12 00 14 	mov    BYTE PTR ds:0x120027,0x14
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:26
        cursorSavePosition();
   1b015:	e8 0d cf ff ff       	call   17f27 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:27
        cursorMoveTo(70,0);
   1b01a:	83 ec 08             	sub    esp,0x8
   1b01d:	6a 00                	push   0x0
   1b01f:	6a 46                	push   0x46
   1b021:	e8 b5 d2 ff ff       	call   182db <cursorMoveTo>
   1b026:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:28
        printk("D");
   1b029:	83 ec 0c             	sub    esp,0xc
   1b02c:	68 40 38 08 00       	push   0x83840
   1b031:	e8 25 c7 00 00       	call   2775b <printk>
   1b036:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:29
        for (int cnt=21;cnt<savedTermHeight;cnt++)
   1b039:	c7 45 f4 15 00 00 00 	mov    DWORD PTR [ebp-0xc],0x15
   1b040:	eb 12                	jmp    1b054 <activateDebugger+0x84>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:30 (discriminator 3)
            terminal_clear_line(cnt);
   1b042:	83 ec 0c             	sub    esp,0xc
   1b045:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b048:	e8 0a d0 ff ff       	call   18057 <terminal_clear_line>
   1b04d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:29 (discriminator 3)
        savedTermHeight=kTerminalHeight;
        kTerminalHeight=20;
        cursorSavePosition();
        cursorMoveTo(70,0);
        printk("D");
        for (int cnt=21;cnt<savedTermHeight;cnt++)
   1b050:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:29 (discriminator 1)
   1b054:	0f b6 05 d5 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d5
   1b05b:	0f b6 c0             	movzx  eax,al
   1b05e:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1b061:	7f df                	jg     1b042 <activateDebugger+0x72>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:31
            terminal_clear_line(cnt);
        cursorMoveTo(0,21);
   1b063:	83 ec 08             	sub    esp,0x8
   1b066:	6a 15                	push   0x15
   1b068:	6a 00                	push   0x0
   1b06a:	e8 6c d2 ff ff       	call   182db <cursorMoveTo>
   1b06f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:32
        printk("-------------------------------- DEBUG --------------------------------");
   1b072:	83 ec 0c             	sub    esp,0xc
   1b075:	68 44 38 08 00       	push   0x83844
   1b07a:	e8 dc c6 00 00       	call   2775b <printk>
   1b07f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:33
        cursorRestorePosition();
   1b082:	e8 ec ce ff ff       	call   17f73 <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:43
        cursorSavePosition();
        cursorMoveTo(70,0);
        printk(" ");
        cursorRestorePosition();
    }
}
   1b087:	eb 35                	jmp    1b0be <activateDebugger+0xee>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:37
        printk("-------------------------------- DEBUG --------------------------------");
        cursorRestorePosition();
    }
    else    //Deactivate the debugger
    {
        kTerminalHeight=savedTermHeight;
   1b089:	0f b6 05 d5 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d5
   1b090:	a2 27 00 12 00       	mov    ds:0x120027,al
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:38
        cursorSavePosition();
   1b095:	e8 8d ce ff ff       	call   17f27 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:39
        cursorMoveTo(70,0);
   1b09a:	83 ec 08             	sub    esp,0x8
   1b09d:	6a 00                	push   0x0
   1b09f:	6a 46                	push   0x46
   1b0a1:	e8 35 d2 ff ff       	call   182db <cursorMoveTo>
   1b0a6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:40
        printk(" ");
   1b0a9:	83 ec 0c             	sub    esp,0xc
   1b0ac:	68 8c 38 08 00       	push   0x8388c
   1b0b1:	e8 a5 c6 00 00       	call   2775b <printk>
   1b0b6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:41
        cursorRestorePosition();
   1b0b9:	e8 b5 ce ff ff       	call   17f73 <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:43
    }
}
   1b0be:	90                   	nop
   1b0bf:	c9                   	leave  
   1b0c0:	c3                   	ret    

0001b0c1 <debugStep>:
debugStep():
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:46

void debugStep()
{
   1b0c1:	55                   	push   ebp
   1b0c2:	89 e5                	mov    ebp,esp
   1b0c4:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:47
    cursorSavePosition();
   1b0c7:	e8 5b ce ff ff       	call   17f27 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:48
    cursorMoveTo(0,22);
   1b0cc:	83 ec 08             	sub    esp,0x8
   1b0cf:	6a 16                	push   0x16
   1b0d1:	6a 00                	push   0x0
   1b0d3:	e8 03 d2 ff ff       	call   182db <cursorMoveTo>
   1b0d8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:49
    printDebugRegs();
   1b0db:	e8 ad a9 00 00       	call   25a8d <printDebugRegs>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:50
    cursorRestorePosition();
   1b0e0:	e8 8e ce ff ff       	call   17f73 <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:51
    waitForKeyboardKey();
   1b0e5:	e8 75 61 ff ff       	call   1125f <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:52
    return;
   1b0ea:	90                   	nop
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:53
}
   1b0eb:	c9                   	leave  
   1b0ec:	c3                   	ret    
   1b0ed:	66 90                	xchg   ax,ax
   1b0ef:	90                   	nop

0001b0f0 <fatfs_init>:
fatfs_init():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:44

//-----------------------------------------------------------------------------
// fatfs_init: Load FAT Parameters
//-----------------------------------------------------------------------------
int fatfs_init(struct fatfs *fs)
{
   1b0f0:	55                   	push   ebp
   1b0f1:	89 e5                	mov    ebp,esp
   1b0f3:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:52
    uint32 FATSz;
    uint32 root_dir_sectors;
    uint32 total_sectors;
    uint32 data_sectors;
    uint32 count_of_clusters;
    uint8 valid_partition = 0;
   1b0f6:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:54

    fs->currentsector.address = FAT32_INVALID_CLUSTER;
   1b0fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0fd:	c7 80 44 02 00 00 ff 	mov    DWORD PTR [eax+0x244],0xffffffff
   1b104:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:55
    fs->currentsector.dirty = 0;
   1b107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b10a:	c7 80 48 02 00 00 00 	mov    DWORD PTR [eax+0x248],0x0
   1b111:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:57

    fs->next_free_cluster = 0; // Invalid
   1b114:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b117:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:59

    fatfs_fat_init(fs);
   1b11e:	83 ec 0c             	sub    esp,0xc
   1b121:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b124:	e8 07 57 00 00       	call   20830 <fatfs_fat_init>
   1b129:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:62

    // Make sure we have a read function (write function is optional)
    if (!fs->disk_io.read_media)
   1b12c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b12f:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b132:	85 c0                	test   eax,eax
   1b134:	75 0a                	jne    1b140 <fatfs_init+0x50>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:63
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1b136:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1b13b:	e9 46 05 00 00       	jmp    1b686 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:69

    // MBR: Sector 0 on the disk
    // NOTE: Some removeable media does not have this.

    // Load MBR (LBA 0) into the 512 byte buffer
    if (!fs->disk_io.read_media(0, fs->currentsector.sector, 1))
   1b140:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b143:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b146:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b149:	83 c2 44             	add    edx,0x44
   1b14c:	83 ec 04             	sub    esp,0x4
   1b14f:	6a 01                	push   0x1
   1b151:	52                   	push   edx
   1b152:	6a 00                	push   0x0
   1b154:	ff d0                	call   eax
   1b156:	83 c4 10             	add    esp,0x10
   1b159:	85 c0                	test   eax,eax
   1b15b:	75 0a                	jne    1b167 <fatfs_init+0x77>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:70
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1b15d:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1b162:	e9 1f 05 00 00       	jmp    1b686 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:74

    // Make Sure 0x55 and 0xAA are at end of sector
    // (this should be the case regardless of the MBR or boot sector)
    if (fs->currentsector.sector[SIGNATURE_POSITION] != 0x55 || fs->currentsector.sector[SIGNATURE_POSITION+1] != 0xAA)
   1b167:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b16a:	0f b6 80 42 02 00 00 	movzx  eax,BYTE PTR [eax+0x242]
   1b171:	3c 55                	cmp    al,0x55
   1b173:	75 0e                	jne    1b183 <fatfs_init+0x93>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:74 (discriminator 1)
   1b175:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b178:	0f b6 80 43 02 00 00 	movzx  eax,BYTE PTR [eax+0x243]
   1b17f:	3c aa                	cmp    al,0xaa
   1b181:	74 0a                	je     1b18d <fatfs_init+0x9d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:75
        return FAT_INIT_INVALID_SIGNATURE;
   1b183:	b8 fd ff ff ff       	mov    eax,0xfffffffd
   1b188:	e9 f9 04 00 00       	jmp    1b686 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:78

    // Now check again using the access function to prove endian conversion function
    if (GET_16BIT_WORD(fs->currentsector.sector, SIGNATURE_POSITION) != SIGNATURE_VALUE)
   1b18d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b190:	0f b6 80 43 02 00 00 	movzx  eax,BYTE PTR [eax+0x243]
   1b197:	0f b6 c0             	movzx  eax,al
   1b19a:	c1 e0 08             	shl    eax,0x8
   1b19d:	89 c2                	mov    edx,eax
   1b19f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1a2:	0f b6 80 42 02 00 00 	movzx  eax,BYTE PTR [eax+0x242]
   1b1a9:	0f b6 c0             	movzx  eax,al
   1b1ac:	01 d0                	add    eax,edx
   1b1ae:	3d 55 aa 00 00       	cmp    eax,0xaa55
   1b1b3:	74 0a                	je     1b1bf <fatfs_init+0xcf>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:79
        return FAT_INIT_ENDIAN_ERROR;
   1b1b5:	b8 fc ff ff ff       	mov    eax,0xfffffffc
   1b1ba:	e9 c7 04 00 00       	jmp    1b686 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:86
    // Verify packed structures
    if (sizeof(struct fat_dir_entry) != FAT_DIR_ENTRY_SIZE)
        return FAT_INIT_STRUCT_PACKING;

    // Check the partition type code
    switch(fs->currentsector.sector[PARTITION1_TYPECODE_LOCATION])
   1b1bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1c2:	0f b6 80 06 02 00 00 	movzx  eax,BYTE PTR [eax+0x206]
   1b1c9:	0f b6 c0             	movzx  eax,al
   1b1cc:	83 f8 0f             	cmp    eax,0xf
   1b1cf:	77 15                	ja     1b1e6 <fatfs_init+0xf6>
   1b1d1:	8b 04 85 90 38 08 00 	mov    eax,DWORD PTR [eax*4+0x83890]
   1b1d8:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:94
        case 0x06:
        case 0x0C:
        case 0x0E:
        case 0x0F:
        case 0x05:
            valid_partition = 1;
   1b1da:	c6 45 ef 01          	mov    BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:95
        break;
   1b1de:	eb 19                	jmp    1b1f9 <fatfs_init+0x109>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:97
        case 0x00:
            valid_partition = 0;
   1b1e0:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:98
            break;
   1b1e4:	eb 13                	jmp    1b1f9 <fatfs_init+0x109>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:100
        default:
            if (fs->currentsector.sector[PARTITION1_TYPECODE_LOCATION] <= 0x06)
   1b1e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1e9:	0f b6 80 06 02 00 00 	movzx  eax,BYTE PTR [eax+0x206]
   1b1f0:	3c 06                	cmp    al,0x6
   1b1f2:	77 04                	ja     1b1f8 <fatfs_init+0x108>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:101
                valid_partition = 1;
   1b1f4:	c6 45 ef 01          	mov    BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:102
        break;
   1b1f8:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:106
    }

    // Read LBA Begin for the file system
    if (valid_partition)
   1b1f9:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
   1b1fd:	74 4d                	je     1b24c <fatfs_init+0x15c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:107
        fs->lba_begin = GET_32BIT_WORD(fs->currentsector.sector, PARTITION1_LBA_BEGIN_LOCATION);
   1b1ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b202:	0f b6 80 0d 02 00 00 	movzx  eax,BYTE PTR [eax+0x20d]
   1b209:	0f b6 c0             	movzx  eax,al
   1b20c:	c1 e0 18             	shl    eax,0x18
   1b20f:	89 c2                	mov    edx,eax
   1b211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b214:	0f b6 80 0c 02 00 00 	movzx  eax,BYTE PTR [eax+0x20c]
   1b21b:	0f b6 c0             	movzx  eax,al
   1b21e:	c1 e0 10             	shl    eax,0x10
   1b221:	01 c2                	add    edx,eax
   1b223:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b226:	0f b6 80 0b 02 00 00 	movzx  eax,BYTE PTR [eax+0x20b]
   1b22d:	0f b6 c0             	movzx  eax,al
   1b230:	c1 e0 08             	shl    eax,0x8
   1b233:	01 c2                	add    edx,eax
   1b235:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b238:	0f b6 80 0a 02 00 00 	movzx  eax,BYTE PTR [eax+0x20a]
   1b23f:	0f b6 c0             	movzx  eax,al
   1b242:	01 c2                	add    edx,eax
   1b244:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b247:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
   1b24a:	eb 0a                	jmp    1b256 <fatfs_init+0x166>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:110
    // Else possibly MBR less disk
    else
        fs->lba_begin = 0;
   1b24c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b24f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:114

    // Load Volume 1 table into sector buffer
    // (We may already have this in the buffer if MBR less drive!)
    if (!fs->disk_io.read_media(fs->lba_begin, fs->currentsector.sector, 1))
   1b256:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b259:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b25c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b25f:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b262:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b265:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
   1b268:	83 ec 04             	sub    esp,0x4
   1b26b:	6a 01                	push   0x1
   1b26d:	51                   	push   ecx
   1b26e:	52                   	push   edx
   1b26f:	ff d0                	call   eax
   1b271:	83 c4 10             	add    esp,0x10
   1b274:	85 c0                	test   eax,eax
   1b276:	75 0a                	jne    1b282 <fatfs_init+0x192>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:115
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1b278:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1b27d:	e9 04 04 00 00       	jmp    1b686 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:118

    // Make sure there are 512 bytes per cluster
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE)
   1b282:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b285:	0f b6 40 50          	movzx  eax,BYTE PTR [eax+0x50]
   1b289:	0f b6 c0             	movzx  eax,al
   1b28c:	c1 e0 08             	shl    eax,0x8
   1b28f:	89 c2                	mov    edx,eax
   1b291:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b294:	0f b6 40 4f          	movzx  eax,BYTE PTR [eax+0x4f]
   1b298:	0f b6 c0             	movzx  eax,al
   1b29b:	01 d0                	add    eax,edx
   1b29d:	3d 00 02 00 00       	cmp    eax,0x200
   1b2a2:	74 0a                	je     1b2ae <fatfs_init+0x1be>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:119
        return FAT_INIT_INVALID_SECTOR_SIZE;
   1b2a4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
   1b2a9:	e9 d8 03 00 00       	jmp    1b686 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:122

    // Load Parameters of FAT partition
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
   1b2ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2b1:	0f b6 50 51          	movzx  edx,BYTE PTR [eax+0x51]
   1b2b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2b8:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:123
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
   1b2ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2bd:	0f b6 40 53          	movzx  eax,BYTE PTR [eax+0x53]
   1b2c1:	0f b6 c0             	movzx  eax,al
   1b2c4:	c1 e0 08             	shl    eax,0x8
   1b2c7:	89 c2                	mov    edx,eax
   1b2c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2cc:	0f b6 40 52          	movzx  eax,BYTE PTR [eax+0x52]
   1b2d0:	0f b6 c0             	movzx  eax,al
   1b2d3:	01 d0                	add    eax,edx
   1b2d5:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:124
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
   1b2d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2dc:	0f b6 40 54          	movzx  eax,BYTE PTR [eax+0x54]
   1b2e0:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:125
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);
   1b2e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2e6:	0f b6 40 56          	movzx  eax,BYTE PTR [eax+0x56]
   1b2ea:	0f b6 c0             	movzx  eax,al
   1b2ed:	c1 e0 08             	shl    eax,0x8
   1b2f0:	89 c2                	mov    edx,eax
   1b2f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2f5:	0f b6 40 55          	movzx  eax,BYTE PTR [eax+0x55]
   1b2f9:	0f b6 c0             	movzx  eax,al
   1b2fc:	01 c2                	add    edx,eax
   1b2fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b301:	66 89 50 28          	mov    WORD PTR [eax+0x28],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:127

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
   1b305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b308:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1b30c:	0f b6 c0             	movzx  eax,al
   1b30f:	c1 e0 08             	shl    eax,0x8
   1b312:	89 c2                	mov    edx,eax
   1b314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b317:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1b31b:	0f b6 c0             	movzx  eax,al
   1b31e:	01 d0                	add    eax,edx
   1b320:	85 c0                	test   eax,eax
   1b322:	74 25                	je     1b349 <fatfs_init+0x259>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:128
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
   1b324:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b327:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1b32b:	0f b6 c0             	movzx  eax,al
   1b32e:	c1 e0 08             	shl    eax,0x8
   1b331:	89 c2                	mov    edx,eax
   1b333:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b336:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1b33a:	0f b6 c0             	movzx  eax,al
   1b33d:	01 d0                	add    eax,edx
   1b33f:	89 c2                	mov    edx,eax
   1b341:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b344:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
   1b347:	eb 3f                	jmp    1b388 <fatfs_init+0x298>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:130
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
   1b349:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b34c:	0f b6 40 6b          	movzx  eax,BYTE PTR [eax+0x6b]
   1b350:	0f b6 c0             	movzx  eax,al
   1b353:	c1 e0 18             	shl    eax,0x18
   1b356:	89 c2                	mov    edx,eax
   1b358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b35b:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
   1b35f:	0f b6 c0             	movzx  eax,al
   1b362:	c1 e0 10             	shl    eax,0x10
   1b365:	01 c2                	add    edx,eax
   1b367:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b36a:	0f b6 40 69          	movzx  eax,BYTE PTR [eax+0x69]
   1b36e:	0f b6 c0             	movzx  eax,al
   1b371:	c1 e0 08             	shl    eax,0x8
   1b374:	01 c2                	add    edx,eax
   1b376:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b379:	0f b6 40 68          	movzx  eax,BYTE PTR [eax+0x68]
   1b37d:	0f b6 c0             	movzx  eax,al
   1b380:	01 c2                	add    edx,eax
   1b382:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b385:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:133

    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
   1b388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b38b:	0f b6 40 73          	movzx  eax,BYTE PTR [eax+0x73]
   1b38f:	0f b6 c0             	movzx  eax,al
   1b392:	c1 e0 18             	shl    eax,0x18
   1b395:	89 c2                	mov    edx,eax
   1b397:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b39a:	0f b6 40 72          	movzx  eax,BYTE PTR [eax+0x72]
   1b39e:	0f b6 c0             	movzx  eax,al
   1b3a1:	c1 e0 10             	shl    eax,0x10
   1b3a4:	01 c2                	add    edx,eax
   1b3a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3a9:	0f b6 40 71          	movzx  eax,BYTE PTR [eax+0x71]
   1b3ad:	0f b6 c0             	movzx  eax,al
   1b3b0:	c1 e0 08             	shl    eax,0x8
   1b3b3:	01 c2                	add    edx,eax
   1b3b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3b8:	0f b6 40 70          	movzx  eax,BYTE PTR [eax+0x70]
   1b3bc:	0f b6 c0             	movzx  eax,al
   1b3bf:	01 c2                	add    edx,eax
   1b3c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3c4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:134
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
   1b3c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3ca:	0f b6 40 75          	movzx  eax,BYTE PTR [eax+0x75]
   1b3ce:	0f b6 c0             	movzx  eax,al
   1b3d1:	c1 e0 08             	shl    eax,0x8
   1b3d4:	89 c2                	mov    edx,eax
   1b3d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3d9:	0f b6 40 74          	movzx  eax,BYTE PTR [eax+0x74]
   1b3dd:	0f b6 c0             	movzx  eax,al
   1b3e0:	01 c2                	add    edx,eax
   1b3e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3e5:	66 89 50 18          	mov    WORD PTR [eax+0x18],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:137

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
   1b3e9:	0f b7 55 ec          	movzx  edx,WORD PTR [ebp-0x14]
   1b3ed:	0f b6 4d eb          	movzx  ecx,BYTE PTR [ebp-0x15]
   1b3f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3f4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1b3f7:	0f af c1             	imul   eax,ecx
   1b3fa:	01 c2                	add    edx,eax
   1b3fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3ff:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:138
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
   1b402:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b405:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1b409:	0f b7 c0             	movzx  eax,ax
   1b40c:	c1 e0 05             	shl    eax,0x5
   1b40f:	05 ff 01 00 00       	add    eax,0x1ff
   1b414:	8d 90 ff 01 00 00    	lea    edx,[eax+0x1ff]
   1b41a:	85 c0                	test   eax,eax
   1b41c:	0f 48 c2             	cmovs  eax,edx
   1b41f:	c1 f8 09             	sar    eax,0x9
   1b422:	89 c2                	mov    edx,eax
   1b424:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b427:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:141

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;
   1b42a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b42d:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1b430:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   1b434:	01 c2                	add    edx,eax
   1b436:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b439:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:144

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);
   1b43c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b43f:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   1b442:	0f b6 4d eb          	movzx  ecx,BYTE PTR [ebp-0x15]
   1b446:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b449:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1b44c:	0f af c1             	imul   eax,ecx
   1b44f:	01 c2                	add    edx,eax
   1b451:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b454:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:146

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
   1b457:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b45a:	0f b6 80 43 02 00 00 	movzx  eax,BYTE PTR [eax+0x243]
   1b461:	0f b6 c0             	movzx  eax,al
   1b464:	c1 e0 08             	shl    eax,0x8
   1b467:	89 c2                	mov    edx,eax
   1b469:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b46c:	0f b6 80 42 02 00 00 	movzx  eax,BYTE PTR [eax+0x242]
   1b473:	0f b6 c0             	movzx  eax,al
   1b476:	01 d0                	add    eax,edx
   1b478:	3d 55 aa 00 00       	cmp    eax,0xaa55
   1b47d:	74 0a                	je     1b489 <fatfs_init+0x399>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:147
        return FAT_INIT_INVALID_SIGNATURE;
   1b47f:	b8 fd ff ff ff       	mov    eax,0xfffffffd
   1b484:	e9 fd 01 00 00       	jmp    1b686 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:150

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
   1b489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b48c:	0f b6 40 56          	movzx  eax,BYTE PTR [eax+0x56]
   1b490:	0f b6 c0             	movzx  eax,al
   1b493:	c1 e0 08             	shl    eax,0x8
   1b496:	89 c2                	mov    edx,eax
   1b498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b49b:	0f b6 40 55          	movzx  eax,BYTE PTR [eax+0x55]
   1b49f:	0f b6 c0             	movzx  eax,al
   1b4a2:	01 d0                	add    eax,edx
   1b4a4:	c1 e0 05             	shl    eax,0x5
   1b4a7:	89 c2                	mov    edx,eax
   1b4a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4ac:	0f b6 40 50          	movzx  eax,BYTE PTR [eax+0x50]
   1b4b0:	0f b6 c0             	movzx  eax,al
   1b4b3:	c1 e0 08             	shl    eax,0x8
   1b4b6:	89 c1                	mov    ecx,eax
   1b4b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4bb:	0f b6 40 4f          	movzx  eax,BYTE PTR [eax+0x4f]
   1b4bf:	0f b6 c0             	movzx  eax,al
   1b4c2:	01 c8                	add    eax,ecx
   1b4c4:	83 e8 01             	sub    eax,0x1
   1b4c7:	01 c2                	add    edx,eax
   1b4c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4cc:	0f b6 40 50          	movzx  eax,BYTE PTR [eax+0x50]
   1b4d0:	0f b6 c0             	movzx  eax,al
   1b4d3:	c1 e0 08             	shl    eax,0x8
   1b4d6:	89 c1                	mov    ecx,eax
   1b4d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4db:	0f b6 40 4f          	movzx  eax,BYTE PTR [eax+0x4f]
   1b4df:	0f b6 c0             	movzx  eax,al
   1b4e2:	01 c1                	add    ecx,eax
   1b4e4:	89 d0                	mov    eax,edx
   1b4e6:	99                   	cdq    
   1b4e7:	f7 f9                	idiv   ecx
   1b4e9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:152

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
   1b4ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4ef:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1b4f3:	0f b6 c0             	movzx  eax,al
   1b4f6:	c1 e0 08             	shl    eax,0x8
   1b4f9:	89 c2                	mov    edx,eax
   1b4fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4fe:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1b502:	0f b6 c0             	movzx  eax,al
   1b505:	01 d0                	add    eax,edx
   1b507:	85 c0                	test   eax,eax
   1b509:	74 20                	je     1b52b <fatfs_init+0x43b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:153
        FATSz = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
   1b50b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b50e:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1b512:	0f b6 c0             	movzx  eax,al
   1b515:	c1 e0 08             	shl    eax,0x8
   1b518:	89 c2                	mov    edx,eax
   1b51a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b51d:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1b521:	0f b6 c0             	movzx  eax,al
   1b524:	01 d0                	add    eax,edx
   1b526:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1b529:	eb 3c                	jmp    1b567 <fatfs_init+0x477>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:155
    else
        FATSz = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
   1b52b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b52e:	0f b6 40 6b          	movzx  eax,BYTE PTR [eax+0x6b]
   1b532:	0f b6 c0             	movzx  eax,al
   1b535:	c1 e0 18             	shl    eax,0x18
   1b538:	89 c2                	mov    edx,eax
   1b53a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b53d:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
   1b541:	0f b6 c0             	movzx  eax,al
   1b544:	c1 e0 10             	shl    eax,0x10
   1b547:	01 c2                	add    edx,eax
   1b549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b54c:	0f b6 40 69          	movzx  eax,BYTE PTR [eax+0x69]
   1b550:	0f b6 c0             	movzx  eax,al
   1b553:	c1 e0 08             	shl    eax,0x8
   1b556:	01 c2                	add    edx,eax
   1b558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b55b:	0f b6 40 68          	movzx  eax,BYTE PTR [eax+0x68]
   1b55f:	0f b6 c0             	movzx  eax,al
   1b562:	01 d0                	add    eax,edx
   1b564:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:157

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16) != 0)
   1b567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b56a:	0f b6 40 58          	movzx  eax,BYTE PTR [eax+0x58]
   1b56e:	0f b6 c0             	movzx  eax,al
   1b571:	c1 e0 08             	shl    eax,0x8
   1b574:	89 c2                	mov    edx,eax
   1b576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b579:	0f b6 40 57          	movzx  eax,BYTE PTR [eax+0x57]
   1b57d:	0f b6 c0             	movzx  eax,al
   1b580:	01 d0                	add    eax,edx
   1b582:	85 c0                	test   eax,eax
   1b584:	74 20                	je     1b5a6 <fatfs_init+0x4b6>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:158
        total_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16);
   1b586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b589:	0f b6 40 58          	movzx  eax,BYTE PTR [eax+0x58]
   1b58d:	0f b6 c0             	movzx  eax,al
   1b590:	c1 e0 08             	shl    eax,0x8
   1b593:	89 c2                	mov    edx,eax
   1b595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b598:	0f b6 40 57          	movzx  eax,BYTE PTR [eax+0x57]
   1b59c:	0f b6 c0             	movzx  eax,al
   1b59f:	01 d0                	add    eax,edx
   1b5a1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   1b5a4:	eb 3c                	jmp    1b5e2 <fatfs_init+0x4f2>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:160
    else
        total_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_TOTSEC32);
   1b5a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5a9:	0f b6 40 67          	movzx  eax,BYTE PTR [eax+0x67]
   1b5ad:	0f b6 c0             	movzx  eax,al
   1b5b0:	c1 e0 18             	shl    eax,0x18
   1b5b3:	89 c2                	mov    edx,eax
   1b5b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5b8:	0f b6 40 66          	movzx  eax,BYTE PTR [eax+0x66]
   1b5bc:	0f b6 c0             	movzx  eax,al
   1b5bf:	c1 e0 10             	shl    eax,0x10
   1b5c2:	01 c2                	add    edx,eax
   1b5c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5c7:	0f b6 40 65          	movzx  eax,BYTE PTR [eax+0x65]
   1b5cb:	0f b6 c0             	movzx  eax,al
   1b5ce:	c1 e0 08             	shl    eax,0x8
   1b5d1:	01 c2                	add    edx,eax
   1b5d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5d6:	0f b6 40 64          	movzx  eax,BYTE PTR [eax+0x64]
   1b5da:	0f b6 c0             	movzx  eax,al
   1b5dd:	01 d0                	add    eax,edx
   1b5df:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:162

    data_sectors = total_sectors - (GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT) + (fs->currentsector.sector[BPB_NUMFATS] * FATSz) + root_dir_sectors);
   1b5e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5e5:	0f b6 40 53          	movzx  eax,BYTE PTR [eax+0x53]
   1b5e9:	0f b6 c0             	movzx  eax,al
   1b5ec:	c1 e0 08             	shl    eax,0x8
   1b5ef:	89 c2                	mov    edx,eax
   1b5f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5f4:	0f b6 40 52          	movzx  eax,BYTE PTR [eax+0x52]
   1b5f8:	0f b6 c0             	movzx  eax,al
   1b5fb:	01 d0                	add    eax,edx
   1b5fd:	89 c2                	mov    edx,eax
   1b5ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b602:	0f b6 40 54          	movzx  eax,BYTE PTR [eax+0x54]
   1b606:	0f b6 c0             	movzx  eax,al
   1b609:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   1b60d:	01 c2                	add    edx,eax
   1b60f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1b612:	01 c2                	add    edx,eax
   1b614:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1b617:	29 d0                	sub    eax,edx
   1b619:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:165

    // Find out which version of FAT this is...
    if (fs->sectors_per_cluster != 0)
   1b61c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b61f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b622:	84 c0                	test   al,al
   1b624:	74 5b                	je     1b681 <fatfs_init+0x591>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:167
    {
        count_of_clusters = data_sectors / fs->sectors_per_cluster;
   1b626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b629:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b62c:	0f b6 c8             	movzx  ecx,al
   1b62f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1b632:	ba 00 00 00 00       	mov    edx,0x0
   1b637:	f7 f1                	div    ecx
   1b639:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:169

        if(count_of_clusters < 4085)
   1b63c:	81 7d dc f4 0f 00 00 	cmp    DWORD PTR [ebp-0x24],0xff4
   1b643:	77 07                	ja     1b64c <fatfs_init+0x55c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:171
            // Volume is FAT12
            return FAT_INIT_WRONG_FILESYS_TYPE;
   1b645:	b8 fb ff ff ff       	mov    eax,0xfffffffb
   1b64a:	eb 3a                	jmp    1b686 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:172
        else if(count_of_clusters < 65525)
   1b64c:	81 7d dc f4 ff 00 00 	cmp    DWORD PTR [ebp-0x24],0xfff4
   1b653:	77 1b                	ja     1b670 <fatfs_init+0x580>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:175
        {
            // Clear this FAT32 specific param
            fs->rootdir_first_cluster = 0;
   1b655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b658:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:178

            // Volume is FAT16
            fs->fat_type = FAT_TYPE_16;
   1b65f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b662:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:179
            return FAT_INIT_OK;
   1b669:	b8 00 00 00 00       	mov    eax,0x0
   1b66e:	eb 16                	jmp    1b686 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:184
        }
        else
        {
            // Volume is FAT32
            fs->fat_type = FAT_TYPE_32;
   1b670:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b673:	c7 40 30 01 00 00 00 	mov    DWORD PTR [eax+0x30],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:185
            return FAT_INIT_OK;
   1b67a:	b8 00 00 00 00       	mov    eax,0x0
   1b67f:	eb 05                	jmp    1b686 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:189
        }
    }
    else
        return FAT_INIT_WRONG_FILESYS_TYPE;
   1b681:	b8 fb ff ff ff       	mov    eax,0xfffffffb
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:190
}
   1b686:	c9                   	leave  
   1b687:	c3                   	ret    

0001b688 <fatfs_lba_of_cluster>:
fatfs_lba_of_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:196
//-----------------------------------------------------------------------------
// fatfs_lba_of_cluster: This function converts a cluster number into a sector /
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
   1b688:	55                   	push   ebp
   1b689:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:197
    if (fs->fat_type == FAT_TYPE_16)
   1b68b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b68e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b691:	85 c0                	test   eax,eax
   1b693:	75 39                	jne    1b6ce <fatfs_lba_of_cluster+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:198
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
   1b695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b698:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1b69b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b69e:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1b6a2:	0f b7 c0             	movzx  eax,ax
   1b6a5:	c1 e0 05             	shl    eax,0x5
   1b6a8:	8d 88 ff 01 00 00    	lea    ecx,[eax+0x1ff]
   1b6ae:	85 c0                	test   eax,eax
   1b6b0:	0f 48 c1             	cmovs  eax,ecx
   1b6b3:	c1 f8 09             	sar    eax,0x9
   1b6b6:	01 c2                	add    edx,eax
   1b6b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1b6bb:	8d 48 fe             	lea    ecx,[eax-0x2]
   1b6be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b6c1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b6c4:	0f b6 c0             	movzx  eax,al
   1b6c7:	0f af c1             	imul   eax,ecx
   1b6ca:	01 d0                	add    eax,edx
   1b6cc:	eb 1a                	jmp    1b6e8 <fatfs_lba_of_cluster+0x60>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:200
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
   1b6ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b6d1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1b6d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1b6d7:	8d 48 fe             	lea    ecx,[eax-0x2]
   1b6da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b6dd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b6e0:	0f b6 c0             	movzx  eax,al
   1b6e3:	0f af c1             	imul   eax,ecx
   1b6e6:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:201
}
   1b6e8:	5d                   	pop    ebp
   1b6e9:	c3                   	ret    

0001b6ea <fatfs_sector_read>:
fatfs_sector_read():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:206
//-----------------------------------------------------------------------------
// fatfs_sector_read:
//-----------------------------------------------------------------------------
int fatfs_sector_read(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
   1b6ea:	55                   	push   ebp
   1b6eb:	89 e5                	mov    ebp,esp
   1b6ed:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:207
    return fs->disk_io.read_media(lba, target, count);
   1b6f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b6f3:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b6f6:	83 ec 04             	sub    esp,0x4
   1b6f9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b6fc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1b6ff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b702:	ff d0                	call   eax
   1b704:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:208
}
   1b707:	c9                   	leave  
   1b708:	c3                   	ret    

0001b709 <fatfs_sector_write>:
fatfs_sector_write():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:213
//-----------------------------------------------------------------------------
// fatfs_sector_write:
//-----------------------------------------------------------------------------
int fatfs_sector_write(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
   1b709:	55                   	push   ebp
   1b70a:	89 e5                	mov    ebp,esp
   1b70c:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:214
    return fs->disk_io.write_media(lba, target, count);
   1b70f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b712:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b715:	83 ec 04             	sub    esp,0x4
   1b718:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b71b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1b71e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b721:	ff d0                	call   eax
   1b723:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:215
}
   1b726:	c9                   	leave  
   1b727:	c3                   	ret    

0001b728 <fatfs_sector_reader>:
fatfs_sector_reader():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:221
//-----------------------------------------------------------------------------
// fatfs_sector_reader: From the provided startcluster and sector offset
// Returns True if success, returns False if not (including if read out of range)
//-----------------------------------------------------------------------------
int fatfs_sector_reader(struct fatfs *fs, uint32 start_cluster, uint32 offset, uint8 *target)
{
   1b728:	55                   	push   ebp
   1b729:	89 e5                	mov    ebp,esp
   1b72b:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:222
    uint32 sector_to_read = 0;
   1b72e:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:223
    uint32 cluster_to_read = 0;
   1b735:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:224
    uint32 cluster_chain = 0;
   1b73c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:229
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
   1b743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b746:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b749:	85 c0                	test   eax,eax
   1b74b:	75 36                	jne    1b783 <fatfs_sector_reader+0x5b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:229 (discriminator 1)
   1b74d:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1b751:	75 30                	jne    1b783 <fatfs_sector_reader+0x5b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:231
    {
        if (offset < fs->rootdir_sectors)
   1b753:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b756:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1b759:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1b75c:	76 1b                	jbe    1b779 <fatfs_sector_reader+0x51>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:232
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
   1b75e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b761:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1b764:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b767:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1b76a:	01 c2                	add    edx,eax
   1b76c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b76f:	01 d0                	add    eax,edx
   1b771:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:231
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
    {
        if (offset < fs->rootdir_sectors)
   1b774:	e9 8e 00 00 00       	jmp    1b807 <fatfs_sector_reader+0xdf>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:234
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
        else
            return 0;
   1b779:	b8 00 00 00 00       	mov    eax,0x0
   1b77e:	e9 e4 00 00 00       	jmp    1b867 <fatfs_sector_reader+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:240
    }
    // FAT16/32 Other
    else
    {
        // Set start of cluster chain to initial value
        cluster_chain = start_cluster;
   1b783:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1b786:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:243

        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
   1b789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b78c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b78f:	0f b6 c8             	movzx  ecx,al
   1b792:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b795:	ba 00 00 00 00       	mov    edx,0x0
   1b79a:	f7 f1                	div    ecx
   1b79c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:244
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);
   1b79f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b7a2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b7a5:	0f b6 c0             	movzx  eax,al
   1b7a8:	0f af 45 e4          	imul   eax,DWORD PTR [ebp-0x1c]
   1b7ac:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1b7af:	29 c2                	sub    edx,eax
   1b7b1:	89 d0                	mov    eax,edx
   1b7b3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:247

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
   1b7b6:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   1b7bd:	eb 18                	jmp    1b7d7 <fatfs_sector_reader+0xaf>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:248 (discriminator 3)
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
   1b7bf:	83 ec 08             	sub    esp,0x8
   1b7c2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b7c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b7c8:	e8 bd 53 00 00       	call   20b8a <fatfs_find_next_cluster>
   1b7cd:	83 c4 10             	add    esp,0x10
   1b7d0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:247 (discriminator 3)
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
   1b7d3:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:247 (discriminator 1)
   1b7d7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1b7da:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   1b7dd:	72 e0                	jb     1b7bf <fatfs_sector_reader+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:251
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);

        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER)
   1b7df:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1b7e3:	75 07                	jne    1b7ec <fatfs_sector_reader+0xc4>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:252
            return 0;
   1b7e5:	b8 00 00 00 00       	mov    eax,0x0
   1b7ea:	eb 7b                	jmp    1b867 <fatfs_sector_reader+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:255

        // Calculate sector address
        lba = fatfs_lba_of_cluster(fs, cluster_chain)+sector_to_read;
   1b7ec:	83 ec 08             	sub    esp,0x8
   1b7ef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b7f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b7f5:	e8 8e fe ff ff       	call   1b688 <fatfs_lba_of_cluster>
   1b7fa:	83 c4 10             	add    esp,0x10
   1b7fd:	89 c2                	mov    edx,eax
   1b7ff:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1b802:	01 d0                	add    eax,edx
   1b804:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:259
    }

    // User provided target array
    if (target)
   1b807:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b80b:	74 18                	je     1b825 <fatfs_sector_reader+0xfd>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:260
        return fs->disk_io.read_media(lba, target, 1);
   1b80d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b810:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b813:	83 ec 04             	sub    esp,0x4
   1b816:	6a 01                	push   0x1
   1b818:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b81b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1b81e:	ff d0                	call   eax
   1b820:	83 c4 10             	add    esp,0x10
   1b823:	eb 42                	jmp    1b867 <fatfs_sector_reader+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:262
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
   1b825:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b828:	8b 80 44 02 00 00    	mov    eax,DWORD PTR [eax+0x244]
   1b82e:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   1b831:	74 2f                	je     1b862 <fatfs_sector_reader+0x13a>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:264
    {
        fs->currentsector.address = lba;
   1b833:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b836:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1b839:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:265
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b83f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b842:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b845:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b848:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b84b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b84e:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b854:	83 ec 04             	sub    esp,0x4
   1b857:	6a 01                	push   0x1
   1b859:	51                   	push   ecx
   1b85a:	52                   	push   edx
   1b85b:	ff d0                	call   eax
   1b85d:	83 c4 10             	add    esp,0x10
   1b860:	eb 05                	jmp    1b867 <fatfs_sector_reader+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:268
    }
    else
        return 1;
   1b862:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:269
}
   1b867:	c9                   	leave  
   1b868:	c3                   	ret    

0001b869 <fatfs_read_sector>:
fatfs_read_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:275
//-----------------------------------------------------------------------------
// fatfs_read_sector: Read from the provided cluster and sector offset
// Returns True if success, returns False if not
//-----------------------------------------------------------------------------
int fatfs_read_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
   1b869:	55                   	push   ebp
   1b86a:	89 e5                	mov    ebp,esp
   1b86c:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:277
    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
   1b86f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b872:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b875:	85 c0                	test   eax,eax
   1b877:	0f 85 83 00 00 00    	jne    1b900 <fatfs_read_sector+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:277 (discriminator 1)
   1b87d:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1b881:	75 7d                	jne    1b900 <fatfs_read_sector+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:282
    {
        uint32 lba;

        // In FAT16, there are a limited amount of sectors in root dir!
        if (sector < fs->rootdir_sectors)
   1b883:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b886:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1b889:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1b88c:	76 1e                	jbe    1b8ac <fatfs_read_sector+0x43>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:283
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
   1b88e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b891:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1b894:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b897:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1b89a:	01 c2                	add    edx,eax
   1b89c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b89f:	01 d0                	add    eax,edx
   1b8a1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:288
        else
            return 0;

        // User target buffer passed in
        if (target)
   1b8a4:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b8a8:	74 27                	je     1b8d1 <fatfs_read_sector+0x68>
   1b8aa:	eb 0a                	jmp    1b8b6 <fatfs_read_sector+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:285

        // In FAT16, there are a limited amount of sectors in root dir!
        if (sector < fs->rootdir_sectors)
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
        else
            return 0;
   1b8ac:	b8 00 00 00 00       	mov    eax,0x0
   1b8b1:	e9 c5 00 00 00       	jmp    1b97b <fatfs_read_sector+0x112>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:291

        // User target buffer passed in
        if (target)
        {
            // Read from disk
            return fs->disk_io.read_media(lba, target, 1);
   1b8b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b8b9:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b8bc:	83 ec 04             	sub    esp,0x4
   1b8bf:	6a 01                	push   0x1
   1b8c1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b8c4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b8c7:	ff d0                	call   eax
   1b8c9:	83 c4 10             	add    esp,0x10
   1b8cc:	e9 aa 00 00 00       	jmp    1b97b <fatfs_read_sector+0x112>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:296
        }
        else
        {
            // Calculate read address
            fs->currentsector.address = lba;
   1b8d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b8d4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1b8d7:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:299

            // Read from disk
            return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b8dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b8e0:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b8e3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b8e6:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b8e9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b8ec:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b8f2:	83 ec 04             	sub    esp,0x4
   1b8f5:	6a 01                	push   0x1
   1b8f7:	51                   	push   ecx
   1b8f8:	52                   	push   edx
   1b8f9:	ff d0                	call   eax
   1b8fb:	83 c4 10             	add    esp,0x10
   1b8fe:	eb 7b                	jmp    1b97b <fatfs_read_sector+0x112>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:306
    }
    // FAT16/32 Other
    else
    {
        // User target buffer passed in
        if (target)
   1b900:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b904:	74 33                	je     1b939 <fatfs_read_sector+0xd0>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:309
        {
            // Calculate read address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;
   1b906:	83 ec 08             	sub    esp,0x8
   1b909:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b90c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b90f:	e8 74 fd ff ff       	call   1b688 <fatfs_lba_of_cluster>
   1b914:	83 c4 10             	add    esp,0x10
   1b917:	89 c2                	mov    edx,eax
   1b919:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b91c:	01 d0                	add    eax,edx
   1b91e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:312

            // Read from disk
            return fs->disk_io.read_media(lba, target, 1);
   1b921:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b924:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b927:	83 ec 04             	sub    esp,0x4
   1b92a:	6a 01                	push   0x1
   1b92c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b92f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1b932:	ff d0                	call   eax
   1b934:	83 c4 10             	add    esp,0x10
   1b937:	eb 42                	jmp    1b97b <fatfs_read_sector+0x112>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:317
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
   1b939:	83 ec 08             	sub    esp,0x8
   1b93c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b93f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b942:	e8 41 fd ff ff       	call   1b688 <fatfs_lba_of_cluster>
   1b947:	83 c4 10             	add    esp,0x10
   1b94a:	89 c2                	mov    edx,eax
   1b94c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b94f:	01 c2                	add    edx,eax
   1b951:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b954:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:320

            // Read from disk
            return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b95a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b95d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b960:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b963:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b966:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b969:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b96f:	83 ec 04             	sub    esp,0x4
   1b972:	6a 01                	push   0x1
   1b974:	51                   	push   ecx
   1b975:	52                   	push   edx
   1b976:	ff d0                	call   eax
   1b978:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:323
        }
    }
}
   1b97b:	c9                   	leave  
   1b97c:	c3                   	ret    

0001b97d <fatfs_write_sector>:
fatfs_write_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:330
// fatfs_write_sector: Write to the provided cluster and sector offset
// Returns True if success, returns False if not
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_write_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
   1b97d:	55                   	push   ebp
   1b97e:	89 e5                	mov    ebp,esp
   1b980:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:332
    // No write access?
    if (!fs->disk_io.write_media)
   1b983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b986:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b989:	85 c0                	test   eax,eax
   1b98b:	75 0a                	jne    1b997 <fatfs_write_sector+0x1a>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:333
        return 0;
   1b98d:	b8 00 00 00 00       	mov    eax,0x0
   1b992:	e9 0c 01 00 00       	jmp    1baa3 <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:336

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
   1b997:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b99a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b99d:	85 c0                	test   eax,eax
   1b99f:	0f 85 83 00 00 00    	jne    1ba28 <fatfs_write_sector+0xab>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:336 (discriminator 1)
   1b9a5:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1b9a9:	75 7d                	jne    1ba28 <fatfs_write_sector+0xab>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:341
    {
        uint32 lba;

        // In FAT16 we cannot extend the root dir!
        if (sector < fs->rootdir_sectors)
   1b9ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b9ae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1b9b1:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1b9b4:	76 1e                	jbe    1b9d4 <fatfs_write_sector+0x57>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:342
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
   1b9b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b9b9:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1b9bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b9bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1b9c2:	01 c2                	add    edx,eax
   1b9c4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b9c7:	01 d0                	add    eax,edx
   1b9c9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:347
        else
            return 0;

        // User target buffer passed in
        if (target)
   1b9cc:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b9d0:	74 27                	je     1b9f9 <fatfs_write_sector+0x7c>
   1b9d2:	eb 0a                	jmp    1b9de <fatfs_write_sector+0x61>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:344

        // In FAT16 we cannot extend the root dir!
        if (sector < fs->rootdir_sectors)
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
        else
            return 0;
   1b9d4:	b8 00 00 00 00       	mov    eax,0x0
   1b9d9:	e9 c5 00 00 00       	jmp    1baa3 <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:350

        // User target buffer passed in
        if (target)
        {
            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
   1b9de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b9e1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b9e4:	83 ec 04             	sub    esp,0x4
   1b9e7:	6a 01                	push   0x1
   1b9e9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b9ec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b9ef:	ff d0                	call   eax
   1b9f1:	83 c4 10             	add    esp,0x10
   1b9f4:	e9 aa 00 00 00       	jmp    1baa3 <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:355
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = lba;
   1b9f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b9fc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1b9ff:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:358

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1ba05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ba08:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1ba0b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ba0e:	8d 4a 44             	lea    ecx,[edx+0x44]
   1ba11:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ba14:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1ba1a:	83 ec 04             	sub    esp,0x4
   1ba1d:	6a 01                	push   0x1
   1ba1f:	51                   	push   ecx
   1ba20:	52                   	push   edx
   1ba21:	ff d0                	call   eax
   1ba23:	83 c4 10             	add    esp,0x10
   1ba26:	eb 7b                	jmp    1baa3 <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:365
    }
    // FAT16/32 Other
    else
    {
        // User target buffer passed in
        if (target)
   1ba28:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1ba2c:	74 33                	je     1ba61 <fatfs_write_sector+0xe4>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:368
        {
            // Calculate write address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;
   1ba2e:	83 ec 08             	sub    esp,0x8
   1ba31:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1ba34:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ba37:	e8 4c fc ff ff       	call   1b688 <fatfs_lba_of_cluster>
   1ba3c:	83 c4 10             	add    esp,0x10
   1ba3f:	89 c2                	mov    edx,eax
   1ba41:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ba44:	01 d0                	add    eax,edx
   1ba46:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:371

            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
   1ba49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ba4c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1ba4f:	83 ec 04             	sub    esp,0x4
   1ba52:	6a 01                	push   0x1
   1ba54:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1ba57:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1ba5a:	ff d0                	call   eax
   1ba5c:	83 c4 10             	add    esp,0x10
   1ba5f:	eb 42                	jmp    1baa3 <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:376
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
   1ba61:	83 ec 08             	sub    esp,0x8
   1ba64:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1ba67:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ba6a:	e8 19 fc ff ff       	call   1b688 <fatfs_lba_of_cluster>
   1ba6f:	83 c4 10             	add    esp,0x10
   1ba72:	89 c2                	mov    edx,eax
   1ba74:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ba77:	01 c2                	add    edx,eax
   1ba79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ba7c:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:379

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1ba82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ba85:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1ba88:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ba8b:	8d 4a 44             	lea    ecx,[edx+0x44]
   1ba8e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ba91:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1ba97:	83 ec 04             	sub    esp,0x4
   1ba9a:	6a 01                	push   0x1
   1ba9c:	51                   	push   ecx
   1ba9d:	52                   	push   edx
   1ba9e:	ff d0                	call   eax
   1baa0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:382
        }
    }
}
   1baa3:	c9                   	leave  
   1baa4:	c3                   	ret    

0001baa5 <fatfs_show_details>:
fatfs_show_details():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:388
#endif
//-----------------------------------------------------------------------------
// fatfs_show_details: Show the details about the filesystem
//-----------------------------------------------------------------------------
void fatfs_show_details(struct fatfs *fs)
{
   1baa5:	55                   	push   ebp
   1baa6:	89 e5                	mov    ebp,esp
   1baa8:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:389
    FAT_PRINTF(("FAT details:\r\n"));
   1baab:	83 ec 0c             	sub    esp,0xc
   1baae:	68 d0 38 08 00       	push   0x838d0
   1bab3:	e8 a3 bc 00 00       	call   2775b <printk>
   1bab8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:390
    FAT_PRINTF((" Type =%s", (fs->fat_type == FAT_TYPE_32) ? "FAT32": "FAT16"));
   1babb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1babe:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1bac1:	83 f8 01             	cmp    eax,0x1
   1bac4:	75 07                	jne    1bacd <fatfs_show_details+0x28>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:390 (discriminator 1)
   1bac6:	b8 df 38 08 00       	mov    eax,0x838df
   1bacb:	eb 05                	jmp    1bad2 <fatfs_show_details+0x2d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:390 (discriminator 2)
   1bacd:	b8 e5 38 08 00       	mov    eax,0x838e5
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:390 (discriminator 4)
   1bad2:	83 ec 08             	sub    esp,0x8
   1bad5:	50                   	push   eax
   1bad6:	68 eb 38 08 00       	push   0x838eb
   1badb:	e8 7b bc 00 00       	call   2775b <printk>
   1bae0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:391 (discriminator 4)
    FAT_PRINTF((" Root Dir First Cluster = %x\r\n", fs->rootdir_first_cluster));
   1bae3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bae6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1bae9:	83 ec 08             	sub    esp,0x8
   1baec:	50                   	push   eax
   1baed:	68 f8 38 08 00       	push   0x838f8
   1baf2:	e8 64 bc 00 00       	call   2775b <printk>
   1baf7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:392 (discriminator 4)
    FAT_PRINTF((" FAT Begin LBA = 0x%x\r\n",fs->fat_begin_lba));
   1bafa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bafd:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   1bb00:	83 ec 08             	sub    esp,0x8
   1bb03:	50                   	push   eax
   1bb04:	68 17 39 08 00       	push   0x83917
   1bb09:	e8 4d bc 00 00       	call   2775b <printk>
   1bb0e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:393 (discriminator 4)
    FAT_PRINTF((" Cluster Begin LBA = 0x%x\r\n",fs->cluster_begin_lba));
   1bb11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1bb17:	83 ec 08             	sub    esp,0x8
   1bb1a:	50                   	push   eax
   1bb1b:	68 2f 39 08 00       	push   0x8392f
   1bb20:	e8 36 bc 00 00       	call   2775b <printk>
   1bb25:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:394 (discriminator 4)
    FAT_PRINTF((" Sectors Per Cluster = %d\r\n", fs->sectors_per_cluster));
   1bb28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1bb2e:	0f b6 c0             	movzx  eax,al
   1bb31:	83 ec 08             	sub    esp,0x8
   1bb34:	50                   	push   eax
   1bb35:	68 4b 39 08 00       	push   0x8394b
   1bb3a:	e8 1c bc 00 00       	call   2775b <printk>
   1bb3f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:395 (discriminator 4)
}
   1bb42:	90                   	nop
   1bb43:	c9                   	leave  
   1bb44:	c3                   	ret    

0001bb45 <fatfs_get_root_cluster>:
fatfs_get_root_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:400
//-----------------------------------------------------------------------------
// fatfs_get_root_cluster: Get the root dir cluster
//-----------------------------------------------------------------------------
uint32 fatfs_get_root_cluster(struct fatfs *fs)
{
   1bb45:	55                   	push   ebp
   1bb46:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:402
    // NOTE: On FAT16 this will be 0 which has a special meaning...
    return fs->rootdir_first_cluster;
   1bb48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb4b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:403
}
   1bb4e:	5d                   	pop    ebp
   1bb4f:	c3                   	ret    

0001bb50 <fatfs_get_file_entry>:
fatfs_get_file_entry():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:408
//-------------------------------------------------------------
// fatfs_get_file_entry: Find the file entry for a filename
//-------------------------------------------------------------
uint32 fatfs_get_file_entry(struct fatfs *fs, uint32 Cluster, char *name_to_find, struct fat_dir_entry *sfEntry)
{
   1bb50:	55                   	push   ebp
   1bb51:	89 e5                	mov    ebp,esp
   1bb53:	81 ec 38 01 00 00    	sub    esp,0x138
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:409
    uint8 item=0;
   1bb59:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:410
    uint16 recordoffset = 0;
   1bb5d:	66 c7 45 ea 00 00    	mov    WORD PTR [ebp-0x16],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:411
    uint8 i=0;
   1bb63:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:412
    int x=0;
   1bb67:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:413
    char *long_filename = NULL;
   1bb6e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:416
    char short_filename[13];
    struct lfn_cache lfn;
    int dotRequired = 0;
   1bb75:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:419
    struct fat_dir_entry *directoryEntry;

    fatfs_lfn_cache_init(&lfn, 1);
   1bb7c:	83 ec 08             	sub    esp,0x8
   1bb7f:	6a 01                	push   0x1
   1bb81:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1bb87:	50                   	push   eax
   1bb88:	e8 53 3a 00 00       	call   1f5e0 <fatfs_lfn_cache_init>
   1bb8d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:425

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1bb90:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1bb93:	8d 50 01             	lea    edx,[eax+0x1]
   1bb96:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1bb99:	6a 00                	push   0x0
   1bb9b:	50                   	push   eax
   1bb9c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1bb9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1bba2:	e8 81 fb ff ff       	call   1b728 <fatfs_sector_reader>
   1bba7:	83 c4 10             	add    esp,0x10
   1bbaa:	85 c0                	test   eax,eax
   1bbac:	0f 84 13 02 00 00    	je     1bdc5 <fatfs_get_file_entry+0x275>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:428
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1bbb2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1bbb6:	e9 fb 01 00 00       	jmp    1bdb6 <fatfs_get_file_entry+0x266>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:431
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1bbbb:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1bbbf:	c1 e0 05             	shl    eax,0x5
   1bbc2:	66 89 45 ea          	mov    WORD PTR [ebp-0x16],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:434

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1bbc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bbc9:	8d 50 44             	lea    edx,[eax+0x44]
   1bbcc:	0f b7 45 ea          	movzx  eax,WORD PTR [ebp-0x16]
   1bbd0:	01 d0                	add    eax,edx
   1bbd2:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:438

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1bbd5:	83 ec 0c             	sub    esp,0xc
   1bbd8:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1bbdb:	e8 1a 3d 00 00       	call   1f8fa <fatfs_entry_lfn_text>
   1bbe0:	83 c4 10             	add    esp,0x10
   1bbe3:	85 c0                	test   eax,eax
   1bbe5:	74 24                	je     1bc0b <fatfs_get_file_entry+0xbb>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:439
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
   1bbe7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bbea:	8d 50 44             	lea    edx,[eax+0x44]
   1bbed:	0f b7 45 ea          	movzx  eax,WORD PTR [ebp-0x16]
   1bbf1:	01 d0                	add    eax,edx
   1bbf3:	83 ec 08             	sub    esp,0x8
   1bbf6:	50                   	push   eax
   1bbf7:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1bbfd:	50                   	push   eax
   1bbfe:	e8 33 3a 00 00       	call   1f636 <fatfs_lfn_cache_entry>
   1bc03:	83 c4 10             	add    esp,0x10
   1bc06:	e9 a1 01 00 00       	jmp    1bdac <fatfs_get_file_entry+0x25c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:442

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1bc0b:	83 ec 0c             	sub    esp,0xc
   1bc0e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1bc11:	e8 07 3d 00 00       	call   1f91d <fatfs_entry_lfn_invalid>
   1bc16:	83 c4 10             	add    esp,0x10
   1bc19:	85 c0                	test   eax,eax
   1bc1b:	74 19                	je     1bc36 <fatfs_get_file_entry+0xe6>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:443
                    fatfs_lfn_cache_init(&lfn, 0);
   1bc1d:	83 ec 08             	sub    esp,0x8
   1bc20:	6a 00                	push   0x0
   1bc22:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1bc28:	50                   	push   eax
   1bc29:	e8 b2 39 00 00       	call   1f5e0 <fatfs_lfn_cache_init>
   1bc2e:	83 c4 10             	add    esp,0x10
   1bc31:	e9 76 01 00 00       	jmp    1bdac <fatfs_get_file_entry+0x25c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:446

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
   1bc36:	83 ec 08             	sub    esp,0x8
   1bc39:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1bc3c:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1bc42:	50                   	push   eax
   1bc43:	e8 16 3d 00 00       	call   1f95e <fatfs_entry_lfn_exists>
   1bc48:	83 c4 10             	add    esp,0x10
   1bc4b:	85 c0                	test   eax,eax
   1bc4d:	74 60                	je     1bcaf <fatfs_get_file_entry+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:448
                {
                    long_filename = fatfs_lfn_cache_get(&lfn);
   1bc4f:	83 ec 0c             	sub    esp,0xc
   1bc52:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1bc58:	50                   	push   eax
   1bc59:	e8 44 3c 00 00       	call   1f8a2 <fatfs_lfn_cache_get>
   1bc5e:	83 c4 10             	add    esp,0x10
   1bc61:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:451

                    // Compare names to see if they match
                    if (fatfs_compare_names(long_filename, name_to_find))
   1bc64:	83 ec 08             	sub    esp,0x8
   1bc67:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1bc6a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1bc6d:	e8 21 48 00 00       	call   20493 <fatfs_compare_names>
   1bc72:	83 c4 10             	add    esp,0x10
   1bc75:	85 c0                	test   eax,eax
   1bc77:	74 1d                	je     1bc96 <fatfs_get_file_entry+0x146>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:453
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
   1bc79:	83 ec 04             	sub    esp,0x4
   1bc7c:	6a 20                	push   0x20
   1bc7e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1bc81:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1bc84:	e8 33 a4 00 00       	call   260bc <memcpy>
   1bc89:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:454
                        return 1;
   1bc8c:	b8 01 00 00 00       	mov    eax,0x1
   1bc91:	e9 35 01 00 00       	jmp    1bdcb <fatfs_get_file_entry+0x27b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:457
                    }

                    fatfs_lfn_cache_init(&lfn, 0);
   1bc96:	83 ec 08             	sub    esp,0x8
   1bc99:	6a 00                	push   0x0
   1bc9b:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1bca1:	50                   	push   eax
   1bca2:	e8 39 39 00 00       	call   1f5e0 <fatfs_lfn_cache_init>
   1bca7:	83 c4 10             	add    esp,0x10
   1bcaa:	e9 fd 00 00 00       	jmp    1bdac <fatfs_get_file_entry+0x25c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:462
                }
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   1bcaf:	83 ec 0c             	sub    esp,0xc
   1bcb2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1bcb5:	e8 fe 3c 00 00       	call   1f9b8 <fatfs_entry_sfn_only>
   1bcba:	83 c4 10             	add    esp,0x10
   1bcbd:	85 c0                	test   eax,eax
   1bcbf:	0f 84 e7 00 00 00    	je     1bdac <fatfs_get_file_entry+0x25c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:464
                {
                    memset(short_filename, 0, sizeof(short_filename));
   1bcc5:	83 ec 04             	sub    esp,0x4
   1bcc8:	6a 0d                	push   0xd
   1bcca:	6a 00                	push   0x0
   1bccc:	8d 45 d3             	lea    eax,[ebp-0x2d]
   1bccf:	50                   	push   eax
   1bcd0:	e8 34 99 00 00       	call   25609 <memset>
   1bcd5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:467

                    // Copy name to string
                    for (i=0; i<8; i++)
   1bcd8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
   1bcdc:	eb 1d                	jmp    1bcfb <fatfs_get_file_entry+0x1ab>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:468 (discriminator 3)
                        short_filename[i] = directoryEntry->Name[i];
   1bcde:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1bce2:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   1bce6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1bce9:	0f b6 14 11          	movzx  edx,BYTE PTR [ecx+edx*1]
   1bced:	88 54 05 d3          	mov    BYTE PTR [ebp+eax*1-0x2d],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:467 (discriminator 3)
                if (fatfs_entry_sfn_only(directoryEntry) )
                {
                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++)
   1bcf1:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1bcf5:	83 c0 01             	add    eax,0x1
   1bcf8:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:467 (discriminator 1)
   1bcfb:	80 7d f6 07          	cmp    BYTE PTR [ebp-0xa],0x7
   1bcff:	76 dd                	jbe    1bcde <fatfs_get_file_entry+0x18e>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:471
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
   1bd01:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:472
                    for (i=8; i<11; i++)
   1bd08:	c6 45 f6 08          	mov    BYTE PTR [ebp-0xa],0x8
   1bd0c:	eb 36                	jmp    1bd44 <fatfs_get_file_entry+0x1f4>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:474
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
   1bd0e:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1bd12:	8d 48 01             	lea    ecx,[eax+0x1]
   1bd15:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1bd19:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1bd1c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1bd20:	88 44 0d d3          	mov    BYTE PTR [ebp+ecx*1-0x2d],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:475
                        if (directoryEntry->Name[i] != ' ')
   1bd24:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1bd28:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1bd2b:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1bd2f:	3c 20                	cmp    al,0x20
   1bd31:	74 07                	je     1bd3a <fatfs_get_file_entry+0x1ea>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:476
                            dotRequired = 1;
   1bd33:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:472 (discriminator 2)
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
   1bd3a:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1bd3e:	83 c0 01             	add    eax,0x1
   1bd41:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:472 (discriminator 1)
   1bd44:	80 7d f6 0a          	cmp    BYTE PTR [ebp-0xa],0xa
   1bd48:	76 c4                	jbe    1bd0e <fatfs_get_file_entry+0x1be>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:480
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
   1bd4a:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   1bd4e:	74 14                	je     1bd64 <fatfs_get_file_entry+0x214>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:483
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
   1bd50:	0f b6 45 d3          	movzx  eax,BYTE PTR [ebp-0x2d]
   1bd54:	3c 2e                	cmp    al,0x2e
   1bd56:	74 06                	je     1bd5e <fatfs_get_file_entry+0x20e>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:484
                            short_filename[8] = '.';
   1bd58:	c6 45 db 2e          	mov    BYTE PTR [ebp-0x25],0x2e
   1bd5c:	eb 0a                	jmp    1bd68 <fatfs_get_file_entry+0x218>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:486
                        else
                            short_filename[8] = ' ';
   1bd5e:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
   1bd62:	eb 04                	jmp    1bd68 <fatfs_get_file_entry+0x218>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:489
                    }
                    else
                        short_filename[8] = ' ';
   1bd64:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:492

                    // Compare names to see if they match
                    if (fatfs_compare_names(short_filename, name_to_find))
   1bd68:	83 ec 08             	sub    esp,0x8
   1bd6b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1bd6e:	8d 45 d3             	lea    eax,[ebp-0x2d]
   1bd71:	50                   	push   eax
   1bd72:	e8 1c 47 00 00       	call   20493 <fatfs_compare_names>
   1bd77:	83 c4 10             	add    esp,0x10
   1bd7a:	85 c0                	test   eax,eax
   1bd7c:	74 1a                	je     1bd98 <fatfs_get_file_entry+0x248>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:494
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
   1bd7e:	83 ec 04             	sub    esp,0x4
   1bd81:	6a 20                	push   0x20
   1bd83:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1bd86:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1bd89:	e8 2e a3 00 00       	call   260bc <memcpy>
   1bd8e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:495
                        return 1;
   1bd91:	b8 01 00 00 00       	mov    eax,0x1
   1bd96:	eb 33                	jmp    1bdcb <fatfs_get_file_entry+0x27b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:498
                    }

                    fatfs_lfn_cache_init(&lfn, 0);
   1bd98:	83 ec 08             	sub    esp,0x8
   1bd9b:	6a 00                	push   0x0
   1bd9d:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1bda3:	50                   	push   eax
   1bda4:	e8 37 38 00 00       	call   1f5e0 <fatfs_lfn_cache_init>
   1bda9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:428 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1bdac:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1bdb0:	83 c0 01             	add    eax,0x1
   1bdb3:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:428 (discriminator 1)
   1bdb6:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1bdba:	0f 86 fb fd ff ff    	jbe    1bbbb <fatfs_get_file_entry+0x6b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:504 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1bdc0:	e9 cb fd ff ff       	jmp    1bb90 <fatfs_get_file_entry+0x40>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:503
                    fatfs_lfn_cache_init(&lfn, 0);
                }
            } // End of if
        }
        else
            break;
   1bdc5:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:506
    } // End of while loop

    return 0;
   1bdc6:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:507 (discriminator 2)
}
   1bdcb:	c9                   	leave  
   1bdcc:	c3                   	ret    

0001bdcd <fatfs_sfn_exists>:
fatfs_sfn_exists():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:514
// fatfs_sfn_exists: Check if a short filename exists.
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_sfn_exists(struct fatfs *fs, uint32 Cluster, char *shortname)
{
   1bdcd:	55                   	push   ebp
   1bdce:	89 e5                	mov    ebp,esp
   1bdd0:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:515
    uint8 item=0;
   1bdd3:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:516
    uint16 recordoffset = 0;
   1bdd7:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:517
    int x=0;
   1bddd:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:524

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1bde4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1bde7:	8d 50 01             	lea    edx,[eax+0x1]
   1bdea:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1bded:	6a 00                	push   0x0
   1bdef:	50                   	push   eax
   1bdf0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1bdf3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1bdf6:	e8 2d f9 ff ff       	call   1b728 <fatfs_sector_reader>
   1bdfb:	83 c4 10             	add    esp,0x10
   1bdfe:	85 c0                	test   eax,eax
   1be00:	0f 84 8a 00 00 00    	je     1be90 <fatfs_sfn_exists+0xc3>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:527
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1be06:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1be0a:	eb 79                	jmp    1be85 <fatfs_sfn_exists+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:530
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1be0c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1be10:	c1 e0 05             	shl    eax,0x5
   1be13:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:533

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1be17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1be1a:	8d 50 44             	lea    edx,[eax+0x44]
   1be1d:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1be21:	01 d0                	add    eax,edx
   1be23:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:537

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1be26:	83 ec 0c             	sub    esp,0xc
   1be29:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1be2c:	e8 c9 3a 00 00       	call   1f8fa <fatfs_entry_lfn_text>
   1be31:	83 c4 10             	add    esp,0x10
   1be34:	85 c0                	test   eax,eax
   1be36:	75 43                	jne    1be7b <fatfs_sfn_exists+0xae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:541
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1be38:	83 ec 0c             	sub    esp,0xc
   1be3b:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1be3e:	e8 da 3a 00 00       	call   1f91d <fatfs_entry_lfn_invalid>
   1be43:	83 c4 10             	add    esp,0x10
   1be46:	85 c0                	test   eax,eax
   1be48:	75 31                	jne    1be7b <fatfs_sfn_exists+0xae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:546
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   1be4a:	83 ec 0c             	sub    esp,0xc
   1be4d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1be50:	e8 63 3b 00 00       	call   1f9b8 <fatfs_entry_sfn_only>
   1be55:	83 c4 10             	add    esp,0x10
   1be58:	85 c0                	test   eax,eax
   1be5a:	74 1f                	je     1be7b <fatfs_sfn_exists+0xae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:548
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   1be5c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1be5f:	83 ec 04             	sub    esp,0x4
   1be62:	6a 0b                	push   0xb
   1be64:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1be67:	50                   	push   eax
   1be68:	e8 1b 5e ff ff       	call   11c88 <strncmp>
   1be6d:	83 c4 10             	add    esp,0x10
   1be70:	85 c0                	test   eax,eax
   1be72:	75 07                	jne    1be7b <fatfs_sfn_exists+0xae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:549
                        return 1;
   1be74:	b8 01 00 00 00       	mov    eax,0x1
   1be79:	eb 1b                	jmp    1be96 <fatfs_sfn_exists+0xc9>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:527 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1be7b:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1be7f:	83 c0 01             	add    eax,0x1
   1be82:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:527 (discriminator 1)
   1be85:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1be89:	76 81                	jbe    1be0c <fatfs_sfn_exists+0x3f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:555 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1be8b:	e9 54 ff ff ff       	jmp    1bde4 <fatfs_sfn_exists+0x17>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:554
                        return 1;
                }
            } // End of if
        }
        else
            break;
   1be90:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:557
    } // End of while loop

    return 0;
   1be91:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:558
}
   1be96:	c9                   	leave  
   1be97:	c3                   	ret    

0001be98 <fatfs_update_timestamps>:
fatfs_update_timestamps():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:565
//-------------------------------------------------------------
// fatfs_update_timestamps: Update date/time details
//-------------------------------------------------------------
#if FATFS_INC_TIME_DATE_SUPPORT
int fatfs_update_timestamps(struct fat_dir_entry *directoryEntry, int create, int modify, int access)
{
   1be98:	55                   	push   ebp
   1be99:	89 e5                	mov    ebp,esp
   1be9b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:572
    struct tm * time_info;
    uint16 fat_time;
    uint16 fat_date;

    // Get system time
    time(&time_now);
   1be9e:	83 ec 0c             	sub    esp,0xc
   1bea1:	8d 45 ec             	lea    eax,[ebp-0x14]
   1bea4:	50                   	push   eax
   1bea5:	e8 fe be 00 00       	call   27da8 <time>
   1beaa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:575

    // Convert to local time
    time_info = localtime(&time_now);
   1bead:	83 ec 0c             	sub    esp,0xc
   1beb0:	8d 45 ec             	lea    eax,[ebp-0x14]
   1beb3:	50                   	push   eax
   1beb4:	e8 0d c2 00 00       	call   280c6 <localtime>
   1beb9:	83 c4 10             	add    esp,0x10
   1bebc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:578

    // Convert time to FAT format
    fat_time = fatfs_convert_to_fat_time(time_info->tm_hour, time_info->tm_min, time_info->tm_sec);
   1bebf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1bec2:	8b 08                	mov    ecx,DWORD PTR [eax]
   1bec4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1bec7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1beca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1becd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1bed0:	83 ec 04             	sub    esp,0x4
   1bed3:	51                   	push   ecx
   1bed4:	52                   	push   edx
   1bed5:	50                   	push   eax
   1bed6:	e8 ad 41 00 00       	call   20088 <fatfs_convert_to_fat_time>
   1bedb:	83 c4 10             	add    esp,0x10
   1bede:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:581

    // Convert date to FAT format
    fat_date = fatfs_convert_to_fat_date(time_info->tm_mday, time_info->tm_mon + 1, time_info->tm_year + 1900);
   1bee2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1bee5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   1bee8:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   1beee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1bef1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1bef4:	8d 50 01             	lea    edx,[eax+0x1]
   1bef7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1befa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1befd:	83 ec 04             	sub    esp,0x4
   1bf00:	51                   	push   ecx
   1bf01:	52                   	push   edx
   1bf02:	50                   	push   eax
   1bf03:	e8 d2 41 00 00       	call   200da <fatfs_convert_to_fat_date>
   1bf08:	83 c4 10             	add    esp,0x10
   1bf0b:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:584

    // Update requested fields
    if (create)
   1bf0f:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1bf13:	74 38                	je     1bf4d <fatfs_update_timestamps+0xb5>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:586
    {
        directoryEntry->CrtTime[1] = fat_time >> 8;
   1bf15:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bf19:	66 c1 e8 08          	shr    ax,0x8
   1bf1d:	89 c2                	mov    edx,eax
   1bf1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bf22:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:587
        directoryEntry->CrtTime[0] = fat_time >> 0;
   1bf25:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bf29:	89 c2                	mov    edx,eax
   1bf2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bf2e:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:588
        directoryEntry->CrtDate[1] = fat_date >> 8;
   1bf31:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bf35:	66 c1 e8 08          	shr    ax,0x8
   1bf39:	89 c2                	mov    edx,eax
   1bf3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bf3e:	88 50 11             	mov    BYTE PTR [eax+0x11],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:589
        directoryEntry->CrtDate[0] = fat_date >> 0;
   1bf41:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bf45:	89 c2                	mov    edx,eax
   1bf47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bf4a:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:592
    }

    if (modify)
   1bf4d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   1bf51:	74 38                	je     1bf8b <fatfs_update_timestamps+0xf3>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:594
    {
        directoryEntry->WrtTime[1] = fat_time >> 8;
   1bf53:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bf57:	66 c1 e8 08          	shr    ax,0x8
   1bf5b:	89 c2                	mov    edx,eax
   1bf5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bf60:	88 50 17             	mov    BYTE PTR [eax+0x17],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:595
        directoryEntry->WrtTime[0] = fat_time >> 0;
   1bf63:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bf67:	89 c2                	mov    edx,eax
   1bf69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bf6c:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:596
        directoryEntry->WrtDate[1] = fat_date >> 8;
   1bf6f:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bf73:	66 c1 e8 08          	shr    ax,0x8
   1bf77:	89 c2                	mov    edx,eax
   1bf79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bf7c:	88 50 19             	mov    BYTE PTR [eax+0x19],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:597
        directoryEntry->WrtDate[0] = fat_date >> 0;
   1bf7f:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bf83:	89 c2                	mov    edx,eax
   1bf85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bf88:	88 50 18             	mov    BYTE PTR [eax+0x18],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:600
    }

    if (access)
   1bf8b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1bf8f:	74 38                	je     1bfc9 <fatfs_update_timestamps+0x131>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:602
    {
        directoryEntry->LstAccDate[1] = fat_time >> 8;
   1bf91:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bf95:	66 c1 e8 08          	shr    ax,0x8
   1bf99:	89 c2                	mov    edx,eax
   1bf9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bf9e:	88 50 13             	mov    BYTE PTR [eax+0x13],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:603
        directoryEntry->LstAccDate[0] = fat_time >> 0;
   1bfa1:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bfa5:	89 c2                	mov    edx,eax
   1bfa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bfaa:	88 50 12             	mov    BYTE PTR [eax+0x12],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:604
        directoryEntry->LstAccDate[1] = fat_date >> 8;
   1bfad:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bfb1:	66 c1 e8 08          	shr    ax,0x8
   1bfb5:	89 c2                	mov    edx,eax
   1bfb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bfba:	88 50 13             	mov    BYTE PTR [eax+0x13],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:605
        directoryEntry->LstAccDate[0] = fat_date >> 0;
   1bfbd:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bfc1:	89 c2                	mov    edx,eax
   1bfc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bfc6:	88 50 12             	mov    BYTE PTR [eax+0x12],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:608
    }

    return 1;
   1bfc9:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:609
}
   1bfce:	c9                   	leave  
   1bfcf:	c3                   	ret    

0001bfd0 <fatfs_update_file_length>:
fatfs_update_file_length():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:617
// fatfs_update_file_length: Find a SFN entry and update it
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_update_file_length(struct fatfs *fs, uint32 Cluster, char *shortname, uint32 fileLength)
{
   1bfd0:	55                   	push   ebp
   1bfd1:	89 e5                	mov    ebp,esp
   1bfd3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:618
    uint8 item=0;
   1bfd6:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:619
    uint16 recordoffset = 0;
   1bfda:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:620
    int x=0;
   1bfe0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:624
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
   1bfe7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bfea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1bfed:	85 c0                	test   eax,eax
   1bfef:	75 0a                	jne    1bffb <fatfs_update_file_length+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:625
        return 0;
   1bff1:	b8 00 00 00 00       	mov    eax,0x0
   1bff6:	e9 14 01 00 00       	jmp    1c10f <fatfs_update_file_length+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:631

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1bffb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1bffe:	8d 50 01             	lea    edx,[eax+0x1]
   1c001:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1c004:	6a 00                	push   0x0
   1c006:	50                   	push   eax
   1c007:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c00a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c00d:	e8 16 f7 ff ff       	call   1b728 <fatfs_sector_reader>
   1c012:	83 c4 10             	add    esp,0x10
   1c015:	85 c0                	test   eax,eax
   1c017:	0f 84 ec 00 00 00    	je     1c109 <fatfs_update_file_length+0x139>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:634
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1c01d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1c021:	e9 d4 00 00 00       	jmp    1c0fa <fatfs_update_file_length+0x12a>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:637
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1c026:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c02a:	c1 e0 05             	shl    eax,0x5
   1c02d:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:640

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1c031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c034:	8d 50 44             	lea    edx,[eax+0x44]
   1c037:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1c03b:	01 d0                	add    eax,edx
   1c03d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:644

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1c040:	83 ec 0c             	sub    esp,0xc
   1c043:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c046:	e8 af 38 00 00       	call   1f8fa <fatfs_entry_lfn_text>
   1c04b:	83 c4 10             	add    esp,0x10
   1c04e:	85 c0                	test   eax,eax
   1c050:	0f 85 9a 00 00 00    	jne    1c0f0 <fatfs_update_file_length+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:648
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1c056:	83 ec 0c             	sub    esp,0xc
   1c059:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c05c:	e8 bc 38 00 00       	call   1f91d <fatfs_entry_lfn_invalid>
   1c061:	83 c4 10             	add    esp,0x10
   1c064:	85 c0                	test   eax,eax
   1c066:	0f 85 84 00 00 00    	jne    1c0f0 <fatfs_update_file_length+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:654
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   1c06c:	83 ec 0c             	sub    esp,0xc
   1c06f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c072:	e8 41 39 00 00       	call   1f9b8 <fatfs_entry_sfn_only>
   1c077:	83 c4 10             	add    esp,0x10
   1c07a:	85 c0                	test   eax,eax
   1c07c:	74 72                	je     1c0f0 <fatfs_update_file_length+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:656
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   1c07e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1c081:	83 ec 04             	sub    esp,0x4
   1c084:	6a 0b                	push   0xb
   1c086:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1c089:	50                   	push   eax
   1c08a:	e8 f9 5b ff ff       	call   11c88 <strncmp>
   1c08f:	83 c4 10             	add    esp,0x10
   1c092:	85 c0                	test   eax,eax
   1c094:	75 5a                	jne    1c0f0 <fatfs_update_file_length+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:658
                    {
                        directoryEntry->FileSize = FAT_HTONL(fileLength);
   1c096:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1c099:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   1c09c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:662

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
   1c09f:	6a 01                	push   0x1
   1c0a1:	6a 01                	push   0x1
   1c0a3:	6a 00                	push   0x0
   1c0a5:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c0a8:	e8 eb fd ff ff       	call   1be98 <fatfs_update_timestamps>
   1c0ad:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:666
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
   1c0b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c0b3:	8d 50 44             	lea    edx,[eax+0x44]
   1c0b6:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1c0ba:	01 d0                	add    eax,edx
   1c0bc:	83 ec 04             	sub    esp,0x4
   1c0bf:	6a 20                	push   0x20
   1c0c1:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c0c4:	50                   	push   eax
   1c0c5:	e8 f2 9f 00 00       	call   260bc <memcpy>
   1c0ca:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:669

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1c0cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c0d0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1c0d3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1c0d6:	8d 4a 44             	lea    ecx,[edx+0x44]
   1c0d9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1c0dc:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1c0e2:	83 ec 04             	sub    esp,0x4
   1c0e5:	6a 01                	push   0x1
   1c0e7:	51                   	push   ecx
   1c0e8:	52                   	push   edx
   1c0e9:	ff d0                	call   eax
   1c0eb:	83 c4 10             	add    esp,0x10
   1c0ee:	eb 1f                	jmp    1c10f <fatfs_update_file_length+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:634 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1c0f0:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c0f4:	83 c0 01             	add    eax,0x1
   1c0f7:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:634 (discriminator 1)
   1c0fa:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1c0fe:	0f 86 22 ff ff ff    	jbe    1c026 <fatfs_update_file_length+0x56>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:676 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1c104:	e9 f2 fe ff ff       	jmp    1bffb <fatfs_update_file_length+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:675
                    }
                }
            } // End of if
        }
        else
            break;
   1c109:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:678
    } // End of while loop

    return 0;
   1c10a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:679
}
   1c10f:	c9                   	leave  
   1c110:	c3                   	ret    

0001c111 <fatfs_mark_file_deleted>:
fatfs_mark_file_deleted():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:687
// fatfs_mark_file_deleted: Find a SFN entry and mark if as deleted
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_mark_file_deleted(struct fatfs *fs, uint32 Cluster, char *shortname)
{
   1c111:	55                   	push   ebp
   1c112:	89 e5                	mov    ebp,esp
   1c114:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:688
    uint8 item=0;
   1c117:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:689
    uint16 recordoffset = 0;
   1c11b:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:690
    int x=0;
   1c121:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:694
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
   1c128:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c12b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1c12e:	85 c0                	test   eax,eax
   1c130:	75 0a                	jne    1c13c <fatfs_mark_file_deleted+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:695
        return 0;
   1c132:	b8 00 00 00 00       	mov    eax,0x0
   1c137:	e9 11 01 00 00       	jmp    1c24d <fatfs_mark_file_deleted+0x13c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:701

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1c13c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1c13f:	8d 50 01             	lea    edx,[eax+0x1]
   1c142:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1c145:	6a 00                	push   0x0
   1c147:	50                   	push   eax
   1c148:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c14b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c14e:	e8 d5 f5 ff ff       	call   1b728 <fatfs_sector_reader>
   1c153:	83 c4 10             	add    esp,0x10
   1c156:	85 c0                	test   eax,eax
   1c158:	0f 84 e9 00 00 00    	je     1c247 <fatfs_mark_file_deleted+0x136>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:704
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1c15e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1c162:	e9 d1 00 00 00       	jmp    1c238 <fatfs_mark_file_deleted+0x127>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:707
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1c167:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c16b:	c1 e0 05             	shl    eax,0x5
   1c16e:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:710

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1c172:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c175:	8d 50 44             	lea    edx,[eax+0x44]
   1c178:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1c17c:	01 d0                	add    eax,edx
   1c17e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:714

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1c181:	83 ec 0c             	sub    esp,0xc
   1c184:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c187:	e8 6e 37 00 00       	call   1f8fa <fatfs_entry_lfn_text>
   1c18c:	83 c4 10             	add    esp,0x10
   1c18f:	85 c0                	test   eax,eax
   1c191:	0f 85 97 00 00 00    	jne    1c22e <fatfs_mark_file_deleted+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:718
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1c197:	83 ec 0c             	sub    esp,0xc
   1c19a:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c19d:	e8 7b 37 00 00       	call   1f91d <fatfs_entry_lfn_invalid>
   1c1a2:	83 c4 10             	add    esp,0x10
   1c1a5:	85 c0                	test   eax,eax
   1c1a7:	0f 85 81 00 00 00    	jne    1c22e <fatfs_mark_file_deleted+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:724
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   1c1ad:	83 ec 0c             	sub    esp,0xc
   1c1b0:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c1b3:	e8 00 38 00 00       	call   1f9b8 <fatfs_entry_sfn_only>
   1c1b8:	83 c4 10             	add    esp,0x10
   1c1bb:	85 c0                	test   eax,eax
   1c1bd:	74 6f                	je     1c22e <fatfs_mark_file_deleted+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:726
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
   1c1bf:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1c1c2:	83 ec 04             	sub    esp,0x4
   1c1c5:	6a 0b                	push   0xb
   1c1c7:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1c1ca:	50                   	push   eax
   1c1cb:	e8 b8 5a ff ff       	call   11c88 <strncmp>
   1c1d0:	83 c4 10             	add    esp,0x10
   1c1d3:	85 c0                	test   eax,eax
   1c1d5:	75 57                	jne    1c22e <fatfs_mark_file_deleted+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:729
                    {
                        // Mark as deleted
                        directoryEntry->Name[0] = FILE_HEADER_DELETED;
   1c1d7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1c1da:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:733

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
   1c1dd:	6a 01                	push   0x1
   1c1df:	6a 01                	push   0x1
   1c1e1:	6a 00                	push   0x0
   1c1e3:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c1e6:	e8 ad fc ff ff       	call   1be98 <fatfs_update_timestamps>
   1c1eb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:737
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
   1c1ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c1f1:	8d 50 44             	lea    edx,[eax+0x44]
   1c1f4:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1c1f8:	01 d0                	add    eax,edx
   1c1fa:	83 ec 04             	sub    esp,0x4
   1c1fd:	6a 20                	push   0x20
   1c1ff:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c202:	50                   	push   eax
   1c203:	e8 b4 9e 00 00       	call   260bc <memcpy>
   1c208:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:740

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1c20b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c20e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1c211:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1c214:	8d 4a 44             	lea    ecx,[edx+0x44]
   1c217:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1c21a:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1c220:	83 ec 04             	sub    esp,0x4
   1c223:	6a 01                	push   0x1
   1c225:	51                   	push   ecx
   1c226:	52                   	push   edx
   1c227:	ff d0                	call   eax
   1c229:	83 c4 10             	add    esp,0x10
   1c22c:	eb 1f                	jmp    1c24d <fatfs_mark_file_deleted+0x13c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:704 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1c22e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c232:	83 c0 01             	add    eax,0x1
   1c235:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:704 (discriminator 1)
   1c238:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1c23c:	0f 86 25 ff ff ff    	jbe    1c167 <fatfs_mark_file_deleted+0x56>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:747 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1c242:	e9 f5 fe ff ff       	jmp    1c13c <fatfs_mark_file_deleted+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:746
                    }
                }
            } // End of if
        }
        else
            break;
   1c247:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:749
    } // End of while loop

    return 0;
   1c248:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:750
}
   1c24d:	c9                   	leave  
   1c24e:	c3                   	ret    

0001c24f <fatfs_list_directory_start>:
fatfs_list_directory_start():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:757
//-----------------------------------------------------------------------------
// fatfs_list_directory_start: Initialise a directory listing procedure
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fatfs_list_directory_start(struct fatfs *fs, struct fs_dir_list_status *dirls, uint32 StartCluster)
{
   1c24f:	55                   	push   ebp
   1c250:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:758
    dirls->cluster = StartCluster;
   1c252:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c255:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c258:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:759
    dirls->sector = 0;
   1c25b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c25e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:760
    dirls->offset = 0;
   1c264:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c267:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:761
}
   1c26b:	90                   	nop
   1c26c:	5d                   	pop    ebp
   1c26d:	c3                   	ret    

0001c26e <fatfs_list_directory_next>:
fatfs_list_directory_next():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:769
// fatfs_list_directory_next: Get the next entry in the directory.
// Returns: 1 = found, 0 = end of listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fatfs_list_directory_next(struct fatfs *fs, struct fs_dir_list_status *dirls, struct fs_dir_ent *entry)
{
   1c26e:	55                   	push   ebp
   1c26f:	89 e5                	mov    ebp,esp
   1c271:	81 ec 38 01 00 00    	sub    esp,0x138
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:773
    uint8 i,item;
    uint16 recordoffset;
    struct fat_dir_entry *directoryEntry;
    char *long_filename = NULL;
   1c277:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:776
    char short_filename[13];
    struct lfn_cache lfn;
    int dotRequired = 0;
   1c27e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:777
    int result = 0;
   1c285:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:780

    // Initialise LFN cache first
    fatfs_lfn_cache_init(&lfn, 0);
   1c28c:	83 ec 08             	sub    esp,0x8
   1c28f:	6a 00                	push   0x0
   1c291:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1c297:	50                   	push   eax
   1c298:	e8 43 33 00 00       	call   1f5e0 <fatfs_lfn_cache_init>
   1c29d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:785

    while (1)
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
   1c2a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c2a3:	8b 10                	mov    edx,DWORD PTR [eax]
   1c2a5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c2a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c2ab:	6a 00                	push   0x0
   1c2ad:	52                   	push   edx
   1c2ae:	50                   	push   eax
   1c2af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c2b2:	e8 71 f4 ff ff       	call   1b728 <fatfs_sector_reader>
   1c2b7:	83 c4 10             	add    esp,0x10
   1c2ba:	85 c0                	test   eax,eax
   1c2bc:	0f 84 56 04 00 00    	je     1c718 <fatfs_list_directory_next+0x4aa>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:788
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1c2c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c2c5:	0f b6 40 08          	movzx  eax,BYTE PTR [eax+0x8]
   1c2c9:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
   1c2cc:	e9 24 04 00 00       	jmp    1c6f5 <fatfs_list_directory_next+0x487>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:791
            {
                // Increase directory offset
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1c2d1:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1c2d5:	c1 e0 05             	shl    eax,0x5
   1c2d8:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:794

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c2df:	8d 50 44             	lea    edx,[eax+0x44]
   1c2e2:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   1c2e6:	01 d0                	add    eax,edx
   1c2e8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:798

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if ( fatfs_entry_lfn_text(directoryEntry) )
   1c2eb:	83 ec 0c             	sub    esp,0xc
   1c2ee:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c2f1:	e8 04 36 00 00       	call   1f8fa <fatfs_entry_lfn_text>
   1c2f6:	83 c4 10             	add    esp,0x10
   1c2f9:	85 c0                	test   eax,eax
   1c2fb:	74 24                	je     1c321 <fatfs_list_directory_next+0xb3>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:799
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
   1c2fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c300:	8d 50 44             	lea    edx,[eax+0x44]
   1c303:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   1c307:	01 d0                	add    eax,edx
   1c309:	83 ec 08             	sub    esp,0x8
   1c30c:	50                   	push   eax
   1c30d:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1c313:	50                   	push   eax
   1c314:	e8 1d 33 00 00       	call   1f636 <fatfs_lfn_cache_entry>
   1c319:	83 c4 10             	add    esp,0x10
   1c31c:	e9 ca 03 00 00       	jmp    1c6eb <fatfs_list_directory_next+0x47d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:802

                // If Invalid record found delete any long file name information collated
                else if ( fatfs_entry_lfn_invalid(directoryEntry) )
   1c321:	83 ec 0c             	sub    esp,0xc
   1c324:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c327:	e8 f1 35 00 00       	call   1f91d <fatfs_entry_lfn_invalid>
   1c32c:	83 c4 10             	add    esp,0x10
   1c32f:	85 c0                	test   eax,eax
   1c331:	74 19                	je     1c34c <fatfs_list_directory_next+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:803
                    fatfs_lfn_cache_init(&lfn, 0);
   1c333:	83 ec 08             	sub    esp,0x8
   1c336:	6a 00                	push   0x0
   1c338:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1c33e:	50                   	push   eax
   1c33f:	e8 9c 32 00 00       	call   1f5e0 <fatfs_lfn_cache_init>
   1c344:	83 c4 10             	add    esp,0x10
   1c347:	e9 9f 03 00 00       	jmp    1c6eb <fatfs_list_directory_next+0x47d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:806

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
   1c34c:	83 ec 08             	sub    esp,0x8
   1c34f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c352:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1c358:	50                   	push   eax
   1c359:	e8 00 36 00 00       	call   1f95e <fatfs_entry_lfn_exists>
   1c35e:	83 c4 10             	add    esp,0x10
   1c361:	85 c0                	test   eax,eax
   1c363:	0f 84 67 01 00 00    	je     1c4d0 <fatfs_list_directory_next+0x262>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:809
                {
                    // Get text
                    long_filename = fatfs_lfn_cache_get(&lfn);
   1c369:	83 ec 0c             	sub    esp,0xc
   1c36c:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1c372:	50                   	push   eax
   1c373:	e8 2a 35 00 00       	call   1f8a2 <fatfs_lfn_cache_get>
   1c378:	83 c4 10             	add    esp,0x10
   1c37b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:810
                    strncpy(entry->filename, long_filename, FATFS_MAX_LONG_FILENAME-1);
   1c37e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c381:	83 ec 04             	sub    esp,0x4
   1c384:	6a 7f                	push   0x7f
   1c386:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c389:	50                   	push   eax
   1c38a:	e8 59 59 ff ff       	call   11ce8 <strncpy>
   1c38f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:812

                    if (fatfs_entry_is_dir(directoryEntry))
   1c392:	83 ec 0c             	sub    esp,0xc
   1c395:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c398:	e8 67 36 00 00       	call   1fa04 <fatfs_entry_is_dir>
   1c39d:	83 c4 10             	add    esp,0x10
   1c3a0:	85 c0                	test   eax,eax
   1c3a2:	74 0c                	je     1c3b0 <fatfs_list_directory_next+0x142>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:813
                        entry->is_dir = 1;
   1c3a4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c3a7:	c6 80 80 00 00 00 01 	mov    BYTE PTR [eax+0x80],0x1
   1c3ae:	eb 0a                	jmp    1c3ba <fatfs_list_directory_next+0x14c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:815
                    else
                        entry->is_dir = 0;
   1c3b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c3b3:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:819

#if FATFS_INC_TIME_DATE_SUPPORT
                    // Get time / dates
                    entry->create_time = ((uint16)directoryEntry->CrtTime[1] << 8) | directoryEntry->CrtTime[0];
   1c3ba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c3bd:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   1c3c1:	0f b6 c0             	movzx  eax,al
   1c3c4:	c1 e0 08             	shl    eax,0x8
   1c3c7:	89 c2                	mov    edx,eax
   1c3c9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c3cc:	0f b6 40 0e          	movzx  eax,BYTE PTR [eax+0xe]
   1c3d0:	0f b6 c0             	movzx  eax,al
   1c3d3:	09 d0                	or     eax,edx
   1c3d5:	89 c2                	mov    edx,eax
   1c3d7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c3da:	66 89 90 94 00 00 00 	mov    WORD PTR [eax+0x94],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:820
                    entry->create_date = ((uint16)directoryEntry->CrtDate[1] << 8) | directoryEntry->CrtDate[0];
   1c3e1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c3e4:	0f b6 40 11          	movzx  eax,BYTE PTR [eax+0x11]
   1c3e8:	0f b6 c0             	movzx  eax,al
   1c3eb:	c1 e0 08             	shl    eax,0x8
   1c3ee:	89 c2                	mov    edx,eax
   1c3f0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c3f3:	0f b6 40 10          	movzx  eax,BYTE PTR [eax+0x10]
   1c3f7:	0f b6 c0             	movzx  eax,al
   1c3fa:	09 d0                	or     eax,edx
   1c3fc:	89 c2                	mov    edx,eax
   1c3fe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c401:	66 89 90 92 00 00 00 	mov    WORD PTR [eax+0x92],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:821
                    entry->access_date = ((uint16)directoryEntry->LstAccDate[1] << 8) | directoryEntry->LstAccDate[0];
   1c408:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c40b:	0f b6 40 13          	movzx  eax,BYTE PTR [eax+0x13]
   1c40f:	0f b6 c0             	movzx  eax,al
   1c412:	c1 e0 08             	shl    eax,0x8
   1c415:	89 c2                	mov    edx,eax
   1c417:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c41a:	0f b6 40 12          	movzx  eax,BYTE PTR [eax+0x12]
   1c41e:	0f b6 c0             	movzx  eax,al
   1c421:	09 d0                	or     eax,edx
   1c423:	89 c2                	mov    edx,eax
   1c425:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c428:	66 89 90 8c 00 00 00 	mov    WORD PTR [eax+0x8c],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:822
                    entry->write_time  = ((uint16)directoryEntry->WrtTime[1] << 8) | directoryEntry->WrtTime[0];
   1c42f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c432:	0f b6 40 17          	movzx  eax,BYTE PTR [eax+0x17]
   1c436:	0f b6 c0             	movzx  eax,al
   1c439:	c1 e0 08             	shl    eax,0x8
   1c43c:	89 c2                	mov    edx,eax
   1c43e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c441:	0f b6 40 16          	movzx  eax,BYTE PTR [eax+0x16]
   1c445:	0f b6 c0             	movzx  eax,al
   1c448:	09 d0                	or     eax,edx
   1c44a:	89 c2                	mov    edx,eax
   1c44c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c44f:	66 89 90 8e 00 00 00 	mov    WORD PTR [eax+0x8e],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:823
                    entry->write_date  = ((uint16)directoryEntry->WrtDate[1] << 8) | directoryEntry->WrtDate[0];
   1c456:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c459:	0f b6 40 19          	movzx  eax,BYTE PTR [eax+0x19]
   1c45d:	0f b6 c0             	movzx  eax,al
   1c460:	c1 e0 08             	shl    eax,0x8
   1c463:	89 c2                	mov    edx,eax
   1c465:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c468:	0f b6 40 18          	movzx  eax,BYTE PTR [eax+0x18]
   1c46c:	0f b6 c0             	movzx  eax,al
   1c46f:	09 d0                	or     eax,edx
   1c471:	89 c2                	mov    edx,eax
   1c473:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c476:	66 89 90 90 00 00 00 	mov    WORD PTR [eax+0x90],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:826
#endif

                    entry->size = FAT_HTONL(directoryEntry->FileSize);
   1c47d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c480:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1c483:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c486:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:827
                    entry->cluster = (FAT_HTONS(directoryEntry->FstClusHI)<<16) | FAT_HTONS(directoryEntry->FstClusLO);
   1c48c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c48f:	0f b7 40 14          	movzx  eax,WORD PTR [eax+0x14]
   1c493:	0f b7 c0             	movzx  eax,ax
   1c496:	c1 e0 10             	shl    eax,0x10
   1c499:	89 c2                	mov    edx,eax
   1c49b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c49e:	0f b7 40 1a          	movzx  eax,WORD PTR [eax+0x1a]
   1c4a2:	0f b7 c0             	movzx  eax,ax
   1c4a5:	09 d0                	or     eax,edx
   1c4a7:	89 c2                	mov    edx,eax
   1c4a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c4ac:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:830

                    // Next starting position
                    dirls->offset = item + 1;
   1c4b2:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1c4b6:	8d 50 01             	lea    edx,[eax+0x1]
   1c4b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c4bc:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:831
                    result = 1;
   1c4bf:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:832
                    return 1;
   1c4c6:	b8 01 00 00 00       	mov    eax,0x1
   1c4cb:	e9 4c 02 00 00       	jmp    1c71c <fatfs_list_directory_next+0x4ae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:837
                }
                // Normal Entry, only 8.3 Text
                else
#endif
                if ( fatfs_entry_sfn_only(directoryEntry) )
   1c4d0:	83 ec 0c             	sub    esp,0xc
   1c4d3:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c4d6:	e8 dd 34 00 00       	call   1f9b8 <fatfs_entry_sfn_only>
   1c4db:	83 c4 10             	add    esp,0x10
   1c4de:	85 c0                	test   eax,eax
   1c4e0:	0f 84 05 02 00 00    	je     1c6eb <fatfs_list_directory_next+0x47d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:839
                {
                    fatfs_lfn_cache_init(&lfn, 0);
   1c4e6:	83 ec 08             	sub    esp,0x8
   1c4e9:	6a 00                	push   0x0
   1c4eb:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1c4f1:	50                   	push   eax
   1c4f2:	e8 e9 30 00 00       	call   1f5e0 <fatfs_lfn_cache_init>
   1c4f7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:841

                    memset(short_filename, 0, sizeof(short_filename));
   1c4fa:	83 ec 04             	sub    esp,0x4
   1c4fd:	6a 0d                	push   0xd
   1c4ff:	6a 00                	push   0x0
   1c501:	8d 45 d3             	lea    eax,[ebp-0x2d]
   1c504:	50                   	push   eax
   1c505:	e8 ff 90 00 00       	call   25609 <memset>
   1c50a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:844

                    // Copy name to string
                    for (i=0; i<8; i++)
   1c50d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1c511:	eb 1d                	jmp    1c530 <fatfs_list_directory_next+0x2c2>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:845 (discriminator 3)
                        short_filename[i] = directoryEntry->Name[i];
   1c513:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c517:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   1c51b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1c51e:	0f b6 14 11          	movzx  edx,BYTE PTR [ecx+edx*1]
   1c522:	88 54 05 d3          	mov    BYTE PTR [ebp+eax*1-0x2d],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:844 (discriminator 3)
                    fatfs_lfn_cache_init(&lfn, 0);

                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++)
   1c526:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c52a:	83 c0 01             	add    eax,0x1
   1c52d:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:844 (discriminator 1)
   1c530:	80 7d f7 07          	cmp    BYTE PTR [ebp-0x9],0x7
   1c534:	76 dd                	jbe    1c513 <fatfs_list_directory_next+0x2a5>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:848
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
   1c536:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:849
                    for (i=8; i<11; i++)
   1c53d:	c6 45 f7 08          	mov    BYTE PTR [ebp-0x9],0x8
   1c541:	eb 36                	jmp    1c579 <fatfs_list_directory_next+0x30b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:851
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
   1c543:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c547:	8d 48 01             	lea    ecx,[eax+0x1]
   1c54a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c54e:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1c551:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1c555:	88 44 0d d3          	mov    BYTE PTR [ebp+ecx*1-0x2d],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:852
                        if (directoryEntry->Name[i] != ' ')
   1c559:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c55d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1c560:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1c564:	3c 20                	cmp    al,0x20
   1c566:	74 07                	je     1c56f <fatfs_list_directory_next+0x301>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:853
                            dotRequired = 1;
   1c568:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:849 (discriminator 2)
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
   1c56f:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c573:	83 c0 01             	add    eax,0x1
   1c576:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:849 (discriminator 1)
   1c579:	80 7d f7 0a          	cmp    BYTE PTR [ebp-0x9],0xa
   1c57d:	76 c4                	jbe    1c543 <fatfs_list_directory_next+0x2d5>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:857
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
   1c57f:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1c583:	74 14                	je     1c599 <fatfs_list_directory_next+0x32b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:860
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
   1c585:	0f b6 45 d3          	movzx  eax,BYTE PTR [ebp-0x2d]
   1c589:	3c 2e                	cmp    al,0x2e
   1c58b:	74 06                	je     1c593 <fatfs_list_directory_next+0x325>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:861
                            short_filename[8] = '.';
   1c58d:	c6 45 db 2e          	mov    BYTE PTR [ebp-0x25],0x2e
   1c591:	eb 0a                	jmp    1c59d <fatfs_list_directory_next+0x32f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:863
                        else
                            short_filename[8] = ' ';
   1c593:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
   1c597:	eb 04                	jmp    1c59d <fatfs_list_directory_next+0x32f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:866
                    }
                    else
                        short_filename[8] = ' ';
   1c599:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:868

                    fatfs_get_sfn_display_name(entry->filename, short_filename);
   1c59d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c5a0:	83 ec 08             	sub    esp,0x8
   1c5a3:	8d 55 d3             	lea    edx,[ebp-0x2d]
   1c5a6:	52                   	push   edx
   1c5a7:	50                   	push   eax
   1c5a8:	e8 9b 40 00 00       	call   20648 <fatfs_get_sfn_display_name>
   1c5ad:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:870

                    if (fatfs_entry_is_dir(directoryEntry))
   1c5b0:	83 ec 0c             	sub    esp,0xc
   1c5b3:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c5b6:	e8 49 34 00 00       	call   1fa04 <fatfs_entry_is_dir>
   1c5bb:	83 c4 10             	add    esp,0x10
   1c5be:	85 c0                	test   eax,eax
   1c5c0:	74 0c                	je     1c5ce <fatfs_list_directory_next+0x360>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:871
                        entry->is_dir = 1;
   1c5c2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c5c5:	c6 80 80 00 00 00 01 	mov    BYTE PTR [eax+0x80],0x1
   1c5cc:	eb 0a                	jmp    1c5d8 <fatfs_list_directory_next+0x36a>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:873
                    else
                        entry->is_dir = 0;
   1c5ce:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c5d1:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:877

#if FATFS_INC_TIME_DATE_SUPPORT
                    // Get time / dates
                    entry->create_time = ((uint16)directoryEntry->CrtTime[1] << 8) | directoryEntry->CrtTime[0];
   1c5d8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c5db:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   1c5df:	0f b6 c0             	movzx  eax,al
   1c5e2:	c1 e0 08             	shl    eax,0x8
   1c5e5:	89 c2                	mov    edx,eax
   1c5e7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c5ea:	0f b6 40 0e          	movzx  eax,BYTE PTR [eax+0xe]
   1c5ee:	0f b6 c0             	movzx  eax,al
   1c5f1:	09 d0                	or     eax,edx
   1c5f3:	89 c2                	mov    edx,eax
   1c5f5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c5f8:	66 89 90 94 00 00 00 	mov    WORD PTR [eax+0x94],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:878
                    entry->create_date = ((uint16)directoryEntry->CrtDate[1] << 8) | directoryEntry->CrtDate[0];
   1c5ff:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c602:	0f b6 40 11          	movzx  eax,BYTE PTR [eax+0x11]
   1c606:	0f b6 c0             	movzx  eax,al
   1c609:	c1 e0 08             	shl    eax,0x8
   1c60c:	89 c2                	mov    edx,eax
   1c60e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c611:	0f b6 40 10          	movzx  eax,BYTE PTR [eax+0x10]
   1c615:	0f b6 c0             	movzx  eax,al
   1c618:	09 d0                	or     eax,edx
   1c61a:	89 c2                	mov    edx,eax
   1c61c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c61f:	66 89 90 92 00 00 00 	mov    WORD PTR [eax+0x92],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:879
                    entry->access_date = ((uint16)directoryEntry->LstAccDate[1] << 8) | directoryEntry->LstAccDate[0];
   1c626:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c629:	0f b6 40 13          	movzx  eax,BYTE PTR [eax+0x13]
   1c62d:	0f b6 c0             	movzx  eax,al
   1c630:	c1 e0 08             	shl    eax,0x8
   1c633:	89 c2                	mov    edx,eax
   1c635:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c638:	0f b6 40 12          	movzx  eax,BYTE PTR [eax+0x12]
   1c63c:	0f b6 c0             	movzx  eax,al
   1c63f:	09 d0                	or     eax,edx
   1c641:	89 c2                	mov    edx,eax
   1c643:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c646:	66 89 90 8c 00 00 00 	mov    WORD PTR [eax+0x8c],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:880
                    entry->write_time  = ((uint16)directoryEntry->WrtTime[1] << 8) | directoryEntry->WrtTime[0];
   1c64d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c650:	0f b6 40 17          	movzx  eax,BYTE PTR [eax+0x17]
   1c654:	0f b6 c0             	movzx  eax,al
   1c657:	c1 e0 08             	shl    eax,0x8
   1c65a:	89 c2                	mov    edx,eax
   1c65c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c65f:	0f b6 40 16          	movzx  eax,BYTE PTR [eax+0x16]
   1c663:	0f b6 c0             	movzx  eax,al
   1c666:	09 d0                	or     eax,edx
   1c668:	89 c2                	mov    edx,eax
   1c66a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c66d:	66 89 90 8e 00 00 00 	mov    WORD PTR [eax+0x8e],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:881
                    entry->write_date  = ((uint16)directoryEntry->WrtDate[1] << 8) | directoryEntry->WrtDate[0];
   1c674:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c677:	0f b6 40 19          	movzx  eax,BYTE PTR [eax+0x19]
   1c67b:	0f b6 c0             	movzx  eax,al
   1c67e:	c1 e0 08             	shl    eax,0x8
   1c681:	89 c2                	mov    edx,eax
   1c683:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c686:	0f b6 40 18          	movzx  eax,BYTE PTR [eax+0x18]
   1c68a:	0f b6 c0             	movzx  eax,al
   1c68d:	09 d0                	or     eax,edx
   1c68f:	89 c2                	mov    edx,eax
   1c691:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c694:	66 89 90 90 00 00 00 	mov    WORD PTR [eax+0x90],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:884
#endif

                    entry->size = FAT_HTONL(directoryEntry->FileSize);
   1c69b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c69e:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1c6a1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c6a4:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:885
                    entry->cluster = (FAT_HTONS(directoryEntry->FstClusHI)<<16) | FAT_HTONS(directoryEntry->FstClusLO);
   1c6aa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c6ad:	0f b7 40 14          	movzx  eax,WORD PTR [eax+0x14]
   1c6b1:	0f b7 c0             	movzx  eax,ax
   1c6b4:	c1 e0 10             	shl    eax,0x10
   1c6b7:	89 c2                	mov    edx,eax
   1c6b9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c6bc:	0f b7 40 1a          	movzx  eax,WORD PTR [eax+0x1a]
   1c6c0:	0f b7 c0             	movzx  eax,ax
   1c6c3:	09 d0                	or     eax,edx
   1c6c5:	89 c2                	mov    edx,eax
   1c6c7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c6ca:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:888

                    // Next starting position
                    dirls->offset = item + 1;
   1c6d0:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1c6d4:	8d 50 01             	lea    edx,[eax+0x1]
   1c6d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c6da:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:889
                    result = 1;
   1c6dd:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:890
                    return 1;
   1c6e4:	b8 01 00 00 00       	mov    eax,0x1
   1c6e9:	eb 31                	jmp    1c71c <fatfs_list_directory_next+0x4ae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:788 (discriminator 2)
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1c6eb:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1c6ef:	83 c0 01             	add    eax,0x1
   1c6f2:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:788 (discriminator 1)
   1c6f5:	80 7d f6 0f          	cmp    BYTE PTR [ebp-0xa],0xf
   1c6f9:	0f 86 d2 fb ff ff    	jbe    1c2d1 <fatfs_list_directory_next+0x63>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:895
                    return 1;
                }
            }// end of for

            // If reached end of the dir move onto next sector
            dirls->sector++;
   1c6ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c702:	8b 00                	mov    eax,DWORD PTR [eax]
   1c704:	8d 50 01             	lea    edx,[eax+0x1]
   1c707:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c70a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:896
            dirls->offset = 0;
   1c70c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c70f:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:900
        }
        else
            break;
    }
   1c713:	e9 88 fb ff ff       	jmp    1c2a0 <fatfs_list_directory_next+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:899
            // If reached end of the dir move onto next sector
            dirls->sector++;
            dirls->offset = 0;
        }
        else
            break;
   1c718:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:902
    }

    return result;
   1c719:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:903 (discriminator 1)
}
   1c71c:	c9                   	leave  
   1c71d:	c3                   	ret    
   1c71e:	66 90                	xchg   ax,ax

0001c720 <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   1c720:	55                   	push   ebp
   1c721:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   1c723:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c726:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   1c72d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c730:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c736:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:51
}
   1c738:	90                   	nop
   1c739:	5d                   	pop    ebp
   1c73a:	c3                   	ret    

0001c73b <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   1c73b:	55                   	push   ebp
   1c73c:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   1c73e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c741:	8b 00                	mov    eax,DWORD PTR [eax]
   1c743:	85 c0                	test   eax,eax
   1c745:	75 0d                	jne    1c754 <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   1c747:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c74a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c74d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c750:	89 10                	mov    DWORD PTR [eax],edx
   1c752:	eb 0e                	jmp    1c762 <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   1c754:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c757:	8b 00                	mov    eax,DWORD PTR [eax]
   1c759:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c75c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   1c75f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   1c762:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c765:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c768:	85 c0                	test   eax,eax
   1c76a:	75 0d                	jne    1c779 <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   1c76c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c76f:	8b 10                	mov    edx,DWORD PTR [eax]
   1c771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c774:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   1c777:	eb 0d                	jmp    1c786 <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   1c779:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c77c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c77f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c782:	8b 12                	mov    edx,DWORD PTR [edx]
   1c784:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
}
   1c786:	90                   	nop
   1c787:	5d                   	pop    ebp
   1c788:	c3                   	ret    

0001c789 <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1c789:	55                   	push   ebp
   1c78a:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   1c78c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c78f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c792:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   1c794:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c797:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c79a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c79d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   1c7a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c7a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c7a6:	85 c0                	test   eax,eax
   1c7a8:	75 0b                	jne    1c7b5 <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   1c7aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c7ad:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c7b0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   1c7b3:	eb 0b                	jmp    1c7c0 <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   1c7b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c7b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c7bb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c7be:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   1c7c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c7c3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c7c6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:86
}
   1c7c9:	90                   	nop
   1c7ca:	5d                   	pop    ebp
   1c7cb:	c3                   	ret    

0001c7cc <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1c7cc:	55                   	push   ebp
   1c7cd:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   1c7cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c7d2:	8b 10                	mov    edx,DWORD PTR [eax]
   1c7d4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c7d7:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   1c7d9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c7dc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c7df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   1c7e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c7e5:	8b 00                	mov    eax,DWORD PTR [eax]
   1c7e7:	85 c0                	test   eax,eax
   1c7e9:	75 0a                	jne    1c7f5 <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   1c7eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c7ee:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c7f1:	89 10                	mov    DWORD PTR [eax],edx
   1c7f3:	eb 0b                	jmp    1c800 <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   1c7f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c7f8:	8b 00                	mov    eax,DWORD PTR [eax]
   1c7fa:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c7fd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   1c800:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c803:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c806:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:103
}
   1c808:	90                   	nop
   1c809:	5d                   	pop    ebp
   1c80a:	c3                   	ret    

0001c80b <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   1c80b:	55                   	push   ebp
   1c80c:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   1c80e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c811:	8b 00                	mov    eax,DWORD PTR [eax]
   1c813:	85 c0                	test   eax,eax
   1c815:	75 26                	jne    1c83d <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   1c817:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c81a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c81d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   1c81f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c822:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c825:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   1c828:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c82b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   1c831:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c834:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   1c83b:	eb 14                	jmp    1c851 <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   1c83d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c840:	8b 00                	mov    eax,DWORD PTR [eax]
   1c842:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c845:	50                   	push   eax
   1c846:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c849:	e8 7e ff ff ff       	call   1c7cc <fat_list_insert_before>
   1c84e:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
}
   1c851:	90                   	nop
   1c852:	c9                   	leave  
   1c853:	c3                   	ret    

0001c854 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   1c854:	55                   	push   ebp
   1c855:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   1c857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c85a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c85d:	85 c0                	test   eax,eax
   1c85f:	75 10                	jne    1c871 <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   1c861:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c864:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c867:	e8 9f ff ff ff       	call   1c80b <fat_list_insert_first>
   1c86c:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   1c86f:	eb 15                	jmp    1c886 <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   1c871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c874:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c877:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c87a:	50                   	push   eax
   1c87b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c87e:	e8 06 ff ff ff       	call   1c789 <fat_list_insert_after>
   1c883:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
}
   1c886:	90                   	nop
   1c887:	c9                   	leave  
   1c888:	c3                   	ret    

0001c889 <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   1c889:	55                   	push   ebp
   1c88a:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   1c88c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c88f:	8b 00                	mov    eax,DWORD PTR [eax]
   1c891:	85 c0                	test   eax,eax
   1c893:	0f 94 c0             	sete   al
   1c896:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:143
}
   1c899:	5d                   	pop    ebp
   1c89a:	c3                   	ret    

0001c89b <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   1c89b:	55                   	push   ebp
   1c89c:	89 e5                	mov    ebp,esp
   1c89e:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   1c8a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c8a4:	8b 00                	mov    eax,DWORD PTR [eax]
   1c8a6:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:154
    if (node)
   1c8a9:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1c8ad:	74 0e                	je     1c8bd <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   1c8af:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   1c8b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c8b5:	e8 81 fe ff ff       	call   1c73b <fat_list_remove>
   1c8ba:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:157

    return node;
   1c8bd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:158
}
   1c8c0:	c9                   	leave  
   1c8c1:	c3                   	ret    

0001c8c2 <fatfs_cache_init>:
fatfs_cache_init():
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:43

//-----------------------------------------------------------------------------
// fatfs_cache_init:
//-----------------------------------------------------------------------------
int fatfs_cache_init(struct fatfs *fs, FL_FILE *file)
{
   1c8c2:	55                   	push   ebp
   1c8c3:	89 e5                	mov    ebp,esp
   1c8c5:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:47
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
   1c8c8:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1c8cf:	eb 27                	jmp    1c8f8 <fatfs_cache_init+0x36>
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:49 (discriminator 3)
    {
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
   1c8d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c8d4:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1c8d7:	83 c2 48             	add    edx,0x48
   1c8da:	c7 04 90 ff ff ff ff 	mov    DWORD PTR [eax+edx*4],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:50 (discriminator 3)
        file->cluster_cache_data[i] = 0;
   1c8e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c8e4:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1c8e7:	81 c2 c8 00 00 00    	add    edx,0xc8
   1c8ed:	c7 04 90 00 00 00 00 	mov    DWORD PTR [eax+edx*4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:47 (discriminator 3)
int fatfs_cache_init(struct fatfs *fs, FL_FILE *file)
{
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
   1c8f4:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:47 (discriminator 1)
   1c8f8:	83 7d fc 7f          	cmp    DWORD PTR [ebp-0x4],0x7f
   1c8fc:	7e d3                	jle    1c8d1 <fatfs_cache_init+0xf>
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:54
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
        file->cluster_cache_data[i] = 0;
    }
#endif

    return 1;
   1c8fe:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:55
}
   1c903:	c9                   	leave  
   1c904:	c3                   	ret    

0001c905 <fatfs_cache_get_next_cluster>:
fatfs_cache_get_next_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:60
//-----------------------------------------------------------------------------
// fatfs_cache_get_next_cluster:
//-----------------------------------------------------------------------------
int fatfs_cache_get_next_cluster(struct fatfs *fs, FL_FILE *file, uint32 clusterIdx, uint32 *pNextCluster)
{
   1c905:	55                   	push   ebp
   1c906:	89 e5                	mov    ebp,esp
   1c908:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:62
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    uint32 slot = clusterIdx % FAT_CLUSTER_CACHE_ENTRIES;
   1c90b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c90e:	83 e0 7f             	and    eax,0x7f
   1c911:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:64

    if (file->cluster_cache_idx[slot] == clusterIdx)
   1c914:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c917:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1c91a:	83 c2 48             	add    edx,0x48
   1c91d:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
   1c920:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1c923:	75 1b                	jne    1c940 <fatfs_cache_get_next_cluster+0x3b>
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:66
    {
        *pNextCluster = file->cluster_cache_data[slot];
   1c925:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c928:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1c92b:	81 c2 c8 00 00 00    	add    edx,0xc8
   1c931:	8b 14 90             	mov    edx,DWORD PTR [eax+edx*4]
   1c934:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1c937:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:67
        return 1;
   1c939:	b8 01 00 00 00       	mov    eax,0x1
   1c93e:	eb 05                	jmp    1c945 <fatfs_cache_get_next_cluster+0x40>
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:71
    }
#endif

    return 0;
   1c940:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:72
}
   1c945:	c9                   	leave  
   1c946:	c3                   	ret    

0001c947 <fatfs_cache_set_next_cluster>:
fatfs_cache_set_next_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:77
//-----------------------------------------------------------------------------
// fatfs_cache_set_next_cluster:
//-----------------------------------------------------------------------------
int fatfs_cache_set_next_cluster(struct fatfs *fs, FL_FILE *file, uint32 clusterIdx, uint32 nextCluster)
{
   1c947:	55                   	push   ebp
   1c948:	89 e5                	mov    ebp,esp
   1c94a:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:79
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    uint32 slot = clusterIdx % FAT_CLUSTER_CACHE_ENTRIES;
   1c94d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c950:	83 e0 7f             	and    eax,0x7f
   1c953:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:81

    if (file->cluster_cache_idx[slot] == clusterIdx)
   1c956:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c959:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1c95c:	83 c2 48             	add    edx,0x48
   1c95f:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
   1c962:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1c965:	75 14                	jne    1c97b <fatfs_cache_set_next_cluster+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:82
        file->cluster_cache_data[slot] = nextCluster;
   1c967:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c96a:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1c96d:	8d 8a c8 00 00 00    	lea    ecx,[edx+0xc8]
   1c973:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   1c976:	89 14 88             	mov    DWORD PTR [eax+ecx*4],edx
   1c979:	eb 21                	jmp    1c99c <fatfs_cache_set_next_cluster+0x55>
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:85
    else
    {
        file->cluster_cache_idx[slot] = clusterIdx;
   1c97b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c97e:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1c981:	8d 4a 48             	lea    ecx,[edx+0x48]
   1c984:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c987:	89 14 88             	mov    DWORD PTR [eax+ecx*4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:86
        file->cluster_cache_data[slot] = nextCluster;
   1c98a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c98d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1c990:	8d 8a c8 00 00 00    	lea    ecx,[edx+0xc8]
   1c996:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   1c999:	89 14 88             	mov    DWORD PTR [eax+ecx*4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:90
    }
#endif

    return 1;
   1c99c:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:91
}
   1c9a1:	c9                   	leave  
   1c9a2:	c3                   	ret    
   1c9a3:	90                   	nop

0001c9a4 <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   1c9a4:	55                   	push   ebp
   1c9a5:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   1c9a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c9aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   1c9b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c9b4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c9b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c9ba:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:51
}
   1c9bc:	90                   	nop
   1c9bd:	5d                   	pop    ebp
   1c9be:	c3                   	ret    

0001c9bf <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   1c9bf:	55                   	push   ebp
   1c9c0:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   1c9c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c9c5:	8b 00                	mov    eax,DWORD PTR [eax]
   1c9c7:	85 c0                	test   eax,eax
   1c9c9:	75 0d                	jne    1c9d8 <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   1c9cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c9ce:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c9d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c9d4:	89 10                	mov    DWORD PTR [eax],edx
   1c9d6:	eb 0e                	jmp    1c9e6 <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   1c9d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c9db:	8b 00                	mov    eax,DWORD PTR [eax]
   1c9dd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c9e0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   1c9e3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   1c9e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c9e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c9ec:	85 c0                	test   eax,eax
   1c9ee:	75 0d                	jne    1c9fd <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   1c9f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c9f3:	8b 10                	mov    edx,DWORD PTR [eax]
   1c9f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c9f8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   1c9fb:	eb 0d                	jmp    1ca0a <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   1c9fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ca00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1ca03:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1ca06:	8b 12                	mov    edx,DWORD PTR [edx]
   1ca08:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
}
   1ca0a:	90                   	nop
   1ca0b:	5d                   	pop    ebp
   1ca0c:	c3                   	ret    

0001ca0d <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1ca0d:	55                   	push   ebp
   1ca0e:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   1ca10:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ca13:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1ca16:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   1ca18:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ca1b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1ca1e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ca21:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   1ca24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ca27:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1ca2a:	85 c0                	test   eax,eax
   1ca2c:	75 0b                	jne    1ca39 <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   1ca2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ca31:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1ca34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   1ca37:	eb 0b                	jmp    1ca44 <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   1ca39:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ca3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1ca3f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1ca42:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   1ca44:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ca47:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1ca4a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:86
}
   1ca4d:	90                   	nop
   1ca4e:	5d                   	pop    ebp
   1ca4f:	c3                   	ret    

0001ca50 <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1ca50:	55                   	push   ebp
   1ca51:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   1ca53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ca56:	8b 10                	mov    edx,DWORD PTR [eax]
   1ca58:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ca5b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   1ca5d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ca60:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1ca63:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   1ca66:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ca69:	8b 00                	mov    eax,DWORD PTR [eax]
   1ca6b:	85 c0                	test   eax,eax
   1ca6d:	75 0a                	jne    1ca79 <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   1ca6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ca72:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1ca75:	89 10                	mov    DWORD PTR [eax],edx
   1ca77:	eb 0b                	jmp    1ca84 <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   1ca79:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ca7c:	8b 00                	mov    eax,DWORD PTR [eax]
   1ca7e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1ca81:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   1ca84:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ca87:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1ca8a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:103
}
   1ca8c:	90                   	nop
   1ca8d:	5d                   	pop    ebp
   1ca8e:	c3                   	ret    

0001ca8f <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   1ca8f:	55                   	push   ebp
   1ca90:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   1ca92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ca95:	8b 00                	mov    eax,DWORD PTR [eax]
   1ca97:	85 c0                	test   eax,eax
   1ca99:	75 26                	jne    1cac1 <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   1ca9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ca9e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1caa1:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   1caa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1caa6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1caa9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   1caac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1caaf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   1cab5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1cab8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   1cabf:	eb 14                	jmp    1cad5 <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   1cac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1cac4:	8b 00                	mov    eax,DWORD PTR [eax]
   1cac6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1cac9:	50                   	push   eax
   1caca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1cacd:	e8 7e ff ff ff       	call   1ca50 <fat_list_insert_before>
   1cad2:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
}
   1cad5:	90                   	nop
   1cad6:	c9                   	leave  
   1cad7:	c3                   	ret    

0001cad8 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   1cad8:	55                   	push   ebp
   1cad9:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   1cadb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1cade:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1cae1:	85 c0                	test   eax,eax
   1cae3:	75 10                	jne    1caf5 <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   1cae5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1cae8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1caeb:	e8 9f ff ff ff       	call   1ca8f <fat_list_insert_first>
   1caf0:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   1caf3:	eb 15                	jmp    1cb0a <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   1caf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1caf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1cafb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1cafe:	50                   	push   eax
   1caff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1cb02:	e8 06 ff ff ff       	call   1ca0d <fat_list_insert_after>
   1cb07:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
}
   1cb0a:	90                   	nop
   1cb0b:	c9                   	leave  
   1cb0c:	c3                   	ret    

0001cb0d <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   1cb0d:	55                   	push   ebp
   1cb0e:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   1cb10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1cb13:	8b 00                	mov    eax,DWORD PTR [eax]
   1cb15:	85 c0                	test   eax,eax
   1cb17:	0f 94 c0             	sete   al
   1cb1a:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:143
}
   1cb1d:	5d                   	pop    ebp
   1cb1e:	c3                   	ret    

0001cb1f <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   1cb1f:	55                   	push   ebp
   1cb20:	89 e5                	mov    ebp,esp
   1cb22:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   1cb25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1cb28:	8b 00                	mov    eax,DWORD PTR [eax]
   1cb2a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:154
    if (node)
   1cb2d:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1cb31:	74 0e                	je     1cb41 <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   1cb33:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   1cb36:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1cb39:	e8 81 fe ff ff       	call   1c9bf <fat_list_remove>
   1cb3e:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:157

    return node;
   1cb41:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:158
}
   1cb44:	c9                   	leave  
   1cb45:	c3                   	ret    

0001cb46 <_allocate_file>:
_allocate_file():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:72

//-----------------------------------------------------------------------------
// _allocate_file: Find a slot in the open files buffer for a new file
//-----------------------------------------------------------------------------
static FL_FILE* _allocate_file(void)
{
   1cb46:	55                   	push   ebp
   1cb47:	89 e5                	mov    ebp,esp
   1cb49:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:74
    // Allocate free file
    struct fat_node *node = fat_list_pop_head(&_free_file_list);
   1cb4c:	68 70 95 12 00       	push   0x129570
   1cb51:	e8 c9 ff ff ff       	call   1cb1f <fat_list_pop_head>
   1cb56:	83 c4 04             	add    esp,0x4
   1cb59:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:77

    // Add to open list
    if (node)
   1cb5c:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1cb60:	74 10                	je     1cb72 <_allocate_file+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:78
        fat_list_insert_last(&_open_file_list, node);
   1cb62:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   1cb65:	68 68 95 12 00       	push   0x129568
   1cb6a:	e8 69 ff ff ff       	call   1cad8 <fat_list_insert_last>
   1cb6f:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:80

    return fat_list_entry(node, FL_FILE, list_node);
   1cb72:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1cb76:	74 0a                	je     1cb82 <_allocate_file+0x3c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:80 (discriminator 1)
   1cb78:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1cb7b:	2d 34 07 00 00       	sub    eax,0x734
   1cb80:	eb 05                	jmp    1cb87 <_allocate_file+0x41>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:80 (discriminator 2)
   1cb82:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:81 (discriminator 5)
}
   1cb87:	c9                   	leave  
   1cb88:	c3                   	ret    

0001cb89 <_check_file_open>:
_check_file_open():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:86
//-----------------------------------------------------------------------------
// _check_file_open: Returns true if the file is already open
//-----------------------------------------------------------------------------
static int _check_file_open(FL_FILE* file)
{
   1cb89:	55                   	push   ebp
   1cb8a:	89 e5                	mov    ebp,esp
   1cb8c:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:90
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
   1cb8f:	a1 68 95 12 00       	mov    eax,ds:0x129568
   1cb94:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1cb97:	eb 6f                	jmp    1cc08 <_check_file_open+0x7f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:92
    {
        FL_FILE* openFile = fat_list_entry(node, FL_FILE, list_node);
   1cb99:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1cb9d:	74 0a                	je     1cba9 <_check_file_open+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:92 (discriminator 1)
   1cb9f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cba2:	2d 34 07 00 00       	sub    eax,0x734
   1cba7:	eb 05                	jmp    1cbae <_check_file_open+0x25>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:92 (discriminator 2)
   1cba9:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:92 (discriminator 4)
   1cbae:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:95 (discriminator 4)

        // If not the current file
        if (openFile != file)
   1cbb1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cbb4:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1cbb7:	74 46                	je     1cbff <_check_file_open+0x76>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:98
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
   1cbb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1cbbc:	8d 50 14             	lea    edx,[eax+0x14]
   1cbbf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cbc2:	83 c0 14             	add    eax,0x14
   1cbc5:	83 ec 08             	sub    esp,0x8
   1cbc8:	52                   	push   edx
   1cbc9:	50                   	push   eax
   1cbca:	e8 c4 38 00 00       	call   20493 <fatfs_compare_names>
   1cbcf:	83 c4 10             	add    esp,0x10
   1cbd2:	85 c0                	test   eax,eax
   1cbd4:	74 29                	je     1cbff <_check_file_open+0x76>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:98 (discriminator 1)
   1cbd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1cbd9:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1cbdf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cbe2:	05 94 00 00 00       	add    eax,0x94
   1cbe7:	83 ec 08             	sub    esp,0x8
   1cbea:	52                   	push   edx
   1cbeb:	50                   	push   eax
   1cbec:	e8 a2 38 00 00       	call   20493 <fatfs_compare_names>
   1cbf1:	83 c4 10             	add    esp,0x10
   1cbf4:	85 c0                	test   eax,eax
   1cbf6:	74 07                	je     1cbff <_check_file_open+0x76>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:99
                return 1;
   1cbf8:	b8 01 00 00 00       	mov    eax,0x1
   1cbfd:	eb 14                	jmp    1cc13 <_check_file_open+0x8a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:90 (discriminator 2)
static int _check_file_open(FL_FILE* file)
{
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
   1cbff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cc02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1cc05:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:90 (discriminator 1)
   1cc08:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1cc0c:	75 8b                	jne    1cb99 <_check_file_open+0x10>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:103
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
                return 1;
        }
    }

    return 0;
   1cc0e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:104
}
   1cc13:	c9                   	leave  
   1cc14:	c3                   	ret    

0001cc15 <_free_file>:
_free_file():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:109
//-----------------------------------------------------------------------------
// _free_file: Free open file handle
//-----------------------------------------------------------------------------
static void _free_file(FL_FILE* file)
{
   1cc15:	55                   	push   ebp
   1cc16:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:111
    // Remove from open list
    fat_list_remove(&_open_file_list, &file->list_node);
   1cc18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1cc1b:	05 34 07 00 00       	add    eax,0x734
   1cc20:	50                   	push   eax
   1cc21:	68 68 95 12 00       	push   0x129568
   1cc26:	e8 94 fd ff ff       	call   1c9bf <fat_list_remove>
   1cc2b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:114

    // Add to free list
    fat_list_insert_last(&_free_file_list, &file->list_node);
   1cc2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1cc31:	05 34 07 00 00       	add    eax,0x734
   1cc36:	50                   	push   eax
   1cc37:	68 70 95 12 00       	push   0x129570
   1cc3c:	e8 97 fe ff ff       	call   1cad8 <fat_list_insert_last>
   1cc41:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:115
}
   1cc44:	90                   	nop
   1cc45:	c9                   	leave  
   1cc46:	c3                   	ret    

0001cc47 <_open_directory>:
_open_directory():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:126
//-----------------------------------------------------------------------------
// _open_directory: Cycle through path string to find the start cluster
// address of the highest subdir.
//-----------------------------------------------------------------------------
static int _open_directory(char *path, uint32 *pathCluster)
{
   1cc47:	55                   	push   ebp
   1cc48:	89 e5                	mov    ebp,esp
   1cc4a:	81 ec b8 00 00 00    	sub    esp,0xb8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:134
    char currentfolder[FATFS_MAX_LONG_FILENAME];
    struct fat_dir_entry sfEntry;
    uint32 startcluster;

    // Set starting cluster to root cluster
    startcluster = fatfs_get_root_cluster(&_fs);
   1cc50:	83 ec 0c             	sub    esp,0xc
   1cc53:	68 00 91 12 00       	push   0x129100
   1cc58:	e8 e8 ee ff ff       	call   1bb45 <fatfs_get_root_cluster>
   1cc5d:	83 c4 10             	add    esp,0x10
   1cc60:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:137

    // Find number of levels
    levels = fatfs_total_path_levels(path);
   1cc63:	83 ec 0c             	sub    esp,0xc
   1cc66:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1cc69:	e8 c2 34 00 00       	call   20130 <fatfs_total_path_levels>
   1cc6e:	83 c4 10             	add    esp,0x10
   1cc71:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:140

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   1cc74:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1cc7b:	e9 93 00 00 00       	jmp    1cd13 <_open_directory+0xcc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:142
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
   1cc80:	68 80 00 00 00       	push   0x80
   1cc85:	8d 85 6c ff ff ff    	lea    eax,[ebp-0x94]
   1cc8b:	50                   	push   eax
   1cc8c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1cc8f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1cc92:	e8 29 35 00 00       	call   201c0 <fatfs_get_substring>
   1cc97:	83 c4 10             	add    esp,0x10
   1cc9a:	83 f8 ff             	cmp    eax,0xffffffff
   1cc9d:	75 0a                	jne    1cca9 <_open_directory+0x62>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:143
            return 0;
   1cc9f:	b8 00 00 00 00       	mov    eax,0x0
   1cca4:	e9 86 00 00 00       	jmp    1cd2f <_open_directory+0xe8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:146

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   1cca9:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
   1ccaf:	50                   	push   eax
   1ccb0:	8d 85 6c ff ff ff    	lea    eax,[ebp-0x94]
   1ccb6:	50                   	push   eax
   1ccb7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1ccba:	68 00 91 12 00       	push   0x129100
   1ccbf:	e8 8c ee ff ff       	call   1bb50 <fatfs_get_file_entry>
   1ccc4:	83 c4 10             	add    esp,0x10
   1ccc7:	85 c0                	test   eax,eax
   1ccc9:	74 3d                	je     1cd08 <_open_directory+0xc1>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:149
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
   1cccb:	83 ec 0c             	sub    esp,0xc
   1ccce:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
   1ccd4:	50                   	push   eax
   1ccd5:	e8 2a 2d 00 00       	call   1fa04 <fatfs_entry_is_dir>
   1ccda:	83 c4 10             	add    esp,0x10
   1ccdd:	85 c0                	test   eax,eax
   1ccdf:	74 20                	je     1cd01 <_open_directory+0xba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:150
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   1cce1:	0f b7 85 60 ff ff ff 	movzx  eax,WORD PTR [ebp-0xa0]
   1cce8:	0f b7 c0             	movzx  eax,ax
   1cceb:	c1 e0 10             	shl    eax,0x10
   1ccee:	89 c2                	mov    edx,eax
   1ccf0:	0f b7 85 66 ff ff ff 	movzx  eax,WORD PTR [ebp-0x9a]
   1ccf7:	0f b7 c0             	movzx  eax,ax
   1ccfa:	01 d0                	add    eax,edx
   1ccfc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   1ccff:	eb 0e                	jmp    1cd0f <_open_directory+0xc8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:152
            else
                return 0;
   1cd01:	b8 00 00 00 00       	mov    eax,0x0
   1cd06:	eb 27                	jmp    1cd2f <_open_directory+0xe8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:155
        }
        else
            return 0;
   1cd08:	b8 00 00 00 00       	mov    eax,0x0
   1cd0d:	eb 20                	jmp    1cd2f <_open_directory+0xe8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:140 (discriminator 2)

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   1cd0f:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:140 (discriminator 1)
   1cd13:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cd16:	83 c0 01             	add    eax,0x1
   1cd19:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1cd1c:	0f 8f 5e ff ff ff    	jg     1cc80 <_open_directory+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:158
        }
        else
            return 0;
    }

    *pathCluster = startcluster;
   1cd22:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1cd25:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1cd28:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:159
    return 1;
   1cd2a:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:160 (discriminator 1)
}
   1cd2f:	c9                   	leave  
   1cd30:	c3                   	ret    

0001cd31 <_create_directory>:
_create_directory():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:166
//-----------------------------------------------------------------------------
// _create_directory: Cycle through path string and create the end directory
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static int _create_directory(char *path)
{
   1cd31:	55                   	push   ebp
   1cd32:	89 e5                	mov    ebp,esp
   1cd34:	53                   	push   ebx
   1cd35:	83 ec 44             	sub    esp,0x44
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:170
    FL_FILE* file;
    struct fat_dir_entry sfEntry;
    char shortFilename[FAT_SFN_SIZE_FULL];
    int tailNum = 0;
   1cd38:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:174
    int i;

    // Allocate a new file handle
    file = _allocate_file();
   1cd3f:	e8 02 fe ff ff       	call   1cb46 <_allocate_file>
   1cd44:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:175
    if (!file)
   1cd47:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   1cd4b:	75 0a                	jne    1cd57 <_create_directory+0x26>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:176
        return 0;
   1cd4d:	b8 00 00 00 00       	mov    eax,0x0
   1cd52:	e9 94 03 00 00       	jmp    1d0eb <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:179

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   1cd57:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cd5a:	83 c0 14             	add    eax,0x14
   1cd5d:	83 ec 04             	sub    esp,0x4
   1cd60:	68 80 00 00 00       	push   0x80
   1cd65:	6a 00                	push   0x0
   1cd67:	50                   	push   eax
   1cd68:	e8 9c 88 00 00       	call   25609 <memset>
   1cd6d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:180
    memset(file->filename, '\0', sizeof(file->filename));
   1cd70:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cd73:	05 94 00 00 00       	add    eax,0x94
   1cd78:	83 ec 04             	sub    esp,0x4
   1cd7b:	68 80 00 00 00       	push   0x80
   1cd80:	6a 00                	push   0x0
   1cd82:	50                   	push   eax
   1cd83:	e8 81 88 00 00       	call   25609 <memset>
   1cd88:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:183

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)path, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
   1cd8b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cd8e:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1cd94:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cd97:	83 c0 14             	add    eax,0x14
   1cd9a:	83 ec 0c             	sub    esp,0xc
   1cd9d:	68 80 00 00 00       	push   0x80
   1cda2:	52                   	push   edx
   1cda3:	68 80 00 00 00       	push   0x80
   1cda8:	50                   	push   eax
   1cda9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1cdac:	e8 14 35 00 00       	call   202c5 <fatfs_split_path>
   1cdb1:	83 c4 20             	add    esp,0x20
   1cdb4:	83 f8 ff             	cmp    eax,0xffffffff
   1cdb7:	75 18                	jne    1cdd1 <_create_directory+0xa0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:185
    {
        _free_file(file);
   1cdb9:	83 ec 0c             	sub    esp,0xc
   1cdbc:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cdbf:	e8 51 fe ff ff       	call   1cc15 <_free_file>
   1cdc4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:186
        return 0;
   1cdc7:	b8 00 00 00 00       	mov    eax,0x0
   1cdcc:	e9 1a 03 00 00       	jmp    1d0eb <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:190
    }

    // Check if file already open
    if (_check_file_open(file))
   1cdd1:	83 ec 0c             	sub    esp,0xc
   1cdd4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cdd7:	e8 ad fd ff ff       	call   1cb89 <_check_file_open>
   1cddc:	83 c4 10             	add    esp,0x10
   1cddf:	85 c0                	test   eax,eax
   1cde1:	74 18                	je     1cdfb <_create_directory+0xca>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:192
    {
        _free_file(file);
   1cde3:	83 ec 0c             	sub    esp,0xc
   1cde6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cde9:	e8 27 fe ff ff       	call   1cc15 <_free_file>
   1cdee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:193
        return 0;
   1cdf1:	b8 00 00 00 00       	mov    eax,0x0
   1cdf6:	e9 f0 02 00 00       	jmp    1d0eb <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:197
    }

    // If file is in the root dir
    if (file->path[0] == 0)
   1cdfb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cdfe:	0f b6 40 14          	movzx  eax,BYTE PTR [eax+0x14]
   1ce02:	84 c0                	test   al,al
   1ce04:	75 19                	jne    1ce1f <_create_directory+0xee>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:198
        file->parentcluster = fatfs_get_root_cluster(&_fs);
   1ce06:	83 ec 0c             	sub    esp,0xc
   1ce09:	68 00 91 12 00       	push   0x129100
   1ce0e:	e8 32 ed ff ff       	call   1bb45 <fatfs_get_root_cluster>
   1ce13:	83 c4 10             	add    esp,0x10
   1ce16:	89 c2                	mov    edx,eax
   1ce18:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ce1b:	89 10                	mov    DWORD PTR [eax],edx
   1ce1d:	eb 32                	jmp    1ce51 <_create_directory+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:202
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
   1ce1f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ce22:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1ce25:	83 c2 14             	add    edx,0x14
   1ce28:	83 ec 08             	sub    esp,0x8
   1ce2b:	50                   	push   eax
   1ce2c:	52                   	push   edx
   1ce2d:	e8 15 fe ff ff       	call   1cc47 <_open_directory>
   1ce32:	83 c4 10             	add    esp,0x10
   1ce35:	85 c0                	test   eax,eax
   1ce37:	75 18                	jne    1ce51 <_create_directory+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:204
        {
            _free_file(file);
   1ce39:	83 ec 0c             	sub    esp,0xc
   1ce3c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1ce3f:	e8 d1 fd ff ff       	call   1cc15 <_free_file>
   1ce44:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:205
            return 0;
   1ce47:	b8 00 00 00 00       	mov    eax,0x0
   1ce4c:	e9 9a 02 00 00       	jmp    1d0eb <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:210
        }
    }

    // Check if same filename exists in directory
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry) == 1)
   1ce51:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ce54:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1ce5a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ce5d:	8b 00                	mov    eax,DWORD PTR [eax]
   1ce5f:	8d 55 cc             	lea    edx,[ebp-0x34]
   1ce62:	52                   	push   edx
   1ce63:	51                   	push   ecx
   1ce64:	50                   	push   eax
   1ce65:	68 00 91 12 00       	push   0x129100
   1ce6a:	e8 e1 ec ff ff       	call   1bb50 <fatfs_get_file_entry>
   1ce6f:	83 c4 10             	add    esp,0x10
   1ce72:	83 f8 01             	cmp    eax,0x1
   1ce75:	75 18                	jne    1ce8f <_create_directory+0x15e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:212
    {
        _free_file(file);
   1ce77:	83 ec 0c             	sub    esp,0xc
   1ce7a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1ce7d:	e8 93 fd ff ff       	call   1cc15 <_free_file>
   1ce82:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:213
        return 0;
   1ce85:	b8 00 00 00 00       	mov    eax,0x0
   1ce8a:	e9 5c 02 00 00       	jmp    1d0eb <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:216
    }

    file->startcluster = 0;
   1ce8f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ce92:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:219

    // Create the file space for the folder (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
   1ce99:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ce9c:	83 c0 04             	add    eax,0x4
   1ce9f:	6a 01                	push   0x1
   1cea1:	50                   	push   eax
   1cea2:	6a 01                	push   0x1
   1cea4:	68 00 91 12 00       	push   0x129100
   1cea9:	e8 da 44 00 00       	call   21388 <fatfs_allocate_free_space>
   1ceae:	83 c4 10             	add    esp,0x10
   1ceb1:	85 c0                	test   eax,eax
   1ceb3:	75 18                	jne    1cecd <_create_directory+0x19c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:221
    {
        _free_file(file);
   1ceb5:	83 ec 0c             	sub    esp,0xc
   1ceb8:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cebb:	e8 55 fd ff ff       	call   1cc15 <_free_file>
   1cec0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:222
        return 0;
   1cec3:	b8 00 00 00 00       	mov    eax,0x0
   1cec8:	e9 1e 02 00 00       	jmp    1d0eb <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:226
    }

    // Erase new directory cluster
    memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
   1cecd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ced0:	05 28 05 00 00       	add    eax,0x528
   1ced5:	83 ec 04             	sub    esp,0x4
   1ced8:	68 00 02 00 00       	push   0x200
   1cedd:	6a 00                	push   0x0
   1cedf:	50                   	push   eax
   1cee0:	e8 24 87 00 00       	call   25609 <memset>
   1cee5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:227
    for (i=0;i<_fs.sectors_per_cluster;i++)
   1cee8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   1ceef:	eb 42                	jmp    1cf33 <_create_directory+0x202>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:229
    {
        if (!fatfs_write_sector(&_fs, file->startcluster, i, file->file_data_sector))
   1cef1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cef4:	8d 88 28 05 00 00    	lea    ecx,[eax+0x528]
   1cefa:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1cefd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cf00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1cf03:	51                   	push   ecx
   1cf04:	52                   	push   edx
   1cf05:	50                   	push   eax
   1cf06:	68 00 91 12 00       	push   0x129100
   1cf0b:	e8 6d ea ff ff       	call   1b97d <fatfs_write_sector>
   1cf10:	83 c4 10             	add    esp,0x10
   1cf13:	85 c0                	test   eax,eax
   1cf15:	75 18                	jne    1cf2f <_create_directory+0x1fe>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:231
        {
            _free_file(file);
   1cf17:	83 ec 0c             	sub    esp,0xc
   1cf1a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cf1d:	e8 f3 fc ff ff       	call   1cc15 <_free_file>
   1cf22:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:232
            return 0;
   1cf25:	b8 00 00 00 00       	mov    eax,0x0
   1cf2a:	e9 bc 01 00 00       	jmp    1d0eb <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:227 (discriminator 2)
        return 0;
    }

    // Erase new directory cluster
    memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
    for (i=0;i<_fs.sectors_per_cluster;i++)
   1cf2f:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:227 (discriminator 1)
   1cf33:	0f b6 05 00 91 12 00 	movzx  eax,BYTE PTR ds:0x129100
   1cf3a:	0f b6 c0             	movzx  eax,al
   1cf3d:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   1cf40:	7f af                	jg     1cef1 <_create_directory+0x1c0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:239
    }

#if FATFS_INC_LFN_SUPPORT

    // Generate a short filename & tail
    tailNum = 0;
   1cf42:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:243
    do
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);
   1cf49:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cf4c:	05 94 00 00 00       	add    eax,0x94
   1cf51:	83 ec 08             	sub    esp,0x8
   1cf54:	50                   	push   eax
   1cf55:	8d 45 c1             	lea    eax,[ebp-0x3f]
   1cf58:	50                   	push   eax
   1cf59:	e8 66 2d 00 00       	call   1fcc4 <fatfs_lfn_create_sfn>
   1cf5e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:246

        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
   1cf61:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1cf65:	74 1f                	je     1cf86 <_create_directory+0x255>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:247
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
   1cf67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cf6a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1cf6d:	81 c2 14 01 00 00    	add    edx,0x114
   1cf73:	83 ec 04             	sub    esp,0x4
   1cf76:	50                   	push   eax
   1cf77:	8d 45 c1             	lea    eax,[ebp-0x3f]
   1cf7a:	50                   	push   eax
   1cf7b:	52                   	push   edx
   1cf7c:	e8 c9 2f 00 00       	call   1ff4a <fatfs_lfn_generate_tail>
   1cf81:	83 c4 10             	add    esp,0x10
   1cf84:	eb 1b                	jmp    1cfa1 <_create_directory+0x270>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:250
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
   1cf86:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cf89:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1cf8f:	83 ec 04             	sub    esp,0x4
   1cf92:	6a 0b                	push   0xb
   1cf94:	8d 45 c1             	lea    eax,[ebp-0x3f]
   1cf97:	50                   	push   eax
   1cf98:	52                   	push   edx
   1cf99:	e8 1e 91 00 00       	call   260bc <memcpy>
   1cf9e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:253

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
   1cfa1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cfa4:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1cfaa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cfad:	8b 00                	mov    eax,DWORD PTR [eax]
   1cfaf:	83 ec 04             	sub    esp,0x4
   1cfb2:	52                   	push   edx
   1cfb3:	50                   	push   eax
   1cfb4:	68 00 91 12 00       	push   0x129100
   1cfb9:	e8 0f ee ff ff       	call   1bdcd <fatfs_sfn_exists>
   1cfbe:	83 c4 10             	add    esp,0x10
   1cfc1:	85 c0                	test   eax,eax
   1cfc3:	74 13                	je     1cfd8 <_create_directory+0x2a7>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:256
            break;

        tailNum++;
   1cfc5:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:258
    }
    while (tailNum < 9999);
   1cfc9:	81 7d f4 0e 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270e
   1cfd0:	0f 8e 73 ff ff ff    	jle    1cf49 <_create_directory+0x218>
   1cfd6:	eb 01                	jmp    1cfd9 <_create_directory+0x2a8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:254
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
            break;
   1cfd8:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:261
        tailNum++;
    }
    while (tailNum < 9999);

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
   1cfd9:	81 7d f4 0f 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270f
   1cfe0:	75 2f                	jne    1d011 <_create_directory+0x2e0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:264
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1cfe2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cfe5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1cfe8:	83 ec 08             	sub    esp,0x8
   1cfeb:	50                   	push   eax
   1cfec:	68 00 91 12 00       	push   0x129100
   1cff1:	e8 d8 40 00 00       	call   210ce <fatfs_free_cluster_chain>
   1cff6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:266

        _free_file(file);
   1cff9:	83 ec 0c             	sub    esp,0xc
   1cffc:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cfff:	e8 11 fc ff ff       	call   1cc15 <_free_file>
   1d004:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:267
        return 0;
   1d007:	b8 00 00 00 00       	mov    eax,0x0
   1d00c:	e9 da 00 00 00       	jmp    1d0eb <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:295
        return 0;
    }
#endif

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 1))
   1d011:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d014:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1d017:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d01a:	8d 98 14 01 00 00    	lea    ebx,[eax+0x114]
   1d020:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d023:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1d029:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d02c:	8b 00                	mov    eax,DWORD PTR [eax]
   1d02e:	83 ec 04             	sub    esp,0x4
   1d031:	6a 01                	push   0x1
   1d033:	6a 00                	push   0x0
   1d035:	52                   	push   edx
   1d036:	53                   	push   ebx
   1d037:	51                   	push   ecx
   1d038:	50                   	push   eax
   1d039:	68 00 91 12 00       	push   0x129100
   1d03e:	e8 5d 46 00 00       	call   216a0 <fatfs_add_file_entry>
   1d043:	83 c4 20             	add    esp,0x20
   1d046:	85 c0                	test   eax,eax
   1d048:	75 2c                	jne    1d076 <_create_directory+0x345>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:298
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1d04a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d04d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d050:	83 ec 08             	sub    esp,0x8
   1d053:	50                   	push   eax
   1d054:	68 00 91 12 00       	push   0x129100
   1d059:	e8 70 40 00 00       	call   210ce <fatfs_free_cluster_chain>
   1d05e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:300

        _free_file(file);
   1d061:	83 ec 0c             	sub    esp,0xc
   1d064:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1d067:	e8 a9 fb ff ff       	call   1cc15 <_free_file>
   1d06c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:301
        return 0;
   1d06f:	b8 00 00 00 00       	mov    eax,0x0
   1d074:	eb 75                	jmp    1d0eb <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:305
    }

    // General
    file->filelength = 0;
   1d076:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d079:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:306
    file->bytenum = 0;
   1d080:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:307
    file->file_data_address = 0xFFFFFFFF;
   1d08a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d08d:	c7 80 28 07 00 00 ff 	mov    DWORD PTR [eax+0x728],0xffffffff
   1d094:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:308
    file->file_data_dirty = 0;
   1d097:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d09a:	c7 80 2c 07 00 00 00 	mov    DWORD PTR [eax+0x72c],0x0
   1d0a1:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:309
    file->filelength_changed = 0;
   1d0a4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d0a7:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:312

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
   1d0ae:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d0b1:	c7 80 20 05 00 00 ff 	mov    DWORD PTR [eax+0x520],0xffffffff
   1d0b8:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:313
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
   1d0bb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d0be:	c7 80 24 05 00 00 ff 	mov    DWORD PTR [eax+0x524],0xffffffff
   1d0c5:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:315

    fatfs_fat_purge(&_fs);
   1d0c8:	83 ec 0c             	sub    esp,0xc
   1d0cb:	68 00 91 12 00       	push   0x129100
   1d0d0:	e8 5f 3a 00 00       	call   20b34 <fatfs_fat_purge>
   1d0d5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:317

    _free_file(file);
   1d0d8:	83 ec 0c             	sub    esp,0xc
   1d0db:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1d0de:	e8 32 fb ff ff       	call   1cc15 <_free_file>
   1d0e3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:318
    return 1;
   1d0e6:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:319 (discriminator 1)
}
   1d0eb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1d0ee:	c9                   	leave  
   1d0ef:	c3                   	ret    

0001d0f0 <_open_file>:
_open_file():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:325
#endif
//-----------------------------------------------------------------------------
// _open_file: Open a file for reading
//-----------------------------------------------------------------------------
static FL_FILE* _open_file(const char *path)
{
   1d0f0:	55                   	push   ebp
   1d0f1:	89 e5                	mov    ebp,esp
   1d0f3:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:330
    FL_FILE* file;
    struct fat_dir_entry sfEntry;

    // Allocate a new file handle
    file = _allocate_file();
   1d0f6:	e8 4b fa ff ff       	call   1cb46 <_allocate_file>
   1d0fb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:331
    if (!file)
   1d0fe:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1d102:	75 0a                	jne    1d10e <_open_file+0x1e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:332
        return NULL;
   1d104:	b8 00 00 00 00       	mov    eax,0x0
   1d109:	e9 fc 01 00 00       	jmp    1d30a <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:335

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   1d10e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d111:	83 c0 14             	add    eax,0x14
   1d114:	83 ec 04             	sub    esp,0x4
   1d117:	68 80 00 00 00       	push   0x80
   1d11c:	6a 00                	push   0x0
   1d11e:	50                   	push   eax
   1d11f:	e8 e5 84 00 00       	call   25609 <memset>
   1d124:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:336
    memset(file->filename, '\0', sizeof(file->filename));
   1d127:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d12a:	05 94 00 00 00       	add    eax,0x94
   1d12f:	83 ec 04             	sub    esp,0x4
   1d132:	68 80 00 00 00       	push   0x80
   1d137:	6a 00                	push   0x0
   1d139:	50                   	push   eax
   1d13a:	e8 ca 84 00 00       	call   25609 <memset>
   1d13f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:339

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)path, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
   1d142:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d145:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1d14b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d14e:	83 c0 14             	add    eax,0x14
   1d151:	83 ec 0c             	sub    esp,0xc
   1d154:	68 80 00 00 00       	push   0x80
   1d159:	52                   	push   edx
   1d15a:	68 80 00 00 00       	push   0x80
   1d15f:	50                   	push   eax
   1d160:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d163:	e8 5d 31 00 00       	call   202c5 <fatfs_split_path>
   1d168:	83 c4 20             	add    esp,0x20
   1d16b:	83 f8 ff             	cmp    eax,0xffffffff
   1d16e:	75 18                	jne    1d188 <_open_file+0x98>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:341
    {
        _free_file(file);
   1d170:	83 ec 0c             	sub    esp,0xc
   1d173:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d176:	e8 9a fa ff ff       	call   1cc15 <_free_file>
   1d17b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:342
        return NULL;
   1d17e:	b8 00 00 00 00       	mov    eax,0x0
   1d183:	e9 82 01 00 00       	jmp    1d30a <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:346
    }

    // Check if file already open
    if (_check_file_open(file))
   1d188:	83 ec 0c             	sub    esp,0xc
   1d18b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d18e:	e8 f6 f9 ff ff       	call   1cb89 <_check_file_open>
   1d193:	83 c4 10             	add    esp,0x10
   1d196:	85 c0                	test   eax,eax
   1d198:	74 18                	je     1d1b2 <_open_file+0xc2>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:348
    {
        _free_file(file);
   1d19a:	83 ec 0c             	sub    esp,0xc
   1d19d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d1a0:	e8 70 fa ff ff       	call   1cc15 <_free_file>
   1d1a5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:349
        return NULL;
   1d1a8:	b8 00 00 00 00       	mov    eax,0x0
   1d1ad:	e9 58 01 00 00       	jmp    1d30a <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:353
    }

    // If file is in the root dir
    if (file->path[0]==0)
   1d1b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d1b5:	0f b6 40 14          	movzx  eax,BYTE PTR [eax+0x14]
   1d1b9:	84 c0                	test   al,al
   1d1bb:	75 19                	jne    1d1d6 <_open_file+0xe6>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:354
        file->parentcluster = fatfs_get_root_cluster(&_fs);
   1d1bd:	83 ec 0c             	sub    esp,0xc
   1d1c0:	68 00 91 12 00       	push   0x129100
   1d1c5:	e8 7b e9 ff ff       	call   1bb45 <fatfs_get_root_cluster>
   1d1ca:	83 c4 10             	add    esp,0x10
   1d1cd:	89 c2                	mov    edx,eax
   1d1cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d1d2:	89 10                	mov    DWORD PTR [eax],edx
   1d1d4:	eb 32                	jmp    1d208 <_open_file+0x118>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:358
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
   1d1d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d1d9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1d1dc:	83 c2 14             	add    edx,0x14
   1d1df:	83 ec 08             	sub    esp,0x8
   1d1e2:	50                   	push   eax
   1d1e3:	52                   	push   edx
   1d1e4:	e8 5e fa ff ff       	call   1cc47 <_open_directory>
   1d1e9:	83 c4 10             	add    esp,0x10
   1d1ec:	85 c0                	test   eax,eax
   1d1ee:	75 18                	jne    1d208 <_open_file+0x118>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:360
        {
            _free_file(file);
   1d1f0:	83 ec 0c             	sub    esp,0xc
   1d1f3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d1f6:	e8 1a fa ff ff       	call   1cc15 <_free_file>
   1d1fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:361
            return NULL;
   1d1fe:	b8 00 00 00 00       	mov    eax,0x0
   1d203:	e9 02 01 00 00       	jmp    1d30a <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:366
        }
    }

    // Using dir cluster address search for filename
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry))
   1d208:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d20b:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1d211:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d214:	8b 00                	mov    eax,DWORD PTR [eax]
   1d216:	8d 55 d4             	lea    edx,[ebp-0x2c]
   1d219:	52                   	push   edx
   1d21a:	51                   	push   ecx
   1d21b:	50                   	push   eax
   1d21c:	68 00 91 12 00       	push   0x129100
   1d221:	e8 2a e9 ff ff       	call   1bb50 <fatfs_get_file_entry>
   1d226:	83 c4 10             	add    esp,0x10
   1d229:	85 c0                	test   eax,eax
   1d22b:	0f 84 c6 00 00 00    	je     1d2f7 <_open_file+0x207>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:368
        // Make sure entry is file not dir!
        if (fatfs_entry_is_file(&sfEntry))
   1d231:	83 ec 0c             	sub    esp,0xc
   1d234:	8d 45 d4             	lea    eax,[ebp-0x2c]
   1d237:	50                   	push   eax
   1d238:	e8 e9 27 00 00       	call   1fa26 <fatfs_entry_is_file>
   1d23d:	83 c4 10             	add    esp,0x10
   1d240:	85 c0                	test   eax,eax
   1d242:	0f 84 af 00 00 00    	je     1d2f7 <_open_file+0x207>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:371
        {
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
   1d248:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d24b:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1d251:	83 ec 04             	sub    esp,0x4
   1d254:	6a 0b                	push   0xb
   1d256:	8d 45 d4             	lea    eax,[ebp-0x2c]
   1d259:	50                   	push   eax
   1d25a:	52                   	push   edx
   1d25b:	e8 5c 8e 00 00       	call   260bc <memcpy>
   1d260:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:372
            file->filelength = FAT_HTONL(sfEntry.FileSize);
   1d263:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1d266:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d269:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:373
            file->bytenum = 0;
   1d26c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d26f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:374
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   1d276:	0f b7 45 e8          	movzx  eax,WORD PTR [ebp-0x18]
   1d27a:	0f b7 c0             	movzx  eax,ax
   1d27d:	c1 e0 10             	shl    eax,0x10
   1d280:	89 c2                	mov    edx,eax
   1d282:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1d286:	0f b7 c0             	movzx  eax,ax
   1d289:	01 c2                	add    edx,eax
   1d28b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d28e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:375
            file->file_data_address = 0xFFFFFFFF;
   1d291:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d294:	c7 80 28 07 00 00 ff 	mov    DWORD PTR [eax+0x728],0xffffffff
   1d29b:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:376
            file->file_data_dirty = 0;
   1d29e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d2a1:	c7 80 2c 07 00 00 00 	mov    DWORD PTR [eax+0x72c],0x0
   1d2a8:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:377
            file->filelength_changed = 0;
   1d2ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d2ae:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:380

            // Quick lookup for next link in the chain
            file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
   1d2b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d2b8:	c7 80 20 05 00 00 ff 	mov    DWORD PTR [eax+0x520],0xffffffff
   1d2bf:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:381
            file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
   1d2c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d2c5:	c7 80 24 05 00 00 ff 	mov    DWORD PTR [eax+0x524],0xffffffff
   1d2cc:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:383

            fatfs_cache_init(&_fs, file);
   1d2cf:	83 ec 08             	sub    esp,0x8
   1d2d2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d2d5:	68 00 91 12 00       	push   0x129100
   1d2da:	e8 e3 f5 ff ff       	call   1c8c2 <fatfs_cache_init>
   1d2df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:385

            fatfs_fat_purge(&_fs);
   1d2e2:	83 ec 0c             	sub    esp,0xc
   1d2e5:	68 00 91 12 00       	push   0x129100
   1d2ea:	e8 45 38 00 00       	call   20b34 <fatfs_fat_purge>
   1d2ef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:387

            return file;
   1d2f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d2f5:	eb 13                	jmp    1d30a <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:390
        }

    _free_file(file);
   1d2f7:	83 ec 0c             	sub    esp,0xc
   1d2fa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d2fd:	e8 13 f9 ff ff       	call   1cc15 <_free_file>
   1d302:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:391
    return NULL;
   1d305:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:392 (discriminator 1)
}
   1d30a:	c9                   	leave  
   1d30b:	c3                   	ret    

0001d30c <_create_file>:
_create_file():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:398
//-----------------------------------------------------------------------------
// _create_file: Create a new file
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static FL_FILE* _create_file(const char *filename)
{
   1d30c:	55                   	push   ebp
   1d30d:	89 e5                	mov    ebp,esp
   1d30f:	53                   	push   ebx
   1d310:	83 ec 44             	sub    esp,0x44
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:402
    FL_FILE* file;
    struct fat_dir_entry sfEntry;
    char shortFilename[FAT_SFN_SIZE_FULL];
    int tailNum = 0;
   1d313:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:405

    // No write access?
    if (!_fs.disk_io.write_media)
   1d31a:	a1 38 91 12 00       	mov    eax,ds:0x129138
   1d31f:	85 c0                	test   eax,eax
   1d321:	75 0a                	jne    1d32d <_create_file+0x21>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:406
        return NULL;
   1d323:	b8 00 00 00 00       	mov    eax,0x0
   1d328:	e9 3a 03 00 00       	jmp    1d667 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:409

    // Allocate a new file handle
    file = _allocate_file();
   1d32d:	e8 14 f8 ff ff       	call   1cb46 <_allocate_file>
   1d332:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:410
    if (!file)
   1d335:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1d339:	75 0a                	jne    1d345 <_create_file+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:411
        return NULL;
   1d33b:	b8 00 00 00 00       	mov    eax,0x0
   1d340:	e9 22 03 00 00       	jmp    1d667 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:414

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   1d345:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d348:	83 c0 14             	add    eax,0x14
   1d34b:	83 ec 04             	sub    esp,0x4
   1d34e:	68 80 00 00 00       	push   0x80
   1d353:	6a 00                	push   0x0
   1d355:	50                   	push   eax
   1d356:	e8 ae 82 00 00       	call   25609 <memset>
   1d35b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:415
    memset(file->filename, '\0', sizeof(file->filename));
   1d35e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d361:	05 94 00 00 00       	add    eax,0x94
   1d366:	83 ec 04             	sub    esp,0x4
   1d369:	68 80 00 00 00       	push   0x80
   1d36e:	6a 00                	push   0x0
   1d370:	50                   	push   eax
   1d371:	e8 93 82 00 00       	call   25609 <memset>
   1d376:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:418

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)filename, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
   1d379:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d37c:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1d382:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d385:	83 c0 14             	add    eax,0x14
   1d388:	83 ec 0c             	sub    esp,0xc
   1d38b:	68 80 00 00 00       	push   0x80
   1d390:	52                   	push   edx
   1d391:	68 80 00 00 00       	push   0x80
   1d396:	50                   	push   eax
   1d397:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d39a:	e8 26 2f 00 00       	call   202c5 <fatfs_split_path>
   1d39f:	83 c4 20             	add    esp,0x20
   1d3a2:	83 f8 ff             	cmp    eax,0xffffffff
   1d3a5:	75 18                	jne    1d3bf <_create_file+0xb3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:420
    {
        _free_file(file);
   1d3a7:	83 ec 0c             	sub    esp,0xc
   1d3aa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d3ad:	e8 63 f8 ff ff       	call   1cc15 <_free_file>
   1d3b2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:421
        return NULL;
   1d3b5:	b8 00 00 00 00       	mov    eax,0x0
   1d3ba:	e9 a8 02 00 00       	jmp    1d667 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:425
    }

    // Check if file already open
    if (_check_file_open(file))
   1d3bf:	83 ec 0c             	sub    esp,0xc
   1d3c2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d3c5:	e8 bf f7 ff ff       	call   1cb89 <_check_file_open>
   1d3ca:	83 c4 10             	add    esp,0x10
   1d3cd:	85 c0                	test   eax,eax
   1d3cf:	74 18                	je     1d3e9 <_create_file+0xdd>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:427
    {
        _free_file(file);
   1d3d1:	83 ec 0c             	sub    esp,0xc
   1d3d4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d3d7:	e8 39 f8 ff ff       	call   1cc15 <_free_file>
   1d3dc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:428
        return NULL;
   1d3df:	b8 00 00 00 00       	mov    eax,0x0
   1d3e4:	e9 7e 02 00 00       	jmp    1d667 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:432
    }

    // If file is in the root dir
    if (file->path[0] == 0)
   1d3e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d3ec:	0f b6 40 14          	movzx  eax,BYTE PTR [eax+0x14]
   1d3f0:	84 c0                	test   al,al
   1d3f2:	75 19                	jne    1d40d <_create_file+0x101>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:433
        file->parentcluster = fatfs_get_root_cluster(&_fs);
   1d3f4:	83 ec 0c             	sub    esp,0xc
   1d3f7:	68 00 91 12 00       	push   0x129100
   1d3fc:	e8 44 e7 ff ff       	call   1bb45 <fatfs_get_root_cluster>
   1d401:	83 c4 10             	add    esp,0x10
   1d404:	89 c2                	mov    edx,eax
   1d406:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d409:	89 10                	mov    DWORD PTR [eax],edx
   1d40b:	eb 32                	jmp    1d43f <_create_file+0x133>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:437
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
   1d40d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d410:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1d413:	83 c2 14             	add    edx,0x14
   1d416:	83 ec 08             	sub    esp,0x8
   1d419:	50                   	push   eax
   1d41a:	52                   	push   edx
   1d41b:	e8 27 f8 ff ff       	call   1cc47 <_open_directory>
   1d420:	83 c4 10             	add    esp,0x10
   1d423:	85 c0                	test   eax,eax
   1d425:	75 18                	jne    1d43f <_create_file+0x133>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:439
        {
            _free_file(file);
   1d427:	83 ec 0c             	sub    esp,0xc
   1d42a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d42d:	e8 e3 f7 ff ff       	call   1cc15 <_free_file>
   1d432:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:440
            return NULL;
   1d435:	b8 00 00 00 00       	mov    eax,0x0
   1d43a:	e9 28 02 00 00       	jmp    1d667 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:445
        }
    }

    // Check if same filename exists in directory
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry) == 1)
   1d43f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d442:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1d448:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d44b:	8b 00                	mov    eax,DWORD PTR [eax]
   1d44d:	8d 55 d0             	lea    edx,[ebp-0x30]
   1d450:	52                   	push   edx
   1d451:	51                   	push   ecx
   1d452:	50                   	push   eax
   1d453:	68 00 91 12 00       	push   0x129100
   1d458:	e8 f3 e6 ff ff       	call   1bb50 <fatfs_get_file_entry>
   1d45d:	83 c4 10             	add    esp,0x10
   1d460:	83 f8 01             	cmp    eax,0x1
   1d463:	75 18                	jne    1d47d <_create_file+0x171>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:447
    {
        _free_file(file);
   1d465:	83 ec 0c             	sub    esp,0xc
   1d468:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d46b:	e8 a5 f7 ff ff       	call   1cc15 <_free_file>
   1d470:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:448
        return NULL;
   1d473:	b8 00 00 00 00       	mov    eax,0x0
   1d478:	e9 ea 01 00 00       	jmp    1d667 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:451
    }

    file->startcluster = 0;
   1d47d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d480:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:454

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
   1d487:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d48a:	83 c0 04             	add    eax,0x4
   1d48d:	6a 01                	push   0x1
   1d48f:	50                   	push   eax
   1d490:	6a 01                	push   0x1
   1d492:	68 00 91 12 00       	push   0x129100
   1d497:	e8 ec 3e 00 00       	call   21388 <fatfs_allocate_free_space>
   1d49c:	83 c4 10             	add    esp,0x10
   1d49f:	85 c0                	test   eax,eax
   1d4a1:	75 18                	jne    1d4bb <_create_file+0x1af>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:456
    {
        _free_file(file);
   1d4a3:	83 ec 0c             	sub    esp,0xc
   1d4a6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d4a9:	e8 67 f7 ff ff       	call   1cc15 <_free_file>
   1d4ae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:457
        return NULL;
   1d4b1:	b8 00 00 00 00       	mov    eax,0x0
   1d4b6:	e9 ac 01 00 00       	jmp    1d667 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:462
    }

#if FATFS_INC_LFN_SUPPORT
    // Generate a short filename & tail
    tailNum = 0;
   1d4bb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:466
    do
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);
   1d4c2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d4c5:	05 94 00 00 00       	add    eax,0x94
   1d4ca:	83 ec 08             	sub    esp,0x8
   1d4cd:	50                   	push   eax
   1d4ce:	8d 45 c5             	lea    eax,[ebp-0x3b]
   1d4d1:	50                   	push   eax
   1d4d2:	e8 ed 27 00 00       	call   1fcc4 <fatfs_lfn_create_sfn>
   1d4d7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:469

        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
   1d4da:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1d4de:	74 1f                	je     1d4ff <_create_file+0x1f3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:470
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
   1d4e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d4e3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1d4e6:	81 c2 14 01 00 00    	add    edx,0x114
   1d4ec:	83 ec 04             	sub    esp,0x4
   1d4ef:	50                   	push   eax
   1d4f0:	8d 45 c5             	lea    eax,[ebp-0x3b]
   1d4f3:	50                   	push   eax
   1d4f4:	52                   	push   edx
   1d4f5:	e8 50 2a 00 00       	call   1ff4a <fatfs_lfn_generate_tail>
   1d4fa:	83 c4 10             	add    esp,0x10
   1d4fd:	eb 1b                	jmp    1d51a <_create_file+0x20e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:473
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
   1d4ff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d502:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1d508:	83 ec 04             	sub    esp,0x4
   1d50b:	6a 0b                	push   0xb
   1d50d:	8d 45 c5             	lea    eax,[ebp-0x3b]
   1d510:	50                   	push   eax
   1d511:	52                   	push   edx
   1d512:	e8 a5 8b 00 00       	call   260bc <memcpy>
   1d517:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:476

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
   1d51a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d51d:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1d523:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d526:	8b 00                	mov    eax,DWORD PTR [eax]
   1d528:	83 ec 04             	sub    esp,0x4
   1d52b:	52                   	push   edx
   1d52c:	50                   	push   eax
   1d52d:	68 00 91 12 00       	push   0x129100
   1d532:	e8 96 e8 ff ff       	call   1bdcd <fatfs_sfn_exists>
   1d537:	83 c4 10             	add    esp,0x10
   1d53a:	85 c0                	test   eax,eax
   1d53c:	74 13                	je     1d551 <_create_file+0x245>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:479
            break;

        tailNum++;
   1d53e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:481
    }
    while (tailNum < 9999);
   1d542:	81 7d f4 0e 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270e
   1d549:	0f 8e 73 ff ff ff    	jle    1d4c2 <_create_file+0x1b6>
   1d54f:	eb 01                	jmp    1d552 <_create_file+0x246>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:477
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
            break;
   1d551:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:484
        tailNum++;
    }
    while (tailNum < 9999);

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
   1d552:	81 7d f4 0f 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270f
   1d559:	75 2f                	jne    1d58a <_create_file+0x27e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:487
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1d55b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d55e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d561:	83 ec 08             	sub    esp,0x8
   1d564:	50                   	push   eax
   1d565:	68 00 91 12 00       	push   0x129100
   1d56a:	e8 5f 3b 00 00       	call   210ce <fatfs_free_cluster_chain>
   1d56f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:489

        _free_file(file);
   1d572:	83 ec 0c             	sub    esp,0xc
   1d575:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d578:	e8 98 f6 ff ff       	call   1cc15 <_free_file>
   1d57d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:490
        return NULL;
   1d580:	b8 00 00 00 00       	mov    eax,0x0
   1d585:	e9 dd 00 00 00       	jmp    1d667 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:518
        return NULL;
    }
#endif

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 0))
   1d58a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d58d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1d590:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d593:	8d 98 14 01 00 00    	lea    ebx,[eax+0x114]
   1d599:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d59c:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1d5a2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d5a5:	8b 00                	mov    eax,DWORD PTR [eax]
   1d5a7:	83 ec 04             	sub    esp,0x4
   1d5aa:	6a 00                	push   0x0
   1d5ac:	6a 00                	push   0x0
   1d5ae:	52                   	push   edx
   1d5af:	53                   	push   ebx
   1d5b0:	51                   	push   ecx
   1d5b1:	50                   	push   eax
   1d5b2:	68 00 91 12 00       	push   0x129100
   1d5b7:	e8 e4 40 00 00       	call   216a0 <fatfs_add_file_entry>
   1d5bc:	83 c4 20             	add    esp,0x20
   1d5bf:	85 c0                	test   eax,eax
   1d5c1:	75 2c                	jne    1d5ef <_create_file+0x2e3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:521
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1d5c3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d5c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d5c9:	83 ec 08             	sub    esp,0x8
   1d5cc:	50                   	push   eax
   1d5cd:	68 00 91 12 00       	push   0x129100
   1d5d2:	e8 f7 3a 00 00       	call   210ce <fatfs_free_cluster_chain>
   1d5d7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:523

        _free_file(file);
   1d5da:	83 ec 0c             	sub    esp,0xc
   1d5dd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d5e0:	e8 30 f6 ff ff       	call   1cc15 <_free_file>
   1d5e5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:524
        return NULL;
   1d5e8:	b8 00 00 00 00       	mov    eax,0x0
   1d5ed:	eb 78                	jmp    1d667 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:528
    }

    // General
    file->filelength = 0;
   1d5ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d5f2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:529
    file->bytenum = 0;
   1d5f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d5fc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:530
    file->file_data_address = 0xFFFFFFFF;
   1d603:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d606:	c7 80 28 07 00 00 ff 	mov    DWORD PTR [eax+0x728],0xffffffff
   1d60d:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:531
    file->file_data_dirty = 0;
   1d610:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d613:	c7 80 2c 07 00 00 00 	mov    DWORD PTR [eax+0x72c],0x0
   1d61a:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:532
    file->filelength_changed = 0;
   1d61d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d620:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:535

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
   1d627:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d62a:	c7 80 20 05 00 00 ff 	mov    DWORD PTR [eax+0x520],0xffffffff
   1d631:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:536
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
   1d634:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d637:	c7 80 24 05 00 00 ff 	mov    DWORD PTR [eax+0x524],0xffffffff
   1d63e:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:538

    fatfs_cache_init(&_fs, file);
   1d641:	83 ec 08             	sub    esp,0x8
   1d644:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d647:	68 00 91 12 00       	push   0x129100
   1d64c:	e8 71 f2 ff ff       	call   1c8c2 <fatfs_cache_init>
   1d651:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:540

    fatfs_fat_purge(&_fs);
   1d654:	83 ec 0c             	sub    esp,0xc
   1d657:	68 00 91 12 00       	push   0x129100
   1d65c:	e8 d3 34 00 00       	call   20b34 <fatfs_fat_purge>
   1d661:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:542

    return file;
   1d664:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:543 (discriminator 1)
}
   1d667:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1d66a:	c9                   	leave  
   1d66b:	c3                   	ret    

0001d66c <_read_sectors>:
_read_sectors():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:549
#endif
//-----------------------------------------------------------------------------
// _read_sectors: Read sector(s) from disk to file
//-----------------------------------------------------------------------------
static uint32 _read_sectors(FL_FILE* file, uint32 offset, uint8 *buffer, uint32 count)
{
   1d66c:	55                   	push   ebp
   1d66d:	89 e5                	mov    ebp,esp
   1d66f:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:550
    uint32 Sector = 0;
   1d672:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:551
    uint32 ClusterIdx = 0;
   1d679:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:552
    uint32 Cluster = 0;
   1d680:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:557
    uint32 i;
    uint32 lba;

    // Find cluster index within file & sector with cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   1d687:	0f b6 05 00 91 12 00 	movzx  eax,BYTE PTR ds:0x129100
   1d68e:	0f b6 c8             	movzx  ecx,al
   1d691:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d694:	ba 00 00 00 00       	mov    edx,0x0
   1d699:	f7 f1                	div    ecx
   1d69b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:558
    Sector = offset - (ClusterIdx * _fs.sectors_per_cluster);
   1d69e:	0f b6 05 00 91 12 00 	movzx  eax,BYTE PTR ds:0x129100
   1d6a5:	0f b6 c0             	movzx  eax,al
   1d6a8:	0f af 45 e8          	imul   eax,DWORD PTR [ebp-0x18]
   1d6ac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1d6af:	29 c2                	sub    edx,eax
   1d6b1:	89 d0                	mov    eax,edx
   1d6b3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:561

    // Limit number of sectors read to the number remaining in this cluster
    if ((Sector + count) > _fs.sectors_per_cluster)
   1d6b6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1d6b9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d6bc:	01 c2                	add    edx,eax
   1d6be:	0f b6 05 00 91 12 00 	movzx  eax,BYTE PTR ds:0x129100
   1d6c5:	0f b6 c0             	movzx  eax,al
   1d6c8:	39 c2                	cmp    edx,eax
   1d6ca:	76 10                	jbe    1d6dc <_read_sectors+0x70>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:562
        count = _fs.sectors_per_cluster - Sector;
   1d6cc:	0f b6 05 00 91 12 00 	movzx  eax,BYTE PTR ds:0x129100
   1d6d3:	0f b6 c0             	movzx  eax,al
   1d6d6:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1d6d9:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:565

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
   1d6dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d6df:	8b 80 20 05 00 00    	mov    eax,DWORD PTR [eax+0x520]
   1d6e5:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d6e8:	75 11                	jne    1d6fb <_read_sectors+0x8f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:566
        Cluster = file->last_fat_lookup.CurrentCluster;
   1d6ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d6ed:	8b 80 24 05 00 00    	mov    eax,DWORD PTR [eax+0x524]
   1d6f3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d6f6:	e9 bb 00 00 00       	jmp    1d7b6 <_read_sectors+0x14a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:571
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
   1d6fb:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1d6ff:	74 2b                	je     1d72c <_read_sectors+0xc0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:571 (discriminator 1)
   1d701:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d704:	8b 80 20 05 00 00    	mov    eax,DWORD PTR [eax+0x520]
   1d70a:	83 c0 01             	add    eax,0x1
   1d70d:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d710:	75 1a                	jne    1d72c <_read_sectors+0xc0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:573
        {
            i = file->last_fat_lookup.ClusterIdx;
   1d712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d715:	8b 80 20 05 00 00    	mov    eax,DWORD PTR [eax+0x520]
   1d71b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:574
            Cluster = file->last_fat_lookup.CurrentCluster;
   1d71e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d721:	8b 80 24 05 00 00    	mov    eax,DWORD PTR [eax+0x524]
   1d727:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d72a:	eb 10                	jmp    1d73c <_read_sectors+0xd0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:580
        }
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
   1d72c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:581
            Cluster = file->startcluster;
   1d733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d736:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d739:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:585
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1d73c:	eb 52                	jmp    1d790 <_read_sectors+0x124>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:590
        {
            uint32 nextCluster;

            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))
   1d73e:	8d 45 e0             	lea    eax,[ebp-0x20]
   1d741:	50                   	push   eax
   1d742:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d745:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d748:	68 00 91 12 00       	push   0x129100
   1d74d:	e8 b3 f1 ff ff       	call   1c905 <fatfs_cache_get_next_cluster>
   1d752:	83 c4 10             	add    esp,0x10
   1d755:	85 c0                	test   eax,eax
   1d757:	75 2d                	jne    1d786 <_read_sectors+0x11a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:593
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
   1d759:	83 ec 08             	sub    esp,0x8
   1d75c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d75f:	68 00 91 12 00       	push   0x129100
   1d764:	e8 21 34 00 00       	call   20b8a <fatfs_find_next_cluster>
   1d769:	83 c4 10             	add    esp,0x10
   1d76c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:596

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
   1d76f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1d772:	50                   	push   eax
   1d773:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d776:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d779:	68 00 91 12 00       	push   0x129100
   1d77e:	e8 c4 f1 ff ff       	call   1c947 <fatfs_cache_set_next_cluster>
   1d783:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:599
            }

            Cluster = nextCluster;
   1d786:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1d789:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:585
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1d78c:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:585 (discriminator 1)
   1d790:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d793:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d796:	72 a6                	jb     1d73e <_read_sectors+0xd2>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:603

            Cluster = nextCluster;
        }

        // Record current cluster lookup details (if valid)
        if (Cluster != FAT32_LAST_CLUSTER)
   1d798:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1d79c:	74 18                	je     1d7b6 <_read_sectors+0x14a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:605
        {
            file->last_fat_lookup.CurrentCluster = Cluster;
   1d79e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d7a1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1d7a4:	89 90 24 05 00 00    	mov    DWORD PTR [eax+0x524],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:606
            file->last_fat_lookup.ClusterIdx = ClusterIdx;
   1d7aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d7ad:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1d7b0:	89 90 20 05 00 00    	mov    DWORD PTR [eax+0x520],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:611
        }
    }

    // If end of cluster chain then return false
    if (Cluster == FAT32_LAST_CLUSTER)
   1d7b6:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1d7ba:	75 07                	jne    1d7c3 <_read_sectors+0x157>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:612
        return 0;
   1d7bc:	b8 00 00 00 00       	mov    eax,0x0
   1d7c1:	eb 41                	jmp    1d804 <_read_sectors+0x198>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:615

    // Calculate sector address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + Sector;
   1d7c3:	83 ec 08             	sub    esp,0x8
   1d7c6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d7c9:	68 00 91 12 00       	push   0x129100
   1d7ce:	e8 b5 de ff ff       	call   1b688 <fatfs_lba_of_cluster>
   1d7d3:	83 c4 10             	add    esp,0x10
   1d7d6:	89 c2                	mov    edx,eax
   1d7d8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d7db:	01 d0                	add    eax,edx
   1d7dd:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:618

    // Read sector of file
    if (fatfs_sector_read(&_fs, lba, buffer, count))
   1d7e0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1d7e3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1d7e6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1d7e9:	68 00 91 12 00       	push   0x129100
   1d7ee:	e8 f7 de ff ff       	call   1b6ea <fatfs_sector_read>
   1d7f3:	83 c4 10             	add    esp,0x10
   1d7f6:	85 c0                	test   eax,eax
   1d7f8:	74 05                	je     1d7ff <_read_sectors+0x193>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:619
        return count;
   1d7fa:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d7fd:	eb 05                	jmp    1d804 <_read_sectors+0x198>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:621
    else
        return 0;
   1d7ff:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:622
}
   1d804:	c9                   	leave  
   1d805:	c3                   	ret    

0001d806 <fl_init>:
fl_init():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:632

//-----------------------------------------------------------------------------
// fl_init: Initialise library
//-----------------------------------------------------------------------------
void __attribute__ ((constructor)) fl_init(void)
{
   1d806:	55                   	push   ebp
   1d807:	89 e5                	mov    ebp,esp
   1d809:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:638
    int i;

    //printk("fl_init: Entered\n");
    
    //printk("fl_init: About to initialize free file list\n");
    fat_list_init(&_free_file_list);
   1d80c:	68 70 95 12 00       	push   0x129570
   1d811:	e8 8e f1 ff ff       	call   1c9a4 <fat_list_init>
   1d816:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:641
    //printk("fl_init: Initialized free file list\n");
    //printk("fl_init: About to initialize open file list\n");
    fat_list_init(&_open_file_list);
   1d819:	68 68 95 12 00       	push   0x129568
   1d81e:	e8 81 f1 ff ff       	call   1c9a4 <fat_list_init>
   1d823:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:646
    //printk("fl_init: Initialized open file list\n");

    //printk("fl_init: Adding all objects to free list\n");
    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
   1d826:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1d82d:	eb 28                	jmp    1d857 <fl_init+0x51>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:647 (discriminator 3)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);
   1d82f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1d832:	69 c0 3c 07 00 00    	imul   eax,eax,0x73c
   1d838:	05 30 07 00 00       	add    eax,0x730
   1d83d:	05 40 00 12 00       	add    eax,0x120040
   1d842:	83 c0 04             	add    eax,0x4
   1d845:	50                   	push   eax
   1d846:	68 70 95 12 00       	push   0x129570
   1d84b:	e8 88 f2 ff ff       	call   1cad8 <fat_list_insert_last>
   1d850:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:646 (discriminator 3)
    fat_list_init(&_open_file_list);
    //printk("fl_init: Initialized open file list\n");

    //printk("fl_init: Adding all objects to free list\n");
    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
   1d853:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:646 (discriminator 1)
   1d857:	83 7d fc 13          	cmp    DWORD PTR [ebp-0x4],0x13
   1d85b:	7e d2                	jle    1d82f <fl_init+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:650
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    //printk("fl_init: Returning\n");
    _filelib_init = 1;
   1d85d:	c7 05 f0 90 12 00 01 	mov    DWORD PTR ds:0x1290f0,0x1
   1d864:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:651
}
   1d867:	90                   	nop
   1d868:	c9                   	leave  
   1d869:	c3                   	ret    

0001d86a <fl_attach_locks>:
fl_attach_locks():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:656
//-----------------------------------------------------------------------------
// fl_attach_locks:
//-----------------------------------------------------------------------------
void fl_attach_locks(void (*lock)(void), void (*unlock)(void))
{
   1d86a:	55                   	push   ebp
   1d86b:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:657
    _fs.fl_lock = lock;
   1d86d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d870:	a3 3c 91 12 00       	mov    ds:0x12913c,eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:658
    _fs.fl_unlock = unlock;
   1d875:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d878:	a3 40 91 12 00       	mov    ds:0x129140,eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:659
}
   1d87d:	90                   	nop
   1d87e:	5d                   	pop    ebp
   1d87f:	c3                   	ret    

0001d880 <fl_attach_media>:
fl_attach_media():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:664
//-----------------------------------------------------------------------------
// fl_attach_media:
//-----------------------------------------------------------------------------
int fl_attach_media(fn_diskio_read rd, fn_diskio_write wr)
{
   1d880:	55                   	push   ebp
   1d881:	89 e5                	mov    ebp,esp
   1d883:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:669
    int res;

    //printk("fl_attach_media: Entered\n");
    // If first call to library, initialise
    CHECK_FL_INIT();
   1d886:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1d88b:	85 c0                	test   eax,eax
   1d88d:	75 05                	jne    1d894 <fl_attach_media+0x14>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:669 (discriminator 1)
   1d88f:	e8 72 ff ff ff       	call   1d806 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:671
    //FAT_PRINTF(("fl_attach_media: CHEKC_FL_INIT returned\n")); //clr
    _fs.disk_io.read_media = rd;
   1d894:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d897:	a3 34 91 12 00       	mov    ds:0x129134,eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:672
    _fs.disk_io.write_media = wr;
   1d89c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d89f:	a3 38 91 12 00       	mov    ds:0x129138,eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:675

    // Initialise FAT parameters
    if ((res = fatfs_init(&_fs)) != FAT_INIT_OK)
   1d8a4:	83 ec 0c             	sub    esp,0xc
   1d8a7:	68 00 91 12 00       	push   0x129100
   1d8ac:	e8 3f d8 ff ff       	call   1b0f0 <fatfs_init>
   1d8b1:	83 c4 10             	add    esp,0x10
   1d8b4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d8b7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1d8bb:	74 18                	je     1d8d5 <fl_attach_media+0x55>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:677
    {
        FAT_PRINTF(("FAT_FS: Error could not load FAT details (%d)!\r\n", res));
   1d8bd:	83 ec 08             	sub    esp,0x8
   1d8c0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d8c3:	68 68 39 08 00       	push   0x83968
   1d8c8:	e8 8e 9e 00 00       	call   2775b <printk>
   1d8cd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:678
        return res;
   1d8d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d8d3:	eb 0f                	jmp    1d8e4 <fl_attach_media+0x64>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:682
    }

    //FAT_PRINTF(("fl_attach_media: returning valid=1\n")); //clr
    _filelib_valid = 1;
   1d8d5:	c7 05 f4 90 12 00 01 	mov    DWORD PTR ds:0x1290f4,0x1
   1d8dc:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:683
    return FAT_INIT_OK;
   1d8df:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:684
}
   1d8e4:	c9                   	leave  
   1d8e5:	c3                   	ret    

0001d8e6 <fl_shutdown>:
fl_shutdown():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:689
//-----------------------------------------------------------------------------
// fl_shutdown: Call before shutting down system
//-----------------------------------------------------------------------------
 void __attribute__ ((destructor))fl_shutdown(void)
{
   1d8e6:	55                   	push   ebp
   1d8e7:	89 e5                	mov    ebp,esp
   1d8e9:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:691
    // If first call to library, initialise
    CHECK_FL_INIT();
   1d8ec:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1d8f1:	85 c0                	test   eax,eax
   1d8f3:	75 05                	jne    1d8fa <fl_shutdown+0x14>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:691 (discriminator 1)
   1d8f5:	e8 0c ff ff ff       	call   1d806 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:693

    FL_LOCK(&_fs);
   1d8fa:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1d8ff:	85 c0                	test   eax,eax
   1d901:	74 07                	je     1d90a <fl_shutdown+0x24>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:693 (discriminator 1)
   1d903:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1d908:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:694
    fatfs_fat_purge(&_fs);
   1d90a:	83 ec 0c             	sub    esp,0xc
   1d90d:	68 00 91 12 00       	push   0x129100
   1d912:	e8 1d 32 00 00       	call   20b34 <fatfs_fat_purge>
   1d917:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:695
    FL_UNLOCK(&_fs);
   1d91a:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1d91f:	85 c0                	test   eax,eax
   1d921:	74 07                	je     1d92a <fl_shutdown+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:695 (discriminator 1)
   1d923:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1d928:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:696
}
   1d92a:	90                   	nop
   1d92b:	c9                   	leave  
   1d92c:	c3                   	ret    

0001d92d <fl_fopen>:
fl_fopen():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:701
//-----------------------------------------------------------------------------
// fopen: Open or Create a file for reading or writing
//-----------------------------------------------------------------------------
void* fl_fopen(const char *path, const char *mode)
{
   1d92d:	55                   	push   ebp
   1d92e:	89 e5                	mov    ebp,esp
   1d930:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:704
    int i;
    FL_FILE* file;
    uint8 flags = 0;
   1d933:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:707

    // If first call to library, initialise
    CHECK_FL_INIT();
   1d937:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1d93c:	85 c0                	test   eax,eax
   1d93e:	75 05                	jne    1d945 <fl_fopen+0x18>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:707 (discriminator 1)
   1d940:	e8 c1 fe ff ff       	call   1d806 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:709

    if (!_filelib_valid)
   1d945:	a1 f4 90 12 00       	mov    eax,ds:0x1290f4
   1d94a:	85 c0                	test   eax,eax
   1d94c:	75 0a                	jne    1d958 <fl_fopen+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:710
        return NULL;
   1d94e:	b8 00 00 00 00       	mov    eax,0x0
   1d953:	e9 8c 01 00 00       	jmp    1dae4 <fl_fopen+0x1b7>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:712

    if (!path || !mode)
   1d958:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1d95c:	74 06                	je     1d964 <fl_fopen+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:712 (discriminator 1)
   1d95e:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1d962:	75 0a                	jne    1d96e <fl_fopen+0x41>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:713
        return NULL;
   1d964:	b8 00 00 00 00       	mov    eax,0x0
   1d969:	e9 76 01 00 00       	jmp    1dae4 <fl_fopen+0x1b7>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:733
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations
    //        will move it back to the end of file.
    //        The file is created if it does not exist.

    for (i=0;i<(int)strlen(mode);i++)
   1d96e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1d975:	e9 93 00 00 00       	jmp    1da0d <fl_fopen+0xe0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:735
    {
        switch (mode[i])
   1d97a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1d97d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d980:	01 d0                	add    eax,edx
   1d982:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1d985:	0f be c0             	movsx  eax,al
   1d988:	83 e8 2b             	sub    eax,0x2b
   1d98b:	83 f8 4c             	cmp    eax,0x4c
   1d98e:	77 79                	ja     1da09 <fl_fopen+0xdc>
   1d990:	8b 04 85 9c 39 08 00 	mov    eax,DWORD PTR [eax*4+0x8399c]
   1d997:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:739
        {
        case 'r':
        case 'R':
            flags |= FILE_READ;
   1d999:	80 4d ef 01          	or     BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:740
            break;
   1d99d:	eb 6a                	jmp    1da09 <fl_fopen+0xdc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:743
        case 'w':
        case 'W':
            flags |= FILE_WRITE;
   1d99f:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:744
            flags |= FILE_ERASE;
   1d9a3:	80 4d ef 10          	or     BYTE PTR [ebp-0x11],0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:745
            flags |= FILE_CREATE;
   1d9a7:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:746
            break;
   1d9ab:	eb 5c                	jmp    1da09 <fl_fopen+0xdc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:749
        case 'a':
        case 'A':
            flags |= FILE_WRITE;
   1d9ad:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:750
            flags |= FILE_APPEND;
   1d9b1:	80 4d ef 04          	or     BYTE PTR [ebp-0x11],0x4
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:751
            flags |= FILE_CREATE;
   1d9b5:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:752
            break;
   1d9b9:	eb 4e                	jmp    1da09 <fl_fopen+0xdc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:754
        case '+':
            if (flags & FILE_READ)
   1d9bb:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d9bf:	83 e0 01             	and    eax,0x1
   1d9c2:	85 c0                	test   eax,eax
   1d9c4:	74 06                	je     1d9cc <fl_fopen+0x9f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:755
                flags |= FILE_WRITE;
   1d9c6:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:769
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
            }
            break;
   1d9ca:	eb 3c                	jmp    1da08 <fl_fopen+0xdb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:756
            flags |= FILE_CREATE;
            break;
        case '+':
            if (flags & FILE_READ)
                flags |= FILE_WRITE;
            else if (flags & FILE_WRITE)
   1d9cc:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d9d0:	83 e0 02             	and    eax,0x2
   1d9d3:	85 c0                	test   eax,eax
   1d9d5:	74 0e                	je     1d9e5 <fl_fopen+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:758
            {
                flags |= FILE_READ;
   1d9d7:	80 4d ef 01          	or     BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:759
                flags |= FILE_ERASE;
   1d9db:	80 4d ef 10          	or     BYTE PTR [ebp-0x11],0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:760
                flags |= FILE_CREATE;
   1d9df:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:769
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
            }
            break;
   1d9e3:	eb 23                	jmp    1da08 <fl_fopen+0xdb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:762
            {
                flags |= FILE_READ;
                flags |= FILE_ERASE;
                flags |= FILE_CREATE;
            }
            else if (flags & FILE_APPEND)
   1d9e5:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d9e9:	83 e0 04             	and    eax,0x4
   1d9ec:	85 c0                	test   eax,eax
   1d9ee:	74 18                	je     1da08 <fl_fopen+0xdb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:764
            {
                flags |= FILE_READ;
   1d9f0:	80 4d ef 01          	or     BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:765
                flags |= FILE_WRITE;
   1d9f4:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:766
                flags |= FILE_APPEND;
   1d9f8:	80 4d ef 04          	or     BYTE PTR [ebp-0x11],0x4
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:767
                flags |= FILE_CREATE;
   1d9fc:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:769
            }
            break;
   1da00:	eb 06                	jmp    1da08 <fl_fopen+0xdb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:772
        case 'b':
        case 'B':
            flags |= FILE_BINARY;
   1da02:	80 4d ef 08          	or     BYTE PTR [ebp-0x11],0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:773
            break;
   1da06:	eb 01                	jmp    1da09 <fl_fopen+0xdc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:769
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
            }
            break;
   1da08:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:733 (discriminator 2)
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations
    //        will move it back to the end of file.
    //        The file is created if it does not exist.

    for (i=0;i<(int)strlen(mode);i++)
   1da09:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:733 (discriminator 1)
   1da0d:	83 ec 0c             	sub    esp,0xc
   1da10:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1da13:	e8 14 9f 00 00       	call   2792c <strlen>
   1da18:	83 c4 10             	add    esp,0x10
   1da1b:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1da1e:	0f 8f 56 ff ff ff    	jg     1d97a <fl_fopen+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:777
            flags |= FILE_BINARY;
            break;
        }
    }

    file = NULL;
   1da24:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:785
    // No write support!
    flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
#endif

    // No write access - remove write/modify flags
    if (!_fs.disk_io.write_media)
   1da2b:	a1 38 91 12 00       	mov    eax,ds:0x129138
   1da30:	85 c0                	test   eax,eax
   1da32:	75 04                	jne    1da38 <fl_fopen+0x10b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:786
        flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
   1da34:	80 65 ef d9          	and    BYTE PTR [ebp-0x11],0xd9
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:788

    FL_LOCK(&_fs);
   1da38:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1da3d:	85 c0                	test   eax,eax
   1da3f:	74 07                	je     1da48 <fl_fopen+0x11b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:788 (discriminator 1)
   1da41:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1da46:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:791

    // Read
    if (flags & FILE_READ)
   1da48:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1da4c:	83 e0 01             	and    eax,0x1
   1da4f:	85 c0                	test   eax,eax
   1da51:	74 11                	je     1da64 <fl_fopen+0x137>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:792
        file = _open_file(path);
   1da53:	83 ec 0c             	sub    esp,0xc
   1da56:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1da59:	e8 92 f6 ff ff       	call   1d0f0 <_open_file>
   1da5e:	83 c4 10             	add    esp,0x10
   1da61:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:796

    // Create New
#if FATFS_INC_WRITE_SUPPORT
    if (!file && (flags & FILE_CREATE))
   1da64:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1da68:	75 1c                	jne    1da86 <fl_fopen+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:796 (discriminator 1)
   1da6a:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1da6e:	83 e0 20             	and    eax,0x20
   1da71:	85 c0                	test   eax,eax
   1da73:	74 11                	je     1da86 <fl_fopen+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:797
        file = _create_file(path);
   1da75:	83 ec 0c             	sub    esp,0xc
   1da78:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1da7b:	e8 8c f8 ff ff       	call   1d30c <_create_file>
   1da80:	83 c4 10             	add    esp,0x10
   1da83:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:801
#endif

    // Write Existing (and not open due to read or create)
    if (!(flags & FILE_READ))
   1da86:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1da8a:	83 e0 01             	and    eax,0x1
   1da8d:	85 c0                	test   eax,eax
   1da8f:	75 2d                	jne    1dabe <fl_fopen+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:802
        if ((flags & FILE_CREATE) && !file)
   1da91:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1da95:	83 e0 20             	and    eax,0x20
   1da98:	85 c0                	test   eax,eax
   1da9a:	74 22                	je     1dabe <fl_fopen+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:802 (discriminator 1)
   1da9c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1daa0:	75 1c                	jne    1dabe <fl_fopen+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:803
            if (flags & (FILE_WRITE | FILE_APPEND))
   1daa2:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1daa6:	83 e0 06             	and    eax,0x6
   1daa9:	85 c0                	test   eax,eax
   1daab:	74 11                	je     1dabe <fl_fopen+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:804
                file = _open_file(path);
   1daad:	83 ec 0c             	sub    esp,0xc
   1dab0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1dab3:	e8 38 f6 ff ff       	call   1d0f0 <_open_file>
   1dab8:	83 c4 10             	add    esp,0x10
   1dabb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:806

    if (file)
   1dabe:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1dac2:	74 0d                	je     1dad1 <fl_fopen+0x1a4>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:807
        file->flags = flags;
   1dac4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dac7:	0f b6 55 ef          	movzx  edx,BYTE PTR [ebp-0x11]
   1dacb:	88 90 30 07 00 00    	mov    BYTE PTR [eax+0x730],dl
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:809

    FL_UNLOCK(&_fs);
   1dad1:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1dad6:	85 c0                	test   eax,eax
   1dad8:	74 07                	je     1dae1 <fl_fopen+0x1b4>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:809 (discriminator 1)
   1dada:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1dadf:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:810
    return file;
   1dae1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:811
}
   1dae4:	c9                   	leave  
   1dae5:	c3                   	ret    

0001dae6 <_write_sectors>:
_write_sectors():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:817
//-----------------------------------------------------------------------------
// _write_sectors: Write sector(s) to disk
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static uint32 _write_sectors(FL_FILE* file, uint32 offset, uint8 *buf, uint32 count)
{
   1dae6:	55                   	push   ebp
   1dae7:	89 e5                	mov    ebp,esp
   1dae9:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:818
    uint32 SectorNumber = 0;
   1daec:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:819
    uint32 ClusterIdx = 0;
   1daf3:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:820
    uint32 Cluster = 0;
   1dafa:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:821
    uint32 LastCluster = FAT32_LAST_CLUSTER;
   1db01:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [ebp-0x24],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:824
    uint32 i;
    uint32 lba;
    uint32 TotalWriteCount = count;
   1db08:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1db0b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:827

    // Find values for Cluster index & sector within cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   1db0e:	0f b6 05 00 91 12 00 	movzx  eax,BYTE PTR ds:0x129100
   1db15:	0f b6 c8             	movzx  ecx,al
   1db18:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1db1b:	ba 00 00 00 00       	mov    edx,0x0
   1db20:	f7 f1                	div    ecx
   1db22:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:828
    SectorNumber = offset - (ClusterIdx * _fs.sectors_per_cluster);
   1db25:	0f b6 05 00 91 12 00 	movzx  eax,BYTE PTR ds:0x129100
   1db2c:	0f b6 c0             	movzx  eax,al
   1db2f:	0f af 45 e8          	imul   eax,DWORD PTR [ebp-0x18]
   1db33:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1db36:	29 c2                	sub    edx,eax
   1db38:	89 d0                	mov    eax,edx
   1db3a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:831

    // Limit number of sectors written to the number remaining in this cluster
    if ((SectorNumber + count) > _fs.sectors_per_cluster)
   1db3d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1db40:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1db43:	01 c2                	add    edx,eax
   1db45:	0f b6 05 00 91 12 00 	movzx  eax,BYTE PTR ds:0x129100
   1db4c:	0f b6 c0             	movzx  eax,al
   1db4f:	39 c2                	cmp    edx,eax
   1db51:	76 10                	jbe    1db63 <_write_sectors+0x7d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:832
        count = _fs.sectors_per_cluster - SectorNumber;
   1db53:	0f b6 05 00 91 12 00 	movzx  eax,BYTE PTR ds:0x129100
   1db5a:	0f b6 c0             	movzx  eax,al
   1db5d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1db60:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:835

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
   1db63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1db66:	8b 80 20 05 00 00    	mov    eax,DWORD PTR [eax+0x520]
   1db6c:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1db6f:	75 11                	jne    1db82 <_write_sectors+0x9c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:836
        Cluster = file->last_fat_lookup.CurrentCluster;
   1db71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1db74:	8b 80 24 05 00 00    	mov    eax,DWORD PTR [eax+0x524]
   1db7a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1db7d:	e9 13 01 00 00       	jmp    1dc95 <_write_sectors+0x1af>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:841
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
   1db82:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1db86:	74 2b                	je     1dbb3 <_write_sectors+0xcd>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:841 (discriminator 1)
   1db88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1db8b:	8b 80 20 05 00 00    	mov    eax,DWORD PTR [eax+0x520]
   1db91:	83 c0 01             	add    eax,0x1
   1db94:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1db97:	75 1a                	jne    1dbb3 <_write_sectors+0xcd>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:843
        {
            i = file->last_fat_lookup.ClusterIdx;
   1db99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1db9c:	8b 80 20 05 00 00    	mov    eax,DWORD PTR [eax+0x520]
   1dba2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:844
            Cluster = file->last_fat_lookup.CurrentCluster;
   1dba5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dba8:	8b 80 24 05 00 00    	mov    eax,DWORD PTR [eax+0x524]
   1dbae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1dbb1:	eb 10                	jmp    1dbc3 <_write_sectors+0xdd>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:850
        }
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
   1dbb3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:851
            Cluster = file->startcluster;
   1dbba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dbbd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1dbc0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:855
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1dbc3:	eb 5e                	jmp    1dc23 <_write_sectors+0x13d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:860
        {
            uint32 nextCluster;

            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))
   1dbc5:	8d 45 d8             	lea    eax,[ebp-0x28]
   1dbc8:	50                   	push   eax
   1dbc9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1dbcc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1dbcf:	68 00 91 12 00       	push   0x129100
   1dbd4:	e8 2c ed ff ff       	call   1c905 <fatfs_cache_get_next_cluster>
   1dbd9:	83 c4 10             	add    esp,0x10
   1dbdc:	85 c0                	test   eax,eax
   1dbde:	75 2d                	jne    1dc0d <_write_sectors+0x127>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:863
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
   1dbe0:	83 ec 08             	sub    esp,0x8
   1dbe3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1dbe6:	68 00 91 12 00       	push   0x129100
   1dbeb:	e8 9a 2f 00 00       	call   20b8a <fatfs_find_next_cluster>
   1dbf0:	83 c4 10             	add    esp,0x10
   1dbf3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:866

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
   1dbf6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1dbf9:	50                   	push   eax
   1dbfa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1dbfd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1dc00:	68 00 91 12 00       	push   0x129100
   1dc05:	e8 3d ed ff ff       	call   1c947 <fatfs_cache_set_next_cluster>
   1dc0a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:869
            }

            LastCluster = Cluster;
   1dc0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dc10:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:870
            Cluster = nextCluster;
   1dc13:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1dc16:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:873

            // Dont keep following a dead end
            if (Cluster == FAT32_LAST_CLUSTER)
   1dc19:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1dc1d:	74 0e                	je     1dc2d <_write_sectors+0x147>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:855
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1dc1f:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:855 (discriminator 1)
   1dc23:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc26:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1dc29:	72 9a                	jb     1dbc5 <_write_sectors+0xdf>
   1dc2b:	eb 01                	jmp    1dc2e <_write_sectors+0x148>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:874
            LastCluster = Cluster;
            Cluster = nextCluster;

            // Dont keep following a dead end
            if (Cluster == FAT32_LAST_CLUSTER)
                break;
   1dc2d:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:878
        }

        // If we have reached the end of the chain, allocate more!
        if (Cluster == FAT32_LAST_CLUSTER)
   1dc2e:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1dc32:	75 49                	jne    1dc7d <_write_sectors+0x197>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:881
        {
            // Add some more cluster(s) to the last good cluster chain
            if (!fatfs_add_free_space(&_fs, &LastCluster,  (TotalWriteCount + _fs.sectors_per_cluster -1) / _fs.sectors_per_cluster))
   1dc34:	0f b6 05 00 91 12 00 	movzx  eax,BYTE PTR ds:0x129100
   1dc3b:	0f b6 d0             	movzx  edx,al
   1dc3e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1dc41:	01 d0                	add    eax,edx
   1dc43:	83 e8 01             	sub    eax,0x1
   1dc46:	0f b6 15 00 91 12 00 	movzx  edx,BYTE PTR ds:0x129100
   1dc4d:	0f b6 ca             	movzx  ecx,dl
   1dc50:	ba 00 00 00 00       	mov    edx,0x0
   1dc55:	f7 f1                	div    ecx
   1dc57:	83 ec 04             	sub    esp,0x4
   1dc5a:	50                   	push   eax
   1dc5b:	8d 45 dc             	lea    eax,[ebp-0x24]
   1dc5e:	50                   	push   eax
   1dc5f:	68 00 91 12 00       	push   0x129100
   1dc64:	e8 77 36 00 00       	call   212e0 <fatfs_add_free_space>
   1dc69:	83 c4 10             	add    esp,0x10
   1dc6c:	85 c0                	test   eax,eax
   1dc6e:	75 07                	jne    1dc77 <_write_sectors+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:882
                return 0;
   1dc70:	b8 00 00 00 00       	mov    eax,0x0
   1dc75:	eb 5f                	jmp    1dcd6 <_write_sectors+0x1f0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:884

            Cluster = LastCluster;
   1dc77:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1dc7a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:888
        }

        // Record current cluster lookup details
        file->last_fat_lookup.CurrentCluster = Cluster;
   1dc7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dc80:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1dc83:	89 90 24 05 00 00    	mov    DWORD PTR [eax+0x524],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:889
        file->last_fat_lookup.ClusterIdx = ClusterIdx;
   1dc89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dc8c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1dc8f:	89 90 20 05 00 00    	mov    DWORD PTR [eax+0x520],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:893
    }

    // Calculate write address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + SectorNumber;
   1dc95:	83 ec 08             	sub    esp,0x8
   1dc98:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1dc9b:	68 00 91 12 00       	push   0x129100
   1dca0:	e8 e3 d9 ff ff       	call   1b688 <fatfs_lba_of_cluster>
   1dca5:	83 c4 10             	add    esp,0x10
   1dca8:	89 c2                	mov    edx,eax
   1dcaa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1dcad:	01 d0                	add    eax,edx
   1dcaf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:895

    if (fatfs_sector_write(&_fs, lba, buf, count))
   1dcb2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1dcb5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1dcb8:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1dcbb:	68 00 91 12 00       	push   0x129100
   1dcc0:	e8 44 da ff ff       	call   1b709 <fatfs_sector_write>
   1dcc5:	83 c4 10             	add    esp,0x10
   1dcc8:	85 c0                	test   eax,eax
   1dcca:	74 05                	je     1dcd1 <_write_sectors+0x1eb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:896
        return count;
   1dccc:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1dccf:	eb 05                	jmp    1dcd6 <_write_sectors+0x1f0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:898
    else
        return 0;
   1dcd1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:899 (discriminator 1)
}
   1dcd6:	c9                   	leave  
   1dcd7:	c3                   	ret    

0001dcd8 <fl_fflush>:
fl_fflush():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:905
#endif
//-----------------------------------------------------------------------------
// fl_fflush: Flush un-written data to the file
//-----------------------------------------------------------------------------
int fl_fflush(void *f)
{
   1dcd8:	55                   	push   ebp
   1dcd9:	89 e5                	mov    ebp,esp
   1dcdb:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:907
#if FATFS_INC_WRITE_SUPPORT
    FL_FILE *file = (FL_FILE *)f;
   1dcde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dce1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:910

    // If first call to library, initialise
    CHECK_FL_INIT();
   1dce4:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1dce9:	85 c0                	test   eax,eax
   1dceb:	75 05                	jne    1dcf2 <fl_fflush+0x1a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:910 (discriminator 1)
   1dced:	e8 14 fb ff ff       	call   1d806 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:912

    if (file)
   1dcf2:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1dcf6:	74 5f                	je     1dd57 <fl_fflush+0x7f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:914
    {
        FL_LOCK(&_fs);
   1dcf8:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1dcfd:	85 c0                	test   eax,eax
   1dcff:	74 07                	je     1dd08 <fl_fflush+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:914 (discriminator 1)
   1dd01:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1dd06:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:917

        // If some write data still in buffer
        if (file->file_data_dirty)
   1dd08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dd0b:	8b 80 2c 07 00 00    	mov    eax,DWORD PTR [eax+0x72c]
   1dd11:	85 c0                	test   eax,eax
   1dd13:	74 32                	je     1dd47 <fl_fflush+0x6f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:920
        {
            // Write back current sector before loading next
            if (_write_sectors(file, file->file_data_address, file->file_data_sector, 1))
   1dd15:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dd18:	8d 90 28 05 00 00    	lea    edx,[eax+0x528]
   1dd1e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dd21:	8b 80 28 07 00 00    	mov    eax,DWORD PTR [eax+0x728]
   1dd27:	6a 01                	push   0x1
   1dd29:	52                   	push   edx
   1dd2a:	50                   	push   eax
   1dd2b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1dd2e:	e8 b3 fd ff ff       	call   1dae6 <_write_sectors>
   1dd33:	83 c4 10             	add    esp,0x10
   1dd36:	85 c0                	test   eax,eax
   1dd38:	74 0d                	je     1dd47 <fl_fflush+0x6f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:921
                file->file_data_dirty = 0;
   1dd3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dd3d:	c7 80 2c 07 00 00 00 	mov    DWORD PTR [eax+0x72c],0x0
   1dd44:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:924
        }

        FL_UNLOCK(&_fs);
   1dd47:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1dd4c:	85 c0                	test   eax,eax
   1dd4e:	74 07                	je     1dd57 <fl_fflush+0x7f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:924 (discriminator 1)
   1dd50:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1dd55:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:927
    }
#endif
    return 0;
   1dd57:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:928
}
   1dd5c:	c9                   	leave  
   1dd5d:	c3                   	ret    

0001dd5e <fl_fclose>:
fl_fclose():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:933
//-----------------------------------------------------------------------------
// fl_fclose: Close an open file
//-----------------------------------------------------------------------------
void fl_fclose(void *f)
{
   1dd5e:	55                   	push   ebp
   1dd5f:	89 e5                	mov    ebp,esp
   1dd61:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:934
    FL_FILE *file = (FL_FILE *)f;
   1dd64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dd67:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:937

    // If first call to library, initialise
    CHECK_FL_INIT();
   1dd6a:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1dd6f:	85 c0                	test   eax,eax
   1dd71:	75 05                	jne    1dd78 <fl_fclose+0x1a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:937 (discriminator 1)
   1dd73:	e8 8e fa ff ff       	call   1d806 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:939

    if (file)
   1dd78:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1dd7c:	0f 84 c6 00 00 00    	je     1de48 <fl_fclose+0xea>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:941
    {
        FL_LOCK(&_fs);
   1dd82:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1dd87:	85 c0                	test   eax,eax
   1dd89:	74 07                	je     1dd92 <fl_fclose+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:941 (discriminator 1)
   1dd8b:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1dd90:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:944

        // Flush un-written data to file
        fl_fflush(f);
   1dd92:	83 ec 0c             	sub    esp,0xc
   1dd95:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1dd98:	e8 3b ff ff ff       	call   1dcd8 <fl_fflush>
   1dd9d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:947

        // File size changed?
        if (file->filelength_changed)
   1dda0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dda3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1dda6:	85 c0                	test   eax,eax
   1dda8:	74 2e                	je     1ddd8 <fl_fclose+0x7a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:951
        {
#if FATFS_INC_WRITE_SUPPORT
            // Update filesize in directory
            fatfs_update_file_length(&_fs, file->parentcluster, (char*)file->shortfilename, file->filelength);
   1ddaa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ddad:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1ddb0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ddb3:	8d 88 14 01 00 00    	lea    ecx,[eax+0x114]
   1ddb9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ddbc:	8b 00                	mov    eax,DWORD PTR [eax]
   1ddbe:	52                   	push   edx
   1ddbf:	51                   	push   ecx
   1ddc0:	50                   	push   eax
   1ddc1:	68 00 91 12 00       	push   0x129100
   1ddc6:	e8 05 e2 ff ff       	call   1bfd0 <fatfs_update_file_length>
   1ddcb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:953
#endif
            file->filelength_changed = 0;
   1ddce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ddd1:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:956
        }

        file->bytenum = 0;
   1ddd8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dddb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:957
        file->filelength = 0;
   1dde2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dde5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:958
        file->startcluster = 0;
   1ddec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ddef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:959
        file->file_data_address = 0xFFFFFFFF;
   1ddf6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ddf9:	c7 80 28 07 00 00 ff 	mov    DWORD PTR [eax+0x728],0xffffffff
   1de00:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:960
        file->file_data_dirty = 0;
   1de03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1de06:	c7 80 2c 07 00 00 00 	mov    DWORD PTR [eax+0x72c],0x0
   1de0d:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:961
        file->filelength_changed = 0;
   1de10:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1de13:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:964

        // Free file handle
        _free_file(file);
   1de1a:	83 ec 0c             	sub    esp,0xc
   1de1d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1de20:	e8 f0 ed ff ff       	call   1cc15 <_free_file>
   1de25:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:966

        fatfs_fat_purge(&_fs);
   1de28:	83 ec 0c             	sub    esp,0xc
   1de2b:	68 00 91 12 00       	push   0x129100
   1de30:	e8 ff 2c 00 00       	call   20b34 <fatfs_fat_purge>
   1de35:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:968

        FL_UNLOCK(&_fs);
   1de38:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1de3d:	85 c0                	test   eax,eax
   1de3f:	74 07                	je     1de48 <fl_fclose+0xea>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:968 (discriminator 1)
   1de41:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1de46:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:970
    }
}
   1de48:	90                   	nop
   1de49:	c9                   	leave  
   1de4a:	c3                   	ret    

0001de4b <fl_fgetc>:
fl_fgetc():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:975
//-----------------------------------------------------------------------------
// fl_fgetc: Get a character in the stream
//-----------------------------------------------------------------------------
int fl_fgetc(void *f)
{
   1de4b:	55                   	push   ebp
   1de4c:	89 e5                	mov    ebp,esp
   1de4e:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:977
    int res;
    uint8 data = 0;
   1de51:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:979

    res = fl_fread(&data, 1, 1, f);
   1de55:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1de58:	6a 01                	push   0x1
   1de5a:	6a 01                	push   0x1
   1de5c:	8d 45 f3             	lea    eax,[ebp-0xd]
   1de5f:	50                   	push   eax
   1de60:	e8 95 00 00 00       	call   1defa <fl_fread>
   1de65:	83 c4 10             	add    esp,0x10
   1de68:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:980
    if (res == 1)
   1de6b:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   1de6f:	75 09                	jne    1de7a <fl_fgetc+0x2f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:981
        return (int)data;
   1de71:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   1de75:	0f b6 c0             	movzx  eax,al
   1de78:	eb 03                	jmp    1de7d <fl_fgetc+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:983
    else
        return res;
   1de7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:984 (discriminator 1)
}
   1de7d:	c9                   	leave  
   1de7e:	c3                   	ret    

0001de7f <fl_fgets>:
fl_fgets():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:989
//-----------------------------------------------------------------------------
// fl_fgets: Get a string from a stream
//-----------------------------------------------------------------------------
char *fl_fgets(char *s, int n, void *f)
{
   1de7f:	55                   	push   ebp
   1de80:	89 e5                	mov    ebp,esp
   1de82:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:990
    int idx = 0;
   1de85:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:993

    // Space for null terminator?
    if (n > 0)
   1de8c:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1de90:	7e 56                	jle    1dee8 <fl_fgets+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:996
    {
        // While space (+space for null terminator)
        while (idx < (n-1))
   1de92:	eb 32                	jmp    1dec6 <fl_fgets+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:998
        {
            int ch = fl_fgetc(f);
   1de94:	83 ec 0c             	sub    esp,0xc
   1de97:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1de9a:	e8 ac ff ff ff       	call   1de4b <fl_fgetc>
   1de9f:	83 c4 10             	add    esp,0x10
   1dea2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1001

            // EOF / Error?
            if (ch < 0)
   1dea5:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1dea9:	78 28                	js     1ded3 <fl_fgets+0x54>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1005
                break;

            // Store character read from stream
            s[idx++] = (char)ch;
   1deab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1deae:	8d 50 01             	lea    edx,[eax+0x1]
   1deb1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   1deb4:	89 c2                	mov    edx,eax
   1deb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1deb9:	01 d0                	add    eax,edx
   1debb:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1debe:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1008

            // End of line?
            if (ch == '\n')
   1dec0:	83 7d f0 0a          	cmp    DWORD PTR [ebp-0x10],0xa
   1dec4:	74 10                	je     1ded6 <fl_fgets+0x57>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:996

    // Space for null terminator?
    if (n > 0)
    {
        // While space (+space for null terminator)
        while (idx < (n-1))
   1dec6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1dec9:	83 e8 01             	sub    eax,0x1
   1decc:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1decf:	7f c3                	jg     1de94 <fl_fgets+0x15>
   1ded1:	eb 04                	jmp    1ded7 <fl_fgets+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1002
        {
            int ch = fl_fgetc(f);

            // EOF / Error?
            if (ch < 0)
                break;
   1ded3:	90                   	nop
   1ded4:	eb 01                	jmp    1ded7 <fl_fgets+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1009
            // Store character read from stream
            s[idx++] = (char)ch;

            // End of line?
            if (ch == '\n')
                break;
   1ded6:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1012
        }

        if (idx > 0)
   1ded7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1dedb:	7e 0b                	jle    1dee8 <fl_fgets+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1013
            s[idx] = '\0';
   1dedd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1dee0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dee3:	01 d0                	add    eax,edx
   1dee5:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1016
    }

    return (idx > 0) ? s : 0;
   1dee8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1deec:	7e 05                	jle    1def3 <fl_fgets+0x74>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1016 (discriminator 1)
   1deee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1def1:	eb 05                	jmp    1def8 <fl_fgets+0x79>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1016 (discriminator 2)
   1def3:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1017 (discriminator 5)
}
   1def8:	c9                   	leave  
   1def9:	c3                   	ret    

0001defa <fl_fread>:
fl_fread():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1022
//-----------------------------------------------------------------------------
// fl_fread: Read a block of data from the file
//-----------------------------------------------------------------------------
int fl_fread(void * buffer, int size, int length, void *f )
{
   1defa:	55                   	push   ebp
   1defb:	89 e5                	mov    ebp,esp
   1defd:	53                   	push   ebx
   1defe:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1026
    uint32 sector;
    uint32 offset;
    int copyCount;
    int count = size * length;
   1df01:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1df04:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
   1df08:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1027
    int bytesRead = 0;
   1df0b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1029

    FL_FILE *file = (FL_FILE *)f;
   1df12:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1df15:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1032

    // If first call to library, initialise
    CHECK_FL_INIT();
   1df18:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1df1d:	85 c0                	test   eax,eax
   1df1f:	75 05                	jne    1df26 <fl_fread+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1032 (discriminator 1)
   1df21:	e8 e0 f8 ff ff       	call   1d806 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1034

    if (buffer==NULL || file==NULL)
   1df26:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1df2a:	74 06                	je     1df32 <fl_fread+0x38>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1034 (discriminator 1)
   1df2c:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1df30:	75 0a                	jne    1df3c <fl_fread+0x42>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1035
        return -1;
   1df32:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1df37:	e9 d8 01 00 00       	jmp    1e114 <fl_fread+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1038

    // No read permissions
    if (!(file->flags & FILE_READ))
   1df3c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1df3f:	0f b6 80 30 07 00 00 	movzx  eax,BYTE PTR [eax+0x730]
   1df46:	0f b6 c0             	movzx  eax,al
   1df49:	83 e0 01             	and    eax,0x1
   1df4c:	85 c0                	test   eax,eax
   1df4e:	75 0a                	jne    1df5a <fl_fread+0x60>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1039
        return -1;
   1df50:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1df55:	e9 ba 01 00 00       	jmp    1e114 <fl_fread+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1042

    // Nothing to be done
    if (!count)
   1df5a:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1df5e:	75 0a                	jne    1df6a <fl_fread+0x70>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1043
        return 0;
   1df60:	b8 00 00 00 00       	mov    eax,0x0
   1df65:	e9 aa 01 00 00       	jmp    1e114 <fl_fread+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1046

    // Check if read starts past end of file
    if (file->bytenum >= file->filelength)
   1df6a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1df6d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1df70:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1df73:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1df76:	39 c2                	cmp    edx,eax
   1df78:	72 0a                	jb     1df84 <fl_fread+0x8a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1047
        return -1;
   1df7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1df7f:	e9 90 01 00 00       	jmp    1e114 <fl_fread+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1050

    // Limit to file size
    if ( (file->bytenum + count) > file->filelength )
   1df84:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1df87:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1df8a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1df8d:	01 c2                	add    edx,eax
   1df8f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1df92:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1df95:	39 c2                	cmp    edx,eax
   1df97:	76 13                	jbe    1dfac <fl_fread+0xb2>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1051
        count = file->filelength - file->bytenum;
   1df99:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1df9c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1df9f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dfa2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1dfa5:	29 c2                	sub    edx,eax
   1dfa7:	89 d0                	mov    eax,edx
   1dfa9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1054

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;
   1dfac:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dfaf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1dfb2:	c1 e8 09             	shr    eax,0x9
   1dfb5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1057

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
   1dfb8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dfbb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1dfbe:	25 ff 01 00 00       	and    eax,0x1ff
   1dfc3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1059

    while (bytesRead < count)
   1dfc6:	e9 34 01 00 00       	jmp    1e0ff <fl_fread+0x205>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1062
    {
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
   1dfcb:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1dfcf:	75 63                	jne    1e034 <fl_fread+0x13a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1062 (discriminator 1)
   1dfd1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1dfd4:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1dfd7:	3d ff 01 00 00       	cmp    eax,0x1ff
   1dfdc:	7e 56                	jle    1e034 <fl_fread+0x13a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1065
        {
            // Read as many sectors as possible into target buffer
            uint32 sectorsRead = _read_sectors(file, sector, (uint8*)((uint8*)buffer + bytesRead), (count - bytesRead) / FAT_SECTOR_SIZE);
   1dfde:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1dfe1:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1dfe4:	8d 90 ff 01 00 00    	lea    edx,[eax+0x1ff]
   1dfea:	85 c0                	test   eax,eax
   1dfec:	0f 48 c2             	cmovs  eax,edx
   1dfef:	c1 f8 09             	sar    eax,0x9
   1dff2:	89 c1                	mov    ecx,eax
   1dff4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   1dff7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dffa:	01 d0                	add    eax,edx
   1dffc:	51                   	push   ecx
   1dffd:	50                   	push   eax
   1dffe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1e001:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1e004:	e8 63 f6 ff ff       	call   1d66c <_read_sectors>
   1e009:	83 c4 10             	add    esp,0x10
   1e00c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1066
            if (sectorsRead)
   1e00f:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
   1e013:	0f 84 f4 00 00 00    	je     1e10d <fl_fread+0x213>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1069
            {
                // We have upto one sector to copy
                copyCount = FAT_SECTOR_SIZE * sectorsRead;
   1e019:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1e01c:	c1 e0 09             	shl    eax,0x9
   1e01f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1072

                // Move onto next sector and reset copy offset
                sector+= sectorsRead;
   1e022:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1e025:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1073
                offset = 0;
   1e028:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1063

    while (bytesRead < count)
    {
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
        {
   1e02f:	e9 b4 00 00 00       	jmp    1e0e8 <fl_fread+0x1ee>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1081
                break;
        }
        else
        {
            // Do we need to re-read the sector?
            if (file->file_data_address != sector)
   1e034:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e037:	8b 80 28 07 00 00    	mov    eax,DWORD PTR [eax+0x728]
   1e03d:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1e040:	74 55                	je     1e097 <fl_fread+0x19d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1084
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
   1e042:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e045:	8b 80 2c 07 00 00    	mov    eax,DWORD PTR [eax+0x72c]
   1e04b:	85 c0                	test   eax,eax
   1e04d:	74 0e                	je     1e05d <fl_fread+0x163>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1085
                    fl_fflush(file);
   1e04f:	83 ec 0c             	sub    esp,0xc
   1e052:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1e055:	e8 7e fc ff ff       	call   1dcd8 <fl_fflush>
   1e05a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1088

                // Get LBA of sector offset within file
                if (!_read_sectors(file, sector, file->file_data_sector, 1))
   1e05d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e060:	05 28 05 00 00       	add    eax,0x528
   1e065:	6a 01                	push   0x1
   1e067:	50                   	push   eax
   1e068:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1e06b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1e06e:	e8 f9 f5 ff ff       	call   1d66c <_read_sectors>
   1e073:	83 c4 10             	add    esp,0x10
   1e076:	85 c0                	test   eax,eax
   1e078:	0f 84 92 00 00 00    	je     1e110 <fl_fread+0x216>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1092
                    // Read failed - out of range (probably)
                    break;

                file->file_data_address = sector;
   1e07e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e081:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1e084:	89 90 28 07 00 00    	mov    DWORD PTR [eax+0x728],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1093
                file->file_data_dirty = 0;
   1e08a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e08d:	c7 80 2c 07 00 00 00 	mov    DWORD PTR [eax+0x72c],0x0
   1e094:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1097
            }

            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
   1e097:	b8 00 02 00 00       	mov    eax,0x200
   1e09c:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
   1e09f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1100

            // Only require some of this sector?
            if (copyCount > (count - bytesRead))
   1e0a2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e0a5:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1e0a8:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   1e0ab:	7d 09                	jge    1e0b6 <fl_fread+0x1bc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1101
                copyCount = (count - bytesRead);
   1e0ad:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e0b0:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1e0b3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1104

            // Copy to application buffer
            memcpy( (uint8*)((uint8*)buffer + bytesRead), (uint8*)(file->file_data_sector + offset), copyCount);
   1e0b6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e0b9:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1e0bc:	8d 8a 28 05 00 00    	lea    ecx,[edx+0x528]
   1e0c2:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1e0c5:	01 d1                	add    ecx,edx
   1e0c7:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
   1e0ca:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1e0cd:	01 da                	add    edx,ebx
   1e0cf:	83 ec 04             	sub    esp,0x4
   1e0d2:	50                   	push   eax
   1e0d3:	51                   	push   ecx
   1e0d4:	52                   	push   edx
   1e0d5:	e8 e2 7f 00 00       	call   260bc <memcpy>
   1e0da:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1107

            // Move onto next sector and reset copy offset
            sector++;
   1e0dd:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1108
            offset = 0;
   1e0e1:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1112
        }

        // Increase total read count
        bytesRead += copyCount;
   1e0e8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e0eb:	01 45 e4             	add    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1115

        // Increment file pointer
        file->bytenum += copyCount;
   1e0ee:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e0f1:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e0f4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e0f7:	01 c2                	add    edx,eax
   1e0f9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e0fc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1059
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
   1e0ff:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e102:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1e105:	0f 8c c0 fe ff ff    	jl     1dfcb <fl_fread+0xd1>
   1e10b:	eb 04                	jmp    1e111 <fl_fread+0x217>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1076
                // Move onto next sector and reset copy offset
                sector+= sectorsRead;
                offset = 0;
            }
            else
                break;
   1e10d:	90                   	nop
   1e10e:	eb 01                	jmp    1e111 <fl_fread+0x217>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1090
                    fl_fflush(file);

                // Get LBA of sector offset within file
                if (!_read_sectors(file, sector, file->file_data_sector, 1))
                    // Read failed - out of range (probably)
                    break;
   1e110:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1118

        // Increment file pointer
        file->bytenum += copyCount;
    }

    return bytesRead;
   1e111:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1119
}
   1e114:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1e117:	c9                   	leave  
   1e118:	c3                   	ret    

0001e119 <fl_fseek>:
fl_fseek():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1124
//-----------------------------------------------------------------------------
// fl_fseek: Seek to a specific place in the file
//-----------------------------------------------------------------------------
int fl_fseek( void *f, long offset, int origin )
{
   1e119:	55                   	push   ebp
   1e11a:	89 e5                	mov    ebp,esp
   1e11c:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1125
    FL_FILE *file = (FL_FILE *)f;
   1e11f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e122:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1126
    int res = -1;
   1e125:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1129

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e12c:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1e131:	85 c0                	test   eax,eax
   1e133:	75 05                	jne    1e13a <fl_fseek+0x21>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1129 (discriminator 1)
   1e135:	e8 cc f6 ff ff       	call   1d806 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1131

    if (!file)
   1e13a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1e13e:	75 0a                	jne    1e14a <fl_fseek+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1132
        return -1;
   1e140:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1e145:	e9 1d 01 00 00       	jmp    1e267 <fl_fseek+0x14e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1134

    if (origin == SEEK_END && offset != 0)
   1e14a:	83 7d 10 02          	cmp    DWORD PTR [ebp+0x10],0x2
   1e14e:	75 10                	jne    1e160 <fl_fseek+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1134 (discriminator 1)
   1e150:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1e154:	74 0a                	je     1e160 <fl_fseek+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1135
        return -1;
   1e156:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1e15b:	e9 07 01 00 00       	jmp    1e267 <fl_fseek+0x14e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1137

    FL_LOCK(&_fs);
   1e160:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e165:	85 c0                	test   eax,eax
   1e167:	74 07                	je     1e170 <fl_fseek+0x57>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1137 (discriminator 1)
   1e169:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e16e:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1140

    // Invalidate file buffer
    file->file_data_address = 0xFFFFFFFF;
   1e170:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e173:	c7 80 28 07 00 00 ff 	mov    DWORD PTR [eax+0x728],0xffffffff
   1e17a:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1141
    file->file_data_dirty = 0;
   1e17d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e180:	c7 80 2c 07 00 00 00 	mov    DWORD PTR [eax+0x72c],0x0
   1e187:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1143

    if (origin == SEEK_SET)
   1e18a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   1e18e:	75 31                	jne    1e1c1 <fl_fseek+0xa8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1145
    {
        file->bytenum = (uint32)offset;
   1e190:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1e193:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e196:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1147

        if (file->bytenum > file->filelength)
   1e199:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e19c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e19f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e1a2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1e1a5:	39 c2                	cmp    edx,eax
   1e1a7:	76 0c                	jbe    1e1b5 <fl_fseek+0x9c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1148
            file->bytenum = file->filelength;
   1e1a9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e1ac:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1e1af:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e1b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1150

        res = 0;
   1e1b5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1e1bc:	e9 93 00 00 00       	jmp    1e254 <fl_fseek+0x13b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1152
    }
    else if (origin == SEEK_CUR)
   1e1c1:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
   1e1c5:	75 6b                	jne    1e232 <fl_fseek+0x119>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1155
    {
        // Positive shift
        if (offset >= 0)
   1e1c7:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1e1cb:	78 2f                	js     1e1fc <fl_fseek+0xe3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1157
        {
            file->bytenum += offset;
   1e1cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e1d0:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e1d3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e1d6:	01 c2                	add    edx,eax
   1e1d8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e1db:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1159

            if (file->bytenum > file->filelength)
   1e1de:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e1e1:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e1e4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e1e7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1e1ea:	39 c2                	cmp    edx,eax
   1e1ec:	76 3b                	jbe    1e229 <fl_fseek+0x110>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1160
                file->bytenum = file->filelength;
   1e1ee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e1f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1e1f4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e1f7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
   1e1fa:	eb 2d                	jmp    1e229 <fl_fseek+0x110>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1166
        }
        // Negative shift
        else
        {
            // Make shift positive
            offset = -offset;
   1e1fc:	f7 5d 0c             	neg    DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1169

            // Limit to negative shift to start of file
            if ((uint32)offset > file->bytenum)
   1e1ff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e202:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e205:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e208:	39 c2                	cmp    edx,eax
   1e20a:	73 0c                	jae    1e218 <fl_fseek+0xff>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1170
                file->bytenum = 0;
   1e20c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e20f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
   1e216:	eb 11                	jmp    1e229 <fl_fseek+0x110>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1172
            else
                file->bytenum-= offset;
   1e218:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e21b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e21e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e221:	29 c2                	sub    edx,eax
   1e223:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e226:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1175
        }

        res = 0;
   1e229:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1e230:	eb 22                	jmp    1e254 <fl_fseek+0x13b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1177
    }
    else if (origin == SEEK_END)
   1e232:	83 7d 10 02          	cmp    DWORD PTR [ebp+0x10],0x2
   1e236:	75 15                	jne    1e24d <fl_fseek+0x134>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1179
    {
        file->bytenum = file->filelength;
   1e238:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e23b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1e23e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e241:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1180
        res = 0;
   1e244:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1e24b:	eb 07                	jmp    1e254 <fl_fseek+0x13b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1183
    }
    else
        res = -1;
   1e24d:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1185

    FL_UNLOCK(&_fs);
   1e254:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e259:	85 c0                	test   eax,eax
   1e25b:	74 07                	je     1e264 <fl_fseek+0x14b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1185 (discriminator 1)
   1e25d:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e262:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1187

    return res;
   1e264:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1188
}
   1e267:	c9                   	leave  
   1e268:	c3                   	ret    

0001e269 <fl_fgetpos>:
fl_fgetpos():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1193
//-----------------------------------------------------------------------------
// fl_fgetpos: Get the current file position
//-----------------------------------------------------------------------------
int fl_fgetpos(void *f , uint32 * position)
{
   1e269:	55                   	push   ebp
   1e26a:	89 e5                	mov    ebp,esp
   1e26c:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1194
    FL_FILE *file = (FL_FILE *)f;
   1e26f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e272:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1196

    if (!file)
   1e275:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1e279:	75 07                	jne    1e282 <fl_fgetpos+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1197
        return -1;
   1e27b:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1e280:	eb 30                	jmp    1e2b2 <fl_fgetpos+0x49>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1199

    FL_LOCK(&_fs);
   1e282:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e287:	85 c0                	test   eax,eax
   1e289:	74 07                	je     1e292 <fl_fgetpos+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1199 (discriminator 1)
   1e28b:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e290:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1202

    // Get position
    *position = file->bytenum;
   1e292:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1e295:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e298:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e29b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1204

    FL_UNLOCK(&_fs);
   1e29d:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e2a2:	85 c0                	test   eax,eax
   1e2a4:	74 07                	je     1e2ad <fl_fgetpos+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1204 (discriminator 1)
   1e2a6:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e2ab:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1206

    return 0;
   1e2ad:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1207
}
   1e2b2:	c9                   	leave  
   1e2b3:	c3                   	ret    

0001e2b4 <fl_ftell>:
fl_ftell():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1212
//-----------------------------------------------------------------------------
// fl_ftell: Get the current file position
//-----------------------------------------------------------------------------
long fl_ftell(void *f)
{
   1e2b4:	55                   	push   ebp
   1e2b5:	89 e5                	mov    ebp,esp
   1e2b7:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1213
    uint32 pos = 0;
   1e2ba:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1215

    fl_fgetpos(f, &pos);
   1e2c1:	83 ec 08             	sub    esp,0x8
   1e2c4:	8d 45 f4             	lea    eax,[ebp-0xc]
   1e2c7:	50                   	push   eax
   1e2c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e2cb:	e8 99 ff ff ff       	call   1e269 <fl_fgetpos>
   1e2d0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1217

    return (long)pos;
   1e2d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1218
}
   1e2d6:	c9                   	leave  
   1e2d7:	c3                   	ret    

0001e2d8 <fl_feof>:
fl_feof():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1223
//-----------------------------------------------------------------------------
// fl_feof: Is the file pointer at the end of the stream?
//-----------------------------------------------------------------------------
int fl_feof(void *f)
{
   1e2d8:	55                   	push   ebp
   1e2d9:	89 e5                	mov    ebp,esp
   1e2db:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1224
    FL_FILE *file = (FL_FILE *)f;
   1e2de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e2e1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1227
    int res;

    if (!file)
   1e2e4:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1e2e8:	75 07                	jne    1e2f1 <fl_feof+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1228
        return -1;
   1e2ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1e2ef:	eb 43                	jmp    1e334 <fl_feof+0x5c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1230

    FL_LOCK(&_fs);
   1e2f1:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e2f6:	85 c0                	test   eax,eax
   1e2f8:	74 07                	je     1e301 <fl_feof+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1230 (discriminator 1)
   1e2fa:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e2ff:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1232

    if (file->bytenum == file->filelength)
   1e301:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e304:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e307:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e30a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1e30d:	39 c2                	cmp    edx,eax
   1e30f:	75 09                	jne    1e31a <fl_feof+0x42>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1233
        res = EOF;
   1e311:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
   1e318:	eb 07                	jmp    1e321 <fl_feof+0x49>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1235
    else
        res = 0;
   1e31a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1237

    FL_UNLOCK(&_fs);
   1e321:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e326:	85 c0                	test   eax,eax
   1e328:	74 07                	je     1e331 <fl_feof+0x59>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1237 (discriminator 1)
   1e32a:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e32f:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1239

    return res;
   1e331:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1240
}
   1e334:	c9                   	leave  
   1e335:	c3                   	ret    

0001e336 <fl_fputc>:
fl_fputc():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1246
//-----------------------------------------------------------------------------
// fl_fputc: Write a character to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fputc(int c, void *f)
{
   1e336:	55                   	push   ebp
   1e337:	89 e5                	mov    ebp,esp
   1e339:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1247
    uint8 data = (uint8)c;
   1e33c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e33f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1250
    int res;

    res = fl_fwrite(&data, 1, 1, f);
   1e342:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e345:	6a 01                	push   0x1
   1e347:	6a 01                	push   0x1
   1e349:	8d 45 f3             	lea    eax,[ebp-0xd]
   1e34c:	50                   	push   eax
   1e34d:	e8 16 00 00 00       	call   1e368 <fl_fwrite>
   1e352:	83 c4 10             	add    esp,0x10
   1e355:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1251
    if (res == 1)
   1e358:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   1e35c:	75 05                	jne    1e363 <fl_fputc+0x2d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1252
        return c;
   1e35e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e361:	eb 03                	jmp    1e366 <fl_fputc+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1254
    else
        return res;
   1e363:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1255 (discriminator 1)
}
   1e366:	c9                   	leave  
   1e367:	c3                   	ret    

0001e368 <fl_fwrite>:
fl_fwrite():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1262
//-----------------------------------------------------------------------------
// fl_fwrite: Write a block of data to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fwrite(const void * data, int size, int count, void *f )
{
   1e368:	55                   	push   ebp
   1e369:	89 e5                	mov    ebp,esp
   1e36b:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1263
    FL_FILE *file = (FL_FILE *)f;
   1e36e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1e371:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1266
    uint32 sector;
    uint32 offset;
    uint32 length = (size*count);
   1e374:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e377:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
   1e37b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1267
    uint8 *buffer = (uint8 *)data;
   1e37e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e381:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1268
    uint32 bytesWritten = 0;
   1e384:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1272
    uint32 copyCount;

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e38b:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1e390:	85 c0                	test   eax,eax
   1e392:	75 05                	jne    1e399 <fl_fwrite+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1272 (discriminator 1)
   1e394:	e8 6d f4 ff ff       	call   1d806 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1274

    if (!file)
   1e399:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   1e39d:	75 0a                	jne    1e3a9 <fl_fwrite+0x41>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1275
        return -1;
   1e39f:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1e3a4:	e9 8a 02 00 00       	jmp    1e633 <fl_fwrite+0x2cb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1277

    FL_LOCK(&_fs);
   1e3a9:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e3ae:	85 c0                	test   eax,eax
   1e3b0:	74 07                	je     1e3b9 <fl_fwrite+0x51>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1277 (discriminator 1)
   1e3b2:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e3b7:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1280

    // No write permissions
    if (!(file->flags & FILE_WRITE))
   1e3b9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e3bc:	0f b6 80 30 07 00 00 	movzx  eax,BYTE PTR [eax+0x730]
   1e3c3:	0f b6 c0             	movzx  eax,al
   1e3c6:	83 e0 02             	and    eax,0x2
   1e3c9:	85 c0                	test   eax,eax
   1e3cb:	75 1a                	jne    1e3e7 <fl_fwrite+0x7f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1282
    {
        FL_UNLOCK(&_fs);
   1e3cd:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e3d2:	85 c0                	test   eax,eax
   1e3d4:	74 07                	je     1e3dd <fl_fwrite+0x75>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1282 (discriminator 1)
   1e3d6:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e3db:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1283
        return -1;
   1e3dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1e3e2:	e9 4c 02 00 00       	jmp    1e633 <fl_fwrite+0x2cb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1287
    }

    // Append writes to end of file
    if (file->flags & FILE_APPEND)
   1e3e7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e3ea:	0f b6 80 30 07 00 00 	movzx  eax,BYTE PTR [eax+0x730]
   1e3f1:	0f b6 c0             	movzx  eax,al
   1e3f4:	83 e0 04             	and    eax,0x4
   1e3f7:	85 c0                	test   eax,eax
   1e3f9:	74 0c                	je     1e407 <fl_fwrite+0x9f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1288
        file->bytenum = file->filelength;
   1e3fb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e3fe:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1e401:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e404:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1292
    // Else write to current position

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;
   1e407:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e40a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1e40d:	c1 e8 09             	shr    eax,0x9
   1e410:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1295

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
   1e413:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e416:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1e419:	25 ff 01 00 00       	and    eax,0x1ff
   1e41e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1297

    while (bytesWritten < length)
   1e421:	e9 b7 01 00 00       	jmp    1e5dd <fl_fwrite+0x275>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1300
    {
        // Whole sector or more to be written?
        if ((offset == 0) && ((length - bytesWritten) >= FAT_SECTOR_SIZE))
   1e426:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1e42a:	0f 85 b6 00 00 00    	jne    1e4e6 <fl_fwrite+0x17e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1300 (discriminator 1)
   1e430:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e433:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1e436:	3d ff 01 00 00       	cmp    eax,0x1ff
   1e43b:	0f 86 a5 00 00 00    	jbe    1e4e6 <fl_fwrite+0x17e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1305
        {
            uint32 sectorsWrote;

            // Buffered sector, flush back to disk
            if (file->file_data_address != 0xFFFFFFFF)
   1e441:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e444:	8b 80 28 07 00 00    	mov    eax,DWORD PTR [eax+0x728]
   1e44a:	83 f8 ff             	cmp    eax,0xffffffff
   1e44d:	74 35                	je     1e484 <fl_fwrite+0x11c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1308
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
   1e44f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e452:	8b 80 2c 07 00 00    	mov    eax,DWORD PTR [eax+0x72c]
   1e458:	85 c0                	test   eax,eax
   1e45a:	74 0e                	je     1e46a <fl_fwrite+0x102>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1309
                    fl_fflush(file);
   1e45c:	83 ec 0c             	sub    esp,0xc
   1e45f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1e462:	e8 71 f8 ff ff       	call   1dcd8 <fl_fflush>
   1e467:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1311

                file->file_data_address = 0xFFFFFFFF;
   1e46a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e46d:	c7 80 28 07 00 00 ff 	mov    DWORD PTR [eax+0x728],0xffffffff
   1e474:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1312
                file->file_data_dirty = 0;
   1e477:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e47a:	c7 80 2c 07 00 00 00 	mov    DWORD PTR [eax+0x72c],0x0
   1e481:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1316
            }

            // Write as many sectors as possible
            sectorsWrote = _write_sectors(file, sector, (uint8*)(buffer + bytesWritten), (length - bytesWritten) / FAT_SECTOR_SIZE);
   1e484:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e487:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1e48a:	c1 e8 09             	shr    eax,0x9
   1e48d:	89 c2                	mov    edx,eax
   1e48f:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
   1e492:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e495:	01 c8                	add    eax,ecx
   1e497:	52                   	push   edx
   1e498:	50                   	push   eax
   1e499:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1e49c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1e49f:	e8 42 f6 ff ff       	call   1dae6 <_write_sectors>
   1e4a4:	83 c4 10             	add    esp,0x10
   1e4a7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1317
            copyCount = FAT_SECTOR_SIZE * sectorsWrote;
   1e4aa:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1e4ad:	c1 e0 09             	shl    eax,0x9
   1e4b0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1320

            // Increase total read count
            bytesWritten += copyCount;
   1e4b3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e4b6:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1323

            // Increment file pointer
            file->bytenum += copyCount;
   1e4b9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e4bc:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e4bf:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e4c2:	01 c2                	add    edx,eax
   1e4c4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e4c7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1326

            // Move onto next sector and reset copy offset
            sector+= sectorsWrote;
   1e4ca:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1e4cd:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1327
            offset = 0;
   1e4d0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1329

            if (!sectorsWrote)
   1e4d7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
   1e4db:	0f 84 0a 01 00 00    	je     1e5eb <fl_fwrite+0x283>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1301

    while (bytesWritten < length)
    {
        // Whole sector or more to be written?
        if ((offset == 0) && ((length - bytesWritten) >= FAT_SECTOR_SIZE))
        {
   1e4e1:	e9 f7 00 00 00       	jmp    1e5dd <fl_fwrite+0x275>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1335
                break;
        }
        else
        {
            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
   1e4e6:	b8 00 02 00 00       	mov    eax,0x200
   1e4eb:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
   1e4ee:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1338

            // Only require some of this sector?
            if (copyCount > (length - bytesWritten))
   1e4f1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e4f4:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1e4f7:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1e4fa:	73 09                	jae    1e505 <fl_fwrite+0x19d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1339
                copyCount = (length - bytesWritten);
   1e4fc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e4ff:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1e502:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1342

            // Do we need to read a new sector?
            if (file->file_data_address != sector)
   1e505:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e508:	8b 80 28 07 00 00    	mov    eax,DWORD PTR [eax+0x728]
   1e50e:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1e511:	74 75                	je     1e588 <fl_fwrite+0x220>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1345
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
   1e513:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e516:	8b 80 2c 07 00 00    	mov    eax,DWORD PTR [eax+0x72c]
   1e51c:	85 c0                	test   eax,eax
   1e51e:	74 0e                	je     1e52e <fl_fwrite+0x1c6>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1346
                    fl_fflush(file);
   1e520:	83 ec 0c             	sub    esp,0xc
   1e523:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1e526:	e8 ad f7 ff ff       	call   1dcd8 <fl_fflush>
   1e52b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1349

                // If we plan to overwrite the whole sector, we don't need to read it first!
                if (copyCount != FAT_SECTOR_SIZE)
   1e52e:	81 7d e8 00 02 00 00 	cmp    DWORD PTR [ebp-0x18],0x200
   1e535:	74 38                	je     1e56f <fl_fwrite+0x207>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1356
                    // NOTE: This does not have succeed; if last sector of file
                    // reached, no valid data will be read in, but write will
                    // allocate some more space for new data.

                    // Get LBA of sector offset within file
                    if (!_read_sectors(file, sector, file->file_data_sector, 1))
   1e537:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e53a:	05 28 05 00 00       	add    eax,0x528
   1e53f:	6a 01                	push   0x1
   1e541:	50                   	push   eax
   1e542:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1e545:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1e548:	e8 1f f1 ff ff       	call   1d66c <_read_sectors>
   1e54d:	83 c4 10             	add    esp,0x10
   1e550:	85 c0                	test   eax,eax
   1e552:	75 1b                	jne    1e56f <fl_fwrite+0x207>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1357
                        memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
   1e554:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e557:	05 28 05 00 00       	add    eax,0x528
   1e55c:	83 ec 04             	sub    esp,0x4
   1e55f:	68 00 02 00 00       	push   0x200
   1e564:	6a 00                	push   0x0
   1e566:	50                   	push   eax
   1e567:	e8 9d 70 00 00       	call   25609 <memset>
   1e56c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1360
                }

                file->file_data_address = sector;
   1e56f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e572:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1e575:	89 90 28 07 00 00    	mov    DWORD PTR [eax+0x728],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1361
                file->file_data_dirty = 0;
   1e57b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e57e:	c7 80 2c 07 00 00 00 	mov    DWORD PTR [eax+0x72c],0x0
   1e585:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1365
            }

            // Copy from application buffer into sector buffer
            memcpy((uint8*)(file->file_data_sector + offset), (uint8*)(buffer + bytesWritten), copyCount);
   1e588:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   1e58b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e58e:	01 c2                	add    edx,eax
   1e590:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e593:	8d 88 28 05 00 00    	lea    ecx,[eax+0x528]
   1e599:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e59c:	01 c8                	add    eax,ecx
   1e59e:	83 ec 04             	sub    esp,0x4
   1e5a1:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1e5a4:	52                   	push   edx
   1e5a5:	50                   	push   eax
   1e5a6:	e8 11 7b 00 00       	call   260bc <memcpy>
   1e5ab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1368

            // Mark buffer as dirty
            file->file_data_dirty = 1;
   1e5ae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e5b1:	c7 80 2c 07 00 00 01 	mov    DWORD PTR [eax+0x72c],0x1
   1e5b8:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1371

            // Increase total read count
            bytesWritten += copyCount;
   1e5bb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e5be:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1374

            // Increment file pointer
            file->bytenum += copyCount;
   1e5c1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e5c4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e5c7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e5ca:	01 c2                	add    edx,eax
   1e5cc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e5cf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1377

            // Move onto next sector and reset copy offset
            sector++;
   1e5d2:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1378
            offset = 0;
   1e5d6:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1297
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesWritten < length)
   1e5dd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e5e0:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1e5e3:	0f 82 3d fe ff ff    	jb     1e426 <fl_fwrite+0xbe>
   1e5e9:	eb 01                	jmp    1e5ec <fl_fwrite+0x284>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1330
            // Move onto next sector and reset copy offset
            sector+= sectorsWrote;
            offset = 0;

            if (!sectorsWrote)
                break;
   1e5eb:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1383
            offset = 0;
        }
    }

    // Write increased extent of the file?
    if (file->bytenum > file->filelength)
   1e5ec:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e5ef:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e5f2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e5f5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1e5f8:	39 c2                	cmp    edx,eax
   1e5fa:	76 16                	jbe    1e612 <fl_fwrite+0x2aa>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1386
    {
        // Increase file size to new point
        file->filelength = file->bytenum;
   1e5fc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e5ff:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e602:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e605:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1390

        // We are changing the file length and this
        // will need to be writen back at some point
        file->filelength_changed = 1;
   1e608:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e60b:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1396
    }

#if FATFS_INC_TIME_DATE_SUPPORT
    // If time & date support is enabled, always force directory entry to be
    // written in-order to update file modify / access time & date.
    file->filelength_changed = 1;
   1e612:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e615:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1399
#endif

    FL_UNLOCK(&_fs);
   1e61c:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e621:	85 c0                	test   eax,eax
   1e623:	74 07                	je     1e62c <fl_fwrite+0x2c4>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1399 (discriminator 1)
   1e625:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e62a:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1401

    return (size*count);
   1e62c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e62f:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1402
}
   1e633:	c9                   	leave  
   1e634:	c3                   	ret    

0001e635 <fl_fputs>:
fl_fputs():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1409
//-----------------------------------------------------------------------------
// fl_fputs: Write a character string to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fputs(const char * str, void *f)
{
   1e635:	55                   	push   ebp
   1e636:	89 e5                	mov    ebp,esp
   1e638:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1410
    int len = (int)strlen(str);
   1e63b:	83 ec 0c             	sub    esp,0xc
   1e63e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e641:	e8 e6 92 00 00       	call   2792c <strlen>
   1e646:	83 c4 10             	add    esp,0x10
   1e649:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1411
    int res = fl_fwrite(str, 1, len, f);
   1e64c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e64f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1e652:	6a 01                	push   0x1
   1e654:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e657:	e8 0c fd ff ff       	call   1e368 <fl_fwrite>
   1e65c:	83 c4 10             	add    esp,0x10
   1e65f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1413

    if (res == len)
   1e662:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e665:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1e668:	75 05                	jne    1e66f <fl_fputs+0x3a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1414
        return len;
   1e66a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1e66d:	eb 03                	jmp    1e672 <fl_fputs+0x3d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1416
    else
        return res;
   1e66f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1417
}
   1e672:	c9                   	leave  
   1e673:	c3                   	ret    

0001e674 <fl_remove>:
fl_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1424
//-----------------------------------------------------------------------------
// fl_remove: Remove a file from the filesystem
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_remove( const char * filename )
{
   1e674:	55                   	push   ebp
   1e675:	89 e5                	mov    ebp,esp
   1e677:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1426
    FL_FILE* file;
    int res = -1;
   1e67a:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1428

    FL_LOCK(&_fs);
   1e681:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e686:	85 c0                	test   eax,eax
   1e688:	74 07                	je     1e691 <fl_remove+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1428 (discriminator 1)
   1e68a:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e68f:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1431

    // Use read_file as this will check if the file is already open!
    file = fl_fopen((char*)filename, "r");
   1e691:	83 ec 08             	sub    esp,0x8
   1e694:	68 d0 3a 08 00       	push   0x83ad0
   1e699:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e69c:	e8 8c f2 ff ff       	call   1d92d <fl_fopen>
   1e6a1:	83 c4 10             	add    esp,0x10
   1e6a4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1432
    if (file)
   1e6a7:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1e6ab:	74 54                	je     1e701 <fl_remove+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1435
    {
        // Delete allocated space
        if (fatfs_free_cluster_chain(&_fs, file->startcluster))
   1e6ad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e6b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1e6b3:	83 ec 08             	sub    esp,0x8
   1e6b6:	50                   	push   eax
   1e6b7:	68 00 91 12 00       	push   0x129100
   1e6bc:	e8 0d 2a 00 00       	call   210ce <fatfs_free_cluster_chain>
   1e6c1:	83 c4 10             	add    esp,0x10
   1e6c4:	85 c0                	test   eax,eax
   1e6c6:	74 39                	je     1e701 <fl_remove+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1438
        {
            // Remove directory entries
            if (fatfs_mark_file_deleted(&_fs, file->parentcluster, (char*)file->shortfilename))
   1e6c8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e6cb:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1e6d1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e6d4:	8b 00                	mov    eax,DWORD PTR [eax]
   1e6d6:	83 ec 04             	sub    esp,0x4
   1e6d9:	52                   	push   edx
   1e6da:	50                   	push   eax
   1e6db:	68 00 91 12 00       	push   0x129100
   1e6e0:	e8 2c da ff ff       	call   1c111 <fatfs_mark_file_deleted>
   1e6e5:	83 c4 10             	add    esp,0x10
   1e6e8:	85 c0                	test   eax,eax
   1e6ea:	74 15                	je     1e701 <fl_remove+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1442
            {
                // Close the file handle (this should not write anything to the file
                // as we have not changed the file since opening it!)
                fl_fclose(file);
   1e6ec:	83 ec 0c             	sub    esp,0xc
   1e6ef:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1e6f2:	e8 67 f6 ff ff       	call   1dd5e <fl_fclose>
   1e6f7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1444

                res = 0;
   1e6fa:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1449
            }
        }
    }

    FL_UNLOCK(&_fs);
   1e701:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e706:	85 c0                	test   eax,eax
   1e708:	74 07                	je     1e711 <fl_remove+0x9d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1449 (discriminator 1)
   1e70a:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e70f:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1451

    return res;
   1e711:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1452
}
   1e714:	c9                   	leave  
   1e715:	c3                   	ret    

0001e716 <fl_createdirectory>:
fl_createdirectory():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1459
//-----------------------------------------------------------------------------
// fl_createdirectory: Create a directory based on a path
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_createdirectory(const char *path)
{
   1e716:	55                   	push   ebp
   1e717:	89 e5                	mov    ebp,esp
   1e719:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1463
    int res;

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e71c:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1e721:	85 c0                	test   eax,eax
   1e723:	75 05                	jne    1e72a <fl_createdirectory+0x14>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1463 (discriminator 1)
   1e725:	e8 dc f0 ff ff       	call   1d806 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1465

    FL_LOCK(&_fs);
   1e72a:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e72f:	85 c0                	test   eax,eax
   1e731:	74 07                	je     1e73a <fl_createdirectory+0x24>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1465 (discriminator 1)
   1e733:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e738:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1466
    res =_create_directory((char*)path);
   1e73a:	83 ec 0c             	sub    esp,0xc
   1e73d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e740:	e8 ec e5 ff ff       	call   1cd31 <_create_directory>
   1e745:	83 c4 10             	add    esp,0x10
   1e748:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1467
    FL_UNLOCK(&_fs);
   1e74b:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e750:	85 c0                	test   eax,eax
   1e752:	74 07                	je     1e75b <fl_createdirectory+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1467 (discriminator 1)
   1e754:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e759:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1469

    return res;
   1e75b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1470
}
   1e75e:	c9                   	leave  
   1e75f:	c3                   	ret    

0001e760 <fl_listdirectory>:
fl_listdirectory():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1477
//-----------------------------------------------------------------------------
// fl_listdirectory: List a directory based on a path
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fl_listdirectory(const char *path)
{
   1e760:	55                   	push   ebp
   1e761:	89 e5                	mov    ebp,esp
   1e763:	56                   	push   esi
   1e764:	53                   	push   ebx
   1e765:	81 ec c0 00 00 00    	sub    esp,0xc0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1481
    FL_DIR dirstat;

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e76b:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1e770:	85 c0                	test   eax,eax
   1e772:	75 05                	jne    1e779 <fl_listdirectory+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1481 (discriminator 1)
   1e774:	e8 8d f0 ff ff       	call   1d806 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1483

    FAT_PRINTF(("\r\nDirectory %s\r\n", path));
   1e779:	83 ec 08             	sub    esp,0x8
   1e77c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e77f:	68 d2 3a 08 00       	push   0x83ad2
   1e784:	e8 d2 8f 00 00       	call   2775b <printk>
   1e789:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1484
        FL_LOCK(&_fs);
   1e78c:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e791:	85 c0                	test   eax,eax
   1e793:	74 07                	je     1e79c <fl_listdirectory+0x3c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1484 (discriminator 1)
   1e795:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e79a:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1487


        if (fl_opendir(path, &dirstat))
   1e79c:	83 ec 08             	sub    esp,0x8
   1e79f:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e7a2:	50                   	push   eax
   1e7a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e7a6:	e8 ed 00 00 00       	call   1e898 <fl_opendir>
   1e7ab:	83 c4 10             	add    esp,0x10
   1e7ae:	85 c0                	test   eax,eax
   1e7b0:	0f 84 ca 00 00 00    	je     1e880 <fl_listdirectory+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1491
    {
        struct fs_dir_ent dirent;

        while (fl_readdir(&dirstat, &dirent) == 0)
   1e7b6:	e9 98 00 00 00       	jmp    1e853 <fl_listdirectory+0xf3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1495
        {
#if FATFS_INC_TIME_DATE_SUPPORT
            int d,m,y,h,mn,s;
            fatfs_convert_from_fat_time(dirent.write_time, &h,&m,&s);
   1e7bb:	0f b7 45 ca          	movzx  eax,WORD PTR [ebp-0x36]
   1e7bf:	0f b7 c0             	movzx  eax,ax
   1e7c2:	8d 55 d4             	lea    edx,[ebp-0x2c]
   1e7c5:	52                   	push   edx
   1e7c6:	8d 55 e4             	lea    edx,[ebp-0x1c]
   1e7c9:	52                   	push   edx
   1e7ca:	8d 55 dc             	lea    edx,[ebp-0x24]
   1e7cd:	52                   	push   edx
   1e7ce:	50                   	push   eax
   1e7cf:	e8 07 18 00 00       	call   1ffdb <fatfs_convert_from_fat_time>
   1e7d4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1496
            fatfs_convert_from_fat_date(dirent.write_date, &d,&mn,&y);
   1e7d7:	0f b7 45 cc          	movzx  eax,WORD PTR [ebp-0x34]
   1e7db:	0f b7 c0             	movzx  eax,ax
   1e7de:	8d 55 e0             	lea    edx,[ebp-0x20]
   1e7e1:	52                   	push   edx
   1e7e2:	8d 55 d8             	lea    edx,[ebp-0x28]
   1e7e5:	52                   	push   edx
   1e7e6:	8d 55 e8             	lea    edx,[ebp-0x18]
   1e7e9:	52                   	push   edx
   1e7ea:	50                   	push   eax
   1e7eb:	e8 40 18 00 00       	call   20030 <fatfs_convert_from_fat_date>
   1e7f0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1497
            FAT_PRINTF(("%02d/%02d/%04d  %02d:%02d      ", mn,d,y,h,m));
   1e7f3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
   1e7f6:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
   1e7f9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1e7fc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1e7ff:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1e802:	83 ec 08             	sub    esp,0x8
   1e805:	56                   	push   esi
   1e806:	53                   	push   ebx
   1e807:	51                   	push   ecx
   1e808:	52                   	push   edx
   1e809:	50                   	push   eax
   1e80a:	68 e4 3a 08 00       	push   0x83ae4
   1e80f:	e8 47 8f 00 00       	call   2775b <printk>
   1e814:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1500
#endif

            if (dirent.is_dir)
   1e817:	0f b6 45 bc          	movzx  eax,BYTE PTR [ebp-0x44]
   1e81b:	84 c0                	test   al,al
   1e81d:	74 19                	je     1e838 <fl_listdirectory+0xd8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1502
            {
                FAT_PRINTF(("%s <DIR>\r\n", dirent.filename));
   1e81f:	83 ec 08             	sub    esp,0x8
   1e822:	8d 85 3c ff ff ff    	lea    eax,[ebp-0xc4]
   1e828:	50                   	push   eax
   1e829:	68 04 3b 08 00       	push   0x83b04
   1e82e:	e8 28 8f 00 00       	call   2775b <printk>
   1e833:	83 c4 10             	add    esp,0x10
   1e836:	eb 1b                	jmp    1e853 <fl_listdirectory+0xf3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1506
            }
            else
            {
                FAT_PRINTF(("%s [%d bytes]\r\n", dirent.filename, dirent.size));
   1e838:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
   1e83b:	83 ec 04             	sub    esp,0x4
   1e83e:	50                   	push   eax
   1e83f:	8d 85 3c ff ff ff    	lea    eax,[ebp-0xc4]
   1e845:	50                   	push   eax
   1e846:	68 0f 3b 08 00       	push   0x83b0f
   1e84b:	e8 0b 8f 00 00       	call   2775b <printk>
   1e850:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1491

        if (fl_opendir(path, &dirstat))
    {
        struct fs_dir_ent dirent;

        while (fl_readdir(&dirstat, &dirent) == 0)
   1e853:	83 ec 08             	sub    esp,0x8
   1e856:	8d 85 3c ff ff ff    	lea    eax,[ebp-0xc4]
   1e85c:	50                   	push   eax
   1e85d:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e860:	50                   	push   eax
   1e861:	e8 e9 00 00 00       	call   1e94f <fl_readdir>
   1e866:	83 c4 10             	add    esp,0x10
   1e869:	85 c0                	test   eax,eax
   1e86b:	0f 84 4a ff ff ff    	je     1e7bb <fl_listdirectory+0x5b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1510
            {
                FAT_PRINTF(("%s [%d bytes]\r\n", dirent.filename, dirent.size));
            }
        }

        fl_closedir(&dirstat);
   1e871:	83 ec 0c             	sub    esp,0xc
   1e874:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e877:	50                   	push   eax
   1e878:	e8 3a 01 00 00       	call   1e9b7 <fl_closedir>
   1e87d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1513
    }

    FL_UNLOCK(&_fs);
   1e880:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e885:	85 c0                	test   eax,eax
   1e887:	74 07                	je     1e890 <fl_listdirectory+0x130>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1513 (discriminator 1)
   1e889:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e88e:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1514
}
   1e890:	90                   	nop
   1e891:	8d 65 f8             	lea    esp,[ebp-0x8]
   1e894:	5b                   	pop    ebx
   1e895:	5e                   	pop    esi
   1e896:	5d                   	pop    ebp
   1e897:	c3                   	ret    

0001e898 <fl_opendir>:
fl_opendir():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1521
//-----------------------------------------------------------------------------
// fl_opendir: Opens a directory for listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
FL_DIR* fl_opendir(const char* path, FL_DIR *dir)
{
   1e898:	55                   	push   ebp
   1e899:	89 e5                	mov    ebp,esp
   1e89b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1523
    int levels;
    int res = 1;
   1e89e:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1524
    uint32 cluster = FAT32_INVALID_CLUSTER;
   1e8a5:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1527

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e8ac:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1e8b1:	85 c0                	test   eax,eax
   1e8b3:	75 05                	jne    1e8ba <fl_opendir+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1527 (discriminator 1)
   1e8b5:	e8 4c ef ff ff       	call   1d806 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1529

    FL_LOCK(&_fs);
   1e8ba:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e8bf:	85 c0                	test   eax,eax
   1e8c1:	74 07                	je     1e8ca <fl_opendir+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1529 (discriminator 1)
   1e8c3:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e8c8:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1531

    levels = fatfs_total_path_levels((char*)path) + 1;
   1e8ca:	83 ec 0c             	sub    esp,0xc
   1e8cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e8d0:	e8 5b 18 00 00       	call   20130 <fatfs_total_path_levels>
   1e8d5:	83 c4 10             	add    esp,0x10
   1e8d8:	83 c0 01             	add    eax,0x1
   1e8db:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1534

    // If path is in the root dir
    if (levels == 0)
   1e8de:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1e8e2:	75 15                	jne    1e8f9 <fl_opendir+0x61>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1535
        cluster = fatfs_get_root_cluster(&_fs);
   1e8e4:	83 ec 0c             	sub    esp,0xc
   1e8e7:	68 00 91 12 00       	push   0x129100
   1e8ec:	e8 54 d2 ff ff       	call   1bb45 <fatfs_get_root_cluster>
   1e8f1:	83 c4 10             	add    esp,0x10
   1e8f4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
   1e8f7:	eb 15                	jmp    1e90e <fl_opendir+0x76>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1538
    // Find parent directory start cluster
    else
        res = _open_directory((char*)path, &cluster);
   1e8f9:	83 ec 08             	sub    esp,0x8
   1e8fc:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e8ff:	50                   	push   eax
   1e900:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e903:	e8 3f e3 ff ff       	call   1cc47 <_open_directory>
   1e908:	83 c4 10             	add    esp,0x10
   1e90b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1540

    if (res)
   1e90e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1e912:	74 17                	je     1e92b <fl_opendir+0x93>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1541
        fatfs_list_directory_start(&_fs, dir, cluster);
   1e914:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e917:	83 ec 04             	sub    esp,0x4
   1e91a:	50                   	push   eax
   1e91b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e91e:	68 00 91 12 00       	push   0x129100
   1e923:	e8 27 d9 ff ff       	call   1c24f <fatfs_list_directory_start>
   1e928:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1543

    FL_UNLOCK(&_fs);
   1e92b:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e930:	85 c0                	test   eax,eax
   1e932:	74 07                	je     1e93b <fl_opendir+0xa3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1543 (discriminator 1)
   1e934:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e939:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1545

    return cluster != FAT32_INVALID_CLUSTER ? dir : 0;
   1e93b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e93e:	83 f8 ff             	cmp    eax,0xffffffff
   1e941:	74 05                	je     1e948 <fl_opendir+0xb0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1545 (discriminator 1)
   1e943:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e946:	eb 05                	jmp    1e94d <fl_opendir+0xb5>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1545 (discriminator 2)
   1e948:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1546
}
   1e94d:	c9                   	leave  
   1e94e:	c3                   	ret    

0001e94f <fl_readdir>:
fl_readdir():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1553
//-----------------------------------------------------------------------------
// fl_readdir: Get next item in directory
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_readdir(FL_DIR *dirls, fl_dirent *entry)
{
   1e94f:	55                   	push   ebp
   1e950:	89 e5                	mov    ebp,esp
   1e952:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1554
    int res = 0;
   1e955:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1557

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e95c:	a1 f0 90 12 00       	mov    eax,ds:0x1290f0
   1e961:	85 c0                	test   eax,eax
   1e963:	75 05                	jne    1e96a <fl_readdir+0x1b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1557 (discriminator 1)
   1e965:	e8 9c ee ff ff       	call   1d806 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1559

    FL_LOCK(&_fs);
   1e96a:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e96f:	85 c0                	test   eax,eax
   1e971:	74 07                	je     1e97a <fl_readdir+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1559 (discriminator 1)
   1e973:	a1 3c 91 12 00       	mov    eax,ds:0x12913c
   1e978:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1561

    res = fatfs_list_directory_next(&_fs, dirls, entry);
   1e97a:	83 ec 04             	sub    esp,0x4
   1e97d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e980:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e983:	68 00 91 12 00       	push   0x129100
   1e988:	e8 e1 d8 ff ff       	call   1c26e <fatfs_list_directory_next>
   1e98d:	83 c4 10             	add    esp,0x10
   1e990:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1563

    FL_UNLOCK(&_fs);
   1e993:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e998:	85 c0                	test   eax,eax
   1e99a:	74 07                	je     1e9a3 <fl_readdir+0x54>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1563 (discriminator 1)
   1e99c:	a1 40 91 12 00       	mov    eax,ds:0x129140
   1e9a1:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1565

    return res ? 0 : -1;
   1e9a3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1e9a7:	74 07                	je     1e9b0 <fl_readdir+0x61>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1565 (discriminator 1)
   1e9a9:	b8 00 00 00 00       	mov    eax,0x0
   1e9ae:	eb 05                	jmp    1e9b5 <fl_readdir+0x66>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1565 (discriminator 2)
   1e9b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1566 (discriminator 5)
}
   1e9b5:	c9                   	leave  
   1e9b6:	c3                   	ret    

0001e9b7 <fl_closedir>:
fl_closedir():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1573
//-----------------------------------------------------------------------------
// fl_closedir: Close directory after listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_closedir(FL_DIR* dir)
{
   1e9b7:	55                   	push   ebp
   1e9b8:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1575
    // Not used
    return 0;
   1e9ba:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1576
}
   1e9bf:	5d                   	pop    ebp
   1e9c0:	c3                   	ret    

0001e9c1 <fl_is_dir>:
fl_is_dir():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1583
//-----------------------------------------------------------------------------
// fl_is_dir: Is this a directory?
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_is_dir(const char *path)
{
   1e9c1:	55                   	push   ebp
   1e9c2:	89 e5                	mov    ebp,esp
   1e9c4:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1584
    int res = 0;
   1e9c7:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1587
    FL_DIR dir;

    if (fl_opendir(path, &dir))
   1e9ce:	83 ec 08             	sub    esp,0x8
   1e9d1:	8d 45 e8             	lea    eax,[ebp-0x18]
   1e9d4:	50                   	push   eax
   1e9d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e9d8:	e8 bb fe ff ff       	call   1e898 <fl_opendir>
   1e9dd:	83 c4 10             	add    esp,0x10
   1e9e0:	85 c0                	test   eax,eax
   1e9e2:	74 16                	je     1e9fa <fl_is_dir+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1589
    {
        res = 1;
   1e9e4:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1590
        fl_closedir(&dir);
   1e9eb:	83 ec 0c             	sub    esp,0xc
   1e9ee:	8d 45 e8             	lea    eax,[ebp-0x18]
   1e9f1:	50                   	push   eax
   1e9f2:	e8 c0 ff ff ff       	call   1e9b7 <fl_closedir>
   1e9f7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1593
    }

    return res;
   1e9fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1594
}
   1e9fd:	c9                   	leave  
   1e9fe:	c3                   	ret    

0001e9ff <fl_format>:
fl_format():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1601
//-----------------------------------------------------------------------------
// fl_format: Format a partition with either FAT16 or FAT32 based on size
//-----------------------------------------------------------------------------
#if FATFS_INC_FORMAT_SUPPORT
int fl_format(uint32 volume_sectors, const char *name)
{
   1e9ff:	55                   	push   ebp
   1ea00:	89 e5                	mov    ebp,esp
   1ea02:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1602
    return fatfs_format(&_fs, volume_sectors, name);
   1ea05:	83 ec 04             	sub    esp,0x4
   1ea08:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1ea0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ea0e:	68 00 91 12 00       	push   0x129100
   1ea13:	e8 8a 0b 00 00       	call   1f5a2 <fatfs_format>
   1ea18:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1603
}
   1ea1b:	c9                   	leave  
   1ea1c:	c3                   	ret    
   1ea1d:	66 90                	xchg   ax,ax
   1ea1f:	90                   	nop

0001ea20 <fatfs_calc_cluster_size>:
fatfs_calc_cluster_size():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:78

//-----------------------------------------------------------------------------
// fatfs_calc_cluster_size: Calculate what cluster size should be used
//-----------------------------------------------------------------------------
static uint8 fatfs_calc_cluster_size(uint32 sectors, int is_fat32)
{
   1ea20:	55                   	push   ebp
   1ea21:	89 e5                	mov    ebp,esp
   1ea23:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:81
    int i;

    if (!is_fat32)
   1ea26:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1ea2a:	75 3a                	jne    1ea66 <fatfs_calc_cluster_size+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:83
    {
        for (i=0; _cluster_size_table16[i].sectors_per_cluster != 0;i++)
   1ea2c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1ea33:	eb 20                	jmp    1ea55 <fatfs_calc_cluster_size+0x35>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:84
            if (sectors <= _cluster_size_table16[i].sectors)
   1ea35:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1ea38:	8b 04 c5 60 e1 02 00 	mov    eax,DWORD PTR [eax*8+0x2e160]
   1ea3f:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1ea42:	72 0d                	jb     1ea51 <fatfs_calc_cluster_size+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:85
                return _cluster_size_table16[i].sectors_per_cluster;
   1ea44:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1ea47:	0f b6 04 c5 64 e1 02 	movzx  eax,BYTE PTR [eax*8+0x2e164]
   1ea4e:	00 
   1ea4f:	eb 52                	jmp    1eaa3 <fatfs_calc_cluster_size+0x83>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:83 (discriminator 2)
{
    int i;

    if (!is_fat32)
    {
        for (i=0; _cluster_size_table16[i].sectors_per_cluster != 0;i++)
   1ea51:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:83 (discriminator 1)
   1ea55:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1ea58:	0f b6 04 c5 64 e1 02 	movzx  eax,BYTE PTR [eax*8+0x2e164]
   1ea5f:	00 
   1ea60:	84 c0                	test   al,al
   1ea62:	75 d1                	jne    1ea35 <fatfs_calc_cluster_size+0x15>
   1ea64:	eb 38                	jmp    1ea9e <fatfs_calc_cluster_size+0x7e>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:89
            if (sectors <= _cluster_size_table16[i].sectors)
                return _cluster_size_table16[i].sectors_per_cluster;
    }
    else
    {
        for (i=0; _cluster_size_table32[i].sectors_per_cluster != 0;i++)
   1ea66:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1ea6d:	eb 20                	jmp    1ea8f <fatfs_calc_cluster_size+0x6f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:90
            if (sectors <= _cluster_size_table32[i].sectors)
   1ea6f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1ea72:	8b 04 c5 a0 e1 02 00 	mov    eax,DWORD PTR [eax*8+0x2e1a0]
   1ea79:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1ea7c:	72 0d                	jb     1ea8b <fatfs_calc_cluster_size+0x6b>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:91
                return _cluster_size_table32[i].sectors_per_cluster;
   1ea7e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1ea81:	0f b6 04 c5 a4 e1 02 	movzx  eax,BYTE PTR [eax*8+0x2e1a4]
   1ea88:	00 
   1ea89:	eb 18                	jmp    1eaa3 <fatfs_calc_cluster_size+0x83>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:89 (discriminator 2)
            if (sectors <= _cluster_size_table16[i].sectors)
                return _cluster_size_table16[i].sectors_per_cluster;
    }
    else
    {
        for (i=0; _cluster_size_table32[i].sectors_per_cluster != 0;i++)
   1ea8b:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:89 (discriminator 1)
   1ea8f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1ea92:	0f b6 04 c5 a4 e1 02 	movzx  eax,BYTE PTR [eax*8+0x2e1a4]
   1ea99:	00 
   1ea9a:	84 c0                	test   al,al
   1ea9c:	75 d1                	jne    1ea6f <fatfs_calc_cluster_size+0x4f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:94
            if (sectors <= _cluster_size_table32[i].sectors)
                return _cluster_size_table32[i].sectors_per_cluster;
    }

    return 0;
   1ea9e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:95
}
   1eaa3:	c9                   	leave  
   1eaa4:	c3                   	ret    

0001eaa5 <fatfs_erase_sectors>:
fatfs_erase_sectors():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:100
//-----------------------------------------------------------------------------
// fatfs_erase_sectors: Erase a number of sectors
//-----------------------------------------------------------------------------
static int fatfs_erase_sectors(struct fatfs *fs, uint32 lba, int count)
{
   1eaa5:	55                   	push   ebp
   1eaa6:	89 e5                	mov    ebp,esp
   1eaa8:	53                   	push   ebx
   1eaa9:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:104
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1eaac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eaaf:	83 c0 44             	add    eax,0x44
   1eab2:	83 ec 04             	sub    esp,0x4
   1eab5:	68 00 02 00 00       	push   0x200
   1eaba:	6a 00                	push   0x0
   1eabc:	50                   	push   eax
   1eabd:	e8 47 6b 00 00       	call   25609 <memset>
   1eac2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:106

    for (i=0;i<count;i++)
   1eac5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1eacc:	eb 2f                	jmp    1eafd <fatfs_erase_sectors+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:107
        if (!fs->disk_io.write_media(lba + i, fs->currentsector.sector, 1))
   1eace:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ead1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1ead4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ead7:	8d 4a 44             	lea    ecx,[edx+0x44]
   1eada:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
   1eadd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1eae0:	01 da                	add    edx,ebx
   1eae2:	83 ec 04             	sub    esp,0x4
   1eae5:	6a 01                	push   0x1
   1eae7:	51                   	push   ecx
   1eae8:	52                   	push   edx
   1eae9:	ff d0                	call   eax
   1eaeb:	83 c4 10             	add    esp,0x10
   1eaee:	85 c0                	test   eax,eax
   1eaf0:	75 07                	jne    1eaf9 <fatfs_erase_sectors+0x54>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:108
            return 0;
   1eaf2:	b8 00 00 00 00       	mov    eax,0x0
   1eaf7:	eb 11                	jmp    1eb0a <fatfs_erase_sectors+0x65>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:106 (discriminator 2)
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    for (i=0;i<count;i++)
   1eaf9:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:106 (discriminator 1)
   1eafd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1eb00:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1eb03:	7c c9                	jl     1eace <fatfs_erase_sectors+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:110
        if (!fs->disk_io.write_media(lba + i, fs->currentsector.sector, 1))
            return 0;

    return 1;
   1eb05:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:111
}
   1eb0a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1eb0d:	c9                   	leave  
   1eb0e:	c3                   	ret    

0001eb0f <fatfs_create_boot_sector>:
fatfs_create_boot_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:116
//-----------------------------------------------------------------------------
// fatfs_create_boot_sector: Create the boot sector
//-----------------------------------------------------------------------------
static int fatfs_create_boot_sector(struct fatfs *fs, uint32 boot_sector_lba, uint32 vol_sectors, const char *name, int is_fat32)
{
   1eb0f:	55                   	push   ebp
   1eb10:	89 e5                	mov    ebp,esp
   1eb12:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:121
    uint32 total_clusters;
    int i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1eb15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb18:	83 c0 44             	add    eax,0x44
   1eb1b:	83 ec 04             	sub    esp,0x4
   1eb1e:	68 00 02 00 00       	push   0x200
   1eb23:	6a 00                	push   0x0
   1eb25:	50                   	push   eax
   1eb26:	e8 de 6a 00 00       	call   25609 <memset>
   1eb2b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:124

    // OEM Name & Jump Code
    fs->currentsector.sector[0] = 0xEB;
   1eb2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb31:	c6 40 44 eb          	mov    BYTE PTR [eax+0x44],0xeb
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:125
    fs->currentsector.sector[1] = 0x3C;
   1eb35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb38:	c6 40 45 3c          	mov    BYTE PTR [eax+0x45],0x3c
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:126
    fs->currentsector.sector[2] = 0x90;
   1eb3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb3f:	c6 40 46 90          	mov    BYTE PTR [eax+0x46],0x90
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:127
    fs->currentsector.sector[3] = 0x4D;
   1eb43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb46:	c6 40 47 4d          	mov    BYTE PTR [eax+0x47],0x4d
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:128
    fs->currentsector.sector[4] = 0x53;
   1eb4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb4d:	c6 40 48 53          	mov    BYTE PTR [eax+0x48],0x53
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:129
    fs->currentsector.sector[5] = 0x44;
   1eb51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb54:	c6 40 49 44          	mov    BYTE PTR [eax+0x49],0x44
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:130
    fs->currentsector.sector[6] = 0x4F;
   1eb58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb5b:	c6 40 4a 4f          	mov    BYTE PTR [eax+0x4a],0x4f
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:131
    fs->currentsector.sector[7] = 0x53;
   1eb5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb62:	c6 40 4b 53          	mov    BYTE PTR [eax+0x4b],0x53
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:132
    fs->currentsector.sector[8] = 0x35;
   1eb66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb69:	c6 40 4c 35          	mov    BYTE PTR [eax+0x4c],0x35
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:133
    fs->currentsector.sector[9] = 0x2E;
   1eb6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb70:	c6 40 4d 2e          	mov    BYTE PTR [eax+0x4d],0x2e
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:134
    fs->currentsector.sector[10] = 0x30;
   1eb74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb77:	c6 40 4e 30          	mov    BYTE PTR [eax+0x4e],0x30
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:137

    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
   1eb7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb7e:	c6 40 4f 00          	mov    BYTE PTR [eax+0x4f],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:138
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;
   1eb82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb85:	c6 40 50 02          	mov    BYTE PTR [eax+0x50],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:141

    // Get sectors per cluster size for the disk
    fs->sectors_per_cluster = fatfs_calc_cluster_size(vol_sectors, is_fat32);
   1eb89:	83 ec 08             	sub    esp,0x8
   1eb8c:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   1eb8f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1eb92:	e8 89 fe ff ff       	call   1ea20 <fatfs_calc_cluster_size>
   1eb97:	83 c4 10             	add    esp,0x10
   1eb9a:	89 c2                	mov    edx,eax
   1eb9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb9f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:142
    if (!fs->sectors_per_cluster)
   1eba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eba4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1eba7:	84 c0                	test   al,al
   1eba9:	75 0a                	jne    1ebb5 <fatfs_create_boot_sector+0xa6>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:143
        return 0; // Invalid disk size
   1ebab:	b8 00 00 00 00       	mov    eax,0x0
   1ebb0:	e9 dc 04 00 00       	jmp    1f091 <fatfs_create_boot_sector+0x582>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:146

    // Sectors per cluster
    fs->currentsector.sector[13] = fs->sectors_per_cluster;
   1ebb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebb8:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   1ebbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebbe:	88 50 51             	mov    BYTE PTR [eax+0x51],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:149

    // Reserved Sectors
    if (!is_fat32)
   1ebc1:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1ebc5:	75 0b                	jne    1ebd2 <fatfs_create_boot_sector+0xc3>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:150
        fs->reserved_sectors = 8;
   1ebc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebca:	66 c7 40 2a 08 00    	mov    WORD PTR [eax+0x2a],0x8
   1ebd0:	eb 09                	jmp    1ebdb <fatfs_create_boot_sector+0xcc>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:152
    else
        fs->reserved_sectors = 32;
   1ebd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebd5:	66 c7 40 2a 20 00    	mov    WORD PTR [eax+0x2a],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:153
    fs->currentsector.sector[14] = (fs->reserved_sectors >> 0) & 0xFF;
   1ebdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebde:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1ebe2:	89 c2                	mov    edx,eax
   1ebe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebe7:	88 50 52             	mov    BYTE PTR [eax+0x52],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:154
    fs->currentsector.sector[15] = (fs->reserved_sectors >> 8) & 0xFF;
   1ebea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebed:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1ebf1:	66 c1 e8 08          	shr    ax,0x8
   1ebf5:	89 c2                	mov    edx,eax
   1ebf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebfa:	88 50 53             	mov    BYTE PTR [eax+0x53],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:157

    // Number of FATS
    fs->num_of_fats = 2;
   1ebfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec00:	c6 40 2c 02          	mov    BYTE PTR [eax+0x2c],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:158
    fs->currentsector.sector[16] = fs->num_of_fats;
   1ec04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec07:	0f b6 50 2c          	movzx  edx,BYTE PTR [eax+0x2c]
   1ec0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec0e:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:161

    // Max entries in root dir (FAT16 only)
    if (!is_fat32)
   1ec11:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1ec15:	75 2d                	jne    1ec44 <fatfs_create_boot_sector+0x135>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:163
    {
        fs->root_entry_count = 512;
   1ec17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec1a:	66 c7 40 28 00 02    	mov    WORD PTR [eax+0x28],0x200
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:164
        fs->currentsector.sector[17] = (fs->root_entry_count >> 0) & 0xFF;
   1ec20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec23:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1ec27:	89 c2                	mov    edx,eax
   1ec29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec2c:	88 50 55             	mov    BYTE PTR [eax+0x55],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:165
        fs->currentsector.sector[18] = (fs->root_entry_count >> 8) & 0xFF;
   1ec2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec32:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1ec36:	66 c1 e8 08          	shr    ax,0x8
   1ec3a:	89 c2                	mov    edx,eax
   1ec3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec3f:	88 50 56             	mov    BYTE PTR [eax+0x56],dl
   1ec42:	eb 17                	jmp    1ec5b <fatfs_create_boot_sector+0x14c>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:169
    }
    else
    {
        fs->root_entry_count = 0;
   1ec44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec47:	66 c7 40 28 00 00    	mov    WORD PTR [eax+0x28],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:170
        fs->currentsector.sector[17] = 0;
   1ec4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec50:	c6 40 55 00          	mov    BYTE PTR [eax+0x55],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:171
        fs->currentsector.sector[18] = 0;
   1ec54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec57:	c6 40 56 00          	mov    BYTE PTR [eax+0x56],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:175
    }

    // [FAT16] Total sectors (use FAT32 count instead)
    fs->currentsector.sector[19] = 0x00;
   1ec5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec5e:	c6 40 57 00          	mov    BYTE PTR [eax+0x57],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:176
    fs->currentsector.sector[20] = 0x00;
   1ec62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec65:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:179

    // Media type
    fs->currentsector.sector[21] = 0xF8;
   1ec69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec6c:	c6 40 59 f8          	mov    BYTE PTR [eax+0x59],0xf8
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:183


    // FAT16 BS Details
    if (!is_fat32)
   1ec70:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1ec74:	0f 85 8c 01 00 00    	jne    1ee06 <fatfs_create_boot_sector+0x2f7>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:186
    {
        // Count of sectors used by the FAT table (FAT16 only)
        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
   1ec7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec7d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ec80:	0f b6 c8             	movzx  ecx,al
   1ec83:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ec86:	ba 00 00 00 00       	mov    edx,0x0
   1ec8b:	f7 f1                	div    ecx
   1ec8d:	83 c0 01             	add    eax,0x1
   1ec90:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:187
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/2)) + 1;
   1ec93:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1ec96:	c1 e8 08             	shr    eax,0x8
   1ec99:	8d 50 01             	lea    edx,[eax+0x1]
   1ec9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec9f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:188
        fs->currentsector.sector[22] = (uint8)((fs->fat_sectors >> 0) & 0xFF);
   1eca2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eca5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1eca8:	89 c2                	mov    edx,eax
   1ecaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecad:	88 50 5a             	mov    BYTE PTR [eax+0x5a],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:189
        fs->currentsector.sector[23] = (uint8)((fs->fat_sectors >> 8) & 0xFF);
   1ecb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecb3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1ecb6:	c1 e8 08             	shr    eax,0x8
   1ecb9:	89 c2                	mov    edx,eax
   1ecbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecbe:	88 50 5b             	mov    BYTE PTR [eax+0x5b],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:192

        // Sectors per track
        fs->currentsector.sector[24] = 0x00;
   1ecc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecc4:	c6 40 5c 00          	mov    BYTE PTR [eax+0x5c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:193
        fs->currentsector.sector[25] = 0x00;
   1ecc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eccb:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:196

        // Heads
        fs->currentsector.sector[26] = 0x00;
   1eccf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecd2:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:197
        fs->currentsector.sector[27] = 0x00;
   1ecd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecd9:	c6 40 5f 00          	mov    BYTE PTR [eax+0x5f],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:200

        // Hidden sectors
        fs->currentsector.sector[28] = 0x20;
   1ecdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ece0:	c6 40 60 20          	mov    BYTE PTR [eax+0x60],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:201
        fs->currentsector.sector[29] = 0x00;
   1ece4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ece7:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:202
        fs->currentsector.sector[30] = 0x00;
   1eceb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecee:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:203
        fs->currentsector.sector[31] = 0x00;
   1ecf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecf5:	c6 40 63 00          	mov    BYTE PTR [eax+0x63],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:206

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
   1ecf9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ecfc:	89 c2                	mov    edx,eax
   1ecfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed01:	88 50 64             	mov    BYTE PTR [eax+0x64],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:207
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
   1ed04:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ed07:	c1 e8 08             	shr    eax,0x8
   1ed0a:	89 c2                	mov    edx,eax
   1ed0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed0f:	88 50 65             	mov    BYTE PTR [eax+0x65],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:208
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
   1ed12:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ed15:	c1 e8 10             	shr    eax,0x10
   1ed18:	89 c2                	mov    edx,eax
   1ed1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed1d:	88 50 66             	mov    BYTE PTR [eax+0x66],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:209
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);
   1ed20:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ed23:	c1 e8 18             	shr    eax,0x18
   1ed26:	89 c2                	mov    edx,eax
   1ed28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed2b:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:212

        // Drive number
        fs->currentsector.sector[36] = 0x00;
   1ed2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed31:	c6 40 68 00          	mov    BYTE PTR [eax+0x68],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:215

        // Reserved
        fs->currentsector.sector[37] = 0x00;
   1ed35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed38:	c6 40 69 00          	mov    BYTE PTR [eax+0x69],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:218

        // Boot signature
        fs->currentsector.sector[38] = 0x29;
   1ed3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed3f:	c6 40 6a 29          	mov    BYTE PTR [eax+0x6a],0x29
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:221

        // Volume ID
        fs->currentsector.sector[39] = 0x12;
   1ed43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed46:	c6 40 6b 12          	mov    BYTE PTR [eax+0x6b],0x12
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:222
        fs->currentsector.sector[40] = 0x34;
   1ed4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed4d:	c6 40 6c 34          	mov    BYTE PTR [eax+0x6c],0x34
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:223
        fs->currentsector.sector[41] = 0x56;
   1ed51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed54:	c6 40 6d 56          	mov    BYTE PTR [eax+0x6d],0x56
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:224
        fs->currentsector.sector[42] = 0x78;
   1ed58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed5b:	c6 40 6e 78          	mov    BYTE PTR [eax+0x6e],0x78
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:227

        // Volume name
        for (i=0;i<11;i++)
   1ed5f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1ed66:	eb 41                	jmp    1eda9 <fatfs_create_boot_sector+0x29a>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:229
        {
            if (i < (int)strlen(name))
   1ed68:	83 ec 0c             	sub    esp,0xc
   1ed6b:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1ed6e:	e8 b9 8b 00 00       	call   2792c <strlen>
   1ed73:	83 c4 10             	add    esp,0x10
   1ed76:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1ed79:	7e 1c                	jle    1ed97 <fatfs_create_boot_sector+0x288>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:230
                fs->currentsector.sector[i+43] = name[i];
   1ed7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ed7e:	8d 50 2b             	lea    edx,[eax+0x2b]
   1ed81:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1ed84:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1ed87:	01 c8                	add    eax,ecx
   1ed89:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ed8c:	89 c1                	mov    ecx,eax
   1ed8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed91:	88 4c 10 44          	mov    BYTE PTR [eax+edx*1+0x44],cl
   1ed95:	eb 0e                	jmp    1eda5 <fatfs_create_boot_sector+0x296>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:232
            else
                fs->currentsector.sector[i+43] = ' ';
   1ed97:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ed9a:	8d 50 2b             	lea    edx,[eax+0x2b]
   1ed9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eda0:	c6 44 10 44 20       	mov    BYTE PTR [eax+edx*1+0x44],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:227 (discriminator 2)
        fs->currentsector.sector[40] = 0x34;
        fs->currentsector.sector[41] = 0x56;
        fs->currentsector.sector[42] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
   1eda5:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:227 (discriminator 1)
   1eda9:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   1edad:	7e b9                	jle    1ed68 <fatfs_create_boot_sector+0x259>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:236
            else
                fs->currentsector.sector[i+43] = ' ';
        }

        // File sys type
        fs->currentsector.sector[54] = 'F';
   1edaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edb2:	c6 40 7a 46          	mov    BYTE PTR [eax+0x7a],0x46
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:237
        fs->currentsector.sector[55] = 'A';
   1edb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edb9:	c6 40 7b 41          	mov    BYTE PTR [eax+0x7b],0x41
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:238
        fs->currentsector.sector[56] = 'T';
   1edbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edc0:	c6 40 7c 54          	mov    BYTE PTR [eax+0x7c],0x54
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:239
        fs->currentsector.sector[57] = '1';
   1edc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edc7:	c6 40 7d 31          	mov    BYTE PTR [eax+0x7d],0x31
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:240
        fs->currentsector.sector[58] = '6';
   1edcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edce:	c6 40 7e 36          	mov    BYTE PTR [eax+0x7e],0x36
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:241
        fs->currentsector.sector[59] = ' ';
   1edd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edd5:	c6 40 7f 20          	mov    BYTE PTR [eax+0x7f],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:242
        fs->currentsector.sector[60] = ' ';
   1edd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eddc:	c6 80 80 00 00 00 20 	mov    BYTE PTR [eax+0x80],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:243
        fs->currentsector.sector[61] = ' ';
   1ede3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ede6:	c6 80 81 00 00 00 20 	mov    BYTE PTR [eax+0x81],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:246

        // Signature
        fs->currentsector.sector[510] = 0x55;
   1eded:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edf0:	c6 80 42 02 00 00 55 	mov    BYTE PTR [eax+0x242],0x55
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:247
        fs->currentsector.sector[511] = 0xAA;
   1edf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edfa:	c6 80 43 02 00 00 aa 	mov    BYTE PTR [eax+0x243],0xaa
   1ee01:	e9 61 02 00 00       	jmp    1f067 <fatfs_create_boot_sector+0x558>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:253
    }
    // FAT32 BS Details
    else
    {
        // Count of sectors used by the FAT table (FAT16 only)
        fs->currentsector.sector[22] = 0;
   1ee06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee09:	c6 40 5a 00          	mov    BYTE PTR [eax+0x5a],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:254
        fs->currentsector.sector[23] = 0;
   1ee0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee10:	c6 40 5b 00          	mov    BYTE PTR [eax+0x5b],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:257

        // Sectors per track (default)
        fs->currentsector.sector[24] = 0x3F;
   1ee14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee17:	c6 40 5c 3f          	mov    BYTE PTR [eax+0x5c],0x3f
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:258
        fs->currentsector.sector[25] = 0x00;
   1ee1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee1e:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:261

        // Heads (default)
        fs->currentsector.sector[26] = 0xFF;
   1ee22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee25:	c6 40 5e ff          	mov    BYTE PTR [eax+0x5e],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:262
        fs->currentsector.sector[27] = 0x00;
   1ee29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee2c:	c6 40 5f 00          	mov    BYTE PTR [eax+0x5f],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:265

        // Hidden sectors
        fs->currentsector.sector[28] = 0x00;
   1ee30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee33:	c6 40 60 00          	mov    BYTE PTR [eax+0x60],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:266
        fs->currentsector.sector[29] = 0x00;
   1ee37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee3a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:267
        fs->currentsector.sector[30] = 0x00;
   1ee3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee41:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:268
        fs->currentsector.sector[31] = 0x00;
   1ee45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee48:	c6 40 63 00          	mov    BYTE PTR [eax+0x63],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:271

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
   1ee4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ee4f:	89 c2                	mov    edx,eax
   1ee51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee54:	88 50 64             	mov    BYTE PTR [eax+0x64],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:272
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
   1ee57:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ee5a:	c1 e8 08             	shr    eax,0x8
   1ee5d:	89 c2                	mov    edx,eax
   1ee5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee62:	88 50 65             	mov    BYTE PTR [eax+0x65],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:273
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
   1ee65:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ee68:	c1 e8 10             	shr    eax,0x10
   1ee6b:	89 c2                	mov    edx,eax
   1ee6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee70:	88 50 66             	mov    BYTE PTR [eax+0x66],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:274
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);
   1ee73:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ee76:	c1 e8 18             	shr    eax,0x18
   1ee79:	89 c2                	mov    edx,eax
   1ee7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee7e:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:276

        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
   1ee81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee84:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ee87:	0f b6 c8             	movzx  ecx,al
   1ee8a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ee8d:	ba 00 00 00 00       	mov    edx,0x0
   1ee92:	f7 f1                	div    ecx
   1ee94:	83 c0 01             	add    eax,0x1
   1ee97:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:277
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/4)) + 1;
   1ee9a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1ee9d:	c1 e8 07             	shr    eax,0x7
   1eea0:	8d 50 01             	lea    edx,[eax+0x1]
   1eea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eea6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:280

        // BPB_FATSz32
        fs->currentsector.sector[36] = (uint8)((fs->fat_sectors>>0)&0xFF);
   1eea9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eeac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1eeaf:	89 c2                	mov    edx,eax
   1eeb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eeb4:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:281
        fs->currentsector.sector[37] = (uint8)((fs->fat_sectors>>8)&0xFF);
   1eeb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eeba:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1eebd:	c1 e8 08             	shr    eax,0x8
   1eec0:	89 c2                	mov    edx,eax
   1eec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eec5:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:282
        fs->currentsector.sector[38] = (uint8)((fs->fat_sectors>>16)&0xFF);
   1eec8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eecb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1eece:	c1 e8 10             	shr    eax,0x10
   1eed1:	89 c2                	mov    edx,eax
   1eed3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eed6:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:283
        fs->currentsector.sector[39] = (uint8)((fs->fat_sectors>>24)&0xFF);
   1eed9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eedc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1eedf:	c1 e8 18             	shr    eax,0x18
   1eee2:	89 c2                	mov    edx,eax
   1eee4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eee7:	88 50 6b             	mov    BYTE PTR [eax+0x6b],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:286

        // BPB_ExtFlags
        fs->currentsector.sector[40] = 0;
   1eeea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eeed:	c6 40 6c 00          	mov    BYTE PTR [eax+0x6c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:287
        fs->currentsector.sector[41] = 0;
   1eef1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eef4:	c6 40 6d 00          	mov    BYTE PTR [eax+0x6d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:290

        // BPB_FSVer
        fs->currentsector.sector[42] = 0;
   1eef8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eefb:	c6 40 6e 00          	mov    BYTE PTR [eax+0x6e],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:291
        fs->currentsector.sector[43] = 0;
   1eeff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef02:	c6 40 6f 00          	mov    BYTE PTR [eax+0x6f],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:294

        // BPB_RootClus
        fs->currentsector.sector[44] = (uint8)((fs->rootdir_first_cluster>>0)&0xFF);
   1ef06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1ef0c:	89 c2                	mov    edx,eax
   1ef0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef11:	88 50 70             	mov    BYTE PTR [eax+0x70],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:295
        fs->currentsector.sector[45] = (uint8)((fs->rootdir_first_cluster>>8)&0xFF);
   1ef14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef17:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1ef1a:	c1 e8 08             	shr    eax,0x8
   1ef1d:	89 c2                	mov    edx,eax
   1ef1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef22:	88 50 71             	mov    BYTE PTR [eax+0x71],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:296
        fs->currentsector.sector[46] = (uint8)((fs->rootdir_first_cluster>>16)&0xFF);
   1ef25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef28:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1ef2b:	c1 e8 10             	shr    eax,0x10
   1ef2e:	89 c2                	mov    edx,eax
   1ef30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef33:	88 50 72             	mov    BYTE PTR [eax+0x72],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:297
        fs->currentsector.sector[47] = (uint8)((fs->rootdir_first_cluster>>24)&0xFF);
   1ef36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef39:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1ef3c:	c1 e8 18             	shr    eax,0x18
   1ef3f:	89 c2                	mov    edx,eax
   1ef41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef44:	88 50 73             	mov    BYTE PTR [eax+0x73],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:300

        // BPB_FSInfo
        fs->currentsector.sector[48] = (uint8)((fs->fs_info_sector>>0)&0xFF);
   1ef47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef4a:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   1ef4e:	89 c2                	mov    edx,eax
   1ef50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef53:	88 50 74             	mov    BYTE PTR [eax+0x74],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:301
        fs->currentsector.sector[49] = (uint8)((fs->fs_info_sector>>8)&0xFF);
   1ef56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef59:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   1ef5d:	66 c1 e8 08          	shr    ax,0x8
   1ef61:	89 c2                	mov    edx,eax
   1ef63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef66:	88 50 75             	mov    BYTE PTR [eax+0x75],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:304

        // BPB_BkBootSec
        fs->currentsector.sector[50] = 6;
   1ef69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef6c:	c6 40 76 06          	mov    BYTE PTR [eax+0x76],0x6
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:305
        fs->currentsector.sector[51] = 0;
   1ef70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef73:	c6 40 77 00          	mov    BYTE PTR [eax+0x77],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:308

        // Drive number
        fs->currentsector.sector[64] = 0x00;
   1ef77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef7a:	c6 80 84 00 00 00 00 	mov    BYTE PTR [eax+0x84],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:311

        // Boot signature
        fs->currentsector.sector[66] = 0x29;
   1ef81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef84:	c6 80 86 00 00 00 29 	mov    BYTE PTR [eax+0x86],0x29
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:314

        // Volume ID
        fs->currentsector.sector[67] = 0x12;
   1ef8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef8e:	c6 80 87 00 00 00 12 	mov    BYTE PTR [eax+0x87],0x12
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:315
        fs->currentsector.sector[68] = 0x34;
   1ef95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef98:	c6 80 88 00 00 00 34 	mov    BYTE PTR [eax+0x88],0x34
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:316
        fs->currentsector.sector[69] = 0x56;
   1ef9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efa2:	c6 80 89 00 00 00 56 	mov    BYTE PTR [eax+0x89],0x56
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:317
        fs->currentsector.sector[70] = 0x78;
   1efa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efac:	c6 80 8a 00 00 00 78 	mov    BYTE PTR [eax+0x8a],0x78
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:320

        // Volume name
        for (i=0;i<11;i++)
   1efb3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1efba:	eb 41                	jmp    1effd <fatfs_create_boot_sector+0x4ee>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:322
        {
            if (i < (int)strlen(name))
   1efbc:	83 ec 0c             	sub    esp,0xc
   1efbf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1efc2:	e8 65 89 00 00       	call   2792c <strlen>
   1efc7:	83 c4 10             	add    esp,0x10
   1efca:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1efcd:	7e 1c                	jle    1efeb <fatfs_create_boot_sector+0x4dc>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:323
                fs->currentsector.sector[i+71] = name[i];
   1efcf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1efd2:	8d 50 47             	lea    edx,[eax+0x47]
   1efd5:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1efd8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1efdb:	01 c8                	add    eax,ecx
   1efdd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1efe0:	89 c1                	mov    ecx,eax
   1efe2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efe5:	88 4c 10 44          	mov    BYTE PTR [eax+edx*1+0x44],cl
   1efe9:	eb 0e                	jmp    1eff9 <fatfs_create_boot_sector+0x4ea>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:325
            else
                fs->currentsector.sector[i+71] = ' ';
   1efeb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1efee:	8d 50 47             	lea    edx,[eax+0x47]
   1eff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eff4:	c6 44 10 44 20       	mov    BYTE PTR [eax+edx*1+0x44],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:320 (discriminator 2)
        fs->currentsector.sector[68] = 0x34;
        fs->currentsector.sector[69] = 0x56;
        fs->currentsector.sector[70] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
   1eff9:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:320 (discriminator 1)
   1effd:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   1f001:	7e b9                	jle    1efbc <fatfs_create_boot_sector+0x4ad>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:329
            else
                fs->currentsector.sector[i+71] = ' ';
        }

        // File sys type
        fs->currentsector.sector[82] = 'F';
   1f003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f006:	c6 80 96 00 00 00 46 	mov    BYTE PTR [eax+0x96],0x46
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:330
        fs->currentsector.sector[83] = 'A';
   1f00d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f010:	c6 80 97 00 00 00 41 	mov    BYTE PTR [eax+0x97],0x41
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:331
        fs->currentsector.sector[84] = 'T';
   1f017:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f01a:	c6 80 98 00 00 00 54 	mov    BYTE PTR [eax+0x98],0x54
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:332
        fs->currentsector.sector[85] = '3';
   1f021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f024:	c6 80 99 00 00 00 33 	mov    BYTE PTR [eax+0x99],0x33
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:333
        fs->currentsector.sector[86] = '2';
   1f02b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f02e:	c6 80 9a 00 00 00 32 	mov    BYTE PTR [eax+0x9a],0x32
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:334
        fs->currentsector.sector[87] = ' ';
   1f035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f038:	c6 80 9b 00 00 00 20 	mov    BYTE PTR [eax+0x9b],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:335
        fs->currentsector.sector[88] = ' ';
   1f03f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f042:	c6 80 9c 00 00 00 20 	mov    BYTE PTR [eax+0x9c],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:336
        fs->currentsector.sector[89] = ' ';
   1f049:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f04c:	c6 80 9d 00 00 00 20 	mov    BYTE PTR [eax+0x9d],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:339

        // Signature
        fs->currentsector.sector[510] = 0x55;
   1f053:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f056:	c6 80 42 02 00 00 55 	mov    BYTE PTR [eax+0x242],0x55
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:340
        fs->currentsector.sector[511] = 0xAA;
   1f05d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f060:	c6 80 43 02 00 00 aa 	mov    BYTE PTR [eax+0x243],0xaa
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:343
    }

    if (fs->disk_io.write_media(boot_sector_lba, fs->currentsector.sector, 1))
   1f067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f06a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1f06d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f070:	83 c2 44             	add    edx,0x44
   1f073:	83 ec 04             	sub    esp,0x4
   1f076:	6a 01                	push   0x1
   1f078:	52                   	push   edx
   1f079:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f07c:	ff d0                	call   eax
   1f07e:	83 c4 10             	add    esp,0x10
   1f081:	85 c0                	test   eax,eax
   1f083:	74 07                	je     1f08c <fatfs_create_boot_sector+0x57d>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:344
        return 1;
   1f085:	b8 01 00 00 00       	mov    eax,0x1
   1f08a:	eb 05                	jmp    1f091 <fatfs_create_boot_sector+0x582>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:346
    else
        return 0;
   1f08c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:347
}
   1f091:	c9                   	leave  
   1f092:	c3                   	ret    

0001f093 <fatfs_create_fsinfo_sector>:
fatfs_create_fsinfo_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:352
//-----------------------------------------------------------------------------
// fatfs_create_fsinfo_sector: Create the FSInfo sector (FAT32)
//-----------------------------------------------------------------------------
static int fatfs_create_fsinfo_sector(struct fatfs *fs, uint32 sector_lba)
{
   1f093:	55                   	push   ebp
   1f094:	89 e5                	mov    ebp,esp
   1f096:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:354
    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1f099:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f09c:	83 c0 44             	add    eax,0x44
   1f09f:	83 ec 04             	sub    esp,0x4
   1f0a2:	68 00 02 00 00       	push   0x200
   1f0a7:	6a 00                	push   0x0
   1f0a9:	50                   	push   eax
   1f0aa:	e8 5a 65 00 00       	call   25609 <memset>
   1f0af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:357

    // FSI_LeadSig
    fs->currentsector.sector[0] = 0x52;
   1f0b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0b5:	c6 40 44 52          	mov    BYTE PTR [eax+0x44],0x52
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:358
    fs->currentsector.sector[1] = 0x52;
   1f0b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0bc:	c6 40 45 52          	mov    BYTE PTR [eax+0x45],0x52
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:359
    fs->currentsector.sector[2] = 0x61;
   1f0c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0c3:	c6 40 46 61          	mov    BYTE PTR [eax+0x46],0x61
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:360
    fs->currentsector.sector[3] = 0x41;
   1f0c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0ca:	c6 40 47 41          	mov    BYTE PTR [eax+0x47],0x41
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:363

    // FSI_StrucSig
    fs->currentsector.sector[484] = 0x72;
   1f0ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0d1:	c6 80 28 02 00 00 72 	mov    BYTE PTR [eax+0x228],0x72
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:364
    fs->currentsector.sector[485] = 0x72;
   1f0d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0db:	c6 80 29 02 00 00 72 	mov    BYTE PTR [eax+0x229],0x72
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:365
    fs->currentsector.sector[486] = 0x41;
   1f0e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0e5:	c6 80 2a 02 00 00 41 	mov    BYTE PTR [eax+0x22a],0x41
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:366
    fs->currentsector.sector[487] = 0x61;
   1f0ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0ef:	c6 80 2b 02 00 00 61 	mov    BYTE PTR [eax+0x22b],0x61
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:369

    // FSI_Free_Count
    fs->currentsector.sector[488] = 0xFF;
   1f0f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0f9:	c6 80 2c 02 00 00 ff 	mov    BYTE PTR [eax+0x22c],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:370
    fs->currentsector.sector[489] = 0xFF;
   1f100:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f103:	c6 80 2d 02 00 00 ff 	mov    BYTE PTR [eax+0x22d],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:371
    fs->currentsector.sector[490] = 0xFF;
   1f10a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f10d:	c6 80 2e 02 00 00 ff 	mov    BYTE PTR [eax+0x22e],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:372
    fs->currentsector.sector[491] = 0xFF;
   1f114:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f117:	c6 80 2f 02 00 00 ff 	mov    BYTE PTR [eax+0x22f],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:375

    // FSI_Nxt_Free
    fs->currentsector.sector[492] = 0xFF;
   1f11e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f121:	c6 80 30 02 00 00 ff 	mov    BYTE PTR [eax+0x230],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:376
    fs->currentsector.sector[493] = 0xFF;
   1f128:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f12b:	c6 80 31 02 00 00 ff 	mov    BYTE PTR [eax+0x231],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:377
    fs->currentsector.sector[494] = 0xFF;
   1f132:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f135:	c6 80 32 02 00 00 ff 	mov    BYTE PTR [eax+0x232],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:378
    fs->currentsector.sector[495] = 0xFF;
   1f13c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f13f:	c6 80 33 02 00 00 ff 	mov    BYTE PTR [eax+0x233],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:381

    // Signature
    fs->currentsector.sector[510] = 0x55;
   1f146:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f149:	c6 80 42 02 00 00 55 	mov    BYTE PTR [eax+0x242],0x55
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:382
    fs->currentsector.sector[511] = 0xAA;
   1f150:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f153:	c6 80 43 02 00 00 aa 	mov    BYTE PTR [eax+0x243],0xaa
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:384

    if (fs->disk_io.write_media(sector_lba, fs->currentsector.sector, 1))
   1f15a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f15d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1f160:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f163:	83 c2 44             	add    edx,0x44
   1f166:	83 ec 04             	sub    esp,0x4
   1f169:	6a 01                	push   0x1
   1f16b:	52                   	push   edx
   1f16c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f16f:	ff d0                	call   eax
   1f171:	83 c4 10             	add    esp,0x10
   1f174:	85 c0                	test   eax,eax
   1f176:	74 07                	je     1f17f <fatfs_create_fsinfo_sector+0xec>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:385
        return 1;
   1f178:	b8 01 00 00 00       	mov    eax,0x1
   1f17d:	eb 05                	jmp    1f184 <fatfs_create_fsinfo_sector+0xf1>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:387
    else
        return 0;
   1f17f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:388
}
   1f184:	c9                   	leave  
   1f185:	c3                   	ret    

0001f186 <fatfs_erase_fat>:
fatfs_erase_fat():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:393
//-----------------------------------------------------------------------------
// fatfs_erase_fat: Erase FAT table using fs details in fs struct
//-----------------------------------------------------------------------------
static int fatfs_erase_fat(struct fatfs *fs, int is_fat32)
{
   1f186:	55                   	push   ebp
   1f187:	89 e5                	mov    ebp,esp
   1f189:	53                   	push   ebx
   1f18a:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:397
    uint32 i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1f18d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f190:	83 c0 44             	add    eax,0x44
   1f193:	83 ec 04             	sub    esp,0x4
   1f196:	68 00 02 00 00       	push   0x200
   1f19b:	6a 00                	push   0x0
   1f19d:	50                   	push   eax
   1f19e:	e8 66 64 00 00       	call   25609 <memset>
   1f1a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:400

    // Initialise default allocate / reserved clusters
    if (!is_fat32)
   1f1a6:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1f1aa:	75 1e                	jne    1f1ca <fatfs_erase_fat+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:402
    {
        SET_16BIT_WORD(fs->currentsector.sector, 0, 0xFFF8);
   1f1ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f1af:	c6 40 44 f8          	mov    BYTE PTR [eax+0x44],0xf8
   1f1b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f1b6:	c6 40 45 ff          	mov    BYTE PTR [eax+0x45],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:403
        SET_16BIT_WORD(fs->currentsector.sector, 2, 0xFFFF);
   1f1ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f1bd:	c6 40 46 ff          	mov    BYTE PTR [eax+0x46],0xff
   1f1c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f1c4:	c6 40 47 ff          	mov    BYTE PTR [eax+0x47],0xff
   1f1c8:	eb 54                	jmp    1f21e <fatfs_erase_fat+0x98>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:407
    }
    else
    {
        SET_32BIT_WORD(fs->currentsector.sector, 0, 0x0FFFFFF8);
   1f1ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f1cd:	c6 40 44 f8          	mov    BYTE PTR [eax+0x44],0xf8
   1f1d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f1d4:	c6 40 45 ff          	mov    BYTE PTR [eax+0x45],0xff
   1f1d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f1db:	c6 40 46 ff          	mov    BYTE PTR [eax+0x46],0xff
   1f1df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f1e2:	c6 40 47 0f          	mov    BYTE PTR [eax+0x47],0xf
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:408
        SET_32BIT_WORD(fs->currentsector.sector, 4, 0xFFFFFFFF);
   1f1e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f1e9:	c6 40 48 ff          	mov    BYTE PTR [eax+0x48],0xff
   1f1ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f1f0:	c6 40 49 ff          	mov    BYTE PTR [eax+0x49],0xff
   1f1f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f1f7:	c6 40 4a ff          	mov    BYTE PTR [eax+0x4a],0xff
   1f1fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f1fe:	c6 40 4b ff          	mov    BYTE PTR [eax+0x4b],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:409
        SET_32BIT_WORD(fs->currentsector.sector, 8, 0x0FFFFFFF);
   1f202:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f205:	c6 40 4c ff          	mov    BYTE PTR [eax+0x4c],0xff
   1f209:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f20c:	c6 40 4d ff          	mov    BYTE PTR [eax+0x4d],0xff
   1f210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f213:	c6 40 4e ff          	mov    BYTE PTR [eax+0x4e],0xff
   1f217:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f21a:	c6 40 4f 0f          	mov    BYTE PTR [eax+0x4f],0xf
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:412
    }

    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
   1f21e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f221:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1f224:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f227:	8d 4a 44             	lea    ecx,[edx+0x44]
   1f22a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f22d:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
   1f230:	83 ec 04             	sub    esp,0x4
   1f233:	6a 01                	push   0x1
   1f235:	51                   	push   ecx
   1f236:	52                   	push   edx
   1f237:	ff d0                	call   eax
   1f239:	83 c4 10             	add    esp,0x10
   1f23c:	85 c0                	test   eax,eax
   1f23e:	75 07                	jne    1f247 <fatfs_erase_fat+0xc1>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:413
        return 0;
   1f240:	b8 00 00 00 00       	mov    eax,0x0
   1f245:	eb 71                	jmp    1f2b8 <fatfs_erase_fat+0x132>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:416

    // Zero remaining FAT sectors
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1f247:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f24a:	83 c0 44             	add    eax,0x44
   1f24d:	83 ec 04             	sub    esp,0x4
   1f250:	68 00 02 00 00       	push   0x200
   1f255:	6a 00                	push   0x0
   1f257:	50                   	push   eax
   1f258:	e8 ac 63 00 00       	call   25609 <memset>
   1f25d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:417
    for (i=1;i<fs->fat_sectors*fs->num_of_fats;i++)
   1f260:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
   1f267:	eb 32                	jmp    1f29b <fatfs_erase_fat+0x115>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:418
        if (!fs->disk_io.write_media(fs->fat_begin_lba + i, fs->currentsector.sector, 1))
   1f269:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f26c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1f26f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f272:	8d 4a 44             	lea    ecx,[edx+0x44]
   1f275:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f278:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
   1f27b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f27e:	01 da                	add    edx,ebx
   1f280:	83 ec 04             	sub    esp,0x4
   1f283:	6a 01                	push   0x1
   1f285:	51                   	push   ecx
   1f286:	52                   	push   edx
   1f287:	ff d0                	call   eax
   1f289:	83 c4 10             	add    esp,0x10
   1f28c:	85 c0                	test   eax,eax
   1f28e:	75 07                	jne    1f297 <fatfs_erase_fat+0x111>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:419
            return 0;
   1f290:	b8 00 00 00 00       	mov    eax,0x0
   1f295:	eb 21                	jmp    1f2b8 <fatfs_erase_fat+0x132>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:417 (discriminator 2)
    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
        return 0;

    // Zero remaining FAT sectors
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
    for (i=1;i<fs->fat_sectors*fs->num_of_fats;i++)
   1f297:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:417 (discriminator 1)
   1f29b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f29e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
   1f2a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f2a4:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1f2a8:	0f b6 c0             	movzx  eax,al
   1f2ab:	0f af c2             	imul   eax,edx
   1f2ae:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1f2b1:	77 b6                	ja     1f269 <fatfs_erase_fat+0xe3>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:421
        if (!fs->disk_io.write_media(fs->fat_begin_lba + i, fs->currentsector.sector, 1))
            return 0;

    return 1;
   1f2b3:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:422
}
   1f2b8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1f2bb:	c9                   	leave  
   1f2bc:	c3                   	ret    

0001f2bd <fatfs_format_fat16>:
fatfs_format_fat16():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:427
//-----------------------------------------------------------------------------
// fatfs_format_fat16: Format a FAT16 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat16(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   1f2bd:	55                   	push   ebp
   1f2be:	89 e5                	mov    ebp,esp
   1f2c0:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:428
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
   1f2c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f2c6:	c7 80 44 02 00 00 ff 	mov    DWORD PTR [eax+0x244],0xffffffff
   1f2cd:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:429
    fs->currentsector.dirty = 0;
   1f2d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f2d3:	c7 80 48 02 00 00 00 	mov    DWORD PTR [eax+0x248],0x0
   1f2da:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:431

    fs->next_free_cluster = 0; // Invalid
   1f2dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f2e0:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:433

    fatfs_fat_init(fs);
   1f2e7:	83 ec 0c             	sub    esp,0xc
   1f2ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f2ed:	e8 3e 15 00 00       	call   20830 <fatfs_fat_init>
   1f2f2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:436

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
   1f2f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f2f8:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1f2fb:	85 c0                	test   eax,eax
   1f2fd:	74 0a                	je     1f309 <fatfs_format_fat16+0x4c>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:436 (discriminator 1)
   1f2ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f302:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1f305:	85 c0                	test   eax,eax
   1f307:	75 0a                	jne    1f313 <fatfs_format_fat16+0x56>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:437
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1f309:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1f30e:	e9 29 01 00 00       	jmp    1f43c <fatfs_format_fat16+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:440

    // Volume is FAT16
    fs->fat_type = FAT_TYPE_16;
   1f313:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f316:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:443

    // Not valid for FAT16
    fs->fs_info_sector = 0;
   1f31d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f320:	66 c7 40 18 00 00    	mov    WORD PTR [eax+0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:444
    fs->rootdir_first_cluster = 0;
   1f326:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f329:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:448

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
   1f330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f333:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:449
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 0))
   1f33a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f33d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   1f340:	83 ec 0c             	sub    esp,0xc
   1f343:	6a 00                	push   0x0
   1f345:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1f348:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f34b:	50                   	push   eax
   1f34c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f34f:	e8 bb f7 ff ff       	call   1eb0f <fatfs_create_boot_sector>
   1f354:	83 c4 20             	add    esp,0x20
   1f357:	85 c0                	test   eax,eax
   1f359:	75 0a                	jne    1f365 <fatfs_format_fat16+0xa8>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:450
        return 0;
   1f35b:	b8 00 00 00 00       	mov    eax,0x0
   1f360:	e9 d7 00 00 00       	jmp    1f43c <fatfs_format_fat16+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:453

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = fs->reserved_sectors + (fs->num_of_fats * fs->fat_sectors);
   1f365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f368:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1f36c:	0f b7 d0             	movzx  edx,ax
   1f36f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f372:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1f376:	0f b6 c8             	movzx  ecx,al
   1f379:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f37c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1f37f:	0f af c1             	imul   eax,ecx
   1f382:	01 c2                	add    edx,eax
   1f384:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f387:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:454
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
   1f38a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f38d:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1f391:	0f b7 c0             	movzx  eax,ax
   1f394:	c1 e0 05             	shl    eax,0x5
   1f397:	05 ff 01 00 00       	add    eax,0x1ff
   1f39c:	8d 90 ff 01 00 00    	lea    edx,[eax+0x1ff]
   1f3a2:	85 c0                	test   eax,eax
   1f3a4:	0f 48 c2             	cmovs  eax,edx
   1f3a7:	c1 f8 09             	sar    eax,0x9
   1f3aa:	89 c2                	mov    edx,eax
   1f3ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3af:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:457

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
   1f3b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3b5:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1f3b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3bb:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1f3bf:	0f b7 c0             	movzx  eax,ax
   1f3c2:	01 c2                	add    edx,eax
   1f3c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3c7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:460

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);
   1f3ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3cd:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   1f3d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3d3:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1f3d7:	0f b6 c8             	movzx  ecx,al
   1f3da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3dd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1f3e0:	0f af c1             	imul   eax,ecx
   1f3e3:	01 c2                	add    edx,eax
   1f3e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3e8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:463

    // Initialise FAT sectors
    if (!fatfs_erase_fat(fs, 0))
   1f3eb:	83 ec 08             	sub    esp,0x8
   1f3ee:	6a 00                	push   0x0
   1f3f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f3f3:	e8 8e fd ff ff       	call   1f186 <fatfs_erase_fat>
   1f3f8:	83 c4 10             	add    esp,0x10
   1f3fb:	85 c0                	test   eax,eax
   1f3fd:	75 07                	jne    1f406 <fatfs_format_fat16+0x149>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:464
        return 0;
   1f3ff:	b8 00 00 00 00       	mov    eax,0x0
   1f404:	eb 36                	jmp    1f43c <fatfs_format_fat16+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:467

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fs->lba_begin + fs->rootdir_first_sector, fs->rootdir_sectors))
   1f406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f409:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1f40c:	89 c1                	mov    ecx,eax
   1f40e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f411:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1f414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f417:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1f41a:	01 d0                	add    eax,edx
   1f41c:	83 ec 04             	sub    esp,0x4
   1f41f:	51                   	push   ecx
   1f420:	50                   	push   eax
   1f421:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f424:	e8 7c f6 ff ff       	call   1eaa5 <fatfs_erase_sectors>
   1f429:	83 c4 10             	add    esp,0x10
   1f42c:	85 c0                	test   eax,eax
   1f42e:	75 07                	jne    1f437 <fatfs_format_fat16+0x17a>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:468
        return 0;
   1f430:	b8 00 00 00 00       	mov    eax,0x0
   1f435:	eb 05                	jmp    1f43c <fatfs_format_fat16+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:470

    return 1;
   1f437:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:471
}
   1f43c:	c9                   	leave  
   1f43d:	c3                   	ret    

0001f43e <fatfs_format_fat32>:
fatfs_format_fat32():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:476
//-----------------------------------------------------------------------------
// fatfs_format_fat32: Format a FAT32 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat32(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   1f43e:	55                   	push   ebp
   1f43f:	89 e5                	mov    ebp,esp
   1f441:	53                   	push   ebx
   1f442:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:477
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
   1f445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f448:	c7 80 44 02 00 00 ff 	mov    DWORD PTR [eax+0x244],0xffffffff
   1f44f:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:478
    fs->currentsector.dirty = 0;
   1f452:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f455:	c7 80 48 02 00 00 00 	mov    DWORD PTR [eax+0x248],0x0
   1f45c:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:480

    fs->next_free_cluster = 0; // Invalid
   1f45f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f462:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:482

    fatfs_fat_init(fs);
   1f469:	83 ec 0c             	sub    esp,0xc
   1f46c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f46f:	e8 bc 13 00 00       	call   20830 <fatfs_fat_init>
   1f474:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:485

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
   1f477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f47a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1f47d:	85 c0                	test   eax,eax
   1f47f:	74 0a                	je     1f48b <fatfs_format_fat32+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:485 (discriminator 1)
   1f481:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f484:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1f487:	85 c0                	test   eax,eax
   1f489:	75 0a                	jne    1f495 <fatfs_format_fat32+0x57>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:486
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1f48b:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1f490:	e9 08 01 00 00       	jmp    1f59d <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:489

    // Volume is FAT32
    fs->fat_type = FAT_TYPE_32;
   1f495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f498:	c7 40 30 01 00 00 00 	mov    DWORD PTR [eax+0x30],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:492

    // Basic defaults for normal FAT32 partitions
    fs->fs_info_sector = 1;
   1f49f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4a2:	66 c7 40 18 01 00    	mov    WORD PTR [eax+0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:493
    fs->rootdir_first_cluster = 2;
   1f4a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4ab:	c7 40 08 02 00 00 00 	mov    DWORD PTR [eax+0x8],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:497

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
   1f4b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4b5:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:498
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 1))
   1f4bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4bf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   1f4c2:	83 ec 0c             	sub    esp,0xc
   1f4c5:	6a 01                	push   0x1
   1f4c7:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1f4ca:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f4cd:	50                   	push   eax
   1f4ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f4d1:	e8 39 f6 ff ff       	call   1eb0f <fatfs_create_boot_sector>
   1f4d6:	83 c4 20             	add    esp,0x20
   1f4d9:	85 c0                	test   eax,eax
   1f4db:	75 0a                	jne    1f4e7 <fatfs_format_fat32+0xa9>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:499
        return 0;
   1f4dd:	b8 00 00 00 00       	mov    eax,0x0
   1f4e2:	e9 b6 00 00 00       	jmp    1f59d <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:502

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
   1f4e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4ea:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1f4ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4f0:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1f4f4:	0f b7 c0             	movzx  eax,ax
   1f4f7:	01 c2                	add    edx,eax
   1f4f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4fc:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:505

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);
   1f4ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f502:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   1f505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f508:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1f50c:	0f b6 c8             	movzx  ecx,al
   1f50f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f512:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1f515:	0f af c1             	imul   eax,ecx
   1f518:	01 c2                	add    edx,eax
   1f51a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f51d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:508

    // Initialise FSInfo sector
    if (!fatfs_create_fsinfo_sector(fs, fs->fs_info_sector))
   1f520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f523:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   1f527:	0f b7 c0             	movzx  eax,ax
   1f52a:	83 ec 08             	sub    esp,0x8
   1f52d:	50                   	push   eax
   1f52e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f531:	e8 5d fb ff ff       	call   1f093 <fatfs_create_fsinfo_sector>
   1f536:	83 c4 10             	add    esp,0x10
   1f539:	85 c0                	test   eax,eax
   1f53b:	75 07                	jne    1f544 <fatfs_format_fat32+0x106>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:509
        return 0;
   1f53d:	b8 00 00 00 00       	mov    eax,0x0
   1f542:	eb 59                	jmp    1f59d <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:512

    // Initialise FAT sectors
    if (!fatfs_erase_fat(fs, 1))
   1f544:	83 ec 08             	sub    esp,0x8
   1f547:	6a 01                	push   0x1
   1f549:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f54c:	e8 35 fc ff ff       	call   1f186 <fatfs_erase_fat>
   1f551:	83 c4 10             	add    esp,0x10
   1f554:	85 c0                	test   eax,eax
   1f556:	75 07                	jne    1f55f <fatfs_format_fat32+0x121>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:513
        return 0;
   1f558:	b8 00 00 00 00       	mov    eax,0x0
   1f55d:	eb 3e                	jmp    1f59d <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:516

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fatfs_lba_of_cluster(fs, fs->rootdir_first_cluster), fs->sectors_per_cluster))
   1f55f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f562:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f565:	0f b6 d8             	movzx  ebx,al
   1f568:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f56b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1f56e:	83 ec 08             	sub    esp,0x8
   1f571:	50                   	push   eax
   1f572:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f575:	e8 0e c1 ff ff       	call   1b688 <fatfs_lba_of_cluster>
   1f57a:	83 c4 10             	add    esp,0x10
   1f57d:	83 ec 04             	sub    esp,0x4
   1f580:	53                   	push   ebx
   1f581:	50                   	push   eax
   1f582:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f585:	e8 1b f5 ff ff       	call   1eaa5 <fatfs_erase_sectors>
   1f58a:	83 c4 10             	add    esp,0x10
   1f58d:	85 c0                	test   eax,eax
   1f58f:	75 07                	jne    1f598 <fatfs_format_fat32+0x15a>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:517
        return 0;
   1f591:	b8 00 00 00 00       	mov    eax,0x0
   1f596:	eb 05                	jmp    1f59d <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:519

    return 1;
   1f598:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:520
}
   1f59d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1f5a0:	c9                   	leave  
   1f5a1:	c3                   	ret    

0001f5a2 <fatfs_format>:
fatfs_format():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:525
//-----------------------------------------------------------------------------
// fatfs_format: Format a partition with either FAT16 or FAT32 based on size
//-----------------------------------------------------------------------------
int fatfs_format(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   1f5a2:	55                   	push   ebp
   1f5a3:	89 e5                	mov    ebp,esp
   1f5a5:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:527
    // 2GB - 32K limit for safe behaviour for FAT16
    if (volume_sectors <= 4194304)
   1f5a8:	81 7d 0c 00 00 40 00 	cmp    DWORD PTR [ebp+0xc],0x400000
   1f5af:	77 16                	ja     1f5c7 <fatfs_format+0x25>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:528
        return fatfs_format_fat16(fs, volume_sectors, name);
   1f5b1:	83 ec 04             	sub    esp,0x4
   1f5b4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1f5b7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f5ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f5bd:	e8 fb fc ff ff       	call   1f2bd <fatfs_format_fat16>
   1f5c2:	83 c4 10             	add    esp,0x10
   1f5c5:	eb 14                	jmp    1f5db <fatfs_format+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:530
    else
        return fatfs_format_fat32(fs, volume_sectors, name);
   1f5c7:	83 ec 04             	sub    esp,0x4
   1f5ca:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1f5cd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f5d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f5d3:	e8 66 fe ff ff       	call   1f43e <fatfs_format_fat32>
   1f5d8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:531
}
   1f5db:	c9                   	leave  
   1f5dc:	c3                   	ret    
   1f5dd:	66 90                	xchg   ax,ax
   1f5df:	90                   	nop

0001f5e0 <fatfs_lfn_cache_init>:
fatfs_lfn_cache_init():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:40

//-----------------------------------------------------------------------------
// fatfs_lfn_cache_init: Clear long file name cache
//-----------------------------------------------------------------------------
void fatfs_lfn_cache_init(struct lfn_cache *lfn, int wipeTable)
{
   1f5e0:	55                   	push   ebp
   1f5e1:	89 e5                	mov    ebp,esp
   1f5e3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:41
    int i = 0;
   1f5e6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:43

    lfn->no_of_strings = 0;
   1f5ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f5f0:	c6 80 05 01 00 00 00 	mov    BYTE PTR [eax+0x105],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:48

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
   1f5f7:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1f5fb:	74 36                	je     1f633 <fatfs_lfn_cache_init+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:49
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
   1f5fd:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1f604:	eb 27                	jmp    1f62d <fatfs_lfn_cache_init+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:50 (discriminator 3)
            memset(lfn->String[i], 0x00, MAX_LFN_ENTRY_LENGTH);
   1f606:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f609:	89 d0                	mov    eax,edx
   1f60b:	01 c0                	add    eax,eax
   1f60d:	01 d0                	add    eax,edx
   1f60f:	c1 e0 02             	shl    eax,0x2
   1f612:	01 d0                	add    eax,edx
   1f614:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f617:	01 d0                	add    eax,edx
   1f619:	83 ec 04             	sub    esp,0x4
   1f61c:	6a 0d                	push   0xd
   1f61e:	6a 00                	push   0x0
   1f620:	50                   	push   eax
   1f621:	e8 e3 5f 00 00       	call   25609 <memset>
   1f626:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:49 (discriminator 3)

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
   1f629:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:49 (discriminator 1)
   1f62d:	83 7d f4 13          	cmp    DWORD PTR [ebp-0xc],0x13
   1f631:	7e d3                	jle    1f606 <fatfs_lfn_cache_init+0x26>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:52
            memset(lfn->String[i], 0x00, MAX_LFN_ENTRY_LENGTH);
#endif
}
   1f633:	90                   	nop
   1f634:	c9                   	leave  
   1f635:	c3                   	ret    

0001f636 <fatfs_lfn_cache_entry>:
fatfs_lfn_cache_entry():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:59
// fatfs_lfn_cache_entry - Function extracts long file name text from sector
// at a specific offset
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_lfn_cache_entry(struct lfn_cache *lfn, uint8 *entryBuffer)
{
   1f636:	55                   	push   ebp
   1f637:	89 e5                	mov    ebp,esp
   1f639:	53                   	push   ebx
   1f63a:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:61
    uint8 LFNIndex, i;
    LFNIndex = entryBuffer[0] & 0x1F;
   1f63d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f640:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f643:	83 e0 1f             	and    eax,0x1f
   1f646:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:64

    // Limit file name to cache size!
    if (LFNIndex > MAX_LONGFILENAME_ENTRIES)
   1f649:	80 7d fa 14          	cmp    BYTE PTR [ebp-0x6],0x14
   1f64d:	0f 87 45 02 00 00    	ja     1f898 <fatfs_lfn_cache_entry+0x262>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:68
        return ;

    // This is an error condition
    if (LFNIndex == 0)
   1f653:	80 7d fa 00          	cmp    BYTE PTR [ebp-0x6],0x0
   1f657:	0f 84 3e 02 00 00    	je     1f89b <fatfs_lfn_cache_entry+0x265>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:71
        return ;

    if (lfn->no_of_strings == 0)
   1f65d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f660:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f667:	84 c0                	test   al,al
   1f669:	75 0d                	jne    1f678 <fatfs_lfn_cache_entry+0x42>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:72
        lfn->no_of_strings = LFNIndex;
   1f66b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f66e:	0f b6 55 fa          	movzx  edx,BYTE PTR [ebp-0x6]
   1f672:	88 90 05 01 00 00    	mov    BYTE PTR [eax+0x105],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:74

    lfn->String[LFNIndex-1][0] = entryBuffer[1];
   1f678:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f67c:	8d 50 ff             	lea    edx,[eax-0x1]
   1f67f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f682:	0f b6 48 01          	movzx  ecx,BYTE PTR [eax+0x1]
   1f686:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f689:	89 d0                	mov    eax,edx
   1f68b:	01 c0                	add    eax,eax
   1f68d:	01 d0                	add    eax,edx
   1f68f:	c1 e0 02             	shl    eax,0x2
   1f692:	01 d0                	add    eax,edx
   1f694:	01 d8                	add    eax,ebx
   1f696:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:75
    lfn->String[LFNIndex-1][1] = entryBuffer[3];
   1f698:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f69c:	8d 50 ff             	lea    edx,[eax-0x1]
   1f69f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f6a2:	0f b6 48 03          	movzx  ecx,BYTE PTR [eax+0x3]
   1f6a6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f6a9:	89 d0                	mov    eax,edx
   1f6ab:	01 c0                	add    eax,eax
   1f6ad:	01 d0                	add    eax,edx
   1f6af:	c1 e0 02             	shl    eax,0x2
   1f6b2:	01 d0                	add    eax,edx
   1f6b4:	01 d8                	add    eax,ebx
   1f6b6:	83 c0 01             	add    eax,0x1
   1f6b9:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:76
    lfn->String[LFNIndex-1][2] = entryBuffer[5];
   1f6bb:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f6bf:	8d 50 ff             	lea    edx,[eax-0x1]
   1f6c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f6c5:	0f b6 48 05          	movzx  ecx,BYTE PTR [eax+0x5]
   1f6c9:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f6cc:	89 d0                	mov    eax,edx
   1f6ce:	01 c0                	add    eax,eax
   1f6d0:	01 d0                	add    eax,edx
   1f6d2:	c1 e0 02             	shl    eax,0x2
   1f6d5:	01 d0                	add    eax,edx
   1f6d7:	01 d8                	add    eax,ebx
   1f6d9:	83 c0 02             	add    eax,0x2
   1f6dc:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:77
    lfn->String[LFNIndex-1][3] = entryBuffer[7];
   1f6de:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f6e2:	8d 50 ff             	lea    edx,[eax-0x1]
   1f6e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f6e8:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
   1f6ec:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f6ef:	89 d0                	mov    eax,edx
   1f6f1:	01 c0                	add    eax,eax
   1f6f3:	01 d0                	add    eax,edx
   1f6f5:	c1 e0 02             	shl    eax,0x2
   1f6f8:	01 d0                	add    eax,edx
   1f6fa:	01 d8                	add    eax,ebx
   1f6fc:	83 c0 03             	add    eax,0x3
   1f6ff:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:78
    lfn->String[LFNIndex-1][4] = entryBuffer[9];
   1f701:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f705:	8d 50 ff             	lea    edx,[eax-0x1]
   1f708:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f70b:	0f b6 48 09          	movzx  ecx,BYTE PTR [eax+0x9]
   1f70f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f712:	89 d0                	mov    eax,edx
   1f714:	01 c0                	add    eax,eax
   1f716:	01 d0                	add    eax,edx
   1f718:	c1 e0 02             	shl    eax,0x2
   1f71b:	01 d0                	add    eax,edx
   1f71d:	01 d8                	add    eax,ebx
   1f71f:	83 c0 04             	add    eax,0x4
   1f722:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:79
    lfn->String[LFNIndex-1][5] = entryBuffer[0x0E];
   1f724:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f728:	8d 50 ff             	lea    edx,[eax-0x1]
   1f72b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f72e:	0f b6 48 0e          	movzx  ecx,BYTE PTR [eax+0xe]
   1f732:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f735:	89 d0                	mov    eax,edx
   1f737:	01 c0                	add    eax,eax
   1f739:	01 d0                	add    eax,edx
   1f73b:	c1 e0 02             	shl    eax,0x2
   1f73e:	01 d0                	add    eax,edx
   1f740:	01 d8                	add    eax,ebx
   1f742:	83 c0 05             	add    eax,0x5
   1f745:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:80
    lfn->String[LFNIndex-1][6] = entryBuffer[0x10];
   1f747:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f74b:	8d 50 ff             	lea    edx,[eax-0x1]
   1f74e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f751:	0f b6 48 10          	movzx  ecx,BYTE PTR [eax+0x10]
   1f755:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f758:	89 d0                	mov    eax,edx
   1f75a:	01 c0                	add    eax,eax
   1f75c:	01 d0                	add    eax,edx
   1f75e:	c1 e0 02             	shl    eax,0x2
   1f761:	01 d0                	add    eax,edx
   1f763:	01 d8                	add    eax,ebx
   1f765:	83 c0 06             	add    eax,0x6
   1f768:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:81
    lfn->String[LFNIndex-1][7] = entryBuffer[0x12];
   1f76a:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f76e:	8d 50 ff             	lea    edx,[eax-0x1]
   1f771:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f774:	0f b6 48 12          	movzx  ecx,BYTE PTR [eax+0x12]
   1f778:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f77b:	89 d0                	mov    eax,edx
   1f77d:	01 c0                	add    eax,eax
   1f77f:	01 d0                	add    eax,edx
   1f781:	c1 e0 02             	shl    eax,0x2
   1f784:	01 d0                	add    eax,edx
   1f786:	01 d8                	add    eax,ebx
   1f788:	83 c0 07             	add    eax,0x7
   1f78b:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:82
    lfn->String[LFNIndex-1][8] = entryBuffer[0x14];
   1f78d:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f791:	8d 50 ff             	lea    edx,[eax-0x1]
   1f794:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f797:	0f b6 48 14          	movzx  ecx,BYTE PTR [eax+0x14]
   1f79b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f79e:	89 d0                	mov    eax,edx
   1f7a0:	01 c0                	add    eax,eax
   1f7a2:	01 d0                	add    eax,edx
   1f7a4:	c1 e0 02             	shl    eax,0x2
   1f7a7:	01 d0                	add    eax,edx
   1f7a9:	01 d8                	add    eax,ebx
   1f7ab:	83 c0 08             	add    eax,0x8
   1f7ae:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:83
    lfn->String[LFNIndex-1][9] = entryBuffer[0x16];
   1f7b0:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f7b4:	8d 50 ff             	lea    edx,[eax-0x1]
   1f7b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f7ba:	0f b6 48 16          	movzx  ecx,BYTE PTR [eax+0x16]
   1f7be:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f7c1:	89 d0                	mov    eax,edx
   1f7c3:	01 c0                	add    eax,eax
   1f7c5:	01 d0                	add    eax,edx
   1f7c7:	c1 e0 02             	shl    eax,0x2
   1f7ca:	01 d0                	add    eax,edx
   1f7cc:	01 d8                	add    eax,ebx
   1f7ce:	83 c0 09             	add    eax,0x9
   1f7d1:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:84
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
   1f7d3:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f7d7:	8d 50 ff             	lea    edx,[eax-0x1]
   1f7da:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f7dd:	0f b6 48 18          	movzx  ecx,BYTE PTR [eax+0x18]
   1f7e1:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f7e4:	89 d0                	mov    eax,edx
   1f7e6:	01 c0                	add    eax,eax
   1f7e8:	01 d0                	add    eax,edx
   1f7ea:	c1 e0 02             	shl    eax,0x2
   1f7ed:	01 d0                	add    eax,edx
   1f7ef:	01 d8                	add    eax,ebx
   1f7f1:	83 c0 0a             	add    eax,0xa
   1f7f4:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:85
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
   1f7f6:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f7fa:	8d 50 ff             	lea    edx,[eax-0x1]
   1f7fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f800:	0f b6 48 1c          	movzx  ecx,BYTE PTR [eax+0x1c]
   1f804:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f807:	89 d0                	mov    eax,edx
   1f809:	01 c0                	add    eax,eax
   1f80b:	01 d0                	add    eax,edx
   1f80d:	c1 e0 02             	shl    eax,0x2
   1f810:	01 d0                	add    eax,edx
   1f812:	01 d8                	add    eax,ebx
   1f814:	83 c0 0b             	add    eax,0xb
   1f817:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:86
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];
   1f819:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f81d:	8d 50 ff             	lea    edx,[eax-0x1]
   1f820:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f823:	0f b6 48 1e          	movzx  ecx,BYTE PTR [eax+0x1e]
   1f827:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f82a:	89 d0                	mov    eax,edx
   1f82c:	01 c0                	add    eax,eax
   1f82e:	01 d0                	add    eax,edx
   1f830:	c1 e0 02             	shl    eax,0x2
   1f833:	01 d0                	add    eax,edx
   1f835:	01 d8                	add    eax,ebx
   1f837:	83 c0 0c             	add    eax,0xc
   1f83a:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:88

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
   1f83c:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
   1f840:	eb 4e                	jmp    1f890 <fatfs_lfn_cache_entry+0x25a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:89
        if (lfn->String[LFNIndex-1][i]==0xFF)
   1f842:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f846:	8d 50 ff             	lea    edx,[eax-0x1]
   1f849:	0f b6 4d fb          	movzx  ecx,BYTE PTR [ebp-0x5]
   1f84d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f850:	89 d0                	mov    eax,edx
   1f852:	01 c0                	add    eax,eax
   1f854:	01 d0                	add    eax,edx
   1f856:	c1 e0 02             	shl    eax,0x2
   1f859:	01 d0                	add    eax,edx
   1f85b:	01 d8                	add    eax,ebx
   1f85d:	01 c8                	add    eax,ecx
   1f85f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f862:	3c ff                	cmp    al,0xff
   1f864:	75 20                	jne    1f886 <fatfs_lfn_cache_entry+0x250>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:90
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
   1f866:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f86a:	8d 50 ff             	lea    edx,[eax-0x1]
   1f86d:	0f b6 4d fb          	movzx  ecx,BYTE PTR [ebp-0x5]
   1f871:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f874:	89 d0                	mov    eax,edx
   1f876:	01 c0                	add    eax,eax
   1f878:	01 d0                	add    eax,edx
   1f87a:	c1 e0 02             	shl    eax,0x2
   1f87d:	01 d0                	add    eax,edx
   1f87f:	01 d8                	add    eax,ebx
   1f881:	01 c8                	add    eax,ecx
   1f883:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:88 (discriminator 2)
    lfn->String[LFNIndex-1][9] = entryBuffer[0x16];
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
   1f886:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   1f88a:	83 c0 01             	add    eax,0x1
   1f88d:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:88 (discriminator 1)
   1f890:	80 7d fb 0c          	cmp    BYTE PTR [ebp-0x5],0xc
   1f894:	76 ac                	jbe    1f842 <fatfs_lfn_cache_entry+0x20c>
   1f896:	eb 04                	jmp    1f89c <fatfs_lfn_cache_entry+0x266>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:65
    uint8 LFNIndex, i;
    LFNIndex = entryBuffer[0] & 0x1F;

    // Limit file name to cache size!
    if (LFNIndex > MAX_LONGFILENAME_ENTRIES)
        return ;
   1f898:	90                   	nop
   1f899:	eb 01                	jmp    1f89c <fatfs_lfn_cache_entry+0x266>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:69

    // This is an error condition
    if (LFNIndex == 0)
        return ;
   1f89b:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:91
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF)
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
}
   1f89c:	83 c4 10             	add    esp,0x10
   1f89f:	5b                   	pop    ebx
   1f8a0:	5d                   	pop    ebp
   1f8a1:	c3                   	ret    

0001f8a2 <fatfs_lfn_cache_get>:
fatfs_lfn_cache_get():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:98
//-----------------------------------------------------------------------------
// fatfs_lfn_cache_get: Get a reference to the long filename
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
char* fatfs_lfn_cache_get(struct lfn_cache *lfn)
{
   1f8a2:	55                   	push   ebp
   1f8a3:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:100
    // Null terminate long filename
    if (lfn->no_of_strings == MAX_LONGFILENAME_ENTRIES)
   1f8a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f8a8:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f8af:	3c 14                	cmp    al,0x14
   1f8b1:	75 0c                	jne    1f8bf <fatfs_lfn_cache_get+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:101
        lfn->Null = '\0';
   1f8b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f8b6:	c6 80 04 01 00 00 00 	mov    BYTE PTR [eax+0x104],0x0
   1f8bd:	eb 36                	jmp    1f8f5 <fatfs_lfn_cache_get+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:102
    else if (lfn->no_of_strings)
   1f8bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f8c2:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f8c9:	84 c0                	test   al,al
   1f8cb:	74 22                	je     1f8ef <fatfs_lfn_cache_get+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:103
        lfn->String[lfn->no_of_strings][0] = '\0';
   1f8cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f8d0:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f8d7:	0f b6 d0             	movzx  edx,al
   1f8da:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   1f8dd:	89 d0                	mov    eax,edx
   1f8df:	01 c0                	add    eax,eax
   1f8e1:	01 d0                	add    eax,edx
   1f8e3:	c1 e0 02             	shl    eax,0x2
   1f8e6:	01 d0                	add    eax,edx
   1f8e8:	01 c8                	add    eax,ecx
   1f8ea:	c6 00 00             	mov    BYTE PTR [eax],0x0
   1f8ed:	eb 06                	jmp    1f8f5 <fatfs_lfn_cache_get+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:105
    else
        lfn->String[0][0] = '\0';
   1f8ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f8f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:107

    return (char*)&lfn->String[0][0];
   1f8f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:108
}
   1f8f8:	5d                   	pop    ebp
   1f8f9:	c3                   	ret    

0001f8fa <fatfs_entry_lfn_text>:
fatfs_entry_lfn_text():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:115
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_text: If LFN text entry found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_text(struct fat_dir_entry *entry)
{
   1f8fa:	55                   	push   ebp
   1f8fb:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:116
    if ((entry->Attr & FILE_ATTR_LFN_TEXT) == FILE_ATTR_LFN_TEXT)
   1f8fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f900:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f904:	0f b6 c0             	movzx  eax,al
   1f907:	83 e0 0f             	and    eax,0xf
   1f90a:	83 f8 0f             	cmp    eax,0xf
   1f90d:	75 07                	jne    1f916 <fatfs_entry_lfn_text+0x1c>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:117
        return 1;
   1f90f:	b8 01 00 00 00       	mov    eax,0x1
   1f914:	eb 05                	jmp    1f91b <fatfs_entry_lfn_text+0x21>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:119
    else
        return 0;
   1f916:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:120
}
   1f91b:	5d                   	pop    ebp
   1f91c:	c3                   	ret    

0001f91d <fatfs_entry_lfn_invalid>:
fatfs_entry_lfn_invalid():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:127
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_invalid: If SFN found not relating to LFN
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
   1f91d:	55                   	push   ebp
   1f91e:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:128
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
   1f920:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f923:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f926:	84 c0                	test   al,al
   1f928:	74 26                	je     1f950 <fatfs_entry_lfn_invalid+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:129 (discriminator 1)
         (entry->Name[0]==FILE_HEADER_DELETED)||
   1f92a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f92d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:128 (discriminator 1)
// fatfs_entry_lfn_invalid: If SFN found not relating to LFN
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
   1f930:	3c e5                	cmp    al,0xe5
   1f932:	74 1c                	je     1f950 <fatfs_entry_lfn_invalid+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:130
         (entry->Name[0]==FILE_HEADER_DELETED)||
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
   1f934:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f937:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:129
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
         (entry->Name[0]==FILE_HEADER_DELETED)||
   1f93b:	3c 08                	cmp    al,0x8
   1f93d:	74 11                	je     1f950 <fatfs_entry_lfn_invalid+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:131
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
         (entry->Attr & FILE_ATTR_SYSHID) )
   1f93f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f942:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f946:	0f b6 c0             	movzx  eax,al
   1f949:	83 e0 06             	and    eax,0x6
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:130
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
         (entry->Name[0]==FILE_HEADER_DELETED)||
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
   1f94c:	85 c0                	test   eax,eax
   1f94e:	74 07                	je     1f957 <fatfs_entry_lfn_invalid+0x3a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:132
         (entry->Attr & FILE_ATTR_SYSHID) )
        return 1;
   1f950:	b8 01 00 00 00       	mov    eax,0x1
   1f955:	eb 05                	jmp    1f95c <fatfs_entry_lfn_invalid+0x3f>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:134
    else
        return 0;
   1f957:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:135
}
   1f95c:	5d                   	pop    ebp
   1f95d:	c3                   	ret    

0001f95e <fatfs_entry_lfn_exists>:
fatfs_entry_lfn_exists():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:142
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_exists: If LFN exists and correlation SFN found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
   1f95e:	55                   	push   ebp
   1f95f:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:143
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f961:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f964:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f968:	3c 0f                	cmp    al,0xf
   1f96a:	74 45                	je     1f9b1 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:144 (discriminator 1)
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1f96c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f96f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:143 (discriminator 1)
// fatfs_entry_lfn_exists: If LFN exists and correlation SFN found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f972:	84 c0                	test   al,al
   1f974:	74 3b                	je     1f9b1 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:145
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1f976:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f979:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:144
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1f97c:	3c e5                	cmp    al,0xe5
   1f97e:	74 31                	je     1f9b1 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:146
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1f980:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f983:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:145
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1f987:	3c 08                	cmp    al,0x8
   1f989:	74 26                	je     1f9b1 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:147
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
   1f98b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f98e:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f992:	0f b6 c0             	movzx  eax,al
   1f995:	83 e0 06             	and    eax,0x6
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:146
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1f998:	85 c0                	test   eax,eax
   1f99a:	75 15                	jne    1f9b1 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:148
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
         (lfn->no_of_strings) )
   1f99c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f99f:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:147
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
   1f9a6:	84 c0                	test   al,al
   1f9a8:	74 07                	je     1f9b1 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:149
         (lfn->no_of_strings) )
        return 1;
   1f9aa:	b8 01 00 00 00       	mov    eax,0x1
   1f9af:	eb 05                	jmp    1f9b6 <fatfs_entry_lfn_exists+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:151
    else
        return 0;
   1f9b1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:152
}
   1f9b6:	5d                   	pop    ebp
   1f9b7:	c3                   	ret    

0001f9b8 <fatfs_entry_sfn_only>:
fatfs_entry_sfn_only():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:158
#endif
//-----------------------------------------------------------------------------
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
   1f9b8:	55                   	push   ebp
   1f9b9:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:159
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f9bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f9be:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f9c2:	3c 0f                	cmp    al,0xf
   1f9c4:	74 37                	je     1f9fd <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:160 (discriminator 1)
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1f9c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f9c9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:159 (discriminator 1)
//-----------------------------------------------------------------------------
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f9cc:	84 c0                	test   al,al
   1f9ce:	74 2d                	je     1f9fd <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:161
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1f9d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f9d3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:160
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1f9d6:	3c e5                	cmp    al,0xe5
   1f9d8:	74 23                	je     1f9fd <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:162
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1f9da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f9dd:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:161
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1f9e1:	3c 08                	cmp    al,0x8
   1f9e3:	74 18                	je     1f9fd <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:163
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) )
   1f9e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f9e8:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f9ec:	0f b6 c0             	movzx  eax,al
   1f9ef:	83 e0 06             	and    eax,0x6
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:162
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1f9f2:	85 c0                	test   eax,eax
   1f9f4:	75 07                	jne    1f9fd <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:164
         (!(entry->Attr&FILE_ATTR_SYSHID)) )
        return 1;
   1f9f6:	b8 01 00 00 00       	mov    eax,0x1
   1f9fb:	eb 05                	jmp    1fa02 <fatfs_entry_sfn_only+0x4a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:166
    else
        return 0;
   1f9fd:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:167
}
   1fa02:	5d                   	pop    ebp
   1fa03:	c3                   	ret    

0001fa04 <fatfs_entry_is_dir>:
fatfs_entry_is_dir():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:173
// TODO: FILE_ATTR_SYSHID ?!?!??!
//-----------------------------------------------------------------------------
// fatfs_entry_is_dir: Returns 1 if a directory
//-----------------------------------------------------------------------------
int fatfs_entry_is_dir(struct fat_dir_entry *entry)
{
   1fa04:	55                   	push   ebp
   1fa05:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:174
    if (entry->Attr & FILE_TYPE_DIR)
   1fa07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fa0a:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1fa0e:	0f b6 c0             	movzx  eax,al
   1fa11:	83 e0 10             	and    eax,0x10
   1fa14:	85 c0                	test   eax,eax
   1fa16:	74 07                	je     1fa1f <fatfs_entry_is_dir+0x1b>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:175
        return 1;
   1fa18:	b8 01 00 00 00       	mov    eax,0x1
   1fa1d:	eb 05                	jmp    1fa24 <fatfs_entry_is_dir+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:177
    else
        return 0;
   1fa1f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:178
}
   1fa24:	5d                   	pop    ebp
   1fa25:	c3                   	ret    

0001fa26 <fatfs_entry_is_file>:
fatfs_entry_is_file():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:183
//-----------------------------------------------------------------------------
// fatfs_entry_is_file: Returns 1 is a file entry
//-----------------------------------------------------------------------------
int fatfs_entry_is_file(struct fat_dir_entry *entry)
{
   1fa26:	55                   	push   ebp
   1fa27:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:184
    if (entry->Attr & FILE_TYPE_FILE)
   1fa29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fa2c:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1fa30:	0f b6 c0             	movzx  eax,al
   1fa33:	83 e0 20             	and    eax,0x20
   1fa36:	85 c0                	test   eax,eax
   1fa38:	74 07                	je     1fa41 <fatfs_entry_is_file+0x1b>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:185
        return 1;
   1fa3a:	b8 01 00 00 00       	mov    eax,0x1
   1fa3f:	eb 05                	jmp    1fa46 <fatfs_entry_is_file+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:187
    else
        return 0;
   1fa41:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:188
}
   1fa46:	5d                   	pop    ebp
   1fa47:	c3                   	ret    

0001fa48 <fatfs_lfn_entries_required>:
fatfs_lfn_entries_required():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:194
//-----------------------------------------------------------------------------
// fatfs_lfn_entries_required: Calculate number of 13 characters entries
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_lfn_entries_required(char *filename)
{
   1fa48:	55                   	push   ebp
   1fa49:	89 e5                	mov    ebp,esp
   1fa4b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:195
    int length = (int)strlen(filename);
   1fa4e:	83 ec 0c             	sub    esp,0xc
   1fa51:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fa54:	e8 d3 7e 00 00       	call   2792c <strlen>
   1fa59:	83 c4 10             	add    esp,0x10
   1fa5c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:197

    if (length)
   1fa5f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1fa63:	74 1d                	je     1fa82 <fatfs_lfn_entries_required+0x3a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:198
        return (length + MAX_LFN_ENTRY_LENGTH - 1) / MAX_LFN_ENTRY_LENGTH;
   1fa65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fa68:	8d 48 0c             	lea    ecx,[eax+0xc]
   1fa6b:	ba 4f ec c4 4e       	mov    edx,0x4ec4ec4f
   1fa70:	89 c8                	mov    eax,ecx
   1fa72:	f7 ea                	imul   edx
   1fa74:	c1 fa 02             	sar    edx,0x2
   1fa77:	89 c8                	mov    eax,ecx
   1fa79:	c1 f8 1f             	sar    eax,0x1f
   1fa7c:	29 c2                	sub    edx,eax
   1fa7e:	89 d0                	mov    eax,edx
   1fa80:	eb 05                	jmp    1fa87 <fatfs_lfn_entries_required+0x3f>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:200
    else
        return 0;
   1fa82:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:201
}
   1fa87:	c9                   	leave  
   1fa88:	c3                   	ret    

0001fa89 <fatfs_filename_to_lfn>:
fatfs_filename_to_lfn():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:208
//-----------------------------------------------------------------------------
// fatfs_filename_to_lfn:
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk)
{
   1fa89:	55                   	push   ebp
   1fa8a:	89 e5                	mov    ebp,esp
   1fa8c:	83 ec 68             	sub    esp,0x68
   1fa8f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fa92:	88 45 a4             	mov    BYTE PTR [ebp-0x5c],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:210
    int i;
    int nameIndexes[MAX_LFN_ENTRY_LENGTH] = {1,3,5,7,9,0x0E,0x10,0x12,0x14,0x16,0x18,0x1C,0x1E};
   1fa95:	c7 45 b4 01 00 00 00 	mov    DWORD PTR [ebp-0x4c],0x1
   1fa9c:	c7 45 b8 03 00 00 00 	mov    DWORD PTR [ebp-0x48],0x3
   1faa3:	c7 45 bc 05 00 00 00 	mov    DWORD PTR [ebp-0x44],0x5
   1faaa:	c7 45 c0 07 00 00 00 	mov    DWORD PTR [ebp-0x40],0x7
   1fab1:	c7 45 c4 09 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x9
   1fab8:	c7 45 c8 0e 00 00 00 	mov    DWORD PTR [ebp-0x38],0xe
   1fabf:	c7 45 cc 10 00 00 00 	mov    DWORD PTR [ebp-0x34],0x10
   1fac6:	c7 45 d0 12 00 00 00 	mov    DWORD PTR [ebp-0x30],0x12
   1facd:	c7 45 d4 14 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x14
   1fad4:	c7 45 d8 16 00 00 00 	mov    DWORD PTR [ebp-0x28],0x16
   1fadb:	c7 45 dc 18 00 00 00 	mov    DWORD PTR [ebp-0x24],0x18
   1fae2:	c7 45 e0 1c 00 00 00 	mov    DWORD PTR [ebp-0x20],0x1c
   1fae9:	c7 45 e4 1e 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1e
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:213

    // 13 characters entries
    int length = (int)strlen(filename);
   1faf0:	83 ec 0c             	sub    esp,0xc
   1faf3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1faf6:	e8 31 7e 00 00       	call   2792c <strlen>
   1fafb:	83 c4 10             	add    esp,0x10
   1fafe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:214
    int entriesRequired = fatfs_lfn_entries_required(filename);
   1fb01:	83 ec 0c             	sub    esp,0xc
   1fb04:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fb07:	e8 3c ff ff ff       	call   1fa48 <fatfs_lfn_entries_required>
   1fb0c:	83 c4 10             	add    esp,0x10
   1fb0f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:217

    // Filename offset
    int start = entry * MAX_LFN_ENTRY_LENGTH;
   1fb12:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1fb15:	89 d0                	mov    eax,edx
   1fb17:	01 c0                	add    eax,eax
   1fb19:	01 d0                	add    eax,edx
   1fb1b:	c1 e0 02             	shl    eax,0x2
   1fb1e:	01 d0                	add    eax,edx
   1fb20:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:220

    // Initialise to zeros
    memset(buffer, 0x00, FAT_DIR_ENTRY_SIZE);
   1fb23:	83 ec 04             	sub    esp,0x4
   1fb26:	6a 20                	push   0x20
   1fb28:	6a 00                	push   0x0
   1fb2a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1fb2d:	e8 d7 5a 00 00       	call   25609 <memset>
   1fb32:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:223

    // LFN entry number
    buffer[0] = (uint8)(((entriesRequired-1)==entry)?(0x40|(entry+1)):(entry+1));
   1fb35:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1fb38:	83 e8 01             	sub    eax,0x1
   1fb3b:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1fb3e:	75 0d                	jne    1fb4d <fatfs_filename_to_lfn+0xc4>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:223 (discriminator 1)
   1fb40:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fb43:	83 c0 01             	add    eax,0x1
   1fb46:	83 c8 40             	or     eax,0x40
   1fb49:	89 c2                	mov    edx,eax
   1fb4b:	eb 06                	jmp    1fb53 <fatfs_filename_to_lfn+0xca>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:223 (discriminator 2)
   1fb4d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fb50:	8d 50 01             	lea    edx,[eax+0x1]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:223 (discriminator 4)
   1fb53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fb56:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:226 (discriminator 4)

    // LFN flag
    buffer[11] = 0x0F;
   1fb58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fb5b:	83 c0 0b             	add    eax,0xb
   1fb5e:	c6 00 0f             	mov    BYTE PTR [eax],0xf
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:229 (discriminator 4)

    // Checksum of short filename
    buffer[13] = sfnChk;
   1fb61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fb64:	8d 50 0d             	lea    edx,[eax+0xd]
   1fb67:	0f b6 45 a4          	movzx  eax,BYTE PTR [ebp-0x5c]
   1fb6b:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:232 (discriminator 4)

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
   1fb6d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1fb74:	eb 78                	jmp    1fbee <fatfs_filename_to_lfn+0x165>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:234
    {
        if ( (start+i) < length )
   1fb76:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1fb79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fb7c:	01 d0                	add    eax,edx
   1fb7e:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   1fb81:	7d 24                	jge    1fba7 <fatfs_filename_to_lfn+0x11e>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:235
            buffer[nameIndexes[i]] = filename[start+i];
   1fb83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fb86:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1fb8a:	89 c2                	mov    edx,eax
   1fb8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fb8f:	01 d0                	add    eax,edx
   1fb91:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
   1fb94:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fb97:	01 ca                	add    edx,ecx
   1fb99:	89 d1                	mov    ecx,edx
   1fb9b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1fb9e:	01 ca                	add    edx,ecx
   1fba0:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1fba3:	88 10                	mov    BYTE PTR [eax],dl
   1fba5:	eb 43                	jmp    1fbea <fatfs_filename_to_lfn+0x161>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:236
        else if ( (start+i) == length )
   1fba7:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1fbaa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fbad:	01 d0                	add    eax,edx
   1fbaf:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   1fbb2:	75 13                	jne    1fbc7 <fatfs_filename_to_lfn+0x13e>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:237
            buffer[nameIndexes[i]] = 0x00;
   1fbb4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fbb7:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1fbbb:	89 c2                	mov    edx,eax
   1fbbd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fbc0:	01 d0                	add    eax,edx
   1fbc2:	c6 00 00             	mov    BYTE PTR [eax],0x0
   1fbc5:	eb 23                	jmp    1fbea <fatfs_filename_to_lfn+0x161>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:240
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   1fbc7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fbca:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1fbce:	89 c2                	mov    edx,eax
   1fbd0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fbd3:	01 d0                	add    eax,edx
   1fbd5:	c6 00 ff             	mov    BYTE PTR [eax],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:241
            buffer[nameIndexes[i]+1] = 0xFF;
   1fbd8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fbdb:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1fbdf:	8d 50 01             	lea    edx,[eax+0x1]
   1fbe2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fbe5:	01 d0                	add    eax,edx
   1fbe7:	c6 00 ff             	mov    BYTE PTR [eax],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:232 (discriminator 2)

    // Checksum of short filename
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
   1fbea:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:232 (discriminator 1)
   1fbee:	83 7d f4 0c          	cmp    DWORD PTR [ebp-0xc],0xc
   1fbf2:	7e 82                	jle    1fb76 <fatfs_filename_to_lfn+0xed>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:244
        {
            buffer[nameIndexes[i]] = 0xFF;
            buffer[nameIndexes[i]+1] = 0xFF;
        }
    }
}
   1fbf4:	90                   	nop
   1fbf5:	c9                   	leave  
   1fbf6:	c3                   	ret    

0001fbf7 <fatfs_sfn_create_entry>:
fatfs_sfn_create_entry():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:251
//-----------------------------------------------------------------------------
// fatfs_sfn_create_entry: Create the short filename directory entry
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
{
   1fbf7:	55                   	push   ebp
   1fbf8:	89 e5                	mov    ebp,esp
   1fbfa:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:255
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
   1fbfd:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1fc04:	eb 1b                	jmp    1fc21 <fatfs_sfn_create_entry+0x2a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:256 (discriminator 3)
        entry->Name[i] = shortfilename[i];
   1fc06:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1fc09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fc0c:	01 d0                	add    eax,edx
   1fc0e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fc11:	89 c1                	mov    ecx,eax
   1fc13:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   1fc16:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1fc19:	01 d0                	add    eax,edx
   1fc1b:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:255 (discriminator 3)
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
{
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
   1fc1d:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:255 (discriminator 1)
   1fc21:	83 7d fc 0a          	cmp    DWORD PTR [ebp-0x4],0xa
   1fc25:	7e df                	jle    1fc06 <fatfs_sfn_create_entry+0xf>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:259
        entry->Name[i] = shortfilename[i];

    // Unless we have a RTC we might as well set these to 1980
    entry->CrtTimeTenth = 0x00;
   1fc27:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc2a:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:260
    entry->CrtTime[1] = entry->CrtTime[0] = 0x00;
   1fc2e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc31:	c6 40 0e 00          	mov    BYTE PTR [eax+0xe],0x0
   1fc35:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc38:	0f b6 50 0e          	movzx  edx,BYTE PTR [eax+0xe]
   1fc3c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc3f:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:261
    entry->CrtDate[1] = 0x00;
   1fc42:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc45:	c6 40 11 00          	mov    BYTE PTR [eax+0x11],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:262
    entry->CrtDate[0] = 0x20;
   1fc49:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc4c:	c6 40 10 20          	mov    BYTE PTR [eax+0x10],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:263
    entry->LstAccDate[1] = 0x00;
   1fc50:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc53:	c6 40 13 00          	mov    BYTE PTR [eax+0x13],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:264
    entry->LstAccDate[0] = 0x20;
   1fc57:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc5a:	c6 40 12 20          	mov    BYTE PTR [eax+0x12],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:265
    entry->WrtTime[1] = entry->WrtTime[0] = 0x00;
   1fc5e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc61:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
   1fc65:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc68:	0f b6 50 16          	movzx  edx,BYTE PTR [eax+0x16]
   1fc6c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc6f:	88 50 17             	mov    BYTE PTR [eax+0x17],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:266
    entry->WrtDate[1] = 0x00;
   1fc72:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc75:	c6 40 19 00          	mov    BYTE PTR [eax+0x19],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:267
    entry->WrtDate[0] = 0x20;
   1fc79:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc7c:	c6 40 18 20          	mov    BYTE PTR [eax+0x18],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:269

    if (!dir)
   1fc80:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1fc84:	75 09                	jne    1fc8f <fatfs_sfn_create_entry+0x98>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:270
        entry->Attr = FILE_TYPE_FILE;
   1fc86:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc89:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
   1fc8d:	eb 07                	jmp    1fc96 <fatfs_sfn_create_entry+0x9f>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:272
    else
        entry->Attr = FILE_TYPE_DIR;
   1fc8f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:274

    entry->NTRes = 0x00;
   1fc96:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fc99:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:276

    entry->FstClusHI = FAT_HTONS((uint16)((startCluster>>16) & 0xFFFF));
   1fc9d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fca0:	c1 e8 10             	shr    eax,0x10
   1fca3:	89 c2                	mov    edx,eax
   1fca5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fca8:	66 89 50 14          	mov    WORD PTR [eax+0x14],dx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:277
    entry->FstClusLO = FAT_HTONS((uint16)((startCluster>>0) & 0xFFFF));
   1fcac:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fcaf:	89 c2                	mov    edx,eax
   1fcb1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fcb4:	66 89 50 1a          	mov    WORD PTR [eax+0x1a],dx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:278
    entry->FileSize = FAT_HTONL(size);
   1fcb8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fcbb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1fcbe:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:279
}
   1fcc1:	90                   	nop
   1fcc2:	c9                   	leave  
   1fcc3:	c3                   	ret    

0001fcc4 <fatfs_lfn_create_sfn>:
fatfs_lfn_create_sfn():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:286
//-----------------------------------------------------------------------------
// fatfs_lfn_create_sfn: Create a padded SFN
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_create_sfn(char *sfn_output, char *filename)
{
   1fcc4:	55                   	push   ebp
   1fcc5:	89 e5                	mov    ebp,esp
   1fcc7:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:288
    int i;
    int dotPos = -1;
   1fcca:	c7 45 f0 ff ff ff ff 	mov    DWORD PTR [ebp-0x10],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:291
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
   1fcd1:	83 ec 0c             	sub    esp,0xc
   1fcd4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1fcd7:	e8 50 7c 00 00       	call   2792c <strlen>
   1fcdc:	83 c4 10             	add    esp,0x10
   1fcdf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:294

    // Invalid to start with .
    if (filename[0]=='.')
   1fce2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fce5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fce8:	3c 2e                	cmp    al,0x2e
   1fcea:	75 0a                	jne    1fcf6 <fatfs_lfn_create_sfn+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:295
        return 0;
   1fcec:	b8 00 00 00 00       	mov    eax,0x0
   1fcf1:	e9 a5 01 00 00       	jmp    1fe9b <fatfs_lfn_create_sfn+0x1d7>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:297

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
   1fcf6:	83 ec 04             	sub    esp,0x4
   1fcf9:	6a 0b                	push   0xb
   1fcfb:	6a 20                	push   0x20
   1fcfd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fd00:	e8 04 59 00 00       	call   25609 <memset>
   1fd05:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:298
    memset(ext, ' ', 3);
   1fd08:	83 ec 04             	sub    esp,0x4
   1fd0b:	6a 03                	push   0x3
   1fd0d:	6a 20                	push   0x20
   1fd0f:	8d 45 e5             	lea    eax,[ebp-0x1b]
   1fd12:	50                   	push   eax
   1fd13:	e8 f1 58 00 00       	call   25609 <memset>
   1fd18:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:301

    // Find dot seperator
    for (i = 0; i< len; i++)
   1fd1b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1fd22:	eb 19                	jmp    1fd3d <fatfs_lfn_create_sfn+0x79>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:303
    {
        if (filename[i]=='.')
   1fd24:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fd27:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fd2a:	01 d0                	add    eax,edx
   1fd2c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fd2f:	3c 2e                	cmp    al,0x2e
   1fd31:	75 06                	jne    1fd39 <fatfs_lfn_create_sfn+0x75>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:304
            dotPos = i;
   1fd33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fd36:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:301 (discriminator 2)

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
    memset(ext, ' ', 3);

    // Find dot seperator
    for (i = 0; i< len; i++)
   1fd39:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:301 (discriminator 1)
   1fd3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fd40:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1fd43:	7c df                	jl     1fd24 <fatfs_lfn_create_sfn+0x60>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:308
        if (filename[i]=='.')
            dotPos = i;
    }

    // Extract extensions
    if (dotPos!=-1)
   1fd45:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   1fd49:	74 44                	je     1fd8f <fatfs_lfn_create_sfn+0xcb>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:311
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
   1fd4b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1fd4e:	83 c0 01             	add    eax,0x1
   1fd51:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1fd54:	eb 28                	jmp    1fd7e <fatfs_lfn_create_sfn+0xba>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:312
            if (i<len)
   1fd56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fd59:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1fd5c:	7d 1c                	jge    1fd7a <fatfs_lfn_create_sfn+0xb6>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:313
                ext[i-(dotPos+1)] = filename[i];
   1fd5e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1fd61:	8d 50 01             	lea    edx,[eax+0x1]
   1fd64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fd67:	29 d0                	sub    eax,edx
   1fd69:	89 c2                	mov    edx,eax
   1fd6b:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1fd6e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fd71:	01 c8                	add    eax,ecx
   1fd73:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fd76:	88 44 15 e5          	mov    BYTE PTR [ebp+edx*1-0x1b],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:311 (discriminator 2)

    // Extract extensions
    if (dotPos!=-1)
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
   1fd7a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:311 (discriminator 1)
   1fd7e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1fd81:	83 c0 04             	add    eax,0x4
   1fd84:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1fd87:	7f cd                	jg     1fd56 <fatfs_lfn_create_sfn+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:316
            if (i<len)
                ext[i-(dotPos+1)] = filename[i];

        // Shorten the length to the dot position
        len = dotPos;
   1fd89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1fd8c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:320
    }

    // Add filename part
    pos = 0;
   1fd8f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:321
    for (i=0;i<len;i++)
   1fd96:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1fd9d:	e9 85 00 00 00       	jmp    1fe27 <fatfs_lfn_create_sfn+0x163>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:323
    {
        if ( (filename[i]!=' ') && (filename[i]!='.') )
   1fda2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fda5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fda8:	01 d0                	add    eax,edx
   1fdaa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fdad:	3c 20                	cmp    al,0x20
   1fdaf:	74 6c                	je     1fe1d <fatfs_lfn_create_sfn+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:323 (discriminator 1)
   1fdb1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fdb4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fdb7:	01 d0                	add    eax,edx
   1fdb9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fdbc:	3c 2e                	cmp    al,0x2e
   1fdbe:	74 5d                	je     1fe1d <fatfs_lfn_create_sfn+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:325
        {
            if (filename[i] >= 'a' && filename[i] <= 'z')
   1fdc0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fdc3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fdc6:	01 d0                	add    eax,edx
   1fdc8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fdcb:	3c 60                	cmp    al,0x60
   1fdcd:	7e 31                	jle    1fe00 <fatfs_lfn_create_sfn+0x13c>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:325 (discriminator 1)
   1fdcf:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fdd2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fdd5:	01 d0                	add    eax,edx
   1fdd7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fdda:	3c 7a                	cmp    al,0x7a
   1fddc:	7f 22                	jg     1fe00 <fatfs_lfn_create_sfn+0x13c>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:326
                sfn_output[pos++] = filename[i] - 'a' + 'A';
   1fdde:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1fde1:	8d 50 01             	lea    edx,[eax+0x1]
   1fde4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   1fde7:	89 c2                	mov    edx,eax
   1fde9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fdec:	01 d0                	add    eax,edx
   1fdee:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1fdf1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1fdf4:	01 ca                	add    edx,ecx
   1fdf6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1fdf9:	83 ea 20             	sub    edx,0x20
   1fdfc:	88 10                	mov    BYTE PTR [eax],dl
   1fdfe:	eb 1d                	jmp    1fe1d <fatfs_lfn_create_sfn+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:328
            else
                sfn_output[pos++] = filename[i];
   1fe00:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1fe03:	8d 50 01             	lea    edx,[eax+0x1]
   1fe06:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   1fe09:	89 c2                	mov    edx,eax
   1fe0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fe0e:	01 c2                	add    edx,eax
   1fe10:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1fe13:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fe16:	01 c8                	add    eax,ecx
   1fe18:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fe1b:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:332
        }

        // Fill upto 8 characters
        if (pos==FAT_SFN_SIZE_PARTIAL)
   1fe1d:	83 7d ec 08          	cmp    DWORD PTR [ebp-0x14],0x8
   1fe21:	74 12                	je     1fe35 <fatfs_lfn_create_sfn+0x171>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:321 (discriminator 2)
        len = dotPos;
    }

    // Add filename part
    pos = 0;
    for (i=0;i<len;i++)
   1fe23:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:321 (discriminator 1)
   1fe27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fe2a:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1fe2d:	0f 8c 6f ff ff ff    	jl     1fda2 <fatfs_lfn_create_sfn+0xde>
   1fe33:	eb 01                	jmp    1fe36 <fatfs_lfn_create_sfn+0x172>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:333
                sfn_output[pos++] = filename[i];
        }

        // Fill upto 8 characters
        if (pos==FAT_SFN_SIZE_PARTIAL)
            break;
   1fe35:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:337
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
   1fe36:	c7 45 f4 08 00 00 00 	mov    DWORD PTR [ebp-0xc],0x8
   1fe3d:	eb 51                	jmp    1fe90 <fatfs_lfn_create_sfn+0x1cc>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:339
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
   1fe3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fe42:	83 e8 08             	sub    eax,0x8
   1fe45:	0f b6 44 05 e5       	movzx  eax,BYTE PTR [ebp+eax*1-0x1b]
   1fe4a:	3c 60                	cmp    al,0x60
   1fe4c:	7e 29                	jle    1fe77 <fatfs_lfn_create_sfn+0x1b3>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:339 (discriminator 1)
   1fe4e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fe51:	83 e8 08             	sub    eax,0x8
   1fe54:	0f b6 44 05 e5       	movzx  eax,BYTE PTR [ebp+eax*1-0x1b]
   1fe59:	3c 7a                	cmp    al,0x7a
   1fe5b:	7f 1a                	jg     1fe77 <fatfs_lfn_create_sfn+0x1b3>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:340
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
   1fe5d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fe60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fe63:	01 d0                	add    eax,edx
   1fe65:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fe68:	83 ea 08             	sub    edx,0x8
   1fe6b:	0f b6 54 15 e5       	movzx  edx,BYTE PTR [ebp+edx*1-0x1b]
   1fe70:	83 ea 20             	sub    edx,0x20
   1fe73:	88 10                	mov    BYTE PTR [eax],dl
   1fe75:	eb 15                	jmp    1fe8c <fatfs_lfn_create_sfn+0x1c8>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:342
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
   1fe77:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fe7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fe7d:	01 c2                	add    edx,eax
   1fe7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fe82:	83 e8 08             	sub    eax,0x8
   1fe85:	0f b6 44 05 e5       	movzx  eax,BYTE PTR [ebp+eax*1-0x1b]
   1fe8a:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:337 (discriminator 2)
        if (pos==FAT_SFN_SIZE_PARTIAL)
            break;
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
   1fe8c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:337 (discriminator 1)
   1fe90:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   1fe94:	7e a9                	jle    1fe3f <fatfs_lfn_create_sfn+0x17b>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:345
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
    }

    return 1;
   1fe96:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:346 (discriminator 1)
}
   1fe9b:	c9                   	leave  
   1fe9c:	c3                   	ret    

0001fe9d <fatfs_itoa>:
fatfs_itoa():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:351
//-----------------------------------------------------------------------------
// fatfs_itoa:
//-----------------------------------------------------------------------------
static void fatfs_itoa(uint32 num, char *s)
{
   1fe9d:	55                   	push   ebp
   1fe9e:	89 e5                	mov    ebp,esp
   1fea0:	53                   	push   ebx
   1fea1:	83 ec 30             	sub    esp,0x30
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:354
    char* cp;
    char outbuf[12];
    const char digits[] = "0123456789ABCDEF";
   1fea4:	c7 45 db 30 31 32 33 	mov    DWORD PTR [ebp-0x25],0x33323130
   1feab:	c7 45 df 34 35 36 37 	mov    DWORD PTR [ebp-0x21],0x37363534
   1feb2:	c7 45 e3 38 39 41 42 	mov    DWORD PTR [ebp-0x1d],0x42413938
   1feb9:	c7 45 e7 43 44 45 46 	mov    DWORD PTR [ebp-0x19],0x46454443
   1fec0:	c6 45 eb 00          	mov    BYTE PTR [ebp-0x15],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:357

    // Build string backwards
    cp = outbuf;
   1fec4:	8d 45 ec             	lea    eax,[ebp-0x14]
   1fec7:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:360 (discriminator 1)
    do
    {
        *cp++ = digits[(int)(num % 10)];
   1feca:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   1fecd:	8d 41 01             	lea    eax,[ecx+0x1]
   1fed0:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   1fed3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1fed6:	ba cd cc cc cc       	mov    edx,0xcccccccd
   1fedb:	89 d8                	mov    eax,ebx
   1fedd:	f7 e2                	mul    edx
   1fedf:	c1 ea 03             	shr    edx,0x3
   1fee2:	89 d0                	mov    eax,edx
   1fee4:	c1 e0 02             	shl    eax,0x2
   1fee7:	01 d0                	add    eax,edx
   1fee9:	01 c0                	add    eax,eax
   1feeb:	29 c3                	sub    ebx,eax
   1feed:	89 da                	mov    edx,ebx
   1feef:	89 d0                	mov    eax,edx
   1fef1:	0f b6 44 05 db       	movzx  eax,BYTE PTR [ebp+eax*1-0x25]
   1fef6:	88 01                	mov    BYTE PTR [ecx],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:362 (discriminator 1)
    }
    while ((num /= 10) > 0);
   1fef8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fefb:	ba cd cc cc cc       	mov    edx,0xcccccccd
   1ff00:	f7 e2                	mul    edx
   1ff02:	89 d0                	mov    eax,edx
   1ff04:	c1 e8 03             	shr    eax,0x3
   1ff07:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
   1ff0a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1ff0e:	75 ba                	jne    1feca <fatfs_itoa+0x2d>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:364

    *cp-- = 0;
   1ff10:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1ff13:	8d 50 ff             	lea    edx,[eax-0x1]
   1ff16:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   1ff19:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:367

    // Copy in forwards
    while (cp >= outbuf)
   1ff1c:	eb 17                	jmp    1ff35 <fatfs_itoa+0x98>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:368
        *s++ = *cp--;
   1ff1e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ff21:	8d 50 01             	lea    edx,[eax+0x1]
   1ff24:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
   1ff27:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   1ff2a:	8d 4a ff             	lea    ecx,[edx-0x1]
   1ff2d:	89 4d f8             	mov    DWORD PTR [ebp-0x8],ecx
   1ff30:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1ff33:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:367
    while ((num /= 10) > 0);

    *cp-- = 0;

    // Copy in forwards
    while (cp >= outbuf)
   1ff35:	8d 45 ec             	lea    eax,[ebp-0x14]
   1ff38:	39 45 f8             	cmp    DWORD PTR [ebp-0x8],eax
   1ff3b:	73 e1                	jae    1ff1e <fatfs_itoa+0x81>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:370
        *s++ = *cp--;

    *s = 0;
   1ff3d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ff40:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:371
}
   1ff43:	90                   	nop
   1ff44:	83 c4 30             	add    esp,0x30
   1ff47:	5b                   	pop    ebx
   1ff48:	5d                   	pop    ebp
   1ff49:	c3                   	ret    

0001ff4a <fatfs_lfn_generate_tail>:
fatfs_lfn_generate_tail():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:381
// sfn_output = Output short filename with tail
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_generate_tail(char *sfn_output, char *sfn_input, uint32 tailNum)
{
   1ff4a:	55                   	push   ebp
   1ff4b:	89 e5                	mov    ebp,esp
   1ff4d:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:385
    int tail_chars;
    char tail_str[12];

    if (tailNum > 99999)
   1ff50:	81 7d 10 9f 86 01 00 	cmp    DWORD PTR [ebp+0x10],0x1869f
   1ff57:	76 07                	jbe    1ff60 <fatfs_lfn_generate_tail+0x16>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:386
        return 0;
   1ff59:	b8 00 00 00 00       	mov    eax,0x0
   1ff5e:	eb 79                	jmp    1ffd9 <fatfs_lfn_generate_tail+0x8f>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:389

    // Convert to number
    memset(tail_str, 0x00, sizeof(tail_str));
   1ff60:	83 ec 04             	sub    esp,0x4
   1ff63:	6a 0c                	push   0xc
   1ff65:	6a 00                	push   0x0
   1ff67:	8d 45 e8             	lea    eax,[ebp-0x18]
   1ff6a:	50                   	push   eax
   1ff6b:	e8 99 56 00 00       	call   25609 <memset>
   1ff70:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:390
    tail_str[0] = '~';
   1ff73:	c6 45 e8 7e          	mov    BYTE PTR [ebp-0x18],0x7e
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:391
    fatfs_itoa(tailNum, tail_str+1);
   1ff77:	8d 45 e8             	lea    eax,[ebp-0x18]
   1ff7a:	83 c0 01             	add    eax,0x1
   1ff7d:	83 ec 08             	sub    esp,0x8
   1ff80:	50                   	push   eax
   1ff81:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1ff84:	e8 14 ff ff ff       	call   1fe9d <fatfs_itoa>
   1ff89:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:394

    // Copy in base filename
    memcpy(sfn_output, sfn_input, FAT_SFN_SIZE_FULL);
   1ff8c:	83 ec 04             	sub    esp,0x4
   1ff8f:	6a 0b                	push   0xb
   1ff91:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1ff94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ff97:	e8 20 61 00 00       	call   260bc <memcpy>
   1ff9c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:397

    // Overwrite with tail
    tail_chars = (int)strlen(tail_str);
   1ff9f:	83 ec 0c             	sub    esp,0xc
   1ffa2:	8d 45 e8             	lea    eax,[ebp-0x18]
   1ffa5:	50                   	push   eax
   1ffa6:	e8 81 79 00 00       	call   2792c <strlen>
   1ffab:	83 c4 10             	add    esp,0x10
   1ffae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:398
    memcpy(sfn_output+(FAT_SFN_SIZE_PARTIAL-tail_chars), tail_str, tail_chars);
   1ffb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ffb4:	ba 08 00 00 00       	mov    edx,0x8
   1ffb9:	2b 55 f4             	sub    edx,DWORD PTR [ebp-0xc]
   1ffbc:	89 d1                	mov    ecx,edx
   1ffbe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ffc1:	01 ca                	add    edx,ecx
   1ffc3:	83 ec 04             	sub    esp,0x4
   1ffc6:	50                   	push   eax
   1ffc7:	8d 45 e8             	lea    eax,[ebp-0x18]
   1ffca:	50                   	push   eax
   1ffcb:	52                   	push   edx
   1ffcc:	e8 eb 60 00 00       	call   260bc <memcpy>
   1ffd1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:400

    return 1;
   1ffd4:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:401 (discriminator 1)
}
   1ffd9:	c9                   	leave  
   1ffda:	c3                   	ret    

0001ffdb <fatfs_convert_from_fat_time>:
fatfs_convert_from_fat_time():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:409
//-----------------------------------------------------------------------------
// fatfs_convert_from_fat_time: Convert FAT time to h/m/s
//-----------------------------------------------------------------------------
#if FATFS_INC_TIME_DATE_SUPPORT
void fatfs_convert_from_fat_time(uint16 fat_time, int *hours, int *minutes, int *seconds)
{
   1ffdb:	55                   	push   ebp
   1ffdc:	89 e5                	mov    ebp,esp
   1ffde:	83 ec 04             	sub    esp,0x4
   1ffe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ffe4:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:410
    *hours = (fat_time >> FAT_TIME_HOURS_SHIFT) & FAT_TIME_HOURS_MASK;
   1ffe8:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1ffec:	66 c1 e8 0b          	shr    ax,0xb
   1fff0:	0f b7 c0             	movzx  eax,ax
   1fff3:	83 e0 1f             	and    eax,0x1f
   1fff6:	89 c2                	mov    edx,eax
   1fff8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fffb:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:411
    *minutes = (fat_time >> FAT_TIME_MINUTES_SHIFT) & FAT_TIME_MINUTES_MASK;
   1fffd:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   20001:	66 c1 e8 05          	shr    ax,0x5
   20005:	0f b7 c0             	movzx  eax,ax
   20008:	83 e0 3f             	and    eax,0x3f
   2000b:	89 c2                	mov    edx,eax
   2000d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20010:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:412
    *seconds = (fat_time >> FAT_TIME_SECONDS_SHIFT) & FAT_TIME_SECONDS_MASK;
   20012:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   20016:	83 e0 1f             	and    eax,0x1f
   20019:	89 c2                	mov    edx,eax
   2001b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   2001e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:413
    *seconds = *seconds * FAT_TIME_SECONDS_SCALE;
   20020:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   20023:	8b 00                	mov    eax,DWORD PTR [eax]
   20025:	8d 14 00             	lea    edx,[eax+eax*1]
   20028:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   2002b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:414
}
   2002d:	90                   	nop
   2002e:	c9                   	leave  
   2002f:	c3                   	ret    

00020030 <fatfs_convert_from_fat_date>:
fatfs_convert_from_fat_date():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:419
//-----------------------------------------------------------------------------
// fatfs_convert_from_fat_date: Convert FAT date to d/m/y
//-----------------------------------------------------------------------------
void fatfs_convert_from_fat_date(uint16 fat_date, int *day, int *month, int *year)
{
   20030:	55                   	push   ebp
   20031:	89 e5                	mov    ebp,esp
   20033:	83 ec 04             	sub    esp,0x4
   20036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20039:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:420
    *day = (fat_date >> FAT_DATE_DAY_SHIFT) & FAT_DATE_DAY_MASK;
   2003d:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   20041:	83 e0 1f             	and    eax,0x1f
   20044:	89 c2                	mov    edx,eax
   20046:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20049:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:421
    *month = (fat_date >> FAT_DATE_MONTH_SHIFT) & FAT_DATE_MONTH_MASK;
   2004b:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   2004f:	66 c1 e8 05          	shr    ax,0x5
   20053:	0f b7 c0             	movzx  eax,ax
   20056:	83 e0 0f             	and    eax,0xf
   20059:	89 c2                	mov    edx,eax
   2005b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2005e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:422
    *year = (fat_date >> FAT_DATE_YEAR_SHIFT) & FAT_DATE_YEAR_MASK;
   20060:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   20064:	66 c1 e8 09          	shr    ax,0x9
   20068:	0f b7 c0             	movzx  eax,ax
   2006b:	83 e0 7f             	and    eax,0x7f
   2006e:	89 c2                	mov    edx,eax
   20070:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   20073:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:423
    *year = *year + FAT_DATE_YEAR_OFFSET;
   20075:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   20078:	8b 00                	mov    eax,DWORD PTR [eax]
   2007a:	8d 90 bc 07 00 00    	lea    edx,[eax+0x7bc]
   20080:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   20083:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:424
}
   20085:	90                   	nop
   20086:	c9                   	leave  
   20087:	c3                   	ret    

00020088 <fatfs_convert_to_fat_time>:
fatfs_convert_to_fat_time():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:429
//-----------------------------------------------------------------------------
// fatfs_convert_to_fat_time: Convert h/m/s to FAT time
//-----------------------------------------------------------------------------
uint16 fatfs_convert_to_fat_time(int hours, int minutes, int seconds)
{
   20088:	55                   	push   ebp
   20089:	89 e5                	mov    ebp,esp
   2008b:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:430
    uint16 fat_time = 0;
   2008e:	66 c7 45 fe 00 00    	mov    WORD PTR [ebp-0x2],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:433

    // Most FAT times are to a resolution of 2 seconds
    seconds /= FAT_TIME_SECONDS_SCALE;
   20094:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20097:	89 c2                	mov    edx,eax
   20099:	c1 ea 1f             	shr    edx,0x1f
   2009c:	01 d0                	add    eax,edx
   2009e:	d1 f8                	sar    eax,1
   200a0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:435

    fat_time = (hours & FAT_TIME_HOURS_MASK) << FAT_TIME_HOURS_SHIFT;
   200a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   200a6:	c1 e0 0b             	shl    eax,0xb
   200a9:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:436
    fat_time|= (minutes & FAT_TIME_MINUTES_MASK) << FAT_TIME_MINUTES_SHIFT;
   200ad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   200b0:	83 e0 3f             	and    eax,0x3f
   200b3:	c1 e0 05             	shl    eax,0x5
   200b6:	89 c2                	mov    edx,eax
   200b8:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   200bc:	09 d0                	or     eax,edx
   200be:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:437
    fat_time|= (seconds & FAT_TIME_SECONDS_MASK) << FAT_TIME_SECONDS_SHIFT;
   200c2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   200c5:	83 e0 1f             	and    eax,0x1f
   200c8:	89 c2                	mov    edx,eax
   200ca:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   200ce:	09 d0                	or     eax,edx
   200d0:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:439

    return fat_time;
   200d4:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:440
}
   200d8:	c9                   	leave  
   200d9:	c3                   	ret    

000200da <fatfs_convert_to_fat_date>:
fatfs_convert_to_fat_date():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:445
//-----------------------------------------------------------------------------
// fatfs_convert_to_fat_date: Convert d/m/y to FAT date
//-----------------------------------------------------------------------------
uint16 fatfs_convert_to_fat_date(int day, int month, int year)
{
   200da:	55                   	push   ebp
   200db:	89 e5                	mov    ebp,esp
   200dd:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:446
    uint16 fat_date = 0;
   200e0:	66 c7 45 fe 00 00    	mov    WORD PTR [ebp-0x2],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:449

    // FAT dates are relative to 1980
    if (year >= FAT_DATE_YEAR_OFFSET)
   200e6:	81 7d 10 bb 07 00 00 	cmp    DWORD PTR [ebp+0x10],0x7bb
   200ed:	7e 07                	jle    200f6 <fatfs_convert_to_fat_date+0x1c>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:450
        year -= FAT_DATE_YEAR_OFFSET;
   200ef:	81 6d 10 bc 07 00 00 	sub    DWORD PTR [ebp+0x10],0x7bc
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:452

    fat_date = (day & FAT_DATE_DAY_MASK) << FAT_DATE_DAY_SHIFT;
   200f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   200f9:	83 e0 1f             	and    eax,0x1f
   200fc:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:453
    fat_date|= (month & FAT_DATE_MONTH_MASK) << FAT_DATE_MONTH_SHIFT;
   20100:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20103:	83 e0 0f             	and    eax,0xf
   20106:	c1 e0 05             	shl    eax,0x5
   20109:	89 c2                	mov    edx,eax
   2010b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   2010f:	09 d0                	or     eax,edx
   20111:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:454
    fat_date|= (year & FAT_DATE_YEAR_MASK) << FAT_DATE_YEAR_SHIFT;
   20115:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20118:	c1 e0 09             	shl    eax,0x9
   2011b:	89 c2                	mov    edx,eax
   2011d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   20121:	09 d0                	or     eax,edx
   20123:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:456

    return fat_date;
   20127:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:457
}
   2012b:	c9                   	leave  
   2012c:	c3                   	ret    
   2012d:	66 90                	xchg   ax,ax
   2012f:	90                   	nop

00020130 <fatfs_total_path_levels>:
fatfs_total_path_levels():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:45
//        c:\folder\file.zip
//        /dev/etc/samba.conf
// Returns: -1 = Error, 0 or more = Ok
//-----------------------------------------------------------------------------
int fatfs_total_path_levels(char *path)
{
   20130:	55                   	push   ebp
   20131:	89 e5                	mov    ebp,esp
   20133:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:46
    int levels = 0;
   20136:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:49
    char expectedchar;

    if (!path)
   2013d:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   20141:	75 07                	jne    2014a <fatfs_total_path_levels+0x1a>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:50
        return -1;
   20143:	b8 ff ff ff ff       	mov    eax,0xffffffff
   20148:	eb 74                	jmp    201be <fatfs_total_path_levels+0x8e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:55

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
   2014a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2014d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20150:	3c 2f                	cmp    al,0x2f
   20152:	75 0a                	jne    2015e <fatfs_total_path_levels+0x2e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:57
    {
        expectedchar = '/';
   20154:	c6 45 fb 2f          	mov    BYTE PTR [ebp-0x5],0x2f
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:58
        path++;
   20158:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   2015c:	eb 50                	jmp    201ae <fatfs_total_path_levels+0x7e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:60
    }
    else if (path[1] == ':' || path[2] == '\\')
   2015e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20161:	83 c0 01             	add    eax,0x1
   20164:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20167:	3c 3a                	cmp    al,0x3a
   20169:	74 0d                	je     20178 <fatfs_total_path_levels+0x48>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:60 (discriminator 1)
   2016b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2016e:	83 c0 02             	add    eax,0x2
   20171:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20174:	3c 5c                	cmp    al,0x5c
   20176:	75 0a                	jne    20182 <fatfs_total_path_levels+0x52>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:62
    {
        expectedchar = '\\';
   20178:	c6 45 fb 5c          	mov    BYTE PTR [ebp-0x5],0x5c
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:63
        path += 3;
   2017c:	83 45 08 03          	add    DWORD PTR [ebp+0x8],0x3
   20180:	eb 07                	jmp    20189 <fatfs_total_path_levels+0x59>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:66
    }
    else
        return -1;
   20182:	b8 ff ff ff ff       	mov    eax,0xffffffff
   20187:	eb 35                	jmp    201be <fatfs_total_path_levels+0x8e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:69

    // Count levels in path string
    while (*path)
   20189:	eb 23                	jmp    201ae <fatfs_total_path_levels+0x7e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:75
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
   2018b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2018e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20191:	3a 45 fb             	cmp    al,BYTE PTR [ebp-0x5]
   20194:	75 06                	jne    2019c <fatfs_total_path_levels+0x6c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:75 (discriminator 1)
   20196:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   2019a:	eb 0e                	jmp    201aa <fatfs_total_path_levels+0x7a>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:76
            path++;
   2019c:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:72

    // Count levels in path string
    while (*path)
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
   201a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   201a3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   201a6:	84 c0                	test   al,al
   201a8:	75 e1                	jne    2018b <fatfs_total_path_levels+0x5b>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:80
            if (*path == expectedchar) { path++; break; }
            path++;
        }

        // Increase number of subdirs founds
        levels++;
   201aa:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:69
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
   201ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   201b1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   201b4:	84 c0                	test   al,al
   201b6:	75 e8                	jne    201a0 <fatfs_total_path_levels+0x70>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:84
        // Increase number of subdirs founds
        levels++;
    }

    // Subtract the file itself
    return levels-1;
   201b8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   201bb:	83 e8 01             	sub    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:85
}
   201be:	c9                   	leave  
   201bf:	c3                   	ret    

000201c0 <fatfs_get_substring>:
fatfs_get_substring():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:93
// (or file) at the specified level.
// E.g. C:\folder\file.zip : Level 0 = C:\folder, Level 1 = file.zip
// Returns: -1 = Error, 0 = Ok
//-----------------------------------------------------------------------------
int fatfs_get_substring(char *path, int levelreq, char *output, int max_len)
{
   201c0:	55                   	push   ebp
   201c1:	89 e5                	mov    ebp,esp
   201c3:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:95
    int i;
    int pathlen=0;
   201c6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:96
    int levels=0;
   201cd:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:97
    int copypnt=0;
   201d4:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:100
    char expectedchar;

    if (!path || max_len <= 0)
   201db:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   201df:	74 06                	je     201e7 <fatfs_get_substring+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:100 (discriminator 1)
   201e1:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   201e5:	7f 0a                	jg     201f1 <fatfs_get_substring+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:101
        return -1;
   201e7:	b8 ff ff ff ff       	mov    eax,0xffffffff
   201ec:	e9 d2 00 00 00       	jmp    202c3 <fatfs_get_substring+0x103>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:106

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
   201f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   201f4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   201f7:	3c 2f                	cmp    al,0x2f
   201f9:	75 0a                	jne    20205 <fatfs_get_substring+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:108
    {
        expectedchar = '/';
   201fb:	c6 45 eb 2f          	mov    BYTE PTR [ebp-0x15],0x2f
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:109
        path++;
   201ff:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   20203:	eb 2e                	jmp    20233 <fatfs_get_substring+0x73>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:111
    }
    else if (path[1] == ':' || path[2] == '\\')
   20205:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20208:	83 c0 01             	add    eax,0x1
   2020b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2020e:	3c 3a                	cmp    al,0x3a
   20210:	74 0d                	je     2021f <fatfs_get_substring+0x5f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:111 (discriminator 1)
   20212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20215:	83 c0 02             	add    eax,0x2
   20218:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2021b:	3c 5c                	cmp    al,0x5c
   2021d:	75 0a                	jne    20229 <fatfs_get_substring+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:113
    {
        expectedchar = '\\';
   2021f:	c6 45 eb 5c          	mov    BYTE PTR [ebp-0x15],0x5c
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:114
        path += 3;
   20223:	83 45 08 03          	add    DWORD PTR [ebp+0x8],0x3
   20227:	eb 0a                	jmp    20233 <fatfs_get_substring+0x73>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:117
    }
    else
        return -1;
   20229:	b8 ff ff ff ff       	mov    eax,0xffffffff
   2022e:	e9 90 00 00 00       	jmp    202c3 <fatfs_get_substring+0x103>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:120

    // Get string length of path
    pathlen = (int)strlen (path);
   20233:	83 ec 0c             	sub    esp,0xc
   20236:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20239:	e8 ee 76 00 00       	call   2792c <strlen>
   2023e:	83 c4 10             	add    esp,0x10
   20241:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:123

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
   20244:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   2024b:	eb 4d                	jmp    2029a <fatfs_get_substring+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:126
    {
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;
   2024d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20250:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20253:	3a 45 eb             	cmp    al,BYTE PTR [ebp-0x15]
   20256:	75 04                	jne    2025c <fatfs_get_substring+0x9c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:126 (discriminator 1)
   20258:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:129

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1)))
   2025c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2025f:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   20262:	75 2e                	jne    20292 <fatfs_get_substring+0xd2>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:129 (discriminator 1)
   20264:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20267:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2026a:	3a 45 eb             	cmp    al,BYTE PTR [ebp-0x15]
   2026d:	74 23                	je     20292 <fatfs_get_substring+0xd2>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:129 (discriminator 2)
   2026f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   20272:	83 e8 01             	sub    eax,0x1
   20275:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   20278:	7e 18                	jle    20292 <fatfs_get_substring+0xd2>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:130
            output[copypnt++] = *path;
   2027a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2027d:	8d 50 01             	lea    edx,[eax+0x1]
   20280:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   20283:	89 c2                	mov    edx,eax
   20285:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20288:	01 c2                	add    edx,eax
   2028a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2028d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20290:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:133 (discriminator 2)

        // Increment through path string
        path++;
   20292:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:123 (discriminator 2)

    // Get string length of path
    pathlen = (int)strlen (path);

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
   20296:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:123 (discriminator 1)
   2029a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2029d:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   202a0:	7c ab                	jl     2024d <fatfs_get_substring+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:137
        // Increment through path string
        path++;
    }

    // Null Terminate
    output[copypnt] = '\0';
   202a2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   202a5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   202a8:	01 d0                	add    eax,edx
   202aa:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:140

    // If a string was copied return 0 else return 1
    if (output[0] != '\0')
   202ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   202b0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   202b3:	84 c0                	test   al,al
   202b5:	74 07                	je     202be <fatfs_get_substring+0xfe>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:141
        return 0;    // OK
   202b7:	b8 00 00 00 00       	mov    eax,0x0
   202bc:	eb 05                	jmp    202c3 <fatfs_get_substring+0x103>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:143
    else
        return -1;    // Error
   202be:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:144
}
   202c3:	c9                   	leave  
   202c4:	c3                   	ret    

000202c5 <fatfs_split_path>:
fatfs_split_path():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:152
// Returned is the path string and file Name string
// E.g. C:\folder\file.zip -> path = C:\folder  filename = file.zip
// E.g. C:\file.zip -> path = [blank]  filename = file.zip
//-----------------------------------------------------------------------------
int fatfs_split_path(char *full_path, char *path, int max_path, char *filename, int max_filename)
{
   202c5:	55                   	push   ebp
   202c6:	89 e5                	mov    ebp,esp
   202c8:	53                   	push   ebx
   202c9:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:156
    int strindex;

    // Count the levels to the filepath
    int levels = fatfs_total_path_levels(full_path);
   202cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   202cf:	e8 5c fe ff ff       	call   20130 <fatfs_total_path_levels>
   202d4:	83 c4 04             	add    esp,0x4
   202d7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:157
    if (levels == -1)
   202da:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   202de:	75 0a                	jne    202ea <fatfs_split_path+0x25>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:158
        return -1;
   202e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
   202e5:	e9 88 00 00 00       	jmp    20372 <fatfs_split_path+0xad>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:161

    // Get filename part of string
    if (fatfs_get_substring(full_path, levels, filename, max_filename) != 0)
   202ea:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   202ed:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   202f0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   202f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   202f6:	e8 c5 fe ff ff       	call   201c0 <fatfs_get_substring>
   202fb:	83 c4 10             	add    esp,0x10
   202fe:	85 c0                	test   eax,eax
   20300:	74 07                	je     20309 <fatfs_split_path+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:162
        return -1;
   20302:	b8 ff ff ff ff       	mov    eax,0xffffffff
   20307:	eb 69                	jmp    20372 <fatfs_split_path+0xad>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:165

    // If root file
    if (levels == 0)
   20309:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   2030d:	75 08                	jne    20317 <fatfs_split_path+0x52>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:166
        path[0] = '\0';
   2030f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20312:	c6 00 00             	mov    BYTE PTR [eax],0x0
   20315:	eb 56                	jmp    2036d <fatfs_split_path+0xa8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:169
    else
    {
        strindex = (int)strlen(full_path) - (int)strlen(filename);
   20317:	83 ec 0c             	sub    esp,0xc
   2031a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2031d:	e8 0a 76 00 00       	call   2792c <strlen>
   20322:	83 c4 10             	add    esp,0x10
   20325:	89 c3                	mov    ebx,eax
   20327:	83 ec 0c             	sub    esp,0xc
   2032a:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   2032d:	e8 fa 75 00 00       	call   2792c <strlen>
   20332:	83 c4 10             	add    esp,0x10
   20335:	29 c3                	sub    ebx,eax
   20337:	89 d8                	mov    eax,ebx
   20339:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:170
        if (strindex > max_path)
   2033c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2033f:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   20342:	7e 06                	jle    2034a <fatfs_split_path+0x85>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:171
            strindex = max_path;
   20344:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20347:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:173

        memcpy(path, full_path, strindex);
   2034a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2034d:	83 ec 04             	sub    esp,0x4
   20350:	50                   	push   eax
   20351:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20354:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   20357:	e8 60 5d 00 00       	call   260bc <memcpy>
   2035c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:174
        path[strindex-1] = '\0';
   2035f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20362:	8d 50 ff             	lea    edx,[eax-0x1]
   20365:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20368:	01 d0                	add    eax,edx
   2036a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:177
    }

    return 0;
   2036d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:178
}
   20372:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   20375:	c9                   	leave  
   20376:	c3                   	ret    

00020377 <FileString_StrCmpNoCase>:
FileString_StrCmpNoCase():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:183
//-----------------------------------------------------------------------------
// FileString_StrCmpNoCase: Compare two strings case with case sensitivity
//-----------------------------------------------------------------------------
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
   20377:	55                   	push   ebp
   20378:	89 e5                	mov    ebp,esp
   2037a:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:187
    int diff;
    char a,b;

    while (n--)
   2037d:	eb 74                	jmp    203f3 <FileString_StrCmpNoCase+0x7c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:189
    {
        a = *s1;
   2037f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20382:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20385:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:190
        b = *s2;
   20388:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2038b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2038e:	88 45 fe             	mov    BYTE PTR [ebp-0x2],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:193

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
   20391:	80 7d ff 40          	cmp    BYTE PTR [ebp-0x1],0x40
   20395:	7e 10                	jle    203a7 <FileString_StrCmpNoCase+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:193 (discriminator 1)
   20397:	80 7d ff 5a          	cmp    BYTE PTR [ebp-0x1],0x5a
   2039b:	7f 0a                	jg     203a7 <FileString_StrCmpNoCase+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:194
            a+= 32;
   2039d:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   203a1:	83 c0 20             	add    eax,0x20
   203a4:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:195
        if ((b>='A') && (b<='Z'))
   203a7:	80 7d fe 40          	cmp    BYTE PTR [ebp-0x2],0x40
   203ab:	7e 10                	jle    203bd <FileString_StrCmpNoCase+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:195 (discriminator 1)
   203ad:	80 7d fe 5a          	cmp    BYTE PTR [ebp-0x2],0x5a
   203b1:	7f 0a                	jg     203bd <FileString_StrCmpNoCase+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:196
            b+= 32;
   203b3:	0f b6 45 fe          	movzx  eax,BYTE PTR [ebp-0x2]
   203b7:	83 c0 20             	add    eax,0x20
   203ba:	88 45 fe             	mov    BYTE PTR [ebp-0x2],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:198

        diff = a - b;
   203bd:	0f be 55 ff          	movsx  edx,BYTE PTR [ebp-0x1]
   203c1:	0f be 45 fe          	movsx  eax,BYTE PTR [ebp-0x2]
   203c5:	29 c2                	sub    edx,eax
   203c7:	89 d0                	mov    eax,edx
   203c9:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:201

        // If different
        if (diff)
   203cc:	83 7d f8 00          	cmp    DWORD PTR [ebp-0x8],0x0
   203d0:	74 05                	je     203d7 <FileString_StrCmpNoCase+0x60>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:202
            return diff;
   203d2:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   203d5:	eb 32                	jmp    20409 <FileString_StrCmpNoCase+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:205

        // If run out of strings
        if ( (*s1 == 0) || (*s2 == 0) )
   203d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   203da:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   203dd:	84 c0                	test   al,al
   203df:	74 23                	je     20404 <FileString_StrCmpNoCase+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:205 (discriminator 1)
   203e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   203e4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   203e7:	84 c0                	test   al,al
   203e9:	74 19                	je     20404 <FileString_StrCmpNoCase+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:208
            break;

        s1++;
   203eb:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:209
        s2++;
   203ef:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:187
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
   203f3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   203f6:	8d 50 ff             	lea    edx,[eax-0x1]
   203f9:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   203fc:	85 c0                	test   eax,eax
   203fe:	0f 85 7b ff ff ff    	jne    2037f <FileString_StrCmpNoCase+0x8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:211
            break;

        s1++;
        s2++;
    }
    return 0;
   20404:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:212
}
   20409:	c9                   	leave  
   2040a:	c3                   	ret    

0002040b <FileString_GetExtension>:
FileString_GetExtension():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:218
//-----------------------------------------------------------------------------
// FileString_GetExtension: Get index to extension within filename
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_GetExtension(char *str)
{
   2040b:	55                   	push   ebp
   2040c:	89 e5                	mov    ebp,esp
   2040e:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:219
    int dotPos = -1;
   20411:	c7 45 fc ff ff ff ff 	mov    DWORD PTR [ebp-0x4],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:220
    char *strSrc = str;
   20418:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2041b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:223

    // Find last '.' in string (if at all)
    while (*strSrc)
   2041e:	eb 1b                	jmp    2043b <FileString_GetExtension+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:225
    {
        if (*strSrc=='.')
   20420:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   20423:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20426:	3c 2e                	cmp    al,0x2e
   20428:	75 0d                	jne    20437 <FileString_GetExtension+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:226
            dotPos = (int)(strSrc-str);
   2042a:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   2042d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20430:	29 c2                	sub    edx,eax
   20432:	89 d0                	mov    eax,edx
   20434:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:228

        strSrc++;
   20437:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:223
{
    int dotPos = -1;
    char *strSrc = str;

    // Find last '.' in string (if at all)
    while (*strSrc)
   2043b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   2043e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20441:	84 c0                	test   al,al
   20443:	75 db                	jne    20420 <FileString_GetExtension+0x15>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:231
            dotPos = (int)(strSrc-str);

        strSrc++;
    }

    return dotPos;
   20445:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:232
}
   20448:	c9                   	leave  
   20449:	c3                   	ret    

0002044a <FileString_TrimLength>:
FileString_TrimLength():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:238
//-----------------------------------------------------------------------------
// FileString_TrimLength: Get length of string excluding trailing spaces
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
   2044a:	55                   	push   ebp
   2044b:	89 e5                	mov    ebp,esp
   2044d:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:239
    int length = strLen;
   20450:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20453:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:240
    char *strSrc = str+strLen-1;
   20456:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20459:	8d 50 ff             	lea    edx,[eax-0x1]
   2045c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2045f:	01 d0                	add    eax,edx
   20461:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:243

    // Find last non white space
    while (strLen != 0)
   20464:	eb 1f                	jmp    20485 <FileString_TrimLength+0x3b>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:245
    {
        if (*strSrc == ' ')
   20466:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   20469:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2046c:	3c 20                	cmp    al,0x20
   2046e:	75 1d                	jne    2048d <FileString_TrimLength+0x43>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:246
            length = (int)(strSrc - str);
   20470:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   20473:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20476:	29 c2                	sub    edx,eax
   20478:	89 d0                	mov    eax,edx
   2047a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:250
        else
            break;

        strSrc--;
   2047d:	83 6d f8 01          	sub    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:251
        strLen--;
   20481:	83 6d 0c 01          	sub    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:243
{
    int length = strLen;
    char *strSrc = str+strLen-1;

    // Find last non white space
    while (strLen != 0)
   20485:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   20489:	75 db                	jne    20466 <FileString_TrimLength+0x1c>
   2048b:	eb 01                	jmp    2048e <FileString_TrimLength+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:248
    {
        if (*strSrc == ' ')
            length = (int)(strSrc - str);
        else
            break;
   2048d:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:254

        strSrc--;
        strLen--;
    }

    return length;
   2048e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:255
}
   20491:	c9                   	leave  
   20492:	c3                   	ret    

00020493 <fatfs_compare_names>:
fatfs_compare_names():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:261
//-----------------------------------------------------------------------------
// fatfs_compare_names: Compare two filenames (without copying or changing origonals)
// Returns 1 if match, 0 if not
//-----------------------------------------------------------------------------
int fatfs_compare_names(char* strA, char* strB)
{
   20493:	55                   	push   ebp
   20494:	89 e5                	mov    ebp,esp
   20496:	53                   	push   ebx
   20497:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:262
    char *ext1 = NULL;
   2049a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:263
    char *ext2 = NULL;
   204a1:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:268
    int ext1Pos, ext2Pos;
    int file1Len, file2Len;

    // Get both files extension
    ext1Pos = FileString_GetExtension(strA);
   204a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   204ab:	e8 5b ff ff ff       	call   2040b <FileString_GetExtension>
   204b0:	83 c4 04             	add    esp,0x4
   204b3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:269
    ext2Pos = FileString_GetExtension(strB);
   204b6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   204b9:	e8 4d ff ff ff       	call   2040b <FileString_GetExtension>
   204be:	83 c4 04             	add    esp,0x4
   204c1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:274

    // NOTE: Extension position can be different for matching
    // filename if trailing space are present before it!
    // Check that if one has an extension, so does the other
    if ((ext1Pos==-1) && (ext2Pos!=-1))
   204c4:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   204c8:	75 10                	jne    204da <fatfs_compare_names+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:274 (discriminator 1)
   204ca:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
   204ce:	74 0a                	je     204da <fatfs_compare_names+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:275
        return 0;
   204d0:	b8 00 00 00 00       	mov    eax,0x0
   204d5:	e9 21 01 00 00       	jmp    205fb <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:276
    if ((ext2Pos==-1) && (ext1Pos!=-1))
   204da:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
   204de:	75 10                	jne    204f0 <fatfs_compare_names+0x5d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:276 (discriminator 1)
   204e0:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   204e4:	74 0a                	je     204f0 <fatfs_compare_names+0x5d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:277
        return 0;
   204e6:	b8 00 00 00 00       	mov    eax,0x0
   204eb:	e9 0b 01 00 00       	jmp    205fb <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:280

    // If they both have extensions, compare them
    if (ext1Pos!=-1)
   204f0:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   204f4:	0f 84 84 00 00 00    	je     2057e <fatfs_compare_names+0xeb>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:283
    {
        // Set pointer to start of extension
        ext1 = strA+ext1Pos+1;
   204fa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   204fd:	8d 50 01             	lea    edx,[eax+0x1]
   20500:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20503:	01 d0                	add    eax,edx
   20505:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:284
        ext2 = strB+ext2Pos+1;
   20508:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   2050b:	8d 50 01             	lea    edx,[eax+0x1]
   2050e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20511:	01 d0                	add    eax,edx
   20513:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:287

        // Verify that the file extension lengths match!
        if (strlen(ext1) != strlen(ext2))
   20516:	83 ec 0c             	sub    esp,0xc
   20519:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   2051c:	e8 0b 74 00 00       	call   2792c <strlen>
   20521:	83 c4 10             	add    esp,0x10
   20524:	89 c3                	mov    ebx,eax
   20526:	83 ec 0c             	sub    esp,0xc
   20529:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   2052c:	e8 fb 73 00 00       	call   2792c <strlen>
   20531:	83 c4 10             	add    esp,0x10
   20534:	39 c3                	cmp    ebx,eax
   20536:	74 0a                	je     20542 <fatfs_compare_names+0xaf>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:288
            return 0;
   20538:	b8 00 00 00 00       	mov    eax,0x0
   2053d:	e9 b9 00 00 00       	jmp    205fb <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:291

        // If they dont match
        if (FileString_StrCmpNoCase(ext1, ext2, (int)strlen(ext1))!=0)
   20542:	83 ec 0c             	sub    esp,0xc
   20545:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   20548:	e8 df 73 00 00       	call   2792c <strlen>
   2054d:	83 c4 10             	add    esp,0x10
   20550:	83 ec 04             	sub    esp,0x4
   20553:	50                   	push   eax
   20554:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   20557:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   2055a:	e8 18 fe ff ff       	call   20377 <FileString_StrCmpNoCase>
   2055f:	83 c4 10             	add    esp,0x10
   20562:	85 c0                	test   eax,eax
   20564:	74 0a                	je     20570 <fatfs_compare_names+0xdd>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:292
            return 0;
   20566:	b8 00 00 00 00       	mov    eax,0x0
   2056b:	e9 8b 00 00 00       	jmp    205fb <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:295

        // Filelength is upto extensions
        file1Len = ext1Pos;
   20570:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   20573:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:296
        file2Len = ext2Pos;
   20576:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   20579:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   2057c:	eb 22                	jmp    205a0 <fatfs_compare_names+0x10d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:302
    }
    // No extensions
    else
    {
        // Filelength is actual filelength
        file1Len = (int)strlen(strA);
   2057e:	83 ec 0c             	sub    esp,0xc
   20581:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20584:	e8 a3 73 00 00       	call   2792c <strlen>
   20589:	83 c4 10             	add    esp,0x10
   2058c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:303
        file2Len = (int)strlen(strB);
   2058f:	83 ec 0c             	sub    esp,0xc
   20592:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   20595:	e8 92 73 00 00       	call   2792c <strlen>
   2059a:	83 c4 10             	add    esp,0x10
   2059d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:307
    }

    // Find length without trailing spaces (before ext)
    file1Len = FileString_TrimLength(strA, file1Len);
   205a0:	83 ec 08             	sub    esp,0x8
   205a3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   205a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   205a9:	e8 9c fe ff ff       	call   2044a <FileString_TrimLength>
   205ae:	83 c4 10             	add    esp,0x10
   205b1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:308
    file2Len = FileString_TrimLength(strB, file2Len);
   205b4:	83 ec 08             	sub    esp,0x8
   205b7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   205ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   205bd:	e8 88 fe ff ff       	call   2044a <FileString_TrimLength>
   205c2:	83 c4 10             	add    esp,0x10
   205c5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:311

    // Check the file lengths match
    if (file1Len!=file2Len)
   205c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   205cb:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   205ce:	74 07                	je     205d7 <fatfs_compare_names+0x144>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:312
        return 0;
   205d0:	b8 00 00 00 00       	mov    eax,0x0
   205d5:	eb 24                	jmp    205fb <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:315

    // Compare main part of filenames
    if (FileString_StrCmpNoCase(strA, strB, file1Len)!=0)
   205d7:	83 ec 04             	sub    esp,0x4
   205da:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   205dd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   205e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   205e3:	e8 8f fd ff ff       	call   20377 <FileString_StrCmpNoCase>
   205e8:	83 c4 10             	add    esp,0x10
   205eb:	85 c0                	test   eax,eax
   205ed:	74 07                	je     205f6 <fatfs_compare_names+0x163>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:316
        return 0;
   205ef:	b8 00 00 00 00       	mov    eax,0x0
   205f4:	eb 05                	jmp    205fb <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:318
    else
        return 1;
   205f6:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:319
}
   205fb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   205fe:	c9                   	leave  
   205ff:	c3                   	ret    

00020600 <fatfs_string_ends_with_slash>:
fatfs_string_ends_with_slash():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:324
//-----------------------------------------------------------------------------
// fatfs_string_ends_with_slash: Does the string end with a slash (\ or /)
//-----------------------------------------------------------------------------
int fatfs_string_ends_with_slash(char *path)
{
   20600:	55                   	push   ebp
   20601:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:325
    if (path)
   20603:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   20607:	74 38                	je     20641 <fatfs_string_ends_with_slash+0x41>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:327
    {
        while (*path)
   20609:	eb 2c                	jmp    20637 <fatfs_string_ends_with_slash+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:330
        {
            // Last character?
            if (!(*(path+1)))
   2060b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2060e:	83 c0 01             	add    eax,0x1
   20611:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20614:	84 c0                	test   al,al
   20616:	75 1b                	jne    20633 <fatfs_string_ends_with_slash+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:332
            {
                if (*path == '\\' || *path == '/')
   20618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2061b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2061e:	3c 5c                	cmp    al,0x5c
   20620:	74 0a                	je     2062c <fatfs_string_ends_with_slash+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:332 (discriminator 1)
   20622:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20625:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20628:	3c 2f                	cmp    al,0x2f
   2062a:	75 07                	jne    20633 <fatfs_string_ends_with_slash+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:333
                    return 1;
   2062c:	b8 01 00 00 00       	mov    eax,0x1
   20631:	eb 13                	jmp    20646 <fatfs_string_ends_with_slash+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:336
            }

            path++;
   20633:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:327
//-----------------------------------------------------------------------------
int fatfs_string_ends_with_slash(char *path)
{
    if (path)
    {
        while (*path)
   20637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2063a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2063d:	84 c0                	test   al,al
   2063f:	75 ca                	jne    2060b <fatfs_string_ends_with_slash+0xb>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:340

            path++;
        }
    }

    return 0;
   20641:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:341
}
   20646:	5d                   	pop    ebp
   20647:	c3                   	ret    

00020648 <fatfs_get_sfn_display_name>:
fatfs_get_sfn_display_name():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:346
//-----------------------------------------------------------------------------
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
   20648:	55                   	push   ebp
   20649:	89 e5                	mov    ebp,esp
   2064b:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:347
    int len = 0;
   2064e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:348
    while (*in && len <= 11)
   20655:	eb 40                	jmp    20697 <fatfs_get_sfn_display_name+0x4f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:350
    {
        char a = *in++;
   20657:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2065a:	8d 50 01             	lea    edx,[eax+0x1]
   2065d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
   20660:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20663:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:352

        if (a == ' ')
   20666:	80 7d fb 20          	cmp    BYTE PTR [ebp-0x5],0x20
   2066a:	75 02                	jne    2066e <fatfs_get_sfn_display_name+0x26>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:353
            continue;
   2066c:	eb 29                	jmp    20697 <fatfs_get_sfn_display_name+0x4f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:355
        // Make lower case if uppercase
        else if ((a>='A') && (a<='Z'))
   2066e:	80 7d fb 40          	cmp    BYTE PTR [ebp-0x5],0x40
   20672:	7e 10                	jle    20684 <fatfs_get_sfn_display_name+0x3c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:355 (discriminator 1)
   20674:	80 7d fb 5a          	cmp    BYTE PTR [ebp-0x5],0x5a
   20678:	7f 0a                	jg     20684 <fatfs_get_sfn_display_name+0x3c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:356
            a+= 32;
   2067a:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   2067e:	83 c0 20             	add    eax,0x20
   20681:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:358

        *out++ = a;
   20684:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20687:	8d 50 01             	lea    edx,[eax+0x1]
   2068a:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   2068d:	0f b6 55 fb          	movzx  edx,BYTE PTR [ebp-0x5]
   20691:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:359
        len++;
   20693:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:348
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
    int len = 0;
    while (*in && len <= 11)
   20697:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2069a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2069d:	84 c0                	test   al,al
   2069f:	74 06                	je     206a7 <fatfs_get_sfn_display_name+0x5f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:348 (discriminator 1)
   206a1:	83 7d fc 0b          	cmp    DWORD PTR [ebp-0x4],0xb
   206a5:	7e b0                	jle    20657 <fatfs_get_sfn_display_name+0xf>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:362

        *out++ = a;
        len++;
    }

    *out = '\0';
   206a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   206aa:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:363
    return 1;
   206ad:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:364
}
   206b2:	c9                   	leave  
   206b3:	c3                   	ret    

000206b4 <fatfs_get_extension>:
fatfs_get_extension():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:371
// fatfs_get_extension: Get extension of filename passed in 'filename'.
// Returned extension is always lower case.
// Returns: 1 if ok, 0 if not.
//-----------------------------------------------------------------------------
int fatfs_get_extension(char* filename, char* out, int maxlen)
{
   206b4:	55                   	push   ebp
   206b5:	89 e5                	mov    ebp,esp
   206b7:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:372
    int len = 0;
   206ba:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:375

    // Get files extension offset
    int ext_pos = FileString_GetExtension(filename);
   206c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   206c4:	e8 42 fd ff ff       	call   2040b <FileString_GetExtension>
   206c9:	83 c4 04             	add    esp,0x4
   206cc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:377

    if (ext_pos > 0 && out && maxlen)
   206cf:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   206d3:	7e 71                	jle    20746 <fatfs_get_extension+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:377 (discriminator 1)
   206d5:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   206d9:	74 6b                	je     20746 <fatfs_get_extension+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:377 (discriminator 2)
   206db:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   206df:	74 65                	je     20746 <fatfs_get_extension+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:379
    {
        filename += ext_pos + 1;
   206e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   206e4:	83 c0 01             	add    eax,0x1
   206e7:	01 45 08             	add    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:381

        while (*filename && len < (maxlen-1))
   206ea:	eb 38                	jmp    20724 <fatfs_get_extension+0x70>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:383
        {
            char a = *filename++;
   206ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   206ef:	8d 50 01             	lea    edx,[eax+0x1]
   206f2:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   206f5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   206f8:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:386

            // Make lowercase if uppercase
            if ((a>='A') && (a<='Z'))
   206fb:	80 7d fb 40          	cmp    BYTE PTR [ebp-0x5],0x40
   206ff:	7e 10                	jle    20711 <fatfs_get_extension+0x5d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:386 (discriminator 1)
   20701:	80 7d fb 5a          	cmp    BYTE PTR [ebp-0x5],0x5a
   20705:	7f 0a                	jg     20711 <fatfs_get_extension+0x5d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:387
                a+= 32;
   20707:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   2070b:	83 c0 20             	add    eax,0x20
   2070e:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:389

            *out++ = a;
   20711:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20714:	8d 50 01             	lea    edx,[eax+0x1]
   20717:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
   2071a:	0f b6 55 fb          	movzx  edx,BYTE PTR [ebp-0x5]
   2071e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:390
            len++;
   20720:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:381

    if (ext_pos > 0 && out && maxlen)
    {
        filename += ext_pos + 1;

        while (*filename && len < (maxlen-1))
   20724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20727:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2072a:	84 c0                	test   al,al
   2072c:	74 0b                	je     20739 <fatfs_get_extension+0x85>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:381 (discriminator 1)
   2072e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20731:	83 e8 01             	sub    eax,0x1
   20734:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   20737:	7f b3                	jg     206ec <fatfs_get_extension+0x38>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:393

            *out++ = a;
            len++;
        }

        *out = '\0';
   20739:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2073c:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:394
        return 1;
   2073f:	b8 01 00 00 00       	mov    eax,0x1
   20744:	eb 05                	jmp    2074b <fatfs_get_extension+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:397
    }

    return 0;
   20746:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:398
}
   2074b:	c9                   	leave  
   2074c:	c3                   	ret    

0002074d <fatfs_create_path_string>:
fatfs_create_path_string():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:404
//-----------------------------------------------------------------------------
// fatfs_create_path_string: Append path & filename to create file path string.
// Returns: 1 if ok, 0 if not.
//-----------------------------------------------------------------------------
int fatfs_create_path_string(char* path, char *filename, char* out, int maxlen)
{
   2074d:	55                   	push   ebp
   2074e:	89 e5                	mov    ebp,esp
   20750:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:405
    int len = 0;
   20753:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:406
    char last = 0;
   2075a:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:407
    char seperator = '/';
   2075e:	c6 45 fa 2f          	mov    BYTE PTR [ebp-0x6],0x2f
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:409

    if (path && filename && out && maxlen > 0)
   20762:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   20766:	0f 84 bb 00 00 00    	je     20827 <fatfs_create_path_string+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:409 (discriminator 1)
   2076c:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   20770:	0f 84 b1 00 00 00    	je     20827 <fatfs_create_path_string+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:409 (discriminator 2)
   20776:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   2077a:	0f 84 a7 00 00 00    	je     20827 <fatfs_create_path_string+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:409 (discriminator 3)
   20780:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   20784:	0f 8e 9d 00 00 00    	jle    20827 <fatfs_create_path_string+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:411
    {
        while (*path && len < (maxlen-2))
   2078a:	eb 2c                	jmp    207b8 <fatfs_create_path_string+0x6b>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:413
        {
            last = *path++;
   2078c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2078f:	8d 50 01             	lea    edx,[eax+0x1]
   20792:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   20795:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20798:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:414
            if (last == '\\')
   2079b:	80 7d fb 5c          	cmp    BYTE PTR [ebp-0x5],0x5c
   2079f:	75 04                	jne    207a5 <fatfs_create_path_string+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:415
                seperator = '\\';
   207a1:	c6 45 fa 5c          	mov    BYTE PTR [ebp-0x6],0x5c
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:416
            *out++ = last;
   207a5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   207a8:	8d 50 01             	lea    edx,[eax+0x1]
   207ab:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   207ae:	0f b6 55 fb          	movzx  edx,BYTE PTR [ebp-0x5]
   207b2:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:417
            len++;
   207b4:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:411
    char last = 0;
    char seperator = '/';

    if (path && filename && out && maxlen > 0)
    {
        while (*path && len < (maxlen-2))
   207b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   207bb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   207be:	84 c0                	test   al,al
   207c0:	74 0b                	je     207cd <fatfs_create_path_string+0x80>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:411 (discriminator 1)
   207c2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   207c5:	83 e8 02             	sub    eax,0x2
   207c8:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   207cb:	7f bf                	jg     2078c <fatfs_create_path_string+0x3f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:421
            *out++ = last;
            len++;
        }

        // Add a seperator if trailing one not found
        if (last != '\\' && last != '/')
   207cd:	80 7d fb 5c          	cmp    BYTE PTR [ebp-0x5],0x5c
   207d1:	74 32                	je     20805 <fatfs_create_path_string+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:421 (discriminator 1)
   207d3:	80 7d fb 2f          	cmp    BYTE PTR [ebp-0x5],0x2f
   207d7:	74 2c                	je     20805 <fatfs_create_path_string+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:422
            *out++ = seperator;
   207d9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   207dc:	8d 50 01             	lea    edx,[eax+0x1]
   207df:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   207e2:	0f b6 55 fa          	movzx  edx,BYTE PTR [ebp-0x6]
   207e6:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:424

        while (*filename && len < (maxlen-1))
   207e8:	eb 1b                	jmp    20805 <fatfs_create_path_string+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:426
        {
            *out++ = *filename++;
   207ea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   207ed:	8d 50 01             	lea    edx,[eax+0x1]
   207f0:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   207f3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   207f6:	8d 4a 01             	lea    ecx,[edx+0x1]
   207f9:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   207fc:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   207ff:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:427
            len++;
   20801:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:424

        // Add a seperator if trailing one not found
        if (last != '\\' && last != '/')
            *out++ = seperator;

        while (*filename && len < (maxlen-1))
   20805:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20808:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2080b:	84 c0                	test   al,al
   2080d:	74 0b                	je     2081a <fatfs_create_path_string+0xcd>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:424 (discriminator 1)
   2080f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   20812:	83 e8 01             	sub    eax,0x1
   20815:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   20818:	7f d0                	jg     207ea <fatfs_create_path_string+0x9d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:430
        {
            *out++ = *filename++;
            len++;
        }

        *out = '\0';
   2081a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2081d:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:432

        return 1;
   20820:	b8 01 00 00 00       	mov    eax,0x1
   20825:	eb 05                	jmp    2082c <fatfs_create_path_string+0xdf>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:435
    }

    return 0;
   20827:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:436
}
   2082c:	c9                   	leave  
   2082d:	c3                   	ret    
   2082e:	66 90                	xchg   ax,ax

00020830 <fatfs_fat_init>:
fatfs_fat_init():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:61

//-----------------------------------------------------------------------------
// fatfs_fat_init:
//-----------------------------------------------------------------------------
void fatfs_fat_init(struct fatfs *fs)
{
   20830:	55                   	push   ebp
   20831:	89 e5                	mov    ebp,esp
   20833:	53                   	push   ebx
   20834:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:65
    int i;

    // FAT buffer chain head
    fs->fat_buffer_head = NULL;
   20837:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2083a:	c7 80 54 02 00 00 00 	mov    DWORD PTR [eax+0x254],0x0
   20841:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:67

    for (i=0;i<FAT_BUFFERS;i++)
   20844:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   2084b:	e9 cf 00 00 00       	jmp    2091f <fatfs_fat_init+0xef>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:70 (discriminator 3)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   20850:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   20853:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20856:	c1 e0 04             	shl    eax,0x4
   20859:	89 c1                	mov    ecx,eax
   2085b:	c1 e1 05             	shl    ecx,0x5
   2085e:	01 c8                	add    eax,ecx
   20860:	01 d0                	add    eax,edx
   20862:	05 58 04 00 00       	add    eax,0x458
   20867:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:71 (discriminator 3)
        fs->fat_buffers[i].dirty = 0;
   2086d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   20870:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20873:	c1 e0 04             	shl    eax,0x4
   20876:	89 c1                	mov    ecx,eax
   20878:	c1 e1 05             	shl    ecx,0x5
   2087b:	01 c8                	add    eax,ecx
   2087d:	01 d0                	add    eax,edx
   2087f:	05 5c 04 00 00       	add    eax,0x45c
   20884:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:72 (discriminator 3)
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   2088a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2088d:	c1 e0 04             	shl    eax,0x4
   20890:	89 c2                	mov    edx,eax
   20892:	c1 e2 05             	shl    edx,0x5
   20895:	01 d0                	add    eax,edx
   20897:	8d 90 50 02 00 00    	lea    edx,[eax+0x250]
   2089d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   208a0:	01 d0                	add    eax,edx
   208a2:	83 c0 08             	add    eax,0x8
   208a5:	83 ec 04             	sub    esp,0x4
   208a8:	68 00 02 00 00       	push   0x200
   208ad:	6a 00                	push   0x0
   208af:	50                   	push   eax
   208b0:	e8 54 4d 00 00       	call   25609 <memset>
   208b5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:73 (discriminator 3)
        fs->fat_buffers[i].ptr = NULL;
   208b8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   208bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   208be:	c1 e0 04             	shl    eax,0x4
   208c1:	89 c1                	mov    ecx,eax
   208c3:	c1 e1 05             	shl    ecx,0x5
   208c6:	01 c8                	add    eax,ecx
   208c8:	01 d0                	add    eax,edx
   208ca:	05 60 04 00 00       	add    eax,0x460
   208cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:76 (discriminator 3)

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   208d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   208d8:	8b 90 54 02 00 00    	mov    edx,DWORD PTR [eax+0x254]
   208de:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   208e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   208e4:	c1 e0 04             	shl    eax,0x4
   208e7:	89 c3                	mov    ebx,eax
   208e9:	c1 e3 05             	shl    ebx,0x5
   208ec:	01 d8                	add    eax,ebx
   208ee:	01 c8                	add    eax,ecx
   208f0:	05 64 04 00 00       	add    eax,0x464
   208f5:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:77 (discriminator 3)
        fs->fat_buffer_head = &fs->fat_buffers[i];
   208f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   208fa:	c1 e0 04             	shl    eax,0x4
   208fd:	89 c2                	mov    edx,eax
   208ff:	c1 e2 05             	shl    edx,0x5
   20902:	01 d0                	add    eax,edx
   20904:	8d 90 50 02 00 00    	lea    edx,[eax+0x250]
   2090a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2090d:	01 d0                	add    eax,edx
   2090f:	8d 50 08             	lea    edx,[eax+0x8]
   20912:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20915:	89 90 54 02 00 00    	mov    DWORD PTR [eax+0x254],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:67 (discriminator 3)
    int i;

    // FAT buffer chain head
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
   2091b:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:67 (discriminator 1)
   2091f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20923:	0f 8e 27 ff ff ff    	jle    20850 <fatfs_fat_init+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:79

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
    }
}
   20929:	90                   	nop
   2092a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   2092d:	c9                   	leave  
   2092e:	c3                   	ret    

0002092f <fatfs_fat_writeback>:
fatfs_fat_writeback():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:84
//-----------------------------------------------------------------------------
// fatfs_fat_writeback: Writeback 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
static int fatfs_fat_writeback(struct fatfs *fs, struct fat_buffer *pcur)
{
   2092f:	55                   	push   ebp
   20930:	89 e5                	mov    ebp,esp
   20932:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:85
    if (pcur)
   20935:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   20939:	0f 84 9b 00 00 00    	je     209da <fatfs_fat_writeback+0xab>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:88
    {
        // Writeback sector if changed
        if (pcur->dirty)
   2093f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20942:	8b 80 04 02 00 00    	mov    eax,DWORD PTR [eax+0x204]
   20948:	85 c0                	test   eax,eax
   2094a:	0f 84 83 00 00 00    	je     209d3 <fatfs_fat_writeback+0xa4>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:90
        {
            if (fs->disk_io.write_media)
   20950:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20953:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   20956:	85 c0                	test   eax,eax
   20958:	74 6c                	je     209c6 <fatfs_fat_writeback+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:92
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
   2095a:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:93
                uint32 offset = pcur->address - fs->fat_begin_lba;
   20961:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20964:	8b 90 00 02 00 00    	mov    edx,DWORD PTR [eax+0x200]
   2096a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2096d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   20970:	29 c2                	sub    edx,eax
   20972:	89 d0                	mov    eax,edx
   20974:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:96

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
   20977:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2097a:	8d 50 01             	lea    edx,[eax+0x1]
   2097d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20980:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   20983:	39 c2                	cmp    edx,eax
   20985:	77 09                	ja     20990 <fatfs_fat_writeback+0x61>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:97
                    sectors = FAT_BUFFER_SECTORS;
   20987:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
   2098e:	eb 0c                	jmp    2099c <fatfs_fat_writeback+0x6d>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:99
                else
                    sectors = fs->fat_sectors - offset;
   20990:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20993:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   20996:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
   20999:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:101

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
   2099c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2099f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   209a2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   209a5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   209a8:	8b 92 00 02 00 00    	mov    edx,DWORD PTR [edx+0x200]
   209ae:	83 ec 04             	sub    esp,0x4
   209b1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   209b4:	51                   	push   ecx
   209b5:	52                   	push   edx
   209b6:	ff d0                	call   eax
   209b8:	83 c4 10             	add    esp,0x10
   209bb:	85 c0                	test   eax,eax
   209bd:	75 07                	jne    209c6 <fatfs_fat_writeback+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:102
                    return 0;
   209bf:	b8 00 00 00 00       	mov    eax,0x0
   209c4:	eb 19                	jmp    209df <fatfs_fat_writeback+0xb0>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:105
            }

            pcur->dirty = 0;
   209c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   209c9:	c7 80 04 02 00 00 00 	mov    DWORD PTR [eax+0x204],0x0
   209d0:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:108
        }

        return 1;
   209d3:	b8 01 00 00 00       	mov    eax,0x1
   209d8:	eb 05                	jmp    209df <fatfs_fat_writeback+0xb0>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:111
    }
    else
        return 0;
   209da:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:112
}
   209df:	c9                   	leave  
   209e0:	c3                   	ret    

000209e1 <fatfs_fat_read_sector>:
fatfs_fat_read_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:117
//-----------------------------------------------------------------------------
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
   209e1:	55                   	push   ebp
   209e2:	89 e5                	mov    ebp,esp
   209e4:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:118
    struct fat_buffer *last = NULL;
   209e7:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:119
    struct fat_buffer *pcur = fs->fat_buffer_head;
   209ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   209f1:	8b 80 54 02 00 00    	mov    eax,DWORD PTR [eax+0x254]
   209f7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:122

    // Itterate through sector buffer list
    while (pcur)
   209fa:	eb 60                	jmp    20a5c <fatfs_fat_read_sector+0x7b>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:125
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
   209fc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   209ff:	8b 80 00 02 00 00    	mov    eax,DWORD PTR [eax+0x200]
   20a05:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   20a08:	77 11                	ja     20a1b <fatfs_fat_read_sector+0x3a>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:125 (discriminator 1)
   20a0a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20a0d:	8b 80 00 02 00 00    	mov    eax,DWORD PTR [eax+0x200]
   20a13:	83 c0 01             	add    eax,0x1
   20a16:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   20a19:	77 49                	ja     20a64 <fatfs_fat_read_sector+0x83>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:129
            break;

        // End of list?
        if (pcur->next == NULL)
   20a1b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20a1e:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
   20a24:	85 c0                	test   eax,eax
   20a26:	75 22                	jne    20a4a <fatfs_fat_read_sector+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:132
        {
            // Remove buffer from list
            if (last)
   20a28:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20a2c:	74 0f                	je     20a3d <fatfs_fat_read_sector+0x5c>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:133
                last->next = NULL;
   20a2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20a31:	c7 80 0c 02 00 00 00 	mov    DWORD PTR [eax+0x20c],0x0
   20a38:	00 00 00 
   20a3b:	eb 0d                	jmp    20a4a <fatfs_fat_read_sector+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:136
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
   20a3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20a40:	c7 80 54 02 00 00 00 	mov    DWORD PTR [eax+0x254],0x0
   20a47:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:139
        }

        last = pcur;
   20a4a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20a4d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:140
        pcur = pcur->next;
   20a50:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20a53:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
   20a59:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:122
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
   20a5c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20a60:	75 9a                	jne    209fc <fatfs_fat_read_sector+0x1b>
   20a62:	eb 01                	jmp    20a65 <fatfs_fat_read_sector+0x84>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:126
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
            break;
   20a64:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:144
        last = pcur;
        pcur = pcur->next;
    }

    // We found the sector already in FAT buffer chain
    if (pcur)
   20a65:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20a69:	74 29                	je     20a94 <fatfs_fat_read_sector+0xb3>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:146
    {
        pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * FAT_SECTOR_SIZE));
   20a6b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20a6e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20a71:	8b 80 00 02 00 00    	mov    eax,DWORD PTR [eax+0x200]
   20a77:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   20a7a:	29 c1                	sub    ecx,eax
   20a7c:	89 c8                	mov    eax,ecx
   20a7e:	c1 e0 09             	shl    eax,0x9
   20a81:	01 c2                	add    edx,eax
   20a83:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20a86:	89 90 08 02 00 00    	mov    DWORD PTR [eax+0x208],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:147
        return pcur;
   20a8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20a8f:	e9 9e 00 00 00       	jmp    20b32 <fatfs_fat_read_sector+0x151>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:151
    }

    // Else, we removed the last item from the list
    pcur = last;
   20a94:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20a97:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:154

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
   20a9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20a9d:	8b 90 54 02 00 00    	mov    edx,DWORD PTR [eax+0x254]
   20aa3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20aa6:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:155
    fs->fat_buffer_head = pcur;
   20aac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20aaf:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20ab2:	89 90 54 02 00 00    	mov    DWORD PTR [eax+0x254],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:158

    // Writeback sector if changed
    if (pcur->dirty)
   20ab8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20abb:	8b 80 04 02 00 00    	mov    eax,DWORD PTR [eax+0x204]
   20ac1:	85 c0                	test   eax,eax
   20ac3:	74 1c                	je     20ae1 <fatfs_fat_read_sector+0x100>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:159
        if (!fatfs_fat_writeback(fs, pcur))
   20ac5:	83 ec 08             	sub    esp,0x8
   20ac8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   20acb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20ace:	e8 5c fe ff ff       	call   2092f <fatfs_fat_writeback>
   20ad3:	83 c4 10             	add    esp,0x10
   20ad6:	85 c0                	test   eax,eax
   20ad8:	75 07                	jne    20ae1 <fatfs_fat_read_sector+0x100>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:160
            return 0;
   20ada:	b8 00 00 00 00       	mov    eax,0x0
   20adf:	eb 51                	jmp    20b32 <fatfs_fat_read_sector+0x151>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:163

    // Address is now new sector
    pcur->address = sector;
   20ae1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20ae4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20ae7:	89 90 00 02 00 00    	mov    DWORD PTR [eax+0x200],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:166

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
   20aed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20af0:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   20af3:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   20af6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20af9:	8b 92 00 02 00 00    	mov    edx,DWORD PTR [edx+0x200]
   20aff:	83 ec 04             	sub    esp,0x4
   20b02:	6a 01                	push   0x1
   20b04:	51                   	push   ecx
   20b05:	52                   	push   edx
   20b06:	ff d0                	call   eax
   20b08:	83 c4 10             	add    esp,0x10
   20b0b:	85 c0                	test   eax,eax
   20b0d:	75 14                	jne    20b23 <fatfs_fat_read_sector+0x142>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:169
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
   20b0f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20b12:	c7 80 00 02 00 00 ff 	mov    DWORD PTR [eax+0x200],0xffffffff
   20b19:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:170
        return NULL;
   20b1c:	b8 00 00 00 00       	mov    eax,0x0
   20b21:	eb 0f                	jmp    20b32 <fatfs_fat_read_sector+0x151>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:173
    }

    pcur->ptr = pcur->sector;
   20b23:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20b26:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20b29:	89 90 08 02 00 00    	mov    DWORD PTR [eax+0x208],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:174
    return pcur;
   20b2f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:175
}
   20b32:	c9                   	leave  
   20b33:	c3                   	ret    

00020b34 <fatfs_fat_purge>:
fatfs_fat_purge():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:180
//-----------------------------------------------------------------------------
// fatfs_fat_purge: Purge 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
int fatfs_fat_purge(struct fatfs *fs)
{
   20b34:	55                   	push   ebp
   20b35:	89 e5                	mov    ebp,esp
   20b37:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:181
    struct fat_buffer *pcur = fs->fat_buffer_head;
   20b3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20b3d:	8b 80 54 02 00 00    	mov    eax,DWORD PTR [eax+0x254]
   20b43:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:184

    // Itterate through sector buffer list
    while (pcur)
   20b46:	eb 35                	jmp    20b7d <fatfs_fat_purge+0x49>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:187
    {
        // Writeback sector if changed
        if (pcur->dirty)
   20b48:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20b4b:	8b 80 04 02 00 00    	mov    eax,DWORD PTR [eax+0x204]
   20b51:	85 c0                	test   eax,eax
   20b53:	74 1c                	je     20b71 <fatfs_fat_purge+0x3d>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:188
            if (!fatfs_fat_writeback(fs, pcur))
   20b55:	83 ec 08             	sub    esp,0x8
   20b58:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   20b5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20b5e:	e8 cc fd ff ff       	call   2092f <fatfs_fat_writeback>
   20b63:	83 c4 10             	add    esp,0x10
   20b66:	85 c0                	test   eax,eax
   20b68:	75 07                	jne    20b71 <fatfs_fat_purge+0x3d>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:189
                return 0;
   20b6a:	b8 00 00 00 00       	mov    eax,0x0
   20b6f:	eb 17                	jmp    20b88 <fatfs_fat_purge+0x54>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:191

        pcur = pcur->next;
   20b71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20b74:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
   20b7a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:184
int fatfs_fat_purge(struct fatfs *fs)
{
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
   20b7d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20b81:	75 c5                	jne    20b48 <fatfs_fat_purge+0x14>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:194
                return 0;

        pcur = pcur->next;
    }

    return 1;
   20b83:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:195
}
   20b88:	c9                   	leave  
   20b89:	c3                   	ret    

00020b8a <fatfs_find_next_cluster>:
fatfs_find_next_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:206
//-----------------------------------------------------------------------------
// fatfs_find_next_cluster: Return cluster number of next cluster in chain by
// reading FAT table and traversing it. Return 0xffffffff for end of chain.
//-----------------------------------------------------------------------------
uint32 fatfs_find_next_cluster(struct fatfs *fs, uint32 current_cluster)
{
   20b8a:	55                   	push   ebp
   20b8b:	89 e5                	mov    ebp,esp
   20b8d:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:212
    uint32 fat_sector_offset, position;
    uint32 nextcluster;
    struct fat_buffer *pbuf;

    // Why is '..' labelled with cluster 0 when it should be 2 ??
    if (current_cluster == 0)
   20b90:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   20b94:	75 07                	jne    20b9d <fatfs_find_next_cluster+0x13>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:213
        current_cluster = 2;
   20b96:	c7 45 0c 02 00 00 00 	mov    DWORD PTR [ebp+0xc],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:216

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
   20b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20ba0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20ba3:	85 c0                	test   eax,eax
   20ba5:	75 0b                	jne    20bb2 <fatfs_find_next_cluster+0x28>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:217
        fat_sector_offset = current_cluster / 256;
   20ba7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20baa:	c1 e8 08             	shr    eax,0x8
   20bad:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   20bb0:	eb 09                	jmp    20bbb <fatfs_find_next_cluster+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:219
    else
        fat_sector_offset = current_cluster / 128;
   20bb2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20bb5:	c1 e8 07             	shr    eax,0x7
   20bb8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:222

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   20bbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20bbe:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   20bc1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20bc4:	01 d0                	add    eax,edx
   20bc6:	83 ec 08             	sub    esp,0x8
   20bc9:	50                   	push   eax
   20bca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20bcd:	e8 0f fe ff ff       	call   209e1 <fatfs_fat_read_sector>
   20bd2:	83 c4 10             	add    esp,0x10
   20bd5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:223
    if (!pbuf)
   20bd8:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   20bdc:	75 0a                	jne    20be8 <fatfs_find_next_cluster+0x5e>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:224
        return (FAT32_LAST_CLUSTER);
   20bde:	b8 ff ff ff ff       	mov    eax,0xffffffff
   20be3:	e9 2a 01 00 00       	jmp    20d12 <fatfs_find_next_cluster+0x188>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:226

    if (fs->fat_type == FAT_TYPE_16)
   20be8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20beb:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20bee:	85 c0                	test   eax,eax
   20bf0:	75 71                	jne    20c63 <fatfs_find_next_cluster+0xd9>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:229
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (current_cluster - (fat_sector_offset * 256)) * 2;
   20bf2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20bf5:	c1 e0 08             	shl    eax,0x8
   20bf8:	89 c2                	mov    edx,eax
   20bfa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20bfd:	29 d0                	sub    eax,edx
   20bff:	01 c0                	add    eax,eax
   20c01:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:232

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
   20c04:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20c07:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20c0d:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   20c10:	0f b7 d2             	movzx  edx,dx
   20c13:	83 c2 01             	add    edx,0x1
   20c16:	01 d0                	add    eax,edx
   20c18:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20c1b:	0f b6 c0             	movzx  eax,al
   20c1e:	c1 e0 08             	shl    eax,0x8
   20c21:	89 c1                	mov    ecx,eax
   20c23:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20c26:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20c2c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20c2f:	0f b7 c0             	movzx  eax,ax
   20c32:	01 d0                	add    eax,edx
   20c34:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20c37:	0f b6 c0             	movzx  eax,al
   20c3a:	01 c8                	add    eax,ecx
   20c3c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:235

        // If end of chain found
        if (nextcluster >= 0xFFF8 && nextcluster <= 0xFFFF)
   20c3f:	81 7d f0 f7 ff 00 00 	cmp    DWORD PTR [ebp-0x10],0xfff7
   20c46:	0f 86 c3 00 00 00    	jbe    20d0f <fatfs_find_next_cluster+0x185>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:235 (discriminator 1)
   20c4c:	81 7d f0 ff ff 00 00 	cmp    DWORD PTR [ebp-0x10],0xffff
   20c53:	0f 87 b6 00 00 00    	ja     20d0f <fatfs_find_next_cluster+0x185>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:236
            return (FAT32_LAST_CLUSTER);
   20c59:	b8 ff ff ff ff       	mov    eax,0xffffffff
   20c5e:	e9 af 00 00 00       	jmp    20d12 <fatfs_find_next_cluster+0x188>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:241
    }
    else
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (current_cluster - (fat_sector_offset * 128)) * 4;
   20c63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20c66:	c1 e0 07             	shl    eax,0x7
   20c69:	89 c2                	mov    edx,eax
   20c6b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20c6e:	29 d0                	sub    eax,edx
   20c70:	c1 e0 02             	shl    eax,0x2
   20c73:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:244

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);
   20c76:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20c79:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20c7f:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   20c82:	0f b7 d2             	movzx  edx,dx
   20c85:	83 c2 03             	add    edx,0x3
   20c88:	01 d0                	add    eax,edx
   20c8a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20c8d:	0f b6 c0             	movzx  eax,al
   20c90:	c1 e0 18             	shl    eax,0x18
   20c93:	89 c1                	mov    ecx,eax
   20c95:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20c98:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20c9e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   20ca1:	0f b7 d2             	movzx  edx,dx
   20ca4:	83 c2 02             	add    edx,0x2
   20ca7:	01 d0                	add    eax,edx
   20ca9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20cac:	0f b6 c0             	movzx  eax,al
   20caf:	c1 e0 10             	shl    eax,0x10
   20cb2:	01 c1                	add    ecx,eax
   20cb4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20cb7:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20cbd:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   20cc0:	0f b7 d2             	movzx  edx,dx
   20cc3:	83 c2 01             	add    edx,0x1
   20cc6:	01 d0                	add    eax,edx
   20cc8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20ccb:	0f b6 c0             	movzx  eax,al
   20cce:	c1 e0 08             	shl    eax,0x8
   20cd1:	01 c1                	add    ecx,eax
   20cd3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20cd6:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20cdc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20cdf:	0f b7 c0             	movzx  eax,ax
   20ce2:	01 d0                	add    eax,edx
   20ce4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20ce7:	0f b6 c0             	movzx  eax,al
   20cea:	01 c8                	add    eax,ecx
   20cec:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:247

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;
   20cef:	81 65 f0 ff ff ff 0f 	and    DWORD PTR [ebp-0x10],0xfffffff
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:250

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF)
   20cf6:	81 7d f0 f7 ff ff 0f 	cmp    DWORD PTR [ebp-0x10],0xffffff7
   20cfd:	76 10                	jbe    20d0f <fatfs_find_next_cluster+0x185>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:250 (discriminator 1)
   20cff:	81 7d f0 ff ff ff 0f 	cmp    DWORD PTR [ebp-0x10],0xfffffff
   20d06:	77 07                	ja     20d0f <fatfs_find_next_cluster+0x185>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:251
            return (FAT32_LAST_CLUSTER);
   20d08:	b8 ff ff ff ff       	mov    eax,0xffffffff
   20d0d:	eb 03                	jmp    20d12 <fatfs_find_next_cluster+0x188>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:255
    }

    // Else return next cluster
    return (nextcluster);
   20d0f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:256
}
   20d12:	c9                   	leave  
   20d13:	c3                   	ret    

00020d14 <fatfs_set_fs_info_next_free_cluster>:
fatfs_set_fs_info_next_free_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:261
//-----------------------------------------------------------------------------
// fatfs_set_fs_info_next_free_cluster: Write the next free cluster to the FSINFO table
//-----------------------------------------------------------------------------
void fatfs_set_fs_info_next_free_cluster(struct fatfs *fs, uint32 newValue)
{
   20d14:	55                   	push   ebp
   20d15:	89 e5                	mov    ebp,esp
   20d17:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:262
    if (fs->fat_type == FAT_TYPE_16)
   20d1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20d1d:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20d20:	85 c0                	test   eax,eax
   20d22:	0f 84 de 00 00 00    	je     20e06 <fatfs_set_fs_info_next_free_cluster+0xf2>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:267
        ;
    else
    {
        // Load sector to change it
        struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
   20d28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20d2b:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   20d2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20d31:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   20d35:	0f b7 c0             	movzx  eax,ax
   20d38:	01 d0                	add    eax,edx
   20d3a:	83 ec 08             	sub    esp,0x8
   20d3d:	50                   	push   eax
   20d3e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20d41:	e8 9b fc ff ff       	call   209e1 <fatfs_fat_read_sector>
   20d46:	83 c4 10             	add    esp,0x10
   20d49:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:268
        if (!pbuf)
   20d4c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20d50:	0f 84 af 00 00 00    	je     20e05 <fatfs_set_fs_info_next_free_cluster+0xf1>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:272
            return ;

        // Change
        FAT32_SET_32BIT_WORD(pbuf, 492, newValue);
   20d56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20d59:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20d5f:	05 ec 01 00 00       	add    eax,0x1ec
   20d64:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20d67:	88 10                	mov    BYTE PTR [eax],dl
   20d69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20d6c:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20d72:	05 ed 01 00 00       	add    eax,0x1ed
   20d77:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20d7a:	c1 ea 08             	shr    edx,0x8
   20d7d:	88 10                	mov    BYTE PTR [eax],dl
   20d7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20d82:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20d88:	05 ee 01 00 00       	add    eax,0x1ee
   20d8d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20d90:	c1 ea 10             	shr    edx,0x10
   20d93:	88 10                	mov    BYTE PTR [eax],dl
   20d95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20d98:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20d9e:	05 ef 01 00 00       	add    eax,0x1ef
   20da3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20da6:	c1 ea 18             	shr    edx,0x18
   20da9:	88 10                	mov    BYTE PTR [eax],dl
   20dab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20dae:	c7 80 04 02 00 00 01 	mov    DWORD PTR [eax+0x204],0x1
   20db5:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:273
        fs->next_free_cluster = newValue;
   20db8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20dbb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20dbe:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:276

        // Write back FSINFO sector to disk
        if (fs->disk_io.write_media)
   20dc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20dc4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   20dc7:	85 c0                	test   eax,eax
   20dc9:	74 1e                	je     20de9 <fatfs_set_fs_info_next_free_cluster+0xd5>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:277
            fs->disk_io.write_media(pbuf->address, pbuf->sector, 1);
   20dcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20dce:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   20dd1:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   20dd4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   20dd7:	8b 92 00 02 00 00    	mov    edx,DWORD PTR [edx+0x200]
   20ddd:	83 ec 04             	sub    esp,0x4
   20de0:	6a 01                	push   0x1
   20de2:	51                   	push   ecx
   20de3:	52                   	push   edx
   20de4:	ff d0                	call   eax
   20de6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:280

        // Invalidate cache entry
        pbuf->address = FAT32_INVALID_CLUSTER;
   20de9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20dec:	c7 80 00 02 00 00 ff 	mov    DWORD PTR [eax+0x200],0xffffffff
   20df3:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:281
        pbuf->dirty = 0;
   20df6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20df9:	c7 80 04 02 00 00 00 	mov    DWORD PTR [eax+0x204],0x0
   20e00:	00 00 00 
   20e03:	eb 01                	jmp    20e06 <fatfs_set_fs_info_next_free_cluster+0xf2>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:269
    else
    {
        // Load sector to change it
        struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
        if (!pbuf)
            return ;
   20e05:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:283

        // Invalidate cache entry
        pbuf->address = FAT32_INVALID_CLUSTER;
        pbuf->dirty = 0;
    }
}
   20e06:	c9                   	leave  
   20e07:	c3                   	ret    

00020e08 <fatfs_find_blank_cluster>:
fatfs_find_blank_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:289
//-----------------------------------------------------------------------------
// fatfs_find_blank_cluster: Find a free cluster entry by reading the FAT
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_find_blank_cluster(struct fatfs *fs, uint32 start_cluster, uint32 *free_cluster)
{
   20e08:	55                   	push   ebp
   20e09:	89 e5                	mov    ebp,esp
   20e0b:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:292
    uint32 fat_sector_offset, position;
    uint32 nextcluster;
    uint32 current_cluster = start_cluster;
   20e0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20e11:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:298
    struct fat_buffer *pbuf;

    do
    {
        // Find which sector of FAT table to read
        if (fs->fat_type == FAT_TYPE_16)
   20e14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20e17:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20e1a:	85 c0                	test   eax,eax
   20e1c:	75 0b                	jne    20e29 <fatfs_find_blank_cluster+0x21>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:299
            fat_sector_offset = current_cluster / 256;
   20e1e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20e21:	c1 e8 08             	shr    eax,0x8
   20e24:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   20e27:	eb 09                	jmp    20e32 <fatfs_find_blank_cluster+0x2a>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:301
        else
            fat_sector_offset = current_cluster / 128;
   20e29:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20e2c:	c1 e8 07             	shr    eax,0x7
   20e2f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:303

        if ( fat_sector_offset < fs->fat_sectors)
   20e32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20e35:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   20e38:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   20e3b:	0f 86 28 01 00 00    	jbe    20f69 <fatfs_find_blank_cluster+0x161>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:306
        {
            // Read FAT sector into buffer
            pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   20e41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20e44:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   20e47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20e4a:	01 d0                	add    eax,edx
   20e4c:	83 ec 08             	sub    esp,0x8
   20e4f:	50                   	push   eax
   20e50:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20e53:	e8 89 fb ff ff       	call   209e1 <fatfs_fat_read_sector>
   20e58:	83 c4 10             	add    esp,0x10
   20e5b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:307
            if (!pbuf)
   20e5e:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   20e62:	75 0a                	jne    20e6e <fatfs_find_blank_cluster+0x66>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:308
                return 0;
   20e64:	b8 00 00 00 00       	mov    eax,0x0
   20e69:	e9 19 01 00 00       	jmp    20f87 <fatfs_find_blank_cluster+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:310

            if (fs->fat_type == FAT_TYPE_16)
   20e6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20e71:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20e74:	85 c0                	test   eax,eax
   20e76:	75 52                	jne    20eca <fatfs_find_blank_cluster+0xc2>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:313
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 256)) * 2;
   20e78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20e7b:	c1 e0 08             	shl    eax,0x8
   20e7e:	89 c2                	mov    edx,eax
   20e80:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20e83:	29 d0                	sub    eax,edx
   20e85:	01 c0                	add    eax,eax
   20e87:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:316

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
   20e8a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20e8d:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20e93:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   20e96:	0f b7 d2             	movzx  edx,dx
   20e99:	83 c2 01             	add    edx,0x1
   20e9c:	01 d0                	add    eax,edx
   20e9e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20ea1:	0f b6 c0             	movzx  eax,al
   20ea4:	c1 e0 08             	shl    eax,0x8
   20ea7:	89 c1                	mov    ecx,eax
   20ea9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20eac:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20eb2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   20eb5:	0f b7 c0             	movzx  eax,ax
   20eb8:	01 d0                	add    eax,edx
   20eba:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20ebd:	0f b6 c0             	movzx  eax,al
   20ec0:	01 c8                	add    eax,ecx
   20ec2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   20ec5:	e9 93 00 00 00       	jmp    20f5d <fatfs_find_blank_cluster+0x155>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:321
            }
            else
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 128)) * 4;
   20eca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20ecd:	c1 e0 07             	shl    eax,0x7
   20ed0:	89 c2                	mov    edx,eax
   20ed2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20ed5:	29 d0                	sub    eax,edx
   20ed7:	c1 e0 02             	shl    eax,0x2
   20eda:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:324

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);
   20edd:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20ee0:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20ee6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   20ee9:	0f b7 d2             	movzx  edx,dx
   20eec:	83 c2 03             	add    edx,0x3
   20eef:	01 d0                	add    eax,edx
   20ef1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20ef4:	0f b6 c0             	movzx  eax,al
   20ef7:	c1 e0 18             	shl    eax,0x18
   20efa:	89 c1                	mov    ecx,eax
   20efc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20eff:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20f05:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   20f08:	0f b7 d2             	movzx  edx,dx
   20f0b:	83 c2 02             	add    edx,0x2
   20f0e:	01 d0                	add    eax,edx
   20f10:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20f13:	0f b6 c0             	movzx  eax,al
   20f16:	c1 e0 10             	shl    eax,0x10
   20f19:	01 c1                	add    ecx,eax
   20f1b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20f1e:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20f24:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   20f27:	0f b7 d2             	movzx  edx,dx
   20f2a:	83 c2 01             	add    edx,0x1
   20f2d:	01 d0                	add    eax,edx
   20f2f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20f32:	0f b6 c0             	movzx  eax,al
   20f35:	c1 e0 08             	shl    eax,0x8
   20f38:	01 c1                	add    ecx,eax
   20f3a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20f3d:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20f43:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   20f46:	0f b7 c0             	movzx  eax,ax
   20f49:	01 d0                	add    eax,edx
   20f4b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20f4e:	0f b6 c0             	movzx  eax,al
   20f51:	01 c8                	add    eax,ecx
   20f53:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:327

                // Mask out MS 4 bits (its 28bit addressing)
                nextcluster = nextcluster & 0x0FFFFFFF;
   20f56:	81 65 f0 ff ff ff 0f 	and    DWORD PTR [ebp-0x10],0xfffffff
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:330
            }

            if (nextcluster !=0 )
   20f5d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20f61:	74 0d                	je     20f70 <fatfs_find_blank_cluster+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:331
                current_cluster++;
   20f63:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
   20f67:	eb 07                	jmp    20f70 <fatfs_find_blank_cluster+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:335
        }
        else
            // Otherwise, run out of FAT sectors to check...
            return 0;
   20f69:	b8 00 00 00 00       	mov    eax,0x0
   20f6e:	eb 17                	jmp    20f87 <fatfs_find_blank_cluster+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:337
    }
    while (nextcluster != 0x0);
   20f70:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20f74:	0f 85 9a fe ff ff    	jne    20e14 <fatfs_find_blank_cluster+0xc>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:340

    // Found blank entry
    *free_cluster = current_cluster;
   20f7a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20f7d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20f80:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:341
    return 1;
   20f82:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:342
}
   20f87:	c9                   	leave  
   20f88:	c3                   	ret    

00020f89 <fatfs_fat_set_cluster>:
fatfs_fat_set_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:350
// fatfs_fat_set_cluster: Set a cluster link in the chain. NOTE: Immediate
// write (slow).
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_fat_set_cluster(struct fatfs *fs, uint32 cluster, uint32 next_cluster)
{
   20f89:	55                   	push   ebp
   20f8a:	89 e5                	mov    ebp,esp
   20f8c:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:355
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
   20f8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20f92:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20f95:	85 c0                	test   eax,eax
   20f97:	75 0b                	jne    20fa4 <fatfs_fat_set_cluster+0x1b>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:356
        fat_sector_offset = cluster / 256;
   20f99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20f9c:	c1 e8 08             	shr    eax,0x8
   20f9f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   20fa2:	eb 09                	jmp    20fad <fatfs_fat_set_cluster+0x24>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:358
    else
        fat_sector_offset = cluster / 128;
   20fa4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20fa7:	c1 e8 07             	shr    eax,0x7
   20faa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:361

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   20fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20fb0:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   20fb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20fb6:	01 d0                	add    eax,edx
   20fb8:	83 ec 08             	sub    esp,0x8
   20fbb:	50                   	push   eax
   20fbc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20fbf:	e8 1d fa ff ff       	call   209e1 <fatfs_fat_read_sector>
   20fc4:	83 c4 10             	add    esp,0x10
   20fc7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:362
    if (!pbuf)
   20fca:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20fce:	75 0a                	jne    20fda <fatfs_fat_set_cluster+0x51>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:363
        return 0;
   20fd0:	b8 00 00 00 00       	mov    eax,0x0
   20fd5:	e9 f2 00 00 00       	jmp    210cc <fatfs_fat_set_cluster+0x143>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:365

    if (fs->fat_type == FAT_TYPE_16)
   20fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20fdd:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20fe0:	85 c0                	test   eax,eax
   20fe2:	75 59                	jne    2103d <fatfs_fat_set_cluster+0xb4>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:368
    {
        // Find 16 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 256)) * 2;
   20fe4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20fe7:	c1 e0 08             	shl    eax,0x8
   20fea:	89 c2                	mov    edx,eax
   20fec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20fef:	29 d0                	sub    eax,edx
   20ff1:	01 c0                	add    eax,eax
   20ff3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:371

        // Write Next Clusters value to Sector Buffer
        FAT16_SET_16BIT_WORD(pbuf, (uint16)position, ((uint16)next_cluster));
   20ff6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20ff9:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20fff:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   21002:	0f b7 c0             	movzx  eax,ax
   21005:	01 d0                	add    eax,edx
   21007:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   2100a:	88 10                	mov    BYTE PTR [eax],dl
   2100c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2100f:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   21015:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   21018:	0f b7 d2             	movzx  edx,dx
   2101b:	83 c2 01             	add    edx,0x1
   2101e:	01 d0                	add    eax,edx
   21020:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   21023:	0f b7 d2             	movzx  edx,dx
   21026:	c1 fa 08             	sar    edx,0x8
   21029:	88 10                	mov    BYTE PTR [eax],dl
   2102b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2102e:	c7 80 04 02 00 00 01 	mov    DWORD PTR [eax+0x204],0x1
   21035:	00 00 00 
   21038:	e9 8a 00 00 00       	jmp    210c7 <fatfs_fat_set_cluster+0x13e>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:376
    }
    else
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 128)) * 4;
   2103d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   21040:	c1 e0 07             	shl    eax,0x7
   21043:	89 c2                	mov    edx,eax
   21045:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21048:	29 d0                	sub    eax,edx
   2104a:	c1 e0 02             	shl    eax,0x2
   2104d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:379

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);
   21050:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21053:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   21059:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2105c:	0f b7 c0             	movzx  eax,ax
   2105f:	01 d0                	add    eax,edx
   21061:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   21064:	88 10                	mov    BYTE PTR [eax],dl
   21066:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21069:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   2106f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   21072:	0f b7 d2             	movzx  edx,dx
   21075:	83 c2 01             	add    edx,0x1
   21078:	01 d0                	add    eax,edx
   2107a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   2107d:	c1 ea 08             	shr    edx,0x8
   21080:	88 10                	mov    BYTE PTR [eax],dl
   21082:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21085:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   2108b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   2108e:	0f b7 d2             	movzx  edx,dx
   21091:	83 c2 02             	add    edx,0x2
   21094:	01 d0                	add    eax,edx
   21096:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   21099:	c1 ea 10             	shr    edx,0x10
   2109c:	88 10                	mov    BYTE PTR [eax],dl
   2109e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   210a1:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   210a7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   210aa:	0f b7 d2             	movzx  edx,dx
   210ad:	83 c2 03             	add    edx,0x3
   210b0:	01 d0                	add    eax,edx
   210b2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   210b5:	c1 ea 18             	shr    edx,0x18
   210b8:	88 10                	mov    BYTE PTR [eax],dl
   210ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   210bd:	c7 80 04 02 00 00 01 	mov    DWORD PTR [eax+0x204],0x1
   210c4:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:382
    }

    return 1;
   210c7:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:383
}
   210cc:	c9                   	leave  
   210cd:	c3                   	ret    

000210ce <fatfs_free_cluster_chain>:
fatfs_free_cluster_chain():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:390
//-----------------------------------------------------------------------------
// fatfs_free_cluster_chain: Follow a chain marking each element as free
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_free_cluster_chain(struct fatfs *fs, uint32 start_cluster)
{
   210ce:	55                   	push   ebp
   210cf:	89 e5                	mov    ebp,esp
   210d1:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:392
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;
   210d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   210d7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:395

    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
   210da:	eb 2d                	jmp    21109 <fatfs_free_cluster_chain+0x3b>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:397
    {
        last_cluster = next_cluster;
   210dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   210df:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:400

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
   210e2:	83 ec 08             	sub    esp,0x8
   210e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   210e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   210eb:	e8 9a fa ff ff       	call   20b8a <fatfs_find_next_cluster>
   210f0:	83 c4 10             	add    esp,0x10
   210f3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:403

        // Clear last link
        fatfs_fat_set_cluster(fs, last_cluster, 0x00000000);
   210f6:	83 ec 04             	sub    esp,0x4
   210f9:	6a 00                	push   0x0
   210fb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   210fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21101:	e8 83 fe ff ff       	call   20f89 <fatfs_fat_set_cluster>
   21106:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:395
{
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;

    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
   21109:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   2110d:	74 06                	je     21115 <fatfs_free_cluster_chain+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:395 (discriminator 1)
   2110f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   21113:	75 c7                	jne    210dc <fatfs_free_cluster_chain+0xe>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:406

        // Clear last link
        fatfs_fat_set_cluster(fs, last_cluster, 0x00000000);
    }

    return 1;
   21115:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:407
}
   2111a:	c9                   	leave  
   2111b:	c3                   	ret    

0002111c <fatfs_fat_add_cluster_to_chain>:
fatfs_fat_add_cluster_to_chain():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:415
// fatfs_fat_add_cluster_to_chain: Follow a chain marking and then add a new entry
// to the current tail.
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_fat_add_cluster_to_chain(struct fatfs *fs, uint32 start_cluster, uint32 newEntry)
{
   2111c:	55                   	push   ebp
   2111d:	89 e5                	mov    ebp,esp
   2111f:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:416
    uint32 last_cluster = FAT32_LAST_CLUSTER;
   21122:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:417
    uint32 next_cluster = start_cluster;
   21129:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2112c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:419

    if (start_cluster == FAT32_LAST_CLUSTER)
   2112f:	83 7d 0c ff          	cmp    DWORD PTR [ebp+0xc],0xffffffff
   21133:	75 2e                	jne    21163 <fatfs_fat_add_cluster_to_chain+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:420
        return 0;
   21135:	b8 00 00 00 00       	mov    eax,0x0
   2113a:	eb 59                	jmp    21195 <fatfs_fat_add_cluster_to_chain+0x79>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:425

    // Loop until end of chain
    while ( next_cluster != FAT32_LAST_CLUSTER )
    {
        last_cluster = next_cluster;
   2113c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2113f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:428

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
   21142:	83 ec 08             	sub    esp,0x8
   21145:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   21148:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2114b:	e8 3a fa ff ff       	call   20b8a <fatfs_find_next_cluster>
   21150:	83 c4 10             	add    esp,0x10
   21153:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:429
        if (!next_cluster)
   21156:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   2115a:	75 07                	jne    21163 <fatfs_fat_add_cluster_to_chain+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:430
            return 0;
   2115c:	b8 00 00 00 00       	mov    eax,0x0
   21161:	eb 32                	jmp    21195 <fatfs_fat_add_cluster_to_chain+0x79>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:423

    if (start_cluster == FAT32_LAST_CLUSTER)
        return 0;

    // Loop until end of chain
    while ( next_cluster != FAT32_LAST_CLUSTER )
   21163:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   21167:	75 d3                	jne    2113c <fatfs_fat_add_cluster_to_chain+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:434
        if (!next_cluster)
            return 0;
    }

    // Add link in for new cluster
    fatfs_fat_set_cluster(fs, last_cluster, newEntry);
   21169:	83 ec 04             	sub    esp,0x4
   2116c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   2116f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   21172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21175:	e8 0f fe ff ff       	call   20f89 <fatfs_fat_set_cluster>
   2117a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:437

    // Mark new cluster as end of chain
    fatfs_fat_set_cluster(fs, newEntry, FAT32_LAST_CLUSTER);
   2117d:	83 ec 04             	sub    esp,0x4
   21180:	6a ff                	push   0xffffffff
   21182:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   21185:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21188:	e8 fc fd ff ff       	call   20f89 <fatfs_fat_set_cluster>
   2118d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:439

    return 1;
   21190:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:440
}
   21195:	c9                   	leave  
   21196:	c3                   	ret    

00021197 <fatfs_count_free_clusters>:
fatfs_count_free_clusters():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:446
#endif
//-----------------------------------------------------------------------------
// fatfs_count_free_clusters:
//-----------------------------------------------------------------------------
uint32 fatfs_count_free_clusters(struct fatfs *fs)
{
   21197:	55                   	push   ebp
   21198:	89 e5                	mov    ebp,esp
   2119a:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:448
    uint32 i,j;
    uint32 count = 0;
   2119d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:451
    struct fat_buffer *pbuf;

    for (i = 0; i < fs->fat_sectors; i++)
   211a4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   211ab:	e9 19 01 00 00       	jmp    212c9 <fatfs_count_free_clusters+0x132>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:454
    {
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
   211b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   211b3:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   211b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   211b9:	01 d0                	add    eax,edx
   211bb:	83 ec 08             	sub    esp,0x8
   211be:	50                   	push   eax
   211bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   211c2:	e8 1a f8 ff ff       	call   209e1 <fatfs_fat_read_sector>
   211c7:	83 c4 10             	add    esp,0x10
   211ca:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:455
        if (!pbuf)
   211cd:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   211d1:	0f 84 03 01 00 00    	je     212da <fatfs_count_free_clusters+0x143>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:458
            break;

        for (j = 0; j < FAT_SECTOR_SIZE; )
   211d7:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   211de:	e9 d5 00 00 00       	jmp    212b8 <fatfs_count_free_clusters+0x121>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:460
        {
            if (fs->fat_type == FAT_TYPE_16)
   211e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   211e6:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   211e9:	85 c0                	test   eax,eax
   211eb:	75 49                	jne    21236 <fatfs_count_free_clusters+0x9f>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:462
            {
                if (FAT16_GET_16BIT_WORD(pbuf, (uint16)j) == 0)
   211ed:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   211f0:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   211f6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   211f9:	0f b7 d2             	movzx  edx,dx
   211fc:	83 c2 01             	add    edx,0x1
   211ff:	01 d0                	add    eax,edx
   21201:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   21204:	0f b6 c0             	movzx  eax,al
   21207:	c1 e0 08             	shl    eax,0x8
   2120a:	89 c1                	mov    ecx,eax
   2120c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2120f:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   21215:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21218:	0f b7 c0             	movzx  eax,ax
   2121b:	01 d0                	add    eax,edx
   2121d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   21220:	0f b6 c0             	movzx  eax,al
   21223:	01 c8                	add    eax,ecx
   21225:	85 c0                	test   eax,eax
   21227:	75 04                	jne    2122d <fatfs_count_free_clusters+0x96>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:463
                    count++;
   21229:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:465

                j += 2;
   2122d:	83 45 f0 02          	add    DWORD PTR [ebp-0x10],0x2
   21231:	e9 82 00 00 00       	jmp    212b8 <fatfs_count_free_clusters+0x121>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:469
            }
            else
            {
                if (FAT32_GET_32BIT_WORD(pbuf, (uint16)j) == 0)
   21236:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   21239:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   2123f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   21242:	0f b7 d2             	movzx  edx,dx
   21245:	83 c2 03             	add    edx,0x3
   21248:	01 d0                	add    eax,edx
   2124a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2124d:	0f b6 c0             	movzx  eax,al
   21250:	c1 e0 18             	shl    eax,0x18
   21253:	89 c1                	mov    ecx,eax
   21255:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   21258:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   2125e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   21261:	0f b7 d2             	movzx  edx,dx
   21264:	83 c2 02             	add    edx,0x2
   21267:	01 d0                	add    eax,edx
   21269:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2126c:	0f b6 c0             	movzx  eax,al
   2126f:	c1 e0 10             	shl    eax,0x10
   21272:	01 c1                	add    ecx,eax
   21274:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   21277:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   2127d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   21280:	0f b7 d2             	movzx  edx,dx
   21283:	83 c2 01             	add    edx,0x1
   21286:	01 d0                	add    eax,edx
   21288:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2128b:	0f b6 c0             	movzx  eax,al
   2128e:	c1 e0 08             	shl    eax,0x8
   21291:	01 c1                	add    ecx,eax
   21293:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   21296:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   2129c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2129f:	0f b7 c0             	movzx  eax,ax
   212a2:	01 d0                	add    eax,edx
   212a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   212a7:	0f b6 c0             	movzx  eax,al
   212aa:	01 c8                	add    eax,ecx
   212ac:	85 c0                	test   eax,eax
   212ae:	75 04                	jne    212b4 <fatfs_count_free_clusters+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:470
                    count++;
   212b0:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:472

                j += 4;
   212b4:	83 45 f0 04          	add    DWORD PTR [ebp-0x10],0x4
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:458 (discriminator 1)
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
        if (!pbuf)
            break;

        for (j = 0; j < FAT_SECTOR_SIZE; )
   212b8:	81 7d f0 ff 01 00 00 	cmp    DWORD PTR [ebp-0x10],0x1ff
   212bf:	0f 86 1e ff ff ff    	jbe    211e3 <fatfs_count_free_clusters+0x4c>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:451 (discriminator 2)
{
    uint32 i,j;
    uint32 count = 0;
    struct fat_buffer *pbuf;

    for (i = 0; i < fs->fat_sectors; i++)
   212c5:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:451 (discriminator 1)
   212c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   212cc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   212cf:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   212d2:	0f 87 d8 fe ff ff    	ja     211b0 <fatfs_count_free_clusters+0x19>
   212d8:	eb 01                	jmp    212db <fatfs_count_free_clusters+0x144>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:456
    {
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
        if (!pbuf)
            break;
   212da:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:477
                j += 4;
            }
        }
    }

    return count;
   212db:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:478
}
   212de:	c9                   	leave  
   212df:	c3                   	ret    

000212e0 <fatfs_add_free_space>:
fatfs_add_free_space():
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:46
//-----------------------------------------------------------------------------
// fatfs_add_free_space: Allocate another cluster of free space to the end
// of a files cluster chain.
//-----------------------------------------------------------------------------
int fatfs_add_free_space(struct fatfs *fs, uint32 *startCluster, uint32 clusters)
{
   212e0:	55                   	push   ebp
   212e1:	89 e5                	mov    ebp,esp
   212e3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:49
    uint32 i;
    uint32 nextcluster;
    uint32 start = *startCluster;
   212e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   212e9:	8b 00                	mov    eax,DWORD PTR [eax]
   212eb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:52

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
   212ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   212f1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   212f4:	83 f8 ff             	cmp    eax,0xffffffff
   212f7:	74 10                	je     21309 <fatfs_add_free_space+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:53
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);
   212f9:	83 ec 08             	sub    esp,0x8
   212fc:	6a ff                	push   0xffffffff
   212fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21301:	e8 0e fa ff ff       	call   20d14 <fatfs_set_fs_info_next_free_cluster>
   21306:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:55

    for (i=0;i<clusters;i++)
   21309:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   21310:	eb 67                	jmp    21379 <fatfs_add_free_space+0x99>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:58
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
   21312:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21315:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   21318:	83 ec 04             	sub    esp,0x4
   2131b:	8d 55 ec             	lea    edx,[ebp-0x14]
   2131e:	52                   	push   edx
   2131f:	50                   	push   eax
   21320:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21323:	e8 e0 fa ff ff       	call   20e08 <fatfs_find_blank_cluster>
   21328:	83 c4 10             	add    esp,0x10
   2132b:	85 c0                	test   eax,eax
   2132d:	74 3f                	je     2136e <fatfs_add_free_space+0x8e>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:61
        {
            // Point last to this
            fatfs_fat_set_cluster(fs, start, nextcluster);
   2132f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   21332:	83 ec 04             	sub    esp,0x4
   21335:	50                   	push   eax
   21336:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   21339:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2133c:	e8 48 fc ff ff       	call   20f89 <fatfs_fat_set_cluster>
   21341:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:64

            // Point this to end of file
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
   21344:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   21347:	83 ec 04             	sub    esp,0x4
   2134a:	6a ff                	push   0xffffffff
   2134c:	50                   	push   eax
   2134d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21350:	e8 34 fc ff ff       	call   20f89 <fatfs_fat_set_cluster>
   21355:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:67

            // Adjust argument reference
            start = nextcluster;
   21358:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2135b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:68
            if (i == 0)
   2135e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   21362:	75 11                	jne    21375 <fatfs_add_free_space+0x95>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:69
                *startCluster = nextcluster;
   21364:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   21367:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2136a:	89 10                	mov    DWORD PTR [eax],edx
   2136c:	eb 07                	jmp    21375 <fatfs_add_free_space+0x95>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:72
        }
        else
            return 0;
   2136e:	b8 00 00 00 00       	mov    eax,0x0
   21373:	eb 11                	jmp    21386 <fatfs_add_free_space+0xa6>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:55 (discriminator 2)

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);

    for (i=0;i<clusters;i++)
   21375:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:55 (discriminator 1)
   21379:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2137c:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   2137f:	72 91                	jb     21312 <fatfs_add_free_space+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:75
        }
        else
            return 0;
    }

    return 1;
   21381:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:76 (discriminator 1)
}
   21386:	c9                   	leave  
   21387:	c3                   	ret    

00021388 <fatfs_allocate_free_space>:
fatfs_allocate_free_space():
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:83
// fatfs_allocate_free_space: Add an ammount of free space to a file either from
// 'startCluster' if newFile = false, or allocating a new start to the chain if
// newFile = true.
//-----------------------------------------------------------------------------
int fatfs_allocate_free_space(struct fatfs *fs, int newFile, uint32 *startCluster, uint32 size)
{
   21388:	55                   	push   ebp
   21389:	89 e5                	mov    ebp,esp
   2138b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:88
    uint32 clusterSize;
    uint32 clusterCount;
    uint32 nextcluster;

    if (size==0)
   2138e:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   21392:	75 0a                	jne    2139e <fatfs_allocate_free_space+0x16>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:89
        return 0;
   21394:	b8 00 00 00 00       	mov    eax,0x0
   21399:	e9 c8 00 00 00       	jmp    21466 <fatfs_allocate_free_space+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:92

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
   2139e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   213a1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   213a4:	83 f8 ff             	cmp    eax,0xffffffff
   213a7:	74 10                	je     213b9 <fatfs_allocate_free_space+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:93
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);
   213a9:	83 ec 08             	sub    esp,0x8
   213ac:	6a ff                	push   0xffffffff
   213ae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   213b1:	e8 5e f9 ff ff       	call   20d14 <fatfs_set_fs_info_next_free_cluster>
   213b6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:96

    // Work out size and clusters
    clusterSize = fs->sectors_per_cluster * FAT_SECTOR_SIZE;
   213b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   213bc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   213bf:	0f b6 c0             	movzx  eax,al
   213c2:	c1 e0 09             	shl    eax,0x9
   213c5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:97
    clusterCount = (size / clusterSize);
   213c8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   213cb:	ba 00 00 00 00       	mov    edx,0x0
   213d0:	f7 75 f0             	div    DWORD PTR [ebp-0x10]
   213d3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:100

    // If any left over
    if (size-(clusterSize*clusterCount))
   213d6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   213d9:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   213dd:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
   213e0:	74 04                	je     213e6 <fatfs_allocate_free_space+0x5e>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:101
        clusterCount++;
   213e2:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:104

    // Allocated first link in the chain if a new file
    if (newFile)
   213e6:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   213ea:	74 4d                	je     21439 <fatfs_allocate_free_space+0xb1>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:106
    {
        if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
   213ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   213ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   213f2:	83 ec 04             	sub    esp,0x4
   213f5:	8d 55 ec             	lea    edx,[ebp-0x14]
   213f8:	52                   	push   edx
   213f9:	50                   	push   eax
   213fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   213fd:	e8 06 fa ff ff       	call   20e08 <fatfs_find_blank_cluster>
   21402:	83 c4 10             	add    esp,0x10
   21405:	85 c0                	test   eax,eax
   21407:	75 07                	jne    21410 <fatfs_allocate_free_space+0x88>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:107
            return 0;
   21409:	b8 00 00 00 00       	mov    eax,0x0
   2140e:	eb 56                	jmp    21466 <fatfs_allocate_free_space+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:110

        // If this is all that is needed then all done
        if (clusterCount==1)
   21410:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   21414:	75 2b                	jne    21441 <fatfs_allocate_free_space+0xb9>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:112
        {
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
   21416:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   21419:	83 ec 04             	sub    esp,0x4
   2141c:	6a ff                	push   0xffffffff
   2141e:	50                   	push   eax
   2141f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21422:	e8 62 fb ff ff       	call   20f89 <fatfs_fat_set_cluster>
   21427:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:113
            *startCluster = nextcluster;
   2142a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   2142d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   21430:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:114
            return 1;
   21432:	b8 01 00 00 00       	mov    eax,0x1
   21437:	eb 2d                	jmp    21466 <fatfs_allocate_free_space+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:119
        }
    }
    // Allocate from end of current chain (startCluster is end of chain)
    else
        nextcluster = *startCluster;
   21439:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2143c:	8b 00                	mov    eax,DWORD PTR [eax]
   2143e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:121

    if (!fatfs_add_free_space(fs, &nextcluster, clusterCount))
   21441:	83 ec 04             	sub    esp,0x4
   21444:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   21447:	8d 45 ec             	lea    eax,[ebp-0x14]
   2144a:	50                   	push   eax
   2144b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2144e:	e8 8d fe ff ff       	call   212e0 <fatfs_add_free_space>
   21453:	83 c4 10             	add    esp,0x10
   21456:	85 c0                	test   eax,eax
   21458:	75 07                	jne    21461 <fatfs_allocate_free_space+0xd9>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:122
            return 0;
   2145a:	b8 00 00 00 00       	mov    eax,0x0
   2145f:	eb 05                	jmp    21466 <fatfs_allocate_free_space+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:124

    return 1;
   21461:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:125 (discriminator 1)
}
   21466:	c9                   	leave  
   21467:	c3                   	ret    

00021468 <fatfs_find_free_dir_offset>:
fatfs_find_free_dir_offset():
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:131
//-----------------------------------------------------------------------------
// fatfs_find_free_dir_offset: Find a free space in the directory for a new entry
// which takes up 'entryCount' blocks (or allocate some more)
//-----------------------------------------------------------------------------
static int fatfs_find_free_dir_offset(struct fatfs *fs, uint32 dirCluster, int entryCount, uint32 *pSector, uint8 *pOffset)
{
   21468:	55                   	push   ebp
   21469:	89 e5                	mov    ebp,esp
   2146b:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:133
    struct fat_dir_entry *directoryEntry;
    uint8 item=0;
   2146e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:134
    uint16 recordoffset = 0;
   21472:	66 c7 45 e6 00 00    	mov    WORD PTR [ebp-0x1a],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:135
    uint8 i=0;
   21478:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:136
    int x=0;
   2147c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:137
    int possible_spaces = 0;
   21483:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:138
    int start_recorded = 0;
   2148a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:141

    // No entries required?
    if (entryCount == 0)
   21491:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   21495:	75 0a                	jne    214a1 <fatfs_find_free_dir_offset+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:142
        return 0;
   21497:	b8 00 00 00 00       	mov    eax,0x0
   2149c:	e9 fd 01 00 00       	jmp    2169e <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:148

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   214a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   214a4:	8d 50 01             	lea    edx,[eax+0x1]
   214a7:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   214aa:	6a 00                	push   0x0
   214ac:	50                   	push   eax
   214ad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   214b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   214b3:	e8 70 a2 ff ff       	call   1b728 <fatfs_sector_reader>
   214b8:	83 c4 10             	add    esp,0x10
   214bb:	85 c0                	test   eax,eax
   214bd:	0f 84 1a 01 00 00    	je     215dd <fatfs_find_free_dir_offset+0x175>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:151
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   214c3:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   214c7:	e9 02 01 00 00       	jmp    215ce <fatfs_find_free_dir_offset+0x166>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:154
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   214cc:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   214d0:	c1 e0 05             	shl    eax,0x5
   214d3:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:157

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   214d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   214da:	8d 50 44             	lea    edx,[eax+0x44]
   214dd:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   214e1:	01 d0                	add    eax,edx
   214e3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:160

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   214e6:	83 ec 0c             	sub    esp,0xc
   214e9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   214ec:	e8 09 e4 ff ff       	call   1f8fa <fatfs_entry_lfn_text>
   214f1:	83 c4 10             	add    esp,0x10
   214f4:	85 c0                	test   eax,eax
   214f6:	74 2c                	je     21524 <fatfs_find_free_dir_offset+0xbc>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:163
                {
                    // First entry?
                    if (possible_spaces == 0)
   214f8:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   214fc:	75 1d                	jne    2151b <fatfs_find_free_dir_offset+0xb3>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:166
                    {
                        // Store start
                        *pSector = x-1;
   214fe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21501:	83 e8 01             	sub    eax,0x1
   21504:	89 c2                	mov    edx,eax
   21506:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   21509:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:167
                        *pOffset = item;
   2150b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   2150e:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   21512:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:168
                        start_recorded = 1;
   21514:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:173
                    }

                    // Increment the count in-case the file turns
                    // out to be deleted...
                    possible_spaces++;
   2151b:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
   2151f:	e9 a0 00 00 00       	jmp    215c4 <fatfs_find_free_dir_offset+0x15c>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:179
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   21524:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   21528:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2152b:	0f b6 44 02 44       	movzx  eax,BYTE PTR [edx+eax*1+0x44]
   21530:	3c e5                	cmp    al,0xe5
   21532:	75 39                	jne    2156d <fatfs_find_free_dir_offset+0x105>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:182
                    {
                        // First entry?
                        if (possible_spaces == 0)
   21534:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   21538:	75 1d                	jne    21557 <fatfs_find_free_dir_offset+0xef>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:185
                        {
                            // Store start
                            *pSector = x-1;
   2153a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2153d:	83 e8 01             	sub    eax,0x1
   21540:	89 c2                	mov    edx,eax
   21542:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   21545:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:186
                            *pOffset = item;
   21547:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   2154a:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   2154e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:187
                            start_recorded = 1;
   21550:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:190
                        }

                        possible_spaces++;
   21557:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:193

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   2155b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2155e:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   21561:	7c 61                	jl     215c4 <fatfs_find_free_dir_offset+0x15c>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:194
                            return 1;
   21563:	b8 01 00 00 00       	mov    eax,0x1
   21568:	e9 31 01 00 00       	jmp    2169e <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:199

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   2156d:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   21571:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   21574:	0f b6 44 02 44       	movzx  eax,BYTE PTR [edx+eax*1+0x44]
   21579:	84 c0                	test   al,al
   2157b:	75 39                	jne    215b6 <fatfs_find_free_dir_offset+0x14e>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:202
                    {
                        // First entry?
                        if (possible_spaces == 0)
   2157d:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   21581:	75 1d                	jne    215a0 <fatfs_find_free_dir_offset+0x138>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:205
                        {
                            // Store start
                            *pSector = x-1;
   21583:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21586:	83 e8 01             	sub    eax,0x1
   21589:	89 c2                	mov    edx,eax
   2158b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   2158e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:206
                            *pOffset = item;
   21590:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   21593:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   21597:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:207
                            start_recorded = 1;
   21599:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:211
                        }

                        // Increment the blank entries count
                        possible_spaces++;
   215a0:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:214

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   215a4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   215a7:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   215aa:	7c 18                	jl     215c4 <fatfs_find_free_dir_offset+0x15c>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:215
                            return 1;
   215ac:	b8 01 00 00 00       	mov    eax,0x1
   215b1:	e9 e8 00 00 00       	jmp    2169e <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:221
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   215b6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:222
                        start_recorded = 0;
   215bd:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:151 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   215c4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   215c8:	83 c0 01             	add    eax,0x1
   215cb:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:151 (discriminator 1)
   215ce:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   215d2:	0f 86 f4 fe ff ff    	jbe    214cc <fatfs_find_free_dir_offset+0x64>
   215d8:	e9 c4 fe ff ff       	jmp    214a1 <fatfs_find_free_dir_offset+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:233
        else
        {
            uint32 newCluster;

            // Get a new cluster for directory
            if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &newCluster))
   215dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   215e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   215e3:	83 ec 04             	sub    esp,0x4
   215e6:	8d 55 dc             	lea    edx,[ebp-0x24]
   215e9:	52                   	push   edx
   215ea:	50                   	push   eax
   215eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   215ee:	e8 15 f8 ff ff       	call   20e08 <fatfs_find_blank_cluster>
   215f3:	83 c4 10             	add    esp,0x10
   215f6:	85 c0                	test   eax,eax
   215f8:	75 0a                	jne    21604 <fatfs_find_free_dir_offset+0x19c>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:234
                return 0;
   215fa:	b8 00 00 00 00       	mov    eax,0x0
   215ff:	e9 9a 00 00 00       	jmp    2169e <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:237

            // Add cluster to end of directory tree
            if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
   21604:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   21607:	83 ec 04             	sub    esp,0x4
   2160a:	50                   	push   eax
   2160b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2160e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21611:	e8 06 fb ff ff       	call   2111c <fatfs_fat_add_cluster_to_chain>
   21616:	83 c4 10             	add    esp,0x10
   21619:	85 c0                	test   eax,eax
   2161b:	75 07                	jne    21624 <fatfs_find_free_dir_offset+0x1bc>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:238
                return 0;
   2161d:	b8 00 00 00 00       	mov    eax,0x0
   21622:	eb 7a                	jmp    2169e <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:241

            // Erase new directory cluster
            memset(fs->currentsector.sector, 0x00, FAT_SECTOR_SIZE);
   21624:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21627:	83 c0 44             	add    eax,0x44
   2162a:	83 ec 04             	sub    esp,0x4
   2162d:	68 00 02 00 00       	push   0x200
   21632:	6a 00                	push   0x0
   21634:	50                   	push   eax
   21635:	e8 cf 3f 00 00       	call   25609 <memset>
   2163a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:242
            for (i=0;i<fs->sectors_per_cluster;i++)
   2163d:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
   21641:	eb 2b                	jmp    2166e <fatfs_find_free_dir_offset+0x206>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:244
            {
                if (!fatfs_write_sector(fs, newCluster, i, 0))
   21643:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   21647:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   2164a:	6a 00                	push   0x0
   2164c:	52                   	push   edx
   2164d:	50                   	push   eax
   2164e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21651:	e8 27 a3 ff ff       	call   1b97d <fatfs_write_sector>
   21656:	83 c4 10             	add    esp,0x10
   21659:	85 c0                	test   eax,eax
   2165b:	75 07                	jne    21664 <fatfs_find_free_dir_offset+0x1fc>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:245
                    return 0;
   2165d:	b8 00 00 00 00       	mov    eax,0x0
   21662:	eb 3a                	jmp    2169e <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:242 (discriminator 2)
            if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
                return 0;

            // Erase new directory cluster
            memset(fs->currentsector.sector, 0x00, FAT_SECTOR_SIZE);
            for (i=0;i<fs->sectors_per_cluster;i++)
   21664:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   21668:	83 c0 01             	add    eax,0x1
   2166b:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:242 (discriminator 1)
   2166e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21671:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   21674:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
   21677:	77 ca                	ja     21643 <fatfs_find_free_dir_offset+0x1db>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:249
                if (!fatfs_write_sector(fs, newCluster, i, 0))
                    return 0;
            }

            // If non of the name fitted on previous sectors
            if (!start_recorded)
   21679:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   2167d:	75 1a                	jne    21699 <fatfs_find_free_dir_offset+0x231>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:252
            {
                // Store start
                *pSector = (x-1);
   2167f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21682:	83 e8 01             	sub    eax,0x1
   21685:	89 c2                	mov    edx,eax
   21687:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   2168a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:253
                *pOffset = 0;
   2168c:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   2168f:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:254
                start_recorded = 1;
   21692:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:257
            }

            return 1;
   21699:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:262 (discriminator 2)
        }
    } // End of while loop

    return 0;
}
   2169e:	c9                   	leave  
   2169f:	c3                   	ret    

000216a0 <fatfs_add_file_entry>:
fatfs_add_file_entry():
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:267
//-----------------------------------------------------------------------------
// fatfs_add_file_entry: Add a directory entry to a location found by FindFreeOffset
//-----------------------------------------------------------------------------
int fatfs_add_file_entry(struct fatfs *fs, uint32 dirCluster, char *filename, char *shortfilename, uint32 startCluster, uint32 size, int dir)
{
   216a0:	55                   	push   ebp
   216a1:	89 e5                	mov    ebp,esp
   216a3:	83 ec 58             	sub    esp,0x58
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:268
    uint8 item=0;
   216a6:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:269
    uint16 recordoffset = 0;
   216aa:	66 c7 45 da 00 00    	mov    WORD PTR [ebp-0x26],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:270
    uint8 i=0;
   216b0:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:271
    uint32 x=0;
   216b4:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:274
    int entryCount;
    struct fat_dir_entry shortEntry;
    int dirtySector = 0;
   216bb:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:276

    uint32 dirSector = 0;
   216c2:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [ebp-0x4c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:277
    uint8 dirOffset = 0;
   216c9:	c6 45 b3 00          	mov    BYTE PTR [ebp-0x4d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:278
    int foundEnd = 0;
   216cd:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:284

    uint8 checksum;
    uint8 *pSname;

    // No write access?
    if (!fs->disk_io.write_media)
   216d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   216d7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   216da:	85 c0                	test   eax,eax
   216dc:	75 0a                	jne    216e8 <fatfs_add_file_entry+0x48>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:285
        return 0;
   216de:	b8 00 00 00 00       	mov    eax,0x0
   216e3:	e9 0c 02 00 00       	jmp    218f4 <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:290

#if FATFS_INC_LFN_SUPPORT
    // How many LFN entries are required?
    // NOTE: We always request one LFN even if it would fit in a SFN!
    entryCount = fatfs_lfn_entries_required(filename);
   216e8:	83 ec 0c             	sub    esp,0xc
   216eb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   216ee:	e8 55 e3 ff ff       	call   1fa48 <fatfs_lfn_entries_required>
   216f3:	83 c4 10             	add    esp,0x10
   216f6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:291
    if (!entryCount)
   216f9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   216fd:	75 0a                	jne    21709 <fatfs_add_file_entry+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:292
        return 0;
   216ff:	b8 00 00 00 00       	mov    eax,0x0
   21704:	e9 eb 01 00 00       	jmp    218f4 <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:299
    entryCount = 0;
#endif

    // Find space in the directory for this filename (or allocate some more)
    // NOTE: We need to find space for at least the LFN + SFN (or just the SFN if LFNs not supported).
    if (!fatfs_find_free_dir_offset(fs, dirCluster, entryCount + 1, &dirSector, &dirOffset))
   21709:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2170c:	8d 50 01             	lea    edx,[eax+0x1]
   2170f:	83 ec 0c             	sub    esp,0xc
   21712:	8d 45 b3             	lea    eax,[ebp-0x4d]
   21715:	50                   	push   eax
   21716:	8d 45 b4             	lea    eax,[ebp-0x4c]
   21719:	50                   	push   eax
   2171a:	52                   	push   edx
   2171b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2171e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21721:	e8 42 fd ff ff       	call   21468 <fatfs_find_free_dir_offset>
   21726:	83 c4 20             	add    esp,0x20
   21729:	85 c0                	test   eax,eax
   2172b:	75 0a                	jne    21737 <fatfs_add_file_entry+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:300
        return 0;
   2172d:	b8 00 00 00 00       	mov    eax,0x0
   21732:	e9 bd 01 00 00       	jmp    218f4 <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:303

    // Generate checksum of short filename
    pSname = (uint8*)shortfilename;
   21737:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   2173a:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:304
    checksum = 0;
   2173d:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305
    for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;
   21741:	c6 45 f6 0b          	mov    BYTE PTR [ebp-0xa],0xb
   21745:	eb 3b                	jmp    21782 <fatfs_add_file_entry+0xe2>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 7)
   21747:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
   2174b:	83 e0 01             	and    eax,0x1
   2174e:	85 c0                	test   eax,eax
   21750:	74 07                	je     21759 <fatfs_add_file_entry+0xb9>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 2)
   21752:	ba 80 ff ff ff       	mov    edx,0xffffff80
   21757:	eb 05                	jmp    2175e <fatfs_add_file_entry+0xbe>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 3)
   21759:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 5)
   2175e:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
   21762:	d0 e8                	shr    al,1
   21764:	8d 0c 02             	lea    ecx,[edx+eax*1]
   21767:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   2176a:	8d 50 01             	lea    edx,[eax+0x1]
   2176d:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
   21770:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   21773:	01 c8                	add    eax,ecx
   21775:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
   21778:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   2177c:	83 e8 01             	sub    eax,0x1
   2177f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 6)
   21782:	80 7d f6 00          	cmp    BYTE PTR [ebp-0xa],0x0
   21786:	75 bf                	jne    21747 <fatfs_add_file_entry+0xa7>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:308

    // Start from current sector where space was found!
    x = dirSector;
   21788:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   2178b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:314

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   2178e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21791:	8d 50 01             	lea    edx,[eax+0x1]
   21794:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   21797:	6a 00                	push   0x0
   21799:	50                   	push   eax
   2179a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2179d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   217a0:	e8 83 9f ff ff       	call   1b728 <fatfs_sector_reader>
   217a5:	83 c4 10             	add    esp,0x10
   217a8:	85 c0                	test   eax,eax
   217aa:	0f 84 3f 01 00 00    	je     218ef <fatfs_add_file_entry+0x24f>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:317
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   217b0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   217b4:	e9 ea 00 00 00       	jmp    218a3 <fatfs_add_file_entry+0x203>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:320
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   217b9:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   217bd:	c1 e0 05             	shl    eax,0x5
   217c0:	66 89 45 da          	mov    WORD PTR [ebp-0x26],ax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:323

                // If the start position for the entry has been found
                if (foundEnd==0)
   217c4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   217c8:	75 1d                	jne    217e7 <fatfs_add_file_entry+0x147>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:324
                    if ( (dirSector==(x-1)) && (dirOffset==item) )
   217ca:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   217cd:	8d 50 ff             	lea    edx,[eax-0x1]
   217d0:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   217d3:	39 c2                	cmp    edx,eax
   217d5:	75 10                	jne    217e7 <fatfs_add_file_entry+0x147>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:324 (discriminator 1)
   217d7:	0f b6 45 b3          	movzx  eax,BYTE PTR [ebp-0x4d]
   217db:	3a 45 f7             	cmp    al,BYTE PTR [ebp-0x9]
   217de:	75 07                	jne    217e7 <fatfs_add_file_entry+0x147>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:325
                        foundEnd = 1;
   217e0:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:328

                // Start adding filename
                if (foundEnd)
   217e7:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   217eb:	0f 84 a8 00 00 00    	je     21899 <fatfs_add_file_entry+0x1f9>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:330
                {
                    if (entryCount==0)
   217f1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   217f5:	75 74                	jne    2186b <fatfs_add_file_entry+0x1cb>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:333
                    {
                        // Short filename
                        fatfs_sfn_create_entry(shortfilename, size, startCluster, &shortEntry, dir);
   217f7:	83 ec 0c             	sub    esp,0xc
   217fa:	ff 75 20             	push   DWORD PTR [ebp+0x20]
   217fd:	8d 45 ba             	lea    eax,[ebp-0x46]
   21800:	50                   	push   eax
   21801:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   21804:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
   21807:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   2180a:	e8 e8 e3 ff ff       	call   1fbf7 <fatfs_sfn_create_entry>
   2180f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:337

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update create, access & modify time & date
                        fatfs_update_timestamps(&shortEntry, 1, 1, 1);
   21812:	6a 01                	push   0x1
   21814:	6a 01                	push   0x1
   21816:	6a 01                	push   0x1
   21818:	8d 45 ba             	lea    eax,[ebp-0x46]
   2181b:	50                   	push   eax
   2181c:	e8 77 a6 ff ff       	call   1be98 <fatfs_update_timestamps>
   21821:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:340
#endif

                        memcpy(&fs->currentsector.sector[recordoffset], &shortEntry, sizeof(shortEntry));
   21824:	0f b7 45 da          	movzx  eax,WORD PTR [ebp-0x26]
   21828:	8d 50 40             	lea    edx,[eax+0x40]
   2182b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2182e:	01 d0                	add    eax,edx
   21830:	8d 50 04             	lea    edx,[eax+0x4]
   21833:	83 ec 04             	sub    esp,0x4
   21836:	6a 20                	push   0x20
   21838:	8d 45 ba             	lea    eax,[ebp-0x46]
   2183b:	50                   	push   eax
   2183c:	52                   	push   edx
   2183d:	e8 7a 48 00 00       	call   260bc <memcpy>
   21842:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:343

                        // Writeback
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   21845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21848:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   2184b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2184e:	8d 4a 44             	lea    ecx,[edx+0x44]
   21851:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   21854:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   2185a:	83 ec 04             	sub    esp,0x4
   2185d:	6a 01                	push   0x1
   2185f:	51                   	push   ecx
   21860:	52                   	push   edx
   21861:	ff d0                	call   eax
   21863:	83 c4 10             	add    esp,0x10
   21866:	e9 89 00 00 00       	jmp    218f4 <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:348
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
   2186b:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:351

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   2186f:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
   21873:	0f b7 55 da          	movzx  edx,WORD PTR [ebp-0x26]
   21877:	8d 4a 40             	lea    ecx,[edx+0x40]
   2187a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2187d:	01 ca                	add    edx,ecx
   2187f:	83 c2 04             	add    edx,0x4
   21882:	50                   	push   eax
   21883:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   21886:	52                   	push   edx
   21887:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   2188a:	e8 fa e1 ff ff       	call   1fa89 <fatfs_filename_to_lfn>
   2188f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:352
                        dirtySector = 1;
   21892:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:317 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   21899:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   2189d:	83 c0 01             	add    eax,0x1
   218a0:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:317 (discriminator 1)
   218a3:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   218a7:	0f 86 0c ff ff ff    	jbe    217b9 <fatfs_add_file_entry+0x119>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:359
#endif
                }
            } // End of if

            // Write back to disk before loading another sector
            if (dirtySector)
   218ad:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   218b1:	0f 84 d7 fe ff ff    	je     2178e <fatfs_add_file_entry+0xee>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:361
            {
                if (!fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1))
   218b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   218ba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   218bd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   218c0:	8d 4a 44             	lea    ecx,[edx+0x44]
   218c3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   218c6:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   218cc:	83 ec 04             	sub    esp,0x4
   218cf:	6a 01                	push   0x1
   218d1:	51                   	push   ecx
   218d2:	52                   	push   edx
   218d3:	ff d0                	call   eax
   218d5:	83 c4 10             	add    esp,0x10
   218d8:	85 c0                	test   eax,eax
   218da:	75 07                	jne    218e3 <fatfs_add_file_entry+0x243>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:362
                    return 0;
   218dc:	b8 00 00 00 00       	mov    eax,0x0
   218e1:	eb 11                	jmp    218f4 <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:364

                dirtySector = 0;
   218e3:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   218ea:	e9 9f fe ff ff       	jmp    2178e <fatfs_add_file_entry+0xee>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:368
            }
        }
        else
            return 0;
   218ef:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:372 (discriminator 2)
    } // End of while loop

    return 0;
}
   218f4:	c9                   	leave  
   218f5:	c3                   	ret    
   218f6:	66 90                	xchg   ax,ax

000218f8 <printMBR>:
printMBR():
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:13
uint8_t partBuffer[512*20]; //10240
gptHeader_t* gptHdr;
gptPartEntry_t* gptPart;

void printMBR(struct mbr_t* mbr)
{
   218f8:	55                   	push   ebp
   218f9:	89 e5                	mov    ebp,esp
   218fb:	57                   	push   edi
   218fc:	56                   	push   esi
   218fd:	53                   	push   ebx
   218fe:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:14
    printk("Part#\tStart\tEnd\t\tTotal\t\tPartType\tBoot\n");
   21901:	83 ec 0c             	sub    esp,0xc
   21904:	68 20 3b 08 00       	push   0x83b20
   21909:	e8 4d 5e 00 00       	call   2775b <printk>
   2190e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:15
    for (int cnt=0;cnt<mbr->partCount;cnt++)
   21911:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   21918:	e9 8b 00 00 00       	jmp    219a8 <printMBR+0xb0>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:17
    {
        if (mbr->parts[cnt].partStartSector>0)
   2191d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21920:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   21923:	c1 e2 04             	shl    edx,0x4
   21926:	01 d0                	add    eax,edx
   21928:	8b 00                	mov    eax,DWORD PTR [eax]
   2192a:	85 c0                	test   eax,eax
   2192c:	74 76                	je     219a4 <printMBR+0xac>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:18
            printk("%u\t\t%u\t\t%u\t%u\t\t%u\t\t%s\n",cnt,mbr->parts[cnt].partStartSector, mbr->parts[cnt].partEndSector, mbr->parts[cnt].partTotalSectors,mbr->parts[cnt].systemID,mbr->parts[cnt].bootable?"Y":"N");
   2192e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21931:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   21934:	c1 e2 04             	shl    edx,0x4
   21937:	01 d0                	add    eax,edx
   21939:	83 c0 0c             	add    eax,0xc
   2193c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2193f:	84 c0                	test   al,al
   21941:	74 07                	je     2194a <printMBR+0x52>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:18 (discriminator 1)
   21943:	bf 47 3b 08 00       	mov    edi,0x83b47
   21948:	eb 05                	jmp    2194f <printMBR+0x57>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:18 (discriminator 2)
   2194a:	bf 49 3b 08 00       	mov    edi,0x83b49
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:18 (discriminator 4)
   2194f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21952:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   21955:	c1 e2 04             	shl    edx,0x4
   21958:	01 d0                	add    eax,edx
   2195a:	83 c0 0d             	add    eax,0xd
   2195d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   21960:	0f b6 d8             	movzx  ebx,al
   21963:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21966:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   21969:	c1 e2 04             	shl    edx,0x4
   2196c:	01 d0                	add    eax,edx
   2196e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   21971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21974:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   21977:	c1 e2 04             	shl    edx,0x4
   2197a:	01 d0                	add    eax,edx
   2197c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   2197f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21982:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
   21985:	c1 e6 04             	shl    esi,0x4
   21988:	01 f0                	add    eax,esi
   2198a:	8b 00                	mov    eax,DWORD PTR [eax]
   2198c:	83 ec 04             	sub    esp,0x4
   2198f:	57                   	push   edi
   21990:	53                   	push   ebx
   21991:	51                   	push   ecx
   21992:	52                   	push   edx
   21993:	50                   	push   eax
   21994:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   21997:	68 4b 3b 08 00       	push   0x83b4b
   2199c:	e8 ba 5d 00 00       	call   2775b <printk>
   219a1:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:15 (discriminator 2)
gptPartEntry_t* gptPart;

void printMBR(struct mbr_t* mbr)
{
    printk("Part#\tStart\tEnd\t\tTotal\t\tPartType\tBoot\n");
    for (int cnt=0;cnt<mbr->partCount;cnt++)
   219a4:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:15 (discriminator 1)
   219a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   219ab:	8b 80 00 04 00 00    	mov    eax,DWORD PTR [eax+0x400]
   219b1:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   219b4:	0f 8f 63 ff ff ff    	jg     2191d <printMBR+0x25>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:20
    {
        if (mbr->parts[cnt].partStartSector>0)
            printk("%u\t\t%u\t\t%u\t%u\t\t%u\t\t%s\n",cnt,mbr->parts[cnt].partStartSector, mbr->parts[cnt].partEndSector, mbr->parts[cnt].partTotalSectors,mbr->parts[cnt].systemID,mbr->parts[cnt].bootable?"Y":"N");
    }
    printk("\n");
   219ba:	83 ec 0c             	sub    esp,0xc
   219bd:	68 62 3b 08 00       	push   0x83b62
   219c2:	e8 94 5d 00 00       	call   2775b <printk>
   219c7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:21
}
   219ca:	90                   	nop
   219cb:	8d 65 f4             	lea    esp,[ebp-0xc]
   219ce:	5b                   	pop    ebx
   219cf:	5e                   	pop    esi
   219d0:	5f                   	pop    edi
   219d1:	5d                   	pop    ebp
   219d2:	c3                   	ret    

000219d3 <parseMBR>:
parseMBR():
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:24
    
bool parseMBR(struct ataDeviceInfo_t* devInfo, struct mbr_t* mbr)
{
   219d3:	55                   	push   ebp
   219d4:	89 e5                	mov    ebp,esp
   219d6:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:25
    HBA_PORT* port=(HBA_PORT*)devInfo->ioPort;
   219d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   219dc:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   219e2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:27
    
    memset(mbr,0,sizeof(struct mbr_t));
   219e5:	83 ec 04             	sub    esp,0x4
   219e8:	68 17 04 00 00       	push   0x417
   219ed:	6a 00                	push   0x0
   219ef:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   219f2:	e8 12 3c 00 00       	call   25609 <memset>
   219f7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:28
    mbr->parts[0].partStartSector=0;
   219fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   219fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:29
    printd(DEBUG_HARDDRIVE,"devInfo->ABAR=0x%08X\n",devInfo->ABAR);
   21a03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21a06:	8b 80 6f 02 00 00    	mov    eax,DWORD PTR [eax+0x26f]
   21a0c:	83 ec 04             	sub    esp,0x4
   21a0f:	50                   	push   eax
   21a10:	68 64 3b 08 00       	push   0x83b64
   21a15:	6a 08                	push   0x8
   21a17:	e8 5f 5d 00 00       	call   2777b <printd>
   21a1c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:30
    if (devInfo->ABAR)
   21a1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21a22:	8b 80 6f 02 00 00    	mov    eax,DWORD PTR [eax+0x26f]
   21a28:	85 c0                	test   eax,eax
   21a2a:	74 66                	je     21a92 <parseMBR+0xbf>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:32
    {
        printd(DEBUG_HARDDRIVE,"Disk is SATA\n");
   21a2c:	83 ec 08             	sub    esp,0x8
   21a2f:	68 7a 3b 08 00       	push   0x83b7a
   21a34:	6a 08                	push   0x8
   21a36:	e8 40 5d 00 00       	call   2777b <printd>
   21a3b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:33
        ahciSetCurrentDisk(port);
   21a3e:	83 ec 0c             	sub    esp,0xc
   21a41:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   21a44:	e8 1e 39 ff ff       	call   15367 <ahciSetCurrentDisk>
   21a49:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:34
        bool lResult=ahciRead(port,0,mbrBuffer,1);
   21a4c:	6a 01                	push   0x1
   21a4e:	68 a0 8d 09 00       	push   0x98da0
   21a53:	6a 00                	push   0x0
   21a55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   21a58:	e8 3e 39 ff ff       	call   1539b <ahciRead>
   21a5d:	83 c4 10             	add    esp,0x10
   21a60:	85 c0                	test   eax,eax
   21a62:	0f 95 c0             	setne  al
   21a65:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:35
        if (!lResult)
   21a68:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   21a6c:	83 f0 01             	xor    eax,0x1
   21a6f:	84 c0                	test   al,al
   21a71:	74 75                	je     21ae8 <parseMBR+0x115>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:37
        {
            printk("Could not read ATA MBR (0x%08X)", lResult);
   21a73:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   21a77:	83 ec 08             	sub    esp,0x8
   21a7a:	50                   	push   eax
   21a7b:	68 88 3b 08 00       	push   0x83b88
   21a80:	e8 d6 5c 00 00       	call   2775b <printk>
   21a85:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:38
            return false;
   21a88:	b8 00 00 00 00       	mov    eax,0x0
   21a8d:	e9 98 03 00 00       	jmp    21e2a <parseMBR+0x457>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:43
        }
    }
    else
    {
        printd(DEBUG_HARDDRIVE,"Disk is ATA\n");
   21a92:	83 ec 08             	sub    esp,0x8
   21a95:	68 a8 3b 08 00       	push   0x83ba8
   21a9a:	6a 08                	push   0x8
   21a9c:	e8 da 5c 00 00       	call   2777b <printd>
   21aa1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:44
        int lResult=ataReadDisk(devInfo, mbr->parts, 0, mbrBuffer, 1);
   21aa4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21aa7:	83 ec 0c             	sub    esp,0xc
   21aaa:	6a 01                	push   0x1
   21aac:	68 a0 8d 09 00       	push   0x98da0
   21ab1:	6a 00                	push   0x0
   21ab3:	50                   	push   eax
   21ab4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21ab7:	e8 ff 14 00 00       	call   22fbb <ataReadDisk>
   21abc:	83 c4 20             	add    esp,0x20
   21abf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:45
        if (lResult!=512)
   21ac2:	81 7d ec 00 02 00 00 	cmp    DWORD PTR [ebp-0x14],0x200
   21ac9:	74 1d                	je     21ae8 <parseMBR+0x115>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:47
        {
            printk("Could not read ATA MBR (0x%08X)", lResult);
   21acb:	83 ec 08             	sub    esp,0x8
   21ace:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   21ad1:	68 88 3b 08 00       	push   0x83b88
   21ad6:	e8 80 5c 00 00       	call   2775b <printk>
   21adb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:48
            return false;
   21ade:	b8 00 00 00 00       	mov    eax,0x0
   21ae3:	e9 42 03 00 00       	jmp    21e2a <parseMBR+0x457>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:51
        }
    }
    memcpy(mbr->diskID, &mbrBuffer[0x1b4], 10);
   21ae8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21aeb:	05 04 04 00 00       	add    eax,0x404
   21af0:	83 ec 04             	sub    esp,0x4
   21af3:	6a 0a                	push   0xa
   21af5:	68 54 8f 09 00       	push   0x98f54
   21afa:	50                   	push   eax
   21afb:	e8 bc 45 00 00       	call   260bc <memcpy>
   21b00:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52
    mbr->validBootSector=mbrBuffer[0x1FE]==0x55 && mbrBuffer[0x1FF]==0xAA;
   21b03:	0f b6 05 9e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9e
   21b0a:	3c 55                	cmp    al,0x55
   21b0c:	75 12                	jne    21b20 <parseMBR+0x14d>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52 (discriminator 1)
   21b0e:	0f b6 05 9f 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9f
   21b15:	3c aa                	cmp    al,0xaa
   21b17:	75 07                	jne    21b20 <parseMBR+0x14d>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52 (discriminator 3)
   21b19:	b8 01 00 00 00       	mov    eax,0x1
   21b1e:	eb 05                	jmp    21b25 <parseMBR+0x152>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52 (discriminator 4)
   21b20:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52 (discriminator 6)
   21b25:	83 e0 01             	and    eax,0x1
   21b28:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   21b2b:	88 82 0e 04 00 00    	mov    BYTE PTR [edx+0x40e],al
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:53 (discriminator 6)
    mbr->parts[0].bootable = mbrBuffer[MBR_PART1_OFFSET+0]==0x80;
   21b31:	0f b6 05 5e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f5e
   21b38:	3c 80                	cmp    al,0x80
   21b3a:	0f 94 c2             	sete   dl
   21b3d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21b40:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:54 (discriminator 6)
    mbr->parts[0].systemID = mbrBuffer[MBR_PART1_OFFSET+4];
   21b43:	0f b6 15 62 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f62
   21b4a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21b4d:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:55 (discriminator 6)
    mbr->parts[0].partStartSector = mbrBuffer[MBR_PART1_OFFSET+8] | (mbrBuffer[MBR_PART1_OFFSET+9]<<8) | (mbrBuffer[MBR_PART1_OFFSET+10]<<16) | (mbrBuffer[MBR_PART1_OFFSET+11]<<24);
   21b50:	0f b6 05 66 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f66
   21b57:	0f b6 c0             	movzx  eax,al
   21b5a:	0f b6 15 67 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f67
   21b61:	0f b6 d2             	movzx  edx,dl
   21b64:	c1 e2 08             	shl    edx,0x8
   21b67:	09 c2                	or     edx,eax
   21b69:	0f b6 05 68 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f68
   21b70:	0f b6 c0             	movzx  eax,al
   21b73:	c1 e0 10             	shl    eax,0x10
   21b76:	09 c2                	or     edx,eax
   21b78:	0f b6 05 69 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f69
   21b7f:	0f b6 c0             	movzx  eax,al
   21b82:	c1 e0 18             	shl    eax,0x18
   21b85:	09 d0                	or     eax,edx
   21b87:	89 c2                	mov    edx,eax
   21b89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21b8c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:56 (discriminator 6)
    mbr->parts[0].partTotalSectors = mbrBuffer[MBR_PART1_OFFSET+12] | (mbrBuffer[MBR_PART1_OFFSET+13]<<8) | (mbrBuffer[MBR_PART1_OFFSET+14]<<16) | (mbrBuffer[MBR_PART1_OFFSET+15]<<24);
   21b8e:	0f b6 05 6a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6a
   21b95:	0f b6 c0             	movzx  eax,al
   21b98:	0f b6 15 6b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f6b
   21b9f:	0f b6 d2             	movzx  edx,dl
   21ba2:	c1 e2 08             	shl    edx,0x8
   21ba5:	09 c2                	or     edx,eax
   21ba7:	0f b6 05 6c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6c
   21bae:	0f b6 c0             	movzx  eax,al
   21bb1:	c1 e0 10             	shl    eax,0x10
   21bb4:	09 c2                	or     edx,eax
   21bb6:	0f b6 05 6d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6d
   21bbd:	0f b6 c0             	movzx  eax,al
   21bc0:	c1 e0 18             	shl    eax,0x18
   21bc3:	09 d0                	or     eax,edx
   21bc5:	89 c2                	mov    edx,eax
   21bc7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21bca:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:57 (discriminator 6)
    mbr->parts[0].partEndSector = mbr->parts[0].partStartSector + mbr->parts[0].partTotalSectors;
   21bcd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21bd0:	8b 10                	mov    edx,DWORD PTR [eax]
   21bd2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21bd5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   21bd8:	01 c2                	add    edx,eax
   21bda:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21bdd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:59 (discriminator 6)

    mbr->parts[1].bootable = mbrBuffer[MBR_PART2_OFFSET+0]==0x80;
   21be0:	0f b6 05 6e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6e
   21be7:	3c 80                	cmp    al,0x80
   21be9:	0f 94 c2             	sete   dl
   21bec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21bef:	88 50 1c             	mov    BYTE PTR [eax+0x1c],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:60 (discriminator 6)
    mbr->parts[1].systemID = mbrBuffer[MBR_PART2_OFFSET+4];
   21bf2:	0f b6 15 72 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f72
   21bf9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21bfc:	88 50 1d             	mov    BYTE PTR [eax+0x1d],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:61 (discriminator 6)
    mbr->parts[1].partStartSector = mbrBuffer[MBR_PART2_OFFSET+8] | (mbrBuffer[MBR_PART2_OFFSET+9]<<8) | (mbrBuffer[MBR_PART2_OFFSET+10]<<16) | (mbrBuffer[MBR_PART2_OFFSET+11]<<24);
   21bff:	0f b6 05 76 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f76
   21c06:	0f b6 c0             	movzx  eax,al
   21c09:	0f b6 15 77 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f77
   21c10:	0f b6 d2             	movzx  edx,dl
   21c13:	c1 e2 08             	shl    edx,0x8
   21c16:	09 c2                	or     edx,eax
   21c18:	0f b6 05 78 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f78
   21c1f:	0f b6 c0             	movzx  eax,al
   21c22:	c1 e0 10             	shl    eax,0x10
   21c25:	09 c2                	or     edx,eax
   21c27:	0f b6 05 79 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f79
   21c2e:	0f b6 c0             	movzx  eax,al
   21c31:	c1 e0 18             	shl    eax,0x18
   21c34:	09 d0                	or     eax,edx
   21c36:	89 c2                	mov    edx,eax
   21c38:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21c3b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:62 (discriminator 6)
    mbr->parts[1].partTotalSectors = mbrBuffer[MBR_PART2_OFFSET+12] | (mbrBuffer[MBR_PART2_OFFSET+13]<<8) | (mbrBuffer[MBR_PART2_OFFSET+14]<<16) | (mbrBuffer[MBR_PART2_OFFSET+15]<<24);
   21c3e:	0f b6 05 7a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7a
   21c45:	0f b6 c0             	movzx  eax,al
   21c48:	0f b6 15 7b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f7b
   21c4f:	0f b6 d2             	movzx  edx,dl
   21c52:	c1 e2 08             	shl    edx,0x8
   21c55:	09 c2                	or     edx,eax
   21c57:	0f b6 05 7c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7c
   21c5e:	0f b6 c0             	movzx  eax,al
   21c61:	c1 e0 10             	shl    eax,0x10
   21c64:	09 c2                	or     edx,eax
   21c66:	0f b6 05 7d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7d
   21c6d:	0f b6 c0             	movzx  eax,al
   21c70:	c1 e0 18             	shl    eax,0x18
   21c73:	09 d0                	or     eax,edx
   21c75:	89 c2                	mov    edx,eax
   21c77:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21c7a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:63 (discriminator 6)
    mbr->parts[1].partEndSector = mbr->parts[1].partStartSector + mbr->parts[1].partTotalSectors;
   21c7d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21c80:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   21c83:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21c86:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   21c89:	01 c2                	add    edx,eax
   21c8b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21c8e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:65 (discriminator 6)

    mbr->parts[2].bootable = mbrBuffer[MBR_PART3_OFFSET+0]==0x80;
   21c91:	0f b6 05 7e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7e
   21c98:	3c 80                	cmp    al,0x80
   21c9a:	0f 94 c2             	sete   dl
   21c9d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21ca0:	88 50 2c             	mov    BYTE PTR [eax+0x2c],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:66 (discriminator 6)
    mbr->parts[2].systemID = mbrBuffer[MBR_PART3_OFFSET+4];
   21ca3:	0f b6 15 82 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f82
   21caa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21cad:	88 50 2d             	mov    BYTE PTR [eax+0x2d],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:67 (discriminator 6)
    mbr->parts[2].partStartSector = mbrBuffer[MBR_PART3_OFFSET+8] | (mbrBuffer[MBR_PART3_OFFSET+9]<<8) | (mbrBuffer[MBR_PART3_OFFSET+10]<<16) | (mbrBuffer[MBR_PART3_OFFSET+11]<<24);
   21cb0:	0f b6 05 86 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f86
   21cb7:	0f b6 c0             	movzx  eax,al
   21cba:	0f b6 15 87 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f87
   21cc1:	0f b6 d2             	movzx  edx,dl
   21cc4:	c1 e2 08             	shl    edx,0x8
   21cc7:	09 c2                	or     edx,eax
   21cc9:	0f b6 05 88 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f88
   21cd0:	0f b6 c0             	movzx  eax,al
   21cd3:	c1 e0 10             	shl    eax,0x10
   21cd6:	09 c2                	or     edx,eax
   21cd8:	0f b6 05 89 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f89
   21cdf:	0f b6 c0             	movzx  eax,al
   21ce2:	c1 e0 18             	shl    eax,0x18
   21ce5:	09 d0                	or     eax,edx
   21ce7:	89 c2                	mov    edx,eax
   21ce9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21cec:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:68 (discriminator 6)
    mbr->parts[2].partTotalSectors = mbrBuffer[MBR_PART3_OFFSET+12] | (mbrBuffer[MBR_PART3_OFFSET+13]<<8) | (mbrBuffer[MBR_PART3_OFFSET+14]<<16) | (mbrBuffer[MBR_PART3_OFFSET+15]<<24);
   21cef:	0f b6 05 8a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8a
   21cf6:	0f b6 c0             	movzx  eax,al
   21cf9:	0f b6 15 8b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f8b
   21d00:	0f b6 d2             	movzx  edx,dl
   21d03:	c1 e2 08             	shl    edx,0x8
   21d06:	09 c2                	or     edx,eax
   21d08:	0f b6 05 8c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8c
   21d0f:	0f b6 c0             	movzx  eax,al
   21d12:	c1 e0 10             	shl    eax,0x10
   21d15:	09 c2                	or     edx,eax
   21d17:	0f b6 05 8d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8d
   21d1e:	0f b6 c0             	movzx  eax,al
   21d21:	c1 e0 18             	shl    eax,0x18
   21d24:	09 d0                	or     eax,edx
   21d26:	89 c2                	mov    edx,eax
   21d28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21d2b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:69 (discriminator 6)
    mbr->parts[2].partEndSector = mbr->parts[2].partStartSector + mbr->parts[2].partTotalSectors;
   21d2e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21d31:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
   21d34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21d37:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   21d3a:	01 c2                	add    edx,eax
   21d3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21d3f:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:71 (discriminator 6)

    mbr->parts[3].bootable = mbrBuffer[MBR_PART4_OFFSET+0]==0x80;
   21d42:	0f b6 05 8e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8e
   21d49:	3c 80                	cmp    al,0x80
   21d4b:	0f 94 c2             	sete   dl
   21d4e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21d51:	88 50 3c             	mov    BYTE PTR [eax+0x3c],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:72 (discriminator 6)
    mbr->parts[3].systemID = mbrBuffer[MBR_PART4_OFFSET+4];
   21d54:	0f b6 15 92 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f92
   21d5b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21d5e:	88 50 3d             	mov    BYTE PTR [eax+0x3d],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:73 (discriminator 6)
    mbr->parts[3].partStartSector = mbrBuffer[MBR_PART4_OFFSET+8] | (mbrBuffer[MBR_PART4_OFFSET+9]<<8) | (mbrBuffer[MBR_PART4_OFFSET+10]<<16) | (mbrBuffer[MBR_PART4_OFFSET+11]<<24);
   21d61:	0f b6 05 96 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f96
   21d68:	0f b6 c0             	movzx  eax,al
   21d6b:	0f b6 15 97 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f97
   21d72:	0f b6 d2             	movzx  edx,dl
   21d75:	c1 e2 08             	shl    edx,0x8
   21d78:	09 c2                	or     edx,eax
   21d7a:	0f b6 05 98 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f98
   21d81:	0f b6 c0             	movzx  eax,al
   21d84:	c1 e0 10             	shl    eax,0x10
   21d87:	09 c2                	or     edx,eax
   21d89:	0f b6 05 99 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f99
   21d90:	0f b6 c0             	movzx  eax,al
   21d93:	c1 e0 18             	shl    eax,0x18
   21d96:	09 d0                	or     eax,edx
   21d98:	89 c2                	mov    edx,eax
   21d9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21d9d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:74 (discriminator 6)
    mbr->parts[3].partTotalSectors = mbrBuffer[MBR_PART4_OFFSET+12] | (mbrBuffer[MBR_PART4_OFFSET+13]<<8) | (mbrBuffer[MBR_PART4_OFFSET+14]<<16) | (mbrBuffer[MBR_PART4_OFFSET+15]<<24);
   21da0:	0f b6 05 9a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9a
   21da7:	0f b6 c0             	movzx  eax,al
   21daa:	0f b6 15 9b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f9b
   21db1:	0f b6 d2             	movzx  edx,dl
   21db4:	c1 e2 08             	shl    edx,0x8
   21db7:	09 c2                	or     edx,eax
   21db9:	0f b6 05 9c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9c
   21dc0:	0f b6 c0             	movzx  eax,al
   21dc3:	c1 e0 10             	shl    eax,0x10
   21dc6:	09 c2                	or     edx,eax
   21dc8:	0f b6 05 9d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9d
   21dcf:	0f b6 c0             	movzx  eax,al
   21dd2:	c1 e0 18             	shl    eax,0x18
   21dd5:	09 d0                	or     eax,edx
   21dd7:	89 c2                	mov    edx,eax
   21dd9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21ddc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:75 (discriminator 6)
    mbr->parts[3].partEndSector = mbr->parts[3].partStartSector + mbr->parts[3].partTotalSectors;
   21ddf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21de2:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
   21de5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21de8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   21deb:	01 c2                	add    edx,eax
   21ded:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21df0:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:76 (discriminator 6)
    mbr->partCount=4;
   21df3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21df6:	c7 80 00 04 00 00 04 	mov    DWORD PTR [eax+0x400],0x4
   21dfd:	00 00 00 
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:77 (discriminator 6)
    if (mbr->parts[0].systemID=0xEE)
   21e00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21e03:	c6 40 0d ee          	mov    BYTE PTR [eax+0xd],0xee
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:79 (discriminator 6)
    {
        printd(DEBUG_HARDDRIVE,"Found GPT partition table\n");
   21e07:	83 ec 08             	sub    esp,0x8
   21e0a:	68 b5 3b 08 00       	push   0x83bb5
   21e0f:	6a 08                	push   0x8
   21e11:	e8 65 59 00 00       	call   2777b <printd>
   21e16:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:80 (discriminator 6)
        return parseGPT(port, mbr);
   21e19:	83 ec 08             	sub    esp,0x8
   21e1c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   21e1f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   21e22:	e8 05 00 00 00       	call   21e2c <parseGPT>
   21e27:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:83
    }
    return true;
}
   21e2a:	c9                   	leave  
   21e2b:	c3                   	ret    

00021e2c <parseGPT>:
parseGPT():
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:86

bool parseGPT(HBA_PORT* port, struct mbr_t* mbr)
{
   21e2c:	55                   	push   ebp
   21e2d:	89 e5                	mov    ebp,esp
   21e2f:	53                   	push   ebx
   21e30:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:87
int readLen=0;
   21e33:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:89

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
   21e3a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21e3d:	8b 00                	mov    eax,DWORD PTR [eax]
   21e3f:	6a 01                	push   0x1
   21e41:	68 a0 8d 09 00       	push   0x98da0
   21e46:	50                   	push   eax
   21e47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21e4a:	e8 4c 35 ff ff       	call   1539b <ahciRead>
   21e4f:	83 c4 10             	add    esp,0x10
   21e52:	85 c0                	test   eax,eax
   21e54:	0f 95 c0             	setne  al
   21e57:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:90
    gptHdr=mbrBuffer;
   21e5a:	c7 05 84 8d 09 00 a0 	mov    DWORD PTR ds:0x98d84,0x98da0
   21e61:	8d 09 00 
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:96

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
            gptHdr->partEntrySize,
            gptHdr->lastUsableLBAL);
   21e64:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   21e69:	8b 58 30             	mov    ebx,DWORD PTR [eax+0x30]
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:95
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
            gptHdr->partEntrySize,
   21e6c:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   21e71:	8b 48 54             	mov    ecx,DWORD PTR [eax+0x54]
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:94
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
   21e74:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   21e79:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:93
            gptHdr->partEntryLBAL,
   21e7c:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   21e81:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
   21e84:	83 ec 08             	sub    esp,0x8
   21e87:	53                   	push   ebx
   21e88:	51                   	push   ecx
   21e89:	52                   	push   edx
   21e8a:	50                   	push   eax
   21e8b:	68 d0 3b 08 00       	push   0x83bd0
   21e90:	6a 08                	push   0x8
   21e92:	e8 e4 58 00 00       	call   2777b <printd>
   21e97:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:97
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
            gptHdr->partEntrySize,
            gptHdr->lastUsableLBAL);
    readLen=((gptHdr->partEntryCount*gptHdr->partEntrySize)/512)+1;
   21e9a:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   21e9f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
   21ea2:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   21ea7:	8b 40 54             	mov    eax,DWORD PTR [eax+0x54]
   21eaa:	0f af c2             	imul   eax,edx
   21ead:	c1 e8 09             	shr    eax,0x9
   21eb0:	83 c0 01             	add    eax,0x1
   21eb3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:99
    
    printd(DEBUG_HARDDRIVE,"Reading GPT partition table @ lba %u for %u sectors\n",gptHdr->partEntryLBAL,readLen);
   21eb6:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   21ebb:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
   21ebe:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   21ec1:	50                   	push   eax
   21ec2:	68 1c 3c 08 00       	push   0x83c1c
   21ec7:	6a 08                	push   0x8
   21ec9:	e8 ad 58 00 00       	call   2777b <printd>
   21ece:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:100
    lResult=ahciRead(port,gptHdr->partEntryLBAL,partBuffer,10);
   21ed1:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   21ed6:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
   21ed9:	6a 0a                	push   0xa
   21edb:	68 80 65 09 00       	push   0x96580
   21ee0:	50                   	push   eax
   21ee1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21ee4:	e8 b2 34 ff ff       	call   1539b <ahciRead>
   21ee9:	83 c4 10             	add    esp,0x10
   21eec:	85 c0                	test   eax,eax
   21eee:	0f 95 c0             	setne  al
   21ef1:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:102
    
    gptPart=partBuffer;
   21ef4:	c7 05 80 8d 09 00 80 	mov    DWORD PTR ds:0x98d80,0x96580
   21efb:	65 09 00 
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:103
    mbr->partCount=0;
   21efe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21f01:	c7 80 00 04 00 00 00 	mov    DWORD PTR [eax+0x400],0x0
   21f08:	00 00 00 
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:104
    for (int cnt=0;cnt<20;cnt++)
   21f0b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   21f12:	e9 b6 00 00 00       	jmp    21fcd <parseGPT+0x1a1>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:106
    {
        printd(DEBUG_HARDDRIVE,"Part %u, first=%u\n",cnt,gptPart[cnt].partFirstLBAL);
   21f17:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   21f1c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21f1f:	c1 e2 07             	shl    edx,0x7
   21f22:	01 d0                	add    eax,edx
   21f24:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   21f27:	50                   	push   eax
   21f28:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   21f2b:	68 51 3c 08 00       	push   0x83c51
   21f30:	6a 08                	push   0x8
   21f32:	e8 44 58 00 00       	call   2777b <printd>
   21f37:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:107
        if (gptPart[cnt].partFirstLBAL>0)
   21f3a:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   21f3f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21f42:	c1 e2 07             	shl    edx,0x7
   21f45:	01 d0                	add    eax,edx
   21f47:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   21f4a:	85 c0                	test   eax,eax
   21f4c:	74 7b                	je     21fc9 <parseGPT+0x19d>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:109
        {
            mbr->parts[cnt].partStartSector=gptPart[cnt].partFirstLBAL;
   21f4e:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   21f53:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21f56:	c1 e2 07             	shl    edx,0x7
   21f59:	01 d0                	add    eax,edx
   21f5b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   21f5e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   21f61:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21f64:	c1 e1 04             	shl    ecx,0x4
   21f67:	01 ca                	add    edx,ecx
   21f69:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:110
            mbr->parts[cnt].partEndSector=gptPart[cnt].partLastLBAL;
   21f6b:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   21f70:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21f73:	c1 e2 07             	shl    edx,0x7
   21f76:	01 d0                	add    eax,edx
   21f78:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   21f7b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   21f7e:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21f81:	c1 e1 04             	shl    ecx,0x4
   21f84:	01 ca                	add    edx,ecx
   21f86:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:111
            mbr->parts[cnt].partTotalSectors=mbr->parts[cnt].partEndSector-mbr->parts[cnt].partStartSector;
   21f89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21f8c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21f8f:	c1 e2 04             	shl    edx,0x4
   21f92:	01 d0                	add    eax,edx
   21f94:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   21f97:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21f9a:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21f9d:	c1 e1 04             	shl    ecx,0x4
   21fa0:	01 c8                	add    eax,ecx
   21fa2:	8b 00                	mov    eax,DWORD PTR [eax]
   21fa4:	29 c2                	sub    edx,eax
   21fa6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21fa9:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21fac:	c1 e1 04             	shl    ecx,0x4
   21faf:	01 c8                	add    eax,ecx
   21fb1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:113
            //mbr->parts[cnt].systemID
            mbr->partCount++;
   21fb4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21fb7:	8b 80 00 04 00 00    	mov    eax,DWORD PTR [eax+0x400]
   21fbd:	8d 50 01             	lea    edx,[eax+0x1]
   21fc0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21fc3:	89 90 00 04 00 00    	mov    DWORD PTR [eax+0x400],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:104 (discriminator 2)
    printd(DEBUG_HARDDRIVE,"Reading GPT partition table @ lba %u for %u sectors\n",gptHdr->partEntryLBAL,readLen);
    lResult=ahciRead(port,gptHdr->partEntryLBAL,partBuffer,10);
    
    gptPart=partBuffer;
    mbr->partCount=0;
    for (int cnt=0;cnt<20;cnt++)
   21fc9:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:104 (discriminator 1)
   21fcd:	83 7d f4 13          	cmp    DWORD PTR [ebp-0xc],0x13
   21fd1:	0f 8e 40 ff ff ff    	jle    21f17 <parseGPT+0xeb>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:118
            mbr->partCount++;
        }
    }


    return true;
   21fd7:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:120
        
}
   21fdc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   21fdf:	c9                   	leave  
   21fe0:	c3                   	ret    
   21fe1:	66 90                	xchg   ax,ax
   21fe3:	90                   	nop

00021fe4 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   21fe4:	55                   	push   ebp
   21fe5:	89 e5                	mov    ebp,esp
   21fe7:	83 ec 08             	sub    esp,0x8
   21fea:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   21fed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21ff0:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   21ff4:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   21ff7:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   21ffb:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   21fff:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   22000:	90                   	nop
   22001:	c9                   	leave  
   22002:	c3                   	ret    

00022003 <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   22003:	55                   	push   ebp
   22004:	89 e5                	mov    ebp,esp
   22006:	83 ec 14             	sub    esp,0x14
   22009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2200c:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   22010:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   22014:	89 c2                	mov    edx,eax
   22016:	ec                   	in     al,dx
   22017:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   2201a:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   2201e:	c9                   	leave  
   2201f:	c3                   	ret    

00022020 <inw>:
inw():
/home/yogi/src/os/chrisOS/include/io.h:44

static __inline unsigned short inw(unsigned short __port)
{
   22020:	55                   	push   ebp
   22021:	89 e5                	mov    ebp,esp
   22023:	83 ec 14             	sub    esp,0x14
   22026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22029:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:46
	unsigned short __val;
	__asm__ volatile ("inw %0, %1" : "=a" (__val) : "dN" (__port));
   2202d:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   22031:	89 c2                	mov    edx,eax
   22033:	66 ed                	in     ax,dx
   22035:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/include/io.h:47
	return __val;
   22039:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/src/os/chrisOS/include/io.h:48
}
   2203d:	c9                   	leave  
   2203e:	c3                   	ret    

0002203f <insw>:
insw():
/home/yogi/src/os/chrisOS/include/io.h:86
		      : "+D" (__buf), "+c" (__n)
		      : "d" (__port));
}

static __inline void insw(unsigned short __port, void *__buf, unsigned long __n)
{
   2203f:	55                   	push   ebp
   22040:	89 e5                	mov    ebp,esp
   22042:	57                   	push   edi
   22043:	53                   	push   ebx
   22044:	83 ec 04             	sub    esp,0x4
   22047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2204a:	66 89 45 f4          	mov    WORD PTR [ebp-0xc],ax
/home/yogi/src/os/chrisOS/include/io.h:87
	__asm__ volatile ("cld; rep; insw"
   2204e:	0f b7 55 f4          	movzx  edx,WORD PTR [ebp-0xc]
   22052:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   22055:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   22058:	89 cb                	mov    ebx,ecx
   2205a:	89 df                	mov    edi,ebx
   2205c:	89 c1                	mov    ecx,eax
   2205e:	fc                   	cld    
   2205f:	f3 66 6d             	rep ins WORD PTR es:[edi],dx
   22062:	89 c8                	mov    eax,ecx
   22064:	89 fb                	mov    ebx,edi
   22066:	89 5d 0c             	mov    DWORD PTR [ebp+0xc],ebx
   22069:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/include/io.h:90
		      : "+D" (__buf), "+c" (__n)
		      : "d" (__port));
}
   2206c:	90                   	nop
   2206d:	83 c4 04             	add    esp,0x4
   22070:	5b                   	pop    ebx
   22071:	5f                   	pop    edi
   22072:	5d                   	pop    ebp
   22073:	c3                   	ret    

00022074 <ataWaitForDRQ>:
ataWaitForDRQ():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:22
float ticks=0;
struct ataDeviceInfo_t* atablockingReadDev;

//Returns non-zero value IF TIMEOUT
uint8_t __attribute__((noinline)) ataWaitForDRQ(struct ataDeviceInfo_t* devInfo, bool toBeSet, int forHowManyMS)
{
   22074:	55                   	push   ebp
   22075:	89 e5                	mov    ebp,esp
   22077:	83 ec 14             	sub    esp,0x14
   2207a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2207d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:23
    int ticks = forHowManyMS*kTicksPerMS;
   22080:	a1 c4 97 12 00       	mov    eax,ds:0x1297c4
   22085:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   22088:	0f af c2             	imul   eax,edx
   2208b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:24
    uint8_t inValue=0;
   2208e:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:25
    while (ticks > 0)
   22092:	eb 57                	jmp    220eb <ataWaitForDRQ+0x77>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:27
    {
        STI
   22094:	fb                   	sti    
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:29
        //waitTicks(1);
        __asm__("sti\nhlt\n");
   22095:	fb                   	sti    
   22096:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:30
        inValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
   22097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2209a:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   220a0:	83 c0 07             	add    eax,0x7
   220a3:	0f b7 c0             	movzx  eax,ax
   220a6:	50                   	push   eax
   220a7:	e8 57 ff ff ff       	call   22003 <inb>
   220ac:	83 c4 04             	add    esp,0x4
   220af:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:31
        if (toBeSet && (inValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ)
   220b2:	80 7d ec 00          	cmp    BYTE PTR [ebp-0x14],0x0
   220b6:	74 12                	je     220ca <ataWaitForDRQ+0x56>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:31 (discriminator 1)
   220b8:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   220bc:	83 e0 08             	and    eax,0x8
   220bf:	85 c0                	test   eax,eax
   220c1:	74 07                	je     220ca <ataWaitForDRQ+0x56>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:32
                return 0;
   220c3:	b8 00 00 00 00       	mov    eax,0x0
   220c8:	eb 5e                	jmp    22128 <ataWaitForDRQ+0xb4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:33
        else if ((!toBeSet && (inValue & ATA_STATUS_DRQ) != ATA_STATUS_DRQ))
   220ca:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
   220ce:	83 f0 01             	xor    eax,0x1
   220d1:	84 c0                	test   al,al
   220d3:	74 12                	je     220e7 <ataWaitForDRQ+0x73>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:33 (discriminator 1)
   220d5:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   220d9:	83 e0 08             	and    eax,0x8
   220dc:	85 c0                	test   eax,eax
   220de:	75 07                	jne    220e7 <ataWaitForDRQ+0x73>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:34
                return 0;
   220e0:	b8 00 00 00 00       	mov    eax,0x0
   220e5:	eb 41                	jmp    22128 <ataWaitForDRQ+0xb4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:35
        ticks--;
   220e7:	83 6d fc 01          	sub    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:25
//Returns non-zero value IF TIMEOUT
uint8_t __attribute__((noinline)) ataWaitForDRQ(struct ataDeviceInfo_t* devInfo, bool toBeSet, int forHowManyMS)
{
    int ticks = forHowManyMS*kTicksPerMS;
    uint8_t inValue=0;
    while (ticks > 0)
   220eb:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   220ef:	7f a3                	jg     22094 <ataWaitForDRQ+0x20>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:37
                return 0;
        else if ((!toBeSet && (inValue & ATA_STATUS_DRQ) != ATA_STATUS_DRQ))
                return 0;
        ticks--;
    }
    hdError=inb(devInfo->ioPort+ATA_PORT_ERROR);
   220f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   220f4:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   220fa:	83 c0 01             	add    eax,0x1
   220fd:	0f b7 c0             	movzx  eax,ax
   22100:	50                   	push   eax
   22101:	e8 fd fe ff ff       	call   22003 <inb>
   22106:	83 c4 04             	add    esp,0x4
   22109:	0f b6 c0             	movzx  eax,al
   2210c:	a3 dc a5 09 00       	mov    ds:0x9a5dc,eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:38
    if ((hdError & 0x4)==0x4)
   22111:	a1 dc a5 09 00       	mov    eax,ds:0x9a5dc
   22116:	83 e0 04             	and    eax,0x4
   22119:	85 c0                	test   eax,eax
   2211b:	74 07                	je     22124 <ataWaitForDRQ+0xb0>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:39
        return 0;
   2211d:	b8 00 00 00 00       	mov    eax,0x0
   22122:	eb 04                	jmp    22128 <ataWaitForDRQ+0xb4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:40
    return inValue;
   22124:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:41
}
   22128:	c9                   	leave  
   22129:	c3                   	ret    

0002212a <ataWaitForIdle>:
ataWaitForIdle():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:44

uint8_t ataWaitForIdle(struct ataDeviceInfo_t* devInfo)
{
   2212a:	55                   	push   ebp
   2212b:	89 e5                	mov    ebp,esp
   2212d:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:45
    ticks = 0;
   22130:	d9 ee                	fldz   
   22132:	d9 1d e8 a5 09 00    	fstp   DWORD PTR ds:0x9a5e8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:46
    uint8_t lValue=0;
   22138:	c6 45 ff 00          	mov    BYTE PTR [ebp-0x1],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:48
    //printk("aaWaitForIdle: ticks(%u@0x%08X)=ATA_STANDARD_WAIT_MS(%d)*kTicksPerMS((%d@0x%08X))\n", ticks, &ticks, (ATA_STANDARD_WAIT_MS), kTicksPerMS, &kTicksPerMS);
    lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
   2213c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2213f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22145:	83 c0 07             	add    eax,0x7
   22148:	0f b7 c0             	movzx  eax,ax
   2214b:	50                   	push   eax
   2214c:	e8 b2 fe ff ff       	call   22003 <inb>
   22151:	83 c4 04             	add    esp,0x4
   22154:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:49
    if ((lValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ && ticks)
   22157:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   2215b:	83 e0 08             	and    eax,0x8
   2215e:	85 c0                	test   eax,eax
   22160:	74 76                	je     221d8 <ataWaitForIdle+0xae>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:49 (discriminator 1)
   22162:	d9 05 e8 a5 09 00    	fld    DWORD PTR ds:0x9a5e8
   22168:	d9 ee                	fldz   
   2216a:	df e9                	fucomip st,st(1)
   2216c:	7a 0a                	jp     22178 <ataWaitForIdle+0x4e>
   2216e:	d9 ee                	fldz   
   22170:	df e9                	fucomip st,st(1)
   22172:	dd d8                	fstp   st(0)
   22174:	74 19                	je     2218f <ataWaitForIdle+0x65>
   22176:	eb 02                	jmp    2217a <ataWaitForIdle+0x50>
   22178:	dd d8                	fstp   st(0)
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:50
        inw(devInfo->ioPort+ATA_PORT_DATA);
   2217a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2217d:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22183:	0f b7 c0             	movzx  eax,ax
   22186:	50                   	push   eax
   22187:	e8 94 fe ff ff       	call   22020 <inw>
   2218c:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:51
    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   2218f:	eb 47                	jmp    221d8 <ataWaitForIdle+0xae>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:53
    {
        __asm__("sti\nhlt\n");
   22191:	fb                   	sti    
   22192:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:54
        lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
   22193:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22196:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2219c:	83 c0 07             	add    eax,0x7
   2219f:	0f b7 c0             	movzx  eax,ax
   221a2:	50                   	push   eax
   221a3:	e8 5b fe ff ff       	call   22003 <inb>
   221a8:	83 c4 04             	add    esp,0x4
   221ab:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:56
            //If both BUSY and DRQ are zero, then, the command is probably complete. 
        if ((lValue & (ATA_STATUS_DRQ | ATA_STATUS_BUSY)) == 0 )
   221ae:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   221b2:	25 88 00 00 00       	and    eax,0x88
   221b7:	85 c0                	test   eax,eax
   221b9:	75 07                	jne    221c2 <ataWaitForIdle+0x98>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:57
                    return 0;
   221bb:	b8 00 00 00 00       	mov    eax,0x0
   221c0:	eb 73                	jmp    22235 <ataWaitForIdle+0x10b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:58
        ticks++;
   221c2:	d9 05 e8 a5 09 00    	fld    DWORD PTR ds:0x9a5e8
   221c8:	d9 e8                	fld1   
   221ca:	de c1                	faddp  st(1),st
   221cc:	d9 5d ec             	fstp   DWORD PTR [ebp-0x14]
   221cf:	d9 45 ec             	fld    DWORD PTR [ebp-0x14]
   221d2:	d9 1d e8 a5 09 00    	fstp   DWORD PTR ds:0x9a5e8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:51
    uint8_t lValue=0;
    //printk("aaWaitForIdle: ticks(%u@0x%08X)=ATA_STANDARD_WAIT_MS(%d)*kTicksPerMS((%d@0x%08X))\n", ticks, &ticks, (ATA_STANDARD_WAIT_MS), kTicksPerMS, &kTicksPerMS);
    lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
    if ((lValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ && ticks)
        inw(devInfo->ioPort+ATA_PORT_DATA);
    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   221d8:	d9 05 e8 a5 09 00    	fld    DWORD PTR ds:0x9a5e8
   221de:	d9 c0                	fld    st(0)
   221e0:	d9 e8                	fld1   
   221e2:	de c1                	faddp  st(1),st
   221e4:	d9 5d ec             	fstp   DWORD PTR [ebp-0x14]
   221e7:	d9 45 ec             	fld    DWORD PTR [ebp-0x14]
   221ea:	d9 1d e8 a5 09 00    	fstp   DWORD PTR ds:0x9a5e8
   221f0:	8b 15 c4 97 12 00    	mov    edx,DWORD PTR ds:0x1297c4
   221f6:	89 d0                	mov    eax,edx
   221f8:	c1 e0 02             	shl    eax,0x2
   221fb:	01 d0                	add    eax,edx
   221fd:	01 c0                	add    eax,eax
   221ff:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   22202:	db 45 e8             	fild   DWORD PTR [ebp-0x18]
   22205:	d9 5d ec             	fstp   DWORD PTR [ebp-0x14]
   22208:	d9 45 ec             	fld    DWORD PTR [ebp-0x14]
   2220b:	df e9                	fucomip st,st(1)
   2220d:	dd d8                	fstp   st(0)
   2220f:	73 80                	jae    22191 <ataWaitForIdle+0x67>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:60
            //If both BUSY and DRQ are zero, then, the command is probably complete. 
        if ((lValue & (ATA_STATUS_DRQ | ATA_STATUS_BUSY)) == 0 )
                    return 0;
        ticks++;
    }
    hdError=inb(devInfo->ioPort+ATA_PORT_ERROR);
   22211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22214:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2221a:	83 c0 01             	add    eax,0x1
   2221d:	0f b7 c0             	movzx  eax,ax
   22220:	50                   	push   eax
   22221:	e8 dd fd ff ff       	call   22003 <inb>
   22226:	83 c4 04             	add    esp,0x4
   22229:	0f b6 c0             	movzx  eax,al
   2222c:	a3 dc a5 09 00       	mov    ds:0x9a5dc,eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:61
    return lValue;
   22231:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:62
}
   22235:	c9                   	leave  
   22236:	c3                   	ret    

00022237 <ataControllerIsReady>:
ataControllerIsReady():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:66


uint8_t ataControllerIsReady(struct ataDeviceInfo_t* devInfo)
{
   22237:	55                   	push   ebp
   22238:	89 e5                	mov    ebp,esp
   2223a:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:67
    int ticks = 0;
   2223d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:69
    
    int lStatus=0;
   22244:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:70
    uint8_t err=0;
   2224b:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:72

    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   2224f:	eb 4a                	jmp    2229b <ataControllerIsReady+0x64>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:74
    {
        lStatus=inb(devInfo->ioPort+ATA_PORT_STATUS);
   22251:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22254:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2225a:	83 c0 07             	add    eax,0x7
   2225d:	0f b7 c0             	movzx  eax,ax
   22260:	50                   	push   eax
   22261:	e8 9d fd ff ff       	call   22003 <inb>
   22266:	83 c4 04             	add    esp,0x4
   22269:	0f b6 c0             	movzx  eax,al
   2226c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:75
        wait(1);
   2226f:	83 ec 0c             	sub    esp,0xc
   22272:	6a 01                	push   0x1
   22274:	e8 21 67 00 00       	call   2899a <wait>
   22279:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:76
        ticks++;
   2227c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:77
	lStatus &= (ATA_STATUS_BUSY | ATA_STATUS_READY| ATA_STATUS_SEEK);
   22280:	81 65 f0 d0 00 00 00 	and    DWORD PTR [ebp-0x10],0xd0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:78
        if (lStatus & ATA_STATUS_READY )
   22287:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2228a:	83 e0 40             	and    eax,0x40
   2228d:	85 c0                	test   eax,eax
   2228f:	74 0a                	je     2229b <ataControllerIsReady+0x64>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:79
                return true;
   22291:	b8 01 00 00 00       	mov    eax,0x1
   22296:	e9 9c 00 00 00       	jmp    22337 <ataControllerIsReady+0x100>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:72
    int ticks = 0;
    
    int lStatus=0;
    uint8_t err=0;

    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   2229b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   2229e:	8d 42 01             	lea    eax,[edx+0x1]
   222a1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   222a4:	8b 0d c4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297c4
   222aa:	89 c8                	mov    eax,ecx
   222ac:	c1 e0 02             	shl    eax,0x2
   222af:	01 c8                	add    eax,ecx
   222b1:	01 c0                	add    eax,eax
   222b3:	39 c2                	cmp    edx,eax
   222b5:	7e 9a                	jle    22251 <ataControllerIsReady+0x1a>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:82
	lStatus &= (ATA_STATUS_BUSY | ATA_STATUS_READY| ATA_STATUS_SEEK);
        if (lStatus & ATA_STATUS_READY )
                return true;
    }

    if (lStatus==ATA_STATUS_ERROR || lStatus==ATA_STATUS_BUSY)
   222b7:	83 7d f0 01          	cmp    DWORD PTR [ebp-0x10],0x1
   222bb:	74 09                	je     222c6 <ataControllerIsReady+0x8f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:82 (discriminator 1)
   222bd:	81 7d f0 80 00 00 00 	cmp    DWORD PTR [ebp-0x10],0x80
   222c4:	75 36                	jne    222fc <ataControllerIsReady+0xc5>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:84
    {
         err=inb(0x1f1);
   222c6:	83 ec 0c             	sub    esp,0xc
   222c9:	68 f1 01 00 00       	push   0x1f1
   222ce:	e8 30 fd ff ff       	call   22003 <inb>
   222d3:	83 c4 10             	add    esp,0x10
   222d6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:86
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   222d9:	a1 78 98 12 00       	mov    eax,ds:0x129878
   222de:	83 e0 08             	and    eax,0x8
   222e1:	85 c0                	test   eax,eax
   222e3:	74 17                	je     222fc <ataControllerIsReady+0xc5>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:87
            printd(DEBUG_HARDDRIVE,"ataControllerIsReady: DRQ wait failed, lStatus=%02X, err=%02X\n",lStatus,err);
   222e5:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   222e9:	50                   	push   eax
   222ea:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   222ed:	68 80 3d 08 00       	push   0x83d80
   222f2:	6a 08                	push   0x8
   222f4:	e8 82 54 00 00       	call   2777b <printd>
   222f9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:90
#endif
    }
    if ( (lStatus & ATA_STATUS_READY)==0 && err==4)
   222fc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   222ff:	83 e0 40             	and    eax,0x40
   22302:	85 c0                	test   eax,eax
   22304:	75 0d                	jne    22313 <ataControllerIsReady+0xdc>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:90 (discriminator 1)
   22306:	80 7d ef 04          	cmp    BYTE PTR [ebp-0x11],0x4
   2230a:	75 07                	jne    22313 <ataControllerIsReady+0xdc>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:91
        lStatus=ATA_STATUS_READY;
   2230c:	c7 45 f0 40 00 00 00 	mov    DWORD PTR [ebp-0x10],0x40
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:93
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22313:	a1 78 98 12 00       	mov    eax,ds:0x129878
   22318:	83 e0 08             	and    eax,0x8
   2231b:	85 c0                	test   eax,eax
   2231d:	74 13                	je     22332 <ataControllerIsReady+0xfb>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:94
            printk("ataControllerIsReady: returning %02X\n",lStatus);
   2231f:	83 ec 08             	sub    esp,0x8
   22322:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   22325:	68 c0 3d 08 00       	push   0x83dc0
   2232a:	e8 2c 54 00 00       	call   2775b <printk>
   2232f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:96
#endif
    return true;
   22332:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:97
}
   22337:	c9                   	leave  
   22338:	c3                   	ret    

00022339 <ataStatusIsOk>:
ataStatusIsOk():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:100

static bool ataStatusIsOk(struct ataDeviceInfo_t* devInfo)
{
   22339:	55                   	push   ebp
   2233a:	89 e5                	mov    ebp,esp
   2233c:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:101
	unsigned char status = inb(devInfo->ioPort+ATA_PORT_STATUS);
   2233f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22342:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22348:	83 c0 07             	add    eax,0x7
   2234b:	0f b7 c0             	movzx  eax,ax
   2234e:	50                   	push   eax
   2234f:	e8 af fc ff ff       	call   22003 <inb>
   22354:	83 c4 04             	add    esp,0x4
   22357:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:103

	if (status & ATA_STATUS_BUSY)
   2235a:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   2235e:	84 c0                	test   al,al
   22360:	79 07                	jns    22369 <ataStatusIsOk+0x30>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:104
		return false;
   22362:	b8 00 00 00 00       	mov    eax,0x0
   22367:	eb 3b                	jmp    223a4 <ataStatusIsOk+0x6b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:105
	if (status & ATA_STATUS_WRITE_ERROR)
   22369:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   2236d:	83 e0 20             	and    eax,0x20
   22370:	85 c0                	test   eax,eax
   22372:	74 07                	je     2237b <ataStatusIsOk+0x42>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:106
		return true;
   22374:	b8 01 00 00 00       	mov    eax,0x1
   22379:	eb 29                	jmp    223a4 <ataStatusIsOk+0x6b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:107
	if (!(status & ATA_STATUS_READY))
   2237b:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   2237f:	83 e0 40             	and    eax,0x40
   22382:	85 c0                	test   eax,eax
   22384:	75 07                	jne    2238d <ataStatusIsOk+0x54>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:108
		return true;
   22386:	b8 01 00 00 00       	mov    eax,0x1
   2238b:	eb 17                	jmp    223a4 <ataStatusIsOk+0x6b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:109
	if (!(status & ATA_STATUS_SEEK))
   2238d:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   22391:	83 e0 10             	and    eax,0x10
   22394:	85 c0                	test   eax,eax
   22396:	75 07                	jne    2239f <ataStatusIsOk+0x66>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:110
		return true;
   22398:	b8 01 00 00 00       	mov    eax,0x1
   2239d:	eb 05                	jmp    223a4 <ataStatusIsOk+0x6b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:111
	return 1;
   2239f:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:112
}
   223a4:	c9                   	leave  
   223a5:	c3                   	ret    

000223a6 <ataSelectDrive>:
ataSelectDrive():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:115

bool ataSelectDrive(struct ataDeviceInfo_t* devInfo, uint8_t head)
{
   223a6:	55                   	push   ebp
   223a7:	89 e5                	mov    ebp,esp
   223a9:	83 ec 28             	sub    esp,0x28
   223ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   223af:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:116
    ataWaitForIdle(devInfo);
   223b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   223b5:	e8 70 fd ff ff       	call   2212a <ataWaitForIdle>
   223ba:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:117
    outb(devInfo->ioPort+ATA_DRIVE_SELECT, devInfo->driveHeadPortDesignation | (head& 0xF) ); 
   223bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   223c0:	0f b6 80 6e 02 00 00 	movzx  eax,BYTE PTR [eax+0x26e]
   223c7:	89 c2                	mov    edx,eax
   223c9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   223cd:	83 e0 0f             	and    eax,0xf
   223d0:	09 d0                	or     eax,edx
   223d2:	0f b6 d0             	movzx  edx,al
   223d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   223d8:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   223de:	83 c0 06             	add    eax,0x6
   223e1:	0f b7 c0             	movzx  eax,ax
   223e4:	52                   	push   edx
   223e5:	50                   	push   eax
   223e6:	e8 f9 fb ff ff       	call   21fe4 <outb>
   223eb:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:119
    //printk("Sending 0x%02X", drive==master?ATA_DRIVE_MASTER:ATA_DRIVE_SLAVE | (head& 0xF));
    if (!ataStatusIsOk(devInfo))
   223ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   223f1:	e8 43 ff ff ff       	call   22339 <ataStatusIsOk>
   223f6:	83 c4 04             	add    esp,0x4
   223f9:	83 f0 01             	xor    eax,0x1
   223fc:	84 c0                	test   al,al
   223fe:	74 6e                	je     2246e <ataSelectDrive+0xc8>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:122
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22400:	a1 78 98 12 00       	mov    eax,ds:0x129878
   22405:	83 e0 08             	and    eax,0x8
   22408:	85 c0                	test   eax,eax
   2240a:	74 3d                	je     22449 <ataSelectDrive+0xa3>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:123
            printk("ataSelectDrive: Failed to select drive %u, bus %u, status=0x%02X is not ok\n", devInfo->driveNo, devInfo->bus, inb(devInfo->ioPort+ATA_PORT_STATUS));
   2240c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2240f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22415:	83 c0 07             	add    eax,0x7
   22418:	0f b7 c0             	movzx  eax,ax
   2241b:	50                   	push   eax
   2241c:	e8 e2 fb ff ff       	call   22003 <inb>
   22421:	83 c4 04             	add    esp,0x4
   22424:	0f b6 c8             	movzx  ecx,al
   22427:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2242a:	8b 90 61 02 00 00    	mov    edx,DWORD PTR [eax+0x261]
   22430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22433:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   22439:	51                   	push   ecx
   2243a:	52                   	push   edx
   2243b:	50                   	push   eax
   2243c:	68 e8 3d 08 00       	push   0x83de8
   22441:	e8 15 53 00 00       	call   2775b <printk>
   22446:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:125
#endif
            return inb(devInfo->ioPort+ATA_PORT_STATUS);
   22449:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2244c:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22452:	83 c0 07             	add    eax,0x7
   22455:	0f b7 c0             	movzx  eax,ax
   22458:	83 ec 0c             	sub    esp,0xc
   2245b:	50                   	push   eax
   2245c:	e8 a2 fb ff ff       	call   22003 <inb>
   22461:	83 c4 10             	add    esp,0x10
   22464:	84 c0                	test   al,al
   22466:	0f 95 c0             	setne  al
   22469:	e9 96 00 00 00       	jmp    22504 <ataSelectDrive+0x15e>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:128
    }
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   2246e:	a1 78 98 12 00       	mov    eax,ds:0x129878
   22473:	83 e0 08             	and    eax,0x8
   22476:	85 c0                	test   eax,eax
   22478:	0f 84 81 00 00 00    	je     224ff <ataSelectDrive+0x159>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:130
    {
        wait(10);
   2247e:	83 ec 0c             	sub    esp,0xc
   22481:	6a 0a                	push   0xa
   22483:	e8 12 65 00 00       	call   2899a <wait>
   22488:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:131
        unsigned lDrive=inb(devInfo->ioPort+ATA_DRIVE_SELECT);
   2248b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2248e:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22494:	83 c0 06             	add    eax,0x6
   22497:	0f b7 c0             	movzx  eax,ax
   2249a:	83 ec 0c             	sub    esp,0xc
   2249d:	50                   	push   eax
   2249e:	e8 60 fb ff ff       	call   22003 <inb>
   224a3:	83 c4 10             	add    esp,0x10
   224a6:	0f b6 c0             	movzx  eax,al
   224a9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:132
            printk("ataSelectDrive: Drive selected: %s (%u, 0x%02X), err=0x%02X\n", (lDrive & (1<<4)) == 1<<4?"Slave":"Master", devInfo->driveNo, lDrive, inb(devInfo->ioPort+ATA_PORT_ERROR));
   224ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   224af:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   224b5:	83 c0 01             	add    eax,0x1
   224b8:	0f b7 c0             	movzx  eax,ax
   224bb:	83 ec 0c             	sub    esp,0xc
   224be:	50                   	push   eax
   224bf:	e8 3f fb ff ff       	call   22003 <inb>
   224c4:	83 c4 10             	add    esp,0x10
   224c7:	0f b6 d0             	movzx  edx,al
   224ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   224cd:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   224d3:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   224d6:	83 e1 10             	and    ecx,0x10
   224d9:	85 c9                	test   ecx,ecx
   224db:	74 07                	je     224e4 <ataSelectDrive+0x13e>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:132 (discriminator 1)
   224dd:	b9 34 3e 08 00       	mov    ecx,0x83e34
   224e2:	eb 05                	jmp    224e9 <ataSelectDrive+0x143>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:132 (discriminator 2)
   224e4:	b9 3a 3e 08 00       	mov    ecx,0x83e3a
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:132 (discriminator 4)
   224e9:	83 ec 0c             	sub    esp,0xc
   224ec:	52                   	push   edx
   224ed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   224f0:	50                   	push   eax
   224f1:	51                   	push   ecx
   224f2:	68 44 3e 08 00       	push   0x83e44
   224f7:	e8 5f 52 00 00       	call   2775b <printk>
   224fc:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:136
    }
#endif
        
    return 0;
   224ff:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:137
}
   22504:	c9                   	leave  
   22505:	c3                   	ret    

00022506 <ataResetController>:
ataResetController():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:161
	outb(++port, 0xA0 |(drive<<4)|head);
	outb(++port, cmd);
}
*/
static void ataResetController(struct ataDeviceInfo_t* devInfo)
{
   22506:	55                   	push   ebp
   22507:	89 e5                	mov    ebp,esp
   22509:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:162
        outb(devInfo->ioPort+ATA_PORT_COMMAND, 4);
   2250c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2250f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22515:	83 c0 07             	add    eax,0x7
   22518:	0f b7 c0             	movzx  eax,ax
   2251b:	6a 04                	push   0x4
   2251d:	50                   	push   eax
   2251e:	e8 c1 fa ff ff       	call   21fe4 <outb>
   22523:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:163
        waitTicks(kTicksPerSecond/10);
   22526:	8b 0d c0 97 12 00    	mov    ecx,DWORD PTR ds:0x1297c0
   2252c:	ba 67 66 66 66       	mov    edx,0x66666667
   22531:	89 c8                	mov    eax,ecx
   22533:	f7 ea                	imul   edx
   22535:	c1 fa 02             	sar    edx,0x2
   22538:	89 c8                	mov    eax,ecx
   2253a:	c1 f8 1f             	sar    eax,0x1f
   2253d:	29 c2                	sub    edx,eax
   2253f:	89 d0                	mov    eax,edx
   22541:	83 ec 0c             	sub    esp,0xc
   22544:	50                   	push   eax
   22545:	e8 35 64 00 00       	call   2897f <waitTicks>
   2254a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:164
        outb(devInfo->ioPort+ATA_PORT_CONTROL, 1<<2);
   2254d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22550:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22556:	66 05 f6 03          	add    ax,0x3f6
   2255a:	0f b7 c0             	movzx  eax,ax
   2255d:	83 ec 08             	sub    esp,0x8
   22560:	6a 04                	push   0x4
   22562:	50                   	push   eax
   22563:	e8 7c fa ff ff       	call   21fe4 <outb>
   22568:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:165
        wait(10);
   2256b:	83 ec 0c             	sub    esp,0xc
   2256e:	6a 0a                	push   0xa
   22570:	e8 25 64 00 00       	call   2899a <wait>
   22575:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:166
        outb(devInfo->ioPort+ATA_PORT_CONTROL, 0);
   22578:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2257b:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22581:	66 05 f6 03          	add    ax,0x3f6
   22585:	0f b7 c0             	movzx  eax,ax
   22588:	83 ec 08             	sub    esp,0x8
   2258b:	6a 00                	push   0x0
   2258d:	50                   	push   eax
   2258e:	e8 51 fa ff ff       	call   21fe4 <outb>
   22593:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:167
        if (!ataControllerIsReady(devInfo))
   22596:	83 ec 0c             	sub    esp,0xc
   22599:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2259c:	e8 96 fc ff ff       	call   22237 <ataControllerIsReady>
   225a1:	83 c4 10             	add    esp,0x10
   225a4:	84 c0                	test   al,al
   225a6:	75 1c                	jne    225c4 <ataResetController+0xbe>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:169
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   225a8:	a1 78 98 12 00       	mov    eax,ds:0x129878
   225ad:	83 e0 08             	and    eax,0x8
   225b0:	85 c0                	test   eax,eax
   225b2:	74 10                	je     225c4 <ataResetController+0xbe>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:170
            printk("HD-controller still busy\n");
   225b4:	83 ec 0c             	sub    esp,0xc
   225b7:	68 81 3e 08 00       	push   0x83e81
   225bc:	e8 9a 51 00 00       	call   2775b <printk>
   225c1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:172
#endif
        if ((hdError = inb(devInfo->ioPort+ATA_PORT_ERROR)) != 0 && (hdError = inb(devInfo->ioPort+ATA_PORT_ERROR)) != 4)
   225c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   225c7:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   225cd:	83 c0 01             	add    eax,0x1
   225d0:	0f b7 c0             	movzx  eax,ax
   225d3:	83 ec 0c             	sub    esp,0xc
   225d6:	50                   	push   eax
   225d7:	e8 27 fa ff ff       	call   22003 <inb>
   225dc:	83 c4 10             	add    esp,0x10
   225df:	0f b6 c0             	movzx  eax,al
   225e2:	a3 dc a5 09 00       	mov    ds:0x9a5dc,eax
   225e7:	a1 dc a5 09 00       	mov    eax,ds:0x9a5dc
   225ec:	85 c0                	test   eax,eax
   225ee:	74 5d                	je     2264d <ataResetController+0x147>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:172 (discriminator 1)
   225f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   225f3:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   225f9:	83 c0 01             	add    eax,0x1
   225fc:	0f b7 c0             	movzx  eax,ax
   225ff:	83 ec 0c             	sub    esp,0xc
   22602:	50                   	push   eax
   22603:	e8 fb f9 ff ff       	call   22003 <inb>
   22608:	83 c4 10             	add    esp,0x10
   2260b:	0f b6 c0             	movzx  eax,al
   2260e:	a3 dc a5 09 00       	mov    ds:0x9a5dc,eax
   22613:	a1 dc a5 09 00       	mov    eax,ds:0x9a5dc
   22618:	83 f8 04             	cmp    eax,0x4
   2261b:	74 30                	je     2264d <ataResetController+0x147>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:173
            printk("Controller reset failed on %s bus: %02x\n",devInfo->bus==0?"Primary":"Secondary", hdError);
   2261d:	a1 dc a5 09 00       	mov    eax,ds:0x9a5dc
   22622:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   22625:	8b 92 61 02 00 00    	mov    edx,DWORD PTR [edx+0x261]
   2262b:	85 d2                	test   edx,edx
   2262d:	75 07                	jne    22636 <ataResetController+0x130>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:173 (discriminator 1)
   2262f:	ba 9b 3e 08 00       	mov    edx,0x83e9b
   22634:	eb 05                	jmp    2263b <ataResetController+0x135>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:173 (discriminator 2)
   22636:	ba a3 3e 08 00       	mov    edx,0x83ea3
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:173 (discriminator 4)
   2263b:	83 ec 04             	sub    esp,0x4
   2263e:	50                   	push   eax
   2263f:	52                   	push   edx
   22640:	68 b0 3e 08 00       	push   0x83eb0
   22645:	e8 11 51 00 00       	call   2775b <printk>
   2264a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:175
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   2264d:	a1 78 98 12 00       	mov    eax,ds:0x129878
   22652:	83 e0 08             	and    eax,0x8
   22655:	85 c0                	test   eax,eax
   22657:	74 10                	je     22669 <ataResetController+0x163>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:176
            printk("ataResetController: controller is ready\n");
   22659:	83 ec 0c             	sub    esp,0xc
   2265c:	68 dc 3e 08 00       	push   0x83edc
   22661:	e8 f5 50 00 00       	call   2775b <printk>
   22666:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:178
#endif
}
   22669:	90                   	nop
   2266a:	c9                   	leave  
   2266b:	c3                   	ret    

0002266c <ataInit>:
ataInit():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:180
int ataInit(struct ataDeviceInfo_t* devInfo)
{
   2266c:	55                   	push   ebp
   2266d:	89 e5                	mov    ebp,esp
   2266f:	53                   	push   ebx
   22670:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:181
    ataResetController(devInfo);
   22673:	83 ec 0c             	sub    esp,0xc
   22676:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   22679:	e8 88 fe ff ff       	call   22506 <ataResetController>
   2267e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:182
    int cStatus=0, ticks=0;
   22681:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   22688:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:183
    ataSelectDrive(devInfo,0);
   2268f:	83 ec 08             	sub    esp,0x8
   22692:	6a 00                	push   0x0
   22694:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   22697:	e8 0a fd ff ff       	call   223a6 <ataSelectDrive>
   2269c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:184
    outb(devInfo->ioPort+ATA_PORT_SECTORCOUNT, 0x55);
   2269f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   226a2:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   226a8:	83 c0 02             	add    eax,0x2
   226ab:	0f b7 c0             	movzx  eax,ax
   226ae:	83 ec 08             	sub    esp,0x8
   226b1:	6a 55                	push   0x55
   226b3:	50                   	push   eax
   226b4:	e8 2b f9 ff ff       	call   21fe4 <outb>
   226b9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:185
    outb(devInfo->ioPort+ATA_PORT_SECTOR_NUMBER, 0xAA);
   226bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   226bf:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   226c5:	83 c0 03             	add    eax,0x3
   226c8:	0f b7 c0             	movzx  eax,ax
   226cb:	83 ec 08             	sub    esp,0x8
   226ce:	68 aa 00 00 00       	push   0xaa
   226d3:	50                   	push   eax
   226d4:	e8 0b f9 ff ff       	call   21fe4 <outb>
   226d9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:186
    outb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW,0x55);
   226dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   226df:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   226e5:	83 c0 04             	add    eax,0x4
   226e8:	0f b7 c0             	movzx  eax,ax
   226eb:	83 ec 08             	sub    esp,0x8
   226ee:	6a 55                	push   0x55
   226f0:	50                   	push   eax
   226f1:	e8 ee f8 ff ff       	call   21fe4 <outb>
   226f6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:187
    outb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH,0xAA);
   226f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   226fc:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22702:	83 c0 05             	add    eax,0x5
   22705:	0f b7 c0             	movzx  eax,ax
   22708:	83 ec 08             	sub    esp,0x8
   2270b:	68 aa 00 00 00       	push   0xaa
   22710:	50                   	push   eax
   22711:	e8 ce f8 ff ff       	call   21fe4 <outb>
   22716:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:188
    outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
   22719:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2271c:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22722:	83 c0 07             	add    eax,0x7
   22725:	0f b7 c0             	movzx  eax,ax
   22728:	83 ec 08             	sub    esp,0x8
   2272b:	68 ec 00 00 00       	push   0xec
   22730:	50                   	push   eax
   22731:	e8 ae f8 ff ff       	call   21fe4 <outb>
   22736:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:189
    wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
   22739:	8b 15 c4 97 12 00    	mov    edx,DWORD PTR ds:0x1297c4
   2273f:	89 d0                	mov    eax,edx
   22741:	c1 e0 02             	shl    eax,0x2
   22744:	01 d0                	add    eax,edx
   22746:	01 c0                	add    eax,eax
   22748:	83 ec 0c             	sub    esp,0xc
   2274b:	50                   	push   eax
   2274c:	e8 49 62 00 00       	call   2899a <wait>
   22751:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:190
    cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
   22754:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22757:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2275d:	83 c0 07             	add    eax,0x7
   22760:	0f b7 c0             	movzx  eax,ax
   22763:	83 ec 0c             	sub    esp,0xc
   22766:	50                   	push   eax
   22767:	e8 97 f8 ff ff       	call   22003 <inb>
   2276c:	83 c4 10             	add    esp,0x10
   2276f:	0f b6 c0             	movzx  eax,al
   22772:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:191
    if (cStatus==0)
   22775:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   22779:	75 33                	jne    227ae <ataInit+0x142>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:194
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   2277b:	a1 78 98 12 00       	mov    eax,ds:0x129878
   22780:	83 e0 08             	and    eax,0x8
   22783:	85 c0                	test   eax,eax
   22785:	74 1d                	je     227a4 <ataInit+0x138>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:195
            printk("Drive %02X, not ready(%02X)\n",devInfo->driveNo, cStatus);
   22787:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2278a:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   22790:	83 ec 04             	sub    esp,0x4
   22793:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22796:	50                   	push   eax
   22797:	68 05 3f 08 00       	push   0x83f05
   2279c:	e8 ba 4f 00 00       	call   2775b <printk>
   227a1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:197
#endif
        return false;
   227a4:	b8 00 00 00 00       	mov    eax,0x0
   227a9:	e9 f3 01 00 00       	jmp    229a1 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:199
    }
    if ((cStatus & 1) == 1)
   227ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   227b1:	83 e0 01             	and    eax,0x1
   227b4:	85 c0                	test   eax,eax
   227b6:	0f 84 bb 00 00 00    	je     22877 <ataInit+0x20b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:201
    {
        int err = inb(devInfo->ioPort+ATA_PORT_ERROR);
   227bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   227bf:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   227c5:	83 c0 01             	add    eax,0x1
   227c8:	0f b7 c0             	movzx  eax,ax
   227cb:	83 ec 0c             	sub    esp,0xc
   227ce:	50                   	push   eax
   227cf:	e8 2f f8 ff ff       	call   22003 <inb>
   227d4:	83 c4 10             	add    esp,0x10
   227d7:	0f b6 c0             	movzx  eax,al
   227da:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:203
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   227dd:	a1 78 98 12 00       	mov    eax,ds:0x129878
   227e2:	83 e0 08             	and    eax,0x8
   227e5:	85 c0                	test   eax,eax
   227e7:	74 1d                	je     22806 <ataInit+0x19a>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:204
            printk("drive %02X, cStatus=%02X, errreg=%02X\n",devInfo->driveNo, cStatus,err);
   227e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   227ec:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   227f2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   227f5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   227f8:	50                   	push   eax
   227f9:	68 24 3f 08 00       	push   0x83f24
   227fe:	e8 58 4f 00 00       	call   2775b <printk>
   22803:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:206
#endif
        if (err!=4)
   22806:	83 7d ec 04          	cmp    DWORD PTR [ebp-0x14],0x4
   2280a:	74 0a                	je     22816 <ataInit+0x1aa>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:207
            return false;
   2280c:	b8 00 00 00 00       	mov    eax,0x0
   22811:	e9 8b 01 00 00       	jmp    229a1 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:208
        useCDROMIdentify = true;
   22816:	c6 05 d8 a5 09 00 01 	mov    BYTE PTR ds:0x9a5d8,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:209
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
   2281d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22820:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22826:	83 c0 07             	add    eax,0x7
   22829:	0f b7 c0             	movzx  eax,ax
   2282c:	83 ec 0c             	sub    esp,0xc
   2282f:	50                   	push   eax
   22830:	e8 ce f7 ff ff       	call   22003 <inb>
   22835:	83 c4 10             	add    esp,0x10
   22838:	0f b6 c0             	movzx  eax,al
   2283b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:210
        if (cStatus==0)
   2283e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   22842:	75 33                	jne    22877 <ataInit+0x20b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:213
        {
#ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22844:	a1 78 98 12 00       	mov    eax,ds:0x129878
   22849:	83 e0 08             	and    eax,0x8
   2284c:	85 c0                	test   eax,eax
   2284e:	74 1d                	je     2286d <ataInit+0x201>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:214
                printk("Drive %02X, not ready(%02X)\n",devInfo->driveNo, cStatus);
   22850:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22853:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   22859:	83 ec 04             	sub    esp,0x4
   2285c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2285f:	50                   	push   eax
   22860:	68 05 3f 08 00       	push   0x83f05
   22865:	e8 f1 4e 00 00       	call   2775b <printk>
   2286a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:216
#endif
            return false;
   2286d:	b8 00 00 00 00       	mov    eax,0x0
   22872:	e9 2a 01 00 00       	jmp    229a1 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:219
        }
    }
    ticks=ATA_STANDARD_WAIT_MS*kTicksPerMS;
   22877:	8b 15 c4 97 12 00    	mov    edx,DWORD PTR ds:0x1297c4
   2287d:	89 d0                	mov    eax,edx
   2287f:	c1 e0 02             	shl    eax,0x2
   22882:	01 d0                	add    eax,edx
   22884:	01 c0                	add    eax,eax
   22886:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:220
    while ((cStatus & ATA_STATUS_BUSY) == ATA_STATUS_BUSY && (ticks>0))
   22889:	eb 32                	jmp    228bd <ataInit+0x251>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:222
    {
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
   2288b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2288e:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22894:	83 c0 07             	add    eax,0x7
   22897:	0f b7 c0             	movzx  eax,ax
   2289a:	83 ec 0c             	sub    esp,0xc
   2289d:	50                   	push   eax
   2289e:	e8 60 f7 ff ff       	call   22003 <inb>
   228a3:	83 c4 10             	add    esp,0x10
   228a6:	0f b6 c0             	movzx  eax,al
   228a9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:223
        wait(1);
   228ac:	83 ec 0c             	sub    esp,0xc
   228af:	6a 01                	push   0x1
   228b1:	e8 e4 60 00 00       	call   2899a <wait>
   228b6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:224
        ticks--;
   228b9:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:220
#endif
            return false;
        }
    }
    ticks=ATA_STANDARD_WAIT_MS*kTicksPerMS;
    while ((cStatus & ATA_STATUS_BUSY) == ATA_STATUS_BUSY && (ticks>0))
   228bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   228c0:	25 80 00 00 00       	and    eax,0x80
   228c5:	85 c0                	test   eax,eax
   228c7:	74 06                	je     228cf <ataInit+0x263>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:220 (discriminator 1)
   228c9:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   228cd:	7f bc                	jg     2288b <ataInit+0x21f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:226
    {
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
        wait(1);
        ticks--;
    }
    if (!ataControllerIsReady(devInfo))
   228cf:	83 ec 0c             	sub    esp,0xc
   228d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   228d5:	e8 5d f9 ff ff       	call   22237 <ataControllerIsReady>
   228da:	83 c4 10             	add    esp,0x10
   228dd:	84 c0                	test   al,al
   228df:	75 0a                	jne    228eb <ataInit+0x27f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:227
        return false;
   228e1:	b8 00 00 00 00       	mov    eax,0x0
   228e6:	e9 b6 00 00 00       	jmp    229a1 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:228
    if (inb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW)!=0x55 || inb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH)!=0xaa)
   228eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   228ee:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   228f4:	83 c0 04             	add    eax,0x4
   228f7:	0f b7 c0             	movzx  eax,ax
   228fa:	83 ec 0c             	sub    esp,0xc
   228fd:	50                   	push   eax
   228fe:	e8 00 f7 ff ff       	call   22003 <inb>
   22903:	83 c4 10             	add    esp,0x10
   22906:	3c 55                	cmp    al,0x55
   22908:	75 1f                	jne    22929 <ataInit+0x2bd>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:228 (discriminator 1)
   2290a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2290d:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22913:	83 c0 05             	add    eax,0x5
   22916:	0f b7 c0             	movzx  eax,ax
   22919:	83 ec 0c             	sub    esp,0xc
   2291c:	50                   	push   eax
   2291d:	e8 e1 f6 ff ff       	call   22003 <inb>
   22922:	83 c4 10             	add    esp,0x10
   22925:	3c aa                	cmp    al,0xaa
   22927:	74 73                	je     2299c <ataInit+0x330>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:231
    {
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22929:	a1 78 98 12 00       	mov    eax,ds:0x129878
   2292e:	83 e0 08             	and    eax,0x8
   22931:	85 c0                	test   eax,eax
   22933:	74 4e                	je     22983 <ataInit+0x317>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:232
        printk("Cylinder port non-zero (%X,%X), device is non-ATA\n",inb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW), inb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH));
   22935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22938:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2293e:	83 c0 05             	add    eax,0x5
   22941:	0f b7 c0             	movzx  eax,ax
   22944:	83 ec 0c             	sub    esp,0xc
   22947:	50                   	push   eax
   22948:	e8 b6 f6 ff ff       	call   22003 <inb>
   2294d:	83 c4 10             	add    esp,0x10
   22950:	0f b6 d8             	movzx  ebx,al
   22953:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22956:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2295c:	83 c0 04             	add    eax,0x4
   2295f:	0f b7 c0             	movzx  eax,ax
   22962:	83 ec 0c             	sub    esp,0xc
   22965:	50                   	push   eax
   22966:	e8 98 f6 ff ff       	call   22003 <inb>
   2296b:	83 c4 10             	add    esp,0x10
   2296e:	0f b6 c0             	movzx  eax,al
   22971:	83 ec 04             	sub    esp,0x4
   22974:	53                   	push   ebx
   22975:	50                   	push   eax
   22976:	68 4c 3f 08 00       	push   0x83f4c
   2297b:	e8 db 4d 00 00       	call   2775b <printk>
   22980:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:234
#endif
        if (useCDROMIdentify)
   22983:	0f b6 05 d8 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d8
   2298a:	84 c0                	test   al,al
   2298c:	74 07                	je     22995 <ataInit+0x329>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:235
            return true;
   2298e:	b8 01 00 00 00       	mov    eax,0x1
   22993:	eb 0c                	jmp    229a1 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:237
        else
            return false;
   22995:	b8 00 00 00 00       	mov    eax,0x0
   2299a:	eb 05                	jmp    229a1 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:239
    }
    return true;
   2299c:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:240
}
   229a1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   229a4:	c9                   	leave  
   229a5:	c3                   	ret    

000229a6 <ataGetModelFromIdentify>:
ataGetModelFromIdentify():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:243

void ataGetModelFromIdentify(struct ataDeviceInfo_t* devInfo)
{
   229a6:	55                   	push   ebp
   229a7:	89 e5                	mov    ebp,esp
   229a9:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:244
    uint16_t* ident=devInfo->ATAIdentifyData+27;
   229ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   229af:	83 c0 36             	add    eax,0x36
   229b2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:245
    for (int cnt=0;cnt<40;cnt+=2)
   229b5:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   229bc:	eb 3d                	jmp    229fb <ataGetModelFromIdentify+0x55>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:247 (discriminator 3)
    {
        devInfo->ATADeviceModel[cnt]=(*ident >> 8) & 0xFF;
   229be:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   229c1:	0f b7 00             	movzx  eax,WORD PTR [eax]
   229c4:	66 c1 e8 08          	shr    ax,0x8
   229c8:	89 c1                	mov    ecx,eax
   229ca:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   229cd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   229d0:	01 d0                	add    eax,edx
   229d2:	05 00 02 00 00       	add    eax,0x200
   229d7:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:248 (discriminator 3)
        devInfo->ATADeviceModel[cnt+1]=(*ident++) & 0xFF;
   229d9:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   229dc:	8d 48 01             	lea    ecx,[eax+0x1]
   229df:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   229e2:	8d 50 02             	lea    edx,[eax+0x2]
   229e5:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   229e8:	0f b7 00             	movzx  eax,WORD PTR [eax]
   229eb:	89 c2                	mov    edx,eax
   229ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   229f0:	88 94 08 00 02 00 00 	mov    BYTE PTR [eax+ecx*1+0x200],dl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:245 (discriminator 3)
}

void ataGetModelFromIdentify(struct ataDeviceInfo_t* devInfo)
{
    uint16_t* ident=devInfo->ATAIdentifyData+27;
    for (int cnt=0;cnt<40;cnt+=2)
   229f7:	83 45 f8 02          	add    DWORD PTR [ebp-0x8],0x2
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:245 (discriminator 1)
   229fb:	83 7d f8 27          	cmp    DWORD PTR [ebp-0x8],0x27
   229ff:	7e bd                	jle    229be <ataGetModelFromIdentify+0x18>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:250
    {
        devInfo->ATADeviceModel[cnt]=(*ident >> 8) & 0xFF;
        devInfo->ATADeviceModel[cnt+1]=(*ident++) & 0xFF;
    }
    devInfo->ATADeviceModel[79]='\0';
   22a01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22a04:	c6 80 4f 02 00 00 00 	mov    BYTE PTR [eax+0x24f],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:251
}
   22a0b:	90                   	nop
   22a0c:	c9                   	leave  
   22a0d:	c3                   	ret    

00022a0e <ataIdentify>:
ataIdentify():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:254

int ataIdentify(struct ataDeviceInfo_t* devInfo)
{
   22a0e:	55                   	push   ebp
   22a0f:	89 e5                	mov    ebp,esp
   22a11:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:256
    //For ATA devices, read the identity data.  For SATA, we've already read it into ATAIdentityData
    if (devInfo->queryATAData)
   22a14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22a17:	0f b6 80 50 02 00 00 	movzx  eax,BYTE PTR [eax+0x250]
   22a1e:	84 c0                	test   al,al
   22a20:	0f 84 9c 00 00 00    	je     22ac2 <ataIdentify+0xb4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:258
    {
        if (useCDROMIdentify)
   22a26:	0f b6 05 d8 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d8
   22a2d:	84 c0                	test   al,al
   22a2f:	74 1f                	je     22a50 <ataIdentify+0x42>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:259
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_CDROM_COMMAND);
   22a31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22a34:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22a3a:	83 c0 07             	add    eax,0x7
   22a3d:	0f b7 c0             	movzx  eax,ax
   22a40:	68 a1 00 00 00       	push   0xa1
   22a45:	50                   	push   eax
   22a46:	e8 99 f5 ff ff       	call   21fe4 <outb>
   22a4b:	83 c4 08             	add    esp,0x8
   22a4e:	eb 1d                	jmp    22a6d <ataIdentify+0x5f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:261
        else
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
   22a50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22a53:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22a59:	83 c0 07             	add    eax,0x7
   22a5c:	0f b7 c0             	movzx  eax,ax
   22a5f:	68 ec 00 00 00       	push   0xec
   22a64:	50                   	push   eax
   22a65:	e8 7a f5 ff ff       	call   21fe4 <outb>
   22a6a:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:262
        wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
   22a6d:	8b 15 c4 97 12 00    	mov    edx,DWORD PTR ds:0x1297c4
   22a73:	89 d0                	mov    eax,edx
   22a75:	c1 e0 02             	shl    eax,0x2
   22a78:	01 d0                	add    eax,edx
   22a7a:	01 c0                	add    eax,eax
   22a7c:	83 ec 0c             	sub    esp,0xc
   22a7f:	50                   	push   eax
   22a80:	e8 15 5f 00 00       	call   2899a <wait>
   22a85:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:263
        for (int readCount=0;readCount<=255;readCount++)
   22a88:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   22a8f:	eb 28                	jmp    22ab9 <ataIdentify+0xab>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:265 (discriminator 3)
        {
            devInfo->ATAIdentifyData[readCount]=inw(devInfo->ioPort+ATA_PORT_DATA);
   22a91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22a94:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22a9a:	0f b7 c0             	movzx  eax,ax
   22a9d:	83 ec 0c             	sub    esp,0xc
   22aa0:	50                   	push   eax
   22aa1:	e8 7a f5 ff ff       	call   22020 <inw>
   22aa6:	83 c4 10             	add    esp,0x10
   22aa9:	89 c1                	mov    ecx,eax
   22aab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22aae:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   22ab1:	66 89 0c 50          	mov    WORD PTR [eax+edx*2],cx
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:263 (discriminator 3)
        if (useCDROMIdentify)
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_CDROM_COMMAND);
        else
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
        wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
        for (int readCount=0;readCount<=255;readCount++)
   22ab5:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:263 (discriminator 1)
   22ab9:	81 7d f4 ff 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xff
   22ac0:	7e cf                	jle    22a91 <ataIdentify+0x83>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:268
        {
            devInfo->ATAIdentifyData[readCount]=inw(devInfo->ioPort+ATA_PORT_DATA);
        }
    }
    ataGetModelFromIdentify(devInfo);
   22ac2:	83 ec 0c             	sub    esp,0xc
   22ac5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   22ac8:	e8 d9 fe ff ff       	call   229a6 <ataGetModelFromIdentify>
   22acd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:269
    devInfo->totalSectorCount = devInfo->ATAIdentifyData[60] | (devInfo->ATAIdentifyData[61]<<16);
   22ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22ad3:	0f b7 40 78          	movzx  eax,WORD PTR [eax+0x78]
   22ad7:	0f b7 d0             	movzx  edx,ax
   22ada:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22add:	0f b7 40 7a          	movzx  eax,WORD PTR [eax+0x7a]
   22ae1:	0f b7 c0             	movzx  eax,ax
   22ae4:	c1 e0 10             	shl    eax,0x10
   22ae7:	09 d0                	or     eax,edx
   22ae9:	89 c2                	mov    edx,eax
   22aeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22aee:	89 90 56 02 00 00    	mov    DWORD PTR [eax+0x256],edx
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:270
    devInfo->sectorSize = (devInfo->ATAIdentifyData[106] & 1<<12)==1<<12
   22af4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22af7:	0f b7 80 d4 00 00 00 	movzx  eax,WORD PTR [eax+0xd4]
   22afe:	0f b7 c0             	movzx  eax,ax
   22b01:	25 00 10 00 00       	and    eax,0x1000
   22b06:	85 c0                	test   eax,eax
   22b08:	74 20                	je     22b2a <ataIdentify+0x11c>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:271 (discriminator 1)
            ?devInfo->ATAIdentifyData[117] | (devInfo->ATAIdentifyData[18]<<16)
   22b0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22b0d:	0f b7 80 ea 00 00 00 	movzx  eax,WORD PTR [eax+0xea]
   22b14:	0f b7 d0             	movzx  edx,ax
   22b17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22b1a:	0f b7 40 24          	movzx  eax,WORD PTR [eax+0x24]
   22b1e:	0f b7 c0             	movzx  eax,ax
   22b21:	c1 e0 10             	shl    eax,0x10
   22b24:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:270 (discriminator 1)
            devInfo->ATAIdentifyData[readCount]=inw(devInfo->ioPort+ATA_PORT_DATA);
        }
    }
    ataGetModelFromIdentify(devInfo);
    devInfo->totalSectorCount = devInfo->ATAIdentifyData[60] | (devInfo->ATAIdentifyData[61]<<16);
    devInfo->sectorSize = (devInfo->ATAIdentifyData[106] & 1<<12)==1<<12
   22b26:	89 c2                	mov    edx,eax
   22b28:	eb 05                	jmp    22b2f <ataIdentify+0x121>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:270 (discriminator 2)
   22b2a:	ba 00 02 00 00       	mov    edx,0x200
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:270 (discriminator 4)
   22b2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22b32:	89 90 5a 02 00 00    	mov    DWORD PTR [eax+0x25a],edx
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:273 (discriminator 4)
            ?devInfo->ATAIdentifyData[117] | (devInfo->ATAIdentifyData[18]<<16)
            :512;
    devInfo->dmaSupported=devInfo->ATAIdentifyData[49]>>8 & 0x1;
   22b38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22b3b:	0f b7 40 62          	movzx  eax,WORD PTR [eax+0x62]
   22b3f:	66 c1 e8 08          	shr    ax,0x8
   22b43:	0f b7 c0             	movzx  eax,ax
   22b46:	83 e0 01             	and    eax,0x1
   22b49:	85 c0                	test   eax,eax
   22b4b:	0f 95 c2             	setne  dl
   22b4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22b51:	88 90 60 02 00 00    	mov    BYTE PTR [eax+0x260],dl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:274 (discriminator 4)
    devInfo->lbaSupported=devInfo->ATAIdentifyData[49]>>9 & 0x1;
   22b57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22b5a:	0f b7 40 62          	movzx  eax,WORD PTR [eax+0x62]
   22b5e:	66 c1 e8 09          	shr    ax,0x9
   22b62:	0f b7 c0             	movzx  eax,ax
   22b65:	83 e0 01             	and    eax,0x1
   22b68:	85 c0                	test   eax,eax
   22b6a:	0f 95 c2             	setne  dl
   22b6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22b70:	88 90 5e 02 00 00    	mov    BYTE PTR [eax+0x25e],dl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:275 (discriminator 4)
    devInfo->lba48Supported=devInfo->ATAIdentifyData[83]>>10 & 0x1;
   22b76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22b79:	0f b7 80 a6 00 00 00 	movzx  eax,WORD PTR [eax+0xa6]
   22b80:	66 c1 e8 0a          	shr    ax,0xa
   22b84:	0f b7 c0             	movzx  eax,ax
   22b87:	83 e0 01             	and    eax,0x1
   22b8a:	85 c0                	test   eax,eax
   22b8c:	0f 95 c2             	setne  dl
   22b8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22b92:	88 90 5f 02 00 00    	mov    BYTE PTR [eax+0x25f],dl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:278 (discriminator 4)
    
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22b98:	a1 78 98 12 00       	mov    eax,ds:0x129878
   22b9d:	83 e0 08             	and    eax,0x8
   22ba0:	85 c0                	test   eax,eax
   22ba2:	74 24                	je     22bc8 <ataIdentify+0x1ba>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:279
        printk("drive %d, model=%s\n",devInfo->driveNo, devInfo->ATADeviceModel);
   22ba4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22ba7:	8d 90 00 02 00 00    	lea    edx,[eax+0x200]
   22bad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22bb0:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   22bb6:	83 ec 04             	sub    esp,0x4
   22bb9:	52                   	push   edx
   22bba:	50                   	push   eax
   22bbb:	68 7f 3f 08 00       	push   0x83f7f
   22bc0:	e8 96 4b 00 00       	call   2775b <printk>
   22bc5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:281
#endif
    return 1;
   22bc8:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:282
}
   22bcd:	c9                   	leave  
   22bce:	c3                   	ret    

00022bcf <ataScanForHarddrives>:
ataScanForHarddrives():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:285

int ataScanForHarddrives()
{
   22bcf:	55                   	push   ebp
   22bd0:	89 e5                	mov    ebp,esp
   22bd2:	53                   	push   ebx
   22bd3:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:286
    kATADeviceInfo[0].bus=ATAPrimary;
   22bd6:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22bdb:	c7 80 61 02 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
   22be2:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:287
    kATADeviceInfo[0].driveNo=0;
   22be5:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22bea:	c7 80 65 02 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
   22bf1:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:288
    kATADeviceInfo[0].ioPort=0x1F0;
   22bf4:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22bf9:	c7 80 69 02 00 00 f0 	mov    DWORD PTR [eax+0x269],0x1f0
   22c00:	01 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:289
    kATADeviceInfo[0].irqNum=0x14;
   22c03:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22c08:	c6 80 6d 02 00 00 14 	mov    BYTE PTR [eax+0x26d],0x14
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:290
    kATADeviceInfo[0].driveHeadPortDesignation=0xA0;
   22c0f:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22c14:	c6 80 6e 02 00 00 a0 	mov    BYTE PTR [eax+0x26e],0xa0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:291
    kATADeviceInfo[0].queryATAData=true;
   22c1b:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22c20:	c6 80 50 02 00 00 01 	mov    BYTE PTR [eax+0x250],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:292
    kATADeviceInfo[0].ATADeviceAvailable=ataInit(&kATADeviceInfo[0]);
   22c27:	8b 1d 00 98 12 00    	mov    ebx,DWORD PTR ds:0x129800
   22c2d:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22c32:	83 ec 0c             	sub    esp,0xc
   22c35:	50                   	push   eax
   22c36:	e8 31 fa ff ff       	call   2266c <ataInit>
   22c3b:	83 c4 10             	add    esp,0x10
   22c3e:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:293
    if (kATADeviceInfo[0].ATADeviceAvailable)
   22c44:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22c49:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   22c50:	84 c0                	test   al,al
   22c52:	74 3c                	je     22c90 <ataScanForHarddrives+0xc1>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:295
    {
        ataIdentify(&kATADeviceInfo[0]);
   22c54:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22c59:	83 ec 0c             	sub    esp,0xc
   22c5c:	50                   	push   eax
   22c5d:	e8 ac fd ff ff       	call   22a0e <ataIdentify>
   22c62:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:296
        if (useCDROMIdentify)
   22c65:	0f b6 05 d8 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d8
   22c6c:	84 c0                	test   al,al
   22c6e:	74 11                	je     22c81 <ataScanForHarddrives+0xb2>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:297
            kATADeviceInfo[0].ATADeviceType=ATA_DEVICE_TYPE_CD;
   22c70:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22c75:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   22c7c:	00 00 00 
   22c7f:	eb 0f                	jmp    22c90 <ataScanForHarddrives+0xc1>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:299
        else
            kATADeviceInfo[0].ATADeviceType=ATA_DEVICE_TYPE_HD;
   22c81:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22c86:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   22c8d:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:301
    }
    useCDROMIdentify=false;
   22c90:	c6 05 d8 a5 09 00 00 	mov    BYTE PTR ds:0x9a5d8,0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:303

    kATADeviceInfo[1].bus=ATAPrimary;
   22c97:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22c9c:	05 73 02 00 00       	add    eax,0x273
   22ca1:	c7 80 61 02 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
   22ca8:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:304
    kATADeviceInfo[1].driveNo=1;
   22cab:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22cb0:	05 73 02 00 00       	add    eax,0x273
   22cb5:	c7 80 65 02 00 00 01 	mov    DWORD PTR [eax+0x265],0x1
   22cbc:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:305
    kATADeviceInfo[1].ioPort=0x1F0;
   22cbf:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22cc4:	05 73 02 00 00       	add    eax,0x273
   22cc9:	c7 80 69 02 00 00 f0 	mov    DWORD PTR [eax+0x269],0x1f0
   22cd0:	01 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:306
    kATADeviceInfo[1].irqNum=0x14;
   22cd3:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22cd8:	05 73 02 00 00       	add    eax,0x273
   22cdd:	c6 80 6d 02 00 00 14 	mov    BYTE PTR [eax+0x26d],0x14
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:307
    kATADeviceInfo[1].driveHeadPortDesignation=0xB0;
   22ce4:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22ce9:	05 73 02 00 00       	add    eax,0x273
   22cee:	c6 80 6e 02 00 00 b0 	mov    BYTE PTR [eax+0x26e],0xb0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:308
    kATADeviceInfo[1].queryATAData=true;
   22cf5:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22cfa:	05 73 02 00 00       	add    eax,0x273
   22cff:	c6 80 50 02 00 00 01 	mov    BYTE PTR [eax+0x250],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:309
    kATADeviceInfo[1].ATADeviceAvailable=ataInit(&kATADeviceInfo[1]);
   22d06:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22d0b:	8d 98 73 02 00 00    	lea    ebx,[eax+0x273]
   22d11:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22d16:	05 73 02 00 00       	add    eax,0x273
   22d1b:	83 ec 0c             	sub    esp,0xc
   22d1e:	50                   	push   eax
   22d1f:	e8 48 f9 ff ff       	call   2266c <ataInit>
   22d24:	83 c4 10             	add    esp,0x10
   22d27:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:310
    if (kATADeviceInfo[1].ATADeviceAvailable)
   22d2d:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22d32:	05 73 02 00 00       	add    eax,0x273
   22d37:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   22d3e:	84 c0                	test   al,al
   22d40:	74 4b                	je     22d8d <ataScanForHarddrives+0x1be>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:312
    {
        ataIdentify(&kATADeviceInfo[1]);
   22d42:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22d47:	05 73 02 00 00       	add    eax,0x273
   22d4c:	83 ec 0c             	sub    esp,0xc
   22d4f:	50                   	push   eax
   22d50:	e8 b9 fc ff ff       	call   22a0e <ataIdentify>
   22d55:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:313
        if (useCDROMIdentify)
   22d58:	0f b6 05 d8 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d8
   22d5f:	84 c0                	test   al,al
   22d61:	74 16                	je     22d79 <ataScanForHarddrives+0x1aa>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:314
            kATADeviceInfo[1].ATADeviceType=ATA_DEVICE_TYPE_CD;
   22d63:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22d68:	05 73 02 00 00       	add    eax,0x273
   22d6d:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   22d74:	00 00 00 
   22d77:	eb 14                	jmp    22d8d <ataScanForHarddrives+0x1be>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:316
        else
            kATADeviceInfo[1].ATADeviceType=ATA_DEVICE_TYPE_HD;
   22d79:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22d7e:	05 73 02 00 00       	add    eax,0x273
   22d83:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   22d8a:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:318
    }
    kATADeviceInfo[2].bus=ATASecondary;
   22d8d:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22d92:	05 e6 04 00 00       	add    eax,0x4e6
   22d97:	c7 80 61 02 00 00 01 	mov    DWORD PTR [eax+0x261],0x1
   22d9e:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:319
    kATADeviceInfo[2].driveNo=2;
   22da1:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22da6:	05 e6 04 00 00       	add    eax,0x4e6
   22dab:	c7 80 65 02 00 00 02 	mov    DWORD PTR [eax+0x265],0x2
   22db2:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:320
    kATADeviceInfo[2].ioPort=0x170;
   22db5:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22dba:	05 e6 04 00 00       	add    eax,0x4e6
   22dbf:	c7 80 69 02 00 00 70 	mov    DWORD PTR [eax+0x269],0x170
   22dc6:	01 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:321
    kATADeviceInfo[2].irqNum=0x15;
   22dc9:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22dce:	05 e6 04 00 00       	add    eax,0x4e6
   22dd3:	c6 80 6d 02 00 00 15 	mov    BYTE PTR [eax+0x26d],0x15
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:322
    kATADeviceInfo[2].driveHeadPortDesignation=0xA0;
   22dda:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22ddf:	05 e6 04 00 00       	add    eax,0x4e6
   22de4:	c6 80 6e 02 00 00 a0 	mov    BYTE PTR [eax+0x26e],0xa0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:323
    kATADeviceInfo[2].queryATAData=false;
   22deb:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22df0:	05 e6 04 00 00       	add    eax,0x4e6
   22df5:	c6 80 50 02 00 00 00 	mov    BYTE PTR [eax+0x250],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:324
    kATADeviceInfo[2].ATADeviceAvailable=ataInit(&kATADeviceInfo[2]);
   22dfc:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22e01:	8d 98 e6 04 00 00    	lea    ebx,[eax+0x4e6]
   22e07:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22e0c:	05 e6 04 00 00       	add    eax,0x4e6
   22e11:	83 ec 0c             	sub    esp,0xc
   22e14:	50                   	push   eax
   22e15:	e8 52 f8 ff ff       	call   2266c <ataInit>
   22e1a:	83 c4 10             	add    esp,0x10
   22e1d:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:325
    if (kATADeviceInfo[2].ATADeviceAvailable)
   22e23:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22e28:	05 e6 04 00 00       	add    eax,0x4e6
   22e2d:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   22e34:	84 c0                	test   al,al
   22e36:	74 4b                	je     22e83 <ataScanForHarddrives+0x2b4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:327
    {
        ataIdentify(&kATADeviceInfo[2]);
   22e38:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22e3d:	05 e6 04 00 00       	add    eax,0x4e6
   22e42:	83 ec 0c             	sub    esp,0xc
   22e45:	50                   	push   eax
   22e46:	e8 c3 fb ff ff       	call   22a0e <ataIdentify>
   22e4b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:328
        if (useCDROMIdentify)
   22e4e:	0f b6 05 d8 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d8
   22e55:	84 c0                	test   al,al
   22e57:	74 16                	je     22e6f <ataScanForHarddrives+0x2a0>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:329
            kATADeviceInfo[2].ATADeviceType=ATA_DEVICE_TYPE_CD;
   22e59:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22e5e:	05 e6 04 00 00       	add    eax,0x4e6
   22e63:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   22e6a:	00 00 00 
   22e6d:	eb 14                	jmp    22e83 <ataScanForHarddrives+0x2b4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:331
        else
            kATADeviceInfo[2].ATADeviceType=ATA_DEVICE_TYPE_HD;
   22e6f:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22e74:	05 e6 04 00 00       	add    eax,0x4e6
   22e79:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   22e80:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:334
    }

    kATADeviceInfo[3].bus=ATASecondary;
   22e83:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22e88:	05 59 07 00 00       	add    eax,0x759
   22e8d:	c7 80 61 02 00 00 01 	mov    DWORD PTR [eax+0x261],0x1
   22e94:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:335
    kATADeviceInfo[3].driveNo=3;
   22e97:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22e9c:	05 59 07 00 00       	add    eax,0x759
   22ea1:	c7 80 65 02 00 00 03 	mov    DWORD PTR [eax+0x265],0x3
   22ea8:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:336
    kATADeviceInfo[3].ioPort=0x170;
   22eab:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22eb0:	05 59 07 00 00       	add    eax,0x759
   22eb5:	c7 80 69 02 00 00 70 	mov    DWORD PTR [eax+0x269],0x170
   22ebc:	01 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:337
    kATADeviceInfo[3].irqNum=0x15;
   22ebf:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22ec4:	05 59 07 00 00       	add    eax,0x759
   22ec9:	c6 80 6d 02 00 00 15 	mov    BYTE PTR [eax+0x26d],0x15
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:338
    kATADeviceInfo[3].driveHeadPortDesignation=0xB0;
   22ed0:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22ed5:	05 59 07 00 00       	add    eax,0x759
   22eda:	c6 80 6e 02 00 00 b0 	mov    BYTE PTR [eax+0x26e],0xb0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:339
    kATADeviceInfo[3].queryATAData=true;
   22ee1:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22ee6:	05 59 07 00 00       	add    eax,0x759
   22eeb:	c6 80 50 02 00 00 01 	mov    BYTE PTR [eax+0x250],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:340
    kATADeviceInfo[3].ATADeviceAvailable=ataInit(&kATADeviceInfo[3]);
   22ef2:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22ef7:	8d 98 59 07 00 00    	lea    ebx,[eax+0x759]
   22efd:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22f02:	05 59 07 00 00       	add    eax,0x759
   22f07:	83 ec 0c             	sub    esp,0xc
   22f0a:	50                   	push   eax
   22f0b:	e8 5c f7 ff ff       	call   2266c <ataInit>
   22f10:	83 c4 10             	add    esp,0x10
   22f13:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:341
    if (kATADeviceInfo[3].ATADeviceAvailable)
   22f19:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22f1e:	05 59 07 00 00       	add    eax,0x759
   22f23:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   22f2a:	84 c0                	test   al,al
   22f2c:	74 4b                	je     22f79 <ataScanForHarddrives+0x3aa>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:343
    {
        ataIdentify(&kATADeviceInfo[3]);
   22f2e:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22f33:	05 59 07 00 00       	add    eax,0x759
   22f38:	83 ec 0c             	sub    esp,0xc
   22f3b:	50                   	push   eax
   22f3c:	e8 cd fa ff ff       	call   22a0e <ataIdentify>
   22f41:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:344
        if (useCDROMIdentify)
   22f44:	0f b6 05 d8 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d8
   22f4b:	84 c0                	test   al,al
   22f4d:	74 16                	je     22f65 <ataScanForHarddrives+0x396>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:345
            kATADeviceInfo[3].ATADeviceType=ATA_DEVICE_TYPE_CD;
   22f4f:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22f54:	05 59 07 00 00       	add    eax,0x759
   22f59:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   22f60:	00 00 00 
   22f63:	eb 14                	jmp    22f79 <ataScanForHarddrives+0x3aa>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:347
        else
            kATADeviceInfo[3].ATADeviceType=ATA_DEVICE_TYPE_HD;
   22f65:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22f6a:	05 59 07 00 00       	add    eax,0x759
   22f6f:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   22f76:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:351
    }

#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22f79:	a1 78 98 12 00       	mov    eax,ds:0x129878
   22f7e:	83 e0 08             	and    eax,0x8
   22f81:	85 c0                	test   eax,eax
   22f83:	74 2c                	je     22fb1 <ataScanForHarddrives+0x3e2>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:352
        printk("INIT: Disk1=%s  Disk2=%s\n", kATADeviceInfo[0].ATADeviceModel, kATADeviceInfo[1].ATADeviceModel);
   22f85:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22f8a:	05 73 02 00 00       	add    eax,0x273
   22f8f:	8d 90 00 02 00 00    	lea    edx,[eax+0x200]
   22f95:	a1 00 98 12 00       	mov    eax,ds:0x129800
   22f9a:	05 00 02 00 00       	add    eax,0x200
   22f9f:	83 ec 04             	sub    esp,0x4
   22fa2:	52                   	push   edx
   22fa3:	50                   	push   eax
   22fa4:	68 93 3f 08 00       	push   0x83f93
   22fa9:	e8 ad 47 00 00       	call   2775b <printk>
   22fae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:354
#endif
            return 0;
   22fb1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:355
}
   22fb6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   22fb9:	c9                   	leave  
   22fba:	c3                   	ret    

00022fbb <ataReadDisk>:
ataReadDisk():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:357
int ataReadDisk(struct ataDeviceInfo_t* devInfo, uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
   22fbb:	55                   	push   ebp
   22fbc:	89 e5                	mov    ebp,esp
   22fbe:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:358
    atablockingReadDev = devInfo;
   22fc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22fc4:	a3 a0 8f 09 00       	mov    ds:0x98fa0,eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:359
    if (sector_count==0)    //this function can be called with a sector_count of 0 in order to set partOffset
   22fc9:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   22fcd:	75 07                	jne    22fd6 <ataReadDisk+0x1b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:360
        return -1;
   22fcf:	b8 ff ff ff ff       	mov    eax,0xffffffff
   22fd4:	eb 14                	jmp    22fea <ataReadDisk+0x2f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:361
    return ataBlockingRead28(sector, buffer, sector_count);
   22fd6:	83 ec 04             	sub    esp,0x4
   22fd9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   22fdc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   22fdf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   22fe2:	e8 05 00 00 00       	call   22fec <ataBlockingRead28>
   22fe7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:362
}
   22fea:	c9                   	leave  
   22feb:	c3                   	ret    

00022fec <ataBlockingRead28>:
ataBlockingRead28():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:365

int ataBlockingRead28(uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
   22fec:	55                   	push   ebp
   22fed:	89 e5                	mov    ebp,esp
   22fef:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:367
    //For now if the FAT library calls this, we assume we've already read the same partition most recently
    int lResult=0;
   22ff2:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:368
    uint8_t* bufp=buffer;
   22ff9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   22ffc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:369
    uint32_t lSectorsLeft=sector_count;
   22fff:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   23002:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:370
    uint32_t lSector=sector+partOffset; //this represents the start of the partition
   23005:	a1 e0 a5 09 00       	mov    eax,ds:0x9a5e0
   2300a:	89 c2                	mov    edx,eax
   2300c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2300f:	01 d0                	add    eax,edx
   23011:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:373

#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   23014:	a1 78 98 12 00       	mov    eax,ds:0x129878
   23019:	83 e0 08             	and    eax,0x8
   2301c:	85 c0                	test   eax,eax
   2301e:	74 1b                	je     2303b <ataBlockingRead28+0x4f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:375
        {
            printk("ataBlockingRead28: sec: 0x%08X, buf 0x%08X, cnt 0x%08X\n", lSector, bufp, sector_count);
   23020:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   23023:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   23026:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   23029:	68 b0 3f 08 00       	push   0x83fb0
   2302e:	e8 28 47 00 00       	call   2775b <printk>
   23033:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:376
            waitForKeyboardKey();
   23036:	e8 24 e2 fe ff       	call   1125f <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:379
        }
#endif
    lResult=ataWaitForIdle(atablockingReadDev);
   2303b:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   23040:	83 ec 0c             	sub    esp,0xc
   23043:	50                   	push   eax
   23044:	e8 e1 f0 ff ff       	call   2212a <ataWaitForIdle>
   23049:	83 c4 10             	add    esp,0x10
   2304c:	0f b6 c0             	movzx  eax,al
   2304f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:380
    if (lResult)
   23052:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   23056:	74 13                	je     2306b <ataBlockingRead28+0x7f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:381
        panic("ataBlockingRead28: Timeout waiting for DRQ and BSY to be clear (0x%02X)", lResult);
   23058:	83 ec 08             	sub    esp,0x8
   2305b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   2305e:	68 e8 3f 08 00       	push   0x83fe8
   23063:	e8 74 42 00 00       	call   272dc <panic>
   23068:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:386
        //Select the drive we want
        //NOTE: Drive selected prior to calling this function
        //ataSelectDrive(drive,0);
        //Magic bit (6) to set LBA mode and top 4 bits of LBA28 sector # go in bottom 4
    outb(atablockingReadDev->ioPort+ATA_DRIVE_SELECT, inb(atablockingReadDev->ioPort+ATA_DRIVE_SELECT) | (1 << 6) | ((lSector >> 24) & 0x0F));
   2306b:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   23070:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   23076:	83 c0 06             	add    eax,0x6
   23079:	0f b7 c0             	movzx  eax,ax
   2307c:	83 ec 0c             	sub    esp,0xc
   2307f:	50                   	push   eax
   23080:	e8 7e ef ff ff       	call   22003 <inb>
   23085:	83 c4 10             	add    esp,0x10
   23088:	89 c2                	mov    edx,eax
   2308a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2308d:	c1 e8 18             	shr    eax,0x18
   23090:	83 e0 0f             	and    eax,0xf
   23093:	09 d0                	or     eax,edx
   23095:	83 c8 40             	or     eax,0x40
   23098:	0f b6 d0             	movzx  edx,al
   2309b:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   230a0:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   230a6:	83 c0 06             	add    eax,0x6
   230a9:	0f b7 c0             	movzx  eax,ax
   230ac:	83 ec 08             	sub    esp,0x8
   230af:	52                   	push   edx
   230b0:	50                   	push   eax
   230b1:	e8 2e ef ff ff       	call   21fe4 <outb>
   230b6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:389

    //Send the sector count (8 bit))
    outb(atablockingReadDev->ioPort+ATA_PORT_SECTORCOUNT, sector_count);
   230b9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   230bc:	0f b6 d0             	movzx  edx,al
   230bf:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   230c4:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   230ca:	83 c0 02             	add    eax,0x2
   230cd:	0f b7 c0             	movzx  eax,ax
   230d0:	83 ec 08             	sub    esp,0x8
   230d3:	52                   	push   edx
   230d4:	50                   	push   eax
   230d5:	e8 0a ef ff ff       	call   21fe4 <outb>
   230da:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:392

    //Send the LBA sector number in the next 3 fields + high bit in the 
    outb(atablockingReadDev->ioPort+ATA_PORT_SECTOR_NUMBER, (lSector) & 0xFF);
   230dd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   230e0:	0f b6 d0             	movzx  edx,al
   230e3:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   230e8:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   230ee:	83 c0 03             	add    eax,0x3
   230f1:	0f b7 c0             	movzx  eax,ax
   230f4:	83 ec 08             	sub    esp,0x8
   230f7:	52                   	push   edx
   230f8:	50                   	push   eax
   230f9:	e8 e6 ee ff ff       	call   21fe4 <outb>
   230fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:393
    outb(atablockingReadDev->ioPort+ATA_PORT_CYLINDER_LOW, (lSector >> 8) & 0xFF);
   23101:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23104:	c1 e8 08             	shr    eax,0x8
   23107:	0f b6 d0             	movzx  edx,al
   2310a:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   2310f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   23115:	83 c0 04             	add    eax,0x4
   23118:	0f b7 c0             	movzx  eax,ax
   2311b:	83 ec 08             	sub    esp,0x8
   2311e:	52                   	push   edx
   2311f:	50                   	push   eax
   23120:	e8 bf ee ff ff       	call   21fe4 <outb>
   23125:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:394
    outb(atablockingReadDev->ioPort+ATA_PORT_CYLINDER_HIGH, (lSector >> 16) & 0xFF);
   23128:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2312b:	c1 e8 10             	shr    eax,0x10
   2312e:	0f b6 d0             	movzx  edx,al
   23131:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   23136:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2313c:	83 c0 05             	add    eax,0x5
   2313f:	0f b7 c0             	movzx  eax,ax
   23142:	83 ec 08             	sub    esp,0x8
   23145:	52                   	push   edx
   23146:	50                   	push   eax
   23147:	e8 98 ee ff ff       	call   21fe4 <outb>
   2314c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:395
    outb(atablockingReadDev->ioPort+ATA_PORT_COMMAND, ATA_COMMAND_READ_SECTOR);
   2314f:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   23154:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2315a:	83 c0 07             	add    eax,0x7
   2315d:	0f b7 c0             	movzx  eax,ax
   23160:	83 ec 08             	sub    esp,0x8
   23163:	6a 20                	push   0x20
   23165:	50                   	push   eax
   23166:	e8 79 ee ff ff       	call   21fe4 <outb>
   2316b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:396
    lResult=ataWaitForDRQ(atablockingReadDev, true, ATA_STANDARD_WAIT_MS*kTicksPerMS);
   2316e:	8b 15 c4 97 12 00    	mov    edx,DWORD PTR ds:0x1297c4
   23174:	89 d0                	mov    eax,edx
   23176:	c1 e0 02             	shl    eax,0x2
   23179:	01 d0                	add    eax,edx
   2317b:	01 c0                	add    eax,eax
   2317d:	89 c2                	mov    edx,eax
   2317f:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   23184:	83 ec 04             	sub    esp,0x4
   23187:	52                   	push   edx
   23188:	6a 01                	push   0x1
   2318a:	50                   	push   eax
   2318b:	e8 e4 ee ff ff       	call   22074 <ataWaitForDRQ>
   23190:	83 c4 10             	add    esp,0x10
   23193:	0f b6 c0             	movzx  eax,al
   23196:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:397
    if (lResult)
   23199:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   2319d:	0f 84 35 01 00 00    	je     232d8 <ataBlockingRead28+0x2ec>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:398
        panic("ataBlockingRead28: Timeout waiting for DRQ to be set Stts=0x%02X, Err=0x%02X", lResult, hdError);
   231a3:	a1 dc a5 09 00       	mov    eax,ds:0x9a5dc
   231a8:	83 ec 04             	sub    esp,0x4
   231ab:	50                   	push   eax
   231ac:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   231af:	68 30 40 08 00       	push   0x84030
   231b4:	e8 23 41 00 00       	call   272dc <panic>
   231b9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:399
    while (lSectorsLeft)
   231bc:	e9 17 01 00 00       	jmp    232d8 <ataBlockingRead28+0x2ec>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:401
    {
        insw(atablockingReadDev->ioPort+ATA_PORT_DATA, bufp, 256);
   231c1:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   231c6:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   231cc:	0f b7 c0             	movzx  eax,ax
   231cf:	83 ec 04             	sub    esp,0x4
   231d2:	68 00 01 00 00       	push   0x100
   231d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   231da:	50                   	push   eax
   231db:	e8 5f ee ff ff       	call   2203f <insw>
   231e0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:403
        #ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   231e3:	a1 78 98 12 00       	mov    eax,ds:0x129878
   231e8:	83 e0 08             	and    eax,0x8
   231eb:	85 c0                	test   eax,eax
   231ed:	74 52                	je     23241 <ataBlockingRead28+0x255>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:405
            {
                printk("ataBlockingRead28: Debugging: ");
   231ef:	83 ec 0c             	sub    esp,0xc
   231f2:	68 80 40 08 00       	push   0x84080
   231f7:	e8 5f 45 00 00       	call   2775b <printk>
   231fc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:406
                for (int cnt2=0;cnt2<20;cnt2++)
   231ff:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   23206:	eb 23                	jmp    2322b <ataBlockingRead28+0x23f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:407 (discriminator 3)
                    printk("%02X ", bufp[cnt2]);
   23208:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   2320b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2320e:	01 d0                	add    eax,edx
   23210:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   23213:	0f b6 c0             	movzx  eax,al
   23216:	83 ec 08             	sub    esp,0x8
   23219:	50                   	push   eax
   2321a:	68 9f 40 08 00       	push   0x8409f
   2321f:	e8 37 45 00 00       	call   2775b <printk>
   23224:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:406 (discriminator 3)
        insw(atablockingReadDev->ioPort+ATA_PORT_DATA, bufp, 256);
        #ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            {
                printk("ataBlockingRead28: Debugging: ");
                for (int cnt2=0;cnt2<20;cnt2++)
   23227:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:406 (discriminator 1)
   2322b:	83 7d e8 13          	cmp    DWORD PTR [ebp-0x18],0x13
   2322f:	7e d7                	jle    23208 <ataBlockingRead28+0x21c>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:408
                    printk("%02X ", bufp[cnt2]);
                printk("\n");
   23231:	83 ec 0c             	sub    esp,0xc
   23234:	68 a5 40 08 00       	push   0x840a5
   23239:	e8 1d 45 00 00       	call   2775b <printk>
   2323e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:411
            }
        #endif
        if (--lSectorsLeft>0) //zero based vs 1 based
   23241:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
   23245:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   23249:	0f 84 89 00 00 00    	je     232d8 <ataBlockingRead28+0x2ec>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:413
        {
            wait(50);
   2324f:	83 ec 0c             	sub    esp,0xc
   23252:	6a 32                	push   0x32
   23254:	e8 41 57 00 00       	call   2899a <wait>
   23259:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:414
            lResult=ataWaitForDRQ(atablockingReadDev, true, ATA_STANDARD_WAIT_MS*kTicksPerMS);
   2325c:	8b 15 c4 97 12 00    	mov    edx,DWORD PTR ds:0x1297c4
   23262:	89 d0                	mov    eax,edx
   23264:	c1 e0 02             	shl    eax,0x2
   23267:	01 d0                	add    eax,edx
   23269:	01 c0                	add    eax,eax
   2326b:	89 c2                	mov    edx,eax
   2326d:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   23272:	83 ec 04             	sub    esp,0x4
   23275:	52                   	push   edx
   23276:	6a 01                	push   0x1
   23278:	50                   	push   eax
   23279:	e8 f6 ed ff ff       	call   22074 <ataWaitForDRQ>
   2327e:	83 c4 10             	add    esp,0x10
   23281:	0f b6 c0             	movzx  eax,al
   23284:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:415
            bufp+=512;
   23287:	81 45 f4 00 02 00 00 	add    DWORD PTR [ebp-0xc],0x200
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:416
            lSector++;
   2328e:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:417
            if (lResult)
   23292:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   23296:	74 19                	je     232b1 <ataBlockingRead28+0x2c5>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:418
                panic("ataBlockingRead28: Timeout in read loop, waiting for DRQ to be set Stts=0x%02X, Err=0x%02X", lResult, hdError);
   23298:	a1 dc a5 09 00       	mov    eax,ds:0x9a5dc
   2329d:	83 ec 04             	sub    esp,0x4
   232a0:	50                   	push   eax
   232a1:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   232a4:	68 a8 40 08 00       	push   0x840a8
   232a9:	e8 2e 40 00 00       	call   272dc <panic>
   232ae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:420
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   232b1:	a1 78 98 12 00       	mov    eax,ds:0x129878
   232b6:	83 e0 08             	and    eax,0x8
   232b9:	85 c0                	test   eax,eax
   232bb:	74 1b                	je     232d8 <ataBlockingRead28+0x2ec>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:422
        {
            printk("ataBlockingRead28: sec=0x%08X, buf=0x%08X, rep=0x%08X    \n", lSector, bufp, lSectorsLeft);
   232bd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   232c0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   232c3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   232c6:	68 04 41 08 00       	push   0x84104
   232cb:	e8 8b 44 00 00       	call   2775b <printk>
   232d0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:423
            waitForKeyboardKey();
   232d3:	e8 87 df fe ff       	call   1125f <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:399
    outb(atablockingReadDev->ioPort+ATA_PORT_CYLINDER_HIGH, (lSector >> 16) & 0xFF);
    outb(atablockingReadDev->ioPort+ATA_PORT_COMMAND, ATA_COMMAND_READ_SECTOR);
    lResult=ataWaitForDRQ(atablockingReadDev, true, ATA_STANDARD_WAIT_MS*kTicksPerMS);
    if (lResult)
        panic("ataBlockingRead28: Timeout waiting for DRQ to be set Stts=0x%02X, Err=0x%02X", lResult, hdError);
    while (lSectorsLeft)
   232d8:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   232dc:	0f 85 df fe ff ff    	jne    231c1 <ataBlockingRead28+0x1d5>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:428
            waitForKeyboardKey();
        }
#endif
        }
    }
    return 512*sector_count;
   232e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   232e5:	c1 e0 09             	shl    eax,0x9
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:429
}
   232e8:	c9                   	leave  
   232e9:	c3                   	ret    

000232ea <ataBlockingWrite28>:
ataBlockingWrite28():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:432

int ataBlockingWrite28(/*unsigned drive, */uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
   232ea:	55                   	push   ebp
   232eb:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:468
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            printk("ataBlockingWrite28: Finished sending data\n");
#endif
    return 512;
*/}
   232ed:	90                   	nop
   232ee:	5d                   	pop    ebp
   232ef:	c3                   	ret    

000232f0 <__get_cpuid_max>:
__get_cpuid_max():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:179
   pointer is non-null, then first four bytes of the signature
   (as found in ebx register) are returned in location pointed by sig.  */

static __inline unsigned int
__get_cpuid_max (unsigned int __ext, unsigned int *__sig)
{
   232f0:	55                   	push   ebp
   232f1:	89 e5                	mov    ebp,esp
   232f3:	53                   	push   ebx
   232f4:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:185
  unsigned int __eax, __ebx, __ecx, __edx;

#ifndef __x86_64__
  /* See if we can use cpuid.  On AMD64 we always can.  */
#if __GNUC__ >= 3
  __asm__ ("pushf{l|d}\n\t"
   232f7:	9c                   	pushf  
   232f8:	9c                   	pushf  
   232f9:	5a                   	pop    edx
   232fa:	89 d0                	mov    eax,edx
   232fc:	81 f2 00 00 20 00    	xor    edx,0x200000
   23302:	52                   	push   edx
   23303:	9d                   	popf   
   23304:	9c                   	pushf  
   23305:	5a                   	pop    edx
   23306:	9d                   	popf   
   23307:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   2330a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:214
	   "popfl\n\t"
	   : "=&r" (__eax), "=&r" (__ebx)
	   : "i" (0x00200000));
#endif

  if (!((__eax ^ __ebx) & 0x00200000))
   2330d:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   23310:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
   23313:	25 00 00 20 00       	and    eax,0x200000
   23318:	85 c0                	test   eax,eax
   2331a:	75 07                	jne    23323 <__get_cpuid_max+0x33>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:215
    return 0;
   2331c:	b8 00 00 00 00       	mov    eax,0x0
   23321:	eb 22                	jmp    23345 <__get_cpuid_max+0x55>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:219
#endif

  /* Host supports cpuid.  Return highest supported cpuid input value.  */
  __cpuid (__ext, __eax, __ebx, __ecx, __edx);
   23323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23326:	0f a2                	cpuid  
   23328:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   2332b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
   2332e:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   23331:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:221

  if (__sig)
   23334:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   23338:	74 08                	je     23342 <__get_cpuid_max+0x52>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:222
    *__sig = __ebx;
   2333a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2333d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23340:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:224

  return __eax;
   23342:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:225
}
   23345:	83 c4 10             	add    esp,0x10
   23348:	5b                   	pop    ebx
   23349:	5d                   	pop    ebp
   2334a:	c3                   	ret    

0002334b <__get_cpuid>:
__get_cpuid():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:236

static __inline int
__get_cpuid (unsigned int __level,
	     unsigned int *__eax, unsigned int *__ebx,
	     unsigned int *__ecx, unsigned int *__edx)
{
   2334b:	55                   	push   ebp
   2334c:	89 e5                	mov    ebp,esp
   2334e:	56                   	push   esi
   2334f:	53                   	push   ebx
   23350:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:237
  unsigned int __ext = __level & 0x80000000;
   23353:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23356:	25 00 00 00 80       	and    eax,0x80000000
   2335b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:239

  if (__get_cpuid_max (__ext, 0) < __level)
   2335e:	6a 00                	push   0x0
   23360:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   23363:	e8 88 ff ff ff       	call   232f0 <__get_cpuid_max>
   23368:	83 c4 08             	add    esp,0x8
   2336b:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   2336e:	73 07                	jae    23377 <__get_cpuid+0x2c>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:240
    return 0;
   23370:	b8 00 00 00 00       	mov    eax,0x0
   23375:	eb 1e                	jmp    23395 <__get_cpuid+0x4a>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:242

  __cpuid (__level, *__eax, *__ebx, *__ecx, *__edx);
   23377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2337a:	0f a2                	cpuid  
   2337c:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
   2337f:	89 06                	mov    DWORD PTR [esi],eax
   23381:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   23384:	89 18                	mov    DWORD PTR [eax],ebx
   23386:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   23389:	89 08                	mov    DWORD PTR [eax],ecx
   2338b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   2338e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:243
  return 1;
   23390:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:244
}
   23395:	8d 65 f8             	lea    esp,[ebp-0x8]
   23398:	5b                   	pop    ebx
   23399:	5e                   	pop    esi
   2339a:	5d                   	pop    ebp
   2339b:	c3                   	ret    

0002339c <detect_cpu>:
detect_cpu():
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:45
void printregs(int eax, int ebx, int ecx, int edx);
extern struct cpuinfo_t kcpuInfo;


/* Simply call this function detect_cpu(); */
int HIGH_CODE_SECTION detect_cpu(void) { /* or main() if your trying to port this as an independant application */
   2339c:	55                   	push   ebp
   2339d:	89 e5                	mov    ebp,esp
   2339f:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:47
	unsigned int ebx, unused;
        __get_cpuid(0, &unused, &ebx, &unused, &unused);
   233a2:	8d 45 f0             	lea    eax,[ebp-0x10]
   233a5:	50                   	push   eax
   233a6:	8d 45 f0             	lea    eax,[ebp-0x10]
   233a9:	50                   	push   eax
   233aa:	8d 45 f4             	lea    eax,[ebp-0xc]
   233ad:	50                   	push   eax
   233ae:	8d 45 f0             	lea    eax,[ebp-0x10]
   233b1:	50                   	push   eax
   233b2:	6a 00                	push   0x0
   233b4:	e8 92 ff ff ff       	call   2334b <__get_cpuid>
   233b9:	83 c4 14             	add    esp,0x14
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:48
	switch(ebx) {
   233bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   233bf:	3d 41 75 74 68       	cmp    eax,0x68747541
   233c4:	74 0e                	je     233d4 <detect_cpu+0x38>
   233c6:	3d 47 65 6e 75       	cmp    eax,0x756e6547
   233cb:	75 0e                	jne    233db <detect_cpu+0x3f>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:50
		case 0x756e6547: /* Intel Magic Code */
		do_intel();
   233cd:	e8 2a 00 00 00       	call   233fc <do_intel>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:51
		break;
   233d2:	eb 21                	jmp    233f5 <detect_cpu+0x59>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:53
		case 0x68747541: /* AMD Magic Code */
		do_amd();
   233d4:	e8 27 06 00 00       	call   23a00 <do_amd>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:54
		break;
   233d9:	eb 1a                	jmp    233f5 <detect_cpu+0x59>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:56
		default:
		printk("Unknown x86 CPU Detected\n");
   233db:	83 ec 0c             	sub    esp,0xc
   233de:	68 40 41 08 00       	push   0x84140
   233e3:	e8 73 43 00 00       	call   2775b <printk>
   233e8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:57
                __asm__("pushf\n pop eax\n and eax,0xFFDFFFFF\n push eax\n popf\n");
   233eb:	9c                   	pushf  
   233ec:	58                   	pop    eax
   233ed:	25 ff ff df ff       	and    eax,0xffdfffff
   233f2:	50                   	push   eax
   233f3:	9d                   	popf   
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:58
		break;
   233f4:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:60
	}
	return 0;
   233f5:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:61
}
   233fa:	c9                   	leave  
   233fb:	c3                   	ret    

000233fc <do_intel>:
do_intel():
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:120
	"Reserved", 
	"Reserved"
};

/* Intel-specific information */
int HIGH_CODE_SECTION do_intel(void) {
   233fc:	55                   	push   ebp
   233fd:	89 e5                	mov    ebp,esp
   233ff:	53                   	push   ebx
   23400:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:121
	unsigned int eax=0, ebx=0, ecx=0, edx=0, max_eax=0, signature, unused;
   23403:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   2340a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   23411:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   23418:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   2341f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:122
	sprintf(kcpuInfo.vendor,"Intel");
   23426:	83 ec 08             	sub    esp,0x8
   23429:	68 97 43 08 00       	push   0x84397
   2342e:	68 b8 95 12 00       	push   0x1295b8
   23433:	e8 77 43 00 00       	call   277af <sprintf>
   23438:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:123
        __get_cpuid(1, &eax, &ebx, &unused, &unused);
   2343b:	83 ec 0c             	sub    esp,0xc
   2343e:	8d 45 dc             	lea    eax,[ebp-0x24]
   23441:	50                   	push   eax
   23442:	8d 45 dc             	lea    eax,[ebp-0x24]
   23445:	50                   	push   eax
   23446:	8d 45 ec             	lea    eax,[ebp-0x14]
   23449:	50                   	push   eax
   2344a:	8d 45 f0             	lea    eax,[ebp-0x10]
   2344d:	50                   	push   eax
   2344e:	6a 01                	push   0x1
   23450:	e8 f6 fe ff ff       	call   2334b <__get_cpuid>
   23455:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:124
	kcpuInfo.model = (eax >> 4) & 0xf;
   23458:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2345b:	c1 e8 04             	shr    eax,0x4
   2345e:	83 e0 0f             	and    eax,0xf
   23461:	a3 a4 95 12 00       	mov    ds:0x1295a4,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:125
	kcpuInfo.family = (eax >> 8) & 0xf;
   23466:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23469:	c1 e8 08             	shr    eax,0x8
   2346c:	83 e0 0f             	and    eax,0xf
   2346f:	a3 a0 95 12 00       	mov    ds:0x1295a0,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:126
	kcpuInfo.type = (eax >> 12) & 0x3;
   23474:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23477:	c1 e8 0c             	shr    eax,0xc
   2347a:	83 e0 03             	and    eax,0x3
   2347d:	a3 ac 95 12 00       	mov    ds:0x1295ac,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:127
	kcpuInfo.brand = ebx & 0xff;
   23482:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23485:	0f b6 c0             	movzx  eax,al
   23488:	a3 b0 95 12 00       	mov    ds:0x1295b0,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:128
	kcpuInfo.stepping = eax & 0xf;
   2348d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23490:	83 e0 0f             	and    eax,0xf
   23493:	a3 a8 95 12 00       	mov    ds:0x1295a8,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:129
	signature = eax;
   23498:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2349b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:130
	switch(kcpuInfo.type) {
   2349e:	a1 ac 95 12 00       	mov    eax,ds:0x1295ac
   234a3:	83 f8 01             	cmp    eax,0x1
   234a6:	74 2e                	je     234d6 <do_intel+0xda>
   234a8:	83 f8 01             	cmp    eax,0x1
   234ab:	7f 06                	jg     234b3 <do_intel+0xb7>
   234ad:	85 c0                	test   eax,eax
   234af:	74 0e                	je     234bf <do_intel+0xc3>
   234b1:	eb 67                	jmp    2351a <do_intel+0x11e>
   234b3:	83 f8 02             	cmp    eax,0x2
   234b6:	74 35                	je     234ed <do_intel+0xf1>
   234b8:	83 f8 03             	cmp    eax,0x3
   234bb:	74 47                	je     23504 <do_intel+0x108>
   234bd:	eb 5b                	jmp    2351a <do_intel+0x11e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:132
		case 0:
		sprintf(kcpuInfo.type_name,"Original OEM");
   234bf:	83 ec 08             	sub    esp,0x8
   234c2:	68 9d 43 08 00       	push   0x8439d
   234c7:	68 4e 96 12 00       	push   0x12964e
   234cc:	e8 de 42 00 00       	call   277af <sprintf>
   234d1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:133
		break;
   234d4:	eb 44                	jmp    2351a <do_intel+0x11e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:135
		case 1:
		sprintf(kcpuInfo.type_name,"Overdrive");
   234d6:	83 ec 08             	sub    esp,0x8
   234d9:	68 aa 43 08 00       	push   0x843aa
   234de:	68 4e 96 12 00       	push   0x12964e
   234e3:	e8 c7 42 00 00       	call   277af <sprintf>
   234e8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:136
		break;
   234eb:	eb 2d                	jmp    2351a <do_intel+0x11e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:138
		case 2:
		sprintf(kcpuInfo.type_name,"Dual-capable");
   234ed:	83 ec 08             	sub    esp,0x8
   234f0:	68 b4 43 08 00       	push   0x843b4
   234f5:	68 4e 96 12 00       	push   0x12964e
   234fa:	e8 b0 42 00 00       	call   277af <sprintf>
   234ff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:139
		break;
   23502:	eb 16                	jmp    2351a <do_intel+0x11e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:141
		case 3:
		sprintf(kcpuInfo.type_name,"Reserved");
   23504:	83 ec 08             	sub    esp,0x8
   23507:	68 de 41 08 00       	push   0x841de
   2350c:	68 4e 96 12 00       	push   0x12964e
   23511:	e8 99 42 00 00       	call   277af <sprintf>
   23516:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:142
		break;
   23519:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:144
	}
	switch(kcpuInfo.family) {
   2351a:	a1 a0 95 12 00       	mov    eax,ds:0x1295a0
   2351f:	83 e8 03             	sub    eax,0x3
   23522:	83 f8 0c             	cmp    eax,0xc
   23525:	77 7a                	ja     235a1 <do_intel+0x1a5>
   23527:	8b 04 85 ec 44 08 00 	mov    eax,DWORD PTR [eax*4+0x844ec]
   2352e:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:146
		case 3:
		sprintf(kcpuInfo.family_name,"i386");
   23530:	83 ec 08             	sub    esp,0x8
   23533:	68 c1 43 08 00       	push   0x843c1
   23538:	68 80 96 12 00       	push   0x129680
   2353d:	e8 6d 42 00 00       	call   277af <sprintf>
   23542:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:147
		break;
   23545:	eb 5a                	jmp    235a1 <do_intel+0x1a5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:149
		case 4:
		sprintf(kcpuInfo.family_name,"i486");
   23547:	83 ec 08             	sub    esp,0x8
   2354a:	68 c6 43 08 00       	push   0x843c6
   2354f:	68 80 96 12 00       	push   0x129680
   23554:	e8 56 42 00 00       	call   277af <sprintf>
   23559:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:150
		break;
   2355c:	eb 43                	jmp    235a1 <do_intel+0x1a5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:152
		case 5:
		sprintf(kcpuInfo.family_name,"Pentium");
   2355e:	83 ec 08             	sub    esp,0x8
   23561:	68 cb 43 08 00       	push   0x843cb
   23566:	68 80 96 12 00       	push   0x129680
   2356b:	e8 3f 42 00 00       	call   277af <sprintf>
   23570:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:153
		break;
   23573:	eb 2c                	jmp    235a1 <do_intel+0x1a5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:155
		case 6:
		sprintf(kcpuInfo.family_name,"Pentium Pro");
   23575:	83 ec 08             	sub    esp,0x8
   23578:	68 d3 43 08 00       	push   0x843d3
   2357d:	68 80 96 12 00       	push   0x129680
   23582:	e8 28 42 00 00       	call   277af <sprintf>
   23587:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:156
		break;
   2358a:	eb 15                	jmp    235a1 <do_intel+0x1a5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:158
		case 15:
		sprintf(kcpuInfo.family_name,"Pentium 4");
   2358c:	83 ec 08             	sub    esp,0x8
   2358f:	68 df 43 08 00       	push   0x843df
   23594:	68 80 96 12 00       	push   0x129680
   23599:	e8 11 42 00 00       	call   277af <sprintf>
   2359e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:160
	}
	if(kcpuInfo.family == 15) {
   235a1:	a1 a0 95 12 00       	mov    eax,ds:0x1295a0
   235a6:	83 f8 0f             	cmp    eax,0xf
   235a9:	75 0e                	jne    235b9 <do_intel+0x1bd>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:161
		kcpuInfo.extended_family = (eax >> 20) & 0xff;
   235ab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   235ae:	c1 e8 14             	shr    eax,0x14
   235b1:	0f b6 c0             	movzx  eax,al
   235b4:	a3 b4 95 12 00       	mov    ds:0x1295b4,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:163
	}
	switch(kcpuInfo.family) {
   235b9:	a1 a0 95 12 00       	mov    eax,ds:0x1295a0
   235be:	83 e8 03             	sub    eax,0x3
   235c1:	83 f8 0c             	cmp    eax,0xc
   235c4:	0f 87 f6 01 00 00    	ja     237c0 <do_intel+0x3c4>
   235ca:	8b 04 85 20 45 08 00 	mov    eax,DWORD PTR [eax*4+0x84520]
   235d1:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:167
		case 3:
		break;
		case 4:
		switch(kcpuInfo.model) {
   235d3:	a1 a4 95 12 00       	mov    eax,ds:0x1295a4
   235d8:	83 f8 08             	cmp    eax,0x8
   235db:	0f 87 db 01 00 00    	ja     237bc <do_intel+0x3c0>
   235e1:	8b 04 85 54 45 08 00 	mov    eax,DWORD PTR [eax*4+0x84554]
   235e8:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:170
			case 0:
			case 1:
			sprintf(kcpuInfo.model_name,"DX");
   235ea:	83 ec 08             	sub    esp,0x8
   235ed:	68 e9 43 08 00       	push   0x843e9
   235f2:	68 ea 95 12 00       	push   0x1295ea
   235f7:	e8 b3 41 00 00       	call   277af <sprintf>
   235fc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:171
			break;
   235ff:	e9 89 00 00 00       	jmp    2368d <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:173
			case 2:
			sprintf(kcpuInfo.model_name,"SX");
   23604:	83 ec 08             	sub    esp,0x8
   23607:	68 ec 43 08 00       	push   0x843ec
   2360c:	68 ea 95 12 00       	push   0x1295ea
   23611:	e8 99 41 00 00       	call   277af <sprintf>
   23616:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:174
			break;
   23619:	eb 72                	jmp    2368d <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:176
			case 3:
			sprintf(kcpuInfo.model_name,"487/DX2");
   2361b:	83 ec 08             	sub    esp,0x8
   2361e:	68 ef 43 08 00       	push   0x843ef
   23623:	68 ea 95 12 00       	push   0x1295ea
   23628:	e8 82 41 00 00       	call   277af <sprintf>
   2362d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:177
			break;
   23630:	eb 5b                	jmp    2368d <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:179
			case 4:
			sprintf(kcpuInfo.model_name,"SL");
   23632:	83 ec 08             	sub    esp,0x8
   23635:	68 f7 43 08 00       	push   0x843f7
   2363a:	68 ea 95 12 00       	push   0x1295ea
   2363f:	e8 6b 41 00 00       	call   277af <sprintf>
   23644:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:180
			break;
   23647:	eb 44                	jmp    2368d <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:182
			case 5:
			sprintf(kcpuInfo.model_name,"SX2");
   23649:	83 ec 08             	sub    esp,0x8
   2364c:	68 fa 43 08 00       	push   0x843fa
   23651:	68 ea 95 12 00       	push   0x1295ea
   23656:	e8 54 41 00 00       	call   277af <sprintf>
   2365b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:183
			break;
   2365e:	eb 2d                	jmp    2368d <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:185
			case 7:
			sprintf(kcpuInfo.model_name,"Write-back enhanced DX2");
   23660:	83 ec 08             	sub    esp,0x8
   23663:	68 fe 43 08 00       	push   0x843fe
   23668:	68 ea 95 12 00       	push   0x1295ea
   2366d:	e8 3d 41 00 00       	call   277af <sprintf>
   23672:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:186
			break;
   23675:	eb 16                	jmp    2368d <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:188
			case 8:
			sprintf(kcpuInfo.model_name,"DX4");
   23677:	83 ec 08             	sub    esp,0x8
   2367a:	68 16 44 08 00       	push   0x84416
   2367f:	68 ea 95 12 00       	push   0x1295ea
   23684:	e8 26 41 00 00       	call   277af <sprintf>
   23689:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:189
			break;
   2368c:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:191
		}
		break;
   2368d:	e9 2a 01 00 00       	jmp    237bc <do_intel+0x3c0>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:193
		case 5:
		switch(kcpuInfo.model) {
   23692:	a1 a4 95 12 00       	mov    eax,ds:0x1295a4
   23697:	83 f8 02             	cmp    eax,0x2
   2369a:	74 35                	je     236d1 <do_intel+0x2d5>
   2369c:	83 f8 02             	cmp    eax,0x2
   2369f:	7f 0a                	jg     236ab <do_intel+0x2af>
   236a1:	83 f8 01             	cmp    eax,0x1
   236a4:	74 14                	je     236ba <do_intel+0x2be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:207
			break;
			case 4:
			sprintf(kcpuInfo.model_name,"MMX");
			break;
		}
		break;
   236a6:	e9 15 01 00 00       	jmp    237c0 <do_intel+0x3c4>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:193
			sprintf(kcpuInfo.model_name,"DX4");
			break;
		}
		break;
		case 5:
		switch(kcpuInfo.model) {
   236ab:	83 f8 03             	cmp    eax,0x3
   236ae:	74 38                	je     236e8 <do_intel+0x2ec>
   236b0:	83 f8 04             	cmp    eax,0x4
   236b3:	74 4a                	je     236ff <do_intel+0x303>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:207
			break;
			case 4:
			sprintf(kcpuInfo.model_name,"MMX");
			break;
		}
		break;
   236b5:	e9 06 01 00 00       	jmp    237c0 <do_intel+0x3c4>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:195
		}
		break;
		case 5:
		switch(kcpuInfo.model) {
			case 1:
			sprintf(kcpuInfo.model_name,"60/66");
   236ba:	83 ec 08             	sub    esp,0x8
   236bd:	68 1a 44 08 00       	push   0x8441a
   236c2:	68 ea 95 12 00       	push   0x1295ea
   236c7:	e8 e3 40 00 00       	call   277af <sprintf>
   236cc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:196
			break;
   236cf:	eb 44                	jmp    23715 <do_intel+0x319>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:198
			case 2:
			sprintf(kcpuInfo.model_name,"75-200");
   236d1:	83 ec 08             	sub    esp,0x8
   236d4:	68 20 44 08 00       	push   0x84420
   236d9:	68 ea 95 12 00       	push   0x1295ea
   236de:	e8 cc 40 00 00       	call   277af <sprintf>
   236e3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:199
			break;
   236e6:	eb 2d                	jmp    23715 <do_intel+0x319>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:201
			case 3:
			sprintf(kcpuInfo.model_name,"for 486 system");
   236e8:	83 ec 08             	sub    esp,0x8
   236eb:	68 27 44 08 00       	push   0x84427
   236f0:	68 ea 95 12 00       	push   0x1295ea
   236f5:	e8 b5 40 00 00       	call   277af <sprintf>
   236fa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:202
			break;
   236fd:	eb 16                	jmp    23715 <do_intel+0x319>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:204
			case 4:
			sprintf(kcpuInfo.model_name,"MMX");
   236ff:	83 ec 08             	sub    esp,0x8
   23702:	68 36 44 08 00       	push   0x84436
   23707:	68 ea 95 12 00       	push   0x1295ea
   2370c:	e8 9e 40 00 00       	call   277af <sprintf>
   23711:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:205
			break;
   23714:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:207
		}
		break;
   23715:	e9 a6 00 00 00       	jmp    237c0 <do_intel+0x3c4>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:209
		case 6:
		switch(kcpuInfo.model) {
   2371a:	a1 a4 95 12 00       	mov    eax,ds:0x1295a4
   2371f:	83 f8 08             	cmp    eax,0x8
   23722:	0f 87 97 00 00 00    	ja     237bf <do_intel+0x3c3>
   23728:	8b 04 85 78 45 08 00 	mov    eax,DWORD PTR [eax*4+0x84578]
   2372f:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:211
			case 1:
			sprintf(kcpuInfo.model_name,"Pentium Pro");
   23731:	83 ec 08             	sub    esp,0x8
   23734:	68 d3 43 08 00       	push   0x843d3
   23739:	68 ea 95 12 00       	push   0x1295ea
   2373e:	e8 6c 40 00 00       	call   277af <sprintf>
   23743:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:212
			break;
   23746:	eb 72                	jmp    237ba <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:214
			case 3:
			sprintf(kcpuInfo.model_name,"Pentium II Model 3");
   23748:	83 ec 08             	sub    esp,0x8
   2374b:	68 3a 44 08 00       	push   0x8443a
   23750:	68 ea 95 12 00       	push   0x1295ea
   23755:	e8 55 40 00 00       	call   277af <sprintf>
   2375a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:215
			break;
   2375d:	eb 5b                	jmp    237ba <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:217
			case 5:
			sprintf(kcpuInfo.model_name,"Pentium II Model 5/Xeon/Celeron");
   2375f:	83 ec 08             	sub    esp,0x8
   23762:	68 50 44 08 00       	push   0x84450
   23767:	68 ea 95 12 00       	push   0x1295ea
   2376c:	e8 3e 40 00 00       	call   277af <sprintf>
   23771:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:218
			break;
   23774:	eb 44                	jmp    237ba <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:220
			case 6:
			sprintf(kcpuInfo.model_name,"Celeron");
   23776:	83 ec 08             	sub    esp,0x8
   23779:	68 70 44 08 00       	push   0x84470
   2377e:	68 ea 95 12 00       	push   0x1295ea
   23783:	e8 27 40 00 00       	call   277af <sprintf>
   23788:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:221
			break;
   2378b:	eb 2d                	jmp    237ba <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:223
			case 7:
			sprintf(kcpuInfo.model_name,"Pentium III/Pentium III Xeon - external L2 cache");
   2378d:	83 ec 08             	sub    esp,0x8
   23790:	68 78 44 08 00       	push   0x84478
   23795:	68 ea 95 12 00       	push   0x1295ea
   2379a:	e8 10 40 00 00       	call   277af <sprintf>
   2379f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:224
			break;
   237a2:	eb 16                	jmp    237ba <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:226
			case 8:
			sprintf(kcpuInfo.model_name,"Pentium III/Pentium III Xeon - internal L2 cache");
   237a4:	83 ec 08             	sub    esp,0x8
   237a7:	68 ac 44 08 00       	push   0x844ac
   237ac:	68 ea 95 12 00       	push   0x1295ea
   237b1:	e8 f9 3f 00 00       	call   277af <sprintf>
   237b6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:227
			break;
   237b9:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:229
		}
		break;
   237ba:	eb 03                	jmp    237bf <do_intel+0x3c3>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:191
			break;
			case 8:
			sprintf(kcpuInfo.model_name,"DX4");
			break;
		}
		break;
   237bc:	90                   	nop
   237bd:	eb 01                	jmp    237c0 <do_intel+0x3c4>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:229
			break;
			case 8:
			sprintf(kcpuInfo.model_name,"Pentium III/Pentium III Xeon - internal L2 cache");
			break;
		}
		break;
   237bf:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:233
		case 15:
		break;
	}
	__get_cpuid(0x80000000, &max_eax, &unused, &unused, &unused);
   237c0:	83 ec 0c             	sub    esp,0xc
   237c3:	8d 45 dc             	lea    eax,[ebp-0x24]
   237c6:	50                   	push   eax
   237c7:	8d 45 dc             	lea    eax,[ebp-0x24]
   237ca:	50                   	push   eax
   237cb:	8d 45 dc             	lea    eax,[ebp-0x24]
   237ce:	50                   	push   eax
   237cf:	8d 45 e0             	lea    eax,[ebp-0x20]
   237d2:	50                   	push   eax
   237d3:	68 00 00 00 80       	push   0x80000000
   237d8:	e8 6e fb ff ff       	call   2334b <__get_cpuid>
   237dd:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:239
	/* Quok said: If the max extended eax value is high enough to support the processor brand string
	(values 0x80000002 to 0x80000004), then we'll use that information to return the brand information. 
	Otherwise, we'll refer back to the brand tables above for backwards compatibility with older processors. 
	According to the Sept. 2006 Intel Arch Software Developer's Guide, if extended eax values are supported, 
	then all 3 values for the processor brand string are supported, but we'll test just to make sure and be safe. */
	if(max_eax >= 0x80000004) {
   237e0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   237e3:	3d 03 00 00 80       	cmp    eax,0x80000003
   237e8:	0f 86 e1 00 00 00    	jbe    238cf <do_intel+0x4d3>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:240
		if(max_eax >= 0x80000002) {
   237ee:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   237f1:	3d 01 00 00 80       	cmp    eax,0x80000001
   237f6:	76 3e                	jbe    23836 <do_intel+0x43a>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:241
			__get_cpuid(0x80000002, &eax, &ebx, &ecx, &edx);
   237f8:	83 ec 0c             	sub    esp,0xc
   237fb:	8d 45 e4             	lea    eax,[ebp-0x1c]
   237fe:	50                   	push   eax
   237ff:	8d 45 e8             	lea    eax,[ebp-0x18]
   23802:	50                   	push   eax
   23803:	8d 45 ec             	lea    eax,[ebp-0x14]
   23806:	50                   	push   eax
   23807:	8d 45 f0             	lea    eax,[ebp-0x10]
   2380a:	50                   	push   eax
   2380b:	68 02 00 00 80       	push   0x80000002
   23810:	e8 36 fb ff ff       	call   2334b <__get_cpuid>
   23815:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:242
			printregs(eax, ebx, ecx, edx);
   23818:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   2381b:	89 c3                	mov    ebx,eax
   2381d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   23820:	89 c1                	mov    ecx,eax
   23822:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23825:	89 c2                	mov    edx,eax
   23827:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2382a:	53                   	push   ebx
   2382b:	51                   	push   ecx
   2382c:	52                   	push   edx
   2382d:	50                   	push   eax
   2382e:	e8 28 01 00 00       	call   2395b <printregs>
   23833:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:244
		}
		if(max_eax >= 0x80000003) {
   23836:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23839:	3d 02 00 00 80       	cmp    eax,0x80000002
   2383e:	76 3e                	jbe    2387e <do_intel+0x482>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:245
			__get_cpuid(0x80000003, &eax, &ebx, &ecx, &edx);
   23840:	83 ec 0c             	sub    esp,0xc
   23843:	8d 45 e4             	lea    eax,[ebp-0x1c]
   23846:	50                   	push   eax
   23847:	8d 45 e8             	lea    eax,[ebp-0x18]
   2384a:	50                   	push   eax
   2384b:	8d 45 ec             	lea    eax,[ebp-0x14]
   2384e:	50                   	push   eax
   2384f:	8d 45 f0             	lea    eax,[ebp-0x10]
   23852:	50                   	push   eax
   23853:	68 03 00 00 80       	push   0x80000003
   23858:	e8 ee fa ff ff       	call   2334b <__get_cpuid>
   2385d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:246
			printregs(eax, ebx, ecx, edx);
   23860:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   23863:	89 c3                	mov    ebx,eax
   23865:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   23868:	89 c1                	mov    ecx,eax
   2386a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2386d:	89 c2                	mov    edx,eax
   2386f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23872:	53                   	push   ebx
   23873:	51                   	push   ecx
   23874:	52                   	push   edx
   23875:	50                   	push   eax
   23876:	e8 e0 00 00 00       	call   2395b <printregs>
   2387b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:248
		}
		if(max_eax >= 0x80000004) {
   2387e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23881:	3d 03 00 00 80       	cmp    eax,0x80000003
   23886:	0f 86 c5 00 00 00    	jbe    23951 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:249
			__get_cpuid(0x80000004, &eax, &ebx, &ecx, &edx);
   2388c:	83 ec 0c             	sub    esp,0xc
   2388f:	8d 45 e4             	lea    eax,[ebp-0x1c]
   23892:	50                   	push   eax
   23893:	8d 45 e8             	lea    eax,[ebp-0x18]
   23896:	50                   	push   eax
   23897:	8d 45 ec             	lea    eax,[ebp-0x14]
   2389a:	50                   	push   eax
   2389b:	8d 45 f0             	lea    eax,[ebp-0x10]
   2389e:	50                   	push   eax
   2389f:	68 04 00 00 80       	push   0x80000004
   238a4:	e8 a2 fa ff ff       	call   2334b <__get_cpuid>
   238a9:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:250
			printregs(eax, ebx, ecx, edx);
   238ac:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   238af:	89 c3                	mov    ebx,eax
   238b1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   238b4:	89 c1                	mov    ecx,eax
   238b6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   238b9:	89 c2                	mov    edx,eax
   238bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   238be:	53                   	push   ebx
   238bf:	51                   	push   ecx
   238c0:	52                   	push   edx
   238c1:	50                   	push   eax
   238c2:	e8 94 00 00 00       	call   2395b <printregs>
   238c7:	83 c4 10             	add    esp,0x10
   238ca:	e9 82 00 00 00       	jmp    23951 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:252
		}
	} else if(kcpuInfo.brand > 0) {
   238cf:	a1 b0 95 12 00       	mov    eax,ds:0x1295b0
   238d4:	85 c0                	test   eax,eax
   238d6:	7e 79                	jle    23951 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:253
		if(kcpuInfo.brand < 0x18) {
   238d8:	a1 b0 95 12 00       	mov    eax,ds:0x1295b0
   238dd:	83 f8 17             	cmp    eax,0x17
   238e0:	7f 5a                	jg     2393c <do_intel+0x540>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:254
			if(signature == 0x000006B1 || signature == 0x00000F13) {
   238e2:	81 7d f4 b1 06 00 00 	cmp    DWORD PTR [ebp-0xc],0x6b1
   238e9:	74 09                	je     238f4 <do_intel+0x4f8>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:254 (discriminator 1)
   238eb:	81 7d f4 13 0f 00 00 	cmp    DWORD PTR [ebp-0xc],0xf13
   238f2:	75 24                	jne    23918 <do_intel+0x51c>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:255
				sprintf(kcpuInfo.brand_name,"%s\n", Intel_Other[kcpuInfo.brand]);
   238f4:	a1 b0 95 12 00       	mov    eax,ds:0x1295b0
   238f9:	8b 04 85 40 e2 02 00 	mov    eax,DWORD PTR [eax*4+0x2e240]
   23900:	83 ec 04             	sub    esp,0x4
   23903:	50                   	push   eax
   23904:	68 dd 44 08 00       	push   0x844dd
   23909:	68 b2 96 12 00       	push   0x1296b2
   2390e:	e8 9c 3e 00 00       	call   277af <sprintf>
   23913:	83 c4 10             	add    esp,0x10
   23916:	eb 39                	jmp    23951 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:257
			} else {
				sprintf(kcpuInfo.brand_name, "%s\n", Intel[kcpuInfo.brand]);
   23918:	a1 b0 95 12 00       	mov    eax,ds:0x1295b0
   2391d:	8b 04 85 e0 e1 02 00 	mov    eax,DWORD PTR [eax*4+0x2e1e0]
   23924:	83 ec 04             	sub    esp,0x4
   23927:	50                   	push   eax
   23928:	68 dd 44 08 00       	push   0x844dd
   2392d:	68 b2 96 12 00       	push   0x1296b2
   23932:	e8 78 3e 00 00       	call   277af <sprintf>
   23937:	83 c4 10             	add    esp,0x10
   2393a:	eb 15                	jmp    23951 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:260
			}
		} else {
			sprintf(kcpuInfo.brand_name, "Reserved\n");
   2393c:	83 ec 08             	sub    esp,0x8
   2393f:	68 e1 44 08 00       	push   0x844e1
   23944:	68 b2 96 12 00       	push   0x1296b2
   23949:	e8 61 3e 00 00       	call   277af <sprintf>
   2394e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:263
		}
	}
	return 0;
   23951:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:264
}
   23956:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   23959:	c9                   	leave  
   2395a:	c3                   	ret    

0002395b <printregs>:
printregs():
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:267

/* Print Registers */
void HIGH_CODE_SECTION printregs(int eax, int ebx, int ecx, int edx) {
   2395b:	55                   	push   ebp
   2395c:	89 e5                	mov    ebp,esp
   2395e:	53                   	push   ebx
   2395f:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:270
	int j;
	char string[17];
	string[16] = '\0';
   23962:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:271
	for(j = 0; j < 4; j++) {
   23966:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   2396d:	eb 6a                	jmp    239d9 <printregs+0x7e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:272 (discriminator 3)
		string[j] = eax >> (8 * j);
   2396f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   23972:	c1 e0 03             	shl    eax,0x3
   23975:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   23978:	89 c1                	mov    ecx,eax
   2397a:	d3 fa                	sar    edx,cl
   2397c:	89 d0                	mov    eax,edx
   2397e:	89 c1                	mov    ecx,eax
   23980:	8d 55 e3             	lea    edx,[ebp-0x1d]
   23983:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   23986:	01 d0                	add    eax,edx
   23988:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:273 (discriminator 3)
		string[j + 4] = ebx >> (8 * j);
   2398a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2398d:	83 c0 04             	add    eax,0x4
   23990:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23993:	c1 e2 03             	shl    edx,0x3
   23996:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
   23999:	89 d1                	mov    ecx,edx
   2399b:	d3 fb                	sar    ebx,cl
   2399d:	89 da                	mov    edx,ebx
   2399f:	88 54 05 e3          	mov    BYTE PTR [ebp+eax*1-0x1d],dl
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:274 (discriminator 3)
		string[j + 8] = ecx >> (8 * j);
   239a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   239a6:	83 c0 08             	add    eax,0x8
   239a9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   239ac:	c1 e2 03             	shl    edx,0x3
   239af:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
   239b2:	89 d1                	mov    ecx,edx
   239b4:	d3 fb                	sar    ebx,cl
   239b6:	89 da                	mov    edx,ebx
   239b8:	88 54 05 e3          	mov    BYTE PTR [ebp+eax*1-0x1d],dl
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:275 (discriminator 3)
		string[j + 12] = edx >> (8 * j);
   239bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   239bf:	83 c0 0c             	add    eax,0xc
   239c2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   239c5:	c1 e2 03             	shl    edx,0x3
   239c8:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
   239cb:	89 d1                	mov    ecx,edx
   239cd:	d3 fb                	sar    ebx,cl
   239cf:	89 da                	mov    edx,ebx
   239d1:	88 54 05 e3          	mov    BYTE PTR [ebp+eax*1-0x1d],dl
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:271 (discriminator 3)
/* Print Registers */
void HIGH_CODE_SECTION printregs(int eax, int ebx, int ecx, int edx) {
	int j;
	char string[17];
	string[16] = '\0';
	for(j = 0; j < 4; j++) {
   239d5:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:271 (discriminator 1)
   239d9:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
   239dd:	7e 90                	jle    2396f <printregs+0x14>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:277
		string[j] = eax >> (8 * j);
		string[j + 4] = ebx >> (8 * j);
		string[j + 8] = ecx >> (8 * j);
		string[j + 12] = edx >> (8 * j);
	}
	sprintf(kcpuInfo.brand_name, "%s%s", kcpuInfo.brand_name, string);
   239df:	8d 45 e3             	lea    eax,[ebp-0x1d]
   239e2:	50                   	push   eax
   239e3:	68 b2 96 12 00       	push   0x1296b2
   239e8:	68 9c 45 08 00       	push   0x8459c
   239ed:	68 b2 96 12 00       	push   0x1296b2
   239f2:	e8 b8 3d 00 00       	call   277af <sprintf>
   239f7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:278
}
   239fa:	90                   	nop
   239fb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   239fe:	c9                   	leave  
   239ff:	c3                   	ret    

00023a00 <do_amd>:
do_amd():
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:281

/* AMD-specific information */
int HIGH_CODE_SECTION do_amd(void) {
   23a00:	55                   	push   ebp
   23a01:	89 e5                	mov    ebp,esp
   23a03:	53                   	push   ebx
   23a04:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:283
	//printf("AMD Specific Features:\n");
	unsigned int extended=0, eax=0, ebx=0, ecx=0, edx=0, unused=0;
   23a07:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   23a0e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   23a15:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   23a1c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   23a23:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   23a2a:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:284
	__get_cpuid(1, &eax, &unused, &unused, &unused);
   23a31:	8d 45 dc             	lea    eax,[ebp-0x24]
   23a34:	50                   	push   eax
   23a35:	8d 45 dc             	lea    eax,[ebp-0x24]
   23a38:	50                   	push   eax
   23a39:	8d 45 dc             	lea    eax,[ebp-0x24]
   23a3c:	50                   	push   eax
   23a3d:	8d 45 ec             	lea    eax,[ebp-0x14]
   23a40:	50                   	push   eax
   23a41:	6a 01                	push   0x1
   23a43:	e8 03 f9 ff ff       	call   2334b <__get_cpuid>
   23a48:	83 c4 14             	add    esp,0x14
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:285
	kcpuInfo.model = (eax >> 4) & 0xf;
   23a4b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23a4e:	c1 e8 04             	shr    eax,0x4
   23a51:	83 e0 0f             	and    eax,0xf
   23a54:	a3 a4 95 12 00       	mov    ds:0x1295a4,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:286
	kcpuInfo.family = (eax >> 8) & 0xf;
   23a59:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23a5c:	c1 e8 08             	shr    eax,0x8
   23a5f:	83 e0 0f             	and    eax,0xf
   23a62:	a3 a0 95 12 00       	mov    ds:0x1295a0,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:287
	kcpuInfo.stepping = eax & 0xf;
   23a67:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23a6a:	83 e0 0f             	and    eax,0xf
   23a6d:	a3 a8 95 12 00       	mov    ds:0x1295a8,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:289
	//reserved = eax >> 12;
	sprintf(kcpuInfo.vendor, "AMD");
   23a72:	83 ec 08             	sub    esp,0x8
   23a75:	68 a1 45 08 00       	push   0x845a1
   23a7a:	68 b8 95 12 00       	push   0x1295b8
   23a7f:	e8 2b 3d 00 00       	call   277af <sprintf>
   23a84:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:290
	switch(kcpuInfo.family) 
   23a87:	a1 a0 95 12 00       	mov    eax,ds:0x1295a0
   23a8c:	83 f8 05             	cmp    eax,0x5
   23a8f:	74 46                	je     23ad7 <do_amd+0xd7>
   23a91:	83 f8 05             	cmp    eax,0x5
   23a94:	7f 0a                	jg     23aa0 <do_amd+0xa0>
   23a96:	83 f8 04             	cmp    eax,0x4
   23a99:	74 1c                	je     23ab7 <do_amd+0xb7>
   23a9b:	e9 a1 01 00 00       	jmp    23c41 <do_amd+0x241>
   23aa0:	83 f8 06             	cmp    eax,0x6
   23aa3:	0f 84 ad 00 00 00    	je     23b56 <do_amd+0x156>
   23aa9:	83 f8 0f             	cmp    eax,0xf
   23aac:	0f 84 37 01 00 00    	je     23be9 <do_amd+0x1e9>
   23ab2:	e9 8a 01 00 00       	jmp    23c41 <do_amd+0x241>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:293
        {
		case 4:
		sprintf(kcpuInfo.model_name, "486 Model %d", kcpuInfo.model);
   23ab7:	a1 a4 95 12 00       	mov    eax,ds:0x1295a4
   23abc:	83 ec 04             	sub    esp,0x4
   23abf:	50                   	push   eax
   23ac0:	68 a5 45 08 00       	push   0x845a5
   23ac5:	68 ea 95 12 00       	push   0x1295ea
   23aca:	e8 e0 3c 00 00       	call   277af <sprintf>
   23acf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:294
		break;
   23ad2:	e9 6a 01 00 00       	jmp    23c41 <do_amd+0x241>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:296
		case 5:
		switch(kcpuInfo.model) {
   23ad7:	a1 a4 95 12 00       	mov    eax,ds:0x1295a4
   23adc:	83 f8 09             	cmp    eax,0x9
   23adf:	77 54                	ja     23b35 <do_amd+0x135>
   23ae1:	8b 04 85 fc 46 08 00 	mov    eax,DWORD PTR [eax*4+0x846fc]
   23ae8:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:304
			case 2:
			case 3:
			case 6:
			case 7:
			
                            sprintf(kcpuInfo.model_name, "K6 Model %d", kcpuInfo.model);
   23aea:	a1 a4 95 12 00       	mov    eax,ds:0x1295a4
   23aef:	83 ec 04             	sub    esp,0x4
   23af2:	50                   	push   eax
   23af3:	68 b2 45 08 00       	push   0x845b2
   23af8:	68 ea 95 12 00       	push   0x1295ea
   23afd:	e8 ad 3c 00 00       	call   277af <sprintf>
   23b02:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:305
			break;
   23b05:	eb 4a                	jmp    23b51 <do_amd+0x151>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:307
			case 8:
			sprintf(kcpuInfo.model_name, "K6-2 Model 8");
   23b07:	83 ec 08             	sub    esp,0x8
   23b0a:	68 be 45 08 00       	push   0x845be
   23b0f:	68 ea 95 12 00       	push   0x1295ea
   23b14:	e8 96 3c 00 00       	call   277af <sprintf>
   23b19:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:308
			break;
   23b1c:	eb 33                	jmp    23b51 <do_amd+0x151>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:310
			case 9:
			sprintf(kcpuInfo.model_name, "K6-III Model 9");
   23b1e:	83 ec 08             	sub    esp,0x8
   23b21:	68 cb 45 08 00       	push   0x845cb
   23b26:	68 ea 95 12 00       	push   0x1295ea
   23b2b:	e8 7f 3c 00 00       	call   277af <sprintf>
   23b30:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:311
			break;
   23b33:	eb 1c                	jmp    23b51 <do_amd+0x151>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:313
			default:
			sprintf(kcpuInfo.model_name, "K5/K6 Model %d", kcpuInfo.model);
   23b35:	a1 a4 95 12 00       	mov    eax,ds:0x1295a4
   23b3a:	83 ec 04             	sub    esp,0x4
   23b3d:	50                   	push   eax
   23b3e:	68 da 45 08 00       	push   0x845da
   23b43:	68 ea 95 12 00       	push   0x1295ea
   23b48:	e8 62 3c 00 00       	call   277af <sprintf>
   23b4d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:314
			break;
   23b50:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:316
		}
		break;
   23b51:	e9 eb 00 00 00       	jmp    23c41 <do_amd+0x241>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:318
		case 6:
		switch(kcpuInfo.model) {
   23b56:	a1 a4 95 12 00       	mov    eax,ds:0x1295a4
   23b5b:	83 f8 07             	cmp    eax,0x7
   23b5e:	77 6b                	ja     23bcb <do_amd+0x1cb>
   23b60:	8b 04 85 24 47 08 00 	mov    eax,DWORD PTR [eax*4+0x84724]
   23b67:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:322
			case 1:
			case 2:
			case 4:
			sprintf(kcpuInfo.model_name, "Athlon Model %d", kcpuInfo.model);
   23b69:	a1 a4 95 12 00       	mov    eax,ds:0x1295a4
   23b6e:	83 ec 04             	sub    esp,0x4
   23b71:	50                   	push   eax
   23b72:	68 e9 45 08 00       	push   0x845e9
   23b77:	68 ea 95 12 00       	push   0x1295ea
   23b7c:	e8 2e 3c 00 00       	call   277af <sprintf>
   23b81:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:323
			break;
   23b84:	eb 61                	jmp    23be7 <do_amd+0x1e7>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:325
			case 3:
			sprintf(kcpuInfo.model_name, "Duron Model 3");
   23b86:	83 ec 08             	sub    esp,0x8
   23b89:	68 f9 45 08 00       	push   0x845f9
   23b8e:	68 ea 95 12 00       	push   0x1295ea
   23b93:	e8 17 3c 00 00       	call   277af <sprintf>
   23b98:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:326
			break;
   23b9b:	eb 4a                	jmp    23be7 <do_amd+0x1e7>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:328
			case 6:
			sprintf(kcpuInfo.model_name, "Athlon MP/Mobile Athlon Model 6");
   23b9d:	83 ec 08             	sub    esp,0x8
   23ba0:	68 08 46 08 00       	push   0x84608
   23ba5:	68 ea 95 12 00       	push   0x1295ea
   23baa:	e8 00 3c 00 00       	call   277af <sprintf>
   23baf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:329
			break;
   23bb2:	eb 33                	jmp    23be7 <do_amd+0x1e7>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:331
			case 7:
			sprintf(kcpuInfo.model_name, "Mobile Duron Model 7");
   23bb4:	83 ec 08             	sub    esp,0x8
   23bb7:	68 28 46 08 00       	push   0x84628
   23bbc:	68 ea 95 12 00       	push   0x1295ea
   23bc1:	e8 e9 3b 00 00       	call   277af <sprintf>
   23bc6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:332
			break;
   23bc9:	eb 1c                	jmp    23be7 <do_amd+0x1e7>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:334
			default:
			sprintf(kcpuInfo.model_name, "Duron/Athlon Model %d", kcpuInfo.model);
   23bcb:	a1 a4 95 12 00       	mov    eax,ds:0x1295a4
   23bd0:	83 ec 04             	sub    esp,0x4
   23bd3:	50                   	push   eax
   23bd4:	68 3d 46 08 00       	push   0x8463d
   23bd9:	68 ea 95 12 00       	push   0x1295ea
   23bde:	e8 cc 3b 00 00       	call   277af <sprintf>
   23be3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:335
			break;
   23be6:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:337
		}
		break;
   23be7:	eb 58                	jmp    23c41 <do_amd+0x241>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:339
                case 15:
                    switch(kcpuInfo.model)
   23be9:	a1 a4 95 12 00       	mov    eax,ds:0x1295a4
   23bee:	83 f8 1e             	cmp    eax,0x1e
   23bf1:	77 4d                	ja     23c40 <do_amd+0x240>
   23bf3:	8b 04 85 44 47 08 00 	mov    eax,DWORD PTR [eax*4+0x84744]
   23bfa:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:343
                    {
                        case 1:
                        case 2:
                            sprintf(kcpuInfo.model_name, "FX Series/Opertron (Piledriver)");
   23bfc:	83 ec 08             	sub    esp,0x8
   23bff:	68 54 46 08 00       	push   0x84654
   23c04:	68 ea 95 12 00       	push   0x1295ea
   23c09:	e8 a1 3b 00 00       	call   277af <sprintf>
   23c0e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:344
                            break;
   23c11:	eb 2d                	jmp    23c40 <do_amd+0x240>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:347
                        case 10:
                        case 13:
                            sprintf(kcpuInfo.model_name, "A/R-Series/Athlon/Semperon/Firepro (Piledriver)");
   23c13:	83 ec 08             	sub    esp,0x8
   23c16:	68 74 46 08 00       	push   0x84674
   23c1b:	68 ea 95 12 00       	push   0x1295ea
   23c20:	e8 8a 3b 00 00       	call   277af <sprintf>
   23c25:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:348
                            break;
   23c28:	eb 16                	jmp    23c40 <do_amd+0x240>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:350
                        case 30:
                            sprintf(kcpuInfo.model_name, "Elite A-Series/R-Series/Opertron (SteamRoller)");
   23c2a:	83 ec 08             	sub    esp,0x8
   23c2d:	68 a4 46 08 00       	push   0x846a4
   23c32:	68 ea 95 12 00       	push   0x1295ea
   23c37:	e8 73 3b 00 00       	call   277af <sprintf>
   23c3c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:351
                            break;
   23c3f:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:353
                    }
                    break;
   23c40:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:355
	}
	__get_cpuid(0x80000000, &extended, &unused, &unused, &unused);
   23c41:	83 ec 0c             	sub    esp,0xc
   23c44:	8d 45 dc             	lea    eax,[ebp-0x24]
   23c47:	50                   	push   eax
   23c48:	8d 45 dc             	lea    eax,[ebp-0x24]
   23c4b:	50                   	push   eax
   23c4c:	8d 45 dc             	lea    eax,[ebp-0x24]
   23c4f:	50                   	push   eax
   23c50:	8d 45 f0             	lea    eax,[ebp-0x10]
   23c53:	50                   	push   eax
   23c54:	68 00 00 00 80       	push   0x80000000
   23c59:	e8 ed f6 ff ff       	call   2334b <__get_cpuid>
   23c5e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:356
	if(extended == 0) {
   23c61:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23c64:	85 c0                	test   eax,eax
   23c66:	75 0a                	jne    23c72 <do_amd+0x272>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:357
		return 0;
   23c68:	b8 00 00 00 00       	mov    eax,0x0
   23c6d:	e9 a5 00 00 00       	jmp    23d17 <do_amd+0x317>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:359
	}
	if(extended >= 0x80000002) {
   23c72:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23c75:	3d 01 00 00 80       	cmp    eax,0x80000001
   23c7a:	76 52                	jbe    23cce <do_amd+0x2ce>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:361
		unsigned int j;
		for(j = 0x80000002; j <= 0x80000004; j++) {
   23c7c:	c7 45 f4 02 00 00 80 	mov    DWORD PTR [ebp-0xc],0x80000002
   23c83:	eb 40                	jmp    23cc5 <do_amd+0x2c5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:362 (discriminator 3)
			__get_cpuid(j, &eax, &ebx, &ecx, &edx);
   23c85:	83 ec 0c             	sub    esp,0xc
   23c88:	8d 45 e0             	lea    eax,[ebp-0x20]
   23c8b:	50                   	push   eax
   23c8c:	8d 45 e4             	lea    eax,[ebp-0x1c]
   23c8f:	50                   	push   eax
   23c90:	8d 45 e8             	lea    eax,[ebp-0x18]
   23c93:	50                   	push   eax
   23c94:	8d 45 ec             	lea    eax,[ebp-0x14]
   23c97:	50                   	push   eax
   23c98:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   23c9b:	e8 ab f6 ff ff       	call   2334b <__get_cpuid>
   23ca0:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:363 (discriminator 3)
			printregs(eax, ebx, ecx, edx);
   23ca3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23ca6:	89 c3                	mov    ebx,eax
   23ca8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   23cab:	89 c1                	mov    ecx,eax
   23cad:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   23cb0:	89 c2                	mov    edx,eax
   23cb2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23cb5:	53                   	push   ebx
   23cb6:	51                   	push   ecx
   23cb7:	52                   	push   edx
   23cb8:	50                   	push   eax
   23cb9:	e8 9d fc ff ff       	call   2395b <printregs>
   23cbe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:361 (discriminator 3)
	if(extended == 0) {
		return 0;
	}
	if(extended >= 0x80000002) {
		unsigned int j;
		for(j = 0x80000002; j <= 0x80000004; j++) {
   23cc1:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:361 (discriminator 1)
   23cc5:	81 7d f4 04 00 00 80 	cmp    DWORD PTR [ebp-0xc],0x80000004
   23ccc:	76 b7                	jbe    23c85 <do_amd+0x285>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:366
			__get_cpuid(j, &eax, &ebx, &ecx, &edx);
			printregs(eax, ebx, ecx, edx);
		}
	}
	if(extended >= 0x80000007) {
   23cce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23cd1:	3d 06 00 00 80       	cmp    eax,0x80000006
   23cd6:	76 3a                	jbe    23d12 <do_amd+0x312>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:367
		__get_cpuid(0x80000007, &unused, &unused, &unused, &edx);
   23cd8:	83 ec 0c             	sub    esp,0xc
   23cdb:	8d 45 e0             	lea    eax,[ebp-0x20]
   23cde:	50                   	push   eax
   23cdf:	8d 45 dc             	lea    eax,[ebp-0x24]
   23ce2:	50                   	push   eax
   23ce3:	8d 45 dc             	lea    eax,[ebp-0x24]
   23ce6:	50                   	push   eax
   23ce7:	8d 45 dc             	lea    eax,[ebp-0x24]
   23cea:	50                   	push   eax
   23ceb:	68 07 00 00 80       	push   0x80000007
   23cf0:	e8 56 f6 ff ff       	call   2334b <__get_cpuid>
   23cf5:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:368
		if(edx & 1) {
   23cf8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23cfb:	83 e0 01             	and    eax,0x1
   23cfe:	85 c0                	test   eax,eax
   23d00:	74 10                	je     23d12 <do_amd+0x312>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:369
			printk("Temperature Sensing Diode Detected!\n");
   23d02:	83 ec 0c             	sub    esp,0xc
   23d05:	68 d4 46 08 00       	push   0x846d4
   23d0a:	e8 4c 3a 00 00       	call   2775b <printk>
   23d0f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:372
		}
	}
	return 0;
   23d12:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:373 (discriminator 1)
}
   23d17:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   23d1a:	c9                   	leave  
   23d1b:	c3                   	ret    

00023d1c <print_e820_entry>:
print_e820_entry():
/home/yogi/src/os/chrisOS/src/init/e820.c:10

extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
   23d1c:	55                   	push   ebp
   23d1d:	89 e5                	mov    ebp,esp
   23d1f:	53                   	push   ebx
   23d20:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOS/src/init/e820.c:13
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
                                            buffer.Type==1?"Usable":buffer.Type==2?"Rsvd(2)":buffer.Type==3?"Rclm":buffer.Type==4?"NVS":"Rsvd");
   23d23:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
/home/yogi/src/os/chrisOS/src/init/e820.c:11
extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
   23d26:	83 f8 01             	cmp    eax,0x1
   23d29:	74 34                	je     23d5f <print_e820_entry+0x43>
/home/yogi/src/os/chrisOS/src/init/e820.c:13
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
                                            buffer.Type==1?"Usable":buffer.Type==2?"Rsvd(2)":buffer.Type==3?"Rclm":buffer.Type==4?"NVS":"Rsvd");
   23d2b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   23d2e:	83 f8 02             	cmp    eax,0x2
   23d31:	74 25                	je     23d58 <print_e820_entry+0x3c>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 1)
   23d33:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   23d36:	83 f8 03             	cmp    eax,0x3
   23d39:	74 16                	je     23d51 <print_e820_entry+0x35>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 3)
   23d3b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   23d3e:	83 f8 04             	cmp    eax,0x4
   23d41:	75 07                	jne    23d4a <print_e820_entry+0x2e>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 5)
   23d43:	b8 c0 48 08 00       	mov    eax,0x848c0
   23d48:	eb 1a                	jmp    23d64 <print_e820_entry+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 6)
   23d4a:	b8 c4 48 08 00       	mov    eax,0x848c4
   23d4f:	eb 13                	jmp    23d64 <print_e820_entry+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 4)
   23d51:	b8 c9 48 08 00       	mov    eax,0x848c9
   23d56:	eb 0c                	jmp    23d64 <print_e820_entry+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 2)
   23d58:	b8 ce 48 08 00       	mov    eax,0x848ce
   23d5d:	eb 05                	jmp    23d64 <print_e820_entry+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:11 (discriminator 1)
extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
   23d5f:	b8 d6 48 08 00       	mov    eax,0x848d6
/home/yogi/src/os/chrisOS/src/init/e820.c:11 (discriminator 3)
   23d64:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
/home/yogi/src/os/chrisOS/src/init/e820.c:12 (discriminator 3)
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
   23d67:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   23d6a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23d6d:	01 da                	add    edx,ebx
/home/yogi/src/os/chrisOS/src/init/e820.c:11 (discriminator 3)
extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
   23d6f:	8d 5a ff             	lea    ebx,[edx-0x1]
   23d72:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   23d75:	83 ec 0c             	sub    esp,0xc
   23d78:	50                   	push   eax
   23d79:	51                   	push   ecx
   23d7a:	53                   	push   ebx
   23d7b:	52                   	push   edx
   23d7c:	68 dd 48 08 00       	push   0x848dd
   23d81:	e8 d5 39 00 00       	call   2775b <printk>
   23d86:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/e820.c:14 (discriminator 3)
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
                                            buffer.Type==1?"Usable":buffer.Type==2?"Rsvd(2)":buffer.Type==3?"Rclm":buffer.Type==4?"NVS":"Rsvd");
}
   23d89:	90                   	nop
   23d8a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   23d8d:	c9                   	leave  
   23d8e:	c3                   	ret    

00023d8f <printE820Map>:
printE820Map():
/home/yogi/src/os/chrisOS/src/init/e820.c:17

void printE820Map()
{
   23d8f:	55                   	push   ebp
   23d90:	89 e5                	mov    ebp,esp
   23d92:	53                   	push   ebx
   23d93:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/init/e820.c:18
    SMAP_entry* buffer=smap_table;
   23d96:	a1 80 95 12 00       	mov    eax,ds:0x129580
   23d9b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/e820.c:19
    int entryCount=kE820RecordCount;
   23d9e:	0f b7 05 90 95 12 00 	movzx  eax,WORD PTR ds:0x129590
   23da5:	98                   	cwde   
   23da6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/e820.c:20
    print_e820_map(smap_table, kE820RecordCount);
   23da9:	0f b7 05 90 95 12 00 	movzx  eax,WORD PTR ds:0x129590
   23db0:	0f bf d0             	movsx  edx,ax
   23db3:	a1 80 95 12 00       	mov    eax,ds:0x129580
   23db8:	83 ec 08             	sub    esp,0x8
   23dbb:	52                   	push   edx
   23dbc:	50                   	push   eax
   23dbd:	e8 b4 00 00 00       	call   23e76 <print_e820_map>
   23dc2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/e820.c:21
        for (int cnt=0;cnt<entryCount;cnt++)
   23dc5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   23dcc:	e9 93 00 00 00       	jmp    23e64 <printE820Map+0xd5>
/home/yogi/src/os/chrisOS/src/init/e820.c:23
        {
        print_e820_entry(buffer[cnt]);
   23dd1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23dd4:	89 d0                	mov    eax,edx
   23dd6:	01 c0                	add    eax,eax
   23dd8:	01 d0                	add    eax,edx
   23dda:	c1 e0 03             	shl    eax,0x3
   23ddd:	89 c2                	mov    edx,eax
   23ddf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23de2:	01 d0                	add    eax,edx
   23de4:	83 ec 08             	sub    esp,0x8
   23de7:	83 ec 18             	sub    esp,0x18
   23dea:	89 e2                	mov    edx,esp
   23dec:	8b 08                	mov    ecx,DWORD PTR [eax]
   23dee:	89 0a                	mov    DWORD PTR [edx],ecx
   23df0:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   23df3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   23df6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   23df9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   23dfc:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
   23dff:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
   23e02:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   23e05:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
   23e08:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   23e0b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
   23e0e:	e8 09 ff ff ff       	call   23d1c <print_e820_entry>
   23e13:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/e820.c:24
        cnt++;
   23e16:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/e820.c:25
        if (cnt>0 && ((cnt+2)%cursorGetMaxY())==0)
   23e1a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   23e1e:	7e 40                	jle    23e60 <printE820Map+0xd1>
/home/yogi/src/os/chrisOS/src/init/e820.c:25 (discriminator 1)
   23e20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   23e23:	8d 58 02             	lea    ebx,[eax+0x2]
   23e26:	e8 20 45 ff ff       	call   1834b <cursorGetMaxY>
   23e2b:	89 c1                	mov    ecx,eax
   23e2d:	89 d8                	mov    eax,ebx
   23e2f:	99                   	cdq    
   23e30:	f7 f9                	idiv   ecx
   23e32:	89 d0                	mov    eax,edx
   23e34:	85 c0                	test   eax,eax
   23e36:	75 28                	jne    23e60 <printE820Map+0xd1>
/home/yogi/src/os/chrisOS/src/init/e820.c:27
        {
            puts("Paused, press a key to continue");
   23e38:	83 ec 0c             	sub    esp,0xc
   23e3b:	68 fc 48 08 00       	push   0x848fc
   23e40:	e8 c5 45 ff ff       	call   1840a <puts>
   23e45:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/e820.c:28
            waitForKeyboardKey();
   23e48:	e8 12 d4 fe ff       	call   1125f <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/init/e820.c:29
            cursorMoveTo(0,cursorGetPosY());
   23e4d:	e8 29 45 ff ff       	call   1837b <cursorGetPosY>
   23e52:	83 ec 08             	sub    esp,0x8
   23e55:	50                   	push   eax
   23e56:	6a 00                	push   0x0
   23e58:	e8 7e 44 ff ff       	call   182db <cursorMoveTo>
   23e5d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/e820.c:21 (discriminator 2)
void printE820Map()
{
    SMAP_entry* buffer=smap_table;
    int entryCount=kE820RecordCount;
    print_e820_map(smap_table, kE820RecordCount);
        for (int cnt=0;cnt<entryCount;cnt++)
   23e60:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/e820.c:21 (discriminator 1)
   23e64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   23e67:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   23e6a:	0f 8c 61 ff ff ff    	jl     23dd1 <printE820Map+0x42>
/home/yogi/src/os/chrisOS/src/init/e820.c:32
            puts("Paused, press a key to continue");
            waitForKeyboardKey();
            cursorMoveTo(0,cursorGetPosY());
        }
        }
}
   23e70:	90                   	nop
   23e71:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   23e74:	c9                   	leave  
   23e75:	c3                   	ret    

00023e76 <print_e820_map>:
print_e820_map():
/home/yogi/src/os/chrisOS/src/init/e820.c:35

void print_e820_map(SMAP_entry* buffer, int entryCount)
{
   23e76:	55                   	push   ebp
   23e77:	89 e5                	mov    ebp,esp
   23e79:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/e820.c:36
    bool printOnlyUsable=entryCount>10?true:false;
   23e7c:	83 7d 0c 0a          	cmp    DWORD PTR [ebp+0xc],0xa
   23e80:	0f 9f c0             	setg   al
   23e83:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/chrisOS/src/init/e820.c:38
    
        for (int cnt=0;cnt<entryCount;cnt++)
   23e86:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   23e8d:	e9 bc 00 00 00       	jmp    23f4e <print_e820_map+0xd8>
/home/yogi/src/os/chrisOS/src/init/e820.c:40
        {
            if ((!printOnlyUsable) || (printOnlyUsable && buffer[cnt].Type==1))
   23e92:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   23e96:	83 f0 01             	xor    eax,0x1
   23e99:	84 c0                	test   al,al
   23e9b:	75 21                	jne    23ebe <print_e820_map+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:40 (discriminator 1)
   23e9d:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
   23ea1:	74 62                	je     23f05 <print_e820_map+0x8f>
/home/yogi/src/os/chrisOS/src/init/e820.c:40 (discriminator 2)
   23ea3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23ea6:	89 d0                	mov    eax,edx
   23ea8:	01 c0                	add    eax,eax
   23eaa:	01 d0                	add    eax,edx
   23eac:	c1 e0 03             	shl    eax,0x3
   23eaf:	89 c2                	mov    edx,eax
   23eb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23eb4:	01 d0                	add    eax,edx
   23eb6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   23eb9:	83 f8 01             	cmp    eax,0x1
   23ebc:	75 47                	jne    23f05 <print_e820_map+0x8f>
/home/yogi/src/os/chrisOS/src/init/e820.c:41
                print_e820_entry(buffer[cnt]);
   23ebe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23ec1:	89 d0                	mov    eax,edx
   23ec3:	01 c0                	add    eax,eax
   23ec5:	01 d0                	add    eax,edx
   23ec7:	c1 e0 03             	shl    eax,0x3
   23eca:	89 c2                	mov    edx,eax
   23ecc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23ecf:	01 d0                	add    eax,edx
   23ed1:	83 ec 08             	sub    esp,0x8
   23ed4:	83 ec 18             	sub    esp,0x18
   23ed7:	89 e2                	mov    edx,esp
   23ed9:	8b 08                	mov    ecx,DWORD PTR [eax]
   23edb:	89 0a                	mov    DWORD PTR [edx],ecx
   23edd:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   23ee0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   23ee3:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   23ee6:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   23ee9:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
   23eec:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
   23eef:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   23ef2:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
   23ef5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   23ef8:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
   23efb:	e8 1c fe ff ff       	call   23d1c <print_e820_entry>
   23f00:	83 c4 20             	add    esp,0x20
   23f03:	eb 45                	jmp    23f4a <print_e820_map+0xd4>
/home/yogi/src/os/chrisOS/src/init/e820.c:43
            else
                print_e820_entry(buffer[cnt]);
   23f05:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23f08:	89 d0                	mov    eax,edx
   23f0a:	01 c0                	add    eax,eax
   23f0c:	01 d0                	add    eax,edx
   23f0e:	c1 e0 03             	shl    eax,0x3
   23f11:	89 c2                	mov    edx,eax
   23f13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23f16:	01 d0                	add    eax,edx
   23f18:	83 ec 08             	sub    esp,0x8
   23f1b:	83 ec 18             	sub    esp,0x18
   23f1e:	89 e2                	mov    edx,esp
   23f20:	8b 08                	mov    ecx,DWORD PTR [eax]
   23f22:	89 0a                	mov    DWORD PTR [edx],ecx
   23f24:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   23f27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   23f2a:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   23f2d:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   23f30:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
   23f33:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
   23f36:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   23f39:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
   23f3c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   23f3f:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
   23f42:	e8 d5 fd ff ff       	call   23d1c <print_e820_entry>
   23f47:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/e820.c:38 (discriminator 2)

void print_e820_map(SMAP_entry* buffer, int entryCount)
{
    bool printOnlyUsable=entryCount>10?true:false;
    
        for (int cnt=0;cnt<entryCount;cnt++)
   23f4a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/e820.c:38 (discriminator 1)
   23f4e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   23f51:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   23f54:	0f 8c 38 ff ff ff    	jl     23e92 <print_e820_map+0x1c>
/home/yogi/src/os/chrisOS/src/init/e820.c:45
            if ((!printOnlyUsable) || (printOnlyUsable && buffer[cnt].Type==1))
                print_e820_entry(buffer[cnt]);
            else
                print_e820_entry(buffer[cnt]);
        }
}
   23f5a:	90                   	nop
   23f5b:	c9                   	leave  
   23f5c:	c3                   	ret    

00023f5d <sum_e820_usable_memory>:
sum_e820_usable_memory():
/home/yogi/src/os/chrisOS/src/init/e820.c:48

uint64_t sum_e820_usable_memory(SMAP_entry* buffer, int entryCount)
{
   23f5d:	55                   	push   ebp
   23f5e:	89 e5                	mov    ebp,esp
   23f60:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/e820.c:49
    qword lRetVal = 0;
   23f63:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/init/e820.c:51
    
    for (int cnt=0;cnt<entryCount;cnt++)
   23f6a:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   23f71:	eb 38                	jmp    23fab <sum_e820_usable_memory+0x4e>
/home/yogi/src/os/chrisOS/src/init/e820.c:53
    {
        if (buffer[cnt].Type==1)    
   23f73:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   23f76:	89 d0                	mov    eax,edx
   23f78:	01 c0                	add    eax,eax
   23f7a:	01 d0                	add    eax,edx
   23f7c:	c1 e0 03             	shl    eax,0x3
   23f7f:	89 c2                	mov    edx,eax
   23f81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23f84:	01 d0                	add    eax,edx
   23f86:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   23f89:	83 f8 01             	cmp    eax,0x1
   23f8c:	75 19                	jne    23fa7 <sum_e820_usable_memory+0x4a>
/home/yogi/src/os/chrisOS/src/init/e820.c:54
            lRetVal += buffer[cnt].LengthL;
   23f8e:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   23f91:	89 d0                	mov    eax,edx
   23f93:	01 c0                	add    eax,eax
   23f95:	01 d0                	add    eax,edx
   23f97:	c1 e0 03             	shl    eax,0x3
   23f9a:	89 c2                	mov    edx,eax
   23f9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23f9f:	01 d0                	add    eax,edx
   23fa1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   23fa4:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/e820.c:51 (discriminator 2)

uint64_t sum_e820_usable_memory(SMAP_entry* buffer, int entryCount)
{
    qword lRetVal = 0;
    
    for (int cnt=0;cnt<entryCount;cnt++)
   23fa7:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/init/e820.c:51 (discriminator 1)
   23fab:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   23fae:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   23fb1:	7c c0                	jl     23f73 <sum_e820_usable_memory+0x16>
/home/yogi/src/os/chrisOS/src/init/e820.c:56
    {
        if (buffer[cnt].Type==1)    
            lRetVal += buffer[cnt].LengthL;
    }
    return lRetVal;
   23fb3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   23fb6:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/init/e820.c:57
   23fbb:	c9                   	leave  
   23fbc:	c3                   	ret    
   23fbd:	66 90                	xchg   ax,ax
   23fbf:	90                   	nop

00023fc0 <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   23fc0:	55                   	push   ebp
   23fc1:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   23fc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23fc6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   23fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23fd0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   23fd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23fd6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:51
}
   23fd8:	90                   	nop
   23fd9:	5d                   	pop    ebp
   23fda:	c3                   	ret    

00023fdb <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   23fdb:	55                   	push   ebp
   23fdc:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   23fde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23fe1:	8b 00                	mov    eax,DWORD PTR [eax]
   23fe3:	85 c0                	test   eax,eax
   23fe5:	75 0d                	jne    23ff4 <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:61
        list->head = node->next;
   23fe7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23fea:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   23fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23ff0:	89 10                	mov    DWORD PTR [eax],edx
   23ff2:	eb 0e                	jmp    24002 <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:63
    else
        node->previous->next = node->next;
   23ff4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23ff7:	8b 00                	mov    eax,DWORD PTR [eax]
   23ff9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23ffc:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   23fff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:65

    if(!node->next)
   24002:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24005:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   24008:	85 c0                	test   eax,eax
   2400a:	75 0d                	jne    24019 <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:66
        list->tail = node->previous;
   2400c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2400f:	8b 10                	mov    edx,DWORD PTR [eax]
   24011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24014:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   24017:	eb 0d                	jmp    24026 <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   24019:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2401c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2401f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   24022:	8b 12                	mov    edx,DWORD PTR [edx]
   24024:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:69
}
   24026:	90                   	nop
   24027:	5d                   	pop    ebp
   24028:	c3                   	ret    

00024029 <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   24029:	55                   	push   ebp
   2402a:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   2402c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2402f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   24032:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:80
    new_node->next = node->next;
   24034:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24037:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   2403a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2403d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:81
    if (!node->next)
   24040:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24043:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   24046:	85 c0                	test   eax,eax
   24048:	75 0b                	jne    24055 <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:82
        list->tail = new_node;
   2404a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2404d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   24050:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   24053:	eb 0b                	jmp    24060 <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:84
    else
        node->next->previous = new_node;
   24055:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24058:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2405b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   2405e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:85
    node->next = new_node;
   24060:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24063:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   24066:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:86
}
   24069:	90                   	nop
   2406a:	5d                   	pop    ebp
   2406b:	c3                   	ret    

0002406c <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   2406c:	55                   	push   ebp
   2406d:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   2406f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24072:	8b 10                	mov    edx,DWORD PTR [eax]
   24074:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   24077:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:97
    new_node->next = node;
   24079:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2407c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   2407f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:98
    if (!node->previous)
   24082:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24085:	8b 00                	mov    eax,DWORD PTR [eax]
   24087:	85 c0                	test   eax,eax
   24089:	75 0a                	jne    24095 <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:99
        list->head = new_node;
   2408b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2408e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   24091:	89 10                	mov    DWORD PTR [eax],edx
   24093:	eb 0b                	jmp    240a0 <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:101
    else
        node->previous->next = new_node;
   24095:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24098:	8b 00                	mov    eax,DWORD PTR [eax]
   2409a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   2409d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:102
    node->previous = new_node;
   240a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   240a3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   240a6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:103
}
   240a8:	90                   	nop
   240a9:	5d                   	pop    ebp
   240aa:	c3                   	ret    

000240ab <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   240ab:	55                   	push   ebp
   240ac:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   240ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   240b1:	8b 00                	mov    eax,DWORD PTR [eax]
   240b3:	85 c0                	test   eax,eax
   240b5:	75 26                	jne    240dd <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:114
    {
        list->head = node;
   240b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   240ba:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   240bd:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:115
        list->tail = node;
   240bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   240c2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   240c5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:116
        node->previous = 0;
   240c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   240cb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:117
        node->next = 0;
   240d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   240d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   240db:	eb 14                	jmp    240f1 <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   240dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   240e0:	8b 00                	mov    eax,DWORD PTR [eax]
   240e2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   240e5:	50                   	push   eax
   240e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   240e9:	e8 7e ff ff ff       	call   2406c <fat_list_insert_before>
   240ee:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:121
}
   240f1:	90                   	nop
   240f2:	c9                   	leave  
   240f3:	c3                   	ret    

000240f4 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   240f4:	55                   	push   ebp
   240f5:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   240f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   240fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   240fd:	85 c0                	test   eax,eax
   240ff:	75 10                	jne    24111 <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:131
        fat_list_insert_first(list, node);
   24101:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   24104:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   24107:	e8 9f ff ff ff       	call   240ab <fat_list_insert_first>
   2410c:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   2410f:	eb 15                	jmp    24126 <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   24111:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24114:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   24117:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2411a:	50                   	push   eax
   2411b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2411e:	e8 06 ff ff ff       	call   24029 <fat_list_insert_after>
   24123:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:134
}
   24126:	90                   	nop
   24127:	c9                   	leave  
   24128:	c3                   	ret    

00024129 <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   24129:	55                   	push   ebp
   2412a:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   2412c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2412f:	8b 00                	mov    eax,DWORD PTR [eax]
   24131:	85 c0                	test   eax,eax
   24133:	0f 94 c0             	sete   al
   24136:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:143
}
   24139:	5d                   	pop    ebp
   2413a:	c3                   	ret    

0002413b <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   2413b:	55                   	push   ebp
   2413c:	89 e5                	mov    ebp,esp
   2413e:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   24141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24144:	8b 00                	mov    eax,DWORD PTR [eax]
   24146:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:154
    if (node)
   24149:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   2414d:	74 0e                	je     2415d <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:155
        fat_list_remove(list, node);
   2414f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   24152:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   24155:	e8 81 fe ff ff       	call   23fdb <fat_list_remove>
   2415a:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:157

    return node;
   2415d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:158
}
   24160:	c9                   	leave  
   24161:	c3                   	ret    

00024162 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   24162:	55                   	push   ebp
   24163:	89 e5                	mov    ebp,esp
   24165:	83 ec 08             	sub    esp,0x8
   24168:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2416b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2416e:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   24172:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   24175:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   24179:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   2417d:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   2417e:	90                   	nop
   2417f:	c9                   	leave  
   24180:	c3                   	ret    

00024181 <gdt_init>:
gdt_init():
/home/yogi/src/os/chrisOS/src/init/init.c:83
 3 (0x18) - data @ 0x0          <-- Non-kernel data (DS/ES/FS/GS/SS): Will always be 0x0
 4 (0x20) - code @ 0xC0000000   <-- will belong to the kernel proper
 5 (0x28) - code @ 0x0          <-- Non-kernel code (CS): Will always be 0x0
 */
void HIGH_CODE_SECTION gdt_init()
{
   24181:	55                   	push   ebp
   24182:	89 e5                	mov    ebp,esp
   24184:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/init.c:84
    gdtEntry(0x1, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,       //Kernel code segment starting at 0x00
   24187:	83 ec 08             	sub    esp,0x8
   2418a:	6a 01                	push   0x1
   2418c:	6a c0                	push   0xffffffc0
   2418e:	6a 88                	push   0xffffff88
   24190:	68 ff ff 0f 00       	push   0xfffff
   24195:	6a 00                	push   0x0
   24197:	6a 01                	push   0x1
   24199:	e8 74 4b ff ff       	call   18d12 <gdtEntry>
   2419e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:86
              GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(0x2, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE,       //Kernel data segment starting at 0x0
   241a1:	83 ec 08             	sub    esp,0x8
   241a4:	6a 01                	push   0x1
   241a6:	6a c0                	push   0xffffffc0
   241a8:	6a 82                	push   0xffffff82
   241aa:	68 ff ff 0f 00       	push   0xfffff
   241af:	6a 00                	push   0x0
   241b1:	6a 02                	push   0x2
   241b3:	e8 5a 4b ff ff       	call   18d12 <gdtEntry>
   241b8:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:88
              GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(0x3, 0, 0xFFFFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE,    //18 - kernel data segment starting at 0x0 ***Need to change this to KERNEL_PAGED_BASE_ADDRESS base
   241bb:	83 ec 08             	sub    esp,0x8
   241be:	6a 01                	push   0x1
   241c0:	6a c0                	push   0xffffffc0
   241c2:	6a 82                	push   0xffffff82
   241c4:	6a ff                	push   0xffffffff
   241c6:	6a 00                	push   0x0
   241c8:	6a 03                	push   0x3
   241ca:	e8 43 4b ff ff       	call   18d12 <gdtEntry>
   241cf:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:90
              GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(0x4, KERNEL_PAGED_BASE_ADDRESS , 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,  //20 - Kernel code segment (main) starting at 0xC0000000
   241d2:	83 ec 08             	sub    esp,0x8
   241d5:	6a 01                	push   0x1
   241d7:	6a c0                	push   0xffffffc0
   241d9:	6a 88                	push   0xffffff88
   241db:	68 ff ff 0f 00       	push   0xfffff
   241e0:	68 00 00 00 c0       	push   0xc0000000
   241e5:	6a 04                	push   0x4
   241e7:	e8 26 4b ff ff       	call   18d12 <gdtEntry>
   241ec:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:92
              GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(0x5, 0x0 , 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE | GDT_GROW_DOWN,       //kernel data segment starting at 0x0
   241ef:	83 ec 08             	sub    esp,0x8
   241f2:	6a 01                	push   0x1
   241f4:	6a c0                	push   0xffffffc0
   241f6:	6a 8c                	push   0xffffff8c
   241f8:	68 ff ff 0f 00       	push   0xfffff
   241fd:	6a 00                	push   0x0
   241ff:	6a 05                	push   0x5
   24201:	e8 0c 4b ff ff       	call   18d12 <gdtEntry>
   24206:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:95
              GDT_GRANULAR | GDT_32BIT,true);

    gdtEntry(0x6, 0, 0xFFFFFFFF, GDT_PRESENT | GDT_DPL3 | GDT_DATA | GDT_WRITABLE,    //30 (33) - user data segment starting at 0x0
   24209:	83 ec 08             	sub    esp,0x8
   2420c:	6a 01                	push   0x1
   2420e:	6a c0                	push   0xffffffc0
   24210:	6a e2                	push   0xffffffe2
   24212:	6a ff                	push   0xffffffff
   24214:	6a 00                	push   0x0
   24216:	6a 06                	push   0x6
   24218:	e8 f5 4a ff ff       	call   18d12 <gdtEntry>
   2421d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:98
              GDT_GRANULAR | GDT_32BIT,true);

    gdtEntry(0x7, 0 , 0xFFFFF, GDT_PRESENT | GDT_DPL3 | GDT_CODE | GDT_READABLE ,       //38 (3b) - user code segment starting at 0x0
   24220:	83 ec 08             	sub    esp,0x8
   24223:	6a 01                	push   0x1
   24225:	6a c0                	push   0xffffffc0
   24227:	6a e8                	push   0xffffffe8
   24229:	68 ff ff 0f 00       	push   0xfffff
   2422e:	6a 00                	push   0x0
   24230:	6a 07                	push   0x7
   24232:	e8 db 4a ff ff       	call   18d12 <gdtEntry>
   24237:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:101
              GDT_GRANULAR | GDT_32BIT,true);

    gdtEntry(0x8, 0x0 , 0xFFFFF, GDT_PRESENT | GDT_DPL3 | GDT_DATA | GDT_WRITABLE | GDT_GROW_DOWN,       //40 (43) - user stack segment starting at 0x0
   2423a:	83 ec 08             	sub    esp,0x8
   2423d:	6a 01                	push   0x1
   2423f:	6a c0                	push   0xffffffc0
   24241:	6a e6                	push   0xffffffe6
   24243:	68 ff ff 0f 00       	push   0xfffff
   24248:	6a 00                	push   0x0
   2424a:	6a 08                	push   0x8
   2424c:	e8 c1 4a ff ff       	call   18d12 <gdtEntry>
   24251:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:104
          GDT_GRANULAR | GDT_32BIT,true);

    gdtEntry(0x20, 0x0 , 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,  //100 - Kernel code segment will always start at 0
   24254:	83 ec 08             	sub    esp,0x8
   24257:	6a 01                	push   0x1
   24259:	6a c0                	push   0xffffffc0
   2425b:	6a 88                	push   0xffffff88
   2425d:	68 ff ff 0f 00       	push   0xfffff
   24262:	6a 00                	push   0x0
   24264:	6a 20                	push   0x20
   24266:	e8 a7 4a ff ff       	call   18d12 <gdtEntry>
   2426b:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:107
              GDT_GRANULAR | GDT_32BIT,true);

    gdtEntry(0x21, 0x0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE | GDT_GROW_DOWN,       //108 Kernel stack segment starting at 0x0
   2426e:	83 ec 08             	sub    esp,0x8
   24271:	6a 01                	push   0x1
   24273:	6a c0                	push   0xffffffc0
   24275:	6a 86                	push   0xffffff86
   24277:	68 ff ff 0f 00       	push   0xfffff
   2427c:	6a 00                	push   0x0
   2427e:	6a 21                	push   0x21
   24280:	e8 8d 4a ff ff       	call   18d12 <gdtEntry>
   24285:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:111
              GDT_GRANULAR | GDT_32BIT,true);
    
    
    gdtEntryRM(1, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,
   24288:	83 ec 0c             	sub    esp,0xc
   2428b:	68 80 00 00 00       	push   0x80
   24290:	68 88 00 00 00       	push   0x88
   24295:	68 ff ff 0f 00       	push   0xfffff
   2429a:	6a 00                	push   0x0
   2429c:	6a 01                	push   0x1
   2429e:	e8 42 4b ff ff       	call   18de5 <gdtEntryRM>
   242a3:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:113
              GDT_GRANULAR | GDT_16BIT);
    gdtEntryRM(2, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE,
   242a6:	83 ec 0c             	sub    esp,0xc
   242a9:	68 80 00 00 00       	push   0x80
   242ae:	68 82 00 00 00       	push   0x82
   242b3:	68 ff ff 0f 00       	push   0xfffff
   242b8:	6a 00                	push   0x0
   242ba:	6a 02                	push   0x2
   242bc:	e8 24 4b ff ff       	call   18de5 <gdtEntryRM>
   242c1:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:115
              GDT_GRANULAR | GDT_16BIT);
    gdtEntryRM(3, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_WRITABLE,
   242c4:	83 ec 0c             	sub    esp,0xc
   242c7:	68 c0 00 00 00       	push   0xc0
   242cc:	68 8a 00 00 00       	push   0x8a
   242d1:	68 ff ff 0f 00       	push   0xfffff
   242d6:	6a 00                	push   0x0
   242d8:	6a 03                	push   0x3
   242da:	e8 06 4b ff ff       	call   18de5 <gdtEntryRM>
   242df:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:118
              GDT_GRANULAR | GDT_32BIT);

    kernelGDT.limit = 0x7ff; // (sizeof(sGDT) * GDT_ENTRIES) - 1;
   242e2:	66 c7 05 88 99 12 00 	mov    WORD PTR ds:0x129988,0x7ff
   242e9:	ff 07 
/home/yogi/src/os/chrisOS/src/init/init.c:119
    kernelGDT.base = (unsigned int)INIT_GDT_TABLE_ADDRESS;
   242eb:	c7 05 8a 99 12 00 00 	mov    DWORD PTR ds:0x12998a,0x164800
   242f2:	48 16 00 
/home/yogi/src/os/chrisOS/src/init/init.c:120
    rmGdtp.limit = sizeof(sGDT) * GDT_ENTRIES - 1;
   242f5:	66 c7 05 78 99 12 00 	mov    WORD PTR ds:0x129978,0x31f
   242fc:	1f 03 
/home/yogi/src/os/chrisOS/src/init/init.c:121
    rmGdtp.base = (unsigned int)rmGdt;
   242fe:	a1 80 99 12 00       	mov    eax,ds:0x129980
   24303:	a3 7a 99 12 00       	mov    ds:0x12997a,eax
/home/yogi/src/os/chrisOS/src/init/init.c:122
    set_gdt(&kernelGDT);
   24308:	83 ec 0c             	sub    esp,0xc
   2430b:	68 88 99 12 00       	push   0x129988
   24310:	e8 28 ce fd ff       	call   113d <set_gdt>
   24315:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:123
}
   24318:	90                   	nop
   24319:	c9                   	leave  
   2431a:	c3                   	ret    

0002431b <quietHardware>:
quietHardware():
/home/yogi/src/os/chrisOS/src/init/init.c:126

void HIGH_CODE_SECTION quietHardware()
{
   2431b:	55                   	push   ebp
   2431c:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/init.c:127
    outb(0xa1, 0x7f);
   2431e:	6a 7f                	push   0x7f
   24320:	68 a1 00 00 00       	push   0xa1
   24325:	e8 38 fe ff ff       	call   24162 <outb>
   2432a:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/init.c:128
    outb(0x21, 0xff);
   2432d:	68 ff 00 00 00       	push   0xff
   24332:	6a 21                	push   0x21
   24334:	e8 29 fe ff ff       	call   24162 <outb>
   24339:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/init.c:129
}
   2433c:	90                   	nop
   2433d:	c9                   	leave  
   2433e:	c3                   	ret    

0002433f <doHDSetup>:
doHDSetup():
/home/yogi/src/os/chrisOS/src/init/init.c:132

void doHDSetup()
{
   2433f:	55                   	push   ebp
   24340:	89 e5                	mov    ebp,esp
   24342:	57                   	push   edi
   24343:	56                   	push   esi
   24344:	53                   	push   ebx
   24345:	81 ec 2c 08 00 00    	sub    esp,0x82c
/home/yogi/src/os/chrisOS/src/init/init.c:133
    printk("ATA: Scanning for hard drives on primary bus ...\n");
   2434b:	83 ec 0c             	sub    esp,0xc
   2434e:	68 00 4b 08 00       	push   0x84b00
   24353:	e8 03 34 00 00       	call   2775b <printk>
   24358:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:134
    ataScanForHarddrives();
   2435b:	e8 6f e8 ff ff       	call   22bcf <ataScanForHarddrives>
/home/yogi/src/os/chrisOS/src/init/init.c:136
    char* p1[512];
    memset(p1,0,512);
   24360:	83 ec 04             	sub    esp,0x4
   24363:	68 00 02 00 00       	push   0x200
   24368:	6a 00                	push   0x0
   2436a:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   24370:	50                   	push   eax
   24371:	e8 93 12 00 00       	call   25609 <memset>
   24376:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:138
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
   24379:	a1 00 98 12 00       	mov    eax,ds:0x129800
   2437e:	05 00 02 00 00       	add    eax,0x200
   24383:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:139
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   24389:	a1 00 98 12 00       	mov    eax,ds:0x129800
   2438e:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   24395:	3c 01                	cmp    al,0x1
   24397:	75 14                	jne    243ad <doHDSetup+0x6e>
/home/yogi/src/os/chrisOS/src/init/init.c:139 (discriminator 1)
   24399:	83 ec 0c             	sub    esp,0xc
   2439c:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   243a2:	50                   	push   eax
   243a3:	e8 c8 38 00 00       	call   27c70 <strtrim>
   243a8:	83 c4 10             	add    esp,0x10
   243ab:	eb 05                	jmp    243b2 <doHDSetup+0x73>
/home/yogi/src/os/chrisOS/src/init/init.c:139 (discriminator 2)
   243ad:	b8 32 4b 08 00       	mov    eax,0x84b32
/home/yogi/src/os/chrisOS/src/init/init.c:139 (discriminator 4)
   243b2:	83 ec 08             	sub    esp,0x8
   243b5:	50                   	push   eax
   243b6:	68 38 4b 08 00       	push   0x84b38
   243bb:	e8 9b 33 00 00       	call   2775b <printk>
   243c0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:140 (discriminator 4)
    if (kATADeviceInfo[0].ATADeviceAvailable)
   243c3:	a1 00 98 12 00       	mov    eax,ds:0x129800
   243c8:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   243cf:	84 c0                	test   al,al
   243d1:	0f 84 92 00 00 00    	je     24469 <doHDSetup+0x12a>
/home/yogi/src/os/chrisOS/src/init/init.c:146
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
                kATADeviceInfo[0].lba48Supported?",LBA48":"",
                kATADeviceInfo[0].dmaSupported?",DMA":"");
   243d7:	a1 00 98 12 00       	mov    eax,ds:0x129800
   243dc:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:142
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   243e3:	84 c0                	test   al,al
   243e5:	74 07                	je     243ee <doHDSetup+0xaf>
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 1)
   243e7:	bf 49 4b 08 00       	mov    edi,0x84b49
   243ec:	eb 05                	jmp    243f3 <doHDSetup+0xb4>
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 2)
   243ee:	bf 4e 4b 08 00       	mov    edi,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:145 (discriminator 4)
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
                kATADeviceInfo[0].lba48Supported?",LBA48":"",
   243f3:	a1 00 98 12 00       	mov    eax,ds:0x129800
   243f8:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 4)
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   243ff:	84 c0                	test   al,al
   24401:	74 07                	je     2440a <doHDSetup+0xcb>
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 5)
   24403:	be 4f 4b 08 00       	mov    esi,0x84b4f
   24408:	eb 05                	jmp    2440f <doHDSetup+0xd0>
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 6)
   2440a:	be 4e 4b 08 00       	mov    esi,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:144 (discriminator 8)
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
   2440f:	a1 00 98 12 00       	mov    eax,ds:0x129800
   24414:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 8)
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   2441b:	84 c0                	test   al,al
   2441d:	74 07                	je     24426 <doHDSetup+0xe7>
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 9)
   2441f:	bb 56 4b 08 00       	mov    ebx,0x84b56
   24424:	eb 05                	jmp    2442b <doHDSetup+0xec>
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 10)
   24426:	bb 4e 4b 08 00       	mov    ebx,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:143 (discriminator 12)
                kATADeviceInfo[0].sectorSize,
   2442b:	a1 00 98 12 00       	mov    eax,ds:0x129800
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 12)
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   24430:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   24436:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   2443c:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   24442:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   24448:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   2444e:	0f af d1             	imul   edx,ecx
   24451:	c1 ea 14             	shr    edx,0x14
   24454:	83 ec 08             	sub    esp,0x8
   24457:	57                   	push   edi
   24458:	56                   	push   esi
   24459:	53                   	push   ebx
   2445a:	50                   	push   eax
   2445b:	52                   	push   edx
   2445c:	68 5b 4b 08 00       	push   0x84b5b
   24461:	e8 f5 32 00 00       	call   2775b <printk>
   24466:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:148
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
                kATADeviceInfo[0].lba48Supported?",LBA48":"",
                kATADeviceInfo[0].dmaSupported?",DMA":"");
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
   24469:	a1 00 98 12 00       	mov    eax,ds:0x129800
   2446e:	05 73 02 00 00       	add    eax,0x273
   24473:	05 00 02 00 00       	add    eax,0x200
   24478:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:149
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   2447e:	a1 00 98 12 00       	mov    eax,ds:0x129800
   24483:	05 73 02 00 00       	add    eax,0x273
   24488:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   2448f:	3c 01                	cmp    al,0x1
   24491:	75 14                	jne    244a7 <doHDSetup+0x168>
/home/yogi/src/os/chrisOS/src/init/init.c:149 (discriminator 1)
   24493:	83 ec 0c             	sub    esp,0xc
   24496:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   2449c:	50                   	push   eax
   2449d:	e8 ce 37 00 00       	call   27c70 <strtrim>
   244a2:	83 c4 10             	add    esp,0x10
   244a5:	eb 05                	jmp    244ac <doHDSetup+0x16d>
/home/yogi/src/os/chrisOS/src/init/init.c:149 (discriminator 2)
   244a7:	b8 32 4b 08 00       	mov    eax,0x84b32
/home/yogi/src/os/chrisOS/src/init/init.c:149 (discriminator 4)
   244ac:	83 ec 08             	sub    esp,0x8
   244af:	50                   	push   eax
   244b0:	68 70 4b 08 00       	push   0x84b70
   244b5:	e8 a1 32 00 00       	call   2775b <printk>
   244ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:150 (discriminator 4)
    if (kATADeviceInfo[1].ATADeviceAvailable)
   244bd:	a1 00 98 12 00       	mov    eax,ds:0x129800
   244c2:	05 73 02 00 00       	add    eax,0x273
   244c7:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   244ce:	84 c0                	test   al,al
   244d0:	0f 84 b2 00 00 00    	je     24588 <doHDSetup+0x249>
/home/yogi/src/os/chrisOS/src/init/init.c:156
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
                kATADeviceInfo[1].lba48Supported?",LBA48":"",
                kATADeviceInfo[1].dmaSupported?",DMA":"");
   244d6:	a1 00 98 12 00       	mov    eax,ds:0x129800
   244db:	05 73 02 00 00       	add    eax,0x273
   244e0:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:152
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   244e7:	84 c0                	test   al,al
   244e9:	74 07                	je     244f2 <doHDSetup+0x1b3>
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 1)
   244eb:	bf 49 4b 08 00       	mov    edi,0x84b49
   244f0:	eb 05                	jmp    244f7 <doHDSetup+0x1b8>
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 2)
   244f2:	bf 4e 4b 08 00       	mov    edi,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:155 (discriminator 4)
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
                kATADeviceInfo[1].lba48Supported?",LBA48":"",
   244f7:	a1 00 98 12 00       	mov    eax,ds:0x129800
   244fc:	05 73 02 00 00       	add    eax,0x273
   24501:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 4)
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   24508:	84 c0                	test   al,al
   2450a:	74 07                	je     24513 <doHDSetup+0x1d4>
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 5)
   2450c:	be 4f 4b 08 00       	mov    esi,0x84b4f
   24511:	eb 05                	jmp    24518 <doHDSetup+0x1d9>
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 6)
   24513:	be 4e 4b 08 00       	mov    esi,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:154 (discriminator 8)
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
   24518:	a1 00 98 12 00       	mov    eax,ds:0x129800
   2451d:	05 73 02 00 00       	add    eax,0x273
   24522:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 8)
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   24529:	84 c0                	test   al,al
   2452b:	74 07                	je     24534 <doHDSetup+0x1f5>
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 9)
   2452d:	bb 56 4b 08 00       	mov    ebx,0x84b56
   24532:	eb 05                	jmp    24539 <doHDSetup+0x1fa>
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 10)
   24534:	bb 4e 4b 08 00       	mov    ebx,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:153 (discriminator 12)
                kATADeviceInfo[1].sectorSize,
   24539:	a1 00 98 12 00       	mov    eax,ds:0x129800
   2453e:	05 73 02 00 00       	add    eax,0x273
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 12)
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   24543:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   24549:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   2454f:	81 c2 73 02 00 00    	add    edx,0x273
   24555:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   2455b:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   24561:	81 c2 73 02 00 00    	add    edx,0x273
   24567:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   2456d:	0f af d1             	imul   edx,ecx
   24570:	c1 ea 14             	shr    edx,0x14
   24573:	83 ec 08             	sub    esp,0x8
   24576:	57                   	push   edi
   24577:	56                   	push   esi
   24578:	53                   	push   ebx
   24579:	50                   	push   eax
   2457a:	52                   	push   edx
   2457b:	68 81 4b 08 00       	push   0x84b81
   24580:	e8 d6 31 00 00       	call   2775b <printk>
   24585:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:158
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
                kATADeviceInfo[1].lba48Supported?",LBA48":"",
                kATADeviceInfo[1].dmaSupported?",DMA":"");
    }
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
   24588:	83 ec 0c             	sub    esp,0xc
   2458b:	68 98 4b 08 00       	push   0x84b98
   24590:	e8 c6 31 00 00       	call   2775b <printk>
   24595:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:159
    *p1=kATADeviceInfo[2].ATADeviceModel;
   24598:	a1 00 98 12 00       	mov    eax,ds:0x129800
   2459d:	05 e6 04 00 00       	add    eax,0x4e6
   245a2:	05 00 02 00 00       	add    eax,0x200
   245a7:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:160
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   245ad:	a1 00 98 12 00       	mov    eax,ds:0x129800
   245b2:	05 e6 04 00 00       	add    eax,0x4e6
   245b7:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   245be:	3c 01                	cmp    al,0x1
   245c0:	75 14                	jne    245d6 <doHDSetup+0x297>
/home/yogi/src/os/chrisOS/src/init/init.c:160 (discriminator 1)
   245c2:	83 ec 0c             	sub    esp,0xc
   245c5:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   245cb:	50                   	push   eax
   245cc:	e8 9f 36 00 00       	call   27c70 <strtrim>
   245d1:	83 c4 10             	add    esp,0x10
   245d4:	eb 05                	jmp    245db <doHDSetup+0x29c>
/home/yogi/src/os/chrisOS/src/init/init.c:160 (discriminator 2)
   245d6:	b8 32 4b 08 00       	mov    eax,0x84b32
/home/yogi/src/os/chrisOS/src/init/init.c:160 (discriminator 4)
   245db:	83 ec 08             	sub    esp,0x8
   245de:	50                   	push   eax
   245df:	68 38 4b 08 00       	push   0x84b38
   245e4:	e8 72 31 00 00       	call   2775b <printk>
   245e9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:161 (discriminator 4)
    if (kATADeviceInfo[2].ATADeviceAvailable)
   245ec:	a1 00 98 12 00       	mov    eax,ds:0x129800
   245f1:	05 e6 04 00 00       	add    eax,0x4e6
   245f6:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   245fd:	84 c0                	test   al,al
   245ff:	0f 84 b2 00 00 00    	je     246b7 <doHDSetup+0x378>
/home/yogi/src/os/chrisOS/src/init/init.c:167
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
                kATADeviceInfo[2].lba48Supported?",LBA48":"",
                kATADeviceInfo[2].dmaSupported?",DMA":"");
   24605:	a1 00 98 12 00       	mov    eax,ds:0x129800
   2460a:	05 e6 04 00 00       	add    eax,0x4e6
   2460f:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:163
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   24616:	84 c0                	test   al,al
   24618:	74 07                	je     24621 <doHDSetup+0x2e2>
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 1)
   2461a:	bf 49 4b 08 00       	mov    edi,0x84b49
   2461f:	eb 05                	jmp    24626 <doHDSetup+0x2e7>
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 2)
   24621:	bf 4e 4b 08 00       	mov    edi,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:166 (discriminator 4)
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
                kATADeviceInfo[2].lba48Supported?",LBA48":"",
   24626:	a1 00 98 12 00       	mov    eax,ds:0x129800
   2462b:	05 e6 04 00 00       	add    eax,0x4e6
   24630:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 4)
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   24637:	84 c0                	test   al,al
   24639:	74 07                	je     24642 <doHDSetup+0x303>
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 5)
   2463b:	be 4f 4b 08 00       	mov    esi,0x84b4f
   24640:	eb 05                	jmp    24647 <doHDSetup+0x308>
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 6)
   24642:	be 4e 4b 08 00       	mov    esi,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:165 (discriminator 8)
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
   24647:	a1 00 98 12 00       	mov    eax,ds:0x129800
   2464c:	05 e6 04 00 00       	add    eax,0x4e6
   24651:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 8)
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   24658:	84 c0                	test   al,al
   2465a:	74 07                	je     24663 <doHDSetup+0x324>
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 9)
   2465c:	bb 56 4b 08 00       	mov    ebx,0x84b56
   24661:	eb 05                	jmp    24668 <doHDSetup+0x329>
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 10)
   24663:	bb 4e 4b 08 00       	mov    ebx,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:164 (discriminator 12)
                kATADeviceInfo[2].sectorSize,
   24668:	a1 00 98 12 00       	mov    eax,ds:0x129800
   2466d:	05 e6 04 00 00       	add    eax,0x4e6
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 12)
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   24672:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   24678:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   2467e:	81 c2 e6 04 00 00    	add    edx,0x4e6
   24684:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   2468a:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   24690:	81 c2 e6 04 00 00    	add    edx,0x4e6
   24696:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   2469c:	0f af d1             	imul   edx,ecx
   2469f:	c1 ea 14             	shr    edx,0x14
   246a2:	83 ec 08             	sub    esp,0x8
   246a5:	57                   	push   edi
   246a6:	56                   	push   esi
   246a7:	53                   	push   ebx
   246a8:	50                   	push   eax
   246a9:	52                   	push   edx
   246aa:	68 5b 4b 08 00       	push   0x84b5b
   246af:	e8 a7 30 00 00       	call   2775b <printk>
   246b4:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:169
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
                kATADeviceInfo[2].lba48Supported?",LBA48":"",
                kATADeviceInfo[2].dmaSupported?",DMA":"");
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
   246b7:	a1 00 98 12 00       	mov    eax,ds:0x129800
   246bc:	05 59 07 00 00       	add    eax,0x759
   246c1:	05 00 02 00 00       	add    eax,0x200
   246c6:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:170
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   246cc:	a1 00 98 12 00       	mov    eax,ds:0x129800
   246d1:	05 59 07 00 00       	add    eax,0x759
   246d6:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   246dd:	3c 01                	cmp    al,0x1
   246df:	75 14                	jne    246f5 <doHDSetup+0x3b6>
/home/yogi/src/os/chrisOS/src/init/init.c:170 (discriminator 1)
   246e1:	83 ec 0c             	sub    esp,0xc
   246e4:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   246ea:	50                   	push   eax
   246eb:	e8 80 35 00 00       	call   27c70 <strtrim>
   246f0:	83 c4 10             	add    esp,0x10
   246f3:	eb 05                	jmp    246fa <doHDSetup+0x3bb>
/home/yogi/src/os/chrisOS/src/init/init.c:170 (discriminator 2)
   246f5:	b8 32 4b 08 00       	mov    eax,0x84b32
/home/yogi/src/os/chrisOS/src/init/init.c:170 (discriminator 4)
   246fa:	83 ec 08             	sub    esp,0x8
   246fd:	50                   	push   eax
   246fe:	68 70 4b 08 00       	push   0x84b70
   24703:	e8 53 30 00 00       	call   2775b <printk>
   24708:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:171 (discriminator 4)
    if (kATADeviceInfo[3].ATADeviceAvailable)
   2470b:	a1 00 98 12 00       	mov    eax,ds:0x129800
   24710:	05 59 07 00 00       	add    eax,0x759
   24715:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   2471c:	84 c0                	test   al,al
   2471e:	0f 84 b2 00 00 00    	je     247d6 <doHDSetup+0x497>
/home/yogi/src/os/chrisOS/src/init/init.c:177
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
                kATADeviceInfo[3].lba48Supported?",LBA48":"",
                kATADeviceInfo[3].dmaSupported?",DMA":"");
   24724:	a1 00 98 12 00       	mov    eax,ds:0x129800
   24729:	05 59 07 00 00       	add    eax,0x759
   2472e:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:173
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   24735:	84 c0                	test   al,al
   24737:	74 07                	je     24740 <doHDSetup+0x401>
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 1)
   24739:	bf 49 4b 08 00       	mov    edi,0x84b49
   2473e:	eb 05                	jmp    24745 <doHDSetup+0x406>
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 2)
   24740:	bf 4e 4b 08 00       	mov    edi,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:176 (discriminator 4)
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
                kATADeviceInfo[3].lba48Supported?",LBA48":"",
   24745:	a1 00 98 12 00       	mov    eax,ds:0x129800
   2474a:	05 59 07 00 00       	add    eax,0x759
   2474f:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 4)
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   24756:	84 c0                	test   al,al
   24758:	74 07                	je     24761 <doHDSetup+0x422>
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 5)
   2475a:	be 4f 4b 08 00       	mov    esi,0x84b4f
   2475f:	eb 05                	jmp    24766 <doHDSetup+0x427>
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 6)
   24761:	be 4e 4b 08 00       	mov    esi,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:175 (discriminator 8)
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
   24766:	a1 00 98 12 00       	mov    eax,ds:0x129800
   2476b:	05 59 07 00 00       	add    eax,0x759
   24770:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 8)
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   24777:	84 c0                	test   al,al
   24779:	74 07                	je     24782 <doHDSetup+0x443>
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 9)
   2477b:	bb 56 4b 08 00       	mov    ebx,0x84b56
   24780:	eb 05                	jmp    24787 <doHDSetup+0x448>
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 10)
   24782:	bb 4e 4b 08 00       	mov    ebx,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:174 (discriminator 12)
                kATADeviceInfo[3].sectorSize,
   24787:	a1 00 98 12 00       	mov    eax,ds:0x129800
   2478c:	05 59 07 00 00       	add    eax,0x759
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 12)
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   24791:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   24797:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   2479d:	81 c2 59 07 00 00    	add    edx,0x759
   247a3:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   247a9:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   247af:	81 c2 59 07 00 00    	add    edx,0x759
   247b5:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   247bb:	0f af d1             	imul   edx,ecx
   247be:	c1 ea 14             	shr    edx,0x14
   247c1:	83 ec 08             	sub    esp,0x8
   247c4:	57                   	push   edi
   247c5:	56                   	push   esi
   247c6:	53                   	push   ebx
   247c7:	50                   	push   eax
   247c8:	52                   	push   edx
   247c9:	68 81 4b 08 00       	push   0x84b81
   247ce:	e8 88 2f 00 00       	call   2775b <printk>
   247d3:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:179
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
                kATADeviceInfo[3].lba48Supported?",LBA48":"",
                kATADeviceInfo[3].dmaSupported?",DMA":"");
    }
    if (ParamExists(kBootParams,"noahci",kBootParamCount))
   247d6:	a1 c8 8f 09 00       	mov    eax,ds:0x98fc8
   247db:	83 ec 04             	sub    esp,0x4
   247de:	50                   	push   eax
   247df:	68 cc 4b 08 00       	push   0x84bcc
   247e4:	68 e0 8f 09 00       	push   0x98fe0
   247e9:	e8 e0 01 00 00       	call   249ce <ParamExists>
   247ee:	83 c4 10             	add    esp,0x10
   247f1:	84 c0                	test   al,al
   247f3:	74 15                	je     2480a <doHDSetup+0x4cb>
/home/yogi/src/os/chrisOS/src/init/init.c:180
        printk("AHCI: No scanning per parameter 'noahci'\n");
   247f5:	83 ec 0c             	sub    esp,0xc
   247f8:	68 d4 4b 08 00       	push   0x84bd4
   247fd:	e8 59 2f 00 00       	call   2775b <printk>
   24802:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:200
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
                        kATADeviceInfo[cnt].dmaSupported?",DMA":"");
            }
    }
}
   24805:	e9 bb 01 00 00       	jmp    249c5 <doHDSetup+0x686>
/home/yogi/src/os/chrisOS/src/init/init.c:183
    }
    if (ParamExists(kBootParams,"noahci",kBootParamCount))
        printk("AHCI: No scanning per parameter 'noahci'\n");
    else
    {
        printk("AHCI: Initializing ...\n");
   2480a:	83 ec 0c             	sub    esp,0xc
   2480d:	68 fe 4b 08 00       	push   0x84bfe
   24812:	e8 44 2f 00 00       	call   2775b <printk>
   24817:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:184
        ahciInit();
   2481a:	e8 91 0e ff ff       	call   156b0 <ahciInit>
/home/yogi/src/os/chrisOS/src/init/init.c:185
        printk(" done\n");
   2481f:	83 ec 0c             	sub    esp,0xc
   24822:	68 16 4c 08 00       	push   0x84c16
   24827:	e8 2f 2f 00 00       	call   2775b <printk>
   2482c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:186
        printk("AHCI: SATA Disks:\n");
   2482f:	83 ec 0c             	sub    esp,0xc
   24832:	68 1d 4c 08 00       	push   0x84c1d
   24837:	e8 1f 2f 00 00       	call   2775b <printk>
   2483c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:187
        for (int cnt=4;cnt<10;cnt++)
   2483f:	c7 45 e4 04 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x4
   24846:	e9 70 01 00 00       	jmp    249bb <doHDSetup+0x67c>
/home/yogi/src/os/chrisOS/src/init/init.c:188
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
   2484b:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   24851:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24854:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   2485a:	01 d0                	add    eax,edx
   2485c:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   24863:	84 c0                	test   al,al
   24865:	0f 84 4c 01 00 00    	je     249b7 <doHDSetup+0x678>
/home/yogi/src/os/chrisOS/src/init/init.c:190
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
   2486b:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   24871:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24874:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   2487a:	01 d0                	add    eax,edx
   2487c:	05 00 02 00 00       	add    eax,0x200
   24881:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:191
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   24887:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   2488d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24890:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24896:	01 d0                	add    eax,edx
   24898:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   2489f:	3c 01                	cmp    al,0x1
   248a1:	75 14                	jne    248b7 <doHDSetup+0x578>
/home/yogi/src/os/chrisOS/src/init/init.c:191 (discriminator 1)
   248a3:	83 ec 0c             	sub    esp,0xc
   248a6:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   248ac:	50                   	push   eax
   248ad:	e8 be 33 00 00       	call   27c70 <strtrim>
   248b2:	83 c4 10             	add    esp,0x10
   248b5:	eb 05                	jmp    248bc <doHDSetup+0x57d>
/home/yogi/src/os/chrisOS/src/init/init.c:191 (discriminator 2)
   248b7:	b8 32 4b 08 00       	mov    eax,0x84b32
/home/yogi/src/os/chrisOS/src/init/init.c:191 (discriminator 4)
   248bc:	83 ec 04             	sub    esp,0x4
   248bf:	50                   	push   eax
   248c0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   248c3:	68 30 4c 08 00       	push   0x84c30
   248c8:	e8 8e 2e 00 00       	call   2775b <printk>
   248cd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:197 (discriminator 4)
                printk("\t%uMB (%ubps %s%s%s)\n", 
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
                        kATADeviceInfo[cnt].dmaSupported?",DMA":"");
   248d0:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   248d6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   248d9:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   248df:	01 d0                	add    eax,edx
   248e1:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 4)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   248e8:	84 c0                	test   al,al
   248ea:	74 0c                	je     248f8 <doHDSetup+0x5b9>
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 1)
   248ec:	c7 85 d4 f7 ff ff 49 	mov    DWORD PTR [ebp-0x82c],0x84b49
   248f3:	4b 08 00 
   248f6:	eb 0a                	jmp    24902 <doHDSetup+0x5c3>
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 2)
   248f8:	c7 85 d4 f7 ff ff 4e 	mov    DWORD PTR [ebp-0x82c],0x84b4e
   248ff:	4b 08 00 
/home/yogi/src/os/chrisOS/src/init/init.c:196 (discriminator 4)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
   24902:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   24908:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   2490b:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24911:	01 d0                	add    eax,edx
   24913:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 4)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   2491a:	84 c0                	test   al,al
   2491c:	74 07                	je     24925 <doHDSetup+0x5e6>
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 5)
   2491e:	bf 4f 4b 08 00       	mov    edi,0x84b4f
   24923:	eb 05                	jmp    2492a <doHDSetup+0x5eb>
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 6)
   24925:	bf 4e 4b 08 00       	mov    edi,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:195 (discriminator 8)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
   2492a:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   24930:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24933:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24939:	01 d0                	add    eax,edx
   2493b:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 8)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   24942:	84 c0                	test   al,al
   24944:	74 07                	je     2494d <doHDSetup+0x60e>
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 9)
   24946:	be 56 4b 08 00       	mov    esi,0x84b56
   2494b:	eb 05                	jmp    24952 <doHDSetup+0x613>
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 10)
   2494d:	be 4e 4b 08 00       	mov    esi,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:194 (discriminator 12)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
   24952:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   24958:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   2495b:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24961:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 12)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   24963:	8b 88 5a 02 00 00    	mov    ecx,DWORD PTR [eax+0x25a]
/home/yogi/src/os/chrisOS/src/init/init.c:193 (discriminator 12)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
   24969:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
   2496f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24972:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24978:	01 d0                	add    eax,edx
   2497a:	8b 90 56 02 00 00    	mov    edx,DWORD PTR [eax+0x256]
   24980:	8b 1d 00 98 12 00    	mov    ebx,DWORD PTR ds:0x129800
   24986:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24989:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   2498f:	01 d8                	add    eax,ebx
   24991:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   24997:	0f af c2             	imul   eax,edx
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 12)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   2499a:	c1 e8 14             	shr    eax,0x14
   2499d:	83 ec 08             	sub    esp,0x8
   249a0:	ff b5 d4 f7 ff ff    	push   DWORD PTR [ebp-0x82c]
   249a6:	57                   	push   edi
   249a7:	56                   	push   esi
   249a8:	51                   	push   ecx
   249a9:	50                   	push   eax
   249aa:	68 81 4b 08 00       	push   0x84b81
   249af:	e8 a7 2d 00 00       	call   2775b <printk>
   249b4:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:187 (discriminator 2)
    {
        printk("AHCI: Initializing ...\n");
        ahciInit();
        printk(" done\n");
        printk("AHCI: SATA Disks:\n");
        for (int cnt=4;cnt<10;cnt++)
   249b7:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/init/init.c:187 (discriminator 1)
   249bb:	83 7d e4 09          	cmp    DWORD PTR [ebp-0x1c],0x9
   249bf:	0f 8e 86 fe ff ff    	jle    2484b <doHDSetup+0x50c>
/home/yogi/src/os/chrisOS/src/init/init.c:200
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
                        kATADeviceInfo[cnt].dmaSupported?",DMA":"");
            }
    }
}
   249c5:	90                   	nop
   249c6:	8d 65 f4             	lea    esp,[ebp-0xc]
   249c9:	5b                   	pop    ebx
   249ca:	5e                   	pop    esi
   249cb:	5f                   	pop    edi
   249cc:	5d                   	pop    ebp
   249cd:	c3                   	ret    

000249ce <ParamExists>:
ParamExists():
/home/yogi/src/os/chrisOS/src/init/init.c:203

bool HIGH_CODE_SECTION ParamExists(char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH], char* cmdToFind, int paramCount)
{
   249ce:	55                   	push   ebp
   249cf:	89 e5                	mov    ebp,esp
   249d1:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/init.c:204
    for (int cnt=0;cnt<paramCount+1;cnt++)
   249d4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   249db:	eb 2b                	jmp    24a08 <ParamExists+0x3a>
/home/yogi/src/os/chrisOS/src/init/init.c:205
        if (!strcmp(params[cnt],cmdToFind))
   249dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   249e0:	c1 e0 09             	shl    eax,0x9
   249e3:	89 c2                	mov    edx,eax
   249e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   249e8:	01 d0                	add    eax,edx
   249ea:	83 ec 08             	sub    esp,0x8
   249ed:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   249f0:	50                   	push   eax
   249f1:	e8 72 2e 00 00       	call   27868 <strcmp>
   249f6:	83 c4 10             	add    esp,0x10
   249f9:	85 c0                	test   eax,eax
   249fb:	75 07                	jne    24a04 <ParamExists+0x36>
/home/yogi/src/os/chrisOS/src/init/init.c:206
            return true;
   249fd:	b8 01 00 00 00       	mov    eax,0x1
   24a02:	eb 14                	jmp    24a18 <ParamExists+0x4a>
/home/yogi/src/os/chrisOS/src/init/init.c:204 (discriminator 2)
    }
}

bool HIGH_CODE_SECTION ParamExists(char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH], char* cmdToFind, int paramCount)
{
    for (int cnt=0;cnt<paramCount+1;cnt++)
   24a04:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/init.c:204 (discriminator 1)
   24a08:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   24a0b:	83 c0 01             	add    eax,0x1
   24a0e:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   24a11:	7f ca                	jg     249dd <ParamExists+0xf>
/home/yogi/src/os/chrisOS/src/init/init.c:207
        if (!strcmp(params[cnt],cmdToFind))
            return true;
    return false;
   24a13:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/init.c:208
}
   24a18:	c9                   	leave  
   24a19:	c3                   	ret    

00024a1a <testWPBit>:
testWPBit():
/home/yogi/src/os/chrisOS/src/init/init.c:212
void extern enableCR0_WP();

void HIGH_CODE_SECTION testWPBit()
{
   24a1a:	55                   	push   ebp
   24a1b:	89 e5                	mov    ebp,esp
   24a1d:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/init.c:213
    enableCR0_WP();
   24a20:	e8 86 d3 fe ff       	call   11dab <enableCR0_WP>
/home/yogi/src/os/chrisOS/src/init/init.c:214
    printk("PAGING: Kernel paged base: 0x%08X\n",KERNEL_PAGED_BASE_ADDRESS);
   24a25:	83 ec 08             	sub    esp,0x8
   24a28:	68 00 00 00 c0       	push   0xc0000000
   24a2d:	68 48 4c 08 00       	push   0x84c48
   24a32:	e8 24 2d 00 00       	call   2775b <printk>
   24a37:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:215
    printk("PAGING: Making page @ 0x00000000 read only\n");
   24a3a:	83 ec 0c             	sub    esp,0xc
   24a3d:	68 6c 4c 08 00       	push   0x84c6c
   24a42:	e8 14 2d 00 00       	call   2775b <printk>
   24a47:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:216
    kSetPhysicalRangeRO(0x0,0xFFF,true);
   24a4a:	83 ec 04             	sub    esp,0x4
   24a4d:	6a 01                	push   0x1
   24a4f:	68 ff 0f 00 00       	push   0xfff
   24a54:	6a 00                	push   0x0
   24a56:	e8 e6 d0 fe ff       	call   11b41 <kSetPhysicalRangeRO>
   24a5b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:217
    printk("PAGING: Testing whether CPU honors WP flag ... ");
   24a5e:	83 ec 0c             	sub    esp,0xc
   24a61:	68 98 4c 08 00       	push   0x84c98
   24a66:	e8 f0 2c 00 00       	call   2775b <printk>
   24a6b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:218
  __asm__("cli\n");
   24a6e:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/init/init.c:219
  __asm__("mov %0,[0x0]\n":"=r" (kOriginalAddressZeroValue));
   24a6f:	a1 00 00 00 00       	mov    eax,ds:0x0
   24a74:	a3 20 99 12 00       	mov    ds:0x129920,eax
/home/yogi/src/os/chrisOS/src/init/init.c:220
  __asm__("mov eax,0xdeadbeef\n mov [0x0],eax\n");    //purposely write address 0 which we made "read only"
   24a79:	b8 ef be ad de       	mov    eax,0xdeadbeef
   24a7e:	a3 00 00 00 00       	mov    ds:0x0,eax
/home/yogi/src/os/chrisOS/src/init/init.c:221
  __asm__("mov eax,cr0\n":::"eax");
   24a83:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/src/init/init.c:222
  if (kPagingExceptionsSinceStart==1)
   24a86:	a1 b8 97 12 00       	mov    eax,ds:0x1297b8
   24a8b:	83 f8 01             	cmp    eax,0x1
   24a8e:	75 12                	jne    24aa2 <testWPBit+0x88>
/home/yogi/src/os/chrisOS/src/init/init.c:223
    printk("WP bit works!\n");
   24a90:	83 ec 0c             	sub    esp,0xc
   24a93:	68 c8 4c 08 00       	push   0x84cc8
   24a98:	e8 be 2c 00 00       	call   2775b <printk>
   24a9d:	83 c4 10             	add    esp,0x10
   24aa0:	eb 10                	jmp    24ab2 <testWPBit+0x98>
/home/yogi/src/os/chrisOS/src/init/init.c:225
  else
      printk("WP bit does not work\n");
   24aa2:	83 ec 0c             	sub    esp,0xc
   24aa5:	68 d7 4c 08 00       	push   0x84cd7
   24aaa:	e8 ac 2c 00 00       	call   2775b <printk>
   24aaf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:227
  //Can't unmap page 0x0 or the memory manager will see it as free space, so set it read-only again
  __asm__("mov eax,0x0\n mov [0x0],eax\n");    //purposely write address 0 which we made "read only"
   24ab2:	b8 00 00 00 00       	mov    eax,0x0
   24ab7:	a3 00 00 00 00       	mov    ds:0x0,eax
/home/yogi/src/os/chrisOS/src/init/init.c:228
  kSetPhysicalRangeRO(0x0,0xFFF,true);
   24abc:	83 ec 04             	sub    esp,0x4
   24abf:	6a 01                	push   0x1
   24ac1:	68 ff 0f 00 00       	push   0xfff
   24ac6:	6a 00                	push   0x0
   24ac8:	e8 74 d0 fe ff       	call   11b41 <kSetPhysicalRangeRO>
   24acd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:229
}
   24ad0:	90                   	nop
   24ad1:	c9                   	leave  
   24ad2:	c3                   	ret    

00024ad3 <kernel_main>:
kernel_main():
/home/yogi/src/os/chrisOS/src/init/init.c:231

void HIGH_CODE_SECTION kernel_main(/*multiboot_info_t* mbd, unsigned int magic*/) {
   24ad3:	55                   	push   ebp
   24ad4:	89 e5                	mov    ebp,esp
   24ad6:	56                   	push   esi
   24ad7:	53                   	push   ebx
   24ad8:	81 ec d0 00 00 00    	sub    esp,0xd0
/home/yogi/src/os/chrisOS/src/init/init.c:237
    
char currTime[150];
struct tm theDateTime;
    //Zero out all of the memory we will be using as rebooting a computer doesn't necessarily clear memory
    //memset(0x200000,0,0x1000000);
__asm__("sgdt [eax]\n"::"a" (&kernelGDT));
   24ade:	b8 88 99 12 00       	mov    eax,0x129988
   24ae3:	0f 01 00             	sgdtd  [eax]
/home/yogi/src/os/chrisOS/src/init/init.c:238
gdt_init();
   24ae6:	e8 96 f6 ff ff       	call   24181 <gdt_init>
/home/yogi/src/os/chrisOS/src/init/init.c:239
    kTicksPerSecond=TICKS_PER_SECOND;
   24aeb:	c7 05 c0 97 12 00 64 	mov    DWORD PTR ds:0x1297c0,0x64
   24af2:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/init.c:240
    kTermInit();
   24af5:	e8 d4 38 ff ff       	call   183ce <kTermInit>
/home/yogi/src/os/chrisOS/src/init/init.c:241
    kInitDone=false;
   24afa:	c6 05 e0 97 12 00 00 	mov    BYTE PTR ds:0x1297e0,0x0
/home/yogi/src/os/chrisOS/src/init/init.c:242
    kPagingInitDone=false;
   24b01:	c6 05 e1 97 12 00 00 	mov    BYTE PTR ds:0x1297e1,0x0
/home/yogi/src/os/chrisOS/src/init/init.c:243
    kTicksPerMS=1000/kTicksPerSecond;
   24b08:	8b 35 c0 97 12 00    	mov    esi,DWORD PTR ds:0x1297c0
   24b0e:	b8 e8 03 00 00       	mov    eax,0x3e8
   24b13:	99                   	cdq    
   24b14:	f7 fe                	idiv   esi
   24b16:	a3 c4 97 12 00       	mov    ds:0x1297c4,eax
/home/yogi/src/os/chrisOS/src/init/init.c:244
    kDebugStartsNow=false;
   24b1b:	c6 05 f0 97 12 00 00 	mov    BYTE PTR ds:0x1297f0,0x0
/home/yogi/src/os/chrisOS/src/init/init.c:245
    memset(kATADeviceInfo,0x0,sizeof(struct ataDeviceInfo_t)*20);
   24b22:	a1 00 98 12 00       	mov    eax,ds:0x129800
   24b27:	83 ec 04             	sub    esp,0x4
   24b2a:	68 fc 30 00 00       	push   0x30fc
   24b2f:	6a 00                	push   0x0
   24b31:	50                   	push   eax
   24b32:	e8 d2 0a 00 00       	call   25609 <memset>
   24b37:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:246
    memset(kGDTSlotAvailableInd,0xFF,GDT_TABLE_SIZE);
   24b3a:	a1 2c 99 12 00       	mov    eax,ds:0x12992c
   24b3f:	83 ec 04             	sub    esp,0x4
   24b42:	68 00 08 00 00       	push   0x800
   24b47:	68 ff 00 00 00       	push   0xff
   24b4c:	50                   	push   eax
   24b4d:	e8 b7 0a 00 00       	call   25609 <memset>
   24b52:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:247
    memset(kTaskSlotAvailableInd,0xFF,TASK_TABLE_SIZE);
   24b55:	a1 30 99 12 00       	mov    eax,ds:0x129930
   24b5a:	83 ec 04             	sub    esp,0x4
   24b5d:	68 00 00 19 00       	push   0x190000
   24b62:	68 ff 00 00 00       	push   0xff
   24b67:	50                   	push   eax
   24b68:	e8 9c 0a 00 00       	call   25609 <memset>
   24b6d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:249

    __asm__("mov esp,0xff00\n" /*\
   24b70:	bc 00 ff 00 00       	mov    esp,0xff00
/home/yogi/src/os/chrisOS/src/init/init.c:252
            "mov eax,0\nmov dr6,eax":::"eax"*/);
    /* Initialize terminal interface */
    *kTicksSinceStart=0;
   24b75:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   24b7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/init.c:253
    identify_data_sizes(&kDataSizes);
   24b80:	83 ec 0c             	sub    esp,0xc
   24b83:	68 98 97 12 00       	push   0x129798
   24b88:	e8 4a 0a 00 00       	call   255d7 <identify_data_sizes>
   24b8d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:254
    terminal_clear();
   24b90:	e8 31 34 ff ff       	call   17fc6 <terminal_clear>
/home/yogi/src/os/chrisOS/src/init/init.c:255
    printk("Booting ...\n");
   24b95:	83 ec 0c             	sub    esp,0xc
   24b98:	68 ed 4c 08 00       	push   0x84ced
   24b9d:	e8 b9 2b 00 00       	call   2775b <printk>
   24ba2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:257

    quietHardware();
   24ba5:	e8 71 f7 ff ff       	call   2431b <quietHardware>
/home/yogi/src/os/chrisOS/src/init/init.c:258
    int lLowMemKB = getInt12Memory();
   24baa:	e8 be c4 fd ff       	call   106d <getInt12Memory>
   24baf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/init.c:259
    kE820Status = isE820Available(); //
   24bb2:	e8 71 c4 fd ff       	call   1028 <isE820Available>
   24bb7:	a3 84 95 12 00       	mov    ds:0x129584,eax
/home/yogi/src/os/chrisOS/src/init/init.c:260
    if (kE820Status==0x534d4150)
   24bbc:	a1 84 95 12 00       	mov    eax,ds:0x129584
   24bc1:	3d 50 41 4d 53       	cmp    eax,0x534d4150
   24bc6:	75 0b                	jne    24bd3 <kernel_main+0x100>
/home/yogi/src/os/chrisOS/src/init/init.c:261
        kE820RecordCount = getE820Memory_asm();
   24bc8:	e8 6d c6 fd ff       	call   123a <getE820Memory_asm>
   24bcd:	66 a3 90 95 12 00    	mov    ds:0x129590,ax
/home/yogi/src/os/chrisOS/src/init/init.c:263
    //Move the SMAP table from low memory up to where we want it
    memcpy(smap_table, lowSmapTablePtr, kE820RecordCount*24);
   24bd3:	0f b7 05 90 95 12 00 	movzx  eax,WORD PTR ds:0x129590
   24bda:	0f bf d0             	movsx  edx,ax
   24bdd:	89 d0                	mov    eax,edx
   24bdf:	01 c0                	add    eax,eax
   24be1:	01 d0                	add    eax,edx
   24be3:	c1 e0 03             	shl    eax,0x3
   24be6:	89 c1                	mov    ecx,eax
   24be8:	8b 15 68 13 00 00    	mov    edx,DWORD PTR ds:0x1368
   24bee:	a1 80 95 12 00       	mov    eax,ds:0x129580
   24bf3:	83 ec 04             	sub    esp,0x4
   24bf6:	51                   	push   ecx
   24bf7:	52                   	push   edx
   24bf8:	50                   	push   eax
   24bf9:	e8 be 14 00 00       	call   260bc <memcpy>
   24bfe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:264
    idt_init(&kInitialIDTReg, PIC_REMAP_OFFSET);
   24c01:	83 ec 08             	sub    esp,0x8
   24c04:	6a 20                	push   0x20
   24c06:	68 e0 a3 09 00       	push   0x9a3e0
   24c0b:	e8 59 43 ff ff       	call   18f69 <idt_init>
   24c10:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:265
    init_PIT(kTicksPerSecond);
   24c13:	a1 c0 97 12 00       	mov    eax,ds:0x1297c0
   24c18:	83 ec 0c             	sub    esp,0xc
   24c1b:	50                   	push   eax
   24c1c:	e8 6e c5 fd ff       	call   118f <init_PIT>
   24c21:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:267
    //Remap the exception vectors (0x0-0x1f)
    PIC_remap(0x00+PIC_REMAP_OFFSET, 0x8+PIC_REMAP_OFFSET);
   24c24:	83 ec 08             	sub    esp,0x8
   24c27:	6a 28                	push   0x28
   24c29:	6a 20                	push   0x20
   24c2b:	e8 4e 52 ff ff       	call   19e7e <PIC_remap>
   24c30:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:268
    IRQ_clear_mask(0);
   24c33:	83 ec 0c             	sub    esp,0xc
   24c36:	6a 00                	push   0x0
   24c38:	e8 df 51 ff ff       	call   19e1c <IRQ_clear_mask>
   24c3d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:269
    IRQ_clear_mask(1);
   24c40:	83 ec 0c             	sub    esp,0xc
   24c43:	6a 01                	push   0x1
   24c45:	e8 d2 51 ff ff       	call   19e1c <IRQ_clear_mask>
   24c4a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:270
    initSystemDate();
   24c4d:	e8 0e 0b 00 00       	call   25760 <initSystemDate>
/home/yogi/src/os/chrisOS/src/init/init.c:271
    gmtime_r(&kSystemStartTime,&theDateTime);
   24c52:	83 ec 08             	sub    esp,0x8
   24c55:	8d 85 30 ff ff ff    	lea    eax,[ebp-0xd0]
   24c5b:	50                   	push   eax
   24c5c:	68 c8 97 12 00       	push   0x1297c8
   24c61:	e8 57 31 00 00       	call   27dbd <gmtime_r>
   24c66:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:272
    printk("Boot: ");
   24c69:	83 ec 0c             	sub    esp,0xc
   24c6c:	68 fa 4c 08 00       	push   0x84cfa
   24c71:	e8 e5 2a 00 00       	call   2775b <printk>
   24c76:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:273
    gets(kBootCmd,150);
   24c79:	83 ec 08             	sub    esp,0x8
   24c7c:	68 96 00 00 00       	push   0x96
   24c81:	68 00 a4 09 00       	push   0x9a400
   24c86:	e8 5d c6 fe ff       	call   112e8 <gets>
   24c8b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:274
    kBootParamCount=parseParamsShell(kBootCmd, kBootParams, MAX_PARAM_COUNT*MAX_PARAM_WIDTH);
   24c8e:	83 ec 04             	sub    esp,0x4
   24c91:	68 00 14 00 00       	push   0x1400
   24c96:	68 e0 8f 09 00       	push   0x98fe0
   24c9b:	68 00 a4 09 00       	push   0x9a400
   24ca0:	e8 5b d8 fe ff       	call   12500 <parseParamsShell>
   24ca5:	83 c4 10             	add    esp,0x10
   24ca8:	a3 c8 8f 09 00       	mov    ds:0x98fc8,eax
/home/yogi/src/os/chrisOS/src/init/init.c:275
    strftime((char*)&currTime, 50, "%H:%M:%S on %m/%d/%y", &theDateTime);
   24cad:	8d 85 30 ff ff ff    	lea    eax,[ebp-0xd0]
   24cb3:	50                   	push   eax
   24cb4:	68 01 4d 08 00       	push   0x84d01
   24cb9:	6a 32                	push   0x32
   24cbb:	8d 85 5e ff ff ff    	lea    eax,[ebp-0xa2]
   24cc1:	50                   	push   eax
   24cc2:	e8 f9 b9 fe ff       	call   106c0 <strftime>
   24cc7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:277
    //wait(50);
    printk("chrisOS %s booting @%s",  COMPLETE_VERSION, &currTime);
   24cca:	83 ec 04             	sub    esp,0x4
   24ccd:	8d 85 5e ff ff ff    	lea    eax,[ebp-0xa2]
   24cd3:	50                   	push   eax
   24cd4:	68 16 4d 08 00       	push   0x84d16
   24cd9:	68 2a 4d 08 00       	push   0x84d2a
   24cde:	e8 78 2a 00 00       	call   2775b <printk>
   24ce3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:279
#ifndef DEBUG_NONE
    if (kDebugLevel > 0)
   24ce6:	a1 78 98 12 00       	mov    eax,ds:0x129878
   24ceb:	85 c0                	test   eax,eax
   24ced:	74 16                	je     24d05 <kernel_main+0x232>
/home/yogi/src/os/chrisOS/src/init/init.c:280
        printk ("(debug=%X)", kDebugLevel);
   24cef:	a1 78 98 12 00       	mov    eax,ds:0x129878
   24cf4:	83 ec 08             	sub    esp,0x8
   24cf7:	50                   	push   eax
   24cf8:	68 41 4d 08 00       	push   0x84d41
   24cfd:	e8 59 2a 00 00       	call   2775b <printk>
   24d02:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:282
#endif
    printk("\n");
   24d05:	83 ec 0c             	sub    esp,0xc
   24d08:	68 4c 4d 08 00       	push   0x84d4c
   24d0d:	e8 49 2a 00 00       	call   2775b <printk>
   24d12:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:283
    if (kE820Status==0x534d4150)
   24d15:	a1 84 95 12 00       	mov    eax,ds:0x129584
   24d1a:	3d 50 41 4d 53       	cmp    eax,0x534d4150
   24d1f:	75 4f                	jne    24d70 <kernel_main+0x29d>
/home/yogi/src/os/chrisOS/src/init/init.c:285
    {
        printk("E820: available (%08X), translating ...", kE820Status);
   24d21:	a1 84 95 12 00       	mov    eax,ds:0x129584
   24d26:	83 ec 08             	sub    esp,0x8
   24d29:	50                   	push   eax
   24d2a:	68 50 4d 08 00       	push   0x84d50
   24d2f:	e8 27 2a 00 00       	call   2775b <printk>
   24d34:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:286
        kE820MemoryBytes = sum_e820_usable_memory(smap_table,kE820RecordCount);
   24d37:	0f b7 05 90 95 12 00 	movzx  eax,WORD PTR ds:0x129590
   24d3e:	0f bf d0             	movsx  edx,ax
   24d41:	a1 80 95 12 00       	mov    eax,ds:0x129580
   24d46:	83 ec 08             	sub    esp,0x8
   24d49:	52                   	push   edx
   24d4a:	50                   	push   eax
   24d4b:	e8 0d f2 ff ff       	call   23f5d <sum_e820_usable_memory>
   24d50:	83 c4 10             	add    esp,0x10
   24d53:	a3 88 95 12 00       	mov    ds:0x129588,eax
   24d58:	89 15 8c 95 12 00    	mov    DWORD PTR ds:0x12958c,edx
/home/yogi/src/os/chrisOS/src/init/init.c:287
        printk("done\n");
   24d5e:	83 ec 0c             	sub    esp,0xc
   24d61:	68 78 4d 08 00       	push   0x84d78
   24d66:	e8 f0 29 00 00       	call   2775b <printk>
   24d6b:	83 c4 10             	add    esp,0x10
   24d6e:	eb 16                	jmp    24d86 <kernel_main+0x2b3>
/home/yogi/src/os/chrisOS/src/init/init.c:291
        //print_e820_map(smap_table, kE820RecordCount);
    }
    else
        printk("E820: not available (%08X ... looking for alternatives.\n", kE820Status);
   24d70:	a1 84 95 12 00       	mov    eax,ds:0x129584
   24d75:	83 ec 08             	sub    esp,0x8
   24d78:	50                   	push   eax
   24d79:	68 80 4d 08 00       	push   0x84d80
   24d7e:	e8 d8 29 00 00       	call   2775b <printk>
   24d83:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:293

    printk("E820: Usable memory: Low=%6d (INT12), Total=%10d (E820)\n",lLowMemKB * 1024, kE820MemoryBytes);
   24d86:	a1 88 95 12 00       	mov    eax,ds:0x129588
   24d8b:	8b 15 8c 95 12 00    	mov    edx,DWORD PTR ds:0x12958c
   24d91:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   24d94:	c1 e1 0a             	shl    ecx,0xa
   24d97:	52                   	push   edx
   24d98:	50                   	push   eax
   24d99:	51                   	push   ecx
   24d9a:	68 bc 4d 08 00       	push   0x84dbc
   24d9f:	e8 b7 29 00 00       	call   2775b <printk>
   24da4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:294
    if (kE820MemoryBytes < MINIMUM_USABLE_MEMORY)
   24da7:	a1 88 95 12 00       	mov    eax,ds:0x129588
   24dac:	8b 15 8c 95 12 00    	mov    edx,DWORD PTR ds:0x12958c
   24db2:	83 fa 00             	cmp    edx,0x0
   24db5:	77 3b                	ja     24df2 <kernel_main+0x31f>
   24db7:	83 fa 00             	cmp    edx,0x0
   24dba:	72 07                	jb     24dc3 <kernel_main+0x2f0>
   24dbc:	3d ff ff ff 0f       	cmp    eax,0xfffffff
   24dc1:	77 2f                	ja     24df2 <kernel_main+0x31f>
/home/yogi/src/os/chrisOS/src/init/init.c:296
    {
        printk("\n\nE820: Either the available memory is less than the minimum required of %d MB\nor memory capacity cannot be determined\n.", MINIMUM_USABLE_MEMORY / 1024 / 1024);
   24dc3:	83 ec 08             	sub    esp,0x8
   24dc6:	68 00 01 00 00       	push   0x100
   24dcb:	68 f8 4d 08 00       	push   0x84df8
   24dd0:	e8 86 29 00 00       	call   2775b <printk>
   24dd5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:297
        printk("3820: Ignore? ");
   24dd8:	83 ec 0c             	sub    esp,0xc
   24ddb:	68 71 4e 08 00       	push   0x84e71
   24de0:	e8 76 29 00 00       	call   2775b <printk>
   24de5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:299
        
        while (waitForKeyboardKey()!='y')
   24de8:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/init.c:299 (discriminator 1)
   24de9:	e8 71 c4 fe ff       	call   1125f <waitForKeyboardKey>
   24dee:	3c 79                	cmp    al,0x79
   24df0:	75 f7                	jne    24de9 <kernel_main+0x316>
/home/yogi/src/os/chrisOS/src/init/init.c:302
        {}
    }
    __asm__ ("mov eax,%0\n push eax\n pop esp\n"::"r" (STACK_BASE_ADDRESS):"eax");
   24df2:	ba 00 ff ff 00       	mov    edx,0xffff00
   24df7:	89 d0                	mov    eax,edx
   24df9:	50                   	push   eax
   24dfa:	5c                   	pop    esp
/home/yogi/src/os/chrisOS/src/init/init.c:303
    detect_cpu();
   24dfb:	e8 9c e5 ff ff       	call   2339c <detect_cpu>
/home/yogi/src/os/chrisOS/src/init/init.c:304
    printk("CPU: Detected CPU: %s\n", kcpuInfo.brand_name);
   24e00:	83 ec 08             	sub    esp,0x8
   24e03:	68 b2 96 12 00       	push   0x1296b2
   24e08:	68 80 4e 08 00       	push   0x84e80
   24e0d:	e8 49 29 00 00       	call   2775b <printk>
   24e12:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:305
    identifyCPUFeatures(&kCPUFeatures);
   24e15:	83 ec 0c             	sub    esp,0xc
   24e18:	68 84 98 12 00       	push   0x129884
   24e1d:	e8 5e 40 ff ff       	call   18e80 <identifyCPUFeatures>
   24e22:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:306
    if (apicCheckFor())
   24e25:	e8 dc 3a ff ff       	call   18906 <apicCheckFor>
   24e2a:	84 c0                	test   al,al
   24e2c:	0f 84 ad 00 00 00    	je     24edf <kernel_main+0x40c>
/home/yogi/src/os/chrisOS/src/init/init.c:308
    {
        kCPU[0].apicID=apciGetAPICID(0);
   24e32:	83 ec 0c             	sub    esp,0xc
   24e35:	6a 00                	push   0x0
   24e37:	e8 23 3b ff ff       	call   1895f <apciGetAPICID>
   24e3c:	83 c4 10             	add    esp,0x10
   24e3f:	0f b6 c0             	movzx  eax,al
   24e42:	a3 a0 98 12 00       	mov    ds:0x1298a0,eax
/home/yogi/src/os/chrisOS/src/init/init.c:309
        kCPU[0].registerBase=apicGetAPICBase();
   24e47:	e8 28 3b ff ff       	call   18974 <apicGetAPICBase>
   24e4c:	a3 a4 98 12 00       	mov    ds:0x1298a4,eax
/home/yogi/src/os/chrisOS/src/init/init.c:310
        kCPU[0].ticksPerSecond=apicGetHZ();
   24e51:	e8 63 3c ff ff       	call   18ab9 <apicGetHZ>
   24e56:	ba 00 00 00 00       	mov    edx,0x0
   24e5b:	a3 a8 98 12 00       	mov    ds:0x1298a8,eax
   24e60:	89 15 ac 98 12 00    	mov    DWORD PTR ds:0x1298ac,edx
/home/yogi/src/os/chrisOS/src/init/init.c:312
        //IRQ_set_mask(0);
        printk("APIC: %s APIC %u Found, address %08X, initializing ... ", acpiGetAPICVersion()==0?"Discrete":"Integrated", kCPU[0].apicID, kCPU[0].registerBase);
   24e66:	8b 35 a4 98 12 00    	mov    esi,DWORD PTR ds:0x1298a4
   24e6c:	8b 1d a0 98 12 00    	mov    ebx,DWORD PTR ds:0x1298a0
   24e72:	e8 d3 3a ff ff       	call   1894a <acpiGetAPICVersion>
   24e77:	84 c0                	test   al,al
   24e79:	75 07                	jne    24e82 <kernel_main+0x3af>
/home/yogi/src/os/chrisOS/src/init/init.c:312 (discriminator 1)
   24e7b:	b8 97 4e 08 00       	mov    eax,0x84e97
   24e80:	eb 05                	jmp    24e87 <kernel_main+0x3b4>
/home/yogi/src/os/chrisOS/src/init/init.c:312 (discriminator 2)
   24e82:	b8 a0 4e 08 00       	mov    eax,0x84ea0
/home/yogi/src/os/chrisOS/src/init/init.c:312 (discriminator 4)
   24e87:	56                   	push   esi
   24e88:	53                   	push   ebx
   24e89:	50                   	push   eax
   24e8a:	68 ac 4e 08 00       	push   0x84eac
   24e8f:	e8 c7 28 00 00       	call   2775b <printk>
   24e94:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:313 (discriminator 4)
        if (apicIsEnabled())
   24e97:	e8 85 3b ff ff       	call   18a21 <apicIsEnabled>
   24e9c:	84 c0                	test   al,al
   24e9e:	74 10                	je     24eb0 <kernel_main+0x3dd>
/home/yogi/src/os/chrisOS/src/init/init.c:314
            printk("enabled ... ");
   24ea0:	83 ec 0c             	sub    esp,0xc
   24ea3:	68 e4 4e 08 00       	push   0x84ee4
   24ea8:	e8 ae 28 00 00       	call   2775b <printk>
   24ead:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:315
        printk("done\n");
   24eb0:	83 ec 0c             	sub    esp,0xc
   24eb3:	68 78 4d 08 00       	push   0x84d78
   24eb8:	e8 9e 28 00 00       	call   2775b <printk>
   24ebd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:316
        printk("APIC: Timer running at %u hz.\n",kCPU[0].ticksPerSecond);
   24ec0:	a1 a8 98 12 00       	mov    eax,ds:0x1298a8
   24ec5:	8b 15 ac 98 12 00    	mov    edx,DWORD PTR ds:0x1298ac
   24ecb:	83 ec 04             	sub    esp,0x4
   24ece:	52                   	push   edx
   24ecf:	50                   	push   eax
   24ed0:	68 f4 4e 08 00       	push   0x84ef4
   24ed5:	e8 81 28 00 00       	call   2775b <printk>
   24eda:	83 c4 10             	add    esp,0x10
   24edd:	eb 10                	jmp    24eef <kernel_main+0x41c>
/home/yogi/src/os/chrisOS/src/init/init.c:319
    }
    else
        printk("APIC: not found\n");
   24edf:	83 ec 0c             	sub    esp,0xc
   24ee2:	68 13 4f 08 00       	push   0x84f13
   24ee7:	e8 6f 28 00 00       	call   2775b <printk>
   24eec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:320
    printk("TSC: ticks per 10 = %u\n", tscGetTicksPerSecond());
   24eef:	e8 bb 3c ff ff       	call   18baf <tscGetTicksPerSecond>
   24ef4:	83 ec 08             	sub    esp,0x8
   24ef7:	50                   	push   eax
   24ef8:	68 24 4f 08 00       	push   0x84f24
   24efd:	e8 59 28 00 00       	call   2775b <printk>
   24f02:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:322
#ifndef DISABLE_PAGING
    kCPU[0].registerBase=apicGetAPICBase();
   24f05:	e8 6a 3a ff ff       	call   18974 <apicGetAPICBase>
   24f0a:	a3 a4 98 12 00       	mov    ds:0x1298a4,eax
/home/yogi/src/os/chrisOS/src/init/init.c:323
    printk("PAGING: enabling 4k paging\n");
   24f0f:	83 ec 0c             	sub    esp,0xc
   24f12:	68 3c 4f 08 00       	push   0x84f3c
   24f17:	e8 3f 28 00 00       	call   2775b <printk>
   24f1c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:324
    initializeKernelPaging();
   24f1f:	e8 08 02 00 00       	call   2512c <initializeKernelPaging>
/home/yogi/src/os/chrisOS/src/init/init.c:325
    printk("PAGING: remapping APIC from 0x%08X to 0x%08X\n", kCPU[0].registerBase, kAPICRegisterRemapAddress);
   24f24:	8b 15 70 98 12 00    	mov    edx,DWORD PTR ds:0x129870
   24f2a:	a1 a4 98 12 00       	mov    eax,ds:0x1298a4
   24f2f:	83 ec 04             	sub    esp,0x4
   24f32:	52                   	push   edx
   24f33:	50                   	push   eax
   24f34:	68 58 4f 08 00       	push   0x84f58
   24f39:	e8 1d 28 00 00       	call   2775b <printk>
   24f3e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:327
    //map APIC address 0xFEE00000 to 0x825000
    kMapPage(kAPICRegisterRemapAddress, kCPU[0].registerBase,0x13);  //0x63 + cache disabled
   24f41:	8b 15 a4 98 12 00    	mov    edx,DWORD PTR ds:0x1298a4
   24f47:	a1 70 98 12 00       	mov    eax,ds:0x129870
   24f4c:	83 ec 04             	sub    esp,0x4
   24f4f:	6a 13                	push   0x13
   24f51:	52                   	push   edx
   24f52:	50                   	push   eax
   24f53:	e8 60 c8 fe ff       	call   117b8 <kMapPage>
   24f58:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:328
    kSetPhysicalRangeRO(0x0,0xFFF,true);
   24f5b:	83 ec 04             	sub    esp,0x4
   24f5e:	6a 01                	push   0x1
   24f60:	68 ff 0f 00 00       	push   0xfff
   24f65:	6a 00                	push   0x0
   24f67:	e8 d5 cb fe ff       	call   11b41 <kSetPhysicalRangeRO>
   24f6c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:329
    testWPBit();
   24f6f:	e8 a6 fa ff ff       	call   24a1a <testWPBit>
/home/yogi/src/os/chrisOS/src/init/init.c:330
    kPagingInitDone=true;
   24f74:	c6 05 e1 97 12 00 01 	mov    BYTE PTR ds:0x1297e1,0x1
/home/yogi/src/os/chrisOS/src/init/init.c:332
#endif
    printk("CLOCK: tick frequency is %uhz\n",kTicksPerSecond);
   24f7b:	a1 c0 97 12 00       	mov    eax,ds:0x1297c0
   24f80:	83 ec 08             	sub    esp,0x8
   24f83:	50                   	push   eax
   24f84:	68 88 4f 08 00       	push   0x84f88
   24f89:	e8 cd 27 00 00       	call   2775b <printk>
   24f8e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:333
    printk("CLOCK: testing ... "); wait(100); printk("works\n");
   24f91:	83 ec 0c             	sub    esp,0xc
   24f94:	68 a7 4f 08 00       	push   0x84fa7
   24f99:	e8 bd 27 00 00       	call   2775b <printk>
   24f9e:	83 c4 10             	add    esp,0x10
   24fa1:	83 ec 0c             	sub    esp,0xc
   24fa4:	6a 64                	push   0x64
   24fa6:	e8 ef 39 00 00       	call   2899a <wait>
   24fab:	83 c4 10             	add    esp,0x10
   24fae:	83 ec 0c             	sub    esp,0xc
   24fb1:	68 bb 4f 08 00       	push   0x84fbb
   24fb6:	e8 a0 27 00 00       	call   2775b <printk>
   24fbb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:336

#ifdef __SMP__
    if (ParamExists(kBootParams,"nosmp",kBootParamCount))
   24fbe:	a1 c8 8f 09 00       	mov    eax,ds:0x98fc8
   24fc3:	83 ec 04             	sub    esp,0x4
   24fc6:	50                   	push   eax
   24fc7:	68 c2 4f 08 00       	push   0x84fc2
   24fcc:	68 e0 8f 09 00       	push   0x98fe0
   24fd1:	e8 f8 f9 ff ff       	call   249ce <ParamExists>
   24fd6:	83 c4 10             	add    esp,0x10
   24fd9:	84 c0                	test   al,al
   24fdb:	74 12                	je     24fef <kernel_main+0x51c>
/home/yogi/src/os/chrisOS/src/init/init.c:337
        printk("SMP: No AP processor startup per 'nosmp' parameter\n");
   24fdd:	83 ec 0c             	sub    esp,0xc
   24fe0:	68 c8 4f 08 00       	push   0x84fc8
   24fe5:	e8 71 27 00 00       	call   2775b <printk>
   24fea:	83 c4 10             	add    esp,0x10
   24fed:	eb 77                	jmp    25066 <kernel_main+0x593>
/home/yogi/src/os/chrisOS/src/init/init.c:340
    else
    {
        printk("SMP: Initializing, ");
   24fef:	83 ec 0c             	sub    esp,0xc
   24ff2:	68 fc 4f 08 00       	push   0x84ffc
   24ff7:	e8 5f 27 00 00       	call   2775b <printk>
   24ffc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:341
        printk("%u MP records parsed\n",mpInit());
   24fff:	e8 a7 54 ff ff       	call   1a4ab <mpInit>
   25004:	83 ec 08             	sub    esp,0x8
   25007:	50                   	push   eax
   25008:	68 10 50 08 00       	push   0x85010
   2500d:	e8 49 27 00 00       	call   2775b <printk>
   25012:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:343
        //cursorUpdateBiosCursor();
        printk("SMP: Starting up AP processors\n");
   25015:	83 ec 0c             	sub    esp,0xc
   25018:	68 28 50 08 00       	push   0x85028
   2501d:	e8 39 27 00 00       	call   2775b <printk>
   25022:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:344
        AP_startup();
   25025:	e8 9c c5 fd ff       	call   15c6 <AP_startup>
/home/yogi/src/os/chrisOS/src/init/init.c:345
        wait(500);
   2502a:	83 ec 0c             	sub    esp,0xc
   2502d:	68 f4 01 00 00       	push   0x1f4
   25032:	e8 63 39 00 00       	call   2899a <wait>
   25037:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:346
        printk("SMP: CPUs 2 thru %u (of %u total) started... done\n",smpBootCPUsStarted+1, smpBootCPUCount+1);
   2503a:	0f b6 05 a3 15 00 00 	movzx  eax,BYTE PTR ds:0x15a3
   25041:	0f b6 c0             	movzx  eax,al
   25044:	8d 50 01             	lea    edx,[eax+0x1]
   25047:	0f b6 05 a5 15 00 00 	movzx  eax,BYTE PTR ds:0x15a5
   2504e:	0f b6 c0             	movzx  eax,al
   25051:	83 c0 01             	add    eax,0x1
   25054:	83 ec 04             	sub    esp,0x4
   25057:	52                   	push   edx
   25058:	50                   	push   eax
   25059:	68 48 50 08 00       	push   0x85048
   2505e:	e8 f8 26 00 00       	call   2775b <printk>
   25063:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:351
        //if (kIOAPICPtr)
        //    kMapPage(CPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS, (uintptr_t)kIOAPICPtr, 0x13);
    }
#endif
    if (ParamExists(kBootParams,"nopci",kBootParamCount))
   25066:	a1 c8 8f 09 00       	mov    eax,ds:0x98fc8
   2506b:	83 ec 04             	sub    esp,0x4
   2506e:	50                   	push   eax
   2506f:	68 7b 50 08 00       	push   0x8507b
   25074:	68 e0 8f 09 00       	push   0x98fe0
   25079:	e8 50 f9 ff ff       	call   249ce <ParamExists>
   2507e:	83 c4 10             	add    esp,0x10
   25081:	84 c0                	test   al,al
   25083:	74 12                	je     25097 <kernel_main+0x5c4>
/home/yogi/src/os/chrisOS/src/init/init.c:352
        printk("PCI: No scanning per parameter 'nopci'\n");
   25085:	83 ec 0c             	sub    esp,0xc
   25088:	68 84 50 08 00       	push   0x85084
   2508d:	e8 c9 26 00 00       	call   2775b <printk>
   25092:	83 c4 10             	add    esp,0x10
   25095:	eb 6e                	jmp    25105 <kernel_main+0x632>
/home/yogi/src/os/chrisOS/src/init/init.c:355
    else
    {
        printk("PCI: initializing ...");
   25097:	83 ec 0c             	sub    esp,0xc
   2509a:	68 ac 50 08 00       	push   0x850ac
   2509f:	e8 b7 26 00 00       	call   2775b <printk>
   250a4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:356
        pciInitialize();
   250a7:	e8 fd 2a ff ff       	call   17ba9 <pciInitialize>
/home/yogi/src/os/chrisOS/src/init/init.c:357
        printk(" found %u %s, %u devices (%u bridges)\n",kPCIBusCount, kPCIBusCount<=1?"bus":"busses", kPCIDeviceCount, kPCIBridgeCount);
   250ac:	0f b6 05 ed 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ed
   250b3:	0f b6 c8             	movzx  ecx,al
   250b6:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
   250bd:	0f b6 d0             	movzx  edx,al
   250c0:	0f b6 05 ef 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ef
   250c7:	3c 01                	cmp    al,0x1
   250c9:	77 07                	ja     250d2 <kernel_main+0x5ff>
/home/yogi/src/os/chrisOS/src/init/init.c:357 (discriminator 1)
   250cb:	bb c2 50 08 00       	mov    ebx,0x850c2
   250d0:	eb 05                	jmp    250d7 <kernel_main+0x604>
/home/yogi/src/os/chrisOS/src/init/init.c:357 (discriminator 2)
   250d2:	bb c6 50 08 00       	mov    ebx,0x850c6
/home/yogi/src/os/chrisOS/src/init/init.c:357 (discriminator 4)
   250d7:	0f b6 05 ef 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ef
   250de:	0f b6 c0             	movzx  eax,al
   250e1:	83 ec 0c             	sub    esp,0xc
   250e4:	51                   	push   ecx
   250e5:	52                   	push   edx
   250e6:	53                   	push   ebx
   250e7:	50                   	push   eax
   250e8:	68 d0 50 08 00       	push   0x850d0
   250ed:	e8 69 26 00 00       	call   2775b <printk>
   250f2:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:358 (discriminator 4)
        printk("PCI: initialization complete ...\n");
   250f5:	83 ec 0c             	sub    esp,0xc
   250f8:	68 f8 50 08 00       	push   0x850f8
   250fd:	e8 59 26 00 00       	call   2775b <printk>
   25102:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:360
    }
    doHDSetup();
   25105:	e8 35 f2 ff ff       	call   2433f <doHDSetup>
/home/yogi/src/os/chrisOS/src/init/init.c:361
kInitDone = true;
   2510a:	c6 05 e0 97 12 00 01 	mov    BYTE PTR ds:0x1297e0,0x1
/home/yogi/src/os/chrisOS/src/init/init.c:362
    goto overStuff; /*******************************************/
   25111:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/init.c:414 (discriminator 1)
        //kpagingUpdatePresentFlagA(0x0,false);
//    __asm__("mov eax,0xdeadbead\n mov [0x0100],eax\n");    //purposely read address 0 which we made "read only"
        
//        terminal_clear();
MAINLOOPv:
        __asm__("nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n");
   25112:	90                   	nop
   25113:	90                   	nop
   25114:	90                   	nop
   25115:	90                   	nop
   25116:	90                   	nop
   25117:	90                   	nop
   25118:	90                   	nop
   25119:	90                   	nop
   2511a:	90                   	nop
   2511b:	90                   	nop
   2511c:	90                   	nop
   2511d:	90                   	nop
   2511e:	90                   	nop
   2511f:	90                   	nop
   25120:	90                   	nop
   25121:	90                   	nop
   25122:	90                   	nop
   25123:	90                   	nop
   25124:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/init.c:418 (discriminator 1)
//    char a[255];
//    gets(a,255);
//    if (!strncmp(a,"debug",5))
        biShell();
   25125:	e8 dc e5 fe ff       	call   13706 <biShell>
/home/yogi/src/os/chrisOS/src/init/init.c:422 (discriminator 1)
//    if (a>0)
//        printk("%c",a);
//    __asm__("hlt\n");
    goto MAINLOOPv;
   2512a:	eb e6                	jmp    25112 <kernel_main+0x63f>

0002512c <initializeKernelPaging>:
initializeKernelPaging():
/home/yogi/src/os/chrisOS/src/init/initPaging.c:13
extern struct idt_entry kInitialIDT[0x30];
extern struct idt_ptr kInitialIDTReg;
extern struct gdt_ptr kernelGDT;

void initializeKernelPaging()
{
   2512c:	55                   	push   ebp
   2512d:	89 e5                	mov    ebp,esp
   2512f:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/init/initPaging.c:18
        uint32_t *ptr;
        uint32_t *ptrT;
        uint32_t *ptr2;
        uint32_t *kKernelPageTables;
        uint16_t tempEntries = (0xFFFFFFFF/0x400000)+1;  //Map entire 4GB memory space 
   25132:	66 c7 45 e6 00 04    	mov    WORD PTR [ebp-0x1a],0x400
/home/yogi/src/os/chrisOS/src/init/initPaging.c:21

       
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Entering setupKernelPaging module\n");
   25138:	83 ec 08             	sub    esp,0x8
   2513b:	68 1c 51 08 00       	push   0x8511c
   25140:	6a 20                	push   0x20
   25142:	e8 34 26 00 00       	call   2777b <printd>
   25147:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:22
        ptr=(uint32_t*)kKernelPageDir;
   2514a:	a1 e4 97 12 00       	mov    eax,ds:0x1297e4
   2514f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/init/initPaging.c:23
        ptrT=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
   25152:	c7 45 f4 00 c0 4c 00 	mov    DWORD PTR [ebp-0xc],0x4cc000
/home/yogi/src/os/chrisOS/src/init/initPaging.c:24
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Page directory at 0x%08X, table at 0x%08x\n", ptr, ptrT);
   25159:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2515c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   2515f:	68 50 51 08 00       	push   0x85150
   25164:	6a 20                	push   0x20
   25166:	e8 10 26 00 00       	call   2777b <printd>
   2516b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:25
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: (0x%04X page directory entries)\n", tempEntries);
   2516e:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   25172:	83 ec 04             	sub    esp,0x4
   25175:	50                   	push   eax
   25176:	68 8c 51 08 00       	push   0x8518c
   2517b:	6a 20                	push   0x20
   2517d:	e8 f9 25 00 00       	call   2777b <printd>
   25182:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:26
        for (uint32_t cnt=0;cnt < tempEntries; cnt++)
   25185:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   2518c:	eb 65                	jmp    251f3 <initializeKernelPaging+0xc7>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:28
        {
                ptr[cnt] = (KERNEL_PAGE_TABLE_BASE_ADDRESS + (cnt*4096)) | 0x7;
   2518e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25191:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   25198:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   2519b:	01 d0                	add    eax,edx
   2519d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   251a0:	81 c2 cc 04 00 00    	add    edx,0x4cc
   251a6:	c1 e2 0c             	shl    edx,0xc
   251a9:	83 ca 07             	or     edx,0x7
   251ac:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/initPaging.c:30
                //Create a guest page table for each Page Directory
                for (int cnt2=0;cnt2<1024;cnt2++)
   251ae:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   251b5:	eb 28                	jmp    251df <initializeKernelPaging+0xb3>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:32 (discriminator 3)
                {
                    ptrT[cnt2] = ((0x400000 * cnt)  + ((cnt2) << 12)) | 0x7;
   251b7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   251ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   251c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   251c4:	01 d0                	add    eax,edx
   251c6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   251c9:	89 d1                	mov    ecx,edx
   251cb:	c1 e1 16             	shl    ecx,0x16
   251ce:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   251d1:	c1 e2 0c             	shl    edx,0xc
   251d4:	01 ca                	add    edx,ecx
   251d6:	83 ca 07             	or     edx,0x7
   251d9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/initPaging.c:30 (discriminator 3)
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: (0x%04X page directory entries)\n", tempEntries);
        for (uint32_t cnt=0;cnt < tempEntries; cnt++)
        {
                ptr[cnt] = (KERNEL_PAGE_TABLE_BASE_ADDRESS + (cnt*4096)) | 0x7;
                //Create a guest page table for each Page Directory
                for (int cnt2=0;cnt2<1024;cnt2++)
   251db:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/init/initPaging.c:30 (discriminator 1)
   251df:	81 7d ec ff 03 00 00 	cmp    DWORD PTR [ebp-0x14],0x3ff
   251e6:	7e cf                	jle    251b7 <initializeKernelPaging+0x8b>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:34 (discriminator 2)
                {
                    ptrT[cnt2] = ((0x400000 * cnt)  + ((cnt2) << 12)) | 0x7;
                }
                ptrT += 0x400;
   251e8:	81 45 f4 00 10 00 00 	add    DWORD PTR [ebp-0xc],0x1000
/home/yogi/src/os/chrisOS/src/init/initPaging.c:26 (discriminator 2)
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Entering setupKernelPaging module\n");
        ptr=(uint32_t*)kKernelPageDir;
        ptrT=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Page directory at 0x%08X, table at 0x%08x\n", ptr, ptrT);
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: (0x%04X page directory entries)\n", tempEntries);
        for (uint32_t cnt=0;cnt < tempEntries; cnt++)
   251ef:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/initPaging.c:26 (discriminator 1)
   251f3:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   251f7:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   251fa:	77 92                	ja     2518e <initializeKernelPaging+0x62>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:36
                {
                    ptrT[cnt2] = ((0x400000 * cnt)  + ((cnt2) << 12)) | 0x7;
                }
                ptrT += 0x400;
        }
        uint32_t pageDirEntrySize = 0x400000;
   251fc:	c7 45 dc 00 00 40 00 	mov    DWORD PTR [ebp-0x24],0x400000
/home/yogi/src/os/chrisOS/src/init/initPaging.c:37
        ptr2=(void*)KERNEL_PAGE_DIR_ADDRESS + (KERNEL_PAGED_BASE_ADDRESS / 0x400000)*4; //(((uint32_t)KERNEL_PAGED_BASE_ADDRESS / (uint32_t)0x400000) * 4);
   25203:	c7 45 d8 00 ac 4b 00 	mov    DWORD PTR [ebp-0x28],0x4bac00
/home/yogi/src/os/chrisOS/src/init/initPaging.c:38
        kKernelPageTables=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
   2520a:	c7 45 d4 00 c0 4c 00 	mov    DWORD PTR [ebp-0x2c],0x4cc000
/home/yogi/src/os/chrisOS/src/init/initPaging.c:40
        //Initialize Kernel Page Directory
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Kernel page dir at 0x%08X, table at 0x%08x\n", ptr2, kKernelPageTables);
   25211:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   25214:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
   25217:	68 bc 51 08 00       	push   0x851bc
   2521c:	6a 20                	push   0x20
   2521e:	e8 58 25 00 00       	call   2777b <printd>
   25223:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:41
        uint32_t pageDirEntryCount= 0x100;   //Map C0000000-FFFFFFFF=00000000-3FFFFFFF 
   25226:	c7 45 d0 00 01 00 00 	mov    DWORD PTR [ebp-0x30],0x100
/home/yogi/src/os/chrisOS/src/init/initPaging.c:42
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: 0x%08X entries\n", pageDirEntryCount);
   2522d:	83 ec 04             	sub    esp,0x4
   25230:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   25233:	68 f8 51 08 00       	push   0x851f8
   25238:	6a 20                	push   0x20
   2523a:	e8 3c 25 00 00       	call   2777b <printd>
   2523f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:43
        for (uint32_t cnt=0;cnt <= pageDirEntryCount; cnt++)
   25242:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   25249:	eb 24                	jmp    2526f <initializeKernelPaging+0x143>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:45 (discriminator 3)
        {
                ptr2[cnt] = (KERNEL_PAGE_TABLE_BASE_ADDRESS + (cnt*4096)) | 0x7;
   2524b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2524e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   25255:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   25258:	01 d0                	add    eax,edx
   2525a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   2525d:	81 c2 cc 04 00 00    	add    edx,0x4cc
   25263:	c1 e2 0c             	shl    edx,0xc
   25266:	83 ca 07             	or     edx,0x7
   25269:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/initPaging.c:43 (discriminator 3)
        kKernelPageTables=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
        //Initialize Kernel Page Directory
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Kernel page dir at 0x%08X, table at 0x%08x\n", ptr2, kKernelPageTables);
        uint32_t pageDirEntryCount= 0x100;   //Map C0000000-FFFFFFFF=00000000-3FFFFFFF 
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: 0x%08X entries\n", pageDirEntryCount);
        for (uint32_t cnt=0;cnt <= pageDirEntryCount; cnt++)
   2526b:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/init/initPaging.c:43 (discriminator 1)
   2526f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   25272:	3b 45 d0             	cmp    eax,DWORD PTR [ebp-0x30]
   25275:	76 d4                	jbe    2524b <initializeKernelPaging+0x11f>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:64
            {
                ptrT[cnt2] = ((0x400000 * cnt)  + ((cnt2) << 12)) | 0x3;
            }
            ptrT += 0x400;
*/
            __asm__("mov cr3,%0\n":: "a" (KERNEL_PAGE_DIR_ADDRESS));
   25277:	b8 00 a0 4b 00       	mov    eax,0x4ba000
   2527c:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOS/src/init/initPaging.c:65
       __asm__("mov eax,cr0\n or eax,0x80000000\n mov cr0,eax\n");
   2527f:	0f 20 c0             	mov    eax,cr0
   25282:	0d 00 00 00 80       	or     eax,0x80000000
   25287:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/src/init/initPaging.c:74
/*BEFORE:
 0 - blank
 1 (0x08) - code @ 0x0
 2 (0x10) - data @ 0x0
*/
       gdtEntry(1, KERNEL_PAGED_BASE_ADDRESS, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,
   2528a:	83 ec 08             	sub    esp,0x8
   2528d:	6a 01                	push   0x1
   2528f:	6a c0                	push   0xffffffc0
   25291:	6a 88                	push   0xffffff88
   25293:	68 ff ff 0f 00       	push   0xfffff
   25298:	68 00 00 00 c0       	push   0xc0000000
   2529d:	6a 01                	push   0x1
   2529f:	e8 6e 3a ff ff       	call   18d12 <gdtEntry>
   252a4:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/initPaging.c:76
                  GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(2, KERNEL_PAGED_BASE_ADDRESS, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE,
   252a7:	83 ec 08             	sub    esp,0x8
   252aa:	6a 01                	push   0x1
   252ac:	6a c0                	push   0xffffffc0
   252ae:	6a 82                	push   0xffffff82
   252b0:	68 ff ff 0f 00       	push   0xfffff
   252b5:	68 00 00 00 c0       	push   0xc0000000
   252ba:	6a 02                	push   0x2
   252bc:	e8 51 3a ff ff       	call   18d12 <gdtEntry>
   252c1:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/initPaging.c:84
 0 - blank
 1 (0x08) - code @ 0xC0000000
 2 (0x10) - data @ 0xC0000000
*/

        kernelGDT.limit = sizeof(sGDT) * GDT_ENTRIES - 1;
   252c4:	66 c7 05 88 99 12 00 	mov    WORD PTR ds:0x129988,0x31f
   252cb:	1f 03 
/home/yogi/src/os/chrisOS/src/init/initPaging.c:85
        kernelGDT.base = (unsigned int)INIT_GDT_TABLE_ADDRESS;
   252cd:	c7 05 8a 99 12 00 00 	mov    DWORD PTR ds:0x12998a,0x164800
   252d4:	48 16 00 
/home/yogi/src/os/chrisOS/src/init/initPaging.c:86
        set_gdt(&kernelGDT);
   252d7:	83 ec 0c             	sub    esp,0xc
   252da:	68 88 99 12 00       	push   0x129988
   252df:	e8 59 be fd ff       	call   113d <set_gdt>
   252e4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:87
        idt_init(&kInitialIDTReg, PIC_REMAP_OFFSET);
   252e7:	83 ec 08             	sub    esp,0x8
   252ea:	6a 20                	push   0x20
   252ec:	68 e0 a3 09 00       	push   0x9a3e0
   252f1:	e8 73 3c ff ff       	call   18f69 <idt_init>
   252f6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:88
        doPagingJump();
   252f9:	e8 2b c0 fd ff       	call   1329 <doPagingJump>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:92

    
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING_CONFIG) == DEBUG_PAGING_CONFIG)
   252fe:	a1 78 98 12 00       	mov    eax,ds:0x129878
   25303:	83 e0 20             	and    eax,0x20
   25306:	85 c0                	test   eax,eax
   25308:	74 15                	je     2531f <initializeKernelPaging+0x1f3>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:93
            printk("Clearing up temporary low page entries at 0x%08X\n", KERNEL_TEMP_LOW_PAGE_TABLE_BASE_ADDRESS);
   2530a:	83 ec 08             	sub    esp,0x8
   2530d:	68 00 00 09 05       	push   0x5090000
   25312:	68 18 52 08 00       	push   0x85218
   25317:	e8 3f 24 00 00       	call   2775b <printk>
   2531c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:97
#endif
        //Now that we've fixed our IDT, lets restart interrupts!
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING_CONFIG) == DEBUG_PAGING_CONFIG)
   2531f:	a1 78 98 12 00       	mov    eax,ds:0x129878
   25324:	83 e0 20             	and    eax,0x20
   25327:	85 c0                	test   eax,eax
   25329:	74 10                	je     2533b <initializeKernelPaging+0x20f>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:98
            printk("Exiting setupKernelPaging module\n");
   2532b:	83 ec 0c             	sub    esp,0xc
   2532e:	68 4c 52 08 00       	push   0x8524c
   25333:	e8 23 24 00 00       	call   2775b <printk>
   25338:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:100
#endif
}
   2533b:	90                   	nop
   2533c:	c9                   	leave  
   2533d:	c3                   	ret    
   2533e:	66 90                	xchg   ax,ax

00025340 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   25340:	55                   	push   ebp
   25341:	89 e5                	mov    ebp,esp
   25343:	83 ec 08             	sub    esp,0x8
   25346:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   25349:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2534c:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   25350:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   25353:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   25357:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   2535b:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   2535c:	90                   	nop
   2535d:	c9                   	leave  
   2535e:	c3                   	ret    

0002535f <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   2535f:	55                   	push   ebp
   25360:	89 e5                	mov    ebp,esp
   25362:	83 ec 14             	sub    esp,0x14
   25365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25368:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   2536c:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   25370:	89 c2                	mov    edx,eax
   25372:	ec                   	in     al,dx
   25373:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   25376:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   2537a:	c9                   	leave  
   2537b:	c3                   	ret    

0002537c <reverse>:
reverse():
/home/yogi/src/os/chrisOS/src/init/utility.c:30
//#include <string.h>

/* reverse:  reverse string s in place */
extern int strlen(char*);
 void reverse(char s[])
 {
   2537c:	55                   	push   ebp
   2537d:	89 e5                	mov    ebp,esp
   2537f:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/utility.c:34
     int i, j;
     char c;

     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
   25382:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   25389:	83 ec 0c             	sub    esp,0xc
   2538c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2538f:	e8 98 25 00 00       	call   2792c <strlen>
   25394:	83 c4 10             	add    esp,0x10
   25397:	83 e8 01             	sub    eax,0x1
   2539a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   2539d:	eb 39                	jmp    253d8 <reverse+0x5c>
/home/yogi/src/os/chrisOS/src/init/utility.c:35 (discriminator 3)
         c = s[i];
   2539f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   253a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   253a5:	01 d0                	add    eax,edx
   253a7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   253aa:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/init/utility.c:36 (discriminator 3)
         s[i] = s[j];
   253ad:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   253b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   253b3:	01 c2                	add    edx,eax
   253b5:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   253b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   253bb:	01 c8                	add    eax,ecx
   253bd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   253c0:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/init/utility.c:37 (discriminator 3)
         s[j] = c;
   253c2:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   253c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   253c8:	01 c2                	add    edx,eax
   253ca:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   253ce:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/init/utility.c:34 (discriminator 3)
 void reverse(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
   253d0:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
   253d4:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:34 (discriminator 1)
   253d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   253db:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   253de:	7c bf                	jl     2539f <reverse+0x23>
/home/yogi/src/os/chrisOS/src/init/utility.c:39
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
   253e0:	90                   	nop
   253e1:	c9                   	leave  
   253e2:	c3                   	ret    

000253e3 <itoa>:
itoa():
/home/yogi/src/os/chrisOS/src/init/utility.c:41
 void itoa(int n, char s[])
 {
   253e3:	55                   	push   ebp
   253e4:	89 e5                	mov    ebp,esp
   253e6:	53                   	push   ebx
   253e7:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/init/utility.c:44
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
   253ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   253ed:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   253f0:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   253f4:	79 03                	jns    253f9 <itoa+0x16>
/home/yogi/src/os/chrisOS/src/init/utility.c:45
         n = -n;          /* make n positive */
   253f6:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/init/utility.c:46
     i = 0;
   253f9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:48 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
   25400:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25403:	8d 50 01             	lea    edx,[eax+0x1]
   25406:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   25409:	89 c2                	mov    edx,eax
   2540b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2540e:	8d 1c 02             	lea    ebx,[edx+eax*1]
   25411:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   25414:	ba 67 66 66 66       	mov    edx,0x66666667
   25419:	89 c8                	mov    eax,ecx
   2541b:	f7 ea                	imul   edx
   2541d:	c1 fa 02             	sar    edx,0x2
   25420:	89 c8                	mov    eax,ecx
   25422:	c1 f8 1f             	sar    eax,0x1f
   25425:	29 c2                	sub    edx,eax
   25427:	89 d0                	mov    eax,edx
   25429:	c1 e0 02             	shl    eax,0x2
   2542c:	01 d0                	add    eax,edx
   2542e:	01 c0                	add    eax,eax
   25430:	29 c1                	sub    ecx,eax
   25432:	89 ca                	mov    edx,ecx
   25434:	89 d0                	mov    eax,edx
   25436:	83 c0 30             	add    eax,0x30
   25439:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/chrisOS/src/init/utility.c:49 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
   2543b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   2543e:	ba 67 66 66 66       	mov    edx,0x66666667
   25443:	89 c8                	mov    eax,ecx
   25445:	f7 ea                	imul   edx
   25447:	c1 fa 02             	sar    edx,0x2
   2544a:	89 c8                	mov    eax,ecx
   2544c:	c1 f8 1f             	sar    eax,0x1f
   2544f:	29 c2                	sub    edx,eax
   25451:	89 d0                	mov    eax,edx
   25453:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
   25456:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   2545a:	7f a4                	jg     25400 <itoa+0x1d>
/home/yogi/src/os/chrisOS/src/init/utility.c:50
     if (sign < 0)
   2545c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   25460:	79 13                	jns    25475 <itoa+0x92>
/home/yogi/src/os/chrisOS/src/init/utility.c:51
         s[i++] = '-';
   25462:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25465:	8d 50 01             	lea    edx,[eax+0x1]
   25468:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   2546b:	89 c2                	mov    edx,eax
   2546d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25470:	01 d0                	add    eax,edx
   25472:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/chrisOS/src/init/utility.c:52
     s[i] = '\0';
   25475:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   25478:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2547b:	01 d0                	add    eax,edx
   2547d:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:53
     reverse(s);
   25480:	83 ec 0c             	sub    esp,0xc
   25483:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   25486:	e8 f1 fe ff ff       	call   2537c <reverse>
   2548b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:54
 }
   2548e:	90                   	nop
   2548f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   25492:	c9                   	leave  
   25493:	c3                   	ret    

00025494 <itox>:
itox():
/home/yogi/src/os/chrisOS/src/init/utility.c:56
void itox(unsigned int i, char *s)
{
   25494:	55                   	push   ebp
   25495:	89 e5                	mov    ebp,esp
   25497:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:59
    unsigned char n;

    s += 4;
   2549a:	83 45 0c 04          	add    DWORD PTR [ebp+0xc],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:60
    *s = '\0';
   2549e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   254a1:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:62

    for (n = 8; n != 0; --n) {
   254a4:	c6 45 ff 08          	mov    BYTE PTR [ebp-0x1],0x8
   254a8:	eb 1e                	jmp    254c8 <itox+0x34>
/home/yogi/src/os/chrisOS/src/init/utility.c:63 (discriminator 3)
        *--s = "0123456789ABCDEF"[i & 0x0F];
   254aa:	83 6d 0c 01          	sub    DWORD PTR [ebp+0xc],0x1
   254ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   254b1:	83 e0 0f             	and    eax,0xf
   254b4:	0f b6 90 80 53 08 00 	movzx  edx,BYTE PTR [eax+0x85380]
   254bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   254be:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:64 (discriminator 3)
        i >>= 4;
   254c0:	c1 6d 08 04          	shr    DWORD PTR [ebp+0x8],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:62 (discriminator 3)
    unsigned char n;

    s += 4;
    *s = '\0';

    for (n = 8; n != 0; --n) {
   254c4:	80 6d ff 01          	sub    BYTE PTR [ebp-0x1],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:62 (discriminator 1)
   254c8:	80 7d ff 00          	cmp    BYTE PTR [ebp-0x1],0x0
   254cc:	75 dc                	jne    254aa <itox+0x16>
/home/yogi/src/os/chrisOS/src/init/utility.c:66
        *--s = "0123456789ABCDEF"[i & 0x0F];
        i >>= 4;
    }
}
   254ce:	90                   	nop
   254cf:	c9                   	leave  
   254d0:	c3                   	ret    

000254d1 <atoi>:
atoi():
/home/yogi/src/os/chrisOS/src/init/utility.c:69
// A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
int atoi(char *str)
{
   254d1:	55                   	push   ebp
   254d2:	89 e5                	mov    ebp,esp
   254d4:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:70
    int res = 0; // Initialize result
   254d7:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:74
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
   254de:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   254e5:	eb 28                	jmp    2550f <atoi+0x3e>
/home/yogi/src/os/chrisOS/src/init/utility.c:75 (discriminator 3)
        res = res*10 + str[i] - '0';
   254e7:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   254ea:	89 d0                	mov    eax,edx
   254ec:	c1 e0 02             	shl    eax,0x2
   254ef:	01 d0                	add    eax,edx
   254f1:	01 c0                	add    eax,eax
   254f3:	89 c1                	mov    ecx,eax
   254f5:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   254f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   254fb:	01 d0                	add    eax,edx
   254fd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   25500:	0f be c0             	movsx  eax,al
   25503:	01 c8                	add    eax,ecx
   25505:	83 e8 30             	sub    eax,0x30
   25508:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:74 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
   2550b:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:74 (discriminator 1)
   2550f:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   25512:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25515:	01 d0                	add    eax,edx
   25517:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2551a:	84 c0                	test   al,al
   2551c:	75 c9                	jne    254e7 <atoi+0x16>
/home/yogi/src/os/chrisOS/src/init/utility.c:78
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
   2551e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/init/utility.c:79
}
   25521:	c9                   	leave  
   25522:	c3                   	ret    

00025523 <convert>:
convert():
/home/yogi/src/os/chrisOS/src/init/utility.c:82

int convert(int s)
{
   25523:	55                   	push   ebp
   25524:	89 e5                	mov    ebp,esp
   25526:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:84
  int c;
  char hex[] = {'A', 'B', 'C', 'D', 'E', 'F'};
   25529:	c6 45 f6 41          	mov    BYTE PTR [ebp-0xa],0x41
   2552d:	c6 45 f7 42          	mov    BYTE PTR [ebp-0x9],0x42
   25531:	c6 45 f8 43          	mov    BYTE PTR [ebp-0x8],0x43
   25535:	c6 45 f9 44          	mov    BYTE PTR [ebp-0x7],0x44
   25539:	c6 45 fa 45          	mov    BYTE PTR [ebp-0x6],0x45
   2553d:	c6 45 fb 46          	mov    BYTE PTR [ebp-0x5],0x46
/home/yogi/src/os/chrisOS/src/init/utility.c:85
  c = (s >= 0 && s < 9) ? s + '0' : hex[s - 10];
   25541:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   25545:	78 0e                	js     25555 <convert+0x32>
/home/yogi/src/os/chrisOS/src/init/utility.c:85 (discriminator 1)
   25547:	83 7d 08 08          	cmp    DWORD PTR [ebp+0x8],0x8
   2554b:	7f 08                	jg     25555 <convert+0x32>
/home/yogi/src/os/chrisOS/src/init/utility.c:85 (discriminator 3)
   2554d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25550:	83 c0 30             	add    eax,0x30
   25553:	eb 0e                	jmp    25563 <convert+0x40>
/home/yogi/src/os/chrisOS/src/init/utility.c:85 (discriminator 4)
   25555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25558:	83 e8 0a             	sub    eax,0xa
   2555b:	0f b6 44 05 f6       	movzx  eax,BYTE PTR [ebp+eax*1-0xa]
   25560:	0f be c0             	movsx  eax,al
/home/yogi/src/os/chrisOS/src/init/utility.c:85 (discriminator 6)
   25563:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:86 (discriminator 6)
  return c;
   25566:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/init/utility.c:87 (discriminator 6)
}
   25569:	c9                   	leave  
   2556a:	c3                   	ret    

0002556b <itoha>:
itoha():
/home/yogi/src/os/chrisOS/src/init/utility.c:90

void itoha(unsigned int n, char *buf)
{
   2556b:	55                   	push   ebp
   2556c:	89 e5                	mov    ebp,esp
   2556e:	53                   	push   ebx
   2556f:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:91
  int i = 0, j =0;
   25572:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   25579:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:92
  j=7;
   25580:	c7 45 f8 07 00 00 00 	mov    DWORD PTR [ebp-0x8],0x7
/home/yogi/src/os/chrisOS/src/init/utility.c:93
  while(n != 0)
   25587:	eb 37                	jmp    255c0 <itoha+0x55>
/home/yogi/src/os/chrisOS/src/init/utility.c:95
  {
    i = n % 16;
   25589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2558c:	83 e0 0f             	and    eax,0xf
   2558f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:96
      buf[j--] = convert(i);
   25592:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   25595:	8d 50 ff             	lea    edx,[eax-0x1]
   25598:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   2559b:	89 c2                	mov    edx,eax
   2559d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   255a0:	8d 1c 02             	lea    ebx,[edx+eax*1]
   255a3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   255a6:	e8 78 ff ff ff       	call   25523 <convert>
   255ab:	83 c4 04             	add    esp,0x4
   255ae:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/chrisOS/src/init/utility.c:97
      n = (n - i) / 16;
   255b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   255b3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   255b6:	29 c2                	sub    edx,eax
   255b8:	89 d0                	mov    eax,edx
   255ba:	c1 e8 04             	shr    eax,0x4
   255bd:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:93

void itoha(unsigned int n, char *buf)
{
  int i = 0, j =0;
  j=7;
  while(n != 0)
   255c0:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   255c4:	75 c3                	jne    25589 <itoha+0x1e>
/home/yogi/src/os/chrisOS/src/init/utility.c:99
  {
    i = n % 16;
      buf[j--] = convert(i);
      n = (n - i) / 16;
  }
  buf[j] = '\0';
   255c6:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   255c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   255cc:	01 d0                	add    eax,edx
   255ce:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:100
}
   255d1:	90                   	nop
   255d2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   255d5:	c9                   	leave  
   255d6:	c3                   	ret    

000255d7 <identify_data_sizes>:
identify_data_sizes():
/home/yogi/src/os/chrisOS/src/init/utility.c:103

void identify_data_sizes(sizeof_t* sizes)
{
   255d7:	55                   	push   ebp
   255d8:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/utility.c:104
    sizes->shortSize = sizeof(short);
   255da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   255dd:	66 c7 00 02 00       	mov    WORD PTR [eax],0x2
/home/yogi/src/os/chrisOS/src/init/utility.c:105
    sizes->intSize = sizeof(int);
   255e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   255e5:	66 c7 40 02 04 00    	mov    WORD PTR [eax+0x2],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:106
    sizes->longSize = sizeof(long);
   255eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   255ee:	66 c7 40 04 04 00    	mov    WORD PTR [eax+0x4],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:107
    sizes->longLongSize = sizeof(long long);
   255f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   255f7:	66 c7 40 06 08 00    	mov    WORD PTR [eax+0x6],0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:108
    sizes->longLongIntSize = sizeof(long long int);
   255fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25600:	66 c7 40 08 08 00    	mov    WORD PTR [eax+0x8],0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:109
}
   25606:	90                   	nop
   25607:	5d                   	pop    ebp
   25608:	c3                   	ret    

00025609 <memset>:
memset():
/home/yogi/src/os/chrisOS/src/init/utility.c:112

void *memset(void *d1, int val, size_t len)
{
   25609:	55                   	push   ebp
   2560a:	89 e5                	mov    ebp,esp
   2560c:	83 ec 20             	sub    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:113
    uint8_t *d = d1;
   2560f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25612:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:114
    uint16_t*e = d1;
   25615:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25618:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:115
    uint16_t eVal=(val << 16) | (val << 8) | val;
   2561b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2561e:	c1 e0 10             	shl    eax,0x10
   25621:	89 c2                	mov    edx,eax
   25623:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25626:	c1 e0 08             	shl    eax,0x8
   25629:	09 c2                	or     edx,eax
   2562b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2562e:	09 d0                	or     eax,edx
   25630:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
/home/yogi/src/os/chrisOS/src/init/utility.c:116
    uint32_t*f = d1;
   25634:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25637:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:117
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
   2563a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2563d:	c1 e0 18             	shl    eax,0x18
   25640:	89 c2                	mov    edx,eax
   25642:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25645:	c1 e0 10             	shl    eax,0x10
   25648:	09 c2                	or     edx,eax
   2564a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2564d:	c1 e0 08             	shl    eax,0x8
   25650:	09 d0                	or     eax,edx
   25652:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
   25655:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:119
    
    if ((len%4)==0)
   25658:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2565b:	83 e0 03             	and    eax,0x3
   2565e:	85 c0                	test   eax,eax
   25660:	75 1c                	jne    2567e <memset+0x75>
/home/yogi/src/os/chrisOS/src/init/utility.c:120
    while (len-=4) {
   25662:	eb 0e                	jmp    25672 <memset+0x69>
/home/yogi/src/os/chrisOS/src/init/utility.c:121
        *d++ = fVal;
   25664:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   25667:	8d 50 01             	lea    edx,[eax+0x1]
   2566a:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   2566d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   25670:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:120
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
   25672:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
   25676:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   2567a:	75 e8                	jne    25664 <memset+0x5b>
   2567c:	eb 42                	jmp    256c0 <memset+0xb7>
/home/yogi/src/os/chrisOS/src/init/utility.c:123
        *d++ = fVal;
    }
    else if (((len%2)==0))
   2567e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25681:	83 e0 01             	and    eax,0x1
   25684:	85 c0                	test   eax,eax
   25686:	75 2b                	jne    256b3 <memset+0xaa>
/home/yogi/src/os/chrisOS/src/init/utility.c:124
    while (len-=2) {
   25688:	eb 0f                	jmp    25699 <memset+0x90>
/home/yogi/src/os/chrisOS/src/init/utility.c:125
        *d++ = eVal;
   2568a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   2568d:	8d 50 01             	lea    edx,[eax+0x1]
   25690:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   25693:	0f b7 55 f6          	movzx  edx,WORD PTR [ebp-0xa]
   25697:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:124
    if ((len%4)==0)
    while (len-=4) {
        *d++ = fVal;
    }
    else if (((len%2)==0))
    while (len-=2) {
   25699:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
   2569d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   256a1:	75 e7                	jne    2568a <memset+0x81>
   256a3:	eb 1b                	jmp    256c0 <memset+0xb7>
/home/yogi/src/os/chrisOS/src/init/utility.c:129
        *d++ = eVal;
    }
    else
    while (len--) {
        *d++ = val;
   256a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   256a8:	8d 50 01             	lea    edx,[eax+0x1]
   256ab:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   256ae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   256b1:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:128
    else if (((len%2)==0))
    while (len-=2) {
        *d++ = eVal;
    }
    else
    while (len--) {
   256b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   256b6:	8d 50 ff             	lea    edx,[eax-0x1]
   256b9:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   256bc:	85 c0                	test   eax,eax
   256be:	75 e5                	jne    256a5 <memset+0x9c>
/home/yogi/src/os/chrisOS/src/init/utility.c:131
        *d++ = val;
    }
    return d1;
   256c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/init/utility.c:132
}
   256c3:	c9                   	leave  
   256c4:	c3                   	ret    

000256c5 <bcdToDec>:
bcdToDec():
/home/yogi/src/os/chrisOS/src/init/utility.c:135

uint8_t bcdToDec(uint8_t val)
{
   256c5:	55                   	push   ebp
   256c6:	89 e5                	mov    ebp,esp
   256c8:	83 ec 04             	sub    esp,0x4
   256cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   256ce:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/init/utility.c:136
  return ( (val/16*10) + (val%16) );
   256d1:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   256d5:	c0 e8 04             	shr    al,0x4
   256d8:	89 c2                	mov    edx,eax
   256da:	89 d0                	mov    eax,edx
   256dc:	c1 e0 02             	shl    eax,0x2
   256df:	01 d0                	add    eax,edx
   256e1:	01 c0                	add    eax,eax
   256e3:	89 c2                	mov    edx,eax
   256e5:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   256e9:	83 e0 0f             	and    eax,0xf
   256ec:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/init/utility.c:137
}
   256ee:	c9                   	leave  
   256ef:	c3                   	ret    

000256f0 <decToBcd>:
decToBcd():
/home/yogi/src/os/chrisOS/src/init/utility.c:140

uint8_t decToBcd(uint8_t val)
{
   256f0:	55                   	push   ebp
   256f1:	89 e5                	mov    ebp,esp
   256f3:	53                   	push   ebx
   256f4:	83 ec 04             	sub    esp,0x4
   256f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   256fa:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/src/init/utility.c:141
  return ( (val/10*16) + (val%10) );
   256fd:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   25701:	0f b6 d0             	movzx  edx,al
   25704:	89 d0                	mov    eax,edx
   25706:	c1 e0 02             	shl    eax,0x2
   25709:	01 d0                	add    eax,edx
   2570b:	c1 e0 03             	shl    eax,0x3
   2570e:	01 d0                	add    eax,edx
   25710:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   25717:	01 d0                	add    eax,edx
   25719:	66 c1 e8 08          	shr    ax,0x8
   2571d:	c0 e8 03             	shr    al,0x3
   25720:	c1 e0 04             	shl    eax,0x4
   25723:	89 c3                	mov    ebx,eax
   25725:	0f b6 4d f8          	movzx  ecx,BYTE PTR [ebp-0x8]
   25729:	0f b6 d1             	movzx  edx,cl
   2572c:	89 d0                	mov    eax,edx
   2572e:	c1 e0 02             	shl    eax,0x2
   25731:	01 d0                	add    eax,edx
   25733:	c1 e0 03             	shl    eax,0x3
   25736:	01 d0                	add    eax,edx
   25738:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   2573f:	01 d0                	add    eax,edx
   25741:	66 c1 e8 08          	shr    ax,0x8
   25745:	89 c2                	mov    edx,eax
   25747:	c0 ea 03             	shr    dl,0x3
   2574a:	89 d0                	mov    eax,edx
   2574c:	c1 e0 02             	shl    eax,0x2
   2574f:	01 d0                	add    eax,edx
   25751:	01 c0                	add    eax,eax
   25753:	29 c1                	sub    ecx,eax
   25755:	89 ca                	mov    edx,ecx
   25757:	8d 04 13             	lea    eax,[ebx+edx*1]
/home/yogi/src/os/chrisOS/src/init/utility.c:142
}
   2575a:	83 c4 04             	add    esp,0x4
   2575d:	5b                   	pop    ebx
   2575e:	5d                   	pop    ebp
   2575f:	c3                   	ret    

00025760 <initSystemDate>:
initSystemDate():
/home/yogi/src/os/chrisOS/src/init/utility.c:144
void initSystemDate()
{
   25760:	55                   	push   ebp
   25761:	89 e5                	mov    ebp,esp
   25763:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/init/utility.c:147
    struct tm tmbuf;

    outb(0x70, 0x00);
   25766:	6a 00                	push   0x0
   25768:	6a 70                	push   0x70
   2576a:	e8 d1 fb ff ff       	call   25340 <outb>
   2576f:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:148
    tmbuf.tm_sec = bcdToDec(inb(0x71));
   25772:	6a 71                	push   0x71
   25774:	e8 e6 fb ff ff       	call   2535f <inb>
   25779:	83 c4 04             	add    esp,0x4
   2577c:	0f b6 c0             	movzx  eax,al
   2577f:	50                   	push   eax
   25780:	e8 40 ff ff ff       	call   256c5 <bcdToDec>
   25785:	83 c4 04             	add    esp,0x4
   25788:	0f b6 c0             	movzx  eax,al
   2578b:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:149
    outb(0x70, 0x02);
   2578e:	6a 02                	push   0x2
   25790:	6a 70                	push   0x70
   25792:	e8 a9 fb ff ff       	call   25340 <outb>
   25797:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:150
    tmbuf.tm_min = bcdToDec(inb(0x71));
   2579a:	6a 71                	push   0x71
   2579c:	e8 be fb ff ff       	call   2535f <inb>
   257a1:	83 c4 04             	add    esp,0x4
   257a4:	0f b6 c0             	movzx  eax,al
   257a7:	50                   	push   eax
   257a8:	e8 18 ff ff ff       	call   256c5 <bcdToDec>
   257ad:	83 c4 04             	add    esp,0x4
   257b0:	0f b6 c0             	movzx  eax,al
   257b3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:151
    outb(0x70, 0x04);
   257b6:	6a 04                	push   0x4
   257b8:	6a 70                	push   0x70
   257ba:	e8 81 fb ff ff       	call   25340 <outb>
   257bf:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:152
    tmbuf.tm_hour = bcdToDec(inb(0x71));
   257c2:	6a 71                	push   0x71
   257c4:	e8 96 fb ff ff       	call   2535f <inb>
   257c9:	83 c4 04             	add    esp,0x4
   257cc:	0f b6 c0             	movzx  eax,al
   257cf:	50                   	push   eax
   257d0:	e8 f0 fe ff ff       	call   256c5 <bcdToDec>
   257d5:	83 c4 04             	add    esp,0x4
   257d8:	0f b6 c0             	movzx  eax,al
   257db:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:153
    outb(0x70, 0x07);
   257de:	6a 07                	push   0x7
   257e0:	6a 70                	push   0x70
   257e2:	e8 59 fb ff ff       	call   25340 <outb>
   257e7:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:154
    tmbuf.tm_mday = bcdToDec(inb(0x71));
   257ea:	6a 71                	push   0x71
   257ec:	e8 6e fb ff ff       	call   2535f <inb>
   257f1:	83 c4 04             	add    esp,0x4
   257f4:	0f b6 c0             	movzx  eax,al
   257f7:	50                   	push   eax
   257f8:	e8 c8 fe ff ff       	call   256c5 <bcdToDec>
   257fd:	83 c4 04             	add    esp,0x4
   25800:	0f b6 c0             	movzx  eax,al
   25803:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:155
    outb(0x70, 0x08);
   25806:	6a 08                	push   0x8
   25808:	6a 70                	push   0x70
   2580a:	e8 31 fb ff ff       	call   25340 <outb>
   2580f:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:156
    tmbuf.tm_mon = bcdToDec(inb(0x71));
   25812:	6a 71                	push   0x71
   25814:	e8 46 fb ff ff       	call   2535f <inb>
   25819:	83 c4 04             	add    esp,0x4
   2581c:	0f b6 c0             	movzx  eax,al
   2581f:	50                   	push   eax
   25820:	e8 a0 fe ff ff       	call   256c5 <bcdToDec>
   25825:	83 c4 04             	add    esp,0x4
   25828:	0f b6 c0             	movzx  eax,al
   2582b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:157
    outb(0x70, 0x09);
   2582e:	6a 09                	push   0x9
   25830:	6a 70                	push   0x70
   25832:	e8 09 fb ff ff       	call   25340 <outb>
   25837:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:158
    tmbuf.tm_year = bcdToDec(inb(0x71));
   2583a:	6a 71                	push   0x71
   2583c:	e8 1e fb ff ff       	call   2535f <inb>
   25841:	83 c4 04             	add    esp,0x4
   25844:	0f b6 c0             	movzx  eax,al
   25847:	50                   	push   eax
   25848:	e8 78 fe ff ff       	call   256c5 <bcdToDec>
   2584d:	83 c4 04             	add    esp,0x4
   25850:	0f b6 c0             	movzx  eax,al
   25853:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:159
    tmbuf.tm_isdst = -1;
   25856:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/chrisOS/src/init/utility.c:160
    tmbuf.tm_year += 2000;
   2585d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   25860:	05 d0 07 00 00       	add    eax,0x7d0
   25865:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:161
    tmbuf.tm_year = tmbuf.tm_year - 1900;
   25868:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   2586b:	2d 6c 07 00 00       	sub    eax,0x76c
   25870:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:162
    kSystemStartTime = mktime(&tmbuf);
   25873:	83 ec 0c             	sub    esp,0xc
   25876:	8d 45 cc             	lea    eax,[ebp-0x34]
   25879:	50                   	push   eax
   2587a:	e8 98 28 00 00       	call   28117 <mktime>
   2587f:	83 c4 10             	add    esp,0x10
   25882:	a3 c8 97 12 00       	mov    ds:0x1297c8,eax
/home/yogi/src/os/chrisOS/src/init/utility.c:163
    kSystemCurrentTime = kSystemStartTime;
   25887:	a1 c8 97 12 00       	mov    eax,ds:0x1297c8
   2588c:	a3 cc 97 12 00       	mov    ds:0x1297cc,eax
/home/yogi/src/os/chrisOS/src/init/utility.c:165
//printf("System Date = %d/%d/%d %d:%d:%d\n", tmbuf.tm_mon, tmbuf.tm_mday, tmbuf.tm_year, tmbuf.tm_hour, tmbuf.tm_min, tmbuf.tm_sec, tmbuf.tm_hour, tmbuf.tm_min, tmbuf.tm_sec);
}
   25891:	90                   	nop
   25892:	c9                   	leave  
   25893:	c3                   	ret    

00025894 <strtoupper>:
strtoupper():
/home/yogi/src/os/chrisOS/src/init/utility.c:167
char * strtoupper(char* pointerToString)
{
   25894:	55                   	push   ebp
   25895:	89 e5                	mov    ebp,esp
   25897:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/utility.c:168
    uint8_t start=0, length=strlen(pointerToString);
   2589a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   2589e:	83 ec 0c             	sub    esp,0xc
   258a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   258a4:	e8 83 20 00 00       	call   2792c <strlen>
   258a9:	83 c4 10             	add    esp,0x10
   258ac:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/init/utility.c:169
    char* myPtr=pointerToString;
   258af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   258b2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:172
    
        // Trim.Start:
        while (start<length)
   258b5:	eb 44                	jmp    258fb <strtoupper+0x67>
/home/yogi/src/os/chrisOS/src/init/utility.c:174
        {
            if (myPtr[start]>='a' && myPtr[start]<='z')
   258b7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   258bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   258be:	01 d0                	add    eax,edx
   258c0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   258c3:	3c 60                	cmp    al,0x60
   258c5:	7e 2a                	jle    258f1 <strtoupper+0x5d>
/home/yogi/src/os/chrisOS/src/init/utility.c:174 (discriminator 1)
   258c7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   258cb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   258ce:	01 d0                	add    eax,edx
   258d0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   258d3:	3c 7a                	cmp    al,0x7a
   258d5:	7f 1a                	jg     258f1 <strtoupper+0x5d>
/home/yogi/src/os/chrisOS/src/init/utility.c:175
                myPtr[start]-=32;
   258d7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   258db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   258de:	01 d0                	add    eax,edx
   258e0:	0f b6 4d f7          	movzx  ecx,BYTE PTR [ebp-0x9]
   258e4:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   258e7:	01 ca                	add    edx,ecx
   258e9:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   258ec:	83 ea 20             	sub    edx,0x20
   258ef:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:176
            start++;
   258f1:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   258f5:	83 c0 01             	add    eax,0x1
   258f8:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/init/utility.c:172
{
    uint8_t start=0, length=strlen(pointerToString);
    char* myPtr=pointerToString;
    
        // Trim.Start:
        while (start<length)
   258fb:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   258ff:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
   25902:	72 b3                	jb     258b7 <strtoupper+0x23>
/home/yogi/src/os/chrisOS/src/init/utility.c:179
            if (myPtr[start]>='a' && myPtr[start]<='z')
                myPtr[start]-=32;
            start++;
        }

    return pointerToString;
   25904:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/init/utility.c:180
}
   25907:	c9                   	leave  
   25908:	c3                   	ret    

00025909 <printDumpedRegs>:
printDumpedRegs():
/home/yogi/src/os/chrisOS/src/init/utility.c:183

void printDumpedRegs()
{
   25909:	55                   	push   ebp
   2590a:	89 e5                	mov    ebp,esp
   2590c:	56                   	push   esi
   2590d:	53                   	push   ebx
   2590e:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:184
    uint32_t esp = exceptionSavedESP;
   25911:	a1 2c 97 12 00       	mov    eax,ds:0x12972c
   25916:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:188
    uint8_t* lCSIPPtr;

    
    lCSIPPtr=(uint8_t*)(exceptionEIP);
   25919:	a1 38 97 12 00       	mov    eax,ds:0x129738
   2591e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:189
    printk("EAX=%08X\tEBX=%08X\tECX=%08X\tEDX=%08X\tEFL=%08X\n", exceptionAX, exceptionBX, exceptionCX, exceptionDX,exceptionFlags);
   25921:	8b 35 30 97 12 00    	mov    esi,DWORD PTR ds:0x129730
   25927:	8b 1d fc 96 12 00    	mov    ebx,DWORD PTR ds:0x1296fc
   2592d:	8b 0d f8 96 12 00    	mov    ecx,DWORD PTR ds:0x1296f8
   25933:	8b 15 f4 96 12 00    	mov    edx,DWORD PTR ds:0x1296f4
   25939:	a1 f0 96 12 00       	mov    eax,ds:0x1296f0
   2593e:	83 ec 08             	sub    esp,0x8
   25941:	56                   	push   esi
   25942:	53                   	push   ebx
   25943:	51                   	push   ecx
   25944:	52                   	push   edx
   25945:	50                   	push   eax
   25946:	68 94 53 08 00       	push   0x85394
   2594b:	e8 0b 1e 00 00       	call   2775b <printk>
   25950:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:190
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", exceptionBP, exceptionSI, exceptionDI, exceptionSavedESP);
   25953:	8b 1d 2c 97 12 00    	mov    ebx,DWORD PTR ds:0x12972c
   25959:	8b 0d 04 97 12 00    	mov    ecx,DWORD PTR ds:0x129704
   2595f:	8b 15 00 97 12 00    	mov    edx,DWORD PTR ds:0x129700
   25965:	a1 08 97 12 00       	mov    eax,ds:0x129708
   2596a:	83 ec 0c             	sub    esp,0xc
   2596d:	53                   	push   ebx
   2596e:	51                   	push   ecx
   2596f:	52                   	push   edx
   25970:	50                   	push   eax
   25971:	68 c4 53 08 00       	push   0x853c4
   25976:	e8 e0 1d 00 00       	call   2775b <printk>
   2597b:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:191
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\tCR4=%08X\n", exceptionCR0, exceptionCR2, exceptionCR3, exceptionCR4);
   2597e:	8b 1d 14 97 12 00    	mov    ebx,DWORD PTR ds:0x129714
   25984:	8b 0d 10 97 12 00    	mov    ecx,DWORD PTR ds:0x129710
   2598a:	8b 15 40 97 12 00    	mov    edx,DWORD PTR ds:0x129740
   25990:	a1 0c 97 12 00       	mov    eax,ds:0x12970c
   25995:	83 ec 0c             	sub    esp,0xc
   25998:	53                   	push   ebx
   25999:	51                   	push   ecx
   2599a:	52                   	push   edx
   2599b:	50                   	push   eax
   2599c:	68 ec 53 08 00       	push   0x853ec
   259a1:	e8 b5 1d 00 00       	call   2775b <printk>
   259a6:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:192
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", exceptionDS, exceptionES, exceptionGS, exceptionFS);
   259a9:	8b 1d 20 97 12 00    	mov    ebx,DWORD PTR ds:0x129720
   259af:	8b 0d 24 97 12 00    	mov    ecx,DWORD PTR ds:0x129724
   259b5:	8b 15 1c 97 12 00    	mov    edx,DWORD PTR ds:0x12971c
   259bb:	a1 18 97 12 00       	mov    eax,ds:0x129718
   259c0:	83 ec 0c             	sub    esp,0xc
   259c3:	53                   	push   ebx
   259c4:	51                   	push   ecx
   259c5:	52                   	push   edx
   259c6:	50                   	push   eax
   259c7:	68 14 54 08 00       	push   0x85414
   259cc:	e8 8a 1d 00 00       	call   2775b <printk>
   259d1:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:193
    printk("GDT=%08X\t TR=0x%08X\n",kernelGDT.base,exceptionTR);
   259d4:	8b 15 44 97 12 00    	mov    edx,DWORD PTR ds:0x129744
   259da:	a1 8a 99 12 00       	mov    eax,ds:0x12998a
   259df:	83 ec 04             	sub    esp,0x4
   259e2:	52                   	push   edx
   259e3:	50                   	push   eax
   259e4:	68 39 54 08 00       	push   0x85439
   259e9:	e8 6d 1d 00 00       	call   2775b <printk>
   259ee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:194
    printk("CS:EIP = %04X:%08X, error code=%08X\n", exceptionCS, exceptionEIP, exceptionErrorCode);
   259f1:	8b 0d 34 97 12 00    	mov    ecx,DWORD PTR ds:0x129734
   259f7:	8b 15 38 97 12 00    	mov    edx,DWORD PTR ds:0x129738
   259fd:	a1 3c 97 12 00       	mov    eax,ds:0x12973c
   25a02:	51                   	push   ecx
   25a03:	52                   	push   edx
   25a04:	50                   	push   eax
   25a05:	68 50 54 08 00       	push   0x85450
   25a0a:	e8 4c 1d 00 00       	call   2775b <printk>
   25a0f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:195
          printk("Bytes at CS:EIP: ");
   25a12:	83 ec 0c             	sub    esp,0xc
   25a15:	68 75 54 08 00       	push   0x85475
   25a1a:	e8 3c 1d 00 00       	call   2775b <printk>
   25a1f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:198
/*          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
*/          printk("\n");
   25a22:	83 ec 0c             	sub    esp,0xc
   25a25:	68 87 54 08 00       	push   0x85487
   25a2a:	e8 2c 1d 00 00       	call   2775b <printk>
   25a2f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:199
          printk ("Stack @ 0x%08x:0x%08X:\n",exceptionSS, esp);
   25a32:	a1 28 97 12 00       	mov    eax,ds:0x129728
   25a37:	83 ec 04             	sub    esp,0x4
   25a3a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   25a3d:	50                   	push   eax
   25a3e:	68 89 54 08 00       	push   0x85489
   25a43:	e8 13 1d 00 00       	call   2775b <printk>
   25a48:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:200
          for (int cnt=0;cnt<10;cnt++)
   25a4b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   25a52:	eb 2b                	jmp    25a7f <printDumpedRegs+0x176>
/home/yogi/src/os/chrisOS/src/init/utility.c:202 (discriminator 3)
          {
              printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
   25a54:	a1 e8 96 12 00       	mov    eax,ds:0x1296e8
   25a59:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   25a5c:	c1 e2 02             	shl    edx,0x2
   25a5f:	01 d0                	add    eax,edx
   25a61:	8b 00                	mov    eax,DWORD PTR [eax]
   25a63:	83 ec 04             	sub    esp,0x4
   25a66:	50                   	push   eax
   25a67:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   25a6a:	68 a1 54 08 00       	push   0x854a1
   25a6f:	e8 e7 1c 00 00       	call   2775b <printk>
   25a74:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:203 (discriminator 3)
              esp+=4;
   25a77:	83 45 f4 04          	add    DWORD PTR [ebp-0xc],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:200 (discriminator 3)
          printk("Bytes at CS:EIP: ");
/*          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
*/          printk("\n");
          printk ("Stack @ 0x%08x:0x%08X:\n",exceptionSS, esp);
          for (int cnt=0;cnt<10;cnt++)
   25a7b:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:200 (discriminator 1)
   25a7f:	83 7d f0 09          	cmp    DWORD PTR [ebp-0x10],0x9
   25a83:	7e cf                	jle    25a54 <printDumpedRegs+0x14b>
/home/yogi/src/os/chrisOS/src/init/utility.c:207
              printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
              esp+=4;
          }


}
   25a85:	90                   	nop
   25a86:	8d 65 f8             	lea    esp,[ebp-0x8]
   25a89:	5b                   	pop    ebx
   25a8a:	5e                   	pop    esi
   25a8b:	5d                   	pop    ebp
   25a8c:	c3                   	ret    

00025a8d <printDebugRegs>:
printDebugRegs():
/home/yogi/src/os/chrisOS/src/init/utility.c:210

void printDebugRegs()
{
   25a8d:	55                   	push   ebp
   25a8e:	89 e5                	mov    ebp,esp
   25a90:	56                   	push   esi
   25a91:	53                   	push   ebx
   25a92:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:211
    uint32_t esp = debugSavedESP;
   25a95:	a1 84 97 12 00       	mov    eax,ds:0x129784
   25a9a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:214
    uint8_t* lCSIPPtr;

    lCSIPPtr=(uint8_t*)(debugEIP);
   25a9d:	a1 94 97 12 00       	mov    eax,ds:0x129794
   25aa2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:215
    printk("EAX=%08X\tEBX=%08X\tECX=%08X\tEDX=%08X\tEFL=%08X\n", debugAX, debugBX, debugCX, debugDX,debugFlags);
   25aa5:	8b 35 88 97 12 00    	mov    esi,DWORD PTR ds:0x129788
   25aab:	8b 1d 54 97 12 00    	mov    ebx,DWORD PTR ds:0x129754
   25ab1:	8b 0d 50 97 12 00    	mov    ecx,DWORD PTR ds:0x129750
   25ab7:	8b 15 4c 97 12 00    	mov    edx,DWORD PTR ds:0x12974c
   25abd:	a1 48 97 12 00       	mov    eax,ds:0x129748
   25ac2:	83 ec 08             	sub    esp,0x8
   25ac5:	56                   	push   esi
   25ac6:	53                   	push   ebx
   25ac7:	51                   	push   ecx
   25ac8:	52                   	push   edx
   25ac9:	50                   	push   eax
   25aca:	68 94 53 08 00       	push   0x85394
   25acf:	e8 87 1c 00 00       	call   2775b <printk>
   25ad4:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:216
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", debugBP, debugSI, debugDI, debugSavedESP);
   25ad7:	8b 1d 84 97 12 00    	mov    ebx,DWORD PTR ds:0x129784
   25add:	8b 0d 5c 97 12 00    	mov    ecx,DWORD PTR ds:0x12975c
   25ae3:	8b 15 58 97 12 00    	mov    edx,DWORD PTR ds:0x129758
   25ae9:	a1 60 97 12 00       	mov    eax,ds:0x129760
   25aee:	83 ec 0c             	sub    esp,0xc
   25af1:	53                   	push   ebx
   25af2:	51                   	push   ecx
   25af3:	52                   	push   edx
   25af4:	50                   	push   eax
   25af5:	68 c4 53 08 00       	push   0x853c4
   25afa:	e8 5c 1c 00 00       	call   2775b <printk>
   25aff:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:217
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\n", debugCR0, debugCR3, debugCR4);
   25b02:	8b 0d 6c 97 12 00    	mov    ecx,DWORD PTR ds:0x12976c
   25b08:	8b 15 68 97 12 00    	mov    edx,DWORD PTR ds:0x129768
   25b0e:	a1 64 97 12 00       	mov    eax,ds:0x129764
   25b13:	51                   	push   ecx
   25b14:	52                   	push   edx
   25b15:	50                   	push   eax
   25b16:	68 b3 54 08 00       	push   0x854b3
   25b1b:	e8 3b 1c 00 00       	call   2775b <printk>
   25b20:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:218
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", debugDS, debugES, debugGS, debugFS);
   25b23:	8b 1d 78 97 12 00    	mov    ebx,DWORD PTR ds:0x129778
   25b29:	8b 0d 7c 97 12 00    	mov    ecx,DWORD PTR ds:0x12977c
   25b2f:	8b 15 74 97 12 00    	mov    edx,DWORD PTR ds:0x129774
   25b35:	a1 70 97 12 00       	mov    eax,ds:0x129770
   25b3a:	83 ec 0c             	sub    esp,0xc
   25b3d:	53                   	push   ebx
   25b3e:	51                   	push   ecx
   25b3f:	52                   	push   edx
   25b40:	50                   	push   eax
   25b41:	68 14 54 08 00       	push   0x85414
   25b46:	e8 10 1c 00 00       	call   2775b <printk>
   25b4b:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:219
    printk("CS:EIP = %04X:%08X, error code=%08X\n", debugCS, debugEIP, debugErrorCode);
   25b4e:	8b 0d 8c 97 12 00    	mov    ecx,DWORD PTR ds:0x12978c
   25b54:	8b 15 94 97 12 00    	mov    edx,DWORD PTR ds:0x129794
   25b5a:	a1 90 97 12 00       	mov    eax,ds:0x129790
   25b5f:	51                   	push   ecx
   25b60:	52                   	push   edx
   25b61:	50                   	push   eax
   25b62:	68 50 54 08 00       	push   0x85450
   25b67:	e8 ef 1b 00 00       	call   2775b <printk>
   25b6c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:220
          printk("Bytes at CS:EIP: ");
   25b6f:	83 ec 0c             	sub    esp,0xc
   25b72:	68 75 54 08 00       	push   0x85475
   25b77:	e8 df 1b 00 00       	call   2775b <printk>
   25b7c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:221
          for (int cnt=0;cnt<19;cnt++)
   25b7f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   25b86:	eb 23                	jmp    25bab <printDebugRegs+0x11e>
/home/yogi/src/os/chrisOS/src/init/utility.c:222 (discriminator 3)
              printk("%02X ", lCSIPPtr[cnt]);
   25b88:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   25b8b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   25b8e:	01 d0                	add    eax,edx
   25b90:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   25b93:	0f b6 c0             	movzx  eax,al
   25b96:	83 ec 08             	sub    esp,0x8
   25b99:	50                   	push   eax
   25b9a:	68 cf 54 08 00       	push   0x854cf
   25b9f:	e8 b7 1b 00 00       	call   2775b <printk>
   25ba4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:221 (discriminator 3)
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", debugBP, debugSI, debugDI, debugSavedESP);
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\n", debugCR0, debugCR3, debugCR4);
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", debugDS, debugES, debugGS, debugFS);
    printk("CS:EIP = %04X:%08X, error code=%08X\n", debugCS, debugEIP, debugErrorCode);
          printk("Bytes at CS:EIP: ");
          for (int cnt=0;cnt<19;cnt++)
   25ba7:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:221 (discriminator 1)
   25bab:	83 7d f0 12          	cmp    DWORD PTR [ebp-0x10],0x12
   25baf:	7e d7                	jle    25b88 <printDebugRegs+0xfb>
/home/yogi/src/os/chrisOS/src/init/utility.c:223
              printk("%02X ", lCSIPPtr[cnt]);
          printk("\n");
   25bb1:	83 ec 0c             	sub    esp,0xc
   25bb4:	68 87 54 08 00       	push   0x85487
   25bb9:	e8 9d 1b 00 00       	call   2775b <printk>
   25bbe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:224
          printk ("Stack @ 0x%08x:0x%08X:\n",debugSS, esp);
   25bc1:	a1 80 97 12 00       	mov    eax,ds:0x129780
   25bc6:	83 ec 04             	sub    esp,0x4
   25bc9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   25bcc:	50                   	push   eax
   25bcd:	68 89 54 08 00       	push   0x85489
   25bd2:	e8 84 1b 00 00       	call   2775b <printk>
   25bd7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:225
          for (int cnt=0;cnt<10;cnt++)
   25bda:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   25be1:	eb 2b                	jmp    25c0e <printDebugRegs+0x181>
/home/yogi/src/os/chrisOS/src/init/utility.c:227 (discriminator 3)
          {
              printk("\t0x%08X%: 0x%08X\n",esp, debugSavedStack[cnt]);
   25be3:	a1 ec 96 12 00       	mov    eax,ds:0x1296ec
   25be8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   25beb:	c1 e2 02             	shl    edx,0x2
   25bee:	01 d0                	add    eax,edx
   25bf0:	8b 00                	mov    eax,DWORD PTR [eax]
   25bf2:	83 ec 04             	sub    esp,0x4
   25bf5:	50                   	push   eax
   25bf6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   25bf9:	68 a1 54 08 00       	push   0x854a1
   25bfe:	e8 58 1b 00 00       	call   2775b <printk>
   25c03:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:228 (discriminator 3)
              esp+=4;
   25c06:	83 45 f4 04          	add    DWORD PTR [ebp-0xc],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:225 (discriminator 3)
          printk("Bytes at CS:EIP: ");
          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
          printk("\n");
          printk ("Stack @ 0x%08x:0x%08X:\n",debugSS, esp);
          for (int cnt=0;cnt<10;cnt++)
   25c0a:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:225 (discriminator 1)
   25c0e:	83 7d ec 09          	cmp    DWORD PTR [ebp-0x14],0x9
   25c12:	7e cf                	jle    25be3 <printDebugRegs+0x156>
/home/yogi/src/os/chrisOS/src/init/utility.c:232
              printk("\t0x%08X%: 0x%08X\n",esp, debugSavedStack[cnt]);
              esp+=4;
          }


}
   25c14:	90                   	nop
   25c15:	8d 65 f8             	lea    esp,[ebp-0x8]
   25c18:	5b                   	pop    ebx
   25c19:	5e                   	pop    esi
   25c1a:	5d                   	pop    ebp
   25c1b:	c3                   	ret    

00025c1c <reboot>:
reboot():
/home/yogi/src/os/chrisOS/src/init/utility.c:240
/* keyboard interface IO port: data and control
   READ:   status port
   WRITE:  control register */
 
void reboot(bool waitFirst)
{
   25c1c:	55                   	push   ebp
   25c1d:	89 e5                	mov    ebp,esp
   25c1f:	83 ec 28             	sub    esp,0x28
   25c22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25c25:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/init/utility.c:243
    uint8_t temp;
 
    if (waitFirst)
   25c28:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   25c2c:	74 21                	je     25c4f <reboot+0x33>
/home/yogi/src/os/chrisOS/src/init/utility.c:245
    {
        puts("Rebooting ... ");
   25c2e:	83 ec 0c             	sub    esp,0xc
   25c31:	68 d5 54 08 00       	push   0x854d5
   25c36:	e8 cf 27 ff ff       	call   1840a <puts>
   25c3b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:246
        __asm__("sti\n");
   25c3e:	fb                   	sti    
/home/yogi/src/os/chrisOS/src/init/utility.c:247
        wait(3000);
   25c3f:	83 ec 0c             	sub    esp,0xc
   25c42:	68 b8 0b 00 00       	push   0xbb8
   25c47:	e8 4e 2d 00 00       	call   2899a <wait>
   25c4c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:249
    }
    __asm__ volatile ("cli"); /* disable all interrupts */
   25c4f:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/init/utility.c:254
 
    /* Clear all keyboard buffers (output and command buffers) */
    do
    {
        temp = inb(KBRD_INTRFC); /* empty user data */
   25c50:	83 ec 0c             	sub    esp,0xc
   25c53:	6a 64                	push   0x64
   25c55:	e8 05 f7 ff ff       	call   2535f <inb>
   25c5a:	83 c4 10             	add    esp,0x10
   25c5d:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/init/utility.c:255
        if (check_flag(temp, KBRD_BIT_KDATA) != 0)
   25c60:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   25c64:	83 e0 01             	and    eax,0x1
   25c67:	85 c0                	test   eax,eax
   25c69:	74 0d                	je     25c78 <reboot+0x5c>
/home/yogi/src/os/chrisOS/src/init/utility.c:256
            inb(KBRD_IO); /* empty keyboard data */
   25c6b:	83 ec 0c             	sub    esp,0xc
   25c6e:	6a 60                	push   0x60
   25c70:	e8 ea f6 ff ff       	call   2535f <inb>
   25c75:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:257
    } while (check_flag(temp, KBRD_BIT_UDATA) != 0);
   25c78:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   25c7c:	83 e0 02             	and    eax,0x2
   25c7f:	85 c0                	test   eax,eax
   25c81:	75 cd                	jne    25c50 <reboot+0x34>
/home/yogi/src/os/chrisOS/src/init/utility.c:259
 
    outb(KBRD_INTRFC, KBRD_RESET); /* pulse CPU reset line */
   25c83:	83 ec 08             	sub    esp,0x8
   25c86:	68 fe 00 00 00       	push   0xfe
   25c8b:	6a 64                	push   0x64
   25c8d:	e8 ae f6 ff ff       	call   25340 <outb>
   25c92:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:261 (discriminator 1)
loop:
    __asm__ volatile ("hlt"); /* if that didn't work, halt the CPU */
   25c95:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/init/utility.c:262 (discriminator 1)
    goto loop; /* if a NMI is received, halt again */
   25c96:	eb fd                	jmp    25c95 <reboot+0x79>

00025c98 <dumpKernelAddresses>:
dumpKernelAddresses():
/home/yogi/src/os/chrisOS/src/init/utility.c:266
}

void dumpKernelAddresses()
{
   25c98:	55                   	push   ebp
   25c99:	89 e5                	mov    ebp,esp
   25c9b:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:267
printk("Kernel Variable List:\n");
   25c9e:	83 ec 0c             	sub    esp,0xc
   25ca1:	68 e4 54 08 00       	push   0x854e4
   25ca6:	e8 b0 1a 00 00       	call   2775b <printk>
   25cab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:268
printk("\tKERNEL_OBJECT_BASE_ADDRESS=0x%08x\n",KERNEL_OBJECT_BASE_ADDRESS);
   25cae:	83 ec 08             	sub    esp,0x8
   25cb1:	68 00 00 16 00       	push   0x160000
   25cb6:	68 fc 54 08 00       	push   0x854fc
   25cbb:	e8 9b 1a 00 00       	call   2775b <printk>
   25cc0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:269
printk("\tE820_TABLE_ADDRESS=0x%08x (0x%08X)\n",E820_TABLE_ADDRESS);
   25cc3:	83 ec 08             	sub    esp,0x8
   25cc6:	68 00 00 16 00       	push   0x160000
   25ccb:	68 20 55 08 00       	push   0x85520
   25cd0:	e8 86 1a 00 00       	call   2775b <printk>
   25cd5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:270
printk("\tMP_CONFIG_TABLE_ADDRESS=0x%08x\n",MP_CONFIG_TABLE_ADDRESS);
   25cd8:	83 ec 08             	sub    esp,0x8
   25cdb:	68 b0 04 16 00       	push   0x1604b0
   25ce0:	68 48 55 08 00       	push   0x85548
   25ce5:	e8 71 1a 00 00       	call   2775b <printk>
   25cea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:271
printk("\tKEYBOARD_BUFFER_ADDRESS=0x%08x\n",KEYBOARD_BUFFER_ADDRESS);
   25ced:	83 ec 08             	sub    esp,0x8
   25cf0:	68 b0 24 16 00       	push   0x1624b0
   25cf5:	68 6c 55 08 00       	push   0x8556c
   25cfa:	e8 5c 1a 00 00       	call   2775b <printk>
   25cff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:272
printk("\tIDT_TABLE_ADDRESS=0x%08x\n",IDT_TABLE_ADDRESS);
   25d02:	83 ec 08             	sub    esp,0x8
   25d05:	68 00 30 16 00       	push   0x163000
   25d0a:	68 8d 55 08 00       	push   0x8558d
   25d0f:	e8 47 1a 00 00       	call   2775b <printk>
   25d14:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:273
printk("\tINIT_GDT_TABLE_ADDRESS=0x%08x\n",INIT_GDT_TABLE_ADDRESS);
   25d17:	83 ec 08             	sub    esp,0x8
   25d1a:	68 00 48 16 00       	push   0x164800
   25d1f:	68 a8 55 08 00       	push   0x855a8
   25d24:	e8 32 1a 00 00       	call   2775b <printk>
   25d29:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:274
printk("\tTASK_TABLE_ADDRESS=0x%08x\n",TASK_TABLE_ADDRESS);
   25d2c:	83 ec 08             	sub    esp,0x8
   25d2f:	68 00 60 16 00       	push   0x166000
   25d34:	68 c8 55 08 00       	push   0x855c8
   25d39:	e8 1d 1a 00 00       	call   2775b <printk>
   25d3e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:275
printk("\tTSS_TABLE_ADDRESS=0x%08x\n",TSS_TABLE_ADDRESS);
   25d41:	83 ec 08             	sub    esp,0x8
   25d44:	68 00 70 2f 00       	push   0x2f7000
   25d49:	68 e4 55 08 00       	push   0x855e4
   25d4e:	e8 08 1a 00 00       	call   2775b <printk>
   25d53:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:276
printk("\tATA_MBR_ARRAY_ADDRESS=0x%08x\n",ATA_MBR_ARRAY_ADDRESS);
   25d56:	83 ec 08             	sub    esp,0x8
   25d59:	68 00 70 49 00       	push   0x497000
   25d5e:	68 00 56 08 00       	push   0x85600
   25d63:	e8 f3 19 00 00       	call   2775b <printk>
   25d68:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:277
printk("\tPCI_DEVICE_LIST_ADDRESS=0x%08x\n",PCI_DEVICE_LIST_ADDRESS);
   25d6b:	83 ec 08             	sub    esp,0x8
   25d6e:	68 00 80 49 00       	push   0x498000
   25d73:	68 20 56 08 00       	push   0x85620
   25d78:	e8 de 19 00 00       	call   2775b <printk>
   25d7d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:278
printk("\tPCI_BRIDGE_LIST_ADDRESS=0x%08x\n",PCI_BRIDGE_LIST_ADDRESS);
   25d80:	83 ec 08             	sub    esp,0x8
   25d83:	68 00 80 4a 00       	push   0x4a8000
   25d88:	68 44 56 08 00       	push   0x85644
   25d8d:	e8 c9 19 00 00       	call   2775b <printk>
   25d92:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:279
printk("\tPCI_FUNCTION_LIST_ADDRESS=0x%08x\n",PCI_FUNCTION_LIST_ADDRESS);
   25d95:	83 ec 08             	sub    esp,0x8
   25d98:	68 00 80 4b 00       	push   0x4b8000
   25d9d:	68 68 56 08 00       	push   0x85668
   25da2:	e8 b4 19 00 00       	call   2775b <printk>
   25da7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:280
printk("\tGDT_PMODE_16BIT_TABLE_ADDRESS=0x%08x\n",GDT_PMODE_16BIT_TABLE_ADDRESS);
   25daa:	83 ec 08             	sub    esp,0x8
   25dad:	68 00 90 4b 00       	push   0x4b9000
   25db2:	68 8c 56 08 00       	push   0x8568c
   25db7:	e8 9f 19 00 00       	call   2775b <printk>
   25dbc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:281
printk("\tKERNEL_PAGE_DIR_ADDRESS=0x%08x\n",KERNEL_PAGE_DIR_ADDRESS);
   25dbf:	83 ec 08             	sub    esp,0x8
   25dc2:	68 00 a0 4b 00       	push   0x4ba000
   25dc7:	68 b4 56 08 00       	push   0x856b4
   25dcc:	e8 8a 19 00 00       	call   2775b <printk>
   25dd1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:282
printk("\tKERNEL_PAGE_TABLE_BASE_ADDRESS=0x%08x\n",KERNEL_PAGE_TABLE_BASE_ADDRESS);
   25dd4:	83 ec 08             	sub    esp,0x8
   25dd7:	68 00 c0 4c 00       	push   0x4cc000
   25ddc:	68 d8 56 08 00       	push   0x856d8
   25de1:	e8 75 19 00 00       	call   2775b <printk>
   25de6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:283
printk("\tSAVED_STACK_FOR_EXCEPTIONS_ADDRESS=0x%08x\n",SAVED_STACK_FOR_EXCEPTIONS_ADDRESS);
   25de9:	83 ec 08             	sub    esp,0x8
   25dec:	68 00 d0 ac 00       	push   0xacd000
   25df1:	68 00 57 08 00       	push   0x85700
   25df6:	e8 60 19 00 00       	call   2775b <printk>
   25dfb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:284
printk("\tSAVED_STACK_FOR_DEBUGGING_ADDRESS=0x%08x\n",SAVED_STACK_FOR_DEBUGGING_ADDRESS);
   25dfe:	83 ec 08             	sub    esp,0x8
   25e01:	68 00 f0 ac 00       	push   0xacf000
   25e06:	68 2c 57 08 00       	push   0x8572c
   25e0b:	e8 4b 19 00 00       	call   2775b <printk>
   25e10:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:285
printk("\tCPU_APIC_REGISTER_REMAP_BASE_ADDRESS=0x%08x\n",CPU_APIC_REGISTER_REMAP_BASE_ADDRESS);
   25e13:	83 ec 08             	sub    esp,0x8
   25e16:	68 00 10 ad 00       	push   0xad1000
   25e1b:	68 58 57 08 00       	push   0x85758
   25e20:	e8 36 19 00 00       	call   2775b <printk>
   25e25:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:286
printk("\tCPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS=0x%08x\n",CPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS);
   25e28:	83 ec 08             	sub    esp,0x8
   25e2b:	68 00 20 ad 00       	push   0xad2000
   25e30:	68 88 57 08 00       	push   0x85788
   25e35:	e8 21 19 00 00       	call   2775b <printk>
   25e3a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:287
printk("\tKERNEL_TICKS_SINCE_START_VARIABLE_ADDRESS=0x%08x\n",KERNEL_TICKS_SINCE_START_VARIABLE_ADDRESS);
   25e3d:	83 ec 08             	sub    esp,0x8
   25e40:	68 04 20 ad 00       	push   0xad2004
   25e45:	68 b8 57 08 00       	push   0x857b8
   25e4a:	e8 0c 19 00 00       	call   2775b <printk>
   25e4f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:288
printk("\tAHCI_ABAR_REMAPPED_ADDRESS=0x%08x\n",AHCI_ABAR_REMAPPED_ADDRESS);
   25e52:	83 ec 08             	sub    esp,0x8
   25e55:	68 00 30 ad 00       	push   0xad3000
   25e5a:	68 ec 57 08 00       	push   0x857ec
   25e5f:	e8 f7 18 00 00       	call   2775b <printk>
   25e64:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:289
printk("\tAHCI_PORT_BASE_REMAP_ADDRESS=0x%08x\n",AHCI_PORT_BASE_REMAP_ADDRESS);
   25e67:	83 ec 08             	sub    esp,0x8
   25e6a:	68 00 30 b1 00       	push   0xb13000
   25e6f:	68 10 58 08 00       	push   0x85810
   25e74:	e8 e2 18 00 00       	call   2775b <printk>
   25e79:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:290
printk("\tAHCI_DISK_BUFFER_ADDRESS=0x%08x\n",AHCI_DISK_BUFFER_ADDRESS);
   25e7c:	83 ec 08             	sub    esp,0x8
   25e7f:	68 00 30 c5 00       	push   0xc53000
   25e84:	68 38 58 08 00       	push   0x85838
   25e89:	e8 cd 18 00 00       	call   2775b <printk>
   25e8e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:291
printk("\tATA_DEVICE_INFO_ADDRESS=0x%08x\n",ATA_DEVICE_INFO_ADDRESS);
   25e91:	83 ec 08             	sub    esp,0x8
   25e94:	68 00 30 d9 00       	push   0xd93000
   25e99:	68 5c 58 08 00       	push   0x8585c
   25e9e:	e8 b8 18 00 00       	call   2775b <printk>
   25ea3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:292
printk("\tAHCI_CAPS_ADDRESS=0x%08x\n",AHCI_CAPS_ADDRESS);
   25ea6:	83 ec 08             	sub    esp,0x8
   25ea9:	68 20 7e d9 00       	push   0xd97e20
   25eae:	68 7d 58 08 00       	push   0x8587d
   25eb3:	e8 a3 18 00 00       	call   2775b <printk>
   25eb8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:293
printk("\tTSS_AVAILABLE_ADDRESS=0x%08x\n",TASK_AVAILABLE_ADDRESS);
   25ebb:	83 ec 08             	sub    esp,0x8
   25ebe:	68 40 cc d9 00       	push   0xd9cc40
   25ec3:	68 98 58 08 00       	push   0x85898
   25ec8:	e8 8e 18 00 00       	call   2775b <printk>
   25ecd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:294
printk("\tGDT_AVAILABLE_ADDRESS=0x%08x\n",GDT_AVAILABLE_ADDRESS);
   25ed0:	83 ec 08             	sub    esp,0x8
   25ed3:	68 40 d4 d9 00       	push   0xd9d440
   25ed8:	68 b8 58 08 00       	push   0x858b8
   25edd:	e8 79 18 00 00       	call   2775b <printk>
   25ee2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:295
printk("\tEXEC_FILE_LOAD_INFO=0x%08x\n",EXEC_FILE_LOAD_INFO);
   25ee5:	83 ec 08             	sub    esp,0x8
   25ee8:	68 40 dc d9 00       	push   0xd9dc40
   25eed:	68 d7 58 08 00       	push   0x858d7
   25ef2:	e8 64 18 00 00       	call   2775b <printk>
   25ef7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:296
printk("\tAHCI_ABAR_ADDRESS=0x%08x\n",AHCI_ABAR_ADDRESS);
   25efa:	83 ec 08             	sub    esp,0x8
   25efd:	68 e0 62 db 00       	push   0xdb62e0
   25f02:	68 f4 58 08 00       	push   0x858f4
   25f07:	e8 4f 18 00 00       	call   2775b <printk>
   25f0c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:297
printk("\tEND_OF_KERNEL_OBJECTS_ADDRESS=0x%08x\n",END_OF_KERNEL_OBJECTS_ADDRESS);
   25f0f:	83 ec 08             	sub    esp,0x8
   25f12:	68 e0 62 eb 00       	push   0xeb62e0
   25f17:	68 10 59 08 00       	push   0x85910
   25f1c:	e8 3a 18 00 00       	call   2775b <printk>
   25f21:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:298
}
   25f24:	90                   	nop
   25f25:	c9                   	leave  
   25f26:	c3                   	ret    

00025f27 <pauseDisplay>:
pauseDisplay():
/home/yogi/src/os/chrisOS/src/init/utility.c:301

bool pauseDisplay(bool offerToQuit)
{
   25f27:	55                   	push   ebp
   25f28:	89 e5                	mov    ebp,esp
   25f2a:	83 ec 28             	sub    esp,0x28
   25f2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25f30:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/init/utility.c:302
    if (offerToQuit)
   25f33:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   25f37:	74 12                	je     25f4b <pauseDisplay+0x24>
/home/yogi/src/os/chrisOS/src/init/utility.c:303
        printk("Press q to quit, any other key to continue ...");
   25f39:	83 ec 0c             	sub    esp,0xc
   25f3c:	68 38 59 08 00       	push   0x85938
   25f41:	e8 15 18 00 00       	call   2775b <printk>
   25f46:	83 c4 10             	add    esp,0x10
   25f49:	eb 10                	jmp    25f5b <pauseDisplay+0x34>
/home/yogi/src/os/chrisOS/src/init/utility.c:305
    else
        printk("Press a key to continue ... ");
   25f4b:	83 ec 0c             	sub    esp,0xc
   25f4e:	68 67 59 08 00       	push   0x85967
   25f53:	e8 03 18 00 00       	call   2775b <printk>
   25f58:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:306
    char lPressedKey=waitForKeyboardKey();
   25f5b:	e8 ff b2 fe ff       	call   1125f <waitForKeyboardKey>
   25f60:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/init/utility.c:307
    cursorMoveToX(0);
   25f63:	83 ec 0c             	sub    esp,0xc
   25f66:	6a 00                	push   0x0
   25f68:	e8 9a 23 ff ff       	call   18307 <cursorMoveToX>
   25f6d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:308
    printk("                                           ");
   25f70:	83 ec 0c             	sub    esp,0xc
   25f73:	68 84 59 08 00       	push   0x85984
   25f78:	e8 de 17 00 00       	call   2775b <printk>
   25f7d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:309
    cursorMoveToX(0);
   25f80:	83 ec 0c             	sub    esp,0xc
   25f83:	6a 00                	push   0x0
   25f85:	e8 7d 23 ff ff       	call   18307 <cursorMoveToX>
   25f8a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:310
    if (lPressedKey=='q' && offerToQuit)
   25f8d:	80 7d f7 71          	cmp    BYTE PTR [ebp-0x9],0x71
   25f91:	75 0d                	jne    25fa0 <pauseDisplay+0x79>
/home/yogi/src/os/chrisOS/src/init/utility.c:310 (discriminator 1)
   25f93:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   25f97:	74 07                	je     25fa0 <pauseDisplay+0x79>
/home/yogi/src/os/chrisOS/src/init/utility.c:311
        return true;
   25f99:	b8 01 00 00 00       	mov    eax,0x1
   25f9e:	eb 05                	jmp    25fa5 <pauseDisplay+0x7e>
/home/yogi/src/os/chrisOS/src/init/utility.c:312
    return false;
   25fa0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:313
}
   25fa5:	c9                   	leave  
   25fa6:	c3                   	ret    

00025fa7 <mallocTemp>:
mallocTemp():
/home/yogi/src/os/chrisOS/src/init/utility.c:317

int memPtr=0xe00000;
uintptr_t* mallocTemp(int size)
{
   25fa7:	55                   	push   ebp
   25fa8:	89 e5                	mov    ebp,esp
   25faa:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:318
    uintptr_t lRetVal = memPtr;
   25fad:	a1 a0 e2 02 00       	mov    eax,ds:0x2e2a0
   25fb2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:319
    memPtr+=size;
   25fb5:	8b 15 a0 e2 02 00    	mov    edx,DWORD PTR ds:0x2e2a0
   25fbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25fbe:	01 d0                	add    eax,edx
   25fc0:	a3 a0 e2 02 00       	mov    ds:0x2e2a0,eax
/home/yogi/src/os/chrisOS/src/init/utility.c:320
    return (uintptr_t*)lRetVal;
   25fc5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/init/utility.c:321
}
   25fc8:	c9                   	leave  
   25fc9:	c3                   	ret    

00025fca <displayGDT>:
displayGDT():
/home/yogi/src/os/chrisOS/src/init/utility.c:324

void displayGDT()
{
   25fca:	55                   	push   ebp
   25fcb:	89 e5                	mov    ebp,esp
   25fcd:	56                   	push   esi
   25fce:	53                   	push   ebx
   25fcf:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:325
    sGDT* theGDT=bootGdt;
   25fd2:	a1 84 99 12 00       	mov    eax,ds:0x129984
   25fd7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:327
    
    printk("Listing GDT Table\n");
   25fda:	83 ec 0c             	sub    esp,0xc
   25fdd:	68 b0 59 08 00       	push   0x859b0
   25fe2:	e8 74 17 00 00       	call   2775b <printk>
   25fe7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:328
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
   25fea:	83 ec 0c             	sub    esp,0xc
   25fed:	68 c4 59 08 00       	push   0x859c4
   25ff2:	e8 64 17 00 00       	call   2775b <printk>
   25ff7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:329
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
   25ffa:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   26001:	e9 94 00 00 00       	jmp    2609a <displayGDT+0xd0>
/home/yogi/src/os/chrisOS/src/init/utility.c:331
    {
        if (theGDT->access!=0 || cnt==0)
   26006:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26009:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
   2600d:	84 c0                	test   al,al
   2600f:	75 06                	jne    26017 <displayGDT+0x4d>
/home/yogi/src/os/chrisOS/src/init/utility.c:331 (discriminator 1)
   26011:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   26015:	75 7b                	jne    26092 <displayGDT+0xc8>
/home/yogi/src/os/chrisOS/src/init/utility.c:342
                    "0x%01X\n" ,  /*Flags*/
                    cnt,
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
                    (uint8_t)theGDT->access,
                    (uint8_t)((theGDT->flags_and_limit&0xF0)>>4));
   26017:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2601a:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
   2601e:	0f be c0             	movsx  eax,al
   26021:	25 f0 00 00 00       	and    eax,0xf0
   26026:	c1 f8 04             	sar    eax,0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:333
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
    {
        if (theGDT->access!=0 || cnt==0)
        {
            printk("%u\t\t"     /*GDT#*/
   26029:	0f b6 d0             	movzx  edx,al
/home/yogi/src/os/chrisOS/src/init/utility.c:341
                    "0x%02X\t\t" /*Access*/
                    "0x%01X\n" ,  /*Flags*/
                    cnt,
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
                    (uint8_t)theGDT->access,
   2602c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2602f:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/init/utility.c:333
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
    {
        if (theGDT->access!=0 || cnt==0)
        {
            printk("%u\t\t"     /*GDT#*/
   26033:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/init/utility.c:340
                    "0x%08X\t"  /*limit*/
                    "0x%02X\t\t" /*Access*/
                    "0x%01X\n" ,  /*Flags*/
                    cnt,
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
   26036:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   26039:	0f b7 09             	movzx  ecx,WORD PTR [ecx]
/home/yogi/src/os/chrisOS/src/init/utility.c:333
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
    {
        if (theGDT->access!=0 || cnt==0)
        {
            printk("%u\t\t"     /*GDT#*/
   2603c:	0f b7 d9             	movzx  ebx,cx
/home/yogi/src/os/chrisOS/src/init/utility.c:340
                    "0x%08X\t"  /*limit*/
                    "0x%02X\t\t" /*Access*/
                    "0x%01X\n" ,  /*Flags*/
                    cnt,
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
   2603f:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   26042:	0f b6 49 06          	movzx  ecx,BYTE PTR [ecx+0x6]
   26046:	0f be c9             	movsx  ecx,cl
   26049:	83 e1 0f             	and    ecx,0xf
   2604c:	c1 e1 10             	shl    ecx,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:333
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
    {
        if (theGDT->access!=0 || cnt==0)
        {
            printk("%u\t\t"     /*GDT#*/
   2604f:	09 cb                	or     ebx,ecx
/home/yogi/src/os/chrisOS/src/init/utility.c:339
                    "0x%08X\t"  /*base*/
                    "0x%08X\t"  /*limit*/
                    "0x%02X\t\t" /*Access*/
                    "0x%01X\n" ,  /*Flags*/
                    cnt,
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
   26051:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   26054:	0f b6 49 07          	movzx  ecx,BYTE PTR [ecx+0x7]
   26058:	0f be c9             	movsx  ecx,cl
   2605b:	89 ce                	mov    esi,ecx
   2605d:	c1 e6 18             	shl    esi,0x18
   26060:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   26063:	0f b6 49 04          	movzx  ecx,BYTE PTR [ecx+0x4]
   26067:	0f be c9             	movsx  ecx,cl
   2606a:	c1 e1 10             	shl    ecx,0x10
   2606d:	09 ce                	or     esi,ecx
   2606f:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   26072:	0f b7 49 02          	movzx  ecx,WORD PTR [ecx+0x2]
/home/yogi/src/os/chrisOS/src/init/utility.c:333
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
    {
        if (theGDT->access!=0 || cnt==0)
        {
            printk("%u\t\t"     /*GDT#*/
   26076:	0f b7 c9             	movzx  ecx,cx
   26079:	09 f1                	or     ecx,esi
   2607b:	83 ec 08             	sub    esp,0x8
   2607e:	52                   	push   edx
   2607f:	50                   	push   eax
   26080:	53                   	push   ebx
   26081:	51                   	push   ecx
   26082:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26085:	68 e8 59 08 00       	push   0x859e8
   2608a:	e8 cc 16 00 00       	call   2775b <printk>
   2608f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:344 (discriminator 2)
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
                    (uint8_t)theGDT->access,
                    (uint8_t)((theGDT->flags_and_limit&0xF0)>>4));
        }
        theGDT++;
   26092:	83 45 f4 08          	add    DWORD PTR [ebp-0xc],0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:329 (discriminator 2)
{
    sGDT* theGDT=bootGdt;
    
    printk("Listing GDT Table\n");
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
   26096:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:329 (discriminator 1)
   2609a:	0f b7 05 88 99 12 00 	movzx  eax,WORD PTR ds:0x129988
   260a1:	66 c1 e8 03          	shr    ax,0x3
   260a5:	0f b7 c0             	movzx  eax,ax
   260a8:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   260ab:	0f 8f 55 ff ff ff    	jg     26006 <displayGDT+0x3c>
/home/yogi/src/os/chrisOS/src/init/utility.c:346
                    (uint8_t)theGDT->access,
                    (uint8_t)((theGDT->flags_and_limit&0xF0)>>4));
        }
        theGDT++;
    }
   260b1:	90                   	nop
   260b2:	8d 65 f8             	lea    esp,[ebp-0x8]
   260b5:	5b                   	pop    ebx
   260b6:	5e                   	pop    esi
   260b7:	5d                   	pop    ebp
   260b8:	c3                   	ret    
   260b9:	66 90                	xchg   ax,ax
   260bb:	90                   	nop

000260bc <memcpy>:
memcpy():
/home/yogi/src/os/chrisOS/src/memcpy.c:12
 */
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time
void * memcpy(void *dest, const void *src, size_t n)
{
   260bc:	55                   	push   ebp
   260bd:	89 e5                	mov    ebp,esp
   260bf:	83 ec 20             	sub    esp,0x20
/home/yogi/src/os/chrisOS/src/memcpy.c:15
    bool dw,dd;
    
    dd=n%4==0;
   260c2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   260c5:	83 e0 03             	and    eax,0x3
   260c8:	85 c0                	test   eax,eax
   260ca:	0f 94 c0             	sete   al
   260cd:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/chrisOS/src/memcpy.c:16
    dw=n%2==0;
   260d0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   260d3:	83 e0 01             	and    eax,0x1
   260d6:	85 c0                	test   eax,eax
   260d8:	0f 94 c0             	sete   al
   260db:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/chrisOS/src/memcpy.c:17
    if (dd)
   260de:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
   260e2:	74 7d                	je     26161 <memcpy+0xa5>
/home/yogi/src/os/chrisOS/src/memcpy.c:19
    {
        n /=4;
   260e4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   260e7:	c1 e8 02             	shr    eax,0x2
   260ea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:20
        const uint32_t *f = src;
   260ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   260f0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:21
        uint32_t *t = dest;
   260f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   260f6:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:23

        if (f < t) {
   260f9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   260fc:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
   260ff:	73 4b                	jae    2614c <memcpy+0x90>
/home/yogi/src/os/chrisOS/src/memcpy.c:24
                f += n;
   26101:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26104:	c1 e0 02             	shl    eax,0x2
   26107:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:25
                t += n;
   2610a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2610d:	c1 e0 02             	shl    eax,0x2
   26110:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:26
                while ( (n)-- > 0)
   26113:	eb 12                	jmp    26127 <memcpy+0x6b>
/home/yogi/src/os/chrisOS/src/memcpy.c:27
                        *--t = *--f;
   26115:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
   26119:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
   2611d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   26120:	8b 10                	mov    edx,DWORD PTR [eax]
   26122:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   26125:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/memcpy.c:26
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
   26127:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2612a:	8d 50 ff             	lea    edx,[eax-0x1]
   2612d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   26130:	85 c0                	test   eax,eax
   26132:	75 e1                	jne    26115 <memcpy+0x59>
   26134:	eb 23                	jmp    26159 <memcpy+0x9d>
/home/yogi/src/os/chrisOS/src/memcpy.c:30
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
   26136:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   26139:	8d 50 04             	lea    edx,[eax+0x4]
   2613c:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   2613f:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   26142:	8d 4a 04             	lea    ecx,[edx+0x4]
   26145:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
   26148:	8b 12                	mov    edx,DWORD PTR [edx]
   2614a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/memcpy.c:29
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
   2614c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2614f:	8d 50 ff             	lea    edx,[eax-0x1]
   26152:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   26155:	85 c0                	test   eax,eax
   26157:	75 dd                	jne    26136 <memcpy+0x7a>
/home/yogi/src/os/chrisOS/src/memcpy.c:31
                        *t++ = *f++;
        return dest;
   26159:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2615c:	e9 ea 00 00 00       	jmp    2624b <memcpy+0x18f>
/home/yogi/src/os/chrisOS/src/memcpy.c:33
    }
    else if (dw)
   26161:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
   26165:	74 79                	je     261e0 <memcpy+0x124>
/home/yogi/src/os/chrisOS/src/memcpy.c:35
    {
        n /=2;
   26167:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2616a:	d1 e8                	shr    eax,1
   2616c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:36
        const uint32_t *f = src;
   2616f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26172:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:37
        uint32_t *t = dest;
   26175:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26178:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:39

        if (f < t) {
   2617b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2617e:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   26181:	73 4b                	jae    261ce <memcpy+0x112>
/home/yogi/src/os/chrisOS/src/memcpy.c:40
                f += n;
   26183:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26186:	c1 e0 02             	shl    eax,0x2
   26189:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:41
                t += n;
   2618c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2618f:	c1 e0 02             	shl    eax,0x2
   26192:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:42
                while ( (n)-- > 0)
   26195:	eb 12                	jmp    261a9 <memcpy+0xed>
/home/yogi/src/os/chrisOS/src/memcpy.c:43
                        *--t = *--f;
   26197:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
   2619b:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
   2619f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   261a2:	8b 10                	mov    edx,DWORD PTR [eax]
   261a4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   261a7:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/memcpy.c:42
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
   261a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   261ac:	8d 50 ff             	lea    edx,[eax-0x1]
   261af:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   261b2:	85 c0                	test   eax,eax
   261b4:	75 e1                	jne    26197 <memcpy+0xdb>
   261b6:	eb 23                	jmp    261db <memcpy+0x11f>
/home/yogi/src/os/chrisOS/src/memcpy.c:46
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
   261b8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   261bb:	8d 50 04             	lea    edx,[eax+0x4]
   261be:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   261c1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   261c4:	8d 4a 04             	lea    ecx,[edx+0x4]
   261c7:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
   261ca:	8b 12                	mov    edx,DWORD PTR [edx]
   261cc:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/memcpy.c:45
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
   261ce:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   261d1:	8d 50 ff             	lea    edx,[eax-0x1]
   261d4:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   261d7:	85 c0                	test   eax,eax
   261d9:	75 dd                	jne    261b8 <memcpy+0xfc>
/home/yogi/src/os/chrisOS/src/memcpy.c:47
                        *t++ = *f++;
        return dest;
   261db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   261de:	eb 6b                	jmp    2624b <memcpy+0x18f>
/home/yogi/src/os/chrisOS/src/memcpy.c:51
    }
    else
    {
        const char *f = src;
   261e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   261e3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:52
        char *t = dest;
   261e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   261e9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:54

        if (f < t) {
   261ec:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   261ef:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   261f2:	73 47                	jae    2623b <memcpy+0x17f>
/home/yogi/src/os/chrisOS/src/memcpy.c:55
                f += n;
   261f4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   261f7:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:56
                t += n;
   261fa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   261fd:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:57
                while (n-- > 0)
   26200:	eb 13                	jmp    26215 <memcpy+0x159>
/home/yogi/src/os/chrisOS/src/memcpy.c:58
                        *--t = *--f;
   26202:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
   26206:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
   2620a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2620d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   26210:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   26213:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/memcpy.c:57
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
   26215:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26218:	8d 50 ff             	lea    edx,[eax-0x1]
   2621b:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   2621e:	85 c0                	test   eax,eax
   26220:	75 e0                	jne    26202 <memcpy+0x146>
   26222:	eb 24                	jmp    26248 <memcpy+0x18c>
/home/yogi/src/os/chrisOS/src/memcpy.c:61
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
   26224:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   26227:	8d 50 01             	lea    edx,[eax+0x1]
   2622a:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   2622d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   26230:	8d 4a 01             	lea    ecx,[edx+0x1]
   26233:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
   26236:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   26239:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/memcpy.c:60
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
   2623b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2623e:	8d 50 ff             	lea    edx,[eax-0x1]
   26241:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   26244:	85 c0                	test   eax,eax
   26246:	75 dc                	jne    26224 <memcpy+0x168>
/home/yogi/src/os/chrisOS/src/memcpy.c:62
                        *t++ = *f++;
        return dest;
   26248:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/memcpy.c:64
    }
   2624b:	c9                   	leave  
   2624c:	c3                   	ret    
   2624d:	66 90                	xchg   ax,ax
   2624f:	90                   	nop

00026250 <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   26250:	55                   	push   ebp
   26251:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   26253:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26256:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   2625d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26260:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26263:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26266:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:51
}
   26268:	90                   	nop
   26269:	5d                   	pop    ebp
   2626a:	c3                   	ret    

0002626b <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   2626b:	55                   	push   ebp
   2626c:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   2626e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26271:	8b 00                	mov    eax,DWORD PTR [eax]
   26273:	85 c0                	test   eax,eax
   26275:	75 0d                	jne    26284 <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   26277:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2627a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   2627d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26280:	89 10                	mov    DWORD PTR [eax],edx
   26282:	eb 0e                	jmp    26292 <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   26284:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26287:	8b 00                	mov    eax,DWORD PTR [eax]
   26289:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   2628c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   2628f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   26292:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26295:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   26298:	85 c0                	test   eax,eax
   2629a:	75 0d                	jne    262a9 <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   2629c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2629f:	8b 10                	mov    edx,DWORD PTR [eax]
   262a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   262a4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   262a7:	eb 0d                	jmp    262b6 <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   262a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   262ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   262af:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   262b2:	8b 12                	mov    edx,DWORD PTR [edx]
   262b4:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
}
   262b6:	90                   	nop
   262b7:	5d                   	pop    ebp
   262b8:	c3                   	ret    

000262b9 <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   262b9:	55                   	push   ebp
   262ba:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   262bc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   262bf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   262c2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   262c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   262c7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   262ca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   262cd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   262d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   262d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   262d6:	85 c0                	test   eax,eax
   262d8:	75 0b                	jne    262e5 <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   262da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   262dd:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   262e0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   262e3:	eb 0b                	jmp    262f0 <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   262e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   262e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   262eb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   262ee:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   262f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   262f3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   262f6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:86
}
   262f9:	90                   	nop
   262fa:	5d                   	pop    ebp
   262fb:	c3                   	ret    

000262fc <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   262fc:	55                   	push   ebp
   262fd:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   262ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26302:	8b 10                	mov    edx,DWORD PTR [eax]
   26304:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26307:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   26309:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2630c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   2630f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   26312:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26315:	8b 00                	mov    eax,DWORD PTR [eax]
   26317:	85 c0                	test   eax,eax
   26319:	75 0a                	jne    26325 <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   2631b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2631e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   26321:	89 10                	mov    DWORD PTR [eax],edx
   26323:	eb 0b                	jmp    26330 <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   26325:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26328:	8b 00                	mov    eax,DWORD PTR [eax]
   2632a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   2632d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   26330:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26333:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   26336:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:103
}
   26338:	90                   	nop
   26339:	5d                   	pop    ebp
   2633a:	c3                   	ret    

0002633b <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   2633b:	55                   	push   ebp
   2633c:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   2633e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26341:	8b 00                	mov    eax,DWORD PTR [eax]
   26343:	85 c0                	test   eax,eax
   26345:	75 26                	jne    2636d <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   26347:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2634a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   2634d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   2634f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26352:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   26355:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   26358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2635b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   26361:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26364:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   2636b:	eb 14                	jmp    26381 <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   2636d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26370:	8b 00                	mov    eax,DWORD PTR [eax]
   26372:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   26375:	50                   	push   eax
   26376:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26379:	e8 7e ff ff ff       	call   262fc <fat_list_insert_before>
   2637e:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
}
   26381:	90                   	nop
   26382:	c9                   	leave  
   26383:	c3                   	ret    

00026384 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   26384:	55                   	push   ebp
   26385:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   26387:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2638a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2638d:	85 c0                	test   eax,eax
   2638f:	75 10                	jne    263a1 <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   26391:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   26394:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26397:	e8 9f ff ff ff       	call   2633b <fat_list_insert_first>
   2639c:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   2639f:	eb 15                	jmp    263b6 <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   263a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   263a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   263a7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   263aa:	50                   	push   eax
   263ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   263ae:	e8 06 ff ff ff       	call   262b9 <fat_list_insert_after>
   263b3:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
}
   263b6:	90                   	nop
   263b7:	c9                   	leave  
   263b8:	c3                   	ret    

000263b9 <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   263b9:	55                   	push   ebp
   263ba:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   263bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   263bf:	8b 00                	mov    eax,DWORD PTR [eax]
   263c1:	85 c0                	test   eax,eax
   263c3:	0f 94 c0             	sete   al
   263c6:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:143
}
   263c9:	5d                   	pop    ebp
   263ca:	c3                   	ret    

000263cb <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   263cb:	55                   	push   ebp
   263cc:	89 e5                	mov    ebp,esp
   263ce:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   263d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   263d4:	8b 00                	mov    eax,DWORD PTR [eax]
   263d6:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:154
    if (node)
   263d9:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   263dd:	74 0e                	je     263ed <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   263df:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   263e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   263e5:	e8 81 fe ff ff       	call   2626b <fat_list_remove>
   263ea:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:157

    return node;
   263ed:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:158
}
   263f0:	c9                   	leave  
   263f1:	c3                   	ret    

000263f2 <processELFDynamicSection>:
processELFDynamicSection():
/home/yogi/src/os/chrisOS/src/newloader.c:19
uint32_t libLoadOffset=LIBRARY_BASE_LOAD_ADDRESS;
extern int kExecLoadCount;
extern elfInfo_t* KERNEL_DATA_SECTION kExecLoadInfo;

void processELFDynamicSection(elfInfo_t* elfInfo)
{
   263f2:	55                   	push   ebp
   263f3:	89 e5                	mov    ebp,esp
   263f5:	57                   	push   edi
   263f6:	53                   	push   ebx
   263f7:	83 c4 80             	add    esp,0xffffff80
/home/yogi/src/os/chrisOS/src/newloader.c:20
    Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;
   263fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   263fd:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   26403:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/newloader.c:23

    //Next process the rest of the dynamic section entries
    elfInfo->dynamicInfo.neededCount=0;
   26406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26409:	c7 80 a0 18 00 00 00 	mov    DWORD PTR [eax+0x18a0],0x0
   26410:	00 00 00 
/home/yogi/src/os/chrisOS/src/newloader.c:24
    for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   26413:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   2641a:	e9 66 04 00 00       	jmp    26885 <processELFDynamicSection+0x493>
/home/yogi/src/os/chrisOS/src/newloader.c:26
    {
        switch (dyn[cnt].d_tag)
   2641f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26422:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26429:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2642c:	01 d0                	add    eax,edx
   2642e:	8b 00                	mov    eax,DWORD PTR [eax]
   26430:	83 f8 1e             	cmp    eax,0x1e
   26433:	0f 87 44 04 00 00    	ja     2687d <processELFDynamicSection+0x48b>
   26439:	8b 04 85 3c 5c 08 00 	mov    eax,DWORD PTR [eax*4+0x85c3c]
   26440:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/newloader.c:30
        {
            //DT_NEEDED is a library which we need to load
            case DT_NEEDED:
                printk("ELF at: 0x%08X, copy to: 0x%08X, neededCount=0x%08X\n",elfInfo, elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount],elfInfo->dynamicInfo.neededCount);
   26442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26445:	8b 80 a0 18 00 00    	mov    eax,DWORD PTR [eax+0x18a0]
   2644b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2644e:	8b 92 a0 18 00 00    	mov    edx,DWORD PTR [edx+0x18a0]
   26454:	c1 e2 08             	shl    edx,0x8
   26457:	8d 8a 50 0e 00 00    	lea    ecx,[edx+0xe50]
   2645d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   26460:	01 ca                	add    edx,ecx
   26462:	83 c2 04             	add    edx,0x4
   26465:	50                   	push   eax
   26466:	52                   	push   edx
   26467:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2646a:	68 20 5b 08 00       	push   0x85b20
   2646f:	e8 e7 12 00 00       	call   2775b <printk>
   26474:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:31
                strcpy(elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount++],(char*)(elfInfo->dynamicInfo.strTableAddress+dyn[cnt].d_un.d_ptr));
   26477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2647a:	8b 80 b8 18 00 00    	mov    eax,DWORD PTR [eax+0x18b8]
   26480:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   26483:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
   2648a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2648d:	01 ca                	add    edx,ecx
   2648f:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   26492:	c1 e2 02             	shl    edx,0x2
   26495:	8d 1c 10             	lea    ebx,[eax+edx*1]
   26498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2649b:	8b 80 a0 18 00 00    	mov    eax,DWORD PTR [eax+0x18a0]
   264a1:	8d 48 01             	lea    ecx,[eax+0x1]
   264a4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   264a7:	89 8a a0 18 00 00    	mov    DWORD PTR [edx+0x18a0],ecx
   264ad:	c1 e0 08             	shl    eax,0x8
   264b0:	8d 90 50 0e 00 00    	lea    edx,[eax+0xe50]
   264b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   264b9:	01 d0                	add    eax,edx
   264bb:	83 c0 04             	add    eax,0x4
   264be:	83 ec 08             	sub    esp,0x8
   264c1:	53                   	push   ebx
   264c2:	50                   	push   eax
   264c3:	e8 f4 13 00 00       	call   278bc <strcpy>
   264c8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:32
                char fileName[100]="/";
   264cb:	c7 45 84 2f 00 00 00 	mov    DWORD PTR [ebp-0x7c],0x2f
   264d2:	8d 55 88             	lea    edx,[ebp-0x78]
   264d5:	b8 00 00 00 00       	mov    eax,0x0
   264da:	b9 18 00 00 00       	mov    ecx,0x18
   264df:	89 d7                	mov    edi,edx
   264e1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
/home/yogi/src/os/chrisOS/src/newloader.c:33
                strcat(fileName,elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount-1]);
   264e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   264e6:	8b 80 a0 18 00 00    	mov    eax,DWORD PTR [eax+0x18a0]
   264ec:	83 e8 01             	sub    eax,0x1
   264ef:	c1 e0 08             	shl    eax,0x8
   264f2:	8d 90 50 0e 00 00    	lea    edx,[eax+0xe50]
   264f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   264fb:	01 d0                	add    eax,edx
   264fd:	83 c0 04             	add    eax,0x4
   26500:	83 ec 08             	sub    esp,0x8
   26503:	50                   	push   eax
   26504:	8d 45 84             	lea    eax,[ebp-0x7c]
   26507:	50                   	push   eax
   26508:	e8 c7 12 00 00       	call   277d4 <strcat>
   2650d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:34
                printd(DEBUG_ELF_LOADER,"Found NEEDED, library name='%s', orig name='%s'\n",fileName,elfInfo->dynamicInfo.strTableAddress+dyn[cnt].d_un.d_ptr);
   26510:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26513:	8b 80 b8 18 00 00    	mov    eax,DWORD PTR [eax+0x18b8]
   26519:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   2651c:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
   26523:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26526:	01 ca                	add    edx,ecx
   26528:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   2652b:	c1 e2 02             	shl    edx,0x2
   2652e:	01 d0                	add    eax,edx
   26530:	50                   	push   eax
   26531:	8d 45 84             	lea    eax,[ebp-0x7c]
   26534:	50                   	push   eax
   26535:	68 58 5b 08 00       	push   0x85b58
   2653a:	68 00 02 00 00       	push   0x200
   2653f:	e8 37 12 00 00       	call   2777b <printd>
   26544:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:35
                if (kDebugLevel&DEBUG_ELF_LOADER)
   26547:	a1 78 98 12 00       	mov    eax,ds:0x129878
   2654c:	25 00 02 00 00       	and    eax,0x200
   26551:	85 c0                	test   eax,eax
   26553:	74 1e                	je     26573 <processELFDynamicSection+0x181>
/home/yogi/src/os/chrisOS/src/newloader.c:37
                {
                    printd(DEBUG_ELF_LOADER,"loadElf: Calling loadElf again to load '%s' ... press a key to continue\n",&fileName);
   26555:	83 ec 04             	sub    esp,0x4
   26558:	8d 45 84             	lea    eax,[ebp-0x7c]
   2655b:	50                   	push   eax
   2655c:	68 8c 5b 08 00       	push   0x85b8c
   26561:	68 00 02 00 00       	push   0x200
   26566:	e8 10 12 00 00       	call   2777b <printd>
   2656b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:38
                    waitForKeyboardKey();
   2656e:	e8 ec ac fe ff       	call   1125f <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/newloader.c:40
                }
                void* fPtr=fopen(fileName, "r");
   26573:	83 ec 08             	sub    esp,0x8
   26576:	68 d5 5b 08 00       	push   0x85bd5
   2657b:	8d 45 84             	lea    eax,[ebp-0x7c]
   2657e:	50                   	push   eax
   2657f:	e8 a9 73 ff ff       	call   1d92d <fl_fopen>
   26584:	83 c4 10             	add    esp,0x10
   26587:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/newloader.c:41
                if (fPtr==0)
   2658a:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   2658e:	75 23                	jne    265b3 <processELFDynamicSection+0x1c1>
/home/yogi/src/os/chrisOS/src/newloader.c:43
                {
                    printk("Error opening file '%s', cannot exec\n",fileName);
   26590:	83 ec 08             	sub    esp,0x8
   26593:	8d 45 84             	lea    eax,[ebp-0x7c]
   26596:	50                   	push   eax
   26597:	68 d8 5b 08 00       	push   0x85bd8
   2659c:	e8 ba 11 00 00       	call   2775b <printk>
   265a1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:44
                    elfInfo->loadCompleted=false;
   265a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   265a7:	c6 80 d8 18 00 00 00 	mov    BYTE PTR [eax+0x18d8],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:45
                    return;
   265ae:	e9 e4 02 00 00       	jmp    26897 <processELFDynamicSection+0x4a5>
/home/yogi/src/os/chrisOS/src/newloader.c:47
                }   
                elfInfo->dynamicInfo.neededExecLoadNum[elfInfo->dynamicInfo.neededPtr++]=kExecLoadCount;
   265b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   265b6:	8b 80 54 18 00 00    	mov    eax,DWORD PTR [eax+0x1854]
   265bc:	8d 48 01             	lea    ecx,[eax+0x1]
   265bf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   265c2:	89 8a 54 18 00 00    	mov    DWORD PTR [edx+0x1854],ecx
   265c8:	8b 0d 40 99 12 00    	mov    ecx,DWORD PTR ds:0x129940
   265ce:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   265d1:	05 14 06 00 00       	add    eax,0x614
   265d6:	89 4c 82 08          	mov    DWORD PTR [edx+eax*4+0x8],ecx
/home/yogi/src/os/chrisOS/src/newloader.c:48
                elfInfo_t* elfLibPtr=&kExecLoadInfo[kExecLoadCount++];
   265da:	8b 0d 3c 99 12 00    	mov    ecx,DWORD PTR ds:0x12993c
   265e0:	a1 40 99 12 00       	mov    eax,ds:0x129940
   265e5:	8d 50 01             	lea    edx,[eax+0x1]
   265e8:	89 15 40 99 12 00    	mov    DWORD PTR ds:0x129940,edx
   265ee:	69 c0 dc 18 00 00    	imul   eax,eax,0x18dc
   265f4:	01 c8                	add    eax,ecx
   265f6:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/newloader.c:49
                loadElf(fPtr,elfLibPtr,true);
   265f9:	83 ec 04             	sub    esp,0x4
   265fc:	6a 01                	push   0x1
   265fe:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   26601:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   26604:	e8 5f 08 00 00       	call   26e68 <loadElf>
   26609:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:50
                fclose(fPtr);
   2660c:	83 ec 0c             	sub    esp,0xc
   2660f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   26612:	e8 47 77 ff ff       	call   1dd5e <fl_fclose>
   26617:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:51
                if (!elfLibPtr->loadCompleted)
   2661a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2661d:	0f b6 80 d8 18 00 00 	movzx  eax,BYTE PTR [eax+0x18d8]
   26624:	83 f0 01             	xor    eax,0x1
   26627:	84 c0                	test   al,al
   26629:	0f 84 51 02 00 00    	je     26880 <processELFDynamicSection+0x48e>
/home/yogi/src/os/chrisOS/src/newloader.c:53
                {
                    printd(DEBUG_ELF_LOADER,"EXEC: processELFDynamicSection ... loading library failed.");
   2662f:	83 ec 08             	sub    esp,0x8
   26632:	68 00 5c 08 00       	push   0x85c00
   26637:	68 00 02 00 00       	push   0x200
   2663c:	e8 3a 11 00 00       	call   2777b <printd>
   26641:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:54
                    elfInfo->loadCompleted=false;
   26644:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26647:	c6 80 d8 18 00 00 00 	mov    BYTE PTR [eax+0x18d8],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:55
                    return;
   2664e:	90                   	nop
   2664f:	e9 43 02 00 00       	jmp    26897 <processELFDynamicSection+0x4a5>
/home/yogi/src/os/chrisOS/src/newloader.c:59
                }
                break;
            case DT_PLTRELSZ:
                elfInfo->dynamicInfo.pltGOTTableTableSize=dyn[cnt].d_un.d_val;
   26654:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26657:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   2665e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26661:	01 d0                	add    eax,edx
   26663:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   26666:	89 c2                	mov    edx,eax
   26668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2666b:	89 90 98 18 00 00    	mov    DWORD PTR [eax+0x1898],edx
/home/yogi/src/os/chrisOS/src/newloader.c:60
                break;
   26671:	e9 0b 02 00 00       	jmp    26881 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:62
            case DT_PLTGOT:
                elfInfo->dynamicInfo.pltGOTTableAddress=dyn[cnt].d_un.d_ptr;
   26676:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26679:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26680:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26683:	01 d0                	add    eax,edx
   26685:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26688:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2668b:	89 90 b0 18 00 00    	mov    DWORD PTR [eax+0x18b0],edx
/home/yogi/src/os/chrisOS/src/newloader.c:63
                break;
   26691:	e9 eb 01 00 00       	jmp    26881 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:65
            case DT_HASH:
                elfInfo->dynamicInfo.hashTableAddress=dyn[cnt].d_un.d_ptr;
   26696:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26699:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   266a0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   266a3:	01 d0                	add    eax,edx
   266a5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   266a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   266ab:	89 90 b4 18 00 00    	mov    DWORD PTR [eax+0x18b4],edx
/home/yogi/src/os/chrisOS/src/newloader.c:66
                break;
   266b1:	e9 cb 01 00 00       	jmp    26881 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:74
                break;
            case DT_SYMTAB:
                //Already found it above
                break;
            case DT_RELA:
                elfInfo->dynamicInfo.relATableAddress=dyn[cnt].d_un.d_ptr;
   266b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   266b9:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   266c0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   266c3:	01 d0                	add    eax,edx
   266c5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   266c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   266cb:	89 90 c4 18 00 00    	mov    DWORD PTR [eax+0x18c4],edx
/home/yogi/src/os/chrisOS/src/newloader.c:75
                break;
   266d1:	e9 ab 01 00 00       	jmp    26881 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:77
            case DT_RELASZ:
                elfInfo->dynamicInfo.relATableSize=dyn[cnt].d_un.d_val;
   266d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   266d9:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   266e0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   266e3:	01 d0                	add    eax,edx
   266e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   266e8:	89 c2                	mov    edx,eax
   266ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   266ed:	89 90 84 18 00 00    	mov    DWORD PTR [eax+0x1884],edx
/home/yogi/src/os/chrisOS/src/newloader.c:78
                break;
   266f3:	e9 89 01 00 00       	jmp    26881 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:80
            case DT_RELAENT:
                elfInfo->dynamicInfo.relAEntrySize=dyn[cnt].d_un.d_val;
   266f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   266fb:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26702:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26705:	01 d0                	add    eax,edx
   26707:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2670a:	89 c2                	mov    edx,eax
   2670c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2670f:	89 90 88 18 00 00    	mov    DWORD PTR [eax+0x1888],edx
/home/yogi/src/os/chrisOS/src/newloader.c:81
                break;
   26715:	e9 67 01 00 00       	jmp    26881 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:83
            case DT_STRSZ:
                elfInfo->dynamicInfo.strTableSize=dyn[cnt].d_un.d_val;
   2671a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2671d:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26724:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26727:	01 d0                	add    eax,edx
   26729:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2672c:	89 c2                	mov    edx,eax
   2672e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26731:	89 90 8c 18 00 00    	mov    DWORD PTR [eax+0x188c],edx
/home/yogi/src/os/chrisOS/src/newloader.c:84
                break;
   26737:	e9 45 01 00 00       	jmp    26881 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:86
            case DT_SYMENT:
                elfInfo->dynamicInfo.symEntrySize=dyn[cnt].d_un.d_val;
   2673c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2673f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26746:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26749:	01 d0                	add    eax,edx
   2674b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2674e:	89 c2                	mov    edx,eax
   26750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26753:	89 90 90 18 00 00    	mov    DWORD PTR [eax+0x1890],edx
/home/yogi/src/os/chrisOS/src/newloader.c:87
                break;
   26759:	e9 23 01 00 00       	jmp    26881 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:89
            case DT_INIT:
                elfInfo->dynamicInfo.initFunctionAddress=dyn[cnt].d_un.d_ptr;
   2675e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26761:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26768:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2676b:	01 d0                	add    eax,edx
   2676d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26773:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:90
                elfInfo->dynamicInfo.initFunctionAddress+=libLoadOffset;
   26779:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2677c:	8b 90 c8 18 00 00    	mov    edx,DWORD PTR [eax+0x18c8]
   26782:	a1 ec a5 09 00       	mov    eax,ds:0x9a5ec
   26787:	01 c2                	add    edx,eax
   26789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2678c:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:91
                break;
   26792:	e9 ea 00 00 00       	jmp    26881 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:93
            case DT_FINI:
                elfInfo->dynamicInfo.termFunctionAddress=dyn[cnt].d_un.d_ptr;
   26797:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2679a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   267a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   267a4:	01 d0                	add    eax,edx
   267a6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   267a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   267ac:	89 90 cc 18 00 00    	mov    DWORD PTR [eax+0x18cc],edx
/home/yogi/src/os/chrisOS/src/newloader.c:94
                elfInfo->dynamicInfo.termFunctionAddress+=libLoadOffset;
   267b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   267b5:	8b 90 cc 18 00 00    	mov    edx,DWORD PTR [eax+0x18cc]
   267bb:	a1 ec a5 09 00       	mov    eax,ds:0x9a5ec
   267c0:	01 c2                	add    edx,eax
   267c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   267c5:	89 90 cc 18 00 00    	mov    DWORD PTR [eax+0x18cc],edx
/home/yogi/src/os/chrisOS/src/newloader.c:95
                break;
   267cb:	e9 b1 00 00 00       	jmp    26881 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:105
                //Can't find the relocation section this way, using section headers
                //elfInfo->dynamicInfo.relTableAddress=dyn[cnt].d_un.d_ptr;
                //printk("%s: Found DT_REL, address=0x%08X (0x%08X)\n",isLibrary?"library":"executable",dyn[cnt].d_un.d_ptr,elfInfo->dynamicInfo.relTableAddress);
                break;
            case DT_RELSZ:
                elfInfo->dynamicInfo.relTableSize=dyn[cnt].d_un.d_val;
   267d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   267d3:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   267da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   267dd:	01 d0                	add    eax,edx
   267df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   267e2:	89 c2                	mov    edx,eax
   267e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   267e7:	89 90 94 18 00 00    	mov    DWORD PTR [eax+0x1894],edx
/home/yogi/src/os/chrisOS/src/newloader.c:106
                break;
   267ed:	e9 8f 00 00 00       	jmp    26881 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:108
            case DT_RELENT:
                elfInfo->dynamicInfo.relEntrySize=dyn[cnt].d_un.d_val;
   267f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   267f5:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   267fc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   267ff:	01 d0                	add    eax,edx
   26801:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   26804:	89 c2                	mov    edx,eax
   26806:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26809:	89 90 9c 18 00 00    	mov    DWORD PTR [eax+0x189c],edx
/home/yogi/src/os/chrisOS/src/newloader.c:109
                break;
   2680f:	eb 70                	jmp    26881 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:121
            case DT_JMPREL:
                break;
            case DT_BIND_NOW:
                break;
            case DT_INIT_ARRAY:
                elfInfo->dynamicInfo.initFunctionAddress=dyn[cnt].d_un.d_ptr;
   26811:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26814:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   2681b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2681e:	01 d0                	add    eax,edx
   26820:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26823:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26826:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:122
                elfInfo->dynamicInfo.initFunctionAddress+=libLoadOffset;
   2682c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2682f:	8b 90 c8 18 00 00    	mov    edx,DWORD PTR [eax+0x18c8]
   26835:	a1 ec a5 09 00       	mov    eax,ds:0x9a5ec
   2683a:	01 c2                	add    edx,eax
   2683c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2683f:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:123
                break;
   26845:	eb 3a                	jmp    26881 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:125
            case DT_FINI_ARRAY:
                elfInfo->dynamicInfo.termFunctionAddress=dyn[cnt].d_un.d_ptr;
   26847:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2684a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26851:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26854:	01 d0                	add    eax,edx
   26856:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26859:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2685c:	89 90 cc 18 00 00    	mov    DWORD PTR [eax+0x18cc],edx
/home/yogi/src/os/chrisOS/src/newloader.c:126
                elfInfo->dynamicInfo.termFunctionAddress+=libLoadOffset;
   26862:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26865:	8b 90 cc 18 00 00    	mov    edx,DWORD PTR [eax+0x18cc]
   2686b:	a1 ec a5 09 00       	mov    eax,ds:0x9a5ec
   26870:	01 c2                	add    edx,eax
   26872:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26875:	89 90 cc 18 00 00    	mov    DWORD PTR [eax+0x18cc],edx
/home/yogi/src/os/chrisOS/src/newloader.c:127
                break;
   2687b:	eb 04                	jmp    26881 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:135
            case DT_FINI_ARRAYSZ:
                break;
            case DT_FLAGS:
                break;
            default:
                break;
   2687d:	90                   	nop
   2687e:	eb 01                	jmp    26881 <processELFDynamicSection+0x48f>
/home/yogi/src/os/chrisOS/src/newloader.c:57
                {
                    printd(DEBUG_ELF_LOADER,"EXEC: processELFDynamicSection ... loading library failed.");
                    elfInfo->loadCompleted=false;
                    return;
                }
                break;
   26880:	90                   	nop
/home/yogi/src/os/chrisOS/src/newloader.c:24
{
    Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;

    //Next process the rest of the dynamic section entries
    elfInfo->dynamicInfo.neededCount=0;
    for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   26881:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:24 (discriminator 1)
   26885:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26888:	8b 80 4c 0e 00 00    	mov    eax,DWORD PTR [eax+0xe4c]
   2688e:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   26891:	0f 8f 88 fb ff ff    	jg     2641f <processELFDynamicSection+0x2d>
/home/yogi/src/os/chrisOS/src/newloader.c:139
            default:
                break;
        }
    }

}
   26897:	8d 65 f8             	lea    esp,[ebp-0x8]
   2689a:	5b                   	pop    ebx
   2689b:	5f                   	pop    edi
   2689c:	5d                   	pop    ebp
   2689d:	c3                   	ret    

0002689e <loadSections>:
loadSections():
/home/yogi/src/os/chrisOS/src/newloader.c:142

void loadSections(void* file,elfInfo_t* elfInfo, bool isLibrary)
{
   2689e:	55                   	push   ebp
   2689f:	89 e5                	mov    ebp,esp
   268a1:	53                   	push   ebx
   268a2:	83 ec 24             	sub    esp,0x24
   268a5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   268a8:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/newloader.c:146
    uint8_t* loadAddress;

    //Go to the beginning of the file and get the elf header
    fl_fseek(file, 0, SEEK_SET);
   268ab:	83 ec 04             	sub    esp,0x4
   268ae:	6a 00                	push   0x0
   268b0:	6a 00                	push   0x0
   268b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   268b5:	e8 5f 78 ff ff       	call   1e119 <fl_fseek>
   268ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:147
    fl_fread(&elfInfo->hdr, sizeof(elfInfo->hdr),1,file);
   268bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   268c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   268c3:	6a 01                	push   0x1
   268c5:	6a 34                	push   0x34
   268c7:	50                   	push   eax
   268c8:	e8 2d 76 ff ff       	call   1defa <fl_fread>
   268cd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:148
    if (elfInfo->hdr.e_ident[0] != 0x7F) 
   268d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   268d3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   268d6:	3c 7f                	cmp    al,0x7f
   268d8:	74 66                	je     26940 <loadSections+0xa2>
/home/yogi/src/os/chrisOS/src/newloader.c:149
        if (elfInfo->hdr.e_ident[1] != 'E') 
   268da:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   268dd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   268e1:	3c 45                	cmp    al,0x45
   268e3:	74 5b                	je     26940 <loadSections+0xa2>
/home/yogi/src/os/chrisOS/src/newloader.c:150
            if (elfInfo->hdr.e_ident[1] != 'L') 
   268e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   268e8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   268ec:	3c 4c                	cmp    al,0x4c
   268ee:	74 50                	je     26940 <loadSections+0xa2>
/home/yogi/src/os/chrisOS/src/newloader.c:151
                if (elfInfo->hdr.e_ident[2] != 'F')
   268f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   268f3:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   268f7:	3c 46                	cmp    al,0x46
   268f9:	74 45                	je     26940 <loadSections+0xa2>
/home/yogi/src/os/chrisOS/src/newloader.c:153
                {
                    printd(DEBUG_ELF_LOADER,"Invalid ELF magic '%c' '%c' '%c', cannot load", elfInfo->hdr.e_ident[1], elfInfo->hdr.e_ident[2], elfInfo->hdr.e_ident[3]);
   268fb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   268fe:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   26902:	0f b6 c8             	movzx  ecx,al
   26905:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26908:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   2690c:	0f b6 d0             	movzx  edx,al
   2690f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26912:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   26916:	0f b6 c0             	movzx  eax,al
   26919:	83 ec 0c             	sub    esp,0xc
   2691c:	51                   	push   ecx
   2691d:	52                   	push   edx
   2691e:	50                   	push   eax
   2691f:	68 b8 5c 08 00       	push   0x85cb8
   26924:	68 00 02 00 00       	push   0x200
   26929:	e8 4d 0e 00 00       	call   2777b <printd>
   2692e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:154
                    elfInfo->loadCompleted=false;
   26931:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26934:	c6 80 d8 18 00 00 00 	mov    BYTE PTR [eax+0x18d8],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:155
                    return;
   2693b:	e9 23 05 00 00       	jmp    26e63 <loadSections+0x5c5>
/home/yogi/src/os/chrisOS/src/newloader.c:159
                }
    
    //Make sure the file is viable
    if (elfInfo->hdr.e_type!=ET_EXEC && elfInfo->hdr.e_type!=ET_DYN)
   26940:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26943:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   26947:	66 83 f8 02          	cmp    ax,0x2
   2694b:	74 3c                	je     26989 <loadSections+0xeb>
/home/yogi/src/os/chrisOS/src/newloader.c:159 (discriminator 1)
   2694d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26950:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   26954:	66 83 f8 03          	cmp    ax,0x3
   26958:	74 2f                	je     26989 <loadSections+0xeb>
/home/yogi/src/os/chrisOS/src/newloader.c:161
    {
        printd(DEBUG_ELF_LOADER,"Wrong ELF type 0x%04X, cannot load\n", elfInfo->hdr.e_type);
   2695a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2695d:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   26961:	0f b7 c0             	movzx  eax,ax
   26964:	83 ec 04             	sub    esp,0x4
   26967:	50                   	push   eax
   26968:	68 e8 5c 08 00       	push   0x85ce8
   2696d:	68 00 02 00 00       	push   0x200
   26972:	e8 04 0e 00 00       	call   2777b <printd>
   26977:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:162
        elfInfo->loadCompleted=false;
   2697a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2697d:	c6 80 d8 18 00 00 00 	mov    BYTE PTR [eax+0x18d8],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:163
        return;
   26984:	e9 da 04 00 00       	jmp    26e63 <loadSections+0x5c5>
/home/yogi/src/os/chrisOS/src/newloader.c:165
    }
    if (elfInfo->hdr.e_machine!=EM_386)
   26989:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2698c:	0f b7 40 12          	movzx  eax,WORD PTR [eax+0x12]
   26990:	66 83 f8 03          	cmp    ax,0x3
   26994:	74 2f                	je     269c5 <loadSections+0x127>
/home/yogi/src/os/chrisOS/src/newloader.c:167
    {
        printd(DEBUG_ELF_LOADER,"Wrong ELF architecture 0x%04X, cannot load\n", elfInfo->hdr.e_type);
   26996:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26999:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   2699d:	0f b7 c0             	movzx  eax,ax
   269a0:	83 ec 04             	sub    esp,0x4
   269a3:	50                   	push   eax
   269a4:	68 0c 5d 08 00       	push   0x85d0c
   269a9:	68 00 02 00 00       	push   0x200
   269ae:	e8 c8 0d 00 00       	call   2777b <printd>
   269b3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:168
        elfInfo->loadCompleted=false;
   269b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   269b9:	c6 80 d8 18 00 00 00 	mov    BYTE PTR [eax+0x18d8],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:169
        return;
   269c0:	e9 9e 04 00 00       	jmp    26e63 <loadSections+0x5c5>
/home/yogi/src/os/chrisOS/src/newloader.c:173
    }
    
    //Get the section header table
    printd(DEBUG_ELF_LOADER,"section header record count= %u\n", elfInfo->hdr.e_shnum);
   269c5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   269c8:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
   269cc:	0f b7 c0             	movzx  eax,ax
   269cf:	83 ec 04             	sub    esp,0x4
   269d2:	50                   	push   eax
   269d3:	68 38 5d 08 00       	push   0x85d38
   269d8:	68 00 02 00 00       	push   0x200
   269dd:	e8 99 0d 00 00       	call   2777b <printd>
   269e2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:174
    printd(DEBUG_ELF_LOADER,"e_shentsize=%u, oursize=%u\n", elfInfo->hdr.e_shentsize, sizeof(Elf32_Shdr) );
   269e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   269e8:	0f b7 40 2e          	movzx  eax,WORD PTR [eax+0x2e]
   269ec:	0f b7 c0             	movzx  eax,ax
   269ef:	6a 28                	push   0x28
   269f1:	50                   	push   eax
   269f2:	68 59 5d 08 00       	push   0x85d59
   269f7:	68 00 02 00 00       	push   0x200
   269fc:	e8 7a 0d 00 00       	call   2777b <printd>
   26a01:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:175
    fl_fseek(file, elfInfo->hdr.e_shoff,SEEK_SET);
   26a04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a07:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   26a0a:	83 ec 04             	sub    esp,0x4
   26a0d:	6a 00                	push   0x0
   26a0f:	50                   	push   eax
   26a10:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26a13:	e8 01 77 ff ff       	call   1e119 <fl_fseek>
   26a18:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:176
    printd(DEBUG_ELF_LOADER,"reading SHOFF\n",elfInfo->hdr.e_shoff);
   26a1b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a1e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   26a21:	83 ec 04             	sub    esp,0x4
   26a24:	50                   	push   eax
   26a25:	68 75 5d 08 00       	push   0x85d75
   26a2a:	68 00 02 00 00       	push   0x200
   26a2f:	e8 47 0d 00 00       	call   2777b <printd>
   26a34:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:177
    fl_fread(elfInfo->secHdrTable, sizeof(Elf32_Shdr),elfInfo->hdr.e_shnum,file);
   26a37:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a3a:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
   26a3e:	0f b7 c0             	movzx  eax,ax
   26a41:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   26a44:	83 c2 34             	add    edx,0x34
   26a47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26a4a:	50                   	push   eax
   26a4b:	6a 28                	push   0x28
   26a4d:	52                   	push   edx
   26a4e:	e8 a7 74 ff ff       	call   1defa <fl_fread>
   26a53:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:180
    
    //Get the program header table
    printd(DEBUG_ELF_LOADER,"seeking to 0x%08X ...",elfInfo->hdr.e_phoff);
   26a56:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a59:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   26a5c:	83 ec 04             	sub    esp,0x4
   26a5f:	50                   	push   eax
   26a60:	68 84 5d 08 00       	push   0x85d84
   26a65:	68 00 02 00 00       	push   0x200
   26a6a:	e8 0c 0d 00 00       	call   2777b <printd>
   26a6f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:181
    printd(DEBUG_ELF_LOADER,"reading PHOFF\n",elfInfo->hdr.e_phoff);
   26a72:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a75:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   26a78:	83 ec 04             	sub    esp,0x4
   26a7b:	50                   	push   eax
   26a7c:	68 9a 5d 08 00       	push   0x85d9a
   26a81:	68 00 02 00 00       	push   0x200
   26a86:	e8 f0 0c 00 00       	call   2777b <printd>
   26a8b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:182
    fl_fseek(file, elfInfo->hdr.e_phoff, SEEK_SET);
   26a8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a91:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   26a94:	83 ec 04             	sub    esp,0x4
   26a97:	6a 00                	push   0x0
   26a99:	50                   	push   eax
   26a9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26a9d:	e8 77 76 ff ff       	call   1e119 <fl_fseek>
   26aa2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:183
    fl_fread(elfInfo->pgmHdrTable, sizeof(Elf32_Phdr),elfInfo->hdr.e_phnum,file);
   26aa5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26aa8:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
   26aac:	0f b7 c0             	movzx  eax,ax
   26aaf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   26ab2:	81 c2 04 08 00 00    	add    edx,0x804
   26ab8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26abb:	50                   	push   eax
   26abc:	6a 20                	push   0x20
   26abe:	52                   	push   edx
   26abf:	e8 36 74 ff ff       	call   1defa <fl_fread>
   26ac4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:186
    
    //Process the program header table and load all of the sections in the file into memory
    for (int cnt=0;cnt<elfInfo->hdr.e_phnum;cnt++)
   26ac7:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   26ace:	e9 68 03 00 00       	jmp    26e3b <loadSections+0x59d>
/home/yogi/src/os/chrisOS/src/newloader.c:188
    {
        loadAddress = (uint8_t*)elfInfo->pgmHdrTable[cnt].p_vaddr;
   26ad3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ad6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26ad9:	83 c2 40             	add    edx,0x40
   26adc:	c1 e2 05             	shl    edx,0x5
   26adf:	01 d0                	add    eax,edx
   26ae1:	83 c0 0c             	add    eax,0xc
   26ae4:	8b 00                	mov    eax,DWORD PTR [eax]
   26ae6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/newloader.c:189
        if (isLibrary)
   26ae9:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   26aed:	74 1e                	je     26b0d <loadSections+0x26f>
/home/yogi/src/os/chrisOS/src/newloader.c:191
        {
            loadAddress+=libLoadOffset;
   26aef:	a1 ec a5 09 00       	mov    eax,ds:0x9a5ec
   26af4:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/newloader.c:192
            elfInfo->pgmHdrTable[cnt].p_vaddr=loadAddress;
   26af7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26afa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   26afd:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   26b00:	83 c1 40             	add    ecx,0x40
   26b03:	c1 e1 05             	shl    ecx,0x5
   26b06:	01 ca                	add    edx,ecx
   26b08:	83 c2 0c             	add    edx,0xc
   26b0b:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/newloader.c:195
        }

        if (elfInfo->pgmHdrTable[cnt].p_vaddr==KERNEL_DATA_LOAD_ADDRESS)
   26b0d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b10:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26b13:	83 c2 40             	add    edx,0x40
   26b16:	c1 e2 05             	shl    edx,0x5
   26b19:	01 d0                	add    eax,edx
   26b1b:	83 c0 0c             	add    eax,0xc
   26b1e:	8b 00                	mov    eax,DWORD PTR [eax]
   26b20:	89 c2                	mov    edx,eax
   26b22:	a1 00 00 12 00       	mov    eax,ds:0x120000
   26b27:	39 c2                	cmp    edx,eax
   26b29:	75 1d                	jne    26b48 <loadSections+0x2aa>
/home/yogi/src/os/chrisOS/src/newloader.c:197
        {
            printd(DEBUG_ELF_LOADER,"Section %u load address is kernel data base address (0x%08X), skipping load\n",cnt,loadAddress);
   26b2b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26b2e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26b31:	68 ac 5d 08 00       	push   0x85dac
   26b36:	68 00 02 00 00       	push   0x200
   26b3b:	e8 3b 0c 00 00       	call   2777b <printd>
   26b40:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:198
            continue;
   26b43:	e9 ef 02 00 00       	jmp    26e37 <loadSections+0x599>
/home/yogi/src/os/chrisOS/src/newloader.c:200
        }
        else if (elfInfo->pgmHdrTable[cnt].p_offset==elfInfo->hdr.e_phoff)
   26b48:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b4b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26b4e:	83 c2 40             	add    edx,0x40
   26b51:	c1 e2 05             	shl    edx,0x5
   26b54:	01 d0                	add    eax,edx
   26b56:	83 c0 08             	add    eax,0x8
   26b59:	8b 10                	mov    edx,DWORD PTR [eax]
   26b5b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b5e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   26b61:	39 c2                	cmp    edx,eax
   26b63:	75 2e                	jne    26b93 <loadSections+0x2f5>
/home/yogi/src/os/chrisOS/src/newloader.c:202
        {
            printd(DEBUG_ELF_LOADER,"Section %u file offset is program header address (0x%08X),skipping load\n",cnt,elfInfo->pgmHdrTable[cnt].p_offset);
   26b65:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b68:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26b6b:	83 c2 40             	add    edx,0x40
   26b6e:	c1 e2 05             	shl    edx,0x5
   26b71:	01 d0                	add    eax,edx
   26b73:	83 c0 08             	add    eax,0x8
   26b76:	8b 00                	mov    eax,DWORD PTR [eax]
   26b78:	50                   	push   eax
   26b79:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26b7c:	68 fc 5d 08 00       	push   0x85dfc
   26b81:	68 00 02 00 00       	push   0x200
   26b86:	e8 f0 0b 00 00       	call   2777b <printd>
   26b8b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:203
            continue;
   26b8e:	e9 a4 02 00 00       	jmp    26e37 <loadSections+0x599>
/home/yogi/src/os/chrisOS/src/newloader.c:205
        }
        if (loadAddress!=0 && elfInfo->libLoadAddress==0 && (elfInfo->hdr.e_type!=ET_REL && elfInfo->hdr.e_type!=ET_DYN))
   26b93:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   26b97:	74 4b                	je     26be4 <loadSections+0x346>
/home/yogi/src/os/chrisOS/src/newloader.c:205 (discriminator 1)
   26b99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b9c:	8b 80 d4 18 00 00    	mov    eax,DWORD PTR [eax+0x18d4]
   26ba2:	85 c0                	test   eax,eax
   26ba4:	75 3e                	jne    26be4 <loadSections+0x346>
/home/yogi/src/os/chrisOS/src/newloader.c:205 (discriminator 2)
   26ba6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ba9:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   26bad:	66 83 f8 01          	cmp    ax,0x1
   26bb1:	74 31                	je     26be4 <loadSections+0x346>
/home/yogi/src/os/chrisOS/src/newloader.c:205 (discriminator 3)
   26bb3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26bb6:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   26bba:	66 83 f8 03          	cmp    ax,0x3
   26bbe:	74 24                	je     26be4 <loadSections+0x346>
/home/yogi/src/os/chrisOS/src/newloader.c:207
        {
            elfInfo->libLoadAddress=(uintptr_t)loadAddress;
   26bc0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   26bc3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26bc6:	89 90 d4 18 00 00    	mov    DWORD PTR [eax+0x18d4],edx
/home/yogi/src/os/chrisOS/src/newloader.c:208
            printd(DEBUG_ELF_LOADER,"Setting main load address to 0x%08X\n",loadAddress);
   26bcc:	83 ec 04             	sub    esp,0x4
   26bcf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26bd2:	68 48 5e 08 00       	push   0x85e48
   26bd7:	68 00 02 00 00       	push   0x200
   26bdc:	e8 9a 0b 00 00       	call   2777b <printd>
   26be1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:212
            
        }
        //printd(DEBUG_ELF_LOADER,"Next load address is 0x%08X\n",elfInfo->pgmHdrTable[cnt].p_vaddr);
        if (elfInfo->pgmHdrTable[cnt].p_filesz>0)
   26be4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26be7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26bea:	c1 e2 05             	shl    edx,0x5
   26bed:	01 d0                	add    eax,edx
   26bef:	05 14 08 00 00       	add    eax,0x814
   26bf4:	8b 00                	mov    eax,DWORD PTR [eax]
   26bf6:	85 c0                	test   eax,eax
   26bf8:	0f 84 9f 01 00 00    	je     26d9d <loadSections+0x4ff>
/home/yogi/src/os/chrisOS/src/newloader.c:214
        {
            printd(DEBUG_ELF_LOADER,"seeking to 0x%08X ...",elfInfo->pgmHdrTable[cnt].p_offset);
   26bfe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26c01:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26c04:	83 c2 40             	add    edx,0x40
   26c07:	c1 e2 05             	shl    edx,0x5
   26c0a:	01 d0                	add    eax,edx
   26c0c:	83 c0 08             	add    eax,0x8
   26c0f:	8b 00                	mov    eax,DWORD PTR [eax]
   26c11:	83 ec 04             	sub    esp,0x4
   26c14:	50                   	push   eax
   26c15:	68 84 5d 08 00       	push   0x85d84
   26c1a:	68 00 02 00 00       	push   0x200
   26c1f:	e8 57 0b 00 00       	call   2777b <printd>
   26c24:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:215
            fl_fseek(file, elfInfo->pgmHdrTable[cnt].p_offset, SEEK_SET);
   26c27:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26c2a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26c2d:	83 c2 40             	add    edx,0x40
   26c30:	c1 e2 05             	shl    edx,0x5
   26c33:	01 d0                	add    eax,edx
   26c35:	83 c0 08             	add    eax,0x8
   26c38:	8b 00                	mov    eax,DWORD PTR [eax]
   26c3a:	83 ec 04             	sub    esp,0x4
   26c3d:	6a 00                	push   0x0
   26c3f:	50                   	push   eax
   26c40:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26c43:	e8 d1 74 ff ff       	call   1e119 <fl_fseek>
   26c48:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:216
            printd(DEBUG_ELF_LOADER,"reading %u bytes to 0x%08X\n",elfInfo->pgmHdrTable[cnt].p_memsz,loadAddress);
   26c4b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26c4e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26c51:	c1 e2 05             	shl    edx,0x5
   26c54:	01 d0                	add    eax,edx
   26c56:	05 18 08 00 00       	add    eax,0x818
   26c5b:	8b 00                	mov    eax,DWORD PTR [eax]
   26c5d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26c60:	50                   	push   eax
   26c61:	68 6d 5e 08 00       	push   0x85e6d
   26c66:	68 00 02 00 00       	push   0x200
   26c6b:	e8 0b 0b 00 00       	call   2777b <printd>
   26c70:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:217
            fl_fread(loadAddress, 1, elfInfo->pgmHdrTable[cnt].p_memsz, file);
   26c73:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26c76:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26c79:	c1 e2 05             	shl    edx,0x5
   26c7c:	01 d0                	add    eax,edx
   26c7e:	05 18 08 00 00       	add    eax,0x818
   26c83:	8b 00                	mov    eax,DWORD PTR [eax]
   26c85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26c88:	50                   	push   eax
   26c89:	6a 01                	push   0x1
   26c8b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26c8e:	e8 67 72 ff ff       	call   1defa <fl_fread>
   26c93:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:218
            printd(DEBUG_ELF_LOADER,"Section %u loaded 0x%08X bytes at 0x%08X\n", cnt, elfInfo->pgmHdrTable[cnt].p_memsz, loadAddress);
   26c96:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26c99:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26c9c:	c1 e2 05             	shl    edx,0x5
   26c9f:	01 d0                	add    eax,edx
   26ca1:	05 18 08 00 00       	add    eax,0x818
   26ca6:	8b 00                	mov    eax,DWORD PTR [eax]
   26ca8:	83 ec 0c             	sub    esp,0xc
   26cab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26cae:	50                   	push   eax
   26caf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26cb2:	68 8c 5e 08 00       	push   0x85e8c
   26cb7:	68 00 02 00 00       	push   0x200
   26cbc:	e8 ba 0a 00 00       	call   2777b <printd>
   26cc1:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:219
            if (elfInfo->pgmHdrTable[cnt].p_filesz<elfInfo->pgmHdrTable[cnt].p_memsz)
   26cc4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26cc7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26cca:	c1 e2 05             	shl    edx,0x5
   26ccd:	01 d0                	add    eax,edx
   26ccf:	05 14 08 00 00       	add    eax,0x814
   26cd4:	8b 10                	mov    edx,DWORD PTR [eax]
   26cd6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26cd9:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   26cdc:	c1 e1 05             	shl    ecx,0x5
   26cdf:	01 c8                	add    eax,ecx
   26ce1:	05 18 08 00 00       	add    eax,0x818
   26ce6:	8b 00                	mov    eax,DWORD PTR [eax]
   26ce8:	39 c2                	cmp    edx,eax
   26cea:	0f 83 47 01 00 00    	jae    26e37 <loadSections+0x599>
/home/yogi/src/os/chrisOS/src/newloader.c:221
            {
                printd(DEBUG_ELF_LOADER,"Section %u has uninitialized data, zeroed 0x%08X bytes at 0x%08X\n", cnt, elfInfo->pgmHdrTable[cnt].p_memsz-elfInfo->pgmHdrTable[cnt].p_filesz, loadAddress+elfInfo->pgmHdrTable[cnt].p_filesz);
   26cf0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26cf3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26cf6:	c1 e2 05             	shl    edx,0x5
   26cf9:	01 d0                	add    eax,edx
   26cfb:	05 14 08 00 00       	add    eax,0x814
   26d00:	8b 10                	mov    edx,DWORD PTR [eax]
   26d02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26d05:	01 c2                	add    edx,eax
   26d07:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26d0a:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   26d0d:	c1 e1 05             	shl    ecx,0x5
   26d10:	01 c8                	add    eax,ecx
   26d12:	05 18 08 00 00       	add    eax,0x818
   26d17:	8b 08                	mov    ecx,DWORD PTR [eax]
   26d19:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26d1c:	8b 5d f0             	mov    ebx,DWORD PTR [ebp-0x10]
   26d1f:	c1 e3 05             	shl    ebx,0x5
   26d22:	01 d8                	add    eax,ebx
   26d24:	05 14 08 00 00       	add    eax,0x814
   26d29:	8b 00                	mov    eax,DWORD PTR [eax]
   26d2b:	29 c1                	sub    ecx,eax
   26d2d:	89 c8                	mov    eax,ecx
   26d2f:	83 ec 0c             	sub    esp,0xc
   26d32:	52                   	push   edx
   26d33:	50                   	push   eax
   26d34:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26d37:	68 b8 5e 08 00       	push   0x85eb8
   26d3c:	68 00 02 00 00       	push   0x200
   26d41:	e8 35 0a 00 00       	call   2777b <printd>
   26d46:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:222
                memset(loadAddress+elfInfo->pgmHdrTable[cnt].p_filesz+1,0,elfInfo->pgmHdrTable[cnt].p_memsz-elfInfo->pgmHdrTable[cnt].p_filesz);
   26d49:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26d4c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26d4f:	c1 e2 05             	shl    edx,0x5
   26d52:	01 d0                	add    eax,edx
   26d54:	05 18 08 00 00       	add    eax,0x818
   26d59:	8b 10                	mov    edx,DWORD PTR [eax]
   26d5b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26d5e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   26d61:	c1 e1 05             	shl    ecx,0x5
   26d64:	01 c8                	add    eax,ecx
   26d66:	05 14 08 00 00       	add    eax,0x814
   26d6b:	8b 00                	mov    eax,DWORD PTR [eax]
   26d6d:	29 c2                	sub    edx,eax
   26d6f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26d72:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   26d75:	c1 e1 05             	shl    ecx,0x5
   26d78:	01 c8                	add    eax,ecx
   26d7a:	05 14 08 00 00       	add    eax,0x814
   26d7f:	8b 00                	mov    eax,DWORD PTR [eax]
   26d81:	8d 48 01             	lea    ecx,[eax+0x1]
   26d84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26d87:	01 c8                	add    eax,ecx
   26d89:	83 ec 04             	sub    esp,0x4
   26d8c:	52                   	push   edx
   26d8d:	6a 00                	push   0x0
   26d8f:	50                   	push   eax
   26d90:	e8 74 e8 ff ff       	call   25609 <memset>
   26d95:	83 c4 10             	add    esp,0x10
   26d98:	e9 9a 00 00 00       	jmp    26e37 <loadSections+0x599>
/home/yogi/src/os/chrisOS/src/newloader.c:225
            }
        }
        else if (elfInfo->pgmHdrTable[cnt].p_memsz>0)
   26d9d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26da0:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26da3:	c1 e2 05             	shl    edx,0x5
   26da6:	01 d0                	add    eax,edx
   26da8:	05 18 08 00 00       	add    eax,0x818
   26dad:	8b 00                	mov    eax,DWORD PTR [eax]
   26daf:	85 c0                	test   eax,eax
   26db1:	74 30                	je     26de3 <loadSections+0x545>
/home/yogi/src/os/chrisOS/src/newloader.c:227
        {
            printd(DEBUG_ELF_LOADER,"Section %u not loadable, zeroed 0x%08X bytes at 0x%08X\n",cnt, elfInfo->pgmHdrTable[cnt].p_memsz, loadAddress);
   26db3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26db6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26db9:	c1 e2 05             	shl    edx,0x5
   26dbc:	01 d0                	add    eax,edx
   26dbe:	05 18 08 00 00       	add    eax,0x818
   26dc3:	8b 00                	mov    eax,DWORD PTR [eax]
   26dc5:	83 ec 0c             	sub    esp,0xc
   26dc8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26dcb:	50                   	push   eax
   26dcc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26dcf:	68 fc 5e 08 00       	push   0x85efc
   26dd4:	68 00 02 00 00       	push   0x200
   26dd9:	e8 9d 09 00 00       	call   2777b <printd>
   26dde:	83 c4 20             	add    esp,0x20
   26de1:	eb 54                	jmp    26e37 <loadSections+0x599>
/home/yogi/src/os/chrisOS/src/newloader.c:231
        }
#ifndef DEBUG_NONE
        else
            if ((kDebugLevel & DEBUG_ELF_LOADER) == DEBUG_ELF_LOADER)
   26de3:	a1 78 98 12 00       	mov    eax,ds:0x129878
   26de8:	25 00 02 00 00       	and    eax,0x200
   26ded:	85 c0                	test   eax,eax
   26def:	74 46                	je     26e37 <loadSections+0x599>
/home/yogi/src/os/chrisOS/src/newloader.c:232
                printd(DEBUG_ELF_LOADER,"Section %u, file/mem sizes=0x%X/0x%X, not loading\n", cnt, elfInfo->pgmHdrTable[cnt].p_filesz>0,elfInfo->pgmHdrTable[cnt].p_memsz);
   26df1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26df4:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26df7:	c1 e2 05             	shl    edx,0x5
   26dfa:	01 d0                	add    eax,edx
   26dfc:	05 18 08 00 00       	add    eax,0x818
   26e01:	8b 10                	mov    edx,DWORD PTR [eax]
   26e03:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e06:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   26e09:	c1 e1 05             	shl    ecx,0x5
   26e0c:	01 c8                	add    eax,ecx
   26e0e:	05 14 08 00 00       	add    eax,0x814
   26e13:	8b 00                	mov    eax,DWORD PTR [eax]
   26e15:	85 c0                	test   eax,eax
   26e17:	0f 95 c0             	setne  al
   26e1a:	0f b6 c0             	movzx  eax,al
   26e1d:	83 ec 0c             	sub    esp,0xc
   26e20:	52                   	push   edx
   26e21:	50                   	push   eax
   26e22:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26e25:	68 34 5f 08 00       	push   0x85f34
   26e2a:	68 00 02 00 00       	push   0x200
   26e2f:	e8 47 09 00 00       	call   2777b <printd>
   26e34:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:186 (discriminator 2)
    printd(DEBUG_ELF_LOADER,"reading PHOFF\n",elfInfo->hdr.e_phoff);
    fl_fseek(file, elfInfo->hdr.e_phoff, SEEK_SET);
    fl_fread(elfInfo->pgmHdrTable, sizeof(Elf32_Phdr),elfInfo->hdr.e_phnum,file);
    
    //Process the program header table and load all of the sections in the file into memory
    for (int cnt=0;cnt<elfInfo->hdr.e_phnum;cnt++)
   26e37:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:186 (discriminator 1)
   26e3b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e3e:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
   26e42:	0f b7 c0             	movzx  eax,ax
   26e45:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   26e48:	0f 8f 85 fc ff ff    	jg     26ad3 <loadSections+0x235>
/home/yogi/src/os/chrisOS/src/newloader.c:237
                printd(DEBUG_ELF_LOADER,"Section %u, file/mem sizes=0x%X/0x%X, not loading\n", cnt, elfInfo->pgmHdrTable[cnt].p_filesz>0,elfInfo->pgmHdrTable[cnt].p_memsz);
#endif

    }
    //Done processing the program header table
    printd(DEBUG_ELF_LOADER,"LoadElf: done loading file\n");
   26e4e:	83 ec 08             	sub    esp,0x8
   26e51:	68 67 5f 08 00       	push   0x85f67
   26e56:	68 00 02 00 00       	push   0x200
   26e5b:	e8 1b 09 00 00       	call   2777b <printd>
   26e60:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:239
    
}
   26e63:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   26e66:	c9                   	leave  
   26e67:	c3                   	ret    

00026e68 <loadElf>:
loadElf():
/home/yogi/src/os/chrisOS/src/newloader.c:242

void loadElf(void* file,elfInfo_t* elfInfo, bool isLibrary)
{
   26e68:	55                   	push   ebp
   26e69:	89 e5                	mov    ebp,esp
   26e6b:	57                   	push   edi
   26e6c:	56                   	push   esi
   26e6d:	53                   	push   ebx
   26e6e:	83 ec 2c             	sub    esp,0x2c
   26e71:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26e74:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
/home/yogi/src/os/chrisOS/src/newloader.c:243
    char* sectStringTable=(char*)0x1900000;  //TODO: Fix this!!!
   26e77:	c7 45 dc 00 00 90 01 	mov    DWORD PTR [ebp-0x24],0x1900000
/home/yogi/src/os/chrisOS/src/newloader.c:246

    //Initialize the structs we will be using
    memset(elfInfo,0,sizeof(elfInfo_t));
   26e7e:	83 ec 04             	sub    esp,0x4
   26e81:	68 dc 18 00 00       	push   0x18dc
   26e86:	6a 00                	push   0x0
   26e88:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   26e8b:	e8 79 e7 ff ff       	call   25609 <memset>
   26e90:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:247
    memset(&elfInfo->dynamicInfo,0,sizeof(elfDynamic_t));
   26e93:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e96:	05 54 0e 00 00       	add    eax,0xe54
   26e9b:	83 ec 04             	sub    esp,0x4
   26e9e:	68 80 0a 00 00       	push   0xa80
   26ea3:	6a 00                	push   0x0
   26ea5:	50                   	push   eax
   26ea6:	e8 5e e7 ff ff       	call   25609 <memset>
   26eab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:249

    elfInfo->loadCompleted=true;
   26eae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26eb1:	c6 80 d8 18 00 00 01 	mov    BYTE PTR [eax+0x18d8],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:251
    //Load all of the sections in the file to memory
    loadSections(file,elfInfo,isLibrary);
   26eb8:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   26ebc:	83 ec 04             	sub    esp,0x4
   26ebf:	50                   	push   eax
   26ec0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   26ec3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26ec6:	e8 d3 f9 ff ff       	call   2689e <loadSections>
   26ecb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:255
    

    //List the sections (debugging)
    if (kDebugLevel&DEBUG_ELF_LOADER)
   26ece:	a1 78 98 12 00       	mov    eax,ds:0x129878
   26ed3:	25 00 02 00 00       	and    eax,0x200
   26ed8:	85 c0                	test   eax,eax
   26eda:	0f 84 0d 01 00 00    	je     26fed <loadElf+0x185>
/home/yogi/src/os/chrisOS/src/newloader.c:257
    {
        printd(DEBUG_ELF_LOADER,"Table\t     MemAddr\t\tFileAddr\t\tSize\ttype\n");
   26ee0:	83 ec 08             	sub    esp,0x8
   26ee3:	68 84 5f 08 00       	push   0x85f84
   26ee8:	68 00 02 00 00       	push   0x200
   26eed:	e8 89 08 00 00       	call   2777b <printd>
   26ef2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:258
        for (int cnt=0;cnt<elfInfo->hdr.e_shentsize;cnt++)
   26ef5:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   26efc:	e9 c4 00 00 00       	jmp    26fc5 <loadElf+0x15d>
/home/yogi/src/os/chrisOS/src/newloader.c:260
        {
            if ((uint8_t*)*(sectStringTable+elfInfo->secHdrTable[cnt].sh_name)>0)
   26f01:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   26f04:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   26f07:	89 d0                	mov    eax,edx
   26f09:	c1 e0 02             	shl    eax,0x2
   26f0c:	01 d0                	add    eax,edx
   26f0e:	c1 e0 03             	shl    eax,0x3
   26f11:	01 c8                	add    eax,ecx
   26f13:	83 c0 34             	add    eax,0x34
   26f16:	8b 10                	mov    edx,DWORD PTR [eax]
   26f18:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   26f1b:	01 d0                	add    eax,edx
   26f1d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26f20:	0f be c0             	movsx  eax,al
   26f23:	85 c0                	test   eax,eax
   26f25:	0f 84 96 00 00 00    	je     26fc1 <loadElf+0x159>
/home/yogi/src/os/chrisOS/src/newloader.c:261
                printd(DEBUG_ELF_LOADER,"%-10s\t0x%08X\t0x%08X\t0x%08X\t0x%08X\n",
   26f2b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   26f2e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   26f31:	89 d0                	mov    eax,edx
   26f33:	c1 e0 02             	shl    eax,0x2
   26f36:	01 d0                	add    eax,edx
   26f38:	c1 e0 03             	shl    eax,0x3
   26f3b:	01 c8                	add    eax,ecx
   26f3d:	83 c0 38             	add    eax,0x38
   26f40:	8b 38                	mov    edi,DWORD PTR [eax]
   26f42:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   26f45:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   26f48:	89 d0                	mov    eax,edx
   26f4a:	c1 e0 02             	shl    eax,0x2
   26f4d:	01 d0                	add    eax,edx
   26f4f:	c1 e0 03             	shl    eax,0x3
   26f52:	01 c8                	add    eax,ecx
   26f54:	83 c0 48             	add    eax,0x48
   26f57:	8b 30                	mov    esi,DWORD PTR [eax]
   26f59:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   26f5c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   26f5f:	89 d0                	mov    eax,edx
   26f61:	c1 e0 02             	shl    eax,0x2
   26f64:	01 d0                	add    eax,edx
   26f66:	c1 e0 03             	shl    eax,0x3
   26f69:	01 c8                	add    eax,ecx
   26f6b:	83 c0 44             	add    eax,0x44
   26f6e:	8b 18                	mov    ebx,DWORD PTR [eax]
   26f70:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   26f73:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   26f76:	89 d0                	mov    eax,edx
   26f78:	c1 e0 02             	shl    eax,0x2
   26f7b:	01 d0                	add    eax,edx
   26f7d:	c1 e0 03             	shl    eax,0x3
   26f80:	01 c8                	add    eax,ecx
   26f82:	83 c0 40             	add    eax,0x40
   26f85:	8b 08                	mov    ecx,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/newloader.c:262
                        sectStringTable+elfInfo->secHdrTable[cnt].sh_name,
   26f87:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26f8a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
   26f8d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   26f90:	89 d0                	mov    eax,edx
   26f92:	c1 e0 02             	shl    eax,0x2
   26f95:	01 d0                	add    eax,edx
   26f97:	c1 e0 03             	shl    eax,0x3
   26f9a:	03 45 d0             	add    eax,DWORD PTR [ebp-0x30]
   26f9d:	83 c0 34             	add    eax,0x34
   26fa0:	8b 10                	mov    edx,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/newloader.c:261
    {
        printd(DEBUG_ELF_LOADER,"Table\t     MemAddr\t\tFileAddr\t\tSize\ttype\n");
        for (int cnt=0;cnt<elfInfo->hdr.e_shentsize;cnt++)
        {
            if ((uint8_t*)*(sectStringTable+elfInfo->secHdrTable[cnt].sh_name)>0)
                printd(DEBUG_ELF_LOADER,"%-10s\t0x%08X\t0x%08X\t0x%08X\t0x%08X\n",
   26fa2:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   26fa5:	01 d0                	add    eax,edx
   26fa7:	83 ec 04             	sub    esp,0x4
   26faa:	57                   	push   edi
   26fab:	56                   	push   esi
   26fac:	53                   	push   ebx
   26fad:	51                   	push   ecx
   26fae:	50                   	push   eax
   26faf:	68 b0 5f 08 00       	push   0x85fb0
   26fb4:	68 00 02 00 00       	push   0x200
   26fb9:	e8 bd 07 00 00       	call   2777b <printd>
   26fbe:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:258 (discriminator 2)

    //List the sections (debugging)
    if (kDebugLevel&DEBUG_ELF_LOADER)
    {
        printd(DEBUG_ELF_LOADER,"Table\t     MemAddr\t\tFileAddr\t\tSize\ttype\n");
        for (int cnt=0;cnt<elfInfo->hdr.e_shentsize;cnt++)
   26fc1:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:258 (discriminator 1)
   26fc5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26fc8:	0f b7 40 2e          	movzx  eax,WORD PTR [eax+0x2e]
   26fcc:	0f b7 c0             	movzx  eax,ax
   26fcf:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   26fd2:	0f 8f 29 ff ff ff    	jg     26f01 <loadElf+0x99>
/home/yogi/src/os/chrisOS/src/newloader.c:268
                        elfInfo->secHdrTable[cnt].sh_addr,
                        elfInfo->secHdrTable[cnt].sh_offset,
                        elfInfo->secHdrTable[cnt].sh_size, 
                        elfInfo->secHdrTable[cnt].sh_type);
        }
        printd(DEBUG_ELF_LOADER,"End of section table... press a key to continue\n");
   26fd8:	83 ec 08             	sub    esp,0x8
   26fdb:	68 d4 5f 08 00       	push   0x85fd4
   26fe0:	68 00 02 00 00       	push   0x200
   26fe5:	e8 91 07 00 00       	call   2777b <printd>
   26fea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:272
    }
    
    //Find the symbol and string tables in the dynamic section
    if (elfInfo->dynamicSectionAddress>0)
   26fed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ff0:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   26ff6:	85 c0                	test   eax,eax
   26ff8:	0f 84 9a 01 00 00    	je     27198 <loadElf+0x330>
/home/yogi/src/os/chrisOS/src/newloader.c:274
    {
        printd(DEBUG_ELF_LOADER,"Processing dynamic sect, section address=0x%08X, count=%u\n",elfInfo->dynamicSectionAddress,elfInfo->dynamicRecordCount);
   26ffe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27001:	8b 90 4c 0e 00 00    	mov    edx,DWORD PTR [eax+0xe4c]
   27007:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2700a:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   27010:	52                   	push   edx
   27011:	50                   	push   eax
   27012:	68 08 60 08 00       	push   0x86008
   27017:	68 00 02 00 00       	push   0x200
   2701c:	e8 5a 07 00 00       	call   2777b <printd>
   27021:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:275
        Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;
   27024:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27027:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   2702d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/newloader.c:278

        //First iterate the section to find the string & symbol tables
        for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   27030:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   27037:	e9 ea 00 00 00       	jmp    27126 <loadElf+0x2be>
/home/yogi/src/os/chrisOS/src/newloader.c:280
        {
            if (dyn[cnt].d_tag==DT_STRTAB)
   2703c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   2703f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   27046:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   27049:	01 d0                	add    eax,edx
   2704b:	8b 00                	mov    eax,DWORD PTR [eax]
   2704d:	83 f8 05             	cmp    eax,0x5
   27050:	75 61                	jne    270b3 <loadElf+0x24b>
/home/yogi/src/os/chrisOS/src/newloader.c:282
            {
                elfInfo->dynamicInfo.strTableAddress=dyn[cnt].d_un.d_ptr;
   27052:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   27055:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   2705c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   2705f:	01 d0                	add    eax,edx
   27061:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   27064:	89 c2                	mov    edx,eax
   27066:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27069:	89 90 b8 18 00 00    	mov    DWORD PTR [eax+0x18b8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:283
                if (isLibrary)
   2706f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
   27073:	74 1d                	je     27092 <loadElf+0x22a>
/home/yogi/src/os/chrisOS/src/newloader.c:284
                    elfInfo->dynamicInfo.strTableAddress+=libLoadOffset;
   27075:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27078:	8b 80 b8 18 00 00    	mov    eax,DWORD PTR [eax+0x18b8]
   2707e:	8b 15 ec a5 09 00    	mov    edx,DWORD PTR ds:0x9a5ec
   27084:	c1 e2 02             	shl    edx,0x2
   27087:	01 c2                	add    edx,eax
   27089:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2708c:	89 90 b8 18 00 00    	mov    DWORD PTR [eax+0x18b8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:285
                printd(DEBUG_ELF_LOADER,"Found dynamic string table address 0x%08X\n",elfInfo->dynamicInfo.strTableAddress);
   27092:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27095:	8b 80 b8 18 00 00    	mov    eax,DWORD PTR [eax+0x18b8]
   2709b:	83 ec 04             	sub    esp,0x4
   2709e:	50                   	push   eax
   2709f:	68 44 60 08 00       	push   0x86044
   270a4:	68 00 02 00 00       	push   0x200
   270a9:	e8 cd 06 00 00       	call   2777b <printd>
   270ae:	83 c4 10             	add    esp,0x10
   270b1:	eb 6f                	jmp    27122 <loadElf+0x2ba>
/home/yogi/src/os/chrisOS/src/newloader.c:287
            }
            else if (dyn[cnt].d_tag==DT_SYMTAB)
   270b3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   270b6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   270bd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   270c0:	01 d0                	add    eax,edx
   270c2:	8b 00                	mov    eax,DWORD PTR [eax]
   270c4:	83 f8 06             	cmp    eax,0x6
   270c7:	75 59                	jne    27122 <loadElf+0x2ba>
/home/yogi/src/os/chrisOS/src/newloader.c:289
            {
                elfInfo->dynamicInfo.symTableAddress=dyn[cnt].d_un.d_ptr;
   270c9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   270cc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   270d3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   270d6:	01 d0                	add    eax,edx
   270d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   270db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   270de:	89 90 c0 18 00 00    	mov    DWORD PTR [eax+0x18c0],edx
/home/yogi/src/os/chrisOS/src/newloader.c:290
                if (isLibrary)
   270e4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
   270e8:	74 19                	je     27103 <loadElf+0x29b>
/home/yogi/src/os/chrisOS/src/newloader.c:291
                    elfInfo->dynamicInfo.symTableAddress+=libLoadOffset;
   270ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   270ed:	8b 90 c0 18 00 00    	mov    edx,DWORD PTR [eax+0x18c0]
   270f3:	a1 ec a5 09 00       	mov    eax,ds:0x9a5ec
   270f8:	01 c2                	add    edx,eax
   270fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   270fd:	89 90 c0 18 00 00    	mov    DWORD PTR [eax+0x18c0],edx
/home/yogi/src/os/chrisOS/src/newloader.c:292
                printd(DEBUG_ELF_LOADER,"Found dynamic symbol table address 0x%08X\n",elfInfo->dynamicInfo.symTableAddress);
   27103:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27106:	8b 80 c0 18 00 00    	mov    eax,DWORD PTR [eax+0x18c0]
   2710c:	83 ec 04             	sub    esp,0x4
   2710f:	50                   	push   eax
   27110:	68 70 60 08 00       	push   0x86070
   27115:	68 00 02 00 00       	push   0x200
   2711a:	e8 5c 06 00 00       	call   2777b <printd>
   2711f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:278 (discriminator 2)
    {
        printd(DEBUG_ELF_LOADER,"Processing dynamic sect, section address=0x%08X, count=%u\n",elfInfo->dynamicSectionAddress,elfInfo->dynamicRecordCount);
        Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;

        //First iterate the section to find the string & symbol tables
        for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   27122:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:278 (discriminator 1)
   27126:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27129:	8b 80 4c 0e 00 00    	mov    eax,DWORD PTR [eax+0xe4c]
   2712f:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   27132:	0f 8f 04 ff ff ff    	jg     2703c <loadElf+0x1d4>
/home/yogi/src/os/chrisOS/src/newloader.c:295
                if (isLibrary)
                    elfInfo->dynamicInfo.symTableAddress+=libLoadOffset;
                printd(DEBUG_ELF_LOADER,"Found dynamic symbol table address 0x%08X\n",elfInfo->dynamicInfo.symTableAddress);
            }
        }
        if (!elfInfo->dynamicInfo.strTableAddress)
   27138:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2713b:	8b 80 b8 18 00 00    	mov    eax,DWORD PTR [eax+0x18b8]
   27141:	85 c0                	test   eax,eax
   27143:	75 1c                	jne    27161 <loadElf+0x2f9>
/home/yogi/src/os/chrisOS/src/newloader.c:297
        {
            printk("EXEC: Dynamic loading, unable to find dynamic string table address, cannot execute.\n");
   27145:	83 ec 0c             	sub    esp,0xc
   27148:	68 9c 60 08 00       	push   0x8609c
   2714d:	e8 09 06 00 00       	call   2775b <printk>
   27152:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:298
            elfInfo->loadCompleted=false;
   27155:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27158:	c6 80 d8 18 00 00 00 	mov    BYTE PTR [eax+0x18d8],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:299
            return;
   2715f:	eb 37                	jmp    27198 <loadElf+0x330>
/home/yogi/src/os/chrisOS/src/newloader.c:301
        }
        else if (!elfInfo->dynamicInfo.symTableAddress)
   27161:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27164:	8b 80 c0 18 00 00    	mov    eax,DWORD PTR [eax+0x18c0]
   2716a:	85 c0                	test   eax,eax
   2716c:	75 1c                	jne    2718a <loadElf+0x322>
/home/yogi/src/os/chrisOS/src/newloader.c:303
        {
            printk("EXEC: Dynamic loading, unable to find dynamic symbol table address, cannot execute.\n");
   2716e:	83 ec 0c             	sub    esp,0xc
   27171:	68 f4 60 08 00       	push   0x860f4
   27176:	e8 e0 05 00 00       	call   2775b <printk>
   2717b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:304
            elfInfo->loadCompleted=false;
   2717e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27181:	c6 80 d8 18 00 00 00 	mov    BYTE PTR [eax+0x18d8],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:305
            return;
   27188:	eb 0e                	jmp    27198 <loadElf+0x330>
/home/yogi/src/os/chrisOS/src/newloader.c:308
        }

     processELFDynamicSection(elfInfo);   
   2718a:	83 ec 0c             	sub    esp,0xc
   2718d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   27190:	e8 5d f2 ff ff       	call   263f2 <processELFDynamicSection>
   27195:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:311
    
    }
}
   27198:	8d 65 f4             	lea    esp,[ebp-0xc]
   2719b:	5b                   	pop    ebx
   2719c:	5e                   	pop    esi
   2719d:	5f                   	pop    edi
   2719e:	5d                   	pop    ebp
   2719f:	c3                   	ret    

000271a0 <exec>:
exec():
/home/yogi/src/os/chrisOS/src/newloader.c:314

int exec(char* fileName,int argc,char** argv)
{
   271a0:	55                   	push   ebp
   271a1:	89 e5                	mov    ebp,esp
   271a3:	53                   	push   ebx
   271a4:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/newloader.c:315
    int lRetVal=-1;
   271a7:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/newloader.c:319
    register int *eax __asm__("eax");
    
    //Open the executable
    void* fPtr=fopen(fileName, "r");
   271ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   271b1:	83 ec 08             	sub    esp,0x8
   271b4:	68 d5 5b 08 00       	push   0x85bd5
   271b9:	50                   	push   eax
   271ba:	e8 6e 67 ff ff       	call   1d92d <fl_fopen>
   271bf:	83 c4 10             	add    esp,0x10
   271c2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/newloader.c:320
    if (fPtr==0)
   271c5:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   271c9:	75 21                	jne    271ec <exec+0x4c>
/home/yogi/src/os/chrisOS/src/newloader.c:322
    {
        printk("Error opening file '%s' (0x%08X), cannot exec\n",fileName,fPtr);
   271cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   271ce:	83 ec 04             	sub    esp,0x4
   271d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   271d4:	50                   	push   eax
   271d5:	68 4c 61 08 00       	push   0x8614c
   271da:	e8 7c 05 00 00       	call   2775b <printk>
   271df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:323
        return -1;
   271e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
   271e7:	e9 ea 00 00 00       	jmp    272d6 <exec+0x136>
/home/yogi/src/os/chrisOS/src/newloader.c:327
    } 
    
    //Get a slot in the load info
    elfInfo_t* elf=&kExecLoadInfo[kExecLoadCount++];
   271ec:	8b 0d 3c 99 12 00    	mov    ecx,DWORD PTR ds:0x12993c
   271f2:	a1 40 99 12 00       	mov    eax,ds:0x129940
   271f7:	8d 50 01             	lea    edx,[eax+0x1]
   271fa:	89 15 40 99 12 00    	mov    DWORD PTR ds:0x129940,edx
   27200:	69 c0 dc 18 00 00    	imul   eax,eax,0x18dc
   27206:	01 c8                	add    eax,ecx
   27208:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/newloader.c:330
    
    //Load the executable
    loadElf(fPtr,elf,false);
   2720b:	83 ec 04             	sub    esp,0x4
   2720e:	6a 00                	push   0x0
   27210:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   27213:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   27216:	e8 4d fc ff ff       	call   26e68 <loadElf>
   2721b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:331
    printd(DEBUG_ELF_LOADER,"exec: back from loading ELF file, result=%s\n",elf->loadCompleted?"Success":"Failure");;
   2721e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   27221:	0f b6 80 d8 18 00 00 	movzx  eax,BYTE PTR [eax+0x18d8]
   27228:	84 c0                	test   al,al
   2722a:	74 07                	je     27233 <exec+0x93>
/home/yogi/src/os/chrisOS/src/newloader.c:331 (discriminator 1)
   2722c:	b8 7b 61 08 00       	mov    eax,0x8617b
   27231:	eb 05                	jmp    27238 <exec+0x98>
/home/yogi/src/os/chrisOS/src/newloader.c:331 (discriminator 2)
   27233:	b8 83 61 08 00       	mov    eax,0x86183
/home/yogi/src/os/chrisOS/src/newloader.c:331 (discriminator 4)
   27238:	83 ec 04             	sub    esp,0x4
   2723b:	50                   	push   eax
   2723c:	68 8c 61 08 00       	push   0x8618c
   27241:	68 00 02 00 00       	push   0x200
   27246:	e8 30 05 00 00       	call   2777b <printd>
   2724b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:332 (discriminator 4)
    fclose(fPtr);
   2724e:	83 ec 0c             	sub    esp,0xc
   27251:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   27254:	e8 05 6b ff ff       	call   1dd5e <fl_fclose>
   27259:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:335 (discriminator 4)
    
    //If loaded successfully then execute
    if (elf->loadCompleted)
   2725c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2725f:	0f b6 80 d8 18 00 00 	movzx  eax,BYTE PTR [eax+0x18d8]
   27266:	84 c0                	test   al,al
   27268:	74 69                	je     272d3 <exec+0x133>
/home/yogi/src/os/chrisOS/src/newloader.c:337
    {
        printd(DEBUG_ELF_LOADER,"exec: Executing %s at 0x%08X, return address is =0x%08X\n", fileName, elf->hdr.e_entry, __builtin_return_address(0));
   2726a:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
   2726d:	89 c1                	mov    ecx,eax
   2726f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   27272:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   27275:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27278:	83 ec 0c             	sub    esp,0xc
   2727b:	51                   	push   ecx
   2727c:	52                   	push   edx
   2727d:	50                   	push   eax
   2727e:	68 bc 61 08 00       	push   0x861bc
   27283:	68 00 02 00 00       	push   0x200
   27288:	e8 ee 04 00 00       	call   2777b <printd>
   2728d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:338
        __asm__("push ebx\npush ecx\n"::[argvp] "b" (argv), [argcv] "c" (argc));
   27290:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   27293:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   27296:	89 d3                	mov    ebx,edx
   27298:	53                   	push   ebx
   27299:	51                   	push   ecx
/home/yogi/src/os/chrisOS/src/newloader.c:339
        __asm__("mov edx,%[pgmptr]\n"::[pgmptr] "d" (elf->hdr.e_entry));
   2729a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   2729d:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
   272a0:	89 d2                	mov    edx,edx
/home/yogi/src/os/chrisOS/src/newloader.c:340
        __asm__("call edx\n"::[pgmptr] "d" (elf->hdr.e_entry));
   272a2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   272a5:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
   272a8:	ff d2                	call   edx
/home/yogi/src/os/chrisOS/src/newloader.c:341
        lRetVal=(uint32_t)eax;
   272aa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/newloader.c:342
        printd(DEBUG_ELF_LOADER,"exec: Back from executing %s, return value is 0x%08X, 0x%08X, __bra=0x%08X\n", fileName, lRetVal, &fileName, __builtin_return_address(0));
   272ad:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
   272b0:	89 c2                	mov    edx,eax
   272b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   272b5:	83 ec 08             	sub    esp,0x8
   272b8:	52                   	push   edx
   272b9:	8d 55 08             	lea    edx,[ebp+0x8]
   272bc:	52                   	push   edx
   272bd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   272c0:	50                   	push   eax
   272c1:	68 f8 61 08 00       	push   0x861f8
   272c6:	68 00 02 00 00       	push   0x200
   272cb:	e8 ab 04 00 00       	call   2777b <printd>
   272d0:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:344
    }
    return lRetVal;
   272d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/newloader.c:345
}
   272d6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   272d9:	c9                   	leave  
   272da:	c3                   	ret    
   272db:	90                   	nop

000272dc <panic>:
panic():
/home/yogi/src/os/chrisOS/src/panic.c:8
#include <stdarg.h>
#include <time.h>
#include "printf.h"

void __attribute__((noinline))panic(const char *format, ...)
{
   272dc:	55                   	push   ebp
   272dd:	89 e5                	mov    ebp,esp
   272df:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/panic.c:10
    va_list args;
    va_start( args, format );
   272e2:	8d 45 0c             	lea    eax,[ebp+0xc]
   272e5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/panic.c:11
    printk("\n>>>panic at instruction prior to address 0x%08X<<<\n", __builtin_return_address(0));
   272e8:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
   272eb:	83 ec 08             	sub    esp,0x8
   272ee:	50                   	push   eax
   272ef:	68 44 62 08 00       	push   0x86244
   272f4:	e8 62 04 00 00       	call   2775b <printk>
   272f9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/panic.c:12
    printk("  >>>");
   272fc:	83 ec 0c             	sub    esp,0xc
   272ff:	68 79 62 08 00       	push   0x86279
   27304:	e8 52 04 00 00       	call   2775b <printk>
   27309:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/panic.c:13
    printk_valist( format,args);
   2730c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2730f:	83 ec 08             	sub    esp,0x8
   27312:	50                   	push   eax
   27313:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27316:	e8 25 04 00 00       	call   27740 <printk_valist>
   2731b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/panic.c:15 (discriminator 1)
    panicLoop: 
    __asm__("cli\nhlt\n");
   2731e:	fa                   	cli    
   2731f:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/panic.c:16 (discriminator 1)
    goto panicLoop;
   27320:	eb fc                	jmp    2731e <panic+0x42>
   27322:	66 90                	xchg   ax,ax

00027324 <printchar>:
printchar():
/home/yogi/src/os/chrisOS/src/printf.c:41
//extern bool pauseDisplay(bool offerToQuit);
extern uint32_t kDebugLevel;
uint8_t printDLineCount;

static void printchar(char **str, int c)
{
   27324:	55                   	push   ebp
   27325:	89 e5                	mov    ebp,esp
   27327:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/printf.c:43
	
	if (str) {
   2732a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   2732e:	74 19                	je     27349 <printchar+0x25>
/home/yogi/src/os/chrisOS/src/printf.c:44
		**str = c;
   27330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27333:	8b 00                	mov    eax,DWORD PTR [eax]
   27335:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   27338:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/printf.c:45
		++(*str);
   2733a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2733d:	8b 00                	mov    eax,DWORD PTR [eax]
   2733f:	8d 50 01             	lea    edx,[eax+0x1]
   27342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27345:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/printf.c:48
	}
	else terminal_putchar((unsigned char)c);
}
   27347:	eb 12                	jmp    2735b <printchar+0x37>
/home/yogi/src/os/chrisOS/src/printf.c:47
	
	if (str) {
		**str = c;
		++(*str);
	}
	else terminal_putchar((unsigned char)c);
   27349:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2734c:	0f b6 c0             	movzx  eax,al
   2734f:	83 ec 0c             	sub    esp,0xc
   27352:	50                   	push   eax
   27353:	e8 aa 0d ff ff       	call   18102 <terminal_putchar>
   27358:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:48
}
   2735b:	90                   	nop
   2735c:	c9                   	leave  
   2735d:	c3                   	ret    

0002735e <prints>:
prints():
/home/yogi/src/os/chrisOS/src/printf.c:54

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   2735e:	55                   	push   ebp
   2735f:	89 e5                	mov    ebp,esp
   27361:	57                   	push   edi
   27362:	56                   	push   esi
   27363:	53                   	push   ebx
   27364:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/printf.c:55
	register int pc = 0, padchar = ' ';
   27367:	bb 00 00 00 00       	mov    ebx,0x0
   2736c:	c7 45 e4 20 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/chrisOS/src/printf.c:57

	if (width > 0) {
   27373:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   27377:	7e 39                	jle    273b2 <prints+0x54>
/home/yogi/src/os/chrisOS/src/printf.c:58
		register int len = 0;
   27379:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOS/src/printf.c:60
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   2737e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
   27381:	eb 06                	jmp    27389 <prints+0x2b>
/home/yogi/src/os/chrisOS/src/printf.c:60 (discriminator 3)
   27383:	83 c6 01             	add    esi,0x1
   27386:	83 c7 01             	add    edi,0x1
/home/yogi/src/os/chrisOS/src/printf.c:60 (discriminator 1)
   27389:	0f b6 07             	movzx  eax,BYTE PTR [edi]
   2738c:	84 c0                	test   al,al
   2738e:	75 f3                	jne    27383 <prints+0x25>
/home/yogi/src/os/chrisOS/src/printf.c:61
		if (len >= width) width = 0;
   27390:	3b 75 10             	cmp    esi,DWORD PTR [ebp+0x10]
   27393:	7c 09                	jl     2739e <prints+0x40>
/home/yogi/src/os/chrisOS/src/printf.c:61 (discriminator 1)
   27395:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
   2739c:	eb 03                	jmp    273a1 <prints+0x43>
/home/yogi/src/os/chrisOS/src/printf.c:62
		else width -= len;
   2739e:	29 75 10             	sub    DWORD PTR [ebp+0x10],esi
/home/yogi/src/os/chrisOS/src/printf.c:63
		if (pad & PAD_ZERO) padchar = '0';
   273a1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   273a4:	83 e0 02             	and    eax,0x2
   273a7:	85 c0                	test   eax,eax
   273a9:	74 07                	je     273b2 <prints+0x54>
/home/yogi/src/os/chrisOS/src/printf.c:63 (discriminator 1)
   273ab:	c7 45 e4 30 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x30
/home/yogi/src/os/chrisOS/src/printf.c:65
	}
	if (!(pad & PAD_RIGHT)) {
   273b2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   273b5:	83 e0 01             	and    eax,0x1
   273b8:	85 c0                	test   eax,eax
   273ba:	75 41                	jne    273fd <prints+0x9f>
/home/yogi/src/os/chrisOS/src/printf.c:66
		for ( ; width > 0; --width) {
   273bc:	eb 18                	jmp    273d6 <prints+0x78>
/home/yogi/src/os/chrisOS/src/printf.c:67 (discriminator 2)
			printchar (out, padchar);
   273be:	83 ec 08             	sub    esp,0x8
   273c1:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   273c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   273c7:	e8 58 ff ff ff       	call   27324 <printchar>
   273cc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:68 (discriminator 2)
			++pc;
   273cf:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOS/src/printf.c:66 (discriminator 2)
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
   273d2:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/chrisOS/src/printf.c:66 (discriminator 1)
   273d6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   273da:	7f e2                	jg     273be <prints+0x60>
/home/yogi/src/os/chrisOS/src/printf.c:71
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   273dc:	eb 1f                	jmp    273fd <prints+0x9f>
/home/yogi/src/os/chrisOS/src/printf.c:72 (discriminator 2)
		printchar (out, *string);
   273de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   273e1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   273e4:	0f be c0             	movsx  eax,al
   273e7:	83 ec 08             	sub    esp,0x8
   273ea:	50                   	push   eax
   273eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   273ee:	e8 31 ff ff ff       	call   27324 <printchar>
   273f3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:73 (discriminator 2)
		++pc;
   273f6:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOS/src/printf.c:71 (discriminator 2)
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   273f9:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:71 (discriminator 1)
   273fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27400:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27403:	84 c0                	test   al,al
   27405:	75 d7                	jne    273de <prints+0x80>
/home/yogi/src/os/chrisOS/src/printf.c:75
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
   27407:	eb 18                	jmp    27421 <prints+0xc3>
/home/yogi/src/os/chrisOS/src/printf.c:76 (discriminator 2)
		printchar (out, padchar);
   27409:	83 ec 08             	sub    esp,0x8
   2740c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   2740f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27412:	e8 0d ff ff ff       	call   27324 <printchar>
   27417:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:77 (discriminator 2)
		++pc;
   2741a:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOS/src/printf.c:75 (discriminator 2)
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
   2741d:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/chrisOS/src/printf.c:75 (discriminator 1)
   27421:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   27425:	7f e2                	jg     27409 <prints+0xab>
/home/yogi/src/os/chrisOS/src/printf.c:80
		printchar (out, padchar);
		++pc;
	}

	return pc;
   27427:	89 d8                	mov    eax,ebx
/home/yogi/src/os/chrisOS/src/printf.c:81
}
   27429:	8d 65 f4             	lea    esp,[ebp-0xc]
   2742c:	5b                   	pop    ebx
   2742d:	5e                   	pop    esi
   2742e:	5f                   	pop    edi
   2742f:	5d                   	pop    ebp
   27430:	c3                   	ret    

00027431 <printi>:
printi():
/home/yogi/src/os/chrisOS/src/printf.c:87

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   27431:	55                   	push   ebp
   27432:	89 e5                	mov    ebp,esp
   27434:	57                   	push   edi
   27435:	56                   	push   esi
   27436:	53                   	push   ebx
   27437:	83 ec 2c             	sub    esp,0x2c
/home/yogi/src/os/chrisOS/src/printf.c:90
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
   2743a:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
   27441:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
/home/yogi/src/os/chrisOS/src/printf.c:91
	register unsigned int u = i;
   27448:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/printf.c:93

	if (i == 0) {
   2744b:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   2744f:	75 22                	jne    27473 <printi+0x42>
/home/yogi/src/os/chrisOS/src/printf.c:94
		print_buf[0] = '0';
   27451:	c6 45 dc 30          	mov    BYTE PTR [ebp-0x24],0x30
/home/yogi/src/os/chrisOS/src/printf.c:95
		print_buf[1] = '\0';
   27455:	c6 45 dd 00          	mov    BYTE PTR [ebp-0x23],0x0
/home/yogi/src/os/chrisOS/src/printf.c:96
		return prints (out, print_buf, width, pad);
   27459:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
   2745c:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   2745f:	8d 45 dc             	lea    eax,[ebp-0x24]
   27462:	50                   	push   eax
   27463:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27466:	e8 f3 fe ff ff       	call   2735e <prints>
   2746b:	83 c4 10             	add    esp,0x10
   2746e:	e9 af 00 00 00       	jmp    27522 <printi+0xf1>
/home/yogi/src/os/chrisOS/src/printf.c:99
	}

	if (sg && b == 10 && i < 0) {
   27473:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   27477:	74 1a                	je     27493 <printi+0x62>
/home/yogi/src/os/chrisOS/src/printf.c:99 (discriminator 1)
   27479:	83 7d 10 0a          	cmp    DWORD PTR [ebp+0x10],0xa
   2747d:	75 14                	jne    27493 <printi+0x62>
/home/yogi/src/os/chrisOS/src/printf.c:99 (discriminator 2)
   2747f:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   27483:	79 0e                	jns    27493 <printi+0x62>
/home/yogi/src/os/chrisOS/src/printf.c:100
		neg = 1;
   27485:	c7 45 d4 01 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x1
/home/yogi/src/os/chrisOS/src/printf.c:101
		u = -i;
   2748c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2748f:	f7 d8                	neg    eax
   27491:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOS/src/printf.c:104
	}

	s = print_buf + PRINT_BUF_LEN-1;
   27493:	8d 5d dc             	lea    ebx,[ebp-0x24]
   27496:	83 c3 0b             	add    ebx,0xb
/home/yogi/src/os/chrisOS/src/printf.c:105
	*s = '\0';
   27499:	c6 03 00             	mov    BYTE PTR [ebx],0x0
/home/yogi/src/os/chrisOS/src/printf.c:107

	while (u) {
   2749c:	eb 35                	jmp    274d3 <printi+0xa2>
/home/yogi/src/os/chrisOS/src/printf.c:108
		t = u % b;
   2749e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   274a1:	89 f0                	mov    eax,esi
   274a3:	ba 00 00 00 00       	mov    edx,0x0
   274a8:	f7 f1                	div    ecx
   274aa:	89 d0                	mov    eax,edx
   274ac:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOS/src/printf.c:109
		if( t >= 10 )
   274ae:	83 ff 09             	cmp    edi,0x9
   274b1:	7e 08                	jle    274bb <printi+0x8a>
/home/yogi/src/os/chrisOS/src/printf.c:110
			t += letbase - '0' - 10;
   274b3:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
   274b6:	83 e8 3a             	sub    eax,0x3a
   274b9:	01 c7                	add    edi,eax
/home/yogi/src/os/chrisOS/src/printf.c:111
		*--s = t + '0';
   274bb:	83 eb 01             	sub    ebx,0x1
   274be:	89 f8                	mov    eax,edi
   274c0:	83 c0 30             	add    eax,0x30
   274c3:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/chrisOS/src/printf.c:112
		u /= b;
   274c5:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   274c8:	89 f0                	mov    eax,esi
   274ca:	ba 00 00 00 00       	mov    edx,0x0
   274cf:	f7 f1                	div    ecx
   274d1:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOS/src/printf.c:107
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
   274d3:	85 f6                	test   esi,esi
   274d5:	75 c7                	jne    2749e <printi+0x6d>
/home/yogi/src/os/chrisOS/src/printf.c:115
			t += letbase - '0' - 10;
		*--s = t + '0';
		u /= b;
	}

	if (neg) {
   274d7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
   274db:	74 30                	je     2750d <printi+0xdc>
/home/yogi/src/os/chrisOS/src/printf.c:116
		if( width && (pad & PAD_ZERO) ) {
   274dd:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   274e1:	74 24                	je     27507 <printi+0xd6>
/home/yogi/src/os/chrisOS/src/printf.c:116 (discriminator 1)
   274e3:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
   274e6:	83 e0 02             	and    eax,0x2
   274e9:	85 c0                	test   eax,eax
   274eb:	74 1a                	je     27507 <printi+0xd6>
/home/yogi/src/os/chrisOS/src/printf.c:117
			printchar (out, '-');
   274ed:	83 ec 08             	sub    esp,0x8
   274f0:	6a 2d                	push   0x2d
   274f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   274f5:	e8 2a fe ff ff       	call   27324 <printchar>
   274fa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:118
			++pc;
   274fd:	83 45 d0 01          	add    DWORD PTR [ebp-0x30],0x1
/home/yogi/src/os/chrisOS/src/printf.c:119
			--width;
   27501:	83 6d 18 01          	sub    DWORD PTR [ebp+0x18],0x1
   27505:	eb 06                	jmp    2750d <printi+0xdc>
/home/yogi/src/os/chrisOS/src/printf.c:122
		}
		else {
			*--s = '-';
   27507:	83 eb 01             	sub    ebx,0x1
   2750a:	c6 03 2d             	mov    BYTE PTR [ebx],0x2d
/home/yogi/src/os/chrisOS/src/printf.c:126
		}
	}

	return pc + prints (out, s, width, pad);
   2750d:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
   27510:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   27513:	53                   	push   ebx
   27514:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27517:	e8 42 fe ff ff       	call   2735e <prints>
   2751c:	83 c4 10             	add    esp,0x10
   2751f:	03 45 d0             	add    eax,DWORD PTR [ebp-0x30]
/home/yogi/src/os/chrisOS/src/printf.c:127 (discriminator 1)
}
   27522:	8d 65 f4             	lea    esp,[ebp-0xc]
   27525:	5b                   	pop    ebx
   27526:	5e                   	pop    esi
   27527:	5f                   	pop    edi
   27528:	5d                   	pop    ebp
   27529:	c3                   	ret    

0002752a <print>:
print():
/home/yogi/src/os/chrisOS/src/printf.c:130

static int print(char **out, const char *format, va_list args )
{
   2752a:	55                   	push   ebp
   2752b:	89 e5                	mov    ebp,esp
   2752d:	57                   	push   edi
   2752e:	56                   	push   esi
   2752f:	53                   	push   ebx
   27530:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/printf.c:132
	register int width, pad;
	register int pc = 0;
   27533:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOS/src/printf.c:135
	char scr[2];

	for (; *format != 0; ++format) {
   27538:	e9 da 01 00 00       	jmp    27717 <print+0x1ed>
/home/yogi/src/os/chrisOS/src/printf.c:136
		if (*format == '%') {
   2753d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27540:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27543:	3c 25                	cmp    al,0x25
   27545:	0f 85 ad 01 00 00    	jne    276f8 <print+0x1ce>
/home/yogi/src/os/chrisOS/src/printf.c:137
			++format;
   2754b:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:138
			width = pad = 0;
   2754f:	bf 00 00 00 00       	mov    edi,0x0
   27554:	89 fe                	mov    esi,edi
/home/yogi/src/os/chrisOS/src/printf.c:139
			if (*format == '\0') break;
   27556:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27559:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2755c:	84 c0                	test   al,al
   2755e:	0f 84 c3 01 00 00    	je     27727 <print+0x1fd>
/home/yogi/src/os/chrisOS/src/printf.c:140
			if (*format == '%') goto out;
   27564:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27567:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2756a:	3c 25                	cmp    al,0x25
   2756c:	0f 84 85 01 00 00    	je     276f7 <print+0x1cd>
/home/yogi/src/os/chrisOS/src/printf.c:141
			if (*format == '-') {
   27572:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27575:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27578:	3c 2d                	cmp    al,0x2d
   2757a:	75 12                	jne    2758e <print+0x64>
/home/yogi/src/os/chrisOS/src/printf.c:142
				++format;
   2757c:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:143
				pad = PAD_RIGHT;
   27580:	bf 01 00 00 00       	mov    edi,0x1
/home/yogi/src/os/chrisOS/src/printf.c:145
			}
			while (*format == '0') {
   27585:	eb 07                	jmp    2758e <print+0x64>
/home/yogi/src/os/chrisOS/src/printf.c:146
				++format;
   27587:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:147
				pad |= PAD_ZERO;
   2758b:	83 cf 02             	or     edi,0x2
/home/yogi/src/os/chrisOS/src/printf.c:145
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
   2758e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27591:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27594:	3c 30                	cmp    al,0x30
   27596:	74 ef                	je     27587 <print+0x5d>
/home/yogi/src/os/chrisOS/src/printf.c:149
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   27598:	eb 1d                	jmp    275b7 <print+0x8d>
/home/yogi/src/os/chrisOS/src/printf.c:150 (discriminator 3)
				width *= 10;
   2759a:	89 f0                	mov    eax,esi
   2759c:	c1 e0 02             	shl    eax,0x2
   2759f:	01 f0                	add    eax,esi
   275a1:	01 c0                	add    eax,eax
   275a3:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOS/src/printf.c:151 (discriminator 3)
				width += *format - '0';
   275a5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   275a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   275ab:	0f be c0             	movsx  eax,al
   275ae:	83 e8 30             	sub    eax,0x30
   275b1:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOS/src/printf.c:149 (discriminator 3)
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   275b3:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:149 (discriminator 1)
   275b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   275ba:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   275bd:	3c 2f                	cmp    al,0x2f
   275bf:	7e 0a                	jle    275cb <print+0xa1>
/home/yogi/src/os/chrisOS/src/printf.c:149 (discriminator 2)
   275c1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   275c4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   275c7:	3c 39                	cmp    al,0x39
   275c9:	7e cf                	jle    2759a <print+0x70>
/home/yogi/src/os/chrisOS/src/printf.c:153
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
   275cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   275ce:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   275d1:	3c 73                	cmp    al,0x73
   275d3:	75 2b                	jne    27600 <print+0xd6>
/home/yogi/src/os/chrisOS/src/printf.c:154
				register char *s = (char *)va_arg( args, int );
   275d5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   275d8:	8d 50 04             	lea    edx,[eax+0x4]
   275db:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   275de:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/printf.c:155
				pc += prints (out, s?s:"(null)", width, pad);
   275e0:	85 c0                	test   eax,eax
   275e2:	74 02                	je     275e6 <print+0xbc>
   275e4:	eb 05                	jmp    275eb <print+0xc1>
/home/yogi/src/os/chrisOS/src/printf.c:155 (discriminator 2)
   275e6:	b8 7f 62 08 00       	mov    eax,0x8627f
/home/yogi/src/os/chrisOS/src/printf.c:155 (discriminator 4)
   275eb:	57                   	push   edi
   275ec:	56                   	push   esi
   275ed:	50                   	push   eax
   275ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   275f1:	e8 68 fd ff ff       	call   2735e <prints>
   275f6:	83 c4 10             	add    esp,0x10
   275f9:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:156 (discriminator 4)
				continue;
   275fb:	e9 13 01 00 00       	jmp    27713 <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:158
			}
			if( *format == 'd' ) {
   27600:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27603:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27606:	3c 64                	cmp    al,0x64
   27608:	75 29                	jne    27633 <print+0x109>
/home/yogi/src/os/chrisOS/src/printf.c:159
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   2760a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2760d:	8d 50 04             	lea    edx,[eax+0x4]
   27610:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   27613:	8b 00                	mov    eax,DWORD PTR [eax]
   27615:	83 ec 04             	sub    esp,0x4
   27618:	6a 61                	push   0x61
   2761a:	57                   	push   edi
   2761b:	56                   	push   esi
   2761c:	6a 01                	push   0x1
   2761e:	6a 0a                	push   0xa
   27620:	50                   	push   eax
   27621:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27624:	e8 08 fe ff ff       	call   27431 <printi>
   27629:	83 c4 20             	add    esp,0x20
   2762c:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:160
				continue;
   2762e:	e9 e0 00 00 00       	jmp    27713 <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:162
			}
			if( *format == 'x' ) {
   27633:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27636:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27639:	3c 78                	cmp    al,0x78
   2763b:	75 29                	jne    27666 <print+0x13c>
/home/yogi/src/os/chrisOS/src/printf.c:163
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   2763d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   27640:	8d 50 04             	lea    edx,[eax+0x4]
   27643:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   27646:	8b 00                	mov    eax,DWORD PTR [eax]
   27648:	83 ec 04             	sub    esp,0x4
   2764b:	6a 61                	push   0x61
   2764d:	57                   	push   edi
   2764e:	56                   	push   esi
   2764f:	6a 00                	push   0x0
   27651:	6a 10                	push   0x10
   27653:	50                   	push   eax
   27654:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27657:	e8 d5 fd ff ff       	call   27431 <printi>
   2765c:	83 c4 20             	add    esp,0x20
   2765f:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:164
				continue;
   27661:	e9 ad 00 00 00       	jmp    27713 <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:166
			}
			if( *format == 'X' ) {
   27666:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27669:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2766c:	3c 58                	cmp    al,0x58
   2766e:	75 26                	jne    27696 <print+0x16c>
/home/yogi/src/os/chrisOS/src/printf.c:167
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   27670:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   27673:	8d 50 04             	lea    edx,[eax+0x4]
   27676:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   27679:	8b 00                	mov    eax,DWORD PTR [eax]
   2767b:	83 ec 04             	sub    esp,0x4
   2767e:	6a 41                	push   0x41
   27680:	57                   	push   edi
   27681:	56                   	push   esi
   27682:	6a 00                	push   0x0
   27684:	6a 10                	push   0x10
   27686:	50                   	push   eax
   27687:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2768a:	e8 a2 fd ff ff       	call   27431 <printi>
   2768f:	83 c4 20             	add    esp,0x20
   27692:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:168
				continue;
   27694:	eb 7d                	jmp    27713 <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:170
			}
			if( *format == 'u' ) {
   27696:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27699:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2769c:	3c 75                	cmp    al,0x75
   2769e:	75 26                	jne    276c6 <print+0x19c>
/home/yogi/src/os/chrisOS/src/printf.c:171
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   276a0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   276a3:	8d 50 04             	lea    edx,[eax+0x4]
   276a6:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   276a9:	8b 00                	mov    eax,DWORD PTR [eax]
   276ab:	83 ec 04             	sub    esp,0x4
   276ae:	6a 61                	push   0x61
   276b0:	57                   	push   edi
   276b1:	56                   	push   esi
   276b2:	6a 00                	push   0x0
   276b4:	6a 0a                	push   0xa
   276b6:	50                   	push   eax
   276b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   276ba:	e8 72 fd ff ff       	call   27431 <printi>
   276bf:	83 c4 20             	add    esp,0x20
   276c2:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:172
				continue;
   276c4:	eb 4d                	jmp    27713 <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:174
			}
			if( *format == 'c' ) {
   276c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   276c9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   276cc:	3c 63                	cmp    al,0x63
   276ce:	75 43                	jne    27713 <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:176
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   276d0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   276d3:	8d 50 04             	lea    edx,[eax+0x4]
   276d6:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   276d9:	8b 00                	mov    eax,DWORD PTR [eax]
   276db:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/chrisOS/src/printf.c:177
				scr[1] = '\0';
   276de:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
/home/yogi/src/os/chrisOS/src/printf.c:178
				pc += prints (out, scr, width, pad);
   276e2:	57                   	push   edi
   276e3:	56                   	push   esi
   276e4:	8d 45 e6             	lea    eax,[ebp-0x1a]
   276e7:	50                   	push   eax
   276e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   276eb:	e8 6e fc ff ff       	call   2735e <prints>
   276f0:	83 c4 10             	add    esp,0x10
   276f3:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:179
				continue;
   276f5:	eb 1c                	jmp    27713 <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:140
	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
   276f7:	90                   	nop
/home/yogi/src/os/chrisOS/src/printf.c:184
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
   276f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   276fb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   276fe:	0f be c0             	movsx  eax,al
   27701:	83 ec 08             	sub    esp,0x8
   27704:	50                   	push   eax
   27705:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27708:	e8 17 fc ff ff       	call   27324 <printchar>
   2770d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:185
			++pc;
   27710:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOS/src/printf.c:135
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   27713:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:135 (discriminator 1)
   27717:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2771a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2771d:	84 c0                	test   al,al
   2771f:	0f 85 18 fe ff ff    	jne    2753d <print+0x13>
   27725:	eb 01                	jmp    27728 <print+0x1fe>
/home/yogi/src/os/chrisOS/src/printf.c:139
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
   27727:	90                   	nop
/home/yogi/src/os/chrisOS/src/printf.c:188
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
   27728:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   2772c:	74 08                	je     27736 <print+0x20c>
/home/yogi/src/os/chrisOS/src/printf.c:188 (discriminator 1)
   2772e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27731:	8b 00                	mov    eax,DWORD PTR [eax]
   27733:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/printf.c:190
	va_end( args );
	return pc;
   27736:	89 d8                	mov    eax,ebx
/home/yogi/src/os/chrisOS/src/printf.c:191
}
   27738:	8d 65 f4             	lea    esp,[ebp-0xc]
   2773b:	5b                   	pop    ebx
   2773c:	5e                   	pop    esi
   2773d:	5f                   	pop    edi
   2773e:	5d                   	pop    ebp
   2773f:	c3                   	ret    

00027740 <printk_valist>:
printk_valist():
/home/yogi/src/os/chrisOS/src/printf.c:194

int printk_valist(const char *format, va_list args)
{
   27740:	55                   	push   ebp
   27741:	89 e5                	mov    ebp,esp
   27743:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/printf.c:195
    return print(0, format, args);
   27746:	83 ec 04             	sub    esp,0x4
   27749:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2774c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2774f:	6a 00                	push   0x0
   27751:	e8 d4 fd ff ff       	call   2752a <print>
   27756:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:196
}
   27759:	c9                   	leave  
   2775a:	c3                   	ret    

0002775b <printk>:
printk():
/home/yogi/src/os/chrisOS/src/printf.c:199

int printk(const char *format, ...)
{
   2775b:	55                   	push   ebp
   2775c:	89 e5                	mov    ebp,esp
   2775e:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/printf.c:201
        va_list args;
        va_start( args, format );
   27761:	8d 45 0c             	lea    eax,[ebp+0xc]
   27764:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/printf.c:202
        return printk_valist(format, args);
   27767:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2776a:	83 ec 08             	sub    esp,0x8
   2776d:	50                   	push   eax
   2776e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27771:	e8 ca ff ff ff       	call   27740 <printk_valist>
   27776:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:203
}
   27779:	c9                   	leave  
   2777a:	c3                   	ret    

0002777b <printd>:
printd():
/home/yogi/src/os/chrisOS/src/printf.c:209

#ifdef DEBUG_NONE
int printd() {}
#else
int printd(uint32_t DebugLevel, const char *format, ...)
{
   2777b:	55                   	push   ebp
   2777c:	89 e5                	mov    ebp,esp
   2777e:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/printf.c:210
    if ((kDebugLevel & DebugLevel) == DebugLevel)    
   27781:	a1 78 98 12 00       	mov    eax,ds:0x129878
   27786:	23 45 08             	and    eax,DWORD PTR [ebp+0x8]
   27789:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   2778c:	75 1a                	jne    277a8 <printd+0x2d>
/home/yogi/src/os/chrisOS/src/printf.c:214
    {
        va_list args;

        va_start( args, format );
   2778e:	8d 45 10             	lea    eax,[ebp+0x10]
   27791:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/printf.c:220
//        if (++printDLineCount==SYS_VGA_HEIGHT-1)
//        {
//            pauseDisplay(false);
//            printDLineCount=0;
//        }
        return printk_valist(format, args);
   27794:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   27797:	83 ec 08             	sub    esp,0x8
   2779a:	50                   	push   eax
   2779b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2779e:	e8 9d ff ff ff       	call   27740 <printk_valist>
   277a3:	83 c4 10             	add    esp,0x10
   277a6:	eb 05                	jmp    277ad <printd+0x32>
/home/yogi/src/os/chrisOS/src/printf.c:222
    }
    return 0;
   277a8:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/printf.c:223 (discriminator 1)
}
   277ad:	c9                   	leave  
   277ae:	c3                   	ret    

000277af <sprintf>:
sprintf():
/home/yogi/src/os/chrisOS/src/printf.c:227
#endif

int sprintf(char *out, const char *format, ...)
{
   277af:	55                   	push   ebp
   277b0:	89 e5                	mov    ebp,esp
   277b2:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/printf.c:230
        va_list args;
        
        va_start( args, format );
   277b5:	8d 45 10             	lea    eax,[ebp+0x10]
   277b8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/printf.c:231
        return print( &out, format, args );
   277bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   277be:	83 ec 04             	sub    esp,0x4
   277c1:	50                   	push   eax
   277c2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   277c5:	8d 45 08             	lea    eax,[ebp+0x8]
   277c8:	50                   	push   eax
   277c9:	e8 5c fd ff ff       	call   2752a <print>
   277ce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:232
}
   277d1:	c9                   	leave  
   277d2:	c3                   	ret    
   277d3:	90                   	nop

000277d4 <strcat>:
strcat():
/home/yogi/src/os/chrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   char *
   STRCAT (char *dest, const char *src)
   {
   277d4:	55                   	push   ebp
   277d5:	89 e5                	mov    ebp,esp
   277d7:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/strings/strcat.c:31
     strcpy (dest + strlen (dest), src);
   277da:	83 ec 0c             	sub    esp,0xc
   277dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   277e0:	e8 47 01 00 00       	call   2792c <strlen>
   277e5:	83 c4 10             	add    esp,0x10
   277e8:	89 c2                	mov    edx,eax
   277ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   277ed:	01 d0                	add    eax,edx
   277ef:	83 ec 08             	sub    esp,0x8
   277f2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   277f5:	50                   	push   eax
   277f6:	e8 c1 00 00 00       	call   278bc <strcpy>
   277fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcat.c:32
     return dest;
   277fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strcat.c:33
   }
   27801:	c9                   	leave  
   27802:	c3                   	ret    

00027803 <concatenate>:
concatenate():
/home/yogi/src/os/chrisOS/src/strings/strcat.c:35

   void concatenate(char p[], char q[]) {
   27803:	55                   	push   ebp
   27804:	89 e5                	mov    ebp,esp
   27806:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcat.c:38
   int c, d;
 
   c = 0;
   27809:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/strings/strcat.c:40
 
   while (p[c] != '\0') {
   27810:	eb 04                	jmp    27816 <concatenate+0x13>
/home/yogi/src/os/chrisOS/src/strings/strcat.c:41
      c++;  	
   27812:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/strings/strcat.c:40
   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
   27816:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   27819:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2781c:	01 d0                	add    eax,edx
   2781e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27821:	84 c0                	test   al,al
   27823:	75 ed                	jne    27812 <concatenate+0xf>
/home/yogi/src/os/chrisOS/src/strings/strcat.c:44
      c++;  	
   }
 
   d = 0;
   27825:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/chrisOS/src/strings/strcat.c:46
 
   while (q[d] != '\0') {
   2782c:	eb 1d                	jmp    2784b <concatenate+0x48>
/home/yogi/src/os/chrisOS/src/strings/strcat.c:47
      p[c] = q[d];
   2782e:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   27831:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27834:	01 c2                	add    edx,eax
   27836:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27839:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2783c:	01 c8                	add    eax,ecx
   2783e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27841:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/strings/strcat.c:48
      d++;
   27843:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/strings/strcat.c:49
      c++;	
   27847:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/strings/strcat.c:46
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
   2784b:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   2784e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27851:	01 d0                	add    eax,edx
   27853:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27856:	84 c0                	test   al,al
   27858:	75 d4                	jne    2782e <concatenate+0x2b>
/home/yogi/src/os/chrisOS/src/strings/strcat.c:52
      p[c] = q[d];
      d++;
      c++;	
   }
 
   p[c] = '\0';
   2785a:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   2785d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27860:	01 d0                	add    eax,edx
   27862:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/strings/strcat.c:53
   27865:	90                   	nop
   27866:	c9                   	leave  
   27867:	c3                   	ret    

00027868 <strcmp>:
strcmp():
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:25

/* Compare S1 and S2, returning less than, equal to or
   greater than zero if S1 is lexicographically less than,
   equal to or greater than S2.  */
int strcmp (const char *p1, const char *p2)
{
   27868:	55                   	push   ebp
   27869:	89 e5                	mov    ebp,esp
   2786b:	56                   	push   esi
   2786c:	53                   	push   ebx
   2786d:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:26
  register const unsigned char *s1 = (const unsigned char *) p1;
   27870:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:27
  register const unsigned char *s2 = (const unsigned char *) p2;
   27873:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:32
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
   27876:	89 d8                	mov    eax,ebx
   27878:	8d 58 01             	lea    ebx,[eax+0x1]
   2787b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2787e:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:33
      c2 = (unsigned char) *s2++;
   27881:	89 f0                	mov    eax,esi
   27883:	8d 70 01             	lea    esi,[eax+0x1]
   27886:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27889:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:34
      if (c1 == '\0')
   2788c:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
   27890:	75 0e                	jne    278a0 <strcmp+0x38>
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:35
	return c1 - c2;
   27892:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   27896:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   2789a:	29 c2                	sub    edx,eax
   2789c:	89 d0                	mov    eax,edx
   2789e:	eb 15                	jmp    278b5 <strcmp+0x4d>
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:37
    }
  while (c1 == c2);
   278a0:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   278a4:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
   278a7:	74 cd                	je     27876 <strcmp+0xe>
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:39

  return c1 - c2;
   278a9:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   278ad:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   278b1:	29 c2                	sub    edx,eax
   278b3:	89 d0                	mov    eax,edx
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:40
}
   278b5:	83 c4 10             	add    esp,0x10
   278b8:	5b                   	pop    ebx
   278b9:	5e                   	pop    esi
   278ba:	5d                   	pop    ebp
   278bb:	c3                   	ret    

000278bc <strcpy>:
strcpy():
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:5
#include "strings.h"

char *
strcpy(char *s1, const char *s2)
{
   278bc:	55                   	push   ebp
   278bd:	89 e5                	mov    ebp,esp
   278bf:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:6
    char *s = s1;
   278c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   278c5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
   278c8:	90                   	nop
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:7 (discriminator 1)
   278c9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   278cc:	8d 50 01             	lea    edx,[eax+0x1]
   278cf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   278d2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   278d5:	8d 4a 01             	lea    ecx,[edx+0x1]
   278d8:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   278db:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   278de:	88 10                	mov    BYTE PTR [eax],dl
   278e0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   278e3:	84 c0                	test   al,al
   278e5:	75 e2                	jne    278c9 <strcpy+0xd>
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:9
	;
    return (s1);
   278e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:10
}
   278ea:	c9                   	leave  
   278eb:	c3                   	ret    

000278ec <strcpyc>:
strcpyc():
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:14

char *
strcpyc(char *s1, const char *s2, unsigned count)
{
   278ec:	55                   	push   ebp
   278ed:	89 e5                	mov    ebp,esp
   278ef:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:15
    char *s = s1;
   278f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   278f5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:16
    while ((*s++ = *s2++) != 0 && count-->0)
   278f8:	90                   	nop
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:16 (discriminator 2)
   278f9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   278fc:	8d 50 01             	lea    edx,[eax+0x1]
   278ff:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   27902:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   27905:	8d 4a 01             	lea    ecx,[edx+0x1]
   27908:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   2790b:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   2790e:	88 10                	mov    BYTE PTR [eax],dl
   27910:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27913:	84 c0                	test   al,al
   27915:	74 0d                	je     27924 <strcpyc+0x38>
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:16 (discriminator 1)
   27917:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2791a:	8d 50 ff             	lea    edx,[eax-0x1]
   2791d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   27920:	85 c0                	test   eax,eax
   27922:	75 d5                	jne    278f9 <strcpyc+0xd>
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:18
	;
    return (s1);
   27924:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:19
}
   27927:	c9                   	leave  
   27928:	c3                   	ret    
   27929:	66 90                	xchg   ax,ax
   2792b:	90                   	nop

0002792c <strlen>:
strlen():
/home/yogi/src/os/chrisOS/src/strings/strlen.c:3
#include <stddef.h>

size_t strlen(const char* str) {
   2792c:	55                   	push   ebp
   2792d:	89 e5                	mov    ebp,esp
   2792f:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strlen.c:4
          size_t ret = 0;
   27932:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/strings/strlen.c:5
        while ( str[ret] != 0 )
   27939:	eb 04                	jmp    2793f <strlen+0x13>
/home/yogi/src/os/chrisOS/src/strings/strlen.c:6
                ret++;
   2793b:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/strings/strlen.c:5
#include <stddef.h>

size_t strlen(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
   2793f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   27942:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   27945:	01 d0                	add    eax,edx
   27947:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2794a:	84 c0                	test   al,al
   2794c:	75 ed                	jne    2793b <strlen+0xf>
/home/yogi/src/os/chrisOS/src/strings/strlen.c:7
                ret++;
        return ret;
   2794e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/strings/strlen.c:8
}
   27951:	c9                   	leave  
   27952:	c3                   	ret    
   27953:	90                   	nop

00027954 <strtoul>:
strtoul():
/home/yogi/src/os/chrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
strtoul(const char *nptr, char **endptr, register int base)
{
   27954:	55                   	push   ebp
   27955:	89 e5                	mov    ebp,esp
   27957:	57                   	push   edi
   27958:	56                   	push   esi
   27959:	53                   	push   ebx
   2795a:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
   2795d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
   27960:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   27967:	89 f0                	mov    eax,esi
   27969:	8d 70 01             	lea    esi,[eax+0x1]
   2796c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2796f:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
   27972:	83 fb 20             	cmp    ebx,0x20
   27975:	74 f0                	je     27967 <strtoul+0x13>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:73
	if (c == '-') {
   27977:	83 fb 2d             	cmp    ebx,0x2d
   2797a:	75 14                	jne    27990 <strtoul+0x3c>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:74
		neg = 1;
   2797c:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/strings/stroul.c:75
		c = *s++;
   27983:	89 f0                	mov    eax,esi
   27985:	8d 70 01             	lea    esi,[eax+0x1]
   27988:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2798b:	0f be d8             	movsx  ebx,al
   2798e:	eb 10                	jmp    279a0 <strtoul+0x4c>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:76
	} else if (c == '+')
   27990:	83 fb 2b             	cmp    ebx,0x2b
   27993:	75 0b                	jne    279a0 <strtoul+0x4c>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:77
		c = *s++;
   27995:	89 f0                	mov    eax,esi
   27997:	8d 70 01             	lea    esi,[eax+0x1]
   2799a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2799d:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
   279a0:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   279a4:	74 06                	je     279ac <strtoul+0x58>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:78 (discriminator 2)
   279a6:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
   279aa:	75 26                	jne    279d2 <strtoul+0x7e>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:78 (discriminator 3)
   279ac:	83 fb 30             	cmp    ebx,0x30
   279af:	75 21                	jne    279d2 <strtoul+0x7e>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
   279b1:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   279b4:	3c 78                	cmp    al,0x78
   279b6:	74 07                	je     279bf <strtoul+0x6b>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:79 (discriminator 1)
   279b8:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   279bb:	3c 58                	cmp    al,0x58
   279bd:	75 13                	jne    279d2 <strtoul+0x7e>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:80
		c = s[1];
   279bf:	8d 46 01             	lea    eax,[esi+0x1]
   279c2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   279c5:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/stroul.c:81
		s += 2;
   279c8:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/chrisOS/src/strings/stroul.c:82
		base = 16;
   279cb:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/chrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
   279d2:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   279d6:	75 14                	jne    279ec <strtoul+0x98>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
   279d8:	83 fb 30             	cmp    ebx,0x30
   279db:	75 07                	jne    279e4 <strtoul+0x90>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:85 (discriminator 1)
   279dd:	b8 08 00 00 00       	mov    eax,0x8
   279e2:	eb 05                	jmp    279e9 <strtoul+0x95>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:85 (discriminator 2)
   279e4:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/chrisOS/src/strings/stroul.c:85 (discriminator 4)
   279e9:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   279ec:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   279ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
   279f4:	ba 00 00 00 00       	mov    edx,0x0
   279f9:	f7 f1                	div    ecx
   279fb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   279fe:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   27a01:	b8 ff ff ff ff       	mov    eax,0xffffffff
   27a06:	ba 00 00 00 00       	mov    edx,0x0
   27a0b:	f7 f1                	div    ecx
   27a0d:	89 d0                	mov    eax,edx
   27a0f:	89 c2                	mov    edx,eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
   27a11:	bf 00 00 00 00       	mov    edi,0x0
   27a16:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/chrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
   27a1b:	8d 43 d0             	lea    eax,[ebx-0x30]
   27a1e:	83 f8 09             	cmp    eax,0x9
   27a21:	77 05                	ja     27a28 <strtoul+0xd4>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:90
			c -= '0';
   27a23:	83 eb 30             	sub    ebx,0x30
   27a26:	eb 25                	jmp    27a4d <strtoul+0xf9>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
   27a28:	89 d8                	mov    eax,ebx
   27a2a:	83 c8 20             	or     eax,0x20
   27a2d:	83 e8 61             	sub    eax,0x61
   27a30:	83 f8 19             	cmp    eax,0x19
   27a33:	77 56                	ja     27a8b <strtoul+0x137>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
   27a35:	83 fb 40             	cmp    ebx,0x40
   27a38:	7e 0c                	jle    27a46 <strtoul+0xf2>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92 (discriminator 1)
   27a3a:	83 fb 5a             	cmp    ebx,0x5a
   27a3d:	7f 07                	jg     27a46 <strtoul+0xf2>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92 (discriminator 3)
   27a3f:	b8 37 00 00 00       	mov    eax,0x37
   27a44:	eb 05                	jmp    27a4b <strtoul+0xf7>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92 (discriminator 4)
   27a46:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92 (discriminator 6)
   27a4b:	29 c3                	sub    ebx,eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
   27a4d:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
   27a50:	7d 3c                	jge    27a8e <strtoul+0x13a>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
   27a52:	89 c8                	mov    eax,ecx
   27a54:	85 c0                	test   eax,eax
   27a56:	78 10                	js     27a68 <strtoul+0x114>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:97 (discriminator 1)
   27a58:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   27a5b:	77 0b                	ja     27a68 <strtoul+0x114>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:97 (discriminator 2)
   27a5d:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   27a60:	75 0d                	jne    27a6f <strtoul+0x11b>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:97 (discriminator 3)
   27a62:	89 d0                	mov    eax,edx
   27a64:	39 c3                	cmp    ebx,eax
   27a66:	7e 07                	jle    27a6f <strtoul+0x11b>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:98
			any = -1;
   27a68:	b9 ff ff ff ff       	mov    ecx,0xffffffff
   27a6d:	eb 0f                	jmp    27a7e <strtoul+0x12a>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:100
		else {
			any = 1;
   27a6f:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/chrisOS/src/strings/stroul.c:101
			acc *= base;
   27a74:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   27a77:	0f af f8             	imul   edi,eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:102
			acc += c;
   27a7a:	89 d8                	mov    eax,ebx
   27a7c:	01 c7                	add    edi,eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   27a7e:	89 f0                	mov    eax,esi
   27a80:	8d 70 01             	lea    esi,[eax+0x1]
   27a83:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27a86:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
   27a89:	eb 90                	jmp    27a1b <strtoul+0xc7>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
   27a8b:	90                   	nop
   27a8c:	eb 01                	jmp    27a8f <strtoul+0x13b>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
   27a8e:	90                   	nop
/home/yogi/src/os/chrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
   27a8f:	89 c8                	mov    eax,ecx
   27a91:	85 c0                	test   eax,eax
   27a93:	79 07                	jns    27a9c <strtoul+0x148>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
   27a95:	bf ff ff ff ff       	mov    edi,0xffffffff
   27a9a:	eb 08                	jmp    27aa4 <strtoul+0x150>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:107
	} else if (neg)
   27a9c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   27aa0:	74 02                	je     27aa4 <strtoul+0x150>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:108
		acc = -acc;
   27aa2:	f7 df                	neg    edi
/home/yogi/src/os/chrisOS/src/strings/stroul.c:109
	if (endptr != 0)
   27aa4:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   27aa8:	74 13                	je     27abd <strtoul+0x169>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
   27aaa:	89 c8                	mov    eax,ecx
   27aac:	85 c0                	test   eax,eax
   27aae:	74 05                	je     27ab5 <strtoul+0x161>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:110 (discriminator 1)
   27ab0:	8d 46 ff             	lea    eax,[esi-0x1]
   27ab3:	eb 03                	jmp    27ab8 <strtoul+0x164>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:110 (discriminator 2)
   27ab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/stroul.c:110 (discriminator 4)
   27ab8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   27abb:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:111
	return (acc);
   27abd:	89 f8                	mov    eax,edi
/home/yogi/src/os/chrisOS/src/strings/stroul.c:112
}
   27abf:	83 c4 08             	add    esp,0x8
   27ac2:	5b                   	pop    ebx
   27ac3:	5e                   	pop    esi
   27ac4:	5f                   	pop    edi
   27ac5:	5d                   	pop    ebp
   27ac6:	c3                   	ret    
   27ac7:	90                   	nop

00027ac8 <strleft>:
strleft():
/home/yogi/src/os/chrisOS/src/strings/strparts.c:2
char* strleft(char* val, int cnt)
{
   27ac8:	55                   	push   ebp
   27ac9:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
   27acb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   27ace:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27ad1:	01 d0                	add    eax,edx
   27ad3:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/strings/strparts.c:4
    return val;
   27ad6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strparts.c:5
}
   27ad9:	5d                   	pop    ebp
   27ada:	c3                   	ret    
   27adb:	90                   	nop

00027adc <strtol>:
strtol():
/home/yogi/src/os/chrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long
strtol(const char *nptr, char **endptr, register int base)
{
   27adc:	55                   	push   ebp
   27add:	89 e5                	mov    ebp,esp
   27adf:	57                   	push   edi
   27ae0:	56                   	push   esi
   27ae1:	53                   	push   ebx
   27ae2:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
   27ae5:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
   27ae8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   27aef:	89 f0                	mov    eax,esi
   27af1:	8d 70 01             	lea    esi,[eax+0x1]
   27af4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27af7:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
   27afa:	83 fb 20             	cmp    ebx,0x20
   27afd:	74 f0                	je     27aef <strtol+0x13>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:103
	if (c == '-') {
   27aff:	83 fb 2d             	cmp    ebx,0x2d
   27b02:	75 14                	jne    27b18 <strtol+0x3c>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:104
		neg = 1;
   27b04:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/strings/strtol.c:105
		c = *s++;
   27b0b:	89 f0                	mov    eax,esi
   27b0d:	8d 70 01             	lea    esi,[eax+0x1]
   27b10:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27b13:	0f be d8             	movsx  ebx,al
   27b16:	eb 10                	jmp    27b28 <strtol+0x4c>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:106
	} else if (c == '+')
   27b18:	83 fb 2b             	cmp    ebx,0x2b
   27b1b:	75 0b                	jne    27b28 <strtol+0x4c>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:107
		c = *s++;
   27b1d:	89 f0                	mov    eax,esi
   27b1f:	8d 70 01             	lea    esi,[eax+0x1]
   27b22:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27b25:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
   27b28:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   27b2c:	74 06                	je     27b34 <strtol+0x58>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:108 (discriminator 2)
   27b2e:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
   27b32:	75 26                	jne    27b5a <strtol+0x7e>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:108 (discriminator 3)
   27b34:	83 fb 30             	cmp    ebx,0x30
   27b37:	75 21                	jne    27b5a <strtol+0x7e>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
   27b39:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   27b3c:	3c 78                	cmp    al,0x78
   27b3e:	74 07                	je     27b47 <strtol+0x6b>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:109 (discriminator 1)
   27b40:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   27b43:	3c 58                	cmp    al,0x58
   27b45:	75 13                	jne    27b5a <strtol+0x7e>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:110
		c = s[1];
   27b47:	8d 46 01             	lea    eax,[esi+0x1]
   27b4a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27b4d:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/strtol.c:111
		s += 2;
   27b50:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/chrisOS/src/strings/strtol.c:112
		base = 16;
   27b53:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/chrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
   27b5a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   27b5e:	75 14                	jne    27b74 <strtol+0x98>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
   27b60:	83 fb 30             	cmp    ebx,0x30
   27b63:	75 07                	jne    27b6c <strtol+0x90>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:115 (discriminator 1)
   27b65:	b8 08 00 00 00       	mov    eax,0x8
   27b6a:	eb 05                	jmp    27b71 <strtol+0x95>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:115 (discriminator 2)
   27b6c:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/chrisOS/src/strings/strtol.c:115 (discriminator 4)
   27b71:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   27b74:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   27b78:	74 07                	je     27b81 <strtol+0xa5>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:134 (discriminator 1)
   27b7a:	b8 00 00 00 80       	mov    eax,0x80000000
   27b7f:	eb 05                	jmp    27b86 <strtol+0xaa>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:134 (discriminator 2)
   27b81:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/chrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
   27b86:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   27b89:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
   27b8c:	ba 00 00 00 00       	mov    edx,0x0
   27b91:	f7 f1                	div    ecx
   27b93:	89 d1                	mov    ecx,edx
   27b95:	89 c8                	mov    eax,ecx
   27b97:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
   27b9a:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
   27b9d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   27ba0:	ba 00 00 00 00       	mov    edx,0x0
   27ba5:	f7 f7                	div    edi
   27ba7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
   27baa:	bf 00 00 00 00       	mov    edi,0x0
   27baf:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/chrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
   27bb4:	8d 43 d0             	lea    eax,[ebx-0x30]
   27bb7:	83 f8 09             	cmp    eax,0x9
   27bba:	77 05                	ja     27bc1 <strtol+0xe5>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:139
			c -= '0';
   27bbc:	83 eb 30             	sub    ebx,0x30
   27bbf:	eb 25                	jmp    27be6 <strtol+0x10a>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
   27bc1:	89 d8                	mov    eax,ebx
   27bc3:	83 c8 20             	or     eax,0x20
   27bc6:	83 e8 61             	sub    eax,0x61
   27bc9:	83 f8 19             	cmp    eax,0x19
   27bcc:	77 55                	ja     27c23 <strtol+0x147>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
   27bce:	83 fb 40             	cmp    ebx,0x40
   27bd1:	7e 0c                	jle    27bdf <strtol+0x103>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141 (discriminator 1)
   27bd3:	83 fb 5a             	cmp    ebx,0x5a
   27bd6:	7f 07                	jg     27bdf <strtol+0x103>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141 (discriminator 3)
   27bd8:	b8 37 00 00 00       	mov    eax,0x37
   27bdd:	eb 05                	jmp    27be4 <strtol+0x108>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141 (discriminator 4)
   27bdf:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141 (discriminator 6)
   27be4:	29 c3                	sub    ebx,eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
   27be6:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
   27be9:	7d 3b                	jge    27c26 <strtol+0x14a>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
   27beb:	89 c8                	mov    eax,ecx
   27bed:	85 c0                	test   eax,eax
   27bef:	78 0f                	js     27c00 <strtol+0x124>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:146 (discriminator 1)
   27bf1:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   27bf4:	77 0a                	ja     27c00 <strtol+0x124>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:146 (discriminator 2)
   27bf6:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   27bf9:	75 0c                	jne    27c07 <strtol+0x12b>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:146 (discriminator 3)
   27bfb:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
   27bfe:	7e 07                	jle    27c07 <strtol+0x12b>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:147
			any = -1;
   27c00:	b9 ff ff ff ff       	mov    ecx,0xffffffff
   27c05:	eb 0f                	jmp    27c16 <strtol+0x13a>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:149
		else {
			any = 1;
   27c07:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/chrisOS/src/strings/strtol.c:150
			acc *= base;
   27c0c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   27c0f:	0f af f8             	imul   edi,eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:151
			acc += c;
   27c12:	89 d8                	mov    eax,ebx
   27c14:	01 c7                	add    edi,eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   27c16:	89 f0                	mov    eax,esi
   27c18:	8d 70 01             	lea    esi,[eax+0x1]
   27c1b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27c1e:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
   27c21:	eb 91                	jmp    27bb4 <strtol+0xd8>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
   27c23:	90                   	nop
   27c24:	eb 01                	jmp    27c27 <strtol+0x14b>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
   27c26:	90                   	nop
/home/yogi/src/os/chrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
   27c27:	89 c8                	mov    eax,ecx
   27c29:	85 c0                	test   eax,eax
   27c2b:	79 16                	jns    27c43 <strtol+0x167>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
   27c2d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   27c31:	74 07                	je     27c3a <strtol+0x15e>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:155 (discriminator 1)
   27c33:	b8 00 00 00 80       	mov    eax,0x80000000
   27c38:	eb 05                	jmp    27c3f <strtol+0x163>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:155 (discriminator 2)
   27c3a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/chrisOS/src/strings/strtol.c:155 (discriminator 4)
   27c3f:	89 c7                	mov    edi,eax
   27c41:	eb 08                	jmp    27c4b <strtol+0x16f>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:156
	} else if (neg)
   27c43:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   27c47:	74 02                	je     27c4b <strtol+0x16f>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:157
		acc = -acc;
   27c49:	f7 df                	neg    edi
/home/yogi/src/os/chrisOS/src/strings/strtol.c:158
	if (endptr != 0)
   27c4b:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   27c4f:	74 13                	je     27c64 <strtol+0x188>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
   27c51:	89 c8                	mov    eax,ecx
   27c53:	85 c0                	test   eax,eax
   27c55:	74 05                	je     27c5c <strtol+0x180>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:159 (discriminator 1)
   27c57:	8d 46 ff             	lea    eax,[esi-0x1]
   27c5a:	eb 03                	jmp    27c5f <strtol+0x183>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:159 (discriminator 2)
   27c5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strtol.c:159 (discriminator 4)
   27c5f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   27c62:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:160
	return (acc);
   27c64:	89 f8                	mov    eax,edi
/home/yogi/src/os/chrisOS/src/strings/strtol.c:161
}
   27c66:	83 c4 0c             	add    esp,0xc
   27c69:	5b                   	pop    ebx
   27c6a:	5e                   	pop    esi
   27c6b:	5f                   	pop    edi
   27c6c:	5d                   	pop    ebp
   27c6d:	c3                   	ret    
   27c6e:	66 90                	xchg   ax,ax

00027c70 <strtrim>:
strtrim():
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:5
#include "strings.h"

/*FROM: http://codereview.stackexchange.com/questions/20897/trim-function-in-c*/
char * strtrim(char * *pointerToString)
{
   27c70:	55                   	push   ebp
   27c71:	89 e5                	mov    ebp,esp
   27c73:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:6
    uint8_t start=0, length=0;
   27c76:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   27c7a:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:9

        // Trim.Start:
        length = strlen(*pointerToString);
   27c7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c81:	8b 00                	mov    eax,DWORD PTR [eax]
   27c83:	83 ec 0c             	sub    esp,0xc
   27c86:	50                   	push   eax
   27c87:	e8 a0 fc ff ff       	call   2792c <strlen>
   27c8c:	83 c4 10             	add    esp,0x10
   27c8f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:10
        while ((*pointerToString)[start]==' ') start++;
   27c92:	eb 0a                	jmp    27c9e <strtrim+0x2e>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:10 (discriminator 2)
   27c94:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27c98:	83 c0 01             	add    eax,0x1
   27c9b:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:10 (discriminator 1)
   27c9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27ca1:	8b 10                	mov    edx,DWORD PTR [eax]
   27ca3:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27ca7:	01 d0                	add    eax,edx
   27ca9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27cac:	3c 20                	cmp    al,0x20
   27cae:	74 e4                	je     27c94 <strtrim+0x24>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:11
        (*pointerToString) += start;
   27cb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27cb3:	8b 10                	mov    edx,DWORD PTR [eax]
   27cb5:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27cb9:	01 c2                	add    edx,eax
   27cbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27cbe:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:13

        if (start < length) // Required for empty (ex. "    ") input
   27cc0:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27cc4:	3a 45 f5             	cmp    al,BYTE PTR [ebp-0xb]
   27cc7:	73 46                	jae    27d0f <strtrim+0x9f>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:16
        {
            // Trim.End:
            uint8_t end = strlen(*pointerToString)-1; // Get string length again (after Trim.Start)
   27cc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27ccc:	8b 00                	mov    eax,DWORD PTR [eax]
   27cce:	83 ec 0c             	sub    esp,0xc
   27cd1:	50                   	push   eax
   27cd2:	e8 55 fc ff ff       	call   2792c <strlen>
   27cd7:	83 c4 10             	add    esp,0x10
   27cda:	83 e8 01             	sub    eax,0x1
   27cdd:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:17
            while ((*pointerToString)[end]==' ') end--;
   27ce0:	eb 0a                	jmp    27cec <strtrim+0x7c>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:17 (discriminator 2)
   27ce2:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   27ce6:	83 e8 01             	sub    eax,0x1
   27ce9:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:17 (discriminator 1)
   27cec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27cef:	8b 10                	mov    edx,DWORD PTR [eax]
   27cf1:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   27cf5:	01 d0                	add    eax,edx
   27cf7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27cfa:	3c 20                	cmp    al,0x20
   27cfc:	74 e4                	je     27ce2 <strtrim+0x72>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:18
            (*pointerToString)[end+1] = 0;
   27cfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d01:	8b 00                	mov    eax,DWORD PTR [eax]
   27d03:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   27d07:	83 c2 01             	add    edx,0x1
   27d0a:	01 d0                	add    eax,edx
   27d0c:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:21
        }

    return *pointerToString;
   27d0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d12:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:22
}
   27d14:	c9                   	leave  
   27d15:	c3                   	ret    

00027d16 <strtrim2>:
strtrim2():
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:25

char * strtrim2(char* pointerToString)
{
   27d16:	55                   	push   ebp
   27d17:	89 e5                	mov    ebp,esp
   27d19:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:26
    uint8_t start=0, length=0;
   27d1c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   27d20:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:29

        // Trim.Start:
        length = strlen(pointerToString);
   27d24:	83 ec 0c             	sub    esp,0xc
   27d27:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27d2a:	e8 fd fb ff ff       	call   2792c <strlen>
   27d2f:	83 c4 10             	add    esp,0x10
   27d32:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:30
        while ((pointerToString)[start]==' ') start++;
   27d35:	eb 0a                	jmp    27d41 <strtrim2+0x2b>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:30 (discriminator 2)
   27d37:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27d3b:	83 c0 01             	add    eax,0x1
   27d3e:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:30 (discriminator 1)
   27d41:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   27d45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d48:	01 d0                	add    eax,edx
   27d4a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27d4d:	3c 20                	cmp    al,0x20
   27d4f:	74 e6                	je     27d37 <strtrim2+0x21>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:31
        (pointerToString) += start;
   27d51:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27d55:	01 45 08             	add    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:33

        if (start < length) // Required for empty (ex. "    ") input
   27d58:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27d5c:	3a 45 f5             	cmp    al,BYTE PTR [ebp-0xb]
   27d5f:	73 3f                	jae    27da0 <strtrim2+0x8a>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:36
        {
            // Trim.End:
            uint8_t end = strlen(pointerToString)-1; // Get string length again (after Trim.Start)
   27d61:	83 ec 0c             	sub    esp,0xc
   27d64:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27d67:	e8 c0 fb ff ff       	call   2792c <strlen>
   27d6c:	83 c4 10             	add    esp,0x10
   27d6f:	83 e8 01             	sub    eax,0x1
   27d72:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:37
            while ((pointerToString)[end]==' ') end--;
   27d75:	eb 0a                	jmp    27d81 <strtrim2+0x6b>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:37 (discriminator 2)
   27d77:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   27d7b:	83 e8 01             	sub    eax,0x1
   27d7e:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:37 (discriminator 1)
   27d81:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   27d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d88:	01 d0                	add    eax,edx
   27d8a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27d8d:	3c 20                	cmp    al,0x20
   27d8f:	74 e6                	je     27d77 <strtrim2+0x61>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:38
            (pointerToString)[end+1] = 0;
   27d91:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   27d95:	8d 50 01             	lea    edx,[eax+0x1]
   27d98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d9b:	01 d0                	add    eax,edx
   27d9d:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:41
        }

    return pointerToString;
   27da0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:42
}
   27da3:	c9                   	leave  
   27da4:	c3                   	ret    
   27da5:	66 90                	xchg   ax,ax
   27da7:	90                   	nop

00027da8 <time>:
time():
/home/yogi/src/os/chrisOS/src/time.c:83
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

extern time_t kSystemCurrentTime;
time_t time(time_t* arg)
{
   27da8:	55                   	push   ebp
   27da9:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/time.c:84
    *arg = kSystemCurrentTime;
   27dab:	8b 15 cc 97 12 00    	mov    edx,DWORD PTR ds:0x1297cc
   27db1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27db4:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/time.c:85
    return kSystemCurrentTime;
   27db6:	a1 cc 97 12 00       	mov    eax,ds:0x1297cc
/home/yogi/src/os/chrisOS/src/time.c:86
}
   27dbb:	5d                   	pop    ebp
   27dbc:	c3                   	ret    

00027dbd <gmtime_r>:
gmtime_r():
/home/yogi/src/os/chrisOS/src/time.c:88

struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) {
   27dbd:	55                   	push   ebp
   27dbe:	89 e5                	mov    ebp,esp
   27dc0:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/time.c:89
  time_t time = *timer;
   27dc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27dc6:	8b 00                	mov    eax,DWORD PTR [eax]
   27dc8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:91
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
   27dcb:	c7 45 f8 b2 07 00 00 	mov    DWORD PTR [ebp-0x8],0x7b2
/home/yogi/src/os/chrisOS/src/time.c:93

  dayclock = (unsigned long) time % SECS_DAY;
   27dd2:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   27dd5:	ba 07 45 2e c2       	mov    edx,0xc22e4507
   27dda:	89 c8                	mov    eax,ecx
   27ddc:	f7 e2                	mul    edx
   27dde:	89 d0                	mov    eax,edx
   27de0:	c1 e8 10             	shr    eax,0x10
   27de3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   27de6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   27de9:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
   27def:	29 c1                	sub    ecx,eax
   27df1:	89 c8                	mov    eax,ecx
   27df3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/time.c:94
  dayno = (unsigned long) time / SECS_DAY;
   27df6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   27df9:	ba 07 45 2e c2       	mov    edx,0xc22e4507
   27dfe:	f7 e2                	mul    edx
   27e00:	89 d0                	mov    eax,edx
   27e02:	c1 e8 10             	shr    eax,0x10
   27e05:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:96

  tmbuf->tm_sec = dayclock % 60;
   27e08:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   27e0b:	ba 89 88 88 88       	mov    edx,0x88888889
   27e10:	89 c8                	mov    eax,ecx
   27e12:	f7 e2                	mul    edx
   27e14:	89 d0                	mov    eax,edx
   27e16:	c1 e8 05             	shr    eax,0x5
   27e19:	89 c2                	mov    edx,eax
   27e1b:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
   27e22:	89 c2                	mov    edx,eax
   27e24:	89 d0                	mov    eax,edx
   27e26:	c1 e0 04             	shl    eax,0x4
   27e29:	29 d0                	sub    eax,edx
   27e2b:	29 c1                	sub    ecx,eax
   27e2d:	89 c8                	mov    eax,ecx
   27e2f:	89 c2                	mov    edx,eax
   27e31:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27e34:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/time.c:97
  tmbuf->tm_min = (dayclock % 3600) / 60;
   27e36:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   27e39:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   27e3e:	89 c8                	mov    eax,ecx
   27e40:	f7 e2                	mul    edx
   27e42:	89 d0                	mov    eax,edx
   27e44:	c1 e8 0b             	shr    eax,0xb
   27e47:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
   27e4d:	29 c1                	sub    ecx,eax
   27e4f:	89 c8                	mov    eax,ecx
   27e51:	ba 89 88 88 88       	mov    edx,0x88888889
   27e56:	f7 e2                	mul    edx
   27e58:	89 d0                	mov    eax,edx
   27e5a:	c1 e8 05             	shr    eax,0x5
   27e5d:	89 c2                	mov    edx,eax
   27e5f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27e62:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/time.c:98
  tmbuf->tm_hour = dayclock / 3600;
   27e65:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   27e68:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   27e6d:	f7 e2                	mul    edx
   27e6f:	89 d0                	mov    eax,edx
   27e71:	c1 e8 0b             	shr    eax,0xb
   27e74:	89 c2                	mov    edx,eax
   27e76:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27e79:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:99
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
   27e7c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   27e7f:	8d 48 04             	lea    ecx,[eax+0x4]
   27e82:	ba 25 49 92 24       	mov    edx,0x24924925
   27e87:	89 c8                	mov    eax,ecx
   27e89:	f7 e2                	mul    edx
   27e8b:	89 c8                	mov    eax,ecx
   27e8d:	29 d0                	sub    eax,edx
   27e8f:	d1 e8                	shr    eax,1
   27e91:	01 d0                	add    eax,edx
   27e93:	c1 e8 02             	shr    eax,0x2
   27e96:	89 c2                	mov    edx,eax
   27e98:	c1 e2 03             	shl    edx,0x3
   27e9b:	29 c2                	sub    edx,eax
   27e9d:	89 c8                	mov    eax,ecx
   27e9f:	29 d0                	sub    eax,edx
   27ea1:	89 c2                	mov    edx,eax
   27ea3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27ea6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/time.c:100
  while (dayno >= (unsigned long) YEARSIZE(year)) {
   27ea9:	eb 66                	jmp    27f11 <gmtime_r+0x154>
/home/yogi/src/os/chrisOS/src/time.c:101
    dayno -= YEARSIZE(year);
   27eab:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   27eae:	83 e0 03             	and    eax,0x3
   27eb1:	85 c0                	test   eax,eax
   27eb3:	75 50                	jne    27f05 <gmtime_r+0x148>
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 1)
   27eb5:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27eb8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27ebd:	89 c8                	mov    eax,ecx
   27ebf:	f7 ea                	imul   edx
   27ec1:	c1 fa 05             	sar    edx,0x5
   27ec4:	89 c8                	mov    eax,ecx
   27ec6:	c1 f8 1f             	sar    eax,0x1f
   27ec9:	29 c2                	sub    edx,eax
   27ecb:	89 d0                	mov    eax,edx
   27ecd:	6b c0 64             	imul   eax,eax,0x64
   27ed0:	29 c1                	sub    ecx,eax
   27ed2:	89 c8                	mov    eax,ecx
   27ed4:	85 c0                	test   eax,eax
   27ed6:	75 26                	jne    27efe <gmtime_r+0x141>
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 4)
   27ed8:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27edb:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27ee0:	89 c8                	mov    eax,ecx
   27ee2:	f7 ea                	imul   edx
   27ee4:	c1 fa 07             	sar    edx,0x7
   27ee7:	89 c8                	mov    eax,ecx
   27ee9:	c1 f8 1f             	sar    eax,0x1f
   27eec:	29 c2                	sub    edx,eax
   27eee:	89 d0                	mov    eax,edx
   27ef0:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   27ef6:	29 c1                	sub    ecx,eax
   27ef8:	89 c8                	mov    eax,ecx
   27efa:	85 c0                	test   eax,eax
   27efc:	75 07                	jne    27f05 <gmtime_r+0x148>
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 5)
   27efe:	b8 6e 01 00 00       	mov    eax,0x16e
   27f03:	eb 05                	jmp    27f0a <gmtime_r+0x14d>
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 6)
   27f05:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 8)
   27f0a:	29 45 fc             	sub    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:102 (discriminator 8)
    year++;
   27f0d:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/time.c:100

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
   27f11:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   27f14:	83 e0 03             	and    eax,0x3
   27f17:	85 c0                	test   eax,eax
   27f19:	75 50                	jne    27f6b <gmtime_r+0x1ae>
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 1)
   27f1b:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27f1e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27f23:	89 c8                	mov    eax,ecx
   27f25:	f7 ea                	imul   edx
   27f27:	c1 fa 05             	sar    edx,0x5
   27f2a:	89 c8                	mov    eax,ecx
   27f2c:	c1 f8 1f             	sar    eax,0x1f
   27f2f:	29 c2                	sub    edx,eax
   27f31:	89 d0                	mov    eax,edx
   27f33:	6b c0 64             	imul   eax,eax,0x64
   27f36:	29 c1                	sub    ecx,eax
   27f38:	89 c8                	mov    eax,ecx
   27f3a:	85 c0                	test   eax,eax
   27f3c:	75 26                	jne    27f64 <gmtime_r+0x1a7>
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 4)
   27f3e:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27f41:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27f46:	89 c8                	mov    eax,ecx
   27f48:	f7 ea                	imul   edx
   27f4a:	c1 fa 07             	sar    edx,0x7
   27f4d:	89 c8                	mov    eax,ecx
   27f4f:	c1 f8 1f             	sar    eax,0x1f
   27f52:	29 c2                	sub    edx,eax
   27f54:	89 d0                	mov    eax,edx
   27f56:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   27f5c:	29 c1                	sub    ecx,eax
   27f5e:	89 c8                	mov    eax,ecx
   27f60:	85 c0                	test   eax,eax
   27f62:	75 07                	jne    27f6b <gmtime_r+0x1ae>
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 5)
   27f64:	b8 6e 01 00 00       	mov    eax,0x16e
   27f69:	eb 05                	jmp    27f70 <gmtime_r+0x1b3>
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 6)
   27f6b:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 8)
   27f70:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   27f73:	0f 86 32 ff ff ff    	jbe    27eab <gmtime_r+0xee>
/home/yogi/src/os/chrisOS/src/time.c:104
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
   27f79:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   27f7c:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
   27f82:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27f85:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:105
  tmbuf->tm_yday = dayno;
   27f88:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   27f8b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27f8e:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/time.c:106
  tmbuf->tm_mon = 0;
   27f91:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27f94:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/time.c:107
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
   27f9b:	e9 89 00 00 00       	jmp    28029 <gmtime_r+0x26c>
/home/yogi/src/os/chrisOS/src/time.c:108
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
   27fa0:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   27fa3:	83 e0 03             	and    eax,0x3
   27fa6:	85 c0                	test   eax,eax
   27fa8:	75 50                	jne    27ffa <gmtime_r+0x23d>
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 1)
   27faa:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27fad:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27fb2:	89 c8                	mov    eax,ecx
   27fb4:	f7 ea                	imul   edx
   27fb6:	c1 fa 05             	sar    edx,0x5
   27fb9:	89 c8                	mov    eax,ecx
   27fbb:	c1 f8 1f             	sar    eax,0x1f
   27fbe:	29 c2                	sub    edx,eax
   27fc0:	89 d0                	mov    eax,edx
   27fc2:	6b c0 64             	imul   eax,eax,0x64
   27fc5:	29 c1                	sub    ecx,eax
   27fc7:	89 c8                	mov    eax,ecx
   27fc9:	85 c0                	test   eax,eax
   27fcb:	75 26                	jne    27ff3 <gmtime_r+0x236>
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 4)
   27fcd:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27fd0:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27fd5:	89 c8                	mov    eax,ecx
   27fd7:	f7 ea                	imul   edx
   27fd9:	c1 fa 07             	sar    edx,0x7
   27fdc:	89 c8                	mov    eax,ecx
   27fde:	c1 f8 1f             	sar    eax,0x1f
   27fe1:	29 c2                	sub    edx,eax
   27fe3:	89 d0                	mov    eax,edx
   27fe5:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   27feb:	29 c1                	sub    ecx,eax
   27fed:	89 c8                	mov    eax,ecx
   27fef:	85 c0                	test   eax,eax
   27ff1:	75 07                	jne    27ffa <gmtime_r+0x23d>
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 5)
   27ff3:	ba 01 00 00 00       	mov    edx,0x1
   27ff8:	eb 05                	jmp    27fff <gmtime_r+0x242>
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 6)
   27ffa:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 8)
   27fff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   28002:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   28005:	89 d0                	mov    eax,edx
   28007:	01 c0                	add    eax,eax
   28009:	01 d0                	add    eax,edx
   2800b:	c1 e0 02             	shl    eax,0x2
   2800e:	01 c8                	add    eax,ecx
   28010:	8b 04 85 a0 62 08 00 	mov    eax,DWORD PTR [eax*4+0x862a0]
   28017:	29 45 fc             	sub    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:109 (discriminator 8)
    tmbuf->tm_mon++;
   2801a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2801d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   28020:	8d 50 01             	lea    edx,[eax+0x1]
   28023:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   28026:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/time.c:107
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
   28029:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   2802c:	83 e0 03             	and    eax,0x3
   2802f:	85 c0                	test   eax,eax
   28031:	75 50                	jne    28083 <gmtime_r+0x2c6>
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 1)
   28033:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   28036:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2803b:	89 c8                	mov    eax,ecx
   2803d:	f7 ea                	imul   edx
   2803f:	c1 fa 05             	sar    edx,0x5
   28042:	89 c8                	mov    eax,ecx
   28044:	c1 f8 1f             	sar    eax,0x1f
   28047:	29 c2                	sub    edx,eax
   28049:	89 d0                	mov    eax,edx
   2804b:	6b c0 64             	imul   eax,eax,0x64
   2804e:	29 c1                	sub    ecx,eax
   28050:	89 c8                	mov    eax,ecx
   28052:	85 c0                	test   eax,eax
   28054:	75 26                	jne    2807c <gmtime_r+0x2bf>
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 4)
   28056:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   28059:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2805e:	89 c8                	mov    eax,ecx
   28060:	f7 ea                	imul   edx
   28062:	c1 fa 07             	sar    edx,0x7
   28065:	89 c8                	mov    eax,ecx
   28067:	c1 f8 1f             	sar    eax,0x1f
   2806a:	29 c2                	sub    edx,eax
   2806c:	89 d0                	mov    eax,edx
   2806e:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   28074:	29 c1                	sub    ecx,eax
   28076:	89 c8                	mov    eax,ecx
   28078:	85 c0                	test   eax,eax
   2807a:	75 07                	jne    28083 <gmtime_r+0x2c6>
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 5)
   2807c:	ba 01 00 00 00       	mov    edx,0x1
   28081:	eb 05                	jmp    28088 <gmtime_r+0x2cb>
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 6)
   28083:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 8)
   28088:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2808b:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   2808e:	89 d0                	mov    eax,edx
   28090:	01 c0                	add    eax,eax
   28092:	01 d0                	add    eax,edx
   28094:	c1 e0 02             	shl    eax,0x2
   28097:	01 c8                	add    eax,ecx
   28099:	8b 04 85 a0 62 08 00 	mov    eax,DWORD PTR [eax*4+0x862a0]
   280a0:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   280a3:	0f 86 f7 fe ff ff    	jbe    27fa0 <gmtime_r+0x1e3>
/home/yogi/src/os/chrisOS/src/time.c:111
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
   280a9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   280ac:	83 c0 01             	add    eax,0x1
   280af:	89 c2                	mov    edx,eax
   280b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   280b4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/time.c:112
  tmbuf->tm_isdst = 0;
   280b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   280ba:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/chrisOS/src/time.c:113
  return tmbuf;
   280c1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/time.c:114
}
   280c4:	c9                   	leave  
   280c5:	c3                   	ret    

000280c6 <localtime>:
localtime():
/home/yogi/src/os/chrisOS/src/time.c:116

struct tm *localtime(const time_t *timer) {
   280c6:	55                   	push   ebp
   280c7:	89 e5                	mov    ebp,esp
   280c9:	83 ec 30             	sub    esp,0x30
/home/yogi/src/os/chrisOS/src/time.c:120
  time_t t;
  struct tm tmbuf;
  
  t = *timer - kTimeZone;
   280cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   280cf:	8b 10                	mov    edx,DWORD PTR [eax]
   280d1:	a1 d0 97 12 00       	mov    eax,ds:0x1297d0
   280d6:	29 c2                	sub    edx,eax
   280d8:	89 d0                	mov    eax,edx
   280da:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:121
  return gmtime_r(&t, &tmbuf);
   280dd:	8d 45 d0             	lea    eax,[ebp-0x30]
   280e0:	50                   	push   eax
   280e1:	8d 45 fc             	lea    eax,[ebp-0x4]
   280e4:	50                   	push   eax
   280e5:	e8 d3 fc ff ff       	call   27dbd <gmtime_r>
   280ea:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/time.c:122
}
   280ed:	c9                   	leave  
   280ee:	c3                   	ret    

000280ef <localtime_r>:
localtime_r():
/home/yogi/src/os/chrisOS/src/time.c:124

struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
   280ef:	55                   	push   ebp
   280f0:	89 e5                	mov    ebp,esp
   280f2:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/time.c:127
  time_t t;

  t = *timer - kTimeZone;
   280f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   280f8:	8b 10                	mov    edx,DWORD PTR [eax]
   280fa:	a1 d0 97 12 00       	mov    eax,ds:0x1297d0
   280ff:	29 c2                	sub    edx,eax
   28101:	89 d0                	mov    eax,edx
   28103:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:128
  return gmtime_r(&t, tmbuf);
   28106:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   28109:	8d 45 fc             	lea    eax,[ebp-0x4]
   2810c:	50                   	push   eax
   2810d:	e8 ab fc ff ff       	call   27dbd <gmtime_r>
   28112:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/time.c:129
}
   28115:	c9                   	leave  
   28116:	c3                   	ret    

00028117 <mktime>:
mktime():
/home/yogi/src/os/chrisOS/src/time.c:131

time_t mktime(struct tm *tmbuf) {
   28117:	55                   	push   ebp
   28118:	89 e5                	mov    ebp,esp
   2811a:	56                   	push   esi
   2811b:	53                   	push   ebx
   2811c:	83 ec 20             	sub    esp,0x20
/home/yogi/src/os/chrisOS/src/time.c:139
  int yday, month;
  /*unsigned*/ long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
   2811f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28122:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
   28125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28128:	8b 08                	mov    ecx,DWORD PTR [eax]
   2812a:	ba 89 88 88 88       	mov    edx,0x88888889
   2812f:	89 c8                	mov    eax,ecx
   28131:	f7 ea                	imul   edx
   28133:	8d 04 0a             	lea    eax,[edx+ecx*1]
   28136:	c1 f8 05             	sar    eax,0x5
   28139:	89 c2                	mov    edx,eax
   2813b:	89 c8                	mov    eax,ecx
   2813d:	c1 f8 1f             	sar    eax,0x1f
   28140:	29 c2                	sub    edx,eax
   28142:	89 d0                	mov    eax,edx
   28144:	8d 14 03             	lea    edx,[ebx+eax*1]
   28147:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2814a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/time.c:140
  tmbuf->tm_sec %= 60;
   2814d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28150:	8b 08                	mov    ecx,DWORD PTR [eax]
   28152:	ba 89 88 88 88       	mov    edx,0x88888889
   28157:	89 c8                	mov    eax,ecx
   28159:	f7 ea                	imul   edx
   2815b:	8d 04 0a             	lea    eax,[edx+ecx*1]
   2815e:	c1 f8 05             	sar    eax,0x5
   28161:	89 c2                	mov    edx,eax
   28163:	89 c8                	mov    eax,ecx
   28165:	c1 f8 1f             	sar    eax,0x1f
   28168:	29 c2                	sub    edx,eax
   2816a:	89 d0                	mov    eax,edx
   2816c:	89 c2                	mov    edx,eax
   2816e:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
   28175:	89 c2                	mov    edx,eax
   28177:	89 d0                	mov    eax,edx
   28179:	c1 e0 04             	shl    eax,0x4
   2817c:	29 d0                	sub    eax,edx
   2817e:	29 c1                	sub    ecx,eax
   28180:	89 c8                	mov    eax,ecx
   28182:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   28185:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/time.c:141
  if (tmbuf->tm_sec < 0) {
   28187:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2818a:	8b 00                	mov    eax,DWORD PTR [eax]
   2818c:	85 c0                	test   eax,eax
   2818e:	79 1c                	jns    281ac <mktime+0x95>
/home/yogi/src/os/chrisOS/src/time.c:142
    tmbuf->tm_sec += 60;
   28190:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28193:	8b 00                	mov    eax,DWORD PTR [eax]
   28195:	8d 50 3c             	lea    edx,[eax+0x3c]
   28198:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2819b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/time.c:143
    tmbuf->tm_min--;
   2819d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   281a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   281a3:	8d 50 ff             	lea    edx,[eax-0x1]
   281a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   281a9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/time.c:145
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
   281ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   281af:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
   281b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   281b5:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   281b8:	ba 89 88 88 88       	mov    edx,0x88888889
   281bd:	89 c8                	mov    eax,ecx
   281bf:	f7 ea                	imul   edx
   281c1:	8d 04 0a             	lea    eax,[edx+ecx*1]
   281c4:	c1 f8 05             	sar    eax,0x5
   281c7:	89 c2                	mov    edx,eax
   281c9:	89 c8                	mov    eax,ecx
   281cb:	c1 f8 1f             	sar    eax,0x1f
   281ce:	29 c2                	sub    edx,eax
   281d0:	89 d0                	mov    eax,edx
   281d2:	8d 14 03             	lea    edx,[ebx+eax*1]
   281d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   281d8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:146
  tmbuf->tm_min = tmbuf->tm_min % 60;
   281db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   281de:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   281e1:	ba 89 88 88 88       	mov    edx,0x88888889
   281e6:	89 c8                	mov    eax,ecx
   281e8:	f7 ea                	imul   edx
   281ea:	8d 04 0a             	lea    eax,[edx+ecx*1]
   281ed:	c1 f8 05             	sar    eax,0x5
   281f0:	89 c2                	mov    edx,eax
   281f2:	89 c8                	mov    eax,ecx
   281f4:	c1 f8 1f             	sar    eax,0x1f
   281f7:	29 c2                	sub    edx,eax
   281f9:	89 d0                	mov    eax,edx
   281fb:	89 c2                	mov    edx,eax
   281fd:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
   28204:	89 c2                	mov    edx,eax
   28206:	89 d0                	mov    eax,edx
   28208:	c1 e0 04             	shl    eax,0x4
   2820b:	29 d0                	sub    eax,edx
   2820d:	29 c1                	sub    ecx,eax
   2820f:	89 c8                	mov    eax,ecx
   28211:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   28214:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:147
  if (tmbuf->tm_min < 0) {
   28217:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2821a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2821d:	85 c0                	test   eax,eax
   2821f:	79 1e                	jns    2823f <mktime+0x128>
/home/yogi/src/os/chrisOS/src/time.c:148
    tmbuf->tm_min += 60;
   28221:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28224:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   28227:	8d 50 3c             	lea    edx,[eax+0x3c]
   2822a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2822d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/time.c:149
    tmbuf->tm_hour--;
   28230:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28233:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   28236:	8d 50 ff             	lea    edx,[eax-0x1]
   28239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2823c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:151
  }
  day = tmbuf->tm_hour / 24;
   2823f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28242:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   28245:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   2824a:	89 c8                	mov    eax,ecx
   2824c:	f7 ea                	imul   edx
   2824e:	c1 fa 02             	sar    edx,0x2
   28251:	89 c8                	mov    eax,ecx
   28253:	c1 f8 1f             	sar    eax,0x1f
   28256:	29 c2                	sub    edx,eax
   28258:	89 d0                	mov    eax,edx
   2825a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:152
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
   2825d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28260:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   28263:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   28268:	89 c8                	mov    eax,ecx
   2826a:	f7 ea                	imul   edx
   2826c:	c1 fa 02             	sar    edx,0x2
   2826f:	89 c8                	mov    eax,ecx
   28271:	c1 f8 1f             	sar    eax,0x1f
   28274:	29 c2                	sub    edx,eax
   28276:	89 d0                	mov    eax,edx
   28278:	01 c0                	add    eax,eax
   2827a:	01 d0                	add    eax,edx
   2827c:	c1 e0 03             	shl    eax,0x3
   2827f:	29 c1                	sub    ecx,eax
   28281:	89 ca                	mov    edx,ecx
   28283:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28286:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:153
  if (tmbuf->tm_hour < 0) {
   28289:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2828c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   2828f:	85 c0                	test   eax,eax
   28291:	79 13                	jns    282a6 <mktime+0x18f>
/home/yogi/src/os/chrisOS/src/time.c:154
    tmbuf->tm_hour += 24;
   28293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28296:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   28299:	8d 50 18             	lea    edx,[eax+0x18]
   2829c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2829f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:155
    day--;
   282a2:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/time.c:157
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
   282a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   282a9:	8b 58 14             	mov    ebx,DWORD PTR [eax+0x14]
   282ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   282af:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   282b2:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   282b7:	89 c8                	mov    eax,ecx
   282b9:	f7 ea                	imul   edx
   282bb:	d1 fa                	sar    edx,1
   282bd:	89 c8                	mov    eax,ecx
   282bf:	c1 f8 1f             	sar    eax,0x1f
   282c2:	29 c2                	sub    edx,eax
   282c4:	89 d0                	mov    eax,edx
   282c6:	8d 14 03             	lea    edx,[ebx+eax*1]
   282c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   282cc:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:158
  tmbuf->tm_mon %= 12;
   282cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   282d2:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   282d5:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   282da:	89 c8                	mov    eax,ecx
   282dc:	f7 ea                	imul   edx
   282de:	d1 fa                	sar    edx,1
   282e0:	89 c8                	mov    eax,ecx
   282e2:	c1 f8 1f             	sar    eax,0x1f
   282e5:	29 c2                	sub    edx,eax
   282e7:	89 d0                	mov    eax,edx
   282e9:	01 c0                	add    eax,eax
   282eb:	01 d0                	add    eax,edx
   282ed:	c1 e0 02             	shl    eax,0x2
   282f0:	29 c1                	sub    ecx,eax
   282f2:	89 ca                	mov    edx,ecx
   282f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   282f7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/time.c:159
  if (tmbuf->tm_mon < 0) {
   282fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   282fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   28300:	85 c0                	test   eax,eax
   28302:	79 1e                	jns    28322 <mktime+0x20b>
/home/yogi/src/os/chrisOS/src/time.c:160
    tmbuf->tm_mon += 12;
   28304:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28307:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   2830a:	8d 50 0c             	lea    edx,[eax+0xc]
   2830d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28310:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/time.c:161
    tmbuf->tm_year--;
   28313:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28316:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   28319:	8d 50 ff             	lea    edx,[eax-0x1]
   2831c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2831f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:163
  }
  day += (tmbuf->tm_mday - 1);
   28322:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28325:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   28328:	83 e8 01             	sub    eax,0x1
   2832b:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:164
  while (day < 0) {
   2832e:	e9 c1 00 00 00       	jmp    283f4 <mktime+0x2dd>
/home/yogi/src/os/chrisOS/src/time.c:165
    if(--tmbuf->tm_mon < 0) {
   28333:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28336:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   28339:	8d 50 ff             	lea    edx,[eax-0x1]
   2833c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2833f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
   28342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28345:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   28348:	85 c0                	test   eax,eax
   2834a:	79 19                	jns    28365 <mktime+0x24e>
/home/yogi/src/os/chrisOS/src/time.c:166
      tmbuf->tm_year--;
   2834c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2834f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   28352:	8d 50 ff             	lea    edx,[eax-0x1]
   28355:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28358:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:167
      tmbuf->tm_mon = 11;
   2835b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2835e:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/chrisOS/src/time.c:169
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
   28365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28368:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   2836b:	83 e0 03             	and    eax,0x3
   2836e:	85 c0                	test   eax,eax
   28370:	75 62                	jne    283d4 <mktime+0x2bd>
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 1)
   28372:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28375:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   28378:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   2837e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28383:	89 c8                	mov    eax,ecx
   28385:	f7 ea                	imul   edx
   28387:	c1 fa 05             	sar    edx,0x5
   2838a:	89 c8                	mov    eax,ecx
   2838c:	c1 f8 1f             	sar    eax,0x1f
   2838f:	29 c2                	sub    edx,eax
   28391:	89 d0                	mov    eax,edx
   28393:	6b c0 64             	imul   eax,eax,0x64
   28396:	29 c1                	sub    ecx,eax
   28398:	89 c8                	mov    eax,ecx
   2839a:	85 c0                	test   eax,eax
   2839c:	75 2f                	jne    283cd <mktime+0x2b6>
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 4)
   2839e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   283a1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   283a4:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   283aa:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   283af:	89 c8                	mov    eax,ecx
   283b1:	f7 ea                	imul   edx
   283b3:	c1 fa 07             	sar    edx,0x7
   283b6:	89 c8                	mov    eax,ecx
   283b8:	c1 f8 1f             	sar    eax,0x1f
   283bb:	29 c2                	sub    edx,eax
   283bd:	89 d0                	mov    eax,edx
   283bf:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   283c5:	29 c1                	sub    ecx,eax
   283c7:	89 c8                	mov    eax,ecx
   283c9:	85 c0                	test   eax,eax
   283cb:	75 07                	jne    283d4 <mktime+0x2bd>
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 5)
   283cd:	ba 01 00 00 00       	mov    edx,0x1
   283d2:	eb 05                	jmp    283d9 <mktime+0x2c2>
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 6)
   283d4:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 8)
   283d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   283dc:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   283df:	89 d0                	mov    eax,edx
   283e1:	01 c0                	add    eax,eax
   283e3:	01 d0                	add    eax,edx
   283e5:	c1 e0 02             	shl    eax,0x2
   283e8:	01 c8                	add    eax,ecx
   283ea:	8b 04 85 a0 62 08 00 	mov    eax,DWORD PTR [eax*4+0x862a0]
   283f1:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:164
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
   283f4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   283f8:	0f 88 35 ff ff ff    	js     28333 <mktime+0x21c>
/home/yogi/src/os/chrisOS/src/time.c:171
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
   283fe:	e9 c2 00 00 00       	jmp    284c5 <mktime+0x3ae>
/home/yogi/src/os/chrisOS/src/time.c:172
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
   28403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28406:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   28409:	83 e0 03             	and    eax,0x3
   2840c:	85 c0                	test   eax,eax
   2840e:	75 62                	jne    28472 <mktime+0x35b>
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 1)
   28410:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28413:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   28416:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   2841c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28421:	89 c8                	mov    eax,ecx
   28423:	f7 ea                	imul   edx
   28425:	c1 fa 05             	sar    edx,0x5
   28428:	89 c8                	mov    eax,ecx
   2842a:	c1 f8 1f             	sar    eax,0x1f
   2842d:	29 c2                	sub    edx,eax
   2842f:	89 d0                	mov    eax,edx
   28431:	6b c0 64             	imul   eax,eax,0x64
   28434:	29 c1                	sub    ecx,eax
   28436:	89 c8                	mov    eax,ecx
   28438:	85 c0                	test   eax,eax
   2843a:	75 2f                	jne    2846b <mktime+0x354>
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 4)
   2843c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2843f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   28442:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   28448:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2844d:	89 c8                	mov    eax,ecx
   2844f:	f7 ea                	imul   edx
   28451:	c1 fa 07             	sar    edx,0x7
   28454:	89 c8                	mov    eax,ecx
   28456:	c1 f8 1f             	sar    eax,0x1f
   28459:	29 c2                	sub    edx,eax
   2845b:	89 d0                	mov    eax,edx
   2845d:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   28463:	29 c1                	sub    ecx,eax
   28465:	89 c8                	mov    eax,ecx
   28467:	85 c0                	test   eax,eax
   28469:	75 07                	jne    28472 <mktime+0x35b>
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 5)
   2846b:	ba 01 00 00 00       	mov    edx,0x1
   28470:	eb 05                	jmp    28477 <mktime+0x360>
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 6)
   28472:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 8)
   28477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2847a:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   2847d:	89 d0                	mov    eax,edx
   2847f:	01 c0                	add    eax,eax
   28481:	01 d0                	add    eax,edx
   28483:	c1 e0 02             	shl    eax,0x2
   28486:	01 c8                	add    eax,ecx
   28488:	8b 04 85 a0 62 08 00 	mov    eax,DWORD PTR [eax*4+0x862a0]
   2848f:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:173 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
   28492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28495:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   28498:	8d 50 01             	lea    edx,[eax+0x1]
   2849b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2849e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
   284a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   284a4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   284a7:	83 f8 0c             	cmp    eax,0xc
   284aa:	75 19                	jne    284c5 <mktime+0x3ae>
/home/yogi/src/os/chrisOS/src/time.c:174
      tmbuf->tm_mon = 0;
   284ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   284af:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/time.c:175
      tmbuf->tm_year++;
   284b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   284b9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   284bc:	8d 50 01             	lea    edx,[eax+0x1]
   284bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   284c2:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:171
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
   284c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   284c8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   284cb:	83 e0 03             	and    eax,0x3
   284ce:	85 c0                	test   eax,eax
   284d0:	75 62                	jne    28534 <mktime+0x41d>
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 1)
   284d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   284d5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   284d8:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   284de:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   284e3:	89 c8                	mov    eax,ecx
   284e5:	f7 ea                	imul   edx
   284e7:	c1 fa 05             	sar    edx,0x5
   284ea:	89 c8                	mov    eax,ecx
   284ec:	c1 f8 1f             	sar    eax,0x1f
   284ef:	29 c2                	sub    edx,eax
   284f1:	89 d0                	mov    eax,edx
   284f3:	6b c0 64             	imul   eax,eax,0x64
   284f6:	29 c1                	sub    ecx,eax
   284f8:	89 c8                	mov    eax,ecx
   284fa:	85 c0                	test   eax,eax
   284fc:	75 2f                	jne    2852d <mktime+0x416>
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 4)
   284fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28501:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   28504:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   2850a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2850f:	89 c8                	mov    eax,ecx
   28511:	f7 ea                	imul   edx
   28513:	c1 fa 07             	sar    edx,0x7
   28516:	89 c8                	mov    eax,ecx
   28518:	c1 f8 1f             	sar    eax,0x1f
   2851b:	29 c2                	sub    edx,eax
   2851d:	89 d0                	mov    eax,edx
   2851f:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   28525:	29 c1                	sub    ecx,eax
   28527:	89 c8                	mov    eax,ecx
   28529:	85 c0                	test   eax,eax
   2852b:	75 07                	jne    28534 <mktime+0x41d>
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 5)
   2852d:	ba 01 00 00 00       	mov    edx,0x1
   28532:	eb 05                	jmp    28539 <mktime+0x422>
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 6)
   28534:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 8)
   28539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2853c:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   2853f:	89 d0                	mov    eax,edx
   28541:	01 c0                	add    eax,eax
   28543:	01 d0                	add    eax,edx
   28545:	c1 e0 02             	shl    eax,0x2
   28548:	01 c8                	add    eax,ecx
   2854a:	8b 04 85 a0 62 08 00 	mov    eax,DWORD PTR [eax*4+0x862a0]
   28551:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   28554:	0f 8e a9 fe ff ff    	jle    28403 <mktime+0x2ec>
/home/yogi/src/os/chrisOS/src/time.c:178
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
   2855a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2855d:	8d 50 01             	lea    edx,[eax+0x1]
   28560:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28563:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/time.c:179
  year = EPOCH_YR;
   28566:	c7 45 e0 b2 07 00 00 	mov    DWORD PTR [ebp-0x20],0x7b2
/home/yogi/src/os/chrisOS/src/time.c:180
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
   2856d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28570:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   28573:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   28576:	81 ea 6c 07 00 00    	sub    edx,0x76c
   2857c:	39 d0                	cmp    eax,edx
   2857e:	7d 0a                	jge    2858a <mktime+0x473>
/home/yogi/src/os/chrisOS/src/time.c:180 (discriminator 1)
   28580:	b8 19 fc ff ff       	mov    eax,0xfffffc19
   28585:	e9 c0 03 00 00       	jmp    2894a <mktime+0x833>
/home/yogi/src/os/chrisOS/src/time.c:181
  seconds = 0;
   2858a:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/chrisOS/src/time.c:182
  day = 0;                      // Means days since day 0 now
   28591:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/time.c:183
  overflow = 0;
   28598:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/time.c:190
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
   2859f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   285a2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   285a5:	05 6c 07 00 00       	add    eax,0x76c
   285aa:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/time.c:192

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
   285ad:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   285b0:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   285b3:	3d 7c c6 59 00       	cmp    eax,0x59c67c
   285b8:	7e 07                	jle    285c1 <mktime+0x4aa>
/home/yogi/src/os/chrisOS/src/time.c:192 (discriminator 1)
   285ba:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/time.c:193
  day = (tm_year - year) * 365;
   285c1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   285c4:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   285c7:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
   285cd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:194
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
   285d0:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
   285d5:	2b 45 f4             	sub    eax,DWORD PTR [ebp-0xc]
   285d8:	89 c2                	mov    edx,eax
   285da:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   285dd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   285e0:	8d 48 03             	lea    ecx,[eax+0x3]
   285e3:	85 c0                	test   eax,eax
   285e5:	0f 48 c1             	cmovs  eax,ecx
   285e8:	c1 f8 02             	sar    eax,0x2
   285eb:	83 c0 01             	add    eax,0x1
   285ee:	39 c2                	cmp    edx,eax
   285f0:	7d 04                	jge    285f6 <mktime+0x4df>
/home/yogi/src/os/chrisOS/src/time.c:194 (discriminator 1)
   285f2:	83 4d e8 02          	or     DWORD PTR [ebp-0x18],0x2
/home/yogi/src/os/chrisOS/src/time.c:195
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
   285f6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   285f9:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   285fc:	8d 50 03             	lea    edx,[eax+0x3]
   285ff:	85 c0                	test   eax,eax
   28601:	0f 48 c2             	cmovs  eax,edx
   28604:	c1 f8 02             	sar    eax,0x2
   28607:	89 c1                	mov    ecx,eax
   28609:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   2860c:	83 e0 03             	and    eax,0x3
   2860f:	85 c0                	test   eax,eax
   28611:	74 29                	je     2863c <mktime+0x525>
/home/yogi/src/os/chrisOS/src/time.c:195 (discriminator 1)
   28613:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   28616:	99                   	cdq    
   28617:	c1 ea 1e             	shr    edx,0x1e
   2861a:	01 d0                	add    eax,edx
   2861c:	83 e0 03             	and    eax,0x3
   2861f:	29 d0                	sub    eax,edx
   28621:	89 c3                	mov    ebx,eax
   28623:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   28626:	99                   	cdq    
   28627:	c1 ea 1e             	shr    edx,0x1e
   2862a:	01 d0                	add    eax,edx
   2862c:	83 e0 03             	and    eax,0x3
   2862f:	29 d0                	sub    eax,edx
   28631:	39 c3                	cmp    ebx,eax
   28633:	7d 07                	jge    2863c <mktime+0x525>
/home/yogi/src/os/chrisOS/src/time.c:195 (discriminator 3)
   28635:	b8 01 00 00 00       	mov    eax,0x1
   2863a:	eb 05                	jmp    28641 <mktime+0x52a>
/home/yogi/src/os/chrisOS/src/time.c:195 (discriminator 4)
   2863c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/time.c:195 (discriminator 6)
   28641:	01 c8                	add    eax,ecx
   28643:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
   28646:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   28649:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   2864c:	89 c1                	mov    ecx,eax
   2864e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28653:	89 c8                	mov    eax,ecx
   28655:	f7 ea                	imul   edx
   28657:	c1 fa 05             	sar    edx,0x5
   2865a:	89 c8                	mov    eax,ecx
   2865c:	c1 f8 1f             	sar    eax,0x1f
   2865f:	89 d6                	mov    esi,edx
   28661:	29 c6                	sub    esi,eax
   28663:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   28666:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2866b:	89 c8                	mov    eax,ecx
   2866d:	f7 ea                	imul   edx
   2866f:	c1 fa 05             	sar    edx,0x5
   28672:	89 c8                	mov    eax,ecx
   28674:	c1 f8 1f             	sar    eax,0x1f
   28677:	29 c2                	sub    edx,eax
   28679:	89 d0                	mov    eax,edx
   2867b:	6b c0 64             	imul   eax,eax,0x64
   2867e:	29 c1                	sub    ecx,eax
   28680:	89 c8                	mov    eax,ecx
   28682:	85 c0                	test   eax,eax
   28684:	74 49                	je     286cf <mktime+0x5b8>
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 1)
   28686:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   28689:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2868e:	89 c8                	mov    eax,ecx
   28690:	f7 ea                	imul   edx
   28692:	c1 fa 05             	sar    edx,0x5
   28695:	89 c8                	mov    eax,ecx
   28697:	c1 f8 1f             	sar    eax,0x1f
   2869a:	89 d3                	mov    ebx,edx
   2869c:	29 c3                	sub    ebx,eax
   2869e:	6b c3 64             	imul   eax,ebx,0x64
   286a1:	89 cb                	mov    ebx,ecx
   286a3:	29 c3                	sub    ebx,eax
   286a5:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   286a8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   286ad:	89 c8                	mov    eax,ecx
   286af:	f7 ea                	imul   edx
   286b1:	c1 fa 05             	sar    edx,0x5
   286b4:	89 c8                	mov    eax,ecx
   286b6:	c1 f8 1f             	sar    eax,0x1f
   286b9:	29 c2                	sub    edx,eax
   286bb:	89 d0                	mov    eax,edx
   286bd:	6b c0 64             	imul   eax,eax,0x64
   286c0:	29 c1                	sub    ecx,eax
   286c2:	89 c8                	mov    eax,ecx
   286c4:	39 c3                	cmp    ebx,eax
   286c6:	7d 07                	jge    286cf <mktime+0x5b8>
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 3)
   286c8:	b8 01 00 00 00       	mov    eax,0x1
   286cd:	eb 05                	jmp    286d4 <mktime+0x5bd>
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 4)
   286cf:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 6)
   286d4:	01 f0                	add    eax,esi
   286d6:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
   286d9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   286dc:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   286df:	89 c1                	mov    ecx,eax
   286e1:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   286e6:	89 c8                	mov    eax,ecx
   286e8:	f7 ea                	imul   edx
   286ea:	c1 fa 07             	sar    edx,0x7
   286ed:	89 c8                	mov    eax,ecx
   286ef:	c1 f8 1f             	sar    eax,0x1f
   286f2:	89 d6                	mov    esi,edx
   286f4:	29 c6                	sub    esi,eax
   286f6:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   286f9:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   286fe:	89 c8                	mov    eax,ecx
   28700:	f7 ea                	imul   edx
   28702:	c1 fa 07             	sar    edx,0x7
   28705:	89 c8                	mov    eax,ecx
   28707:	c1 f8 1f             	sar    eax,0x1f
   2870a:	29 c2                	sub    edx,eax
   2870c:	89 d0                	mov    eax,edx
   2870e:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   28714:	29 c1                	sub    ecx,eax
   28716:	89 c8                	mov    eax,ecx
   28718:	85 c0                	test   eax,eax
   2871a:	74 4f                	je     2876b <mktime+0x654>
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 1)
   2871c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   2871f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28724:	89 c8                	mov    eax,ecx
   28726:	f7 ea                	imul   edx
   28728:	c1 fa 07             	sar    edx,0x7
   2872b:	89 c8                	mov    eax,ecx
   2872d:	c1 f8 1f             	sar    eax,0x1f
   28730:	89 d3                	mov    ebx,edx
   28732:	29 c3                	sub    ebx,eax
   28734:	69 c3 90 01 00 00    	imul   eax,ebx,0x190
   2873a:	89 cb                	mov    ebx,ecx
   2873c:	29 c3                	sub    ebx,eax
   2873e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   28741:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28746:	89 c8                	mov    eax,ecx
   28748:	f7 ea                	imul   edx
   2874a:	c1 fa 07             	sar    edx,0x7
   2874d:	89 c8                	mov    eax,ecx
   2874f:	c1 f8 1f             	sar    eax,0x1f
   28752:	29 c2                	sub    edx,eax
   28754:	89 d0                	mov    eax,edx
   28756:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   2875c:	29 c1                	sub    ecx,eax
   2875e:	89 c8                	mov    eax,ecx
   28760:	39 c3                	cmp    ebx,eax
   28762:	7d 07                	jge    2876b <mktime+0x654>
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 3)
   28764:	b8 01 00 00 00       	mov    eax,0x1
   28769:	eb 05                	jmp    28770 <mktime+0x659>
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 4)
   2876b:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 6)
   28770:	01 f0                	add    eax,esi
   28772:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:199 (discriminator 6)

  yday = month = 0;
   28775:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   2877c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2877f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/time.c:200 (discriminator 6)
  while (month < tmbuf->tm_mon) {
   28782:	eb 7b                	jmp    287ff <mktime+0x6e8>
/home/yogi/src/os/chrisOS/src/time.c:201
    yday += _ytab[LEAPYEAR(tm_year)][month];
   28784:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   28787:	83 e0 03             	and    eax,0x3
   2878a:	85 c0                	test   eax,eax
   2878c:	75 50                	jne    287de <mktime+0x6c7>
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 1)
   2878e:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   28791:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28796:	89 c8                	mov    eax,ecx
   28798:	f7 ea                	imul   edx
   2879a:	c1 fa 05             	sar    edx,0x5
   2879d:	89 c8                	mov    eax,ecx
   2879f:	c1 f8 1f             	sar    eax,0x1f
   287a2:	29 c2                	sub    edx,eax
   287a4:	89 d0                	mov    eax,edx
   287a6:	6b c0 64             	imul   eax,eax,0x64
   287a9:	29 c1                	sub    ecx,eax
   287ab:	89 c8                	mov    eax,ecx
   287ad:	85 c0                	test   eax,eax
   287af:	75 26                	jne    287d7 <mktime+0x6c0>
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 4)
   287b1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   287b4:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   287b9:	89 c8                	mov    eax,ecx
   287bb:	f7 ea                	imul   edx
   287bd:	c1 fa 07             	sar    edx,0x7
   287c0:	89 c8                	mov    eax,ecx
   287c2:	c1 f8 1f             	sar    eax,0x1f
   287c5:	29 c2                	sub    edx,eax
   287c7:	89 d0                	mov    eax,edx
   287c9:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   287cf:	29 c1                	sub    ecx,eax
   287d1:	89 c8                	mov    eax,ecx
   287d3:	85 c0                	test   eax,eax
   287d5:	75 07                	jne    287de <mktime+0x6c7>
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 5)
   287d7:	ba 01 00 00 00       	mov    edx,0x1
   287dc:	eb 05                	jmp    287e3 <mktime+0x6cc>
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 6)
   287de:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 8)
   287e3:	89 d0                	mov    eax,edx
   287e5:	01 c0                	add    eax,eax
   287e7:	01 d0                	add    eax,edx
   287e9:	c1 e0 02             	shl    eax,0x2
   287ec:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   287ef:	01 d0                	add    eax,edx
   287f1:	8b 04 85 a0 62 08 00 	mov    eax,DWORD PTR [eax*4+0x862a0]
   287f8:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/time.c:202 (discriminator 8)
    month++;
   287fb:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/time.c:200
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
   287ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28802:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   28805:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   28808:	0f 8f 76 ff ff ff    	jg     28784 <mktime+0x66d>
/home/yogi/src/os/chrisOS/src/time.c:204
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
   2880e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28811:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   28814:	83 e8 01             	sub    eax,0x1
   28817:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/time.c:205
  if (day + yday < 0) overflow|=4;
   2881a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   2881d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   28820:	01 d0                	add    eax,edx
   28822:	85 c0                	test   eax,eax
   28824:	79 04                	jns    2882a <mktime+0x713>
/home/yogi/src/os/chrisOS/src/time.c:205 (discriminator 1)
   28826:	83 4d e8 04          	or     DWORD PTR [ebp-0x18],0x4
/home/yogi/src/os/chrisOS/src/time.c:206
  day += yday;
   2882a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2882d:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:208

  tmbuf->tm_yday = yday;
   28830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28833:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   28836:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/time.c:209
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
   28839:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2883c:	8d 48 04             	lea    ecx,[eax+0x4]
   2883f:	ba 93 24 49 92       	mov    edx,0x92492493
   28844:	89 c8                	mov    eax,ecx
   28846:	f7 ea                	imul   edx
   28848:	8d 04 0a             	lea    eax,[edx+ecx*1]
   2884b:	c1 f8 02             	sar    eax,0x2
   2884e:	89 c2                	mov    edx,eax
   28850:	89 c8                	mov    eax,ecx
   28852:	c1 f8 1f             	sar    eax,0x1f
   28855:	29 c2                	sub    edx,eax
   28857:	89 d0                	mov    eax,edx
   28859:	89 c2                	mov    edx,eax
   2885b:	c1 e2 03             	shl    edx,0x3
   2885e:	29 c2                	sub    edx,eax
   28860:	89 c8                	mov    eax,ecx
   28862:	29 d0                	sub    eax,edx
   28864:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   28867:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/chrisOS/src/time.c:211

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
   2886a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2886d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   28870:	c1 e0 02             	shl    eax,0x2
   28873:	89 c2                	mov    edx,eax
   28875:	c1 e2 04             	shl    edx,0x4
   28878:	29 c2                	sub    edx,eax
   2887a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2887d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   28880:	01 d0                	add    eax,edx
   28882:	c1 e0 02             	shl    eax,0x2
   28885:	89 c2                	mov    edx,eax
   28887:	c1 e2 04             	shl    edx,0x4
   2888a:	29 c2                	sub    edx,eax
   2888c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2888f:	8b 00                	mov    eax,DWORD PTR [eax]
   28891:	01 d0                	add    eax,edx
   28893:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/time.c:213

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
   28896:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
   2889b:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
   2889e:	89 c1                	mov    ecx,eax
   288a0:	ba 07 45 2e c2       	mov    edx,0xc22e4507
   288a5:	89 c8                	mov    eax,ecx
   288a7:	f7 ea                	imul   edx
   288a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
   288ac:	c1 f8 10             	sar    eax,0x10
   288af:	89 c2                	mov    edx,eax
   288b1:	89 c8                	mov    eax,ecx
   288b3:	c1 f8 1f             	sar    eax,0x1f
   288b6:	29 c2                	sub    edx,eax
   288b8:	89 d0                	mov    eax,edx
   288ba:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   288bd:	7d 04                	jge    288c3 <mktime+0x7ac>
/home/yogi/src/os/chrisOS/src/time.c:213 (discriminator 1)
   288bf:	83 4d e8 08          	or     DWORD PTR [ebp-0x18],0x8
/home/yogi/src/os/chrisOS/src/time.c:214
  seconds += day * SECS_DAY;
   288c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   288c6:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
   288cc:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/time.c:217

  // Now adjust according to timezone and daylight saving time
  if (((kTimeZone > 0) && (TIME_MAX - kTimeZone < seconds)) || 
   288cf:	a1 d0 97 12 00       	mov    eax,ds:0x1297d0
   288d4:	85 c0                	test   eax,eax
   288d6:	7e 13                	jle    288eb <mktime+0x7d4>
/home/yogi/src/os/chrisOS/src/time.c:217 (discriminator 1)
   288d8:	a1 d0 97 12 00       	mov    eax,ds:0x1297d0
   288dd:	ba ff ff ff 7f       	mov    edx,0x7fffffff
   288e2:	29 c2                	sub    edx,eax
   288e4:	89 d0                	mov    eax,edx
   288e6:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   288e9:	7c 15                	jl     28900 <mktime+0x7e9>
/home/yogi/src/os/chrisOS/src/time.c:218 (discriminator 3)
      ((kTimeZone < 0) && (seconds < -kTimeZone))) {
   288eb:	a1 d0 97 12 00       	mov    eax,ds:0x1297d0
/home/yogi/src/os/chrisOS/src/time.c:217 (discriminator 3)

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
  seconds += day * SECS_DAY;

  // Now adjust according to timezone and daylight saving time
  if (((kTimeZone > 0) && (TIME_MAX - kTimeZone < seconds)) || 
   288f0:	85 c0                	test   eax,eax
   288f2:	79 10                	jns    28904 <mktime+0x7ed>
/home/yogi/src/os/chrisOS/src/time.c:218
      ((kTimeZone < 0) && (seconds < -kTimeZone))) {
   288f4:	a1 d0 97 12 00       	mov    eax,ds:0x1297d0
   288f9:	f7 d8                	neg    eax
   288fb:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   288fe:	7e 04                	jle    28904 <mktime+0x7ed>
/home/yogi/src/os/chrisOS/src/time.c:219
          overflow|=16;
   28900:	83 4d e8 10          	or     DWORD PTR [ebp-0x18],0x10
/home/yogi/src/os/chrisOS/src/time.c:221
  }
  seconds += kTimeZone;
   28904:	a1 d0 97 12 00       	mov    eax,ds:0x1297d0
   28909:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/time.c:223

  if (tmbuf->tm_isdst) {
   2890c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2890f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   28912:	85 c0                	test   eax,eax
   28914:	74 0a                	je     28920 <mktime+0x809>
/home/yogi/src/os/chrisOS/src/time.c:224
    dst = _dstbias;
   28916:	a1 68 99 12 00       	mov    eax,ds:0x129968
   2891b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
   2891e:	eb 07                	jmp    28927 <mktime+0x810>
/home/yogi/src/os/chrisOS/src/time.c:226
  } else {
    dst = 0;
   28920:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/time.c:229
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
   28927:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   2892a:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   2892d:	7e 04                	jle    28933 <mktime+0x81c>
/home/yogi/src/os/chrisOS/src/time.c:229 (discriminator 1)
   2892f:	83 4d e8 20          	or     DWORD PTR [ebp-0x18],0x20
/home/yogi/src/os/chrisOS/src/time.c:230
  seconds -= dst;
   28933:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   28936:	29 45 dc             	sub    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/time.c:232

  if (overflow) return (time_t) overflow-2;
   28939:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   2893d:	74 08                	je     28947 <mktime+0x830>
/home/yogi/src/os/chrisOS/src/time.c:232 (discriminator 1)
   2893f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   28942:	83 e8 02             	sub    eax,0x2
   28945:	eb 03                	jmp    2894a <mktime+0x833>
/home/yogi/src/os/chrisOS/src/time.c:235

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
   28947:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
/home/yogi/src/os/chrisOS/src/time.c:236
}
   2894a:	83 c4 20             	add    esp,0x20
   2894d:	5b                   	pop    ebx
   2894e:	5e                   	pop    esi
   2894f:	5d                   	pop    ebp
   28950:	c3                   	ret    

00028951 <_strdate>:
_strdate():
/home/yogi/src/os/chrisOS/src/time.c:241

#if !defined(KERNEL) && !defined(OS_LIB)


char *_strdate(char *s) {
   28951:	55                   	push   ebp
   28952:	89 e5                	mov    ebp,esp
   28954:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/time.c:244
  time_t now;

  time(&now);
   28957:	8d 45 fc             	lea    eax,[ebp-0x4]
   2895a:	50                   	push   eax
   2895b:	e8 48 f4 ff ff       	call   27da8 <time>
   28960:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/time.c:247
  //fix me!
  //  strftime(s, 9, "%D", localtime(&now));
  return s;
   28963:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/time.c:248
}
   28966:	c9                   	leave  
   28967:	c3                   	ret    

00028968 <_strtime>:
_strtime():
/home/yogi/src/os/chrisOS/src/time.c:250

char *_strtime(char *s) {
   28968:	55                   	push   ebp
   28969:	89 e5                	mov    ebp,esp
   2896b:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/time.c:253
  time_t now;

  time(&now);
   2896e:	8d 45 fc             	lea    eax,[ebp-0x4]
   28971:	50                   	push   eax
   28972:	e8 31 f4 ff ff       	call   27da8 <time>
   28977:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/time.c:256
  //fix me
  //  strftime(s, 9, "%T", localtime(&now));
  return s;
   2897a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/time.c:257
}
   2897d:	c9                   	leave  
   2897e:	c3                   	ret    

0002897f <waitTicks>:
waitTicks():
/home/yogi/src/os/chrisOS/src/time.c:260

void __attribute__((noinline))waitTicks(int TicksToWait)
{
   2897f:	55                   	push   ebp
   28980:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/time.c:262
    //printf("ttw=%u",ttw);
    if (TicksToWait==0)
   28982:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   28986:	74 0f                	je     28997 <waitTicks+0x18>
/home/yogi/src/os/chrisOS/src/time.c:267 (discriminator 1)
        return;
    //printd(DEBUG_TIMER,"ttw=%08X", TicksToWait);
    do
    {
        __asm("sti\nhlt\n");
   28988:	fb                   	sti    
   28989:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/time.c:268 (discriminator 1)
        TicksToWait--;
   2898a:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/time.c:269 (discriminator 1)
    } while (TicksToWait>0);
   2898e:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   28992:	7f f4                	jg     28988 <waitTicks+0x9>
/home/yogi/src/os/chrisOS/src/time.c:270 (discriminator 2)
    return;
   28994:	90                   	nop
   28995:	eb 01                	jmp    28998 <waitTicks+0x19>
/home/yogi/src/os/chrisOS/src/time.c:263

void __attribute__((noinline))waitTicks(int TicksToWait)
{
    //printf("ttw=%u",ttw);
    if (TicksToWait==0)
        return;
   28997:	90                   	nop
/home/yogi/src/os/chrisOS/src/time.c:271
    {
        __asm("sti\nhlt\n");
        TicksToWait--;
    } while (TicksToWait>0);
    return;
}
   28998:	5d                   	pop    ebp
   28999:	c3                   	ret    

0002899a <wait>:
wait():
/home/yogi/src/os/chrisOS/src/time.c:274

void /*__attribute__((noinline))*/wait(int msToWait)
{
   2899a:	55                   	push   ebp
   2899b:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/time.c:277
    //printk("msToWait=%u, ticksperms=%u, ticksToWait=%u",msToWait, kTicksPerMS, msToWait*kTicksPerMS);
    //STOPHERE2
    waitTicks(msToWait/kTicksPerMS);
   2899d:	8b 0d c4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297c4
   289a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   289a6:	99                   	cdq    
   289a7:	f7 f9                	idiv   ecx
   289a9:	50                   	push   eax
   289aa:	e8 d0 ff ff ff       	call   2897f <waitTicks>
   289af:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/time.c:278
}
   289b2:	90                   	nop
   289b3:	c9                   	leave  
   289b4:	c3                   	ret    

000289b5 <wait3>:
wait3():
/home/yogi/src/os/chrisOS/src/time.c:281

void wait3(double msToWait)
{
   289b5:	55                   	push   ebp
   289b6:	89 e5                	mov    ebp,esp
   289b8:	83 ec 28             	sub    esp,0x28
   289bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   289be:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   289c1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   289c4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/time.c:282
volatile double endTicks = (double)*kTicksSinceStart + msToWait/ (1000/kTicksPerSecond);
   289c7:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   289cc:	8b 00                	mov    eax,DWORD PTR [eax]
   289ce:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   289d1:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   289d8:	df 6d d8             	fild   QWORD PTR [ebp-0x28]
   289db:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   289de:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   289e1:	dd 45 e8             	fld    QWORD PTR [ebp-0x18]
   289e4:	8b 0d c0 97 12 00    	mov    ecx,DWORD PTR ds:0x1297c0
   289ea:	b8 e8 03 00 00       	mov    eax,0x3e8
   289ef:	ba 00 00 00 00       	mov    edx,0x0
   289f4:	f7 f1                	div    ecx
   289f6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   289f9:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   28a00:	df 6d d8             	fild   QWORD PTR [ebp-0x28]
   28a03:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   28a06:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   28a09:	de f9                	fdivp  st(1),st
   28a0b:	de c1                	faddp  st(1),st
   28a0d:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   28a10:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   28a13:	dd 5d f8             	fstp   QWORD PTR [ebp-0x8]
/home/yogi/src/os/chrisOS/src/time.c:284

while (endTicks > (double)*kTicksSinceStart)
   28a16:	eb 02                	jmp    28a1a <wait3+0x65>
/home/yogi/src/os/chrisOS/src/time.c:285
    {__asm__("sti\n hlt\n");}
   28a18:	fb                   	sti    
   28a19:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/time.c:284

void wait3(double msToWait)
{
volatile double endTicks = (double)*kTicksSinceStart + msToWait/ (1000/kTicksPerSecond);

while (endTicks > (double)*kTicksSinceStart)
   28a1a:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   28a1f:	8b 00                	mov    eax,DWORD PTR [eax]
   28a21:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   28a24:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   28a2b:	df 6d d8             	fild   QWORD PTR [ebp-0x28]
   28a2e:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   28a31:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   28a34:	dd 45 f8             	fld    QWORD PTR [ebp-0x8]
   28a37:	df e9                	fucomip st,st(1)
   28a39:	dd d8                	fstp   st(0)
   28a3b:	77 db                	ja     28a18 <wait3+0x63>
/home/yogi/src/os/chrisOS/src/time.c:287
    {__asm__("sti\n hlt\n");}
    
}
   28a3d:	90                   	nop
   28a3e:	c9                   	leave  
   28a3f:	c3                   	ret    

00028a40 <wait2>:
wait2():
/home/yogi/src/os/chrisOS/src/time.c:290

void wait2(unsigned msToWait)
{
   28a40:	55                   	push   ebp
   28a41:	89 e5                	mov    ebp,esp
   28a43:	53                   	push   ebx
   28a44:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/time.c:291
    uint64_t startTicks = *kTicksSinceStart;             //25
   28a47:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   28a4c:	8b 00                	mov    eax,DWORD PTR [eax]
   28a4e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   28a51:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/time.c:292
    unsigned msPerTick = 1000 / kTicksPerSecond;         //18
   28a58:	8b 1d c0 97 12 00    	mov    ebx,DWORD PTR ds:0x1297c0
   28a5e:	b8 e8 03 00 00       	mov    eax,0x3e8
   28a63:	ba 00 00 00 00       	mov    edx,0x0
   28a68:	f7 f3                	div    ebx
   28a6a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/time.c:293
    uint64_t totalTicksToWait = msToWait/msPerTick;     //4321/18
   28a6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28a70:	ba 00 00 00 00       	mov    edx,0x0
   28a75:	f7 75 ec             	div    DWORD PTR [ebp-0x14]
   28a78:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
   28a7b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/time.c:294
    uint64_t endTicks = startTicks + totalTicksToWait;
   28a82:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   28a85:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
   28a88:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   28a8b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   28a8e:	01 c8                	add    eax,ecx
   28a90:	11 da                	adc    edx,ebx
   28a92:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   28a95:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
/home/yogi/src/os/chrisOS/src/time.c:296

    if (endTicks < *kTicksSinceStart)
   28a98:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   28a9d:	8b 00                	mov    eax,DWORD PTR [eax]
   28a9f:	ba 00 00 00 00       	mov    edx,0x0
   28aa4:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   28aa7:	72 0d                	jb     28ab6 <wait2+0x76>
   28aa9:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   28aac:	77 25                	ja     28ad3 <wait2+0x93>
   28aae:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
   28ab1:	77 20                	ja     28ad3 <wait2+0x93>
/home/yogi/src/os/chrisOS/src/time.c:304
    //waitTicks(totalTicksToWait);
    //return;
    //printf("Waiting %u, ticks since start=%u  ms", msToWait, kTicksSinceStart);
    //printf ("startTicks=%u, msPerTick=%u, totalTicksToWait=%u, endTicks=%u, kTicksSinceStart=%u", startTicks, msPerTick, totalTicksToWait, endTicks, kTicksSinceStart);
    //printf("\nStart waiting ... endTicks=%u, kTicksSinceStart=%u\n",endTicks, kTicksSinceStart);
    while (endTicks > *kTicksSinceStart)
   28ab3:	eb 01                	jmp    28ab6 <wait2+0x76>
/home/yogi/src/os/chrisOS/src/time.c:305
    {__asm__("hlt\n");}
   28ab5:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/time.c:304
    //waitTicks(totalTicksToWait);
    //return;
    //printf("Waiting %u, ticks since start=%u  ms", msToWait, kTicksSinceStart);
    //printf ("startTicks=%u, msPerTick=%u, totalTicksToWait=%u, endTicks=%u, kTicksSinceStart=%u", startTicks, msPerTick, totalTicksToWait, endTicks, kTicksSinceStart);
    //printf("\nStart waiting ... endTicks=%u, kTicksSinceStart=%u\n",endTicks, kTicksSinceStart);
    while (endTicks > *kTicksSinceStart)
   28ab6:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
   28abb:	8b 00                	mov    eax,DWORD PTR [eax]
   28abd:	ba 00 00 00 00       	mov    edx,0x0
   28ac2:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   28ac5:	72 ee                	jb     28ab5 <wait2+0x75>
   28ac7:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   28aca:	77 08                	ja     28ad4 <wait2+0x94>
   28acc:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
   28acf:	72 e4                	jb     28ab5 <wait2+0x75>
   28ad1:	eb 01                	jmp    28ad4 <wait2+0x94>
/home/yogi/src/os/chrisOS/src/time.c:297
    unsigned msPerTick = 1000 / kTicksPerSecond;         //18
    uint64_t totalTicksToWait = msToWait/msPerTick;     //4321/18
    uint64_t endTicks = startTicks + totalTicksToWait;

    if (endTicks < *kTicksSinceStart)
        return;
   28ad3:	90                   	nop
/home/yogi/src/os/chrisOS/src/time.c:307
    //printf ("startTicks=%u, msPerTick=%u, totalTicksToWait=%u, endTicks=%u, kTicksSinceStart=%u", startTicks, msPerTick, totalTicksToWait, endTicks, kTicksSinceStart);
    //printf("\nStart waiting ... endTicks=%u, kTicksSinceStart=%u\n",endTicks, kTicksSinceStart);
    while (endTicks > *kTicksSinceStart)
    {__asm__("hlt\n");}
    //printf("done waiting!\n");
}
   28ad4:	83 c4 24             	add    esp,0x24
   28ad7:	5b                   	pop    ebx
   28ad8:	5d                   	pop    ebp
   28ad9:	c3                   	ret    
   28ada:	66 90                	xchg   ax,ax
   28adc:	66 90                	xchg   ax,ax
   28ade:	66 90                	xchg   ax,ax

00028ae0 <__udivdi3>:
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1287
#endif

#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
   28ae0:	55                   	push   ebp
   28ae1:	57                   	push   edi
   28ae2:	56                   	push   esi
   28ae3:	53                   	push   ebx
   28ae4:	83 ec 1c             	sub    esp,0x1c
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1014
#endif
UDWtype
__udivmoddi4 (UDWtype n, UDWtype d, UDWtype *rp)
{
  const DWunion nn = {.ll = n};
  const DWunion dd = {.ll = d};
   28ae7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1287
#endif

#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
   28aeb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
   28aef:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
   28af3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1026
  d1 = dd.s.high;
  n0 = nn.s.low;
  n1 = nn.s.high;

#if !UDIV_NEEDS_NORMALIZATION
  if (d1 == 0)
   28af7:	85 f6                	test   esi,esi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1013
static inline __attribute__ ((__always_inline__))
#endif
UDWtype
__udivmoddi4 (UDWtype n, UDWtype d, UDWtype *rp)
{
  const DWunion nn = {.ll = n};
   28af9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
   28afd:	89 ca                	mov    edx,ecx
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1014
  const DWunion dd = {.ll = d};
   28aff:	89 f8                	mov    eax,edi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1026
  d1 = dd.s.high;
  n0 = nn.s.low;
  n1 = nn.s.high;

#if !UDIV_NEEDS_NORMALIZATION
  if (d1 == 0)
   28b01:	75 3d                	jne    28b40 <__udivdi3+0x60>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1028
    {
      if (d0 > n1)
   28b03:	39 cf                	cmp    edi,ecx
   28b05:	0f 87 c5 00 00 00    	ja     28bd0 <__udivdi3+0xf0>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1041
	}
      else
	{
	  /* qq = NN / 0d */

	  if (d0 == 0)
   28b0b:	85 ff                	test   edi,edi
   28b0d:	89 fd                	mov    ebp,edi
   28b0f:	75 0b                	jne    28b1c <__udivdi3+0x3c>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1042
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */
   28b11:	b8 01 00 00 00       	mov    eax,0x1
   28b16:	31 d2                	xor    edx,edx
   28b18:	f7 f7                	div    edi
   28b1a:	89 c5                	mov    ebp,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1044

	  udiv_qrnnd (q1, n1, 0, n1, d0);
   28b1c:	89 c8                	mov    eax,ecx
   28b1e:	31 d2                	xor    edx,edx
   28b20:	f7 f5                	div    ebp
   28b22:	89 c1                	mov    ecx,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1045
	  udiv_qrnnd (q0, n0, n1, n0, d0);
   28b24:	89 d8                	mov    eax,ebx
   28b26:	89 cf                	mov    edi,ecx
   28b28:	f7 f5                	div    ebp
   28b2a:	89 c3                	mov    ebx,eax
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   28b2c:	89 d8                	mov    eax,ebx
   28b2e:	89 fa                	mov    edx,edi
   28b30:	83 c4 1c             	add    esp,0x1c
   28b33:	5b                   	pop    ebx
   28b34:	5e                   	pop    esi
   28b35:	5f                   	pop    edi
   28b36:	5d                   	pop    ebp
   28b37:	c3                   	ret    
   28b38:	90                   	nop
   28b39:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1136
    }
#endif /* UDIV_NEEDS_NORMALIZATION */

  else
    {
      if (d1 > n1)
   28b40:	39 ce                	cmp    esi,ecx
   28b42:	77 74                	ja     28bb8 <__udivdi3+0xd8>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1155
	}
      else
	{
	  /* 0q = NN / dd */

	  count_leading_zeros (bm, d1);
   28b44:	0f bd fe             	bsr    edi,esi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1156
	  if (bm == 0)
   28b47:	83 f7 1f             	xor    edi,0x1f
   28b4a:	0f 84 98 00 00 00    	je     28be8 <__udivdi3+0x108>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1188
	  else
	    {
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;
   28b50:	bb 20 00 00 00       	mov    ebx,0x20
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1190

	      d1 = (d1 << bm) | (d0 >> b);
   28b55:	89 f9                	mov    ecx,edi
   28b57:	89 c5                	mov    ebp,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1188
	  else
	    {
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;
   28b59:	29 fb                	sub    ebx,edi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1190

	      d1 = (d1 << bm) | (d0 >> b);
   28b5b:	d3 e6                	shl    esi,cl
   28b5d:	89 d9                	mov    ecx,ebx
   28b5f:	d3 ed                	shr    ebp,cl
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1191
	      d0 = d0 << bm;
   28b61:	89 f9                	mov    ecx,edi
   28b63:	d3 e0                	shl    eax,cl
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1190
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
   28b65:	09 ee                	or     esi,ebp
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1192
	      d0 = d0 << bm;
	      n2 = n1 >> b;
   28b67:	89 d9                	mov    ecx,ebx
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1191
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
	      d0 = d0 << bm;
   28b69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1192
	      n2 = n1 >> b;
   28b6d:	89 d5                	mov    ebp,edx
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1193
	      n1 = (n1 << bm) | (n0 >> b);
   28b6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1192

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
	      d0 = d0 << bm;
	      n2 = n1 >> b;
   28b73:	d3 ed                	shr    ebp,cl
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1193
	      n1 = (n1 << bm) | (n0 >> b);
   28b75:	89 f9                	mov    ecx,edi
   28b77:	d3 e2                	shl    edx,cl
   28b79:	89 d9                	mov    ecx,ebx
   28b7b:	d3 e8                	shr    eax,cl
   28b7d:	09 c2                	or     edx,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1196
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
   28b7f:	89 d0                	mov    eax,edx
   28b81:	89 ea                	mov    edx,ebp
   28b83:	f7 f6                	div    esi
   28b85:	89 d5                	mov    ebp,edx
   28b87:	89 c3                	mov    ebx,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1197
	      umul_ppmm (m1, m0, q0, d0);
   28b89:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1199

	      if (m1 > n1 || (m1 == n1 && m0 > n0))
   28b8d:	39 d5                	cmp    ebp,edx
   28b8f:	72 10                	jb     28ba1 <__udivdi3+0xc1>
   28b91:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
   28b95:	89 f9                	mov    ecx,edi
   28b97:	d3 e6                	shl    esi,cl
   28b99:	39 c6                	cmp    esi,eax
   28b9b:	73 07                	jae    28ba4 <__udivdi3+0xc4>
   28b9d:	39 d5                	cmp    ebp,edx
   28b9f:	75 03                	jne    28ba4 <__udivdi3+0xc4>
   28ba1:	83 eb 01             	sub    ebx,0x1
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1202
		{
		  q0--;
		  sub_ddmmss (m1, m0, m1, m0, d1, d0);
   28ba4:	31 ff                	xor    edi,edi
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   28ba6:	89 d8                	mov    eax,ebx
   28ba8:	89 fa                	mov    edx,edi
   28baa:	83 c4 1c             	add    esp,0x1c
   28bad:	5b                   	pop    ebx
   28bae:	5e                   	pop    esi
   28baf:	5f                   	pop    edi
   28bb0:	5d                   	pop    ebp
   28bb1:	c3                   	ret    
   28bb2:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1136
    }
#endif /* UDIV_NEEDS_NORMALIZATION */

  else
    {
      if (d1 > n1)
   28bb8:	31 ff                	xor    edi,edi
   28bba:	31 db                	xor    ebx,ebx
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   28bbc:	89 d8                	mov    eax,ebx
   28bbe:	89 fa                	mov    edx,edi
   28bc0:	83 c4 1c             	add    esp,0x1c
   28bc3:	5b                   	pop    ebx
   28bc4:	5e                   	pop    esi
   28bc5:	5f                   	pop    edi
   28bc6:	5d                   	pop    ebp
   28bc7:	c3                   	ret    
   28bc8:	90                   	nop
   28bc9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1032
    {
      if (d0 > n1)
	{
	  /* 0q = nn / 0D */

	  udiv_qrnnd (q0, n0, n1, n0, d0);
   28bd0:	89 d8                	mov    eax,ebx
   28bd2:	f7 f7                	div    edi
   28bd4:	31 ff                	xor    edi,edi
   28bd6:	89 c3                	mov    ebx,eax
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   28bd8:	89 d8                	mov    eax,ebx
   28bda:	89 fa                	mov    edx,edi
   28bdc:	83 c4 1c             	add    esp,0x1c
   28bdf:	5b                   	pop    ebx
   28be0:	5e                   	pop    esi
   28be1:	5f                   	pop    edi
   28be2:	5d                   	pop    ebp
   28be3:	c3                   	ret    
   28be4:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1166

		 This special case is necessary, not an optimization.  */

	      /* The condition on the next line takes advantage of that
		 n1 >= d1 (true due to program flow).  */
	      if (n1 > d1 || n0 >= d0)
   28be8:	39 ce                	cmp    esi,ecx
   28bea:	72 0c                	jb     28bf8 <__udivdi3+0x118>
   28bec:	31 db                	xor    ebx,ebx
   28bee:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
   28bf2:	0f 87 34 ff ff ff    	ja     28b2c <__udivdi3+0x4c>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1169
		{
		  q0 = 1;
		  sub_ddmmss (n1, n0, n1, n0, d1, d0);
   28bf8:	bb 01 00 00 00       	mov    ebx,0x1
   28bfd:	e9 2a ff ff ff       	jmp    28b2c <__udivdi3+0x4c>
