
Debug/cross-Linux/chrisos:     file format elf32-i386


Disassembly of section .text:

00001000 <tos>:
tos():
/home/yogi/NetBeansProjects/chrisOS/asm/boot.s:15
.att_syntax noprefix
.code16
.globl tos
.type tos, @function
tos:
    ljmp $0,$tos3
    1000:	ea 05 10 00 00 e9 ca 	jmp    0xcae9:0x1005

00001005 <tos3>:
tos3():
/home/yogi/NetBeansProjects/chrisOS/asm/boot.s:18
tos3:
.code32
        jmp	initAP	# initialize awakened AP
    1005:	e9 ca 06 00 00       	jmp    16d4 <initAP>
    100a:	66 90                	xchg   ax,ax
    100c:	02 b0 ad 1b 03 00    	add    dh,BYTE PTR [eax+0x31bad]
    1012:	00 00                	add    BYTE PTR [eax],al
    1014:	fb                   	sti    
    1015:	4f                   	dec    edi
    1016:	52                   	push   edx
    1017:	e4 e8                	in     al,0xe8

00001018 <_start>:
_start():
/home/yogi/NetBeansProjects/chrisOS/asm/boot.s:84
        //mov %esp, stack_top

	# We are now ready to actually execute C code. We cannot embed that in an
	# assembly file, so we'll create a kernel.c file in a moment. In that file,
	# we'll create a C entry point called kernel_main and call it here.
	call kernel_main
    1018:	e8 fe 33 02 00       	call   2441b <kernel_main>
/home/yogi/NetBeansProjects/chrisOS/asm/boot.s:92
	# infinite loop. To do that, we use the clear interrupt ('cli') instruction
	# to disable interrupts, the halt instruction ('hlt') to stop the CPU until
	# the next interrupt arrives, and jumping to the halt instruction if it ever
	# continues execution, just to be safe. We will create a local label rather
	# than real symbol and jump to there endlessly.
	cli
    101d:	fa                   	cli    
/home/yogi/NetBeansProjects/chrisOS/asm/boot.s:93
	hlt
    101e:	f4                   	hlt    
/home/yogi/NetBeansProjects/chrisOS/asm/boot.s:95
.Lhang:
	jmp .Lhang
    101f:	eb fe                	jmp    101f <_start+0x7>
    1021:	66 90                	xchg   ax,ax
    1023:	66 90                	xchg   ax,ax
    1025:	66 90                	xchg   ax,ax
    1027:	90                   	nop

00001028 <isE820Available>:
isE820Available():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:11

.globl isE820Available
.type isE820Available, @function
isE820Available:
.code32
mov eax,0x10
    1028:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:12
mov ds,eax
    102d:	8e d8                	mov    ds,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:13
mov saveESP, esp
    102f:	89 25 c1 12 00 00    	mov    DWORD PTR ds:0x12c1,esp
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:14
mov sp, 0xfffc
    1035:	66 bc fc ff          	mov    sp,0xfffc
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:15
call leaveProtMode
    1039:	e8 67 00 00 00       	call   10a5 <leaveProtMode>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:17
.code16
mov ax, 0x8000
    103e:	b8 00 80 8e d0       	mov    eax,0xd08e8000
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:19
mov ss, ax
pusha
    1043:	60                   	pusha  
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:20
mov eax,0x0000E820
    1044:	66 b8 20 e8          	mov    ax,0xe820
    1048:	00 00                	add    BYTE PTR [eax],al
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:21
mov edx, 0x534D4150
    104a:	66 ba 50 41          	mov    dx,0x4150
    104e:	4d                   	dec    ebp
    104f:	53                   	push   ebx
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:22
mov ebx, 0
    1050:	66 bb 00 00          	mov    bx,0x0
    1054:	00 00                	add    BYTE PTR [eax],al
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:23
mov ecx, 100
    1056:	66 b9 64 00          	mov    cx,0x64
    105a:	00 00                	add    BYTE PTR [eax],al
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:24
lea di, e820data
    105c:	8d 3e                	lea    edi,[esi]
    105e:	dd 12                	fst    QWORD PTR [edx]
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:25
int 0x15
    1060:	cd 15                	int    0x15
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:26
mov savedValue, eax
    1062:	66 a3 c5 12 61 e8    	mov    ds:0xe86112c5,ax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:29
popa
.code32
call reenterProtMode
    1068:	83 00 00             	add    DWORD PTR [eax],0x0
    106b:	00 c3                	add    bl,al

0000106d <getInt12Memory>:
getInt12Memory():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:37

.globl getInt12Memory
.type getInt12Memory, @function
getInt12Memory:
.code32
mov eax,0x10
    106d:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:38
mov ds,eax
    1072:	8e d8                	mov    ds,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:39
mov saveESP, esp
    1074:	89 25 c1 12 00 00    	mov    DWORD PTR ds:0x12c1,esp
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:40
mov sp, 0xfffc
    107a:	66 bc fc ff          	mov    sp,0xfffc
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:41
call leaveProtMode
    107e:	e8 22 00 00 00       	call   10a5 <leaveProtMode>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:43
.code16
mov ax, 0x8000
    1083:	b8 00 80 8e d0       	mov    eax,0xd08e8000
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:45
mov ss, ax
int 0x12
    1088:	cd 12                	int    0x12
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:46
movzx edx,ax
    108a:	66 0f b7 d0          	movzx  dx,ax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:47
mov savedValue, edx
    108e:	66 89 16             	mov    WORD PTR [esi],dx
    1091:	c5 12                	lds    edx,FWORD PTR [edx]
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:48
mov ax, 0x1112    
    1093:	b8 12 11 30 db       	mov    eax,0xdb301112
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:50
xor bl, bl    
int 0x10 
    1098:	cd 10                	int    0x10
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:52
.code32
call reenterProtMode
    109a:	e8 50 00 00 00       	call   10ef <reenterProtMode>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:53
ret
    109f:	c3                   	ret    
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:54
jmp hang
    10a0:	e9 b6 00 00 00       	jmp    115b <hang>

000010a5 <leaveProtMode>:
leaveProtMode():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:60
//background, do on team, etc.
.globl leaveProtMode
.type leaveProtMode, @function
leaveProtMode:
.code32
lgdt [rmGdtp]
    10a5:	0f 01 15 3c 04 a0 00 	lgdtd  ds:0xa0043c
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:61
jmp 0x8:Into16BitProt
    10ac:	ea b3 10 00 00 08 00 	jmp    0x8:0x10b3

000010b3 <Into16BitProt>:
Into16BitProt():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:64
Into16BitProt:
.code16
mov ax,0x10
    10b3:	b8 10 00 8e d8       	mov    eax,0xd88e0010
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:66
mov ds, ax
mov gs, ax
    10b8:	8e e8                	mov    gs,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:67
mov fs, ax
    10ba:	8e e0                	mov    fs,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:68
mov es, ax
    10bc:	8e c0                	mov    es,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:70
.code32
mov eax, cr0
    10be:	0f 20 c0             	mov    eax,cr0
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:71
and al, 0xFe
    10c1:	24 fe                	and    al,0xfe
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:72
mov cr0, eax
    10c3:	0f 22 c0             	mov    cr0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:74
.code32
jmp 0:LeaveProtModeJmp
    10c6:	ea cd 10 00 00 00 00 	jmp    0x0:0x10cd

000010cd <LeaveProtModeJmp>:
LeaveProtModeJmp():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:77
LeaveProtModeJmp:
.code16
mov ax, 0
    10cd:	b8 00 00 8e d8       	mov    eax,0xd88e0000
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:79
mov ds, ax
mov es, ax
    10d2:	8e c0                	mov    es,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:80
mov fs, ax
    10d4:	8e e0                	mov    fs,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:81
mov gs, ax
    10d6:	8e e8                	mov    gs,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:82
sidt [saved_idt]
    10d8:	0f 01 0e             	sidtd  [esi]
    10db:	d7                   	xlat   BYTE PTR ds:[ebx]
    10dc:	12 0f                	adc    cl,BYTE PTR [edi]
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:83
lidt [idt_real]
    10de:	01 1e                	add    DWORD PTR [esi],ebx
    10e0:	cf                   	iret   
    10e1:	12 0f                	adc    cl,BYTE PTR [edi]
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:84
sgdt [saved_gdt16_lo]
    10e3:	01 06                	add    DWORD PTR [esi],eax
    10e5:	bb 12 b8 00 00       	mov    ebx,0xb812
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:87
.code16
mov ax,0
mov ss,ax
    10ea:	8e d0                	mov    ss,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:88
mov ds, ax
    10ec:	8e d8                	mov    ds,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:90
.code32
ret
    10ee:	c3                   	ret    

000010ef <reenterProtMode>:
reenterProtMode():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:96

.globl reenterProtMode
.type reenterProtMode, @function
reenterProtMode:
.code16
lgdt [saved_gdt16_lo]
    10ef:	0f 01 16             	lgdtd  [esi]
    10f2:	bb 12 0f 01 1e       	mov    ebx,0x1e010f12
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:97
lidt [saved_idt]
    10f7:	d7                   	xlat   BYTE PTR ds:[ebx]
    10f8:	12 0f                	adc    cl,BYTE PTR [edi]
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:99
.code32
mov eax, cr0
    10fa:	20 c0                	and    al,al
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:100
or  al, 0x1
    10fc:	0c 01                	or     al,0x1
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:102
.code16
or  eax,0x10000   #clr 05/12/2016 - added wp bit
    10fe:	66 0d 00 00          	or     ax,0x0
    1102:	01 00                	add    DWORD PTR [eax],eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:104
.code32
mov cr0, eax
    1104:	0f 22 c0             	mov    cr0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:106
.code16
ljmp 0x18:reenterProtModeJmp
    1107:	ea 0c 11 18 00 66 b8 	jmp    0xb866:0x18110c

0000110c <reenterProtModeJmp>:
reenterProtModeJmp():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:109
reenterProtModeJmp:
.code32
mov ax,0x10
    110c:	66 b8 10 00          	mov    ax,0x10
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:110
mov ds,ax
    1110:	8e d8                	mov    ds,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:111
mov es,ax
    1112:	8e c0                	mov    es,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:112
mov gs,ax
    1114:	8e e8                	mov    gs,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:113
lgdt [gdtp]
    1116:	0f 01 15 4c 04 a0 00 	lgdtd  ds:0xa0044c
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:114
ljmp 0x8:reenterProtMode32Jmp
    111d:	ea 24 11 00 00 08 00 	jmp    0x8:0x1124

00001124 <reenterProtMode32Jmp>:
reenterProtMode32Jmp():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:117
reenterProtMode32Jmp:
.code16
mov ax,0x10
    1124:	b8 10 00 8e d8       	mov    eax,0xd88e0010
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:119
mov ds,ax
mov ss,ax
    1129:	8e d0                	mov    ss,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:120
mov es,ax
    112b:	8e c0                	mov    es,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:121
mov fs,ax
    112d:	8e e0                	mov    fs,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:122
mov gs,ax
    112f:	8e e8                	mov    gs,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:124
.code32
mov eax,savedValue
    1131:	a1 c5 12 00 00       	mov    eax,ds:0x12c5
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:125
mov esp,saveESP
    1136:	8b 25 c1 12 00 00    	mov    esp,DWORD PTR ds:0x12c1
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:126
ret
    113c:	c3                   	ret    

0000113d <set_gdt>:
set_gdt():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:132

.globl set_gdt
.type set_gdt, @function
set_gdt:
.code32
push eax
    113d:	50                   	push   eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:133
    mov eax, [esp + 0x8]
    113e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:134
    lgdt [eax]
    1142:	0f 01 10             	lgdtd  [eax]
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:135
    pop eax
    1145:	58                   	pop    eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:136
    jmp 0x08:.reload_CS
    1146:	ea 4d 11 00 00 08 00 	jmp    0x8:0x114d

0000114d <.reload_CS>:
.reload_CS():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:139
.reload_CS:
.code16
    mov ax, 0x10
    114d:	b8 10 00 8e d8       	mov    eax,0xd88e0010
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:141
    mov ds, ax
    mov es, ax
    1152:	8e c0                	mov    es,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:142
    mov fs, ax
    1154:	8e e0                	mov    fs,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:143
    mov gs, ax
    1156:	8e e8                	mov    gs,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:144
    mov ss, ax
    1158:	8e d0                	mov    ss,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:146
.code32
    ret
    115a:	c3                   	ret    

0000115b <hang>:
hang():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:148
hang:
    hlt
    115b:	f4                   	hlt    
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:149
    jmp hang
    115c:	eb fd                	jmp    115b <hang>

0000115e <idt_load>:
idt_load():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:156
// Loads the IDT defined in '_idtp' into the processor.
// This is declared in C as 'extern void idt_load();'
.globl idt_load
.type idt_load, @function
idt_load:
    push ebp
    115e:	55                   	push   ebp
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:157
    mov ebp, esp
    115f:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:158
    push eax
    1161:	50                   	push   eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:159
    push ebx
    1162:	53                   	push   ebx
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:160
    cli
    1163:	fa                   	cli    
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:161
    mov eax,[ebp+12]    #size + bottom of offset
    1164:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:162
    mov ebx,[ebp+8]     #top of offset
    1167:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:163
    ror eax,16          #mov the size out of the way
    116a:	c1 c8 10             	ror    eax,0x10
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:164
    mov ax,bx           #move the top of the address
    116d:	66 89 d8             	mov    ax,bx
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:165
    ror eax,16
    1170:	c1 c8 10             	ror    eax,0x10
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:166
    shr ebx,16
    1173:	c1 eb 10             	shr    ebx,0x10
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:167
    mov idtPtrToLoad,eax
    1176:	a3 47 15 00 00       	mov    ds:0x1547,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:168
    mov idtPtrToLoad+4,ebx
    117b:	89 1d 4b 15 00 00    	mov    DWORD PTR ds:0x154b,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:171
    //we always put our IDT in idtPtrToLoad before calling idt_load
//    mov eax, word ptr idtPtrToLoad
    lidt [idtPtrToLoad]
    1181:	0f 01 1d 47 15 00 00 	lidtd  ds:0x1547
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:172
    sti
    1188:	fb                   	sti    
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:173
    pop ebx
    1189:	5b                   	pop    ebx
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:174
    pop eax
    118a:	58                   	pop    eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:175
    pop ebp
    118b:	5d                   	pop    ebp
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:176
    ret
    118c:	c3                   	ret    

0000118d <init_PIT>:
init_PIT():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:182
 #Input
 # ebx   Desired PIT frequency in Hz
 .globl init_PIT
.type init_PIT, @function
init_PIT:
    push ebp
    118d:	55                   	push   ebp
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:183
    mov ebp, esp
    118e:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:185
    # Do some checking
    mov ebx,[ebp+8]
    1190:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:186
    pushad
    1193:	60                   	pusha  
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:187
    mov eax,0x10000                   #eax = reload value for slowest possible frequency (65536)
    1194:	b8 00 00 01 00       	mov    eax,0x10000
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:188
    cmp ebx,18                        #Is the requested frequency too low?
    1199:	83 fb 12             	cmp    ebx,0x12
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:189
    jbe .gotReloadValue               # yes, use slowest possible frequency
    119c:	76 34                	jbe    11d2 <.gotReloadValue>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:191
 
    mov eax,1                         #ax = reload value for fastest possible frequency (1)
    119e:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:192
    cmp ebx,1193181                   #Is the requested frequency too high?
    11a3:	81 fb dd 34 12 00    	cmp    ebx,0x1234dd
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:193
    jae .gotReloadValue               # yes, use fastest possible frequency
    11a9:	73 27                	jae    11d2 <.gotReloadValue>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:197
 
    # Calculate the reload value
 
    mov eax,3579545
    11ab:	b8 99 9e 36 00       	mov    eax,0x369e99
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:198
    mov edx,0                         #edx:eax = 3579545
    11b0:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:199
    div ebx                           #eax = 3579545 / frequency, edx = remainder
    11b5:	f7 f3                	div    ebx
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:200
    cmp edx,3579545 / 2               #Is the remainder more than half?
    11b7:	81 fa 4c 4f 1b 00    	cmp    edx,0x1b4f4c
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:201
    jb .l1                            # no, round down
    11bd:	72 01                	jb     11c0 <.l1>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:202
    inc eax                           # yes, round up
    11bf:	40                   	inc    eax

000011c0 <.l1>:
.l1():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:204
 .l1:
    mov ebx,3
    11c0:	bb 03 00 00 00       	mov    ebx,0x3
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:205
    mov edx,0                         #edx:eax = 3579545 * 256 / frequency
    11c5:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:206
    div ebx                           #eax = (3579545 * 256 / 3 * 256) / frequency
    11ca:	f7 f3                	div    ebx
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:207
    cmp edx,3 / 2                     #Is the remainder more than half?
    11cc:	83 fa 01             	cmp    edx,0x1
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:208
    jb .l2                            # no, round down
    11cf:	72 01                	jb     11d2 <.gotReloadValue>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:209
    inc eax                           # yes, round up
    11d1:	40                   	inc    eax

000011d2 <.gotReloadValue>:
.gotReloadValue():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:216
 
 
 # Store the reload value and calculate the actual frequency
 
 .gotReloadValue:
    push eax                          #Store reload_value for later
    11d2:	50                   	push   eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:217
    mov [PIT_reload_value],ax         #Store the reload value for later
    11d3:	66 a3 1f 13 00 00    	mov    ds:0x131f,ax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:218
    mov ebx,eax                       #ebx = reload value
    11d9:	89 c3                	mov    ebx,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:220
 
    mov eax,3579545
    11db:	b8 99 9e 36 00       	mov    eax,0x369e99
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:221
    mov edx,0                         #edx:eax = 3579545
    11e0:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:222
    div ebx                           #eax = 3579545 / reload_value, edx = remainder
    11e5:	f7 f3                	div    ebx
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:223
    cmp edx,3579545 / 2               #Is the remainder more than half?
    11e7:	81 fa 4c 4f 1b 00    	cmp    edx,0x1b4f4c
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:224
    jb .l3                            # no, round down
    11ed:	72 01                	jb     11f0 <.l3>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:225
    inc eax                           # yes, round up
    11ef:	40                   	inc    eax

000011f0 <.l3>:
.l3():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:227
 .l3:
    mov ebx,3
    11f0:	bb 03 00 00 00       	mov    ebx,0x3
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:228
    mov edx,0                         #edx:eax = 3579545 / reload_value
    11f5:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:229
    div ebx                           #eax = (3579545 / 3) / frequency
    11fa:	f7 f3                	div    ebx
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:230
    cmp edx,3 / 2                     #Is the remainder more than half?
    11fc:	83 fa 01             	cmp    edx,0x1
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:231
    jb .l4                            # no, round down
    11ff:	72 01                	jb     1202 <.l4>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:232
    inc eax                           # yes, round up
    1201:	40                   	inc    eax

00001202 <.l4>:
.l4():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:234
 .l4:
    mov [IRQ0_frequency],eax          #Store the actual frequency for displaying later
    1202:	a3 17 13 00 00       	mov    ds:0x1317,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:248
 #           time in ms = reload_value * 3000 / 3579545 * (2^42)/(2^42)
 #           time in ms = reload_value * 3000 * (2^42) / 3579545 / (2^42)
 #           time in ms * 2^32 = reload_value * 3000 * (2^42) / 3579545 / (2^42) * (2^32)
 #           time in ms * 2^32 = reload_value * 3000 * (2^42) / 3579545 / (2^10)
 
    pop ebx                           #ebx = reload_value
    1207:	5b                   	pop    ebx
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:249
    mov eax,0xDBB3A062                #eax = 3000 * (2^42) / 3579545
    1208:	b8 62 a0 b3 db       	mov    eax,0xdbb3a062
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:250
    mul ebx                           #edx:eax = reload_value * 3000 * (2^42) / 3579545
    120d:	f7 e3                	mul    ebx
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:251
    shrd eax,edx,10
    120f:	0f ac d0 0a          	shrd   eax,edx,0xa
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:252
    shr edx,10                        #edx:eax = reload_value * 3000 * (2^42) / 3579545 / (2^10)
    1213:	c1 ea 0a             	shr    edx,0xa
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:254
 
    mov [IRQ0_ms],edx                 #Set whole ms between IRQs
    1216:	89 15 0f 13 00 00    	mov    DWORD PTR ds:0x130f,edx
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:255
    mov [IRQ0_fractions],eax          #Set fractions of 1 ms between IRQs
    121c:	a3 07 13 00 00       	mov    ds:0x1307,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:260
 
 
 # Program the PIT channel
 
    pushfd
    1221:	9c                   	pushf  
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:261
    cli                               #Disabled interrupts (just in case)
    1222:	fa                   	cli    
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:263
 
    mov al,0b00110100                  #channel 0, lobyte/hibyte, rate generator
    1223:	b0 34                	mov    al,0x34
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:264
    out 0x43, al
    1225:	e6 43                	out    0x43,al
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:266
 
    mov ax,[PIT_reload_value]         #ax = 16 bit reload value
    1227:	66 a1 1f 13 00 00    	mov    ax,ds:0x131f
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:267
    out 0x40,al                       #Set low byte of PIT reload value
    122d:	e6 40                	out    0x40,al
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:268
    mov al,ah                         #ax = high 8 bits of reload value
    122f:	88 e0                	mov    al,ah
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:269
    out 0x40,al                       #Set high byte of PIT reload value
    1231:	e6 40                	out    0x40,al
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:271
 
    popfd
    1233:	9d                   	popf   
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:273
 
    popad
    1234:	61                   	popa   
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:274
    pop ebp
    1235:	5d                   	pop    ebp
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:275
    sti
    1236:	fb                   	sti    
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:276
    ret
    1237:	c3                   	ret    

00001238 <getE820Memory_asm>:
getE820Memory_asm():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:282

 .globl getE820Memory_asm
.type getE820Memory_asm, @function
getE820Memory_asm:
.code32
mov eax,0x10
    1238:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:283
mov ds,eax
    123d:	8e d8                	mov    ds,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:284
mov saveESP, esp
    123f:	89 25 c1 12 00 00    	mov    DWORD PTR ds:0x12c1,esp
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:285
mov sp, 0xfff7
    1245:	66 bc f7 ff          	mov    sp,0xfff7
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:286
call leaveProtMode
    1249:	e8 57 fe ff ff       	call   10a5 <leaveProtMode>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:287
pusha
    124e:	60                   	pusha  
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:289
.code16
lea eax, word ptr lowSmapTbl
    124f:	66 8d 06             	lea    ax,[esi]
    1252:	67 13 0f             	adc    ecx,DWORD PTR [bx]
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:291
.code32
movzx eax,ax
    1255:	b7 c0                	mov    bh,0xc0
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:292
mov lowSmapTablePtr,eax
    1257:	a3 5f 13 00 00       	mov    ds:0x135f,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:293
mov ax, 0
    125c:	66 b8 00 00          	mov    ax,0x0
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:294
mov es, ax
    1260:	8e c0                	mov    es,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:295
mov ebx, 0
    1262:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:297
.code16
lea edi, word ptr [lowSmapTbl]
    1267:	66 8d 3e             	lea    di,[esi]
    126a:	67 13 66 b8          	adc    esp,DWORD PTR [bp-0x48]

0000126c <getE820Memory_asm_getNext>:
.code32():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:300
.code32:
getE820Memory_asm_getNext:
mov eax, 0xe820
    126c:	66 b8 20 e8          	mov    ax,0xe820
    1270:	00 00                	add    BYTE PTR [eax],al
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:301
mov edx, 0x534D4150
    1272:	66 ba 50 41          	mov    dx,0x4150
    1276:	4d                   	dec    ebp
    1277:	53                   	push   ebx
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:302
mov ecx, 0x24
    1278:	66 b9 24 00          	mov    cx,0x24
    127c:	00 00                	add    BYTE PTR [eax],al
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:303
int 0x15
    127e:	cd 15                	int    0x15
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:304
add edi,24
    1280:	66 83 c7 18          	add    di,0x18
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:305
cmp eax, 0x534D4150
    1284:	66 3d 50 41          	cmp    ax,0x4150
    1288:	4d                   	dec    ebp
    1289:	53                   	push   ebx
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:306
jne getE820Memory_asm_exit
    128a:	75 1c                	jne    12a8 <getE820Memory_asm_exit>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:307
cmp ecx,20
    128c:	66 83 f9 14          	cmp    cx,0x14
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:308
jl getE820Memory_asm_exit
    1290:	7c 16                	jl     12a8 <getE820Memory_asm_exit>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:309
push eax
    1292:	66 50                	push   ax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:310
mov eax,recCnt
    1294:	66 a1 cd 12 66 40    	mov    ax,ds:0x406612cd
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:312
inc eax
mov recCnt, eax
    129a:	66 a3 cd 12 66 58    	mov    ds:0x586612cd,ax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:314
pop eax
cmp ebx,0
    12a0:	66 83 fb 00          	cmp    bx,0x0
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:315
je  getE820Memory_asm_exit
    12a4:	74 02                	je     12a8 <getE820Memory_asm_exit>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:316
jmp getE820Memory_asm_getNext
    12a6:	eb c4                	jmp    126c <getE820Memory_asm_getNext>

000012a8 <getE820Memory_asm_exit>:
getE820Memory_asm_exit():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:318
getE820Memory_asm_exit:
mov eax,recCnt
    12a8:	66 a1 cd 12 66 a3    	mov    ax,ds:0xa36612cd
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:319
mov savedValue, eax
    12ae:	c5 12                	lds    edx,FWORD PTR [edx]
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:322


popa
    12b0:	61                   	popa   
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:323
mov eax, savedValue
    12b1:	66 a1 c5 12 e8 35    	mov    ax,ds:0x35e812c5
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:325
.code32
call reenterProtMode
    12b7:	fe                   	(bad)  
    12b8:	ff                   	(bad)  
    12b9:	ff c3                	inc    ebx

000012bb <saved_gdt16_lo>:
	...

000012bd <saved_gdt16_hi>:
	...

000012bf <saved_gdt16_hi2>:
	...

000012c1 <saveESP>:
saveESP():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:326
ret
    12c1:	00 00                	add    BYTE PTR [eax],al
	...

000012c5 <savedValue>:
	...

000012cd <recCnt>:
	...

000012cf <idt_real>:
idt_real():
    12cf:	ff 03                	inc    DWORD PTR [ebx]
    12d1:	00 00                	add    BYTE PTR [eax],al
	...

000012d5 <retVal>:
	...

000012d7 <saved_idt>:
saved_idt():
    12d7:	00 00                	add    BYTE PTR [eax],al
    12d9:	00 00                	add    BYTE PTR [eax],al
	...

000012dd <e820data>:
	...

000012f7 <system_timer_fractions>:
	...

000012ff <system_timer_ms>:
	...

00001307 <IRQ0_fractions>:
	...

0000130f <IRQ0_ms>:
	...

00001317 <IRQ0_frequency>:
	...

0000131f <PIT_reload_value>:
PIT_reload_value():
    131f:	12 00                	adc    al,BYTE PTR [eax]
    1321:	00 00                	add    BYTE PTR [eax],al
    1323:	00 00                	add    BYTE PTR [eax],al
	...

00001327 <doPagingJump>:
doPagingJump():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:371
                         .word 0
 .globl doPagingJump
.type doPagingJump, @function
doPagingJump:
.code32
cli #turn off interrupts until we get the IDT fixed up
    1327:	fa                   	cli    
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:372
ljmp 0x20:pagingEnableJmp
    1328:	ea 2f 13 00 00 20 00 	jmp    0x20:0x132f

0000132f <pagingEnableJmp>:
pagingEnableJmp():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:374
pagingEnableJmp:
push eax
    132f:	50                   	push   eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:375
mov ax, 0x10
    1330:	66 b8 10 00          	mov    ax,0x10
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:376
mov ds, ax
    1334:	8e d8                	mov    ds,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:377
mov es, ax
    1336:	8e c0                	mov    es,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:378
mov gs, ax
    1338:	8e e8                	mov    gs,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:379
mov fs, ax
    133a:	8e e0                	mov    fs,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:380
pop eax
    133c:	58                   	pop    eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:381
ret
    133d:	c3                   	ret    

0000133e <doNonPagingJump>:
doNonPagingJump():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:385
 .globl doNonPagingJump
.type doNonPagingJump, @function
doNonPagingJump:
push eax
    133e:	50                   	push   eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:386
mov eax,cr0
    133f:	0f 20 c0             	mov    eax,cr0
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:387
and eax,0xEFFFFFFF
    1342:	25 ff ff ff ef       	and    eax,0xefffffff
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:388
mov cr0,eax
    1347:	0f 22 c0             	mov    cr0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:389
ljmp 0x28:pagingDisableJmp
    134a:	ea 51 13 00 00 28 00 	jmp    0x28:0x1351

00001351 <pagingDisableJmp>:
pagingDisableJmp():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:391
pagingDisableJmp:
mov ax, 0x18
    1351:	66 b8 18 00          	mov    ax,0x18
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:392
mov ds, ax
    1355:	8e d8                	mov    ds,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:393
mov es, ax
    1357:	8e c0                	mov    es,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:394
mov gs, ax
    1359:	8e e8                	mov    gs,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:395
mov fs, ax
    135b:	8e e0                	mov    fs,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:396
pop eax
    135d:	58                   	pop    eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:397
ret
    135e:	c3                   	ret    

0000135f <lowSmapTablePtr>:
	...

00001367 <lowSmapTbl>:
	...

00001547 <idtPtrToLoad>:
	...

0000154f <msg>:
msg():
    154f:	48                   	dec    eax
    1550:	65                   	gs
    1551:	6c                   	ins    BYTE PTR es:[edi],dx
    1552:	6c                   	ins    BYTE PTR es:[edi],dx
    1553:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1554:	20 66 72             	and    BYTE PTR [esi+0x72],ah
    1557:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1558:	6d                   	ins    DWORD PTR es:[edi],dx
    1559:	20 70 72             	and    BYTE PTR [eax+0x72],dh
    155c:	6f                   	outs   dx,DWORD PTR ds:[esi]
    155d:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
    1560:	73 6f                	jae    15d1 <AP_startup+0x1b>
    1562:	72 20                	jb     1584 <msg2+0xa>

00001563 <pid>:
pid():
    1563:	20 20                	and    BYTE PTR [eax],ah
    1565:	20 43 52             	and    BYTE PTR [ebx+0x52],al
    1568:	30 3d 78 78 78 78    	xor    BYTE PTR ds:0x78787878,bh

0000156a <msw>:
msw():
    156a:	78 78                	js     15e4 <broadcast_AP_startup+0xb>
    156c:	78 78                	js     15e6 <broadcast_AP_startup+0xd>
    156e:	78 78                	js     15e8 <broadcast_AP_startup+0xf>
    1570:	78 78                	js     15ea <broadcast_AP_startup+0x11>
    1572:	20 0a                	and    BYTE PTR [edx],cl
    1574:	0d 26 00 00 00       	or     eax,0x26

00001575 <len>:
len():
    1575:	26 00 00             	add    BYTE PTR es:[eax],al
	...

00001579 <att>:
att():
    1579:	0b 57 61             	or     edx,DWORD PTR [edi+0x61]

0000157a <msg2>:
msg2():
    157a:	57                   	push   edi
    157b:	61                   	popa   
    157c:	6b 69 6e 67          	imul   ebp,DWORD PTR [ecx+0x6e],0x67
    1580:	20 75 70             	and    BYTE PTR [ebp+0x70],dh
    1583:	20 41 50             	and    BYTE PTR [ecx+0x50],al
    1586:	20 70 72             	and    BYTE PTR [eax+0x72],dh
    1589:	6f                   	outs   dx,DWORD PTR ds:[esi]
    158a:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
    158d:	73 6f                	jae    15fe <.B0+0xc>
    158f:	72 73                	jb     1604 <.B0+0x12>
    1591:	0a 0d 19 00 00 00    	or     cl,BYTE PTR ds:0x19

00001593 <len2>:
len2():
    1593:	19 00                	sbb    DWORD PTR [eax],eax
	...

00001597 <att2>:
att2():
    1597:	0c 01                	or     al,0x1

00001598 <mutex>:
mutex():
    1598:	01 00                	add    DWORD PTR [eax],eax

0000159a <smpBootCPUCount>:
	...

0000159c <smpBootCPUsStarted>:
	...

0000159e <newSS>:
newSS():
    159e:	00 20                	add    BYTE PTR [eax],ah

000015a0 <theGDT>:
	...
theGDT():
    15a8:	ff                   	(bad)  
    15a9:	ff 00                	inc    DWORD PTR [eax]
    15ab:	00 00                	add    BYTE PTR [eax],al
    15ad:	92                   	xchg   edx,eax
    15ae:	8f 00                	pop    DWORD PTR [eax]

000015b0 <regGDT>:
regGDT():
    15b0:	0f 00 a0 15 00 00 89 	verr   WORD PTR [eax-0x76ffffeb]

000015b6 <AP_startup>:
AP_startup():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:446
#-----------------------------------------------------------------
#-----------------------------------------------------------------#-----------------------------------------------------------------

.global AP_startup
AP_startup:
movl     %esp, saveESP
    15b6:	89 25 c1 12 00 00    	mov    DWORD PTR ds:0x12c1,esp
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:448
//lea	tos, %esp		# and set up new stack
call    setup_timer_channel2
    15bc:	e8 7e 00 00 00       	call   163f <setup_timer_channel2>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:450
//call	display_APIC_LocalID
call	broadcast_AP_startup
    15c1:	e8 13 00 00 00       	call   15d9 <broadcast_AP_startup>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:451
call	delay_until_APs_halt
    15c6:	e8 64 00 00 00       	call   162f <delay_until_APs_halt>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:452
mov     $0x10, %eax
    15cb:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:453
mov     %eax, %ds
    15d0:	8e d8                	mov    ds,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:454
mov     saveESP, %esp
    15d2:	8b 25 c1 12 00 00    	mov    esp,DWORD PTR ds:0x12c1
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:455
ret
    15d8:	c3                   	ret    

000015d9 <broadcast_AP_startup>:
broadcast_AP_startup():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:462
.global broadcast_AP_startup
broadcast_AP_startup:
#
# This procedure is called by the main CPU to awaken other CPUs.
#
	push	%ebx
    15d9:	53                   	push   ebx
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:463
	push	%ds
    15da:	1e                   	push   ds
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:466

	# address the Local-APIC registers' page
	mov	$0x10, %ax
    15db:	66 b8 10 00          	mov    ax,0x10
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:467
	mov	%ax, %ds
    15df:	8e d8                	mov    ds,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:468
    	mov     kAPICRegisterRemapAddress, %ebx
    15e1:	8b 1d 30 03 a0 00    	mov    ebx,DWORD PTR ds:0xa00330
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:471

	# issue an 'INIT' Inter-Processor Interrupt command
	mov	$0x000C4500, %eax	# broadcase INIT-IPI
    15e7:	b8 00 45 0c 00       	mov    eax,0xc4500
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:472
	mov	%eax, 0x300(%ebx)	# to all-except-self
    15ec:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax

000015f2 <.B0>:
.B0():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:473
.B0:	bt	$12, 0x300(%ebx)	# command in progress?
    15f2:	0f ba a3 00 03 00 00 	bt     DWORD PTR [ebx+0x300],0xc
    15f9:	0c 
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:474
	jc	.B0			# yes, spin till done
    15fa:	72 f6                	jb     15f2 <.B0>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:477

	# do ten-millisecond delay, allow time for APs to awaken
	mov	$10000, %eax		# number of microseconds
    15fc:	b8 10 27 00 00       	mov    eax,0x2710
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:478
	call	delay_EAX_micro_secs	# for a programmed delay
    1601:	e8 f9 00 00 00       	call   16ff <delay_EAX_micro_secs>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:481
	
	# finish the Intel 'MP Initialization Protocol'
	mov	$5, %ecx		# issue 'Startup' twice
    1606:	b9 05 00 00 00       	mov    ecx,0x5

0000160b <nxIPI>:
nxIPI():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:483
#nxIPI:	mov	$0x000C4601, %eax	# broadcast Startup-IPI #startup IPI for base address of 4096
nxIPI:	mov	$0x000C4601, %eax	# broadcast Startup-IPI 
    160b:	b8 01 46 0c 00       	mov    eax,0xc4601
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:484
	mov	%eax, 0x300(%ebx)	# to all-except-self
    1610:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax

00001616 <.B1>:
.B1():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:485
.B1:	bt	$12, 0x300(%ebx)	# command in progress?
    1616:	0f ba a3 00 03 00 00 	bt     DWORD PTR [ebx+0x300],0xc
    161d:	0c 
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:486
	jc	.B1			# yes, spin till done
    161e:	72 f6                	jb     1616 <.B1>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:489

	# delay for 200 microseconds	
	mov	$200, %eax		# number of microseconds
    1620:	b8 c8 00 00 00       	mov    eax,0xc8
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:490
	call	delay_EAX_micro_secs	# for a programmed delay
    1625:	e8 d5 00 00 00       	call   16ff <delay_EAX_micro_secs>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:491
	loop	nxIPI	
    162a:	e2 df                	loop   160b <nxIPI>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:493
		
	pop	%ds
    162c:	1f                   	pop    ds
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:494
	pop	%ebx
    162d:	5b                   	pop    ebx
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:495
	ret
    162e:	c3                   	ret    

0000162f <delay_until_APs_halt>:
delay_until_APs_halt():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:502
delay_until_APs_halt:
#
# This procedure is called by the main CPU so that it will not
# terminate our program until the other CPUs have been halted.
#
.W0:	mov	smpBootCPUCount, %ax		# number of APs awoken
    162f:	66 a1 9a 15 00 00    	mov    ax,ds:0x159a
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:503
	sub	smpBootCPUsStarted, %ax		# less number finished
    1635:	66 2b 05 9c 15 00 00 	sub    ax,WORD PTR ds:0x159c
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:504
	jnz	.W0			# spin unless all done
    163c:	75 f1                	jne    162f <delay_until_APs_halt>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:505
	ret
    163e:	c3                   	ret    

0000163f <setup_timer_channel2>:
setup_timer_channel2():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:514
#
# This procedure initializes the 8254 Programmable Timer/Counter
# so Timer Channel 2 can be used in 'one-shot' timing durations.
#
	# enable the 8254 Channel-2 counter
	in	$0x61, %al		# get PORT_B settings
    163f:	e4 61                	in     al,0x61
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:515
	and	$0xFD, %al		# turn PC speaker off
    1641:	24 fd                	and    al,0xfd
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:516
	or	$0x01, %al		# turn on Gate2 input
    1643:	0c 01                	or     al,0x1
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:517
	out	%al, $0x61		# output new settings
    1645:	e6 61                	out    0x61,al
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:520

	# program channel-2 for one-shot countdown
	mov	$0xB0, %al		# chn2, r/w LSB/MSB
    1647:	b0 b0                	mov    al,0xb0
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:521
	out	%al, $0x43		# issue PIT command
    1649:	e6 43                	out    0x43,al
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:522
	ret
    164b:	c3                   	ret    

0000164c <display_APIC_LocalID>:
display_APIC_LocalID():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:536
# video services.  Because ROM-BIOS routines are not 'reentrant'
# it is necessary to employ a 'spinlock' to insure that only one
# processor at a time will be executing these ROM-BIOS services. 
#
	# read the Local-APIC ID-register
	push	%ds
    164c:	1e                   	push   ds
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:537
	xor	%ax, %ax
    164d:	31 c0                	xor    eax,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:538
	mov	%ax, %ds
    164f:	8e d8                	mov    ds,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:539
	mov	$0xFEE00020, %ebx
    1651:	66 bb 20 00          	mov    bx,0x20
    1655:	e0 fe                	loopne 1655 <display_APIC_LocalID+0x9>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:540
	mov	(%ebx), %eax
    1657:	67 66 8b 03          	mov    ax,WORD PTR [bp+di]
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:541
	pop	%ds
    165b:	1f                   	pop    ds

0000165c <spin>:
spin():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:544

	# acquire the spinlock -- allow only one CPU at a time
spin:	bt	$0, mutex
    165c:	0f ba 26 98          	bt     DWORD PTR [esi],0x98
    1660:	15 00 73 f8 f0       	adc    eax,0xf0f87300
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:547
	jnc	spin
	lock	
	btr	$0, mutex
    1665:	0f ba 36 98          	btr    DWORD PTR [esi],0x98
    1669:	15 00 73 ef 66       	adc    eax,0x66ef7300
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:551
	jnc	spin

	# write CPU Local-APIC ID-number into shared buffer
	rol	$8, %eax		# get ID-number in AL
    166e:	c1 c0 08             	rol    eax,0x8
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:552
	and	$0xF, %al		# isolate lowest nybble
    1671:	24 0f                	and    al,0xf
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:555

#unremark to have the first CPu clear the screen
        pusha
    1673:	60                   	pusha  
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:556
        cmp $0x1,%al
    1674:	3c 01                	cmp    al,0x1
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:557
        ja overClearScreen
    1676:	77 28                	ja     16a0 <overClearScreen>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:558
        call clearScreen
    1678:	e8 01 01 b4 0f       	call   fb4177e <_months_abbrev+0xf14129e>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:561
#jmp overClearScreen
	mov	$0x0F, %ah		# get display-page
	int	$0x10			# call video bios
    167d:	cd 10                	int    0x10
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:563

	mov	$0x02, %ah		# set cursor position
    167f:	b4 02                	mov    ah,0x2
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:564
        mov     $0,%bh
    1681:	b7 00                	mov    bh,0x0
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:565
        mov     $0x2000,%dx
    1683:	ba 00 20 cd 10       	mov    edx,0x10cd2000
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:567
	int	$0x10			# call video bios
        mov     $0x3,ah
    1688:	b4 03                	mov    ah,0x3
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:568
        int     $0x10
    168a:	cd 10                	int    0x10
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:569
	mov	$0x1301, %ax		# write_string
    168c:	b8 01 13 8d 2e       	mov    eax,0x2e8d1301
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:570
	lea	msg2, %bp		# point ES:BP to string
    1691:	7a 15                	jp     16a8 <overClearScreen+0x8>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:571
	mov	len2, %cx		# number of characters
    1693:	8b 0e                	mov    ecx,DWORD PTR [esi]
    1695:	93                   	xchg   ebx,eax
    1696:	15 8a 1e 97 15       	adc    eax,0x15971e8a
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:573
	mov	att2, %bl		# display attributes
	mov	$0x1301, %ax		# write_string
    169b:	b8 01 13 cd 10       	mov    eax,0x10cd1301

000016a0 <overClearScreen>:
overClearScreen():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:577
	int	$0x10			# call video bios 

overClearScreen:
        popa
    16a0:	61                   	popa   
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:578
        or	$'0', %al		# convert to numeral	
    16a1:	0c 30                	or     al,0x30
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:579
	movb	%al, pid		# write to shared buffer	
    16a3:	a2 63 15 8d 3e       	mov    ds:0x3e8d1563,al
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:582
#jmp overPrinting
	# format the contents of register CR0 for display
	lea	msw, %di
    16a8:	6a 15                	push   0x15
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:583
	mov	%cr0, %eax
    16aa:	0f 20 c0             	mov    eax,cr0
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:584
	call	eax2hex
    16ad:	e8 a4 00 b4 0f       	call   fb41756 <_months_abbrev+0xf141276>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:587
	# display the information using ROM-BIOS routines
	mov	$0x0F, %ah		# get display-page
	int	$0x10			# call video bios
    16b2:	cd 10                	int    0x10
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:589

	mov	$0x03, %ah		# get cursor position
    16b4:	b4 03                	mov    ah,0x3
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:590
	int	$0x10			# call video bios
    16b6:	cd 10                	int    0x10
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:592

	mov	$0x1301, %ax		# write_string
    16b8:	b8 01 13 8d 2e       	mov    eax,0x2e8d1301
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:593
	lea	msg, %bp		# point ES:BP to string
    16bd:	4f                   	dec    edi
    16be:	15 8b 0e 75 15       	adc    eax,0x15750e8b
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:595
	mov	len, %cx		# number of characters
	mov	att, %bl		# display attributes
    16c3:	8a 1e                	mov    bl,BYTE PTR [esi]
    16c5:	79 15                	jns    16dc <initAP+0x8>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:596
	mov	$0x1301, %ax		# write_string
    16c7:	b8 01 13 cd 10       	mov    eax,0x10cd1301

000016cc <overPrinting>:
overPrinting():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:600
	int	$0x10			# call video bios 
overPrinting:
	# release spinlock -- finished with 'non-reentrant' code
	lock 	
    16cc:	f0 0f ba 2e 98       	lock bts DWORD PTR [esi],0x98
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:601
	bts 	$0, mutex
    16d1:	15 00 c3 fa 8c       	adc    eax,0x8cfac300

000016d4 <initAP>:
initAP():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:612
#=================================================================
#-----------------------------------------------------------------
.code16
.globl initAP
.type initAP, @function
initAP:	cli
    16d4:	fa                   	cli    
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:613
	mov	%cs, %ax		# address program's data
    16d5:	8c c8                	mov    eax,cs
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:614
	mov	%ax, %ds		#    with DS register
    16d7:	8e d8                	mov    ds,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:615
	mov	%ax, %es		#    also ES register
    16d9:	8e c0                	mov    es,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:616
	lock				# insure 'atomic' update
    16db:	f0 ff 06             	lock inc DWORD PTR [esi]
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:617
	incw	smpBootCPUCount			# increment count of APs
    16de:	9a 15 b8 00 10 0f c1 	call   0xc10f:0x1000b815
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:621

	# setup an exclusive stack-area for this processor
	mov	$0x1000, %ax		# paragraphs in segment
	xadd	%ax, newSS		# 'atomic' xchg-and-add
    16e5:	06                   	push   es
    16e6:	9e                   	sahf   
    16e7:	15 8e d0 66 31       	adc    eax,0x3166d08e
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:623
	mov	%ax, %ss		# segment-address in SS
	xor	%esp, %esp		# top-of-stack into ESP
    16ec:	e4 66                	in     al,0x66
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:624
        mov     $0,%esp
    16ee:	bc 00 00 00 00       	mov    esp,0x0
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:625
	call	allow_4GB_addressing	# adjust DS's seg-limit
    16f3:	e8 38 00 f0 ff       	call   fff01730 <CHECKSUM+0x1b9dc735>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:630
#	call	display_APIC_LocalID	# display this CPU's ID

	# put this processor to sleep
	lock				# insure 'atomic' update
	incw	smpBootCPUsStarted			# increment count of APs
    16f8:	06                   	push   es
    16f9:	9c                   	pushf  
    16fa:	15 fa f4 eb fc       	adc    eax,0xfcebf4fa

000016fb <freeze>:
freeze():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:632

freeze:	cli				# do not awaken this CPU
    16fb:	fa                   	cli    
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:633
	hlt				# 'fetch-execute' ceases	
    16fc:	f4                   	hlt    
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:634
	jmp	freeze			# just-in-case of an NMI
    16fd:	eb fc                	jmp    16fb <freeze>

000016ff <delay_EAX_micro_secs>:
delay_EAX_micro_secs():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:641
#-----------------------------------------------------------------
delay_EAX_micro_secs:
#
# This procedure creates a programmed delay for EAX microseconds.
#
	pushal
    16ff:	66 60                	pushaw 
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:643

	mov	%eax, %ecx		# number of microseconds
    1701:	66 89 c1             	mov    cx,ax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:644
	mov	$100000, %eax		# microseconds-per-second
    1704:	66 b8 a0 86          	mov    ax,0x86a0
    1708:	01 00                	add    DWORD PTR [eax],eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:645
	xor	%edx, %edx		# is extended to quadword
    170a:	66 31 d2             	xor    dx,dx
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:646
	div	%ecx			# division by double-word
    170d:	66 f7 f1             	div    cx
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:648
	
	mov	%eax, %ecx		# input-frequency divisor
    1710:	66 89 c1             	mov    cx,ax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:649
	mov	$1193182, %eax		# timer's input-frequency
    1713:	66 b8 de 34          	mov    ax,0x34de
    1717:	12 00                	adc    al,BYTE PTR [eax]
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:650
	xor	%edx, %edx		# is extended to quadword
    1719:	66 31 d2             	xor    dx,dx
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:651
	div	%ecx			# division by double-word
    171c:	66 f7 f1             	div    cx
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:653

	out	%al, $0x42		# transfer to Latch LSB
    171f:	e6 42                	out    0x42,al
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:654
	xchg	%al, %ah		# LSB swapped with MSB
    1721:	86 c4                	xchg   ah,al
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:655
	out	%al, $0x42		# transfer to Latch MSB
    1723:	e6 42                	out    0x42,al

00001725 <.T0>:
.T0():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:657

.T0:	in	$0x61, %al		# check PORT_B settings
    1725:	e4 61                	in     al,0x61
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:658
	test	$0x20, %al		# has counter2 expired?
    1727:	a8 20                	test   al,0x20
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:659
	jz	.T0			# no, continue polling
    1729:	74 fa                	je     1725 <.T0>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:661
	
	popal
    172b:	66 61                	popaw  
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:662
	ret
    172d:	c3                   	ret    

0000172e <allow_4GB_addressing>:
allow_4GB_addressing():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:671
#
# This procedure will be called by each processor in order to 
# raise the 'hidden' segment-limit in its DS segment-register
# which permits Local-APIC registers to be addressed with DS.   
#
	pushf				# preserve FLAGS settings
    172e:	9c                   	pushf  
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:672
	push	%ds			# preserve DS contents
    172f:	1e                   	push   ds
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:674

	cli				# no device interrupts
    1730:	fa                   	cli    
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:676

	mov	%cr0, %eax		# get machine status
    1731:	0f 20 c0             	mov    eax,cr0
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:677
	bts	$0, %eax		# set PE-bit to 1
    1734:	66 0f ba e8 00       	bts    ax,0x0
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:678
	mov	%eax, %cr0		# enter protected mode
    1739:	0f 22 c0             	mov    cr0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:679
	lgdt	regGDT			# load GDTR register-image
    173c:	0f 01 16             	lgdtd  [esi]
    173f:	b0 15                	mov    al,0x15
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:680
	mov	$sel_FS, %ax		# address 4GB data-segment
    1741:	b8 08 00 8e d8       	mov    eax,0xd88e0008
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:683
	mov	%ax, %ds		#   with the DS register

	mov	%cr0, %eax		# get machine status
    1746:	0f 20 c0             	mov    eax,cr0
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:684
	btr	$0, %eax		# reset PE-bit to 0
    1749:	66 0f ba f0 00       	btr    ax,0x0
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:685
	mov	%eax, %cr0		# leave protected mode
    174e:	0f 22 c0             	mov    cr0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:687
.code16		
	pop	%ds			# restore register DS
    1751:	1f                   	pop    ds
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:688
	popf				# restore FLAGS value
    1752:	9d                   	popf   
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:689
	ret				
    1753:	c3                   	ret    

00001754 <eax2hex>:
eax2hex():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:692
#-----------------------------------------------------------------
eax2hex:  # converts value in EAX to hexadecimal string at DS:DI
	pusha	
    1754:	60                   	pusha  
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:694

	mov	$8, %cx
    1755:	b9 08 00 66 c1       	mov    ecx,0xc1660008

00001758 <nxnyb>:
nxnyb():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:696
nxnyb:
	rol	$4, %eax
    1758:	66 c1 c0 04          	rol    ax,0x4
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:697
	mov	%al, %bl
    175c:	88 c3                	mov    bl,al
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:698
	and	$0xF, %bx
    175e:	83 e3 0f             	and    ebx,0xf
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:699
	mov	hex(%bx), %dl
    1761:	8a 97 6c 17 88 15    	mov    dl,BYTE PTR [edi+0x1588176c]
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:701
	mov	%dl, (%di)
	inc	%di
    1767:	47                   	inc    edi
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:702
	loop	nxnyb	
    1768:	e2 ee                	loop   1758 <nxnyb>
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:704

	popa
    176a:	61                   	popa   
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:705
	ret
    176b:	c3                   	ret    

0000176c <hex>:
hex():
    176c:	30 31                	xor    BYTE PTR [ecx],dh
    176e:	32 33                	xor    dh,BYTE PTR [ebx]
    1770:	34 35                	xor    al,0x35
    1772:	36                   	ss
    1773:	37                   	aaa    
    1774:	38 39                	cmp    BYTE PTR [ecx],bh
    1776:	41                   	inc    ecx
    1777:	42                   	inc    edx
    1778:	43                   	inc    ebx
    1779:	44                   	inc    esp
    177a:	45                   	inc    ebp
    177b:	46                   	inc    esi

0000177c <clearScreen>:
clearScreen():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:711
#-----------------------------------------------------------------
hex:	.ascii	"0123456789ABCDEF"	# array of hex numerals

.intel_syntax noprefix
clearScreen:
    pusha
    177c:	60                   	pusha  
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:713

    mov ax, 0x0700  # function 07, AL=0 means scroll whole window
    177d:	b8 00 07 b7 07       	mov    eax,0x7b70700
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:715
    mov bh, 0x07    # character attribute = white on black
    mov cx, 0x0000  # row = 0, col = 0
    1782:	b9 00 00 ba 4f       	mov    ecx,0x4fba0000
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:716
    mov dx, 0x184f  # row = 24 (0x18), col = 79 (0x4f)
    1787:	18 cd                	sbb    ch,cl
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:717
    int 0x10        # call BIOS video interrupt
    1789:	10 b4 02 b7 00 ba 00 	adc    BYTE PTR [edx+eax*1+0xba00b7],dh
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:720
    mov ah,02
    mov bh,0
    mov dx,0
    1790:	00 cd                	add    ch,cl
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:721
    int 0x10
    1792:	10 61 c3             	adc    BYTE PTR [ecx-0x3d],ah
	...

0000fec5 <stk>:
stk():
/home/yogi/NetBeansProjects/chrisOS/asm/bootCPU.s:723
    popa
    ret
    fec5:	fa                   	cli    
    fec6:	fa                   	cli    
    fec7:	fa                   	cli    
    fec8:	fa                   	cli    
    fec9:	fa                   	cli    
    feca:	fa                   	cli    
    fecb:	fa                   	cli    
    fecc:	fa                   	cli    
    fecd:	fa                   	cli    
    fece:	fa                   	cli    
    fecf:	fa                   	cli    
    fed0:	fa                   	cli    
    fed1:	fa                   	cli    
    fed2:	fa                   	cli    
    fed3:	fa                   	cli    
    fed4:	fa                   	cli    
    fed5:	fa                   	cli    
    fed6:	fa                   	cli    
    fed7:	fa                   	cli    
    fed8:	fa                   	cli    
    fed9:	fa                   	cli    
    feda:	fa                   	cli    
    fedb:	fa                   	cli    
    fedc:	fa                   	cli    
    fedd:	fa                   	cli    
    fede:	fa                   	cli    
    fedf:	fa                   	cli    
    fee0:	fa                   	cli    
    fee1:	fa                   	cli    
    fee2:	fa                   	cli    
    fee3:	fa                   	cli    
    fee4:	fa                   	cli    
    fee5:	fa                   	cli    
    fee6:	fa                   	cli    
    fee7:	fa                   	cli    
    fee8:	fa                   	cli    
    fee9:	fa                   	cli    
    feea:	fa                   	cli    
    feeb:	fa                   	cli    
    feec:	fa                   	cli    
    feed:	fa                   	cli    
    feee:	fa                   	cli    
    feef:	fa                   	cli    
    fef0:	fa                   	cli    
    fef1:	fa                   	cli    
    fef2:	fa                   	cli    
    fef3:	fa                   	cli    
    fef4:	fa                   	cli    
    fef5:	fa                   	cli    
    fef6:	fa                   	cli    
    fef7:	fa                   	cli    
    fef8:	fa                   	cli    
    fef9:	fa                   	cli    
    fefa:	fa                   	cli    
    fefb:	fa                   	cli    
    fefc:	fa                   	cli    
    fefd:	fa                   	cli    
    fefe:	fa                   	cli    
    feff:	fa                   	cli    
    ff00:	fa                   	cli    
    ff01:	fa                   	cli    
    ff02:	fa                   	cli    
    ff03:	fa                   	cli    
    ff04:	fa                   	cli    
    ff05:	fa                   	cli    
    ff06:	fa                   	cli    
    ff07:	fa                   	cli    
    ff08:	fa                   	cli    
    ff09:	fa                   	cli    
    ff0a:	fa                   	cli    
    ff0b:	fa                   	cli    
    ff0c:	fa                   	cli    
    ff0d:	fa                   	cli    
    ff0e:	fa                   	cli    
    ff0f:	fa                   	cli    
    ff10:	fa                   	cli    
    ff11:	fa                   	cli    
    ff12:	fa                   	cli    
    ff13:	fa                   	cli    
    ff14:	fa                   	cli    
    ff15:	fa                   	cli    
    ff16:	fa                   	cli    
    ff17:	fa                   	cli    
    ff18:	fa                   	cli    
    ff19:	fa                   	cli    
    ff1a:	fa                   	cli    
    ff1b:	fa                   	cli    
    ff1c:	fa                   	cli    
    ff1d:	fa                   	cli    
    ff1e:	fa                   	cli    
    ff1f:	fa                   	cli    
    ff20:	fa                   	cli    
    ff21:	fa                   	cli    
    ff22:	fa                   	cli    
    ff23:	fa                   	cli    
    ff24:	fa                   	cli    
    ff25:	fa                   	cli    
    ff26:	fa                   	cli    
    ff27:	fa                   	cli    
    ff28:	fa                   	cli    
    ff29:	fa                   	cli    
    ff2a:	fa                   	cli    
    ff2b:	fa                   	cli    
    ff2c:	fa                   	cli    
    ff2d:	fa                   	cli    
    ff2e:	fa                   	cli    
    ff2f:	fa                   	cli    
    ff30:	fa                   	cli    
    ff31:	fa                   	cli    
    ff32:	fa                   	cli    
    ff33:	fa                   	cli    
    ff34:	fa                   	cli    
    ff35:	fa                   	cli    
    ff36:	fa                   	cli    
    ff37:	fa                   	cli    
    ff38:	fa                   	cli    
    ff39:	fa                   	cli    
    ff3a:	fa                   	cli    
    ff3b:	fa                   	cli    
    ff3c:	fa                   	cli    
    ff3d:	fa                   	cli    
    ff3e:	fa                   	cli    
    ff3f:	fa                   	cli    
    ff40:	fa                   	cli    
    ff41:	fa                   	cli    
    ff42:	fa                   	cli    
    ff43:	fa                   	cli    
    ff44:	fa                   	cli    
    ff45:	fa                   	cli    
    ff46:	fa                   	cli    
    ff47:	fa                   	cli    
    ff48:	fa                   	cli    
    ff49:	fa                   	cli    
    ff4a:	fa                   	cli    
    ff4b:	fa                   	cli    
    ff4c:	fa                   	cli    
    ff4d:	fa                   	cli    
    ff4e:	fa                   	cli    
    ff4f:	fa                   	cli    
    ff50:	fa                   	cli    
    ff51:	fa                   	cli    
    ff52:	fa                   	cli    
    ff53:	fa                   	cli    
    ff54:	fa                   	cli    
    ff55:	fa                   	cli    
    ff56:	fa                   	cli    
    ff57:	fa                   	cli    
    ff58:	fa                   	cli    
    ff59:	fa                   	cli    
    ff5a:	fa                   	cli    
    ff5b:	fa                   	cli    
    ff5c:	fa                   	cli    
    ff5d:	fa                   	cli    
    ff5e:	fa                   	cli    
    ff5f:	fa                   	cli    
    ff60:	fa                   	cli    
    ff61:	fa                   	cli    
    ff62:	fa                   	cli    
    ff63:	fa                   	cli    
    ff64:	fa                   	cli    
    ff65:	fa                   	cli    
    ff66:	fa                   	cli    
    ff67:	fa                   	cli    
    ff68:	fa                   	cli    
    ff69:	fa                   	cli    
    ff6a:	fa                   	cli    
    ff6b:	fa                   	cli    
    ff6c:	fa                   	cli    
    ff6d:	fa                   	cli    
    ff6e:	fa                   	cli    
    ff6f:	fa                   	cli    
    ff70:	fa                   	cli    
    ff71:	fa                   	cli    
    ff72:	fa                   	cli    
    ff73:	fa                   	cli    
    ff74:	fa                   	cli    
    ff75:	fa                   	cli    
    ff76:	fa                   	cli    
    ff77:	fa                   	cli    
    ff78:	fa                   	cli    
    ff79:	fa                   	cli    
    ff7a:	fa                   	cli    
    ff7b:	fa                   	cli    
    ff7c:	fa                   	cli    
    ff7d:	fa                   	cli    
    ff7e:	fa                   	cli    
    ff7f:	fa                   	cli    
    ff80:	fa                   	cli    
    ff81:	fa                   	cli    
    ff82:	fa                   	cli    
    ff83:	fa                   	cli    
    ff84:	fa                   	cli    
    ff85:	fa                   	cli    
    ff86:	fa                   	cli    
    ff87:	fa                   	cli    
    ff88:	fa                   	cli    
    ff89:	fa                   	cli    
    ff8a:	fa                   	cli    
    ff8b:	fa                   	cli    
    ff8c:	fa                   	cli    
    ff8d:	fa                   	cli    
    ff8e:	fa                   	cli    
    ff8f:	fa                   	cli    
    ff90:	fa                   	cli    
    ff91:	fa                   	cli    
    ff92:	fa                   	cli    
    ff93:	fa                   	cli    
    ff94:	fa                   	cli    
    ff95:	fa                   	cli    
    ff96:	fa                   	cli    
    ff97:	fa                   	cli    
    ff98:	fa                   	cli    
    ff99:	fa                   	cli    
    ff9a:	fa                   	cli    
    ff9b:	fa                   	cli    
    ff9c:	fa                   	cli    
    ff9d:	fa                   	cli    
    ff9e:	fa                   	cli    
    ff9f:	fa                   	cli    
    ffa0:	fa                   	cli    
    ffa1:	fa                   	cli    
    ffa2:	fa                   	cli    
    ffa3:	fa                   	cli    
    ffa4:	fa                   	cli    
    ffa5:	fa                   	cli    
    ffa6:	fa                   	cli    
    ffa7:	fa                   	cli    
    ffa8:	fa                   	cli    
    ffa9:	fa                   	cli    
    ffaa:	fa                   	cli    
    ffab:	fa                   	cli    
    ffac:	fa                   	cli    
    ffad:	fa                   	cli    
    ffae:	fa                   	cli    
    ffaf:	fa                   	cli    
    ffb0:	fa                   	cli    
    ffb1:	fa                   	cli    
    ffb2:	fa                   	cli    
    ffb3:	fa                   	cli    
    ffb4:	fa                   	cli    
    ffb5:	fa                   	cli    
    ffb6:	fa                   	cli    
    ffb7:	fa                   	cli    
    ffb8:	fa                   	cli    
    ffb9:	fa                   	cli    
    ffba:	fa                   	cli    
    ffbb:	fa                   	cli    
    ffbc:	fa                   	cli    
    ffbd:	fa                   	cli    
    ffbe:	fa                   	cli    
    ffbf:	fa                   	cli    
    ffc0:	fa                   	cli    
    ffc1:	fa                   	cli    
    ffc2:	fa                   	cli    
    ffc3:	fa                   	cli    

0000ffc4 <irq13ESP>:
irq13ESP():
    ffc4:	00 00                	add    BYTE PTR [eax],al
    ffc6:	10 00                	adc    BYTE PTR [eax],al
    ffc8:	10 00                	adc    BYTE PTR [eax],al
	...

0000ffcc <irq13SavedESP>:
	...

0000ffd4 <irq14ESP>:
irq14ESP():
    ffd4:	00 00                	add    BYTE PTR [eax],al
    ffd6:	10 00                	adc    BYTE PTR [eax],al
    ffd8:	10 00                	adc    BYTE PTR [eax],al
	...

0000ffdc <irq14SavedESP>:
	...

0000ffe4 <espForFatalExceptions>:
espForFatalExceptions():
    ffe4:	00 00                	add    BYTE PTR [eax],al
    ffe6:	10 00                	adc    BYTE PTR [eax],al
    ffe8:	10 00                	adc    BYTE PTR [eax],al
	...

0000ffec <savedESP>:
	...

0000fff4 <bufr>:
	...

00010004 <savedESP_irq0>:
	...

00010014 <debugReturnFlags>:
	...

0001001c <debugESP>:
debugESP():
   1001c:	00 00                	add    BYTE PTR [eax],al
	...

00010020 <_isr_00_wrapper>:
_isr_00_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:38
debugESP: .WORD 0,0


.global _isr_00_wrapper        
_isr_00_wrapper:                #remapped to 0x0a
        mov exceptionSavedESP, esp
   10020:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:39
        mov exceptionAX,eax
   10026:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:40
        mov exceptionBP, ebp
   1002b:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:41
        mov     ebp, esp
   10031:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:42
        mov     ax, 0x0                  # save exception number
   10033:	66 b8 00 00          	mov    ax,0x0
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:43
        jmp isr_My_Common
   10037:	e9 5e 01 00 00       	jmp    1019a <isr_My_Common>

0001003c <_isr_02_wrapper>:
_isr_02_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:46
.global _isr_02_wrapper        
_isr_02_wrapper:                #remapped to 0x0a
        mov exceptionSavedESP, esp
   1003c:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:47
        mov exceptionAX,eax
   10042:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:48
        mov exceptionBP, ebp
   10047:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:49
        mov     ebp, esp
   1004d:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:50
        mov     ax, 0x2                  # save exception number
   1004f:	66 b8 02 00          	mov    ax,0x2
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:51
        jmp isr_My_Common
   10053:	e9 42 01 00 00       	jmp    1019a <isr_My_Common>

00010058 <_isr_03_wrapper>:
_isr_03_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:60
        mov exceptionAX,eax
        mov exceptionBP, ebp
        mov     ebp, esp
        mov     ax, 0x3                  # save exception number
*/
        orw [esp+8],0x100
   10058:	66 81 4c 24 08 00 01 	or     WORD PTR [esp+0x8],0x100
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:61
        pusha
   1005f:	60                   	pusha  
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:62
        call activateDebugger
   10060:	e8 af aa 00 00       	call   1ab14 <activateDebugger>
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:65
 /*       jmp isr_My_Common
*/
        popa
   10065:	61                   	popa   
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:66
        sti
   10066:	fb                   	sti    
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:67
        iretd
   10067:	cf                   	iret   

00010068 <_isr_04_wrapper>:
_isr_04_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:70
.global _isr_04_wrapper        
_isr_04_wrapper:                #remapped to 0x0c
        mov exceptionSavedESP, esp
   10068:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:71
        mov exceptionAX,eax
   1006e:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:72
        mov exceptionBP, ebp
   10073:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:73
        mov     ebp, esp
   10079:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:74
        mov     ax, 0x4                  # save exception number
   1007b:	66 b8 04 00          	mov    ax,0x4
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:75
        jmp isr_My_Common
   1007f:	e9 16 01 00 00       	jmp    1019a <isr_My_Common>

00010084 <_isr_05_wrapper>:
_isr_05_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:78
.global _isr_05_wrapper        
_isr_05_wrapper:                #remapped to 0x0d
        mov exceptionSavedESP, esp
   10084:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:79
        mov exceptionAX,eax
   1008a:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:80
        mov exceptionBP, ebp
   1008f:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:81
        mov     ebp, esp
   10095:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:82
        mov     ax, 0x5                  # save exception number
   10097:	66 b8 05 00          	mov    ax,0x5
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:83
        jmp isr_My_Common
   1009b:	e9 fa 00 00 00       	jmp    1019a <isr_My_Common>

000100a0 <_isr_06_wrapper>:
_isr_06_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:86
.global _isr_06_wrapper
_isr_06_wrapper:                #remapped to 0x0e
        mov exceptionSavedESP, esp
   100a0:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:87
        mov exceptionAX,eax
   100a6:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:88
        mov exceptionBP, ebp
   100ab:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:89
        mov     ebp, esp
   100b1:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:90
        mov     ax, 0x6                  # save exception number
   100b3:	66 b8 06 00          	mov    ax,0x6
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:91
        jmp isr_My_Common
   100b7:	e9 de 00 00 00       	jmp    1019a <isr_My_Common>

000100bc <_isr_07_wrapper>:
_isr_07_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:94
.global _isr_07_wrapper        
_isr_07_wrapper:                #remapped to 0x0f
        mov exceptionSavedESP, esp
   100bc:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:95
        mov exceptionAX,eax
   100c2:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:96
        mov exceptionBP, ebp
   100c7:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:97
        mov     ebp, esp
   100cd:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:98
        mov     ax, 0x7                  # save exception number
   100cf:	66 b8 07 00          	mov    ax,0x7
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:99
        jmp isr_My_Common
   100d3:	e9 c2 00 00 00       	jmp    1019a <isr_My_Common>

000100d8 <_isr_08_wrapper>:
_isr_08_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:102
.global _isr_08_wrapper                 #remapped to 0x10
_isr_08_wrapper:                
        mov exceptionSavedESP, esp
   100d8:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:103
        mov exceptionAX,eax
   100de:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:104
        mov exceptionBP, ebp
   100e3:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:105
        mov     ebp, esp
   100e9:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:106
        mov     ax, 0x8                  # save exception number
   100eb:	66 b8 08 00          	mov    ax,0x8
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:107
        jmp isr_My_Common
   100ef:	e9 a6 00 00 00       	jmp    1019a <isr_My_Common>
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:130
#        mov ebx, cr2
#        mov exceptionCR2, ebx
#        pop ebx
#        pop ebp
        //push bx                         #clr 05/20/2016- We're not going to recover from a double fault so don't try pushing things on the stack to save them because the stack may be corrupted
        mov bx,10
   100f4:	66 bb 0a 00          	mov    bx,0xa
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:131
        mov ds,bx
   100f8:	8e db                	mov    ds,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:132
        mov es,bx
   100fa:	8e c3                	mov    es,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:133
        mov fs,bx
   100fc:	8e e3                	mov    fs,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:134
        mov gs,bx
   100fe:	8e eb                	mov    gs,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:136
        //pop bx                        #clr 05/20/2016- We're not going to recover from a double fault so don't try pushing things on the stack to save them because the stack may be corrupted
        call    doubleFaultHandler     # jump to the common code
   10100:	e8 6a 96 00 00       	call   1976f <doubleFaultHandler>

00010105 <_isr_09_wrapper>:
_isr_09_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:139
.global _isr_09_wrapper                 #remapped to 0x11
_isr_09_wrapper:
        mov exceptionSavedESP, esp
   10105:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:140
        mov exceptionAX,eax
   1010b:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:141
        mov exceptionBP, ebp
   10110:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:142
        mov     ebp, esp
   10116:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:143
        mov     ax, 0x9                  # save exception number
   10118:	66 b8 09 00          	mov    ax,0x9
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:144
        jmp isr_My_Common
   1011c:	eb 7c                	jmp    1019a <isr_My_Common>

0001011e <_isr_10_wrapper>:
_isr_10_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:147
.global _isr_10_wrapper                 #remapped to 0x12
_isr_10_wrapper:                        
        mov exceptionSavedESP, esp
   1011e:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:148
        mov exceptionAX,eax
   10124:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:149
        mov exceptionBP, ebp
   10129:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:150
        mov     ebp, esp
   1012f:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:151
        mov     ax, 0xa                  # save exception number
   10131:	66 b8 0a 00          	mov    ax,0xa
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:152
        jmp isr_My_Common
   10135:	eb 63                	jmp    1019a <isr_My_Common>

00010137 <_isr_11_wrapper>:
_isr_11_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:155
.global _isr_11_wrapper                 #remapped to 0x13
_isr_11_wrapper:
        mov exceptionSavedESP, esp
   10137:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:156
        mov exceptionAX,eax
   1013d:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:157
        mov exceptionBP, ebp
   10142:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:158
        mov     ebp, esp
   10148:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:159
        mov     ax, 0x8                  # save exception number
   1014a:	66 b8 08 00          	mov    ax,0x8
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:160
        jmp isr_My_Common
   1014e:	eb 4a                	jmp    1019a <isr_My_Common>

00010150 <_isr_12_wrapper>:
_isr_12_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:163
.global _isr_12_wrapper        
_isr_12_wrapper:                        #remapped to 0x14
        mov exceptionSavedESP, esp
   10150:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:164
        mov exceptionAX,eax
   10156:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:165
        mov exceptionBP, ebp
   1015b:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:166
        mov     ebp, esp
   10161:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:167
        mov     ax, 0xc                  # save exception number
   10163:	66 b8 0c 00          	mov    ax,0xc
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:168
        jmp isr_My_Common
   10167:	eb 31                	jmp    1019a <isr_My_Common>

00010169 <_isr_13_wrapper>:
_isr_13_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:171
.global _isr_13_wrapper                 #remapped to 0x15
_isr_13_wrapper:
cli;
   10169:	fa                   	cli    
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:172
        mov exceptionSavedESP, esp
   1016a:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:173
        mov exceptionAX,eax
   10170:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:174
        mov exceptionBP, ebp
   10175:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:175
        mov     ebp, esp
   1017b:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:176
        mov     ax, 0xd                  # save exception number
   1017d:	66 b8 0d 00          	mov    ax,0xd
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:177
        jmp isr_My_Common
   10181:	eb 17                	jmp    1019a <isr_My_Common>

00010183 <_isr_14_wrapper>:
_isr_14_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:181
.global _isr_14_wrapper                 #remapped to 0x16
_isr_14_wrapper:
#cli;hlt;
mov exceptionSavedESP, esp
   10183:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:182
        mov exceptionAX,eax
   10189:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:183
        mov exceptionBP, ebp
   1018e:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:184
        mov     ebp, esp
   10194:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:185
        mov     ax, 0xe                  # save exception number
   10196:	66 b8 0e 00          	mov    ax,0xe

0001019a <isr_My_Common>:
isr_My_Common():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:187
isr_My_Common:
        mov exceptionNumber,ax
   1019a:	66 a3 a4 01 a0 00    	mov    ds:0xa001a4,ax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:188
        pushad                          # other regs because its an ISR
   101a0:	60                   	pusha  
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:189
        mov eax,ds
   101a1:	8c d8                	mov    eax,ds
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:190
        mov exceptionDS,eax
   101a3:	a3 d8 01 a0 00       	mov    ds:0xa001d8,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:191
        mov exceptionBX, ebx
   101a8:	89 1d b4 01 a0 00    	mov    DWORD PTR ds:0xa001b4,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:192
        mov exceptionCX, ecx
   101ae:	89 0d b8 01 a0 00    	mov    DWORD PTR ds:0xa001b8,ecx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:193
        mov exceptionDX, edx
   101b4:	89 15 bc 01 a0 00    	mov    DWORD PTR ds:0xa001bc,edx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:194
        mov exceptionSI, esi
   101ba:	89 35 c0 01 a0 00    	mov    DWORD PTR ds:0xa001c0,esi
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:195
        mov exceptionDI, edi
   101c0:	89 3d c4 01 a0 00    	mov    DWORD PTR ds:0xa001c4,edi
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:196
        mov eax, cr0
   101c6:	0f 20 c0             	mov    eax,cr0
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:197
        mov exceptionCR0, eax
   101c9:	a3 cc 01 a0 00       	mov    ds:0xa001cc,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:198
        mov eax, cr3
   101ce:	0f 20 d8             	mov    eax,cr3
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:199
        mov exceptionCR3, eax
   101d1:	a3 d0 01 a0 00       	mov    ds:0xa001d0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:200
        mov eax, cr4
   101d6:	0f 20 e0             	mov    eax,cr4
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:201
        mov exceptionCR4, eax
   101d9:	a3 d4 01 a0 00       	mov    ds:0xa001d4,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:202
        mov eax,es
   101de:	8c c0                	mov    eax,es
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:203
        mov exceptionES,eax
   101e0:	a3 dc 01 a0 00       	mov    ds:0xa001dc,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:204
        mov eax,fs
   101e5:	8c e0                	mov    eax,fs
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:205
        mov exceptionFS,eax
   101e7:	a3 e0 01 a0 00       	mov    ds:0xa001e0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:206
        mov eax,gs
   101ec:	8c e8                	mov    eax,gs
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:207
        mov exceptionGS,eax
   101ee:	a3 e4 01 a0 00       	mov    ds:0xa001e4,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:208
        mov eax,ss
   101f3:	8c d0                	mov    eax,ss
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:209
        mov exceptionSS,eax
   101f5:	a3 e8 01 a0 00       	mov    ds:0xa001e8,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:210
        mov eax, exceptionAX
   101fa:	a1 b0 01 a0 00       	mov    eax,ds:0xa001b0
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:211
        mov     bx, 0x10
   101ff:	66 bb 10 00          	mov    bx,0x10
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:212
        mov     ds, bx
   10203:	8e db                	mov    ds,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:213
        mov     es, bx                  # load ds and es with valid selector
   10205:	8e c3                	mov    es,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:214
	mov     gs, bx
   10207:	8e eb                	mov    gs,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:216
    
    mov ebx,exceptionNumber
   10209:	8b 1d a4 01 a0 00    	mov    ebx,DWORD PTR ds:0xa001a4
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:217
    mov bl,[_isr_has_errorCode+ebx]
   1020f:	8a 9b 83 06 01 00    	mov    bl,BYTE PTR [ebx+0x10683]
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:218
    cmp bl,1
   10215:	80 fb 01             	cmp    bl,0x1
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:219
    je  getExceptionDetailsWithError
   10218:	74 1f                	je     10239 <getExceptionDetailsWithError>
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:220
    mov ebx, [ebp+8]
   1021a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:221
    mov exceptionFlags, ebx
   1021d:	89 1d f0 01 a0 00    	mov    DWORD PTR ds:0xa001f0,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:222
    mov bx, [ebp+4]
   10223:	66 8b 5d 04          	mov    bx,WORD PTR [ebp+0x4]
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:223
    mov exceptionCS, bx
   10227:	66 89 1d fc 01 a0 00 	mov    WORD PTR ds:0xa001fc,bx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:224
    mov ebx, [ebp+0]
   1022e:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:225
    mov exceptionEIP, ebx
   10231:	89 1d f8 01 a0 00    	mov    DWORD PTR ds:0xa001f8,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:226
    jmp saveTheStack
   10237:	eb 33                	jmp    1026c <saveTheStack>

00010239 <getExceptionDetailsWithError>:
getExceptionDetailsWithError():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:229

getExceptionDetailsWithError:
     mov ebx, [ebp+12]
   10239:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:230
     mov exceptionFlags, ebx
   1023c:	89 1d f0 01 a0 00    	mov    DWORD PTR ds:0xa001f0,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:231
     mov bx, [ebp+8]
   10242:	66 8b 5d 08          	mov    bx,WORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:232
     mov exceptionCS, bx
   10246:	66 89 1d fc 01 a0 00 	mov    WORD PTR ds:0xa001fc,bx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:233
     mov ebx, [ebp+4]
   1024d:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:234
     mov exceptionEIP, ebx
   10250:	89 1d f8 01 a0 00    	mov    DWORD PTR ds:0xa001f8,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:235
     mov ebx, cr2
   10256:	0f 20 d3             	mov    ebx,cr2
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:236
     mov exceptionCR2, ebx
   10259:	89 1d 00 02 a0 00    	mov    DWORD PTR ds:0xa00200,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:237
     mov ebx, [ebp]
   1025f:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:238
     movzx ebx,bx
   10262:	0f b7 db             	movzx  ebx,bx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:239
     mov exceptionErrorCode, bx
   10265:	66 89 1d f4 01 a0 00 	mov    WORD PTR ds:0xa001f4,bx

0001026c <saveTheStack>:
saveTheStack():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:242

saveTheStack:
jmp overSaveTheStack
   1026c:	eb 13                	jmp    10281 <overSaveTheStack>
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:243
        mov esi, exceptionSavedESP
   1026e:	8b 35 ec 01 a0 00    	mov    esi,DWORD PTR ds:0xa001ec
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:245
//        add esi, 16 #drop the 4 dwords that are passed to the proc
        mov edi, exceptionSavedStack
   10274:	8b 3d a8 01 a0 00    	mov    edi,DWORD PTR ds:0xa001a8
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:246
        mov cx, 30
   1027a:	66 b9 1e 00          	mov    cx,0x1e
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:247
        cld
   1027e:	fc                   	cld    
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:248
        rep movsd
   1027f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]

00010281 <overSaveTheStack>:
overSaveTheStack():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:252

        #Figure out which exception handler to call
overSaveTheStack:
        mov ax,exceptionNumber
   10281:	66 a1 a4 01 a0 00    	mov    ax,ds:0xa001a4
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:253
        cmp ax,0xe
   10287:	66 83 f8 0e          	cmp    ax,0xe
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:254
        jne notPagingHandler
   1028b:	75 09                	jne    10296 <notPagingHandler>
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:255
        call 0x08:pagingExceptionHandler
   1028d:	9a 61 95 01 00 08 00 	call   0x8:0x19561
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:256
        jmp onTheWayOut
   10294:	eb 07                	jmp    1029d <onTheWayOut>

00010296 <notPagingHandler>:
notPagingHandler():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:260

notPagingHandler:
toDefaultHandler:
        call 0x08:defaultISRHandler
   10296:	9a 1b 97 01 00 08 00 	call   0x8:0x1971b

0001029d <onTheWayOut>:
onTheWayOut():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:262
onTheWayOut:
        popad                           # restoring the regs
   1029d:	61                   	popa   
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:263
        mov esp, exceptionSavedESP
   1029e:	8b 25 ec 01 a0 00    	mov    esp,DWORD PTR ds:0xa001ec
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:265
#        add esp, 4 #get rid of error code per prolog http://geezer.osdevbrasil.net/osd/intr/index.htm 9. If the exception pushed an error code, the handler must pop it now and discard it. 
        mov ebx,exceptionNumber
   102a4:	8b 1d a4 01 a0 00    	mov    ebx,DWORD PTR ds:0xa001a4
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:266
        mov bl,[_isr_has_errorCode+ebx]
   102aa:	8a 9b 83 06 01 00    	mov    bl,BYTE PTR [ebx+0x10683]
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:267
        cmp bl,1
   102b0:	80 fb 01             	cmp    bl,0x1
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:268
        jnz overCorrection
   102b3:	75 03                	jne    102b8 <overCorrection>
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:269
        add esp, 4 #get rid of error code per prolog http://geezer.osdevbrasil.net/osd/intr/index.htm 9. If the exception pushed an error code, the handler must pop it now and discard it. 
   102b5:	83 c4 04             	add    esp,0x4

000102b8 <overCorrection>:
overCorrection():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:271
overCorrection:
        mov     bx, exceptionDS
   102b8:	66 8b 1d d8 01 a0 00 	mov    bx,WORD PTR ds:0xa001d8
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:272
        mov     ds, bx
   102bf:	8e db                	mov    ds,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:273
        mov     bx, exceptionES
   102c1:	66 8b 1d dc 01 a0 00 	mov    bx,WORD PTR ds:0xa001dc
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:274
        mov     es, bx                  # load ds and es with valid selector
   102c8:	8e c3                	mov    es,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:275
        mov     bx, exceptionFS
   102ca:	66 8b 1d e0 01 a0 00 	mov    bx,WORD PTR ds:0xa001e0
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:276
        mov     fs,bx
   102d1:	8e e3                	mov    fs,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:277
        mov     bx, exceptionGS
   102d3:	66 8b 1d e4 01 a0 00 	mov    bx,WORD PTR ds:0xa001e4
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:278
	mov     gs, bx
   102da:	8e eb                	mov    gs,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:279
        mov ebp,exceptionBP
   102dc:	8b 2d c8 01 a0 00    	mov    ebp,DWORD PTR ds:0xa001c8
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:280
        mov ebx,exceptionBX
   102e2:	8b 1d b4 01 a0 00    	mov    ebx,DWORD PTR ds:0xa001b4
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:281
        mov eax, exceptionAX
   102e8:	a1 b0 01 a0 00       	mov    eax,ds:0xa001b0
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:282
        sti
   102ed:	fb                   	sti    
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:283
        iretd
   102ee:	cf                   	iret   

000102ef <_isr_15_wrapper>:
_isr_15_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:287

.global _isr_15_wrapper        
_isr_15_wrapper:
        mov exceptionSavedESP, esp
   102ef:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:288
        mov exceptionAX,eax
   102f5:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:289
        mov exceptionBP, ebp
   102fa:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:290
        mov     ebp, esp
   10300:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:291
        mov     ax, 0xf                  # save exception number
   10302:	66 b8 0f 00          	mov    ax,0xf
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:292
        jmp isr_My_Common
   10306:	e9 8f fe ff ff       	jmp    1019a <isr_My_Common>

0001030b <_isr_16_wrapper>:
_isr_16_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:295
.global _isr_16_wrapper        
_isr_16_wrapper:
        mov exceptionSavedESP, esp
   1030b:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:296
        mov exceptionAX,eax
   10311:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:297
        mov exceptionBP, ebp
   10316:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:298
        mov     ebp, esp
   1031c:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:299
        mov     ax, 0x10                  # save exception number
   1031e:	66 b8 10 00          	mov    ax,0x10
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:300
        jmp isr_My_Common
   10322:	e9 73 fe ff ff       	jmp    1019a <isr_My_Common>

00010327 <_isr_17_wrapper>:
_isr_17_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:303
.global _isr_17_wrapper        
_isr_17_wrapper:
        mov exceptionSavedESP, esp
   10327:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:304
        mov exceptionAX,eax
   1032d:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:305
        mov exceptionBP, ebp
   10332:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:306
        mov     ebp, esp
   10338:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:307
        mov     ax, 0x11                  # save exception number
   1033a:	66 b8 11 00          	mov    ax,0x11
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:308
        jmp isr_My_Common
   1033e:	e9 57 fe ff ff       	jmp    1019a <isr_My_Common>

00010343 <_isr_18_wrapper>:
_isr_18_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:311
.global _isr_18_wrapper        
_isr_18_wrapper:
        mov exceptionSavedESP, esp
   10343:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:312
        mov exceptionAX,eax
   10349:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:313
        mov exceptionBP, ebp
   1034e:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:314
        mov     ebp, esp
   10354:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:315
        mov     ax, 0x12                  # save exception number
   10356:	66 b8 12 00          	mov    ax,0x12
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:316
        jmp isr_My_Common
   1035a:	e9 3b fe ff ff       	jmp    1019a <isr_My_Common>

0001035f <_isr_19_wrapper>:
_isr_19_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:319
.global _isr_19_wrapper        
_isr_19_wrapper:
        mov exceptionSavedESP, esp
   1035f:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:320
        mov exceptionAX,eax
   10365:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:321
        mov exceptionBP, ebp
   1036a:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:322
        mov     ebp, esp
   10370:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:323
        mov     ax, 0x13                  # save exception number
   10372:	66 b8 13 00          	mov    ax,0x13
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:324
        jmp isr_My_Common
   10376:	e9 1f fe ff ff       	jmp    1019a <isr_My_Common>

0001037b <_isr_20_wrapper>:
_isr_20_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:327
.global _isr_20_wrapper        #8 based exception 0x14
_isr_20_wrapper:
        mov exceptionSavedESP, esp
   1037b:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:328
        mov exceptionAX,eax
   10381:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:329
        mov exceptionBP, ebp
   10386:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:330
        mov     ebp, esp
   1038c:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:331
        mov     ax, 0x14                  # save exception number
   1038e:	66 b8 14 00          	mov    ax,0x14
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:332
        jmp isr_My_Common
   10392:	e9 03 fe ff ff       	jmp    1019a <isr_My_Common>

00010397 <_isr_21_wrapper>:
_isr_21_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:335
.global _isr_21_wrapper        
_isr_21_wrapper:
        mov exceptionSavedESP, esp
   10397:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:336
        mov exceptionAX,eax
   1039d:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:337
        mov exceptionBP, ebp
   103a2:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:338
        mov     ebp, esp
   103a8:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:339
        mov     ax, 0x15                  # save exception number
   103aa:	66 b8 15 00          	mov    ax,0x15
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:340
        jmp isr_My_Common
   103ae:	e9 e7 fd ff ff       	jmp    1019a <isr_My_Common>

000103b3 <_isr_22_wrapper>:
_isr_22_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:343
.global _isr_22_wrapper        
_isr_22_wrapper:
        mov exceptionSavedESP, esp
   103b3:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:344
        mov exceptionAX,eax
   103b9:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:345
        mov exceptionBP, ebp
   103be:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:346
        mov     ebp, esp
   103c4:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:347
        mov     ax, 0x16                  # save exception number
   103c6:	66 b8 16 00          	mov    ax,0x16
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:348
        jmp isr_My_Common
   103ca:	e9 cb fd ff ff       	jmp    1019a <isr_My_Common>

000103cf <_isr_23_wrapper>:
_isr_23_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:351
.global _isr_23_wrapper        
_isr_23_wrapper:
        mov exceptionSavedESP, esp
   103cf:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:352
        mov exceptionAX,eax
   103d5:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:353
        mov exceptionBP, ebp
   103da:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:354
        mov     ebp, esp
   103e0:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:355
        mov     ax, 0x17                  # save exception number
   103e2:	66 b8 17 00          	mov    ax,0x17
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:356
        jmp isr_My_Common
   103e6:	e9 af fd ff ff       	jmp    1019a <isr_My_Common>

000103eb <_isr_24_wrapper>:
_isr_24_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:359
.global _isr_24_wrapper        
_isr_24_wrapper:
        mov exceptionSavedESP, esp
   103eb:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:360
        mov exceptionAX,eax
   103f1:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:361
        mov exceptionBP, ebp
   103f6:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:362
        mov     ebp, esp
   103fc:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:363
        mov     ax, 0x18                  # save exception number
   103fe:	66 b8 18 00          	mov    ax,0x18
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:364
        jmp isr_My_Common
   10402:	e9 93 fd ff ff       	jmp    1019a <isr_My_Common>

00010407 <_isr_25_wrapper>:
_isr_25_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:367
.global _isr_25_wrapper        
_isr_25_wrapper:
        mov exceptionSavedESP, esp
   10407:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:368
        mov exceptionAX,eax
   1040d:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:369
        mov exceptionBP, ebp
   10412:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:370
        mov     ebp, esp
   10418:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:371
        mov     ax, 0x19                  # save exception number
   1041a:	66 b8 19 00          	mov    ax,0x19
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:372
        jmp isr_My_Common
   1041e:	e9 77 fd ff ff       	jmp    1019a <isr_My_Common>

00010423 <_isr_26_wrapper>:
_isr_26_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:375
.global _isr_26_wrapper        
_isr_26_wrapper:
        mov exceptionSavedESP, esp
   10423:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:376
        mov exceptionAX,eax
   10429:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:377
        mov exceptionBP, ebp
   1042e:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:378
        mov     ebp, esp
   10434:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:379
        mov     ax, 0x1a                  # save exception number
   10436:	66 b8 1a 00          	mov    ax,0x1a
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:380
        jmp isr_My_Common
   1043a:	e9 5b fd ff ff       	jmp    1019a <isr_My_Common>

0001043f <_isr_27_wrapper>:
_isr_27_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:383
.global _isr_27_wrapper        
_isr_27_wrapper:
        mov exceptionSavedESP, esp
   1043f:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:384
        mov exceptionAX,eax
   10445:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:385
        mov exceptionBP, ebp
   1044a:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:386
        mov     ebp, esp
   10450:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:387
        mov     ax, 0x1b                  # save exception number
   10452:	66 b8 1b 00          	mov    ax,0x1b
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:388
        jmp isr_My_Common
   10456:	e9 3f fd ff ff       	jmp    1019a <isr_My_Common>

0001045b <_isr_28_wrapper>:
_isr_28_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:391
.global _isr_28_wrapper        
_isr_28_wrapper:
        mov exceptionSavedESP, esp
   1045b:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:392
        mov exceptionAX,eax
   10461:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:393
        mov exceptionBP, ebp
   10466:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:394
        mov     ebp, esp
   1046c:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:395
        mov     ax, 0x1c                  # save exception number
   1046e:	66 b8 1c 00          	mov    ax,0x1c
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:396
        jmp isr_My_Common
   10472:	e9 23 fd ff ff       	jmp    1019a <isr_My_Common>

00010477 <_isr_29_wrapper>:
_isr_29_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:399
.global _isr_29_wrapper        
_isr_29_wrapper:
        mov exceptionSavedESP, esp
   10477:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:400
        mov exceptionAX,eax
   1047d:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:401
        mov exceptionBP, ebp
   10482:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:402
        mov     ebp, esp
   10488:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:403
        mov     ax, 0x1d                  # save exception number
   1048a:	66 b8 1d 00          	mov    ax,0x1d
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:404
        jmp isr_My_Common
   1048e:	e9 07 fd ff ff       	jmp    1019a <isr_My_Common>

00010493 <_isr_30_wrapper>:
_isr_30_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:407
.global _isr_30_wrapper        
_isr_30_wrapper:
        mov exceptionSavedESP, esp
   10493:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:408
        mov exceptionAX,eax
   10499:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:409
        mov exceptionBP, ebp
   1049e:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:410
        mov     ebp, esp
   104a4:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:411
        mov     ax, 0x1e                  # save exception number
   104a6:	66 b8 1e 00          	mov    ax,0x1e
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:412
        jmp isr_My_Common
   104aa:	e9 eb fc ff ff       	jmp    1019a <isr_My_Common>

000104af <_isr_31_wrapper>:
_isr_31_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:415
.global _isr_31_wrapper        
_isr_31_wrapper:                            #DEBUG EXCEPTION
cli
   104af:	fa                   	cli    
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:416
    mov debugBP,ebp
   104b0:	89 2d 1c 02 a0 00    	mov    DWORD PTR ds:0xa0021c,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:417
    mov debugSavedESP, esp
   104b6:	89 25 40 02 a0 00    	mov    DWORD PTR ds:0xa00240,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:418
    mov debugESP,esp
   104bc:	89 25 1c 00 01 00    	mov    DWORD PTR ds:0x1001c,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:419
    pushad
   104c2:	60                   	pusha  
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:420
    mov ebp, debugESP
   104c3:	8b 2d 1c 00 01 00    	mov    ebp,DWORD PTR ds:0x1001c
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:422
    
    mov debugBX, ebx
   104c9:	89 1d 08 02 a0 00    	mov    DWORD PTR ds:0xa00208,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:423
    mov ebx,debugSavedESP
   104cf:	8b 1d 40 02 a0 00    	mov    ebx,DWORD PTR ds:0xa00240
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:424
    add ebx,12
   104d5:	83 c3 0c             	add    ebx,0xc
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:425
    mov debugSavedESP,ebx
   104d8:	89 1d 40 02 a0 00    	mov    DWORD PTR ds:0xa00240,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:426
    mov ebx, [ebp+8]
   104de:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:427
    mov debugFlags, ebx
   104e1:	89 1d 44 02 a0 00    	mov    DWORD PTR ds:0xa00244,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:428
    mov debugReturnFlags,ebx
   104e7:	89 1d 14 00 01 00    	mov    DWORD PTR ds:0x10014,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:429
    movw bx, [ebp+4]
   104ed:	66 8b 5d 04          	mov    bx,WORD PTR [ebp+0x4]
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:430
    movw debugCS, bx
   104f1:	66 89 1d 4c 02 a0 00 	mov    WORD PTR ds:0xa0024c,bx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:431
    mov ebx, [ebp+0]
   104f8:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:432
    mov debugEIP, ebx
   104fb:	89 1d 50 02 a0 00    	mov    DWORD PTR ds:0xa00250,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:434

    mov debugCX, ecx
   10501:	89 0d 0c 02 a0 00    	mov    DWORD PTR ds:0xa0020c,ecx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:435
    mov debugDX, edx
   10507:	89 15 10 02 a0 00    	mov    DWORD PTR ds:0xa00210,edx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:436
    mov debugSI, esi
   1050d:	89 35 14 02 a0 00    	mov    DWORD PTR ds:0xa00214,esi
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:437
    mov debugDI, edi
   10513:	89 3d 18 02 a0 00    	mov    DWORD PTR ds:0xa00218,edi
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:438
    mov debugAX,eax
   10519:	a3 04 02 a0 00       	mov    ds:0xa00204,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:440

    movw ax,ds
   1051e:	66 8c d8             	mov    ax,ds
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:441
    movw debugDS,eax
   10521:	66 a3 2c 02 a0 00    	mov    ds:0xa0022c,ax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:442
    mov eax, cr0
   10527:	0f 20 c0             	mov    eax,cr0
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:443
    mov debugCR0, eax
   1052a:	a3 20 02 a0 00       	mov    ds:0xa00220,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:444
    mov eax, cr3
   1052f:	0f 20 d8             	mov    eax,cr3
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:445
    mov debugCR3, eax
   10532:	a3 24 02 a0 00       	mov    ds:0xa00224,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:446
    mov eax, cr4
   10537:	0f 20 e0             	mov    eax,cr4
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:447
    mov debugCR4, eax
   1053a:	a3 28 02 a0 00       	mov    ds:0xa00228,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:448
    mov eax,es
   1053f:	8c c0                	mov    eax,es
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:449
    mov debugES,eax
   10541:	a3 30 02 a0 00       	mov    ds:0xa00230,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:450
    mov eax,fs
   10546:	8c e0                	mov    eax,fs
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:451
    mov debugFS,eax
   10548:	a3 34 02 a0 00       	mov    ds:0xa00234,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:452
    mov eax,gs
   1054d:	8c e8                	mov    eax,gs
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:453
    mov debugGS,eax
   1054f:	a3 38 02 a0 00       	mov    ds:0xa00238,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:454
    mov eax,ss
   10554:	8c d0                	mov    eax,ss
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:455
    mov debugSS,eax
   10556:	a3 3c 02 a0 00       	mov    ds:0xa0023c,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:457

    mov esi, debugSavedESP
   1055b:	8b 35 40 02 a0 00    	mov    esi,DWORD PTR ds:0xa00240
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:458
    mov edi, debugSavedStack
   10561:	8b 3d ac 01 a0 00    	mov    edi,DWORD PTR ds:0xa001ac
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:459
    mov cx, 30
   10567:	66 b9 1e 00          	mov    cx,0x1e
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:460
    cld
   1056b:	fc                   	cld    
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:461
    rep movsd
   1056c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:462
    call debugStep
   1056e:	e8 92 a6 00 00       	call   1ac05 <debugStep>
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:463
    popa
   10573:	61                   	popa   
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:464
    sti
   10574:	fb                   	sti    
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:465
    iretd
   10575:	cf                   	iret   

00010576 <_isr_32_wrapper>:
_isr_32_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:468
.global _isr_32_wrapper        
_isr_32_wrapper:
        mov exceptionSavedESP, esp
   10576:	89 25 ec 01 a0 00    	mov    DWORD PTR ds:0xa001ec,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:469
        mov exceptionAX,eax
   1057c:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:470
        mov exceptionBP, ebp
   10581:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:471
        mov     ebp, esp
   10587:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:472
        mov     ax, 0x20                  # save exception number
   10589:	66 b8 20 00          	mov    ax,0x20
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:473
        jmp isr_My_Common
   1058d:	e9 08 fc ff ff       	jmp    1019a <isr_My_Common>

00010592 <_irq0_handler>:
_irq0_handler():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:478


.global _irq0_handler
_irq0_handler:                #remapped to 0x08
cli
   10592:	fa                   	cli    
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:480
#cli;hlt;
        push    ebp
   10593:	55                   	push   ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:481
        pushf
   10594:	9c                   	pushf  
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:482
        mov     ebp, esp
   10595:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:483
        add ebp,4
   10597:	83 c5 04             	add    ebp,0x4
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:484
        push eax
   1059a:	50                   	push   eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:485
        mov ax,0xFFFF
   1059b:	66 b8 ff ff          	mov    ax,0xffff
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:486
cld
   1059f:	fc                   	cld    
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:488
#cld #C code following the sysV ABI requires DF to be clear on function entry
        push    ebx
   105a0:	53                   	push   ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:489
        mov ebx, [ebp+12]
   105a1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:490
        mov exceptionFlags, ebx
   105a4:	89 1d f0 01 a0 00    	mov    DWORD PTR ds:0xa001f0,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:491
        mov bx, [ebp+8]
   105aa:	66 8b 5d 08          	mov    bx,WORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:492
        mov exceptionCS, bx
   105ae:	66 89 1d fc 01 a0 00 	mov    WORD PTR ds:0xa001fc,bx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:493
        mov ebx, [ebp+4]
   105b5:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:494
        mov exceptionEIP, ebx
   105b8:	89 1d f8 01 a0 00    	mov    DWORD PTR ds:0xa001f8,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:495
        pop ebx
   105be:	5b                   	pop    ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:496
        pushad                          # other regs because its an ISR
   105bf:	60                   	pusha  
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:497
         mov     bx, 0x10
   105c0:	66 bb 10 00          	mov    bx,0x10
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:498
        mov     ds, bx
   105c4:	8e db                	mov    ds,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:499
        mov     es, bx                  # load ds and es with valid selector
   105c6:	8e c3                	mov    es,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:500
	mov     gs, bx
   105c8:	8e eb                	mov    gs,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:501
        call    irq0_handler          # call actual ISR code
   105ca:	e8 89 8a 00 00       	call   19058 <irq0_handler>
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:502
        popad  
   105cf:	61                   	popa   
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:503
mov al,0x20
   105d0:	b0 20                	mov    al,0x20
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:504
out 0x20,al
   105d2:	e6 20                	out    0x20,al
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:507
//mov eax,0
//mov [0xa000B0],eax
        pop eax
   105d4:	58                   	pop    eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:508
        popf
   105d5:	9d                   	popf   
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:509
        pop ebp                         # restoring the regs
   105d6:	5d                   	pop    ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:510
        sti
   105d7:	fb                   	sti    
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:511
        iretd
   105d8:	cf                   	iret   

000105d9 <_isr_01_wrapper>:
_isr_01_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:514
.global _isr_01_wrapper        
_isr_01_wrapper:                #KEYBOARD HANDLER
cli
   105d9:	fa                   	cli    
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:519
#cli;hlt;
        //clear the trap flag if it is set
        //we'll re-set it later if need be
        //andw [esp+8],0xFEFF
        mov exceptionAX, eax
   105da:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:520
        mov exceptionBX, ebx
   105df:	89 1d b4 01 a0 00    	mov    DWORD PTR ds:0xa001b4,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:521
        mov exceptionCX, ecx
   105e5:	89 0d b8 01 a0 00    	mov    DWORD PTR ds:0xa001b8,ecx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:522
        mov exceptionDX, edx
   105eb:	89 15 bc 01 a0 00    	mov    DWORD PTR ds:0xa001bc,edx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:523
        mov exceptionSI, esi
   105f1:	89 35 c0 01 a0 00    	mov    DWORD PTR ds:0xa001c0,esi
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:524
        mov exceptionDI, edi
   105f7:	89 3d c4 01 a0 00    	mov    DWORD PTR ds:0xa001c4,edi
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:525
        mov exceptionBP, ebp
   105fd:	89 2d c8 01 a0 00    	mov    DWORD PTR ds:0xa001c8,ebp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:526
        mov eax, cr0
   10603:	0f 20 c0             	mov    eax,cr0
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:527
        mov exceptionCR0, eax
   10606:	a3 cc 01 a0 00       	mov    ds:0xa001cc,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:528
        mov eax, cr3
   1060b:	0f 20 d8             	mov    eax,cr3
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:529
        mov exceptionCR3, eax
   1060e:	a3 d0 01 a0 00       	mov    ds:0xa001d0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:530
        mov eax, cr4
   10613:	0f 20 e0             	mov    eax,cr4
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:531
        mov exceptionCR4, eax
   10616:	a3 d4 01 a0 00       	mov    ds:0xa001d4,eax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:532
        mov eax, exceptionAX
   1061b:	a1 b0 01 a0 00       	mov    eax,ds:0xa001b0
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:533
        pushad
   10620:	60                   	pusha  
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:534
        pushf
   10621:	9c                   	pushf  
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:535
        mov     ebp, esp
   10622:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:536
        add ebp,4
   10624:	83 c5 04             	add    ebp,0x4
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:537
        mov ax,0x0001
   10627:	66 b8 01 00          	mov    ax,0x1
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:538
cld
   1062b:	fc                   	cld    
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:540
#cld #C code following the sysV ABI requires DF to be clear on function entry
        mov ebx, [ebp+8]
   1062c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:541
        mov exceptionFlags, ebx
   1062f:	89 1d f0 01 a0 00    	mov    DWORD PTR ds:0xa001f0,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:542
        mov bx, [ebp+4]
   10635:	66 8b 5d 04          	mov    bx,WORD PTR [ebp+0x4]
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:543
        mov exceptionCS, bx
   10639:	66 89 1d fc 01 a0 00 	mov    WORD PTR ds:0xa001fc,bx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:544
        mov ebx, [ebp+0]
   10640:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:545
        mov exceptionEIP, ebx
   10643:	89 1d f8 01 a0 00    	mov    DWORD PTR ds:0xa001f8,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:546
        mov     bx, 0x10
   10649:	66 bb 10 00          	mov    bx,0x10
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:547
        mov     ds, bx
   1064d:	8e db                	mov    ds,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:548
        mov     es, bx                  # load ds and es with valid selector
   1064f:	8e c3                	mov    es,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:549
	mov     gs, bx
   10651:	8e eb                	mov    gs,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:550
        call    kbd_handler          # call actual ISR code
   10653:	e8 4b 8b 00 00       	call   191a3 <kbd_handler>
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:551
        popf
   10658:	9d                   	popf   
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:552
        popad  
   10659:	61                   	popa   
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:553
mov al,0x20
   1065a:	b0 20                	mov    al,0x20
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:554
out 0x20,al
   1065c:	e6 20                	out    0x20,al
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:555
        mov     al,kKbdHandlerActivateDebugger
   1065e:	a0 74 65 09 00       	mov    al,ds:0x96574
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:556
        cmp     al,1
   10663:	3c 01                	cmp    al,0x1
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:557
        jne done
   10665:	75 13                	jne    1067a <done>
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:558
        orw [esp+8],0x100
   10667:	66 81 4c 24 08 00 01 	or     WORD PTR [esp+0x8],0x100
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:559
        mov al,0
   1066e:	b0 00                	mov    al,0x0
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:560
        mov kKbdHandlerActivateDebugger,al
   10670:	a2 74 65 09 00       	mov    ds:0x96574,al
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:561
        mov eax,exceptionAX
   10675:	a1 b0 01 a0 00       	mov    eax,ds:0xa001b0

0001067a <done>:
done():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:563
done:
        sti
   1067a:	fb                   	sti    
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:564
        iretd
   1067b:	cf                   	iret   

0001067c <_call_gate_wrapper>:
_call_gate_wrapper():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:570



.global _call_gate_wrapper
_call_gate_wrapper:
        push    ds
   1067c:	1e                   	push   ds
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:571
        push    es                      # saving segment registers and
   1067d:	06                   	push   es
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:572
        pushad                          # other regs because its an ISR
   1067e:	60                   	pusha  
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:574
 #       call    call_gate_proc
        popad                           # restoring the regs
   1067f:	61                   	popa   
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:575
        pop     es
   10680:	07                   	pop    es
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:576
        pop     ds
   10681:	1f                   	pop    ds
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:577
        retf
   10682:	cb                   	retf   

00010683 <_isr_has_errorCode>:
	...
_isr_has_errorCode():
   1068b:	01 00                	add    DWORD PTR [eax],eax
   1068d:	01 01                	add    DWORD PTR [ecx],eax
   1068f:	01 01                	add    DWORD PTR [ecx],eax
   10691:	01 00                	add    DWORD PTR [eax],eax
   10693:	00 01                	add    BYTE PTR [ecx],al
	...

000106a3 <_ltr>:
_ltr():
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:583

        _isr_has_errorCode:  .byte      0,0,0,0,0,0,0,0, 1,0,1,1,1,1,1,0
                             .byte      0,1,0,0,0,0,0,0, 0,0,0,0,0,0,0,0
.global _ltr
_ltr:
		push ax
   106a3:	66 50                	push   ax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:584
		mov ax, 0x58
   106a5:	66 b8 58 00          	mov    ax,0x58
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:585
        ltr     ax
   106a9:	0f 00 d8             	ltr    ax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:586
        pop ax
   106ac:	66 58                	pop    ax
/home/yogi/NetBeansProjects/chrisOS/asm/isr.s:587
        ret
   106ae:	c3                   	ret    
   106af:	90                   	nop

000106b0 <strftime>:
strftime():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:58

static char *_fmt(const char *format, const struct tm *t, char *pt, const char *ptlim);
static char *_conv(const int n, char *format, char *pt, const char *ptlim);
static char *_add(const char *str, char *pt, const char *ptlim);

size_t HIGH_CODE_SECTION strftime(char *s, size_t maxsize, const char *format, const struct tm *t) {
   106b0:	55                   	push   ebp
   106b1:	89 e5                	mov    ebp,esp
   106b3:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:61
  char *p;

  p = _fmt(((format == NULL) ? "%c" : format), t, s, s + maxsize);
   106b6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   106b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   106bc:	01 c2                	add    edx,eax
   106be:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   106c2:	74 05                	je     106c9 <strftime+0x19>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:61 (discriminator 1)
   106c4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   106c7:	eb 05                	jmp    106ce <strftime+0x1e>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:61 (discriminator 2)
   106c9:	b8 00 50 04 00       	mov    eax,0x45000
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:61 (discriminator 4)
   106ce:	52                   	push   edx
   106cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   106d2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   106d5:	50                   	push   eax
   106d6:	e8 2c 00 00 00       	call   10707 <_fmt>
   106db:	83 c4 10             	add    esp,0x10
   106de:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:62 (discriminator 4)
  if (p == s + maxsize) return 0;
   106e1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   106e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   106e7:	01 d0                	add    eax,edx
   106e9:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   106ec:	75 07                	jne    106f5 <strftime+0x45>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:62 (discriminator 1)
   106ee:	b8 00 00 00 00       	mov    eax,0x0
   106f3:	eb 10                	jmp    10705 <strftime+0x55>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:63
  *p = '\0';
   106f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   106f8:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:64
  return p - s;
   106fb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   106fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10701:	29 c2                	sub    edx,eax
   10703:	89 d0                	mov    eax,edx
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:65
}
   10705:	c9                   	leave  
   10706:	c3                   	ret    

00010707 <_fmt>:
_fmt():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:67

static HIGH_CODE_SECTION char *_fmt(const char *format, const struct tm *t, char *pt, const char *ptlim) {
   10707:	55                   	push   ebp
   10708:	89 e5                	mov    ebp,esp
   1070a:	53                   	push   ebx
   1070b:	83 ec 74             	sub    esp,0x74
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:68
  for ( ; *format; ++format) {
   1070e:	e9 68 0a 00 00       	jmp    1117b <_fmt+0xa74>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:69
    if (*format == '%') {
   10713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10716:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10719:	3c 25                	cmp    al,0x25
   1071b:	0f 85 3d 0a 00 00    	jne    1115e <_fmt+0xa57>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:70
      if (*format == 'E') {
   10721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10724:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10727:	3c 45                	cmp    al,0x45
   10729:	75 06                	jne    10731 <_fmt+0x2a>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:71
        format++; // Alternate Era
   1072b:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   1072f:	eb 0e                	jmp    1073f <_fmt+0x38>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:72
      } else if (*format == 'O') {
   10731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10734:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10737:	3c 4f                	cmp    al,0x4f
   10739:	75 04                	jne    1073f <_fmt+0x38>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:73
        format++; // Alternate numeric symbols
   1073b:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:76
      }

      switch (*++format) {
   1073f:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   10743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10746:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10749:	0f be c0             	movsx  eax,al
   1074c:	83 f8 7a             	cmp    eax,0x7a
   1074f:	0f 87 08 0a 00 00    	ja     1115d <_fmt+0xa56>
   10755:	8b 04 85 94 50 04 00 	mov    eax,DWORD PTR [eax*4+0x45094]
   1075c:	ff e0                	jmp    eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:78
        case '\0':
          --format;
   1075e:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:79
          break;
   10762:	e9 f7 09 00 00       	jmp    1115e <_fmt+0xa57>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:82

        case 'A':
          pt = _add((t->tm_wday < 0 || t->tm_wday > 6) ? "?" : _days[t->tm_wday], pt, ptlim);
   10767:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1076a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   1076d:	85 c0                	test   eax,eax
   1076f:	78 1a                	js     1078b <_fmt+0x84>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:82 (discriminator 1)
   10771:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10774:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10777:	83 f8 06             	cmp    eax,0x6
   1077a:	7f 0f                	jg     1078b <_fmt+0x84>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:82 (discriminator 3)
   1077c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1077f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10782:	8b 04 85 58 04 a0 00 	mov    eax,DWORD PTR [eax*4+0xa00458]
   10789:	eb 05                	jmp    10790 <_fmt+0x89>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:82 (discriminator 4)
   1078b:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:82 (discriminator 6)
   10790:	83 ec 04             	sub    esp,0x4
   10793:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10796:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10799:	50                   	push   eax
   1079a:	e8 27 0a 00 00       	call   111c6 <_add>
   1079f:	83 c4 10             	add    esp,0x10
   107a2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:83 (discriminator 6)
          continue;
   107a5:	e9 cd 09 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:86

        case 'a':
          pt = _add((t->tm_wday < 0 || t->tm_wday > 6) ? "?" : _days_abbrev[t->tm_wday], pt, ptlim);
   107aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107ad:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   107b0:	85 c0                	test   eax,eax
   107b2:	78 1a                	js     107ce <_fmt+0xc7>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:86 (discriminator 1)
   107b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107b7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   107ba:	83 f8 06             	cmp    eax,0x6
   107bd:	7f 0f                	jg     107ce <_fmt+0xc7>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:86 (discriminator 3)
   107bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107c2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   107c5:	8b 04 85 74 04 a0 00 	mov    eax,DWORD PTR [eax*4+0xa00474]
   107cc:	eb 05                	jmp    107d3 <_fmt+0xcc>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:86 (discriminator 4)
   107ce:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:86 (discriminator 6)
   107d3:	83 ec 04             	sub    esp,0x4
   107d6:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   107d9:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   107dc:	50                   	push   eax
   107dd:	e8 e4 09 00 00       	call   111c6 <_add>
   107e2:	83 c4 10             	add    esp,0x10
   107e5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:87 (discriminator 6)
          continue;
   107e8:	e9 8a 09 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:90

        case 'B':
          pt = _add((t->tm_mon < 0 || t->tm_mon > 11) ? "?" : _months[t->tm_mon], pt, ptlim);
   107ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107f0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   107f3:	85 c0                	test   eax,eax
   107f5:	78 1a                	js     10811 <_fmt+0x10a>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:90 (discriminator 1)
   107f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107fa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   107fd:	83 f8 0b             	cmp    eax,0xb
   10800:	7f 0f                	jg     10811 <_fmt+0x10a>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:90 (discriminator 3)
   10802:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10805:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10808:	8b 04 85 a0 04 a0 00 	mov    eax,DWORD PTR [eax*4+0xa004a0]
   1080f:	eb 05                	jmp    10816 <_fmt+0x10f>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:90 (discriminator 4)
   10811:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:90 (discriminator 6)
   10816:	83 ec 04             	sub    esp,0x4
   10819:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1081c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1081f:	50                   	push   eax
   10820:	e8 a1 09 00 00       	call   111c6 <_add>
   10825:	83 c4 10             	add    esp,0x10
   10828:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:91 (discriminator 6)
          continue;
   1082b:	e9 47 09 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:95

        case 'b':
        case 'h':
          pt = _add((t->tm_mon < 0 || t->tm_mon > 11) ? "?" : _months_abbrev[t->tm_mon], pt, ptlim);
   10830:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10833:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10836:	85 c0                	test   eax,eax
   10838:	78 1a                	js     10854 <_fmt+0x14d>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:95 (discriminator 1)
   1083a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1083d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10840:	83 f8 0b             	cmp    eax,0xb
   10843:	7f 0f                	jg     10854 <_fmt+0x14d>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:95 (discriminator 3)
   10845:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10848:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1084b:	8b 04 85 e0 04 a0 00 	mov    eax,DWORD PTR [eax*4+0xa004e0]
   10852:	eb 05                	jmp    10859 <_fmt+0x152>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:95 (discriminator 4)
   10854:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:95 (discriminator 6)
   10859:	83 ec 04             	sub    esp,0x4
   1085c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1085f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10862:	50                   	push   eax
   10863:	e8 5e 09 00 00       	call   111c6 <_add>
   10868:	83 c4 10             	add    esp,0x10
   1086b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:96 (discriminator 6)
          continue;
   1086e:	e9 04 09 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:99

        case 'C':
          pt = _conv((t->tm_year + TM_YEAR_BASE) / 100, "%02d", pt, ptlim);
   10873:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10876:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   10879:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   1087f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10884:	89 c8                	mov    eax,ecx
   10886:	f7 ea                	imul   edx
   10888:	c1 fa 05             	sar    edx,0x5
   1088b:	89 c8                	mov    eax,ecx
   1088d:	c1 f8 1f             	sar    eax,0x1f
   10890:	29 c2                	sub    edx,eax
   10892:	89 d0                	mov    eax,edx
   10894:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10897:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1089a:	68 05 50 04 00       	push   0x45005
   1089f:	50                   	push   eax
   108a0:	e8 ef 08 00 00       	call   11194 <_conv>
   108a5:	83 c4 10             	add    esp,0x10
   108a8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:100
          continue;
   108ab:	e9 c7 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:103

        case 'c':
          pt = _fmt("%a %b %e %H:%M:%S %Y", t, pt, ptlim);
   108b0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   108b3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   108b6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   108b9:	68 0a 50 04 00       	push   0x4500a
   108be:	e8 44 fe ff ff       	call   10707 <_fmt>
   108c3:	83 c4 10             	add    esp,0x10
   108c6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:104
          continue;
   108c9:	e9 a9 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:107

        case 'D':
          pt = _fmt("%m/%d/%y", t, pt, ptlim);
   108ce:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   108d1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   108d4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   108d7:	68 1f 50 04 00       	push   0x4501f
   108dc:	e8 26 fe ff ff       	call   10707 <_fmt>
   108e1:	83 c4 10             	add    esp,0x10
   108e4:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:108
          continue;
   108e7:	e9 8b 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:111

        case 'd':
          pt = _conv(t->tm_mday, "%02d", pt, ptlim);
   108ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   108ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   108f2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   108f5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   108f8:	68 05 50 04 00       	push   0x45005
   108fd:	50                   	push   eax
   108fe:	e8 91 08 00 00       	call   11194 <_conv>
   10903:	83 c4 10             	add    esp,0x10
   10906:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:112
          continue;
   10909:	e9 69 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:115

        case 'e':
          pt = _conv(t->tm_mday, "%2d", pt, ptlim);
   1090e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10911:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   10914:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10917:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1091a:	68 28 50 04 00       	push   0x45028
   1091f:	50                   	push   eax
   10920:	e8 6f 08 00 00       	call   11194 <_conv>
   10925:	83 c4 10             	add    esp,0x10
   10928:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:116
          continue;
   1092b:	e9 47 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:119

        case 'F':
          pt = _fmt("%Y-%m-%d", t, pt, ptlim);
   10930:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10933:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10936:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10939:	68 2c 50 04 00       	push   0x4502c
   1093e:	e8 c4 fd ff ff       	call   10707 <_fmt>
   10943:	83 c4 10             	add    esp,0x10
   10946:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:120
          continue;
   10949:	e9 29 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:123

        case 'H':
          pt = _conv(t->tm_hour, "%02d", pt, ptlim);
   1094e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10951:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   10954:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10957:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1095a:	68 05 50 04 00       	push   0x45005
   1095f:	50                   	push   eax
   10960:	e8 2f 08 00 00       	call   11194 <_conv>
   10965:	83 c4 10             	add    esp,0x10
   10968:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:124
          continue;
   1096b:	e9 07 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:127

        case 'I':
          pt = _conv((t->tm_hour % 12) ? (t->tm_hour % 12) : 12, "%02d", pt, ptlim);
   10970:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10973:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   10976:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   1097b:	89 c8                	mov    eax,ecx
   1097d:	f7 ea                	imul   edx
   1097f:	d1 fa                	sar    edx,1
   10981:	89 c8                	mov    eax,ecx
   10983:	c1 f8 1f             	sar    eax,0x1f
   10986:	29 c2                	sub    edx,eax
   10988:	89 d0                	mov    eax,edx
   1098a:	01 c0                	add    eax,eax
   1098c:	01 d0                	add    eax,edx
   1098e:	c1 e0 02             	shl    eax,0x2
   10991:	29 c1                	sub    ecx,eax
   10993:	89 ca                	mov    edx,ecx
   10995:	85 d2                	test   edx,edx
   10997:	74 27                	je     109c0 <_fmt+0x2b9>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:127 (discriminator 1)
   10999:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1099c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   1099f:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   109a4:	89 c8                	mov    eax,ecx
   109a6:	f7 ea                	imul   edx
   109a8:	d1 fa                	sar    edx,1
   109aa:	89 c8                	mov    eax,ecx
   109ac:	c1 f8 1f             	sar    eax,0x1f
   109af:	29 c2                	sub    edx,eax
   109b1:	89 d0                	mov    eax,edx
   109b3:	01 c0                	add    eax,eax
   109b5:	01 d0                	add    eax,edx
   109b7:	c1 e0 02             	shl    eax,0x2
   109ba:	29 c1                	sub    ecx,eax
   109bc:	89 ca                	mov    edx,ecx
   109be:	eb 05                	jmp    109c5 <_fmt+0x2be>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:127 (discriminator 2)
   109c0:	ba 0c 00 00 00       	mov    edx,0xc
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:127 (discriminator 4)
   109c5:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   109c8:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   109cb:	68 05 50 04 00       	push   0x45005
   109d0:	52                   	push   edx
   109d1:	e8 be 07 00 00       	call   11194 <_conv>
   109d6:	83 c4 10             	add    esp,0x10
   109d9:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:128 (discriminator 4)
          continue;
   109dc:	e9 96 07 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:131

        case 'j':
          pt = _conv(t->tm_yday + 1, "%03d", pt, ptlim);
   109e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   109e4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   109e7:	83 c0 01             	add    eax,0x1
   109ea:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   109ed:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   109f0:	68 35 50 04 00       	push   0x45035
   109f5:	50                   	push   eax
   109f6:	e8 99 07 00 00       	call   11194 <_conv>
   109fb:	83 c4 10             	add    esp,0x10
   109fe:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:132
          continue;
   10a01:	e9 71 07 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:135

        case 'k':
          pt = _conv(t->tm_hour, "%2d", pt, ptlim);
   10a06:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10a09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   10a0c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10a0f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10a12:	68 28 50 04 00       	push   0x45028
   10a17:	50                   	push   eax
   10a18:	e8 77 07 00 00       	call   11194 <_conv>
   10a1d:	83 c4 10             	add    esp,0x10
   10a20:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:136
          continue;
   10a23:	e9 4f 07 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:139

        case 'l':
          pt = _conv((t->tm_hour % 12) ? (t->tm_hour % 12) : 12, "%2d", pt, ptlim);
   10a28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10a2b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   10a2e:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   10a33:	89 c8                	mov    eax,ecx
   10a35:	f7 ea                	imul   edx
   10a37:	d1 fa                	sar    edx,1
   10a39:	89 c8                	mov    eax,ecx
   10a3b:	c1 f8 1f             	sar    eax,0x1f
   10a3e:	29 c2                	sub    edx,eax
   10a40:	89 d0                	mov    eax,edx
   10a42:	01 c0                	add    eax,eax
   10a44:	01 d0                	add    eax,edx
   10a46:	c1 e0 02             	shl    eax,0x2
   10a49:	29 c1                	sub    ecx,eax
   10a4b:	89 ca                	mov    edx,ecx
   10a4d:	85 d2                	test   edx,edx
   10a4f:	74 27                	je     10a78 <_fmt+0x371>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:139 (discriminator 1)
   10a51:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10a54:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   10a57:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   10a5c:	89 c8                	mov    eax,ecx
   10a5e:	f7 ea                	imul   edx
   10a60:	d1 fa                	sar    edx,1
   10a62:	89 c8                	mov    eax,ecx
   10a64:	c1 f8 1f             	sar    eax,0x1f
   10a67:	29 c2                	sub    edx,eax
   10a69:	89 d0                	mov    eax,edx
   10a6b:	01 c0                	add    eax,eax
   10a6d:	01 d0                	add    eax,edx
   10a6f:	c1 e0 02             	shl    eax,0x2
   10a72:	29 c1                	sub    ecx,eax
   10a74:	89 ca                	mov    edx,ecx
   10a76:	eb 05                	jmp    10a7d <_fmt+0x376>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:139 (discriminator 2)
   10a78:	ba 0c 00 00 00       	mov    edx,0xc
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:139 (discriminator 4)
   10a7d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10a80:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10a83:	68 28 50 04 00       	push   0x45028
   10a88:	52                   	push   edx
   10a89:	e8 06 07 00 00       	call   11194 <_conv>
   10a8e:	83 c4 10             	add    esp,0x10
   10a91:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:140 (discriminator 4)
          continue;
   10a94:	e9 de 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:143

        case 'M':
          pt = _conv(t->tm_min, "%02d", pt, ptlim);
   10a99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10a9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   10a9f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10aa2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10aa5:	68 05 50 04 00       	push   0x45005
   10aaa:	50                   	push   eax
   10aab:	e8 e4 06 00 00       	call   11194 <_conv>
   10ab0:	83 c4 10             	add    esp,0x10
   10ab3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:144
          continue;
   10ab6:	e9 bc 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:148

        case 'm':
          //CLR 05/02/2016 - removed odd +1 after tm_mon
          pt = _conv(t->tm_mon, "%02d", pt, ptlim);
   10abb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10abe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10ac1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10ac4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10ac7:	68 05 50 04 00       	push   0x45005
   10acc:	50                   	push   eax
   10acd:	e8 c2 06 00 00       	call   11194 <_conv>
   10ad2:	83 c4 10             	add    esp,0x10
   10ad5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:149
          continue;
   10ad8:	e9 9a 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:152

        case 'n':
          pt = _add("\n", pt, ptlim);
   10add:	83 ec 04             	sub    esp,0x4
   10ae0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10ae3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10ae6:	68 3a 50 04 00       	push   0x4503a
   10aeb:	e8 d6 06 00 00       	call   111c6 <_add>
   10af0:	83 c4 10             	add    esp,0x10
   10af3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:153
          continue;
   10af6:	e9 7c 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:156

        case 'p':
          pt = _add((t->tm_hour >= 12) ? "pm" : "am", pt, ptlim);
   10afb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10afe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   10b01:	83 f8 0b             	cmp    eax,0xb
   10b04:	7e 07                	jle    10b0d <_fmt+0x406>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:156 (discriminator 1)
   10b06:	b8 3c 50 04 00       	mov    eax,0x4503c
   10b0b:	eb 05                	jmp    10b12 <_fmt+0x40b>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:156 (discriminator 2)
   10b0d:	b8 3f 50 04 00       	mov    eax,0x4503f
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:156 (discriminator 4)
   10b12:	83 ec 04             	sub    esp,0x4
   10b15:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b18:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b1b:	50                   	push   eax
   10b1c:	e8 a5 06 00 00       	call   111c6 <_add>
   10b21:	83 c4 10             	add    esp,0x10
   10b24:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:157 (discriminator 4)
          continue;
   10b27:	e9 4b 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:160

        case 'R':
          pt = _fmt("%H:%M", t, pt, ptlim);
   10b2c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b2f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b32:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10b35:	68 42 50 04 00       	push   0x45042
   10b3a:	e8 c8 fb ff ff       	call   10707 <_fmt>
   10b3f:	83 c4 10             	add    esp,0x10
   10b42:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:161
          continue;
   10b45:	e9 2d 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:164

        case 'r':
          pt = _fmt("%I:%M:%S %p", t, pt, ptlim);
   10b4a:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b4d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b50:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10b53:	68 48 50 04 00       	push   0x45048
   10b58:	e8 aa fb ff ff       	call   10707 <_fmt>
   10b5d:	83 c4 10             	add    esp,0x10
   10b60:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:165
          continue;
   10b63:	e9 0f 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:168

        case 'S':
          pt = _conv(t->tm_sec, "%02d", pt, ptlim);
   10b68:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10b6b:	8b 00                	mov    eax,DWORD PTR [eax]
   10b6d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b70:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b73:	68 05 50 04 00       	push   0x45005
   10b78:	50                   	push   eax
   10b79:	e8 16 06 00 00       	call   11194 <_conv>
   10b7e:	83 c4 10             	add    esp,0x10
   10b81:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:169
          continue;
   10b84:	e9 ee 05 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:176
        case 's': {
          struct tm  tm;
          char buf[32];
          time_t mkt;

          tm = *t;
   10b89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10b8c:	8b 10                	mov    edx,DWORD PTR [eax]
   10b8e:	89 55 a8             	mov    DWORD PTR [ebp-0x58],edx
   10b91:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   10b94:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
   10b97:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   10b9a:	89 55 b0             	mov    DWORD PTR [ebp-0x50],edx
   10b9d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   10ba0:	89 55 b4             	mov    DWORD PTR [ebp-0x4c],edx
   10ba3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   10ba6:	89 55 b8             	mov    DWORD PTR [ebp-0x48],edx
   10ba9:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   10bac:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
   10baf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   10bb2:	89 55 c0             	mov    DWORD PTR [ebp-0x40],edx
   10bb5:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   10bb8:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
   10bbb:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
   10bbe:	89 55 c8             	mov    DWORD PTR [ebp-0x38],edx
   10bc1:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
   10bc4:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
   10bc7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   10bca:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:177
          mkt = mktime(&tm);
   10bcd:	83 ec 0c             	sub    esp,0xc
   10bd0:	8d 45 a8             	lea    eax,[ebp-0x58]
   10bd3:	50                   	push   eax
   10bd4:	e8 16 6e 01 00       	call   279ef <mktime>
   10bd9:	83 c4 10             	add    esp,0x10
   10bdc:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:178
          sprintf(buf, "%lu", mkt);
   10bdf:	83 ec 04             	sub    esp,0x4
   10be2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   10be5:	68 54 50 04 00       	push   0x45054
   10bea:	8d 45 88             	lea    eax,[ebp-0x78]
   10bed:	50                   	push   eax
   10bee:	e8 94 64 01 00       	call   27087 <sprintf>
   10bf3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:179
          pt = _add(buf, pt, ptlim);
   10bf6:	83 ec 04             	sub    esp,0x4
   10bf9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10bfc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10bff:	8d 45 88             	lea    eax,[ebp-0x78]
   10c02:	50                   	push   eax
   10c03:	e8 be 05 00 00       	call   111c6 <_add>
   10c08:	83 c4 10             	add    esp,0x10
   10c0b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
   10c0e:	e9 64 05 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:184
          continue;
        }

        case 'T':
          pt = _fmt("%H:%M:%S", t, pt, ptlim);
   10c13:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10c16:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10c19:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10c1c:	68 58 50 04 00       	push   0x45058
   10c21:	e8 e1 fa ff ff       	call   10707 <_fmt>
   10c26:	83 c4 10             	add    esp,0x10
   10c29:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:185
          continue;
   10c2c:	e9 46 05 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:188

        case 't':
          pt = _add("\t", pt, ptlim);
   10c31:	83 ec 04             	sub    esp,0x4
   10c34:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10c37:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10c3a:	68 61 50 04 00       	push   0x45061
   10c3f:	e8 82 05 00 00       	call   111c6 <_add>
   10c44:	83 c4 10             	add    esp,0x10
   10c47:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:189
          continue;
   10c4a:	e9 28 05 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:192

        case 'U':
          pt = _conv((t->tm_yday + 7 - t->tm_wday) / 7, "%02d", pt, ptlim);
   10c4f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10c52:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   10c55:	8d 50 07             	lea    edx,[eax+0x7]
   10c58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10c5b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10c5e:	89 d1                	mov    ecx,edx
   10c60:	29 c1                	sub    ecx,eax
   10c62:	ba 93 24 49 92       	mov    edx,0x92492493
   10c67:	89 c8                	mov    eax,ecx
   10c69:	f7 ea                	imul   edx
   10c6b:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10c6e:	c1 f8 02             	sar    eax,0x2
   10c71:	89 c2                	mov    edx,eax
   10c73:	89 c8                	mov    eax,ecx
   10c75:	c1 f8 1f             	sar    eax,0x1f
   10c78:	29 c2                	sub    edx,eax
   10c7a:	89 d0                	mov    eax,edx
   10c7c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10c7f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10c82:	68 05 50 04 00       	push   0x45005
   10c87:	50                   	push   eax
   10c88:	e8 07 05 00 00       	call   11194 <_conv>
   10c8d:	83 c4 10             	add    esp,0x10
   10c90:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:193
          continue;
   10c93:	e9 df 04 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:196

        case 'u':
          pt = _conv((t->tm_wday == 0) ? 7 : t->tm_wday, "%d", pt, ptlim);
   10c98:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10c9b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10c9e:	85 c0                	test   eax,eax
   10ca0:	74 08                	je     10caa <_fmt+0x5a3>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:196 (discriminator 1)
   10ca2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10ca5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10ca8:	eb 05                	jmp    10caf <_fmt+0x5a8>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:196 (discriminator 2)
   10caa:	b8 07 00 00 00       	mov    eax,0x7
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:196 (discriminator 4)
   10caf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10cb2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10cb5:	68 63 50 04 00       	push   0x45063
   10cba:	50                   	push   eax
   10cbb:	e8 d4 04 00 00       	call   11194 <_conv>
   10cc0:	83 c4 10             	add    esp,0x10
   10cc3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:197 (discriminator 4)
          continue;
   10cc6:	e9 ac 04 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:207
          int  year;
          int  yday;
          int  wday;
          int  w;

          year = t->tm_year + TM_YEAR_BASE;
   10ccb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10cce:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   10cd1:	05 6c 07 00 00       	add    eax,0x76c
   10cd6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:208
          yday = t->tm_yday;
   10cd9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10cdc:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   10cdf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:209
          wday = t->tm_wday;
   10ce2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10ce5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10ce8:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:215
          while (1) {
            int  len;
            int  bot;
            int  top;

            len = LEAPYEAR(year) ? DAYSPERLYEAR : DAYSPERNYEAR;
   10ceb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   10cee:	83 e0 03             	and    eax,0x3
   10cf1:	85 c0                	test   eax,eax
   10cf3:	75 50                	jne    10d45 <_fmt+0x63e>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:215 (discriminator 1)
   10cf5:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10cf8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10cfd:	89 c8                	mov    eax,ecx
   10cff:	f7 ea                	imul   edx
   10d01:	c1 fa 05             	sar    edx,0x5
   10d04:	89 c8                	mov    eax,ecx
   10d06:	c1 f8 1f             	sar    eax,0x1f
   10d09:	29 c2                	sub    edx,eax
   10d0b:	89 d0                	mov    eax,edx
   10d0d:	6b c0 64             	imul   eax,eax,0x64
   10d10:	29 c1                	sub    ecx,eax
   10d12:	89 c8                	mov    eax,ecx
   10d14:	85 c0                	test   eax,eax
   10d16:	75 26                	jne    10d3e <_fmt+0x637>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:215 (discriminator 4)
   10d18:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10d1b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10d20:	89 c8                	mov    eax,ecx
   10d22:	f7 ea                	imul   edx
   10d24:	c1 fa 07             	sar    edx,0x7
   10d27:	89 c8                	mov    eax,ecx
   10d29:	c1 f8 1f             	sar    eax,0x1f
   10d2c:	29 c2                	sub    edx,eax
   10d2e:	89 d0                	mov    eax,edx
   10d30:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   10d36:	29 c1                	sub    ecx,eax
   10d38:	89 c8                	mov    eax,ecx
   10d3a:	85 c0                	test   eax,eax
   10d3c:	75 07                	jne    10d45 <_fmt+0x63e>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:215 (discriminator 5)
   10d3e:	b8 6e 01 00 00       	mov    eax,0x16e
   10d43:	eb 05                	jmp    10d4a <_fmt+0x643>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:215 (discriminator 6)
   10d45:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:215 (discriminator 8)
   10d4a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:216 (discriminator 8)
            bot = ((yday + 11 - wday) % DAYSPERWEEK) - 3;
   10d4d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10d50:	83 c0 0b             	add    eax,0xb
   10d53:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
   10d56:	89 c1                	mov    ecx,eax
   10d58:	ba 93 24 49 92       	mov    edx,0x92492493
   10d5d:	89 c8                	mov    eax,ecx
   10d5f:	f7 ea                	imul   edx
   10d61:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10d64:	c1 f8 02             	sar    eax,0x2
   10d67:	89 c2                	mov    edx,eax
   10d69:	89 c8                	mov    eax,ecx
   10d6b:	c1 f8 1f             	sar    eax,0x1f
   10d6e:	29 c2                	sub    edx,eax
   10d70:	89 d0                	mov    eax,edx
   10d72:	89 c2                	mov    edx,eax
   10d74:	c1 e2 03             	shl    edx,0x3
   10d77:	29 c2                	sub    edx,eax
   10d79:	89 c8                	mov    eax,ecx
   10d7b:	29 d0                	sub    eax,edx
   10d7d:	83 e8 03             	sub    eax,0x3
   10d80:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:217 (discriminator 8)
            top = bot - (len % DAYSPERWEEK);
   10d83:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   10d86:	ba 93 24 49 92       	mov    edx,0x92492493
   10d8b:	89 c8                	mov    eax,ecx
   10d8d:	f7 ea                	imul   edx
   10d8f:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10d92:	c1 f8 02             	sar    eax,0x2
   10d95:	89 c2                	mov    edx,eax
   10d97:	89 c8                	mov    eax,ecx
   10d99:	c1 f8 1f             	sar    eax,0x1f
   10d9c:	29 c2                	sub    edx,eax
   10d9e:	89 d0                	mov    eax,edx
   10da0:	89 c2                	mov    edx,eax
   10da2:	c1 e2 03             	shl    edx,0x3
   10da5:	29 c2                	sub    edx,eax
   10da7:	89 c8                	mov    eax,ecx
   10da9:	29 d0                	sub    eax,edx
   10dab:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
   10dae:	29 c2                	sub    edx,eax
   10db0:	89 d0                	mov    eax,edx
   10db2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:218 (discriminator 8)
            if (top < -3) top += DAYSPERWEEK;
   10db5:	83 7d e8 fd          	cmp    DWORD PTR [ebp-0x18],0xfffffffd
   10db9:	7d 04                	jge    10dbf <_fmt+0x6b8>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:218 (discriminator 1)
   10dbb:	83 45 e8 07          	add    DWORD PTR [ebp-0x18],0x7
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:219
            top += len;
   10dbf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   10dc2:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:220
            if (yday >= top) {
   10dc5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10dc8:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   10dcb:	7c 10                	jl     10ddd <_fmt+0x6d6>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:221
              ++year;
   10dcd:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:222
              w = 1;
   10dd1:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:223
              break;
   10dd8:	e9 9d 00 00 00       	jmp    10e7a <_fmt+0x773>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:225
            }
            if (yday >= bot) {
   10ddd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10de0:	3b 45 d4             	cmp    eax,DWORD PTR [ebp-0x2c]
   10de3:	7c 2a                	jl     10e0f <_fmt+0x708>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:226
              w = 1 + ((yday - bot) / DAYSPERWEEK);
   10de5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10de8:	2b 45 d4             	sub    eax,DWORD PTR [ebp-0x2c]
   10deb:	89 c1                	mov    ecx,eax
   10ded:	ba 93 24 49 92       	mov    edx,0x92492493
   10df2:	89 c8                	mov    eax,ecx
   10df4:	f7 ea                	imul   edx
   10df6:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10df9:	c1 f8 02             	sar    eax,0x2
   10dfc:	89 c2                	mov    edx,eax
   10dfe:	89 c8                	mov    eax,ecx
   10e00:	c1 f8 1f             	sar    eax,0x1f
   10e03:	29 c2                	sub    edx,eax
   10e05:	89 d0                	mov    eax,edx
   10e07:	83 c0 01             	add    eax,0x1
   10e0a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:227
              break;
   10e0d:	eb 6b                	jmp    10e7a <_fmt+0x773>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:229
            }
            --year;
   10e0f:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:230
            yday += LEAPYEAR(year) ? DAYSPERLYEAR : DAYSPERNYEAR;
   10e13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   10e16:	83 e0 03             	and    eax,0x3
   10e19:	85 c0                	test   eax,eax
   10e1b:	75 50                	jne    10e6d <_fmt+0x766>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:230 (discriminator 1)
   10e1d:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10e20:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10e25:	89 c8                	mov    eax,ecx
   10e27:	f7 ea                	imul   edx
   10e29:	c1 fa 05             	sar    edx,0x5
   10e2c:	89 c8                	mov    eax,ecx
   10e2e:	c1 f8 1f             	sar    eax,0x1f
   10e31:	29 c2                	sub    edx,eax
   10e33:	89 d0                	mov    eax,edx
   10e35:	6b c0 64             	imul   eax,eax,0x64
   10e38:	29 c1                	sub    ecx,eax
   10e3a:	89 c8                	mov    eax,ecx
   10e3c:	85 c0                	test   eax,eax
   10e3e:	75 26                	jne    10e66 <_fmt+0x75f>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:230 (discriminator 4)
   10e40:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10e43:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10e48:	89 c8                	mov    eax,ecx
   10e4a:	f7 ea                	imul   edx
   10e4c:	c1 fa 07             	sar    edx,0x7
   10e4f:	89 c8                	mov    eax,ecx
   10e51:	c1 f8 1f             	sar    eax,0x1f
   10e54:	29 c2                	sub    edx,eax
   10e56:	89 d0                	mov    eax,edx
   10e58:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   10e5e:	29 c1                	sub    ecx,eax
   10e60:	89 c8                	mov    eax,ecx
   10e62:	85 c0                	test   eax,eax
   10e64:	75 07                	jne    10e6d <_fmt+0x766>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:230 (discriminator 5)
   10e66:	b8 6e 01 00 00       	mov    eax,0x16e
   10e6b:	eb 05                	jmp    10e72 <_fmt+0x76b>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:230 (discriminator 6)
   10e6d:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:230 (discriminator 8)
   10e72:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:231 (discriminator 8)
          }
   10e75:	e9 71 fe ff ff       	jmp    10ceb <_fmt+0x5e4>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:232
          if (*format == 'V') {
   10e7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10e7d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10e80:	3c 56                	cmp    al,0x56
   10e82:	75 1e                	jne    10ea2 <_fmt+0x79b>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:233
            pt = _conv(w, "%02d", pt, ptlim);
   10e84:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10e87:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10e8a:	68 05 50 04 00       	push   0x45005
   10e8f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   10e92:	e8 fd 02 00 00       	call   11194 <_conv>
   10e97:	83 c4 10             	add    esp,0x10
   10e9a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:239
          } else if (*format == 'g') {
            pt = _conv(year % 100, "%02d", pt, ptlim);
          } else {
            pt = _conv(year, "%04d", pt, ptlim);
          }
          continue;
   10e9d:	e9 d5 02 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:234
            --year;
            yday += LEAPYEAR(year) ? DAYSPERLYEAR : DAYSPERNYEAR;
          }
          if (*format == 'V') {
            pt = _conv(w, "%02d", pt, ptlim);
          } else if (*format == 'g') {
   10ea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10ea5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10ea8:	3c 67                	cmp    al,0x67
   10eaa:	75 3b                	jne    10ee7 <_fmt+0x7e0>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:235
            pt = _conv(year % 100, "%02d", pt, ptlim);
   10eac:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10eaf:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10eb4:	89 c8                	mov    eax,ecx
   10eb6:	f7 ea                	imul   edx
   10eb8:	c1 fa 05             	sar    edx,0x5
   10ebb:	89 c8                	mov    eax,ecx
   10ebd:	c1 f8 1f             	sar    eax,0x1f
   10ec0:	29 c2                	sub    edx,eax
   10ec2:	89 d0                	mov    eax,edx
   10ec4:	6b c0 64             	imul   eax,eax,0x64
   10ec7:	29 c1                	sub    ecx,eax
   10ec9:	89 c8                	mov    eax,ecx
   10ecb:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10ece:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10ed1:	68 05 50 04 00       	push   0x45005
   10ed6:	50                   	push   eax
   10ed7:	e8 b8 02 00 00       	call   11194 <_conv>
   10edc:	83 c4 10             	add    esp,0x10
   10edf:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:239
          } else {
            pt = _conv(year, "%04d", pt, ptlim);
          }
          continue;
   10ee2:	e9 90 02 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:237
          if (*format == 'V') {
            pt = _conv(w, "%02d", pt, ptlim);
          } else if (*format == 'g') {
            pt = _conv(year % 100, "%02d", pt, ptlim);
          } else {
            pt = _conv(year, "%04d", pt, ptlim);
   10ee7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10eea:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10eed:	68 66 50 04 00       	push   0x45066
   10ef2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   10ef5:	e8 9a 02 00 00       	call   11194 <_conv>
   10efa:	83 c4 10             	add    esp,0x10
   10efd:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:239
          }
          continue;
   10f00:	e9 72 02 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:243
        }

        case 'v':
          pt = _fmt("%e-%b-%Y", t, pt, ptlim);
   10f05:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10f08:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10f0b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10f0e:	68 6b 50 04 00       	push   0x4506b
   10f13:	e8 ef f7 ff ff       	call   10707 <_fmt>
   10f18:	83 c4 10             	add    esp,0x10
   10f1b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:244
          continue;
   10f1e:	e9 54 02 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:247

        case 'W':
          pt = _conv((t->tm_yday + 7 - (t->tm_wday ? (t->tm_wday - 1) : 6)) / 7, "%02d", pt, ptlim);
   10f23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f26:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   10f29:	8d 50 07             	lea    edx,[eax+0x7]
   10f2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f2f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10f32:	85 c0                	test   eax,eax
   10f34:	74 0b                	je     10f41 <_fmt+0x83a>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:247 (discriminator 1)
   10f36:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f39:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10f3c:	83 e8 01             	sub    eax,0x1
   10f3f:	eb 05                	jmp    10f46 <_fmt+0x83f>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:247 (discriminator 2)
   10f41:	b8 06 00 00 00       	mov    eax,0x6
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:247 (discriminator 4)
   10f46:	89 d1                	mov    ecx,edx
   10f48:	29 c1                	sub    ecx,eax
   10f4a:	ba 93 24 49 92       	mov    edx,0x92492493
   10f4f:	89 c8                	mov    eax,ecx
   10f51:	f7 ea                	imul   edx
   10f53:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10f56:	c1 f8 02             	sar    eax,0x2
   10f59:	89 c2                	mov    edx,eax
   10f5b:	89 c8                	mov    eax,ecx
   10f5d:	c1 f8 1f             	sar    eax,0x1f
   10f60:	29 c2                	sub    edx,eax
   10f62:	89 d0                	mov    eax,edx
   10f64:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10f67:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10f6a:	68 05 50 04 00       	push   0x45005
   10f6f:	50                   	push   eax
   10f70:	e8 1f 02 00 00       	call   11194 <_conv>
   10f75:	83 c4 10             	add    esp,0x10
   10f78:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:248 (discriminator 4)
          continue;
   10f7b:	e9 f7 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:251

        case 'w':
          pt = _conv(t->tm_wday, "%d", pt, ptlim);
   10f80:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f83:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10f86:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10f89:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10f8c:	68 63 50 04 00       	push   0x45063
   10f91:	50                   	push   eax
   10f92:	e8 fd 01 00 00       	call   11194 <_conv>
   10f97:	83 c4 10             	add    esp,0x10
   10f9a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:252
          continue;
   10f9d:	e9 d5 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:255

        case 'X':
          pt = _fmt("%H:%M:%S", t, pt, ptlim);
   10fa2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10fa5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10fa8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10fab:	68 58 50 04 00       	push   0x45058
   10fb0:	e8 52 f7 ff ff       	call   10707 <_fmt>
   10fb5:	83 c4 10             	add    esp,0x10
   10fb8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:256
          continue;
   10fbb:	e9 b7 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:259

        case 'x':
          pt = _fmt("%m/%d/%y", t, pt, ptlim);
   10fc0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10fc3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10fc6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10fc9:	68 1f 50 04 00       	push   0x4501f
   10fce:	e8 34 f7 ff ff       	call   10707 <_fmt>
   10fd3:	83 c4 10             	add    esp,0x10
   10fd6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:260
          continue;
   10fd9:	e9 99 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:263

        case 'y':
          pt = _conv((t->tm_year + TM_YEAR_BASE) % 100, "%02d", pt, ptlim);
   10fde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10fe1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   10fe4:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   10fea:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10fef:	89 c8                	mov    eax,ecx
   10ff1:	f7 ea                	imul   edx
   10ff3:	c1 fa 05             	sar    edx,0x5
   10ff6:	89 c8                	mov    eax,ecx
   10ff8:	c1 f8 1f             	sar    eax,0x1f
   10ffb:	29 c2                	sub    edx,eax
   10ffd:	89 d0                	mov    eax,edx
   10fff:	6b c0 64             	imul   eax,eax,0x64
   11002:	29 c1                	sub    ecx,eax
   11004:	89 c8                	mov    eax,ecx
   11006:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   11009:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1100c:	68 05 50 04 00       	push   0x45005
   11011:	50                   	push   eax
   11012:	e8 7d 01 00 00       	call   11194 <_conv>
   11017:	83 c4 10             	add    esp,0x10
   1101a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:264
          continue;
   1101d:	e9 55 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:267

        case 'Y':
          pt = _conv(t->tm_year + TM_YEAR_BASE, "%04d", pt, ptlim);
   11022:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11025:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   11028:	05 6c 07 00 00       	add    eax,0x76c
   1102d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   11030:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11033:	68 66 50 04 00       	push   0x45066
   11038:	50                   	push   eax
   11039:	e8 56 01 00 00       	call   11194 <_conv>
   1103e:	83 c4 10             	add    esp,0x10
   11041:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:268
          continue;
   11044:	e9 2e 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:271

        case 'Z':
          pt = _add("?", pt, ptlim);
   11049:	83 ec 04             	sub    esp,0x4
   1104c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1104f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11052:	68 03 50 04 00       	push   0x45003
   11057:	e8 6a 01 00 00       	call   111c6 <_add>
   1105c:	83 c4 10             	add    esp,0x10
   1105f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:272
          continue;
   11062:	e9 10 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:276

        case 'z': {
          long absoff;
          if (kTimeZone >= 0) {
   11067:	a1 90 02 a0 00       	mov    eax,ds:0xa00290
   1106c:	85 c0                	test   eax,eax
   1106e:	78 23                	js     11093 <_fmt+0x98c>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:277
            absoff = kTimeZone;
   11070:	a1 90 02 a0 00       	mov    eax,ds:0xa00290
   11075:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:278
            pt = _add("+", pt, ptlim);
   11078:	83 ec 04             	sub    esp,0x4
   1107b:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1107e:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11081:	68 74 50 04 00       	push   0x45074
   11086:	e8 3b 01 00 00       	call   111c6 <_add>
   1108b:	83 c4 10             	add    esp,0x10
   1108e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
   11091:	eb 21                	jmp    110b4 <_fmt+0x9ad>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:280
          } else {
            absoff = kTimeZone;
   11093:	a1 90 02 a0 00       	mov    eax,ds:0xa00290
   11098:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:281
            pt = _add("-", pt, ptlim);
   1109b:	83 ec 04             	sub    esp,0x4
   1109e:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   110a1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   110a4:	68 76 50 04 00       	push   0x45076
   110a9:	e8 18 01 00 00       	call   111c6 <_add>
   110ae:	83 c4 10             	add    esp,0x10
   110b1:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:283
          }
          pt = _conv(absoff / 3600, "%02d", pt, ptlim);
   110b4:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
   110b7:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   110bc:	89 c8                	mov    eax,ecx
   110be:	f7 ea                	imul   edx
   110c0:	8d 04 0a             	lea    eax,[edx+ecx*1]
   110c3:	c1 f8 0b             	sar    eax,0xb
   110c6:	89 c2                	mov    edx,eax
   110c8:	89 c8                	mov    eax,ecx
   110ca:	c1 f8 1f             	sar    eax,0x1f
   110cd:	29 c2                	sub    edx,eax
   110cf:	89 d0                	mov    eax,edx
   110d1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   110d4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   110d7:	68 05 50 04 00       	push   0x45005
   110dc:	50                   	push   eax
   110dd:	e8 b2 00 00 00       	call   11194 <_conv>
   110e2:	83 c4 10             	add    esp,0x10
   110e5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:284
          pt = _conv((absoff % 3600) / 60, "%02d", pt, ptlim);
   110e8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
   110eb:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   110f0:	89 d8                	mov    eax,ebx
   110f2:	f7 ea                	imul   edx
   110f4:	8d 04 1a             	lea    eax,[edx+ebx*1]
   110f7:	c1 f8 0b             	sar    eax,0xb
   110fa:	89 c2                	mov    edx,eax
   110fc:	89 d8                	mov    eax,ebx
   110fe:	c1 f8 1f             	sar    eax,0x1f
   11101:	89 d1                	mov    ecx,edx
   11103:	29 c1                	sub    ecx,eax
   11105:	69 c1 10 0e 00 00    	imul   eax,ecx,0xe10
   1110b:	29 c3                	sub    ebx,eax
   1110d:	89 d9                	mov    ecx,ebx
   1110f:	ba 89 88 88 88       	mov    edx,0x88888889
   11114:	89 c8                	mov    eax,ecx
   11116:	f7 ea                	imul   edx
   11118:	8d 04 0a             	lea    eax,[edx+ecx*1]
   1111b:	c1 f8 05             	sar    eax,0x5
   1111e:	89 c2                	mov    edx,eax
   11120:	89 c8                	mov    eax,ecx
   11122:	c1 f8 1f             	sar    eax,0x1f
   11125:	29 c2                	sub    edx,eax
   11127:	89 d0                	mov    eax,edx
   11129:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1112c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1112f:	68 05 50 04 00       	push   0x45005
   11134:	50                   	push   eax
   11135:	e8 5a 00 00 00       	call   11194 <_conv>
   1113a:	83 c4 10             	add    esp,0x10
   1113d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:286

          continue;
   11140:	eb 35                	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:290
        }

        case '+':
          pt = _fmt("%a, %d %b %Y %H:%M:%S %z", t, pt, ptlim);
   11142:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   11145:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11148:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1114b:	68 78 50 04 00       	push   0x45078
   11150:	e8 b2 f5 ff ff       	call   10707 <_fmt>
   11155:	83 c4 10             	add    esp,0x10
   11158:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:291
          continue;
   1115b:	eb 1a                	jmp    11177 <_fmt+0xa70>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:295

        case '%':
        default:
          break;
   1115d:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:299
      }
    }

    if (pt == ptlim) break;
   1115e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11161:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
   11164:	74 25                	je     1118b <_fmt+0xa84>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:300
    *pt++ = *format;
   11166:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11169:	8d 50 01             	lea    edx,[eax+0x1]
   1116c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   1116f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   11172:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   11175:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:68
  *p = '\0';
  return p - s;
}

static HIGH_CODE_SECTION char *_fmt(const char *format, const struct tm *t, char *pt, const char *ptlim) {
  for ( ; *format; ++format) {
   11177:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:68 (discriminator 1)
   1117b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1117e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11181:	84 c0                	test   al,al
   11183:	0f 85 8a f5 ff ff    	jne    10713 <_fmt+0xc>
   11189:	eb 01                	jmp    1118c <_fmt+0xa85>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:299
        default:
          break;
      }
    }

    if (pt == ptlim) break;
   1118b:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:303
    *pt++ = *format;
  }

  return pt;
   1118c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:304
}
   1118f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   11192:	c9                   	leave  
   11193:	c3                   	ret    

00011194 <_conv>:
_conv():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:306

static char *_conv(const int n, char *format, char *pt, const char *ptlim) {
   11194:	55                   	push   ebp
   11195:	89 e5                	mov    ebp,esp
   11197:	83 ec 28             	sub    esp,0x28
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:309
  char  buf[32];

  sprintf(buf, format, n);
   1119a:	83 ec 04             	sub    esp,0x4
   1119d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   111a0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   111a3:	8d 45 d8             	lea    eax,[ebp-0x28]
   111a6:	50                   	push   eax
   111a7:	e8 db 5e 01 00       	call   27087 <sprintf>
   111ac:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:310
  return _add(buf, pt, ptlim);
   111af:	83 ec 04             	sub    esp,0x4
   111b2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   111b5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   111b8:	8d 45 d8             	lea    eax,[ebp-0x28]
   111bb:	50                   	push   eax
   111bc:	e8 05 00 00 00       	call   111c6 <_add>
   111c1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:311
}
   111c4:	c9                   	leave  
   111c5:	c3                   	ret    

000111c6 <_add>:
_add():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:313

static char *_add(const char *str, char *pt, const char *ptlim) {
   111c6:	55                   	push   ebp
   111c7:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:314
  while (pt < ptlim && (*pt = *str++) != '\0') ++pt;
   111c9:	eb 04                	jmp    111cf <_add+0x9>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:314 (discriminator 3)
   111cb:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:314 (discriminator 1)
   111cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   111d2:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   111d5:	73 1b                	jae    111f2 <_add+0x2c>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:314 (discriminator 2)
   111d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   111da:	8d 50 01             	lea    edx,[eax+0x1]
   111dd:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   111e0:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   111e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   111e6:	88 10                	mov    BYTE PTR [eax],dl
   111e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   111eb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   111ee:	84 c0                	test   al,al
   111f0:	75 d9                	jne    111cb <_add+0x5>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:315
  return pt;
   111f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/NetBeansProjects/chrisOS/src/char/console/strftime.c:316
}
   111f5:	5d                   	pop    ebp
   111f6:	c3                   	ret    
   111f7:	90                   	nop

000111f8 <keyboardGetKeyFromBuffer>:
keyboardGetKeyFromBuffer():
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:17

//Get a key from the keyboard buffer
//Curr moves when a key is put into the buffer
//Base moves when a key is taken from the buffer
uint8_t keyboardGetKeyFromBuffer()
{
   111f8:	55                   	push   ebp
   111f9:	89 e5                	mov    ebp,esp
   111fb:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:18
    char lTemp=0;
   111fe:	c6 45 ff 00          	mov    BYTE PTR [ebp-0x1],0x0
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:20
    //printd(DEBUG_KEYBOARD,"\nkKeyboardBuffer=0x%08X, kKeyboardBufferBase=0x%08X, &kKeyboardBufferBase=0x%08X\n",kKeyboardBuffer, kKeyboardBufferBase,&kKeyboardBufferBase);
    if (kKeyboardBufferBase<=kKeyboardBuffer)
   11202:	8b 15 24 04 a0 00    	mov    edx,DWORD PTR ds:0xa00424
   11208:	a1 e0 03 a0 00       	mov    eax,ds:0xa003e0
   1120d:	39 c2                	cmp    edx,eax
   1120f:	77 16                	ja     11227 <keyboardGetKeyFromBuffer+0x2f>
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:22
    {
        __asm__("cli\n");
   11211:	fa                   	cli    
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:23
        lTemp=*kKeyboardBufferBase++;
   11212:	a1 24 04 a0 00       	mov    eax,ds:0xa00424
   11217:	8d 50 01             	lea    edx,[eax+0x1]
   1121a:	89 15 24 04 a0 00    	mov    DWORD PTR ds:0xa00424,edx
   11220:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11223:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:24
        __asm__("sti\n");
   11226:	fb                   	sti    
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:26
    }
    if (kKeyboardBufferBase>kKeyboardBuffer)
   11227:	8b 15 24 04 a0 00    	mov    edx,DWORD PTR ds:0xa00424
   1122d:	a1 e0 03 a0 00       	mov    eax,ds:0xa003e0
   11232:	39 c2                	cmp    edx,eax
   11234:	76 16                	jbe    1124c <keyboardGetKeyFromBuffer+0x54>
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:28
    {
        __asm__("cli\n");
   11236:	fa                   	cli    
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:29
        kKeyboardBufferBase=(char*)KEYBOARD_BUFFER_ADDRESS;
   11237:	c7 05 24 04 a0 00 c0 	mov    DWORD PTR ds:0xa00424,0x1032c0
   1123e:	32 10 00 
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:30
        kKeyboardBuffer=(char*)KEYBOARD_BUFFER_ADDRESS-1;
   11241:	c7 05 e0 03 a0 00 bf 	mov    DWORD PTR ds:0xa003e0,0x1032bf
   11248:	32 10 00 
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:31
        __asm__("sti\n");
   1124b:	fb                   	sti    
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:33
    }
    return lTemp;
   1124c:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:34
}
   11250:	c9                   	leave  
   11251:	c3                   	ret    

00011252 <waitForKeyboardKey>:
waitForKeyboardKey():
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:37

char waitForKeyboardKey()
{
   11252:	55                   	push   ebp
   11253:	89 e5                	mov    ebp,esp
   11255:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:38
    printd(DEBUG_KEYBOARD,"gKbd-W, %04X\t", kKeyboardBuffer);
   11258:	a1 e0 03 a0 00       	mov    eax,ds:0xa003e0
   1125d:	83 ec 04             	sub    esp,0x4
   11260:	50                   	push   eax
   11261:	68 80 52 04 00       	push   0x45280
   11266:	6a 10                	push   0x10
   11268:	e8 e6 5d 01 00       	call   27053 <printd>
   1126d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:39
    char lTemp=0;
   11270:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:40
    printd(DEBUG_KEYBOARD,"kKeyboardBuffer=%04X\n", kKeyboardBuffer);
   11274:	a1 e0 03 a0 00       	mov    eax,ds:0xa003e0
   11279:	83 ec 04             	sub    esp,0x4
   1127c:	50                   	push   eax
   1127d:	68 8e 52 04 00       	push   0x4528e
   11282:	6a 10                	push   0x10
   11284:	e8 ca 5d 01 00       	call   27053 <printd>
   11289:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:42

    while (kKeyboardBuffer==(char*)KEYBOARD_BUFFER_ADDRESS)
   1128c:	eb 26                	jmp    112b4 <waitForKeyboardKey+0x62>
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:44
    {
        printd(DEBUG_KEYBOARD,"kKeyboardBuffer=%04X\n", kKeyboardBuffer);
   1128e:	a1 e0 03 a0 00       	mov    eax,ds:0xa003e0
   11293:	83 ec 04             	sub    esp,0x4
   11296:	50                   	push   eax
   11297:	68 8e 52 04 00       	push   0x4528e
   1129c:	6a 10                	push   0x10
   1129e:	e8 b0 5d 01 00       	call   27053 <printd>
   112a3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:45
        __asm__("sti\n");
   112a6:	fb                   	sti    
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:46
        waitTicks(1);
   112a7:	83 ec 0c             	sub    esp,0xc
   112aa:	6a 01                	push   0x1
   112ac:	e8 a6 6f 01 00       	call   28257 <waitTicks>
   112b1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:42
{
    printd(DEBUG_KEYBOARD,"gKbd-W, %04X\t", kKeyboardBuffer);
    char lTemp=0;
    printd(DEBUG_KEYBOARD,"kKeyboardBuffer=%04X\n", kKeyboardBuffer);

    while (kKeyboardBuffer==(char*)KEYBOARD_BUFFER_ADDRESS)
   112b4:	a1 e0 03 a0 00       	mov    eax,ds:0xa003e0
   112b9:	3d c0 32 10 00       	cmp    eax,0x1032c0
   112be:	74 ce                	je     1128e <waitForKeyboardKey+0x3c>
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:48
    {
        printd(DEBUG_KEYBOARD,"kKeyboardBuffer=%04X\n", kKeyboardBuffer);
        __asm__("sti\n");
        waitTicks(1);
    }
    lTemp=keyboardGetKeyFromBuffer();
   112c0:	e8 33 ff ff ff       	call   111f8 <keyboardGetKeyFromBuffer>
   112c5:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:49
    printd(DEBUG_KEYBOARD,"got a key %u!\n", lTemp);
   112c8:	0f be 45 f7          	movsx  eax,BYTE PTR [ebp-0x9]
   112cc:	83 ec 04             	sub    esp,0x4
   112cf:	50                   	push   eax
   112d0:	68 a4 52 04 00       	push   0x452a4
   112d5:	6a 10                	push   0x10
   112d7:	e8 77 5d 01 00       	call   27053 <printd>
   112dc:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:50
    return lTemp;
   112df:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:51
}
   112e3:	c9                   	leave  
   112e4:	c3                   	ret    

000112e5 <getKeyboardKey>:
getKeyboardKey():
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:54

char getKeyboardKey()
{
   112e5:	55                   	push   ebp
   112e6:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:55
        return keyboardGetKeyFromBuffer();
   112e8:	e8 0b ff ff ff       	call   111f8 <keyboardGetKeyFromBuffer>
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:56
}
   112ed:	5d                   	pop    ebp
   112ee:	c3                   	ret    

000112ef <gets>:
gets():
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:58
void gets(char* buffer, int len)
{
   112ef:	55                   	push   ebp
   112f0:	89 e5                	mov    ebp,esp
   112f2:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:59
    volatile char inchar=0;
   112f5:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:60
    int cnt=0;
   112f9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:61
    memset(buffer,0,len);
   11300:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11303:	83 ec 04             	sub    esp,0x4
   11306:	50                   	push   eax
   11307:	6a 00                	push   0x0
   11309:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1130c:	e8 9c 3c 01 00       	call   24fad <memset>
   11311:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:64
    while (1==1)
    {
        inchar=getKeyboardKey();
   11314:	e8 cc ff ff ff       	call   112e5 <getKeyboardKey>
   11319:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:65
        if (inchar=='\b' && cnt>0)
   1131c:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   11320:	3c 08                	cmp    al,0x8
   11322:	75 27                	jne    1134b <gets+0x5c>
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:65 (discriminator 1)
   11324:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11328:	7e 21                	jle    1134b <gets+0x5c>
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:67
        {
            buffer[cnt]=0;
   1132a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1132d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11330:	01 d0                	add    eax,edx
   11332:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:68
            cnt--;
   11335:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:69
            puts("\b");
   11339:	83 ec 0c             	sub    esp,0xc
   1133c:	68 b3 52 04 00       	push   0x452b3
   11341:	e8 90 6c 00 00       	call   17fd6 <puts>
   11346:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:66
    memset(buffer,0,len);
    while (1==1)
    {
        inchar=getKeyboardKey();
        if (inchar=='\b' && cnt>0)
        {
   11349:	eb 63                	jmp    113ae <gets+0xbf>
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:71
            buffer[cnt]=0;
            cnt--;
            puts("\b");
        }
        else if (inchar>0)
   1134b:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   1134f:	84 c0                	test   al,al
   11351:	7e c1                	jle    11314 <gets+0x25>
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:73
        {
            if (inchar==0x0a)
   11353:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   11357:	3c 0a                	cmp    al,0xa
   11359:	75 1a                	jne    11375 <gets+0x86>
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:75
            {
                printk("%c",inchar);
   1135b:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   1135f:	0f be c0             	movsx  eax,al
   11362:	83 ec 08             	sub    esp,0x8
   11365:	50                   	push   eax
   11366:	68 b5 52 04 00       	push   0x452b5
   1136b:	e8 c3 5c 01 00       	call   27033 <printk>
   11370:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:76
                return;
   11373:	eb 3e                	jmp    113b3 <gets+0xc4>
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:78
            }
            if (cnt<len-2)
   11375:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11378:	83 e8 02             	sub    eax,0x2
   1137b:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1137e:	7e 94                	jle    11314 <gets+0x25>
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:80
            {
                printk("%c",inchar);
   11380:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   11384:	0f be c0             	movsx  eax,al
   11387:	83 ec 08             	sub    esp,0x8
   1138a:	50                   	push   eax
   1138b:	68 b5 52 04 00       	push   0x452b5
   11390:	e8 9e 5c 01 00       	call   27033 <printk>
   11395:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:81
                buffer[cnt++]=inchar;
   11398:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1139b:	8d 50 01             	lea    edx,[eax+0x1]
   1139e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   113a1:	89 c2                	mov    edx,eax
   113a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   113a6:	01 c2                	add    edx,eax
   113a8:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   113ac:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:84
            }
        }
    }
   113ae:	e9 61 ff ff ff       	jmp    11314 <gets+0x25>
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:85
}
   113b3:	c9                   	leave  
   113b4:	c3                   	ret    

000113b5 <getc>:
getc():
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:88

char getc()
{
   113b5:	55                   	push   ebp
   113b6:	89 e5                	mov    ebp,esp
   113b8:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:89
   int inchar=getKeyboardKey();
   113bb:	e8 25 ff ff ff       	call   112e5 <getKeyboardKey>
   113c0:	0f be c0             	movsx  eax,al
   113c3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:91
   
   while (inchar==0)
   113c6:	eb 16                	jmp    113de <getc+0x29>
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:93
   {
       inchar=getKeyboardKey();
   113c8:	e8 18 ff ff ff       	call   112e5 <getKeyboardKey>
   113cd:	0f be c0             	movsx  eax,al
   113d0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:94
        inchar=getKeyboardKey();
   113d3:	e8 0d ff ff ff       	call   112e5 <getKeyboardKey>
   113d8:	0f be c0             	movsx  eax,al
   113db:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:91

char getc()
{
   int inchar=getKeyboardKey();
   
   while (inchar==0)
   113de:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   113e2:	74 e4                	je     113c8 <getc+0x13>
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:96
   {
       inchar=getKeyboardKey();
        inchar=getKeyboardKey();
   }
   return inchar;
   113e4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/NetBeansProjects/chrisOS/src/char/keyboard.c:97
}
   113e7:	c9                   	leave  
   113e8:	c3                   	ret    
   113e9:	66 90                	xchg   ax,ax
   113eb:	90                   	nop

000113ec <kPagingGet4kPDEntryValue>:
kPagingGet4kPDEntryValue():
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:19
extern uint32_t*  kKernelPageDir;
extern uint64_t kE820MemoryBytes;
extern uint32_t kDebugLevel;

uint32_t kPagingGet4kPDEntryValue(uint32_t address)
{
   113ec:	55                   	push   ebp
   113ed:	89 e5                	mov    ebp,esp
   113ef:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:20
    address&=0xFFFFF000;
   113f2:	81 65 08 00 f0 ff ff 	and    DWORD PTR [ebp+0x8],0xfffff000
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:21
    uintptr_t* lTemp=(uint32_t*)((KERNEL_PAGE_DIR_ADDRESS + (((address & 0xFFC00000) >> 22) << 2)));
   113f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   113fc:	c1 e8 16             	shr    eax,0x16
   113ff:	c1 e0 02             	shl    eax,0x2
   11402:	05 00 d0 15 00       	add    eax,0x15d000
   11407:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:23
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   1140a:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   1140f:	83 e0 40             	and    eax,0x40
   11412:	85 c0                	test   eax,eax
   11414:	74 16                	je     1142c <kPagingGet4kPDEntryValue+0x40>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:24
            printk("pagingGet4kPDEntryValue: dirAddressPtr=0x%08x\n", *lTemp);
   11416:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11419:	8b 00                	mov    eax,DWORD PTR [eax]
   1141b:	83 ec 08             	sub    esp,0x8
   1141e:	50                   	push   eax
   1141f:	68 c0 53 04 00       	push   0x453c0
   11424:	e8 0a 5c 01 00       	call   27033 <printk>
   11429:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:26
#endif
    return (uint32_t)*lTemp;
   1142c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1142f:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:27
}
   11431:	c9                   	leave  
   11432:	c3                   	ret    

00011433 <kPagingGet4kPDEntryAddress>:
kPagingGet4kPDEntryAddress():
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:30

uint32_t kPagingGet4kPDEntryAddress(uint32_t address)
{
   11433:	55                   	push   ebp
   11434:	89 e5                	mov    ebp,esp
   11436:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:31
    address&=0xFFFFF000;
   11439:	81 65 08 00 f0 ff ff 	and    DWORD PTR [ebp+0x8],0xfffff000
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:32
    uintptr_t lTemp=((KERNEL_PAGE_DIR_ADDRESS  | (((address & 0xFFC00000) >> 22) << 2)));
   11440:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11443:	c1 e8 16             	shr    eax,0x16
   11446:	c1 e0 02             	shl    eax,0x2
   11449:	0d 00 d0 15 00       	or     eax,0x15d000
   1144e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:34
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11451:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   11456:	83 e0 40             	and    eax,0x40
   11459:	85 c0                	test   eax,eax
   1145b:	74 13                	je     11470 <kPagingGet4kPDEntryAddress+0x3d>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:35
            printk("dirEntryAddress=0x%08x\n", lTemp);
   1145d:	83 ec 08             	sub    esp,0x8
   11460:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11463:	68 ef 53 04 00       	push   0x453ef
   11468:	e8 c6 5b 01 00       	call   27033 <printk>
   1146d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:37
#endif
    return (uint32_t)lTemp & 0xFFFFFFFF;
   11470:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:38
}
   11473:	c9                   	leave  
   11474:	c3                   	ret    

00011475 <kPagingGet4kPTEntryAddress>:
kPagingGet4kPTEntryAddress():
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:41

uint32_t kPagingGet4kPTEntryAddress(uint32_t address)
{
   11475:	55                   	push   ebp
   11476:	89 e5                	mov    ebp,esp
   11478:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:42
    address&=0xFFFFF000;
   1147b:	81 65 08 00 f0 ff ff 	and    DWORD PTR [ebp+0x8],0xfffff000
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:43
    uintptr_t pDirPtr=kPagingGet4kPDEntryValue(address) & 0xFFFFF000;
   11482:	83 ec 0c             	sub    esp,0xc
   11485:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11488:	e8 5f ff ff ff       	call   113ec <kPagingGet4kPDEntryValue>
   1148d:	83 c4 10             	add    esp,0x10
   11490:	25 00 f0 ff ff       	and    eax,0xfffff000
   11495:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:44
    return ((address & 0x3FF000) >> 12) << 2 | pDirPtr;
   11498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1149b:	25 00 f0 3f 00       	and    eax,0x3ff000
   114a0:	c1 e8 0c             	shr    eax,0xc
   114a3:	c1 e0 02             	shl    eax,0x2
   114a6:	0b 45 f4             	or     eax,DWORD PTR [ebp-0xc]
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:45
}
   114a9:	c9                   	leave  
   114aa:	c3                   	ret    

000114ab <kPagingGet4kPTEntryValue>:
kPagingGet4kPTEntryValue():
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:48

uint32_t kPagingGet4kPTEntryValue(uint32_t address)
{
   114ab:	55                   	push   ebp
   114ac:	89 e5                	mov    ebp,esp
   114ae:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:49
    address&=0xFFFFF000;
   114b1:	81 65 08 00 f0 ff ff 	and    DWORD PTR [ebp+0x8],0xfffff000
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:50
    uint32_t* pTablePtr=(uint32_t*)kPagingGet4kPTEntryAddress(address);
   114b8:	83 ec 0c             	sub    esp,0xc
   114bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   114be:	e8 b2 ff ff ff       	call   11475 <kPagingGet4kPTEntryAddress>
   114c3:	83 c4 10             	add    esp,0x10
   114c6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:52
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   114c9:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   114ce:	83 e0 40             	and    eax,0x40
   114d1:	85 c0                	test   eax,eax
   114d3:	74 13                	je     114e8 <kPagingGet4kPTEntryValue+0x3d>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:53
             printk("pagingGet4kPTEntryValue: pageEntryAddress=0x%08X\n", pTablePtr);
   114d5:	83 ec 08             	sub    esp,0x8
   114d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   114db:	68 08 54 04 00       	push   0x45408
   114e0:	e8 4e 5b 01 00       	call   27033 <printk>
   114e5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:56
             //printf("pageEntryValue=0x%08X\n", *pTablePtr);
#endif
    return *pTablePtr;
   114e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   114eb:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:57
}
   114ed:	c9                   	leave  
   114ee:	c3                   	ret    

000114ef <kPagingSetPageReadOnlyFlag>:
kPagingSetPageReadOnlyFlag():
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:60

void kPagingSetPageReadOnlyFlag(uintptr_t* ptEntry, bool readOnly)
{
   114ef:	55                   	push   ebp
   114f0:	89 e5                	mov    ebp,esp
   114f2:	83 ec 18             	sub    esp,0x18
   114f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   114f8:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:62
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   114fb:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   11500:	83 e0 40             	and    eax,0x40
   11503:	85 c0                	test   eax,eax
   11505:	74 19                	je     11520 <kPagingSetPageReadOnlyFlag+0x31>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:63
            printk("pagingMakePageReadOnly: 0x%08X - before/after: 0x%08X/", ptEntry, *ptEntry);
   11507:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1150a:	8b 00                	mov    eax,DWORD PTR [eax]
   1150c:	83 ec 04             	sub    esp,0x4
   1150f:	50                   	push   eax
   11510:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11513:	68 3c 54 04 00       	push   0x4543c
   11518:	e8 16 5b 01 00       	call   27033 <printk>
   1151d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:65
#endif
         if (readOnly)
   11520:	80 7d f4 00          	cmp    BYTE PTR [ebp-0xc],0x0
   11524:	74 11                	je     11537 <kPagingSetPageReadOnlyFlag+0x48>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:66
            *ptEntry&=0xFFFFFFFD;
   11526:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11529:	8b 00                	mov    eax,DWORD PTR [eax]
   1152b:	83 e0 fd             	and    eax,0xfffffffd
   1152e:	89 c2                	mov    edx,eax
   11530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11533:	89 10                	mov    DWORD PTR [eax],edx
   11535:	eb 0f                	jmp    11546 <kPagingSetPageReadOnlyFlag+0x57>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:68
         else
            *ptEntry|=2; 
   11537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1153a:	8b 00                	mov    eax,DWORD PTR [eax]
   1153c:	83 c8 02             	or     eax,0x2
   1153f:	89 c2                	mov    edx,eax
   11541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11544:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:69
    RELOAD_CR3
   11546:	0f 20 d8             	mov    eax,cr3
   11549:	0f 22 d8             	mov    cr3,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:71
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   1154c:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   11551:	83 e0 40             	and    eax,0x40
   11554:	85 c0                	test   eax,eax
   11556:	74 16                	je     1156e <kPagingSetPageReadOnlyFlag+0x7f>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:72
            printk("0x%08X\n", *ptEntry);
   11558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1155b:	8b 00                	mov    eax,DWORD PTR [eax]
   1155d:	83 ec 08             	sub    esp,0x8
   11560:	50                   	push   eax
   11561:	68 73 54 04 00       	push   0x45473
   11566:	e8 c8 5a 01 00       	call   27033 <printk>
   1156b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:74
#endif
}
   1156e:	90                   	nop
   1156f:	c9                   	leave  
   11570:	c3                   	ret    

00011571 <kPagingUpdatePTEPresentFlag>:
kPagingUpdatePTEPresentFlag():
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:77

void kPagingUpdatePTEPresentFlag(uintptr_t* ptEntry, bool present)
{
   11571:	55                   	push   ebp
   11572:	89 e5                	mov    ebp,esp
   11574:	83 ec 18             	sub    esp,0x18
   11577:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1157a:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:78
         printd(DEBUG_PAGING,"pagingUpdatePTEPresentFlag: 0x%08X - before/after: 0x%08X/", ptEntry, *ptEntry);
   1157d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11580:	8b 00                	mov    eax,DWORD PTR [eax]
   11582:	50                   	push   eax
   11583:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11586:	68 7c 54 04 00       	push   0x4547c
   1158b:	6a 40                	push   0x40
   1158d:	e8 c1 5a 01 00       	call   27053 <printd>
   11592:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:79
         if (present)
   11595:	80 7d f4 00          	cmp    BYTE PTR [ebp-0xc],0x0
   11599:	74 11                	je     115ac <kPagingUpdatePTEPresentFlag+0x3b>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:80
             *ptEntry=*ptEntry | 1;
   1159b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1159e:	8b 00                	mov    eax,DWORD PTR [eax]
   115a0:	83 c8 01             	or     eax,0x1
   115a3:	89 c2                	mov    edx,eax
   115a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115a8:	89 10                	mov    DWORD PTR [eax],edx
   115aa:	eb 0f                	jmp    115bb <kPagingUpdatePTEPresentFlag+0x4a>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:82
         else
             *ptEntry&=0xFFFFFFFE;
   115ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115af:	8b 00                	mov    eax,DWORD PTR [eax]
   115b1:	83 e0 fe             	and    eax,0xfffffffe
   115b4:	89 c2                	mov    edx,eax
   115b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115b9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:83
         __asm__("mov eax,cr3\nmov cr3,eax\n":::"eax");
   115bb:	0f 20 d8             	mov    eax,cr3
   115be:	0f 22 d8             	mov    cr3,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:84
         printd(DEBUG_PAGING,"0x%08X\n", *ptEntry);
   115c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115c4:	8b 00                	mov    eax,DWORD PTR [eax]
   115c6:	83 ec 04             	sub    esp,0x4
   115c9:	50                   	push   eax
   115ca:	68 73 54 04 00       	push   0x45473
   115cf:	6a 40                	push   0x40
   115d1:	e8 7d 5a 01 00       	call   27053 <printd>
   115d6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:85
}
   115d9:	90                   	nop
   115da:	c9                   	leave  
   115db:	c3                   	ret    

000115dc <kSetVirtualRangeRO>:
kSetVirtualRangeRO():
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:88

void kSetVirtualRangeRO(uint32_t startAddy, uint32_t endAddy, bool readOnly)
{
   115dc:	55                   	push   ebp
   115dd:	89 e5                	mov    ebp,esp
   115df:	83 ec 28             	sub    esp,0x28
   115e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   115e5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:91
    uintptr_t* startPTE;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   115e8:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   115ed:	83 e0 40             	and    eax,0x40
   115f0:	85 c0                	test   eax,eax
   115f2:	74 16                	je     1160a <kSetVirtualRangeRO+0x2e>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:92
           printk("kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
   115f4:	83 ec 04             	sub    esp,0x4
   115f7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   115fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   115fd:	68 b8 54 04 00       	push   0x454b8
   11602:	e8 2c 5a 01 00       	call   27033 <printk>
   11607:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:94
#endif
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
   1160a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1160d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   11610:	eb 64                	jmp    11676 <kSetVirtualRangeRO+0x9a>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:96
    {
        startPTE=(uintptr_t*)kPagingGet4kPTEntryAddress(cnt);
   11612:	83 ec 0c             	sub    esp,0xc
   11615:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11618:	e8 58 fe ff ff       	call   11475 <kPagingGet4kPTEntryAddress>
   1161d:	83 c4 10             	add    esp,0x10
   11620:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:98
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11623:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   11628:	83 e0 40             	and    eax,0x40
   1162b:	85 c0                	test   eax,eax
   1162d:	74 26                	je     11655 <kSetVirtualRangeRO+0x79>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:99
            printk("0x%08X (0x%08X) %s --> ", cnt, startPTE, readOnly?"ro":"rw");
   1162f:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   11633:	74 07                	je     1163c <kSetVirtualRangeRO+0x60>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:99 (discriminator 1)
   11635:	b8 e5 54 04 00       	mov    eax,0x454e5
   1163a:	eb 05                	jmp    11641 <kSetVirtualRangeRO+0x65>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:99 (discriminator 2)
   1163c:	b8 e8 54 04 00       	mov    eax,0x454e8
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:99 (discriminator 4)
   11641:	50                   	push   eax
   11642:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   11645:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11648:	68 eb 54 04 00       	push   0x454eb
   1164d:	e8 e1 59 01 00       	call   27033 <printk>
   11652:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:101 (discriminator 2)
#endif
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
   11655:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
   11659:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1165c:	8d 48 04             	lea    ecx,[eax+0x4]
   1165f:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   11662:	83 ec 08             	sub    esp,0x8
   11665:	52                   	push   edx
   11666:	50                   	push   eax
   11667:	e8 83 fe ff ff       	call   114ef <kPagingSetPageReadOnlyFlag>
   1166c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:94 (discriminator 2)
    uintptr_t* startPTE;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
           printk("kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
#endif
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
   1166f:	81 45 f4 00 10 00 00 	add    DWORD PTR [ebp-0xc],0x1000
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:94 (discriminator 1)
   11676:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11679:	83 c0 01             	add    eax,0x1
   1167c:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1167f:	73 91                	jae    11612 <kSetVirtualRangeRO+0x36>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:105
#endif
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
            
    }
        //for cnt=0;cnt<=8192;cnt+=4096
}
   11681:	90                   	nop
   11682:	c9                   	leave  
   11683:	c3                   	ret    

00011684 <kpagingUpdatePresentFlagA>:
kpagingUpdatePresentFlagA():
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:109

//Absolute version, page passed is already virtual
void kpagingUpdatePresentFlagA(uint32_t address, bool present)
{
   11684:	55                   	push   ebp
   11685:	89 e5                	mov    ebp,esp
   11687:	83 ec 28             	sub    esp,0x28
   1168a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1168d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:111
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11690:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   11695:	83 e0 40             	and    eax,0x40
   11698:	85 c0                	test   eax,eax
   1169a:	74 26                	je     116c2 <kpagingUpdatePresentFlagA+0x3e>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:112
            printk("kpagingUpdatePresentFlagA: Make 0x%08X %s\n", address, present?"present":"not present");
   1169c:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   116a0:	74 07                	je     116a9 <kpagingUpdatePresentFlagA+0x25>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:112 (discriminator 1)
   116a2:	b8 03 55 04 00       	mov    eax,0x45503
   116a7:	eb 05                	jmp    116ae <kpagingUpdatePresentFlagA+0x2a>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:112 (discriminator 2)
   116a9:	b8 0b 55 04 00       	mov    eax,0x4550b
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:112 (discriminator 4)
   116ae:	83 ec 04             	sub    esp,0x4
   116b1:	50                   	push   eax
   116b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   116b5:	68 18 55 04 00       	push   0x45518
   116ba:	e8 74 59 01 00       	call   27033 <printk>
   116bf:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:114
#endif
        uintptr_t* pagePTE= (uintptr_t*)kPagingGet4kPTEntryAddress(address&0xFFFFF000);
   116c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   116c5:	25 00 f0 ff ff       	and    eax,0xfffff000
   116ca:	83 ec 0c             	sub    esp,0xc
   116cd:	50                   	push   eax
   116ce:	e8 a2 fd ff ff       	call   11475 <kPagingGet4kPTEntryAddress>
   116d3:	83 c4 10             	add    esp,0x10
   116d6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:116
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   116d9:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   116de:	83 e0 40             	and    eax,0x40
   116e1:	85 c0                	test   eax,eax
   116e3:	74 13                	je     116f8 <kpagingUpdatePresentFlagA+0x74>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:117
            printk("kpagingUpdatePresentFlagA: updating entry 0x%08X\n", pagePTE);
   116e5:	83 ec 08             	sub    esp,0x8
   116e8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   116eb:	68 44 55 04 00       	push   0x45544
   116f0:	e8 3e 59 01 00       	call   27033 <printk>
   116f5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:119
#endif
        kPagingUpdatePTEPresentFlag(pagePTE, present);
   116f8:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   116fc:	83 ec 08             	sub    esp,0x8
   116ff:	50                   	push   eax
   11700:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11703:	e8 69 fe ff ff       	call   11571 <kPagingUpdatePTEPresentFlag>
   11708:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:120
}
   1170b:	90                   	nop
   1170c:	c9                   	leave  
   1170d:	c3                   	ret    

0001170e <kpagingUpdatePresentFlagV>:
kpagingUpdatePresentFlagV():
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:123

void kpagingUpdatePresentFlagV(uint32_t address, bool present)
{
   1170e:	55                   	push   ebp
   1170f:	89 e5                	mov    ebp,esp
   11711:	83 ec 18             	sub    esp,0x18
   11714:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11717:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:124
    address+=KERNEL_PAGED_BASE_ADDRESS; 
   1171a:	81 6d 08 00 00 00 40 	sub    DWORD PTR [ebp+0x8],0x40000000
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:125
    kpagingUpdatePresentFlagA(address, present);
   11721:	0f b6 45 f4          	movzx  eax,BYTE PTR [ebp-0xc]
   11725:	83 ec 08             	sub    esp,0x8
   11728:	50                   	push   eax
   11729:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1172c:	e8 53 ff ff ff       	call   11684 <kpagingUpdatePresentFlagA>
   11731:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:126
}
   11734:	90                   	nop
   11735:	c9                   	leave  
   11736:	c3                   	ret    

00011737 <kMapPage>:
kMapPage():
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:129

void kMapPage(uintptr_t mapTo, uintptr_t mapFrom, uint8_t flags)
{
   11737:	55                   	push   ebp
   11738:	89 e5                	mov    ebp,esp
   1173a:	53                   	push   ebx
   1173b:	83 ec 24             	sub    esp,0x24
   1173e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11741:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:133
    uint32_t *ptr;
    uint32_t ptrVal;
    uint32_t *ptrT;
    ptr=(uint32_t*)kKernelPageDir;
   11744:	a1 a4 02 a0 00       	mov    eax,ds:0xa002a4
   11749:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:134
    ptrVal=ptr[(mapTo>>22)];
   1174c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1174f:	c1 e8 16             	shr    eax,0x16
   11752:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11759:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1175c:	01 d0                	add    eax,edx
   1175e:	8b 00                	mov    eax,DWORD PTR [eax]
   11760:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:135
    if (ptrVal==0 && mapTo < kE820MemoryBytes)
   11763:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   11767:	0f 85 cb 00 00 00    	jne    11838 <kMapPage+0x101>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:135 (discriminator 1)
   1176d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   11770:	bb 00 00 00 00       	mov    ebx,0x0
   11775:	a1 48 00 a0 00       	mov    eax,ds:0xa00048
   1177a:	8b 15 4c 00 a0 00    	mov    edx,DWORD PTR ds:0xa0004c
   11780:	39 d3                	cmp    ebx,edx
   11782:	0f 87 b0 00 00 00    	ja     11838 <kMapPage+0x101>
   11788:	39 d3                	cmp    ebx,edx
   1178a:	72 08                	jb     11794 <kMapPage+0x5d>
   1178c:	39 c1                	cmp    ecx,eax
   1178e:	0f 83 a4 00 00 00    	jae    11838 <kMapPage+0x101>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:137
    {
        ptrT=(uint32_t*)0x20000000;
   11794:	c7 45 ec 00 00 00 20 	mov    DWORD PTR [ebp-0x14],0x20000000
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:138
        ptr[(mapTo>>22)]=0x20000063;
   1179b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1179e:	c1 e8 16             	shr    eax,0x16
   117a1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   117a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   117ab:	01 d0                	add    eax,edx
   117ad:	c7 00 63 00 00 20    	mov    DWORD PTR [eax],0x20000063
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:139
        ptrT[(mapTo&0x003FFFFF/4096)]=mapFrom | flags;
   117b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   117b6:	25 ff 03 00 00       	and    eax,0x3ff
   117bb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   117c2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   117c5:	01 c2                	add    edx,eax
   117c7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   117cb:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
   117ce:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:141
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   117d0:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   117d5:	83 e0 40             	and    eax,0x40
   117d8:	85 c0                	test   eax,eax
   117da:	0f 84 41 01 00 00    	je     11921 <kMapPage+0x1ea>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:142
            printk("kMapPage: Mapped 0x%08X via dir=0x%08X, page=0x%08X, to 0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[(mapTo&0x003FFFFF/4096)],ptrT[(mapTo&0x003FFFFF/4096)]);
   117e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   117e3:	25 ff 03 00 00       	and    eax,0x3ff
   117e8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   117ef:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   117f2:	01 d0                	add    eax,edx
   117f4:	8b 00                	mov    eax,DWORD PTR [eax]
   117f6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   117f9:	81 e2 ff 03 00 00    	and    edx,0x3ff
   117ff:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
   11806:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   11809:	01 d1                	add    ecx,edx
   1180b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1180e:	c1 ea 16             	shr    edx,0x16
   11811:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
   11818:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1181b:	01 da                	add    edx,ebx
   1181d:	83 ec 0c             	sub    esp,0xc
   11820:	50                   	push   eax
   11821:	51                   	push   ecx
   11822:	52                   	push   edx
   11823:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11826:	68 78 55 04 00       	push   0x45578
   1182b:	e8 03 58 01 00       	call   27033 <printk>
   11830:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:141
    {
        ptrT=(uint32_t*)0x20000000;
        ptr[(mapTo>>22)]=0x20000063;
        ptrT[(mapTo&0x003FFFFF/4096)]=mapFrom | flags;
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11833:	e9 e9 00 00 00       	jmp    11921 <kMapPage+0x1ea>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:148
#endif
    }
    else
    {
        //ptrVal right now points to the pdir entry
        ptr=(uint32_t*)kKernelPageDir;
   11838:	a1 a4 02 a0 00       	mov    eax,ds:0xa002a4
   1183d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:149
        if (ptr[(mapTo>>22)]==0)
   11840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11843:	c1 e8 16             	shr    eax,0x16
   11846:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   1184d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11850:	01 d0                	add    eax,edx
   11852:	8b 00                	mov    eax,DWORD PTR [eax]
   11854:	85 c0                	test   eax,eax
   11856:	75 29                	jne    11881 <kMapPage+0x14a>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:150
            ptr[mapTo>>22]=(KERNEL_PAGE_TABLE_BASE_ADDRESS + ((mapTo&0x003FFFFF)/4096)) | 0x63;
   11858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1185b:	c1 e8 16             	shr    eax,0x16
   1185e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11865:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11868:	01 d0                	add    eax,edx
   1186a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1186d:	81 e2 ff ff 3f 00    	and    edx,0x3fffff
   11873:	c1 ea 0c             	shr    edx,0xc
   11876:	81 c2 00 f0 16 00    	add    edx,0x16f000
   1187c:	83 ca 63             	or     edx,0x63
   1187f:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:151
        ptrVal=ptr[mapTo>>22];
   11881:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11884:	c1 e8 16             	shr    eax,0x16
   11887:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   1188e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11891:	01 d0                	add    eax,edx
   11893:	8b 00                	mov    eax,DWORD PTR [eax]
   11895:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:152
        ptrVal=(ptrVal&0xFFFFF000);
   11898:	81 65 f0 00 f0 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff000
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:153
        ptrT=(uint32_t*)ptrVal;
   1189f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   118a2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:155
        //Now ptrVal will point to offset within page table
        ptrVal=(mapTo&0x003FFFFF)/4096;
   118a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   118a8:	25 ff ff 3f 00       	and    eax,0x3fffff
   118ad:	c1 e8 0c             	shr    eax,0xc
   118b0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:156
        ptrT[ptrVal]=mapFrom | flags;
   118b3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   118b6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   118bd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   118c0:	01 c2                	add    edx,eax
   118c2:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   118c6:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
   118c9:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:160
//                printk("ptrT=%X(%X)\n",&ptrT[ptrVal],ptrT[ptrVal]);
//                STOPHERE2
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   118cb:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   118d0:	83 e0 40             	and    eax,0x40
   118d3:	85 c0                	test   eax,eax
   118d5:	74 4a                	je     11921 <kMapPage+0x1ea>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:161
            printk("2) Mapped 0x%08X via dir=0x%08X, page=0x%08X, to 0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[ptrVal],ptrT[ptrVal]);
   118d7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   118da:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   118e1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   118e4:	01 d0                	add    eax,edx
   118e6:	8b 00                	mov    eax,DWORD PTR [eax]
   118e8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   118eb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
   118f2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   118f5:	01 d1                	add    ecx,edx
   118f7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   118fa:	c1 ea 16             	shr    edx,0x16
   118fd:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
   11904:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   11907:	01 da                	add    edx,ebx
   11909:	83 ec 0c             	sub    esp,0xc
   1190c:	50                   	push   eax
   1190d:	51                   	push   ecx
   1190e:	52                   	push   edx
   1190f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11912:	68 b8 55 04 00       	push   0x455b8
   11917:	e8 17 57 01 00       	call   27033 <printk>
   1191c:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:165
#endif
    }
//    if (ptrT[(src&0x003FFFFF/1000)]==0)
}
   1191f:	eb 00                	jmp    11921 <kMapPage+0x1ea>
   11921:	90                   	nop
   11922:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   11925:	c9                   	leave  
   11926:	c3                   	ret    

00011927 <kIsPageMapped>:
kIsPageMapped():
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:168

bool kIsPageMapped(uintptr_t Address)
{
   11927:	55                   	push   ebp
   11928:	89 e5                	mov    ebp,esp
   1192a:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:169
    if (!kPagingGet4kPTEntryValue(Address))
   1192d:	83 ec 0c             	sub    esp,0xc
   11930:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11933:	e8 73 fb ff ff       	call   114ab <kPagingGet4kPTEntryValue>
   11938:	83 c4 10             	add    esp,0x10
   1193b:	85 c0                	test   eax,eax
   1193d:	75 07                	jne    11946 <kIsPageMapped+0x1f>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:170
        return false;
   1193f:	b8 00 00 00 00       	mov    eax,0x0
   11944:	eb 05                	jmp    1194b <kIsPageMapped+0x24>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:171
    return true;
   11946:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:172
}
   1194b:	c9                   	leave  
   1194c:	c3                   	ret    

0001194d <kUnMapPage>:
kUnMapPage():
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:175

void kUnMapPage(uintptr_t mapTo, uint8_t newFlags)
{
   1194d:	55                   	push   ebp
   1194e:	89 e5                	mov    ebp,esp
   11950:	53                   	push   ebx
   11951:	83 ec 24             	sub    esp,0x24
   11954:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11957:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:179
    uint32_t *ptr;
    uint32_t ptrVal;
    uint32_t *ptrT;
    ptr=(uint32_t*)kKernelPageDir;
   1195a:	a1 a4 02 a0 00       	mov    eax,ds:0xa002a4
   1195f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:180
    ptrVal=ptr[(mapTo>>22)];
   11962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11965:	c1 e8 16             	shr    eax,0x16
   11968:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   1196f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11972:	01 d0                	add    eax,edx
   11974:	8b 00                	mov    eax,DWORD PTR [eax]
   11976:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:181
    if (ptrVal==0 && mapTo < kE820MemoryBytes)
   11979:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1197d:	0f 85 ad 00 00 00    	jne    11a30 <kUnMapPage+0xe3>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:181 (discriminator 1)
   11983:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   11986:	bb 00 00 00 00       	mov    ebx,0x0
   1198b:	a1 48 00 a0 00       	mov    eax,ds:0xa00048
   11990:	8b 15 4c 00 a0 00    	mov    edx,DWORD PTR ds:0xa0004c
   11996:	39 d3                	cmp    ebx,edx
   11998:	0f 87 92 00 00 00    	ja     11a30 <kUnMapPage+0xe3>
   1199e:	39 d3                	cmp    ebx,edx
   119a0:	72 08                	jb     119aa <kUnMapPage+0x5d>
   119a2:	39 c1                	cmp    ecx,eax
   119a4:	0f 83 86 00 00 00    	jae    11a30 <kUnMapPage+0xe3>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:183
    {
        ptrT=(uint32_t*)0x20000000;
   119aa:	c7 45 ec 00 00 00 20 	mov    DWORD PTR [ebp-0x14],0x20000000
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:184
        ptr[(mapTo>>22)]=0x20000063;
   119b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   119b4:	c1 e8 16             	shr    eax,0x16
   119b7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   119be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   119c1:	01 d0                	add    eax,edx
   119c3:	c7 00 63 00 00 20    	mov    DWORD PTR [eax],0x20000063
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:185
        ptrT[(mapTo&0x003FFFFF/4096)]=0 | newFlags;
   119c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   119cc:	25 ff 03 00 00       	and    eax,0x3ff
   119d1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   119d8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   119db:	01 c2                	add    edx,eax
   119dd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   119e1:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:187
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   119e3:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   119e8:	83 e0 40             	and    eax,0x40
   119eb:	85 c0                	test   eax,eax
   119ed:	0f 84 cd 00 00 00    	je     11ac0 <kUnMapPage+0x173>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:188
            printk("kMapPage: Unmapped 0x%08X via dir=0x%08X, page=0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[(mapTo&0x003FFFFF/4096)]);
   119f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   119f6:	25 ff 03 00 00       	and    eax,0x3ff
   119fb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11a02:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11a05:	01 c2                	add    edx,eax
   11a07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a0a:	c1 e8 16             	shr    eax,0x16
   11a0d:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
   11a14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11a17:	01 c8                	add    eax,ecx
   11a19:	52                   	push   edx
   11a1a:	50                   	push   eax
   11a1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11a1e:	68 f4 55 04 00       	push   0x455f4
   11a23:	e8 0b 56 01 00       	call   27033 <printk>
   11a28:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:187
    {
        ptrT=(uint32_t*)0x20000000;
        ptr[(mapTo>>22)]=0x20000063;
        ptrT[(mapTo&0x003FFFFF/4096)]=0 | newFlags;
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11a2b:	e9 90 00 00 00       	jmp    11ac0 <kUnMapPage+0x173>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:194
#endif
    }
    else
    {
        //ptrVal right now points to the pdir entry
        ptr=(uint32_t*)kKernelPageDir;
   11a30:	a1 a4 02 a0 00       	mov    eax,ds:0xa002a4
   11a35:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:195
        ptrVal=ptr[mapTo>>22];
   11a38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a3b:	c1 e8 16             	shr    eax,0x16
   11a3e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11a45:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11a48:	01 d0                	add    eax,edx
   11a4a:	8b 00                	mov    eax,DWORD PTR [eax]
   11a4c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:196
        ptrVal=(ptrVal&0xFFFFF000);
   11a4f:	81 65 f0 00 f0 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff000
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:197
        ptrT=(uint32_t*)ptrVal;
   11a56:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11a59:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:199
        //Now ptrVal will point to offset within page table
        ptrVal=(mapTo&0x003FFFFF)/4096;
   11a5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a5f:	25 ff ff 3f 00       	and    eax,0x3fffff
   11a64:	c1 e8 0c             	shr    eax,0xc
   11a67:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:200
        ptrT[ptrVal]=0 | newFlags;
   11a6a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11a6d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11a74:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11a77:	01 c2                	add    edx,eax
   11a79:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   11a7d:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:204
//                printk("ptrT=%X(%X)\n",&ptrT[ptrVal],ptrT[ptrVal]);
//                STOPHERE2
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11a7f:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   11a84:	83 e0 40             	and    eax,0x40
   11a87:	85 c0                	test   eax,eax
   11a89:	74 35                	je     11ac0 <kUnMapPage+0x173>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:205
            printk("2) Unmapped 0x%08X via dir=0x%08X, page=0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[ptrVal]);
   11a8b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11a8e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11a95:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11a98:	01 c2                	add    edx,eax
   11a9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a9d:	c1 e8 16             	shr    eax,0x16
   11aa0:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
   11aa7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11aaa:	01 c8                	add    eax,ecx
   11aac:	52                   	push   edx
   11aad:	50                   	push   eax
   11aae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11ab1:	68 2c 56 04 00       	push   0x4562c
   11ab6:	e8 78 55 01 00       	call   27033 <printk>
   11abb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:209
#endif
    }
//    if (ptrT[(src&0x003FFFFF/1000)]==0)
}
   11abe:	eb 00                	jmp    11ac0 <kUnMapPage+0x173>
   11ac0:	90                   	nop
   11ac1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   11ac4:	c9                   	leave  
   11ac5:	c3                   	ret    

00011ac6 <kSetPhysicalRangeRO>:
kSetPhysicalRangeRO():
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:212

void kSetPhysicalRangeRO(uint32_t startAddy, uint32_t endAddy, bool readOnly)
{
   11ac6:	55                   	push   ebp
   11ac7:	89 e5                	mov    ebp,esp
   11ac9:	83 ec 18             	sub    esp,0x18
   11acc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11acf:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:214
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11ad2:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   11ad7:	83 e0 40             	and    eax,0x40
   11ada:	85 c0                	test   eax,eax
   11adc:	74 2a                	je     11b08 <kSetPhysicalRangeRO+0x42>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:215
            printk("kMakePhysicalRangeRO: Make 0x%08X(0x%08X)-0x%08X(0x%08X) r/o\n", startAddy, startAddy&0xFffff000, endAddy, endAddy&0xFFFFF000);
   11ade:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11ae1:	25 00 f0 ff ff       	and    eax,0xfffff000
   11ae6:	89 c2                	mov    edx,eax
   11ae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11aeb:	25 00 f0 ff ff       	and    eax,0xfffff000
   11af0:	83 ec 0c             	sub    esp,0xc
   11af3:	52                   	push   edx
   11af4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   11af7:	50                   	push   eax
   11af8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11afb:	68 5c 56 04 00       	push   0x4565c
   11b00:	e8 2e 55 01 00       	call   27033 <printk>
   11b05:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:217
#endif
    kSetVirtualRangeRO((startAddy + KERNEL_PAGED_BASE_ADDRESS) & 0xFFFFF000, (endAddy + KERNEL_PAGED_BASE_ADDRESS) & 0xFFFFF000, readOnly);
   11b08:	0f b6 45 f4          	movzx  eax,BYTE PTR [ebp-0xc]
   11b0c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   11b0f:	81 ea 00 00 00 40    	sub    edx,0x40000000
   11b15:	89 d1                	mov    ecx,edx
   11b17:	81 e1 00 f0 ff ff    	and    ecx,0xfffff000
   11b1d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   11b20:	81 ea 00 00 00 40    	sub    edx,0x40000000
   11b26:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
   11b2c:	83 ec 04             	sub    esp,0x4
   11b2f:	50                   	push   eax
   11b30:	51                   	push   ecx
   11b31:	52                   	push   edx
   11b32:	e8 a5 fa ff ff       	call   115dc <kSetVirtualRangeRO>
   11b37:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:218
}
   11b3a:	90                   	nop
   11b3b:	c9                   	leave  
   11b3c:	c3                   	ret    

00011b3d <mmKernelSetPageInUseFlag>:
mmKernelSetPageInUseFlag():
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:221

void mmKernelSetPageInUseFlag(uintptr_t address, bool inUse)
{
   11b3d:	55                   	push   ebp
   11b3e:	89 e5                	mov    ebp,esp
   11b40:	83 ec 28             	sub    esp,0x28
   11b43:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11b46:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:224
    uintptr_t* ptEntry;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11b49:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   11b4e:	83 e0 40             	and    eax,0x40
   11b51:	85 c0                	test   eax,eax
   11b53:	74 25                	je     11b7a <mmKernelSetPageInUseFlag+0x3d>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:225
           printd(DEBUG_PAGING, "mmKernelSetPageInUseFlag: Marking page with address 0x%08X as %s\n", address, inUse?"in use":"not in use");
   11b55:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   11b59:	74 07                	je     11b62 <mmKernelSetPageInUseFlag+0x25>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:225 (discriminator 1)
   11b5b:	b8 9a 56 04 00       	mov    eax,0x4569a
   11b60:	eb 05                	jmp    11b67 <mmKernelSetPageInUseFlag+0x2a>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:225 (discriminator 2)
   11b62:	b8 a1 56 04 00       	mov    eax,0x456a1
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:225 (discriminator 4)
   11b67:	50                   	push   eax
   11b68:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11b6b:	68 ac 56 04 00       	push   0x456ac
   11b70:	6a 40                	push   0x40
   11b72:	e8 dc 54 01 00       	call   27053 <printd>
   11b77:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:227
#endif
        ptEntry=(uintptr_t*)kPagingGet4kPTEntryAddress(address);
   11b7a:	83 ec 0c             	sub    esp,0xc
   11b7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11b80:	e8 f0 f8 ff ff       	call   11475 <kPagingGet4kPTEntryAddress>
   11b85:	83 c4 10             	add    esp,0x10
   11b88:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:228
        printd(DEBUG_PAGING,"mmKernelSetPageInUseFlag: PTE=0x%08X, Before PTE value=0x%08X\n",ptEntry,*ptEntry);
   11b8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11b8e:	8b 00                	mov    eax,DWORD PTR [eax]
   11b90:	50                   	push   eax
   11b91:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11b94:	68 f0 56 04 00       	push   0x456f0
   11b99:	6a 40                	push   0x40
   11b9b:	e8 b3 54 01 00       	call   27053 <printd>
   11ba0:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:229
        if (inUse)
   11ba3:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   11ba7:	74 11                	je     11bba <mmKernelSetPageInUseFlag+0x7d>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:230
            *ptEntry|=PAGING_IN_USE_FLAG_MASK;
   11ba9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11bac:	8b 00                	mov    eax,DWORD PTR [eax]
   11bae:	80 cc 08             	or     ah,0x8
   11bb1:	89 c2                	mov    edx,eax
   11bb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11bb6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:233
        else
            *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
}
   11bb8:	eb 0f                	jmp    11bc9 <mmKernelSetPageInUseFlag+0x8c>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:232
        ptEntry=(uintptr_t*)kPagingGet4kPTEntryAddress(address);
        printd(DEBUG_PAGING,"mmKernelSetPageInUseFlag: PTE=0x%08X, Before PTE value=0x%08X\n",ptEntry,*ptEntry);
        if (inUse)
            *ptEntry|=PAGING_IN_USE_FLAG_MASK;
        else
            *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
   11bba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11bbd:	8b 00                	mov    eax,DWORD PTR [eax]
   11bbf:	80 e4 f7             	and    ah,0xf7
   11bc2:	89 c2                	mov    edx,eax
   11bc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11bc7:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:233
}
   11bc9:	90                   	nop
   11bca:	c9                   	leave  
   11bcb:	c3                   	ret    

00011bcc <mmKernelSetPageRangeInUseFlag>:
mmKernelSetPageRangeInUseFlag():
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:236

void mmKernelSetPageRangeInUseFlag(uintptr_t startAddress, uintptr_t endAddress, int pageSize, bool inUse)
{
   11bcc:	55                   	push   ebp
   11bcd:	89 e5                	mov    ebp,esp
   11bcf:	83 ec 28             	sub    esp,0x28
   11bd2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   11bd5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:237
    for (uintptr_t cnt=startAddress;cnt<endAddress;cnt+=pageSize)
   11bd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11bdb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   11bde:	eb 19                	jmp    11bf9 <mmKernelSetPageRangeInUseFlag+0x2d>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:238 (discriminator 3)
        mmKernelSetPageInUseFlag(cnt,inUse);
   11be0:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   11be4:	83 ec 08             	sub    esp,0x8
   11be7:	50                   	push   eax
   11be8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11beb:	e8 4d ff ff ff       	call   11b3d <mmKernelSetPageInUseFlag>
   11bf0:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:237 (discriminator 3)
            *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
}

void mmKernelSetPageRangeInUseFlag(uintptr_t startAddress, uintptr_t endAddress, int pageSize, bool inUse)
{
    for (uintptr_t cnt=startAddress;cnt<endAddress;cnt+=pageSize)
   11bf3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11bf6:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:237 (discriminator 1)
   11bf9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11bfc:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   11bff:	72 df                	jb     11be0 <mmKernelSetPageRangeInUseFlag+0x14>
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:239
        mmKernelSetPageInUseFlag(cnt,inUse);
}
   11c01:	90                   	nop
   11c02:	c9                   	leave  
   11c03:	c3                   	ret    

00011c04 <mmUnusePageRange>:
mmUnusePageRange():
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:242

void mmUnusePageRange()
{
   11c04:	55                   	push   ebp
   11c05:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/init/kpaging.c:244
    
   11c07:	90                   	nop
   11c08:	5d                   	pop    ebp
   11c09:	c3                   	ret    
   11c0a:	66 90                	xchg   ax,ax

00011c0c <strncmp>:
strncmp():
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
   11c0c:	55                   	push   ebp
   11c0d:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
   11c0f:	eb 4b                	jmp    11c5c <strncmp+0x50>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
   11c11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11c14:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   11c17:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11c1a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11c1d:	38 c2                	cmp    dl,al
   11c1f:	74 1e                	je     11c3f <strncmp+0x33>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
   11c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11c24:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   11c27:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11c2a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11c2d:	38 c2                	cmp    dl,al
   11c2f:	73 07                	jae    11c38 <strncmp+0x2c>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncmp.c:16 (discriminator 1)
   11c31:	b8 ff ff ff ff       	mov    eax,0xffffffff
   11c36:	eb 2f                	jmp    11c67 <strncmp+0x5b>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncmp.c:16 (discriminator 2)
   11c38:	b8 01 00 00 00       	mov    eax,0x1
   11c3d:	eb 28                	jmp    11c67 <strncmp+0x5b>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
   11c3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11c42:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11c45:	84 c0                	test   al,al
   11c47:	75 07                	jne    11c50 <strncmp+0x44>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncmp.c:18
	    return 0;
   11c49:	b8 00 00 00 00       	mov    eax,0x0
   11c4e:	eb 17                	jmp    11c67 <strncmp+0x5b>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
   11c50:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   11c54:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
   11c58:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncmp.c:14 (discriminator 1)
   11c5c:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   11c60:	75 af                	jne    11c11 <strncmp+0x5>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
   11c62:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncmp.c:20
}
   11c67:	5d                   	pop    ebp
   11c68:	c3                   	ret    
   11c69:	66 90                	xchg   ax,ax
   11c6b:	90                   	nop

00011c6c <strncpy>:
strncpy():
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char * strncpy(char *s1, const char *s2, size_t n)
{
   11c6c:	55                   	push   ebp
   11c6d:	89 e5                	mov    ebp,esp
   11c6f:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncpy.c:15
    char *s = s1;
   11c72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11c75:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
   11c78:	eb 1b                	jmp    11c95 <strncpy+0x29>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
   11c7a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   11c7d:	8d 50 01             	lea    edx,[eax+0x1]
   11c80:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   11c83:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   11c86:	8d 4a 01             	lea    ecx,[edx+0x1]
   11c89:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   11c8c:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   11c8f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncpy.c:18
	--n;
   11c91:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char * strncpy(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
   11c95:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   11c99:	74 1c                	je     11cb7 <strncpy+0x4b>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncpy.c:16 (discriminator 1)
   11c9b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11c9e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11ca1:	84 c0                	test   al,al
   11ca3:	75 d5                	jne    11c7a <strncpy+0xe>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
   11ca5:	eb 10                	jmp    11cb7 <strncpy+0x4b>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
   11ca7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   11caa:	8d 50 01             	lea    edx,[eax+0x1]
   11cad:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   11cb0:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncpy.c:22
	--n;
   11cb3:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
   11cb7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   11cbb:	75 ea                	jne    11ca7 <strncpy+0x3b>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    return s1;
   11cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/src/strings/strncpy.c:25
}
   11cc0:	c9                   	leave  
   11cc1:	c3                   	ret    
   11cc2:	66 90                	xchg   ax,ax

00011cc4 <dumpregs>:
dumpregs():
/home/yogi/NetBeansProjects/chrisOS/asm/asmFunctions.s:22

.globl dumpregs
.type dumpregs, @function
dumpregs:
.code32
        mov exceptionAX, eax
   11cc4:	a3 b0 01 a0 00       	mov    ds:0xa001b0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/asmFunctions.s:23
        mov exceptionBX, ebx
   11cc9:	89 1d b4 01 a0 00    	mov    DWORD PTR ds:0xa001b4,ebx
/home/yogi/NetBeansProjects/chrisOS/asm/asmFunctions.s:24
        mov exceptionCX, ecx
   11ccf:	89 0d b8 01 a0 00    	mov    DWORD PTR ds:0xa001b8,ecx
/home/yogi/NetBeansProjects/chrisOS/asm/asmFunctions.s:25
        mov exceptionDX, edx
   11cd5:	89 15 bc 01 a0 00    	mov    DWORD PTR ds:0xa001bc,edx
/home/yogi/NetBeansProjects/chrisOS/asm/asmFunctions.s:26
        mov exceptionSI, esi
   11cdb:	89 35 c0 01 a0 00    	mov    DWORD PTR ds:0xa001c0,esi
/home/yogi/NetBeansProjects/chrisOS/asm/asmFunctions.s:27
        mov exceptionDI, edi
   11ce1:	89 3d c4 01 a0 00    	mov    DWORD PTR ds:0xa001c4,edi
/home/yogi/NetBeansProjects/chrisOS/asm/asmFunctions.s:28
        mov exceptionBP, eax
   11ce7:	a3 c8 01 a0 00       	mov    ds:0xa001c8,eax
/home/yogi/NetBeansProjects/chrisOS/asm/asmFunctions.s:29
        mov eax, cr0
   11cec:	0f 20 c0             	mov    eax,cr0
/home/yogi/NetBeansProjects/chrisOS/asm/asmFunctions.s:30
        mov exceptionCR0, eax
   11cef:	a3 cc 01 a0 00       	mov    ds:0xa001cc,eax
/home/yogi/NetBeansProjects/chrisOS/asm/asmFunctions.s:31
        mov eax, cr3
   11cf4:	0f 20 d8             	mov    eax,cr3
/home/yogi/NetBeansProjects/chrisOS/asm/asmFunctions.s:32
        mov exceptionCR3, eax
   11cf7:	a3 d0 01 a0 00       	mov    ds:0xa001d0,eax
/home/yogi/NetBeansProjects/chrisOS/asm/asmFunctions.s:33
        mov eax, cr4
   11cfc:	0f 20 e0             	mov    eax,cr4
/home/yogi/NetBeansProjects/chrisOS/asm/asmFunctions.s:34
        mov exceptionCR4, eax
   11cff:	a3 d4 01 a0 00       	mov    ds:0xa001d4,eax
/home/yogi/NetBeansProjects/chrisOS/asm/asmFunctions.s:35
        mov eax, exceptionAX
   11d04:	a1 b0 01 a0 00       	mov    eax,ds:0xa001b0
/home/yogi/NetBeansProjects/chrisOS/asm/asmFunctions.s:36
        ret 
   11d09:	c3                   	ret    
   11d0a:	66 90                	xchg   ax,ax

00011d0c <selectHDNum>:
selectHDNum():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:475
    uintptr_t lAddress=strtoul(params[0],0,16);
    printk("\tPD address=0x%08X, \n\tPD value=0x%08X, \n\tPT address=0x%08X, \n\tPT value=0x%08X\n\tPhysical Address=0x%08X\n",kPagingGet4kPDEntryAddress(lAddress),kPagingGet4kPDEntryValue(lAddress),kPagingGet4kPTEntryAddress(lAddress),kPagingGet4kPTEntryValue(lAddress),(kPagingGet4kPTEntryValue(lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF));
}

void HIGH_CODE_SECTION selectHDNum (char* cmdline)
{
   11d0c:	55                   	push   ebp
   11d0d:	89 e5                	mov    ebp,esp
   11d0f:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:477
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int lTemp=0;
   11d15:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:478
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   11d1c:	83 ec 04             	sub    esp,0x4
   11d1f:	68 00 14 00 00       	push   0x1400
   11d24:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11d2a:	50                   	push   eax
   11d2b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11d2e:	e8 0f 07 00 00       	call   12442 <parseParamsShell>
   11d33:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:480

    lTemp =strtol(params[0],0,10);
   11d36:	83 ec 04             	sub    esp,0x4
   11d39:	6a 0a                	push   0xa
   11d3b:	6a 00                	push   0x0
   11d3d:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11d43:	50                   	push   eax
   11d44:	e8 6b 56 01 00       	call   273b4 <strtol>
   11d49:	83 c4 10             	add    esp,0x10
   11d4c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:482
 
    if (lTemp<0 || lTemp>kATADeviceInfoCount)
   11d4f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11d53:	78 0a                	js     11d5f <selectHDNum+0x53>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:482 (discriminator 1)
   11d55:	a1 c4 02 a0 00       	mov    eax,ds:0xa002c4
   11d5a:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   11d5d:	7e 1b                	jle    11d7a <selectHDNum+0x6e>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:483
        printk("Error, selected disk number (%u) is not valid.  It must be >=0 and <= %u\n",lTemp,kATADeviceInfoCount);
   11d5f:	a1 c4 02 a0 00       	mov    eax,ds:0xa002c4
   11d64:	83 ec 04             	sub    esp,0x4
   11d67:	50                   	push   eax
   11d68:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11d6b:	68 40 58 04 00       	push   0x45840
   11d70:	e8 be 52 01 00       	call   27033 <printk>
   11d75:	83 c4 10             	add    esp,0x10
   11d78:	eb 08                	jmp    11d82 <selectHDNum+0x76>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:485
    else
        kSelectedDiskNum=lTemp;
   11d7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11d7d:	a3 08 04 a0 00       	mov    ds:0xa00408,eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:486
    parseMBR(&kATADeviceInfo[kSelectedDiskNum],&mbr);
   11d82:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   11d88:	a1 08 04 a0 00       	mov    eax,ds:0xa00408
   11d8d:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   11d93:	01 d0                	add    eax,edx
   11d95:	83 ec 08             	sub    esp,0x8
   11d98:	68 40 5f 09 00       	push   0x95f40
   11d9d:	50                   	push   eax
   11d9e:	e8 b0 f6 00 00       	call   21453 <parseMBR>
   11da3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:487
    printk("Disk %u selected\n",kSelectedDiskNum);
   11da6:	a1 08 04 a0 00       	mov    eax,ds:0xa00408
   11dab:	83 ec 08             	sub    esp,0x8
   11dae:	50                   	push   eax
   11daf:	68 8a 58 04 00       	push   0x4588a
   11db4:	e8 7a 52 01 00       	call   27033 <printk>
   11db9:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:488
}
   11dbc:	90                   	nop
   11dbd:	c9                   	leave  
   11dbe:	c3                   	ret    

00011dbf <selectPart>:
selectPart():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:517
    parseMBR(&kATADeviceInfo[driveNo],&mbr);
    printMBR(&mbr);
}

void HIGH_CODE_SECTION selectPart(char* cmdline)
{
   11dbf:	55                   	push   ebp
   11dc0:	89 e5                	mov    ebp,esp
   11dc2:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:519
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int lTemp=-1;
   11dc8:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:520
    if (kSelectedDiskNum==-1)
   11dcf:	a1 08 04 a0 00       	mov    eax,ds:0xa00408
   11dd4:	83 f8 ff             	cmp    eax,0xffffffff
   11dd7:	75 10                	jne    11de9 <selectPart+0x2a>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:522
    {
        printk("You must select a disk with 'disk' before selecting a partition");
   11dd9:	83 ec 0c             	sub    esp,0xc
   11ddc:	68 9c 58 04 00       	push   0x4589c
   11de1:	e8 4d 52 01 00       	call   27033 <printk>
   11de6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:524
    }
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   11de9:	83 ec 04             	sub    esp,0x4
   11dec:	68 00 14 00 00       	push   0x1400
   11df1:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11df7:	50                   	push   eax
   11df8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11dfb:	e8 42 06 00 00       	call   12442 <parseParamsShell>
   11e00:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:526

    lTemp =strtol(params[0],0,10);
   11e03:	83 ec 04             	sub    esp,0x4
   11e06:	6a 0a                	push   0xa
   11e08:	6a 00                	push   0x0
   11e0a:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11e10:	50                   	push   eax
   11e11:	e8 9e 55 01 00       	call   273b4 <strtol>
   11e16:	83 c4 10             	add    esp,0x10
   11e19:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:528
    //printk("parameter 1=%u\n",lTemp);
    if (lTemp<0 || lTemp>mbr.partCount)
   11e1c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11e20:	78 0a                	js     11e2c <selectPart+0x6d>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:528 (discriminator 1)
   11e22:	a1 40 63 09 00       	mov    eax,ds:0x96340
   11e27:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   11e2a:	7d 1b                	jge    11e47 <selectPart+0x88>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:530
    {
        printk("Error, selected partition number (%u) is not valid.  It must be >=1 and <=%u\n",lTemp,mbr.partCount);
   11e2c:	a1 40 63 09 00       	mov    eax,ds:0x96340
   11e31:	83 ec 04             	sub    esp,0x4
   11e34:	50                   	push   eax
   11e35:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11e38:	68 dc 58 04 00       	push   0x458dc
   11e3d:	e8 f1 51 01 00       	call   27033 <printk>
   11e42:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:531
        return;
   11e45:	eb 7d                	jmp    11ec4 <selectPart+0x105>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:533
    }
    if (mbr.parts[lTemp].partTotalSectors==0)
   11e47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11e4a:	c1 e0 04             	shl    eax,0x4
   11e4d:	05 40 5f 09 00       	add    eax,0x95f40
   11e52:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   11e55:	85 c0                	test   eax,eax
   11e57:	75 25                	jne    11e7e <selectPart+0xbf>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:535
    {
        printk("Error, selected partition (number %u) is not a valid partition as its total sector count is 0.",lTemp);
   11e59:	83 ec 08             	sub    esp,0x8
   11e5c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11e5f:	68 2c 59 04 00       	push   0x4592c
   11e64:	e8 ca 51 01 00       	call   27033 <printk>
   11e69:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:536
        printMBR(&mbr);   
   11e6c:	83 ec 0c             	sub    esp,0xc
   11e6f:	68 40 5f 09 00       	push   0x95f40
   11e74:	e8 ff f4 00 00       	call   21378 <printMBR>
   11e79:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:537
        return;
   11e7c:	eb 46                	jmp    11ec4 <selectPart+0x105>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:539
    }
    kSelectedPartNum = lTemp;
   11e7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11e81:	a3 0c 04 a0 00       	mov    ds:0xa0040c,eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:540
    ahciSetCurrentPart(mbr.parts[lTemp]);
   11e86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11e89:	c1 e0 04             	shl    eax,0x4
   11e8c:	05 40 5f 09 00       	add    eax,0x95f40
   11e91:	83 ec 10             	sub    esp,0x10
   11e94:	89 e2                	mov    edx,esp
   11e96:	8b 08                	mov    ecx,DWORD PTR [eax]
   11e98:	89 0a                	mov    DWORD PTR [edx],ecx
   11e9a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   11e9d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   11ea0:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   11ea3:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   11ea6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   11ea9:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
   11eac:	e8 90 30 00 00       	call   14f41 <ahciSetCurrentPart>
   11eb1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:542
    //printk("Partition %u selected\n",kSelectedPartNum);
    attach("");
   11eb4:	83 ec 0c             	sub    esp,0xc
   11eb7:	68 8b 59 04 00       	push   0x4598b
   11ebc:	e8 1a 01 00 00       	call   11fdb <attach>
   11ec1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:543
}
   11ec4:	c9                   	leave  
   11ec5:	c3                   	ret    

00011ec6 <listParts>:
listParts():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:491
    parseMBR(&kATADeviceInfo[kSelectedDiskNum],&mbr);
    printk("Disk %u selected\n",kSelectedDiskNum);
}

void HIGH_CODE_SECTION listParts(char* cmdline)
{
   11ec6:	55                   	push   ebp
   11ec7:	89 e5                	mov    ebp,esp
   11ec9:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:493
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   11ecf:	83 ec 04             	sub    esp,0x4
   11ed2:	68 00 14 00 00       	push   0x1400
   11ed7:	8d 85 f0 eb ff ff    	lea    eax,[ebp-0x1410]
   11edd:	50                   	push   eax
   11ede:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11ee1:	e8 5c 05 00 00       	call   12442 <parseParamsShell>
   11ee6:	83 c4 10             	add    esp,0x10
   11ee9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:494
    int driveNo=-1;
   11eec:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:496

    if (paramCount>0)
   11ef3:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   11ef7:	7e 1b                	jle    11f14 <listParts+0x4e>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:497
        driveNo=strtol(params[0],0,10);
   11ef9:	83 ec 04             	sub    esp,0x4
   11efc:	6a 0a                	push   0xa
   11efe:	6a 00                	push   0x0
   11f00:	8d 85 f0 eb ff ff    	lea    eax,[ebp-0x1410]
   11f06:	50                   	push   eax
   11f07:	e8 a8 54 01 00       	call   273b4 <strtol>
   11f0c:	83 c4 10             	add    esp,0x10
   11f0f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   11f12:	eb 08                	jmp    11f1c <listParts+0x56>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:499
    else
        driveNo=kSelectedDiskNum;
   11f14:	a1 08 04 a0 00       	mov    eax,ds:0xa00408
   11f19:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:500
    if (driveNo<0 || driveNo>kATADeviceInfoCount)
   11f1c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11f20:	78 0a                	js     11f2c <listParts+0x66>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:500 (discriminator 1)
   11f22:	a1 c4 02 a0 00       	mov    eax,ds:0xa002c4
   11f27:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   11f2a:	7e 1e                	jle    11f4a <listParts+0x84>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:502
    {
        printk("Error, selected disk number (%u) is not valid.  It must be >=0 and <= %u\n",driveNo,kATADeviceInfoCount);
   11f2c:	a1 c4 02 a0 00       	mov    eax,ds:0xa002c4
   11f31:	83 ec 04             	sub    esp,0x4
   11f34:	50                   	push   eax
   11f35:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11f38:	68 40 58 04 00       	push   0x45840
   11f3d:	e8 f1 50 01 00       	call   27033 <printk>
   11f42:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:503
        return;
   11f45:	e9 8f 00 00 00       	jmp    11fd9 <listParts+0x113>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:505
    }
    printk("Partitions for disk # %u\n",driveNo);
   11f4a:	83 ec 08             	sub    esp,0x8
   11f4d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11f50:	68 8c 59 04 00       	push   0x4598c
   11f55:	e8 d9 50 01 00       	call   27033 <printk>
   11f5a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:506
    port=(HBA_PORT*)kATADeviceInfo[driveNo].ioPort;
   11f5d:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   11f63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11f66:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   11f6c:	01 d0                	add    eax,edx
   11f6e:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   11f74:	a3 5c 63 09 00       	mov    ds:0x9635c,eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:507
    if (kATADeviceInfo[driveNo].ATADeviceType != ATA_DEVICE_TYPE_SATA_HD)
   11f79:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   11f7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11f82:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   11f88:	01 d0                	add    eax,edx
   11f8a:	8b 80 52 02 00 00    	mov    eax,DWORD PTR [eax+0x252]
   11f90:	83 f8 02             	cmp    eax,0x2
   11f93:	74 12                	je     11fa7 <listParts+0xe1>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:509
    {
        printk("Invalid device type.  Only SATA disks can be listed at the moment\n");
   11f95:	83 ec 0c             	sub    esp,0xc
   11f98:	68 a8 59 04 00       	push   0x459a8
   11f9d:	e8 91 50 01 00       	call   27033 <printk>
   11fa2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:510
        return;
   11fa5:	eb 32                	jmp    11fd9 <listParts+0x113>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:512
    }
    parseMBR(&kATADeviceInfo[driveNo],&mbr);
   11fa7:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   11fad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11fb0:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   11fb6:	01 d0                	add    eax,edx
   11fb8:	83 ec 08             	sub    esp,0x8
   11fbb:	68 40 5f 09 00       	push   0x95f40
   11fc0:	50                   	push   eax
   11fc1:	e8 8d f4 00 00       	call   21453 <parseMBR>
   11fc6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:513
    printMBR(&mbr);
   11fc9:	83 ec 0c             	sub    esp,0xc
   11fcc:	68 40 5f 09 00       	push   0x95f40
   11fd1:	e8 a2 f3 00 00       	call   21378 <printMBR>
   11fd6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:514
}
   11fd9:	c9                   	leave  
   11fda:	c3                   	ret    

00011fdb <attach>:
attach():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:546
    //printk("Partition %u selected\n",kSelectedPartNum);
    attach("");
}

void HIGH_CODE_SECTION attach(char* cmdline)
{
   11fdb:	55                   	push   ebp
   11fdc:	89 e5                	mov    ebp,esp
   11fde:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:548
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   11fe4:	83 ec 04             	sub    esp,0x4
   11fe7:	68 00 14 00 00       	push   0x1400
   11fec:	8d 85 f0 eb ff ff    	lea    eax,[ebp-0x1410]
   11ff2:	50                   	push   eax
   11ff3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11ff6:	e8 47 04 00 00       	call   12442 <parseParamsShell>
   11ffb:	83 c4 10             	add    esp,0x10
   11ffe:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:550

    if (kSelectedDiskNum < 0 || kSelectedPartNum < 0)
   12001:	a1 08 04 a0 00       	mov    eax,ds:0xa00408
   12006:	85 c0                	test   eax,eax
   12008:	78 09                	js     12013 <attach+0x38>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:550 (discriminator 1)
   1200a:	a1 0c 04 a0 00       	mov    eax,ds:0xa0040c
   1200f:	85 c0                	test   eax,eax
   12011:	79 1d                	jns    12030 <attach+0x55>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:552
    {
        printk("Must first select a disk (%u) and a partition (%u) using 'selectpart'",kSelectedDiskNum,kSelectedPartNum);
   12013:	8b 15 0c 04 a0 00    	mov    edx,DWORD PTR ds:0xa0040c
   12019:	a1 08 04 a0 00       	mov    eax,ds:0xa00408
   1201e:	83 ec 04             	sub    esp,0x4
   12021:	52                   	push   edx
   12022:	50                   	push   eax
   12023:	68 ec 59 04 00       	push   0x459ec
   12028:	e8 06 50 01 00       	call   27033 <printk>
   1202d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:554
    }
    strcpy(selectedDir,"/");
   12030:	83 ec 08             	sub    esp,0x8
   12033:	68 32 5a 04 00       	push   0x45a32
   12038:	68 c0 b4 08 00       	push   0x8b4c0
   1203d:	e8 52 51 01 00       	call   27194 <strcpy>
   12042:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:555
    ahciSetCurrentDisk((HBA_PORT*)kATADeviceInfo[kSelectedDiskNum].ioPort);
   12045:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   1204b:	a1 08 04 a0 00       	mov    eax,ds:0xa00408
   12050:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   12056:	01 d0                	add    eax,edx
   12058:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   1205e:	83 ec 0c             	sub    esp,0xc
   12061:	50                   	push   eax
   12062:	e8 cc 2e 00 00       	call   14f33 <ahciSetCurrentDisk>
   12067:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:556
    int lRetVal=fl_attach_media((fn_diskio_read)ahciBlockingRead28, (fn_diskio_write)ahciBlockingWrite28);
   1206a:	83 ec 08             	sub    esp,0x8
   1206d:	68 72 52 01 00       	push   0x15272
   12072:	68 9e 4f 01 00       	push   0x14f9e
   12077:	e8 84 b2 00 00       	call   1d300 <fl_attach_media>
   1207c:	83 c4 10             	add    esp,0x10
   1207f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:557
    if (lRetVal!=0)
   12082:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   12086:	74 1f                	je     120a7 <attach+0xcc>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:559
    {
        printk("Error attaching to disk %u, partition %u.  Error number %u",kSelectedDiskNum,kSelectedPartNum,lRetVal);
   12088:	8b 15 0c 04 a0 00    	mov    edx,DWORD PTR ds:0xa0040c
   1208e:	a1 08 04 a0 00       	mov    eax,ds:0xa00408
   12093:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   12096:	52                   	push   edx
   12097:	50                   	push   eax
   12098:	68 34 5a 04 00       	push   0x45a34
   1209d:	e8 91 4f 01 00       	call   27033 <printk>
   120a2:	83 c4 10             	add    esp,0x10
   120a5:	eb 1d                	jmp    120c4 <attach+0xe9>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:562
        return;
    }
    printk("Attached to disk %u, partition %u.\n",kSelectedDiskNum,kSelectedPartNum);
   120a7:	8b 15 0c 04 a0 00    	mov    edx,DWORD PTR ds:0xa0040c
   120ad:	a1 08 04 a0 00       	mov    eax,ds:0xa00408
   120b2:	83 ec 04             	sub    esp,0x4
   120b5:	52                   	push   edx
   120b6:	50                   	push   eax
   120b7:	68 70 5a 04 00       	push   0x45a70
   120bc:	e8 72 4f 01 00       	call   27033 <printk>
   120c1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:565
    
    //fl_listdirectory(selectedDir);
}
   120c4:	c9                   	leave  
   120c5:	c3                   	ret    

000120c6 <listDir>:
listDir():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:568

void HIGH_CODE_SECTION listDir(char* cmdline)
{
   120c6:	55                   	push   ebp
   120c7:	89 e5                	mov    ebp,esp
   120c9:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:570
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   120cf:	83 ec 04             	sub    esp,0x4
   120d2:	68 00 14 00 00       	push   0x1400
   120d7:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   120dd:	50                   	push   eax
   120de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   120e1:	e8 5c 03 00 00       	call   12442 <parseParamsShell>
   120e6:	83 c4 10             	add    esp,0x10
   120e9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:574
    
    //printk("Kernel Debug: Listing of directory %s + %s\n",params[0],params[1]);
    
    fl_listdirectory(params[0]);
   120ec:	83 ec 0c             	sub    esp,0xc
   120ef:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   120f5:	50                   	push   eax
   120f6:	e8 e5 c0 00 00       	call   1e1e0 <fl_listdirectory>
   120fb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:575
}
   120fe:	90                   	nop
   120ff:	c9                   	leave  
   12100:	c3                   	ret    

00012101 <execProgram>:
execProgram():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:578

void HIGH_CODE_SECTION execProgram(char* cmdline)
{
   12101:	55                   	push   ebp
   12102:	89 e5                	mov    ebp,esp
   12104:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:580
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   1210a:	83 ec 04             	sub    esp,0x4
   1210d:	68 00 14 00 00       	push   0x1400
   12112:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   12118:	50                   	push   eax
   12119:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1211c:	e8 21 03 00 00       	call   12442 <parseParamsShell>
   12121:	83 c4 10             	add    esp,0x10
   12124:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:583

    
    strcpy(sExecutingProgram,params[0]+1);
   12127:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   1212d:	83 c0 01             	add    eax,0x1
   12130:	83 ec 08             	sub    esp,0x8
   12133:	50                   	push   eax
   12134:	68 40 b4 08 00       	push   0x8b440
   12139:	e8 56 50 01 00       	call   27194 <strcpy>
   1213e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:586
    //printk("execProgram: param count = %u\n",paramCount);

    lTemp=buildargv(cmdline);
   12141:	83 ec 0c             	sub    esp,0xc
   12144:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12147:	e8 40 04 00 00       	call   1258c <buildargv>
   1214c:	83 c4 10             	add    esp,0x10
   1214f:	a3 20 b4 08 00       	mov    ds:0x8b420,eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:593

//    printk("listing parameters:\n");
//    for (int cnt=0;cnt<paramCount;cnt++)
//        printk("%u = '%s'\n",cnt,lTemp[cnt]);
   
    exec (params[0],paramCount,lTemp);
   12154:	a1 20 b4 08 00       	mov    eax,ds:0x8b420
   12159:	83 ec 04             	sub    esp,0x4
   1215c:	50                   	push   eax
   1215d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   12160:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   12166:	50                   	push   eax
   12167:	e8 0e 49 01 00       	call   26a7a <exec>
   1216c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:594
    strcpy(sExecutingProgram,sbiShellProgramName);
   1216f:	83 ec 08             	sub    esp,0x8
   12172:	68 c0 89 02 00       	push   0x289c0
   12177:	68 40 b4 08 00       	push   0x8b440
   1217c:	e8 13 50 01 00       	call   27194 <strcpy>
   12181:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:595
}
   12184:	90                   	nop
   12185:	c9                   	leave  
   12186:	c3                   	ret    

00012187 <outb>:
outb():
/home/yogi/NetBeansProjects/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   12187:	55                   	push   ebp
   12188:	89 e5                	mov    ebp,esp
   1218a:	83 ec 08             	sub    esp,0x8
   1218d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12190:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12193:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   12197:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/NetBeansProjects/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   1219a:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   1219e:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   121a2:	ee                   	out    dx,al
/home/yogi/NetBeansProjects/chrisOS/include/io.h:24
}
   121a3:	90                   	nop
   121a4:	c9                   	leave  
   121a5:	c3                   	ret    

000121a6 <outw>:
outw():
/home/yogi/NetBeansProjects/chrisOS/include/io.h:27

static __inline void outw(unsigned short __port, unsigned short __val)
{
   121a6:	55                   	push   ebp
   121a7:	89 e5                	mov    ebp,esp
   121a9:	83 ec 08             	sub    esp,0x8
   121ac:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   121af:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   121b2:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   121b6:	66 89 45 f8          	mov    WORD PTR [ebp-0x8],ax
/home/yogi/NetBeansProjects/chrisOS/include/io.h:28
	__asm__ volatile ("outw %1, %0" : : "a" (__val), "dN" (__port));
   121ba:	0f b7 45 f8          	movzx  eax,WORD PTR [ebp-0x8]
   121be:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   121c2:	66 ef                	out    dx,ax
/home/yogi/NetBeansProjects/chrisOS/include/io.h:29
}
   121c4:	90                   	nop
   121c5:	c9                   	leave  
   121c6:	c3                   	ret    

000121c7 <outl>:
outl():
/home/yogi/NetBeansProjects/chrisOS/include/io.h:32

static __inline void outl(unsigned short __port, unsigned int __val)
{
   121c7:	55                   	push   ebp
   121c8:	89 e5                	mov    ebp,esp
   121ca:	83 ec 04             	sub    esp,0x4
   121cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   121d0:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/NetBeansProjects/chrisOS/include/io.h:33
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
   121d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   121d7:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   121db:	ef                   	out    dx,eax
/home/yogi/NetBeansProjects/chrisOS/include/io.h:34
}
   121dc:	90                   	nop
   121dd:	c9                   	leave  
   121de:	c3                   	ret    

000121df <inb>:
inb():
/home/yogi/NetBeansProjects/chrisOS/include/io.h:37

static __inline unsigned char inb(unsigned short __port)
{
   121df:	55                   	push   ebp
   121e0:	89 e5                	mov    ebp,esp
   121e2:	83 ec 14             	sub    esp,0x14
   121e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   121e8:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/NetBeansProjects/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   121ec:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   121f0:	89 c2                	mov    edx,eax
   121f2:	ec                   	in     al,dx
   121f3:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/NetBeansProjects/chrisOS/include/io.h:40
	return __val;
   121f6:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/NetBeansProjects/chrisOS/include/io.h:41
}
   121fa:	c9                   	leave  
   121fb:	c3                   	ret    

000121fc <inw>:
inw():
/home/yogi/NetBeansProjects/chrisOS/include/io.h:44

static __inline unsigned short inw(unsigned short __port)
{
   121fc:	55                   	push   ebp
   121fd:	89 e5                	mov    ebp,esp
   121ff:	83 ec 14             	sub    esp,0x14
   12202:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12205:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/NetBeansProjects/chrisOS/include/io.h:46
	unsigned short __val;
	__asm__ volatile ("inw %0, %1" : "=a" (__val) : "dN" (__port));
   12209:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   1220d:	89 c2                	mov    edx,eax
   1220f:	66 ed                	in     ax,dx
   12211:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/NetBeansProjects/chrisOS/include/io.h:47
	return __val;
   12215:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/NetBeansProjects/chrisOS/include/io.h:48
}
   12219:	c9                   	leave  
   1221a:	c3                   	ret    

0001221b <inl>:
inl():
/home/yogi/NetBeansProjects/chrisOS/include/io.h:51

static __inline unsigned int inl(unsigned short __port)
{
   1221b:	55                   	push   ebp
   1221c:	89 e5                	mov    ebp,esp
   1221e:	83 ec 14             	sub    esp,0x14
   12221:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12224:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/NetBeansProjects/chrisOS/include/io.h:53
	unsigned int __val;
	__asm__ volatile ("ind %0, %1" : "=a" (__val) : "dN" (__port));
   12228:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   1222c:	89 c2                	mov    edx,eax
   1222e:	ed                   	in     eax,dx
   1222f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/include/io.h:54
	return __val;
   12232:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/NetBeansProjects/chrisOS/include/io.h:55
}
   12235:	c9                   	leave  
   12236:	c3                   	ret    

00012237 <fat_list_init>:
fat_list_init():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   12237:	55                   	push   ebp
   12238:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   1223a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1223d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   12244:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12247:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1224a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1224d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:51
}
   1224f:	90                   	nop
   12250:	5d                   	pop    ebp
   12251:	c3                   	ret    

00012252 <fat_list_remove>:
fat_list_remove():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   12252:	55                   	push   ebp
   12253:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12255:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12258:	8b 00                	mov    eax,DWORD PTR [eax]
   1225a:	85 c0                	test   eax,eax
   1225c:	75 0d                	jne    1226b <fat_list_remove+0x19>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   1225e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12261:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   12264:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12267:	89 10                	mov    DWORD PTR [eax],edx
   12269:	eb 0e                	jmp    12279 <fat_list_remove+0x27>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   1226b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1226e:	8b 00                	mov    eax,DWORD PTR [eax]
   12270:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   12273:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   12276:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   12279:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1227c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1227f:	85 c0                	test   eax,eax
   12281:	75 0d                	jne    12290 <fat_list_remove+0x3e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   12283:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12286:	8b 10                	mov    edx,DWORD PTR [eax]
   12288:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1228b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   1228e:	eb 0d                	jmp    1229d <fat_list_remove+0x4b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   12290:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12293:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   12296:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   12299:	8b 12                	mov    edx,DWORD PTR [edx]
   1229b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:69
}
   1229d:	90                   	nop
   1229e:	5d                   	pop    ebp
   1229f:	c3                   	ret    

000122a0 <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   122a0:	55                   	push   ebp
   122a1:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   122a3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   122a6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   122a9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   122ab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122ae:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   122b1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   122b4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   122b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   122bd:	85 c0                	test   eax,eax
   122bf:	75 0b                	jne    122cc <fat_list_insert_after+0x2c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   122c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   122c4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   122c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   122ca:	eb 0b                	jmp    122d7 <fat_list_insert_after+0x37>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   122cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   122d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   122d5:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   122d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122da:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   122dd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:86
}
   122e0:	90                   	nop
   122e1:	5d                   	pop    ebp
   122e2:	c3                   	ret    

000122e3 <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   122e3:	55                   	push   ebp
   122e4:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   122e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122e9:	8b 10                	mov    edx,DWORD PTR [eax]
   122eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   122ee:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   122f0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   122f3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   122f6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   122f9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122fc:	8b 00                	mov    eax,DWORD PTR [eax]
   122fe:	85 c0                	test   eax,eax
   12300:	75 0a                	jne    1230c <fat_list_insert_before+0x29>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   12302:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12305:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   12308:	89 10                	mov    DWORD PTR [eax],edx
   1230a:	eb 0b                	jmp    12317 <fat_list_insert_before+0x34>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   1230c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1230f:	8b 00                	mov    eax,DWORD PTR [eax]
   12311:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   12314:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   12317:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1231a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1231d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:103
}
   1231f:	90                   	nop
   12320:	5d                   	pop    ebp
   12321:	c3                   	ret    

00012322 <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   12322:	55                   	push   ebp
   12323:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   12325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12328:	8b 00                	mov    eax,DWORD PTR [eax]
   1232a:	85 c0                	test   eax,eax
   1232c:	75 26                	jne    12354 <fat_list_insert_first+0x32>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   1232e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12331:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   12334:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   12336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12339:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1233c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   1233f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12342:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   12348:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1234b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   12352:	eb 14                	jmp    12368 <fat_list_insert_first+0x46>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   12354:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12357:	8b 00                	mov    eax,DWORD PTR [eax]
   12359:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1235c:	50                   	push   eax
   1235d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12360:	e8 7e ff ff ff       	call   122e3 <fat_list_insert_before>
   12365:	83 c4 0c             	add    esp,0xc
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:121
}
   12368:	90                   	nop
   12369:	c9                   	leave  
   1236a:	c3                   	ret    

0001236b <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   1236b:	55                   	push   ebp
   1236c:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   1236e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12371:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   12374:	85 c0                	test   eax,eax
   12376:	75 10                	jne    12388 <fat_list_insert_last+0x1d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   12378:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1237b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1237e:	e8 9f ff ff ff       	call   12322 <fat_list_insert_first>
   12383:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   12386:	eb 15                	jmp    1239d <fat_list_insert_last+0x32>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   12388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1238b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1238e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   12391:	50                   	push   eax
   12392:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12395:	e8 06 ff ff ff       	call   122a0 <fat_list_insert_after>
   1239a:	83 c4 0c             	add    esp,0xc
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:134
}
   1239d:	90                   	nop
   1239e:	c9                   	leave  
   1239f:	c3                   	ret    

000123a0 <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   123a0:	55                   	push   ebp
   123a1:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   123a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   123a6:	8b 00                	mov    eax,DWORD PTR [eax]
   123a8:	85 c0                	test   eax,eax
   123aa:	0f 94 c0             	sete   al
   123ad:	0f b6 c0             	movzx  eax,al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:143
}
   123b0:	5d                   	pop    ebp
   123b1:	c3                   	ret    

000123b2 <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   123b2:	55                   	push   ebp
   123b3:	89 e5                	mov    ebp,esp
   123b5:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   123b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   123bb:	8b 00                	mov    eax,DWORD PTR [eax]
   123bd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:154
    if (node)
   123c0:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   123c4:	74 0e                	je     123d4 <fat_list_pop_head+0x22>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   123c6:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   123c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   123cc:	e8 81 fe ff ff       	call   12252 <fat_list_remove>
   123d1:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:157

    return node;
   123d4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:158
}
   123d7:	c9                   	leave  
   123d8:	c3                   	ret    

000123d9 <findCommand>:
findCommand():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:37
char programParams[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
char** lTemp;


int HIGH_CODE_SECTION findCommand(char* command)
{
   123d9:	55                   	push   ebp
   123da:	89 e5                	mov    ebp,esp
   123dc:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:41
    unsigned i;
    int ret;
    
    for(i = 0; i < NUMBER_OF_COMMANDS; i++)
   123df:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   123e6:	eb 4d                	jmp    12435 <findCommand+0x5c>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:43
    {
        ret = strncmp(command, cmds[i].name,strlen(cmds[i].name));
   123e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   123eb:	c1 e0 04             	shl    eax,0x4
   123ee:	05 00 88 02 00       	add    eax,0x28800
   123f3:	8b 00                	mov    eax,DWORD PTR [eax]
   123f5:	83 ec 0c             	sub    esp,0xc
   123f8:	50                   	push   eax
   123f9:	e8 06 4e 01 00       	call   27204 <strlen>
   123fe:	83 c4 10             	add    esp,0x10
   12401:	89 c2                	mov    edx,eax
   12403:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12406:	c1 e0 04             	shl    eax,0x4
   12409:	05 00 88 02 00       	add    eax,0x28800
   1240e:	8b 00                	mov    eax,DWORD PTR [eax]
   12410:	83 ec 04             	sub    esp,0x4
   12413:	52                   	push   edx
   12414:	50                   	push   eax
   12415:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12418:	e8 ef f7 ff ff       	call   11c0c <strncmp>
   1241d:	83 c4 10             	add    esp,0x10
   12420:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:45
        //printk("findCommand compared %s and %s for %u, returned %u\n", command, cmds[i].name, strlen(cmds[i].name), ret);
        if(ret==0)
   12423:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   12427:	75 08                	jne    12431 <findCommand+0x58>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:48
        {
            //printk("findCommand returning %u", i+1);
            return i+1;
   12429:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1242c:	83 c0 01             	add    eax,0x1
   1242f:	eb 0f                	jmp    12440 <findCommand+0x67>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:41 (discriminator 2)
int HIGH_CODE_SECTION findCommand(char* command)
{
    unsigned i;
    int ret;
    
    for(i = 0; i < NUMBER_OF_COMMANDS; i++)
   12431:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:41 (discriminator 1)
   12435:	83 7d f4 1a          	cmp    DWORD PTR [ebp-0xc],0x1a
   12439:	76 ad                	jbe    123e8 <findCommand+0xf>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:52
            //printk("findCommand returning %u", i+1);
            return i+1;
        }
    }
    //printk("findCommand returning -1");
            return -1;
   1243b:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:53
}
   12440:	c9                   	leave  
   12441:	c3                   	ret    

00012442 <parseParamsShell>:
parseParamsShell():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:56

int HIGH_CODE_SECTION parseParamsShell(char* cmdLine, char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH], int size)
    {
   12442:	55                   	push   ebp
   12443:	89 e5                	mov    ebp,esp
   12445:	53                   	push   ebx
   12446:	83 ec 24             	sub    esp,0x24
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:57
    int x=0,y=0;
   12449:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   12450:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:58
    int lRetVal=0,parsedChars=0;
   12457:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   1245e:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:60
    
    memset(params,0, size);
   12465:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   12468:	83 ec 04             	sub    esp,0x4
   1246b:	50                   	push   eax
   1246c:	6a 00                	push   0x0
   1246e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   12471:	e8 37 2b 01 00       	call   24fad <memset>
   12476:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:62
    //printk("commandLine=%s\n",cmdLine);
    for (unsigned cnt=0;cnt<strlen(cmdLine);cnt++)
   12479:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   12480:	e9 c9 00 00 00       	jmp    1254e <parseParamsShell+0x10c>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:65
    {
        //printk("c=%c\n", cmdLine[cnt]);
        if ( (cmdLine[cnt]==' ' || cmdLine[cnt]=='-') || cmdLine[cnt]==',')
   12485:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12488:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1248b:	01 d0                	add    eax,edx
   1248d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12490:	3c 20                	cmp    al,0x20
   12492:	74 1e                	je     124b2 <parseParamsShell+0x70>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:65 (discriminator 1)
   12494:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12497:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1249a:	01 d0                	add    eax,edx
   1249c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1249f:	3c 2d                	cmp    al,0x2d
   124a1:	74 0f                	je     124b2 <parseParamsShell+0x70>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:65 (discriminator 2)
   124a3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   124a6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   124a9:	01 d0                	add    eax,edx
   124ab:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   124ae:	3c 2c                	cmp    al,0x2c
   124b0:	75 6f                	jne    12521 <parseParamsShell+0xdf>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:68
        {
            //printk("Found a delimiter (%c), incrementing y to %u, setting x to 0\n",cmdLine[cnt],y+1);
            if (cmdLine[cnt]=='-' || cmdLine[cnt]=='/')
   124b2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   124b5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   124b8:	01 d0                	add    eax,edx
   124ba:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   124bd:	3c 2d                	cmp    al,0x2d
   124bf:	74 0f                	je     124d0 <parseParamsShell+0x8e>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:68 (discriminator 1)
   124c1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   124c4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   124c7:	01 d0                	add    eax,edx
   124c9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   124cc:	3c 2f                	cmp    al,0x2f
   124ce:	75 25                	jne    124f5 <parseParamsShell+0xb3>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:69
                params[y][x++]=cmdLine[cnt];
   124d0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   124d3:	c1 e0 09             	shl    eax,0x9
   124d6:	89 c2                	mov    edx,eax
   124d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   124db:	8d 0c 02             	lea    ecx,[edx+eax*1]
   124de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   124e1:	8d 50 01             	lea    edx,[eax+0x1]
   124e4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   124e7:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   124ea:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   124ed:	01 da                	add    edx,ebx
   124ef:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   124f2:	88 14 01             	mov    BYTE PTR [ecx+eax*1],dl
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:70
            params[y][x]='\0';
   124f5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   124f8:	c1 e0 09             	shl    eax,0x9
   124fb:	89 c2                	mov    edx,eax
   124fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12500:	01 c2                	add    edx,eax
   12502:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12505:	01 d0                	add    eax,edx
   12507:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:71
            if (cnt>0)
   1250a:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   1250e:	74 36                	je     12546 <parseParamsShell+0x104>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:72
                {x=0;y++;lRetVal++;}
   12510:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   12517:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
   1251b:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:71
        {
            //printk("Found a delimiter (%c), incrementing y to %u, setting x to 0\n",cmdLine[cnt],y+1);
            if (cmdLine[cnt]=='-' || cmdLine[cnt]=='/')
                params[y][x++]=cmdLine[cnt];
            params[y][x]='\0';
            if (cnt>0)
   1251f:	eb 25                	jmp    12546 <parseParamsShell+0x104>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:77
                {x=0;y++;lRetVal++;}
        }
        else
        {
            //printk("Found a character to put at position %u,%u\n",y,x);
            params[y][x++]=cmdLine[cnt];
   12521:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12524:	c1 e0 09             	shl    eax,0x9
   12527:	89 c2                	mov    edx,eax
   12529:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1252c:	8d 0c 02             	lea    ecx,[edx+eax*1]
   1252f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12532:	8d 50 01             	lea    edx,[eax+0x1]
   12535:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   12538:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1253b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   1253e:	01 da                	add    edx,ebx
   12540:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   12543:	88 14 01             	mov    BYTE PTR [ecx+eax*1],dl
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:79 (discriminator 2)
        }
        parsedChars++;
   12546:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:62 (discriminator 2)
    int x=0,y=0;
    int lRetVal=0,parsedChars=0;
    
    memset(params,0, size);
    //printk("commandLine=%s\n",cmdLine);
    for (unsigned cnt=0;cnt<strlen(cmdLine);cnt++)
   1254a:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:62 (discriminator 1)
   1254e:	83 ec 0c             	sub    esp,0xc
   12551:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12554:	e8 ab 4c 01 00       	call   27204 <strlen>
   12559:	83 c4 10             	add    esp,0x10
   1255c:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   1255f:	0f 87 20 ff ff ff    	ja     12485 <parseParamsShell+0x43>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:81
            //printk("Found a character to put at position %u,%u\n",y,x);
            params[y][x++]=cmdLine[cnt];
        }
        parsedChars++;
    }
    if (parsedChars)
   12565:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   12569:	74 19                	je     12584 <parseParamsShell+0x142>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:83
    {
        lRetVal++;
   1256b:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:84
        params[y][x]='\0';
   1256f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12572:	c1 e0 09             	shl    eax,0x9
   12575:	89 c2                	mov    edx,eax
   12577:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1257a:	01 c2                	add    edx,eax
   1257c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1257f:	01 d0                	add    eax,edx
   12581:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:89
    }
    //printk("Returning %u parameters:\n", lRetVal);
    //for (int cnt=0;cnt<lRetVal;cnt++)
        //printk("\tParameter %u: '%s'\n", cnt, params[cnt]);
    return lRetVal;
   12584:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:90
}
   12587:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1258a:	c9                   	leave  
   1258b:	c3                   	ret    

0001258c <buildargv>:
buildargv():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:94

/*parts from http://*/
char **buildargv (const char *input)
{
   1258c:	55                   	push   ebp
   1258d:	89 e5                	mov    ebp,esp
   1258f:	83 ec 38             	sub    esp,0x38
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:97
  char *arg;
  char *copybuf;
  int squote = 0;
   12592:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:98
  int dquote = 0;
   12599:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:99
  int bsquote = 0;
   125a0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:100
  int argc = 0;
   125a7:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:101
  int maxargc = 0;
   125ae:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:102
  char **argv = NULL;
   125b5:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:106
  char **nargv;
  //printk("buildargv: entering\n");
  
  if (input != NULL)
   125bc:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   125c0:	0f 84 17 02 00 00    	je     127dd <buildargv+0x251>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:109
    {
      //printk("buildargv: command to parse (%u chars) is: '%s'\n",strlen (input) + 1,input);
      copybuf = (char *) mallocTemp (strlen (input) + 1);
   125c6:	83 ec 0c             	sub    esp,0xc
   125c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   125cc:	e8 33 4c 01 00       	call   27204 <strlen>
   125d1:	83 c4 10             	add    esp,0x10
   125d4:	83 c0 01             	add    eax,0x1
   125d7:	83 ec 0c             	sub    esp,0xc
   125da:	50                   	push   eax
   125db:	e8 9b 33 01 00       	call   2597b <mallocTemp>
   125e0:	83 c4 10             	add    esp,0x10
   125e3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:117
	 argv, even for null strings.  See NOTES above, test case below. */
      do
	{
	  /* Pick off argv[argc] */

	  if ((maxargc == 0) || (argc >= (maxargc - 1)))
   125e6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
   125ea:	74 0b                	je     125f7 <buildargv+0x6b>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:117 (discriminator 1)
   125ec:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   125ef:	83 e8 01             	sub    eax,0x1
   125f2:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   125f5:	7f 3d                	jg     12634 <buildargv+0xa8>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:120
	    {
	      /* argv needs initialization, or expansion */
	      if (argv == NULL)
   125f7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
   125fb:	75 1c                	jne    12619 <buildargv+0x8d>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:122
		{
		  maxargc = INITIAL_MAXARGC;
   125fd:	c7 45 dc 14 00 00 00 	mov    DWORD PTR [ebp-0x24],0x14
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:123
		  nargv = (char **) mallocTemp (maxargc * sizeof (char *));
   12604:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   12607:	c1 e0 02             	shl    eax,0x2
   1260a:	83 ec 0c             	sub    esp,0xc
   1260d:	50                   	push   eax
   1260e:	e8 68 33 01 00       	call   2597b <mallocTemp>
   12613:	83 c4 10             	add    esp,0x10
   12616:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:125
		}
	      argv = nargv;
   12619:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1261c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:126
	      argv[argc] = NULL;
   1261f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   12622:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   12629:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1262c:	01 d0                	add    eax,edx
   1262e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:129
	    }
	  /* Begin scanning arg */
	  arg = copybuf;
   12634:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12637:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:130
	  while (*input != EOS)
   1263a:	e9 ec 00 00 00       	jmp    1272b <buildargv+0x19f>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:132
	    {
	      if ((*input)==' ' && !squote && !dquote && !bsquote)
   1263f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12642:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12645:	3c 20                	cmp    al,0x20
   12647:	75 16                	jne    1265f <buildargv+0xd3>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:132 (discriminator 1)
   12649:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   1264d:	75 10                	jne    1265f <buildargv+0xd3>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:132 (discriminator 2)
   1264f:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   12653:	75 0a                	jne    1265f <buildargv+0xd3>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:132 (discriminator 3)
   12655:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   12659:	0f 84 da 00 00 00    	je     12739 <buildargv+0x1ad>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:138
		{
		  break;
		}
	      else
		{
		  if (bsquote)
   1265f:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   12663:	74 1d                	je     12682 <buildargv+0xf6>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:140
		    {
		      bsquote = 0;
   12665:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:141
		      *arg++ = *input;
   1266c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1266f:	8d 50 01             	lea    edx,[eax+0x1]
   12672:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   12675:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12678:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1267b:	88 10                	mov    BYTE PTR [eax],dl
   1267d:	e9 a5 00 00 00       	jmp    12727 <buildargv+0x19b>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:143
		    }
		  else if (*input == '\\')
   12682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12685:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12688:	3c 5c                	cmp    al,0x5c
   1268a:	75 0c                	jne    12698 <buildargv+0x10c>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:145
		    {
		      bsquote = 1;
   1268c:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
   12693:	e9 8f 00 00 00       	jmp    12727 <buildargv+0x19b>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:147
		    }
		  else if (squote)
   12698:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   1269c:	74 26                	je     126c4 <buildargv+0x138>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:149
		    {
		      if (*input == '\'')
   1269e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   126a1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   126a4:	3c 27                	cmp    al,0x27
   126a6:	75 09                	jne    126b1 <buildargv+0x125>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:151
			{
			  squote = 0;
   126a8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   126af:	eb 76                	jmp    12727 <buildargv+0x19b>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:155
			}
		      else
			{
			  *arg++ = *input;
   126b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   126b4:	8d 50 01             	lea    edx,[eax+0x1]
   126b7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   126ba:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   126bd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   126c0:	88 10                	mov    BYTE PTR [eax],dl
   126c2:	eb 63                	jmp    12727 <buildargv+0x19b>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:158
			}
		    }
		  else if (dquote)
   126c4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   126c8:	74 26                	je     126f0 <buildargv+0x164>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:160
		    {
		      if (*input == '"')
   126ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   126cd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   126d0:	3c 22                	cmp    al,0x22
   126d2:	75 09                	jne    126dd <buildargv+0x151>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:162
			{
			  dquote = 0;
   126d4:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   126db:	eb 4a                	jmp    12727 <buildargv+0x19b>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:166
			}
		      else
			{
			  *arg++ = *input;
   126dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   126e0:	8d 50 01             	lea    edx,[eax+0x1]
   126e3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   126e6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   126e9:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   126ec:	88 10                	mov    BYTE PTR [eax],dl
   126ee:	eb 37                	jmp    12727 <buildargv+0x19b>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:171
			}
		    }
		  else
		    {
		      if (*input == '\'')
   126f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   126f3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   126f6:	3c 27                	cmp    al,0x27
   126f8:	75 09                	jne    12703 <buildargv+0x177>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:173
			{
			  squote = 1;
   126fa:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
   12701:	eb 24                	jmp    12727 <buildargv+0x19b>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:175
			}
		      else if (*input == '"')
   12703:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12706:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12709:	3c 22                	cmp    al,0x22
   1270b:	75 09                	jne    12716 <buildargv+0x18a>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:177
			{
			  dquote = 1;
   1270d:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
   12714:	eb 11                	jmp    12727 <buildargv+0x19b>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:181
			}
		      else
			{
			  *arg++ = *input;
   12716:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12719:	8d 50 01             	lea    edx,[eax+0x1]
   1271c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   1271f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12722:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   12725:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:185
                          //printk("Incremented input to %u, char=%u,value='%c'\n",input,*input,*input);
			}
		    }
		  input++;
   12727:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:130
	      argv = nargv;
	      argv[argc] = NULL;
	    }
	  /* Begin scanning arg */
	  arg = copybuf;
	  while (*input != EOS)
   1272b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1272e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12731:	84 c0                	test   al,al
   12733:	0f 85 06 ff ff ff    	jne    1263f <buildargv+0xb3>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:188
			}
		    }
		  input++;
		}
	    }
	  *arg = EOS;
   12739:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1273c:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:190
          //printk("Found an EOS\n");
          if (copybuf[0]!='\0')
   1273f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12742:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12745:	84 c0                	test   al,al
   12747:	0f 84 82 00 00 00    	je     127cf <buildargv+0x243>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:192
          {
            char* temp=mallocTemp(strlen(copybuf)+1);
   1274d:	83 ec 0c             	sub    esp,0xc
   12750:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   12753:	e8 ac 4a 01 00       	call   27204 <strlen>
   12758:	83 c4 10             	add    esp,0x10
   1275b:	83 c0 01             	add    eax,0x1
   1275e:	83 ec 0c             	sub    esp,0xc
   12761:	50                   	push   eax
   12762:	e8 14 32 01 00       	call   2597b <mallocTemp>
   12767:	83 c4 10             	add    esp,0x10
   1276a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:195
            //printk("*malloc'd temp to 0x%08X for %u characters\n",temp,strlen(copybuf));
            //printk("Copied copybuf @ 0x%08X to temp @ 0x%08X\n",copybuf,temp);
            strcpy(temp,copybuf);
   1276d:	83 ec 08             	sub    esp,0x8
   12770:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   12773:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   12776:	e8 19 4a 01 00       	call   27194 <strcpy>
   1277b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:196
            copybuf = (char *) mallocTemp (strlen (input) + 1);
   1277e:	83 ec 0c             	sub    esp,0xc
   12781:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12784:	e8 7b 4a 01 00       	call   27204 <strlen>
   12789:	83 c4 10             	add    esp,0x10
   1278c:	83 c0 01             	add    eax,0x1
   1278f:	83 ec 0c             	sub    esp,0xc
   12792:	50                   	push   eax
   12793:	e8 e3 31 01 00       	call   2597b <mallocTemp>
   12798:	83 c4 10             	add    esp,0x10
   1279b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:197
            argv[argc] = temp;
   1279e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   127a1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   127a8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   127ab:	01 c2                	add    edx,eax
   127ad:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   127b0:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:199
            //printk("set argv[%u] to 0x%08X\n",argc,temp);
            argc++;
   127b2:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:200
            argv[argc] = NULL;
   127b6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   127b9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   127c0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   127c3:	01 d0                	add    eax,edx
   127c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:201
            input++;
   127cb:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:204
          }
	}
      while (*input != EOS);
   127cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   127d2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   127d5:	84 c0                	test   al,al
   127d7:	0f 85 09 fe ff ff    	jne    125e6 <buildargv+0x5a>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:207
    }
  //printk("buildargv: exiting\n");
  return (argv);
   127dd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:208
}
   127e0:	c9                   	leave  
   127e1:	c3                   	ret    

000127e2 <QueryBDF>:
QueryBDF():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:211

void HIGH_CODE_SECTION QueryBDF(char* cmdline)
{
   127e2:	55                   	push   ebp
   127e3:	89 e5                	mov    ebp,esp
   127e5:	56                   	push   esi
   127e6:	53                   	push   ebx
   127e7:	81 ec 00 14 00 00    	sub    esp,0x1400
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:214
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];

    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   127ed:	83 ec 04             	sub    esp,0x4
   127f0:	68 00 14 00 00       	push   0x1400
   127f5:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   127fb:	50                   	push   eax
   127fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   127ff:	e8 3e fc ff ff       	call   12442 <parseParamsShell>
   12804:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:216
    //printk("Params: 0=%u, 1=%u, 2=%u",strtoul(params[0],0,16),strtoul(params[1],0,16),strtoul(params[2],0,16));
    pciQueryBDF(strtoul(params[0],0,16),strtoul(params[1],0,16),strtoul(params[2],0,16));
   12807:	83 ec 04             	sub    esp,0x4
   1280a:	6a 10                	push   0x10
   1280c:	6a 00                	push   0x0
   1280e:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   12814:	05 00 04 00 00       	add    eax,0x400
   12819:	50                   	push   eax
   1281a:	e8 0d 4a 01 00       	call   2722c <strtoul>
   1281f:	83 c4 10             	add    esp,0x10
   12822:	0f b6 f0             	movzx  esi,al
   12825:	83 ec 04             	sub    esp,0x4
   12828:	6a 10                	push   0x10
   1282a:	6a 00                	push   0x0
   1282c:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   12832:	05 00 02 00 00       	add    eax,0x200
   12837:	50                   	push   eax
   12838:	e8 ef 49 01 00       	call   2722c <strtoul>
   1283d:	83 c4 10             	add    esp,0x10
   12840:	0f b6 d8             	movzx  ebx,al
   12843:	83 ec 04             	sub    esp,0x4
   12846:	6a 10                	push   0x10
   12848:	6a 00                	push   0x0
   1284a:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   12850:	50                   	push   eax
   12851:	e8 d6 49 01 00       	call   2722c <strtoul>
   12856:	83 c4 10             	add    esp,0x10
   12859:	0f b6 c0             	movzx  eax,al
   1285c:	83 ec 04             	sub    esp,0x4
   1285f:	56                   	push   esi
   12860:	53                   	push   ebx
   12861:	50                   	push   eax
   12862:	e8 c6 3d 00 00       	call   1662d <pciQueryBDF>
   12867:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:217
}
   1286a:	90                   	nop
   1286b:	8d 65 f8             	lea    esp,[ebp-0x8]
   1286e:	5b                   	pop    ebx
   1286f:	5e                   	pop    esi
   12870:	5d                   	pop    ebp
   12871:	c3                   	ret    

00012872 <dumpP>:
dumpP():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:220

void HIGH_CODE_SECTION dumpP(char* cmdline)
{
   12872:	55                   	push   ebp
   12873:	89 e5                	mov    ebp,esp
   12875:	81 ec 48 16 00 00    	sub    esp,0x1648
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:222
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   1287b:	83 ec 04             	sub    esp,0x4
   1287e:	68 00 14 00 00       	push   0x1400
   12883:	8d 85 b8 eb ff ff    	lea    eax,[ebp-0x1448]
   12889:	50                   	push   eax
   1288a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1288d:	e8 b0 fb ff ff       	call   12442 <parseParamsShell>
   12892:	83 c4 10             	add    esp,0x10
   12895:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:223
    int lCount=0;
   12898:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:224
    uint32_t lAddress=0;
   1289f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:225
    char lCharType=' ', lCharSize=' ';
   128a6:	c6 45 ef 20          	mov    BYTE PTR [ebp-0x11],0x20
   128aa:	c6 45 ee 20          	mov    BYTE PTR [ebp-0x12],0x20
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:226
    int lTemp=0;
   128ae:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:228
    char lTempS[MAX_PARAM_WIDTH];
    bool addrIsVirtual=false;
   128b5:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:232
//    for (int cnt=0;cnt<paramCount;cnt++)
//        printk("Param # %u is %s\n", cnt, params[cnt]);
    
    memset(lTempS,0,MAX_PARAM_WIDTH);
   128b9:	83 ec 04             	sub    esp,0x4
   128bc:	68 00 02 00 00       	push   0x200
   128c1:	6a 00                	push   0x0
   128c3:	8d 85 b8 e9 ff ff    	lea    eax,[ebp-0x1648]
   128c9:	50                   	push   eax
   128ca:	e8 de 26 01 00       	call   24fad <memset>
   128cf:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:233
    for (int cnt=0;cnt<=paramCount;cnt++)
   128d2:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   128d9:	e9 15 01 00 00       	jmp    129f3 <dumpP+0x181>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:236
    {
        //printk("Processing parameter %u, value='%s'\n",cnt,params[cnt]);
        if (params[cnt][0]=='v')
   128de:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   128e1:	c1 e0 09             	shl    eax,0x9
   128e4:	8d 4d f8             	lea    ecx,[ebp-0x8]
   128e7:	01 c8                	add    eax,ecx
   128e9:	2d 40 14 00 00       	sub    eax,0x1440
   128ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   128f1:	3c 76                	cmp    al,0x76
   128f3:	75 09                	jne    128fe <dumpP+0x8c>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:239
        {
            //printk("Address is virtual parameter found\n");
            addrIsVirtual=true;
   128f5:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
   128f9:	e9 f1 00 00 00       	jmp    129ef <dumpP+0x17d>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:241
        }
        else if (params[cnt][0]=='/')
   128fe:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   12901:	c1 e0 09             	shl    eax,0x9
   12904:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12907:	01 c8                	add    eax,ecx
   12909:	2d 40 14 00 00       	sub    eax,0x1440
   1290e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12911:	3c 2f                	cmp    al,0x2f
   12913:	0f 85 af 00 00 00    	jne    129c8 <dumpP+0x156>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:243
        {
            lTemp=1;
   12919:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:244
            while (ISDIGIT(params[cnt][lTemp]))
   12920:	eb 29                	jmp    1294b <dumpP+0xd9>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:246
            {
                lTempS[lTemp-1]=params[cnt][lTemp];
   12922:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12925:	8d 50 ff             	lea    edx,[eax-0x1]
   12928:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1292b:	c1 e0 09             	shl    eax,0x9
   1292e:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12931:	01 c1                	add    ecx,eax
   12933:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12936:	01 c8                	add    eax,ecx
   12938:	2d 40 14 00 00       	sub    eax,0x1440
   1293d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12940:	88 84 15 b8 e9 ff ff 	mov    BYTE PTR [ebp+edx*1-0x1648],al
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:247
                lTemp++;
   12947:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:244
            addrIsVirtual=true;
        }
        else if (params[cnt][0]=='/')
        {
            lTemp=1;
            while (ISDIGIT(params[cnt][lTemp]))
   1294b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1294e:	c1 e0 09             	shl    eax,0x9
   12951:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12954:	8d 14 01             	lea    edx,[ecx+eax*1]
   12957:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1295a:	01 d0                	add    eax,edx
   1295c:	2d 40 14 00 00       	sub    eax,0x1440
   12961:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12964:	0f be c0             	movsx  eax,al
   12967:	83 e8 30             	sub    eax,0x30
   1296a:	83 f8 09             	cmp    eax,0x9
   1296d:	76 b3                	jbe    12922 <dumpP+0xb0>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:249
            {
                lTempS[lTemp-1]=params[cnt][lTemp];
                lTemp++;
            }
            lCount=atoi(lTempS);
   1296f:	83 ec 0c             	sub    esp,0xc
   12972:	8d 85 b8 e9 ff ff    	lea    eax,[ebp-0x1648]
   12978:	50                   	push   eax
   12979:	e8 f7 24 01 00       	call   24e75 <atoi>
   1297e:	83 c4 10             	add    esp,0x10
   12981:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:250
            lCharSize=params[cnt][lTemp++];
   12984:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12987:	8d 50 01             	lea    edx,[eax+0x1]
   1298a:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   1298d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   12990:	c1 e2 09             	shl    edx,0x9
   12993:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12996:	01 ca                	add    edx,ecx
   12998:	01 d0                	add    eax,edx
   1299a:	2d 40 14 00 00       	sub    eax,0x1440
   1299f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   129a2:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:251
            lCharType=params[cnt][lTemp++];
   129a5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   129a8:	8d 50 01             	lea    edx,[eax+0x1]
   129ab:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   129ae:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   129b1:	c1 e2 09             	shl    edx,0x9
   129b4:	8d 4d f8             	lea    ecx,[ebp-0x8]
   129b7:	01 ca                	add    edx,ecx
   129b9:	01 d0                	add    eax,edx
   129bb:	2d 40 14 00 00       	sub    eax,0x1440
   129c0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   129c3:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
   129c6:	eb 27                	jmp    129ef <dumpP+0x17d>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:253
        }
        else if (lAddress==0)
   129c8:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   129cc:	75 21                	jne    129ef <dumpP+0x17d>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:255
        {
            lAddress=strtoul(params[cnt],0,16);
   129ce:	8d 85 b8 eb ff ff    	lea    eax,[ebp-0x1448]
   129d4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   129d7:	c1 e2 09             	shl    edx,0x9
   129da:	01 d0                	add    eax,edx
   129dc:	83 ec 04             	sub    esp,0x4
   129df:	6a 10                	push   0x10
   129e1:	6a 00                	push   0x0
   129e3:	50                   	push   eax
   129e4:	e8 43 48 01 00       	call   2722c <strtoul>
   129e9:	83 c4 10             	add    esp,0x10
   129ec:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:233 (discriminator 2)
    bool addrIsVirtual=false;
//    for (int cnt=0;cnt<paramCount;cnt++)
//        printk("Param # %u is %s\n", cnt, params[cnt]);
    
    memset(lTempS,0,MAX_PARAM_WIDTH);
    for (int cnt=0;cnt<=paramCount;cnt++)
   129ef:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:233 (discriminator 1)
   129f3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   129f6:	3b 45 c8             	cmp    eax,DWORD PTR [ebp-0x38]
   129f9:	0f 8e df fe ff ff    	jle    128de <dumpP+0x6c>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:264
//    {
//        printk("Converted 0x%08X to ",lAddress);
//        lAddress=__pa(lAddress);
//        printk("%0x%08X\n", lAddress);
//    }
    if (lCount>65535)
   129ff:	81 7d f4 ff ff 00 00 	cmp    DWORD PTR [ebp-0xc],0xffff
   12a06:	7e 18                	jle    12a20 <dumpP+0x1ae>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:266
    {
        printk("Error: Count is too large (%u), max is 500, can't dump", lCount);
   12a08:	83 ec 08             	sub    esp,0x8
   12a0b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   12a0e:	68 a4 5d 04 00       	push   0x45da4
   12a13:	e8 1b 46 01 00       	call   27033 <printk>
   12a18:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:267
        return;
   12a1b:	e9 60 04 00 00       	jmp    12e80 <dumpP+0x60e>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:269
    }
    if (lCharSize!='b' && lCharSize!='h' && lCharSize!='w' && lCharSize!='d')
   12a20:	80 7d ee 62          	cmp    BYTE PTR [ebp-0x12],0x62
   12a24:	74 2c                	je     12a52 <dumpP+0x1e0>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:269 (discriminator 1)
   12a26:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12a2a:	74 26                	je     12a52 <dumpP+0x1e0>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:269 (discriminator 2)
   12a2c:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12a30:	74 20                	je     12a52 <dumpP+0x1e0>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:269 (discriminator 3)
   12a32:	80 7d ee 64          	cmp    BYTE PTR [ebp-0x12],0x64
   12a36:	74 1a                	je     12a52 <dumpP+0x1e0>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:271
    {
        printk("Error: Character size (%c) must be in bhwd", lCharSize);
   12a38:	0f be 45 ee          	movsx  eax,BYTE PTR [ebp-0x12]
   12a3c:	83 ec 08             	sub    esp,0x8
   12a3f:	50                   	push   eax
   12a40:	68 dc 5d 04 00       	push   0x45ddc
   12a45:	e8 e9 45 01 00       	call   27033 <printk>
   12a4a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:272
        return;
   12a4d:	e9 2e 04 00 00       	jmp    12e80 <dumpP+0x60e>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:274
    }
    if (lCharType!='x' && lCharType!='c' && lCharType!='e')
   12a52:	80 7d ef 78          	cmp    BYTE PTR [ebp-0x11],0x78
   12a56:	74 26                	je     12a7e <dumpP+0x20c>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:274 (discriminator 1)
   12a58:	80 7d ef 63          	cmp    BYTE PTR [ebp-0x11],0x63
   12a5c:	74 20                	je     12a7e <dumpP+0x20c>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:274 (discriminator 2)
   12a5e:	80 7d ef 65          	cmp    BYTE PTR [ebp-0x11],0x65
   12a62:	74 1a                	je     12a7e <dumpP+0x20c>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:276
    {
        printk("Error: Character type (%c) must be in xce", lCharType);
   12a64:	0f be 45 ef          	movsx  eax,BYTE PTR [ebp-0x11]
   12a68:	83 ec 08             	sub    esp,0x8
   12a6b:	50                   	push   eax
   12a6c:	68 08 5e 04 00       	push   0x45e08
   12a71:	e8 bd 45 01 00       	call   27033 <printk>
   12a76:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:277
        return;
   12a79:	e9 02 04 00 00       	jmp    12e80 <dumpP+0x60e>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:284
/*    if ((lAddress>kE820MemoryBytes || lAddress+lCount>kE820MemoryBytes) && (!addrIsVirtual))
    {
        printk("Error: Requested address (0x%08X) or address+count (0x%08X) > memory size ()", lAddress, lAddress+lCount);
        return;
    }*/
    printk("dumpP: Dumping %u %c (%c) from 0x%08X%s\n", lCount, lCharSize , lCharType, lAddress, addrIsVirtual?"(v)":"");;
   12a7e:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
   12a82:	74 07                	je     12a8b <dumpP+0x219>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:284 (discriminator 1)
   12a84:	b9 32 5e 04 00       	mov    ecx,0x45e32
   12a89:	eb 05                	jmp    12a90 <dumpP+0x21e>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:284 (discriminator 2)
   12a8b:	b9 8b 59 04 00       	mov    ecx,0x4598b
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:284 (discriminator 4)
   12a90:	0f be 55 ef          	movsx  edx,BYTE PTR [ebp-0x11]
   12a94:	0f be 45 ee          	movsx  eax,BYTE PTR [ebp-0x12]
   12a98:	83 ec 08             	sub    esp,0x8
   12a9b:	51                   	push   ecx
   12a9c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   12a9f:	52                   	push   edx
   12aa0:	50                   	push   eax
   12aa1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   12aa4:	68 38 5e 04 00       	push   0x45e38
   12aa9:	e8 85 45 01 00       	call   27033 <printk>
   12aae:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:285 (discriminator 4)
    uint8_t* mem=(uint8_t*)lAddress;
   12ab1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12ab4:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:286 (discriminator 4)
    uint16_t* memw=(uint16_t*)lAddress;
   12ab7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12aba:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:287 (discriminator 4)
    uint32_t* memd=(uint32_t*)lAddress;
   12abd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12ac0:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:288 (discriminator 4)
    uint32_t* memq=(uint32_t*)lAddress;
   12ac3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12ac6:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:289 (discriminator 4)
    int lineCount=0;
   12ac9:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:291 (discriminator 4)
    int lEntriesPerLine;
    if (lCharSize=='b')
   12ad0:	80 7d ee 62          	cmp    BYTE PTR [ebp-0x12],0x62
   12ad4:	75 07                	jne    12add <dumpP+0x26b>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:292
        lEntriesPerLine=15;
   12ad6:	c7 45 d8 0f 00 00 00 	mov    DWORD PTR [ebp-0x28],0xf
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:293
    if (lCharSize=='h')
   12add:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12ae1:	75 09                	jne    12aec <dumpP+0x27a>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:294
        lEntriesPerLine=8;
   12ae3:	c7 45 d8 08 00 00 00 	mov    DWORD PTR [ebp-0x28],0x8
   12aea:	eb 16                	jmp    12b02 <dumpP+0x290>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:295
    else if (lCharSize=='w')
   12aec:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12af0:	75 09                	jne    12afb <dumpP+0x289>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:296
        lEntriesPerLine=4;
   12af2:	c7 45 d8 04 00 00 00 	mov    DWORD PTR [ebp-0x28],0x4
   12af9:	eb 07                	jmp    12b02 <dumpP+0x290>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:298
    else
        lEntriesPerLine=3;
   12afb:	c7 45 d8 03 00 00 00 	mov    DWORD PTR [ebp-0x28],0x3
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:299
    lTemp=0; //column
   12b02:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:300
    if (!addrIsVirtual)
   12b09:	0f b6 45 e7          	movzx  eax,BYTE PTR [ebp-0x19]
   12b0d:	83 f0 01             	xor    eax,0x1
   12b10:	84 c0                	test   al,al
   12b12:	74 17                	je     12b2b <dumpP+0x2b9>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:303
    {
        //NOTE: Have to include SS here, as code below uses ebp references which implies SS
        SWITCH_TO_NON_KERNEL_DATA_AND_STACK
   12b14:	50                   	push   eax
   12b15:	b8 18 00 00 00       	mov    eax,0x18
   12b1a:	8e d8                	mov    ds,eax
   12b1c:	8e c0                	mov    es,eax
   12b1e:	8e e0                	mov    fs,eax
   12b20:	8e e8                	mov    gs,eax
   12b22:	8e d0                	mov    ss,eax
   12b24:	58                   	pop    eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:304
        __asm__("cli\n");
   12b25:	fa                   	cli    
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:305
        doNonPagingJump();
   12b26:	e8 13 e8 fe ff       	call   133e <doNonPagingJump>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:308
        //printk("Switching to 0 based GDT entry for DS,ES,FS,GS,SS\n");
    }
    if (lCharSize=='b')
   12b2b:	80 7d ee 62          	cmp    BYTE PTR [ebp-0x12],0x62
   12b2f:	0f 85 ce 01 00 00    	jne    12d03 <dumpP+0x491>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:310
    {
        printk("%08X:\t", &mem[0]);
   12b35:	83 ec 08             	sub    esp,0x8
   12b38:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
   12b3b:	68 61 5e 04 00       	push   0x45e61
   12b40:	e8 ee 44 01 00       	call   27033 <printk>
   12b45:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:311
        for (int cnt=0;cnt<lCount;cnt++)
   12b48:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
   12b4f:	e9 a1 01 00 00       	jmp    12cf5 <dumpP+0x483>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:313
        {
            if (lTemp==16)
   12b54:	83 7d e8 10          	cmp    DWORD PTR [ebp-0x18],0x10
   12b58:	0f 85 59 01 00 00    	jne    12cb7 <dumpP+0x445>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:315
            {
                puts("\t");
   12b5e:	83 ec 0c             	sub    esp,0xc
   12b61:	68 68 5e 04 00       	push   0x45e68
   12b66:	e8 6b 54 00 00       	call   17fd6 <puts>
   12b6b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:316
                for (int cnt2=0;cnt2<16;cnt2++)
   12b6e:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
   12b75:	e9 dd 00 00 00       	jmp    12c57 <dumpP+0x3e5>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:318
                {
                    if (ISALPHA(lTempS[cnt2]) || ISDIGIT(lTempS[cnt2]) || (lTempS[cnt2]>=32&&lTempS[cnt2]<=47) || (lTempS[cnt2]>=123&&lTempS[cnt2]<=126) || (lTempS[cnt2]>=91&&lTempS[cnt2]<=96))
   12b7a:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12b80:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12b83:	01 d0                	add    eax,edx
   12b85:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12b88:	83 c8 20             	or     eax,0x20
   12b8b:	0f be c0             	movsx  eax,al
   12b8e:	83 e8 61             	sub    eax,0x61
   12b91:	83 f8 19             	cmp    eax,0x19
   12b94:	0f 86 85 00 00 00    	jbe    12c1f <dumpP+0x3ad>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:318 (discriminator 1)
   12b9a:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12ba0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12ba3:	01 d0                	add    eax,edx
   12ba5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12ba8:	0f be c0             	movsx  eax,al
   12bab:	83 e8 30             	sub    eax,0x30
   12bae:	83 f8 09             	cmp    eax,0x9
   12bb1:	76 6c                	jbe    12c1f <dumpP+0x3ad>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:318 (discriminator 2)
   12bb3:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12bb9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12bbc:	01 d0                	add    eax,edx
   12bbe:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12bc1:	3c 1f                	cmp    al,0x1f
   12bc3:	7e 12                	jle    12bd7 <dumpP+0x365>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:318 (discriminator 3)
   12bc5:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12bcb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12bce:	01 d0                	add    eax,edx
   12bd0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12bd3:	3c 2f                	cmp    al,0x2f
   12bd5:	7e 48                	jle    12c1f <dumpP+0x3ad>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:318 (discriminator 5)
   12bd7:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12bdd:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12be0:	01 d0                	add    eax,edx
   12be2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12be5:	3c 7a                	cmp    al,0x7a
   12be7:	7e 12                	jle    12bfb <dumpP+0x389>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:318 (discriminator 6)
   12be9:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12bef:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12bf2:	01 d0                	add    eax,edx
   12bf4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12bf7:	3c 7f                	cmp    al,0x7f
   12bf9:	75 24                	jne    12c1f <dumpP+0x3ad>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:318 (discriminator 8)
   12bfb:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12c01:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12c04:	01 d0                	add    eax,edx
   12c06:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12c09:	3c 5a                	cmp    al,0x5a
   12c0b:	7e 36                	jle    12c43 <dumpP+0x3d1>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:318 (discriminator 9)
   12c0d:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12c13:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12c16:	01 d0                	add    eax,edx
   12c18:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12c1b:	3c 60                	cmp    al,0x60
   12c1d:	7f 24                	jg     12c43 <dumpP+0x3d1>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:319
                        printk("%c",lTempS[cnt2]);
   12c1f:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12c25:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12c28:	01 d0                	add    eax,edx
   12c2a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12c2d:	0f be c0             	movsx  eax,al
   12c30:	83 ec 08             	sub    esp,0x8
   12c33:	50                   	push   eax
   12c34:	68 6a 5e 04 00       	push   0x45e6a
   12c39:	e8 f5 43 01 00       	call   27033 <printk>
   12c3e:	83 c4 10             	add    esp,0x10
   12c41:	eb 10                	jmp    12c53 <dumpP+0x3e1>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:321
                    else
                        puts(".");
   12c43:	83 ec 0c             	sub    esp,0xc
   12c46:	68 6d 5e 04 00       	push   0x45e6d
   12c4b:	e8 86 53 00 00       	call   17fd6 <puts>
   12c50:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:316 (discriminator 2)
        for (int cnt=0;cnt<lCount;cnt++)
        {
            if (lTemp==16)
            {
                puts("\t");
                for (int cnt2=0;cnt2<16;cnt2++)
   12c53:	83 45 d0 01          	add    DWORD PTR [ebp-0x30],0x1
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:316 (discriminator 1)
   12c57:	83 7d d0 0f          	cmp    DWORD PTR [ebp-0x30],0xf
   12c5b:	0f 8e 19 ff ff ff    	jle    12b7a <dumpP+0x308>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:323
                    if (ISALPHA(lTempS[cnt2]) || ISDIGIT(lTempS[cnt2]) || (lTempS[cnt2]>=32&&lTempS[cnt2]<=47) || (lTempS[cnt2]>=123&&lTempS[cnt2]<=126) || (lTempS[cnt2]>=91&&lTempS[cnt2]<=96))
                        printk("%c",lTempS[cnt2]);
                    else
                        puts(".");
                }
                puts("\n");
   12c61:	83 ec 0c             	sub    esp,0xc
   12c64:	68 6f 5e 04 00       	push   0x45e6f
   12c69:	e8 68 53 00 00       	call   17fd6 <puts>
   12c6e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:324
                if (++lineCount==SYS_VGA_HEIGHT-1)
   12c71:	83 45 dc 01          	add    DWORD PTR [ebp-0x24],0x1
   12c75:	83 7d dc 31          	cmp    DWORD PTR [ebp-0x24],0x31
   12c79:	75 1c                	jne    12c97 <dumpP+0x425>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:326
                {
                    if (pauseDisplay(true))
   12c7b:	83 ec 0c             	sub    esp,0xc
   12c7e:	6a 01                	push   0x1
   12c80:	e8 76 2c 01 00       	call   258fb <pauseDisplay>
   12c85:	83 c4 10             	add    esp,0x10
   12c88:	84 c0                	test   al,al
   12c8a:	0f 85 88 00 00 00    	jne    12d18 <dumpP+0x4a6>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:328
                        break;
                    lineCount=0;
   12c90:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:330
                }
                printk("%08X:\t", &mem[cnt]);
   12c97:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
   12c9a:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
   12c9d:	01 d0                	add    eax,edx
   12c9f:	83 ec 08             	sub    esp,0x8
   12ca2:	50                   	push   eax
   12ca3:	68 61 5e 04 00       	push   0x45e61
   12ca8:	e8 86 43 01 00       	call   27033 <printk>
   12cad:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:331
                lTemp=0;
   12cb0:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:333 (discriminator 2)
            }
            printk("%02X ",mem[cnt]);
   12cb7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
   12cba:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
   12cbd:	01 d0                	add    eax,edx
   12cbf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12cc2:	0f b6 c0             	movzx  eax,al
   12cc5:	83 ec 08             	sub    esp,0x8
   12cc8:	50                   	push   eax
   12cc9:	68 71 5e 04 00       	push   0x45e71
   12cce:	e8 60 43 01 00       	call   27033 <printk>
   12cd3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:334 (discriminator 2)
            lTempS[lTemp++]=mem[cnt];
   12cd6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12cd9:	8d 50 01             	lea    edx,[eax+0x1]
   12cdc:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   12cdf:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
   12ce2:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
   12ce5:	01 ca                	add    edx,ecx
   12ce7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   12cea:	88 94 05 b8 e9 ff ff 	mov    BYTE PTR [ebp+eax*1-0x1648],dl
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:311 (discriminator 2)
        //printk("Switching to 0 based GDT entry for DS,ES,FS,GS,SS\n");
    }
    if (lCharSize=='b')
    {
        printk("%08X:\t", &mem[0]);
        for (int cnt=0;cnt<lCount;cnt++)
   12cf1:	83 45 d4 01          	add    DWORD PTR [ebp-0x2c],0x1
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:311 (discriminator 1)
   12cf5:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   12cf8:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   12cfb:	0f 8c 53 fe ff ff    	jl     12b54 <dumpP+0x2e2>
   12d01:	eb 16                	jmp    12d19 <dumpP+0x4a7>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:338
            printk("%02X ",mem[cnt]);
            lTempS[lTemp++]=mem[cnt];
        }
    }
    else
        printk("%08X:", &memw[0]);
   12d03:	83 ec 08             	sub    esp,0x8
   12d06:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
   12d09:	68 77 5e 04 00       	push   0x45e77
   12d0e:	e8 20 43 01 00       	call   27033 <printk>
   12d13:	83 c4 10             	add    esp,0x10
   12d16:	eb 01                	jmp    12d19 <dumpP+0x4a7>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:327
                }
                puts("\n");
                if (++lineCount==SYS_VGA_HEIGHT-1)
                {
                    if (pauseDisplay(true))
                        break;
   12d18:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:339
            lTempS[lTemp++]=mem[cnt];
        }
    }
    else
        printk("%08X:", &memw[0]);
        for (int cnt=0;cnt<lCount;cnt++)
   12d19:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
   12d20:	e9 0f 01 00 00       	jmp    12e34 <dumpP+0x5c2>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:341
        {
            if (lTemp==lEntriesPerLine)
   12d25:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12d28:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
   12d2b:	0f 85 a9 00 00 00    	jne    12dda <dumpP+0x568>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:343
            {
                puts("\n");
   12d31:	83 ec 0c             	sub    esp,0xc
   12d34:	68 6f 5e 04 00       	push   0x45e6f
   12d39:	e8 98 52 00 00       	call   17fd6 <puts>
   12d3e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:344
                if (++lineCount==SYS_VGA_HEIGHT-1)
   12d41:	83 45 dc 01          	add    DWORD PTR [ebp-0x24],0x1
   12d45:	83 7d dc 31          	cmp    DWORD PTR [ebp-0x24],0x31
   12d49:	75 1c                	jne    12d67 <dumpP+0x4f5>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:346
                {
                    if (pauseDisplay(true))
   12d4b:	83 ec 0c             	sub    esp,0xc
   12d4e:	6a 01                	push   0x1
   12d50:	e8 a6 2b 01 00       	call   258fb <pauseDisplay>
   12d55:	83 c4 10             	add    esp,0x10
   12d58:	84 c0                	test   al,al
   12d5a:	0f 85 e2 00 00 00    	jne    12e42 <dumpP+0x5d0>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:348
                        break;
                    lineCount=0;
   12d60:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:350
                }
                lTemp=0;
   12d67:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:351
                if (lCharSize=='h')
   12d6e:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12d72:	75 1e                	jne    12d92 <dumpP+0x520>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:352
                    printk("%08X:", &memw[cnt]);
   12d74:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12d77:	8d 14 00             	lea    edx,[eax+eax*1]
   12d7a:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
   12d7d:	01 d0                	add    eax,edx
   12d7f:	83 ec 08             	sub    esp,0x8
   12d82:	50                   	push   eax
   12d83:	68 77 5e 04 00       	push   0x45e77
   12d88:	e8 a6 42 01 00       	call   27033 <printk>
   12d8d:	83 c4 10             	add    esp,0x10
   12d90:	eb 48                	jmp    12dda <dumpP+0x568>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:353
                else if (lCharSize=='w')
   12d92:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12d96:	75 22                	jne    12dba <dumpP+0x548>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:354
                    printk("%08X:", &memd[cnt]);
   12d98:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12d9b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   12da2:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
   12da5:	01 d0                	add    eax,edx
   12da7:	83 ec 08             	sub    esp,0x8
   12daa:	50                   	push   eax
   12dab:	68 77 5e 04 00       	push   0x45e77
   12db0:	e8 7e 42 01 00       	call   27033 <printk>
   12db5:	83 c4 10             	add    esp,0x10
   12db8:	eb 20                	jmp    12dda <dumpP+0x568>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:356
                else
                    printk("%08X:", &memq[cnt]);
   12dba:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12dbd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   12dc4:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
   12dc7:	01 d0                	add    eax,edx
   12dc9:	83 ec 08             	sub    esp,0x8
   12dcc:	50                   	push   eax
   12dcd:	68 77 5e 04 00       	push   0x45e77
   12dd2:	e8 5c 42 01 00       	call   27033 <printk>
   12dd7:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:358
            }
            if (lCharSize=='h')
   12dda:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12dde:	75 24                	jne    12e04 <dumpP+0x592>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:359
                printk("%04X ",memw[cnt]);
   12de0:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12de3:	8d 14 00             	lea    edx,[eax+eax*1]
   12de6:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
   12de9:	01 d0                	add    eax,edx
   12deb:	0f b7 00             	movzx  eax,WORD PTR [eax]
   12dee:	0f b7 c0             	movzx  eax,ax
   12df1:	83 ec 08             	sub    esp,0x8
   12df4:	50                   	push   eax
   12df5:	68 7d 5e 04 00       	push   0x45e7d
   12dfa:	e8 34 42 01 00       	call   27033 <printk>
   12dff:	83 c4 10             	add    esp,0x10
   12e02:	eb 28                	jmp    12e2c <dumpP+0x5ba>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:360
            else if (lCharSize=='w')
   12e04:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12e08:	75 22                	jne    12e2c <dumpP+0x5ba>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:361
                printk("%08X ", memd[cnt]);
   12e0a:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12e0d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   12e14:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
   12e17:	01 d0                	add    eax,edx
   12e19:	8b 00                	mov    eax,DWORD PTR [eax]
   12e1b:	83 ec 08             	sub    esp,0x8
   12e1e:	50                   	push   eax
   12e1f:	68 83 5e 04 00       	push   0x45e83
   12e24:	e8 0a 42 01 00       	call   27033 <printk>
   12e29:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:362 (discriminator 2)
            lTemp++;
   12e2c:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:339 (discriminator 2)
            lTempS[lTemp++]=mem[cnt];
        }
    }
    else
        printk("%08X:", &memw[0]);
        for (int cnt=0;cnt<lCount;cnt++)
   12e30:	83 45 cc 01          	add    DWORD PTR [ebp-0x34],0x1
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:339 (discriminator 1)
   12e34:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12e37:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   12e3a:	0f 8c e5 fe ff ff    	jl     12d25 <dumpP+0x4b3>
   12e40:	eb 01                	jmp    12e43 <dumpP+0x5d1>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:347
            {
                puts("\n");
                if (++lineCount==SYS_VGA_HEIGHT-1)
                {
                    if (pauseDisplay(true))
                        break;
   12e42:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:364
                printk("%04X ",memw[cnt]);
            else if (lCharSize=='w')
                printk("%08X ", memd[cnt]);
            lTemp++;
        }
    puts("\n");
   12e43:	83 ec 0c             	sub    esp,0xc
   12e46:	68 6f 5e 04 00       	push   0x45e6f
   12e4b:	e8 86 51 00 00       	call   17fd6 <puts>
   12e50:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:365
    if (!addrIsVirtual)
   12e53:	0f b6 45 e7          	movzx  eax,BYTE PTR [ebp-0x19]
   12e57:	83 f0 01             	xor    eax,0x1
   12e5a:	84 c0                	test   al,al
   12e5c:	74 22                	je     12e80 <dumpP+0x60e>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:367
    {
       __asm__("mov eax,cr0\n or eax,0x80000000\n mov cr0,eax\n");
   12e5e:	0f 20 c0             	mov    eax,cr0
   12e61:	0d 00 00 00 80       	or     eax,0x80000000
   12e66:	0f 22 c0             	mov    cr0,eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:368
       doPagingJump();
   12e69:	e8 b9 e4 fe ff       	call   1327 <doPagingJump>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:369
        SWITCH_TO_KERNEL_DATA_AND_STACK
   12e6e:	50                   	push   eax
   12e6f:	b8 10 00 00 00       	mov    eax,0x10
   12e74:	8e d8                	mov    ds,eax
   12e76:	8e c0                	mov    es,eax
   12e78:	8e e0                	mov    fs,eax
   12e7a:	8e e8                	mov    gs,eax
   12e7c:	8e d0                	mov    ss,eax
   12e7e:	58                   	pop    eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:370
        __asm__("sti\n");
   12e7f:	fb                   	sti    
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:372
    }
}
   12e80:	c9                   	leave  
   12e81:	c3                   	ret    

00012e82 <dumpV>:
dumpV():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:375

void HIGH_CODE_SECTION dumpV(char* cmdline)
{
   12e82:	55                   	push   ebp
   12e83:	89 e5                	mov    ebp,esp
   12e85:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:376
    strcat(cmdline," v");
   12e88:	83 ec 08             	sub    esp,0x8
   12e8b:	68 89 5e 04 00       	push   0x45e89
   12e90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12e93:	e8 14 42 01 00       	call   270ac <strcat>
   12e98:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:377
    dumpP(cmdline);
   12e9b:	83 ec 0c             	sub    esp,0xc
   12e9e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12ea1:	e8 cc f9 ff ff       	call   12872 <dumpP>
   12ea6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:378
}
   12ea9:	90                   	nop
   12eaa:	c9                   	leave  
   12eab:	c3                   	ret    

00012eac <helpMe>:
helpMe():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:381

void HIGH_CODE_SECTION helpMe()
{
   12eac:	55                   	push   ebp
   12ead:	89 e5                	mov    ebp,esp
   12eaf:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:382
    printk("Help:\n");
   12eb2:	83 ec 0c             	sub    esp,0xc
   12eb5:	68 8c 5e 04 00       	push   0x45e8c
   12eba:	e8 74 41 01 00       	call   27033 <printk>
   12ebf:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:383
    for (unsigned cnt=0;cnt<sizeof(cmds)/sizeof(command_table_t);cnt++)
   12ec2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   12ec9:	eb 30                	jmp    12efb <helpMe+0x4f>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:384 (discriminator 3)
        printk("\t%s: %s\n", cmds[cnt].name, cmds[cnt].description);
   12ecb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12ece:	c1 e0 04             	shl    eax,0x4
   12ed1:	05 04 88 02 00       	add    eax,0x28804
   12ed6:	8b 10                	mov    edx,DWORD PTR [eax]
   12ed8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12edb:	c1 e0 04             	shl    eax,0x4
   12ede:	05 00 88 02 00       	add    eax,0x28800
   12ee3:	8b 00                	mov    eax,DWORD PTR [eax]
   12ee5:	83 ec 04             	sub    esp,0x4
   12ee8:	52                   	push   edx
   12ee9:	50                   	push   eax
   12eea:	68 93 5e 04 00       	push   0x45e93
   12eef:	e8 3f 41 01 00       	call   27033 <printk>
   12ef4:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:383 (discriminator 3)
}

void HIGH_CODE_SECTION helpMe()
{
    printk("Help:\n");
    for (unsigned cnt=0;cnt<sizeof(cmds)/sizeof(command_table_t);cnt++)
   12ef7:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:383 (discriminator 1)
   12efb:	83 7d f4 1a          	cmp    DWORD PTR [ebp-0xc],0x1a
   12eff:	76 ca                	jbe    12ecb <helpMe+0x1f>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:385
        printk("\t%s: %s\n", cmds[cnt].name, cmds[cnt].description);
}
   12f01:	90                   	nop
   12f02:	c9                   	leave  
   12f03:	c3                   	ret    

00012f04 <inPortB>:
inPortB():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:388

void HIGH_CODE_SECTION inPortB(char* cmdline)
{
   12f04:	55                   	push   ebp
   12f05:	89 e5                	mov    ebp,esp
   12f07:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:390
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   12f0d:	83 ec 04             	sub    esp,0x4
   12f10:	68 00 14 00 00       	push   0x1400
   12f15:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   12f1b:	50                   	push   eax
   12f1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12f1f:	e8 1e f5 ff ff       	call   12442 <parseParamsShell>
   12f24:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:392
   
   uint8_t inVal=inb(strtoul(params[0],0,16));
   12f27:	83 ec 04             	sub    esp,0x4
   12f2a:	6a 10                	push   0x10
   12f2c:	6a 00                	push   0x0
   12f2e:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   12f34:	50                   	push   eax
   12f35:	e8 f2 42 01 00       	call   2722c <strtoul>
   12f3a:	83 c4 10             	add    esp,0x10
   12f3d:	0f b7 c0             	movzx  eax,ax
   12f40:	83 ec 0c             	sub    esp,0xc
   12f43:	50                   	push   eax
   12f44:	e8 96 f2 ff ff       	call   121df <inb>
   12f49:	83 c4 10             	add    esp,0x10
   12f4c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:393
   printk("0x%02X\n",inVal);
   12f4f:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   12f53:	83 ec 08             	sub    esp,0x8
   12f56:	50                   	push   eax
   12f57:	68 9c 5e 04 00       	push   0x45e9c
   12f5c:	e8 d2 40 01 00       	call   27033 <printk>
   12f61:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:394
}
   12f64:	90                   	nop
   12f65:	c9                   	leave  
   12f66:	c3                   	ret    

00012f67 <inPortW>:
inPortW():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:397

void HIGH_CODE_SECTION inPortW(char* cmdline)
{
   12f67:	55                   	push   ebp
   12f68:	89 e5                	mov    ebp,esp
   12f6a:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:399
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   12f70:	83 ec 04             	sub    esp,0x4
   12f73:	68 00 14 00 00       	push   0x1400
   12f78:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   12f7e:	50                   	push   eax
   12f7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12f82:	e8 bb f4 ff ff       	call   12442 <parseParamsShell>
   12f87:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:401
   
   uint8_t inVal=inw(strtoul(params[0],0,16));
   12f8a:	83 ec 04             	sub    esp,0x4
   12f8d:	6a 10                	push   0x10
   12f8f:	6a 00                	push   0x0
   12f91:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   12f97:	50                   	push   eax
   12f98:	e8 8f 42 01 00       	call   2722c <strtoul>
   12f9d:	83 c4 10             	add    esp,0x10
   12fa0:	0f b7 c0             	movzx  eax,ax
   12fa3:	83 ec 0c             	sub    esp,0xc
   12fa6:	50                   	push   eax
   12fa7:	e8 50 f2 ff ff       	call   121fc <inw>
   12fac:	83 c4 10             	add    esp,0x10
   12faf:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:402
   printk("0x%04X\n",inVal);
   12fb2:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   12fb6:	83 ec 08             	sub    esp,0x8
   12fb9:	50                   	push   eax
   12fba:	68 a4 5e 04 00       	push   0x45ea4
   12fbf:	e8 6f 40 01 00       	call   27033 <printk>
   12fc4:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:403
}
   12fc7:	90                   	nop
   12fc8:	c9                   	leave  
   12fc9:	c3                   	ret    

00012fca <inPortD>:
inPortD():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:406

void HIGH_CODE_SECTION inPortD(char* cmdline)
{
   12fca:	55                   	push   ebp
   12fcb:	89 e5                	mov    ebp,esp
   12fcd:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:408
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   12fd3:	83 ec 04             	sub    esp,0x4
   12fd6:	68 00 14 00 00       	push   0x1400
   12fdb:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   12fe1:	50                   	push   eax
   12fe2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12fe5:	e8 58 f4 ff ff       	call   12442 <parseParamsShell>
   12fea:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:410
   
   uint8_t inVal=inl(strtoul(params[0],0,16));
   12fed:	83 ec 04             	sub    esp,0x4
   12ff0:	6a 10                	push   0x10
   12ff2:	6a 00                	push   0x0
   12ff4:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   12ffa:	50                   	push   eax
   12ffb:	e8 2c 42 01 00       	call   2722c <strtoul>
   13000:	83 c4 10             	add    esp,0x10
   13003:	0f b7 c0             	movzx  eax,ax
   13006:	83 ec 0c             	sub    esp,0xc
   13009:	50                   	push   eax
   1300a:	e8 0c f2 ff ff       	call   1221b <inl>
   1300f:	83 c4 10             	add    esp,0x10
   13012:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:411
   printk("0x%08X\n",inVal);
   13015:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   13019:	83 ec 08             	sub    esp,0x8
   1301c:	50                   	push   eax
   1301d:	68 ac 5e 04 00       	push   0x45eac
   13022:	e8 0c 40 01 00       	call   27033 <printk>
   13027:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:412
}
   1302a:	90                   	nop
   1302b:	c9                   	leave  
   1302c:	c3                   	ret    

0001302d <outPortB>:
outPortB():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:415

void HIGH_CODE_SECTION outPortB(char* cmdline)
{
   1302d:	55                   	push   ebp
   1302e:	89 e5                	mov    ebp,esp
   13030:	53                   	push   ebx
   13031:	81 ec 04 14 00 00    	sub    esp,0x1404
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:417
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13037:	83 ec 04             	sub    esp,0x4
   1303a:	68 00 14 00 00       	push   0x1400
   1303f:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   13045:	50                   	push   eax
   13046:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13049:	e8 f4 f3 ff ff       	call   12442 <parseParamsShell>
   1304e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:419
   
   outb(strtoul(params[0],0,16),strtoul(params[1],0,16));
   13051:	83 ec 04             	sub    esp,0x4
   13054:	6a 10                	push   0x10
   13056:	6a 00                	push   0x0
   13058:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   1305e:	05 00 02 00 00       	add    eax,0x200
   13063:	50                   	push   eax
   13064:	e8 c3 41 01 00       	call   2722c <strtoul>
   13069:	83 c4 10             	add    esp,0x10
   1306c:	0f b6 d8             	movzx  ebx,al
   1306f:	83 ec 04             	sub    esp,0x4
   13072:	6a 10                	push   0x10
   13074:	6a 00                	push   0x0
   13076:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   1307c:	50                   	push   eax
   1307d:	e8 aa 41 01 00       	call   2722c <strtoul>
   13082:	83 c4 10             	add    esp,0x10
   13085:	0f b7 c0             	movzx  eax,ax
   13088:	83 ec 08             	sub    esp,0x8
   1308b:	53                   	push   ebx
   1308c:	50                   	push   eax
   1308d:	e8 f5 f0 ff ff       	call   12187 <outb>
   13092:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:420
}
   13095:	90                   	nop
   13096:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   13099:	c9                   	leave  
   1309a:	c3                   	ret    

0001309b <outPortW>:
outPortW():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:423

void HIGH_CODE_SECTION outPortW(char* cmdline)
{
   1309b:	55                   	push   ebp
   1309c:	89 e5                	mov    ebp,esp
   1309e:	53                   	push   ebx
   1309f:	81 ec 04 14 00 00    	sub    esp,0x1404
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:425
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   130a5:	83 ec 04             	sub    esp,0x4
   130a8:	68 00 14 00 00       	push   0x1400
   130ad:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   130b3:	50                   	push   eax
   130b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   130b7:	e8 86 f3 ff ff       	call   12442 <parseParamsShell>
   130bc:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:427
   
   outw(strtoul(params[0],0,16),strtoul(params[1],0,16));
   130bf:	83 ec 04             	sub    esp,0x4
   130c2:	6a 10                	push   0x10
   130c4:	6a 00                	push   0x0
   130c6:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   130cc:	05 00 02 00 00       	add    eax,0x200
   130d1:	50                   	push   eax
   130d2:	e8 55 41 01 00       	call   2722c <strtoul>
   130d7:	83 c4 10             	add    esp,0x10
   130da:	0f b7 d8             	movzx  ebx,ax
   130dd:	83 ec 04             	sub    esp,0x4
   130e0:	6a 10                	push   0x10
   130e2:	6a 00                	push   0x0
   130e4:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   130ea:	50                   	push   eax
   130eb:	e8 3c 41 01 00       	call   2722c <strtoul>
   130f0:	83 c4 10             	add    esp,0x10
   130f3:	0f b7 c0             	movzx  eax,ax
   130f6:	83 ec 08             	sub    esp,0x8
   130f9:	53                   	push   ebx
   130fa:	50                   	push   eax
   130fb:	e8 a6 f0 ff ff       	call   121a6 <outw>
   13100:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:428
}
   13103:	90                   	nop
   13104:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   13107:	c9                   	leave  
   13108:	c3                   	ret    

00013109 <outPortD>:
outPortD():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:431

void HIGH_CODE_SECTION outPortD(char* cmdline)
{
   13109:	55                   	push   ebp
   1310a:	89 e5                	mov    ebp,esp
   1310c:	53                   	push   ebx
   1310d:	81 ec 04 14 00 00    	sub    esp,0x1404
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:433
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13113:	83 ec 04             	sub    esp,0x4
   13116:	68 00 14 00 00       	push   0x1400
   1311b:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   13121:	50                   	push   eax
   13122:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13125:	e8 18 f3 ff ff       	call   12442 <parseParamsShell>
   1312a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:435
   
   outl(strtoul(params[0],0,16),strtoul(params[1],0,16));
   1312d:	83 ec 04             	sub    esp,0x4
   13130:	6a 10                	push   0x10
   13132:	6a 00                	push   0x0
   13134:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   1313a:	05 00 02 00 00       	add    eax,0x200
   1313f:	50                   	push   eax
   13140:	e8 e7 40 01 00       	call   2722c <strtoul>
   13145:	83 c4 10             	add    esp,0x10
   13148:	89 c3                	mov    ebx,eax
   1314a:	83 ec 04             	sub    esp,0x4
   1314d:	6a 10                	push   0x10
   1314f:	6a 00                	push   0x0
   13151:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   13157:	50                   	push   eax
   13158:	e8 cf 40 01 00       	call   2722c <strtoul>
   1315d:	83 c4 10             	add    esp,0x10
   13160:	0f b7 c0             	movzx  eax,ax
   13163:	83 ec 08             	sub    esp,0x8
   13166:	53                   	push   ebx
   13167:	50                   	push   eax
   13168:	e8 5a f0 ff ff       	call   121c7 <outl>
   1316d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:436
}
   13170:	90                   	nop
   13171:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   13174:	c9                   	leave  
   13175:	c3                   	ret    

00013176 <writeBytes>:
writeBytes():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:439

void HIGH_CODE_SECTION writeBytes(char* cmdline)
{
   13176:	55                   	push   ebp
   13177:	89 e5                	mov    ebp,esp
   13179:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:441
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   1317f:	83 ec 04             	sub    esp,0x4
   13182:	68 00 14 00 00       	push   0x1400
   13187:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   1318d:	50                   	push   eax
   1318e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13191:	e8 ac f2 ff ff       	call   12442 <parseParamsShell>
   13196:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:443

    uint8_t* bytes=(uint8_t*)strtoul(params[0],0,16);
   13199:	83 ec 04             	sub    esp,0x4
   1319c:	6a 10                	push   0x10
   1319e:	6a 00                	push   0x0
   131a0:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   131a6:	50                   	push   eax
   131a7:	e8 80 40 01 00       	call   2722c <strtoul>
   131ac:	83 c4 10             	add    esp,0x10
   131af:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:444
    bytes[0]=strtoul(params[1],0,16);
   131b2:	83 ec 04             	sub    esp,0x4
   131b5:	6a 10                	push   0x10
   131b7:	6a 00                	push   0x0
   131b9:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   131bf:	05 00 02 00 00       	add    eax,0x200
   131c4:	50                   	push   eax
   131c5:	e8 62 40 01 00       	call   2722c <strtoul>
   131ca:	83 c4 10             	add    esp,0x10
   131cd:	89 c2                	mov    edx,eax
   131cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   131d2:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:445
}
   131d4:	90                   	nop
   131d5:	c9                   	leave  
   131d6:	c3                   	ret    

000131d7 <writeWords>:
writeWords():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:448

void HIGH_CODE_SECTION writeWords(char* cmdline)
{
   131d7:	55                   	push   ebp
   131d8:	89 e5                	mov    ebp,esp
   131da:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:450
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   131e0:	83 ec 04             	sub    esp,0x4
   131e3:	68 00 14 00 00       	push   0x1400
   131e8:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   131ee:	50                   	push   eax
   131ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   131f2:	e8 4b f2 ff ff       	call   12442 <parseParamsShell>
   131f7:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:452

    uint16_t* words=(uint16_t*)strtoul(params[0],0,16);
   131fa:	83 ec 04             	sub    esp,0x4
   131fd:	6a 10                	push   0x10
   131ff:	6a 00                	push   0x0
   13201:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   13207:	50                   	push   eax
   13208:	e8 1f 40 01 00       	call   2722c <strtoul>
   1320d:	83 c4 10             	add    esp,0x10
   13210:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:453
    words[0]=strtoul(params[1],0,16);
   13213:	83 ec 04             	sub    esp,0x4
   13216:	6a 10                	push   0x10
   13218:	6a 00                	push   0x0
   1321a:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   13220:	05 00 02 00 00       	add    eax,0x200
   13225:	50                   	push   eax
   13226:	e8 01 40 01 00       	call   2722c <strtoul>
   1322b:	83 c4 10             	add    esp,0x10
   1322e:	89 c2                	mov    edx,eax
   13230:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13233:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:454
}
   13236:	90                   	nop
   13237:	c9                   	leave  
   13238:	c3                   	ret    

00013239 <writeDWords>:
writeDWords():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:457

void HIGH_CODE_SECTION writeDWords(char* cmdline)
{
   13239:	55                   	push   ebp
   1323a:	89 e5                	mov    ebp,esp
   1323c:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:459
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13242:	83 ec 04             	sub    esp,0x4
   13245:	68 00 14 00 00       	push   0x1400
   1324a:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   13250:	50                   	push   eax
   13251:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13254:	e8 e9 f1 ff ff       	call   12442 <parseParamsShell>
   13259:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:461

    uint32_t* dwords=(uint32_t*)strtoul(params[0],0,16);
   1325c:	83 ec 04             	sub    esp,0x4
   1325f:	6a 10                	push   0x10
   13261:	6a 00                	push   0x0
   13263:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   13269:	50                   	push   eax
   1326a:	e8 bd 3f 01 00       	call   2722c <strtoul>
   1326f:	83 c4 10             	add    esp,0x10
   13272:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:462
    dwords[0]=strtoul(params[1],0,16);
   13275:	83 ec 04             	sub    esp,0x4
   13278:	6a 10                	push   0x10
   1327a:	6a 00                	push   0x0
   1327c:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   13282:	05 00 02 00 00       	add    eax,0x200
   13287:	50                   	push   eax
   13288:	e8 9f 3f 01 00       	call   2722c <strtoul>
   1328d:	83 c4 10             	add    esp,0x10
   13290:	89 c2                	mov    edx,eax
   13292:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13295:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:463
}
   13297:	90                   	nop
   13298:	c9                   	leave  
   13299:	c3                   	ret    

0001329a <showMapping>:
showMapping():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:466

void HIGH_CODE_SECTION showMapping(char* cmdline)
{
   1329a:	55                   	push   ebp
   1329b:	89 e5                	mov    ebp,esp
   1329d:	57                   	push   edi
   1329e:	56                   	push   esi
   1329f:	53                   	push   ebx
   132a0:	81 ec 2c 14 00 00    	sub    esp,0x142c
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:468
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   132a6:	83 ec 04             	sub    esp,0x4
   132a9:	68 00 14 00 00       	push   0x1400
   132ae:	8d 85 e4 eb ff ff    	lea    eax,[ebp-0x141c]
   132b4:	50                   	push   eax
   132b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   132b8:	e8 85 f1 ff ff       	call   12442 <parseParamsShell>
   132bd:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:470

    uintptr_t lAddress=strtoul(params[0],0,16);
   132c0:	83 ec 04             	sub    esp,0x4
   132c3:	6a 10                	push   0x10
   132c5:	6a 00                	push   0x0
   132c7:	8d 85 e4 eb ff ff    	lea    eax,[ebp-0x141c]
   132cd:	50                   	push   eax
   132ce:	e8 59 3f 01 00       	call   2722c <strtoul>
   132d3:	83 c4 10             	add    esp,0x10
   132d6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:471
    printk("\tPD address=0x%08X, \n\tPD value=0x%08X, \n\tPT address=0x%08X, \n\tPT value=0x%08X\n\tPhysical Address=0x%08X\n",kPagingGet4kPDEntryAddress(lAddress),kPagingGet4kPDEntryValue(lAddress),kPagingGet4kPTEntryAddress(lAddress),kPagingGet4kPTEntryValue(lAddress),(kPagingGet4kPTEntryValue(lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF));
   132d9:	83 ec 0c             	sub    esp,0xc
   132dc:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   132df:	e8 c7 e1 ff ff       	call   114ab <kPagingGet4kPTEntryValue>
   132e4:	83 c4 10             	add    esp,0x10
   132e7:	25 00 f0 ff ff       	and    eax,0xfffff000
   132ec:	89 c2                	mov    edx,eax
   132ee:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   132f1:	25 ff 0f 00 00       	and    eax,0xfff
   132f6:	09 c2                	or     edx,eax
   132f8:	89 d3                	mov    ebx,edx
   132fa:	83 ec 0c             	sub    esp,0xc
   132fd:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   13300:	e8 a6 e1 ff ff       	call   114ab <kPagingGet4kPTEntryValue>
   13305:	83 c4 10             	add    esp,0x10
   13308:	89 85 d4 eb ff ff    	mov    DWORD PTR [ebp-0x142c],eax
   1330e:	83 ec 0c             	sub    esp,0xc
   13311:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   13314:	e8 5c e1 ff ff       	call   11475 <kPagingGet4kPTEntryAddress>
   13319:	83 c4 10             	add    esp,0x10
   1331c:	89 c7                	mov    edi,eax
   1331e:	83 ec 0c             	sub    esp,0xc
   13321:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   13324:	e8 c3 e0 ff ff       	call   113ec <kPagingGet4kPDEntryValue>
   13329:	83 c4 10             	add    esp,0x10
   1332c:	89 c6                	mov    esi,eax
   1332e:	83 ec 0c             	sub    esp,0xc
   13331:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   13334:	e8 fa e0 ff ff       	call   11433 <kPagingGet4kPDEntryAddress>
   13339:	83 c4 10             	add    esp,0x10
   1333c:	83 ec 08             	sub    esp,0x8
   1333f:	53                   	push   ebx
   13340:	ff b5 d4 eb ff ff    	push   DWORD PTR [ebp-0x142c]
   13346:	57                   	push   edi
   13347:	56                   	push   esi
   13348:	50                   	push   eax
   13349:	68 b4 5e 04 00       	push   0x45eb4
   1334e:	e8 e0 3c 01 00       	call   27033 <printk>
   13353:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:472
}
   13356:	90                   	nop
   13357:	8d 65 f4             	lea    esp,[ebp-0xc]
   1335a:	5b                   	pop    ebx
   1335b:	5e                   	pop    esi
   1335c:	5f                   	pop    edi
   1335d:	5d                   	pop    ebp
   1335e:	c3                   	ret    

0001335f <biShell>:
biShell():
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:598
    exec (params[0],paramCount,lTemp);
    strcpy(sExecutingProgram,sbiShellProgramName);
}

void HIGH_CODE_SECTION biShell()
{
   1335f:	55                   	push   ebp
   13360:	89 e5                	mov    ebp,esp
   13362:	53                   	push   ebx
   13363:	81 ec f4 0a 00 00    	sub    esp,0xaf4
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:600
    char lCommand[256];
    unsigned lCurrKey=0;
   13369:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:601
    int lCurrKeyCount=0;
   13370:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:603
    char commands[50][50];
    int commandsPtr=0;
   13377:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:604
    int commandBuffPtr=0;
   1337e:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:605
    int commandWasFromThisBufferPtr=0;
   13385:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:606
    bool stopCountingKeys=false;
   1338c:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:607
    strcpy(sExecutingProgram,sbiShellProgramName);
   13390:	83 ec 08             	sub    esp,0x8
   13393:	68 c0 89 02 00       	push   0x289c0
   13398:	68 40 b4 08 00       	push   0x8b440
   1339d:	e8 f2 3d 01 00       	call   27194 <strcpy>
   133a2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:608
    puts("\nWelcome to biShell ... hang a while!\n");
   133a5:	83 ec 0c             	sub    esp,0xc
   133a8:	68 1c 5f 04 00       	push   0x45f1c
   133ad:	e8 24 4c 00 00       	call   17fd6 <puts>
   133b2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:612
    while (1==1)
    {
getACommand:
        lCurrKey=0;
   133b5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:613
        lCurrKeyCount=0;
   133bc:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:614
        memset(lCommand,0,256);
   133c3:	83 ec 04             	sub    esp,0x4
   133c6:	68 00 01 00 00       	push   0x100
   133cb:	6a 00                	push   0x0
   133cd:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   133d3:	50                   	push   eax
   133d4:	e8 d4 1b 01 00       	call   24fad <memset>
   133d9:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:615
        printk("%s> ",sExecutingProgram);
   133dc:	83 ec 08             	sub    esp,0x8
   133df:	68 40 b4 08 00       	push   0x8b440
   133e4:	68 43 5f 04 00       	push   0x45f43
   133e9:	e8 45 3c 01 00       	call   27033 <printk>
   133ee:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:617
getAKey:
        lCurrKey=0;
   133f1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:618
        while(lCurrKey==0)
   133f8:	eb 0d                	jmp    13407 <biShell+0xa8>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:620
        {
            __asm__("sti\nhlt\n");
   133fa:	fb                   	sti    
   133fb:	f4                   	hlt    
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:621
            lCurrKey=getKeyboardKey();
   133fc:	e8 e4 de ff ff       	call   112e5 <getKeyboardKey>
   13401:	0f b6 c0             	movzx  eax,al
   13404:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:618
        lCurrKeyCount=0;
        memset(lCommand,0,256);
        printk("%s> ",sExecutingProgram);
getAKey:
        lCurrKey=0;
        while(lCurrKey==0)
   13407:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1340b:	74 ed                	je     133fa <biShell+0x9b>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:624
        {
            __asm__("sti\nhlt\n");
            lCurrKey=getKeyboardKey();
        }
        //printk("key='%08X'",lCurrKey);
        if(lCurrKey==0xc8) //up
   1340d:	81 7d f4 c8 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xc8
   13414:	0f 85 8f 00 00 00    	jne    134a9 <biShell+0x14a>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:626
        {
            if (commandBuffPtr>=0)
   1341a:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1341e:	78 d1                	js     133f1 <biShell+0x92>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:628
            {
                int lTemp=cursorGetPosY();
   13420:	e8 22 4b 00 00       	call   17f47 <cursorGetPosY>
   13425:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:629
                strcpy(lCommand,commands[--commandBuffPtr]);
   13428:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
   1342c:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   13432:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13435:	6b c0 32             	imul   eax,eax,0x32
   13438:	01 d0                	add    eax,edx
   1343a:	83 ec 08             	sub    esp,0x8
   1343d:	50                   	push   eax
   1343e:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13444:	50                   	push   eax
   13445:	e8 4a 3d 01 00       	call   27194 <strcpy>
   1344a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:630
                commandWasFromThisBufferPtr=commandBuffPtr;
   1344d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13450:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:631
                cursorMoveTo(4,lTemp);
   13453:	83 ec 08             	sub    esp,0x8
   13456:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
   13459:	6a 04                	push   0x4
   1345b:	e8 47 4a 00 00       	call   17ea7 <cursorMoveTo>
   13460:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:632
                printk("%s                                                                                ",lCommand);
   13463:	83 ec 08             	sub    esp,0x8
   13466:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   1346c:	50                   	push   eax
   1346d:	68 48 5f 04 00       	push   0x45f48
   13472:	e8 bc 3b 01 00       	call   27033 <printk>
   13477:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:633
                lCurrKeyCount=strlen(lCommand);
   1347a:	83 ec 0c             	sub    esp,0xc
   1347d:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13483:	50                   	push   eax
   13484:	e8 7b 3d 01 00       	call   27204 <strlen>
   13489:	83 c4 10             	add    esp,0x10
   1348c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:634
                cursorMoveTo(4+lCurrKeyCount,lTemp);
   1348f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13492:	83 c0 04             	add    eax,0x4
   13495:	83 ec 08             	sub    esp,0x8
   13498:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
   1349b:	50                   	push   eax
   1349c:	e8 06 4a 00 00       	call   17ea7 <cursorMoveTo>
   134a1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:635
                goto getAKey;
   134a4:	e9 48 ff ff ff       	jmp    133f1 <biShell+0x92>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:640
            }
            else
                goto getAKey;
        }
        if (lCurrKey==0xD0)  //down
   134a9:	81 7d f4 d0 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xd0
   134b0:	0f 85 95 00 00 00    	jne    1354b <biShell+0x1ec>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:642
        {
            if (commandBuffPtr<=commandsPtr)
   134b6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   134b9:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   134bc:	0f 8f 2f ff ff ff    	jg     133f1 <biShell+0x92>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:644
            {
                int lTemp=cursorGetPosY();
   134c2:	e8 80 4a 00 00       	call   17f47 <cursorGetPosY>
   134c7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:645
                strcpy(lCommand,commands[++commandBuffPtr]);
   134ca:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
   134ce:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   134d4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   134d7:	6b c0 32             	imul   eax,eax,0x32
   134da:	01 d0                	add    eax,edx
   134dc:	83 ec 08             	sub    esp,0x8
   134df:	50                   	push   eax
   134e0:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   134e6:	50                   	push   eax
   134e7:	e8 a8 3c 01 00       	call   27194 <strcpy>
   134ec:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:646
                commandWasFromThisBufferPtr=commandBuffPtr;
   134ef:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   134f2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:647
                cursorMoveTo(4,lTemp);
   134f5:	83 ec 08             	sub    esp,0x8
   134f8:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   134fb:	6a 04                	push   0x4
   134fd:	e8 a5 49 00 00       	call   17ea7 <cursorMoveTo>
   13502:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:648
                printk("%s                                                                                ",lCommand);
   13505:	83 ec 08             	sub    esp,0x8
   13508:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   1350e:	50                   	push   eax
   1350f:	68 48 5f 04 00       	push   0x45f48
   13514:	e8 1a 3b 01 00       	call   27033 <printk>
   13519:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:649
                lCurrKeyCount=strlen(lCommand);
   1351c:	83 ec 0c             	sub    esp,0xc
   1351f:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13525:	50                   	push   eax
   13526:	e8 d9 3c 01 00       	call   27204 <strlen>
   1352b:	83 c4 10             	add    esp,0x10
   1352e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:650
                cursorMoveTo(4+lCurrKeyCount,lTemp);
   13531:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13534:	83 c0 04             	add    eax,0x4
   13537:	83 ec 08             	sub    esp,0x8
   1353a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   1353d:	50                   	push   eax
   1353e:	e8 64 49 00 00       	call   17ea7 <cursorMoveTo>
   13543:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:651
                goto getAKey;
   13546:	e9 a6 fe ff ff       	jmp    133f1 <biShell+0x92>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:657
            }
            else
                goto getAKey;
            
        }   
        if (lCurrKey==0xcb) //left
   1354b:	81 7d f4 cb 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xcb
   13552:	75 33                	jne    13587 <biShell+0x228>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:659
        {
            if (cursorGetPosX()>4)
   13554:	e8 aa 49 00 00       	call   17f03 <cursorGetPosX>
   13559:	83 f8 04             	cmp    eax,0x4
   1355c:	0f 8e 8f fe ff ff    	jle    133f1 <biShell+0x92>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:661
            {
                cursorMoveTo(cursorGetPosX()-1,cursorGetPosY());
   13562:	e8 e0 49 00 00       	call   17f47 <cursorGetPosY>
   13567:	89 c3                	mov    ebx,eax
   13569:	e8 95 49 00 00       	call   17f03 <cursorGetPosX>
   1356e:	83 e8 01             	sub    eax,0x1
   13571:	83 ec 08             	sub    esp,0x8
   13574:	53                   	push   ebx
   13575:	50                   	push   eax
   13576:	e8 2c 49 00 00       	call   17ea7 <cursorMoveTo>
   1357b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:662
                stopCountingKeys=true;
   1357e:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:664
            }
            goto getAKey;
   13582:	e9 6a fe ff ff       	jmp    133f1 <biShell+0x92>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:666
        }
        if (lCurrKey=='\b')
   13587:	83 7d f4 08          	cmp    DWORD PTR [ebp-0xc],0x8
   1358b:	75 61                	jne    135ee <biShell+0x28f>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:668
        {
            if (lCurrKeyCount>=0)
   1358d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   13591:	0f 88 5a fe ff ff    	js     133f1 <biShell+0x92>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:670
            {
                int lTemp=cursorGetPosY();
   13597:	e8 ab 49 00 00       	call   17f47 <cursorGetPosY>
   1359c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:672

                lCommand[lCurrKeyCount]=' ';
   1359f:	8d 95 cc fe ff ff    	lea    edx,[ebp-0x134]
   135a5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   135a8:	01 d0                	add    eax,edx
   135aa:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:673
                lCurrKeyCount--;
   135ad:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:674
                cursorMoveTo(cursorGetPosX()-1,lTemp);
   135b1:	e8 4d 49 00 00       	call   17f03 <cursorGetPosX>
   135b6:	83 e8 01             	sub    eax,0x1
   135b9:	83 ec 08             	sub    esp,0x8
   135bc:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   135bf:	50                   	push   eax
   135c0:	e8 e2 48 00 00       	call   17ea7 <cursorMoveTo>
   135c5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:675
                putc(' ');
   135c8:	83 ec 0c             	sub    esp,0xc
   135cb:	6a 20                	push   0x20
   135cd:	e8 34 4a 00 00       	call   18006 <putc>
   135d2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:676
                cursorMoveTo(cursorGetPosX()-1,lTemp);
   135d5:	e8 29 49 00 00       	call   17f03 <cursorGetPosX>
   135da:	83 e8 01             	sub    eax,0x1
   135dd:	83 ec 08             	sub    esp,0x8
   135e0:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   135e3:	50                   	push   eax
   135e4:	e8 be 48 00 00       	call   17ea7 <cursorMoveTo>
   135e9:	83 c4 10             	add    esp,0x10
   135ec:	eb 61                	jmp    1364f <biShell+0x2f0>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:681
            }
            else
                goto getAKey;
        }
        else if (lCurrKey==0xa)
   135ee:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   135f2:	75 30                	jne    13624 <biShell+0x2c5>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:683
        {
            putc(lCurrKey);
   135f4:	83 ec 0c             	sub    esp,0xc
   135f7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   135fa:	e8 07 4a 00 00       	call   18006 <putc>
   135ff:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:684
            lCommand[lCurrKeyCount++]='\0';
   13602:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13605:	8d 50 01             	lea    edx,[eax+0x1]
   13608:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1360b:	c6 84 05 cc fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x134],0x0
   13612:	00 
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:685
            goto doneGettingKeys;
   13613:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:698
        }
        stopCountingKeys=false;
        goto getAKey;
//        gets(lCommand,50);
doneGettingKeys:
        if (lCommand[0]==0x0)
   13614:	0f b6 85 cc fe ff ff 	movzx  eax,BYTE PTR [ebp-0x134]
   1361b:	84 c0                	test   al,al
   1361d:	75 39                	jne    13658 <biShell+0x2f9>
   1361f:	e9 91 fd ff ff       	jmp    133b5 <biShell+0x56>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:689
            lCommand[lCurrKeyCount++]='\0';
            goto doneGettingKeys;
        }
        else
        {
            lCommand[lCurrKeyCount++]=lCurrKey;
   13624:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13627:	8d 50 01             	lea    edx,[eax+0x1]
   1362a:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1362d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   13630:	88 94 05 cc fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x134],dl
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:690
            if (stopCountingKeys)
   13637:	80 7d e3 00          	cmp    BYTE PTR [ebp-0x1d],0x0
   1363b:	74 04                	je     13641 <biShell+0x2e2>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:691
                    lCurrKeyCount--;
   1363d:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:692
            putc(lCurrKey);
   13641:	83 ec 0c             	sub    esp,0xc
   13644:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   13647:	e8 ba 49 00 00       	call   18006 <putc>
   1364c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:694
        }
        stopCountingKeys=false;
   1364f:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:695
        goto getAKey;
   13653:	e9 99 fd ff ff       	jmp    133f1 <biShell+0x92>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:700
//        gets(lCommand,50);
doneGettingKeys:
        if (lCommand[0]==0x0)
            goto getACommand;
        int i = findCommand(lCommand);
   13658:	83 ec 0c             	sub    esp,0xc
   1365b:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13661:	50                   	push   eax
   13662:	e8 72 ed ff ff       	call   123d9 <findCommand>
   13667:	83 c4 10             	add    esp,0x10
   1366a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:702

        if(i>0)
   1366d:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
   13671:	0f 8e f8 00 00 00    	jle    1376f <biShell+0x410>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:704
        {
            i--;
   13677:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:706
            //printk("Executing command # %u (%s)\n", i, cmds[i].name);
            command_function = cmds[i].function;
   1367b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1367e:	c1 e0 04             	shl    eax,0x4
   13681:	05 08 88 02 00       	add    eax,0x28808
   13686:	8b 00                	mov    eax,DWORD PTR [eax]
   13688:	a3 58 63 09 00       	mov    ds:0x96358,eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:707
            command_function_p = cmds[i].function;
   1368d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   13690:	c1 e0 04             	shl    eax,0x4
   13693:	05 08 88 02 00       	add    eax,0x28808
   13698:	8b 00                	mov    eax,DWORD PTR [eax]
   1369a:	a3 a4 b4 08 00       	mov    ds:0x8b4a4,eax
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:708
            if (cmds[i].paramCount==0)
   1369f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   136a2:	c1 e0 04             	shl    eax,0x4
   136a5:	05 0c 88 02 00       	add    eax,0x2880c
   136aa:	8b 00                	mov    eax,DWORD PTR [eax]
   136ac:	85 c0                	test   eax,eax
   136ae:	75 09                	jne    136b9 <biShell+0x35a>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:709
                command_function();
   136b0:	a1 58 63 09 00       	mov    eax,ds:0x96358
   136b5:	ff d0                	call   eax
   136b7:	eb 33                	jmp    136ec <biShell+0x38d>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:712
            else
            {
                command_function_p(&lCommand[strlen(cmds[i].name)+1]);  
   136b9:	8b 1d a4 b4 08 00    	mov    ebx,DWORD PTR ds:0x8b4a4
   136bf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   136c2:	c1 e0 04             	shl    eax,0x4
   136c5:	05 00 88 02 00       	add    eax,0x28800
   136ca:	8b 00                	mov    eax,DWORD PTR [eax]
   136cc:	83 ec 0c             	sub    esp,0xc
   136cf:	50                   	push   eax
   136d0:	e8 2f 3b 01 00       	call   27204 <strlen>
   136d5:	83 c4 10             	add    esp,0x10
   136d8:	8d 50 01             	lea    edx,[eax+0x1]
   136db:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   136e1:	01 d0                	add    eax,edx
   136e3:	83 ec 0c             	sub    esp,0xc
   136e6:	50                   	push   eax
   136e7:	ff d3                	call   ebx
   136e9:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:714
            }
            if (commandWasFromThisBufferPtr)
   136ec:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   136f0:	74 4b                	je     1373d <biShell+0x3de>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:716
            {
                for (int cnt=commandWasFromThisBufferPtr;cnt<=commandsPtr;cnt++)
   136f2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   136f5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
   136f8:	eb 30                	jmp    1372a <biShell+0x3cb>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:717 (discriminator 3)
                    strcpy(commands[cnt],commands[cnt+1]);
   136fa:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   136fd:	83 c0 01             	add    eax,0x1
   13700:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   13706:	6b c0 32             	imul   eax,eax,0x32
   13709:	01 c2                	add    edx,eax
   1370b:	8d 8d 08 f5 ff ff    	lea    ecx,[ebp-0xaf8]
   13711:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   13714:	6b c0 32             	imul   eax,eax,0x32
   13717:	01 c8                	add    eax,ecx
   13719:	83 ec 08             	sub    esp,0x8
   1371c:	52                   	push   edx
   1371d:	50                   	push   eax
   1371e:	e8 71 3a 01 00       	call   27194 <strcpy>
   13723:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:716 (discriminator 3)
            {
                command_function_p(&lCommand[strlen(cmds[i].name)+1]);  
            }
            if (commandWasFromThisBufferPtr)
            {
                for (int cnt=commandWasFromThisBufferPtr;cnt<=commandsPtr;cnt++)
   13726:	83 45 dc 01          	add    DWORD PTR [ebp-0x24],0x1
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:716 (discriminator 1)
   1372a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1372d:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   13730:	7e c8                	jle    136fa <biShell+0x39b>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:718
                    strcpy(commands[cnt],commands[cnt+1]);
                commandWasFromThisBufferPtr=0;
   13732:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:719
                commandsPtr--;
   13739:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:721
            }
            strcpy(commands[commandsPtr++],lCommand);
   1373d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13740:	8d 50 01             	lea    edx,[eax+0x1]
   13743:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   13746:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   1374c:	6b c0 32             	imul   eax,eax,0x32
   1374f:	01 c2                	add    edx,eax
   13751:	83 ec 08             	sub    esp,0x8
   13754:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   1375a:	50                   	push   eax
   1375b:	52                   	push   edx
   1375c:	e8 33 3a 01 00       	call   27194 <strcpy>
   13761:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:722
            commandBuffPtr=commandsPtr;
   13764:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13767:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   1376a:	e9 46 fc ff ff       	jmp    133b5 <biShell+0x56>
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:726
        }
        else
        {
            printk("Invalid command '%s' ya dummy!\n",lCommand);
   1376f:	83 ec 08             	sub    esp,0x8
   13772:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13778:	50                   	push   eax
   13779:	68 9c 5f 04 00       	push   0x45f9c
   1377e:	e8 b0 38 01 00       	call   27033 <printk>
   13783:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/bishell.c:728
        }
    }
   13786:	e9 2a fc ff ff       	jmp    133b5 <biShell+0x56>
   1378b:	90                   	nop

0001378c <AhciIssueCmd>:
AhciIssueCmd():
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:38


// Check device type

int AhciIssueCmd(volatile HBA_PORT *port,int cmdslot) 
{
   1378c:	55                   	push   ebp
   1378d:	89 e5                	mov    ebp,esp
   1378f:	53                   	push   ebx
   13790:	83 ec 14             	sub    esp,0x14
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:40
    unsigned i;
    int delay = 0;
   13793:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:41
    int Status = true;
   1379a:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:43

    port->cmd.ST=0;
   137a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   137a4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   137a7:	83 e2 fe             	and    edx,0xfffffffe
   137aa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:45
    //make sure bit0 Start set to enable process cmd list
    if (!(port->cmd.ST)) {
   137ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   137b0:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   137b3:	83 e0 01             	and    eax,0x1
   137b6:	84 c0                	test   al,al
   137b8:	75 2d                	jne    137e7 <AhciIssueCmd+0x5b>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:46
        printd(DEBUG_AHCI, "AHCI: ahciIssueCmd - ST was cleared, setting FRE and STE\n");
   137ba:	83 ec 08             	sub    esp,0x8
   137bd:	68 c0 60 04 00       	push   0x460c0
   137c2:	68 00 20 00 00       	push   0x2000
   137c7:	e8 87 38 01 00       	call   27053 <printd>
   137cc:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:47
        port->cmd.FRE = 1;
   137cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   137d2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   137d5:	83 ca 10             	or     edx,0x10
   137d8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:48
        port->cmd.ST = 1;
   137db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   137de:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   137e1:	83 ca 01             	or     edx,0x1
   137e4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:52
    }

    //if err status or busy, reset PxCMD.
    if ((port->pxis.TFES || port->pxis.HBFS || port->pxis.HBDS || port->pxis.IFS || port->pxis.INFS || port->pxis.OFS || port->pxis.IPMS) || (port->tfd.BSY || port->tfd.BSY)) {
   137e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   137ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   137ed:	c1 e8 1e             	shr    eax,0x1e
   137f0:	83 e0 01             	and    eax,0x1
   137f3:	84 c0                	test   al,al
   137f5:	0f 85 84 00 00 00    	jne    1387f <AhciIssueCmd+0xf3>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:52 (discriminator 1)
   137fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   137fe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13801:	c1 e8 1d             	shr    eax,0x1d
   13804:	83 e0 01             	and    eax,0x1
   13807:	84 c0                	test   al,al
   13809:	75 74                	jne    1387f <AhciIssueCmd+0xf3>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:52 (discriminator 2)
   1380b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1380e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13811:	c1 e8 1c             	shr    eax,0x1c
   13814:	83 e0 01             	and    eax,0x1
   13817:	84 c0                	test   al,al
   13819:	75 64                	jne    1387f <AhciIssueCmd+0xf3>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:52 (discriminator 3)
   1381b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1381e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13821:	c1 e8 1b             	shr    eax,0x1b
   13824:	83 e0 01             	and    eax,0x1
   13827:	84 c0                	test   al,al
   13829:	75 54                	jne    1387f <AhciIssueCmd+0xf3>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:52 (discriminator 4)
   1382b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1382e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13831:	c1 e8 1a             	shr    eax,0x1a
   13834:	83 e0 01             	and    eax,0x1
   13837:	84 c0                	test   al,al
   13839:	75 44                	jne    1387f <AhciIssueCmd+0xf3>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:52 (discriminator 5)
   1383b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1383e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13841:	c1 e8 18             	shr    eax,0x18
   13844:	83 e0 01             	and    eax,0x1
   13847:	84 c0                	test   al,al
   13849:	75 34                	jne    1387f <AhciIssueCmd+0xf3>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:52 (discriminator 6)
   1384b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1384e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13851:	c1 e8 17             	shr    eax,0x17
   13854:	83 e0 01             	and    eax,0x1
   13857:	84 c0                	test   al,al
   13859:	75 24                	jne    1387f <AhciIssueCmd+0xf3>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:52 (discriminator 7)
   1385b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1385e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13861:	c1 e8 07             	shr    eax,0x7
   13864:	83 e0 01             	and    eax,0x1
   13867:	84 c0                	test   al,al
   13869:	75 14                	jne    1387f <AhciIssueCmd+0xf3>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:52 (discriminator 8)
   1386b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1386e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13871:	c1 e8 07             	shr    eax,0x7
   13874:	83 e0 01             	and    eax,0x1
   13877:	84 c0                	test   al,al
   13879:	0f 84 8e 00 00 00    	je     1390d <AhciIssueCmd+0x181>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:53
        printd(DEBUG_AHCI, "AHCI: ahciIssueCmd - clearing error/busy\n");
   1387f:	83 ec 08             	sub    esp,0x8
   13882:	68 fc 60 04 00       	push   0x460fc
   13887:	68 00 20 00 00       	push   0x2000
   1388c:	e8 c2 37 01 00       	call   27053 <printd>
   13891:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:54
        port->cmd.ST &= ~port->cmd.ST;
   13894:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13897:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   1389a:	83 e0 01             	and    eax,0x1
   1389d:	0f b6 c0             	movzx  eax,al
   138a0:	f7 d0                	not    eax
   138a2:	89 c2                	mov    edx,eax
   138a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   138a7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   138aa:	83 e0 01             	and    eax,0x1
   138ad:	89 c1                	mov    ecx,eax
   138af:	89 d0                	mov    eax,edx
   138b1:	21 c8                	and    eax,ecx
   138b3:	83 e0 01             	and    eax,0x1
   138b6:	89 c2                	mov    edx,eax
   138b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   138bb:	0f b6 d2             	movzx  edx,dl
   138be:	89 d1                	mov    ecx,edx
   138c0:	83 e1 01             	and    ecx,0x1
   138c3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   138c6:	83 e2 fe             	and    edx,0xfffffffe
   138c9:	09 ca                	or     edx,ecx
   138cb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:56
        //Start|Command List Override|FIS Receive Enable
        port->cmd.CLO=1;
   138ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   138d1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   138d4:	83 ca 08             	or     edx,0x8
   138d7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:57
        while (port->cmd.CLO);
   138da:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:57 (discriminator 1)
   138db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   138de:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   138e1:	c1 e8 03             	shr    eax,0x3
   138e4:	83 e0 01             	and    eax,0x1
   138e7:	84 c0                	test   al,al
   138e9:	75 f0                	jne    138db <AhciIssueCmd+0x14f>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:58
        port->cmd.ST = 1;
   138eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   138ee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   138f1:	83 ca 01             	or     edx,0x1
   138f4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:59
        port->cmd.FRE = 1;
   138f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   138fa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   138fd:	83 ca 10             	or     edx,0x10
   13900:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:60
        port->pxis.AsUlong = 0;
   13903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13906:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:64
    }

    //issue cmd
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI before issuing command: 0x%08X\n", port->ci);
   1390d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13910:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   13913:	83 ec 04             	sub    esp,0x4
   13916:	50                   	push   eax
   13917:	68 28 61 04 00       	push   0x46128
   1391c:	68 00 20 00 00       	push   0x2000
   13921:	e8 2d 37 01 00       	call   27053 <printd>
   13926:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:65
    port->ci |= (1 << cmdslot);
   13929:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1392c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   1392f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   13932:	bb 01 00 00 00       	mov    ebx,0x1
   13937:	89 c1                	mov    ecx,eax
   13939:	d3 e3                	shl    ebx,cl
   1393b:	89 d8                	mov    eax,ebx
   1393d:	09 c2                	or     edx,eax
   1393f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13942:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:66
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI after issuing command: 0x%08X\n", port->ci);
   13945:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13948:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1394b:	83 ec 04             	sub    esp,0x4
   1394e:	50                   	push   eax
   1394f:	68 5c 61 04 00       	push   0x4615c
   13954:	68 00 20 00 00       	push   0x2000
   13959:	e8 f5 36 01 00       	call   27053 <printd>
   1395e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:69

    //wait cmd
    for (i = 0; i < 100; i++) {
   13961:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   13968:	eb 21                	jmp    1398b <AhciIssueCmd+0x1ff>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:70
        wait(50);
   1396a:	83 ec 0c             	sub    esp,0xc
   1396d:	6a 32                	push   0x32
   1396f:	e8 fe 48 01 00       	call   28272 <wait>
   13974:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:71
        if (!port->tfd.BSY)
   13977:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1397a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1397d:	c1 e8 07             	shr    eax,0x7
   13980:	83 e0 01             	and    eax,0x1
   13983:	84 c0                	test   al,al
   13985:	74 0c                	je     13993 <AhciIssueCmd+0x207>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:69 (discriminator 2)
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI before issuing command: 0x%08X\n", port->ci);
    port->ci |= (1 << cmdslot);
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI after issuing command: 0x%08X\n", port->ci);

    //wait cmd
    for (i = 0; i < 100; i++) {
   13987:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:69 (discriminator 1)
   1398b:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
   1398f:	76 d9                	jbe    1396a <AhciIssueCmd+0x1de>
   13991:	eb 01                	jmp    13994 <AhciIssueCmd+0x208>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:72
        wait(50);
        if (!port->tfd.BSY)
            break;
   13993:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:76
    }

    // Wait for completion
    delay = 5000;
   13994:	c7 45 f0 88 13 00 00 	mov    DWORD PTR [ebp-0x10],0x1388
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:77
    while (delay > 0) {
   1399b:	eb 57                	jmp    139f4 <AhciIssueCmd+0x268>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:79

        if ((port->ci & (1 << cmdslot)) == 0)
   1399d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   139a0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   139a3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   139a6:	bb 01 00 00 00       	mov    ebx,0x1
   139ab:	89 c1                	mov    ecx,eax
   139ad:	d3 e3                	shl    ebx,cl
   139af:	89 d8                	mov    eax,ebx
   139b1:	21 d0                	and    eax,edx
   139b3:	85 c0                	test   eax,eax
   139b5:	74 45                	je     139fc <AhciIssueCmd+0x270>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:83
            break;
        // In some longer duration reads, it may be helpful to spin on the DPS bit 
        // in the PxIS port field as well (1 << 5)
        if (port->pxis.TFES) // Task file error
   139b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   139ba:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   139bd:	c1 e8 1e             	shr    eax,0x1e
   139c0:	83 e0 01             	and    eax,0x1
   139c3:	84 c0                	test   al,al
   139c5:	74 1c                	je     139e3 <AhciIssueCmd+0x257>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:85
        {
            printd(DEBUG_AHCI, "AHCI: Read disk error\n");
   139c7:	83 ec 08             	sub    esp,0x8
   139ca:	68 8f 61 04 00       	push   0x4618f
   139cf:	68 00 20 00 00       	push   0x2000
   139d4:	e8 7a 36 01 00       	call   27053 <printd>
   139d9:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:86
            return -1;
   139dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
   139e1:	eb 37                	jmp    13a1a <AhciIssueCmd+0x28e>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:88
        }
        wait(20);
   139e3:	83 ec 0c             	sub    esp,0xc
   139e6:	6a 14                	push   0x14
   139e8:	e8 85 48 01 00       	call   28272 <wait>
   139ed:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:89
        delay -= 1;
   139f0:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:77
            break;
    }

    // Wait for completion
    delay = 5000;
    while (delay > 0) {
   139f4:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   139f8:	7f a3                	jg     1399d <AhciIssueCmd+0x211>
   139fa:	eb 01                	jmp    139fd <AhciIssueCmd+0x271>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:80

        if ((port->ci & (1 << cmdslot)) == 0)
            break;
   139fc:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:92
        }
        wait(20);
        delay -= 1;
    }

    if (port->tfd.ERR || delay == 0)
   139fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13a00:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13a03:	83 e0 01             	and    eax,0x1
   13a06:	84 c0                	test   al,al
   13a08:	75 06                	jne    13a10 <AhciIssueCmd+0x284>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:92 (discriminator 1)
   13a0a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   13a0e:	75 07                	jne    13a17 <AhciIssueCmd+0x28b>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:93
        Status = -2;
   13a10:	c7 45 ec fe ff ff ff 	mov    DWORD PTR [ebp-0x14],0xfffffffe
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:95

    return Status;
   13a17:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:96
}
   13a1a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   13a1d:	c9                   	leave  
   13a1e:	c3                   	ret    

00013a1f <check_type>:
check_type():
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:98

int check_type(volatile HBA_PORT *port, uint32_t* sig) {
   13a1f:	55                   	push   ebp
   13a20:	89 e5                	mov    ebp,esp
   13a22:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:99
    uint32_t ssts = port->ssts;
   13a25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13a28:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13a2b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:100
    uint8_t ipm = (ssts >> 8) & 0x0F;
   13a2e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   13a31:	c1 e8 08             	shr    eax,0x8
   13a34:	83 e0 0f             	and    eax,0xf
   13a37:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:101
    uint8_t det = ssts & 0x0F;
   13a3a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   13a3d:	83 e0 0f             	and    eax,0xf
   13a40:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:103

    if (det != HBA_PORT_DET_PRESENT) // Check drive status
   13a43:	80 7d fa 03          	cmp    BYTE PTR [ebp-0x6],0x3
   13a47:	74 07                	je     13a50 <check_type+0x31>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:104
        return AHCI_DEV_NULL;
   13a49:	b8 00 00 00 00       	mov    eax,0x0
   13a4e:	eb 64                	jmp    13ab4 <check_type+0x95>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:105
    if (ipm != HBA_PORT_IPM_ACTIVE)
   13a50:	80 7d fb 01          	cmp    BYTE PTR [ebp-0x5],0x1
   13a54:	74 07                	je     13a5d <check_type+0x3e>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:106
        return AHCI_DEV_NULL;
   13a56:	b8 00 00 00 00       	mov    eax,0x0
   13a5b:	eb 57                	jmp    13ab4 <check_type+0x95>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:108

    *sig = port->sig;
   13a5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13a60:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
   13a63:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   13a66:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:109
    switch (port->sig) {
   13a68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13a6b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   13a6e:	3d 01 01 3c c3       	cmp    eax,0xc33c0101
   13a73:	74 25                	je     13a9a <check_type+0x7b>
   13a75:	3d 01 01 3c c3       	cmp    eax,0xc33c0101
   13a7a:	77 09                	ja     13a85 <check_type+0x66>
   13a7c:	3d 01 01 69 96       	cmp    eax,0x96690101
   13a81:	74 1e                	je     13aa1 <check_type+0x82>
   13a83:	eb 2a                	jmp    13aaf <check_type+0x90>
   13a85:	3d 00 00 14 eb       	cmp    eax,0xeb140000
   13a8a:	74 1c                	je     13aa8 <check_type+0x89>
   13a8c:	3d 01 01 14 eb       	cmp    eax,0xeb140101
   13a91:	75 1c                	jne    13aaf <check_type+0x90>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:111
        case SATA_SIG_ATAPI:
            return AHCI_DEV_SATAPI;
   13a93:	b8 04 00 00 00       	mov    eax,0x4
   13a98:	eb 1a                	jmp    13ab4 <check_type+0x95>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:113
        case SATA_SIG_SEMB:
            return AHCI_DEV_SEMB;
   13a9a:	b8 02 00 00 00       	mov    eax,0x2
   13a9f:	eb 13                	jmp    13ab4 <check_type+0x95>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:115
        case SATA_SIG_PM:
            return AHCI_DEV_PM;
   13aa1:	b8 03 00 00 00       	mov    eax,0x3
   13aa6:	eb 0c                	jmp    13ab4 <check_type+0x95>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:117
        case SATA_SIG_ATAPI & 0xFFFF0000:
            return AHCI_DEV_SATAPI;
   13aa8:	b8 04 00 00 00       	mov    eax,0x4
   13aad:	eb 05                	jmp    13ab4 <check_type+0x95>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:119
        default:
            return AHCI_DEV_SATA;
   13aaf:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:121
    }
}
   13ab4:	c9                   	leave  
   13ab5:	c3                   	ret    

00013ab6 <ahciEnablePortMultiplier>:
ahciEnablePortMultiplier():
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:123

void ahciEnablePortMultiplier(volatile HBA_PORT* port) {
   13ab6:	55                   	push   ebp
   13ab7:	89 e5                	mov    ebp,esp
   13ab9:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:124
    HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
   13abc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13abf:	8b 00                	mov    eax,DWORD PTR [eax]
   13ac1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:126

    port->cmd.ST = 0;
   13ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13ac7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13aca:	83 e2 fe             	and    edx,0xfffffffe
   13acd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:130

    //waitForPortIdle(port);

    printd(DEBUG_AHCI, "AHCI: EnablePortMultipler: port=0x%08X\n", port);
   13ad0:	83 ec 04             	sub    esp,0x4
   13ad3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13ad6:	68 a8 61 04 00       	push   0x461a8
   13adb:	68 00 20 00 00       	push   0x2000
   13ae0:	e8 6e 35 01 00       	call   27053 <printd>
   13ae5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:131
    int slot = find_cmdslot(port);
   13ae8:	83 ec 0c             	sub    esp,0xc
   13aeb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13aee:	e8 6a 13 00 00       	call   14e5d <find_cmdslot>
   13af3:	83 c4 10             	add    esp,0x10
   13af6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:132
    if (slot == -1)
   13af9:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   13afd:	0f 84 94 02 00 00    	je     13d97 <ahciEnablePortMultiplier+0x2e1>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:134
        return;
    port->ie.AsUlong = 0; //xffffffff;
   13b03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13b06:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:135
    cmdheader += slot;
   13b0d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13b10:	c1 e0 05             	shl    eax,0x5
   13b13:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:136
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   13b16:	83 ec 04             	sub    esp,0x4
   13b19:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   13b1c:	68 d0 61 04 00       	push   0x461d0
   13b21:	68 00 20 00 00       	push   0x2000
   13b26:	e8 28 35 01 00       	call   27053 <printd>
   13b2b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:137
    cmdheader->prdtl = 1;
   13b2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13b31:	66 c7 40 02 01 00    	mov    WORD PTR [eax+0x2],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:138
    cmdheader->cfl = sizeof (FIS_REG_H2D) / sizeof (uint32_t);
   13b37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13b3a:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13b3d:	83 e2 e0             	and    edx,0xffffffe0
   13b40:	83 ca 05             	or     edx,0x5
   13b43:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:139
    cmdheader->w = 0;
   13b45:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13b48:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13b4b:	83 e2 bf             	and    edx,0xffffffbf
   13b4e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:140
    cmdheader->c = 1; //required for reset
   13b50:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13b53:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13b57:	83 ca 04             	or     edx,0x4
   13b5a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:141
    cmdheader->p = 0;
   13b5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13b60:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13b63:	83 e2 7f             	and    edx,0x7f
   13b66:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:142
    cmdheader->r = 1; //srst field
   13b68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13b6b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13b6f:	83 ca 01             	or     edx,0x1
   13b72:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:144

    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   13b75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13b78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   13b7b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:145
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   13b7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13b81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   13b84:	50                   	push   eax
   13b85:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   13b88:	68 e8 61 04 00       	push   0x461e8
   13b8d:	68 00 20 00 00       	push   0x2000
   13b92:	e8 bc 34 01 00       	call   27053 <printd>
   13b97:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:146
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
   13b9a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13b9d:	c7 80 80 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x6f6000
   13ba4:	60 6f 00 
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:147
    cmdtbl->prdt_entry[0].dbc = 0;
   13ba7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13baa:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [eax+0x8c]
   13bb0:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   13bb6:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:148
    cmdtbl->prdt_entry[0].i = 0;
   13bbc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13bbf:	0f b6 90 8f 00 00 00 	movzx  edx,BYTE PTR [eax+0x8f]
   13bc6:	83 e2 7f             	and    edx,0x7f
   13bc9:	88 90 8f 00 00 00    	mov    BYTE PTR [eax+0x8f],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:150

    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   13bcf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13bd2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:151
    memset(cmdfis, 0, sizeof (FIS_REG_H2D));
   13bd5:	83 ec 04             	sub    esp,0x4
   13bd8:	6a 14                	push   0x14
   13bda:	6a 00                	push   0x0
   13bdc:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   13bdf:	e8 c9 13 01 00       	call   24fad <memset>
   13be4:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:152
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   13be7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13bea:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:153
    cmdfis->c = 0; // Control
   13bed:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13bf0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13bf4:	83 e2 7f             	and    edx,0x7f
   13bf7:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:154
    cmdfis->control |= (1 << 2); //reset bit
   13bfa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13bfd:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   13c01:	83 c8 04             	or     eax,0x4
   13c04:	89 c2                	mov    edx,eax
   13c06:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13c09:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:155
    cmdfis->pmport = 0xf;
   13c0c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13c0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13c13:	83 ca 0f             	or     edx,0xf
   13c16:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:156
    port->cmd.CLO = 1;
   13c19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c1c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13c1f:	83 ca 08             	or     edx,0x8
   13c22:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:157
    while (port->cmd.CLO);
   13c25:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:157 (discriminator 1)
   13c26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c29:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   13c2c:	c1 e8 03             	shr    eax,0x3
   13c2f:	83 e0 01             	and    eax,0x1
   13c32:	84 c0                	test   al,al
   13c34:	75 f0                	jne    13c26 <ahciEnablePortMultiplier+0x170>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:158
    port->cmd.ST = 1;
   13c36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c39:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13c3c:	83 ca 01             	or     edx,0x1
   13c3f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:159
    port->ci |= slot;
   13c42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c45:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   13c48:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13c4b:	09 c2                	or     edx,eax
   13c4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c50:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:161

    slot = find_cmdslot(port);
   13c53:	83 ec 0c             	sub    esp,0xc
   13c56:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13c59:	e8 ff 11 00 00       	call   14e5d <find_cmdslot>
   13c5e:	83 c4 10             	add    esp,0x10
   13c61:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:162
    if (slot == -1)
   13c64:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   13c68:	0f 84 2c 01 00 00    	je     13d9a <ahciEnablePortMultiplier+0x2e4>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:164
        return;
    port->ie.AsUlong = 0; //xffffffff;
   13c6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c71:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:165
    cmdheader += slot;
   13c78:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13c7b:	c1 e0 05             	shl    eax,0x5
   13c7e:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:166
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   13c81:	83 ec 04             	sub    esp,0x4
   13c84:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   13c87:	68 d0 61 04 00       	push   0x461d0
   13c8c:	68 00 20 00 00       	push   0x2000
   13c91:	e8 bd 33 01 00       	call   27053 <printd>
   13c96:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:167
    cmdheader->prdtl = 1;
   13c99:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13c9c:	66 c7 40 02 01 00    	mov    WORD PTR [eax+0x2],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:168
    cmdheader->cfl = sizeof (FIS_REG_H2D) / sizeof (uint32_t);
   13ca2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13ca5:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13ca8:	83 e2 e0             	and    edx,0xffffffe0
   13cab:	83 ca 05             	or     edx,0x5
   13cae:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:169
    cmdheader->w = 0;
   13cb0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13cb3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13cb6:	83 e2 bf             	and    edx,0xffffffbf
   13cb9:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:170
    cmdheader->c = 1; //required for reset
   13cbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13cbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13cc2:	83 ca 04             	or     edx,0x4
   13cc5:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:171
    cmdheader->p = 0;
   13cc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13ccb:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13cce:	83 e2 7f             	and    edx,0x7f
   13cd1:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:172
    cmdheader->r = 0; //srst field
   13cd3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13cd6:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13cda:	83 e2 fe             	and    edx,0xfffffffe
   13cdd:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:173
    cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   13ce0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13ce3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   13ce6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:174
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   13ce9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13cec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   13cef:	50                   	push   eax
   13cf0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   13cf3:	68 e8 61 04 00       	push   0x461e8
   13cf8:	68 00 20 00 00       	push   0x2000
   13cfd:	e8 51 33 01 00       	call   27053 <printd>
   13d02:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:175
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
   13d05:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13d08:	c7 80 80 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x6f6000
   13d0f:	60 6f 00 
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:176
    cmdtbl->prdt_entry[0].dbc = 0;
   13d12:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13d15:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [eax+0x8c]
   13d1b:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   13d21:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:177
    cmdtbl->prdt_entry[0].i = 0;
   13d27:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13d2a:	0f b6 90 8f 00 00 00 	movzx  edx,BYTE PTR [eax+0x8f]
   13d31:	83 e2 7f             	and    edx,0x7f
   13d34:	88 90 8f 00 00 00    	mov    BYTE PTR [eax+0x8f],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:179

    cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   13d3a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13d3d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:180
    memset(cmdfis, 0, sizeof (FIS_REG_H2D));
   13d40:	83 ec 04             	sub    esp,0x4
   13d43:	6a 14                	push   0x14
   13d45:	6a 00                	push   0x0
   13d47:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   13d4a:	e8 5e 12 01 00       	call   24fad <memset>
   13d4f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:181
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   13d52:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13d55:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:182
    cmdfis->c = 0; // control
   13d58:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13d5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13d5f:	83 e2 7f             	and    edx,0x7f
   13d62:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:183
    cmdfis->control &= ~(1 << 2); //reset bit
   13d65:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13d68:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   13d6c:	83 e0 fb             	and    eax,0xfffffffb
   13d6f:	89 c2                	mov    edx,eax
   13d71:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13d74:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:184
    cmdfis->pmport = 0xf;
   13d77:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13d7a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13d7e:	83 ca 0f             	or     edx,0xf
   13d81:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:185
    port->ci |= slot;
   13d84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d87:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   13d8a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13d8d:	09 c2                	or     edx,eax
   13d8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d92:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
   13d95:	eb 04                	jmp    13d9b <ahciEnablePortMultiplier+0x2e5>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:133
    //waitForPortIdle(port);

    printd(DEBUG_AHCI, "AHCI: EnablePortMultipler: port=0x%08X\n", port);
    int slot = find_cmdslot(port);
    if (slot == -1)
        return;
   13d97:	90                   	nop
   13d98:	eb 01                	jmp    13d9b <ahciEnablePortMultiplier+0x2e5>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:163
    port->cmd.ST = 1;
    port->ci |= slot;

    slot = find_cmdslot(port);
    if (slot == -1)
        return;
   13d9a:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:186
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
    cmdfis->c = 0; // control
    cmdfis->control &= ~(1 << 2); //reset bit
    cmdfis->pmport = 0xf;
    port->ci |= slot;
}
   13d9b:	c9                   	leave  
   13d9c:	c3                   	ret    

00013d9d <ahciSpinupDrive>:
ahciSpinupDrive():
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:188

bool ahciSpinupDrive(volatile HBA_PORT* port, int portno) {
   13d9d:	55                   	push   ebp
   13d9e:	89 e5                	mov    ebp,esp
   13da0:	56                   	push   esi
   13da1:	53                   	push   ebx
   13da2:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:189
    int waitMS = 0;
   13da5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:190
    port->sctl.SPD = 1;
   13dac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13daf:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   13db2:	80 e2 0f             	and    dl,0xf
   13db5:	83 ca 10             	or     edx,0x10
   13db8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:199
    //stop_cmd(&abar->ports[i]);
    //port->cmd.PMA=1;
    //start_cmd(&abar->ports[i]);

    //Spin up the drive
    port->cmd.ST = 0;
   13dbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13dbe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13dc1:	83 e2 fe             	and    edx,0xfffffffe
   13dc4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:201

    port->sctl.DET = 1;
   13dc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13dca:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   13dcd:	83 e2 f0             	and    edx,0xfffffff0
   13dd0:	83 ca 01             	or     edx,0x1
   13dd3:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:202
    wait(100);
   13dd6:	83 ec 0c             	sub    esp,0xc
   13dd9:	6a 64                	push   0x64
   13ddb:	e8 92 44 01 00       	call   28272 <wait>
   13de0:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:203
    port->sctl.DET = 0;
   13de3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13de6:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   13de9:	83 e2 f0             	and    edx,0xfffffff0
   13dec:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:206


    waitMS = 1000;
   13def:	c7 45 f4 e8 03 00 00 	mov    DWORD PTR [ebp-0xc],0x3e8
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:208
    //wait for DET to be set to 1 or 3
    while (((port->ssts & 0xF) != 3) && ((port->ssts & 0xF) != 1) && (waitMS > 0)) {
   13df6:	eb 11                	jmp    13e09 <ahciSpinupDrive+0x6c>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:209
        wait(10);
   13df8:	83 ec 0c             	sub    esp,0xc
   13dfb:	6a 0a                	push   0xa
   13dfd:	e8 70 44 01 00       	call   28272 <wait>
   13e02:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:210
        waitMS -= 10;
   13e05:	83 6d f4 0a          	sub    DWORD PTR [ebp-0xc],0xa
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:208
    port->sctl.DET = 0;


    waitMS = 1000;
    //wait for DET to be set to 1 or 3
    while (((port->ssts & 0xF) != 3) && ((port->ssts & 0xF) != 1) && (waitMS > 0)) {
   13e09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e0c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13e0f:	83 e0 0f             	and    eax,0xf
   13e12:	83 f8 03             	cmp    eax,0x3
   13e15:	74 14                	je     13e2b <ahciSpinupDrive+0x8e>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:208 (discriminator 1)
   13e17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e1a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13e1d:	83 e0 0f             	and    eax,0xf
   13e20:	83 f8 01             	cmp    eax,0x1
   13e23:	74 06                	je     13e2b <ahciSpinupDrive+0x8e>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:208 (discriminator 2)
   13e25:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   13e29:	7f cd                	jg     13df8 <ahciSpinupDrive+0x5b>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:212
        wait(10);
        waitMS -= 10;
    }
    if (waitMS == 0) {
   13e2b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   13e2f:	75 62                	jne    13e93 <ahciSpinupDrive+0xf6>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:213
        printd(DEBUG_AHCI, "AHCI: Error spinning up device,  DET not cleared (0x%08X)\n", port->ssts);
   13e31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e34:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13e37:	83 ec 04             	sub    esp,0x4
   13e3a:	50                   	push   eax
   13e3b:	68 0c 62 04 00       	push   0x4620c
   13e40:	68 00 20 00 00       	push   0x2000
   13e45:	e8 09 32 01 00       	call   27053 <printd>
   13e4a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:215
        //printd(DEBUG_AHCI,"****status=0x%08X, error=0x%08X, count=0x%08X\n",rfis->status,rfis->error,rfis->countl);
        printd(DEBUG_AHCI, "***tfd=0x%08X, ssts=0x%08X, serr=0x%08X, is=0x%08X\n", port->tfd, port->ssts, port->serr, port->pxis.AsUlong);
   13e4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e50:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   13e53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e56:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13e59:	83 ec 08             	sub    esp,0x8
   13e5c:	52                   	push   edx
   13e5d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   13e60:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
   13e63:	52                   	push   edx
   13e64:	50                   	push   eax
   13e65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e68:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13e6b:	50                   	push   eax
   13e6c:	68 48 62 04 00       	push   0x46248
   13e71:	68 00 20 00 00       	push   0x2000
   13e76:	e8 d8 31 01 00       	call   27053 <printd>
   13e7b:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:216
        printd(DEBUG_AHCI, "Attempting to continue ... \n");
   13e7e:	83 ec 08             	sub    esp,0x8
   13e81:	68 7c 62 04 00       	push   0x4627c
   13e86:	68 00 20 00 00       	push   0x2000
   13e8b:	e8 c3 31 01 00       	call   27053 <printd>
   13e90:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:219
    }
    //This should clear PxSERR
    ahciABAR->pi |= 1 << portno;
   13e93:	a1 54 04 a0 00       	mov    eax,ds:0xa00454
   13e98:	8b 15 54 04 a0 00    	mov    edx,DWORD PTR ds:0xa00454
   13e9e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
   13ea1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   13ea4:	be 01 00 00 00       	mov    esi,0x1
   13ea9:	89 d1                	mov    ecx,edx
   13eab:	d3 e6                	shl    esi,cl
   13ead:	89 f2                	mov    edx,esi
   13eaf:	09 da                	or     edx,ebx
   13eb1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:220
    printd(DEBUG_AHCI, "PxSERR=0x%08X\n", port->serr.AsUlong);
   13eb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13eb7:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   13eba:	83 ec 04             	sub    esp,0x4
   13ebd:	50                   	push   eax
   13ebe:	68 99 62 04 00       	push   0x46299
   13ec3:	68 00 20 00 00       	push   0x2000
   13ec8:	e8 86 31 01 00       	call   27053 <printd>
   13ecd:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:221
    waitMS = 1000;
   13ed0:	c7 45 f4 e8 03 00 00 	mov    DWORD PTR [ebp-0xc],0x3e8
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:223
    //Now wait for BSY(, DRQ and ERR to be cleared.
    while ((port->tfd.BSY || port->tfd.ERR) && waitMS > 0) {
   13ed7:	eb 11                	jmp    13eea <ahciSpinupDrive+0x14d>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:224
        wait(10);
   13ed9:	83 ec 0c             	sub    esp,0xc
   13edc:	6a 0a                	push   0xa
   13ede:	e8 8f 43 01 00       	call   28272 <wait>
   13ee3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:225
        waitMS -= 10;
   13ee6:	83 6d f4 0a          	sub    DWORD PTR [ebp-0xc],0xa
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:223
    //This should clear PxSERR
    ahciABAR->pi |= 1 << portno;
    printd(DEBUG_AHCI, "PxSERR=0x%08X\n", port->serr.AsUlong);
    waitMS = 1000;
    //Now wait for BSY(, DRQ and ERR to be cleared.
    while ((port->tfd.BSY || port->tfd.ERR) && waitMS > 0) {
   13eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13eed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13ef0:	c1 e8 07             	shr    eax,0x7
   13ef3:	83 e0 01             	and    eax,0x1
   13ef6:	84 c0                	test   al,al
   13ef8:	75 0d                	jne    13f07 <ahciSpinupDrive+0x16a>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:223 (discriminator 2)
   13efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13efd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13f00:	83 e0 01             	and    eax,0x1
   13f03:	84 c0                	test   al,al
   13f05:	74 06                	je     13f0d <ahciSpinupDrive+0x170>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:223 (discriminator 3)
   13f07:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   13f0b:	7f cc                	jg     13ed9 <ahciSpinupDrive+0x13c>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:227
        wait(10);
        waitMS -= 10;
    }
    if (waitMS == 0) {
   13f0d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   13f11:	75 62                	jne    13f75 <ahciSpinupDrive+0x1d8>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:228
        printd(DEBUG_AHCI, "AHCI: Error spinning up device, BSY, DRQ OR ERR not cleared (0x%08X)\n", port->ssts);
   13f13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13f16:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13f19:	83 ec 04             	sub    esp,0x4
   13f1c:	50                   	push   eax
   13f1d:	68 a8 62 04 00       	push   0x462a8
   13f22:	68 00 20 00 00       	push   0x2000
   13f27:	e8 27 31 01 00       	call   27053 <printd>
   13f2c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:230
        //printd(DEBUG_AHCI,"****status=0x%08X, error=0x%08X, count=0x%08X\n",rfis->status,rfis->error,rfis->countl);
        printd(DEBUG_AHCI, "***tfd=0x%08X, ssts=0x%08X, serr=0x%08X, is=0x%08X\n", port->tfd, port->ssts, port->serr, port->pxis.AsUlong);
   13f2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13f32:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   13f35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13f38:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13f3b:	83 ec 08             	sub    esp,0x8
   13f3e:	52                   	push   edx
   13f3f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   13f42:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
   13f45:	52                   	push   edx
   13f46:	50                   	push   eax
   13f47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13f4a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13f4d:	50                   	push   eax
   13f4e:	68 48 62 04 00       	push   0x46248
   13f53:	68 00 20 00 00       	push   0x2000
   13f58:	e8 f6 30 01 00       	call   27053 <printd>
   13f5d:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:231
        printd(DEBUG_AHCI, "Attempting to continue ... \n");
   13f60:	83 ec 08             	sub    esp,0x8
   13f63:	68 7c 62 04 00       	push   0x4627c
   13f68:	68 00 20 00 00       	push   0x2000
   13f6d:	e8 e1 30 01 00       	call   27053 <printd>
   13f72:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:233
    }
    port->cmd.ST = 1;
   13f75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13f78:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13f7b:	83 ca 01             	or     edx,0x1
   13f7e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:234
    if (waitMS == 0)
   13f81:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   13f85:	75 07                	jne    13f8e <ahciSpinupDrive+0x1f1>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:235
        return false;
   13f87:	b8 00 00 00 00       	mov    eax,0x0
   13f8c:	eb 05                	jmp    13f93 <ahciSpinupDrive+0x1f6>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:236
    return true;
   13f8e:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:237
}
   13f93:	8d 65 f8             	lea    esp,[ebp-0x8]
   13f96:	5b                   	pop    ebx
   13f97:	5e                   	pop    esi
   13f98:	5d                   	pop    ebp
   13f99:	c3                   	ret    

00013f9a <ahciProbePorts>:
ahciProbePorts():
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:239

void ahciProbePorts(HBA_MEM *abar) {
   13f9a:	55                   	push   ebp
   13f9b:	89 e5                	mov    ebp,esp
   13f9d:	83 ec 28             	sub    esp,0x28
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:241
    // Search disk in impelemented ports
    uint32_t pi = abar->pi;
   13fa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13fa3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   13fa6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:242
    int i = 0;
   13fa9:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:243
    int rb = AHCI_PORT_BASE_REMAP_ADDRESS + (0x10000 * ahciHostCount); //probably only need 0xA000
   13fb0:	a1 24 8a 02 00       	mov    eax,ds:0x28a24
   13fb5:	c1 e0 10             	shl    eax,0x10
   13fb8:	05 00 60 5b 00       	add    eax,0x5b6000
   13fbd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:244
    if (pi > 0)
   13fc0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   13fc4:	0f 84 4f 02 00 00    	je     14219 <ahciProbePorts+0x27f>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:245
        printd(DEBUG_AHCI, "AHCI: Probing ports via ABAR 0x%08X, value 0x%02X\n", abar, abar->pi);
   13fca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13fcd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   13fd0:	50                   	push   eax
   13fd1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13fd4:	68 f0 62 04 00       	push   0x462f0
   13fd9:	68 00 20 00 00       	push   0x2000
   13fde:	e8 70 30 01 00       	call   27053 <printd>
   13fe3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:246
    while (i < 32) {
   13fe6:	e9 2e 02 00 00       	jmp    14219 <ahciProbePorts+0x27f>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:247
        if (pi & 1) {
   13feb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13fee:	83 e0 01             	and    eax,0x1
   13ff1:	85 c0                	test   eax,eax
   13ff3:	0f 84 19 02 00 00    	je     14212 <ahciProbePorts+0x278>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:248
        ahci_enable_port(abar,i);
   13ff9:	83 ec 08             	sub    esp,0x8
   13ffc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   13fff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14002:	e8 d0 1b 00 00       	call   15bd7 <ahci_enable_port>
   14007:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:250
        //waitForPortIdle(&abar->ports[i]);
            uint32_t sig = 0;
   1400a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:252
            //Get the SATA device signature
            int dt = check_type(&abar->ports[i], &sig);
   14011:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14014:	83 c0 02             	add    eax,0x2
   14017:	c1 e0 07             	shl    eax,0x7
   1401a:	89 c2                	mov    edx,eax
   1401c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1401f:	01 c2                	add    edx,eax
   14021:	83 ec 08             	sub    esp,0x8
   14024:	8d 45 e4             	lea    eax,[ebp-0x1c]
   14027:	50                   	push   eax
   14028:	52                   	push   edx
   14029:	e8 f1 f9 ff ff       	call   13a1f <check_type>
   1402e:	83 c4 10             	add    esp,0x10
   14031:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:253
            printd(DEBUG_AHCI, "AHCI: Checking port %u (0x%08X), sig=%08X\n", i, &abar->ports[i], sig);
   14034:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14037:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1403a:	83 c2 02             	add    edx,0x2
   1403d:	89 d1                	mov    ecx,edx
   1403f:	c1 e1 07             	shl    ecx,0x7
   14042:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   14045:	01 ca                	add    edx,ecx
   14047:	83 ec 0c             	sub    esp,0xc
   1404a:	50                   	push   eax
   1404b:	52                   	push   edx
   1404c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1404f:	68 24 63 04 00       	push   0x46324
   14054:	68 00 20 00 00       	push   0x2000
   14059:	e8 f5 2f 01 00       	call   27053 <printd>
   1405e:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:255
            //Found a SATA disk
            if (dt == AHCI_DEV_SATA) {
   14061:	83 7d e8 01          	cmp    DWORD PTR [ebp-0x18],0x1
   14065:	0f 85 a3 00 00 00    	jne    1410e <ahciProbePorts+0x174>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:256
                printd(DEBUG_AHCI, "AHCI: SATA drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   1406b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1406e:	83 c0 02             	add    eax,0x2
   14071:	c1 e0 07             	shl    eax,0x7
   14074:	89 c2                	mov    edx,eax
   14076:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14079:	01 d0                	add    eax,edx
   1407b:	50                   	push   eax
   1407c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1407f:	68 50 63 04 00       	push   0x46350
   14084:	68 00 20 00 00       	push   0x2000
   14089:	e8 c5 2f 01 00       	call   27053 <printd>
   1408e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:257
                printd(DEBUG_AHCI, "AHCI:\tCLB=0x%08X, fb=0x%08X\n", abar->ports[i].clb, abar->ports[i].fb);
   14091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14094:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   14097:	83 c2 02             	add    edx,0x2
   1409a:	c1 e2 07             	shl    edx,0x7
   1409d:	01 d0                	add    eax,edx
   1409f:	83 c0 08             	add    eax,0x8
   140a2:	8b 10                	mov    edx,DWORD PTR [eax]
   140a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   140a7:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   140aa:	83 c1 02             	add    ecx,0x2
   140ad:	c1 e1 07             	shl    ecx,0x7
   140b0:	01 c8                	add    eax,ecx
   140b2:	8b 00                	mov    eax,DWORD PTR [eax]
   140b4:	52                   	push   edx
   140b5:	50                   	push   eax
   140b6:	68 7c 63 04 00       	push   0x4637c
   140bb:	68 00 20 00 00       	push   0x2000
   140c0:	e8 8e 2f 01 00       	call   27053 <printd>
   140c5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:258
                port_rebase(&abar->ports[i], i, rb);
   140c8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   140cb:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   140ce:	83 c2 02             	add    edx,0x2
   140d1:	89 d1                	mov    ecx,edx
   140d3:	c1 e1 07             	shl    ecx,0x7
   140d6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   140d9:	01 ca                	add    edx,ecx
   140db:	83 ec 04             	sub    esp,0x4
   140de:	50                   	push   eax
   140df:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   140e2:	52                   	push   edx
   140e3:	e8 5c 07 00 00       	call   14844 <port_rebase>
   140e8:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:261
                	//det reset, disable slumber and Partial state
			//reset port, send COMRESET signal
                ahciIdentify(&abar->ports[i], AHCI_DEV_SATA);
   140eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   140ee:	83 c0 02             	add    eax,0x2
   140f1:	c1 e0 07             	shl    eax,0x7
   140f4:	89 c2                	mov    edx,eax
   140f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   140f9:	01 d0                	add    eax,edx
   140fb:	83 ec 08             	sub    esp,0x8
   140fe:	6a 01                	push   0x1
   14100:	50                   	push   eax
   14101:	e8 b6 09 00 00       	call   14abc <ahciIdentify>
   14106:	83 c4 10             	add    esp,0x10
   14109:	e9 04 01 00 00       	jmp    14212 <ahciProbePorts+0x278>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:271
                    printk("AHCI: Successfully read sector 0 from device to 0x%08X\n",ahciReadBuff);
                    printk("AHCI: Read Buffer: %s\n",ahciReadBuff);
                    printk("sig=0x%08X\n",abar->ports[i].sig);
                }
                 */
            } else if (dt == AHCI_DEV_SATAPI) {
   1410e:	83 7d e8 04          	cmp    DWORD PTR [ebp-0x18],0x4
   14112:	0f 85 a0 00 00 00    	jne    141b8 <ahciProbePorts+0x21e>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:272
                printd(DEBUG_AHCI, "AHCI:SATAPI drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   14118:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1411b:	83 c0 02             	add    eax,0x2
   1411e:	c1 e0 07             	shl    eax,0x7
   14121:	89 c2                	mov    edx,eax
   14123:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14126:	01 d0                	add    eax,edx
   14128:	50                   	push   eax
   14129:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1412c:	68 9c 63 04 00       	push   0x4639c
   14131:	68 00 20 00 00       	push   0x2000
   14136:	e8 18 2f 01 00       	call   27053 <printd>
   1413b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:273
                printd(DEBUG_AHCI, "AHCI:\tCLB=0x%08X, fb=0x%08X\n", abar->ports[i].clb, abar->ports[i].fb);
   1413e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14141:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   14144:	83 c2 02             	add    edx,0x2
   14147:	c1 e2 07             	shl    edx,0x7
   1414a:	01 d0                	add    eax,edx
   1414c:	83 c0 08             	add    eax,0x8
   1414f:	8b 10                	mov    edx,DWORD PTR [eax]
   14151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14154:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   14157:	83 c1 02             	add    ecx,0x2
   1415a:	c1 e1 07             	shl    ecx,0x7
   1415d:	01 c8                	add    eax,ecx
   1415f:	8b 00                	mov    eax,DWORD PTR [eax]
   14161:	52                   	push   edx
   14162:	50                   	push   eax
   14163:	68 7c 63 04 00       	push   0x4637c
   14168:	68 00 20 00 00       	push   0x2000
   1416d:	e8 e1 2e 01 00       	call   27053 <printd>
   14172:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:274
                port_rebase(&abar->ports[i], i, rb);
   14175:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14178:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1417b:	83 c2 02             	add    edx,0x2
   1417e:	89 d1                	mov    ecx,edx
   14180:	c1 e1 07             	shl    ecx,0x7
   14183:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   14186:	01 ca                	add    edx,ecx
   14188:	83 ec 04             	sub    esp,0x4
   1418b:	50                   	push   eax
   1418c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1418f:	52                   	push   edx
   14190:	e8 af 06 00 00       	call   14844 <port_rebase>
   14195:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:276
                //Run an ATA_IDENTIFY
                ahciIdentify(&abar->ports[i], AHCI_DEV_SATAPI);
   14198:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1419b:	83 c0 02             	add    eax,0x2
   1419e:	c1 e0 07             	shl    eax,0x7
   141a1:	89 c2                	mov    edx,eax
   141a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   141a6:	01 d0                	add    eax,edx
   141a8:	83 ec 08             	sub    esp,0x8
   141ab:	6a 04                	push   0x4
   141ad:	50                   	push   eax
   141ae:	e8 09 09 00 00       	call   14abc <ahciIdentify>
   141b3:	83 c4 10             	add    esp,0x10
   141b6:	eb 5a                	jmp    14212 <ahciProbePorts+0x278>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:277
            } else if (dt == AHCI_DEV_SEMB) {
   141b8:	83 7d e8 02          	cmp    DWORD PTR [ebp-0x18],0x2
   141bc:	75 28                	jne    141e6 <ahciProbePorts+0x24c>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:278
                printd(DEBUG_AHCI, "AHCI: SEMB drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   141be:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   141c1:	83 c0 02             	add    eax,0x2
   141c4:	c1 e0 07             	shl    eax,0x7
   141c7:	89 c2                	mov    edx,eax
   141c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   141cc:	01 d0                	add    eax,edx
   141ce:	50                   	push   eax
   141cf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   141d2:	68 cc 63 04 00       	push   0x463cc
   141d7:	68 00 20 00 00       	push   0x2000
   141dc:	e8 72 2e 01 00       	call   27053 <printd>
   141e1:	83 c4 10             	add    esp,0x10
   141e4:	eb 2c                	jmp    14212 <ahciProbePorts+0x278>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:280
                //port_rebase(abar->ports,i,rb+=0x10000);
            } else if (dt == AHCI_DEV_PM) {
   141e6:	83 7d e8 03          	cmp    DWORD PTR [ebp-0x18],0x3
   141ea:	75 26                	jne    14212 <ahciProbePorts+0x278>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:281
                printd(DEBUG_AHCI, "AHCI: PM drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   141ec:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   141ef:	83 c0 02             	add    eax,0x2
   141f2:	c1 e0 07             	shl    eax,0x7
   141f5:	89 c2                	mov    edx,eax
   141f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   141fa:	01 d0                	add    eax,edx
   141fc:	50                   	push   eax
   141fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14200:	68 f8 63 04 00       	push   0x463f8
   14205:	68 00 20 00 00       	push   0x2000
   1420a:	e8 44 2e 01 00       	call   27053 <printd>
   1420f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:290
            //			{
            //				printk("No drive found at port %d\n", i);
            //			}
        }

        pi >>= 1;
   14212:	d1 6d f4             	shr    DWORD PTR [ebp-0xc],1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:291
        i++;
   14215:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:246
    uint32_t pi = abar->pi;
    int i = 0;
    int rb = AHCI_PORT_BASE_REMAP_ADDRESS + (0x10000 * ahciHostCount); //probably only need 0xA000
    if (pi > 0)
        printd(DEBUG_AHCI, "AHCI: Probing ports via ABAR 0x%08X, value 0x%02X\n", abar, abar->pi);
    while (i < 32) {
   14219:	83 7d f0 1f          	cmp    DWORD PTR [ebp-0x10],0x1f
   1421d:	0f 8e c8 fd ff ff    	jle    13feb <ahciProbePorts+0x51>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:293
        }

        pi >>= 1;
        i++;
    }
}
   14223:	90                   	nop
   14224:	c9                   	leave  
   14225:	c3                   	ret    

00014226 <printAHCICaps>:
printAHCICaps():
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:295

void printAHCICaps() {
   14226:	55                   	push   ebp
   14227:	89 e5                	mov    ebp,esp
   14229:	57                   	push   edi
   1422a:	56                   	push   esi
   1422b:	53                   	push   ebx
   1422c:	81 ec 2c 02 00 00    	sub    esp,0x22c
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:297
    //printk("ahciCaps=0x%08X, sizeof=%u\n",ahciCaps,sizeof(ahcicaps_t));
    terminal_clear();
   14232:	e8 5b 39 00 00       	call   17b92 <terminal_clear>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:298
    printk("AHCI Caps:\n");
   14237:	83 ec 0c             	sub    esp,0xc
   1423a:	68 22 64 04 00       	push   0x46422
   1423f:	e8 ef 2d 01 00       	call   27033 <printk>
   14244:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:299
    printk("\tSupports 64-bit Addressing (S64A):\t\t\t\t%s\n", ahciCaps->S64A ? "Yes" : "No");
   14247:	a1 e8 03 a0 00       	mov    eax,ds:0xa003e8
   1424c:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   14250:	83 e0 80             	and    eax,0xffffff80
   14253:	84 c0                	test   al,al
   14255:	74 07                	je     1425e <printAHCICaps+0x38>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:299 (discriminator 1)
   14257:	b8 2e 64 04 00       	mov    eax,0x4642e
   1425c:	eb 05                	jmp    14263 <printAHCICaps+0x3d>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:299 (discriminator 2)
   1425e:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:299 (discriminator 4)
   14263:	83 ec 08             	sub    esp,0x8
   14266:	50                   	push   eax
   14267:	68 38 64 04 00       	push   0x46438
   1426c:	e8 c2 2d 01 00       	call   27033 <printk>
   14271:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:300 (discriminator 4)
    printk("\tSupprorts Native Command Queueing (SNCQ):\t\t%s\n", ahciCaps->SNCQ ? "Yes" : "No");
   14274:	a1 e8 03 a0 00       	mov    eax,ds:0xa003e8
   14279:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1427d:	83 e0 40             	and    eax,0x40
   14280:	84 c0                	test   al,al
   14282:	74 07                	je     1428b <printAHCICaps+0x65>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:300 (discriminator 1)
   14284:	b8 2e 64 04 00       	mov    eax,0x4642e
   14289:	eb 05                	jmp    14290 <printAHCICaps+0x6a>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:300 (discriminator 2)
   1428b:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:300 (discriminator 4)
   14290:	83 ec 08             	sub    esp,0x8
   14293:	50                   	push   eax
   14294:	68 64 64 04 00       	push   0x46464
   14299:	e8 95 2d 01 00       	call   27033 <printk>
   1429e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:301 (discriminator 4)
    printk("\tSupports SNotification Register (SSNTF):\t\t%s\n", ahciCaps->SSNTF ? "Yes" : "No");
   142a1:	a1 e8 03 a0 00       	mov    eax,ds:0xa003e8
   142a6:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   142aa:	83 e0 20             	and    eax,0x20
   142ad:	84 c0                	test   al,al
   142af:	74 07                	je     142b8 <printAHCICaps+0x92>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:301 (discriminator 1)
   142b1:	b8 2e 64 04 00       	mov    eax,0x4642e
   142b6:	eb 05                	jmp    142bd <printAHCICaps+0x97>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:301 (discriminator 2)
   142b8:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:301 (discriminator 4)
   142bd:	83 ec 08             	sub    esp,0x8
   142c0:	50                   	push   eax
   142c1:	68 94 64 04 00       	push   0x46494
   142c6:	e8 68 2d 01 00       	call   27033 <printk>
   142cb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:302 (discriminator 4)
    printk("\tSupports Mechanical Presence Switch (SMPS):\t\t%s\n", ahciCaps->SMPS ? "Yes" : "No");
   142ce:	a1 e8 03 a0 00       	mov    eax,ds:0xa003e8
   142d3:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   142d7:	83 e0 10             	and    eax,0x10
   142da:	84 c0                	test   al,al
   142dc:	74 07                	je     142e5 <printAHCICaps+0xbf>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:302 (discriminator 1)
   142de:	b8 2e 64 04 00       	mov    eax,0x4642e
   142e3:	eb 05                	jmp    142ea <printAHCICaps+0xc4>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:302 (discriminator 2)
   142e5:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:302 (discriminator 4)
   142ea:	83 ec 08             	sub    esp,0x8
   142ed:	50                   	push   eax
   142ee:	68 c4 64 04 00       	push   0x464c4
   142f3:	e8 3b 2d 01 00       	call   27033 <printk>
   142f8:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:303 (discriminator 4)
    printk("\tSupports Staggered Spin-up (SSS):\t\t\t\t%s\n", ahciCaps->SSS ? "Yes" : "No");
   142fb:	a1 e8 03 a0 00       	mov    eax,ds:0xa003e8
   14300:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   14304:	83 e0 08             	and    eax,0x8
   14307:	84 c0                	test   al,al
   14309:	74 07                	je     14312 <printAHCICaps+0xec>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:303 (discriminator 1)
   1430b:	b8 2e 64 04 00       	mov    eax,0x4642e
   14310:	eb 05                	jmp    14317 <printAHCICaps+0xf1>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:303 (discriminator 2)
   14312:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:303 (discriminator 4)
   14317:	83 ec 08             	sub    esp,0x8
   1431a:	50                   	push   eax
   1431b:	68 f8 64 04 00       	push   0x464f8
   14320:	e8 0e 2d 01 00       	call   27033 <printk>
   14325:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:304 (discriminator 4)
    printk("\tSupports Aggressive Link Power Management (SALP):\t%s\n", ahciCaps->SALP ? "Yes" : "No");
   14328:	a1 e8 03 a0 00       	mov    eax,ds:0xa003e8
   1432d:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   14331:	83 e0 04             	and    eax,0x4
   14334:	84 c0                	test   al,al
   14336:	74 07                	je     1433f <printAHCICaps+0x119>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:304 (discriminator 1)
   14338:	b8 2e 64 04 00       	mov    eax,0x4642e
   1433d:	eb 05                	jmp    14344 <printAHCICaps+0x11e>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:304 (discriminator 2)
   1433f:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:304 (discriminator 4)
   14344:	83 ec 08             	sub    esp,0x8
   14347:	50                   	push   eax
   14348:	68 24 65 04 00       	push   0x46524
   1434d:	e8 e1 2c 01 00       	call   27033 <printk>
   14352:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:305 (discriminator 4)
    printk("\tSupports Active LED (SAL):\t\t\t\t\t%s\n", ahciCaps->SAL ? "Yes" : "No");
   14355:	a1 e8 03 a0 00       	mov    eax,ds:0xa003e8
   1435a:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1435e:	83 e0 02             	and    eax,0x2
   14361:	84 c0                	test   al,al
   14363:	74 07                	je     1436c <printAHCICaps+0x146>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:305 (discriminator 1)
   14365:	b8 2e 64 04 00       	mov    eax,0x4642e
   1436a:	eb 05                	jmp    14371 <printAHCICaps+0x14b>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:305 (discriminator 2)
   1436c:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:305 (discriminator 4)
   14371:	83 ec 08             	sub    esp,0x8
   14374:	50                   	push   eax
   14375:	68 5c 65 04 00       	push   0x4655c
   1437a:	e8 b4 2c 01 00       	call   27033 <printk>
   1437f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:306 (discriminator 4)
    printk("\tSupports Command List Override (SCLO):\t\t\t%s\n", ahciCaps->SCLO ? "Yes" : "No");
   14382:	a1 e8 03 a0 00       	mov    eax,ds:0xa003e8
   14387:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1438b:	83 e0 01             	and    eax,0x1
   1438e:	84 c0                	test   al,al
   14390:	74 07                	je     14399 <printAHCICaps+0x173>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:306 (discriminator 1)
   14392:	b8 2e 64 04 00       	mov    eax,0x4642e
   14397:	eb 05                	jmp    1439e <printAHCICaps+0x178>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:306 (discriminator 2)
   14399:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:306 (discriminator 4)
   1439e:	83 ec 08             	sub    esp,0x8
   143a1:	50                   	push   eax
   143a2:	68 80 65 04 00       	push   0x46580
   143a7:	e8 87 2c 01 00       	call   27033 <printk>
   143ac:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:307 (discriminator 4)
    printk("\tInterface Speed Support (ISS):\t\t\t\t%s\n", ahciCaps->ISS == 1 ? "1.5 Gbps" : ahciCaps->ISS == 2 ? "3 Gbps" : ahciCaps->ISS == 3 ? "6 Gbps" : "Reserved");
   143af:	a1 e8 03 a0 00       	mov    eax,ds:0xa003e8
   143b4:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   143b8:	83 e0 f0             	and    eax,0xfffffff0
   143bb:	3c 10                	cmp    al,0x10
   143bd:	74 35                	je     143f4 <printAHCICaps+0x1ce>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:307 (discriminator 1)
   143bf:	a1 e8 03 a0 00       	mov    eax,ds:0xa003e8
   143c4:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   143c8:	83 e0 f0             	and    eax,0xfffffff0
   143cb:	3c 20                	cmp    al,0x20
   143cd:	74 1e                	je     143ed <printAHCICaps+0x1c7>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:307 (discriminator 3)
   143cf:	a1 e8 03 a0 00       	mov    eax,ds:0xa003e8
   143d4:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   143d8:	83 e0 f0             	and    eax,0xfffffff0
   143db:	3c 30                	cmp    al,0x30
   143dd:	75 07                	jne    143e6 <printAHCICaps+0x1c0>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:307 (discriminator 5)
   143df:	b8 ae 65 04 00       	mov    eax,0x465ae
   143e4:	eb 13                	jmp    143f9 <printAHCICaps+0x1d3>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:307 (discriminator 6)
   143e6:	b8 b5 65 04 00       	mov    eax,0x465b5
   143eb:	eb 0c                	jmp    143f9 <printAHCICaps+0x1d3>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:307 (discriminator 4)
   143ed:	b8 be 65 04 00       	mov    eax,0x465be
   143f2:	eb 05                	jmp    143f9 <printAHCICaps+0x1d3>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:307 (discriminator 2)
   143f4:	b8 c5 65 04 00       	mov    eax,0x465c5
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:307 (discriminator 12)
   143f9:	83 ec 08             	sub    esp,0x8
   143fc:	50                   	push   eax
   143fd:	68 d0 65 04 00       	push   0x465d0
   14402:	e8 2c 2c 01 00       	call   27033 <printk>
   14407:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:308 (discriminator 12)
    printk("\tSupports AHCI mode only (SAM):\t\t\t\t%s\n", ahciCaps->SAM ? "Yes" : "No");
   1440a:	a1 e8 03 a0 00       	mov    eax,ds:0xa003e8
   1440f:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   14413:	83 e0 04             	and    eax,0x4
   14416:	84 c0                	test   al,al
   14418:	74 07                	je     14421 <printAHCICaps+0x1fb>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:308 (discriminator 1)
   1441a:	b8 2e 64 04 00       	mov    eax,0x4642e
   1441f:	eb 05                	jmp    14426 <printAHCICaps+0x200>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:308 (discriminator 2)
   14421:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:308 (discriminator 4)
   14426:	83 ec 08             	sub    esp,0x8
   14429:	50                   	push   eax
   1442a:	68 f8 65 04 00       	push   0x465f8
   1442f:	e8 ff 2b 01 00       	call   27033 <printk>
   14434:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:309 (discriminator 4)
    printk("\tSupports Port Multiplier (SPM):\t\t\t\t%s\n", ahciCaps->SPM ? "Yes" : "No");
   14437:	a1 e8 03 a0 00       	mov    eax,ds:0xa003e8
   1443c:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   14440:	83 e0 02             	and    eax,0x2
   14443:	84 c0                	test   al,al
   14445:	74 07                	je     1444e <printAHCICaps+0x228>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:309 (discriminator 1)
   14447:	b8 2e 64 04 00       	mov    eax,0x4642e
   1444c:	eb 05                	jmp    14453 <printAHCICaps+0x22d>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:309 (discriminator 2)
   1444e:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:309 (discriminator 4)
   14453:	83 ec 08             	sub    esp,0x8
   14456:	50                   	push   eax
   14457:	68 20 66 04 00       	push   0x46620
   1445c:	e8 d2 2b 01 00       	call   27033 <printk>
   14461:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:310 (discriminator 4)
    printk("\tFIS-based Switching Support (FBSS):\t\t\t%s\n", ahciCaps->FBSS ? "Yes" : "No");   
   14464:	a1 e8 03 a0 00       	mov    eax,ds:0xa003e8
   14469:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1446d:	83 e0 01             	and    eax,0x1
   14470:	84 c0                	test   al,al
   14472:	74 07                	je     1447b <printAHCICaps+0x255>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:310 (discriminator 1)
   14474:	b8 2e 64 04 00       	mov    eax,0x4642e
   14479:	eb 05                	jmp    14480 <printAHCICaps+0x25a>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:310 (discriminator 2)
   1447b:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:310 (discriminator 4)
   14480:	83 ec 08             	sub    esp,0x8
   14483:	50                   	push   eax
   14484:	68 48 66 04 00       	push   0x46648
   14489:	e8 a5 2b 01 00       	call   27033 <printk>
   1448e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:311 (discriminator 4)
    printk("\tPIO Multiple DRQ Block (PMD):\t\t\t\t\t%s\n", ahciCaps->PMD ? "Yes" : "No");
   14491:	a1 e8 03 a0 00       	mov    eax,ds:0xa003e8
   14496:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1449a:	83 e0 80             	and    eax,0xffffff80
   1449d:	84 c0                	test   al,al
   1449f:	74 07                	je     144a8 <printAHCICaps+0x282>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:311 (discriminator 1)
   144a1:	b8 2e 64 04 00       	mov    eax,0x4642e
   144a6:	eb 05                	jmp    144ad <printAHCICaps+0x287>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:311 (discriminator 2)
   144a8:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:311 (discriminator 4)
   144ad:	83 ec 08             	sub    esp,0x8
   144b0:	50                   	push   eax
   144b1:	68 74 66 04 00       	push   0x46674
   144b6:	e8 78 2b 01 00       	call   27033 <printk>
   144bb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:312 (discriminator 4)
    printk("\tSlumber State Capable (SSC):\t\t\t\t\t%s\n", ahciCaps->SSC ? "Yes" : "No");
   144be:	a1 e8 03 a0 00       	mov    eax,ds:0xa003e8
   144c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   144c7:	83 e0 40             	and    eax,0x40
   144ca:	84 c0                	test   al,al
   144cc:	74 07                	je     144d5 <printAHCICaps+0x2af>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:312 (discriminator 1)
   144ce:	b8 2e 64 04 00       	mov    eax,0x4642e
   144d3:	eb 05                	jmp    144da <printAHCICaps+0x2b4>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:312 (discriminator 2)
   144d5:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:312 (discriminator 4)
   144da:	83 ec 08             	sub    esp,0x8
   144dd:	50                   	push   eax
   144de:	68 9c 66 04 00       	push   0x4669c
   144e3:	e8 4b 2b 01 00       	call   27033 <printk>
   144e8:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:313 (discriminator 4)
    printk("\tPartial State Capable (PSC):\t\t\t\t\t%s\n", ahciCaps->PSC ? "Yes" : "No");
   144eb:	a1 e8 03 a0 00       	mov    eax,ds:0xa003e8
   144f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   144f4:	83 e0 20             	and    eax,0x20
   144f7:	84 c0                	test   al,al
   144f9:	74 07                	je     14502 <printAHCICaps+0x2dc>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:313 (discriminator 1)
   144fb:	b8 2e 64 04 00       	mov    eax,0x4642e
   14500:	eb 05                	jmp    14507 <printAHCICaps+0x2e1>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:313 (discriminator 2)
   14502:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:313 (discriminator 4)
   14507:	83 ec 08             	sub    esp,0x8
   1450a:	50                   	push   eax
   1450b:	68 c4 66 04 00       	push   0x466c4
   14510:	e8 1e 2b 01 00       	call   27033 <printk>
   14515:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:314 (discriminator 4)
    printk("\tNumber of Command Slots (NSC):\t\t\t\t%u\n", ahciCaps->NCS);
   14518:	a1 e8 03 a0 00       	mov    eax,ds:0xa003e8
   1451d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   14521:	83 e0 1f             	and    eax,0x1f
   14524:	0f b6 c0             	movzx  eax,al
   14527:	83 ec 08             	sub    esp,0x8
   1452a:	50                   	push   eax
   1452b:	68 ec 66 04 00       	push   0x466ec
   14530:	e8 fe 2a 01 00       	call   27033 <printk>
   14535:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:315 (discriminator 4)
    printk("\tCommand Completion Coalescing Supported (CCCS):\t%s\n", ahciCaps->CCCS ? "Yes" : "No");
   14538:	a1 e8 03 a0 00       	mov    eax,ds:0xa003e8
   1453d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   14540:	83 e0 80             	and    eax,0xffffff80
   14543:	84 c0                	test   al,al
   14545:	74 07                	je     1454e <printAHCICaps+0x328>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:315 (discriminator 1)
   14547:	b8 2e 64 04 00       	mov    eax,0x4642e
   1454c:	eb 05                	jmp    14553 <printAHCICaps+0x32d>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:315 (discriminator 2)
   1454e:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:315 (discriminator 4)
   14553:	83 ec 08             	sub    esp,0x8
   14556:	50                   	push   eax
   14557:	68 14 67 04 00       	push   0x46714
   1455c:	e8 d2 2a 01 00       	call   27033 <printk>
   14561:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:316 (discriminator 4)
    printk("\tEnclosure Management Supported (EMS):\t\t\t%s\n", ahciCaps->EMS ? "Yes" : "No");
   14564:	a1 e8 03 a0 00       	mov    eax,ds:0xa003e8
   14569:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1456c:	83 e0 40             	and    eax,0x40
   1456f:	84 c0                	test   al,al
   14571:	74 07                	je     1457a <printAHCICaps+0x354>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:316 (discriminator 1)
   14573:	b8 2e 64 04 00       	mov    eax,0x4642e
   14578:	eb 05                	jmp    1457f <printAHCICaps+0x359>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:316 (discriminator 2)
   1457a:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:316 (discriminator 4)
   1457f:	83 ec 08             	sub    esp,0x8
   14582:	50                   	push   eax
   14583:	68 4c 67 04 00       	push   0x4674c
   14588:	e8 a6 2a 01 00       	call   27033 <printk>
   1458d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:317 (discriminator 4)
    printk("\tSupports External SATA (SXS):\t\t\t\t\t%s\n", ahciCaps->SXS ? "Yes" : "No");
   14590:	a1 e8 03 a0 00       	mov    eax,ds:0xa003e8
   14595:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   14598:	83 e0 20             	and    eax,0x20
   1459b:	84 c0                	test   al,al
   1459d:	74 07                	je     145a6 <printAHCICaps+0x380>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:317 (discriminator 1)
   1459f:	b8 2e 64 04 00       	mov    eax,0x4642e
   145a4:	eb 05                	jmp    145ab <printAHCICaps+0x385>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:317 (discriminator 2)
   145a6:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:317 (discriminator 4)
   145ab:	83 ec 08             	sub    esp,0x8
   145ae:	50                   	push   eax
   145af:	68 7c 67 04 00       	push   0x4677c
   145b4:	e8 7a 2a 01 00       	call   27033 <printk>
   145b9:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:318 (discriminator 4)
    printk("\tNumber of Ports (NP):\t\t\t\t\t\t%u\n", ahciCaps->NP);
   145bc:	a1 e8 03 a0 00       	mov    eax,ds:0xa003e8
   145c1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   145c4:	83 e0 1f             	and    eax,0x1f
   145c7:	0f b6 c0             	movzx  eax,al
   145ca:	83 ec 08             	sub    esp,0x8
   145cd:	50                   	push   eax
   145ce:	68 a4 67 04 00       	push   0x467a4
   145d3:	e8 5b 2a 01 00       	call   27033 <printk>
   145d8:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:321 (discriminator 4)
    //printk("Press a key for more ...");
    //waitForKeyboardKey();
    printk("AHCI: SATA Disks:\n");
   145db:	83 ec 0c             	sub    esp,0xc
   145de:	68 c4 67 04 00       	push   0x467c4
   145e3:	e8 4b 2a 01 00       	call   27033 <printk>
   145e8:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:323 (discriminator 4)
    char p1[512];
    for (int cnt = 4; cnt < 10; cnt++)
   145eb:	c7 45 e4 04 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x4
   145f2:	e9 3a 02 00 00       	jmp    14831 <printAHCICaps+0x60b>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:324
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
   145f7:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   145fd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14600:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14606:	01 d0                	add    eax,edx
   14608:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   1460f:	84 c0                	test   al,al
   14611:	0f 84 16 02 00 00    	je     1482d <printAHCICaps+0x607>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:325
            memset(p1, 0, 512);
   14617:	83 ec 04             	sub    esp,0x4
   1461a:	68 00 02 00 00       	push   0x200
   1461f:	6a 00                	push   0x0
   14621:	8d 85 d8 fd ff ff    	lea    eax,[ebp-0x228]
   14627:	50                   	push   eax
   14628:	e8 80 09 01 00       	call   24fad <memset>
   1462d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:326
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
   14630:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   14636:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14639:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   1463f:	01 d0                	add    eax,edx
   14641:	05 00 02 00 00       	add    eax,0x200
   14646:	83 ec 08             	sub    esp,0x8
   14649:	50                   	push   eax
   1464a:	8d 85 d8 fd ff ff    	lea    eax,[ebp-0x228]
   14650:	50                   	push   eax
   14651:	e8 3e 2b 01 00       	call   27194 <strcpy>
   14656:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:327
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
   14659:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   1465f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14662:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14668:	01 d0                	add    eax,edx
   1466a:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   14671:	3c 01                	cmp    al,0x1
   14673:	75 08                	jne    1467d <printAHCICaps+0x457>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:327 (discriminator 1)
   14675:	8d 85 d8 fd ff ff    	lea    eax,[ebp-0x228]
   1467b:	eb 05                	jmp    14682 <printAHCICaps+0x45c>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:327 (discriminator 2)
   1467d:	b8 d7 67 04 00       	mov    eax,0x467d7
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:327 (discriminator 4)
   14682:	83 ec 04             	sub    esp,0x4
   14685:	50                   	push   eax
   14686:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   14689:	68 dd 67 04 00       	push   0x467dd
   1468e:	e8 a0 29 01 00       	call   27033 <printk>
   14693:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:335 (discriminator 4)
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
                    kATADeviceInfo[cnt].ABAR,
                    kATADeviceInfo[cnt].ioPort);
   14696:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   1469c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1469f:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   146a5:	01 d0                	add    eax,edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   146a7:	8b b8 69 02 00 00    	mov    edi,DWORD PTR [eax+0x269]
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:334 (discriminator 4)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
                    kATADeviceInfo[cnt].ABAR,
   146ad:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   146b3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   146b6:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   146bc:	01 d0                	add    eax,edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   146be:	8b b0 6f 02 00 00    	mov    esi,DWORD PTR [eax+0x26f]
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:333 (discriminator 4)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
   146c4:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   146ca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   146cd:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   146d3:	01 d0                	add    eax,edx
   146d5:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   146dc:	84 c0                	test   al,al
   146de:	74 0c                	je     146ec <printAHCICaps+0x4c6>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:328 (discriminator 1)
   146e0:	c7 85 d4 fd ff ff f2 	mov    DWORD PTR [ebp-0x22c],0x467f2
   146e7:	67 04 00 
   146ea:	eb 0a                	jmp    146f6 <printAHCICaps+0x4d0>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:328 (discriminator 2)
   146ec:	c7 85 d4 fd ff ff f7 	mov    DWORD PTR [ebp-0x22c],0x467f7
   146f3:	67 04 00 
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:332 (discriminator 4)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
   146f6:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   146fc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   146ff:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14705:	01 d0                	add    eax,edx
   14707:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   1470e:	84 c0                	test   al,al
   14710:	74 0c                	je     1471e <printAHCICaps+0x4f8>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:328 (discriminator 5)
   14712:	c7 85 d0 fd ff ff f8 	mov    DWORD PTR [ebp-0x230],0x467f8
   14719:	67 04 00 
   1471c:	eb 0a                	jmp    14728 <printAHCICaps+0x502>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:328 (discriminator 6)
   1471e:	c7 85 d0 fd ff ff f7 	mov    DWORD PTR [ebp-0x230],0x467f7
   14725:	67 04 00 
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:331 (discriminator 8)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
   14728:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   1472e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14731:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14737:	01 d0                	add    eax,edx
   14739:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:328 (discriminator 8)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   14740:	84 c0                	test   al,al
   14742:	74 0c                	je     14750 <printAHCICaps+0x52a>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:328 (discriminator 9)
   14744:	c7 85 cc fd ff ff ff 	mov    DWORD PTR [ebp-0x234],0x467ff
   1474b:	67 04 00 
   1474e:	eb 0a                	jmp    1475a <printAHCICaps+0x534>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:328 (discriminator 10)
   14750:	c7 85 cc fd ff ff f7 	mov    DWORD PTR [ebp-0x234],0x467f7
   14757:	67 04 00 
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:330
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
   1475a:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   14760:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14763:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14769:	01 d0                	add    eax,edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:328
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   1476b:	8b 98 5a 02 00 00    	mov    ebx,DWORD PTR [eax+0x25a]
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:329
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
   14771:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   14777:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1477a:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14780:	01 d0                	add    eax,edx
   14782:	8b 88 56 02 00 00    	mov    ecx,DWORD PTR [eax+0x256]
   14788:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   1478e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14791:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14797:	01 d0                	add    eax,edx
   14799:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   1479f:	0f af c1             	imul   eax,ecx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:328
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   147a2:	c1 e8 14             	shr    eax,0x14
   147a5:	57                   	push   edi
   147a6:	56                   	push   esi
   147a7:	ff b5 d4 fd ff ff    	push   DWORD PTR [ebp-0x22c]
   147ad:	ff b5 d0 fd ff ff    	push   DWORD PTR [ebp-0x230]
   147b3:	ff b5 cc fd ff ff    	push   DWORD PTR [ebp-0x234]
   147b9:	53                   	push   ebx
   147ba:	50                   	push   eax
   147bb:	68 04 68 04 00       	push   0x46804
   147c0:	e8 6e 28 01 00       	call   27033 <printk>
   147c5:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:336
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
                    kATADeviceInfo[cnt].ABAR,
                    kATADeviceInfo[cnt].ioPort);
            volatile HBA_PORT* port = (HBA_PORT*) kATADeviceInfo[cnt].ioPort;
   147c8:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   147ce:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   147d1:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   147d7:	01 d0                	add    eax,edx
   147d9:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   147df:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:337
            HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
   147e2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   147e5:	8b 00                	mov    eax,DWORD PTR [eax]
   147e7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:338
            HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   147ea:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   147ed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   147f0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:339
            printk("\t\tCLB=0x%08X, FB=0x%08X\n",port->clb,port->fb);
   147f3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   147f6:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   147f9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   147fc:	8b 00                	mov    eax,DWORD PTR [eax]
   147fe:	83 ec 04             	sub    esp,0x4
   14801:	52                   	push   edx
   14802:	50                   	push   eax
   14803:	68 36 68 04 00       	push   0x46836
   14808:	e8 26 28 01 00       	call   27033 <printk>
   1480d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:340
            printk("\t\tCMDHeader=0x%08X, CMDTable=0x%08X\n", port->clb, cmdheader->ctba);
   14810:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   14813:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14816:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   14819:	8b 00                	mov    eax,DWORD PTR [eax]
   1481b:	83 ec 04             	sub    esp,0x4
   1481e:	52                   	push   edx
   1481f:	50                   	push   eax
   14820:	68 50 68 04 00       	push   0x46850
   14825:	e8 09 28 01 00       	call   27033 <printk>
   1482a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:323 (discriminator 2)
    printk("\tNumber of Ports (NP):\t\t\t\t\t\t%u\n", ahciCaps->NP);
    //printk("Press a key for more ...");
    //waitForKeyboardKey();
    printk("AHCI: SATA Disks:\n");
    char p1[512];
    for (int cnt = 4; cnt < 10; cnt++)
   1482d:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:323 (discriminator 1)
   14831:	83 7d e4 09          	cmp    DWORD PTR [ebp-0x1c],0x9
   14835:	0f 8e bc fd ff ff    	jle    145f7 <printAHCICaps+0x3d1>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:342
            HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
            HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
            printk("\t\tCLB=0x%08X, FB=0x%08X\n",port->clb,port->fb);
            printk("\t\tCMDHeader=0x%08X, CMDTable=0x%08X\n", port->clb, cmdheader->ctba);
        }
}
   1483b:	90                   	nop
   1483c:	8d 65 f4             	lea    esp,[ebp-0xc]
   1483f:	5b                   	pop    ebx
   14840:	5e                   	pop    esi
   14841:	5f                   	pop    edi
   14842:	5d                   	pop    ebp
   14843:	c3                   	ret    

00014844 <port_rebase>:
port_rebase():
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:344

void port_rebase(volatile HBA_PORT *port, int portno, uintptr_t remapBase) {
   14844:	55                   	push   ebp
   14845:	89 e5                	mov    ebp,esp
   14847:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:346
    //each command list is 1k (32k possible per port))
    printd(DEBUG_AHCI, "AHCI: Rebasing port %u (0x%08X) clb/fb from 0x%08X/0x%08X\n\t", portno, port, port->clb, port->fb);
   1484a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1484d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14850:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14853:	8b 00                	mov    eax,DWORD PTR [eax]
   14855:	83 ec 08             	sub    esp,0x8
   14858:	52                   	push   edx
   14859:	50                   	push   eax
   1485a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1485d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   14860:	68 78 68 04 00       	push   0x46878
   14865:	68 00 20 00 00       	push   0x2000
   1486a:	e8 e4 27 01 00       	call   27053 <printd>
   1486f:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:347
    stop_cmd(port); // Stop command engine
   14872:	83 ec 0c             	sub    esp,0xc
   14875:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14878:	e8 eb 01 00 00       	call   14a68 <stop_cmd>
   1487d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:353

    // Command list offset: 1K*portno
    // Command list entry size = 32
    // Command list entry maxim count = 32
    // Command list maxim size = 32*32 = 1K per port
    port->clbu = 0;
   14880:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14883:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:354
    port->clb = (remapBase + (portno<<15) + 0x1000) & 0xFFFFF000;
   1488a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1488d:	c1 e0 0f             	shl    eax,0xf
   14890:	89 c2                	mov    edx,eax
   14892:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   14895:	01 d0                	add    eax,edx
   14897:	05 00 10 00 00       	add    eax,0x1000
   1489c:	25 00 f0 ff ff       	and    eax,0xfffff000
   148a1:	89 c2                	mov    edx,eax
   148a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   148a6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:355
    memset((void*) (port->clb), 0, 1024);
   148a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   148ab:	8b 00                	mov    eax,DWORD PTR [eax]
   148ad:	83 ec 04             	sub    esp,0x4
   148b0:	68 00 04 00 00       	push   0x400
   148b5:	6a 00                	push   0x0
   148b7:	50                   	push   eax
   148b8:	e8 f0 06 01 00       	call   24fad <memset>
   148bd:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:356
    kMapPage(port->clb,port->clb,0x73); //make un-cached
   148c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   148c3:	8b 10                	mov    edx,DWORD PTR [eax]
   148c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   148c8:	8b 00                	mov    eax,DWORD PTR [eax]
   148ca:	83 ec 04             	sub    esp,0x4
   148cd:	6a 73                	push   0x73
   148cf:	52                   	push   edx
   148d0:	50                   	push   eax
   148d1:	e8 61 ce ff ff       	call   11737 <kMapPage>
   148d6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:361
    
    //each FIS is 256 bytes
    // FIS offset: 32K+256*portno
    // FIS entry size = 256 bytes per port
    port->fbu = 0;
   148d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   148dc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:363
//    port->fb = (remapBase + (32 << 10) + (portno << 12) + 0x1000) & 0xFFFFF000;
    port->fb = (port->clb + 0x1000);
   148e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   148e6:	8b 00                	mov    eax,DWORD PTR [eax]
   148e8:	8d 90 00 10 00 00    	lea    edx,[eax+0x1000]
   148ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   148f1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:364
    memset((void*) (port->fb), 0, 256);
   148f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   148f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   148fa:	83 ec 04             	sub    esp,0x4
   148fd:	68 00 01 00 00       	push   0x100
   14902:	6a 00                	push   0x0
   14904:	50                   	push   eax
   14905:	e8 a3 06 01 00       	call   24fad <memset>
   1490a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:365
    kMapPage(port->fb,port->fb,0x73); //make un-cached
   1490d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14910:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14913:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14916:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14919:	83 ec 04             	sub    esp,0x4
   1491c:	6a 73                	push   0x73
   1491e:	52                   	push   edx
   1491f:	50                   	push   eax
   14920:	e8 12 ce ff ff       	call   11737 <kMapPage>
   14925:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:370


    // Command table offset: 40K + 8K*portno
    // Command table size = 256*32 = 8K per port
    HBA_CMD_HEADER *cmdheader = (HBA_CMD_HEADER*) (port->clb);
   14928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1492b:	8b 00                	mov    eax,DWORD PTR [eax]
   1492d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:371
    for (int i = 0; i < 32; i++) {
   14930:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   14937:	eb 79                	jmp    149b2 <port_rebase+0x16e>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:372 (discriminator 3)
        cmdheader[i].prdtl = 8; // 8 prdt entries per command table
   14939:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1493c:	c1 e0 05             	shl    eax,0x5
   1493f:	89 c2                	mov    edx,eax
   14941:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14944:	01 d0                	add    eax,edx
   14946:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:375 (discriminator 3)
        // 256 bytes per command table, 64+16+48+16*8
        // Command table offset: 40K + 8K*portno + cmdheader_index*256
        cmdheader[i].ctba = remapBase + (40 << 10) + (portno << 13) + (i << 8);
   1494c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1494f:	c1 e0 05             	shl    eax,0x5
   14952:	89 c2                	mov    edx,eax
   14954:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14957:	01 d0                	add    eax,edx
   14959:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1495c:	c1 e2 0d             	shl    edx,0xd
   1495f:	89 d1                	mov    ecx,edx
   14961:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   14964:	01 d1                	add    ecx,edx
   14966:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   14969:	c1 e2 08             	shl    edx,0x8
   1496c:	01 ca                	add    edx,ecx
   1496e:	81 c2 00 a0 00 00    	add    edx,0xa000
   14974:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:376 (discriminator 3)
        cmdheader[i].ctbau = 0;
   14977:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1497a:	c1 e0 05             	shl    eax,0x5
   1497d:	89 c2                	mov    edx,eax
   1497f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14982:	01 d0                	add    eax,edx
   14984:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:377 (discriminator 3)
        memset((void*) cmdheader[i].ctba, 0, 256);
   1498b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1498e:	c1 e0 05             	shl    eax,0x5
   14991:	89 c2                	mov    edx,eax
   14993:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14996:	01 d0                	add    eax,edx
   14998:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1499b:	83 ec 04             	sub    esp,0x4
   1499e:	68 00 01 00 00       	push   0x100
   149a3:	6a 00                	push   0x0
   149a5:	50                   	push   eax
   149a6:	e8 02 06 01 00       	call   24fad <memset>
   149ab:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:371 (discriminator 3)


    // Command table offset: 40K + 8K*portno
    // Command table size = 256*32 = 8K per port
    HBA_CMD_HEADER *cmdheader = (HBA_CMD_HEADER*) (port->clb);
    for (int i = 0; i < 32; i++) {
   149ae:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:371 (discriminator 1)
   149b2:	83 7d f4 1f          	cmp    DWORD PTR [ebp-0xc],0x1f
   149b6:	7e 81                	jle    14939 <port_rebase+0xf5>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:379
        // Command table offset: 40K + 8K*portno + cmdheader_index*256
        cmdheader[i].ctba = remapBase + (40 << 10) + (portno << 13) + (i << 8);
        cmdheader[i].ctbau = 0;
        memset((void*) cmdheader[i].ctba, 0, 256);
    }
    printd(DEBUG_AHCI, " to 0x%08X/0x%08X\n", port->clb, port->fb);
   149b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   149bb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   149be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   149c1:	8b 00                	mov    eax,DWORD PTR [eax]
   149c3:	52                   	push   edx
   149c4:	50                   	push   eax
   149c5:	68 b4 68 04 00       	push   0x468b4
   149ca:	68 00 20 00 00       	push   0x2000
   149cf:	e8 7f 26 01 00       	call   27053 <printd>
   149d4:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:380
    start_cmd(port); // Start command engine
   149d7:	83 ec 0c             	sub    esp,0xc
   149da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   149dd:	e8 06 00 00 00       	call   149e8 <start_cmd>
   149e2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:381
}
   149e5:	90                   	nop
   149e6:	c9                   	leave  
   149e7:	c3                   	ret    

000149e8 <start_cmd>:
start_cmd():
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:385

// Start command engine

void start_cmd(volatile HBA_PORT *port) {
   149e8:	55                   	push   ebp
   149e9:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:387
    // Wait until CR (bit15) is cleared
    while (port->cmd.CR);
   149eb:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:387 (discriminator 1)
   149ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   149ef:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   149f2:	c1 e8 0f             	shr    eax,0xf
   149f5:	83 e0 01             	and    eax,0x1
   149f8:	84 c0                	test   al,al
   149fa:	75 f0                	jne    149ec <start_cmd+0x4>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:390

    // Set FRE (bit4) and ST (bit0)
    port->cmd.FRE = 1;
   149fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   149ff:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14a02:	83 ca 10             	or     edx,0x10
   14a05:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:391
    port->cmd.ST = 1;
   14a08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14a0b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14a0e:	83 ca 01             	or     edx,0x1
   14a11:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:392
}
   14a14:	90                   	nop
   14a15:	5d                   	pop    ebp
   14a16:	c3                   	ret    

00014a17 <waitForPortIdle>:
waitForPortIdle():
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:394

void waitForPortIdle(volatile HBA_PORT *port) {
   14a17:	55                   	push   ebp
   14a18:	89 e5                	mov    ebp,esp
   14a1a:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:395
    while (port->cmd.ST | port->cmd.CR | port->cmd.FRE | port->cmd.FR) {
   14a1d:	eb 0d                	jmp    14a2c <waitForPortIdle+0x15>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:396
        waitTicks(20);
   14a1f:	83 ec 0c             	sub    esp,0xc
   14a22:	6a 14                	push   0x14
   14a24:	e8 2e 38 01 00       	call   28257 <waitTicks>
   14a29:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:395
    port->cmd.FRE = 1;
    port->cmd.ST = 1;
}

void waitForPortIdle(volatile HBA_PORT *port) {
    while (port->cmd.ST | port->cmd.CR | port->cmd.FRE | port->cmd.FR) {
   14a2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14a2f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14a32:	83 e0 01             	and    eax,0x1
   14a35:	89 c2                	mov    edx,eax
   14a37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14a3a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14a3d:	c1 e8 0f             	shr    eax,0xf
   14a40:	83 e0 01             	and    eax,0x1
   14a43:	09 c2                	or     edx,eax
   14a45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14a48:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14a4b:	c1 e8 04             	shr    eax,0x4
   14a4e:	83 e0 01             	and    eax,0x1
   14a51:	09 c2                	or     edx,eax
   14a53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14a56:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14a59:	c1 e8 0e             	shr    eax,0xe
   14a5c:	83 e0 01             	and    eax,0x1
   14a5f:	09 d0                	or     eax,edx
   14a61:	84 c0                	test   al,al
   14a63:	75 ba                	jne    14a1f <waitForPortIdle+0x8>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:398
        waitTicks(20);
    }
}
   14a65:	90                   	nop
   14a66:	c9                   	leave  
   14a67:	c3                   	ret    

00014a68 <stop_cmd>:
stop_cmd():
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:402

// Stop command engine

void stop_cmd(volatile volatile HBA_PORT *port) {
   14a68:	55                   	push   ebp
   14a69:	89 e5                	mov    ebp,esp
   14a6b:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:404
    // Clear ST (bit0)
    port->cmd.ST = 0;
   14a6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14a71:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14a74:	83 e2 fe             	and    edx,0xfffffffe
   14a77:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:407
    // Wait until FR (bit14), CR (bit15) are cleared
    while (1) {
        if (!(port->cmd.FR))
   14a7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14a7d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14a80:	c1 e8 0e             	shr    eax,0xe
   14a83:	83 e0 01             	and    eax,0x1
   14a86:	84 c0                	test   al,al
   14a88:	74 1f                	je     14aa9 <stop_cmd+0x41>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:409
            break;
        if (!(port->cmd.CR))
   14a8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14a8d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14a90:	c1 e8 0f             	shr    eax,0xf
   14a93:	83 e0 01             	and    eax,0x1
   14a96:	84 c0                	test   al,al
   14a98:	74 12                	je     14aac <stop_cmd+0x44>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:411
            break;
        waitTicks(20);
   14a9a:	83 ec 0c             	sub    esp,0xc
   14a9d:	6a 14                	push   0x14
   14a9f:	e8 b3 37 01 00       	call   28257 <waitTicks>
   14aa4:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:412
    }
   14aa7:	eb d1                	jmp    14a7a <stop_cmd+0x12>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:408
    // Clear ST (bit0)
    port->cmd.ST = 0;
    // Wait until FR (bit14), CR (bit15) are cleared
    while (1) {
        if (!(port->cmd.FR))
            break;
   14aa9:	90                   	nop
   14aaa:	eb 01                	jmp    14aad <stop_cmd+0x45>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:410
        if (!(port->cmd.CR))
            break;
   14aac:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:415
        waitTicks(20);
    }

    // Clear FRE (bit4)
    port->cmd.FRE = 0;
   14aad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14ab0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14ab3:	83 e2 ef             	and    edx,0xffffffef
   14ab6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:416
}
   14ab9:	90                   	nop
   14aba:	c9                   	leave  
   14abb:	c3                   	ret    

00014abc <ahciIdentify>:
ahciIdentify():
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:418

void ahciIdentify(volatile HBA_PORT* port, int deviceType) {
   14abc:	55                   	push   ebp
   14abd:	89 e5                	mov    ebp,esp
   14abf:	83 ec 28             	sub    esp,0x28
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:419
    printd(DEBUG_AHCI, "AHCI: ahciIdentify, port@0x%08X(%u), 0x%08X\n", port, kATADeviceInfoCount, &port->clb);
   14ac2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   14ac5:	a1 c4 02 a0 00       	mov    eax,ds:0xa002c4
   14aca:	83 ec 0c             	sub    esp,0xc
   14acd:	52                   	push   edx
   14ace:	50                   	push   eax
   14acf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14ad2:	68 c8 68 04 00       	push   0x468c8
   14ad7:	68 00 20 00 00       	push   0x2000
   14adc:	e8 72 25 01 00       	call   27053 <printd>
   14ae1:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:420
    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) port->clb;
   14ae4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14ae7:	8b 00                	mov    eax,DWORD PTR [eax]
   14ae9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:421
    int slot = find_cmdslot(port);
   14aec:	83 ec 0c             	sub    esp,0xc
   14aef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14af2:	e8 66 03 00 00       	call   14e5d <find_cmdslot>
   14af7:	83 c4 10             	add    esp,0x10
   14afa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:422
    if (slot == -1)
   14afd:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   14b01:	0f 84 53 03 00 00    	je     14e5a <ahciIdentify+0x39e>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:424
        return;
    port->ie.AsUlong = 0xFFFFFFFF;
   14b07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14b0a:	c7 40 14 ff ff ff ff 	mov    DWORD PTR [eax+0x14],0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:425
    HBA_CMD_HEADER* cmdheader = cmdhdr + slot;
   14b11:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14b14:	c1 e0 05             	shl    eax,0x5
   14b17:	89 c2                	mov    edx,eax
   14b19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14b1c:	01 d0                	add    eax,edx
   14b1e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:426
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   14b21:	83 ec 04             	sub    esp,0x4
   14b24:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   14b27:	68 d0 61 04 00       	push   0x461d0
   14b2c:	68 00 20 00 00       	push   0x2000
   14b31:	e8 1d 25 01 00       	call   27053 <printd>
   14b36:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:427
    cmdheader->prdtl = 1;
   14b39:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14b3c:	66 c7 40 02 01 00    	mov    WORD PTR [eax+0x2],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:428
    cmdheader->cfl = 5; //sizeof (FIS_REG_H2D) / sizeof (uint32_t);
   14b42:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14b45:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14b48:	83 e2 e0             	and    edx,0xffffffe0
   14b4b:	83 ca 05             	or     edx,0x5
   14b4e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:429
    cmdheader->w = 0;
   14b50:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14b53:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14b56:	83 e2 bf             	and    edx,0xffffffbf
   14b59:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:430
    cmdheader->a = 0;
   14b5b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14b5e:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14b61:	83 e2 df             	and    edx,0xffffffdf
   14b64:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:431
    cmdheader->c = 0;
   14b66:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14b69:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   14b6d:	83 e2 fb             	and    edx,0xfffffffb
   14b70:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:432
    cmdheader->p = 0;
   14b73:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14b76:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14b79:	83 e2 7f             	and    edx,0x7f
   14b7c:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:433
    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   14b7e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14b81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14b84:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:435
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
   14b87:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14b8a:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:434
    cmdheader->w = 0;
    cmdheader->a = 0;
    cmdheader->c = 0;
    cmdheader->p = 0;
    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
   14b8e:	0f b7 c0             	movzx  eax,ax
   14b91:	83 c0 08             	add    eax,0x8
   14b94:	c1 e0 04             	shl    eax,0x4
   14b97:	83 ec 04             	sub    esp,0x4
   14b9a:	50                   	push   eax
   14b9b:	6a 00                	push   0x0
   14b9d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   14ba0:	e8 08 04 01 00       	call   24fad <memset>
   14ba5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:436
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   14ba8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14bab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14bae:	50                   	push   eax
   14baf:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   14bb2:	68 e8 61 04 00       	push   0x461e8
   14bb7:	68 00 20 00 00       	push   0x2000
   14bbc:	e8 92 24 01 00       	call   27053 <printd>
   14bc1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:437
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
   14bc4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14bc7:	c7 80 80 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x6f6000
   14bce:	60 6f 00 
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:438
    cmdtbl->prdt_entry[0].dbc = 0x1ff;
   14bd1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14bd4:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [eax+0x8c]
   14bda:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   14be0:	81 ca ff 01 00 00    	or     edx,0x1ff
   14be6:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:439
    cmdtbl->prdt_entry[0].i = 1;
   14bec:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14bef:	0f b6 90 8f 00 00 00 	movzx  edx,BYTE PTR [eax+0x8f]
   14bf6:	83 ca 80             	or     edx,0xffffff80
   14bf9:	88 90 8f 00 00 00    	mov    BYTE PTR [eax+0x8f],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:441

    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   14bff:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14c02:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:442
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   14c05:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c08:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:443
    cmdfis->c = 1; // Command
   14c0b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c0e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   14c12:	83 ca 80             	or     edx,0xffffff80
   14c15:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:444
    if (deviceType == AHCI_DEV_SATAPI)
   14c18:	83 7d 0c 04          	cmp    DWORD PTR [ebp+0xc],0x4
   14c1c:	75 09                	jne    14c27 <ahciIdentify+0x16b>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:445
        cmdfis->command = ATA_IDENTIFY_CDROM_COMMAND;
   14c1e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c21:	c6 40 02 a1          	mov    BYTE PTR [eax+0x2],0xa1
   14c25:	eb 07                	jmp    14c2e <ahciIdentify+0x172>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:447
    else
        cmdfis->command = ATA_IDENTIFY_COMMAND;
   14c27:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c2a:	c6 40 02 ec          	mov    BYTE PTR [eax+0x2],0xec
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:448
    cmdfis->lba0 = 0;
   14c2e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c31:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:449
    cmdfis->lba1 = 0;
   14c35:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c38:	c6 40 05 00          	mov    BYTE PTR [eax+0x5],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:450
    cmdfis->lba2 = 0;
   14c3c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c3f:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:451
    cmdfis->lba3 = 0;
   14c43:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c46:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:452
    cmdfis->lba4 = 0;
   14c4a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c4d:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:453
    cmdfis->lba5 = 0;
   14c51:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c54:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:454
    cmdfis->lba5 = 0;
   14c58:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c5b:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:455
    cmdfis->pmport = 0;
   14c5f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c62:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   14c66:	83 e2 f0             	and    edx,0xfffffff0
   14c69:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:456
    cmdfis->device = 0;
   14c6c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c6f:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:457
    cmdfis->countl = 1;
   14c73:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c76:	c6 40 0c 01          	mov    BYTE PTR [eax+0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:458
    cmdfis->counth = 0;
   14c7a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c7d:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:459
    int lCmdVal = AhciIssueCmd(port, slot);
   14c81:	83 ec 08             	sub    esp,0x8
   14c84:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14c87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14c8a:	e8 fd ea ff ff       	call   1378c <AhciIssueCmd>
   14c8f:	83 c4 10             	add    esp,0x10
   14c92:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:460
    if (!lCmdVal) {
   14c95:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   14c99:	75 18                	jne    14cb3 <ahciIdentify+0x1f7>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:461
        printk("AHCI: ***Error identifying device (%u)***\n",lCmdVal);
   14c9b:	83 ec 08             	sub    esp,0x8
   14c9e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   14ca1:	68 f8 68 04 00       	push   0x468f8
   14ca6:	e8 88 23 01 00       	call   27033 <printk>
   14cab:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:462
        return;
   14cae:	e9 a8 01 00 00       	jmp    14e5b <ahciIdentify+0x39f>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:464
    }
    kATADeviceInfo[kATADeviceInfoCount].ATADeviceAvailable = true;
   14cb3:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   14cb9:	a1 c4 02 a0 00       	mov    eax,ds:0xa002c4
   14cbe:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14cc4:	01 d0                	add    eax,edx
   14cc6:	c6 80 51 02 00 00 01 	mov    BYTE PTR [eax+0x251],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:465
    kATADeviceInfo[kATADeviceInfoCount].bus = SATA;
   14ccd:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   14cd3:	a1 c4 02 a0 00       	mov    eax,ds:0xa002c4
   14cd8:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14cde:	01 d0                	add    eax,edx
   14ce0:	c7 80 61 02 00 00 02 	mov    DWORD PTR [eax+0x261],0x2
   14ce7:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:466
    kATADeviceInfo[kATADeviceInfoCount].driveNo = kATADeviceInfoCount;
   14cea:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   14cf0:	a1 c4 02 a0 00       	mov    eax,ds:0xa002c4
   14cf5:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14cfb:	01 d0                	add    eax,edx
   14cfd:	8b 15 c4 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c4
   14d03:	89 90 65 02 00 00    	mov    DWORD PTR [eax+0x265],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:467
    kATADeviceInfo[kATADeviceInfoCount].ioPort = (uintptr_t) port;
   14d09:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   14d0f:	a1 c4 02 a0 00       	mov    eax,ds:0xa002c4
   14d14:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14d1a:	01 c2                	add    edx,eax
   14d1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d1f:	89 82 69 02 00 00    	mov    DWORD PTR [edx+0x269],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:468
    kATADeviceInfo[kATADeviceInfoCount].irqNum = 0;
   14d25:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   14d2b:	a1 c4 02 a0 00       	mov    eax,ds:0xa002c4
   14d30:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14d36:	01 d0                	add    eax,edx
   14d38:	c6 80 6d 02 00 00 00 	mov    BYTE PTR [eax+0x26d],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:469
    kATADeviceInfo[kATADeviceInfoCount].driveHeadPortDesignation = 0x0;
   14d3f:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   14d45:	a1 c4 02 a0 00       	mov    eax,ds:0xa002c4
   14d4a:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14d50:	01 d0                	add    eax,edx
   14d52:	c6 80 6e 02 00 00 00 	mov    BYTE PTR [eax+0x26e],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:470
    kATADeviceInfo[kATADeviceInfoCount].queryATAData = false;
   14d59:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   14d5f:	a1 c4 02 a0 00       	mov    eax,ds:0xa002c4
   14d64:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14d6a:	01 d0                	add    eax,edx
   14d6c:	c6 80 50 02 00 00 00 	mov    BYTE PTR [eax+0x250],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:471
    if (deviceType == AHCI_DEV_SATAPI)
   14d73:	83 7d 0c 04          	cmp    DWORD PTR [ebp+0xc],0x4
   14d77:	75 1f                	jne    14d98 <ahciIdentify+0x2dc>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:472
        kATADeviceInfo[kATADeviceInfoCount].ATADeviceType=ATA_DEVICE_TYPE_SATA_CD;
   14d79:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   14d7f:	a1 c4 02 a0 00       	mov    eax,ds:0xa002c4
   14d84:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14d8a:	01 d0                	add    eax,edx
   14d8c:	c7 80 52 02 00 00 03 	mov    DWORD PTR [eax+0x252],0x3
   14d93:	00 00 00 
   14d96:	eb 1d                	jmp    14db5 <ahciIdentify+0x2f9>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:474
    else
        kATADeviceInfo[kATADeviceInfoCount].ATADeviceType=ATA_DEVICE_TYPE_SATA_HD;
   14d98:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   14d9e:	a1 c4 02 a0 00       	mov    eax,ds:0xa002c4
   14da3:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14da9:	01 d0                	add    eax,edx
   14dab:	c7 80 52 02 00 00 02 	mov    DWORD PTR [eax+0x252],0x2
   14db2:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:475
    kATADeviceInfo[kATADeviceInfoCount].ABAR=ahciABAR;
   14db5:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   14dbb:	a1 c4 02 a0 00       	mov    eax,ds:0xa002c4
   14dc0:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14dc6:	01 c2                	add    edx,eax
   14dc8:	a1 54 04 a0 00       	mov    eax,ds:0xa00454
   14dcd:	89 82 6f 02 00 00    	mov    DWORD PTR [edx+0x26f],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:476
    memcpy(kATADeviceInfo[kATADeviceInfoCount].ATAIdentifyData, (void*) AHCI_DISK_BUFFER_ADDRESS, 512);
   14dd3:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   14dd9:	a1 c4 02 a0 00       	mov    eax,ds:0xa002c4
   14dde:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14de4:	01 d0                	add    eax,edx
   14de6:	83 ec 04             	sub    esp,0x4
   14de9:	68 00 02 00 00       	push   0x200
   14dee:	68 00 60 6f 00       	push   0x6f6000
   14df3:	50                   	push   eax
   14df4:	e8 a7 0b 01 00       	call   259a0 <memcpy>
   14df9:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:477
    ataIdentify(&kATADeviceInfo[kATADeviceInfoCount++]);
   14dfc:	8b 0d c0 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002c0
   14e02:	a1 c4 02 a0 00       	mov    eax,ds:0xa002c4
   14e07:	8d 50 01             	lea    edx,[eax+0x1]
   14e0a:	89 15 c4 02 a0 00    	mov    DWORD PTR ds:0xa002c4,edx
   14e10:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14e16:	01 c8                	add    eax,ecx
   14e18:	83 ec 0c             	sub    esp,0xc
   14e1b:	50                   	push   eax
   14e1c:	e8 6d d6 00 00       	call   2248e <ataIdentify>
   14e21:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:478
    printd(DEBUG_AHCI, "AHCI: SATA device found, name=%s\n", kATADeviceInfo[kATADeviceInfoCount - 1].ATADeviceModel);
   14e24:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   14e29:	8b 15 c4 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c4
   14e2f:	69 d2 73 02 00 00    	imul   edx,edx,0x273
   14e35:	81 ea 73 02 00 00    	sub    edx,0x273
   14e3b:	01 d0                	add    eax,edx
   14e3d:	05 00 02 00 00       	add    eax,0x200
   14e42:	83 ec 04             	sub    esp,0x4
   14e45:	50                   	push   eax
   14e46:	68 24 69 04 00       	push   0x46924
   14e4b:	68 00 20 00 00       	push   0x2000
   14e50:	e8 fe 21 01 00       	call   27053 <printd>
   14e55:	83 c4 10             	add    esp,0x10
   14e58:	eb 01                	jmp    14e5b <ahciIdentify+0x39f>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:423
void ahciIdentify(volatile HBA_PORT* port, int deviceType) {
    printd(DEBUG_AHCI, "AHCI: ahciIdentify, port@0x%08X(%u), 0x%08X\n", port, kATADeviceInfoCount, &port->clb);
    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) port->clb;
    int slot = find_cmdslot(port);
    if (slot == -1)
        return;
   14e5a:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:479
        kATADeviceInfo[kATADeviceInfoCount].ATADeviceType=ATA_DEVICE_TYPE_SATA_HD;
    kATADeviceInfo[kATADeviceInfoCount].ABAR=ahciABAR;
    memcpy(kATADeviceInfo[kATADeviceInfoCount].ATAIdentifyData, (void*) AHCI_DISK_BUFFER_ADDRESS, 512);
    ataIdentify(&kATADeviceInfo[kATADeviceInfoCount++]);
    printd(DEBUG_AHCI, "AHCI: SATA device found, name=%s\n", kATADeviceInfo[kATADeviceInfoCount - 1].ATADeviceModel);
}
   14e5b:	c9                   	leave  
   14e5c:	c3                   	ret    

00014e5d <find_cmdslot>:
find_cmdslot():
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:482
// Find a free command list slot

int find_cmdslot(volatile HBA_PORT *port) {
   14e5d:	55                   	push   ebp
   14e5e:	89 e5                	mov    ebp,esp
   14e60:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:483
    printd(DEBUG_AHCI, "AHCI: find_cmdslot - finding a slot to use to execute a command\n");
   14e63:	83 ec 08             	sub    esp,0x8
   14e66:	68 48 69 04 00       	push   0x46948
   14e6b:	68 00 20 00 00       	push   0x2000
   14e70:	e8 de 21 01 00       	call   27053 <printd>
   14e75:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:487
    // An empty command slot has its respective bit cleared to �0� in both the PxCI and PxSACT registers.
    // If not set in SACT and CI, the slot is free // Checked
    
    uint32_t slots = (/*port->sact | */port->ci);
   14e78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14e7b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   14e7e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:488
    int num_of_slots = ahciABAR->cap.NCS;
   14e81:	a1 54 04 a0 00       	mov    eax,ds:0xa00454
   14e86:	8b 00                	mov    eax,DWORD PTR [eax]
   14e88:	c1 e8 08             	shr    eax,0x8
   14e8b:	83 e0 1f             	and    eax,0x1f
   14e8e:	0f b6 c0             	movzx  eax,al
   14e91:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:489
    printd(DEBUG_AHCI,"ahciABAR = %08X, Total slots available: %d\n",ahciABAR, ahciABAR->cap.NCS);
   14e94:	a1 54 04 a0 00       	mov    eax,ds:0xa00454
   14e99:	8b 00                	mov    eax,DWORD PTR [eax]
   14e9b:	c1 e8 08             	shr    eax,0x8
   14e9e:	83 e0 1f             	and    eax,0x1f
   14ea1:	0f b6 d0             	movzx  edx,al
   14ea4:	a1 54 04 a0 00       	mov    eax,ds:0xa00454
   14ea9:	52                   	push   edx
   14eaa:	50                   	push   eax
   14eab:	68 8c 69 04 00       	push   0x4698c
   14eb0:	68 00 20 00 00       	push   0x2000
   14eb5:	e8 99 21 01 00       	call   27053 <printd>
   14eba:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:491
    int i;
    for (i = 0; i < num_of_slots; i++) {
   14ebd:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   14ec4:	eb 46                	jmp    14f0c <find_cmdslot+0xaf>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:493

        if ((slots & 1) == 0) {
   14ec6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14ec9:	83 e0 01             	and    eax,0x1
   14ecc:	85 c0                	test   eax,eax
   14ece:	75 1d                	jne    14eed <find_cmdslot+0x90>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:494
            printd(DEBUG_AHCI, "AHCI: [command slot is : %d]\n", i);
   14ed0:	83 ec 04             	sub    esp,0x4
   14ed3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14ed6:	68 b8 69 04 00       	push   0x469b8
   14edb:	68 00 20 00 00       	push   0x2000
   14ee0:	e8 6e 21 01 00       	call   27053 <printd>
   14ee5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:495
            return i;
   14ee8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14eeb:	eb 44                	jmp    14f31 <find_cmdslot+0xd4>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:498 (discriminator 2)

        }
        printd(DEBUG_AHCI, "Slot %u is busy (0x%08X)\n", i,slots);
   14eed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   14ef0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14ef3:	68 d6 69 04 00       	push   0x469d6
   14ef8:	68 00 20 00 00       	push   0x2000
   14efd:	e8 51 21 01 00       	call   27053 <printd>
   14f02:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:499 (discriminator 2)
        slots >>= 1;
   14f05:	d1 6d f4             	shr    DWORD PTR [ebp-0xc],1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:491 (discriminator 2)
    
    uint32_t slots = (/*port->sact | */port->ci);
    int num_of_slots = ahciABAR->cap.NCS;
    printd(DEBUG_AHCI,"ahciABAR = %08X, Total slots available: %d\n",ahciABAR, ahciABAR->cap.NCS);
    int i;
    for (i = 0; i < num_of_slots; i++) {
   14f08:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:491 (discriminator 1)
   14f0c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14f0f:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   14f12:	7c b2                	jl     14ec6 <find_cmdslot+0x69>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:501

        }
        printd(DEBUG_AHCI, "Slot %u is busy (0x%08X)\n", i,slots);
        slots >>= 1;
    }
    printd(DEBUG_AHCI, "AHCI: Cannot find free command list entry, count=%u, slots=0x%08X\n", num_of_slots, slots);
   14f14:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   14f17:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   14f1a:	68 f0 69 04 00       	push   0x469f0
   14f1f:	68 00 20 00 00       	push   0x2000
   14f24:	e8 2a 21 01 00       	call   27053 <printd>
   14f29:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:502
    return -1;
   14f2c:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:503
}
   14f31:	c9                   	leave  
   14f32:	c3                   	ret    

00014f33 <ahciSetCurrentDisk>:
ahciSetCurrentDisk():
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:508

#define ATA_DEV_BUSY 0x80
#define ATA_DEV_DRQ 0x08

void ahciSetCurrentDisk(volatile HBA_PORT* port) {
   14f33:	55                   	push   ebp
   14f34:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:509
    kAHCICurrentDisk = port;
   14f36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14f39:	a3 10 04 a0 00       	mov    ds:0xa00410,eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:510
}
   14f3e:	90                   	nop
   14f3f:	5d                   	pop    ebp
   14f40:	c3                   	ret    

00014f41 <ahciSetCurrentPart>:
ahciSetCurrentPart():
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:513

void ahciSetCurrentPart(partEntry_t part) 
{
   14f41:	55                   	push   ebp
   14f42:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:514
    kAHCICurrentPart = part;
   14f44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14f47:	a3 14 04 a0 00       	mov    ds:0xa00414,eax
   14f4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   14f4f:	a3 18 04 a0 00       	mov    ds:0xa00418,eax
   14f54:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   14f57:	a3 1c 04 a0 00       	mov    ds:0xa0041c,eax
   14f5c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   14f5f:	a3 20 04 a0 00       	mov    ds:0xa00420,eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:515
}
   14f64:	90                   	nop
   14f65:	5d                   	pop    ebp
   14f66:	c3                   	ret    

00014f67 <ahciRead>:
ahciRead():
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:517

int ahciRead(volatile HBA_PORT* port, int sector, uint8_t* buffer, int sector_count) {
   14f67:	55                   	push   ebp
   14f68:	89 e5                	mov    ebp,esp
   14f6a:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:518
    ahciSetCurrentDisk(port);
   14f6d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14f70:	e8 be ff ff ff       	call   14f33 <ahciSetCurrentDisk>
   14f75:	83 c4 04             	add    esp,0x4
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:519
    if (ahciBlockingRead28(sector, buffer, sector_count))
   14f78:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   14f7b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   14f7e:	83 ec 04             	sub    esp,0x4
   14f81:	52                   	push   edx
   14f82:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   14f85:	50                   	push   eax
   14f86:	e8 13 00 00 00       	call   14f9e <ahciBlockingRead28>
   14f8b:	83 c4 10             	add    esp,0x10
   14f8e:	85 c0                	test   eax,eax
   14f90:	74 05                	je     14f97 <ahciRead+0x30>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:520
        return sector_count;
   14f92:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   14f95:	eb 05                	jmp    14f9c <ahciRead+0x35>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:522
    else
        return 0;
   14f97:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:523
}
   14f9c:	c9                   	leave  
   14f9d:	c3                   	ret    

00014f9e <ahciBlockingRead28>:
ahciBlockingRead28():
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:526

///Read the current disk *partition* 
int ahciBlockingRead28(uint32_t sector, uint8_t *buffer, uint32_t sector_count) {
   14f9e:	55                   	push   ebp
   14f9f:	89 e5                	mov    ebp,esp
   14fa1:	83 ec 38             	sub    esp,0x38
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:527
    int prdCntr = 0;
   14fa4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:530

    //CLR 06/07/2016 - Must add partition start sector
    sector+=kAHCICurrentPart.partStartSector;
   14fab:	a1 14 04 a0 00       	mov    eax,ds:0xa00414
   14fb0:	01 45 08             	add    DWORD PTR [ebp+0x8],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:532
    
    memset(buffer,0,sector_count*512);
   14fb3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   14fb6:	c1 e0 09             	shl    eax,0x9
   14fb9:	83 ec 04             	sub    esp,0x4
   14fbc:	50                   	push   eax
   14fbd:	6a 00                	push   0x0
   14fbf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   14fc2:	e8 e6 ff 00 00       	call   24fad <memset>
   14fc7:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:534
    
    printd(DEBUG_AHCI, "AHCI: read on port=0x%08X,sector=0x%08X,buffer=0x%08X,sector_count=%u\n", kAHCICurrentDisk,sector,buffer,sector_count);
   14fca:	a1 10 04 a0 00       	mov    eax,ds:0xa00410
   14fcf:	83 ec 08             	sub    esp,0x8
   14fd2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   14fd5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   14fd8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14fdb:	50                   	push   eax
   14fdc:	68 34 6a 04 00       	push   0x46a34
   14fe1:	68 00 20 00 00       	push   0x2000
   14fe6:	e8 68 20 01 00       	call   27053 <printd>
   14feb:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:536

    kAHCICurrentDisk->pxis.AsUlong = (uint32_t) - 1; // Clear pending interrupt bits
   14fee:	a1 10 04 a0 00       	mov    eax,ds:0xa00410
   14ff3:	c7 40 10 ff ff ff ff 	mov    DWORD PTR [eax+0x10],0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:537
    int spin = 0; // Spin lock timeout counter
   14ffa:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:539

    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) kAHCICurrentDisk->clb;
   15001:	a1 10 04 a0 00       	mov    eax,ds:0xa00410
   15006:	8b 00                	mov    eax,DWORD PTR [eax]
   15008:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:540
    int slot = find_cmdslot(kAHCICurrentDisk);
   1500b:	a1 10 04 a0 00       	mov    eax,ds:0xa00410
   15010:	83 ec 0c             	sub    esp,0xc
   15013:	50                   	push   eax
   15014:	e8 44 fe ff ff       	call   14e5d <find_cmdslot>
   15019:	83 c4 10             	add    esp,0x10
   1501c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:541
    if (slot == -1)
   1501f:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   15023:	75 0a                	jne    1502f <ahciBlockingRead28+0x91>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:542
        return false;
   15025:	b8 00 00 00 00       	mov    eax,0x0
   1502a:	e9 41 02 00 00       	jmp    15270 <ahciBlockingRead28+0x2d2>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:543
    HBA_CMD_HEADER* cmdheader = cmdhdr + slot;
   1502f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   15032:	c1 e0 05             	shl    eax,0x5
   15035:	89 c2                	mov    edx,eax
   15037:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1503a:	01 d0                	add    eax,edx
   1503c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:544
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   1503f:	83 ec 04             	sub    esp,0x4
   15042:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   15045:	68 d0 61 04 00       	push   0x461d0
   1504a:	68 00 20 00 00       	push   0x2000
   1504f:	e8 ff 1f 01 00       	call   27053 <printd>
   15054:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:545
    cmdheader->prdtl = (uint16_t) ((sector_count - 1) >> 4) + 1; // PRDT entries count
   15057:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1505a:	83 e8 01             	sub    eax,0x1
   1505d:	c1 e8 04             	shr    eax,0x4
   15060:	8d 50 01             	lea    edx,[eax+0x1]
   15063:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   15066:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:547

    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) (cmdheader->ctba);
   1506a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1506d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   15070:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:549
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
   15073:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   15076:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:548
    HBA_CMD_HEADER* cmdheader = cmdhdr + slot;
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
    cmdheader->prdtl = (uint16_t) ((sector_count - 1) >> 4) + 1; // PRDT entries count

    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) (cmdheader->ctba);
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
   1507a:	0f b7 c0             	movzx  eax,ax
   1507d:	83 c0 08             	add    eax,0x8
   15080:	c1 e0 04             	shl    eax,0x4
   15083:	83 ec 04             	sub    esp,0x4
   15086:	50                   	push   eax
   15087:	6a 00                	push   0x0
   15089:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   1508c:	e8 1c ff 00 00       	call   24fad <memset>
   15091:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:550
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: read - cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   15094:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   15097:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1509a:	50                   	push   eax
   1509b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   1509e:	68 7c 6a 04 00       	push   0x46a7c
   150a3:	68 00 20 00 00       	push   0x2000
   150a8:	e8 a6 1f 01 00       	call   27053 <printd>
   150ad:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:553

    // 8K bytes (16 sectors) per PRDT
    for (int i = 0; i < cmdheader->prdtl - 1; i++) {
   150b0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   150b7:	eb 5b                	jmp    15114 <ahciBlockingRead28+0x176>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:554 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].dba = (uint32_t) buffer;
   150b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   150bc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   150bf:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   150c2:	83 c1 08             	add    ecx,0x8
   150c5:	c1 e1 04             	shl    ecx,0x4
   150c8:	01 ca                	add    edx,ecx
   150ca:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:555 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].dbc = 8 * 1024; // 8K bytes
   150cc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   150cf:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   150d2:	83 c2 08             	add    edx,0x8
   150d5:	c1 e2 04             	shl    edx,0x4
   150d8:	01 d0                	add    eax,edx
   150da:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   150dd:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   150e3:	80 ce 20             	or     dh,0x20
   150e6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:556 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].i = 1;
   150e9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   150ec:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   150ef:	83 c2 08             	add    edx,0x8
   150f2:	c1 e2 04             	shl    edx,0x4
   150f5:	01 d0                	add    eax,edx
   150f7:	0f b6 50 0f          	movzx  edx,BYTE PTR [eax+0xf]
   150fb:	83 ca 80             	or     edx,0xffffff80
   150fe:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:557 (discriminator 3)
        buffer += 4 * 1024; // 4K words
   15101:	81 45 0c 00 10 00 00 	add    DWORD PTR [ebp+0xc],0x1000
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:558 (discriminator 3)
        sector_count -= 16; // 16 sectors
   15108:	83 6d 10 10          	sub    DWORD PTR [ebp+0x10],0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:559 (discriminator 3)
        prdCntr++;
   1510c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:553 (discriminator 3)
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: read - cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);

    // 8K bytes (16 sectors) per PRDT
    for (int i = 0; i < cmdheader->prdtl - 1; i++) {
   15110:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:553 (discriminator 1)
   15114:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   15117:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1511b:	0f b7 c0             	movzx  eax,ax
   1511e:	83 e8 01             	sub    eax,0x1
   15121:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   15124:	7f 93                	jg     150b9 <ahciBlockingRead28+0x11b>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:562
        buffer += 4 * 1024; // 4K words
        sector_count -= 16; // 16 sectors
        prdCntr++;
    }
    // Last entry
    cmdtbl->prdt_entry[prdCntr].dba = (uint32_t) buffer;
   15126:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15129:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   1512c:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1512f:	83 c1 08             	add    ecx,0x8
   15132:	c1 e1 04             	shl    ecx,0x4
   15135:	01 ca                	add    edx,ecx
   15137:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:563
    cmdtbl->prdt_entry[prdCntr].dbc = sector_count << 9; // 512 bytes per sector
   15139:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1513c:	c1 e0 09             	shl    eax,0x9
   1513f:	25 ff ff 3f 00       	and    eax,0x3fffff
   15144:	89 c1                	mov    ecx,eax
   15146:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   15149:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1514c:	83 c2 08             	add    edx,0x8
   1514f:	c1 e2 04             	shl    edx,0x4
   15152:	01 d0                	add    eax,edx
   15154:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
   1515a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1515d:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   15163:	09 ca                	or     edx,ecx
   15165:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:564
    cmdtbl->prdt_entry[prdCntr].i = 1;
   15168:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1516b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1516e:	83 c2 08             	add    edx,0x8
   15171:	c1 e2 04             	shl    edx,0x4
   15174:	01 d0                	add    eax,edx
   15176:	0f b6 50 0f          	movzx  edx,BYTE PTR [eax+0xf]
   1517a:	83 ca 80             	or     edx,0xffffff80
   1517d:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:567

    // Setup command
    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   15180:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   15183:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:569

    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   15186:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15189:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:570
    cmdfis->c = 1; // Command
   1518c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1518f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   15193:	83 ca 80             	or     edx,0xffffff80
   15196:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:571
    cmdfis->command = ATA_CMD_READ_DMA_EX;
   15199:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1519c:	c6 40 02 25          	mov    BYTE PTR [eax+0x2],0x25
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:572
    cmdfis->lba0 = (uint8_t) sector;
   151a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   151a3:	89 c2                	mov    edx,eax
   151a5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   151a8:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:573
    cmdfis->lba1 = (uint8_t) (sector >> 8);
   151ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   151ae:	c1 e8 08             	shr    eax,0x8
   151b1:	89 c2                	mov    edx,eax
   151b3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   151b6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:574
    cmdfis->lba2 = (uint8_t) (sector >> 16);
   151b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   151bc:	c1 e8 10             	shr    eax,0x10
   151bf:	89 c2                	mov    edx,eax
   151c1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   151c4:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:575
    cmdfis->device = 1 << 6; // LBA mode
   151c7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   151ca:	c6 40 07 40          	mov    BYTE PTR [eax+0x7],0x40
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:577

    cmdfis->lba3 = (uint8_t) (sector >> 24);
   151ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   151d1:	c1 e8 18             	shr    eax,0x18
   151d4:	89 c2                	mov    edx,eax
   151d6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   151d9:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:578
    cmdfis->lba4 = (uint8_t) 0;
   151dc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   151df:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:579
    cmdfis->lba5 = (uint8_t) 0;
   151e3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   151e6:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:581

    cmdfis->countl = LOBYTE((uint16_t) sector_count);
   151ea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   151ed:	89 c2                	mov    edx,eax
   151ef:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   151f2:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:582
    cmdfis->counth = HIBYTE((uint16_t) sector_count);
   151f5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   151f8:	0f b7 c0             	movzx  eax,ax
   151fb:	c1 f8 08             	sar    eax,0x8
   151fe:	89 c2                	mov    edx,eax
   15200:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15203:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:584

    int lCMdVal = AhciIssueCmd(kAHCICurrentDisk, slot);
   15206:	a1 10 04 a0 00       	mov    eax,ds:0xa00410
   1520b:	83 ec 08             	sub    esp,0x8
   1520e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   15211:	50                   	push   eax
   15212:	e8 75 e5 ff ff       	call   1378c <AhciIssueCmd>
   15217:	83 c4 10             	add    esp,0x10
   1521a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:585
    if (!lCMdVal) {
   1521d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
   15221:	75 1c                	jne    1523f <ahciBlockingRead28+0x2a1>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:586
        printd(DEBUG_AHCI, "AHCI: ***Error reading from disk***\n");
   15223:	83 ec 08             	sub    esp,0x8
   15226:	68 a8 6a 04 00       	push   0x46aa8
   1522b:	68 00 20 00 00       	push   0x2000
   15230:	e8 1e 1e 01 00       	call   27053 <printd>
   15235:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:587
        return -1;
   15238:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1523d:	eb 31                	jmp    15270 <ahciBlockingRead28+0x2d2>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:591
    }

    // Check again
    if (kAHCICurrentDisk->pxis.TFES) {
   1523f:	a1 10 04 a0 00       	mov    eax,ds:0xa00410
   15244:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   15247:	c1 e8 1e             	shr    eax,0x1e
   1524a:	83 e0 01             	and    eax,0x1
   1524d:	84 c0                	test   al,al
   1524f:	74 1c                	je     1526d <ahciBlockingRead28+0x2cf>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:592
        printd(DEBUG_AHCI, "AHCI: Read disk error\n");
   15251:	83 ec 08             	sub    esp,0x8
   15254:	68 8f 61 04 00       	push   0x4618f
   15259:	68 00 20 00 00       	push   0x2000
   1525e:	e8 f0 1d 01 00       	call   27053 <printd>
   15263:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:593
        return false;
   15266:	b8 00 00 00 00       	mov    eax,0x0
   1526b:	eb 03                	jmp    15270 <ahciBlockingRead28+0x2d2>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:596
    }

    return sector_count;
   1526d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:597
}
   15270:	c9                   	leave  
   15271:	c3                   	ret    

00015272 <ahciBlockingWrite28>:
ahciBlockingWrite28():
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:599

int ahciBlockingWrite28(/*unsigned drive, */uint32_t sector, uint8_t *buffer, uint32_t sector_count) {
   15272:	55                   	push   ebp
   15273:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:600
    return 0;
   15275:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:601
}
   1527a:	5d                   	pop    ebp
   1527b:	c3                   	ret    

0001527c <ahciInit>:
ahciInit():
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:603

bool ahciInit() {
   1527c:	55                   	push   ebp
   1527d:	89 e5                	mov    ebp,esp
   1527f:	56                   	push   esi
   15280:	53                   	push   ebx
   15281:	81 ec b0 00 00 00    	sub    esp,0xb0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:604
    kATADeviceInfoCount = 4;
   15287:	c7 05 c4 02 a0 00 04 	mov    DWORD PTR ds:0xa002c4,0x4
   1528e:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:605
    bool ahciDeviceFound = false;
   15291:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:608
    char buffer[150];

    memset(buffer, 0, 150);
   15295:	83 ec 04             	sub    esp,0x4
   15298:	68 96 00 00 00       	push   0x96
   1529d:	6a 00                	push   0x0
   1529f:	8d 85 56 ff ff ff    	lea    eax,[ebp-0xaa]
   152a5:	50                   	push   eax
   152a6:	e8 02 fd 00 00       	call   24fad <memset>
   152ab:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:610

    if (!kPCIDeviceCount) {
   152ae:	0f b6 05 ac 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002ac
   152b5:	84 c0                	test   al,al
   152b7:	75 1f                	jne    152d8 <ahciInit+0x5c>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:611
        printd(DEBUG_AHCI, "AHCI: PCI not initialized, cannot initialize AHCI.");
   152b9:	83 ec 08             	sub    esp,0x8
   152bc:	68 d0 6a 04 00       	push   0x46ad0
   152c1:	68 00 20 00 00       	push   0x2000
   152c6:	e8 88 1d 01 00       	call   27053 <printd>
   152cb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:612
        return false;
   152ce:	b8 00 00 00 00       	mov    eax,0x0
   152d3:	e9 b1 04 00 00       	jmp    15789 <ahciInit+0x50d>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:615
    }

    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   152d8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   152df:	e9 35 02 00 00       	jmp    15519 <ahciInit+0x29d>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:616
        if (kPCIDeviceHeaders[cnt].class == 1 && kPCIDeviceHeaders[cnt].subClass == 6) 
   152e4:	8b 0d b4 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002b4
   152ea:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   152ed:	89 d0                	mov    eax,edx
   152ef:	c1 e0 02             	shl    eax,0x2
   152f2:	01 d0                	add    eax,edx
   152f4:	c1 e0 04             	shl    eax,0x4
   152f7:	01 c8                	add    eax,ecx
   152f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   152fc:	83 f8 01             	cmp    eax,0x1
   152ff:	0f 85 10 02 00 00    	jne    15515 <ahciInit+0x299>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:616 (discriminator 1)
   15305:	8b 0d b4 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002b4
   1530b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1530e:	89 d0                	mov    eax,edx
   15310:	c1 e0 02             	shl    eax,0x2
   15313:	01 d0                	add    eax,edx
   15315:	c1 e0 04             	shl    eax,0x4
   15318:	01 c8                	add    eax,ecx
   1531a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   1531d:	83 f8 06             	cmp    eax,0x6
   15320:	0f 85 ef 01 00 00    	jne    15515 <ahciInit+0x299>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:618
        {
            memcpy(&kPCISATADevice, &kPCIDeviceHeaders[cnt], sizeof (struct pci_device_t));
   15326:	8b 0d b4 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002b4
   1532c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1532f:	89 d0                	mov    eax,edx
   15331:	c1 e0 02             	shl    eax,0x2
   15334:	01 d0                	add    eax,edx
   15336:	c1 e0 04             	shl    eax,0x4
   15339:	01 c8                	add    eax,ecx
   1533b:	83 ec 04             	sub    esp,0x4
   1533e:	6a 50                	push   0x50
   15340:	50                   	push   eax
   15341:	68 e0 02 a0 00       	push   0xa002e0
   15346:	e8 55 06 01 00       	call   259a0 <memcpy>
   1534b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:619
            ahciDeviceFound = true;
   1534e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:620
            printd(DEBUG_AHCI, "AHCI: Found AHCI controller (D) (%02X/%02X/%02X) '%s'\n", cnt, kPCIDeviceHeaders[cnt].class, kPCIDeviceHeaders[cnt].subClass, getDeviceNameP(&kPCISATADevice, buffer));
   15352:	83 ec 08             	sub    esp,0x8
   15355:	8d 85 56 ff ff ff    	lea    eax,[ebp-0xaa]
   1535b:	50                   	push   eax
   1535c:	68 e0 02 a0 00       	push   0xa002e0
   15361:	e8 d8 14 00 00       	call   1683e <getDeviceNameP>
   15366:	83 c4 10             	add    esp,0x10
   15369:	89 c6                	mov    esi,eax
   1536b:	8b 0d b4 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002b4
   15371:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   15374:	89 d0                	mov    eax,edx
   15376:	c1 e0 02             	shl    eax,0x2
   15379:	01 d0                	add    eax,edx
   1537b:	c1 e0 04             	shl    eax,0x4
   1537e:	01 c8                	add    eax,ecx
   15380:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
   15383:	8b 1d b4 02 a0 00    	mov    ebx,DWORD PTR ds:0xa002b4
   15389:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1538c:	89 d0                	mov    eax,edx
   1538e:	c1 e0 02             	shl    eax,0x2
   15391:	01 d0                	add    eax,edx
   15393:	c1 e0 04             	shl    eax,0x4
   15396:	01 d8                	add    eax,ebx
   15398:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1539b:	83 ec 08             	sub    esp,0x8
   1539e:	56                   	push   esi
   1539f:	51                   	push   ecx
   153a0:	50                   	push   eax
   153a1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   153a4:	68 04 6b 04 00       	push   0x46b04
   153a9:	68 00 20 00 00       	push   0x2000
   153ae:	e8 a0 1c 01 00       	call   27053 <printd>
   153b3:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:621
            printd(DEBUG_AHCI, "ABAR is at: before/remapped - 0x%08X/", kPCISATADevice.baseAdd[5]);
   153b6:	a1 14 03 a0 00       	mov    eax,ds:0xa00314
   153bb:	83 ec 04             	sub    esp,0x4
   153be:	50                   	push   eax
   153bf:	68 3c 6b 04 00       	push   0x46b3c
   153c4:	68 00 20 00 00       	push   0x2000
   153c9:	e8 85 1c 01 00       	call   27053 <printd>
   153ce:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:622
            ahciABAR = (HBA_MEM*) AHCI_ABAR_REMAPPED_ADDRESS + (0x10 * ahciHostCount);
   153d1:	a1 24 8a 02 00       	mov    eax,ds:0x28a24
   153d6:	c1 e0 0c             	shl    eax,0xc
   153d9:	89 c2                	mov    edx,eax
   153db:	c1 e2 04             	shl    edx,0x4
   153de:	01 d0                	add    eax,edx
   153e0:	05 00 60 57 00       	add    eax,0x576000
   153e5:	a3 54 04 a0 00       	mov    ds:0xa00454,eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:623
                kMapPage((uintptr_t) ahciABAR, kPCISATADevice.baseAdd[5], 0x73); //0x63 + cache disabled
   153ea:	a1 14 03 a0 00       	mov    eax,ds:0xa00314
   153ef:	8b 15 54 04 a0 00    	mov    edx,DWORD PTR ds:0xa00454
   153f5:	83 ec 04             	sub    esp,0x4
   153f8:	6a 73                	push   0x73
   153fa:	50                   	push   eax
   153fb:	52                   	push   edx
   153fc:	e8 36 c3 ff ff       	call   11737 <kMapPage>
   15401:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:624
                kMapPage(kPCISATADevice.baseAdd[5],kPCISATADevice.baseAdd[5],0x73);
   15404:	8b 15 14 03 a0 00    	mov    edx,DWORD PTR ds:0xa00314
   1540a:	a1 14 03 a0 00       	mov    eax,ds:0xa00314
   1540f:	83 ec 04             	sub    esp,0x4
   15412:	6a 73                	push   0x73
   15414:	52                   	push   edx
   15415:	50                   	push   eax
   15416:	e8 1c c3 ff ff       	call   11737 <kMapPage>
   1541b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:625
            RELOAD_CR3
   1541e:	0f 20 d8             	mov    eax,cr3
   15421:	0f 22 d8             	mov    cr3,eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:626
            memcpy((void*) &ABARs[ahciHostCount++], (void*) ahciABAR, sizeof (HBA_MEM));
   15424:	8b 15 54 04 a0 00    	mov    edx,DWORD PTR ds:0xa00454
   1542a:	a1 24 8a 02 00       	mov    eax,ds:0x28a24
   1542f:	8d 48 01             	lea    ecx,[eax+0x1]
   15432:	89 0d 24 8a 02 00    	mov    DWORD PTR ds:0x28a24,ecx
   15438:	c1 e0 08             	shl    eax,0x8
   1543b:	89 c1                	mov    ecx,eax
   1543d:	c1 e1 04             	shl    ecx,0x4
   15440:	01 c8                	add    eax,ecx
   15442:	05 40 b5 08 00       	add    eax,0x8b540
   15447:	83 ec 04             	sub    esp,0x4
   1544a:	68 00 11 00 00       	push   0x1100
   1544f:	52                   	push   edx
   15450:	50                   	push   eax
   15451:	e8 4a 05 01 00       	call   259a0 <memcpy>
   15456:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:627
            printd(DEBUG_AHCI, "0x%08X\n", ahciABAR);
   15459:	a1 54 04 a0 00       	mov    eax,ds:0xa00454
   1545e:	83 ec 04             	sub    esp,0x4
   15461:	50                   	push   eax
   15462:	68 62 6b 04 00       	push   0x46b62
   15467:	68 00 20 00 00       	push   0x2000
   1546c:	e8 e2 1b 01 00       	call   27053 <printd>
   15471:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:628
            memcpy(&ahciCaps[ahciCapsCount++], (void*) ahciABAR, sizeof (ahcicaps_t));
   15474:	8b 15 54 04 a0 00    	mov    edx,DWORD PTR ds:0xa00454
   1547a:	8b 1d e8 03 a0 00    	mov    ebx,DWORD PTR ds:0xa003e8
   15480:	a1 ec 03 a0 00       	mov    eax,ds:0xa003ec
   15485:	8d 48 01             	lea    ecx,[eax+0x1]
   15488:	89 0d ec 03 a0 00    	mov    DWORD PTR ds:0xa003ec,ecx
   1548e:	c1 e0 02             	shl    eax,0x2
   15491:	01 d8                	add    eax,ebx
   15493:	83 ec 04             	sub    esp,0x4
   15496:	6a 04                	push   0x4
   15498:	52                   	push   edx
   15499:	50                   	push   eax
   1549a:	e8 01 05 01 00       	call   259a0 <memcpy>
   1549f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:629
            if (!(ahciABAR->ghc.AE)) {
   154a2:	a1 54 04 a0 00       	mov    eax,ds:0xa00454
   154a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   154aa:	c1 e8 1f             	shr    eax,0x1f
   154ad:	84 c0                	test   al,al
   154af:	75 26                	jne    154d7 <ahciInit+0x25b>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:630
                printd(DEBUG_AHCI,"switching to AHCI mode\n");
   154b1:	83 ec 08             	sub    esp,0x8
   154b4:	68 6a 6b 04 00       	push   0x46b6a
   154b9:	68 00 20 00 00       	push   0x2000
   154be:	e8 90 1b 01 00       	call   27053 <printd>
   154c3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:631
                ahciABAR->ghc.AE=1;
   154c6:	a1 54 04 a0 00       	mov    eax,ds:0xa00454
   154cb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   154ce:	81 ca 00 00 00 80    	or     edx,0x80000000
   154d4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:633
            }
            ahciABAR->ghc.IE=1;
   154d7:	a1 54 04 a0 00       	mov    eax,ds:0xa00454
   154dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   154df:	83 ca 02             	or     edx,0x2
   154e2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:634
            if (ahciABAR->cap2 & 1) {
   154e5:	a1 54 04 a0 00       	mov    eax,ds:0xa00454
   154ea:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   154ed:	83 e0 01             	and    eax,0x1
   154f0:	85 c0                	test   eax,eax
   154f2:	74 10                	je     15504 <ahciInit+0x288>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:635
                panic("Write support for BIOS handoff!!!");
   154f4:	83 ec 0c             	sub    esp,0xc
   154f7:	68 84 6b 04 00       	push   0x46b84
   154fc:	e8 b7 16 01 00       	call   26bb8 <panic>
   15501:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:637
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
   15504:	a1 54 04 a0 00       	mov    eax,ds:0xa00454
   15509:	83 ec 0c             	sub    esp,0xc
   1550c:	50                   	push   eax
   1550d:	e8 88 ea ff ff       	call   13f9a <ahciProbePorts>
   15512:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:615 (discriminator 2)
    if (!kPCIDeviceCount) {
        printd(DEBUG_AHCI, "AHCI: PCI not initialized, cannot initialize AHCI.");
        return false;
    }

    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   15515:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:615 (discriminator 1)
   15519:	0f b6 05 ac 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002ac
   15520:	0f b6 c0             	movzx  eax,al
   15523:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   15526:	0f 8f b8 fd ff ff    	jg     152e4 <ahciInit+0x68>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:639
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   1552c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   15533:	e9 12 02 00 00       	jmp    1574a <ahciInit+0x4ce>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:640
        if (kPCIDeviceFunctions[cnt].class == 1 && kPCIDeviceFunctions[cnt].subClass == 6) 
   15538:	8b 0d bc 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002bc
   1553e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   15541:	89 d0                	mov    eax,edx
   15543:	c1 e0 02             	shl    eax,0x2
   15546:	01 d0                	add    eax,edx
   15548:	c1 e0 04             	shl    eax,0x4
   1554b:	01 c8                	add    eax,ecx
   1554d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   15550:	83 f8 01             	cmp    eax,0x1
   15553:	0f 85 ed 01 00 00    	jne    15746 <ahciInit+0x4ca>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:640 (discriminator 1)
   15559:	8b 0d bc 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002bc
   1555f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   15562:	89 d0                	mov    eax,edx
   15564:	c1 e0 02             	shl    eax,0x2
   15567:	01 d0                	add    eax,edx
   15569:	c1 e0 04             	shl    eax,0x4
   1556c:	01 c8                	add    eax,ecx
   1556e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   15571:	83 f8 06             	cmp    eax,0x6
   15574:	0f 85 cc 01 00 00    	jne    15746 <ahciInit+0x4ca>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:642
        {
            memcpy(&kPCISATADevice, &kPCIDeviceFunctions[cnt], sizeof (struct pci_device_t));
   1557a:	8b 0d bc 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002bc
   15580:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   15583:	89 d0                	mov    eax,edx
   15585:	c1 e0 02             	shl    eax,0x2
   15588:	01 d0                	add    eax,edx
   1558a:	c1 e0 04             	shl    eax,0x4
   1558d:	01 c8                	add    eax,ecx
   1558f:	83 ec 04             	sub    esp,0x4
   15592:	6a 50                	push   0x50
   15594:	50                   	push   eax
   15595:	68 e0 02 a0 00       	push   0xa002e0
   1559a:	e8 01 04 01 00       	call   259a0 <memcpy>
   1559f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:643
            ahciDeviceFound = true;
   155a2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:644
            printd(DEBUG_AHCI, "AHCI: Found AHCI controller (F) (%02X/%02X/%02X) '%s'\n", cnt, kPCIDeviceFunctions[cnt].class, kPCIDeviceFunctions[cnt].subClass, getDeviceNameP(&kPCISATADevice, buffer));
   155a6:	83 ec 08             	sub    esp,0x8
   155a9:	8d 85 56 ff ff ff    	lea    eax,[ebp-0xaa]
   155af:	50                   	push   eax
   155b0:	68 e0 02 a0 00       	push   0xa002e0
   155b5:	e8 84 12 00 00       	call   1683e <getDeviceNameP>
   155ba:	83 c4 10             	add    esp,0x10
   155bd:	89 c6                	mov    esi,eax
   155bf:	8b 0d bc 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002bc
   155c5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   155c8:	89 d0                	mov    eax,edx
   155ca:	c1 e0 02             	shl    eax,0x2
   155cd:	01 d0                	add    eax,edx
   155cf:	c1 e0 04             	shl    eax,0x4
   155d2:	01 c8                	add    eax,ecx
   155d4:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
   155d7:	8b 1d bc 02 a0 00    	mov    ebx,DWORD PTR ds:0xa002bc
   155dd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   155e0:	89 d0                	mov    eax,edx
   155e2:	c1 e0 02             	shl    eax,0x2
   155e5:	01 d0                	add    eax,edx
   155e7:	c1 e0 04             	shl    eax,0x4
   155ea:	01 d8                	add    eax,ebx
   155ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   155ef:	83 ec 08             	sub    esp,0x8
   155f2:	56                   	push   esi
   155f3:	51                   	push   ecx
   155f4:	50                   	push   eax
   155f5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   155f8:	68 a8 6b 04 00       	push   0x46ba8
   155fd:	68 00 20 00 00       	push   0x2000
   15602:	e8 4c 1a 01 00       	call   27053 <printd>
   15607:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:645
            printd(DEBUG_AHCI, "ABAR is at: 0x%08X\n", kPCISATADevice.baseAdd[5]);
   1560a:	a1 14 03 a0 00       	mov    eax,ds:0xa00314
   1560f:	83 ec 04             	sub    esp,0x4
   15612:	50                   	push   eax
   15613:	68 df 6b 04 00       	push   0x46bdf
   15618:	68 00 20 00 00       	push   0x2000
   1561d:	e8 31 1a 01 00       	call   27053 <printd>
   15622:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:646
            ahciABAR = (HBA_MEM*) AHCI_ABAR_REMAPPED_ADDRESS + (0x10 * ahciHostCount);
   15625:	a1 24 8a 02 00       	mov    eax,ds:0x28a24
   1562a:	c1 e0 0c             	shl    eax,0xc
   1562d:	89 c2                	mov    edx,eax
   1562f:	c1 e2 04             	shl    edx,0x4
   15632:	01 d0                	add    eax,edx
   15634:	05 00 60 57 00       	add    eax,0x576000
   15639:	a3 54 04 a0 00       	mov    ds:0xa00454,eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:647
            kMapPage((uintptr_t) ahciABAR, kPCISATADevice.baseAdd[5], 0x73); //0x63 + cache disabled
   1563e:	a1 14 03 a0 00       	mov    eax,ds:0xa00314
   15643:	8b 15 54 04 a0 00    	mov    edx,DWORD PTR ds:0xa00454
   15649:	83 ec 04             	sub    esp,0x4
   1564c:	6a 73                	push   0x73
   1564e:	50                   	push   eax
   1564f:	52                   	push   edx
   15650:	e8 e2 c0 ff ff       	call   11737 <kMapPage>
   15655:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:648
            RELOAD_CR3
   15658:	0f 20 d8             	mov    eax,cr3
   1565b:	0f 22 d8             	mov    cr3,eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:649
            memcpy((void*) &ABARs[ahciHostCount++], (void*) ahciABAR, sizeof (HBA_MEM));
   1565e:	8b 15 54 04 a0 00    	mov    edx,DWORD PTR ds:0xa00454
   15664:	a1 24 8a 02 00       	mov    eax,ds:0x28a24
   15669:	8d 48 01             	lea    ecx,[eax+0x1]
   1566c:	89 0d 24 8a 02 00    	mov    DWORD PTR ds:0x28a24,ecx
   15672:	c1 e0 08             	shl    eax,0x8
   15675:	89 c1                	mov    ecx,eax
   15677:	c1 e1 04             	shl    ecx,0x4
   1567a:	01 c8                	add    eax,ecx
   1567c:	05 40 b5 08 00       	add    eax,0x8b540
   15681:	83 ec 04             	sub    esp,0x4
   15684:	68 00 11 00 00       	push   0x1100
   15689:	52                   	push   edx
   1568a:	50                   	push   eax
   1568b:	e8 10 03 01 00       	call   259a0 <memcpy>
   15690:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:650
            printd(DEBUG_AHCI, "Remapped ABAR is now at: 0x%08X\n", ahciABAR);
   15693:	a1 54 04 a0 00       	mov    eax,ds:0xa00454
   15698:	83 ec 04             	sub    esp,0x4
   1569b:	50                   	push   eax
   1569c:	68 f4 6b 04 00       	push   0x46bf4
   156a1:	68 00 20 00 00       	push   0x2000
   156a6:	e8 a8 19 01 00       	call   27053 <printd>
   156ab:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:651
            memcpy(&ahciCaps[ahciCapsCount], (void*) ahciABAR, sizeof (ahcicaps_t));
   156ae:	a1 54 04 a0 00       	mov    eax,ds:0xa00454
   156b3:	8b 15 e8 03 a0 00    	mov    edx,DWORD PTR ds:0xa003e8
   156b9:	8b 0d ec 03 a0 00    	mov    ecx,DWORD PTR ds:0xa003ec
   156bf:	c1 e1 02             	shl    ecx,0x2
   156c2:	01 ca                	add    edx,ecx
   156c4:	83 ec 04             	sub    esp,0x4
   156c7:	6a 04                	push   0x4
   156c9:	50                   	push   eax
   156ca:	52                   	push   edx
   156cb:	e8 d0 02 01 00       	call   259a0 <memcpy>
   156d0:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:652
            if (!(ahciABAR->ghc.AE)) {
   156d3:	a1 54 04 a0 00       	mov    eax,ds:0xa00454
   156d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   156db:	c1 e8 1f             	shr    eax,0x1f
   156de:	84 c0                	test   al,al
   156e0:	75 26                	jne    15708 <ahciInit+0x48c>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:653
                printd(DEBUG_AHCI,"switching to AHCI mode\n");
   156e2:	83 ec 08             	sub    esp,0x8
   156e5:	68 6a 6b 04 00       	push   0x46b6a
   156ea:	68 00 20 00 00       	push   0x2000
   156ef:	e8 5f 19 01 00       	call   27053 <printd>
   156f4:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:654
                ahciABAR->ghc.AE=1;
   156f7:	a1 54 04 a0 00       	mov    eax,ds:0xa00454
   156fc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   156ff:	81 ca 00 00 00 80    	or     edx,0x80000000
   15705:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:656
            }
            ahciABAR->ghc.IE=1;
   15708:	a1 54 04 a0 00       	mov    eax,ds:0xa00454
   1570d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   15710:	83 ca 02             	or     edx,0x2
   15713:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:657
            if (ahciABAR->cap2 & 1) {
   15716:	a1 54 04 a0 00       	mov    eax,ds:0xa00454
   1571b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   1571e:	83 e0 01             	and    eax,0x1
   15721:	85 c0                	test   eax,eax
   15723:	74 10                	je     15735 <ahciInit+0x4b9>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:658
                panic("Write support for BIOS handoff!!!");
   15725:	83 ec 0c             	sub    esp,0xc
   15728:	68 84 6b 04 00       	push   0x46b84
   1572d:	e8 86 14 01 00       	call   26bb8 <panic>
   15732:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:660
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
   15735:	a1 54 04 a0 00       	mov    eax,ds:0xa00454
   1573a:	83 ec 0c             	sub    esp,0xc
   1573d:	50                   	push   eax
   1573e:	e8 57 e8 ff ff       	call   13f9a <ahciProbePorts>
   15743:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:639 (discriminator 2)
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   15746:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:639 (discriminator 1)
   1574a:	0f b6 05 ac 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002ac
   15751:	0f b6 c0             	movzx  eax,al
   15754:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   15757:	0f 8f db fd ff ff    	jg     15538 <ahciInit+0x2bc>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:662
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    if (!ahciDeviceFound) {
   1575d:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   15761:	83 f0 01             	xor    eax,0x1
   15764:	84 c0                	test   al,al
   15766:	74 1c                	je     15784 <ahciInit+0x508>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:663
        printd(DEBUG_AHCI, "AHCI: No AHCI devices found.");
   15768:	83 ec 08             	sub    esp,0x8
   1576b:	68 15 6c 04 00       	push   0x46c15
   15770:	68 00 20 00 00       	push   0x2000
   15775:	e8 d9 18 01 00       	call   27053 <printd>
   1577a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:664
        return false;
   1577d:	b8 00 00 00 00       	mov    eax,0x0
   15782:	eb 05                	jmp    15789 <ahciInit+0x50d>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:668
    }


    return true;
   15784:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:669 (discriminator 1)
}
   15789:	8d 65 f8             	lea    esp,[ebp-0x8]
   1578c:	5b                   	pop    ebx
   1578d:	5e                   	pop    esi
   1578e:	5d                   	pop    ebp
   1578f:	c3                   	ret    

00015790 <ahci_port_activate_device>:
ahci_port_activate_device():
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:672

void ahci_port_activate_device(HBA_MEM* h, HBA_PORT* p)
{
   15790:	55                   	push   ebp
   15791:	89 e5                	mov    ebp,esp
   15793:	53                   	push   ebx
   15794:	83 ec 14             	sub    esp,0x14
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:673
    printd(DEBUG_AHCI,"activate port %d @ 0x%08X:\n", p - h->ports,p);
   15797:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1579a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1579d:	81 c2 00 01 00 00    	add    edx,0x100
   157a3:	29 d0                	sub    eax,edx
   157a5:	c1 f8 07             	sar    eax,0x7
   157a8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   157ab:	50                   	push   eax
   157ac:	68 32 6c 04 00       	push   0x46c32
   157b1:	68 00 20 00 00       	push   0x2000
   157b6:	e8 98 18 01 00       	call   27053 <printd>
   157bb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:675
    /* first check the presence flag */
    if ( (p->ssts & 0x7) == HBA_PORT_DET_NOT_PRESENT) { //check DET status
   157be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   157c1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   157c4:	83 e0 07             	and    eax,0x7
   157c7:	85 c0                	test   eax,eax
   157c9:	0f 85 38 02 00 00    	jne    15a07 <ahci_port_activate_device+0x277>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:676
                    printd(DEBUG_AHCI,"activate: DET_NOT_PRESENT\n");
   157cf:	83 ec 08             	sub    esp,0x8
   157d2:	68 4e 6c 04 00       	push   0x46c4e
   157d7:	68 00 20 00 00       	push   0x2000
   157dc:	e8 72 18 01 00       	call   27053 <printd>
   157e1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:678
                    /* nothing attached? */
                    if (p->cmd.CPD) { /* we rely on CPD */
   157e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   157e7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   157ea:	c1 e8 14             	shr    eax,0x14
   157ed:	83 e0 01             	and    eax,0x1
   157f0:	84 c0                	test   al,al
   157f2:	74 65                	je     15859 <ahci_port_activate_device+0xc9>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:679
                                    if (!p->cmd.CPS) {
   157f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   157f7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   157fa:	c1 e8 10             	shr    eax,0x10
   157fd:	83 e0 01             	and    eax,0x1
   15800:	84 c0                	test   al,al
   15802:	75 1a                	jne    1581e <ahci_port_activate_device+0x8e>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:680
                                                    printd(DEBUG_AHCI,"confirmed by CPD\n");
   15804:	83 ec 08             	sub    esp,0x8
   15807:	68 69 6c 04 00       	push   0x46c69
   1580c:	68 00 20 00 00       	push   0x2000
   15811:	e8 3d 18 01 00       	call   27053 <printd>
   15816:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:681
                                                    return;
   15819:	e9 b4 03 00 00       	jmp    15bd2 <ahci_port_activate_device+0x442>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:684
                                    }
                                    /* there's something */
                                    if (!p->cmd.POD) {
   1581e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15821:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15824:	c1 e8 02             	shr    eax,0x2
   15827:	83 e0 01             	and    eax,0x1
   1582a:	84 c0                	test   al,al
   1582c:	75 19                	jne    15847 <ahci_port_activate_device+0xb7>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:685
                                                    p->cmd.POD = 1; /* power it */
   1582e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15831:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15834:	83 ca 04             	or     edx,0x4
   15837:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:686
                                                    wait(20);
   1583a:	83 ec 0c             	sub    esp,0xc
   1583d:	6a 14                	push   0x14
   1583f:	e8 2e 2a 01 00       	call   28272 <wait>
   15844:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:688
                                    }
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
   15847:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1584a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   1584d:	83 e0 07             	and    eax,0x7
   15850:	85 c0                	test   eax,eax
   15852:	74 05                	je     15859 <ahci_port_activate_device+0xc9>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:689
                                                    goto next_step;
   15854:	e9 ae 01 00 00       	jmp    15a07 <ahci_port_activate_device+0x277>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:692
                    }
                    /* spin-up? */
                    if (!p->cmd.SUD) { /* always !1 if cap.sss == 0 */
   15859:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1585c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   1585f:	d1 e8                	shr    eax,1
   15861:	83 e0 01             	and    eax,0x1
   15864:	84 c0                	test   al,al
   15866:	0f 85 f7 00 00 00    	jne    15963 <ahci_port_activate_device+0x1d3>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:693
                                    printd(DEBUG_AHCI,"not spun-up yet?\n");
   1586c:	83 ec 08             	sub    esp,0x8
   1586f:	68 7b 6c 04 00       	push   0x46c7b
   15874:	68 00 20 00 00       	push   0x2000
   15879:	e8 d5 17 01 00       	call   27053 <printd>
   1587e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:694
                                    if (p->serr.AsUlong & (1 << 26)) /* eXchange bit */
   15881:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15884:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15887:	25 00 00 00 04       	and    eax,0x4000000
   1588c:	85 c0                	test   eax,eax
   1588e:	74 13                	je     158a3 <ahci_port_activate_device+0x113>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:695
                                                    p->serr.AsUlong |= (1 << 26); /* RWC */
   15890:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15893:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15896:	0d 00 00 00 04       	or     eax,0x4000000
   1589b:	89 c2                	mov    edx,eax
   1589d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   158a0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:696
                                    if ((p->ssts & 0x7) != 0) { /* set to 0 prior sud */
   158a3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   158a6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   158a9:	83 e0 07             	and    eax,0x7
   158ac:	85 c0                	test   eax,eax
   158ae:	74 19                	je     158c9 <ahci_port_activate_device+0x139>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:697
                                                    p->sctl.DET = 0;
   158b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   158b3:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   158b6:	83 e2 f0             	and    edx,0xfffffff0
   158b9:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:698
                                                    wait(20);
   158bc:	83 ec 0c             	sub    esp,0xc
   158bf:	6a 14                	push   0x14
   158c1:	e8 ac 29 01 00       	call   28272 <wait>
   158c6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:700
                                    }
                                    p->cmd.SUD = 1;
   158c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   158cc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   158cf:	83 ca 02             	or     edx,0x2
   158d2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:701
                                    waitTicks(5); /* wait 50 mus */
   158d5:	83 ec 0c             	sub    esp,0xc
   158d8:	6a 05                	push   0x5
   158da:	e8 78 29 01 00       	call   28257 <waitTicks>
   158df:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:702
                                    if (p->serr.AsUlong & ((1 << 26) | (1 << 18))) { /* received sth. */
   158e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   158e5:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   158e8:	25 00 00 04 04       	and    eax,0x4040000
   158ed:	85 c0                	test   eax,eax
   158ef:	74 05                	je     158f6 <ahci_port_activate_device+0x166>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:704
                                                    /* COMRESET, COMWAKE */
                                                    goto next_step;
   158f1:	e9 11 01 00 00       	jmp    15a07 <ahci_port_activate_device+0x277>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:707
                                    }
                                    /* send the reset */
                                    p->sctl.DET = 1;
   158f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   158f9:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   158fc:	83 e2 f0             	and    edx,0xfffffff0
   158ff:	83 ca 01             	or     edx,0x1
   15902:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:708
                                    waitTicks(100);
   15905:	83 ec 0c             	sub    esp,0xc
   15908:	6a 64                	push   0x64
   1590a:	e8 48 29 01 00       	call   28257 <waitTicks>
   1590f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:709
                                    p->sctl.DET = 0;
   15912:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15915:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   15918:	83 e2 f0             	and    edx,0xfffffff0
   1591b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:710
                                    wait(20);
   1591e:	83 ec 0c             	sub    esp,0xc
   15921:	6a 14                	push   0x14
   15923:	e8 4a 29 01 00       	call   28272 <wait>
   15928:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:711
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
   1592b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1592e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15931:	83 e0 07             	and    eax,0x7
   15934:	85 c0                	test   eax,eax
   15936:	74 05                	je     1593d <ahci_port_activate_device+0x1ad>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:712
                                                    goto next_step;
   15938:	e9 ca 00 00 00       	jmp    15a07 <ahci_port_activate_device+0x277>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:713
                                    p->cmd.SUD = 0; /* we're done enter listening mode */
   1593d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15940:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15943:	83 e2 fd             	and    edx,0xfffffffd
   15946:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:714
                                    printd(DEBUG_AHCI,"not present\n");
   15949:	83 ec 08             	sub    esp,0x8
   1594c:	68 8d 6c 04 00       	push   0x46c8d
   15951:	68 00 20 00 00       	push   0x2000
   15956:	e8 f8 16 01 00       	call   27053 <printd>
   1595b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:715
                                    goto exit;
   1595e:	e9 47 02 00 00       	jmp    15baa <ahci_port_activate_device+0x41a>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:718
                    }
                    /* just try ICC */
                    if (p->sctl.IPM != 1) {
   15963:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15966:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15969:	c1 e8 08             	shr    eax,0x8
   1596c:	83 e0 0f             	and    eax,0xf
   1596f:	3c 01                	cmp    al,0x1
   15971:	0f 84 90 00 00 00    	je     15a07 <ahci_port_activate_device+0x277>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:719
                                    printd(DEBUG_AHCI,"IPM != ACTIVE\n");
   15977:	83 ec 08             	sub    esp,0x8
   1597a:	68 9a 6c 04 00       	push   0x46c9a
   1597f:	68 00 20 00 00       	push   0x2000
   15984:	e8 ca 16 01 00       	call   27053 <printd>
   15989:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:720
                                    int ct = 50;
   1598c:	c7 45 f4 32 00 00 00 	mov    DWORD PTR [ebp-0xc],0x32
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:721
                                    while (p->cmd.ICC && ct--)
   15993:	eb 0d                	jmp    159a2 <ahci_port_activate_device+0x212>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:722
                                                    waitTicks(1);
   15995:	83 ec 0c             	sub    esp,0xc
   15998:	6a 01                	push   0x1
   1599a:	e8 b8 28 01 00       	call   28257 <waitTicks>
   1599f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:721
                    }
                    /* just try ICC */
                    if (p->sctl.IPM != 1) {
                                    printd(DEBUG_AHCI,"IPM != ACTIVE\n");
                                    int ct = 50;
                                    while (p->cmd.ICC && ct--)
   159a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   159a5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   159a8:	c1 e8 1c             	shr    eax,0x1c
   159ab:	84 c0                	test   al,al
   159ad:	74 0d                	je     159bc <ahci_port_activate_device+0x22c>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:721 (discriminator 1)
   159af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   159b2:	8d 50 ff             	lea    edx,[eax-0x1]
   159b5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   159b8:	85 c0                	test   eax,eax
   159ba:	75 d9                	jne    15995 <ahci_port_activate_device+0x205>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:723
                                                    waitTicks(1);
                                    p->cmd.ICC = 1;
   159bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   159bf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   159c2:	81 e2 ff ff ff 0f    	and    edx,0xfffffff
   159c8:	81 ca 00 00 00 10    	or     edx,0x10000000
   159ce:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:724
                                    wait(10);
   159d1:	83 ec 0c             	sub    esp,0xc
   159d4:	6a 0a                	push   0xa
   159d6:	e8 97 28 01 00       	call   28272 <wait>
   159db:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:725
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
   159de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   159e1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   159e4:	83 e0 07             	and    eax,0x7
   159e7:	85 c0                	test   eax,eax
   159e9:	74 02                	je     159ed <ahci_port_activate_device+0x25d>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:726
                                                    goto next_step;
   159eb:	eb 1a                	jmp    15a07 <ahci_port_activate_device+0x277>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:727
                                    printd(DEBUG_AHCI,"unable to set to active\n");
   159ed:	83 ec 08             	sub    esp,0x8
   159f0:	68 a9 6c 04 00       	push   0x46ca9
   159f5:	68 00 20 00 00       	push   0x2000
   159fa:	e8 54 16 01 00       	call   27053 <printd>
   159ff:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:728
                                    goto exit;
   15a02:	e9 a3 01 00 00       	jmp    15baa <ahci_port_activate_device+0x41a>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:734
                    }
    }

    /* det != 1*/
next_step:
    if ((p->ssts & 0x7) == HBA_PORT_DET_PRESENT) {
   15a07:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15a0a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15a0d:	83 e0 07             	and    eax,0x7
   15a10:	83 f8 03             	cmp    eax,0x3
   15a13:	0f 85 41 01 00 00    	jne    15b5a <ahci_port_activate_device+0x3ca>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:736
                    /* almost done */
                    if (p->sctl.IPM != HBA_PORT_IPM_ACTIVE) {
   15a19:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15a1c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15a1f:	c1 e8 08             	shr    eax,0x8
   15a22:	83 e0 0f             	and    eax,0xf
   15a25:	3c 01                	cmp    al,0x1
   15a27:	0f 84 b8 00 00 00    	je     15ae5 <ahci_port_activate_device+0x355>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:738
                                    int ct, wc;
                                    printd(DEBUG_AHCI,"Present but not active.\n");
   15a2d:	83 ec 08             	sub    esp,0x8
   15a30:	68 c2 6c 04 00       	push   0x46cc2
   15a35:	68 00 20 00 00       	push   0x2000
   15a3a:	e8 14 16 01 00       	call   27053 <printd>
   15a3f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:740
activ:
                                    ct = 50, wc = 0;
   15a42:	c7 45 f0 32 00 00 00 	mov    DWORD PTR [ebp-0x10],0x32
   15a49:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:742
rewait:
                                    while (p->cmd.ICC && ct--) /* 500ms */
   15a50:	eb 0d                	jmp    15a5f <ahci_port_activate_device+0x2cf>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:743
                                                    waitTicks(1);
   15a52:	83 ec 0c             	sub    esp,0xc
   15a55:	6a 01                	push   0x1
   15a57:	e8 fb 27 01 00       	call   28257 <waitTicks>
   15a5c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:742
                                    int ct, wc;
                                    printd(DEBUG_AHCI,"Present but not active.\n");
activ:
                                    ct = 50, wc = 0;
rewait:
                                    while (p->cmd.ICC && ct--) /* 500ms */
   15a5f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15a62:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15a65:	c1 e8 1c             	shr    eax,0x1c
   15a68:	84 c0                	test   al,al
   15a6a:	74 0d                	je     15a79 <ahci_port_activate_device+0x2e9>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:742 (discriminator 1)
   15a6c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15a6f:	8d 50 ff             	lea    edx,[eax-0x1]
   15a72:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   15a75:	85 c0                	test   eax,eax
   15a77:	75 d9                	jne    15a52 <ahci_port_activate_device+0x2c2>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:744
                                                    waitTicks(1);
                                    if (p->sctl.IPM != HBA_PORT_IPM_ACTIVE && !wc) {
   15a79:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15a7c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15a7f:	c1 e8 08             	shr    eax,0x8
   15a82:	83 e0 0f             	and    eax,0xf
   15a85:	3c 01                	cmp    al,0x1
   15a87:	74 35                	je     15abe <ahci_port_activate_device+0x32e>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:744 (discriminator 1)
   15a89:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   15a8d:	75 2f                	jne    15abe <ahci_port_activate_device+0x32e>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:745
                                                    p->cmd.ICC = 1;
   15a8f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15a92:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15a95:	81 e2 ff ff ff 0f    	and    edx,0xfffffff
   15a9b:	81 ca 00 00 00 10    	or     edx,0x10000000
   15aa1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:746
                                                    waitTicks(1);
   15aa4:	83 ec 0c             	sub    esp,0xc
   15aa7:	6a 01                	push   0x1
   15aa9:	e8 a9 27 01 00       	call   28257 <waitTicks>
   15aae:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:747
                                                    wc++; ct = 50;
   15ab1:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
   15ab5:	c7 45 f0 32 00 00 00 	mov    DWORD PTR [ebp-0x10],0x32
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:748
                                                    goto rewait;
   15abc:	eb 92                	jmp    15a50 <ahci_port_activate_device+0x2c0>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:750
                                    }
                                    if (wc) {
   15abe:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   15ac2:	74 21                	je     15ae5 <ahci_port_activate_device+0x355>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:752
                                                    /* reset */
                                                    p->sctl.DET = 1;
   15ac4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15ac7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   15aca:	83 e2 f0             	and    edx,0xfffffff0
   15acd:	83 ca 01             	or     edx,0x1
   15ad0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:753
                                                    waitTicks(100);
   15ad3:	83 ec 0c             	sub    esp,0xc
   15ad6:	6a 64                	push   0x64
   15ad8:	e8 7a 27 01 00       	call   28257 <waitTicks>
   15add:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:754
                                                    goto next_step;
   15ae0:	e9 22 ff ff ff       	jmp    15a07 <ahci_port_activate_device+0x277>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:758
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
   15ae5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15ae8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   15aeb:	81 c2 00 01 00 00    	add    edx,0x100
   15af1:	29 d0                	sub    eax,edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:757
                                                    p->sctl.DET = 1;
                                                    waitTicks(100);
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
   15af3:	c1 f8 07             	sar    eax,0x7
   15af6:	83 ec 04             	sub    esp,0x4
   15af9:	50                   	push   eax
   15afa:	68 dc 6c 04 00       	push   0x46cdc
   15aff:	68 00 20 00 00       	push   0x2000
   15b04:	e8 4a 15 01 00       	call   27053 <printd>
   15b09:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:760
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
   15b0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b0f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15b12:	c1 e8 08             	shr    eax,0x8
   15b15:	83 e0 0f             	and    eax,0xf
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
   15b18:	0f b6 c8             	movzx  ecx,al
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:760
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
   15b1b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b1e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
   15b21:	83 e0 07             	and    eax,0x7
   15b24:	89 c3                	mov    ebx,eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:760
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
   15b26:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b29:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15b2c:	83 e0 01             	and    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
   15b2f:	0f b6 d0             	movzx  edx,al
   15b32:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b35:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15b38:	83 ec 04             	sub    esp,0x4
   15b3b:	51                   	push   ecx
   15b3c:	53                   	push   ebx
   15b3d:	52                   	push   edx
   15b3e:	50                   	push   eax
   15b3f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b42:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15b45:	50                   	push   eax
   15b46:	68 06 6d 04 00       	push   0x46d06
   15b4b:	68 00 20 00 00       	push   0x2000
   15b50:	e8 fe 14 01 00       	call   27053 <printd>
   15b55:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:761
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
                    return;
   15b58:	eb 78                	jmp    15bd2 <ahci_port_activate_device+0x442>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:762
    } else if ((p->ssts & 0x7) == 4/*?*/) {
   15b5a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b5d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15b60:	83 e0 07             	and    eax,0x7
   15b63:	83 f8 04             	cmp    eax,0x4
   15b66:	75 1a                	jne    15b82 <ahci_port_activate_device+0x3f2>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:764
                    /* just deactivated */
                    printd(DEBUG_AHCI,"PHY offline mode\n");
   15b68:	83 ec 08             	sub    esp,0x8
   15b6b:	68 1f 6d 04 00       	push   0x46d1f
   15b70:	68 00 20 00 00       	push   0x2000
   15b75:	e8 d9 14 01 00       	call   27053 <printd>
   15b7a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:765
                    goto activ;
   15b7d:	e9 c0 fe ff ff       	jmp    15a42 <ahci_port_activate_device+0x2b2>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:766
    } else if ((p->ssts & 0x7) == 5/*DET_PRESENT_NO_PHY*/) {
   15b82:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b85:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15b88:	83 e0 07             	and    eax,0x7
   15b8b:	83 f8 05             	cmp    eax,0x5
   15b8e:	75 1a                	jne    15baa <ahci_port_activate_device+0x41a>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:767
                    printd(DEBUG_AHCI,"PRESENT_NO_PHY mode\n");
   15b90:	83 ec 08             	sub    esp,0x8
   15b93:	68 31 6d 04 00       	push   0x46d31
   15b98:	68 00 20 00 00       	push   0x2000
   15b9d:	e8 b1 14 01 00       	call   27053 <printd>
   15ba2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:768
                    goto activ; /* try the same */
   15ba5:	e9 98 fe ff ff       	jmp    15a42 <ahci_port_activate_device+0x2b2>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:772
    }
exit:
                    /* we're really done */
                    printd(DEBUG_AHCI,"Not present at port %d\n", p - h->ports);
   15baa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15bad:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   15bb0:	81 c2 00 01 00 00    	add    edx,0x100
   15bb6:	29 d0                	sub    eax,edx
   15bb8:	c1 f8 07             	sar    eax,0x7
   15bbb:	83 ec 04             	sub    esp,0x4
   15bbe:	50                   	push   eax
   15bbf:	68 46 6d 04 00       	push   0x46d46
   15bc4:	68 00 20 00 00       	push   0x2000
   15bc9:	e8 85 14 01 00       	call   27053 <printd>
   15bce:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:773
                    return;
   15bd1:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:774
}
   15bd2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   15bd5:	c9                   	leave  
   15bd6:	c3                   	ret    

00015bd7 <ahci_enable_port>:
ahci_enable_port():
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:777

void ahci_enable_port(HBA_MEM* ad, int pt)
{
   15bd7:	55                   	push   ebp
   15bd8:	89 e5                	mov    ebp,esp
   15bda:	53                   	push   ebx
   15bdb:	83 ec 14             	sub    esp,0x14
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:778
        HBA_PORT* p = &ad->ports[pt];
   15bde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15be1:	83 c0 02             	add    eax,0x2
   15be4:	c1 e0 07             	shl    eax,0x7
   15be7:	89 c2                	mov    edx,eax
   15be9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   15bec:	01 d0                	add    eax,edx
   15bee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:779
        int reset_ct = 0;
   15bf1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:782
 
        /* skip non-implemented ports */
        if (!(ad->pi & (1 << pt)))
   15bf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   15bfb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   15bfe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15c01:	bb 01 00 00 00       	mov    ebx,0x1
   15c06:	89 c1                	mov    ecx,eax
   15c08:	d3 e3                	shl    ebx,cl
   15c0a:	89 d8                	mov    eax,ebx
   15c0c:	21 d0                	and    eax,edx
   15c0e:	85 c0                	test   eax,eax
   15c10:	0f 84 0c 02 00 00    	je     15e22 <ahci_enable_port+0x24b>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:787
                return;
 
Pos1:
        /* clear old data */
        p->serr.AsUlong = 0xffffffff; /* 10.1.2 -> 6. */
   15c16:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15c19:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:788
        p->pxis.AsUlong = 0xffffffff; /* clear all pending interrupts */
   15c20:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15c23:	c7 40 10 ff ff ff ff 	mov    DWORD PTR [eax+0x10],0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:791
 
        /* first allow for the reception of FISes */
        p->cmd.FRE = 1;
   15c2a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15c2d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15c30:	83 ca 10             	or     edx,0x10
   15c33:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:792
        wait(20); /* wait for BSY to show up */
   15c36:	83 ec 0c             	sub    esp,0xc
   15c39:	6a 14                	push   0x14
   15c3b:	e8 32 26 01 00       	call   28272 <wait>
   15c40:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:794
        while (1) {
                uint8_t sts = p->tfd.AsUchar;
   15c43:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15c46:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15c49:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:795
                if (sts & 1) {
   15c4c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   15c50:	83 e0 01             	and    eax,0x1
   15c53:	85 c0                	test   eax,eax
   15c55:	0f 84 da 00 00 00    	je     15d35 <ahci_enable_port+0x15e>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:797
                        /* something went wrong! */
                        if (sts == 0x7f) /* no device */
   15c5b:	80 7d ef 7f          	cmp    BYTE PTR [ebp-0x11],0x7f
   15c5f:	0f 84 ef 00 00 00    	je     15d54 <ahci_enable_port+0x17d>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:799
                                break;
                        else if (sts == 0x41 && p->tfd.ERR == 0x20) {
   15c65:	80 7d ef 41          	cmp    BYTE PTR [ebp-0x11],0x41
   15c69:	75 22                	jne    15c8d <ahci_enable_port+0xb6>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:799 (discriminator 1)
   15c6b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15c6e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15c71:	83 e0 01             	and    eax,0x1
   15c74:	0f b6 c0             	movzx  eax,al
   15c77:	83 f8 20             	cmp    eax,0x20
   15c7a:	75 11                	jne    15c8d <ahci_enable_port+0xb6>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:800
                                if (p->sig == SATA_SIG_ATAPI)
   15c7c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15c7f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   15c82:	3d 01 01 14 eb       	cmp    eax,0xeb140101
   15c87:	0f 84 ca 00 00 00    	je     15d57 <ahci_enable_port+0x180>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:804
                                        break; /* no medium */
                        }
                        printk("port%d indicated task file error %x"
                                " while starting up.\n", pt, p->tfd.ERR);
   15c8d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15c90:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15c93:	83 e0 01             	and    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:803
                                break;
                        else if (sts == 0x41 && p->tfd.ERR == 0x20) {
                                if (p->sig == SATA_SIG_ATAPI)
                                        break; /* no medium */
                        }
                        printk("port%d indicated task file error %x"
   15c96:	0f b6 c0             	movzx  eax,al
   15c99:	83 ec 04             	sub    esp,0x4
   15c9c:	50                   	push   eax
   15c9d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   15ca0:	68 60 6d 04 00       	push   0x46d60
   15ca5:	e8 89 13 01 00       	call   27033 <printk>
   15caa:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:805
                                " while starting up.\n", pt, p->tfd.ERR);
                        printd(DEBUG_AHCI,"AHCI: scr1: %x %x\n", p->serr.AsUlong, p->tfd.ERR);
   15cad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15cb0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15cb3:	83 e0 01             	and    eax,0x1
   15cb6:	0f b6 d0             	movzx  edx,al
   15cb9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15cbc:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15cbf:	52                   	push   edx
   15cc0:	50                   	push   eax
   15cc1:	68 98 6d 04 00       	push   0x46d98
   15cc6:	68 00 20 00 00       	push   0x2000
   15ccb:	e8 83 13 01 00       	call   27053 <printd>
   15cd0:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:806
                        printd(DEBUG_AHCI,"AHCI: tfd: %x %x\n", p->tfd.AsUchar, p->tfd.ERR);
   15cd3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15cd6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15cd9:	83 e0 01             	and    eax,0x1
   15cdc:	0f b6 d0             	movzx  edx,al
   15cdf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15ce2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15ce5:	52                   	push   edx
   15ce6:	50                   	push   eax
   15ce7:	68 ab 6d 04 00       	push   0x46dab
   15cec:	68 00 20 00 00       	push   0x2000
   15cf1:	e8 5d 13 01 00       	call   27053 <printd>
   15cf6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:807
                        p->serr.AsUlong = 0xffffffff;
   15cf9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15cfc:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:808
                        if (!reset_ct++) {
   15d03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   15d06:	8d 50 01             	lea    edx,[eax+0x1]
   15d09:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   15d0c:	85 c0                	test   eax,eax
   15d0e:	75 16                	jne    15d26 <ahci_enable_port+0x14f>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:809
                                ahci_port_activate_device(ad, p);
   15d10:	83 ec 08             	sub    esp,0x8
   15d13:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   15d16:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   15d19:	e8 72 fa ff ff       	call   15790 <ahci_port_activate_device>
   15d1e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:810
                                goto Pos1;
   15d21:	e9 f0 fe ff ff       	jmp    15c16 <ahci_enable_port+0x3f>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:811
                        } else if (reset_ct == 1) {
   15d26:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   15d2a:	0f 85 c7 00 00 00    	jne    15df7 <ahci_enable_port+0x220>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:813
                                /*ahci_reset_port(ad->ptr, p);*/
                                goto Pos1;
   15d30:	e9 e1 fe ff ff       	jmp    15c16 <ahci_enable_port+0x3f>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:817
                        } else
                                goto defer;
                }
                if (!(sts & (0x80 | 0x8)))
   15d35:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   15d39:	25 88 00 00 00       	and    eax,0x88
   15d3e:	85 c0                	test   eax,eax
   15d40:	74 18                	je     15d5a <ahci_enable_port+0x183>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:819
                        break;
                wait(50);
   15d42:	83 ec 0c             	sub    esp,0xc
   15d45:	6a 32                	push   0x32
   15d47:	e8 26 25 01 00       	call   28272 <wait>
   15d4c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:820
        }
   15d4f:	e9 ef fe ff ff       	jmp    15c43 <ahci_enable_port+0x6c>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:798
        while (1) {
                uint8_t sts = p->tfd.AsUchar;
                if (sts & 1) {
                        /* something went wrong! */
                        if (sts == 0x7f) /* no device */
                                break;
   15d54:	90                   	nop
   15d55:	eb 04                	jmp    15d5b <ahci_enable_port+0x184>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:801
                        else if (sts == 0x41 && p->tfd.ERR == 0x20) {
                                if (p->sig == SATA_SIG_ATAPI)
                                        break; /* no medium */
   15d57:	90                   	nop
   15d58:	eb 01                	jmp    15d5b <ahci_enable_port+0x184>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:818
                                goto Pos1;
                        } else
                                goto defer;
                }
                if (!(sts & (0x80 | 0x8)))
                        break;
   15d5a:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:823
                wait(50);
        }
 
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
   15d5b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15d5e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15d61:	83 e0 07             	and    eax,0x7
   15d64:	83 f8 03             	cmp    eax,0x3
   15d67:	74 11                	je     15d7a <ahci_enable_port+0x1a3>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:824
                ahci_port_activate_device(ad, p);
   15d69:	83 ec 08             	sub    esp,0x8
   15d6c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   15d6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   15d72:	e8 19 fa ff ff       	call   15790 <ahci_port_activate_device>
   15d77:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:825
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
   15d7a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15d7d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15d80:	25 88 00 00 00       	and    eax,0x88
   15d85:	85 c0                	test   eax,eax
   15d87:	75 71                	jne    15dfa <ahci_enable_port+0x223>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:827
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
   15d89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15d8c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15d8f:	83 e0 07             	and    eax,0x7
   15d92:	83 f8 03             	cmp    eax,0x3
   15d95:	74 30                	je     15dc7 <ahci_enable_port+0x1f0>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:827 (discriminator 1)
   15d97:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15d9a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15d9d:	c1 e8 08             	shr    eax,0x8
   15da0:	83 e0 0f             	and    eax,0xf
   15da3:	3c 02                	cmp    al,0x2
   15da5:	74 20                	je     15dc7 <ahci_enable_port+0x1f0>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:828 (discriminator 2)
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
   15da7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15daa:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15dad:	c1 e8 08             	shr    eax,0x8
   15db0:	83 e0 0f             	and    eax,0xf
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:827 (discriminator 2)
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
                ahci_port_activate_device(ad, p);
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
   15db3:	3c 06                	cmp    al,0x6
   15db5:	74 10                	je     15dc7 <ahci_enable_port+0x1f0>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:828 (discriminator 3)
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
   15db7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15dba:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15dbd:	c1 e8 08             	shr    eax,0x8
   15dc0:	83 e0 0f             	and    eax,0xf
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:827 (discriminator 3)
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
                ahci_port_activate_device(ad, p);
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
   15dc3:	3c 08                	cmp    al,0x8
   15dc5:	75 36                	jne    15dfd <ahci_enable_port+0x226>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:831
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
                goto defer;
        /* we're allowed so set it */
        p->cmd.ST = 1;
   15dc7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15dca:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15dcd:	83 ca 01             	or     edx,0x1
   15dd0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:833
        /* Change in PhyRdy, CPS, TFS.err, PCS, DPS(I=1), UFS, HBFS, HBDS, IFS */
        p->ie.AsUlong = (1 << 22) | (1 << 6) | (1 << 31) | (1 << 30)
   15dd3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15dd6:	c7 40 14 70 00 40 f8 	mov    DWORD PTR [eax+0x14],0xf8400070
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:839
                | (1 << 5) | (1 << 4) | (1 << 29) | (1 << 28) | (1 << 27);
 
        ///* issue the IDENTIFY_(PACKET)_DEVICE command */
        //ahci_issue_command(ad, pt, 0, disk_cmd_identify, 0, 0, NULL, NULL /* wq_worker_ad*/);
 
        printd(DEBUG_AHCI,"AHCI: port %d is now processing commands\n", pt);
   15ddd:	83 ec 04             	sub    esp,0x4
   15de0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   15de3:	68 c0 6d 04 00       	push   0x46dc0
   15de8:	68 00 20 00 00       	push   0x2000
   15ded:	e8 61 12 01 00       	call   27053 <printd>
   15df2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:840
        return;
   15df5:	eb 2c                	jmp    15e23 <ahci_enable_port+0x24c>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:815
                                goto Pos1;
                        } else if (reset_ct == 1) {
                                /*ahci_reset_port(ad->ptr, p);*/
                                goto Pos1;
                        } else
                                goto defer;
   15df7:	90                   	nop
   15df8:	eb 04                	jmp    15dfe <ahci_enable_port+0x227>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:826
 
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
                ahci_port_activate_device(ad, p);
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
                goto defer; /* listen */
   15dfa:	90                   	nop
   15dfb:	eb 01                	jmp    15dfe <ahci_enable_port+0x227>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:829
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
                goto defer;
   15dfd:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:843
 
        printd(DEBUG_AHCI,"AHCI: port %d is now processing commands\n", pt);
        return;
 
defer: /* we're interested in status changes only */
        printd(DEBUG_AHCI,"AHCI: port %d set to listening mode\n", pt);
   15dfe:	83 ec 04             	sub    esp,0x4
   15e01:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   15e04:	68 ec 6d 04 00       	push   0x46dec
   15e09:	68 00 20 00 00       	push   0x2000
   15e0e:	e8 40 12 01 00       	call   27053 <printd>
   15e13:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:844
        p->ie.AsUlong = (1 << 22) | (1 << 31) | (1 << 6); /* PhyRdy change, CPS, CCS */
   15e16:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15e19:	c7 40 14 40 00 40 80 	mov    DWORD PTR [eax+0x14],0x80400040
   15e20:	eb 01                	jmp    15e23 <ahci_enable_port+0x24c>
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:783
        HBA_PORT* p = &ad->ports[pt];
        int reset_ct = 0;
 
        /* skip non-implemented ports */
        if (!(ad->pi & (1 << pt)))
                return;
   15e22:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/block/ahci.c:845
        return;
 
defer: /* we're interested in status changes only */
        printd(DEBUG_AHCI,"AHCI: port %d set to listening mode\n", pt);
        p->ie.AsUlong = (1 << 22) | (1 << 31) | (1 << 6); /* PhyRdy change, CPS, CCS */
}
   15e23:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   15e26:	c9                   	leave  
   15e27:	c3                   	ret    

00015e28 <outl>:
outl():
/home/yogi/NetBeansProjects/chrisOS/include/io.h:32
{
	__asm__ volatile ("outw %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline void outl(unsigned short __port, unsigned int __val)
{
   15e28:	55                   	push   ebp
   15e29:	89 e5                	mov    ebp,esp
   15e2b:	83 ec 04             	sub    esp,0x4
   15e2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   15e31:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/NetBeansProjects/chrisOS/include/io.h:33
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
   15e35:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15e38:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   15e3c:	ef                   	out    dx,eax
/home/yogi/NetBeansProjects/chrisOS/include/io.h:34
}
   15e3d:	90                   	nop
   15e3e:	c9                   	leave  
   15e3f:	c3                   	ret    

00015e40 <inl>:
inl():
/home/yogi/NetBeansProjects/chrisOS/include/io.h:51
	__asm__ volatile ("inw %0, %1" : "=a" (__val) : "dN" (__port));
	return __val;
}

static __inline unsigned int inl(unsigned short __port)
{
   15e40:	55                   	push   ebp
   15e41:	89 e5                	mov    ebp,esp
   15e43:	83 ec 14             	sub    esp,0x14
   15e46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   15e49:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/NetBeansProjects/chrisOS/include/io.h:53
	unsigned int __val;
	__asm__ volatile ("ind %0, %1" : "=a" (__val) : "dN" (__port));
   15e4d:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   15e51:	89 c2                	mov    edx,eax
   15e53:	ed                   	in     eax,dx
   15e54:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/include/io.h:54
	return __val;
   15e57:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/NetBeansProjects/chrisOS/include/io.h:55
}
   15e5a:	c9                   	leave  
   15e5b:	c3                   	ret    

00015e5c <printPCIConfig>:
printPCIConfig():
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:26
extern struct pci_bridge_t* kPCIBridgeHeaders;
extern struct pci_device_t* kPCIDeviceFunctions;
extern uint32_t kDebugLevel;

void printPCIConfig()
{
   15e5c:	55                   	push   ebp
   15e5d:	89 e5                	mov    ebp,esp
   15e5f:	57                   	push   edi
   15e60:	56                   	push   esi
   15e61:	53                   	push   ebx
   15e62:	81 ec dc 00 00 00    	sub    esp,0xdc
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:28
    char buffer[150];
    int totalCnt=0;
   15e68:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:30
    
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
   15e6f:	0f b6 05 ac 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002ac
   15e76:	0f b6 d0             	movzx  edx,al
   15e79:	0f b6 05 ad 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002ad
   15e80:	0f b6 c0             	movzx  eax,al
   15e83:	01 d0                	add    eax,edx
   15e85:	83 ec 08             	sub    esp,0x8
   15e88:	50                   	push   eax
   15e89:	68 b4 23 08 00       	push   0x823b4
   15e8e:	e8 a0 11 01 00       	call   27033 <printk>
   15e93:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:31
    puts("Devices:\n");
   15e96:	83 ec 0c             	sub    esp,0xc
   15e99:	68 db 23 08 00       	push   0x823db
   15e9e:	e8 33 21 00 00       	call   17fd6 <puts>
   15ea3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:32
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
   15ea6:	83 ec 0c             	sub    esp,0xc
   15ea9:	68 e8 23 08 00       	push   0x823e8
   15eae:	e8 80 11 01 00       	call   27033 <printk>
   15eb3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:33
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
   15eb6:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   15ebd:	e9 ed 01 00 00       	jmp    160af <printPCIConfig+0x253>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:37
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
                kPCIDeviceHeaders[cnt].subClass);
   15ec2:	8b 0d b4 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002b4
   15ec8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15ecb:	89 d0                	mov    eax,edx
   15ecd:	c1 e0 02             	shl    eax,0x2
   15ed0:	01 d0                	add    eax,edx
   15ed2:	c1 e0 04             	shl    eax,0x4
   15ed5:	01 c8                	add    eax,ecx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   15ed7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   15eda:	89 85 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   15ee0:	8b 0d b4 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002b4
   15ee6:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15ee9:	89 d0                	mov    eax,edx
   15eeb:	c1 e0 02             	shl    eax,0x2
   15eee:	01 d0                	add    eax,edx
   15ef0:	c1 e0 04             	shl    eax,0x4
   15ef3:	01 c8                	add    eax,ecx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   15ef5:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
   15ef8:	89 b5 30 ff ff ff    	mov    DWORD PTR [ebp-0xd0],esi
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   15efe:	8b 0d b4 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002b4
   15f04:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15f07:	89 d0                	mov    eax,edx
   15f09:	c1 e0 02             	shl    eax,0x2
   15f0c:	01 d0                	add    eax,edx
   15f0e:	c1 e0 04             	shl    eax,0x4
   15f11:	01 c8                	add    eax,ecx
   15f13:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   15f17:	0f b7 f8             	movzx  edi,ax
   15f1a:	89 bd 2c ff ff ff    	mov    DWORD PTR [ebp-0xd4],edi
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   15f20:	8b 0d b4 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002b4
   15f26:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15f29:	89 d0                	mov    eax,edx
   15f2b:	c1 e0 02             	shl    eax,0x2
   15f2e:	01 d0                	add    eax,edx
   15f30:	c1 e0 04             	shl    eax,0x4
   15f33:	01 c8                	add    eax,ecx
   15f35:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   15f39:	0f b7 d8             	movzx  ebx,ax
   15f3c:	89 9d 28 ff ff ff    	mov    DWORD PTR [ebp-0xd8],ebx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   15f42:	8b 0d b4 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002b4
   15f48:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15f4b:	89 d0                	mov    eax,edx
   15f4d:	c1 e0 02             	shl    eax,0x2
   15f50:	01 d0                	add    eax,edx
   15f52:	c1 e0 04             	shl    eax,0x4
   15f55:	01 c8                	add    eax,ecx
   15f57:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   15f5b:	0f b6 c8             	movzx  ecx,al
   15f5e:	89 8d 24 ff ff ff    	mov    DWORD PTR [ebp-0xdc],ecx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   15f64:	8b 0d b4 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002b4
   15f6a:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15f6d:	89 d0                	mov    eax,edx
   15f6f:	c1 e0 02             	shl    eax,0x2
   15f72:	01 d0                	add    eax,edx
   15f74:	c1 e0 04             	shl    eax,0x4
   15f77:	01 c8                	add    eax,ecx
   15f79:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   15f7d:	0f b6 f8             	movzx  edi,al
   15f80:	8b 0d b4 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002b4
   15f86:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15f89:	89 d0                	mov    eax,edx
   15f8b:	c1 e0 02             	shl    eax,0x2
   15f8e:	01 d0                	add    eax,edx
   15f90:	c1 e0 04             	shl    eax,0x4
   15f93:	01 c8                	add    eax,ecx
   15f95:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   15f99:	0f b6 f0             	movzx  esi,al
   15f9c:	8b 0d b4 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002b4
   15fa2:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15fa5:	89 d0                	mov    eax,edx
   15fa7:	c1 e0 02             	shl    eax,0x2
   15faa:	01 d0                	add    eax,edx
   15fac:	c1 e0 04             	shl    eax,0x4
   15faf:	01 c8                	add    eax,ecx
   15fb1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   15fb5:	0f b6 d8             	movzx  ebx,al
   15fb8:	8b 0d b4 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002b4
   15fbe:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15fc1:	89 d0                	mov    eax,edx
   15fc3:	c1 e0 02             	shl    eax,0x2
   15fc6:	01 d0                	add    eax,edx
   15fc8:	c1 e0 04             	shl    eax,0x4
   15fcb:	01 c8                	add    eax,ecx
   15fcd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   15fd0:	0f b6 c0             	movzx  eax,al
   15fd3:	83 ec 08             	sub    esp,0x8
   15fd6:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   15fdc:	ff b5 30 ff ff ff    	push   DWORD PTR [ebp-0xd0]
   15fe2:	ff b5 2c ff ff ff    	push   DWORD PTR [ebp-0xd4]
   15fe8:	ff b5 28 ff ff ff    	push   DWORD PTR [ebp-0xd8]
   15fee:	ff b5 24 ff ff ff    	push   DWORD PTR [ebp-0xdc]
   15ff4:	57                   	push   edi
   15ff5:	56                   	push   esi
   15ff6:	53                   	push   ebx
   15ff7:	50                   	push   eax
   15ff8:	68 24 24 08 00       	push   0x82424
   15ffd:	e8 31 10 01 00       	call   27033 <printk>
   16002:	83 c4 30             	add    esp,0x30
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:40
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
                kPCIDeviceHeaders[cnt].subClass);
        //getVendorLongName(kPCIDeviceHeaders[cnt].vendor, buffer);
        //printk("%s",buffer);
        getDeviceName(kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, buffer);
   16005:	8b 0d b4 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002b4
   1600b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1600e:	89 d0                	mov    eax,edx
   16010:	c1 e0 02             	shl    eax,0x2
   16013:	01 d0                	add    eax,edx
   16015:	c1 e0 04             	shl    eax,0x4
   16018:	01 c8                	add    eax,ecx
   1601a:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   1601e:	0f b7 c8             	movzx  ecx,ax
   16021:	8b 1d b4 02 a0 00    	mov    ebx,DWORD PTR ds:0xa002b4
   16027:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1602a:	89 d0                	mov    eax,edx
   1602c:	c1 e0 02             	shl    eax,0x2
   1602f:	01 d0                	add    eax,edx
   16031:	c1 e0 04             	shl    eax,0x4
   16034:	01 d8                	add    eax,ebx
   16036:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   1603a:	0f b7 c0             	movzx  eax,ax
   1603d:	83 ec 04             	sub    esp,0x4
   16040:	8d 95 42 ff ff ff    	lea    edx,[ebp-0xbe]
   16046:	52                   	push   edx
   16047:	51                   	push   ecx
   16048:	50                   	push   eax
   16049:	e8 63 07 00 00       	call   167b1 <getDeviceName>
   1604e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:41
        strleft(buffer,28);
   16051:	83 ec 08             	sub    esp,0x8
   16054:	6a 1c                	push   0x1c
   16056:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   1605c:	50                   	push   eax
   1605d:	e8 3e 13 01 00       	call   273a0 <strleft>
   16062:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:42
        printk("%s\n",buffer);
   16065:	83 ec 08             	sub    esp,0x8
   16068:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   1606e:	50                   	push   eax
   1606f:	68 58 24 08 00       	push   0x82458
   16074:	e8 ba 0f 01 00       	call   27033 <printk>
   16079:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:43
        totalCnt++;
   1607c:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:44
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
   16080:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   16084:	7e 25                	jle    160ab <printPCIConfig+0x24f>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:44 (discriminator 1)
   16086:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   16089:	8d 58 04             	lea    ebx,[eax+0x4]
   1608c:	e8 86 1e 00 00       	call   17f17 <cursorGetMaxY>
   16091:	89 c1                	mov    ecx,eax
   16093:	89 d8                	mov    eax,ebx
   16095:	99                   	cdq    
   16096:	f7 f9                	idiv   ecx
   16098:	89 d0                	mov    eax,edx
   1609a:	85 c0                	test   eax,eax
   1609c:	75 0d                	jne    160ab <printPCIConfig+0x24f>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:45
            pauseDisplay(false);
   1609e:	83 ec 0c             	sub    esp,0xc
   160a1:	6a 00                	push   0x0
   160a3:	e8 53 f8 00 00       	call   258fb <pauseDisplay>
   160a8:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:33 (discriminator 2)
    int totalCnt=0;
    
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
   160ab:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:33 (discriminator 1)
   160af:	0f b6 05 ac 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002ac
   160b6:	0f b6 c0             	movzx  eax,al
   160b9:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   160bc:	0f 8f 00 fe ff ff    	jg     15ec2 <printPCIConfig+0x66>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:47
        printk("%s\n",buffer);
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }
    puts("Bridges:\n");
   160c2:	83 ec 0c             	sub    esp,0xc
   160c5:	68 5c 24 08 00       	push   0x8245c
   160ca:	e8 07 1f 00 00       	call   17fd6 <puts>
   160cf:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:48
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
   160d2:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   160d9:	e9 ef 01 00 00       	jmp    162cd <printPCIConfig+0x471>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:55
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   160de:	a1 b8 02 a0 00       	mov    eax,ds:0xa002b8
   160e3:	0f b6 40 26          	movzx  eax,BYTE PTR [eax+0x26]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   160e7:	0f b6 c0             	movzx  eax,al
   160ea:	89 85 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:55
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   160f0:	8b 15 b8 02 a0 00    	mov    edx,DWORD PTR ds:0xa002b8
   160f6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   160f9:	6b c0 4e             	imul   eax,eax,0x4e
   160fc:	01 d0                	add    eax,edx
   160fe:	0f b6 40 27          	movzx  eax,BYTE PTR [eax+0x27]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16102:	0f b6 f0             	movzx  esi,al
   16105:	89 b5 30 ff ff ff    	mov    DWORD PTR [ebp-0xd0],esi
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:55
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   1610b:	8b 15 b8 02 a0 00    	mov    edx,DWORD PTR ds:0xa002b8
   16111:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16114:	6b c0 4e             	imul   eax,eax,0x4e
   16117:	01 d0                	add    eax,edx
   16119:	0f b6 40 28          	movzx  eax,BYTE PTR [eax+0x28]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   1611d:	0f b6 f8             	movzx  edi,al
   16120:	89 bd 2c ff ff ff    	mov    DWORD PTR [ebp-0xd4],edi
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:54
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
   16126:	8b 15 b8 02 a0 00    	mov    edx,DWORD PTR ds:0xa002b8
   1612c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1612f:	6b c0 4e             	imul   eax,eax,0x4e
   16132:	01 d0                	add    eax,edx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16134:	8b 58 0d             	mov    ebx,DWORD PTR [eax+0xd]
   16137:	89 9d 28 ff ff ff    	mov    DWORD PTR [ebp-0xd8],ebx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:54
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
   1613d:	8b 15 b8 02 a0 00    	mov    edx,DWORD PTR ds:0xa002b8
   16143:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16146:	6b c0 4e             	imul   eax,eax,0x4e
   16149:	01 d0                	add    eax,edx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   1614b:	8b 48 09             	mov    ecx,DWORD PTR [eax+0x9]
   1614e:	89 8d 24 ff ff ff    	mov    DWORD PTR [ebp-0xdc],ecx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:53
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
   16154:	8b 15 b8 02 a0 00    	mov    edx,DWORD PTR ds:0xa002b8
   1615a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1615d:	6b c0 4e             	imul   eax,eax,0x4e
   16160:	01 d0                	add    eax,edx
   16162:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16166:	0f b7 d0             	movzx  edx,ax
   16169:	89 95 20 ff ff ff    	mov    DWORD PTR [ebp-0xe0],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:53
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
   1616f:	8b 15 b8 02 a0 00    	mov    edx,DWORD PTR ds:0xa002b8
   16175:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16178:	6b c0 4e             	imul   eax,eax,0x4e
   1617b:	01 d0                	add    eax,edx
   1617d:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16181:	0f b7 c0             	movzx  eax,ax
   16184:	89 85 1c ff ff ff    	mov    DWORD PTR [ebp-0xe4],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:52
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
   1618a:	8b 15 b8 02 a0 00    	mov    edx,DWORD PTR ds:0xa002b8
   16190:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16193:	6b c0 4e             	imul   eax,eax,0x4e
   16196:	01 d0                	add    eax,edx
   16198:	0f b6 40 2b          	movzx  eax,BYTE PTR [eax+0x2b]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   1619c:	0f b6 f8             	movzx  edi,al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:52
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
   1619f:	8b 15 b8 02 a0 00    	mov    edx,DWORD PTR ds:0xa002b8
   161a5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   161a8:	6b c0 4e             	imul   eax,eax,0x4e
   161ab:	01 d0                	add    eax,edx
   161ad:	0f b6 40 2a          	movzx  eax,BYTE PTR [eax+0x2a]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   161b1:	0f b6 f0             	movzx  esi,al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:51
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
   161b4:	8b 15 b8 02 a0 00    	mov    edx,DWORD PTR ds:0xa002b8
   161ba:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   161bd:	6b c0 4e             	imul   eax,eax,0x4e
   161c0:	01 d0                	add    eax,edx
   161c2:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   161c6:	0f b6 d8             	movzx  ebx,al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:51
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
   161c9:	8b 15 b8 02 a0 00    	mov    edx,DWORD PTR ds:0xa002b8
   161cf:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   161d2:	6b c0 4e             	imul   eax,eax,0x4e
   161d5:	01 d0                	add    eax,edx
   161d7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   161db:	0f b6 c8             	movzx  ecx,al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:51
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
   161de:	8b 15 b8 02 a0 00    	mov    edx,DWORD PTR ds:0xa002b8
   161e4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   161e7:	6b c0 4e             	imul   eax,eax,0x4e
   161ea:	01 d0                	add    eax,edx
   161ec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   161ef:	0f b6 c0             	movzx  eax,al
   161f2:	83 ec 0c             	sub    esp,0xc
   161f5:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   161fb:	ff b5 30 ff ff ff    	push   DWORD PTR [ebp-0xd0]
   16201:	ff b5 2c ff ff ff    	push   DWORD PTR [ebp-0xd4]
   16207:	ff b5 28 ff ff ff    	push   DWORD PTR [ebp-0xd8]
   1620d:	ff b5 24 ff ff ff    	push   DWORD PTR [ebp-0xdc]
   16213:	ff b5 20 ff ff ff    	push   DWORD PTR [ebp-0xe0]
   16219:	ff b5 1c ff ff ff    	push   DWORD PTR [ebp-0xe4]
   1621f:	57                   	push   edi
   16220:	56                   	push   esi
   16221:	53                   	push   ebx
   16222:	51                   	push   ecx
   16223:	50                   	push   eax
   16224:	68 68 24 08 00       	push   0x82468
   16229:	e8 05 0e 01 00       	call   27033 <printk>
   1622e:	83 c4 40             	add    esp,0x40
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:60
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
        //getVendorLongName(kPCIDeviceHeaders[cnt].vendor, buffer);
        //strleft(buffer,10);
        //printk("%s",buffer);
//        strleft(buffer,20);
        getDeviceName(kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, buffer);
   16231:	8b 15 b8 02 a0 00    	mov    edx,DWORD PTR ds:0xa002b8
   16237:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1623a:	6b c0 4e             	imul   eax,eax,0x4e
   1623d:	01 d0                	add    eax,edx
   1623f:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
   16243:	0f b7 d0             	movzx  edx,ax
   16246:	8b 0d b8 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002b8
   1624c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1624f:	6b c0 4e             	imul   eax,eax,0x4e
   16252:	01 c8                	add    eax,ecx
   16254:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
   16258:	0f b7 c0             	movzx  eax,ax
   1625b:	83 ec 04             	sub    esp,0x4
   1625e:	8d 8d 42 ff ff ff    	lea    ecx,[ebp-0xbe]
   16264:	51                   	push   ecx
   16265:	52                   	push   edx
   16266:	50                   	push   eax
   16267:	e8 45 05 00 00       	call   167b1 <getDeviceName>
   1626c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:61
        strleft(buffer,28);
   1626f:	83 ec 08             	sub    esp,0x8
   16272:	6a 1c                	push   0x1c
   16274:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   1627a:	50                   	push   eax
   1627b:	e8 20 11 01 00       	call   273a0 <strleft>
   16280:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:62
        printk("%s\n",buffer);
   16283:	83 ec 08             	sub    esp,0x8
   16286:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   1628c:	50                   	push   eax
   1628d:	68 58 24 08 00       	push   0x82458
   16292:	e8 9c 0d 01 00       	call   27033 <printk>
   16297:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:63
        totalCnt++;
   1629a:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:64
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
   1629e:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   162a2:	7e 25                	jle    162c9 <printPCIConfig+0x46d>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:64 (discriminator 1)
   162a4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   162a7:	8d 58 04             	lea    ebx,[eax+0x4]
   162aa:	e8 68 1c 00 00       	call   17f17 <cursorGetMaxY>
   162af:	89 c1                	mov    ecx,eax
   162b1:	89 d8                	mov    eax,ebx
   162b3:	99                   	cdq    
   162b4:	f7 f9                	idiv   ecx
   162b6:	89 d0                	mov    eax,edx
   162b8:	85 c0                	test   eax,eax
   162ba:	75 0d                	jne    162c9 <printPCIConfig+0x46d>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:65
            pauseDisplay(false);
   162bc:	83 ec 0c             	sub    esp,0xc
   162bf:	6a 00                	push   0x0
   162c1:	e8 35 f6 00 00       	call   258fb <pauseDisplay>
   162c6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:48 (discriminator 2)
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
   162c9:	83 45 dc 01          	add    DWORD PTR [ebp-0x24],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:48 (discriminator 1)
   162cd:	0f b6 05 ad 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002ad
   162d4:	0f b6 c0             	movzx  eax,al
   162d7:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   162da:	0f 8f fe fd ff ff    	jg     160de <printPCIConfig+0x282>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:67
        printk("%s\n",buffer);
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }   
    puts("Functions:\n");
   162e0:	83 ec 0c             	sub    esp,0xc
   162e3:	68 ac 24 08 00       	push   0x824ac
   162e8:	e8 e9 1c 00 00       	call   17fd6 <puts>
   162ed:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:68
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
   162f0:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
   162f7:	e9 ed 01 00 00       	jmp    164e9 <printPCIConfig+0x68d>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:74
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
                    kPCIDeviceFunctions[cnt].subClass);
   162fc:	8b 0d bc 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002bc
   16302:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16305:	89 d0                	mov    eax,edx
   16307:	c1 e0 02             	shl    eax,0x2
   1630a:	01 d0                	add    eax,edx
   1630c:	c1 e0 04             	shl    eax,0x4
   1630f:	01 c8                	add    eax,ecx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   16311:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   16314:	89 85 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   1631a:	8b 0d bc 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002bc
   16320:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16323:	89 d0                	mov    eax,edx
   16325:	c1 e0 02             	shl    eax,0x2
   16328:	01 d0                	add    eax,edx
   1632a:	c1 e0 04             	shl    eax,0x4
   1632d:	01 c8                	add    eax,ecx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   1632f:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
   16332:	89 b5 30 ff ff ff    	mov    DWORD PTR [ebp-0xd0],esi
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   16338:	8b 0d bc 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002bc
   1633e:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16341:	89 d0                	mov    eax,edx
   16343:	c1 e0 02             	shl    eax,0x2
   16346:	01 d0                	add    eax,edx
   16348:	c1 e0 04             	shl    eax,0x4
   1634b:	01 c8                	add    eax,ecx
   1634d:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   16351:	0f b7 f8             	movzx  edi,ax
   16354:	89 bd 2c ff ff ff    	mov    DWORD PTR [ebp-0xd4],edi
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   1635a:	8b 0d bc 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002bc
   16360:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16363:	89 d0                	mov    eax,edx
   16365:	c1 e0 02             	shl    eax,0x2
   16368:	01 d0                	add    eax,edx
   1636a:	c1 e0 04             	shl    eax,0x4
   1636d:	01 c8                	add    eax,ecx
   1636f:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   16373:	0f b7 d8             	movzx  ebx,ax
   16376:	89 9d 28 ff ff ff    	mov    DWORD PTR [ebp-0xd8],ebx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   1637c:	8b 0d bc 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002bc
   16382:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16385:	89 d0                	mov    eax,edx
   16387:	c1 e0 02             	shl    eax,0x2
   1638a:	01 d0                	add    eax,edx
   1638c:	c1 e0 04             	shl    eax,0x4
   1638f:	01 c8                	add    eax,ecx
   16391:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   16395:	0f b6 c8             	movzx  ecx,al
   16398:	89 8d 24 ff ff ff    	mov    DWORD PTR [ebp-0xdc],ecx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   1639e:	8b 0d bc 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002bc
   163a4:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   163a7:	89 d0                	mov    eax,edx
   163a9:	c1 e0 02             	shl    eax,0x2
   163ac:	01 d0                	add    eax,edx
   163ae:	c1 e0 04             	shl    eax,0x4
   163b1:	01 c8                	add    eax,ecx
   163b3:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   163b7:	0f b6 f8             	movzx  edi,al
   163ba:	8b 0d bc 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002bc
   163c0:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   163c3:	89 d0                	mov    eax,edx
   163c5:	c1 e0 02             	shl    eax,0x2
   163c8:	01 d0                	add    eax,edx
   163ca:	c1 e0 04             	shl    eax,0x4
   163cd:	01 c8                	add    eax,ecx
   163cf:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   163d3:	0f b6 f0             	movzx  esi,al
   163d6:	8b 0d bc 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002bc
   163dc:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   163df:	89 d0                	mov    eax,edx
   163e1:	c1 e0 02             	shl    eax,0x2
   163e4:	01 d0                	add    eax,edx
   163e6:	c1 e0 04             	shl    eax,0x4
   163e9:	01 c8                	add    eax,ecx
   163eb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   163ef:	0f b6 d8             	movzx  ebx,al
   163f2:	8b 0d bc 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002bc
   163f8:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   163fb:	89 d0                	mov    eax,edx
   163fd:	c1 e0 02             	shl    eax,0x2
   16400:	01 d0                	add    eax,edx
   16402:	c1 e0 04             	shl    eax,0x4
   16405:	01 c8                	add    eax,ecx
   16407:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1640a:	0f b6 c0             	movzx  eax,al
   1640d:	83 ec 08             	sub    esp,0x8
   16410:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   16416:	ff b5 30 ff ff ff    	push   DWORD PTR [ebp-0xd0]
   1641c:	ff b5 2c ff ff ff    	push   DWORD PTR [ebp-0xd4]
   16422:	ff b5 28 ff ff ff    	push   DWORD PTR [ebp-0xd8]
   16428:	ff b5 24 ff ff ff    	push   DWORD PTR [ebp-0xdc]
   1642e:	57                   	push   edi
   1642f:	56                   	push   esi
   16430:	53                   	push   ebx
   16431:	50                   	push   eax
   16432:	68 24 24 08 00       	push   0x82424
   16437:	e8 f7 0b 01 00       	call   27033 <printk>
   1643c:	83 c4 30             	add    esp,0x30
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:77
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
                    kPCIDeviceFunctions[cnt].subClass);
            //getVendorLongName(kPCIDeviceFunctions[cnt].vendor, buffer);
            //printk("%s",buffer);
            getDeviceName(kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, buffer);
   1643f:	8b 0d bc 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002bc
   16445:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16448:	89 d0                	mov    eax,edx
   1644a:	c1 e0 02             	shl    eax,0x2
   1644d:	01 d0                	add    eax,edx
   1644f:	c1 e0 04             	shl    eax,0x4
   16452:	01 c8                	add    eax,ecx
   16454:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   16458:	0f b7 c8             	movzx  ecx,ax
   1645b:	8b 1d bc 02 a0 00    	mov    ebx,DWORD PTR ds:0xa002bc
   16461:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16464:	89 d0                	mov    eax,edx
   16466:	c1 e0 02             	shl    eax,0x2
   16469:	01 d0                	add    eax,edx
   1646b:	c1 e0 04             	shl    eax,0x4
   1646e:	01 d8                	add    eax,ebx
   16470:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   16474:	0f b7 c0             	movzx  eax,ax
   16477:	83 ec 04             	sub    esp,0x4
   1647a:	8d 95 42 ff ff ff    	lea    edx,[ebp-0xbe]
   16480:	52                   	push   edx
   16481:	51                   	push   ecx
   16482:	50                   	push   eax
   16483:	e8 29 03 00 00       	call   167b1 <getDeviceName>
   16488:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:78
            strleft(buffer,28);
   1648b:	83 ec 08             	sub    esp,0x8
   1648e:	6a 1c                	push   0x1c
   16490:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   16496:	50                   	push   eax
   16497:	e8 04 0f 01 00       	call   273a0 <strleft>
   1649c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:79
            printk("%s\n",buffer);
   1649f:	83 ec 08             	sub    esp,0x8
   164a2:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   164a8:	50                   	push   eax
   164a9:	68 58 24 08 00       	push   0x82458
   164ae:	e8 80 0b 01 00       	call   27033 <printk>
   164b3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:80
            totalCnt++;
   164b6:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:81
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
   164ba:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   164be:	7e 25                	jle    164e5 <printPCIConfig+0x689>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:81 (discriminator 1)
   164c0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   164c3:	8d 58 04             	lea    ebx,[eax+0x4]
   164c6:	e8 4c 1a 00 00       	call   17f17 <cursorGetMaxY>
   164cb:	89 c1                	mov    ecx,eax
   164cd:	89 d8                	mov    eax,ebx
   164cf:	99                   	cdq    
   164d0:	f7 f9                	idiv   ecx
   164d2:	89 d0                	mov    eax,edx
   164d4:	85 c0                	test   eax,eax
   164d6:	75 0d                	jne    164e5 <printPCIConfig+0x689>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:82
            pauseDisplay(false);
   164d8:	83 ec 0c             	sub    esp,0xc
   164db:	6a 00                	push   0x0
   164dd:	e8 19 f4 00 00       	call   258fb <pauseDisplay>
   164e2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:68 (discriminator 2)
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }   
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
   164e5:	83 45 d8 01          	add    DWORD PTR [ebp-0x28],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:68 (discriminator 1)
   164e9:	0f b6 05 ae 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002ae
   164f0:	0f b6 c0             	movzx  eax,al
   164f3:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
   164f6:	0f 8f 00 fe ff ff    	jg     162fc <printPCIConfig+0x4a0>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:85
            totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
        }
    }
}
   164fc:	90                   	nop
   164fd:	8d 65 f4             	lea    esp,[ebp-0xc]
   16500:	5b                   	pop    ebx
   16501:	5e                   	pop    esi
   16502:	5f                   	pop    edi
   16503:	5d                   	pop    ebp
   16504:	c3                   	ret    

00016505 <pciConfigReadWord>:
pciConfigReadWord():
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:90

//struct pci_device_id* pci_deviceList = (struct pci_device_id*)PCI_DEVICE_LIST_ADDRESS;
  uint16_t pciConfigReadWord (uint8_t bus, uint8_t slot,
                             uint8_t func, uint8_t offset)
 {
   16505:	55                   	push   ebp
   16506:	89 e5                	mov    ebp,esp
   16508:	53                   	push   ebx
   16509:	83 ec 30             	sub    esp,0x30
   1650c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1650f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   16512:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   16515:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   16518:	88 5d d8             	mov    BYTE PTR [ebp-0x28],bl
   1651b:	88 4d d4             	mov    BYTE PTR [ebp-0x2c],cl
   1651e:	88 55 d0             	mov    BYTE PTR [ebp-0x30],dl
   16521:	88 45 cc             	mov    BYTE PTR [ebp-0x34],al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:92
    uint32_t address;
    uint32_t lbus  = (uint32_t)bus;
   16524:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
   16528:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:93
    uint32_t lslot = (uint32_t)slot;
   1652b:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   1652f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:94
    uint32_t lfunc = (uint32_t)func;
   16532:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
   16536:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:95
    uint16_t tmp = 0;
   16539:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:97
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   1653f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   16542:	c1 e0 10             	shl    eax,0x10
   16545:	89 c2                	mov    edx,eax
   16547:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1654a:	c1 e0 0b             	shl    eax,0xb
   1654d:	09 c2                	or     edx,eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:98
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   1654f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16552:	c1 e0 08             	shl    eax,0x8
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:97
    uint32_t lbus  = (uint32_t)bus;
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint16_t tmp = 0;
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   16555:	09 c2                	or     edx,eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:98
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   16557:	0f b6 45 cc          	movzx  eax,BYTE PTR [ebp-0x34]
   1655b:	25 fc 00 00 00       	and    eax,0xfc
   16560:	09 d0                	or     eax,edx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:97
    uint32_t lbus  = (uint32_t)bus;
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint16_t tmp = 0;
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   16562:	0d 00 00 00 80       	or     eax,0x80000000
   16567:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:101
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
 
    /* write out the address */
    outl (0xCF8, address);
   1656a:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1656d:	68 f8 0c 00 00       	push   0xcf8
   16572:	e8 b1 f8 ff ff       	call   15e28 <outl>
   16577:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:104
    /* read in the data */
    /* (offset & 2) * 8) = 0 will choose the first word of the 32 bits register */
    tmp = (uint16_t)((inl (0xCFC) >> ((offset & 2) * 8)) & 0xffff);
   1657a:	68 fc 0c 00 00       	push   0xcfc
   1657f:	e8 bc f8 ff ff       	call   15e40 <inl>
   16584:	83 c4 04             	add    esp,0x4
   16587:	89 c2                	mov    edx,eax
   16589:	0f b6 45 cc          	movzx  eax,BYTE PTR [ebp-0x34]
   1658d:	83 e0 02             	and    eax,0x2
   16590:	c1 e0 03             	shl    eax,0x3
   16593:	89 c1                	mov    ecx,eax
   16595:	d3 ea                	shr    edx,cl
   16597:	89 d0                	mov    eax,edx
   16599:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:105
    return (tmp);
   1659d:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:106
 }
   165a1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   165a4:	c9                   	leave  
   165a5:	c3                   	ret    

000165a6 <pciConfigReadDWord>:
pciConfigReadDWord():
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:110

 uint32_t pciConfigReadDWord (uint8_t bus, uint8_t slot,
                             uint8_t func, uint8_t offset)
 {
   165a6:	55                   	push   ebp
   165a7:	89 e5                	mov    ebp,esp
   165a9:	53                   	push   ebx
   165aa:	83 ec 30             	sub    esp,0x30
   165ad:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   165b0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   165b3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   165b6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   165b9:	88 5d d8             	mov    BYTE PTR [ebp-0x28],bl
   165bc:	88 4d d4             	mov    BYTE PTR [ebp-0x2c],cl
   165bf:	88 55 d0             	mov    BYTE PTR [ebp-0x30],dl
   165c2:	88 45 cc             	mov    BYTE PTR [ebp-0x34],al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:112
    uint32_t address;
    uint32_t lbus  = (uint32_t)bus;
   165c5:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
   165c9:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:113
    uint32_t lslot = (uint32_t)slot;
   165cc:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   165d0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:114
    uint32_t lfunc = (uint32_t)func;
   165d3:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
   165d7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:118
    uint32_t num;
    
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   165da:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   165dd:	c1 e0 10             	shl    eax,0x10
   165e0:	89 c2                	mov    edx,eax
   165e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   165e5:	c1 e0 0b             	shl    eax,0xb
   165e8:	09 c2                	or     edx,eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:119
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   165ea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   165ed:	c1 e0 08             	shl    eax,0x8
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:118
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint32_t num;
    
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   165f0:	09 c2                	or     edx,eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:119
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   165f2:	0f b6 45 cc          	movzx  eax,BYTE PTR [ebp-0x34]
   165f6:	25 fc 00 00 00       	and    eax,0xfc
   165fb:	09 d0                	or     eax,edx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:118
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint32_t num;
    
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   165fd:	0d 00 00 00 80       	or     eax,0x80000000
   16602:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:122
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
 
    /* write out the address */
    outl (0xCF8, address);
   16605:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   16608:	68 f8 0c 00 00       	push   0xcf8
   1660d:	e8 16 f8 ff ff       	call   15e28 <outl>
   16612:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:125
    /* read in the data */
    /* (offset & 2) * 8) = 0 will choose the first word of the 32 bits register */
    num = inl (0xCFC);
   16615:	68 fc 0c 00 00       	push   0xcfc
   1661a:	e8 21 f8 ff ff       	call   15e40 <inl>
   1661f:	83 c4 04             	add    esp,0x4
   16622:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:127
    //return ((num >> 24)) | ((num & 0x0000FF000) << 8) | ((num & 0x00FF0000)>>8) | ((num << 24));
    return num;
   16625:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:128
 }
   16628:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1662b:	c9                   	leave  
   1662c:	c3                   	ret    

0001662d <pciQueryBDF>:
pciQueryBDF():
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:131

 void pciQueryBDF(uint8_t bus, uint8_t device, uint8_t function)
 {
   1662d:	55                   	push   ebp
   1662e:	89 e5                	mov    ebp,esp
   16630:	81 ec b8 00 00 00    	sub    esp,0xb8
   16636:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   16639:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1663c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1663f:	88 8d 54 ff ff ff    	mov    BYTE PTR [ebp-0xac],cl
   16645:	88 95 50 ff ff ff    	mov    BYTE PTR [ebp-0xb0],dl
   1664b:	88 85 4c ff ff ff    	mov    BYTE PTR [ebp-0xb4],al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:135
     struct pci_device_t header;
     struct pci_bridge_t bridge;

     printk("Retrieving info for PCI address %02X:%02X:%02X\n",bus,device,function);
   16651:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   16658:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   1665f:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   16666:	51                   	push   ecx
   16667:	52                   	push   edx
   16668:	50                   	push   eax
   16669:	68 b8 24 08 00       	push   0x824b8
   1666e:	e8 c0 09 01 00       	call   27033 <printk>
   16673:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:136
    if (!getDeviceHeader(&header, bus, device, function))
   16676:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   1667d:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   16684:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   1668b:	51                   	push   ecx
   1668c:	52                   	push   edx
   1668d:	50                   	push   eax
   1668e:	8d 45 a8             	lea    eax,[ebp-0x58]
   16691:	50                   	push   eax
   16692:	e8 bd 02 00 00       	call   16954 <getDeviceHeader>
   16697:	83 c4 10             	add    esp,0x10
   1669a:	83 f0 01             	xor    eax,0x1
   1669d:	84 c0                	test   al,al
   1669f:	74 15                	je     166b6 <pciQueryBDF+0x89>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:138
    {
        printk("No device at that address\n");
   166a1:	83 ec 0c             	sub    esp,0xc
   166a4:	68 e8 24 08 00       	push   0x824e8
   166a9:	e8 85 09 01 00       	call   27033 <printk>
   166ae:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:139
        return;
   166b1:	e9 83 00 00 00       	jmp    16739 <pciQueryBDF+0x10c>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:141
    }
    if (header.vendor==0xFFFF)
   166b6:	0f b7 45 ae          	movzx  eax,WORD PTR [ebp-0x52]
   166ba:	66 83 f8 ff          	cmp    ax,0xffff
   166be:	75 27                	jne    166e7 <pciQueryBDF+0xba>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:143
    {
        printk("Nothing found at %02X:%02X:%02X\n",bus,device,function);
   166c0:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   166c7:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   166ce:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   166d5:	51                   	push   ecx
   166d6:	52                   	push   edx
   166d7:	50                   	push   eax
   166d8:	68 04 25 08 00       	push   0x82504
   166dd:	e8 51 09 01 00       	call   27033 <printk>
   166e2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:144
        return;
   166e5:	eb 52                	jmp    16739 <pciQueryBDF+0x10c>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:146
    }
     if (header.class==0x06)
   166e7:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
   166ea:	83 f8 06             	cmp    eax,0x6
   166ed:	75 3b                	jne    1672a <pciQueryBDF+0xfd>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:148
     {
         getBridgeHeader(&bridge,bus,device,function);
   166ef:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   166f6:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   166fd:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   16704:	51                   	push   ecx
   16705:	52                   	push   edx
   16706:	50                   	push   eax
   16707:	8d 85 5a ff ff ff    	lea    eax,[ebp-0xa6]
   1670d:	50                   	push   eax
   1670e:	e8 27 04 00 00       	call   16b3a <getBridgeHeader>
   16713:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:149
         printPCIBridgeHeader(&bridge);
   16716:	83 ec 0c             	sub    esp,0xc
   16719:	8d 85 5a ff ff ff    	lea    eax,[ebp-0xa6]
   1671f:	50                   	push   eax
   16720:	e8 5d 07 00 00       	call   16e82 <printPCIBridgeHeader>
   16725:	83 c4 10             	add    esp,0x10
   16728:	eb 0f                	jmp    16739 <pciQueryBDF+0x10c>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:152
     }
     else
         printPCIHeader(&header);
   1672a:	83 ec 0c             	sub    esp,0xc
   1672d:	8d 45 a8             	lea    eax,[ebp-0x58]
   16730:	50                   	push   eax
   16731:	e8 a1 09 00 00       	call   170d7 <printPCIHeader>
   16736:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:153
 }
   16739:	c9                   	leave  
   1673a:	c3                   	ret    

0001673b <getVendorLongName>:
getVendorLongName():
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:162
    uint32_t subvendor, subdevice;  // Subsystem ID's or PCI_ANY_ID 
    uint32_t class, class_mask;     // (class,subclass,prog-if) triplet 
    unsigned long driver_data;      // Data private to the driver 
*/
void getVendorLongName(uint32_t vendorID, char* vendorLongName)
{
   1673b:	55                   	push   ebp
   1673c:	89 e5                	mov    ebp,esp
   1673e:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:163
    for (unsigned cnt=0; cnt<PCI_VENTABLE_LEN;cnt++)
   16741:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   16748:	eb 49                	jmp    16793 <getVendorLongName+0x58>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:164
        if (PciVenTable[cnt].VenId == (uint16_t)vendorID)
   1674a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1674d:	89 d0                	mov    eax,edx
   1674f:	01 c0                	add    eax,eax
   16751:	01 d0                	add    eax,edx
   16753:	c1 e0 02             	shl    eax,0x2
   16756:	05 40 8a 02 00       	add    eax,0x28a40
   1675b:	0f b7 00             	movzx  eax,WORD PTR [eax]
   1675e:	0f b7 d0             	movzx  edx,ax
   16761:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16764:	0f b7 c0             	movzx  eax,ax
   16767:	39 c2                	cmp    edx,eax
   16769:	75 24                	jne    1678f <getVendorLongName+0x54>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:166
        {
            strcpy(vendorLongName, PciVenTable[cnt].VenFull);
   1676b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1676e:	89 d0                	mov    eax,edx
   16770:	01 c0                	add    eax,eax
   16772:	01 d0                	add    eax,edx
   16774:	c1 e0 02             	shl    eax,0x2
   16777:	05 48 8a 02 00       	add    eax,0x28a48
   1677c:	8b 00                	mov    eax,DWORD PTR [eax]
   1677e:	83 ec 08             	sub    esp,0x8
   16781:	50                   	push   eax
   16782:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   16785:	e8 0a 0a 01 00       	call   27194 <strcpy>
   1678a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:167
            return;
   1678d:	eb 20                	jmp    167af <getVendorLongName+0x74>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:163 (discriminator 2)
    uint32_t class, class_mask;     // (class,subclass,prog-if) triplet 
    unsigned long driver_data;      // Data private to the driver 
*/
void getVendorLongName(uint32_t vendorID, char* vendorLongName)
{
    for (unsigned cnt=0; cnt<PCI_VENTABLE_LEN;cnt++)
   1678f:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:163 (discriminator 1)
   16793:	81 7d f4 20 06 00 00 	cmp    DWORD PTR [ebp-0xc],0x620
   1679a:	76 ae                	jbe    1674a <getVendorLongName+0xf>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:169
        if (PciVenTable[cnt].VenId == (uint16_t)vendorID)
        {
            strcpy(vendorLongName, PciVenTable[cnt].VenFull);
            return;
        }
    strcpy(vendorLongName,"Not Found");
   1679c:	83 ec 08             	sub    esp,0x8
   1679f:	68 25 25 08 00       	push   0x82525
   167a4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   167a7:	e8 e8 09 01 00       	call   27194 <strcpy>
   167ac:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:170
}
   167af:	c9                   	leave  
   167b0:	c3                   	ret    

000167b1 <getDeviceName>:
getDeviceName():
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:173

void getDeviceName(uint32_t vendorID, uint32_t deviceID, char* deviceName)
{
   167b1:	55                   	push   ebp
   167b2:	89 e5                	mov    ebp,esp
   167b4:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:174
    for (int cnt=0; cnt<7000;cnt++)
   167b7:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   167be:	eb 60                	jmp    16820 <getDeviceName+0x6f>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:175
        if (PciDevTable[cnt].VenId == vendorID && PciDevTable[cnt].DevId==deviceID)
   167c0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   167c3:	89 d0                	mov    eax,edx
   167c5:	01 c0                	add    eax,eax
   167c7:	01 d0                	add    eax,edx
   167c9:	c1 e0 02             	shl    eax,0x2
   167cc:	05 c0 da 02 00       	add    eax,0x2dac0
   167d1:	0f b7 00             	movzx  eax,WORD PTR [eax]
   167d4:	0f b7 c0             	movzx  eax,ax
   167d7:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   167da:	75 40                	jne    1681c <getDeviceName+0x6b>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:175 (discriminator 1)
   167dc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   167df:	89 d0                	mov    eax,edx
   167e1:	01 c0                	add    eax,eax
   167e3:	01 d0                	add    eax,edx
   167e5:	c1 e0 02             	shl    eax,0x2
   167e8:	05 c2 da 02 00       	add    eax,0x2dac2
   167ed:	0f b7 00             	movzx  eax,WORD PTR [eax]
   167f0:	0f b7 c0             	movzx  eax,ax
   167f3:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   167f6:	75 24                	jne    1681c <getDeviceName+0x6b>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:177
        {
            strcpy(deviceName, PciDevTable[cnt].ChipDesc);
   167f8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   167fb:	89 d0                	mov    eax,edx
   167fd:	01 c0                	add    eax,eax
   167ff:	01 d0                	add    eax,edx
   16801:	c1 e0 02             	shl    eax,0x2
   16804:	05 c8 da 02 00       	add    eax,0x2dac8
   16809:	8b 00                	mov    eax,DWORD PTR [eax]
   1680b:	83 ec 08             	sub    esp,0x8
   1680e:	50                   	push   eax
   1680f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   16812:	e8 7d 09 01 00       	call   27194 <strcpy>
   16817:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:178
            return;
   1681a:	eb 20                	jmp    1683c <getDeviceName+0x8b>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:174 (discriminator 2)
    strcpy(vendorLongName,"Not Found");
}

void getDeviceName(uint32_t vendorID, uint32_t deviceID, char* deviceName)
{
    for (int cnt=0; cnt<7000;cnt++)
   1681c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:174 (discriminator 1)
   16820:	81 7d f4 57 1b 00 00 	cmp    DWORD PTR [ebp-0xc],0x1b57
   16827:	7e 97                	jle    167c0 <getDeviceName+0xf>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:180
        if (PciDevTable[cnt].VenId == vendorID && PciDevTable[cnt].DevId==deviceID)
        {
            strcpy(deviceName, PciDevTable[cnt].ChipDesc);
            return;
        }
    strcpy(deviceName,"Not Found");
   16829:	83 ec 08             	sub    esp,0x8
   1682c:	68 25 25 08 00       	push   0x82525
   16831:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   16834:	e8 5b 09 01 00       	call   27194 <strcpy>
   16839:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:181
}
   1683c:	c9                   	leave  
   1683d:	c3                   	ret    

0001683e <getDeviceNameP>:
getDeviceNameP():
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:184

char* getDeviceNameP(struct pci_device_t* node, char* buffer)
{
   1683e:	55                   	push   ebp
   1683f:	89 e5                	mov    ebp,esp
   16841:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:185
    getDeviceName(node->vendor, node->device, buffer);
   16844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16847:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   1684b:	0f b7 d0             	movzx  edx,ax
   1684e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16851:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   16855:	0f b7 c0             	movzx  eax,ax
   16858:	83 ec 04             	sub    esp,0x4
   1685b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1685e:	52                   	push   edx
   1685f:	50                   	push   eax
   16860:	e8 4c ff ff ff       	call   167b1 <getDeviceName>
   16865:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:186
    return buffer;
   16868:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:187
}
   1686b:	c9                   	leave  
   1686c:	c3                   	ret    

0001686d <getClass>:
getClass():
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:190

void getClass(uint8_t class, uint8_t subClass, char BaseDesc[], char SubDesc[] , char ProgDesc[])
{
   1686d:	55                   	push   ebp
   1686e:	89 e5                	mov    ebp,esp
   16870:	83 ec 28             	sub    esp,0x28
   16873:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   16876:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   16879:	88 55 e4             	mov    BYTE PTR [ebp-0x1c],dl
   1687c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:192
    static char notFound[50] = "Not found\0";
    for (unsigned cnt=0;cnt<PCI_DEVTABLE_LEN;cnt++)
   1687f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   16886:	e9 80 00 00 00       	jmp    1690b <getClass+0x9e>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:194
    {
        if (PciClassCodeTable[cnt].BaseClass==class && PciClassCodeTable[cnt].SubClass==subClass /*&& PciClassCodeTable[cnt].ProgIf==prog*/ )
   1688b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1688e:	c1 e0 04             	shl    eax,0x4
   16891:	05 e0 d3 02 00       	add    eax,0x2d3e0
   16896:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   16899:	3a 45 e4             	cmp    al,BYTE PTR [ebp-0x1c]
   1689c:	75 69                	jne    16907 <getClass+0x9a>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:194 (discriminator 1)
   1689e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   168a1:	c1 e0 04             	shl    eax,0x4
   168a4:	05 e1 d3 02 00       	add    eax,0x2d3e1
   168a9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   168ac:	3a 45 e0             	cmp    al,BYTE PTR [ebp-0x20]
   168af:	75 56                	jne    16907 <getClass+0x9a>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:196
        {
            strcpy(BaseDesc,PciClassCodeTable[cnt].BaseDesc);
   168b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   168b4:	c1 e0 04             	shl    eax,0x4
   168b7:	05 e4 d3 02 00       	add    eax,0x2d3e4
   168bc:	8b 00                	mov    eax,DWORD PTR [eax]
   168be:	83 ec 08             	sub    esp,0x8
   168c1:	50                   	push   eax
   168c2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   168c5:	e8 ca 08 01 00       	call   27194 <strcpy>
   168ca:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:197
            strcpy(SubDesc,PciClassCodeTable[cnt].SubDesc);
   168cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   168d0:	c1 e0 04             	shl    eax,0x4
   168d3:	05 e8 d3 02 00       	add    eax,0x2d3e8
   168d8:	8b 00                	mov    eax,DWORD PTR [eax]
   168da:	83 ec 08             	sub    esp,0x8
   168dd:	50                   	push   eax
   168de:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   168e1:	e8 ae 08 01 00       	call   27194 <strcpy>
   168e6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:198
            strcpy(ProgDesc,PciClassCodeTable[cnt].ProgDesc);
   168e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   168ec:	c1 e0 04             	shl    eax,0x4
   168ef:	05 ec d3 02 00       	add    eax,0x2d3ec
   168f4:	8b 00                	mov    eax,DWORD PTR [eax]
   168f6:	83 ec 08             	sub    esp,0x8
   168f9:	50                   	push   eax
   168fa:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   168fd:	e8 92 08 01 00       	call   27194 <strcpy>
   16902:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:199
            return;
   16905:	eb 4b                	jmp    16952 <getClass+0xe5>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:192 (discriminator 2)
}

void getClass(uint8_t class, uint8_t subClass, char BaseDesc[], char SubDesc[] , char ProgDesc[])
{
    static char notFound[50] = "Not found\0";
    for (unsigned cnt=0;cnt<PCI_DEVTABLE_LEN;cnt++)
   16907:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:192 (discriminator 1)
   1690b:	81 7d f4 28 1e 00 00 	cmp    DWORD PTR [ebp-0xc],0x1e28
   16912:	0f 86 73 ff ff ff    	jbe    1688b <getClass+0x1e>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:202
            strcpy(SubDesc,PciClassCodeTable[cnt].SubDesc);
            strcpy(ProgDesc,PciClassCodeTable[cnt].ProgDesc);
            return;
        }
    }
    strcpy(BaseDesc,notFound);
   16918:	83 ec 08             	sub    esp,0x8
   1691b:	68 20 d9 02 00       	push   0x2d920
   16920:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   16923:	e8 6c 08 01 00       	call   27194 <strcpy>
   16928:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:203
    strcpy(SubDesc,notFound);
   1692b:	83 ec 08             	sub    esp,0x8
   1692e:	68 20 d9 02 00       	push   0x2d920
   16933:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   16936:	e8 59 08 01 00       	call   27194 <strcpy>
   1693b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:204
    strcpy(ProgDesc,notFound);
   1693e:	83 ec 08             	sub    esp,0x8
   16941:	68 20 d9 02 00       	push   0x2d920
   16946:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   16949:	e8 46 08 01 00       	call   27194 <strcpy>
   1694e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:205
    return;
   16951:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:206
}
   16952:	c9                   	leave  
   16953:	c3                   	ret    

00016954 <getDeviceHeader>:
getDeviceHeader():
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:209

bool getDeviceHeader(struct pci_device_t* node, uint8_t bus, uint8_t slot, uint8_t func)
{
   16954:	55                   	push   ebp
   16955:	89 e5                	mov    ebp,esp
   16957:	53                   	push   ebx
   16958:	83 ec 24             	sub    esp,0x24
   1695b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   1695e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   16961:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   16964:	88 4d e4             	mov    BYTE PTR [ebp-0x1c],cl
   16967:	88 55 e0             	mov    BYTE PTR [ebp-0x20],dl
   1696a:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:212
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building device header for %u:%u:%u\n",bus,slot,func);
   1696d:	0f b6 4d dc          	movzx  ecx,BYTE PTR [ebp-0x24]
   16971:	0f b6 55 e0          	movzx  edx,BYTE PTR [ebp-0x20]
   16975:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   16979:	83 ec 0c             	sub    esp,0xc
   1697c:	51                   	push   ecx
   1697d:	52                   	push   edx
   1697e:	50                   	push   eax
   1697f:	68 30 25 08 00       	push   0x82530
   16984:	68 00 01 00 00       	push   0x100
   16989:	e8 c5 06 01 00       	call   27053 <printd>
   1698e:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:214
    //Get the entire header
    for (int cnt=0;cnt<16;cnt++)
   16991:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   16998:	e9 6c 01 00 00       	jmp    16b09 <getDeviceHeader+0x1b5>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:216
    {
        value=pciConfigReadDWord(bus, slot, func, cnt*4);
   1699d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   169a0:	c1 e0 02             	shl    eax,0x2
   169a3:	0f b6 d8             	movzx  ebx,al
   169a6:	0f b6 4d dc          	movzx  ecx,BYTE PTR [ebp-0x24]
   169aa:	0f b6 55 e0          	movzx  edx,BYTE PTR [ebp-0x20]
   169ae:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   169b2:	53                   	push   ebx
   169b3:	51                   	push   ecx
   169b4:	52                   	push   edx
   169b5:	50                   	push   eax
   169b6:	e8 eb fb ff ff       	call   165a6 <pciConfigReadDWord>
   169bb:	83 c4 10             	add    esp,0x10
   169be:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:217
        if (value==0xFFFFFFFF)
   169c1:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   169c5:	75 0a                	jne    169d1 <getDeviceHeader+0x7d>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:218
            return false;
   169c7:	b8 00 00 00 00       	mov    eax,0x0
   169cc:	e9 64 01 00 00       	jmp    16b35 <getDeviceHeader+0x1e1>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:219
        switch(cnt)
   169d1:	83 7d f4 0f          	cmp    DWORD PTR [ebp-0xc],0xf
   169d5:	0f 87 2a 01 00 00    	ja     16b05 <getDeviceHeader+0x1b1>
   169db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   169de:	c1 e0 02             	shl    eax,0x2
   169e1:	05 58 25 08 00       	add    eax,0x82558
   169e6:	8b 00                	mov    eax,DWORD PTR [eax]
   169e8:	ff e0                	jmp    eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:222
        {
            case 0:
                node->vendor=value;
   169ea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   169ed:	89 c2                	mov    edx,eax
   169ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   169f2:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:223
                node->device=value >> 16;
   169f6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   169f9:	c1 e8 10             	shr    eax,0x10
   169fc:	89 c2                	mov    edx,eax
   169fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16a01:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:224
                break;
   16a05:	e9 fb 00 00 00       	jmp    16b05 <getDeviceHeader+0x1b1>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:226
            case 1:
                node->command=value&0xFFFF;
   16a0a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16a0d:	89 c2                	mov    edx,eax
   16a0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16a12:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:227
                node->status=value>>16&0xFFFF;
   16a16:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16a19:	c1 e8 10             	shr    eax,0x10
   16a1c:	89 c2                	mov    edx,eax
   16a1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16a21:	66 89 50 4a          	mov    WORD PTR [eax+0x4a],dx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:228
                break;
   16a25:	e9 db 00 00 00       	jmp    16b05 <getDeviceHeader+0x1b1>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:230
            case 2:
                node->class=value >> 24;
   16a2a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16a2d:	c1 e8 18             	shr    eax,0x18
   16a30:	89 c2                	mov    edx,eax
   16a32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16a35:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:231
                node->subClass=(value & 0x00FF0000) >> 16;
   16a38:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16a3b:	25 00 00 ff 00       	and    eax,0xff0000
   16a40:	c1 e8 10             	shr    eax,0x10
   16a43:	89 c2                	mov    edx,eax
   16a45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16a48:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:232
                node->prog=(value & 0x0000FF00) >> 8;
   16a4b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16a4e:	25 00 ff 00 00       	and    eax,0xff00
   16a53:	c1 e8 08             	shr    eax,0x8
   16a56:	89 c2                	mov    edx,eax
   16a58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16a5b:	88 50 18             	mov    BYTE PTR [eax+0x18],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:233
                break;
   16a5e:	e9 a2 00 00 00       	jmp    16b05 <getDeviceHeader+0x1b1>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:235
            case 3:
                node->headerType=(value >> 16) & 0x7f;
   16a63:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16a66:	c1 e8 10             	shr    eax,0x10
   16a69:	83 e0 7f             	and    eax,0x7f
   16a6c:	89 c2                	mov    edx,eax
   16a6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16a71:	88 50 03             	mov    BYTE PTR [eax+0x3],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:236
                node->multiFunction=(value & 0x00800000)==0x00800000;
   16a74:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16a77:	25 00 00 80 00       	and    eax,0x800000
   16a7c:	85 c0                	test   eax,eax
   16a7e:	0f 95 c2             	setne  dl
   16a81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16a84:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:237
                node->cacheSize=value&0xFF;
   16a87:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16a8a:	89 c2                	mov    edx,eax
   16a8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16a8f:	88 50 41             	mov    BYTE PTR [eax+0x41],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:238
                node->latencyTimer=value>>8;
   16a92:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16a95:	c1 e8 08             	shr    eax,0x8
   16a98:	89 c2                	mov    edx,eax
   16a9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16a9d:	88 50 40             	mov    BYTE PTR [eax+0x40],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:239
                break;
   16aa0:	eb 63                	jmp    16b05 <getDeviceHeader+0x1b1>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:241
            case 4: case 5: case 6: case 7: case 8: case 9:
                node->baseAdd[cnt+1-5]=value;
   16aa2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16aa5:	8d 50 fc             	lea    edx,[eax-0x4]
   16aa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16aab:	8d 4a 08             	lea    ecx,[edx+0x8]
   16aae:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   16ab1:	89 14 88             	mov    DWORD PTR [eax+ecx*4],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:242
                break;
   16ab4:	eb 4f                	jmp    16b05 <getDeviceHeader+0x1b1>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:244
            case 11:
                node->subdevice=value >> 16;
   16ab6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16ab9:	c1 e8 10             	shr    eax,0x10
   16abc:	89 c2                	mov    edx,eax
   16abe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ac1:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:245
                node->subvendor=value & 0xFFFF;
   16ac5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16ac8:	89 c2                	mov    edx,eax
   16aca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16acd:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:246
                break;
   16ad1:	eb 32                	jmp    16b05 <getDeviceHeader+0x1b1>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:248
            case 12:
                node->expROMAddress=value;
   16ad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ad6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   16ad9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:249
                break;
   16adc:	eb 27                	jmp    16b05 <getDeviceHeader+0x1b1>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:251
            case 13:
                node->caps = value & 0xFF;
   16ade:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16ae1:	89 c2                	mov    edx,eax
   16ae3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ae6:	88 50 3c             	mov    BYTE PTR [eax+0x3c],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:252
                break;
   16ae9:	eb 1a                	jmp    16b05 <getDeviceHeader+0x1b1>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:254
            case 15:
                node->interrupt_line=value&0xFF;
   16aeb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16aee:	89 c2                	mov    edx,eax
   16af0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16af3:	88 50 3d             	mov    BYTE PTR [eax+0x3d],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:255
                node->interrupt_pin=(value >> 8)&0xFF;
   16af6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16af9:	c1 e8 08             	shr    eax,0x8
   16afc:	89 c2                	mov    edx,eax
   16afe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b01:	88 50 3e             	mov    BYTE PTR [eax+0x3e],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:256
                break;
   16b04:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:214 (discriminator 2)
{
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building device header for %u:%u:%u\n",bus,slot,func);
    //Get the entire header
    for (int cnt=0;cnt<16;cnt++)
   16b05:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:214 (discriminator 1)
   16b09:	83 7d f4 0f          	cmp    DWORD PTR [ebp-0xc],0xf
   16b0d:	0f 8e 8a fe ff ff    	jle    1699d <getDeviceHeader+0x49>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:259
                node->interrupt_line=value&0xFF;
                node->interrupt_pin=(value >> 8)&0xFF;
                break;
        }
    }
    node->busNo=bus;
   16b13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b16:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
   16b1a:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:260
    node->deviceNo=slot;
   16b1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b1f:	0f b6 55 e0          	movzx  edx,BYTE PTR [ebp-0x20]
   16b23:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:261
    node->funcNo=func;
   16b26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b29:	0f b6 55 dc          	movzx  edx,BYTE PTR [ebp-0x24]
   16b2d:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:262
    return true;
   16b30:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:263
}
   16b35:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   16b38:	c9                   	leave  
   16b39:	c3                   	ret    

00016b3a <getBridgeHeader>:
getBridgeHeader():
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:266

bool getBridgeHeader(struct pci_bridge_t* node, uint8_t bus, uint8_t slot, uint8_t func)
{
   16b3a:	55                   	push   ebp
   16b3b:	89 e5                	mov    ebp,esp
   16b3d:	57                   	push   edi
   16b3e:	56                   	push   esi
   16b3f:	53                   	push   ebx
   16b40:	83 ec 4c             	sub    esp,0x4c
   16b43:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   16b46:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   16b49:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   16b4c:	88 4d d4             	mov    BYTE PTR [ebp-0x2c],cl
   16b4f:	88 55 d0             	mov    BYTE PTR [ebp-0x30],dl
   16b52:	88 45 cc             	mov    BYTE PTR [ebp-0x34],al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:269
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building bridge header for %u:%u:%u\n",bus,slot,func);
   16b55:	0f b6 4d cc          	movzx  ecx,BYTE PTR [ebp-0x34]
   16b59:	0f b6 55 d0          	movzx  edx,BYTE PTR [ebp-0x30]
   16b5d:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   16b61:	83 ec 0c             	sub    esp,0xc
   16b64:	51                   	push   ecx
   16b65:	52                   	push   edx
   16b66:	50                   	push   eax
   16b67:	68 98 25 08 00       	push   0x82598
   16b6c:	68 00 01 00 00       	push   0x100
   16b71:	e8 dd 04 01 00       	call   27053 <printd>
   16b76:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:271
    //Get the entire header
    for (int cnt=0;cnt<14;cnt++)
   16b79:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   16b80:	e9 c9 02 00 00       	jmp    16e4e <getBridgeHeader+0x314>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:273
    {
        value=pciConfigReadDWord(bus, slot, func, cnt*4);
   16b85:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   16b88:	c1 e0 02             	shl    eax,0x2
   16b8b:	0f b6 d8             	movzx  ebx,al
   16b8e:	0f b6 4d cc          	movzx  ecx,BYTE PTR [ebp-0x34]
   16b92:	0f b6 55 d0          	movzx  edx,BYTE PTR [ebp-0x30]
   16b96:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   16b9a:	53                   	push   ebx
   16b9b:	51                   	push   ecx
   16b9c:	52                   	push   edx
   16b9d:	50                   	push   eax
   16b9e:	e8 03 fa ff ff       	call   165a6 <pciConfigReadDWord>
   16ba3:	83 c4 10             	add    esp,0x10
   16ba6:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:274
        if (value==0xFFFFFFFF)
   16ba9:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
   16bad:	75 0a                	jne    16bb9 <getBridgeHeader+0x7f>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:275
            return false;
   16baf:	b8 00 00 00 00       	mov    eax,0x0
   16bb4:	e9 c1 02 00 00       	jmp    16e7a <getBridgeHeader+0x340>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:276
        switch(cnt)
   16bb9:	83 7d e4 0f          	cmp    DWORD PTR [ebp-0x1c],0xf
   16bbd:	0f 87 87 02 00 00    	ja     16e4a <getBridgeHeader+0x310>
   16bc3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   16bc6:	c1 e0 02             	shl    eax,0x2
   16bc9:	05 c0 25 08 00       	add    eax,0x825c0
   16bce:	8b 00                	mov    eax,DWORD PTR [eax]
   16bd0:	ff e0                	jmp    eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:279
        {
            case 0:
                node->vendor=value;
   16bd2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16bd5:	89 c2                	mov    edx,eax
   16bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16bda:	66 89 50 05          	mov    WORD PTR [eax+0x5],dx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:280
                node->device=value >> 16;
   16bde:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16be1:	c1 e8 10             	shr    eax,0x10
   16be4:	89 c2                	mov    edx,eax
   16be6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16be9:	66 89 50 07          	mov    WORD PTR [eax+0x7],dx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:281
                break;
   16bed:	e9 58 02 00 00       	jmp    16e4a <getBridgeHeader+0x310>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:283
            case 1:
                node->command=value&0xFFFF;
   16bf2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16bf5:	89 c2                	mov    edx,eax
   16bf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16bfa:	66 89 50 3a          	mov    WORD PTR [eax+0x3a],dx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:284
                node->status=value>>16&0xFFFF;
   16bfe:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16c01:	c1 e8 10             	shr    eax,0x10
   16c04:	89 c2                	mov    edx,eax
   16c06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16c09:	66 89 50 38          	mov    WORD PTR [eax+0x38],dx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:285
                break;
   16c0d:	e9 38 02 00 00       	jmp    16e4a <getBridgeHeader+0x310>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:287
            case 2:
                node->class=value >> 24;
   16c12:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16c15:	c1 e8 18             	shr    eax,0x18
   16c18:	89 c2                	mov    edx,eax
   16c1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16c1d:	89 50 09             	mov    DWORD PTR [eax+0x9],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:288
                node->subClass=(value & 0x00FF0000) >> 16;
   16c20:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16c23:	25 00 00 ff 00       	and    eax,0xff0000
   16c28:	c1 e8 10             	shr    eax,0x10
   16c2b:	89 c2                	mov    edx,eax
   16c2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16c30:	89 50 0d             	mov    DWORD PTR [eax+0xd],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:289
                node->prog=(value & 0x0000FF00) >> 8;
   16c33:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16c36:	25 00 ff 00 00       	and    eax,0xff00
   16c3b:	c1 e8 08             	shr    eax,0x8
   16c3e:	89 c2                	mov    edx,eax
   16c40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16c43:	88 50 11             	mov    BYTE PTR [eax+0x11],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:290
                break;
   16c46:	e9 ff 01 00 00       	jmp    16e4a <getBridgeHeader+0x310>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:292
            case 3:
                node->headerType=(value >> 16) & 0x7f;
   16c4b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16c4e:	c1 e8 10             	shr    eax,0x10
   16c51:	83 e0 7f             	and    eax,0x7f
   16c54:	89 c2                	mov    edx,eax
   16c56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16c59:	88 50 03             	mov    BYTE PTR [eax+0x3],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:293
                node->multiFunction=(value & 0x00800000)==0x00800000;
   16c5c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16c5f:	25 00 00 80 00       	and    eax,0x800000
   16c64:	85 c0                	test   eax,eax
   16c66:	0f 95 c2             	setne  dl
   16c69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16c6c:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:294
                node->cacheSize=value&0xFF;
   16c6f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16c72:	89 c2                	mov    edx,eax
   16c74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16c77:	88 50 2e             	mov    BYTE PTR [eax+0x2e],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:295
                node->latencyTimer=value>>8;
   16c7a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16c7d:	c1 e8 08             	shr    eax,0x8
   16c80:	89 c2                	mov    edx,eax
   16c82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16c85:	88 50 2d             	mov    BYTE PTR [eax+0x2d],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:296
                break;
   16c88:	e9 bd 01 00 00       	jmp    16e4a <getBridgeHeader+0x310>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:298
            case 4: 
                node->baseAdd[0]=value;
   16c8d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   16c90:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16c93:	89 42 12             	mov    DWORD PTR [edx+0x12],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:299
                break;
   16c96:	e9 af 01 00 00       	jmp    16e4a <getBridgeHeader+0x310>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:301
            case 5:
                node->baseAdd[1]=value;
   16c9b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   16c9e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16ca1:	89 42 16             	mov    DWORD PTR [edx+0x16],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:302
                break;
   16ca4:	e9 a1 01 00 00       	jmp    16e4a <getBridgeHeader+0x310>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:304
            case 6:
                node->secLatencyTimer=(value>>24);
   16ca9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16cac:	c1 e8 18             	shr    eax,0x18
   16caf:	89 c2                	mov    edx,eax
   16cb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16cb4:	88 50 31             	mov    BYTE PTR [eax+0x31],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:305
                node->subordinateBusNum=(value>>16) & 0xFF;
   16cb7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16cba:	c1 e8 10             	shr    eax,0x10
   16cbd:	89 c2                	mov    edx,eax
   16cbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16cc2:	88 50 28             	mov    BYTE PTR [eax+0x28],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:306
                node->secondaryBusNum=(value >> 8) & 0xFF;
   16cc5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16cc8:	c1 e8 08             	shr    eax,0x8
   16ccb:	89 c2                	mov    edx,eax
   16ccd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16cd0:	88 50 26             	mov    BYTE PTR [eax+0x26],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:307
                node->primaryBusNum=value & 0xFF;
   16cd3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16cd6:	89 c2                	mov    edx,eax
   16cd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16cdb:	88 50 27             	mov    BYTE PTR [eax+0x27],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:309
                //printk("pr:se:su %02X:%02X:%02X\n", node->primaryBusNum, node->secondaryBusNum, node->subordinateBusNum);
                break;
   16cde:	e9 67 01 00 00       	jmp    16e4a <getBridgeHeader+0x310>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:311
            case 7:
                node->secStatus=(value>>16);
   16ce3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16ce6:	c1 e8 10             	shr    eax,0x10
   16ce9:	89 c2                	mov    edx,eax
   16ceb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16cee:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:312
                node->ioLimit=(value>>8)&0xFF;
   16cf2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16cf5:	c1 e8 08             	shr    eax,0x8
   16cf8:	0f b6 d0             	movzx  edx,al
   16cfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16cfe:	89 50 1e             	mov    DWORD PTR [eax+0x1e],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:313
                node->ioBase=value&0xFF;
   16d01:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d04:	0f b6 d0             	movzx  edx,al
   16d07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d0a:	89 50 22             	mov    DWORD PTR [eax+0x22],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:314
                break;
   16d0d:	e9 38 01 00 00       	jmp    16e4a <getBridgeHeader+0x310>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:316
            case 8:
                node->memoryLimit=value>>16;
   16d12:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d15:	c1 e8 10             	shr    eax,0x10
   16d18:	89 c2                	mov    edx,eax
   16d1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d1d:	66 89 50 36          	mov    WORD PTR [eax+0x36],dx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:317
                node->memoryBase=value;
   16d21:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d24:	89 c2                	mov    edx,eax
   16d26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d29:	66 89 50 34          	mov    WORD PTR [eax+0x34],dx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:318
                break;
   16d2d:	e9 18 01 00 00       	jmp    16e4a <getBridgeHeader+0x310>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:320
            case 9:
                node->prefMemLimit=value>>16;
   16d32:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d35:	c1 e8 10             	shr    eax,0x10
   16d38:	ba 00 00 00 00       	mov    edx,0x0
   16d3d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   16d40:	89 41 3e             	mov    DWORD PTR [ecx+0x3e],eax
   16d43:	89 51 42             	mov    DWORD PTR [ecx+0x42],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:321
                node->prefMemBase=value&0xFFFF;
   16d46:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d49:	ba 00 00 00 00       	mov    edx,0x0
   16d4e:	0f b7 d8             	movzx  ebx,ax
   16d51:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
   16d54:	89 d0                	mov    eax,edx
   16d56:	83 e0 00             	and    eax,0x0
   16d59:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
   16d5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d5f:	8b 5d c0             	mov    ebx,DWORD PTR [ebp-0x40]
   16d62:	8b 75 c4             	mov    esi,DWORD PTR [ebp-0x3c]
   16d65:	89 58 46             	mov    DWORD PTR [eax+0x46],ebx
   16d68:	89 70 4a             	mov    DWORD PTR [eax+0x4a],esi
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:322
                break;
   16d6b:	e9 da 00 00 00       	jmp    16e4a <getBridgeHeader+0x310>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:324
            case 10:
                node->prefMemLimit|=value<<16;
   16d70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d73:	8b 48 3e             	mov    ecx,DWORD PTR [eax+0x3e]
   16d76:	8b 58 42             	mov    ebx,DWORD PTR [eax+0x42]
   16d79:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d7c:	c1 e0 10             	shl    eax,0x10
   16d7f:	ba 00 00 00 00       	mov    edx,0x0
   16d84:	89 cf                	mov    edi,ecx
   16d86:	09 c7                	or     edi,eax
   16d88:	89 7d b8             	mov    DWORD PTR [ebp-0x48],edi
   16d8b:	89 de                	mov    esi,ebx
   16d8d:	09 d6                	or     esi,edx
   16d8f:	89 75 bc             	mov    DWORD PTR [ebp-0x44],esi
   16d92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d95:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
   16d98:	8b 5d bc             	mov    ebx,DWORD PTR [ebp-0x44]
   16d9b:	89 48 3e             	mov    DWORD PTR [eax+0x3e],ecx
   16d9e:	89 58 42             	mov    DWORD PTR [eax+0x42],ebx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:325
                break;
   16da1:	e9 a4 00 00 00       	jmp    16e4a <getBridgeHeader+0x310>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:327
            case 11:
                node->prefMemBase|=value<<16;
   16da6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16da9:	8b 48 46             	mov    ecx,DWORD PTR [eax+0x46]
   16dac:	8b 58 4a             	mov    ebx,DWORD PTR [eax+0x4a]
   16daf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16db2:	c1 e0 10             	shl    eax,0x10
   16db5:	ba 00 00 00 00       	mov    edx,0x0
   16dba:	89 cf                	mov    edi,ecx
   16dbc:	09 c7                	or     edi,eax
   16dbe:	89 7d b0             	mov    DWORD PTR [ebp-0x50],edi
   16dc1:	89 de                	mov    esi,ebx
   16dc3:	09 d6                	or     esi,edx
   16dc5:	89 75 b4             	mov    DWORD PTR [ebp-0x4c],esi
   16dc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16dcb:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
   16dce:	8b 5d b4             	mov    ebx,DWORD PTR [ebp-0x4c]
   16dd1:	89 48 46             	mov    DWORD PTR [eax+0x46],ecx
   16dd4:	89 58 4a             	mov    DWORD PTR [eax+0x4a],ebx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:328
                break;
   16dd7:	eb 71                	jmp    16e4a <getBridgeHeader+0x310>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:330
            case 12:
                node->ioLimit|=(value&0xFFFF0000)>>8;
   16dd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ddc:	8b 50 1e             	mov    edx,DWORD PTR [eax+0x1e]
   16ddf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16de2:	66 b8 00 00          	mov    ax,0x0
   16de6:	c1 e8 08             	shr    eax,0x8
   16de9:	09 c2                	or     edx,eax
   16deb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16dee:	89 50 1e             	mov    DWORD PTR [eax+0x1e],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:331
                node->ioBase|=value&0xFFFF<<8;
   16df1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16df4:	8b 50 22             	mov    edx,DWORD PTR [eax+0x22]
   16df7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16dfa:	25 00 ff ff 00       	and    eax,0xffff00
   16dff:	09 c2                	or     edx,eax
   16e01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e04:	89 50 22             	mov    DWORD PTR [eax+0x22],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:332
                break;
   16e07:	eb 41                	jmp    16e4a <getBridgeHeader+0x310>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:334
            case 13:
                node->caps = value & 0xFF;
   16e09:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16e0c:	89 c2                	mov    edx,eax
   16e0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e11:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:335
                break;
   16e14:	eb 34                	jmp    16e4a <getBridgeHeader+0x310>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:337
            case 14:
                node->expROMAddress=value;
   16e16:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   16e19:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16e1c:	89 42 1a             	mov    DWORD PTR [edx+0x1a],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:338
                break;
   16e1f:	eb 29                	jmp    16e4a <getBridgeHeader+0x310>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:340
            case 15:
                node->interrupt_line=value&0xFF;
   16e21:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16e24:	89 c2                	mov    edx,eax
   16e26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e29:	88 50 2a             	mov    BYTE PTR [eax+0x2a],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:341
                node->interrupt_pin=(value >> 8)&0xFF;
   16e2c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16e2f:	c1 e8 08             	shr    eax,0x8
   16e32:	89 c2                	mov    edx,eax
   16e34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e37:	88 50 2b             	mov    BYTE PTR [eax+0x2b],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:342
                node->bridgeControl=(value>>16)&0xFFFF;
   16e3a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16e3d:	c1 e8 10             	shr    eax,0x10
   16e40:	89 c2                	mov    edx,eax
   16e42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e45:	66 89 50 32          	mov    WORD PTR [eax+0x32],dx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:343
                break;
   16e49:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:271 (discriminator 2)
{
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building bridge header for %u:%u:%u\n",bus,slot,func);
    //Get the entire header
    for (int cnt=0;cnt<14;cnt++)
   16e4a:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:271 (discriminator 1)
   16e4e:	83 7d e4 0d          	cmp    DWORD PTR [ebp-0x1c],0xd
   16e52:	0f 8e 2d fd ff ff    	jle    16b85 <getBridgeHeader+0x4b>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:347
                node->bridgeControl=(value>>16)&0xFFFF;
                break;

        }
    }
    node->busNo=bus;
   16e58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e5b:	0f b6 55 d4          	movzx  edx,BYTE PTR [ebp-0x2c]
   16e5f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:348
    node->deviceNo=slot;
   16e61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e64:	0f b6 55 d0          	movzx  edx,BYTE PTR [ebp-0x30]
   16e68:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:349
    node->funcNo=func;
   16e6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e6e:	0f b6 55 cc          	movzx  edx,BYTE PTR [ebp-0x34]
   16e72:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:350
    return true;
   16e75:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:351
}
   16e7a:	8d 65 f4             	lea    esp,[ebp-0xc]
   16e7d:	5b                   	pop    ebx
   16e7e:	5e                   	pop    esi
   16e7f:	5f                   	pop    edi
   16e80:	5d                   	pop    ebp
   16e81:	c3                   	ret    

00016e82 <printPCIBridgeHeader>:
printPCIBridgeHeader():
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:353
void printPCIBridgeHeader(struct pci_bridge_t* node)
{          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
   16e82:	55                   	push   ebp
   16e83:	89 e5                	mov    ebp,esp
   16e85:	57                   	push   edi
   16e86:	56                   	push   esi
   16e87:	53                   	push   ebx
   16e88:	81 ec ac 06 00 00    	sub    esp,0x6ac
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:356
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
   16e8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e91:	8b 40 0d             	mov    eax,DWORD PTR [eax+0xd]
   16e94:	0f b6 d0             	movzx  edx,al
   16e97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e9a:	8b 40 09             	mov    eax,DWORD PTR [eax+0x9]
   16e9d:	0f b6 c0             	movzx  eax,al
   16ea0:	83 ec 0c             	sub    esp,0xc
   16ea3:	8d 8d 08 fa ff ff    	lea    ecx,[ebp-0x5f8]
   16ea9:	51                   	push   ecx
   16eaa:	8d 8d fc fb ff ff    	lea    ecx,[ebp-0x404]
   16eb0:	51                   	push   ecx
   16eb1:	8d 8d f0 fd ff ff    	lea    ecx,[ebp-0x210]
   16eb7:	51                   	push   ecx
   16eb8:	52                   	push   edx
   16eb9:	50                   	push   eax
   16eba:	e8 ae f9 ff ff       	call   1686d <getClass>
   16ebf:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:357
    printk("Bridge:\n");
   16ec2:	83 ec 0c             	sub    esp,0xc
   16ec5:	68 00 26 08 00       	push   0x82600
   16eca:	e8 64 01 01 00       	call   27033 <printk>
   16ecf:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:358
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
   16ed2:	83 ec 0c             	sub    esp,0xc
   16ed5:	68 e8 23 08 00       	push   0x823e8
   16eda:	e8 54 01 01 00       	call   27033 <printk>
   16edf:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:364
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   16ee2:	a1 b8 02 a0 00       	mov    eax,ds:0xa002b8
   16ee7:	0f b6 40 26          	movzx  eax,BYTE PTR [eax+0x26]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16eeb:	0f b6 f8             	movzx  edi,al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:364
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   16eee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ef1:	0f b6 40 27          	movzx  eax,BYTE PTR [eax+0x27]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16ef5:	0f b6 c0             	movzx  eax,al
   16ef8:	89 85 64 f9 ff ff    	mov    DWORD PTR [ebp-0x69c],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:364
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   16efe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f01:	0f b6 40 28          	movzx  eax,BYTE PTR [eax+0x28]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16f05:	0f b6 d8             	movzx  ebx,al
   16f08:	89 9d 60 f9 ff ff    	mov    DWORD PTR [ebp-0x6a0],ebx
   16f0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f11:	8b 70 0d             	mov    esi,DWORD PTR [eax+0xd]
   16f14:	89 b5 5c f9 ff ff    	mov    DWORD PTR [ebp-0x6a4],esi
   16f1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f1d:	8b 48 09             	mov    ecx,DWORD PTR [eax+0x9]
   16f20:	89 8d 58 f9 ff ff    	mov    DWORD PTR [ebp-0x6a8],ecx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:362
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
   16f26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f29:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16f2d:	0f b7 d0             	movzx  edx,ax
   16f30:	89 95 54 f9 ff ff    	mov    DWORD PTR [ebp-0x6ac],edx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:362
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
   16f36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f39:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16f3d:	0f b7 c0             	movzx  eax,ax
   16f40:	89 85 50 f9 ff ff    	mov    DWORD PTR [ebp-0x6b0],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:361
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
   16f46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f49:	0f b6 40 2b          	movzx  eax,BYTE PTR [eax+0x2b]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16f4d:	0f b6 f0             	movzx  esi,al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:361
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
   16f50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f53:	0f b6 40 2a          	movzx  eax,BYTE PTR [eax+0x2a]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16f57:	0f b6 d8             	movzx  ebx,al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:360
            node->busNo, node->deviceNo, node->funcNo, 
   16f5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f5d:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16f61:	0f b6 c8             	movzx  ecx,al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:360
            node->busNo, node->deviceNo, node->funcNo, 
   16f64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f67:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16f6b:	0f b6 d0             	movzx  edx,al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:360
            node->busNo, node->deviceNo, node->funcNo, 
   16f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f71:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16f74:	0f b6 c0             	movzx  eax,al
   16f77:	83 ec 0c             	sub    esp,0xc
   16f7a:	57                   	push   edi
   16f7b:	ff b5 64 f9 ff ff    	push   DWORD PTR [ebp-0x69c]
   16f81:	ff b5 60 f9 ff ff    	push   DWORD PTR [ebp-0x6a0]
   16f87:	ff b5 5c f9 ff ff    	push   DWORD PTR [ebp-0x6a4]
   16f8d:	ff b5 58 f9 ff ff    	push   DWORD PTR [ebp-0x6a8]
   16f93:	ff b5 54 f9 ff ff    	push   DWORD PTR [ebp-0x6ac]
   16f99:	ff b5 50 f9 ff ff    	push   DWORD PTR [ebp-0x6b0]
   16f9f:	56                   	push   esi
   16fa0:	53                   	push   ebx
   16fa1:	51                   	push   ecx
   16fa2:	52                   	push   edx
   16fa3:	50                   	push   eax
   16fa4:	68 0c 26 08 00       	push   0x8260c
   16fa9:	e8 85 00 01 00       	call   27033 <printk>
   16fae:	83 c4 40             	add    esp,0x40
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:366
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);

    getVendorLongName(node->vendor, tempString);
   16fb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16fb4:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
   16fb8:	0f b7 c0             	movzx  eax,ax
   16fbb:	83 ec 08             	sub    esp,0x8
   16fbe:	8d 95 72 f9 ff ff    	lea    edx,[ebp-0x68e]
   16fc4:	52                   	push   edx
   16fc5:	50                   	push   eax
   16fc6:	e8 70 f7 ff ff       	call   1673b <getVendorLongName>
   16fcb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:367
    printk("Vendor: %s\t",tempString);
   16fce:	83 ec 08             	sub    esp,0x8
   16fd1:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   16fd7:	50                   	push   eax
   16fd8:	68 50 26 08 00       	push   0x82650
   16fdd:	e8 51 00 01 00       	call   27033 <printk>
   16fe2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:368
    getDeviceName(node->vendor, node->device, tempString);
   16fe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16fe8:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
   16fec:	0f b7 d0             	movzx  edx,ax
   16fef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ff2:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
   16ff6:	0f b7 c0             	movzx  eax,ax
   16ff9:	83 ec 04             	sub    esp,0x4
   16ffc:	8d 8d 72 f9 ff ff    	lea    ecx,[ebp-0x68e]
   17002:	51                   	push   ecx
   17003:	52                   	push   edx
   17004:	50                   	push   eax
   17005:	e8 a7 f7 ff ff       	call   167b1 <getDeviceName>
   1700a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:369
    printk("Device: %s\n",tempString);
   1700d:	83 ec 08             	sub    esp,0x8
   17010:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   17016:	50                   	push   eax
   17017:	68 5c 26 08 00       	push   0x8265c
   1701c:	e8 12 00 01 00       	call   27033 <printk>
   17021:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:370
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
   17024:	8d 85 08 fa ff ff    	lea    eax,[ebp-0x5f8]
   1702a:	50                   	push   eax
   1702b:	8d 85 fc fb ff ff    	lea    eax,[ebp-0x404]
   17031:	50                   	push   eax
   17032:	8d 85 f0 fd ff ff    	lea    eax,[ebp-0x210]
   17038:	50                   	push   eax
   17039:	68 68 26 08 00       	push   0x82668
   1703e:	e8 f0 ff 00 00       	call   27033 <printk>
   17043:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:371
    printk("Base addresses:\n");
   17046:	83 ec 0c             	sub    esp,0xc
   17049:	68 89 26 08 00       	push   0x82689
   1704e:	e8 e0 ff 00 00       	call   27033 <printk>
   17053:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:372
    for (int cnt=0;cnt<2;cnt++)
   17056:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   1705d:	eb 25                	jmp    17084 <printPCIBridgeHeader+0x202>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:373 (discriminator 3)
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
   1705f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17062:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   17065:	83 c2 04             	add    edx,0x4
   17068:	8b 44 90 02          	mov    eax,DWORD PTR [eax+edx*4+0x2]
   1706c:	83 ec 04             	sub    esp,0x4
   1706f:	50                   	push   eax
   17070:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   17073:	68 9a 26 08 00       	push   0x8269a
   17078:	e8 b6 ff 00 00       	call   27033 <printk>
   1707d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:372 (discriminator 3)
    printk("Vendor: %s\t",tempString);
    getDeviceName(node->vendor, node->device, tempString);
    printk("Device: %s\n",tempString);
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
    printk("Base addresses:\n");
    for (int cnt=0;cnt<2;cnt++)
   17080:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:372 (discriminator 1)
   17084:	83 7d e4 01          	cmp    DWORD PTR [ebp-0x1c],0x1
   17088:	7e d5                	jle    1705f <printPCIBridgeHeader+0x1dd>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:374
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
    printk("IO Base: 0x%04X\tIO Limit: 0x%04X\n",node->ioBase,node->ioLimit);
   1708a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1708d:	8b 50 1e             	mov    edx,DWORD PTR [eax+0x1e]
   17090:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17093:	8b 40 22             	mov    eax,DWORD PTR [eax+0x22]
   17096:	83 ec 04             	sub    esp,0x4
   17099:	52                   	push   edx
   1709a:	50                   	push   eax
   1709b:	68 ac 26 08 00       	push   0x826ac
   170a0:	e8 8e ff 00 00       	call   27033 <printk>
   170a5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:375
    printk("Command: 0x%04X, Status: 0x%04X\n",node->command,node->status);
   170a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170ab:	0f b7 40 38          	movzx  eax,WORD PTR [eax+0x38]
   170af:	0f b7 d0             	movzx  edx,ax
   170b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170b5:	0f b7 40 3a          	movzx  eax,WORD PTR [eax+0x3a]
   170b9:	0f b7 c0             	movzx  eax,ax
   170bc:	83 ec 04             	sub    esp,0x4
   170bf:	52                   	push   edx
   170c0:	50                   	push   eax
   170c1:	68 d0 26 08 00       	push   0x826d0
   170c6:	e8 68 ff 00 00       	call   27033 <printk>
   170cb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:376
}   
   170ce:	90                   	nop
   170cf:	8d 65 f4             	lea    esp,[ebp-0xc]
   170d2:	5b                   	pop    ebx
   170d3:	5e                   	pop    esi
   170d4:	5f                   	pop    edi
   170d5:	5d                   	pop    ebp
   170d6:	c3                   	ret    

000170d7 <printPCIHeader>:
printPCIHeader():
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:379

void printPCIHeader(struct pci_device_t* node)
{
   170d7:	55                   	push   ebp
   170d8:	89 e5                	mov    ebp,esp
   170da:	57                   	push   edi
   170db:	56                   	push   esi
   170dc:	53                   	push   ebx
   170dd:	81 ec 9c 06 00 00    	sub    esp,0x69c
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:382
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
   170e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170e6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   170e9:	0f b6 d0             	movzx  edx,al
   170ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   170f2:	0f b6 c0             	movzx  eax,al
   170f5:	83 ec 0c             	sub    esp,0xc
   170f8:	8d 8d 08 fa ff ff    	lea    ecx,[ebp-0x5f8]
   170fe:	51                   	push   ecx
   170ff:	8d 8d fc fb ff ff    	lea    ecx,[ebp-0x404]
   17105:	51                   	push   ecx
   17106:	8d 8d f0 fd ff ff    	lea    ecx,[ebp-0x210]
   1710c:	51                   	push   ecx
   1710d:	52                   	push   edx
   1710e:	50                   	push   eax
   1710f:	e8 59 f7 ff ff       	call   1686d <getClass>
   17114:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:386
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
   17117:	83 ec 0c             	sub    esp,0xc
   1711a:	68 f1 26 08 00       	push   0x826f1
   1711f:	e8 0f ff 00 00       	call   27033 <printk>
   17124:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:387
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
   17127:	83 ec 0c             	sub    esp,0xc
   1712a:	68 e8 23 08 00       	push   0x823e8
   1712f:	e8 ff fe 00 00       	call   27033 <printk>
   17134:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:388
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   17137:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1713a:	8b 58 14             	mov    ebx,DWORD PTR [eax+0x14]
   1713d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17140:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   17143:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17146:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   1714a:	0f b7 c0             	movzx  eax,ax
   1714d:	89 85 64 f9 ff ff    	mov    DWORD PTR [ebp-0x69c],eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   17153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17156:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   1715a:	0f b7 f8             	movzx  edi,ax
   1715d:	89 bd 60 f9 ff ff    	mov    DWORD PTR [ebp-0x6a0],edi
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   17163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17166:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   1716a:	0f b6 c8             	movzx  ecx,al
   1716d:	89 8d 5c f9 ff ff    	mov    DWORD PTR [ebp-0x6a4],ecx
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   17173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17176:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   1717a:	0f b6 f8             	movzx  edi,al
   1717d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17180:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   17184:	0f b6 c8             	movzx  ecx,al
   17187:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1718a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1718e:	0f b6 d0             	movzx  edx,al
   17191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17194:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   17197:	0f b6 c0             	movzx  eax,al
   1719a:	83 ec 08             	sub    esp,0x8
   1719d:	53                   	push   ebx
   1719e:	56                   	push   esi
   1719f:	ff b5 64 f9 ff ff    	push   DWORD PTR [ebp-0x69c]
   171a5:	ff b5 60 f9 ff ff    	push   DWORD PTR [ebp-0x6a0]
   171ab:	ff b5 5c f9 ff ff    	push   DWORD PTR [ebp-0x6a4]
   171b1:	57                   	push   edi
   171b2:	51                   	push   ecx
   171b3:	52                   	push   edx
   171b4:	50                   	push   eax
   171b5:	68 fc 26 08 00       	push   0x826fc
   171ba:	e8 74 fe 00 00       	call   27033 <printk>
   171bf:	83 c4 30             	add    esp,0x30
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:391
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
                node->subClass);
    getVendorLongName(node->vendor, tempString);
   171c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171c5:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   171c9:	0f b7 c0             	movzx  eax,ax
   171cc:	83 ec 08             	sub    esp,0x8
   171cf:	8d 95 72 f9 ff ff    	lea    edx,[ebp-0x68e]
   171d5:	52                   	push   edx
   171d6:	50                   	push   eax
   171d7:	e8 5f f5 ff ff       	call   1673b <getVendorLongName>
   171dc:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:392
    printk("Vendor: %s\t",tempString);
   171df:	83 ec 08             	sub    esp,0x8
   171e2:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   171e8:	50                   	push   eax
   171e9:	68 50 26 08 00       	push   0x82650
   171ee:	e8 40 fe 00 00       	call   27033 <printk>
   171f3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:393
    getDeviceName(node->vendor, node->device, tempString);
   171f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171f9:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   171fd:	0f b7 d0             	movzx  edx,ax
   17200:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17203:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   17207:	0f b7 c0             	movzx  eax,ax
   1720a:	83 ec 04             	sub    esp,0x4
   1720d:	8d 8d 72 f9 ff ff    	lea    ecx,[ebp-0x68e]
   17213:	51                   	push   ecx
   17214:	52                   	push   edx
   17215:	50                   	push   eax
   17216:	e8 96 f5 ff ff       	call   167b1 <getDeviceName>
   1721b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:394
    printk("Device: %s\n",tempString);
   1721e:	83 ec 08             	sub    esp,0x8
   17221:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   17227:	50                   	push   eax
   17228:	68 5c 26 08 00       	push   0x8265c
   1722d:	e8 01 fe 00 00       	call   27033 <printk>
   17232:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:395
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
   17235:	8d 85 08 fa ff ff    	lea    eax,[ebp-0x5f8]
   1723b:	50                   	push   eax
   1723c:	8d 85 fc fb ff ff    	lea    eax,[ebp-0x404]
   17242:	50                   	push   eax
   17243:	8d 85 f0 fd ff ff    	lea    eax,[ebp-0x210]
   17249:	50                   	push   eax
   1724a:	68 68 26 08 00       	push   0x82668
   1724f:	e8 df fd 00 00       	call   27033 <printk>
   17254:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:396
    printk("Base addresses:\n");
   17257:	83 ec 0c             	sub    esp,0xc
   1725a:	68 89 26 08 00       	push   0x82689
   1725f:	e8 cf fd 00 00       	call   27033 <printk>
   17264:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:397
    for (int cnt=0;cnt<6;cnt++)
   17267:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   1726e:	eb 24                	jmp    17294 <printPCIHeader+0x1bd>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:398 (discriminator 3)
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
   17270:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17273:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   17276:	83 c2 08             	add    edx,0x8
   17279:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
   1727c:	83 ec 04             	sub    esp,0x4
   1727f:	50                   	push   eax
   17280:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   17283:	68 9a 26 08 00       	push   0x8269a
   17288:	e8 a6 fd 00 00       	call   27033 <printk>
   1728d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:397 (discriminator 3)
    printk("Vendor: %s\t",tempString);
    getDeviceName(node->vendor, node->device, tempString);
    printk("Device: %s\n",tempString);
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
    printk("Base addresses:\n");
    for (int cnt=0;cnt<6;cnt++)
   17290:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:397 (discriminator 1)
   17294:	83 7d e4 05          	cmp    DWORD PTR [ebp-0x1c],0x5
   17298:	7e d6                	jle    17270 <printPCIHeader+0x199>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:399
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
    printk("Subsystem: %04X\tSubsys Vendor: %04X\n",node->subdevice,node->subvendor);
   1729a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1729d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
   172a1:	0f b7 d0             	movzx  edx,ax
   172a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   172a7:	0f b7 40 0c          	movzx  eax,WORD PTR [eax+0xc]
   172ab:	0f b7 c0             	movzx  eax,ax
   172ae:	83 ec 04             	sub    esp,0x4
   172b1:	52                   	push   edx
   172b2:	50                   	push   eax
   172b3:	68 34 27 08 00       	push   0x82734
   172b8:	e8 76 fd 00 00       	call   27033 <printk>
   172bd:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:400
    printk("Command: 0x%04X, Status: 0x%04X\n",node->command,node->status);
   172c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   172c3:	0f b7 40 4a          	movzx  eax,WORD PTR [eax+0x4a]
   172c7:	0f b7 d0             	movzx  edx,ax
   172ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   172cd:	0f b7 40 4c          	movzx  eax,WORD PTR [eax+0x4c]
   172d1:	0f b7 c0             	movzx  eax,ax
   172d4:	83 ec 04             	sub    esp,0x4
   172d7:	52                   	push   edx
   172d8:	50                   	push   eax
   172d9:	68 d0 26 08 00       	push   0x826d0
   172de:	e8 50 fd 00 00       	call   27033 <printk>
   172e3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:401
    printk("Interrupt Pin/Line: 0x%04X/0x%04X\n",node->interrupt_pin,node->interrupt_line);
   172e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   172e9:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
   172ed:	0f b6 d0             	movzx  edx,al
   172f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   172f3:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
   172f7:	0f b6 c0             	movzx  eax,al
   172fa:	83 ec 04             	sub    esp,0x4
   172fd:	52                   	push   edx
   172fe:	50                   	push   eax
   172ff:	68 5c 27 08 00       	push   0x8275c
   17304:	e8 2a fd 00 00       	call   27033 <printk>
   17309:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:402
}
   1730c:	90                   	nop
   1730d:	8d 65 f4             	lea    esp,[ebp-0xc]
   17310:	5b                   	pop    ebx
   17311:	5e                   	pop    esi
   17312:	5f                   	pop    edi
   17313:	5d                   	pop    ebp
   17314:	c3                   	ret    

00017315 <addFunction>:
addFunction():
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:404
void addFunction(struct pci_device_t* node)
{
   17315:	55                   	push   ebp
   17316:	89 e5                	mov    ebp,esp
   17318:	53                   	push   ebx
   17319:	83 ec 04             	sub    esp,0x4
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:405
    printd(DEBUG_PCI_DISCOVERY,"\t\t\t\tFound function: deviceID: %04X, vendorID: %04X, class: %04X, subclass %04X:%04X\n", node->device, node->vendor, node->class, node->subClass);
   1731c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1731f:	8b 58 14             	mov    ebx,DWORD PTR [eax+0x14]
   17322:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17325:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   17328:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1732b:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   1732f:	0f b7 d0             	movzx  edx,ax
   17332:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17335:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   17339:	0f b7 c0             	movzx  eax,ax
   1733c:	83 ec 08             	sub    esp,0x8
   1733f:	53                   	push   ebx
   17340:	51                   	push   ecx
   17341:	52                   	push   edx
   17342:	50                   	push   eax
   17343:	68 80 27 08 00       	push   0x82780
   17348:	68 00 01 00 00       	push   0x100
   1734d:	e8 01 fd 00 00       	call   27053 <printd>
   17352:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:406
    memcpy(&kPCIDeviceFunctions[kPCIFunctionCount++],node,sizeof(struct pci_bridge_t));
   17355:	8b 0d bc 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002bc
   1735b:	0f b6 05 ae 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002ae
   17362:	8d 50 01             	lea    edx,[eax+0x1]
   17365:	88 15 ae 02 a0 00    	mov    BYTE PTR ds:0xa002ae,dl
   1736b:	0f b6 d0             	movzx  edx,al
   1736e:	89 d0                	mov    eax,edx
   17370:	c1 e0 02             	shl    eax,0x2
   17373:	01 d0                	add    eax,edx
   17375:	c1 e0 04             	shl    eax,0x4
   17378:	01 c8                	add    eax,ecx
   1737a:	83 ec 04             	sub    esp,0x4
   1737d:	6a 4e                	push   0x4e
   1737f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   17382:	50                   	push   eax
   17383:	e8 18 e6 00 00       	call   259a0 <memcpy>
   17388:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:407
    printd(DEBUG_PCI_DISCOVERY,"\t\t\t\tFunction entry created\n");
   1738b:	83 ec 08             	sub    esp,0x8
   1738e:	68 d5 27 08 00       	push   0x827d5
   17393:	68 00 01 00 00       	push   0x100
   17398:	e8 b6 fc 00 00       	call   27053 <printd>
   1739d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:408
}
   173a0:	90                   	nop
   173a1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   173a4:	c9                   	leave  
   173a5:	c3                   	ret    

000173a6 <addBridge>:
addBridge():
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:410
void addBridge(struct pci_device_t* node, uint8_t bus, uint8_t device, uint8_t function)
{
   173a6:	55                   	push   ebp
   173a7:	89 e5                	mov    ebp,esp
   173a9:	57                   	push   edi
   173aa:	56                   	push   esi
   173ab:	53                   	push   ebx
   173ac:	81 ec cc 00 00 00    	sub    esp,0xcc
   173b2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   173b5:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   173b8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   173bb:	88 8d 44 ff ff ff    	mov    BYTE PTR [ebp-0xbc],cl
   173c1:	88 95 40 ff ff ff    	mov    BYTE PTR [ebp-0xc0],dl
   173c7:	88 85 3c ff ff ff    	mov    BYTE PTR [ebp-0xc4],al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:414
    struct pci_device_t newNode;
    struct pci_bridge_t bridge;
    //int lastSubBridgeNum=0;
    getBridgeHeader(&bridge, bus, device, function);
   173cd:	0f b6 8d 3c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xc4]
   173d4:	0f b6 95 40 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xc0]
   173db:	0f b6 85 44 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xbc]
   173e2:	51                   	push   ecx
   173e3:	52                   	push   edx
   173e4:	50                   	push   eax
   173e5:	8d 85 4a ff ff ff    	lea    eax,[ebp-0xb6]
   173eb:	50                   	push   eax
   173ec:	e8 49 f7 ff ff       	call   16b3a <getBridgeHeader>
   173f1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:415
    if (bridge.vendor==0xFFFF)
   173f4:	0f b7 85 4f ff ff ff 	movzx  eax,WORD PTR [ebp-0xb1]
   173fb:	66 83 f8 ff          	cmp    ax,0xffff
   173ff:	0f 84 0e 01 00 00    	je     17513 <addBridge+0x16d>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:418
        return;
    //         bridge.busNo=bus;bridge.deviceNo=device;bridge.funcNo=function;
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tFound bridge on %02X:%02X:%02X,Cls#%02XpBus#%02X,sBus#%02X,suBus# %02X,MF=%u\n",bus, device, function, bridge.class, bridge.primaryBusNum, bridge.secondaryBusNum, bridge.subordinateBusNum, bridge.multiFunction);
   17405:	0f b6 85 4e ff ff ff 	movzx  eax,BYTE PTR [ebp-0xb2]
   1740c:	0f b6 d0             	movzx  edx,al
   1740f:	0f b6 85 72 ff ff ff 	movzx  eax,BYTE PTR [ebp-0x8e]
   17416:	0f b6 c0             	movzx  eax,al
   17419:	89 85 38 ff ff ff    	mov    DWORD PTR [ebp-0xc8],eax
   1741f:	0f b6 85 70 ff ff ff 	movzx  eax,BYTE PTR [ebp-0x90]
   17426:	0f b6 f0             	movzx  esi,al
   17429:	89 b5 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],esi
   1742f:	0f b6 85 71 ff ff ff 	movzx  eax,BYTE PTR [ebp-0x8f]
   17436:	0f b6 f8             	movzx  edi,al
   17439:	8b b5 53 ff ff ff    	mov    esi,DWORD PTR [ebp-0xad]
   1743f:	0f b6 9d 3c ff ff ff 	movzx  ebx,BYTE PTR [ebp-0xc4]
   17446:	0f b6 8d 40 ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xc0]
   1744d:	0f b6 85 44 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xbc]
   17454:	83 ec 08             	sub    esp,0x8
   17457:	52                   	push   edx
   17458:	ff b5 38 ff ff ff    	push   DWORD PTR [ebp-0xc8]
   1745e:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   17464:	57                   	push   edi
   17465:	56                   	push   esi
   17466:	53                   	push   ebx
   17467:	51                   	push   ecx
   17468:	50                   	push   eax
   17469:	68 f4 27 08 00       	push   0x827f4
   1746e:	68 00 01 00 00       	push   0x100
   17473:	e8 db fb 00 00       	call   27053 <printd>
   17478:	83 c4 30             	add    esp,0x30
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:419
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tdeviceID: %04X, vendorID: %04X, class: %04X, subclass %04X:%04X\n", bridge.device, bridge.vendor, bridge.class, bridge.subClass);
   1747b:	8b 9d 57 ff ff ff    	mov    ebx,DWORD PTR [ebp-0xa9]
   17481:	8b 8d 53 ff ff ff    	mov    ecx,DWORD PTR [ebp-0xad]
   17487:	0f b7 85 4f ff ff ff 	movzx  eax,WORD PTR [ebp-0xb1]
   1748e:	0f b7 d0             	movzx  edx,ax
   17491:	0f b7 85 51 ff ff ff 	movzx  eax,WORD PTR [ebp-0xaf]
   17498:	0f b7 c0             	movzx  eax,ax
   1749b:	83 ec 08             	sub    esp,0x8
   1749e:	53                   	push   ebx
   1749f:	51                   	push   ecx
   174a0:	52                   	push   edx
   174a1:	50                   	push   eax
   174a2:	68 48 28 08 00       	push   0x82848
   174a7:	68 00 01 00 00       	push   0x100
   174ac:	e8 a2 fb 00 00       	call   27053 <printd>
   174b1:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:420
    memcpy(&kPCIBridgeHeaders[kPCIBridgeCount++],&bridge,sizeof(struct pci_bridge_t));
   174b4:	8b 0d b8 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002b8
   174ba:	0f b6 05 ad 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002ad
   174c1:	8d 50 01             	lea    edx,[eax+0x1]
   174c4:	88 15 ad 02 a0 00    	mov    BYTE PTR ds:0xa002ad,dl
   174ca:	0f b6 c0             	movzx  eax,al
   174cd:	6b c0 4e             	imul   eax,eax,0x4e
   174d0:	8d 14 01             	lea    edx,[ecx+eax*1]
   174d3:	83 ec 04             	sub    esp,0x4
   174d6:	6a 4e                	push   0x4e
   174d8:	8d 85 4a ff ff ff    	lea    eax,[ebp-0xb6]
   174de:	50                   	push   eax
   174df:	52                   	push   edx
   174e0:	e8 bb e4 00 00       	call   259a0 <memcpy>
   174e5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:421
    memcpy(&newNode,node,sizeof(struct pci_device_t));
   174e8:	83 ec 04             	sub    esp,0x4
   174eb:	6a 50                	push   0x50
   174ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   174f0:	8d 45 98             	lea    eax,[ebp-0x68]
   174f3:	50                   	push   eax
   174f4:	e8 a7 e4 00 00       	call   259a0 <memcpy>
   174f9:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:422
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tbridge entry created\n");
   174fc:	83 ec 08             	sub    esp,0x8
   174ff:	68 8c 28 08 00       	push   0x8288c
   17504:	68 00 01 00 00       	push   0x100
   17509:	e8 45 fb 00 00       	call   27053 <printd>
   1750e:	83 c4 10             	add    esp,0x10
   17511:	eb 01                	jmp    17514 <addBridge+0x16e>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:416
    struct pci_device_t newNode;
    struct pci_bridge_t bridge;
    //int lastSubBridgeNum=0;
    getBridgeHeader(&bridge, bus, device, function);
    if (bridge.vendor==0xFFFF)
        return;
   17513:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:438
//       checkBus(&newNode, bridge.secondaryBusNum);
//#ifndef DEBUG_NONE
//       printd(DEBUG_PCI_DISCOVERY,"Done checking bus %02X\n",bridge.secondaryBusNum);
//#endif
    }
}
   17514:	8d 65 f4             	lea    esp,[ebp-0xc]
   17517:	5b                   	pop    ebx
   17518:	5e                   	pop    esi
   17519:	5f                   	pop    edi
   1751a:	5d                   	pop    ebp
   1751b:	c3                   	ret    

0001751c <checkFunctions>:
checkFunctions():
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:440

void checkFunctions(uint8_t bus, uint8_t device) {
   1751c:	55                   	push   ebp
   1751d:	89 e5                	mov    ebp,esp
   1751f:	83 ec 78             	sub    esp,0x78
   17522:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17525:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17528:	88 55 94             	mov    BYTE PTR [ebp-0x6c],dl
   1752b:	88 45 90             	mov    BYTE PTR [ebp-0x70],al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:443
    struct pci_device_t funcDevice;

    for (int function=0;function<8;function++)
   1752e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   17535:	eb 4e                	jmp    17585 <checkFunctions+0x69>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:445
    {
        getDeviceHeader(&funcDevice, bus, device, function);
   17537:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1753a:	0f b6 c8             	movzx  ecx,al
   1753d:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   17541:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   17545:	51                   	push   ecx
   17546:	52                   	push   edx
   17547:	50                   	push   eax
   17548:	8d 45 a4             	lea    eax,[ebp-0x5c]
   1754b:	50                   	push   eax
   1754c:	e8 03 f4 ff ff       	call   16954 <getDeviceHeader>
   17551:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:446
        if (funcDevice.vendor!=0xFFFF)
   17554:	0f b7 45 aa          	movzx  eax,WORD PTR [ebp-0x56]
   17558:	66 83 f8 ff          	cmp    ax,0xffff
   1755c:	74 23                	je     17581 <checkFunctions+0x65>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:448
        {
            funcDevice.busNo=bus;
   1755e:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   17562:	88 45 a4             	mov    BYTE PTR [ebp-0x5c],al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:449
            funcDevice.deviceNo=device;
   17565:	0f b6 45 90          	movzx  eax,BYTE PTR [ebp-0x70]
   17569:	88 45 a5             	mov    BYTE PTR [ebp-0x5b],al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:450
            funcDevice.funcNo=function;
   1756c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1756f:	88 45 a6             	mov    BYTE PTR [ebp-0x5a],al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:451
            addFunction(&funcDevice);
   17572:	83 ec 0c             	sub    esp,0xc
   17575:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17578:	50                   	push   eax
   17579:	e8 97 fd ff ff       	call   17315 <addFunction>
   1757e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:443 (discriminator 2)
}

void checkFunctions(uint8_t bus, uint8_t device) {
    struct pci_device_t funcDevice;

    for (int function=0;function<8;function++)
   17581:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:443 (discriminator 1)
   17585:	83 7d f4 07          	cmp    DWORD PTR [ebp-0xc],0x7
   17589:	7e ac                	jle    17537 <checkFunctions+0x1b>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:455
            funcDevice.funcNo=function;
            addFunction(&funcDevice);
        }
    }

 }
   1758b:	90                   	nop
   1758c:	c9                   	leave  
   1758d:	c3                   	ret    

0001758e <addDevice>:
addDevice():
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:458

void addDevice(struct pci_device_t* node)
{
   1758e:	55                   	push   ebp
   1758f:	89 e5                	mov    ebp,esp
   17591:	57                   	push   edi
   17592:	56                   	push   esi
   17593:	53                   	push   ebx
   17594:	83 ec 1c             	sub    esp,0x1c
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:460
#ifndef DEBUG_NONE
    printd(DEBUG_PCI_DISCOVERY,"\tFound device #%u on %02X:%02X:0, Ven# %04X Dev# %04X Cls# %02X MF=%u\n",kPCIDeviceCount, node->busNo, node->deviceNo, node->vendor, node->device, node->class, node->multiFunction);
   17597:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1759a:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
   1759e:	0f b6 c0             	movzx  eax,al
   175a1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
   175a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175a7:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
   175aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175ad:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   175b1:	0f b7 f0             	movzx  esi,ax
   175b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175b7:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   175bb:	0f b7 d8             	movzx  ebx,ax
   175be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   175c5:	0f b6 c8             	movzx  ecx,al
   175c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175cb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   175ce:	0f b6 d0             	movzx  edx,al
   175d1:	0f b6 05 ac 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002ac
   175d8:	0f b6 c0             	movzx  eax,al
   175db:	83 ec 0c             	sub    esp,0xc
   175de:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   175e1:	57                   	push   edi
   175e2:	56                   	push   esi
   175e3:	53                   	push   ebx
   175e4:	51                   	push   ecx
   175e5:	52                   	push   edx
   175e6:	50                   	push   eax
   175e7:	68 a8 28 08 00       	push   0x828a8
   175ec:	68 00 01 00 00       	push   0x100
   175f1:	e8 5d fa 00 00       	call   27053 <printd>
   175f6:	83 c4 30             	add    esp,0x30
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:462
#endif
    memcpy(&kPCIDeviceHeaders[kPCIDeviceCount++],node,sizeof(struct pci_device_t));
   175f9:	8b 0d b4 02 a0 00    	mov    ecx,DWORD PTR ds:0xa002b4
   175ff:	0f b6 05 ac 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002ac
   17606:	8d 50 01             	lea    edx,[eax+0x1]
   17609:	88 15 ac 02 a0 00    	mov    BYTE PTR ds:0xa002ac,dl
   1760f:	0f b6 d0             	movzx  edx,al
   17612:	89 d0                	mov    eax,edx
   17614:	c1 e0 02             	shl    eax,0x2
   17617:	01 d0                	add    eax,edx
   17619:	c1 e0 04             	shl    eax,0x4
   1761c:	01 c8                	add    eax,ecx
   1761e:	83 ec 04             	sub    esp,0x4
   17621:	6a 50                	push   0x50
   17623:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   17626:	50                   	push   eax
   17627:	e8 74 e3 00 00       	call   259a0 <memcpy>
   1762c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:463
    printd(DEBUG_PCI_DISCOVERY,"\tdevice entry created\n");
   1762f:	83 ec 08             	sub    esp,0x8
   17632:	68 ef 28 08 00       	push   0x828ef
   17637:	68 00 01 00 00       	push   0x100
   1763c:	e8 12 fa 00 00       	call   27053 <printd>
   17641:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:464
}
   17644:	90                   	nop
   17645:	8d 65 f4             	lea    esp,[ebp-0xc]
   17648:	5b                   	pop    ebx
   17649:	5e                   	pop    esi
   1764a:	5f                   	pop    edi
   1764b:	5d                   	pop    ebp
   1764c:	c3                   	ret    

0001764d <checkDevice>:
checkDevice():
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:467

bool checkDevice(struct pci_device_t* node, uint8_t bus, uint8_t device)
{
   1764d:	55                   	push   ebp
   1764e:	89 e5                	mov    ebp,esp
   17650:	83 ec 78             	sub    esp,0x78
   17653:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   17656:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   17659:	88 55 94             	mov    BYTE PTR [ebp-0x6c],dl
   1765c:	88 45 90             	mov    BYTE PTR [ebp-0x70],al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:468
    int func=0;
   1765f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:471
    struct pci_device_t newNode;

    memcpy(&newNode,node,sizeof(struct pci_device_t));
   17666:	83 ec 04             	sub    esp,0x4
   17669:	6a 50                	push   0x50
   1766b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1766e:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17671:	50                   	push   eax
   17672:	e8 29 e3 00 00       	call   259a0 <memcpy>
   17677:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:472
    if (getDeviceHeader(&newNode, bus, device, 0))
   1767a:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   1767e:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   17682:	6a 00                	push   0x0
   17684:	52                   	push   edx
   17685:	50                   	push   eax
   17686:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17689:	50                   	push   eax
   1768a:	e8 c5 f2 ff ff       	call   16954 <getDeviceHeader>
   1768f:	83 c4 10             	add    esp,0x10
   17692:	84 c0                	test   al,al
   17694:	74 6c                	je     17702 <checkDevice+0xb5>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:474
    {
        if (newNode.class!=6)
   17696:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   17699:	83 f8 06             	cmp    eax,0x6
   1769c:	74 11                	je     176af <checkDevice+0x62>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:476
        {
            addDevice(&newNode);
   1769e:	83 ec 0c             	sub    esp,0xc
   176a1:	8d 45 a4             	lea    eax,[ebp-0x5c]
   176a4:	50                   	push   eax
   176a5:	e8 e4 fe ff ff       	call   1758e <addDevice>
   176aa:	83 c4 10             	add    esp,0x10
   176ad:	eb 1d                	jmp    176cc <checkDevice+0x7f>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:480
        }
        else
        {
            addBridge(&newNode, bus, device,func);
   176af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   176b2:	0f b6 c8             	movzx  ecx,al
   176b5:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   176b9:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   176bd:	51                   	push   ecx
   176be:	52                   	push   edx
   176bf:	50                   	push   eax
   176c0:	8d 45 a4             	lea    eax,[ebp-0x5c]
   176c3:	50                   	push   eax
   176c4:	e8 dd fc ff ff       	call   173a6 <addBridge>
   176c9:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:483
        }
#ifndef DEBUG_NONE
        printd(DEBUG_PCI_DISCOVERY,"\tChecking functions\n",device);
   176cc:	0f b6 45 90          	movzx  eax,BYTE PTR [ebp-0x70]
   176d0:	83 ec 04             	sub    esp,0x4
   176d3:	50                   	push   eax
   176d4:	68 06 29 08 00       	push   0x82906
   176d9:	68 00 01 00 00       	push   0x100
   176de:	e8 70 f9 00 00       	call   27053 <printd>
   176e3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:485
#endif
        checkFunctions(bus, device);
   176e6:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   176ea:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   176ee:	83 ec 08             	sub    esp,0x8
   176f1:	52                   	push   edx
   176f2:	50                   	push   eax
   176f3:	e8 24 fe ff ff       	call   1751c <checkFunctions>
   176f8:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:486
        return true;
   176fb:	b8 01 00 00 00       	mov    eax,0x1
   17700:	eb 05                	jmp    17707 <checkDevice+0xba>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:488
    }
    return false;
   17702:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:489 (discriminator 1)
}
   17707:	c9                   	leave  
   17708:	c3                   	ret    

00017709 <checkBus>:
checkBus():
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:491

void checkBus(struct pci_device_t* node, uint8_t bus) {
   17709:	55                   	push   ebp
   1770a:	89 e5                	mov    ebp,esp
   1770c:	83 ec 28             	sub    esp,0x28
   1770f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17712:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:495
 uint8_t device;

#ifndef DEBUG_NONE
    printd(DEBUG_PCI_DISCOVERY,"\n");
   17715:	83 ec 08             	sub    esp,0x8
   17718:	68 1b 29 08 00       	push   0x8291b
   1771d:	68 00 01 00 00       	push   0x100
   17722:	e8 2c f9 00 00       	call   27053 <printd>
   17727:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:496
    printd(DEBUG_PCI_DISCOVERY,"Checking bus %02X\n", bus);
   1772a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   1772e:	83 ec 04             	sub    esp,0x4
   17731:	50                   	push   eax
   17732:	68 1d 29 08 00       	push   0x8291d
   17737:	68 00 01 00 00       	push   0x100
   1773c:	e8 12 f9 00 00       	call   27053 <printd>
   17741:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:500
#endif
//    printk("\n");
//    printk("Checking bus %02X\n", bus);
    for(device = 0; device < 32; device++) {
   17744:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   17748:	eb 22                	jmp    1776c <checkBus+0x63>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:508 (discriminator 2)
        if ((kDebugLevel & DEBUG_PCI_DISCOVERY) == DEBUG_PCI_DISCOVERY)
        {
            //waitForKeyboardKey();
        }
#endif
        checkDevice(node, bus, device);
   1774a:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   1774e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   17752:	83 ec 04             	sub    esp,0x4
   17755:	52                   	push   edx
   17756:	50                   	push   eax
   17757:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1775a:	e8 ee fe ff ff       	call   1764d <checkDevice>
   1775f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:500 (discriminator 2)
    printd(DEBUG_PCI_DISCOVERY,"\n");
    printd(DEBUG_PCI_DISCOVERY,"Checking bus %02X\n", bus);
#endif
//    printk("\n");
//    printk("Checking bus %02X\n", bus);
    for(device = 0; device < 32; device++) {
   17762:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   17766:	83 c0 01             	add    eax,0x1
   17769:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:500 (discriminator 1)
   1776c:	80 7d f7 1f          	cmp    BYTE PTR [ebp-0x9],0x1f
   17770:	76 d8                	jbe    1774a <checkBus+0x41>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:511
        }
#endif
        checkDevice(node, bus, device);
     }
 }
}
   17772:	90                   	nop
   17773:	c9                   	leave  
   17774:	c3                   	ret    

00017775 <pciInitialize>:
pciInitialize():
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:514
    
 void pciInitialize()
 {
   17775:	55                   	push   ebp
   17776:	89 e5                	mov    ebp,esp
   17778:	81 ec b8 00 00 00    	sub    esp,0xb8
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:517
    //Iterate Busses/Slots
     struct pci_device_t device, funcDevice;
     uint16_t prevDev=0,prevBus=0;
   1777e:	66 c7 45 f6 00 00    	mov    WORD PTR [ebp-0xa],0x0
   17784:	66 c7 45 f4 00 00    	mov    WORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:519

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
   1778a:	c6 05 af 02 a0 00 00 	mov    BYTE PTR ds:0xa002af,0x0
   17791:	0f b6 05 af 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002af
   17798:	a2 ae 02 a0 00       	mov    ds:0xa002ae,al
   1779d:	0f b6 05 ae 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002ae
   177a4:	a2 ad 02 a0 00       	mov    ds:0xa002ad,al
   177a9:	0f b6 05 ad 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002ad
   177b0:	a2 ac 02 a0 00       	mov    ds:0xa002ac,al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:520
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
   177b5:	83 ec 08             	sub    esp,0x8
   177b8:	68 30 29 08 00       	push   0x82930
   177bd:	68 00 01 00 00       	push   0x100
   177c2:	e8 8c f8 00 00       	call   27053 <printd>
   177c7:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:521
     for (currBus=0;currBus<50;currBus++)
   177ca:	c7 05 98 a4 09 00 00 	mov    DWORD PTR ds:0x9a498,0x0
   177d1:	00 00 00 
   177d4:	e9 cc 01 00 00       	jmp    179a5 <pciInitialize+0x230>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:523
     {
         for (currSlot=0;currSlot<32;currSlot++)
   177d9:	c7 05 9c a4 09 00 00 	mov    DWORD PTR ds:0x9a49c,0x0
   177e0:	00 00 00 
   177e3:	e9 a2 01 00 00       	jmp    1798a <pciInitialize+0x215>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:526
         {
            //if device found print it
            currFunc=0;
   177e8:	c7 05 a0 a4 09 00 00 	mov    DWORD PTR ds:0x9a4a0,0x0
   177ef:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:527
            prevDev=0;
   177f2:	66 c7 45 f6 00 00    	mov    WORD PTR [ebp-0xa],0x0
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:528
            printd(DEBUG_PCI_DISCOVERY,"Current bus=%u, slot=%u\n",currBus,currSlot);
   177f8:	8b 15 9c a4 09 00    	mov    edx,DWORD PTR ds:0x9a49c
   177fe:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17803:	52                   	push   edx
   17804:	50                   	push   eax
   17805:	68 4e 29 08 00       	push   0x8294e
   1780a:	68 00 01 00 00       	push   0x100
   1780f:	e8 3f f8 00 00       	call   27053 <printd>
   17814:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:529
            if (getDeviceHeader(&device, currBus, currSlot, currFunc)==true)
   17817:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   1781c:	0f b6 c8             	movzx  ecx,al
   1781f:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17824:	0f b6 d0             	movzx  edx,al
   17827:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   1782c:	0f b6 c0             	movzx  eax,al
   1782f:	51                   	push   ecx
   17830:	52                   	push   edx
   17831:	50                   	push   eax
   17832:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17835:	50                   	push   eax
   17836:	e8 19 f1 ff ff       	call   16954 <getDeviceHeader>
   1783b:	83 c4 10             	add    esp,0x10
   1783e:	84 c0                	test   al,al
   17840:	0f 84 37 01 00 00    	je     1797d <pciInitialize+0x208>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:531
            {
                if (prevBus!=currBus)
   17846:	0f b7 55 f4          	movzx  edx,WORD PTR [ebp-0xc]
   1784a:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   1784f:	39 c2                	cmp    edx,eax
   17851:	74 18                	je     1786b <pciInitialize+0xf6>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:533
                {
                    prevBus=currBus;
   17853:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17858:	66 89 45 f4          	mov    WORD PTR [ebp-0xc],ax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:534
                    kPCIBusCount++;
   1785c:	0f b6 05 af 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002af
   17863:	83 c0 01             	add    eax,0x1
   17866:	a2 af 02 a0 00       	mov    ds:0xa002af,al
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:537
                }
                //printPCIHeader(&device);
                if (device.class==0x06)
   1786b:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   1786e:	83 f8 06             	cmp    eax,0x6
   17871:	75 29                	jne    1789c <pciInitialize+0x127>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:539
                {
                    addBridge(&device, currBus, currSlot, currFunc);
   17873:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17878:	0f b6 c8             	movzx  ecx,al
   1787b:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17880:	0f b6 d0             	movzx  edx,al
   17883:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17888:	0f b6 c0             	movzx  eax,al
   1788b:	51                   	push   ecx
   1788c:	52                   	push   edx
   1788d:	50                   	push   eax
   1788e:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17891:	50                   	push   eax
   17892:	e8 0f fb ff ff       	call   173a6 <addBridge>
   17897:	83 c4 10             	add    esp,0x10
   1789a:	eb 0f                	jmp    178ab <pciInitialize+0x136>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:542
                }
                else
                    addDevice(&device);
   1789c:	83 ec 0c             	sub    esp,0xc
   1789f:	8d 45 a4             	lea    eax,[ebp-0x5c]
   178a2:	50                   	push   eax
   178a3:	e8 e6 fc ff ff       	call   1758e <addDevice>
   178a8:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:544
  //if found device is multi-function, iterate all of the functions
                for (currFunc=0;currFunc<8;currFunc++)
   178ab:	c7 05 a0 a4 09 00 00 	mov    DWORD PTR ds:0x9a4a0,0x0
   178b2:	00 00 00 
   178b5:	e9 b5 00 00 00       	jmp    1796f <pciInitialize+0x1fa>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:547
                {
                    //printd(DEBUG_PCI_DISCOVERY,"Current function=%u\n",currFunc);
                    getDeviceHeader(&funcDevice, currBus, currSlot, currFunc);
   178ba:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   178bf:	0f b6 c8             	movzx  ecx,al
   178c2:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   178c7:	0f b6 d0             	movzx  edx,al
   178ca:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   178cf:	0f b6 c0             	movzx  eax,al
   178d2:	51                   	push   ecx
   178d3:	52                   	push   edx
   178d4:	50                   	push   eax
   178d5:	8d 85 54 ff ff ff    	lea    eax,[ebp-0xac]
   178db:	50                   	push   eax
   178dc:	e8 73 f0 ff ff       	call   16954 <getDeviceHeader>
   178e1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:548
                    if (funcDevice.vendor!=0xFFFF)
   178e4:	0f b7 85 5a ff ff ff 	movzx  eax,WORD PTR [ebp-0xa6]
   178eb:	66 83 f8 ff          	cmp    ax,0xffff
   178ef:	74 71                	je     17962 <pciInitialize+0x1ed>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:549
                        if (funcDevice.device != device.device && funcDevice.device != prevDev)
   178f1:	0f b7 95 5c ff ff ff 	movzx  edx,WORD PTR [ebp-0xa4]
   178f8:	0f b7 45 ac          	movzx  eax,WORD PTR [ebp-0x54]
   178fc:	66 39 c2             	cmp    dx,ax
   178ff:	74 61                	je     17962 <pciInitialize+0x1ed>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:549 (discriminator 1)
   17901:	0f b7 85 5c ff ff ff 	movzx  eax,WORD PTR [ebp-0xa4]
   17908:	66 3b 45 f6          	cmp    ax,WORD PTR [ebp-0xa]
   1790c:	74 54                	je     17962 <pciInitialize+0x1ed>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:552
                        {
                            //printk("funcDevice=%X, device=%X, prevDev=%X\n",funcDevice.device, device.device, prevDev);
                            prevDev=funcDevice.device;
   1790e:	0f b7 85 5c ff ff ff 	movzx  eax,WORD PTR [ebp-0xa4]
   17915:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:553
                            if (funcDevice.class == 0x06)
   17919:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [ebp-0x9c]
   1791f:	83 f8 06             	cmp    eax,0x6
   17922:	75 2c                	jne    17950 <pciInitialize+0x1db>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:554
                                addBridge(&funcDevice, currBus, currSlot, currFunc);
   17924:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17929:	0f b6 c8             	movzx  ecx,al
   1792c:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17931:	0f b6 d0             	movzx  edx,al
   17934:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17939:	0f b6 c0             	movzx  eax,al
   1793c:	51                   	push   ecx
   1793d:	52                   	push   edx
   1793e:	50                   	push   eax
   1793f:	8d 85 54 ff ff ff    	lea    eax,[ebp-0xac]
   17945:	50                   	push   eax
   17946:	e8 5b fa ff ff       	call   173a6 <addBridge>
   1794b:	83 c4 10             	add    esp,0x10
   1794e:	eb 12                	jmp    17962 <pciInitialize+0x1ed>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:556
                            else
                                addFunction(&funcDevice);
   17950:	83 ec 0c             	sub    esp,0xc
   17953:	8d 85 54 ff ff ff    	lea    eax,[ebp-0xac]
   17959:	50                   	push   eax
   1795a:	e8 b6 f9 ff ff       	call   17315 <addFunction>
   1795f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:544 (discriminator 2)
                    addBridge(&device, currBus, currSlot, currFunc);
                }
                else
                    addDevice(&device);
  //if found device is multi-function, iterate all of the functions
                for (currFunc=0;currFunc<8;currFunc++)
   17962:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17967:	83 c0 01             	add    eax,0x1
   1796a:	a3 a0 a4 09 00       	mov    ds:0x9a4a0,eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:544 (discriminator 1)
   1796f:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17974:	83 f8 07             	cmp    eax,0x7
   17977:	0f 8e 3d ff ff ff    	jle    178ba <pciInitialize+0x145>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:523 (discriminator 2)

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
     for (currBus=0;currBus<50;currBus++)
     {
         for (currSlot=0;currSlot<32;currSlot++)
   1797d:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17982:	83 c0 01             	add    eax,0x1
   17985:	a3 9c a4 09 00       	mov    ds:0x9a49c,eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:523 (discriminator 1)
   1798a:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   1798f:	83 f8 1f             	cmp    eax,0x1f
   17992:	0f 8e 50 fe ff ff    	jle    177e8 <pciInitialize+0x73>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:521 (discriminator 2)
     struct pci_device_t device, funcDevice;
     uint16_t prevDev=0,prevBus=0;

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
     for (currBus=0;currBus<50;currBus++)
   17998:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   1799d:	83 c0 01             	add    eax,0x1
   179a0:	a3 98 a4 09 00       	mov    ds:0x9a498,eax
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:521 (discriminator 1)
   179a5:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   179aa:	83 f8 31             	cmp    eax,0x31
   179ad:	0f 8e 26 fe ff ff    	jle    177d9 <pciInitialize+0x64>
/home/yogi/NetBeansProjects/chrisOS/src/block/pci.c:563
                    }
            }
 
        }
     }
   179b3:	90                   	nop
   179b4:	c9                   	leave  
   179b5:	c3                   	ret    
   179b6:	66 90                	xchg   ax,ax

000179b8 <outb>:
outb():
/home/yogi/NetBeansProjects/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   179b8:	55                   	push   ebp
   179b9:	89 e5                	mov    ebp,esp
   179bb:	83 ec 08             	sub    esp,0x8
   179be:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   179c1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   179c4:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   179c8:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/NetBeansProjects/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   179cb:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   179cf:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   179d3:	ee                   	out    dx,al
/home/yogi/NetBeansProjects/chrisOS/include/io.h:24
}
   179d4:	90                   	nop
   179d5:	c9                   	leave  
   179d6:	c3                   	ret    

000179d7 <update_cursor>:
update_cursor():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:25
KERNEL_DATA_SECTION uint8_t savedPosY[10];
KERNEL_DATA_SECTION int8_t savedPosPointer=0;
KERNEL_DATA_SECTION uint8_t kTerminalHeight;

void update_cursor()
 {
   179d7:	55                   	push   ebp
   179d8:	89 e5                	mov    ebp,esp
   179da:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:26
    unsigned short position=(terminal_row*VGA_WIDTH) + terminal_column;
   179dd:	a1 00 00 a0 00       	mov    eax,ds:0xa00000
   179e2:	89 c2                	mov    edx,eax
   179e4:	b8 50 00 00 00       	mov    eax,0x50
   179e9:	0f af c2             	imul   eax,edx
   179ec:	8b 15 04 00 a0 00    	mov    edx,DWORD PTR ds:0xa00004
   179f2:	01 d0                	add    eax,edx
   179f4:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:29
 
    // cursor LOW port to vga INDEX register
    outb(0x3D4, 0x0F);
   179f8:	6a 0f                	push   0xf
   179fa:	68 d4 03 00 00       	push   0x3d4
   179ff:	e8 b4 ff ff ff       	call   179b8 <outb>
   17a04:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:30
    outb(0x3D5, (unsigned char)(position&0xFF));
   17a07:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   17a0b:	0f b6 c0             	movzx  eax,al
   17a0e:	50                   	push   eax
   17a0f:	68 d5 03 00 00       	push   0x3d5
   17a14:	e8 9f ff ff ff       	call   179b8 <outb>
   17a19:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:32
    // cursor HIGH port to vga INDEX register
    outb(0x3D4, 0x0E);
   17a1c:	6a 0e                	push   0xe
   17a1e:	68 d4 03 00 00       	push   0x3d4
   17a23:	e8 90 ff ff ff       	call   179b8 <outb>
   17a28:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:33
    outb(0x3D5, (unsigned char )((position>>8)&0xFF));
   17a2b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   17a2f:	66 c1 e8 08          	shr    ax,0x8
   17a33:	0f b6 c0             	movzx  eax,al
   17a36:	50                   	push   eax
   17a37:	68 d5 03 00 00       	push   0x3d5
   17a3c:	e8 77 ff ff ff       	call   179b8 <outb>
   17a41:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:35
    //Move the cursor in the bios data area
 }
   17a44:	90                   	nop
   17a45:	c9                   	leave  
   17a46:	c3                   	ret    

00017a47 <make_color>:
make_color():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:37

uint8_t make_color(enum vga_color fg, enum vga_color bg) {
   17a47:	55                   	push   ebp
   17a48:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:38
        return fg | bg << 4;
   17a4a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17a4d:	c1 e0 04             	shl    eax,0x4
   17a50:	89 c2                	mov    edx,eax
   17a52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17a55:	09 d0                	or     eax,edx
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:39
}
   17a57:	5d                   	pop    ebp
   17a58:	c3                   	ret    

00017a59 <make_vgaentry>:
make_vgaentry():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:41

uint16_t make_vgaentry(char c, uint8_t color) {
   17a59:	55                   	push   ebp
   17a5a:	89 e5                	mov    ebp,esp
   17a5c:	83 ec 18             	sub    esp,0x18
   17a5f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17a62:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17a65:	88 55 ec             	mov    BYTE PTR [ebp-0x14],dl
   17a68:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:42
        uint16_t c16 = c;
   17a6b:	66 0f be 45 ec       	movsx  ax,BYTE PTR [ebp-0x14]
   17a70:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:43
        uint16_t color16 = color;
   17a74:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
   17a78:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:44
        return c16 | color16 << 8;
   17a7c:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   17a80:	c1 e0 08             	shl    eax,0x8
   17a83:	89 c2                	mov    edx,eax
   17a85:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   17a89:	09 d0                	or     eax,edx
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:45
}
   17a8b:	c9                   	leave  
   17a8c:	c3                   	ret    

00017a8d <terminal_setcolor>:
terminal_setcolor():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:48


void terminal_setcolor(uint8_t color) {
   17a8d:	55                   	push   ebp
   17a8e:	89 e5                	mov    ebp,esp
   17a90:	83 ec 04             	sub    esp,0x4
   17a93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17a96:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:49
        terminal_color = color;
   17a99:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   17a9d:	a2 08 00 a0 00       	mov    ds:0xa00008,al
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:50
}
   17aa2:	90                   	nop
   17aa3:	c9                   	leave  
   17aa4:	c3                   	ret    

00017aa5 <terminal_putentryat>:
terminal_putentryat():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:52

void terminal_putentryat(char c, uint8_t color, size_t x, size_t y) {
   17aa5:	55                   	push   ebp
   17aa6:	89 e5                	mov    ebp,esp
   17aa8:	53                   	push   ebx
   17aa9:	83 ec 18             	sub    esp,0x18
   17aac:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17aaf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17ab2:	88 55 e8             	mov    BYTE PTR [ebp-0x18],dl
   17ab5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:53
    const size_t index = y * VGA_WIDTH + x;
   17ab8:	b8 50 00 00 00       	mov    eax,0x50
   17abd:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
   17ac1:	89 c2                	mov    edx,eax
   17ac3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   17ac6:	01 d0                	add    eax,edx
   17ac8:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:54
        terminal_buffer[index] = make_vgaentry(c, color);
   17acb:	a1 0c 00 a0 00       	mov    eax,ds:0xa0000c
   17ad0:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   17ad3:	01 d2                	add    edx,edx
   17ad5:	8d 1c 10             	lea    ebx,[eax+edx*1]
   17ad8:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
   17adc:	0f be 45 e8          	movsx  eax,BYTE PTR [ebp-0x18]
   17ae0:	52                   	push   edx
   17ae1:	50                   	push   eax
   17ae2:	e8 72 ff ff ff       	call   17a59 <make_vgaentry>
   17ae7:	83 c4 08             	add    esp,0x8
   17aea:	66 89 03             	mov    WORD PTR [ebx],ax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:55
}
   17aed:	90                   	nop
   17aee:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   17af1:	c9                   	leave  
   17af2:	c3                   	ret    

00017af3 <cursorSavePosition>:
cursorSavePosition():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:58

void cursorSavePosition()
{
   17af3:	55                   	push   ebp
   17af4:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:59
    if (savedPosPointer < 10)
   17af6:	0f b6 05 26 00 a0 00 	movzx  eax,BYTE PTR ds:0xa00026
   17afd:	3c 09                	cmp    al,0x9
   17aff:	7f 3b                	jg     17b3c <cursorSavePosition+0x49>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:61
    {
        savedPosX[++savedPosPointer] = terminal_column;
   17b01:	0f b6 05 26 00 a0 00 	movzx  eax,BYTE PTR ds:0xa00026
   17b08:	83 c0 01             	add    eax,0x1
   17b0b:	a2 26 00 a0 00       	mov    ds:0xa00026,al
   17b10:	0f b6 05 26 00 a0 00 	movzx  eax,BYTE PTR ds:0xa00026
   17b17:	0f be c0             	movsx  eax,al
   17b1a:	8b 15 04 00 a0 00    	mov    edx,DWORD PTR ds:0xa00004
   17b20:	88 90 10 00 a0 00    	mov    BYTE PTR [eax+0xa00010],dl
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:62
        savedPosY[savedPosPointer] = terminal_row;
   17b26:	0f b6 05 26 00 a0 00 	movzx  eax,BYTE PTR ds:0xa00026
   17b2d:	0f be c0             	movsx  eax,al
   17b30:	8b 15 00 00 a0 00    	mov    edx,DWORD PTR ds:0xa00000
   17b36:	88 90 1c 00 a0 00    	mov    BYTE PTR [eax+0xa0001c],dl
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:64
    }
}
   17b3c:	90                   	nop
   17b3d:	5d                   	pop    ebp
   17b3e:	c3                   	ret    

00017b3f <cursorRestorePosition>:
cursorRestorePosition():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:67

void cursorRestorePosition()
{
   17b3f:	55                   	push   ebp
   17b40:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:68
    if (savedPosPointer > 0)
   17b42:	0f b6 05 26 00 a0 00 	movzx  eax,BYTE PTR ds:0xa00026
   17b49:	84 c0                	test   al,al
   17b4b:	7e 42                	jle    17b8f <cursorRestorePosition+0x50>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:70
    {
        terminal_column = savedPosX[savedPosPointer];
   17b4d:	0f b6 05 26 00 a0 00 	movzx  eax,BYTE PTR ds:0xa00026
   17b54:	0f be c0             	movsx  eax,al
   17b57:	0f b6 80 10 00 a0 00 	movzx  eax,BYTE PTR [eax+0xa00010]
   17b5e:	0f b6 c0             	movzx  eax,al
   17b61:	a3 04 00 a0 00       	mov    ds:0xa00004,eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:71
        terminal_row = savedPosY[savedPosPointer--];
   17b66:	0f b6 05 26 00 a0 00 	movzx  eax,BYTE PTR ds:0xa00026
   17b6d:	89 c2                	mov    edx,eax
   17b6f:	83 ea 01             	sub    edx,0x1
   17b72:	88 15 26 00 a0 00    	mov    BYTE PTR ds:0xa00026,dl
   17b78:	0f be c0             	movsx  eax,al
   17b7b:	0f b6 80 1c 00 a0 00 	movzx  eax,BYTE PTR [eax+0xa0001c]
   17b82:	0f b6 c0             	movzx  eax,al
   17b85:	a3 00 00 a0 00       	mov    ds:0xa00000,eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:72
        update_cursor();
   17b8a:	e8 48 fe ff ff       	call   179d7 <update_cursor>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:74
    }
}
   17b8f:	90                   	nop
   17b90:	5d                   	pop    ebp
   17b91:	c3                   	ret    

00017b92 <terminal_clear>:
terminal_clear():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:77

void terminal_clear()
{
   17b92:	55                   	push   ebp
   17b93:	89 e5                	mov    ebp,esp
   17b95:	53                   	push   ebx
   17b96:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:79
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
   17b99:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   17ba0:	eb 53                	jmp    17bf5 <terminal_clear+0x63>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:80
                for (size_t x = 0; x < VGA_WIDTH; x++) {
   17ba2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   17ba9:	eb 3c                	jmp    17be7 <terminal_clear+0x55>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:81 (discriminator 3)
                        const size_t index = y * VGA_WIDTH + x;
   17bab:	b8 50 00 00 00       	mov    eax,0x50
   17bb0:	0f af 45 f8          	imul   eax,DWORD PTR [ebp-0x8]
   17bb4:	89 c2                	mov    edx,eax
   17bb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   17bb9:	01 d0                	add    eax,edx
   17bbb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:82 (discriminator 3)
                        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
   17bbe:	a1 0c 00 a0 00       	mov    eax,ds:0xa0000c
   17bc3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   17bc6:	01 d2                	add    edx,edx
   17bc8:	8d 1c 10             	lea    ebx,[eax+edx*1]
   17bcb:	0f b6 05 08 00 a0 00 	movzx  eax,BYTE PTR ds:0xa00008
   17bd2:	0f b6 c0             	movzx  eax,al
   17bd5:	50                   	push   eax
   17bd6:	6a 20                	push   0x20
   17bd8:	e8 7c fe ff ff       	call   17a59 <make_vgaentry>
   17bdd:	83 c4 08             	add    esp,0x8
   17be0:	66 89 03             	mov    WORD PTR [ebx],ax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:80 (discriminator 3)

void terminal_clear()
{
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
                for (size_t x = 0; x < VGA_WIDTH; x++) {
   17be3:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:80 (discriminator 1)
   17be7:	b8 50 00 00 00       	mov    eax,0x50
   17bec:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   17bef:	72 ba                	jb     17bab <terminal_clear+0x19>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:79 (discriminator 2)
}

void terminal_clear()
{
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
   17bf1:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:79 (discriminator 1)
   17bf5:	0f b6 05 27 00 a0 00 	movzx  eax,BYTE PTR ds:0xa00027
   17bfc:	0f b6 c0             	movzx  eax,al
   17bff:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
   17c02:	77 9e                	ja     17ba2 <terminal_clear+0x10>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:85
                for (size_t x = 0; x < VGA_WIDTH; x++) {
                        const size_t index = y * VGA_WIDTH + x;
                        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
                }
        }
    terminal_column=0;
   17c04:	c7 05 04 00 a0 00 00 	mov    DWORD PTR ds:0xa00004,0x0
   17c0b:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:86
    terminal_row=0;
   17c0e:	c7 05 00 00 a0 00 00 	mov    DWORD PTR ds:0xa00000,0x0
   17c15:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:87
    update_cursor();
   17c18:	e8 ba fd ff ff       	call   179d7 <update_cursor>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:88
}
   17c1d:	90                   	nop
   17c1e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   17c21:	c9                   	leave  
   17c22:	c3                   	ret    

00017c23 <terminal_clear_line>:
terminal_clear_line():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:91

void terminal_clear_line(unsigned lineNo)
{
   17c23:	55                   	push   ebp
   17c24:	89 e5                	mov    ebp,esp
   17c26:	53                   	push   ebx
   17c27:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:92
    if (lineNo>SYS_VGA_HEIGHT-1)
   17c2a:	83 7d 08 31          	cmp    DWORD PTR [ebp+0x8],0x31
   17c2e:	77 51                	ja     17c81 <terminal_clear_line+0x5e>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:94
        return;
    for (unsigned cnt=0;cnt<VGA_WIDTH;cnt++)
   17c30:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   17c37:	eb 3c                	jmp    17c75 <terminal_clear_line+0x52>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:96 (discriminator 3)
    {
        const size_t index = lineNo * VGA_WIDTH + cnt;
   17c39:	b8 50 00 00 00       	mov    eax,0x50
   17c3e:	0f af 45 08          	imul   eax,DWORD PTR [ebp+0x8]
   17c42:	89 c2                	mov    edx,eax
   17c44:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   17c47:	01 d0                	add    eax,edx
   17c49:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:97 (discriminator 3)
        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
   17c4c:	a1 0c 00 a0 00       	mov    eax,ds:0xa0000c
   17c51:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   17c54:	01 d2                	add    edx,edx
   17c56:	8d 1c 10             	lea    ebx,[eax+edx*1]
   17c59:	0f b6 05 08 00 a0 00 	movzx  eax,BYTE PTR ds:0xa00008
   17c60:	0f b6 c0             	movzx  eax,al
   17c63:	50                   	push   eax
   17c64:	6a 20                	push   0x20
   17c66:	e8 ee fd ff ff       	call   17a59 <make_vgaentry>
   17c6b:	83 c4 08             	add    esp,0x8
   17c6e:	66 89 03             	mov    WORD PTR [ebx],ax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:94 (discriminator 3)

void terminal_clear_line(unsigned lineNo)
{
    if (lineNo>SYS_VGA_HEIGHT-1)
        return;
    for (unsigned cnt=0;cnt<VGA_WIDTH;cnt++)
   17c71:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:94 (discriminator 1)
   17c75:	b8 50 00 00 00       	mov    eax,0x50
   17c7a:	39 45 f8             	cmp    DWORD PTR [ebp-0x8],eax
   17c7d:	72 ba                	jb     17c39 <terminal_clear_line+0x16>
   17c7f:	eb 01                	jmp    17c82 <terminal_clear_line+0x5f>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:93
}

void terminal_clear_line(unsigned lineNo)
{
    if (lineNo>SYS_VGA_HEIGHT-1)
        return;
   17c81:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:99
    for (unsigned cnt=0;cnt<VGA_WIDTH;cnt++)
    {
        const size_t index = lineNo * VGA_WIDTH + cnt;
        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
    }
}
   17c82:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   17c85:	c9                   	leave  
   17c86:	c3                   	ret    

00017c87 <terminal_copyline>:
terminal_copyline():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:102

void terminal_copyline(unsigned dstLine, unsigned srcLine)
{
   17c87:	55                   	push   ebp
   17c88:	89 e5                	mov    ebp,esp
   17c8a:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:103
    unsigned rowBytes = VGA_WIDTH*2;
   17c8d:	b8 50 00 00 00       	mov    eax,0x50
   17c92:	01 c0                	add    eax,eax
   17c94:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:104
    uintptr_t dest=(uintptr_t)TEXTMODE_MEMORY_START+(dstLine*rowBytes);
   17c97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17c9a:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   17c9e:	05 00 80 0b 00       	add    eax,0xb8000
   17ca3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:105
    uintptr_t src=(uintptr_t)TEXTMODE_MEMORY_START+(srcLine*rowBytes);
   17ca6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17ca9:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   17cad:	05 00 80 0b 00       	add    eax,0xb8000
   17cb2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:107
    
    memcpy((void*)dest,(void*)src,rowBytes);
   17cb5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   17cb8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   17cbb:	83 ec 04             	sub    esp,0x4
   17cbe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   17cc1:	52                   	push   edx
   17cc2:	50                   	push   eax
   17cc3:	e8 d8 dc 00 00       	call   259a0 <memcpy>
   17cc8:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:108
}
   17ccb:	90                   	nop
   17ccc:	c9                   	leave  
   17ccd:	c3                   	ret    

00017cce <terminal_putchar>:
terminal_putchar():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:110

void terminal_putchar(char c) {
   17cce:	55                   	push   ebp
   17ccf:	89 e5                	mov    ebp,esp
   17cd1:	53                   	push   ebx
   17cd2:	83 ec 24             	sub    esp,0x24
   17cd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17cd8:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:111
    if (c=='\n')
   17cdb:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
   17cdf:	75 1c                	jne    17cfd <terminal_putchar+0x2f>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:113
    {
            terminal_column = 0;
   17ce1:	c7 05 04 00 a0 00 00 	mov    DWORD PTR ds:0xa00004,0x0
   17ce8:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:114
            terminal_row += 1;
   17ceb:	a1 00 00 a0 00       	mov    eax,ds:0xa00000
   17cf0:	83 c0 01             	add    eax,0x1
   17cf3:	a3 00 00 a0 00       	mov    ds:0xa00000,eax
   17cf8:	e9 1f 01 00 00       	jmp    17e1c <terminal_putchar+0x14e>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:116
    }
    else if (c=='\b')
   17cfd:	80 7d e4 08          	cmp    BYTE PTR [ebp-0x1c],0x8
   17d01:	75 58                	jne    17d5b <terminal_putchar+0x8d>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:118
    {
        if (terminal_column > 1)
   17d03:	a1 04 00 a0 00       	mov    eax,ds:0xa00004
   17d08:	83 f8 01             	cmp    eax,0x1
   17d0b:	76 0f                	jbe    17d1c <terminal_putchar+0x4e>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:119
            terminal_column--;
   17d0d:	a1 04 00 a0 00       	mov    eax,ds:0xa00004
   17d12:	83 e8 01             	sub    eax,0x1
   17d15:	a3 04 00 a0 00       	mov    ds:0xa00004,eax
   17d1a:	eb 17                	jmp    17d33 <terminal_putchar+0x65>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:122
        else
        {
            terminal_row--;
   17d1c:	a1 00 00 a0 00       	mov    eax,ds:0xa00000
   17d21:	83 e8 01             	sub    eax,0x1
   17d24:	a3 00 00 a0 00       	mov    ds:0xa00000,eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:123
            terminal_column=VGA_WIDTH;
   17d29:	b8 50 00 00 00       	mov    eax,0x50
   17d2e:	a3 04 00 a0 00       	mov    ds:0xa00004,eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:125
        }
        terminal_putentryat(' ', terminal_color, terminal_column, terminal_row);
   17d33:	8b 0d 00 00 a0 00    	mov    ecx,DWORD PTR ds:0xa00000
   17d39:	8b 15 04 00 a0 00    	mov    edx,DWORD PTR ds:0xa00004
   17d3f:	0f b6 05 08 00 a0 00 	movzx  eax,BYTE PTR ds:0xa00008
   17d46:	0f b6 c0             	movzx  eax,al
   17d49:	51                   	push   ecx
   17d4a:	52                   	push   edx
   17d4b:	50                   	push   eax
   17d4c:	6a 20                	push   0x20
   17d4e:	e8 52 fd ff ff       	call   17aa5 <terminal_putentryat>
   17d53:	83 c4 10             	add    esp,0x10
   17d56:	e9 c1 00 00 00       	jmp    17e1c <terminal_putchar+0x14e>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:128
        
    }
    else if (c=='\t')
   17d5b:	80 7d e4 09          	cmp    BYTE PTR [ebp-0x1c],0x9
   17d5f:	75 59                	jne    17dba <terminal_putchar+0xec>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:130
    {
        uint32_t goTo= terminal_column + (SCREEN_SPACES_PER_TAB - (terminal_column % SCREEN_SPACES_PER_TAB));
   17d61:	8b 1d 04 00 a0 00    	mov    ebx,DWORD PTR ds:0xa00004
   17d67:	8b 0d 04 00 a0 00    	mov    ecx,DWORD PTR ds:0xa00004
   17d6d:	ba cd cc cc cc       	mov    edx,0xcccccccd
   17d72:	89 c8                	mov    eax,ecx
   17d74:	f7 e2                	mul    edx
   17d76:	c1 ea 02             	shr    edx,0x2
   17d79:	89 d0                	mov    eax,edx
   17d7b:	c1 e0 02             	shl    eax,0x2
   17d7e:	01 d0                	add    eax,edx
   17d80:	29 c1                	sub    ecx,eax
   17d82:	89 ca                	mov    edx,ecx
   17d84:	89 d8                	mov    eax,ebx
   17d86:	29 d0                	sub    eax,edx
   17d88:	83 c0 05             	add    eax,0x5
   17d8b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:131
        if (goTo==terminal_column)
   17d8e:	a1 04 00 a0 00       	mov    eax,ds:0xa00004
   17d93:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   17d96:	75 16                	jne    17dae <terminal_putchar+0xe0>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:132
            goTo=SCREEN_SPACES_PER_TAB;
   17d98:	c7 45 f4 05 00 00 00 	mov    DWORD PTR [ebp-0xc],0x5
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:134
        
        while (terminal_column < goTo)
   17d9f:	eb 0d                	jmp    17dae <terminal_putchar+0xe0>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:135
            terminal_putchar(' ');;
   17da1:	83 ec 0c             	sub    esp,0xc
   17da4:	6a 20                	push   0x20
   17da6:	e8 23 ff ff ff       	call   17cce <terminal_putchar>
   17dab:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:134
    {
        uint32_t goTo= terminal_column + (SCREEN_SPACES_PER_TAB - (terminal_column % SCREEN_SPACES_PER_TAB));
        if (goTo==terminal_column)
            goTo=SCREEN_SPACES_PER_TAB;
        
        while (terminal_column < goTo)
   17dae:	a1 04 00 a0 00       	mov    eax,ds:0xa00004
   17db3:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   17db6:	72 e9                	jb     17da1 <terminal_putchar+0xd3>
   17db8:	eb 62                	jmp    17e1c <terminal_putchar+0x14e>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:141
    
    //6 - cnt=0 to (5-1) 4
    //8 - cnt= to (5-3) 2
    }
    //We're going to ignore carriage return since most systems don't use it.  Unfortunately the FAT library we are using does
    else if (c=='\r')
   17dba:	80 7d e4 0d          	cmp    BYTE PTR [ebp-0x1c],0xd
   17dbe:	0f 84 b0 00 00 00    	je     17e74 <terminal_putchar+0x1a6>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:146
        return;

        else
        {
                terminal_putentryat(c, terminal_color, terminal_column, terminal_row);
   17dc4:	8b 1d 00 00 a0 00    	mov    ebx,DWORD PTR ds:0xa00000
   17dca:	8b 0d 04 00 a0 00    	mov    ecx,DWORD PTR ds:0xa00004
   17dd0:	0f b6 05 08 00 a0 00 	movzx  eax,BYTE PTR ds:0xa00008
   17dd7:	0f b6 d0             	movzx  edx,al
   17dda:	0f be 45 e4          	movsx  eax,BYTE PTR [ebp-0x1c]
   17dde:	53                   	push   ebx
   17ddf:	51                   	push   ecx
   17de0:	52                   	push   edx
   17de1:	50                   	push   eax
   17de2:	e8 be fc ff ff       	call   17aa5 <terminal_putentryat>
   17de7:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:147
                if (++terminal_column == VGA_WIDTH) {
   17dea:	a1 04 00 a0 00       	mov    eax,ds:0xa00004
   17def:	83 c0 01             	add    eax,0x1
   17df2:	a3 04 00 a0 00       	mov    ds:0xa00004,eax
   17df7:	a1 04 00 a0 00       	mov    eax,ds:0xa00004
   17dfc:	ba 50 00 00 00       	mov    edx,0x50
   17e01:	39 d0                	cmp    eax,edx
   17e03:	75 17                	jne    17e1c <terminal_putchar+0x14e>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:148
                        terminal_column = 0;
   17e05:	c7 05 04 00 a0 00 00 	mov    DWORD PTR ds:0xa00004,0x0
   17e0c:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:149
                        terminal_row++;
   17e0f:	a1 00 00 a0 00       	mov    eax,ds:0xa00000
   17e14:	83 c0 01             	add    eax,0x1
   17e17:	a3 00 00 a0 00       	mov    ds:0xa00000,eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:152
                }
        }
    if (terminal_row == kTerminalHeight)
   17e1c:	0f b6 05 27 00 a0 00 	movzx  eax,BYTE PTR ds:0xa00027
   17e23:	0f b6 d0             	movzx  edx,al
   17e26:	a1 00 00 a0 00       	mov    eax,ds:0xa00000
   17e2b:	39 c2                	cmp    edx,eax
   17e2d:	75 3e                	jne    17e6d <terminal_putchar+0x19f>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:154
    {
        for (unsigned row=0;row<kTerminalHeight;row++)
   17e2f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   17e36:	eb 19                	jmp    17e51 <terminal_putchar+0x183>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:155 (discriminator 3)
            terminal_copyline(row, row+1);
   17e38:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   17e3b:	83 c0 01             	add    eax,0x1
   17e3e:	83 ec 08             	sub    esp,0x8
   17e41:	50                   	push   eax
   17e42:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   17e45:	e8 3d fe ff ff       	call   17c87 <terminal_copyline>
   17e4a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:154 (discriminator 3)
                        terminal_row++;
                }
        }
    if (terminal_row == kTerminalHeight)
    {
        for (unsigned row=0;row<kTerminalHeight;row++)
   17e4d:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:154 (discriminator 1)
   17e51:	0f b6 05 27 00 a0 00 	movzx  eax,BYTE PTR ds:0xa00027
   17e58:	0f b6 c0             	movzx  eax,al
   17e5b:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   17e5e:	77 d8                	ja     17e38 <terminal_putchar+0x16a>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:157
            terminal_copyline(row, row+1);
        //memcpy((void *)TEXTMODE_MEMORY_START, (void *)TEXTMODE_MEMORY_START+160, 160*25);
        terminal_row--;
   17e60:	a1 00 00 a0 00       	mov    eax,ds:0xa00000
   17e65:	83 e8 01             	sub    eax,0x1
   17e68:	a3 00 00 a0 00       	mov    ds:0xa00000,eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:159
    }
    update_cursor();
   17e6d:	e8 65 fb ff ff       	call   179d7 <update_cursor>
   17e72:	eb 01                	jmp    17e75 <terminal_putchar+0x1a7>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:142
    //6 - cnt=0 to (5-1) 4
    //8 - cnt= to (5-3) 2
    }
    //We're going to ignore carriage return since most systems don't use it.  Unfortunately the FAT library we are using does
    else if (c=='\r')
        return;
   17e74:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:160
            terminal_copyline(row, row+1);
        //memcpy((void *)TEXTMODE_MEMORY_START, (void *)TEXTMODE_MEMORY_START+160, 160*25);
        terminal_row--;
    }
    update_cursor();
}
   17e75:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   17e78:	c9                   	leave  
   17e79:	c3                   	ret    

00017e7a <cursorUpdateBiosCursor>:
cursorUpdateBiosCursor():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:163

void cursorUpdateBiosCursor()
{
   17e7a:	55                   	push   ebp
   17e7b:	89 e5                	mov    ebp,esp
   17e7d:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:164
    uint8_t* bda=(uint8_t*)0x450;
   17e80:	c7 45 fc 50 04 00 00 	mov    DWORD PTR [ebp-0x4],0x450
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:165
    *bda=(uint8_t)(terminal_column & 0xFF);
   17e87:	a1 04 00 a0 00       	mov    eax,ds:0xa00004
   17e8c:	89 c2                	mov    edx,eax
   17e8e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   17e91:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:166
    bda++;
   17e93:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:167
    *bda=(uint8_t)((terminal_row+3) & 0xFF);
   17e97:	a1 00 00 a0 00       	mov    eax,ds:0xa00000
   17e9c:	8d 50 03             	lea    edx,[eax+0x3]
   17e9f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   17ea2:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:168
}
   17ea4:	90                   	nop
   17ea5:	c9                   	leave  
   17ea6:	c3                   	ret    

00017ea7 <cursorMoveTo>:
cursorMoveTo():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:171

void cursorMoveTo(uint8_t x, uint8_t y)
{
   17ea7:	55                   	push   ebp
   17ea8:	89 e5                	mov    ebp,esp
   17eaa:	83 ec 08             	sub    esp,0x8
   17ead:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17eb0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17eb3:	88 55 fc             	mov    BYTE PTR [ebp-0x4],dl
   17eb6:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:172
    terminal_row = y;
   17eb9:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   17ebd:	a3 00 00 a0 00       	mov    ds:0xa00000,eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:173
    terminal_column = x;
   17ec2:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   17ec6:	a3 04 00 a0 00       	mov    ds:0xa00004,eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:174
    update_cursor();
   17ecb:	e8 07 fb ff ff       	call   179d7 <update_cursor>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:175
}
   17ed0:	90                   	nop
   17ed1:	c9                   	leave  
   17ed2:	c3                   	ret    

00017ed3 <cursorMoveToX>:
cursorMoveToX():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:178

void cursorMoveToX(uint8_t x)
{
   17ed3:	55                   	push   ebp
   17ed4:	89 e5                	mov    ebp,esp
   17ed6:	83 ec 04             	sub    esp,0x4
   17ed9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17edc:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:179
    terminal_column = x;
   17edf:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   17ee3:	a3 04 00 a0 00       	mov    ds:0xa00004,eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:180
}
   17ee8:	90                   	nop
   17ee9:	c9                   	leave  
   17eea:	c3                   	ret    

00017eeb <cursorMoveToY>:
cursorMoveToY():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:183

void cursorMoveToY(uint8_t y)
{
   17eeb:	55                   	push   ebp
   17eec:	89 e5                	mov    ebp,esp
   17eee:	83 ec 04             	sub    esp,0x4
   17ef1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17ef4:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:184
    terminal_row = y;
   17ef7:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   17efb:	a3 00 00 a0 00       	mov    ds:0xa00000,eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:185
}
   17f00:	90                   	nop
   17f01:	c9                   	leave  
   17f02:	c3                   	ret    

00017f03 <cursorGetPosX>:
cursorGetPosX():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:188

uint8_t cursorGetPosX()
{
   17f03:	55                   	push   ebp
   17f04:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:189
    return terminal_column;
   17f06:	a1 04 00 a0 00       	mov    eax,ds:0xa00004
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:190
}
   17f0b:	5d                   	pop    ebp
   17f0c:	c3                   	ret    

00017f0d <cursorGetMaxX>:
cursorGetMaxX():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:192
int cursorGetMaxX()
{
   17f0d:	55                   	push   ebp
   17f0e:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:193
    return VGA_WIDTH;
   17f10:	b8 50 00 00 00       	mov    eax,0x50
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:194
}
   17f15:	5d                   	pop    ebp
   17f16:	c3                   	ret    

00017f17 <cursorGetMaxY>:
cursorGetMaxY():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:197

int cursorGetMaxY()
{
   17f17:	55                   	push   ebp
   17f18:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:198
    return kTerminalHeight;
   17f1a:	0f b6 05 27 00 a0 00 	movzx  eax,BYTE PTR ds:0xa00027
   17f21:	0f b6 c0             	movzx  eax,al
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:199
}
   17f24:	5d                   	pop    ebp
   17f25:	c3                   	ret    

00017f26 <displayGetMaxXY>:
displayGetMaxXY():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:202

void displayGetMaxXY(int* maxX, int* maxY)
{
   17f26:	55                   	push   ebp
   17f27:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:203
    *maxX=VGA_WIDTH;
   17f29:	b8 50 00 00 00       	mov    eax,0x50
   17f2e:	89 c2                	mov    edx,eax
   17f30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17f33:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:204
    *maxY=kTerminalHeight;
   17f35:	0f b6 05 27 00 a0 00 	movzx  eax,BYTE PTR ds:0xa00027
   17f3c:	0f b6 d0             	movzx  edx,al
   17f3f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17f42:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:205
    return;
   17f44:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:206
}
   17f45:	5d                   	pop    ebp
   17f46:	c3                   	ret    

00017f47 <cursorGetPosY>:
cursorGetPosY():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:209

uint8_t cursorGetPosY()
{
   17f47:	55                   	push   ebp
   17f48:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:210
    return terminal_row;
   17f4a:	a1 00 00 a0 00       	mov    eax,ds:0xa00000
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:211
}
   17f4f:	5d                   	pop    ebp
   17f50:	c3                   	ret    

00017f51 <kTermPrint>:
kTermPrint():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:213

void kTermPrint(const char* data) {
   17f51:	55                   	push   ebp
   17f52:	89 e5                	mov    ebp,esp
   17f54:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:214
        size_t datalen = strlen(data);
   17f57:	83 ec 0c             	sub    esp,0xc
   17f5a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   17f5d:	e8 a2 f2 00 00       	call   27204 <strlen>
   17f62:	83 c4 10             	add    esp,0x10
   17f65:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:215
        for (size_t i = 0; i < datalen; i++)
   17f68:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   17f6f:	eb 1e                	jmp    17f8f <kTermPrint+0x3e>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:216 (discriminator 3)
                terminal_putchar(data[i]);
   17f71:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17f74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   17f77:	01 d0                	add    eax,edx
   17f79:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   17f7c:	0f be c0             	movsx  eax,al
   17f7f:	83 ec 0c             	sub    esp,0xc
   17f82:	50                   	push   eax
   17f83:	e8 46 fd ff ff       	call   17cce <terminal_putchar>
   17f88:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:215 (discriminator 3)
    return terminal_row;
}

void kTermPrint(const char* data) {
        size_t datalen = strlen(data);
        for (size_t i = 0; i < datalen; i++)
   17f8b:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:215 (discriminator 1)
   17f8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   17f92:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   17f95:	72 da                	jb     17f71 <kTermPrint+0x20>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:217
                terminal_putchar(data[i]);
}
   17f97:	90                   	nop
   17f98:	c9                   	leave  
   17f99:	c3                   	ret    

00017f9a <kTermInit>:
kTermInit():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:220


void kTermInit() {
   17f9a:	55                   	push   ebp
   17f9b:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:221
    kTerminalHeight=SYS_VGA_HEIGHT;
   17f9d:	c6 05 27 00 a0 00 32 	mov    BYTE PTR ds:0xa00027,0x32
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:222
    terminal_row = 0;
   17fa4:	c7 05 00 00 a0 00 00 	mov    DWORD PTR ds:0xa00000,0x0
   17fab:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:223
    terminal_column = 0;
   17fae:	c7 05 04 00 a0 00 00 	mov    DWORD PTR ds:0xa00004,0x0
   17fb5:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:224
    terminal_color = make_color(COLOR_LIGHT_BROWN, COLOR_BLACK);
   17fb8:	6a 00                	push   0x0
   17fba:	6a 0e                	push   0xe
   17fbc:	e8 86 fa ff ff       	call   17a47 <make_color>
   17fc1:	83 c4 08             	add    esp,0x8
   17fc4:	a2 08 00 a0 00       	mov    ds:0xa00008,al
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:225
    terminal_buffer = (uint16_t*) TEXTMODE_MEMORY_START;
   17fc9:	c7 05 0c 00 a0 00 00 	mov    DWORD PTR ds:0xa0000c,0xb8000
   17fd0:	80 0b 00 
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:227
    //terminal_clear();
}
   17fd3:	90                   	nop
   17fd4:	c9                   	leave  
   17fd5:	c3                   	ret    

00017fd6 <puts>:
puts():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:230

void puts(char* in)
{
   17fd6:	55                   	push   ebp
   17fd7:	89 e5                	mov    ebp,esp
   17fd9:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:231
    while (*in>'\0')
   17fdc:	eb 1b                	jmp    17ff9 <puts+0x23>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:233
    {
        terminal_putchar(*in++);
   17fde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17fe1:	8d 50 01             	lea    edx,[eax+0x1]
   17fe4:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   17fe7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   17fea:	0f be c0             	movsx  eax,al
   17fed:	83 ec 0c             	sub    esp,0xc
   17ff0:	50                   	push   eax
   17ff1:	e8 d8 fc ff ff       	call   17cce <terminal_putchar>
   17ff6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:231
    //terminal_clear();
}

void puts(char* in)
{
    while (*in>'\0')
   17ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17ffc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   17fff:	84 c0                	test   al,al
   18001:	7f db                	jg     17fde <puts+0x8>
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:235
    {
        terminal_putchar(*in++);
    }
}
   18003:	90                   	nop
   18004:	c9                   	leave  
   18005:	c3                   	ret    

00018006 <putc>:
putc():
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:238

void putc(char c)
{
   18006:	55                   	push   ebp
   18007:	89 e5                	mov    ebp,esp
   18009:	83 ec 18             	sub    esp,0x18
   1800c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1800f:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:239
    terminal_putchar(c);
   18012:	0f be 45 f4          	movsx  eax,BYTE PTR [ebp-0xc]
   18016:	83 ec 0c             	sub    esp,0xc
   18019:	50                   	push   eax
   1801a:	e8 af fc ff ff       	call   17cce <terminal_putchar>
   1801f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/char/console/basic_display.c:240
   18022:	90                   	nop
   18023:	c9                   	leave  
   18024:	c3                   	ret    
   18025:	66 90                	xchg   ax,ax
   18027:	90                   	nop

00018028 <doRSDPSearch>:
doRSDPSearch():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:8
#include "i386/bits/types.h"

extern uint32_t kDebugLevel;

uint32_t doRSDPSearch(int from, int count)
{
   18028:	55                   	push   ebp
   18029:	89 e5                	mov    ebp,esp
   1802b:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:9
    uint8_t* fromPtr=(uint8_t*)from;
   1802e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18031:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:12
    
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   18034:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   18039:	25 00 04 00 00       	and    eax,0x400
   1803e:	85 c0                	test   eax,eax
   18040:	74 1c                	je     1805e <doRSDPSearch+0x36>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:13
            printk("doRSDPSearch: 0x%08X(0x%08X)-0x%08X\n", from, &fromPtr[0], from+count);
   18042:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18045:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18048:	01 d0                	add    eax,edx
   1804a:	50                   	push   eax
   1804b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1804e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   18051:	68 88 2a 08 00       	push   0x82a88
   18056:	e8 d8 ef 00 00       	call   27033 <printk>
   1805b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:15
#endif
    for (int cnt=0;cnt<count;cnt++)
   1805e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   18065:	e9 9f 00 00 00       	jmp    18109 <doRSDPSearch+0xe1>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:16
        if (fromPtr[cnt]=='R' && fromPtr[cnt+1]=='S' && fromPtr[cnt+2]=='D' && fromPtr[cnt+3]==' ' && fromPtr[cnt+4]=='P' && fromPtr[cnt+5]=='T' && fromPtr[cnt+6]=='R' && fromPtr[cnt+7]==' ')
   1806a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1806d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18070:	01 d0                	add    eax,edx
   18072:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18075:	3c 52                	cmp    al,0x52
   18077:	0f 85 88 00 00 00    	jne    18105 <doRSDPSearch+0xdd>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:16 (discriminator 1)
   1807d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18080:	8d 50 01             	lea    edx,[eax+0x1]
   18083:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18086:	01 d0                	add    eax,edx
   18088:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1808b:	3c 53                	cmp    al,0x53
   1808d:	75 76                	jne    18105 <doRSDPSearch+0xdd>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:16 (discriminator 2)
   1808f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18092:	8d 50 02             	lea    edx,[eax+0x2]
   18095:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18098:	01 d0                	add    eax,edx
   1809a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1809d:	3c 44                	cmp    al,0x44
   1809f:	75 64                	jne    18105 <doRSDPSearch+0xdd>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:16 (discriminator 3)
   180a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   180a4:	8d 50 03             	lea    edx,[eax+0x3]
   180a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   180aa:	01 d0                	add    eax,edx
   180ac:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   180af:	3c 20                	cmp    al,0x20
   180b1:	75 52                	jne    18105 <doRSDPSearch+0xdd>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:16 (discriminator 4)
   180b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   180b6:	8d 50 04             	lea    edx,[eax+0x4]
   180b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   180bc:	01 d0                	add    eax,edx
   180be:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   180c1:	3c 50                	cmp    al,0x50
   180c3:	75 40                	jne    18105 <doRSDPSearch+0xdd>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:16 (discriminator 5)
   180c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   180c8:	8d 50 05             	lea    edx,[eax+0x5]
   180cb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   180ce:	01 d0                	add    eax,edx
   180d0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   180d3:	3c 54                	cmp    al,0x54
   180d5:	75 2e                	jne    18105 <doRSDPSearch+0xdd>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:16 (discriminator 6)
   180d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   180da:	8d 50 06             	lea    edx,[eax+0x6]
   180dd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   180e0:	01 d0                	add    eax,edx
   180e2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   180e5:	3c 52                	cmp    al,0x52
   180e7:	75 1c                	jne    18105 <doRSDPSearch+0xdd>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:16 (discriminator 7)
   180e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   180ec:	8d 50 07             	lea    edx,[eax+0x7]
   180ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   180f2:	01 d0                	add    eax,edx
   180f4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   180f7:	3c 20                	cmp    al,0x20
   180f9:	75 0a                	jne    18105 <doRSDPSearch+0xdd>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:18
        {
            return (uint32_t)&fromPtr[cnt];
   180fb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   180fe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18101:	01 d0                	add    eax,edx
   18103:	eb 15                	jmp    1811a <doRSDPSearch+0xf2>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:15 (discriminator 2)
    
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
            printk("doRSDPSearch: 0x%08X(0x%08X)-0x%08X\n", from, &fromPtr[0], from+count);
#endif
    for (int cnt=0;cnt<count;cnt++)
   18105:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:15 (discriminator 1)
   18109:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1810c:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   1810f:	0f 8c 55 ff ff ff    	jl     1806a <doRSDPSearch+0x42>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:20
        if (fromPtr[cnt]=='R' && fromPtr[cnt+1]=='S' && fromPtr[cnt+2]=='D' && fromPtr[cnt+3]==' ' && fromPtr[cnt+4]=='P' && fromPtr[cnt+5]=='T' && fromPtr[cnt+6]=='R' && fromPtr[cnt+7]==' ')
        {
            return (uint32_t)&fromPtr[cnt];
        }
    return 0xFFFFFFFF;
   18115:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:21
}
   1811a:	c9                   	leave  
   1811b:	c3                   	ret    

0001811c <acpiFindTable>:
acpiFindTable():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:24

acpiFADT_t *acpiFindTable(void *RootSDT, char* tableSignature)
{
   1811c:	55                   	push   ebp
   1811d:	89 e5                	mov    ebp,esp
   1811f:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:25
    acpiRSDT_t* rsdt = (acpiRSDT_t*) RootSDT;
   18122:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18125:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:26
    int entries = ((rsdt->header.Length - sizeof(rsdt->header)) / 4)+10;
   18128:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1812b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1812e:	83 e8 24             	sub    eax,0x24
   18131:	c1 e8 02             	shr    eax,0x2
   18134:	83 c0 0a             	add    eax,0xa
   18137:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:28
 
    for (int i = 0; i < entries; i++)
   1813a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   18141:	eb 48                	jmp    1818b <acpiFindTable+0x6f>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:30
    {
        acpiRSDT_t *nextRSDT = (acpiRSDT_t*)rsdt->PointerToOtherSDT[i];
   18143:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18146:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   18149:	83 c2 08             	add    edx,0x8
   1814c:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
   18150:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:31
        printk("***tableSignature=%s, header sig=%s***\n", tableSignature, nextRSDT->header.Signature);
   18153:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18156:	83 ec 04             	sub    esp,0x4
   18159:	50                   	push   eax
   1815a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1815d:	68 b0 2a 08 00       	push   0x82ab0
   18162:	e8 cc ee 00 00       	call   27033 <printk>
   18167:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:32
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
   1816a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1816d:	83 ec 04             	sub    esp,0x4
   18170:	6a 04                	push   0x4
   18172:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   18175:	50                   	push   eax
   18176:	e8 91 9a ff ff       	call   11c0c <strncmp>
   1817b:	83 c4 10             	add    esp,0x10
   1817e:	85 c0                	test   eax,eax
   18180:	75 05                	jne    18187 <acpiFindTable+0x6b>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:33
            return (acpiFADT_t*)nextRSDT;
   18182:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18185:	eb 11                	jmp    18198 <acpiFindTable+0x7c>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:28 (discriminator 2)
acpiFADT_t *acpiFindTable(void *RootSDT, char* tableSignature)
{
    acpiRSDT_t* rsdt = (acpiRSDT_t*) RootSDT;
    int entries = ((rsdt->header.Length - sizeof(rsdt->header)) / 4)+10;
 
    for (int i = 0; i < entries; i++)
   18187:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:28 (discriminator 1)
   1818b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1818e:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   18191:	7c b0                	jl     18143 <acpiFindTable+0x27>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:37
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
            return (acpiFADT_t*)nextRSDT;
    }
 
    // No FACP found
    return NULL;
   18193:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:38
}
   18198:	c9                   	leave  
   18199:	c3                   	ret    

0001819a <acpiFindTable2>:
acpiFindTable2():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:40
void *acpiFindTable2(void *RootSDT, char* tableSignature)
{
   1819a:	55                   	push   ebp
   1819b:	89 e5                	mov    ebp,esp
   1819d:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:41
    acpiRSDT_t *rsdt = (acpiRSDT_t*) RootSDT;
   181a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   181a3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:42
    int entries = (rsdt->header.Length - sizeof(rsdt->header)) / 4;
   181a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   181a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   181ac:	83 e8 24             	sub    eax,0x24
   181af:	c1 e8 02             	shr    eax,0x2
   181b2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:44
 
    for (int i = 0; i < entries; i++)
   181b5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   181bc:	eb 48                	jmp    18206 <acpiFindTable2+0x6c>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:46
    {
        acpiRSDT_t *nextRSDT = (acpiRSDT_t *) rsdt->PointerToOtherSDT[i];
   181be:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   181c1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   181c4:	83 c2 08             	add    edx,0x8
   181c7:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
   181cb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:47
        printk("***tableSignature=%s, header sig=%s***\n", tableSignature, nextRSDT->header.Signature);
   181ce:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   181d1:	83 ec 04             	sub    esp,0x4
   181d4:	50                   	push   eax
   181d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   181d8:	68 b0 2a 08 00       	push   0x82ab0
   181dd:	e8 51 ee 00 00       	call   27033 <printk>
   181e2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:48
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
   181e5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   181e8:	83 ec 04             	sub    esp,0x4
   181eb:	6a 04                	push   0x4
   181ed:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   181f0:	50                   	push   eax
   181f1:	e8 16 9a ff ff       	call   11c0c <strncmp>
   181f6:	83 c4 10             	add    esp,0x10
   181f9:	85 c0                	test   eax,eax
   181fb:	75 05                	jne    18202 <acpiFindTable2+0x68>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:49
            return (void *) nextRSDT;
   181fd:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18200:	eb 11                	jmp    18213 <acpiFindTable2+0x79>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:44 (discriminator 2)
void *acpiFindTable2(void *RootSDT, char* tableSignature)
{
    acpiRSDT_t *rsdt = (acpiRSDT_t*) RootSDT;
    int entries = (rsdt->header.Length - sizeof(rsdt->header)) / 4;
 
    for (int i = 0; i < entries; i++)
   18202:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:44 (discriminator 1)
   18206:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18209:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   1820c:	7c b0                	jl     181be <acpiFindTable2+0x24>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:53
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
            return (void *) nextRSDT;
    }
 
    // No FACP found
    return NULL;
   1820e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:54
}
   18213:	c9                   	leave  
   18214:	c3                   	ret    

00018215 <acpiFindTables>:
acpiFindTables():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:56
void acpiFindTables()
{
   18215:	55                   	push   ebp
   18216:	89 e5                	mov    ebp,esp
   18218:	83 ec 28             	sub    esp,0x28
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:61
    acpiRSDPHeader_t* lRSDPTable;
    acpiRSDT_t* lRootSDP;
    acpiFADT_t* lFADTSDP;
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   1821b:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   18220:	25 00 04 00 00       	and    eax,0x400
   18225:	85 c0                	test   eax,eax
   18227:	74 10                	je     18239 <acpiFindTables+0x24>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:62
             printk("acpiFindTables: Looking for ACPI tables\n");
   18229:	83 ec 0c             	sub    esp,0xc
   1822c:	68 d8 2a 08 00       	push   0x82ad8
   18231:	e8 fd ed 00 00       	call   27033 <printk>
   18236:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:64
#endif
             uint16_t* lEBDABIOSPtr=(uint16_t*)0x40e;
   18239:	c7 45 e8 0e 04 00 00 	mov    DWORD PTR [ebp-0x18],0x40e
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:65
    int32_t lRSDPPtr, lRSDPBaseAddress=0xFFFFFFFF;
   18240:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:68
    
    //Start by looking in the bios for the extended bios data area (EBDA) segment address, and search there
    if (lEBDABIOSPtr != 0)
   18247:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1824b:	74 2b                	je     18278 <acpiFindTables+0x63>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:70
    {
        lRSDPPtr=*lEBDABIOSPtr*10;
   1824d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18250:	0f b7 00             	movzx  eax,WORD PTR [eax]
   18253:	0f b7 d0             	movzx  edx,ax
   18256:	89 d0                	mov    eax,edx
   18258:	c1 e0 02             	shl    eax,0x2
   1825b:	01 d0                	add    eax,edx
   1825d:	01 c0                	add    eax,eax
   1825f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:71
        lRSDPBaseAddress = doRSDPSearch(lRSDPPtr, 0xFFFF);
   18262:	83 ec 08             	sub    esp,0x8
   18265:	68 ff ff 00 00       	push   0xffff
   1826a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1826d:	e8 b6 fd ff ff       	call   18028 <doRSDPSearch>
   18272:	83 c4 10             	add    esp,0x10
   18275:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:74
    }
    //If we didn't find the RSDP table there, look from 0xE0000->0xFFFFF
    if (lRSDPBaseAddress==0xFFFFFFFF)
   18278:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
   1827c:	75 18                	jne    18296 <acpiFindTables+0x81>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:76
    {
        lRSDPBaseAddress=doRSDPSearch(0xE0000, 0x1FFFF);
   1827e:	83 ec 08             	sub    esp,0x8
   18281:	68 ff ff 01 00       	push   0x1ffff
   18286:	68 00 00 0e 00       	push   0xe0000
   1828b:	e8 98 fd ff ff       	call   18028 <doRSDPSearch>
   18290:	83 c4 10             	add    esp,0x10
   18293:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:78
    }
    if (lRSDPBaseAddress==-1)
   18296:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
   1829a:	75 2a                	jne    182c6 <acpiFindTables+0xb1>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:81
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   1829c:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   182a1:	25 00 04 00 00       	and    eax,0x400
   182a6:	85 c0                	test   eax,eax
   182a8:	0f 84 51 01 00 00    	je     183ff <acpiFindTables+0x1ea>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:82
           printk(" table not found\n", lRSDPPtr);
   182ae:	83 ec 08             	sub    esp,0x8
   182b1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   182b4:	68 01 2b 08 00       	push   0x82b01
   182b9:	e8 75 ed 00 00       	call   27033 <printk>
   182be:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:84
#endif
        return;
   182c1:	e9 39 01 00 00       	jmp    183ff <acpiFindTables+0x1ea>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:86
    }
    lRSDPTable=(acpiRSDPHeader_t*)lRSDPBaseAddress;
   182c6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   182c9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:88
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   182cc:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   182d1:	25 00 04 00 00       	and    eax,0x400
   182d6:	85 c0                	test   eax,eax
   182d8:	74 42                	je     1831c <acpiFindTables+0x107>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:90
    {
        printk(" table found at 0x%08X\n", lRSDPBaseAddress);
   182da:	83 ec 08             	sub    esp,0x8
   182dd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   182e0:	68 13 2b 08 00       	push   0x82b13
   182e5:	e8 49 ed 00 00       	call   27033 <printk>
   182ea:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:91
        printk("ACPI version %s, RSPD OEM Id: %s\n", lRSDPTable->firstPart.Revision==0?"1.0":"2+", lRSDPTable->firstPart.OEMID);
   182ed:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   182f0:	8d 50 09             	lea    edx,[eax+0x9]
   182f3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   182f6:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   182fa:	84 c0                	test   al,al
   182fc:	75 07                	jne    18305 <acpiFindTables+0xf0>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:91 (discriminator 1)
   182fe:	b8 2b 2b 08 00       	mov    eax,0x82b2b
   18303:	eb 05                	jmp    1830a <acpiFindTables+0xf5>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:91 (discriminator 2)
   18305:	b8 2f 2b 08 00       	mov    eax,0x82b2f
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:91 (discriminator 4)
   1830a:	83 ec 04             	sub    esp,0x4
   1830d:	52                   	push   edx
   1830e:	50                   	push   eax
   1830f:	68 34 2b 08 00       	push   0x82b34
   18314:	e8 1a ed 00 00       	call   27033 <printk>
   18319:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:93
    }
    if (lRSDPTable->firstPart.Revision==0)
   1831c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1831f:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   18323:	84 c0                	test   al,al
   18325:	75 29                	jne    18350 <acpiFindTables+0x13b>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:95
    {
        lRootSDP=(acpiRSDT_t*)lRSDPTable->firstPart.RsdtAddress;
   18327:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1832a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1832d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:96
        printk("RSDP is at 0x%08X, OEM Id: %s, OSDT=0x%08X\n", lRootSDP, lRootSDP->header.OEMID, lRootSDP->PointerToOtherSDT);
   18330:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18333:	8d 50 24             	lea    edx,[eax+0x24]
   18336:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18339:	83 c0 0a             	add    eax,0xa
   1833c:	52                   	push   edx
   1833d:	50                   	push   eax
   1833e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   18341:	68 58 2b 08 00       	push   0x82b58
   18346:	e8 e8 ec 00 00       	call   27033 <printk>
   1834b:	83 c4 10             	add    esp,0x10
   1834e:	eb 2a                	jmp    1837a <acpiFindTables+0x165>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:100
    }
    else
    {
        lRootSDP=(acpiRSDT_t*)lRSDPTable->XsdtAddress;
   18350:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   18353:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   18356:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   18359:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:101
        printk("RSDP is at 0x%08X, OEM Id: %s, OSDT=0x%08X\n", lRootSDP, lRootSDP->header.OEMID, lRootSDP->PointerToOtherSDT);
   1835c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1835f:	8d 50 24             	lea    edx,[eax+0x24]
   18362:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18365:	83 c0 0a             	add    eax,0xa
   18368:	52                   	push   edx
   18369:	50                   	push   eax
   1836a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1836d:	68 58 2b 08 00       	push   0x82b58
   18372:	e8 bc ec 00 00       	call   27033 <printk>
   18377:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:103
    }
    lFADTSDP=acpiFindTable(lRootSDP,"FACP");
   1837a:	83 ec 08             	sub    esp,0x8
   1837d:	68 84 2b 08 00       	push   0x82b84
   18382:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   18385:	e8 92 fd ff ff       	call   1811c <acpiFindTable>
   1838a:	83 c4 10             	add    esp,0x10
   1838d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:104
    if (lFADTSDP!=NULL)
   18390:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   18394:	74 2e                	je     183c4 <acpiFindTables+0x1af>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:106
    {
        printk("FACP found at 0x%08X. resetReg=0x%08X\n", lFADTSDP, lFADTSDP->ResetReg);
   18396:	83 ec 0c             	sub    esp,0xc
   18399:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1839c:	83 ec 0c             	sub    esp,0xc
   1839f:	89 e2                	mov    edx,esp
   183a1:	8b 48 74             	mov    ecx,DWORD PTR [eax+0x74]
   183a4:	89 0a                	mov    DWORD PTR [edx],ecx
   183a6:	8b 48 78             	mov    ecx,DWORD PTR [eax+0x78]
   183a9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   183ac:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
   183af:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
   183b2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   183b5:	68 8c 2b 08 00       	push   0x82b8c
   183ba:	e8 74 ec 00 00       	call   27033 <printk>
   183bf:	83 c4 20             	add    esp,0x20
   183c2:	eb 10                	jmp    183d4 <acpiFindTables+0x1bf>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:110
    }
    else
    {
        printk("Failed to find FACP table, cannot continue ACPI discovery.\n");
   183c4:	83 ec 0c             	sub    esp,0xc
   183c7:	68 b4 2b 08 00       	push   0x82bb4
   183cc:	e8 62 ec 00 00       	call   27033 <printk>
   183d1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:112
    }
    uint32_t* ltemp=acpiFindTable(lFADTSDP,"DSDT");
   183d4:	83 ec 08             	sub    esp,0x8
   183d7:	68 f0 2b 08 00       	push   0x82bf0
   183dc:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   183df:	e8 38 fd ff ff       	call   1811c <acpiFindTable>
   183e4:	83 c4 10             	add    esp,0x10
   183e7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:113
    printk("lTemp=0x%08X\n", ltemp);
   183ea:	83 ec 08             	sub    esp,0x8
   183ed:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   183f0:	68 f5 2b 08 00       	push   0x82bf5
   183f5:	e8 39 ec 00 00       	call   27033 <printk>
   183fa:	83 c4 10             	add    esp,0x10
   183fd:	eb 01                	jmp    18400 <acpiFindTables+0x1eb>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:84
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
           printk(" table not found\n", lRSDPPtr);
#endif
        return;
   183ff:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:118
    printk("lTemp=0x%08X\n", ltemp);
    
#endif
    
   
}
   18400:	c9                   	leave  
   18401:	c3                   	ret    

00018402 <acpiInitialize>:
acpiInitialize():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:122
    
   
void acpiInitialize()
{
   18402:	55                   	push   ebp
   18403:	89 e5                	mov    ebp,esp
   18405:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:123
    acpiFindTables();
   18408:	e8 08 fe ff ff       	call   18215 <acpiFindTables>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/acpi.c:125
    
}
   1840d:	90                   	nop
   1840e:	c9                   	leave  
   1840f:	c3                   	ret    

00018410 <__get_cpuid_max>:
__get_cpuid_max():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:179
   pointer is non-null, then first four bytes of the signature
   (as found in ebx register) are returned in location pointed by sig.  */

static __inline unsigned int
__get_cpuid_max (unsigned int __ext, unsigned int *__sig)
{
   18410:	55                   	push   ebp
   18411:	89 e5                	mov    ebp,esp
   18413:	53                   	push   ebx
   18414:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:185
  unsigned int __eax, __ebx, __ecx, __edx;

#ifndef __x86_64__
  /* See if we can use cpuid.  On AMD64 we always can.  */
#if __GNUC__ >= 3
  __asm__ ("pushf{l|d}\n\t"
   18417:	9c                   	pushf  
   18418:	9c                   	pushf  
   18419:	5a                   	pop    edx
   1841a:	89 d0                	mov    eax,edx
   1841c:	81 f2 00 00 20 00    	xor    edx,0x200000
   18422:	52                   	push   edx
   18423:	9d                   	popf   
   18424:	9c                   	pushf  
   18425:	5a                   	pop    edx
   18426:	9d                   	popf   
   18427:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   1842a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:214
	   "popfl\n\t"
	   : "=&r" (__eax), "=&r" (__ebx)
	   : "i" (0x00200000));
#endif

  if (!((__eax ^ __ebx) & 0x00200000))
   1842d:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   18430:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
   18433:	25 00 00 20 00       	and    eax,0x200000
   18438:	85 c0                	test   eax,eax
   1843a:	75 07                	jne    18443 <__get_cpuid_max+0x33>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:215
    return 0;
   1843c:	b8 00 00 00 00       	mov    eax,0x0
   18441:	eb 22                	jmp    18465 <__get_cpuid_max+0x55>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:219
#endif

  /* Host supports cpuid.  Return highest supported cpuid input value.  */
  __cpuid (__ext, __eax, __ebx, __ecx, __edx);
   18443:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18446:	0f a2                	cpuid  
   18448:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   1844b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
   1844e:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   18451:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:221

  if (__sig)
   18454:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   18458:	74 08                	je     18462 <__get_cpuid_max+0x52>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:222
    *__sig = __ebx;
   1845a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1845d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   18460:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:224

  return __eax;
   18462:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:225
}
   18465:	83 c4 10             	add    esp,0x10
   18468:	5b                   	pop    ebx
   18469:	5d                   	pop    ebp
   1846a:	c3                   	ret    

0001846b <__get_cpuid>:
__get_cpuid():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:236

static __inline int
__get_cpuid (unsigned int __level,
	     unsigned int *__eax, unsigned int *__ebx,
	     unsigned int *__ecx, unsigned int *__edx)
{
   1846b:	55                   	push   ebp
   1846c:	89 e5                	mov    ebp,esp
   1846e:	56                   	push   esi
   1846f:	53                   	push   ebx
   18470:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:237
  unsigned int __ext = __level & 0x80000000;
   18473:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18476:	25 00 00 00 80       	and    eax,0x80000000
   1847b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:239

  if (__get_cpuid_max (__ext, 0) < __level)
   1847e:	6a 00                	push   0x0
   18480:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   18483:	e8 88 ff ff ff       	call   18410 <__get_cpuid_max>
   18488:	83 c4 08             	add    esp,0x8
   1848b:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1848e:	73 07                	jae    18497 <__get_cpuid+0x2c>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:240
    return 0;
   18490:	b8 00 00 00 00       	mov    eax,0x0
   18495:	eb 1e                	jmp    184b5 <__get_cpuid+0x4a>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:242

  __cpuid (__level, *__eax, *__ebx, *__ecx, *__edx);
   18497:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1849a:	0f a2                	cpuid  
   1849c:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
   1849f:	89 06                	mov    DWORD PTR [esi],eax
   184a1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   184a4:	89 18                	mov    DWORD PTR [eax],ebx
   184a6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   184a9:	89 08                	mov    DWORD PTR [eax],ecx
   184ab:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   184ae:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:243
  return 1;
   184b0:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:244
}
   184b5:	8d 65 f8             	lea    esp,[ebp-0x8]
   184b8:	5b                   	pop    ebx
   184b9:	5e                   	pop    esi
   184ba:	5d                   	pop    ebp
   184bb:	c3                   	ret    

000184bc <rdtsc>:
rdtsc():
/home/yogi/NetBeansProjects/chrisOS/include/utility.h:55
void reboot(bool waitFirst);
bool pauseDisplay(bool offerToQuit);
#if defined(__i386__)

static __inline__ unsigned long long rdtsc(void)
{
   184bc:	55                   	push   ebp
   184bd:	89 e5                	mov    ebp,esp
   184bf:	83 ec 10             	sub    esp,0x10
   184c2:	0f 31                	rdtsc  
/home/yogi/NetBeansProjects/chrisOS/include/utility.h:57
    unsigned long long int x;
    __asm__ volatile (".byte 0x0f, 0x31" : "=A" (x));
   184c4:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   184c7:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/NetBeansProjects/chrisOS/include/utility.h:58
    return x;
   184ca:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   184cd:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
/home/yogi/NetBeansProjects/chrisOS/include/utility.h:59
}
   184d0:	c9                   	leave  
   184d1:	c3                   	ret    

000184d2 <apicCheckFor>:
apicCheckFor():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:12
 *  and if the local APIC hasn't been disabled in MSRs
 *  note that this requires CPUID to be supported.
 */

extern cpu_t kCPU[];
bool apicCheckFor() {
   184d2:	55                   	push   ebp
   184d3:	89 e5                	mov    ebp,esp
   184d5:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:13
   uint32_t eax=0, edx=0, notused=0;
   184d8:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   184df:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   184e6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:14
   __get_cpuid(1, &eax, &notused, &notused, &edx);
   184ed:	8d 45 f8             	lea    eax,[ebp-0x8]
   184f0:	50                   	push   eax
   184f1:	8d 45 f4             	lea    eax,[ebp-0xc]
   184f4:	50                   	push   eax
   184f5:	8d 45 f4             	lea    eax,[ebp-0xc]
   184f8:	50                   	push   eax
   184f9:	8d 45 fc             	lea    eax,[ebp-0x4]
   184fc:	50                   	push   eax
   184fd:	6a 01                	push   0x1
   184ff:	e8 67 ff ff ff       	call   1846b <__get_cpuid>
   18504:	83 c4 14             	add    esp,0x14
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:15
   return edx & CPUID_FLAG_APIC;
   18507:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1850a:	25 00 02 00 00       	and    eax,0x200
   1850f:	85 c0                	test   eax,eax
   18511:	0f 95 c0             	setne  al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:16
}
   18514:	c9                   	leave  
   18515:	c3                   	ret    

00018516 <acpiGetAPICVersion>:
acpiGetAPICVersion():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:19

uint8_t acpiGetAPICVersion()
{
   18516:	55                   	push   ebp
   18517:	89 e5                	mov    ebp,esp
   18519:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:20
    return apicReadRegister(APIC_REGISTER_VERSION);
   1851c:	83 ec 0c             	sub    esp,0xc
   1851f:	6a 30                	push   0x30
   18521:	e8 3f 00 00 00       	call   18565 <apicReadRegister>
   18526:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:21
}
   18529:	c9                   	leave  
   1852a:	c3                   	ret    

0001852b <apciGetAPICID>:
apciGetAPICID():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:24

uint8_t apciGetAPICID(unsigned whichAPIC)
{
   1852b:	55                   	push   ebp
   1852c:	89 e5                	mov    ebp,esp
   1852e:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:25
    return apicReadRegister(APIC_REGISTER_APIC_ID_OFFSET);
   18531:	83 ec 0c             	sub    esp,0xc
   18534:	6a 20                	push   0x20
   18536:	e8 2a 00 00 00       	call   18565 <apicReadRegister>
   1853b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:26
}
   1853e:	c9                   	leave  
   1853f:	c3                   	ret    

00018540 <apicGetAPICBase>:
apicGetAPICBase():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:29

uint32_t apicGetAPICBase(void)
{
   18540:	55                   	push   ebp
   18541:	89 e5                	mov    ebp,esp
   18543:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:31
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   18546:	83 ec 04             	sub    esp,0x4
   18549:	8d 45 f0             	lea    eax,[ebp-0x10]
   1854c:	50                   	push   eax
   1854d:	8d 45 f4             	lea    eax,[ebp-0xc]
   18550:	50                   	push   eax
   18551:	6a 1b                	push   0x1b
   18553:	e8 cb 12 00 00       	call   19823 <rdmsr32>
   18558:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:33

   return (eax & 0xfffff000);
   1855b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1855e:	25 00 f0 ff ff       	and    eax,0xfffff000
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:34
}
   18563:	c9                   	leave  
   18564:	c3                   	ret    

00018565 <apicReadRegister>:
apicReadRegister():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:37

uint32_t apicReadRegister(uint32_t reg) 
{
   18565:	55                   	push   ebp
   18566:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:38
    return *((volatile uint32_t *) (kCPU[0].registerBase + reg));
   18568:	8b 15 64 03 a0 00    	mov    edx,DWORD PTR ds:0xa00364
   1856e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18571:	01 d0                	add    eax,edx
   18573:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:39
}
   18575:	5d                   	pop    ebp
   18576:	c3                   	ret    

00018577 <apicWriteRegister>:
apicWriteRegister():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:41

void apicWriteRegister(uint32_t reg, uint32_t value) {
   18577:	55                   	push   ebp
   18578:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:42
    *((volatile uint32_t *) (kCPU[0].registerBase + reg)) = value;
   1857a:	8b 15 64 03 a0 00    	mov    edx,DWORD PTR ds:0xa00364
   18580:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18583:	01 d0                	add    eax,edx
   18585:	89 c2                	mov    edx,eax
   18587:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1858a:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:43
}
   1858c:	90                   	nop
   1858d:	5d                   	pop    ebp
   1858e:	c3                   	ret    

0001858f <apicSetAPICBase>:
apicSetAPICBase():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:46

/* Set the physical address for local APIC registers */
void apicSetAPICBase(uintptr_t apic) {
   1858f:	55                   	push   ebp
   18590:	89 e5                	mov    ebp,esp
   18592:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:47
   uint32_t edx = 0;
   18595:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:48
   uint32_t eax = (apic & 0xfffff100) | IA32_APIC_BASE_MSR_ENABLE;
   1859c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1859f:	25 00 f1 ff ff       	and    eax,0xfffff100
   185a4:	80 cc 08             	or     ah,0x8
   185a7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:54
 
#ifdef __PHYSICAL_MEMORY_EXTENSION__
   edx = (apic >> 32) & 0x0f;
#endif
 
   wrmsr32(IA32_APIC_BASE_MSR, eax, edx);
   185aa:	83 ec 04             	sub    esp,0x4
   185ad:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   185b0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   185b3:	6a 1b                	push   0x1b
   185b5:	e8 bf 12 00 00       	call   19879 <wrmsr32>
   185ba:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:55
   kCPU[0].registerBase=apic;
   185bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   185c0:	a3 64 03 a0 00       	mov    ds:0xa00364,eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:56
}
   185c5:	90                   	nop
   185c6:	c9                   	leave  
   185c7:	c3                   	ret    

000185c8 <cpu_get_apic_base>:
cpu_get_apic_base():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:62
 
/**
 * Get the physical address of the APIC registers page
 * make sure you map it to virtual memory ;)
 */
uintptr_t cpu_get_apic_base() {
   185c8:	55                   	push   ebp
   185c9:	89 e5                	mov    ebp,esp
   185cb:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:64
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   185ce:	83 ec 04             	sub    esp,0x4
   185d1:	8d 45 f0             	lea    eax,[ebp-0x10]
   185d4:	50                   	push   eax
   185d5:	8d 45 f4             	lea    eax,[ebp-0xc]
   185d8:	50                   	push   eax
   185d9:	6a 1b                	push   0x1b
   185db:	e8 43 12 00 00       	call   19823 <rdmsr32>
   185e0:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:69
 
#ifdef __PHYSICAL_MEMORY_EXTENSION__
   return (eax & 0xfffff000) | ((edx & 0x0f) << 32);
#else
   return (eax & 0xfffff000);
   185e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   185e6:	25 00 f0 ff ff       	and    eax,0xfffff000
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:71
#endif
}
   185eb:	c9                   	leave  
   185ec:	c3                   	ret    

000185ed <apicIsEnabled>:
apicIsEnabled():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:73

bool apicIsEnabled() {
   185ed:	55                   	push   ebp
   185ee:	89 e5                	mov    ebp,esp
   185f0:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:75
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   185f3:	83 ec 04             	sub    esp,0x4
   185f6:	8d 45 f0             	lea    eax,[ebp-0x10]
   185f9:	50                   	push   eax
   185fa:	8d 45 f4             	lea    eax,[ebp-0xc]
   185fd:	50                   	push   eax
   185fe:	6a 1b                	push   0x1b
   18600:	e8 1e 12 00 00       	call   19823 <rdmsr32>
   18605:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:76
   return (eax & (1<<11)) == (1<11);
   18608:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:77
} 
   1860d:	c9                   	leave  
   1860e:	c3                   	ret    

0001860f <apicEnable>:
apicEnable():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:79

void apicEnable() {
   1860f:	55                   	push   ebp
   18610:	89 e5                	mov    ebp,esp
   18612:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:81
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   18615:	83 ec 04             	sub    esp,0x4
   18618:	8d 45 f0             	lea    eax,[ebp-0x10]
   1861b:	50                   	push   eax
   1861c:	8d 45 f4             	lea    eax,[ebp-0xc]
   1861f:	50                   	push   eax
   18620:	6a 1b                	push   0x1b
   18622:	e8 fc 11 00 00       	call   19823 <rdmsr32>
   18627:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:82
   eax |=IA32_APIC_BASE_MSR_ENABLE;
   1862a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1862d:	80 cc 08             	or     ah,0x8
   18630:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:83
   wrmsr32(IA32_APIC_BASE_MSR, eax, edx);
   18633:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   18636:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18639:	83 ec 04             	sub    esp,0x4
   1863c:	52                   	push   edx
   1863d:	50                   	push   eax
   1863e:	6a 1b                	push   0x1b
   18640:	e8 34 12 00 00       	call   19879 <wrmsr32>
   18645:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:84
} 
   18648:	90                   	nop
   18649:	c9                   	leave  
   1864a:	c3                   	ret    

0001864b <apicDisable>:
apicDisable():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:86

void apicDisable() {
   1864b:	55                   	push   ebp
   1864c:	89 e5                	mov    ebp,esp
   1864e:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:88
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   18651:	83 ec 04             	sub    esp,0x4
   18654:	8d 45 f0             	lea    eax,[ebp-0x10]
   18657:	50                   	push   eax
   18658:	8d 45 f4             	lea    eax,[ebp-0xc]
   1865b:	50                   	push   eax
   1865c:	6a 1b                	push   0x1b
   1865e:	e8 c0 11 00 00       	call   19823 <rdmsr32>
   18663:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:89
   eax&=!IA32_APIC_BASE_MSR_ENABLE;
   18666:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:90
   wrmsr32(IA32_APIC_BASE_MSR, eax, edx);
   1866d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   18670:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18673:	83 ec 04             	sub    esp,0x4
   18676:	52                   	push   edx
   18677:	50                   	push   eax
   18678:	6a 1b                	push   0x1b
   1867a:	e8 fa 11 00 00       	call   19879 <wrmsr32>
   1867f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:91
} 
   18682:	90                   	nop
   18683:	c9                   	leave  
   18684:	c3                   	ret    

00018685 <apicGetHZ>:
apicGetHZ():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:92
uint32_t apicGetHZ() {
   18685:	55                   	push   ebp
   18686:	89 e5                	mov    ebp,esp
   18688:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:94

    int timerTimeout=500;
   1868b:	c7 45 f4 f4 01 00 00 	mov    DWORD PTR [ebp-0xc],0x1f4
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:106
    apicWriteRegister(APIC_REGISTER_LVT_TIMER, APIC_TIMER_INT_DISABLE);
*/

    // Prepare the PIT to sleep for 10ms (10000µs)

    apicEnable();
   18692:	e8 78 ff ff ff       	call   1860f <apicEnable>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:107
    apicWriteRegister(APIC_REGISTER_SPURIOUS, 39+APIC_SW_ENABLE);
   18697:	83 ec 08             	sub    esp,0x8
   1869a:	68 27 01 00 00       	push   0x127
   1869f:	68 f0 00 00 00       	push   0xf0
   186a4:	e8 ce fe ff ff       	call   18577 <apicWriteRegister>
   186a9:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:109
    // Set APIC init counter to -1
    apicWriteRegister(APIC_REGISTER_LVT_TIMER, 32 | APIC_TIMER_MODE_ONESHOT );
   186ac:	83 ec 08             	sub    esp,0x8
   186af:	6a 20                	push   0x20
   186b1:	68 20 03 00 00       	push   0x320
   186b6:	e8 bc fe ff ff       	call   18577 <apicWriteRegister>
   186bb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:111
    // Tell APIC timer to use divider 16
    apicWriteRegister(APIC_REGISTER_TIMER_DIV, 0x11);
   186be:	83 ec 08             	sub    esp,0x8
   186c1:	6a 11                	push   0x11
   186c3:	68 e0 03 00 00       	push   0x3e0
   186c8:	e8 aa fe ff ff       	call   18577 <apicWriteRegister>
   186cd:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:112
    apicWriteRegister(APIC_REGISTER_TIMER_INITIAL, 0xFFFFFFFF);
   186d0:	83 ec 08             	sub    esp,0x8
   186d3:	6a ff                	push   0xffffffff
   186d5:	68 80 03 00 00       	push   0x380
   186da:	e8 98 fe ff ff       	call   18577 <apicWriteRegister>
   186df:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:115

    // Perform PIT-supported sleep
    wait(timerTimeout);
   186e2:	83 ec 0c             	sub    esp,0xc
   186e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   186e8:	e8 85 fb 00 00       	call   28272 <wait>
   186ed:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:117

    apicWriteRegister(APIC_REGISTER_LVT_TIMER, APIC_TIMER_INT_DISABLE);
   186f0:	83 ec 08             	sub    esp,0x8
   186f3:	68 00 00 01 00       	push   0x10000
   186f8:	68 20 03 00 00       	push   0x320
   186fd:	e8 75 fe ff ff       	call   18577 <apicWriteRegister>
   18702:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:119
    // Now we know how often the APIC timer has ticked in 10ms
    uint64_t ticksPer10ms = 0xFFFFFFFF - apicReadRegister(APIC_REGISTER_TIMER_CURRENT);
   18705:	83 ec 0c             	sub    esp,0xc
   18708:	68 90 03 00 00       	push   0x390
   1870d:	e8 53 fe ff ff       	call   18565 <apicReadRegister>
   18712:	83 c4 10             	add    esp,0x10
   18715:	f7 d0                	not    eax
   18717:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   1871a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:120
    ticksPer10ms=ticksPer10ms/(timerTimeout/10);
   18721:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   18724:	ba 67 66 66 66       	mov    edx,0x66666667
   18729:	89 c8                	mov    eax,ecx
   1872b:	f7 ea                	imul   edx
   1872d:	c1 fa 02             	sar    edx,0x2
   18730:	89 c8                	mov    eax,ecx
   18732:	c1 f8 1f             	sar    eax,0x1f
   18735:	29 c2                	sub    edx,eax
   18737:	89 d0                	mov    eax,edx
   18739:	99                   	cdq    
   1873a:	52                   	push   edx
   1873b:	50                   	push   eax
   1873c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1873f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   18742:	e8 79 fc 00 00       	call   283c0 <__udivdi3>
   18747:	83 c4 10             	add    esp,0x10
   1874a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   1874d:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:124
    
    // Start timer as periodic on IRQ 0, divider 16, with the number of ticks we counted
//    apicWriteRegister(APIC_REGISTER_LVT_TIMER, 32  | APIC_TIMER_MODE_PERIODIC ); //clears the INT DISABLE pin
    apicWriteRegister(APIC_REGISTER_TIMER_DIV, 0x3);
   18750:	83 ec 08             	sub    esp,0x8
   18753:	6a 03                	push   0x3
   18755:	68 e0 03 00 00       	push   0x3e0
   1875a:	e8 18 fe ff ff       	call   18577 <apicWriteRegister>
   1875f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:125
    apicWriteRegister(APIC_REGISTER_TIMER_INITIAL, ticksPer10ms);
   18762:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18765:	83 ec 08             	sub    esp,0x8
   18768:	50                   	push   eax
   18769:	68 80 03 00 00       	push   0x380
   1876e:	e8 04 fe ff ff       	call   18577 <apicWriteRegister>
   18773:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:126
    return ticksPer10ms;
   18776:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:127
}
   18779:	c9                   	leave  
   1877a:	c3                   	ret    

0001877b <tscGetTicksPerSecond>:
tscGetTicksPerSecond():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:130

int tscGetTicksPerSecond()
{
   1877b:	55                   	push   ebp
   1877c:	89 e5                	mov    ebp,esp
   1877e:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:131
    uint64_t ticksBefore=rdtsc();
   18781:	e8 36 fd ff ff       	call   184bc <rdtsc>
   18786:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   18789:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:132
    wait(1000);
   1878c:	83 ec 0c             	sub    esp,0xc
   1878f:	68 e8 03 00 00       	push   0x3e8
   18794:	e8 d9 fa 00 00       	call   28272 <wait>
   18799:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:133
    return rdtsc()-ticksBefore;
   1879c:	e8 1b fd ff ff       	call   184bc <rdtsc>
   187a1:	89 c2                	mov    edx,eax
   187a3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   187a6:	29 c2                	sub    edx,eax
   187a8:	89 d0                	mov    eax,edx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/apic.c:134
   187aa:	c9                   	leave  
   187ab:	c3                   	ret    

000187ac <bitsSet>:
bitsSet():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:5
#include <stdint.h>
#include <stdbool.h>

bool bitsSet(volatile uint32_t* array, uint32_t bit)
{
   187ac:	55                   	push   ebp
   187ad:	89 e5                	mov    ebp,esp
   187af:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:6
    int lRetVal=0;
   187b2:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:7
    __asm__ volatile ("bts [%[array]],%[bit]\nmov eax,0\nsetc al\n" : [array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
   187b9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   187bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   187bf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   187c2:	0f ab 02             	bts    DWORD PTR [edx],eax
   187c5:	b8 00 00 00 00       	mov    eax,0x0
   187ca:	0f 92 c0             	setb   al
   187cd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:8
    return lRetVal;
   187d0:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   187d4:	0f 95 c0             	setne  al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:9
}
   187d7:	c9                   	leave  
   187d8:	c3                   	ret    

000187d9 <bitsReset>:
bitsReset():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:11
bool bitsReset(volatile uint32_t* array, uint32_t bit)
{
   187d9:	55                   	push   ebp
   187da:	89 e5                	mov    ebp,esp
   187dc:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:12
    int lRetVal=0;
   187df:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:13
    __asm__ volatile ("btr [%[array]],%[bit]\nmov eax,0\nsetc al\n" : [array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
   187e6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   187e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   187ec:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   187ef:	0f b3 02             	btr    DWORD PTR [edx],eax
   187f2:	b8 00 00 00 00       	mov    eax,0x0
   187f7:	0f 92 c0             	setb   al
   187fa:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:14
    return lRetVal;
   187fd:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   18801:	0f 95 c0             	setne  al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:15
}
   18804:	c9                   	leave  
   18805:	c3                   	ret    

00018806 <bitsTest>:
bitsTest():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:17
bool bitsTest(volatile uint32_t* array, uint32_t bit)
{
   18806:	55                   	push   ebp
   18807:	89 e5                	mov    ebp,esp
   18809:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:18
    int lRetVal=0;
   1880c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:19
    __asm__ volatile ("bt [%[array]],%[bit]\nmov eax,0\nsetc al\n" :[array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
   18813:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18816:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18819:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   1881c:	0f a3 02             	bt     DWORD PTR [edx],eax
   1881f:	b8 00 00 00 00       	mov    eax,0x0
   18824:	0f 92 c0             	setb   al
   18827:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:20
    return lRetVal;
   1882a:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1882e:	0f 95 c0             	setne  al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:21
}
   18831:	c9                   	leave  
   18832:	c3                   	ret    

00018833 <bitsScanF>:
bitsScanF():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:24

int bitsScanF(volatile uint32_t* array)
{
   18833:	55                   	push   ebp
   18834:	89 e5                	mov    ebp,esp
   18836:	53                   	push   ebx
   18837:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:25
    int lRetVal=0;
   1883a:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:26
    bool lErr=false;
   18841:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:27
    __asm__ volatile ("bsf %[ret],[%[array]]\nsetz cl\n" : [ret] "=b" (lRetVal), [lErr] "=c" (lErr) : [array] "m" (*array));
   18845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18848:	0f bc 18             	bsf    ebx,DWORD PTR [eax]
   1884b:	0f 94 c1             	sete   cl
   1884e:	89 c8                	mov    eax,ecx
   18850:	89 da                	mov    edx,ebx
   18852:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   18855:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:28
    if (lErr==false)
   18858:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1885c:	83 f0 01             	xor    eax,0x1
   1885f:	84 c0                	test   al,al
   18861:	74 05                	je     18868 <bitsScanF+0x35>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:29
        return lRetVal;
   18863:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   18866:	eb 05                	jmp    1886d <bitsScanF+0x3a>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:31
    else
        return -1;
   18868:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/cpu/bits.c:32
   1886d:	83 c4 10             	add    esp,0x10
   18870:	5b                   	pop    ebx
   18871:	5d                   	pop    ebp
   18872:	c3                   	ret    
   18873:	90                   	nop

00018874 <gdtEntry>:
gdtEntry():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/gdt.c:12
extern struct KERNEL_DATA_SECTION GDT* gdt;
extern uint32_t* kGDTAvailable;

//Create/modify entries in the protected mode GDT
void HIGH_CODE_SECTION gdtEntry(int entryNo, int base, int limit, char access, char flags,bool inUse)
{
   18874:	55                   	push   ebp
   18875:	89 e5                	mov    ebp,esp
   18877:	83 ec 18             	sub    esp,0x18
   1887a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
   1887d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
   18880:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
   18883:	88 4d f4             	mov    BYTE PTR [ebp-0xc],cl
   18886:	88 55 f0             	mov    BYTE PTR [ebp-0x10],dl
   18889:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/gdt.c:13
    gdt[entryNo].base_low        = base & 0xFFFF;
   1888c:	a1 48 04 a0 00       	mov    eax,ds:0xa00448
   18891:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18894:	c1 e2 03             	shl    edx,0x3
   18897:	01 d0                	add    eax,edx
   18899:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1889c:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/gdt.c:14
    gdt[entryNo].base_middle     = base >> 16 & 0xFF;
   188a0:	a1 48 04 a0 00       	mov    eax,ds:0xa00448
   188a5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   188a8:	c1 e2 03             	shl    edx,0x3
   188ab:	01 d0                	add    eax,edx
   188ad:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   188b0:	c1 fa 10             	sar    edx,0x10
   188b3:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/NetBeansProjects/chrisOS/src/cpu/gdt.c:15
    gdt[entryNo].base_high       = base >> 24 & 0xFF;
   188b6:	a1 48 04 a0 00       	mov    eax,ds:0xa00448
   188bb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   188be:	c1 e2 03             	shl    edx,0x3
   188c1:	01 d0                	add    eax,edx
   188c3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   188c6:	c1 ea 18             	shr    edx,0x18
   188c9:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
/home/yogi/NetBeansProjects/chrisOS/src/cpu/gdt.c:16
    gdt[entryNo].limit_low       = limit & 0xFFFF;
   188cc:	a1 48 04 a0 00       	mov    eax,ds:0xa00448
   188d1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   188d4:	c1 e2 03             	shl    edx,0x3
   188d7:	01 d0                	add    eax,edx
   188d9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   188dc:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/gdt.c:17
    gdt[entryNo].flags_and_limit = flags | (limit >> 16 & 0xF);
   188df:	a1 48 04 a0 00       	mov    eax,ds:0xa00448
   188e4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   188e7:	c1 e2 03             	shl    edx,0x3
   188ea:	01 c2                	add    edx,eax
   188ec:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   188ef:	c1 f8 10             	sar    eax,0x10
   188f2:	83 e0 0f             	and    eax,0xf
   188f5:	0a 45 f0             	or     al,BYTE PTR [ebp-0x10]
   188f8:	88 42 06             	mov    BYTE PTR [edx+0x6],al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/gdt.c:18
    gdt[entryNo].access          = access | 0x10;
   188fb:	a1 48 04 a0 00       	mov    eax,ds:0xa00448
   18900:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18903:	c1 e2 03             	shl    edx,0x3
   18906:	01 d0                	add    eax,edx
   18908:	0f b6 55 f4          	movzx  edx,BYTE PTR [ebp-0xc]
   1890c:	83 ca 10             	or     edx,0x10
   1890f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/NetBeansProjects/chrisOS/src/cpu/gdt.c:19
    if (inUse)
   18912:	80 7d ec 00          	cmp    BYTE PTR [ebp-0x14],0x0
   18916:	74 17                	je     1892f <gdtEntry+0xbb>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/gdt.c:20
        bitsReset(kGDTAvailable,entryNo);
   18918:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1891b:	a1 f0 03 a0 00       	mov    eax,ds:0xa003f0
   18920:	83 ec 08             	sub    esp,0x8
   18923:	52                   	push   edx
   18924:	50                   	push   eax
   18925:	e8 af fe ff ff       	call   187d9 <bitsReset>
   1892a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/gdt.c:23
    else
        bitsSet(kGDTAvailable,entryNo);
}
   1892d:	eb 15                	jmp    18944 <gdtEntry+0xd0>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/gdt.c:22
    gdt[entryNo].flags_and_limit = flags | (limit >> 16 & 0xF);
    gdt[entryNo].access          = access | 0x10;
    if (inUse)
        bitsReset(kGDTAvailable,entryNo);
    else
        bitsSet(kGDTAvailable,entryNo);
   1892f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18932:	a1 f0 03 a0 00       	mov    eax,ds:0xa003f0
   18937:	83 ec 08             	sub    esp,0x8
   1893a:	52                   	push   edx
   1893b:	50                   	push   eax
   1893c:	e8 6b fe ff ff       	call   187ac <bitsSet>
   18941:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/gdt.c:23
}
   18944:	90                   	nop
   18945:	c9                   	leave  
   18946:	c3                   	ret    

00018947 <gdtEntryRM>:
gdtEntryRM():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/gdt.c:27

//Create entries in the real mode GDT table
void HIGH_CODE_SECTION gdtEntryRM(int entryNo, int base, int limit, char access, char flags)
{
   18947:	55                   	push   ebp
   18948:	89 e5                	mov    ebp,esp
   1894a:	83 ec 08             	sub    esp,0x8
   1894d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   18950:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   18953:	88 55 fc             	mov    BYTE PTR [ebp-0x4],dl
   18956:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/gdt.c:28
    rmGdt[entryNo].base_low        = base & 0xFFFF;
   18959:	a1 44 04 a0 00       	mov    eax,ds:0xa00444
   1895e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18961:	c1 e2 03             	shl    edx,0x3
   18964:	01 d0                	add    eax,edx
   18966:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18969:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/gdt.c:29
    rmGdt[entryNo].base_middle     = base >> 16 & 0xFF;
   1896d:	a1 44 04 a0 00       	mov    eax,ds:0xa00444
   18972:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18975:	c1 e2 03             	shl    edx,0x3
   18978:	01 d0                	add    eax,edx
   1897a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1897d:	c1 fa 10             	sar    edx,0x10
   18980:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/NetBeansProjects/chrisOS/src/cpu/gdt.c:30
    rmGdt[entryNo].base_high       = base >> 24 & 0xFF;
   18983:	a1 44 04 a0 00       	mov    eax,ds:0xa00444
   18988:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1898b:	c1 e2 03             	shl    edx,0x3
   1898e:	01 d0                	add    eax,edx
   18990:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18993:	c1 ea 18             	shr    edx,0x18
   18996:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
/home/yogi/NetBeansProjects/chrisOS/src/cpu/gdt.c:31
    rmGdt[entryNo].limit_low       = limit & 0xFFFF;
   18999:	a1 44 04 a0 00       	mov    eax,ds:0xa00444
   1899e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   189a1:	c1 e2 03             	shl    edx,0x3
   189a4:	01 d0                	add    eax,edx
   189a6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   189a9:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/gdt.c:32
    rmGdt[entryNo].flags_and_limit = flags | (limit >> 16 & 0xF);
   189ac:	a1 44 04 a0 00       	mov    eax,ds:0xa00444
   189b1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   189b4:	c1 e2 03             	shl    edx,0x3
   189b7:	01 c2                	add    edx,eax
   189b9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   189bc:	c1 f8 10             	sar    eax,0x10
   189bf:	83 e0 0f             	and    eax,0xf
   189c2:	0a 45 f8             	or     al,BYTE PTR [ebp-0x8]
   189c5:	88 42 06             	mov    BYTE PTR [edx+0x6],al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/gdt.c:33
    rmGdt[entryNo].access          = access | 0x10;
   189c8:	a1 44 04 a0 00       	mov    eax,ds:0xa00444
   189cd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   189d0:	c1 e2 03             	shl    edx,0x3
   189d3:	01 d0                	add    eax,edx
   189d5:	0f b6 55 fc          	movzx  edx,BYTE PTR [ebp-0x4]
   189d9:	83 ca 10             	or     edx,0x10
   189dc:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/NetBeansProjects/chrisOS/src/cpu/gdt.c:34
}
   189df:	90                   	nop
   189e0:	c9                   	leave  
   189e1:	c3                   	ret    
   189e2:	66 90                	xchg   ax,ax

000189e4 <identifyCPUFeatures>:
identifyCPUFeatures():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/identify_cpu_features.c:8

extern cpuid_features_t kCPUFeatures;


void identifyCPUFeatures(cpuid_features_t* cpuFeatures)
{
   189e4:	55                   	push   ebp
   189e5:	89 e5                	mov    ebp,esp
   189e7:	53                   	push   ebx
   189e8:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/identify_cpu_features.c:11
    uint32_t eax, ebx, ecx, edx;

    __cpuid(1, eax, ebx, cpuFeatures->cpuid_feature_bits_2.cpuid_feature_bits_ecx_reg, cpuFeatures->cpuid_feature_bits.cpuid_features_edx_reg);
   189eb:	b8 01 00 00 00       	mov    eax,0x1
   189f0:	0f a2                	cpuid  
   189f2:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   189f5:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
   189f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   189fb:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
   189fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18a01:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/identify_cpu_features.c:12
    __cpuid(7, eax, cpuFeatures->cpuid_extended_feature_bits_3.cpuid_extended_feature_bits_ebx_reg , ecx, edx);
   18a03:	b8 07 00 00 00       	mov    eax,0x7
   18a08:	0f a2                	cpuid  
   18a0a:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   18a0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18a10:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
   18a13:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   18a16:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/identify_cpu_features.c:13
}
   18a19:	90                   	nop
   18a1a:	83 c4 10             	add    esp,0x10
   18a1d:	5b                   	pop    ebx
   18a1e:	5d                   	pop    ebp
   18a1f:	c3                   	ret    

00018a20 <idt_set_gate>:
idt_set_gate():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:10
//extern void idt_load();//Defined in CPU.h

/* Use this function to set an entry in the IDT. Alot simpler
*  than twiddling with the GDT ;) */
void idt_set_gate(struct idt_entry *idt, unsigned short sel, uint32_t base, unsigned char flags)
{
   18a20:	55                   	push   ebp
   18a21:	89 e5                	mov    ebp,esp
   18a23:	83 ec 08             	sub    esp,0x8
   18a26:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18a29:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   18a2c:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   18a30:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:11
  idt->base_lo = base & 0xFFFF;
   18a33:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18a36:	89 c2                	mov    edx,eax
   18a38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18a3b:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:12
  idt->sel = sel;
   18a3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18a41:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   18a45:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:13
  idt->flags = flags;
   18a49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18a4c:	0f b6 55 f8          	movzx  edx,BYTE PTR [ebp-0x8]
   18a50:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:14
  idt->base_hi = (base >> 16) & 0xFFFF;}
   18a53:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18a56:	c1 e8 10             	shr    eax,0x10
   18a59:	89 c2                	mov    edx,eax
   18a5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18a5e:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
   18a62:	90                   	nop
   18a63:	c9                   	leave  
   18a64:	c3                   	ret    

00018a65 <idt_install>:
idt_install():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:18

/* Installs the IDT */
void idt_install(struct idt_ptr* idtp)
{
   18a65:	55                   	push   ebp
   18a66:	89 e5                	mov    ebp,esp
   18a68:	57                   	push   edi
   18a69:	56                   	push   esi
   18a6a:	53                   	push   ebx
   18a6b:	83 ec 1c             	sub    esp,0x1c
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:20
    /* Sets the special IDT pointer up, just like in 'gdt.c' */
    idtp->limit = (sizeof (struct idt_entry) * 256) - 1;
   18a6e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18a71:	66 c7 01 ff 07       	mov    WORD PTR [ecx],0x7ff
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:21
    idtp->base = (int)IDT_TABLE_ADDRESS;
   18a76:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18a79:	c7 41 02 00 40 10 00 	mov    DWORD PTR [ecx+0x2],0x104000
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:29
    //memset(&idt, 0, sizeof(struct idt_entry) * 256);

    /* Add any new ISRs to the IDT here using idt_set_gate */

    /* Points the processor's internal register to the new IDT */
    idt_load((uint64_t)((uint64_t)(idtp->limit)<<32 | idtp->base));
   18a80:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18a83:	0f b7 31             	movzx  esi,WORD PTR [ecx]
   18a86:	0f b7 ce             	movzx  ecx,si
   18a89:	bb 00 00 00 00       	mov    ebx,0x0
   18a8e:	89 cb                	mov    ebx,ecx
   18a90:	b9 00 00 00 00       	mov    ecx,0x0
   18a95:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
   18a98:	8b 76 02             	mov    esi,DWORD PTR [esi+0x2]
   18a9b:	bf 00 00 00 00       	mov    edi,0x0
   18aa0:	89 c8                	mov    eax,ecx
   18aa2:	09 f0                	or     eax,esi
   18aa4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
   18aa7:	89 d8                	mov    eax,ebx
   18aa9:	09 f8                	or     eax,edi
   18aab:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
   18aae:	83 ec 08             	sub    esp,0x8
   18ab1:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   18ab4:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   18ab7:	e8 a2 86 fe ff       	call   115e <idt_load>
   18abc:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:30
}
   18abf:	90                   	nop
   18ac0:	8d 65 f4             	lea    esp,[ebp-0xc]
   18ac3:	5b                   	pop    ebx
   18ac4:	5e                   	pop    esi
   18ac5:	5f                   	pop    edi
   18ac6:	5d                   	pop    ebp
   18ac7:	c3                   	ret    

00018ac8 <idt_init>:
idt_init():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:33

void idt_init(struct idt_ptr* idtp, int remap_offset)
{
   18ac8:	55                   	push   ebp
   18ac9:	89 e5                	mov    ebp,esp
   18acb:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:36
    //CLR 05/02/2016 - Left off here, ITD stuff isn't working, have an endless loop in cpuFunc.s idt_load
/* setting up the exception handlers and timer, keyboard ISRs */
    struct idt_entry* idtTable=(struct idt_entry*)IDT_TABLE_ADDRESS;
   18ace:	c7 45 f0 00 40 10 00 	mov    DWORD PTR [ebp-0x10],0x104000
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:37
    idt_set_gate (&idtTable[0], 0x08, (int)&_isr_00_wrapper, ACS_INT); //Move this out of the way of the exception handlers
   18ad5:	b8 20 00 01 00       	mov    eax,0x10020
   18ada:	68 8e 00 00 00       	push   0x8e
   18adf:	50                   	push   eax
   18ae0:	6a 08                	push   0x8
   18ae2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   18ae5:	e8 36 ff ff ff       	call   18a20 <idt_set_gate>
   18aea:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:38
    idt_set_gate (&idtTable[0+remap_offset], 0x08, (int)&_irq0_handler, ACS_INT); //Move this out of the way of the exception handlers
   18aed:	b9 92 05 01 00       	mov    ecx,0x10592
   18af2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18af5:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18afc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18aff:	01 d0                	add    eax,edx
   18b01:	68 8e 00 00 00       	push   0x8e
   18b06:	51                   	push   ecx
   18b07:	6a 08                	push   0x8
   18b09:	50                   	push   eax
   18b0a:	e8 11 ff ff ff       	call   18a20 <idt_set_gate>
   18b0f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:39
    idt_set_gate (&idtTable[1+remap_offset], 0x08, (int)&_isr_01_wrapper, ACS_INT); //move this out of the way of the exception handlers
   18b12:	b9 d9 05 01 00       	mov    ecx,0x105d9
   18b17:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18b1a:	83 c0 01             	add    eax,0x1
   18b1d:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18b24:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18b27:	01 d0                	add    eax,edx
   18b29:	68 8e 00 00 00       	push   0x8e
   18b2e:	51                   	push   ecx
   18b2f:	6a 08                	push   0x8
   18b31:	50                   	push   eax
   18b32:	e8 e9 fe ff ff       	call   18a20 <idt_set_gate>
   18b37:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:40
    idt_set_gate (&idtTable[1], 0x08, (int)&_isr_31_wrapper, ACS_INT); //move this out of the way of the exception handlers
   18b3a:	ba af 04 01 00       	mov    edx,0x104af
   18b3f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18b42:	83 c0 08             	add    eax,0x8
   18b45:	68 8e 00 00 00       	push   0x8e
   18b4a:	52                   	push   edx
   18b4b:	6a 08                	push   0x8
   18b4d:	50                   	push   eax
   18b4e:	e8 cd fe ff ff       	call   18a20 <idt_set_gate>
   18b53:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:41
    idt_set_gate (&idtTable[2], 0x08, (int)&_isr_02_wrapper, ACS_INT);
   18b56:	ba 3c 00 01 00       	mov    edx,0x1003c
   18b5b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18b5e:	83 c0 10             	add    eax,0x10
   18b61:	68 8e 00 00 00       	push   0x8e
   18b66:	52                   	push   edx
   18b67:	6a 08                	push   0x8
   18b69:	50                   	push   eax
   18b6a:	e8 b1 fe ff ff       	call   18a20 <idt_set_gate>
   18b6f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:42
    idt_set_gate (&idtTable[3], 0x08, (int)&_isr_03_wrapper, ACS_INT);
   18b72:	ba 58 00 01 00       	mov    edx,0x10058
   18b77:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18b7a:	83 c0 18             	add    eax,0x18
   18b7d:	68 8e 00 00 00       	push   0x8e
   18b82:	52                   	push   edx
   18b83:	6a 08                	push   0x8
   18b85:	50                   	push   eax
   18b86:	e8 95 fe ff ff       	call   18a20 <idt_set_gate>
   18b8b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:43
    idt_set_gate (&idtTable[4], 0x08, (int)&_isr_04_wrapper, ACS_INT);
   18b8e:	ba 68 00 01 00       	mov    edx,0x10068
   18b93:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18b96:	83 c0 20             	add    eax,0x20
   18b99:	68 8e 00 00 00       	push   0x8e
   18b9e:	52                   	push   edx
   18b9f:	6a 08                	push   0x8
   18ba1:	50                   	push   eax
   18ba2:	e8 79 fe ff ff       	call   18a20 <idt_set_gate>
   18ba7:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:44
    idt_set_gate (&idtTable[5], 0x08, (int)&_isr_05_wrapper, ACS_INT);
   18baa:	ba 84 00 01 00       	mov    edx,0x10084
   18baf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18bb2:	83 c0 28             	add    eax,0x28
   18bb5:	68 8e 00 00 00       	push   0x8e
   18bba:	52                   	push   edx
   18bbb:	6a 08                	push   0x8
   18bbd:	50                   	push   eax
   18bbe:	e8 5d fe ff ff       	call   18a20 <idt_set_gate>
   18bc3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:45
    idt_set_gate (&idtTable[0x6], 0x08, (int)&_isr_06_wrapper, ACS_INT);    //Invalid Opcode
   18bc6:	ba a0 00 01 00       	mov    edx,0x100a0
   18bcb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18bce:	83 c0 30             	add    eax,0x30
   18bd1:	68 8e 00 00 00       	push   0x8e
   18bd6:	52                   	push   edx
   18bd7:	6a 08                	push   0x8
   18bd9:	50                   	push   eax
   18bda:	e8 41 fe ff ff       	call   18a20 <idt_set_gate>
   18bdf:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:46
    idt_set_gate (&idtTable[0x7], 0x08, (int)&_isr_07_wrapper, ACS_INT);
   18be2:	ba bc 00 01 00       	mov    edx,0x100bc
   18be7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18bea:	83 c0 38             	add    eax,0x38
   18bed:	68 8e 00 00 00       	push   0x8e
   18bf2:	52                   	push   edx
   18bf3:	6a 08                	push   0x8
   18bf5:	50                   	push   eax
   18bf6:	e8 25 fe ff ff       	call   18a20 <idt_set_gate>
   18bfb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:47
    idt_set_gate (&idtTable[0x8], 0x08, (int)&_isr_08_wrapper, ACS_INT);   //Double Fault
   18bfe:	ba d8 00 01 00       	mov    edx,0x100d8
   18c03:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18c06:	83 c0 40             	add    eax,0x40
   18c09:	68 8e 00 00 00       	push   0x8e
   18c0e:	52                   	push   edx
   18c0f:	6a 08                	push   0x8
   18c11:	50                   	push   eax
   18c12:	e8 09 fe ff ff       	call   18a20 <idt_set_gate>
   18c17:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:48
    idt_set_gate (&idtTable[0x9], 0x08, (int)&_isr_09_wrapper, ACS_INT);
   18c1a:	ba 05 01 01 00       	mov    edx,0x10105
   18c1f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18c22:	83 c0 48             	add    eax,0x48
   18c25:	68 8e 00 00 00       	push   0x8e
   18c2a:	52                   	push   edx
   18c2b:	6a 08                	push   0x8
   18c2d:	50                   	push   eax
   18c2e:	e8 ed fd ff ff       	call   18a20 <idt_set_gate>
   18c33:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:49
    idt_set_gate (&idtTable[0xa], 0x08, (int)&_isr_10_wrapper, ACS_INT);
   18c36:	ba 1e 01 01 00       	mov    edx,0x1011e
   18c3b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18c3e:	83 c0 50             	add    eax,0x50
   18c41:	68 8e 00 00 00       	push   0x8e
   18c46:	52                   	push   edx
   18c47:	6a 08                	push   0x8
   18c49:	50                   	push   eax
   18c4a:	e8 d1 fd ff ff       	call   18a20 <idt_set_gate>
   18c4f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:50
    idt_set_gate (&idtTable[0xb], 0x08, (int)&_isr_11_wrapper, ACS_INT);
   18c52:	ba 37 01 01 00       	mov    edx,0x10137
   18c57:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18c5a:	83 c0 58             	add    eax,0x58
   18c5d:	68 8e 00 00 00       	push   0x8e
   18c62:	52                   	push   edx
   18c63:	6a 08                	push   0x8
   18c65:	50                   	push   eax
   18c66:	e8 b5 fd ff ff       	call   18a20 <idt_set_gate>
   18c6b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:51
    idt_set_gate (&idtTable[0xc], 0x08, (int)&_isr_12_wrapper, ACS_INT);
   18c6e:	ba 50 01 01 00       	mov    edx,0x10150
   18c73:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18c76:	83 c0 60             	add    eax,0x60
   18c79:	68 8e 00 00 00       	push   0x8e
   18c7e:	52                   	push   edx
   18c7f:	6a 08                	push   0x8
   18c81:	50                   	push   eax
   18c82:	e8 99 fd ff ff       	call   18a20 <idt_set_gate>
   18c87:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:52
    idt_set_gate (&idtTable[0xd/*+remap_offset*/], 0x08, (int)&_isr_13_wrapper, ACS_INT);
   18c8a:	ba 69 01 01 00       	mov    edx,0x10169
   18c8f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18c92:	83 c0 68             	add    eax,0x68
   18c95:	68 8e 00 00 00       	push   0x8e
   18c9a:	52                   	push   edx
   18c9b:	6a 08                	push   0x8
   18c9d:	50                   	push   eax
   18c9e:	e8 7d fd ff ff       	call   18a20 <idt_set_gate>
   18ca3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:53
    idt_set_gate (&idtTable[0xe/*+remap_offset*/], 0x08, (int)&_isr_14_wrapper, ACS_INT);   //paging exception
   18ca6:	ba 83 01 01 00       	mov    edx,0x10183
   18cab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18cae:	83 c0 70             	add    eax,0x70
   18cb1:	68 8e 00 00 00       	push   0x8e
   18cb6:	52                   	push   edx
   18cb7:	6a 08                	push   0x8
   18cb9:	50                   	push   eax
   18cba:	e8 61 fd ff ff       	call   18a20 <idt_set_gate>
   18cbf:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:54
    idt_set_gate (&idtTable[0xf], 0x08, (int)&_isr_15_wrapper, ACS_INT);
   18cc2:	ba ef 02 01 00       	mov    edx,0x102ef
   18cc7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18cca:	83 c0 78             	add    eax,0x78
   18ccd:	68 8e 00 00 00       	push   0x8e
   18cd2:	52                   	push   edx
   18cd3:	6a 08                	push   0x8
   18cd5:	50                   	push   eax
   18cd6:	e8 45 fd ff ff       	call   18a20 <idt_set_gate>
   18cdb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:55
    idt_set_gate (&idtTable[0x10], 0x08, (int)&_isr_16_wrapper, ACS_INT);
   18cde:	ba 0b 03 01 00       	mov    edx,0x1030b
   18ce3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18ce6:	83 e8 80             	sub    eax,0xffffff80
   18ce9:	68 8e 00 00 00       	push   0x8e
   18cee:	52                   	push   edx
   18cef:	6a 08                	push   0x8
   18cf1:	50                   	push   eax
   18cf2:	e8 29 fd ff ff       	call   18a20 <idt_set_gate>
   18cf7:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:56
    idt_set_gate (&idtTable[0x11], 0x08, (int)&_isr_17_wrapper, ACS_INT);
   18cfa:	ba 27 03 01 00       	mov    edx,0x10327
   18cff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18d02:	05 88 00 00 00       	add    eax,0x88
   18d07:	68 8e 00 00 00       	push   0x8e
   18d0c:	52                   	push   edx
   18d0d:	6a 08                	push   0x8
   18d0f:	50                   	push   eax
   18d10:	e8 0b fd ff ff       	call   18a20 <idt_set_gate>
   18d15:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:57
    idt_set_gate (&idtTable[0x12], 0x08, (int)&_isr_18_wrapper, ACS_INT);
   18d18:	ba 43 03 01 00       	mov    edx,0x10343
   18d1d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18d20:	05 90 00 00 00       	add    eax,0x90
   18d25:	68 8e 00 00 00       	push   0x8e
   18d2a:	52                   	push   edx
   18d2b:	6a 08                	push   0x8
   18d2d:	50                   	push   eax
   18d2e:	e8 ed fc ff ff       	call   18a20 <idt_set_gate>
   18d33:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:58
    idt_set_gate (&idtTable[0x13], 0x08, (int)&_isr_19_wrapper, ACS_INT);
   18d36:	ba 5f 03 01 00       	mov    edx,0x1035f
   18d3b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18d3e:	05 98 00 00 00       	add    eax,0x98
   18d43:	68 8e 00 00 00       	push   0x8e
   18d48:	52                   	push   edx
   18d49:	6a 08                	push   0x8
   18d4b:	50                   	push   eax
   18d4c:	e8 cf fc ff ff       	call   18a20 <idt_set_gate>
   18d51:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:59
    idt_set_gate (&idtTable[0x14+remap_offset], 0x08, (int)&_isr_20_wrapper, ACS_INT);   
   18d54:	b9 7b 03 01 00       	mov    ecx,0x1037b
   18d59:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18d5c:	83 c0 14             	add    eax,0x14
   18d5f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18d66:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18d69:	01 d0                	add    eax,edx
   18d6b:	68 8e 00 00 00       	push   0x8e
   18d70:	51                   	push   ecx
   18d71:	6a 08                	push   0x8
   18d73:	50                   	push   eax
   18d74:	e8 a7 fc ff ff       	call   18a20 <idt_set_gate>
   18d79:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:60
    idt_set_gate (&idtTable[0x15+remap_offset], 0x08, (int)&_isr_21_wrapper, ACS_INT);  //leave this alone because this is the initially remapped keyboard irq
   18d7c:	b9 97 03 01 00       	mov    ecx,0x10397
   18d81:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18d84:	83 c0 15             	add    eax,0x15
   18d87:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18d8e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18d91:	01 d0                	add    eax,edx
   18d93:	68 8e 00 00 00       	push   0x8e
   18d98:	51                   	push   ecx
   18d99:	6a 08                	push   0x8
   18d9b:	50                   	push   eax
   18d9c:	e8 7f fc ff ff       	call   18a20 <idt_set_gate>
   18da1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:61
    idt_set_gate (&idtTable[0x16], 0x08, (int)&_isr_22_wrapper, ACS_INT);
   18da4:	ba b3 03 01 00       	mov    edx,0x103b3
   18da9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18dac:	05 b0 00 00 00       	add    eax,0xb0
   18db1:	68 8e 00 00 00       	push   0x8e
   18db6:	52                   	push   edx
   18db7:	6a 08                	push   0x8
   18db9:	50                   	push   eax
   18dba:	e8 61 fc ff ff       	call   18a20 <idt_set_gate>
   18dbf:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:62
    idt_set_gate (&idtTable[0x17], 0x08, (int)&_isr_23_wrapper, ACS_INT);
   18dc2:	ba cf 03 01 00       	mov    edx,0x103cf
   18dc7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18dca:	05 b8 00 00 00       	add    eax,0xb8
   18dcf:	68 8e 00 00 00       	push   0x8e
   18dd4:	52                   	push   edx
   18dd5:	6a 08                	push   0x8
   18dd7:	50                   	push   eax
   18dd8:	e8 43 fc ff ff       	call   18a20 <idt_set_gate>
   18ddd:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:63
    idt_set_gate (&idtTable[0x18], 0x08, (int)&_isr_24_wrapper, ACS_INT);
   18de0:	ba eb 03 01 00       	mov    edx,0x103eb
   18de5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18de8:	05 c0 00 00 00       	add    eax,0xc0
   18ded:	68 8e 00 00 00       	push   0x8e
   18df2:	52                   	push   edx
   18df3:	6a 08                	push   0x8
   18df5:	50                   	push   eax
   18df6:	e8 25 fc ff ff       	call   18a20 <idt_set_gate>
   18dfb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:64
    idt_set_gate (&idtTable[0x19], 0x08, (int)&_isr_25_wrapper, ACS_INT);
   18dfe:	ba 07 04 01 00       	mov    edx,0x10407
   18e03:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18e06:	05 c8 00 00 00       	add    eax,0xc8
   18e0b:	68 8e 00 00 00       	push   0x8e
   18e10:	52                   	push   edx
   18e11:	6a 08                	push   0x8
   18e13:	50                   	push   eax
   18e14:	e8 07 fc ff ff       	call   18a20 <idt_set_gate>
   18e19:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:65
    idt_set_gate (&idtTable[0x1a], 0x08, (int)&_isr_26_wrapper, ACS_INT);
   18e1c:	ba 23 04 01 00       	mov    edx,0x10423
   18e21:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18e24:	05 d0 00 00 00       	add    eax,0xd0
   18e29:	68 8e 00 00 00       	push   0x8e
   18e2e:	52                   	push   edx
   18e2f:	6a 08                	push   0x8
   18e31:	50                   	push   eax
   18e32:	e8 e9 fb ff ff       	call   18a20 <idt_set_gate>
   18e37:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:66
    idt_set_gate (&idtTable[0x1b], 0x08, (int)&_isr_27_wrapper, ACS_INT);
   18e3a:	ba 3f 04 01 00       	mov    edx,0x1043f
   18e3f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18e42:	05 d8 00 00 00       	add    eax,0xd8
   18e47:	68 8e 00 00 00       	push   0x8e
   18e4c:	52                   	push   edx
   18e4d:	6a 08                	push   0x8
   18e4f:	50                   	push   eax
   18e50:	e8 cb fb ff ff       	call   18a20 <idt_set_gate>
   18e55:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:67
    idt_set_gate (&idtTable[0x1c], 0x08, (int)&_isr_28_wrapper, ACS_INT);
   18e58:	ba 5b 04 01 00       	mov    edx,0x1045b
   18e5d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18e60:	05 e0 00 00 00       	add    eax,0xe0
   18e65:	68 8e 00 00 00       	push   0x8e
   18e6a:	52                   	push   edx
   18e6b:	6a 08                	push   0x8
   18e6d:	50                   	push   eax
   18e6e:	e8 ad fb ff ff       	call   18a20 <idt_set_gate>
   18e73:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:68
    idt_set_gate (&idtTable[0x1d], 0x08, (int)&_isr_29_wrapper, ACS_INT);
   18e76:	ba 77 04 01 00       	mov    edx,0x10477
   18e7b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18e7e:	05 e8 00 00 00       	add    eax,0xe8
   18e83:	68 8e 00 00 00       	push   0x8e
   18e88:	52                   	push   edx
   18e89:	6a 08                	push   0x8
   18e8b:	50                   	push   eax
   18e8c:	e8 8f fb ff ff       	call   18a20 <idt_set_gate>
   18e91:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:69
    idt_set_gate (&idtTable[0x1e], 0x08, (int)&_isr_30_wrapper, ACS_INT);
   18e94:	ba 93 04 01 00       	mov    edx,0x10493
   18e99:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18e9c:	05 f0 00 00 00       	add    eax,0xf0
   18ea1:	68 8e 00 00 00       	push   0x8e
   18ea6:	52                   	push   edx
   18ea7:	6a 08                	push   0x8
   18ea9:	50                   	push   eax
   18eaa:	e8 71 fb ff ff       	call   18a20 <idt_set_gate>
   18eaf:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:70
    idt_set_gate (&idtTable[0x1f], 0x08, (int)&_isr_31_wrapper, ACS_INT);
   18eb2:	ba af 04 01 00       	mov    edx,0x104af
   18eb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18eba:	05 f8 00 00 00       	add    eax,0xf8
   18ebf:	68 8e 00 00 00       	push   0x8e
   18ec4:	52                   	push   edx
   18ec5:	6a 08                	push   0x8
   18ec7:	50                   	push   eax
   18ec8:	e8 53 fb ff ff       	call   18a20 <idt_set_gate>
   18ecd:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:71
    idt_set_gate (&idtTable[0x20+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //
   18ed0:	b9 76 05 01 00       	mov    ecx,0x10576
   18ed5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18ed8:	83 c0 20             	add    eax,0x20
   18edb:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18ee2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18ee5:	01 d0                	add    eax,edx
   18ee7:	68 8e 00 00 00       	push   0x8e
   18eec:	51                   	push   ecx
   18eed:	6a 08                	push   0x8
   18eef:	50                   	push   eax
   18ef0:	e8 2b fb ff ff       	call   18a20 <idt_set_gate>
   18ef5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:72
    idt_set_gate (&idtTable[0x21+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //
   18ef8:	b9 76 05 01 00       	mov    ecx,0x10576
   18efd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18f00:	83 c0 21             	add    eax,0x21
   18f03:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18f0a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18f0d:	01 d0                	add    eax,edx
   18f0f:	68 8e 00 00 00       	push   0x8e
   18f14:	51                   	push   ecx
   18f15:	6a 08                	push   0x8
   18f17:	50                   	push   eax
   18f18:	e8 03 fb ff ff       	call   18a20 <idt_set_gate>
   18f1d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:74
    
    for (int cnt=0x22;cnt<0xff;cnt++)
   18f20:	c7 45 f4 22 00 00 00 	mov    DWORD PTR [ebp-0xc],0x22
   18f27:	eb 29                	jmp    18f52 <idt_init+0x48a>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:75 (discriminator 3)
        idt_set_gate (&idtTable[cnt], 0x08, (int)&_isr_32_wrapper, ACS_INT);
   18f29:	b9 76 05 01 00       	mov    ecx,0x10576
   18f2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18f31:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18f38:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18f3b:	01 d0                	add    eax,edx
   18f3d:	68 8e 00 00 00       	push   0x8e
   18f42:	51                   	push   ecx
   18f43:	6a 08                	push   0x8
   18f45:	50                   	push   eax
   18f46:	e8 d5 fa ff ff       	call   18a20 <idt_set_gate>
   18f4b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:74 (discriminator 3)
    idt_set_gate (&idtTable[0x1e], 0x08, (int)&_isr_30_wrapper, ACS_INT);
    idt_set_gate (&idtTable[0x1f], 0x08, (int)&_isr_31_wrapper, ACS_INT);
    idt_set_gate (&idtTable[0x20+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //
    idt_set_gate (&idtTable[0x21+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //
    
    for (int cnt=0x22;cnt<0xff;cnt++)
   18f4e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:74 (discriminator 1)
   18f52:	81 7d f4 fe 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xfe
   18f59:	7e ce                	jle    18f29 <idt_init+0x461>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:76
        idt_set_gate (&idtTable[cnt], 0x08, (int)&_isr_32_wrapper, ACS_INT);
    idt_install(idtp);
   18f5b:	83 ec 0c             	sub    esp,0xc
   18f5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   18f61:	e8 ff fa ff ff       	call   18a65 <idt_install>
   18f66:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:78

}
   18f69:	90                   	nop
   18f6a:	c9                   	leave  
   18f6b:	c3                   	ret    

00018f6c <idt_get_gate>:
idt_get_gate():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:82

//void idt_get_gate(struct idt_entry* idtTable, uint8_t idtIndex, unsigned short *sel, uint32_t *base, unsigned *char flags)
void idt_get_gate(struct idt_entry *idt, uint8_t idtIndex, unsigned short *sel, uint32_t *base, unsigned char *flags)
{
   18f6c:	55                   	push   ebp
   18f6d:	89 e5                	mov    ebp,esp
   18f6f:	83 ec 04             	sub    esp,0x4
   18f72:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18f75:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:83
    *sel = idt[idtIndex].sel;
   18f78:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   18f7c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18f83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18f86:	01 d0                	add    eax,edx
   18f88:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
   18f8c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18f8f:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:84
    *base = (idt[idtIndex].base_hi << 16) | idt[idtIndex].base_lo;
   18f92:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   18f96:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18fa0:	01 d0                	add    eax,edx
   18fa2:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   18fa6:	0f b7 c0             	movzx  eax,ax
   18fa9:	c1 e0 10             	shl    eax,0x10
   18fac:	89 c2                	mov    edx,eax
   18fae:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   18fb2:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
   18fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18fbc:	01 c8                	add    eax,ecx
   18fbe:	0f b7 00             	movzx  eax,WORD PTR [eax]
   18fc1:	0f b7 c0             	movzx  eax,ax
   18fc4:	09 d0                	or     eax,edx
   18fc6:	89 c2                	mov    edx,eax
   18fc8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   18fcb:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:85
    *flags = idt[idtIndex].flags;
   18fcd:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   18fd1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18fd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18fdb:	01 d0                	add    eax,edx
   18fdd:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
   18fe1:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   18fe4:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:86
}
   18fe6:	90                   	nop
   18fe7:	c9                   	leave  
   18fe8:	c3                   	ret    

00018fe9 <idt_get_gate_address>:
idt_get_gate_address():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:89

uintptr_t idt_get_gate_address(int vector)
{
   18fe9:	55                   	push   ebp
   18fea:	89 e5                	mov    ebp,esp
   18fec:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:90
   struct idt_entry* idtTable=(struct idt_entry*)IDT_TABLE_ADDRESS;
   18fef:	c7 45 fc 00 40 10 00 	mov    DWORD PTR [ebp-0x4],0x104000
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:94
    unsigned short sel;
    uint32_t base;
    unsigned char flags;
    idt_get_gate(idtTable,vector,&sel,&base,&flags);
   18ff6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18ff9:	0f b6 c0             	movzx  eax,al
   18ffc:	8d 55 f3             	lea    edx,[ebp-0xd]
   18fff:	52                   	push   edx
   19000:	8d 55 f4             	lea    edx,[ebp-0xc]
   19003:	52                   	push   edx
   19004:	8d 55 fa             	lea    edx,[ebp-0x6]
   19007:	52                   	push   edx
   19008:	50                   	push   eax
   19009:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   1900c:	e8 5b ff ff ff       	call   18f6c <idt_get_gate>
   19011:	83 c4 14             	add    esp,0x14
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:95
    return base;
   19014:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/idt.c:96
   19017:	c9                   	leave  
   19018:	c3                   	ret    
   19019:	66 90                	xchg   ax,ax
   1901b:	90                   	nop

0001901c <outb>:
outb():
/home/yogi/NetBeansProjects/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   1901c:	55                   	push   ebp
   1901d:	89 e5                	mov    ebp,esp
   1901f:	83 ec 08             	sub    esp,0x8
   19022:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   19025:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19028:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   1902c:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/NetBeansProjects/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   1902f:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   19033:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   19037:	ee                   	out    dx,al
/home/yogi/NetBeansProjects/chrisOS/include/io.h:24
}
   19038:	90                   	nop
   19039:	c9                   	leave  
   1903a:	c3                   	ret    

0001903b <inb>:
inb():
/home/yogi/NetBeansProjects/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   1903b:	55                   	push   ebp
   1903c:	89 e5                	mov    ebp,esp
   1903e:	83 ec 14             	sub    esp,0x14
   19041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19044:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/NetBeansProjects/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   19048:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   1904c:	89 c2                	mov    edx,eax
   1904e:	ec                   	in     al,dx
   1904f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/NetBeansProjects/chrisOS/include/io.h:40
	return __val;
   19052:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/NetBeansProjects/chrisOS/include/io.h:41
}
   19056:	c9                   	leave  
   19057:	c3                   	ret    

00019058 <irq0_handler>:
irq0_handler():
unsigned volatile char kKeyStatus[11];
extern struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf);
extern void kpagingUpdatePresentFlagA(uint32_t address, bool present);

void irq0_handler()
{
   19058:	55                   	push   ebp
   19059:	89 e5                	mov    ebp,esp
   1905b:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:46
#ifndef DEBUG_NONE
static char currTime[50];
static struct tm theDateTime;
#endif
        *kTicksSinceStart=*kTicksSinceStart+1;
   1905e:	a1 60 02 a0 00       	mov    eax,ds:0xa00260
   19063:	8b 15 60 02 a0 00    	mov    edx,DWORD PTR ds:0xa00260
   19069:	8b 12                	mov    edx,DWORD PTR [edx]
   1906b:	83 c2 01             	add    edx,0x1
   1906e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:47
        if (*kTicksSinceStart % kTicksPerSecond == 0)
   19070:	a1 60 02 a0 00       	mov    eax,ds:0xa00260
   19075:	8b 00                	mov    eax,DWORD PTR [eax]
   19077:	8b 15 80 02 a0 00    	mov    edx,DWORD PTR ds:0xa00280
   1907d:	89 d1                	mov    ecx,edx
   1907f:	ba 00 00 00 00       	mov    edx,0x0
   19084:	f7 f1                	div    ecx
   19086:	89 d0                	mov    eax,edx
   19088:	85 c0                	test   eax,eax
   1908a:	75 0d                	jne    19099 <irq0_handler+0x41>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:48
            kSystemCurrentTime++;
   1908c:	a1 8c 02 a0 00       	mov    eax,ds:0xa0028c
   19091:	83 c0 01             	add    eax,0x1
   19094:	a3 8c 02 a0 00       	mov    ds:0xa0028c,eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:50
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_EXPANDED_TICK) == DEBUG_EXPANDED_TICK)
   19099:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   1909e:	83 e0 04             	and    eax,0x4
   190a1:	85 c0                	test   eax,eax
   190a3:	0f 84 83 00 00 00    	je     1912c <irq0_handler+0xd4>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:52
        {
            cursorSavePosition();
   190a9:	e8 45 ea ff ff       	call   17af3 <cursorSavePosition>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:53
            gmtime_r((time_t*)&kSystemCurrentTime,&theDateTime);
   190ae:	83 ec 08             	sub    esp,0x8
   190b1:	68 e0 a4 09 00       	push   0x9a4e0
   190b6:	68 8c 02 a0 00       	push   0xa0028c
   190bb:	e8 d5 e5 00 00       	call   27695 <gmtime_r>
   190c0:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:54
            strftime((char*)&currTime, 50, "%m/%d/%Y %H:%M:%S", &theDateTime);
   190c3:	68 e0 a4 09 00       	push   0x9a4e0
   190c8:	68 20 2d 08 00       	push   0x82d20
   190cd:	6a 32                	push   0x32
   190cf:	68 20 a5 09 00       	push   0x9a520
   190d4:	e8 d7 75 ff ff       	call   106b0 <strftime>
   190d9:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:55
            cursorMoveTo(0,24);
   190dc:	83 ec 08             	sub    esp,0x8
   190df:	6a 18                	push   0x18
   190e1:	6a 00                	push   0x0
   190e3:	e8 bf ed ff ff       	call   17ea7 <cursorMoveTo>
   190e8:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:56
            printk("The time is currently %s", &currTime);
   190eb:	83 ec 08             	sub    esp,0x8
   190ee:	68 20 a5 09 00       	push   0x9a520
   190f3:	68 32 2d 08 00       	push   0x82d32
   190f8:	e8 36 df 00 00       	call   27033 <printk>
   190fd:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:57
            cursorMoveTo(65,24);
   19100:	83 ec 08             	sub    esp,0x8
   19103:	6a 18                	push   0x18
   19105:	6a 41                	push   0x41
   19107:	e8 9b ed ff ff       	call   17ea7 <cursorMoveTo>
   1910c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:58
            printk("ticks=%d", *kTicksSinceStart);
   1910f:	a1 60 02 a0 00       	mov    eax,ds:0xa00260
   19114:	8b 00                	mov    eax,DWORD PTR [eax]
   19116:	83 ec 08             	sub    esp,0x8
   19119:	50                   	push   eax
   1911a:	68 4b 2d 08 00       	push   0x82d4b
   1911f:	e8 0f df 00 00       	call   27033 <printk>
   19124:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:59
            cursorRestorePosition();
   19127:	e8 13 ea ff ff       	call   17b3f <cursorRestorePosition>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:63
        }
#endif
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_TICK) == DEBUG_TICK)
   1912c:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   19131:	83 e0 02             	and    eax,0x2
   19134:	85 c0                	test   eax,eax
   19136:	74 68                	je     191a0 <irq0_handler+0x148>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:65
        {
            cursorSavePosition();
   19138:	e8 b6 e9 ff ff       	call   17af3 <cursorSavePosition>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:66
            cursorMoveTo(55,SYS_VGA_HEIGHT-1);
   1913d:	83 ec 08             	sub    esp,0x8
   19140:	6a 31                	push   0x31
   19142:	6a 37                	push   0x37
   19144:	e8 5e ed ff ff       	call   17ea7 <cursorMoveTo>
   19149:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:69
            //printf("0x%04X:0x%08X 0x%08X",exceptionCS, exceptionEIP, exceptionFlags);
            //kTermMoveTo(65,0);
            printk("%u",*kTicksSinceStart);
   1914c:	a1 60 02 a0 00       	mov    eax,ds:0xa00260
   19151:	8b 00                	mov    eax,DWORD PTR [eax]
   19153:	83 ec 08             	sub    esp,0x8
   19156:	50                   	push   eax
   19157:	68 54 2d 08 00       	push   0x82d54
   1915c:	e8 d2 de 00 00       	call   27033 <printk>
   19161:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:70
            printk("-%c-%04X:%08X",(exceptionFlags & 0x200)==0x200?'I':'i',exceptionCS, exceptionEIP);
   19164:	8b 15 f8 01 a0 00    	mov    edx,DWORD PTR ds:0xa001f8
   1916a:	a1 fc 01 a0 00       	mov    eax,ds:0xa001fc
   1916f:	8b 0d f0 01 a0 00    	mov    ecx,DWORD PTR ds:0xa001f0
   19175:	81 e1 00 02 00 00    	and    ecx,0x200
   1917b:	85 c9                	test   ecx,ecx
   1917d:	74 07                	je     19186 <irq0_handler+0x12e>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:70 (discriminator 1)
   1917f:	b9 49 00 00 00       	mov    ecx,0x49
   19184:	eb 05                	jmp    1918b <irq0_handler+0x133>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:70 (discriminator 2)
   19186:	b9 69 00 00 00       	mov    ecx,0x69
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:70 (discriminator 4)
   1918b:	52                   	push   edx
   1918c:	50                   	push   eax
   1918d:	51                   	push   ecx
   1918e:	68 57 2d 08 00       	push   0x82d57
   19193:	e8 9b de 00 00       	call   27033 <printk>
   19198:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:75 (discriminator 4)
            //gmtime_r((time_t*)&kSystemCurrentTime,&theDateTime);
            //strftime((char*)&currTime, 50, "%H:%M:%S", &theDateTime);
            //kTermMoveTo(65,0);
            //printf("%s",currTime);
            cursorRestorePosition();
   1919b:	e8 9f e9 ff ff       	call   17b3f <cursorRestorePosition>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:78
        }
#endif
}
   191a0:	90                   	nop
   191a1:	c9                   	leave  
   191a2:	c3                   	ret    

000191a3 <kbd_handler>:
kbd_handler():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:81

void kbd_handler()
{
   191a3:	55                   	push   ebp
   191a4:	89 e5                	mov    ebp,esp
   191a6:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:82
    unsigned char lKeyControlVal=0;
   191a9:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:83
    unsigned char rawKey=0;
   191ad:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:84
    unsigned char translatedKeypress=0;
   191b1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:88
    static char currTime[50];
    static struct tm theDateTime;
   
    rawKey = inb(KEYB_DATA_PORT);
   191b5:	6a 60                	push   0x60
   191b7:	e8 7f fe ff ff       	call   1903b <inb>
   191bc:	83 c4 04             	add    esp,0x4
   191bf:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:89
    kKeyChar = rawKey;//& 0x80;
   191c2:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   191c6:	a2 c0 a4 09 00       	mov    ds:0x9a4c0,al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:91

    __asm__("cli\n");
   191cb:	fa                   	cli    
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:93
    
    switch(rawKey)  
   191cc:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   191d0:	3d 9d 00 00 00       	cmp    eax,0x9d
   191d5:	74 53                	je     1922a <kbd_handler+0x87>
   191d7:	3d 9d 00 00 00       	cmp    eax,0x9d
   191dc:	7f 11                	jg     191ef <kbd_handler+0x4c>
   191de:	83 f8 2a             	cmp    eax,0x2a
   191e1:	74 23                	je     19206 <kbd_handler+0x63>
   191e3:	83 f8 38             	cmp    eax,0x38
   191e6:	74 4e                	je     19236 <kbd_handler+0x93>
   191e8:	83 f8 1d             	cmp    eax,0x1d
   191eb:	74 31                	je     1921e <kbd_handler+0x7b>
   191ed:	eb 75                	jmp    19264 <kbd_handler+0xc1>
   191ef:	3d b8 00 00 00       	cmp    eax,0xb8
   191f4:	74 4c                	je     19242 <kbd_handler+0x9f>
   191f6:	3d ba 00 00 00       	cmp    eax,0xba
   191fb:	74 51                	je     1924e <kbd_handler+0xab>
   191fd:	3d aa 00 00 00       	cmp    eax,0xaa
   19202:	74 0e                	je     19212 <kbd_handler+0x6f>
   19204:	eb 5e                	jmp    19264 <kbd_handler+0xc1>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:95
    {
        case KEY_SHIFT_DN: kKeyStatus[INDEX_SHIFT]=1;break;
   19206:	c6 05 64 65 09 00 01 	mov    BYTE PTR ds:0x96564,0x1
   1920d:	e9 10 03 00 00       	jmp    19522 <kbd_handler+0x37f>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:96
        case KEY_SHIFT_UP: kKeyStatus[INDEX_SHIFT]=0;break;
   19212:	c6 05 64 65 09 00 00 	mov    BYTE PTR ds:0x96564,0x0
   19219:	e9 04 03 00 00       	jmp    19522 <kbd_handler+0x37f>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:97
        case KEY_CTRL_DN: kKeyStatus[INDEX_CTRL]=1;break;
   1921e:	c6 05 65 65 09 00 01 	mov    BYTE PTR ds:0x96565,0x1
   19225:	e9 f8 02 00 00       	jmp    19522 <kbd_handler+0x37f>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:98
        case KEY_CTRL_UP: kKeyStatus[INDEX_CTRL]=0;break;
   1922a:	c6 05 65 65 09 00 00 	mov    BYTE PTR ds:0x96565,0x0
   19231:	e9 ec 02 00 00       	jmp    19522 <kbd_handler+0x37f>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:99
        case KEY_ALT_DN: kKeyStatus[INDEX_ALT]=1;break;
   19236:	c6 05 66 65 09 00 01 	mov    BYTE PTR ds:0x96566,0x1
   1923d:	e9 e0 02 00 00       	jmp    19522 <kbd_handler+0x37f>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:100
        case KEY_ALT_UP: kKeyStatus[INDEX_ALT]=0;break;
   19242:	c6 05 66 65 09 00 00 	mov    BYTE PTR ds:0x96566,0x0
   19249:	e9 d4 02 00 00       	jmp    19522 <kbd_handler+0x37f>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:101
        case KEY_CAPSLOCK_UP: kKeyStatus[INDEX_CAPSLOCK]=!kKeyStatus[INDEX_CAPSLOCK];break;
   1924e:	0f b6 05 67 65 09 00 	movzx  eax,BYTE PTR ds:0x96567
   19255:	84 c0                	test   al,al
   19257:	0f 94 c0             	sete   al
   1925a:	a2 67 65 09 00       	mov    ds:0x96567,al
   1925f:	e9 be 02 00 00       	jmp    19522 <kbd_handler+0x37f>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:109
//        case MAKE_UP: kKeyStatus[INDEX_UP]=0;break;
//        case MAKE_DOWN: kKeyStatus[INDEX_DOWN]=0;break;
       default:
//printk("%02X",rawKey);
           //changed from if rawkey & 0x80, so that keydown triggers the key being input
           if (rawKey==BREAK_RIGHT || rawKey==BREAK_LEFT || rawKey==BREAK_UP || rawKey==BREAK_DOWN)
   19264:	80 7d f5 cd          	cmp    BYTE PTR [ebp-0xb],0xcd
   19268:	74 12                	je     1927c <kbd_handler+0xd9>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:109 (discriminator 1)
   1926a:	80 7d f5 cb          	cmp    BYTE PTR [ebp-0xb],0xcb
   1926e:	74 0c                	je     1927c <kbd_handler+0xd9>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:109 (discriminator 2)
   19270:	80 7d f5 c8          	cmp    BYTE PTR [ebp-0xb],0xc8
   19274:	74 06                	je     1927c <kbd_handler+0xd9>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:109 (discriminator 3)
   19276:	80 7d f5 d0          	cmp    BYTE PTR [ebp-0xb],0xd0
   1927a:	75 2f                	jne    192ab <kbd_handler+0x108>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:110
               if (kKeyboardBuffer<(char*)KEYBOARD_BUFFER_ADDRESS+KEYBOARD_BUFFER_SIZE && !kKeyStatus[INDEX_ALT])
   1927c:	a1 e0 03 a0 00       	mov    eax,ds:0xa003e0
   19281:	3d 3f 33 10 00       	cmp    eax,0x10333f
   19286:	77 23                	ja     192ab <kbd_handler+0x108>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:110 (discriminator 1)
   19288:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   1928f:	84 c0                	test   al,al
   19291:	75 18                	jne    192ab <kbd_handler+0x108>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:113
               //CLR 01/10/2017: Increment the buffer pointer first
               {    
                   kKeyboardBuffer++;
   19293:	a1 e0 03 a0 00       	mov    eax,ds:0xa003e0
   19298:	83 c0 01             	add    eax,0x1
   1929b:	a3 e0 03 a0 00       	mov    ds:0xa003e0,eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:114
                   *kKeyboardBuffer=rawKey;
   192a0:	a1 e0 03 a0 00       	mov    eax,ds:0xa003e0
   192a5:	0f b6 55 f5          	movzx  edx,BYTE PTR [ebp-0xb]
   192a9:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:116
               }
           if (!(rawKey & 0x80))
   192ab:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   192af:	84 c0                	test   al,al
   192b1:	0f 88 6a 02 00 00    	js     19521 <kbd_handler+0x37e>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:120
           {
                //rawKey &= 0x7f;
               //printk("%02X",rawKey); 48=up, 50=down
                 if (kKeyStatus[INDEX_SHIFT] || kKeyStatus[INDEX_CAPSLOCK])
   192b7:	0f b6 05 64 65 09 00 	movzx  eax,BYTE PTR ds:0x96564
   192be:	84 c0                	test   al,al
   192c0:	75 0b                	jne    192cd <kbd_handler+0x12a>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:120 (discriminator 1)
   192c2:	0f b6 05 67 65 09 00 	movzx  eax,BYTE PTR ds:0x96567
   192c9:	84 c0                	test   al,al
   192cb:	74 10                	je     192dd <kbd_handler+0x13a>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:122
                 {
                     translatedKeypress=keyboard_map_up[rawKey];
   192cd:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   192d1:	0f b6 80 a0 2c 08 00 	movzx  eax,BYTE PTR [eax+0x82ca0]
   192d8:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
   192db:	eb 0e                	jmp    192eb <kbd_handler+0x148>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:125
                 }
                 else
                     translatedKeypress=keyboard_map[rawKey];
   192dd:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   192e1:	0f b6 80 20 2c 08 00 	movzx  eax,BYTE PTR [eax+0x82c20]
   192e8:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:132
//                 if ((kDebugLevel & DEBUG_KEYBOARD) == DEBUG_KEYBOARD)
//                 {
//                      printf("%u, %u, %c\n",kKeyChar, rawKey, translatedKeypress);
//                 }
#endif
                if (kKeyStatus[INDEX_CTRL])
   192eb:	0f b6 05 65 65 09 00 	movzx  eax,BYTE PTR ds:0x96565
   192f2:	84 c0                	test   al,al
   192f4:	74 14                	je     1930a <kbd_handler+0x167>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:134
                {
                    printk("^");
   192f6:	83 ec 0c             	sub    esp,0xc
   192f9:	68 65 2d 08 00       	push   0x82d65
   192fe:	e8 30 dd 00 00       	call   27033 <printk>
   19303:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:135
                    translatedKeypress-=32;
   19306:	80 6d f7 20          	sub    BYTE PTR [ebp-0x9],0x20
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:137
                }
            if (kKeyboardBuffer<(char*)KEYBOARD_BUFFER_ADDRESS+KEYBOARD_BUFFER_SIZE && !kKeyStatus[INDEX_ALT])
   1930a:	a1 e0 03 a0 00       	mov    eax,ds:0xa003e0
   1930f:	3d 3f 33 10 00       	cmp    eax,0x10333f
   19314:	77 78                	ja     1938e <kbd_handler+0x1eb>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:137 (discriminator 1)
   19316:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   1931d:	84 c0                	test   al,al
   1931f:	75 6d                	jne    1938e <kbd_handler+0x1eb>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:140
            {
                //CLR 01/10/2017: Increment the buffer pointer first
                {   kKeyboardBuffer++;
   19321:	a1 e0 03 a0 00       	mov    eax,ds:0xa003e0
   19326:	83 c0 01             	add    eax,0x1
   19329:	a3 e0 03 a0 00       	mov    ds:0xa003e0,eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:141
                    *kKeyboardBuffer=translatedKeypress;
   1932e:	a1 e0 03 a0 00       	mov    eax,ds:0xa003e0
   19333:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   19337:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:144
                }
#ifndef DEBUG_NONE
                 if ((kDebugLevel & DEBUG_KEYBOARD) == DEBUG_KEYBOARD)
   19339:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   1933e:	83 e0 10             	and    eax,0x10
   19341:	85 c0                	test   eax,eax
   19343:	74 1c                	je     19361 <kbd_handler+0x1be>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:145
                    printk("kbd_handler: %c-(%08X)\n",translatedKeypress, kKeyboardBuffer);
   19345:	8b 15 e0 03 a0 00    	mov    edx,DWORD PTR ds:0xa003e0
   1934b:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1934f:	83 ec 04             	sub    esp,0x4
   19352:	52                   	push   edx
   19353:	50                   	push   eax
   19354:	68 67 2d 08 00       	push   0x82d67
   19359:	e8 d5 dc 00 00       	call   27033 <printk>
   1935e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:147
#endif
                cursorSavePosition();
   19361:	e8 8d e7 ff ff       	call   17af3 <cursorSavePosition>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:148
                cursorMoveTo(78,0);
   19366:	83 ec 08             	sub    esp,0x8
   19369:	6a 00                	push   0x0
   1936b:	6a 4e                	push   0x4e
   1936d:	e8 35 eb ff ff       	call   17ea7 <cursorMoveTo>
   19372:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:149
                printk("%c",'k');
   19375:	83 ec 08             	sub    esp,0x8
   19378:	6a 6b                	push   0x6b
   1937a:	68 7f 2d 08 00       	push   0x82d7f
   1937f:	e8 af dc 00 00       	call   27033 <printk>
   19384:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:150
                cursorRestorePosition();
   19387:	e8 b3 e7 ff ff       	call   17b3f <cursorRestorePosition>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:138
                {
                    printk("^");
                    translatedKeypress-=32;
                }
            if (kKeyboardBuffer<(char*)KEYBOARD_BUFFER_ADDRESS+KEYBOARD_BUFFER_SIZE && !kKeyStatus[INDEX_ALT])
            {
   1938c:	eb 4d                	jmp    193db <kbd_handler+0x238>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:155
                cursorRestorePosition();
            }
            else
            {
#ifndef DEBUG_NONE
                if ((kDebugLevel & DEBUG_KEYBOARD) == DEBUG_KEYBOARD)
   1938e:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   19393:	83 e0 10             	and    eax,0x10
   19396:	85 c0                	test   eax,eax
   19398:	74 16                	je     193b0 <kbd_handler+0x20d>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:156
                      printk("noRoomForKey: %c\n",kKeyboardBuffer);
   1939a:	a1 e0 03 a0 00       	mov    eax,ds:0xa003e0
   1939f:	83 ec 08             	sub    esp,0x8
   193a2:	50                   	push   eax
   193a3:	68 82 2d 08 00       	push   0x82d82
   193a8:	e8 86 dc 00 00       	call   27033 <printk>
   193ad:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:158
#endif
                cursorSavePosition();
   193b0:	e8 3e e7 ff ff       	call   17af3 <cursorSavePosition>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:159
                cursorMoveTo(78,0);
   193b5:	83 ec 08             	sub    esp,0x8
   193b8:	6a 00                	push   0x0
   193ba:	6a 4e                	push   0x4e
   193bc:	e8 e6 ea ff ff       	call   17ea7 <cursorMoveTo>
   193c1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:160
                printk("%c",'K');
   193c4:	83 ec 08             	sub    esp,0x8
   193c7:	6a 4b                	push   0x4b
   193c9:	68 7f 2d 08 00       	push   0x82d7f
   193ce:	e8 60 dc 00 00       	call   27033 <printk>
   193d3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:161
                cursorRestorePosition();
   193d6:	e8 64 e7 ff ff       	call   17b3f <cursorRestorePosition>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:164
            }
                 //Debug
                 if (kKeyStatus[INDEX_ALT] && translatedKeypress==0x6A)
   193db:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   193e2:	84 c0                	test   al,al
   193e4:	74 07                	je     193ed <kbd_handler+0x24a>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:164 (discriminator 1)
   193e6:	80 7d f7 6a          	cmp    BYTE PTR [ebp-0x9],0x6a
   193ea:	75 01                	jne    193ed <kbd_handler+0x24a>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:166
                 {
                     __asm("int 0x3");
   193ec:	cc                   	int3   
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:168
                 }
            if (kKeyStatus[INDEX_ALT] && kKeyStatus[INDEX_CTRL] && translatedKeypress==0xE0)
   193ed:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   193f4:	84 c0                	test   al,al
   193f6:	74 22                	je     1941a <kbd_handler+0x277>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:168 (discriminator 1)
   193f8:	0f b6 05 65 65 09 00 	movzx  eax,BYTE PTR ds:0x96565
   193ff:	84 c0                	test   al,al
   19401:	74 17                	je     1941a <kbd_handler+0x277>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:168 (discriminator 2)
   19403:	80 7d f7 e0          	cmp    BYTE PTR [ebp-0x9],0xe0
   19407:	75 11                	jne    1941a <kbd_handler+0x277>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:170
            {
                translatedKeypress=0;
   19409:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:171
                reboot(false);
   1940d:	83 ec 0c             	sub    esp,0xc
   19410:	6a 00                	push   0x0
   19412:	e8 d4 c1 00 00       	call   255eb <reboot>
   19417:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:173
            }
            if (kKeyStatus[INDEX_ALT])
   1941a:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   19421:	84 c0                	test   al,al
   19423:	0f 84 f8 00 00 00    	je     19521 <kbd_handler+0x37e>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:175
            {
                if (translatedKeypress=='c')
   19429:	80 7d f7 63          	cmp    BYTE PTR [ebp-0x9],0x63
   1942d:	75 4f                	jne    1947e <kbd_handler+0x2db>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:177
                {
                    printk("%u",*kTicksSinceStart);
   1942f:	a1 60 02 a0 00       	mov    eax,ds:0xa00260
   19434:	8b 00                	mov    eax,DWORD PTR [eax]
   19436:	83 ec 08             	sub    esp,0x8
   19439:	50                   	push   eax
   1943a:	68 54 2d 08 00       	push   0x82d54
   1943f:	e8 ef db 00 00       	call   27033 <printk>
   19444:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:178
                    printk("-%c-%04X:%08X",(exceptionFlags & 0x200)==0x200?'I':'i',exceptionCS, exceptionEIP);
   19447:	8b 15 f8 01 a0 00    	mov    edx,DWORD PTR ds:0xa001f8
   1944d:	a1 fc 01 a0 00       	mov    eax,ds:0xa001fc
   19452:	8b 0d f0 01 a0 00    	mov    ecx,DWORD PTR ds:0xa001f0
   19458:	81 e1 00 02 00 00    	and    ecx,0x200
   1945e:	85 c9                	test   ecx,ecx
   19460:	74 07                	je     19469 <kbd_handler+0x2c6>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:178 (discriminator 1)
   19462:	b9 49 00 00 00       	mov    ecx,0x49
   19467:	eb 05                	jmp    1946e <kbd_handler+0x2cb>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:178 (discriminator 2)
   19469:	b9 69 00 00 00       	mov    ecx,0x69
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:178 (discriminator 4)
   1946e:	52                   	push   edx
   1946f:	50                   	push   eax
   19470:	51                   	push   ecx
   19471:	68 57 2d 08 00       	push   0x82d57
   19476:	e8 b8 db 00 00       	call   27033 <printk>
   1947b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:180
                }
                if (translatedKeypress=='b')
   1947e:	80 7d f7 62          	cmp    BYTE PTR [ebp-0x9],0x62
   19482:	0f 85 83 00 00 00    	jne    1950b <kbd_handler+0x368>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:182
                {
                    cursorSavePosition();
   19488:	e8 66 e6 ff ff       	call   17af3 <cursorSavePosition>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:183
                    gmtime_r((time_t*)&kSystemCurrentTime,&theDateTime);
   1948d:	83 ec 08             	sub    esp,0x8
   19490:	68 60 a5 09 00       	push   0x9a560
   19495:	68 8c 02 a0 00       	push   0xa0028c
   1949a:	e8 f6 e1 00 00       	call   27695 <gmtime_r>
   1949f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:184
                    strftime((char*)&currTime, 50, "%m/%d/%Y %H:%M:%S", &theDateTime);
   194a2:	68 60 a5 09 00       	push   0x9a560
   194a7:	68 20 2d 08 00       	push   0x82d20
   194ac:	6a 32                	push   0x32
   194ae:	68 a0 a5 09 00       	push   0x9a5a0
   194b3:	e8 f8 71 ff ff       	call   106b0 <strftime>
   194b8:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:185
                    cursorMoveTo(0,SYS_VGA_HEIGHT-1);
   194bb:	83 ec 08             	sub    esp,0x8
   194be:	6a 31                	push   0x31
   194c0:	6a 00                	push   0x0
   194c2:	e8 e0 e9 ff ff       	call   17ea7 <cursorMoveTo>
   194c7:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:186
                    printk("The time is currently %s", &currTime);
   194ca:	83 ec 08             	sub    esp,0x8
   194cd:	68 a0 a5 09 00       	push   0x9a5a0
   194d2:	68 32 2d 08 00       	push   0x82d32
   194d7:	e8 57 db 00 00       	call   27033 <printk>
   194dc:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:187
                    cursorMoveTo(65,SYS_VGA_HEIGHT-1);
   194df:	83 ec 08             	sub    esp,0x8
   194e2:	6a 31                	push   0x31
   194e4:	6a 41                	push   0x41
   194e6:	e8 bc e9 ff ff       	call   17ea7 <cursorMoveTo>
   194eb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:188
                    printk("ticks=%d", *kTicksSinceStart);
   194ee:	a1 60 02 a0 00       	mov    eax,ds:0xa00260
   194f3:	8b 00                	mov    eax,DWORD PTR [eax]
   194f5:	83 ec 08             	sub    esp,0x8
   194f8:	50                   	push   eax
   194f9:	68 4b 2d 08 00       	push   0x82d4b
   194fe:	e8 30 db 00 00       	call   27033 <printk>
   19503:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:189
                    cursorRestorePosition();
   19506:	e8 34 e6 ff ff       	call   17b3f <cursorRestorePosition>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:191
                }
                if (translatedKeypress=='d')
   1950b:	80 7d f7 64          	cmp    BYTE PTR [ebp-0x9],0x64
   1950f:	75 05                	jne    19516 <kbd_handler+0x373>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:193
                {
                    printDumpedRegs();
   19511:	e8 97 bd 00 00       	call   252ad <printDumpedRegs>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:195
                }
                if (translatedKeypress=='e')
   19516:	80 7d f7 65          	cmp    BYTE PTR [ebp-0x9],0x65
   1951a:	75 05                	jne    19521 <kbd_handler+0x37e>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:197
                {
                    dumpKernelAddresses();
   1951c:	e8 46 c1 00 00       	call   25667 <dumpKernelAddresses>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:201
                }
            }
        }
        break;
   19521:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:204
    }
        
    lKeyControlVal = inb(KEYB_CTRL_PORT);
   19522:	83 ec 0c             	sub    esp,0xc
   19525:	6a 61                	push   0x61
   19527:	e8 0f fb ff ff       	call   1903b <inb>
   1952c:	83 c4 10             	add    esp,0x10
   1952f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:205
    lKeyControlVal |= 0x82;
   19532:	80 4d f6 82          	or     BYTE PTR [ebp-0xa],0x82
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:206
    outb(KEYB_CTRL_PORT, lKeyControlVal);
   19536:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1953a:	83 ec 08             	sub    esp,0x8
   1953d:	50                   	push   eax
   1953e:	6a 61                	push   0x61
   19540:	e8 d7 fa ff ff       	call   1901c <outb>
   19545:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:207
    lKeyControlVal &= 0x7f;
   19548:	80 65 f6 7f          	and    BYTE PTR [ebp-0xa],0x7f
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:208
    outb(KEYB_CTRL_PORT, lKeyControlVal);
   1954c:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   19550:	83 ec 08             	sub    esp,0x8
   19553:	50                   	push   eax
   19554:	6a 61                	push   0x61
   19556:	e8 c1 fa ff ff       	call   1901c <outb>
   1955b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:209
    return;
   1955e:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:210
}
   1955f:	c9                   	leave  
   19560:	c3                   	ret    

00019561 <pagingExceptionHandler>:
pagingExceptionHandler():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:213

void pagingExceptionHandler()
{
   19561:	55                   	push   ebp
   19562:	89 e5                	mov    ebp,esp
   19564:	83 ec 28             	sub    esp,0x28
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:214
    uint32_t lPDEValue=0;
   19567:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:215
    uint32_t lPTEValue=0;
   1956e:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:216
    uint32_t lPDEAddress=0, lPTEAddress=0;
   19575:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   1957c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:217
    uint32_t lOldDebugLevel=0;
   19583:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:219

    if (exceptionNumber==0x0e)
   1958a:	0f b7 05 a4 01 a0 00 	movzx  eax,WORD PTR ds:0xa001a4
   19591:	66 83 f8 0e          	cmp    ax,0xe
   19595:	75 14                	jne    195ab <pagingExceptionHandler+0x4a>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:221
        //Get the address of the page table entry for the exception
        lPTEAddress=kPagingGet4kPTEntryAddress(exceptionCR2);
   19597:	a1 00 02 a0 00       	mov    eax,ds:0xa00200
   1959c:	83 ec 0c             	sub    esp,0xc
   1959f:	50                   	push   eax
   195a0:	e8 d0 7e ff ff       	call   11475 <kPagingGet4kPTEntryAddress>
   195a5:	83 c4 10             	add    esp,0x10
   195a8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:224

#ifndef DEBUG_NONE
    if (!kPagingInitDone)
   195ab:	0f b6 05 a1 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002a1
   195b2:	83 f0 01             	xor    eax,0x1
   195b5:	84 c0                	test   al,al
   195b7:	74 12                	je     195cb <pagingExceptionHandler+0x6a>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:226
    {
        lOldDebugLevel=kDebugLevel;
   195b9:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   195be:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:227
        kDebugLevel&=!DEBUG_EXCEPTIONS;
   195c1:	c7 05 38 03 a0 00 00 	mov    DWORD PTR ds:0xa00338,0x0
   195c8:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:229
    }
    if ((kDebugLevel & DEBUG_EXCEPTIONS) == DEBUG_EXCEPTIONS)
   195cb:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   195d0:	25 00 10 00 00       	and    eax,0x1000
   195d5:	85 c0                	test   eax,eax
   195d7:	0f 84 99 00 00 00    	je     19676 <pagingExceptionHandler+0x115>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:231
    {
        lPDEValue=kPagingGet4kPDEntryValue(exceptionCR2);
   195dd:	a1 00 02 a0 00       	mov    eax,ds:0xa00200
   195e2:	83 ec 0c             	sub    esp,0xc
   195e5:	50                   	push   eax
   195e6:	e8 01 7e ff ff       	call   113ec <kPagingGet4kPDEntryValue>
   195eb:	83 c4 10             	add    esp,0x10
   195ee:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:232
        lPTEValue=kPagingGet4kPTEntryValue(exceptionCR2);
   195f1:	a1 00 02 a0 00       	mov    eax,ds:0xa00200
   195f6:	83 ec 0c             	sub    esp,0xc
   195f9:	50                   	push   eax
   195fa:	e8 ac 7e ff ff       	call   114ab <kPagingGet4kPTEntryValue>
   195ff:	83 c4 10             	add    esp,0x10
   19602:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:233
        lPDEAddress=kPagingGet4kPDEntryAddress(exceptionCR2);
   19605:	a1 00 02 a0 00       	mov    eax,ds:0xa00200
   1960a:	83 ec 0c             	sub    esp,0xc
   1960d:	50                   	push   eax
   1960e:	e8 20 7e ff ff       	call   11433 <kPagingGet4kPDEntryAddress>
   19613:	83 c4 10             	add    esp,0x10
   19616:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:234
        if (exceptionNumber==0x0e)
   19619:	0f b7 05 a4 01 a0 00 	movzx  eax,WORD PTR ds:0xa001a4
   19620:	66 83 f8 0e          	cmp    ax,0xe
   19624:	75 16                	jne    1963c <pagingExceptionHandler+0xdb>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:235
          printk("\nPaging handler called for virtual address 0x%02X\n",exceptionCR2);
   19626:	a1 00 02 a0 00       	mov    eax,ds:0xa00200
   1962b:	83 ec 08             	sub    esp,0x8
   1962e:	50                   	push   eax
   1962f:	68 94 2d 08 00       	push   0x82d94
   19634:	e8 fa d9 00 00       	call   27033 <printk>
   19639:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:236
          printk("PDE@0x%08X=0x%08X, PTE@0x%08X=0x%08X\n", lPDEAddress, lPDEValue, lPTEAddress, lPTEValue);
   1963c:	83 ec 0c             	sub    esp,0xc
   1963f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   19642:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   19645:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   19648:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1964b:	68 c8 2d 08 00       	push   0x82dc8
   19650:	e8 de d9 00 00       	call   27033 <printk>
   19655:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:237
          printDumpedRegs();
   19658:	e8 50 bc 00 00       	call   252ad <printDumpedRegs>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:238
          printk("handler called %u times since system start\n",kPagingExceptionsSinceStart+1);
   1965d:	a1 78 02 a0 00       	mov    eax,ds:0xa00278
   19662:	83 c0 01             	add    eax,0x1
   19665:	83 ec 08             	sub    esp,0x8
   19668:	50                   	push   eax
   19669:	68 f0 2d 08 00       	push   0x82df0
   1966e:	e8 c0 d9 00 00       	call   27033 <printk>
   19673:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:241
    }
#endif
    if ((exceptionCR2&0xFFFFF000)==0xC0000000 && (!kPagingInitDone))
   19676:	a1 00 02 a0 00       	mov    eax,ds:0xa00200
   1967b:	25 00 f0 ff ff       	and    eax,0xfffff000
   19680:	3d 00 00 00 c0       	cmp    eax,0xc0000000
   19685:	75 43                	jne    196ca <pagingExceptionHandler+0x169>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:241 (discriminator 1)
   19687:	0f b6 05 a1 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002a1
   1968e:	83 f0 01             	xor    eax,0x1
   19691:	84 c0                	test   al,al
   19693:	74 35                	je     196ca <pagingExceptionHandler+0x169>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:244
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_EXCEPTIONS) == DEBUG_EXCEPTIONS)
   19695:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   1969a:	25 00 10 00 00       	and    eax,0x1000
   1969f:	85 c0                	test   eax,eax
   196a1:	74 16                	je     196b9 <pagingExceptionHandler+0x158>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:245
            printk("pagingExceptionHandler: Updating readonly flag for 0x%08X\n",exceptionCR2);
   196a3:	a1 00 02 a0 00       	mov    eax,ds:0xa00200
   196a8:	83 ec 08             	sub    esp,0x8
   196ab:	50                   	push   eax
   196ac:	68 1c 2e 08 00       	push   0x82e1c
   196b1:	e8 7d d9 00 00       	call   27033 <printk>
   196b6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:247
#endif
        kPagingSetPageReadOnlyFlag((uintptr_t*)lPTEAddress, false);
   196b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   196bc:	83 ec 08             	sub    esp,0x8
   196bf:	6a 00                	push   0x0
   196c1:	50                   	push   eax
   196c2:	e8 28 7e ff ff       	call   114ef <kPagingSetPageReadOnlyFlag>
   196c7:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:250
    }
    
    kPagingExceptionsSinceStart++;
   196ca:	a1 78 02 a0 00       	mov    eax,ds:0xa00278
   196cf:	83 c0 01             	add    eax,0x1
   196d2:	a3 78 02 a0 00       	mov    ds:0xa00278,eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:257
//    if ((kDebugLevel & DEBUG_EXCEPTIONS) == DEBUG_EXCEPTIONS)
//    {
//        waitForKeyboardKey();
//    }
#endif
    __asm__("push eax\n mov eax,0\nmov cr2,eax\npop eax\n  #reset CR2 after paging exception handled");
   196d7:	50                   	push   eax
   196d8:	b8 00 00 00 00       	mov    eax,0x0
   196dd:	0f 22 d0             	mov    cr2,eax
   196e0:	58                   	pop    eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:258
    if (lOldDebugLevel)
   196e1:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   196e5:	74 08                	je     196ef <pagingExceptionHandler+0x18e>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:259
        kDebugLevel=lOldDebugLevel;
   196e7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   196ea:	a3 38 03 a0 00       	mov    ds:0xa00338,eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:260
    if ((!kPagingInitDone) && exceptionCR2==0xC0000000)
   196ef:	0f b6 05 a1 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002a1
   196f6:	83 f0 01             	xor    eax,0x1
   196f9:	84 c0                	test   al,al
   196fb:	74 18                	je     19715 <pagingExceptionHandler+0x1b4>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:260 (discriminator 1)
   196fd:	a1 00 02 a0 00       	mov    eax,ds:0xa00200
   19702:	3d 00 00 00 c0       	cmp    eax,0xc0000000
   19707:	75 0c                	jne    19715 <pagingExceptionHandler+0x1b4>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:262
    {
        exceptionCR2=0;
   19709:	c7 05 00 02 a0 00 00 	mov    DWORD PTR ds:0xa00200,0x0
   19710:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:263
        return;
   19713:	eb 04                	jmp    19719 <pagingExceptionHandler+0x1b8>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:265
    }
    __asm__("sti\n");
   19715:	fb                   	sti    
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:266 (discriminator 1)
    pagingExceptionStop: __asm__("hlt\n"); goto pagingExceptionStop;
   19716:	f4                   	hlt    
   19717:	eb fd                	jmp    19716 <pagingExceptionHandler+0x1b5>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:269
    __asm__("cli");
    __asm__("hlt");
}
   19719:	c9                   	leave  
   1971a:	c3                   	ret    

0001971b <defaultISRHandler>:
defaultISRHandler():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:272

void defaultISRHandler()
{
   1971b:	55                   	push   ebp
   1971c:	89 e5                	mov    ebp,esp
   1971e:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:275
    //terminal_clear();
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_EXCEPTIONS) == DEBUG_EXCEPTIONS)
   19721:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   19726:	25 00 10 00 00       	and    eax,0x1000
   1972b:	85 c0                	test   eax,eax
   1972d:	74 3e                	je     1976d <defaultISRHandler+0x52>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:277
    {
        printk("Exception handler called for exception # 0x%02x\n\n", exceptionNumber);
   1972f:	0f b7 05 a4 01 a0 00 	movzx  eax,WORD PTR ds:0xa001a4
   19736:	0f b7 c0             	movzx  eax,ax
   19739:	83 ec 08             	sub    esp,0x8
   1973c:	50                   	push   eax
   1973d:	68 58 2e 08 00       	push   0x82e58
   19742:	e8 ec d8 00 00       	call   27033 <printk>
   19747:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:278
        printDumpedRegs();
   1974a:	e8 5e bb 00 00       	call   252ad <printDumpedRegs>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:279
        printd(DEBUG_EXCEPTIONS,"handler called %u times since system start\n",kPagingExceptionsSinceStart+1);
   1974f:	a1 78 02 a0 00       	mov    eax,ds:0xa00278
   19754:	83 c0 01             	add    eax,0x1
   19757:	83 ec 04             	sub    esp,0x4
   1975a:	50                   	push   eax
   1975b:	68 f0 2d 08 00       	push   0x82df0
   19760:	68 00 10 00 00       	push   0x1000
   19765:	e8 e9 d8 00 00       	call   27053 <printd>
   1976a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:293 (discriminator 1)

//    __asm__("mov eax,%0\nmov ebx,%1\n"::"r" (exceptionAX), "r" (exceptionEIP));
//    return;
    
defaultHandlerLoop:
    goto defaultHandlerLoop;
   1976d:	eb fe                	jmp    1976d <defaultISRHandler+0x52>

0001976f <doubleFaultHandler>:
doubleFaultHandler():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:297
}

void doubleFaultHandler()
{
   1976f:	55                   	push   ebp
   19770:	89 e5                	mov    ebp,esp
   19772:	53                   	push   ebx
   19773:	83 ec 14             	sub    esp,0x14
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:298
    uint32_t esp = (uint32_t)exceptionSavedESP;
   19776:	a1 ec 01 a0 00       	mov    eax,ds:0xa001ec
   1977b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:299
        terminal_clear();
   1977e:	e8 0f e4 ff ff       	call   17b92 <terminal_clear>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:300
        printk("Double Fault for exception %02X, CS:EIP = %04X:%08x, error = %08X\n", exceptionNumber, exceptionCS, exceptionEIP, exceptionCR2);
   19783:	8b 1d 00 02 a0 00    	mov    ebx,DWORD PTR ds:0xa00200
   19789:	8b 0d f8 01 a0 00    	mov    ecx,DWORD PTR ds:0xa001f8
   1978f:	8b 15 fc 01 a0 00    	mov    edx,DWORD PTR ds:0xa001fc
   19795:	0f b7 05 a4 01 a0 00 	movzx  eax,WORD PTR ds:0xa001a4
   1979c:	0f b7 c0             	movzx  eax,ax
   1979f:	83 ec 0c             	sub    esp,0xc
   197a2:	53                   	push   ebx
   197a3:	51                   	push   ecx
   197a4:	52                   	push   edx
   197a5:	50                   	push   eax
   197a6:	68 8c 2e 08 00       	push   0x82e8c
   197ab:	e8 83 d8 00 00       	call   27033 <printk>
   197b0:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:301
        printk ("Stack:\n");
   197b3:	83 ec 0c             	sub    esp,0xc
   197b6:	68 cf 2e 08 00       	push   0x82ecf
   197bb:	e8 73 d8 00 00       	call   27033 <printk>
   197c0:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:302
        for (int cnt=0;cnt<10;cnt++)
   197c3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   197ca:	eb 2b                	jmp    197f7 <doubleFaultHandler+0x88>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:304 (discriminator 3)
        {
            printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
   197cc:	a1 a8 01 a0 00       	mov    eax,ds:0xa001a8
   197d1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   197d4:	c1 e2 02             	shl    edx,0x2
   197d7:	01 d0                	add    eax,edx
   197d9:	8b 00                	mov    eax,DWORD PTR [eax]
   197db:	83 ec 04             	sub    esp,0x4
   197de:	50                   	push   eax
   197df:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   197e2:	68 d7 2e 08 00       	push   0x82ed7
   197e7:	e8 47 d8 00 00       	call   27033 <printk>
   197ec:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:305 (discriminator 3)
            esp+=4;
   197ef:	83 45 f4 04          	add    DWORD PTR [ebp-0xc],0x4
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:302 (discriminator 3)
{
    uint32_t esp = (uint32_t)exceptionSavedESP;
        terminal_clear();
        printk("Double Fault for exception %02X, CS:EIP = %04X:%08x, error = %08X\n", exceptionNumber, exceptionCS, exceptionEIP, exceptionCR2);
        printk ("Stack:\n");
        for (int cnt=0;cnt<10;cnt++)
   197f3:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:302 (discriminator 1)
   197f7:	83 7d f0 09          	cmp    DWORD PTR [ebp-0x10],0x9
   197fb:	7e cf                	jle    197cc <doubleFaultHandler+0x5d>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:307
        {
            printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
            esp+=4;
        }
    __asm__("cli");
   197fd:	fa                   	cli    
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:308
    __asm__("hlt");
   197fe:	f4                   	hlt    
/home/yogi/NetBeansProjects/chrisOS/src/cpu/irqHandlers.c:309
   197ff:	90                   	nop
   19800:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   19803:	c9                   	leave  
   19804:	c3                   	ret    
   19805:	66 90                	xchg   ax,ax
   19807:	90                   	nop

00019808 <rdmsr64>:
rdmsr64():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/msr.c:4
#include "i386/cpu.h"

uint64_t rdmsr64(unsigned index)
{
   19808:	55                   	push   ebp
   19809:	89 e5                	mov    ebp,esp
   1980b:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/msr.c:7
    unsigned long long ret;

    __asm__ ("rdmsr" : "=A"(ret) : "c"(index));
   1980e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19811:	89 c1                	mov    ecx,eax
   19813:	0f 32                	rdmsr  
   19815:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   19818:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/msr.c:8
    return ret;
   1981b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1981e:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/msr.c:9
}
   19821:	c9                   	leave  
   19822:	c3                   	ret    

00019823 <rdmsr32>:
rdmsr32():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/msr.c:12

void rdmsr32(unsigned index,uint32_t* loVal, uint32_t* hiVal)
{
   19823:	55                   	push   ebp
   19824:	89 e5                	mov    ebp,esp
   19826:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/msr.c:13
    unsigned long long lTemp = rdmsr64(index);
   19829:	83 ec 04             	sub    esp,0x4
   1982c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1982f:	e8 d4 ff ff ff       	call   19808 <rdmsr64>
   19834:	83 c4 08             	add    esp,0x8
   19837:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   1983a:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/msr.c:14
    *hiVal = lTemp >> 32;
   1983d:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   19840:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   19843:	89 d0                	mov    eax,edx
   19845:	31 d2                	xor    edx,edx
   19847:	89 c2                	mov    edx,eax
   19849:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1984c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/msr.c:15
    *loVal = lTemp & 0xFFFFFFFF;
   1984e:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   19851:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19854:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/msr.c:16
}
   19856:	90                   	nop
   19857:	c9                   	leave  
   19858:	c3                   	ret    

00019859 <wrmsr64>:
wrmsr64():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/msr.c:19

void wrmsr64(unsigned index, uint64_t val)
{
   19859:	55                   	push   ebp
   1985a:	89 e5                	mov    ebp,esp
   1985c:	83 ec 08             	sub    esp,0x8
   1985f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19862:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   19865:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   19868:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/msr.c:20
    __asm__ volatile ("wrmsr" : : "c"(index), "A"(val));
   1986b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   1986e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   19871:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   19874:	0f 30                	wrmsr  
/home/yogi/NetBeansProjects/chrisOS/src/cpu/msr.c:21
}
   19876:	90                   	nop
   19877:	c9                   	leave  
   19878:	c3                   	ret    

00019879 <wrmsr32>:
wrmsr32():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/msr.c:24

void wrmsr32(unsigned index, uint32_t loVal, uint32_t hiVal)
{
   19879:	55                   	push   ebp
   1987a:	89 e5                	mov    ebp,esp
   1987c:	57                   	push   edi
   1987d:	56                   	push   esi
   1987e:	53                   	push   ebx
   1987f:	83 ec 0c             	sub    esp,0xc
/home/yogi/NetBeansProjects/chrisOS/src/cpu/msr.c:27
    //NOTE: hiVal=EDX, loVal=EAX
    //asm volatile ("wrmsr" : : "c"(index), "a"(eaxVal), "d" edxVal);
    wrmsr64(index, ((uint64_t)hiVal << 32) | loVal);
   19882:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   19885:	bb 00 00 00 00       	mov    ebx,0x0
   1988a:	89 cb                	mov    ebx,ecx
   1988c:	b9 00 00 00 00       	mov    ecx,0x0
   19891:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
   19894:	bf 00 00 00 00       	mov    edi,0x0
   19899:	89 c8                	mov    eax,ecx
   1989b:	09 f0                	or     eax,esi
   1989d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   198a0:	89 d8                	mov    eax,ebx
   198a2:	09 f8                	or     eax,edi
   198a4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
   198a7:	83 ec 04             	sub    esp,0x4
   198aa:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   198ad:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   198b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   198b3:	e8 a1 ff ff ff       	call   19859 <wrmsr64>
   198b8:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/msr.c:29
    
}
   198bb:	90                   	nop
   198bc:	8d 65 f4             	lea    esp,[ebp-0xc]
   198bf:	5b                   	pop    ebx
   198c0:	5e                   	pop    esi
   198c1:	5f                   	pop    edi
   198c2:	5d                   	pop    ebp
   198c3:	c3                   	ret    

000198c4 <outb>:
outb():
/home/yogi/NetBeansProjects/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   198c4:	55                   	push   ebp
   198c5:	89 e5                	mov    ebp,esp
   198c7:	83 ec 08             	sub    esp,0x8
   198ca:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   198cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   198d0:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   198d4:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/NetBeansProjects/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   198d7:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   198db:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   198df:	ee                   	out    dx,al
/home/yogi/NetBeansProjects/chrisOS/include/io.h:24
}
   198e0:	90                   	nop
   198e1:	c9                   	leave  
   198e2:	c3                   	ret    

000198e3 <inb>:
inb():
/home/yogi/NetBeansProjects/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   198e3:	55                   	push   ebp
   198e4:	89 e5                	mov    ebp,esp
   198e6:	83 ec 14             	sub    esp,0x14
   198e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   198ec:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/NetBeansProjects/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   198f0:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   198f4:	89 c2                	mov    edx,eax
   198f6:	ec                   	in     al,dx
   198f7:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/NetBeansProjects/chrisOS/include/io.h:40
	return __val;
   198fa:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/NetBeansProjects/chrisOS/include/io.h:41
}
   198fe:	c9                   	leave  
   198ff:	c3                   	ret    

00019900 <IRQ_set_mask>:
IRQ_set_mask():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:4
#include "io.h"
#include "i386/bits/types.h"

void IRQ_set_mask(unsigned char IRQline) {
   19900:	55                   	push   ebp
   19901:	89 e5                	mov    ebp,esp
   19903:	53                   	push   ebx
   19904:	83 ec 14             	sub    esp,0x14
   19907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1990a:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:8
    uint16_t port;
    uint8_t value;
 
    if(IRQline < 8) {
   1990d:	80 7d e8 07          	cmp    BYTE PTR [ebp-0x18],0x7
   19911:	77 08                	ja     1991b <IRQ_set_mask+0x1b>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:9
        port = PIC1_DATA;
   19913:	66 c7 45 fa 21 00    	mov    WORD PTR [ebp-0x6],0x21
   19919:	eb 0a                	jmp    19925 <IRQ_set_mask+0x25>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:11
    } else {
        port = PIC2_DATA;
   1991b:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:12
        IRQline -= 8;
   19921:	80 6d e8 08          	sub    BYTE PTR [ebp-0x18],0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:14
    }
    value = inb(port) | (1 << IRQline);
   19925:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   19929:	50                   	push   eax
   1992a:	e8 b4 ff ff ff       	call   198e3 <inb>
   1992f:	83 c4 04             	add    esp,0x4
   19932:	89 c3                	mov    ebx,eax
   19934:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
   19938:	ba 01 00 00 00       	mov    edx,0x1
   1993d:	89 c1                	mov    ecx,eax
   1993f:	d3 e2                	shl    edx,cl
   19941:	89 d0                	mov    eax,edx
   19943:	09 d8                	or     eax,ebx
   19945:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:15
    outb(port, value);        
   19948:	0f b6 55 f9          	movzx  edx,BYTE PTR [ebp-0x7]
   1994c:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   19950:	52                   	push   edx
   19951:	50                   	push   eax
   19952:	e8 6d ff ff ff       	call   198c4 <outb>
   19957:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:16
}
   1995a:	90                   	nop
   1995b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1995e:	c9                   	leave  
   1995f:	c3                   	ret    

00019960 <IRQ_clear_mask>:
IRQ_clear_mask():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:18
 
void IRQ_clear_mask(unsigned char IRQline) {
   19960:	55                   	push   ebp
   19961:	89 e5                	mov    ebp,esp
   19963:	53                   	push   ebx
   19964:	83 ec 14             	sub    esp,0x14
   19967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1996a:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:22
    uint16_t port;
    uint8_t value;
 
    if(IRQline < 8) {
   1996d:	80 7d e8 07          	cmp    BYTE PTR [ebp-0x18],0x7
   19971:	77 08                	ja     1997b <IRQ_clear_mask+0x1b>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:23
        port = PIC1_DATA;
   19973:	66 c7 45 fa 21 00    	mov    WORD PTR [ebp-0x6],0x21
   19979:	eb 0a                	jmp    19985 <IRQ_clear_mask+0x25>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:25
    } else {
        port = PIC2_DATA;
   1997b:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:26
        IRQline -= 8;
   19981:	80 6d e8 08          	sub    BYTE PTR [ebp-0x18],0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:28
    }
    value = inb(port) & ~(1 << IRQline);
   19985:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   19989:	50                   	push   eax
   1998a:	e8 54 ff ff ff       	call   198e3 <inb>
   1998f:	83 c4 04             	add    esp,0x4
   19992:	89 c2                	mov    edx,eax
   19994:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
   19998:	bb 01 00 00 00       	mov    ebx,0x1
   1999d:	89 c1                	mov    ecx,eax
   1999f:	d3 e3                	shl    ebx,cl
   199a1:	89 d8                	mov    eax,ebx
   199a3:	f7 d0                	not    eax
   199a5:	21 d0                	and    eax,edx
   199a7:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:29
    outb(port, value);        
   199aa:	0f b6 55 f9          	movzx  edx,BYTE PTR [ebp-0x7]
   199ae:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   199b2:	52                   	push   edx
   199b3:	50                   	push   eax
   199b4:	e8 0b ff ff ff       	call   198c4 <outb>
   199b9:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:30
}
   199bc:	90                   	nop
   199bd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   199c0:	c9                   	leave  
   199c1:	c3                   	ret    

000199c2 <PIC_remap>:
PIC_remap():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:54
	offset1 - vector offset for master PIC
		vectors on the master become offset1..offset1+7
	offset2 - same for slave PIC: offset2..offset2+7
*/
void PIC_remap(int offset1, int offset2)
{
   199c2:	55                   	push   ebp
   199c3:	89 e5                	mov    ebp,esp
   199c5:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:57
	unsigned char a1, a2;
 
	a1 = inb(PIC1_DATA);                        // save masks
   199c8:	6a 21                	push   0x21
   199ca:	e8 14 ff ff ff       	call   198e3 <inb>
   199cf:	83 c4 04             	add    esp,0x4
   199d2:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:58
	a2 = inb(PIC2_DATA);
   199d5:	68 a1 00 00 00       	push   0xa1
   199da:	e8 04 ff ff ff       	call   198e3 <inb>
   199df:	83 c4 04             	add    esp,0x4
   199e2:	88 45 fe             	mov    BYTE PTR [ebp-0x2],al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:60
 
	outb(PIC1_CMD, ICW1_INIT+ICW1_ICW4);  // starts the initialization sequence (in cascade mode)
   199e5:	6a 11                	push   0x11
   199e7:	6a 20                	push   0x20
   199e9:	e8 d6 fe ff ff       	call   198c4 <outb>
   199ee:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:61
	__asm__("nop;");
   199f1:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:62
	outb(PIC2_CMD, ICW1_INIT+ICW1_ICW4);
   199f2:	6a 11                	push   0x11
   199f4:	68 a0 00 00 00       	push   0xa0
   199f9:	e8 c6 fe ff ff       	call   198c4 <outb>
   199fe:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:63
	__asm__("nop;");
   19a01:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:64
	outb(PIC1_DATA, offset1);                 // ICW2: Master PIC vector offset
   19a02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19a05:	0f b6 c0             	movzx  eax,al
   19a08:	50                   	push   eax
   19a09:	6a 21                	push   0x21
   19a0b:	e8 b4 fe ff ff       	call   198c4 <outb>
   19a10:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:65
	__asm__("nop;");
   19a13:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:66
	outb(PIC2_DATA, offset2);                 // ICW2: Slave PIC vector offset
   19a14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19a17:	0f b6 c0             	movzx  eax,al
   19a1a:	50                   	push   eax
   19a1b:	68 a1 00 00 00       	push   0xa1
   19a20:	e8 9f fe ff ff       	call   198c4 <outb>
   19a25:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:67
	__asm__("nop;");
   19a28:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:68
	outb(PIC1_DATA, 4);                       // ICW3: tell Master PIC that there is a slave PIC at IRQ2 (0000 0100)
   19a29:	6a 04                	push   0x4
   19a2b:	6a 21                	push   0x21
   19a2d:	e8 92 fe ff ff       	call   198c4 <outb>
   19a32:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:69
	__asm__("nop;");
   19a35:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:70
	outb(PIC2_DATA, 2);                       // ICW3: tell Slave PIC its cascade identity (0000 0010)
   19a36:	6a 02                	push   0x2
   19a38:	68 a1 00 00 00       	push   0xa1
   19a3d:	e8 82 fe ff ff       	call   198c4 <outb>
   19a42:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:71
	__asm__("nop;");
   19a45:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:73
 
	outb(PIC1_DATA, ICW4_8086);
   19a46:	6a 01                	push   0x1
   19a48:	6a 21                	push   0x21
   19a4a:	e8 75 fe ff ff       	call   198c4 <outb>
   19a4f:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:74
	__asm__("nop;");
   19a52:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:75
	outb(PIC2_DATA, ICW4_8086);
   19a53:	6a 01                	push   0x1
   19a55:	68 a1 00 00 00       	push   0xa1
   19a5a:	e8 65 fe ff ff       	call   198c4 <outb>
   19a5f:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:76
	__asm__("nop;");
   19a62:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:78
 
	outb(PIC1_DATA, a1);   // restore saved masks.
   19a63:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   19a67:	50                   	push   eax
   19a68:	6a 21                	push   0x21
   19a6a:	e8 55 fe ff ff       	call   198c4 <outb>
   19a6f:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:79
	outb(PIC2_DATA, a2);
   19a72:	0f b6 45 fe          	movzx  eax,BYTE PTR [ebp-0x2]
   19a76:	50                   	push   eax
   19a77:	68 a1 00 00 00       	push   0xa1
   19a7c:	e8 43 fe ff ff       	call   198c4 <outb>
   19a81:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/ports.c:80
   19a84:	90                   	nop
   19a85:	c9                   	leave  
   19a86:	c3                   	ret    
   19a87:	90                   	nop

00019a88 <mpScanForConfig>:
mpScanForConfig():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:19
extern uint32_t kDebugLevel;
extern mpConfig_t* kMPConfigTable;
extern uintptr_t* kIOAPICPtr;

bool HIGH_CODE_SECTION mpScanForConfig(int start, int length)
{
   19a88:	55                   	push   ebp
   19a89:	89 e5                	mov    ebp,esp
   19a8b:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:22
    struct mpf_intel* lMP;
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
   19a8e:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   19a93:	25 00 08 00 00       	and    eax,0x800
   19a98:	85 c0                	test   eax,eax
   19a9a:	74 1e                	je     19aba <mpScanForConfig+0x32>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:23
        printd(DEBUG_MP,"mpScanForConfig; 0x%08X-->0x%08X\n", start, start+length);
   19a9c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   19a9f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19aa2:	01 d0                	add    eax,edx
   19aa4:	50                   	push   eax
   19aa5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   19aa8:	68 00 30 08 00       	push   0x83000
   19aad:	68 00 08 00 00       	push   0x800
   19ab2:	e8 9c d5 00 00       	call   27053 <printd>
   19ab7:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:25
#endif
    for (int cnt=start;cnt<start+length;cnt++)
   19aba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19abd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   19ac0:	eb 33                	jmp    19af5 <mpScanForConfig+0x6d>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:27
    {
        lMP=(struct mpf_intel*)cnt;
   19ac2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   19ac5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:28
        if(!strncmp(lMP->signature,"_MP_",4))
   19ac8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19acb:	83 ec 04             	sub    esp,0x4
   19ace:	6a 04                	push   0x4
   19ad0:	68 22 30 08 00       	push   0x83022
   19ad5:	50                   	push   eax
   19ad6:	e8 31 81 ff ff       	call   11c0c <strncmp>
   19adb:	83 c4 10             	add    esp,0x10
   19ade:	85 c0                	test   eax,eax
   19ae0:	75 0f                	jne    19af1 <mpScanForConfig+0x69>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:30
        {
            mp=(struct mpf_intel*)cnt;
   19ae2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   19ae5:	a3 70 65 09 00       	mov    ds:0x96570,eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:31
            return true;
   19aea:	b8 01 00 00 00       	mov    eax,0x1
   19aef:	eb 16                	jmp    19b07 <mpScanForConfig+0x7f>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:25 (discriminator 2)
    struct mpf_intel* lMP;
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
        printd(DEBUG_MP,"mpScanForConfig; 0x%08X-->0x%08X\n", start, start+length);
#endif
    for (int cnt=start;cnt<start+length;cnt++)
   19af1:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:25 (discriminator 1)
   19af5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   19af8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19afb:	01 d0                	add    eax,edx
   19afd:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   19b00:	7f c0                	jg     19ac2 <mpScanForConfig+0x3a>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:34
        {
            mp=(struct mpf_intel*)cnt;
            return true;
        }
    }
    return false;
   19b02:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:35
}
   19b07:	c9                   	leave  
   19b08:	c3                   	ret    

00019b09 <mpFindTables>:
mpFindTables():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:38

bool HIGH_CODE_SECTION  mpFindTables()
{
   19b09:	55                   	push   ebp
   19b0a:	89 e5                	mov    ebp,esp
   19b0c:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:39
    uint16_t* lEBDAPtr=(uint16_t*)0x40e;
   19b0f:	c7 45 f0 0e 04 00 00 	mov    DWORD PTR [ebp-0x10],0x40e
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:42
    bool lResult;
    
    if (lEBDAPtr != 0)
   19b16:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   19b1a:	74 20                	je     19b3c <mpFindTables+0x33>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:43
        lResult=mpScanForConfig(*lEBDAPtr<<4, 0x400);
   19b1c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19b1f:	0f b7 00             	movzx  eax,WORD PTR [eax]
   19b22:	0f b7 c0             	movzx  eax,ax
   19b25:	c1 e0 04             	shl    eax,0x4
   19b28:	83 ec 08             	sub    esp,0x8
   19b2b:	68 00 04 00 00       	push   0x400
   19b30:	50                   	push   eax
   19b31:	e8 52 ff ff ff       	call   19a88 <mpScanForConfig>
   19b36:	83 c4 10             	add    esp,0x10
   19b39:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:44
    if (!lResult)
   19b3c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   19b40:	83 f0 01             	xor    eax,0x1
   19b43:	84 c0                	test   al,al
   19b45:	74 62                	je     19ba9 <mpFindTables+0xa0>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:45
        if (!mpScanForConfig(0x9fc00, 0x400))
   19b47:	83 ec 08             	sub    esp,0x8
   19b4a:	68 00 04 00 00       	push   0x400
   19b4f:	68 00 fc 09 00       	push   0x9fc00
   19b54:	e8 2f ff ff ff       	call   19a88 <mpScanForConfig>
   19b59:	83 c4 10             	add    esp,0x10
   19b5c:	83 f0 01             	xor    eax,0x1
   19b5f:	84 c0                	test   al,al
   19b61:	74 46                	je     19ba9 <mpFindTables+0xa0>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:46
            if (!mpScanForConfig(0xF0000, 0xFFFF))
   19b63:	83 ec 08             	sub    esp,0x8
   19b66:	68 ff ff 00 00       	push   0xffff
   19b6b:	68 00 00 0f 00       	push   0xf0000
   19b70:	e8 13 ff ff ff       	call   19a88 <mpScanForConfig>
   19b75:	83 c4 10             	add    esp,0x10
   19b78:	83 f0 01             	xor    eax,0x1
   19b7b:	84 c0                	test   al,al
   19b7d:	74 2a                	je     19ba9 <mpFindTables+0xa0>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:49
            {
#ifndef DEBUG_NONE
                 if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
   19b7f:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   19b84:	25 00 08 00 00       	and    eax,0x800
   19b89:	85 c0                	test   eax,eax
   19b8b:	74 15                	je     19ba2 <mpFindTables+0x99>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:50
                    printd(DEBUG_MP,"MP tables not found, MP not allowed, proceeding as single processor.\n");
   19b8d:	83 ec 08             	sub    esp,0x8
   19b90:	68 28 30 08 00       	push   0x83028
   19b95:	68 00 08 00 00       	push   0x800
   19b9a:	e8 b4 d4 00 00       	call   27053 <printd>
   19b9f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:52
#endif
                return false;
   19ba2:	b8 00 00 00 00       	mov    eax,0x0
   19ba7:	eb 38                	jmp    19be1 <mpFindTables+0xd8>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:55
            }
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
   19ba9:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   19bae:	25 00 08 00 00       	and    eax,0x800
   19bb3:	85 c0                	test   eax,eax
   19bb5:	74 25                	je     19bdc <mpFindTables+0xd3>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:56
        printd(DEBUG_MP,"MP tables found at 0x%08X, spec %c\n", mp, mp->specification);
   19bb7:	a1 70 65 09 00       	mov    eax,ds:0x96570
   19bbc:	0f b6 40 09          	movzx  eax,BYTE PTR [eax+0x9]
   19bc0:	0f b6 d0             	movzx  edx,al
   19bc3:	a1 70 65 09 00       	mov    eax,ds:0x96570
   19bc8:	52                   	push   edx
   19bc9:	50                   	push   eax
   19bca:	68 70 30 08 00       	push   0x83070
   19bcf:	68 00 08 00 00       	push   0x800
   19bd4:	e8 7a d4 00 00       	call   27053 <printd>
   19bd9:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:58
#endif
    return true;
   19bdc:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:60
        
}
   19be1:	c9                   	leave  
   19be2:	c3                   	ret    

00019be3 <printMPTable>:
printMPTable():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:63

void HIGH_CODE_SECTION printMPTable()
{
   19be3:	55                   	push   ebp
   19be4:	89 e5                	mov    ebp,esp
   19be6:	57                   	push   edi
   19be7:	56                   	push   esi
   19be8:	53                   	push   ebx
   19be9:	83 ec 2c             	sub    esp,0x2c
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:64
    mpConfig_t* mpptr=kMPConfigTable;
   19bec:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   19bf1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:65
    int cnt=0;
   19bf4:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:67
    
    while (mpptr->nextRecAddress!=0xFFFFFFFF)
   19bfb:	e9 d5 03 00 00       	jmp    19fd5 <printMPTable+0x3f2>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:69
    {
        switch (mpptr->recType)
   19c00:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19c03:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   19c06:	83 f8 04             	cmp    eax,0x4
   19c09:	0f 87 d7 03 00 00    	ja     19fe6 <printMPTable+0x403>
   19c0f:	8b 04 85 d8 31 08 00 	mov    eax,DWORD PTR [eax*4+0x831d8]
   19c16:	ff e0                	jmp    eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:72
        {
            case CPU:
                printk("CPU: APICId=%u, Enabled=%s, %s\n", mpptr->cpu.apicid, (mpptr->cpu.cpuflag&0x1)?"yes":"no", (mpptr->cpu.cpuflag&0x2)?"BSP":"");
   19c18:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19c1b:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   19c1f:	0f b6 c0             	movzx  eax,al
   19c22:	83 e0 02             	and    eax,0x2
   19c25:	85 c0                	test   eax,eax
   19c27:	74 07                	je     19c30 <printMPTable+0x4d>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:72 (discriminator 1)
   19c29:	b9 94 30 08 00       	mov    ecx,0x83094
   19c2e:	eb 05                	jmp    19c35 <printMPTable+0x52>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:72 (discriminator 2)
   19c30:	b9 98 30 08 00       	mov    ecx,0x83098
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:72 (discriminator 4)
   19c35:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19c38:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   19c3c:	0f b6 c0             	movzx  eax,al
   19c3f:	83 e0 01             	and    eax,0x1
   19c42:	85 c0                	test   eax,eax
   19c44:	74 07                	je     19c4d <printMPTable+0x6a>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:72 (discriminator 5)
   19c46:	ba 99 30 08 00       	mov    edx,0x83099
   19c4b:	eb 05                	jmp    19c52 <printMPTable+0x6f>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:72 (discriminator 6)
   19c4d:	ba 9d 30 08 00       	mov    edx,0x8309d
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:72 (discriminator 8)
   19c52:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19c55:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   19c59:	0f b6 c0             	movzx  eax,al
   19c5c:	51                   	push   ecx
   19c5d:	52                   	push   edx
   19c5e:	50                   	push   eax
   19c5f:	68 a0 30 08 00       	push   0x830a0
   19c64:	e8 ca d3 00 00       	call   27033 <printk>
   19c69:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:73 (discriminator 8)
                break;
   19c6c:	e9 16 03 00 00       	jmp    19f87 <printMPTable+0x3a4>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:75
            case BUS:
                printk("BUS: ID=%u, BusType=%c%c%c%c%c%c, Type=%c\n", mpptr->bus.busid, mpptr->bus.bustype[0], mpptr->bus.bustype[1], mpptr->bus.bustype[2], mpptr->bus.bustype[3], mpptr->bus.bustype[4], mpptr->bus.bustype[5], mpptr->bus.type );
   19c71:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19c74:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   19c77:	0f b6 c8             	movzx  ecx,al
   19c7a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19c7d:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
   19c81:	0f b6 c0             	movzx  eax,al
   19c84:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
   19c87:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19c8a:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
   19c8e:	0f b6 f0             	movzx  esi,al
   19c91:	89 75 d0             	mov    DWORD PTR [ebp-0x30],esi
   19c94:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19c97:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
   19c9b:	0f b6 f8             	movzx  edi,al
   19c9e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19ca1:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
   19ca5:	0f b6 f0             	movzx  esi,al
   19ca8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19cab:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   19caf:	0f b6 d8             	movzx  ebx,al
   19cb2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19cb5:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   19cb9:	0f b6 d0             	movzx  edx,al
   19cbc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19cbf:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   19cc3:	0f b6 c0             	movzx  eax,al
   19cc6:	83 ec 0c             	sub    esp,0xc
   19cc9:	51                   	push   ecx
   19cca:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   19ccd:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   19cd0:	57                   	push   edi
   19cd1:	56                   	push   esi
   19cd2:	53                   	push   ebx
   19cd3:	52                   	push   edx
   19cd4:	50                   	push   eax
   19cd5:	68 c0 30 08 00       	push   0x830c0
   19cda:	e8 54 d3 00 00       	call   27033 <printk>
   19cdf:	83 c4 30             	add    esp,0x30
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:76
                break;
   19ce2:	e9 a0 02 00 00       	jmp    19f87 <printMPTable+0x3a4>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:78
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
   19ce7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19cea:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   19cee:	0f b6 c0             	movzx  eax,al
   19cf1:	83 e0 01             	and    eax,0x1
   19cf4:	85 c0                	test   eax,eax
   19cf6:	74 07                	je     19cff <printMPTable+0x11c>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:78 (discriminator 1)
   19cf8:	b9 99 30 08 00       	mov    ecx,0x83099
   19cfd:	eb 05                	jmp    19d04 <printMPTable+0x121>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:78 (discriminator 2)
   19cff:	b9 9d 30 08 00       	mov    ecx,0x8309d
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:78 (discriminator 4)
   19d04:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d07:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   19d0a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d0d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   19d11:	0f b6 c0             	movzx  eax,al
   19d14:	51                   	push   ecx
   19d15:	52                   	push   edx
   19d16:	50                   	push   eax
   19d17:	68 ec 30 08 00       	push   0x830ec
   19d1c:	e8 12 d3 00 00       	call   27033 <printk>
   19d21:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:79 (discriminator 4)
                break;
   19d24:	e9 5e 02 00 00       	jmp    19f87 <printMPTable+0x3a4>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   19d29:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d2c:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19d30:	0f b6 c0             	movzx  eax,al
   19d33:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   19d36:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d39:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19d3d:	0f b6 f8             	movzx  edi,al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   19d40:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d43:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19d47:	0f b6 f0             	movzx  esi,al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   19d4a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d4d:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19d51:	0f b6 d8             	movzx  ebx,al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:90
                            :mpptr->irqSrc.irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
   19d54:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d57:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19d5b:	0f b7 c0             	movzx  eax,ax
   19d5e:	83 e0 0c             	and    eax,0xc
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19d61:	85 c0                	test   eax,eax
   19d63:	74 39                	je     19d9e <printMPTable+0x1bb>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:91
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
   19d65:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d68:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19d6c:	0f b7 c0             	movzx  eax,ax
   19d6f:	83 e0 0c             	and    eax,0xc
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:92
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
   19d72:	83 f8 04             	cmp    eax,0x4
   19d75:	74 20                	je     19d97 <printMPTable+0x1b4>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:92 (discriminator 1)
   19d77:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d7a:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19d7e:	0f b7 c0             	movzx  eax,ax
   19d81:	83 e0 0c             	and    eax,0xc
   19d84:	83 f8 08             	cmp    eax,0x8
   19d87:	75 07                	jne    19d90 <printMPTable+0x1ad>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:92 (discriminator 3)
   19d89:	b9 18 31 08 00       	mov    ecx,0x83118
   19d8e:	eb 13                	jmp    19da3 <printMPTable+0x1c0>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:92 (discriminator 4)
   19d90:	b9 1a 31 08 00       	mov    ecx,0x8311a
   19d95:	eb 0c                	jmp    19da3 <printMPTable+0x1c0>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:92 (discriminator 2)
   19d97:	b9 1c 31 08 00       	mov    ecx,0x8311c
   19d9c:	eb 05                	jmp    19da3 <printMPTable+0x1c0>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:81 (discriminator 1)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19d9e:	b9 21 31 08 00       	mov    ecx,0x83121
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:87 (discriminator 3)
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
                            :mpptr->irqSrc.irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
   19da3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19da6:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19daa:	0f b7 c0             	movzx  eax,ax
   19dad:	83 e0 03             	and    eax,0x3
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:81 (discriminator 3)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19db0:	85 c0                	test   eax,eax
   19db2:	74 39                	je     19ded <printMPTable+0x20a>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:88
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
                            :mpptr->irqSrc.irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
   19db4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19db7:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19dbb:	0f b7 c0             	movzx  eax,ax
   19dbe:	83 e0 03             	and    eax,0x3
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:89
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   19dc1:	83 f8 01             	cmp    eax,0x1
   19dc4:	74 20                	je     19de6 <printMPTable+0x203>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:89 (discriminator 1)
   19dc6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19dc9:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19dcd:	0f b7 c0             	movzx  eax,ax
   19dd0:	83 e0 03             	and    eax,0x3
   19dd3:	83 f8 02             	cmp    eax,0x2
   19dd6:	75 07                	jne    19ddf <printMPTable+0x1fc>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:89 (discriminator 3)
   19dd8:	ba 23 31 08 00       	mov    edx,0x83123
   19ddd:	eb 13                	jmp    19df2 <printMPTable+0x20f>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:89 (discriminator 4)
   19ddf:	ba 27 31 08 00       	mov    edx,0x83127
   19de4:	eb 0c                	jmp    19df2 <printMPTable+0x20f>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:89 (discriminator 2)
   19de6:	ba 2d 31 08 00       	mov    edx,0x8312d
   19deb:	eb 05                	jmp    19df2 <printMPTable+0x20f>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:81 (discriminator 4)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19ded:	ba 30 31 08 00       	mov    edx,0x83130
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:82 (discriminator 6)
                        mpptr->irqSrc.irqtype==0?"INT"                      
   19df2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19df5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:81 (discriminator 6)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19df9:	84 c0                	test   al,al
   19dfb:	74 3d                	je     19e3a <printMPTable+0x257>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:83
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
   19dfd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19e00:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:84
                            :mpptr->irqSrc.irqtype==2?"SMI"
   19e04:	3c 01                	cmp    al,0x1
   19e06:	74 2b                	je     19e33 <printMPTable+0x250>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:84 (discriminator 1)
   19e08:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19e0b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:85 (discriminator 1)
                            :mpptr->irqSrc.irqtype==3?"Ext"
   19e0f:	3c 02                	cmp    al,0x2
   19e11:	74 19                	je     19e2c <printMPTable+0x249>
   19e13:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19e16:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:86 (discriminator 1)
                            :"unk",                                 //iType
   19e1a:	3c 03                	cmp    al,0x3
   19e1c:	75 07                	jne    19e25 <printMPTable+0x242>
   19e1e:	b8 33 31 08 00       	mov    eax,0x83133
   19e23:	eb 1a                	jmp    19e3f <printMPTable+0x25c>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:86 (discriminator 2)
   19e25:	b8 37 31 08 00       	mov    eax,0x83137
   19e2a:	eb 13                	jmp    19e3f <printMPTable+0x25c>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:85 (discriminator 2)
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
                            :mpptr->irqSrc.irqtype==3?"Ext"
   19e2c:	b8 3b 31 08 00       	mov    eax,0x8313b
   19e31:	eb 0c                	jmp    19e3f <printMPTable+0x25c>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:84 (discriminator 2)
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
   19e33:	b8 3f 31 08 00       	mov    eax,0x8313f
   19e38:	eb 05                	jmp    19e3f <printMPTable+0x25c>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:81 (discriminator 7)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19e3a:	b8 43 31 08 00       	mov    eax,0x83143
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:81 (discriminator 9)
   19e3f:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   19e42:	57                   	push   edi
   19e43:	56                   	push   esi
   19e44:	53                   	push   ebx
   19e45:	51                   	push   ecx
   19e46:	52                   	push   edx
   19e47:	50                   	push   eax
   19e48:	68 48 31 08 00       	push   0x83148
   19e4d:	e8 e1 d1 00 00       	call   27033 <printk>
   19e52:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:94 (discriminator 9)
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
   19e55:	e9 2d 01 00 00       	jmp    19f87 <printMPTable+0x3a4>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   19e5a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19e5d:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19e61:	0f b6 c0             	movzx  eax,al
   19e64:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   19e67:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19e6a:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19e6e:	0f b6 f8             	movzx  edi,al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   19e71:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19e74:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19e78:	0f b6 f0             	movzx  esi,al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   19e7b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19e7e:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19e82:	0f b6 d8             	movzx  ebx,al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:105
                            :mpptr->lintSrc.irqtype==3?"Ext"
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
   19e85:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19e88:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19e8c:	0f b7 c0             	movzx  eax,ax
   19e8f:	83 e0 0c             	and    eax,0xc
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19e92:	85 c0                	test   eax,eax
   19e94:	74 39                	je     19ecf <printMPTable+0x2ec>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:106
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
   19e96:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19e99:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19e9d:	0f b7 c0             	movzx  eax,ax
   19ea0:	83 e0 0c             	and    eax,0xc
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:107
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
   19ea3:	83 f8 04             	cmp    eax,0x4
   19ea6:	74 20                	je     19ec8 <printMPTable+0x2e5>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:107 (discriminator 1)
   19ea8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19eab:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19eaf:	0f b7 c0             	movzx  eax,ax
   19eb2:	83 e0 0c             	and    eax,0xc
   19eb5:	83 f8 08             	cmp    eax,0x8
   19eb8:	75 07                	jne    19ec1 <printMPTable+0x2de>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:107 (discriminator 3)
   19eba:	b9 18 31 08 00       	mov    ecx,0x83118
   19ebf:	eb 13                	jmp    19ed4 <printMPTable+0x2f1>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:107 (discriminator 4)
   19ec1:	b9 1a 31 08 00       	mov    ecx,0x8311a
   19ec6:	eb 0c                	jmp    19ed4 <printMPTable+0x2f1>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:107 (discriminator 2)
   19ec8:	b9 1c 31 08 00       	mov    ecx,0x8311c
   19ecd:	eb 05                	jmp    19ed4 <printMPTable+0x2f1>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:96 (discriminator 1)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19ecf:	b9 21 31 08 00       	mov    ecx,0x83121
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:102 (discriminator 3)
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
                            :mpptr->lintSrc.irqtype==3?"Ext"
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
   19ed4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19ed7:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19edb:	0f b7 c0             	movzx  eax,ax
   19ede:	83 e0 03             	and    eax,0x3
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:96 (discriminator 3)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19ee1:	85 c0                	test   eax,eax
   19ee3:	74 39                	je     19f1e <printMPTable+0x33b>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:103
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
                            :mpptr->lintSrc.irqtype==3?"Ext"
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
   19ee5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19ee8:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19eec:	0f b7 c0             	movzx  eax,ax
   19eef:	83 e0 03             	and    eax,0x3
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:104
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   19ef2:	83 f8 01             	cmp    eax,0x1
   19ef5:	74 20                	je     19f17 <printMPTable+0x334>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:104 (discriminator 1)
   19ef7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19efa:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19efe:	0f b7 c0             	movzx  eax,ax
   19f01:	83 e0 03             	and    eax,0x3
   19f04:	83 f8 02             	cmp    eax,0x2
   19f07:	75 07                	jne    19f10 <printMPTable+0x32d>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:104 (discriminator 3)
   19f09:	ba 23 31 08 00       	mov    edx,0x83123
   19f0e:	eb 13                	jmp    19f23 <printMPTable+0x340>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:104 (discriminator 4)
   19f10:	ba 27 31 08 00       	mov    edx,0x83127
   19f15:	eb 0c                	jmp    19f23 <printMPTable+0x340>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:104 (discriminator 2)
   19f17:	ba 2d 31 08 00       	mov    edx,0x8312d
   19f1c:	eb 05                	jmp    19f23 <printMPTable+0x340>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:96 (discriminator 4)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19f1e:	ba 30 31 08 00       	mov    edx,0x83130
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:97 (discriminator 6)
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
   19f23:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f26:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:96 (discriminator 6)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19f2a:	84 c0                	test   al,al
   19f2c:	74 3d                	je     19f6b <printMPTable+0x388>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:98
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
   19f2e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f31:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:99
                            :mpptr->lintSrc.irqtype==2?"SMI"
   19f35:	3c 01                	cmp    al,0x1
   19f37:	74 2b                	je     19f64 <printMPTable+0x381>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:99 (discriminator 1)
   19f39:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f3c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:100 (discriminator 1)
                            :mpptr->lintSrc.irqtype==3?"Ext"
   19f40:	3c 02                	cmp    al,0x2
   19f42:	74 19                	je     19f5d <printMPTable+0x37a>
   19f44:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f47:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:101 (discriminator 1)
                            :"unk", //iType
   19f4b:	3c 03                	cmp    al,0x3
   19f4d:	75 07                	jne    19f56 <printMPTable+0x373>
   19f4f:	b8 33 31 08 00       	mov    eax,0x83133
   19f54:	eb 1a                	jmp    19f70 <printMPTable+0x38d>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:101 (discriminator 2)
   19f56:	b8 37 31 08 00       	mov    eax,0x83137
   19f5b:	eb 13                	jmp    19f70 <printMPTable+0x38d>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:100 (discriminator 2)
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
                            :mpptr->lintSrc.irqtype==3?"Ext"
   19f5d:	b8 3b 31 08 00       	mov    eax,0x8313b
   19f62:	eb 0c                	jmp    19f70 <printMPTable+0x38d>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:99 (discriminator 2)
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
   19f64:	b8 3f 31 08 00       	mov    eax,0x8313f
   19f69:	eb 05                	jmp    19f70 <printMPTable+0x38d>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:96 (discriminator 7)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19f6b:	b8 43 31 08 00       	mov    eax,0x83143
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:96 (discriminator 9)
   19f70:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   19f73:	57                   	push   edi
   19f74:	56                   	push   esi
   19f75:	53                   	push   ebx
   19f76:	51                   	push   ecx
   19f77:	52                   	push   edx
   19f78:	50                   	push   eax
   19f79:	68 80 31 08 00       	push   0x83180
   19f7e:	e8 b0 d0 00 00       	call   27033 <printk>
   19f83:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:109 (discriminator 9)
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
                break;
   19f86:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:113
            default:
                return;
        }
        mpptr++;
   19f87:	83 45 e4 20          	add    DWORD PTR [ebp-0x1c],0x20
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:114
        cnt++;
   19f8b:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:115
        if (cnt>0 && ((cnt+2)%cursorGetMaxY())==0)
   19f8f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   19f93:	7e 40                	jle    19fd5 <printMPTable+0x3f2>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:115 (discriminator 1)
   19f95:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   19f98:	8d 58 02             	lea    ebx,[eax+0x2]
   19f9b:	e8 77 df ff ff       	call   17f17 <cursorGetMaxY>
   19fa0:	89 c1                	mov    ecx,eax
   19fa2:	89 d8                	mov    eax,ebx
   19fa4:	99                   	cdq    
   19fa5:	f7 f9                	idiv   ecx
   19fa7:	89 d0                	mov    eax,edx
   19fa9:	85 c0                	test   eax,eax
   19fab:	75 28                	jne    19fd5 <printMPTable+0x3f2>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:117
        {
            puts("Paused, press a key to continue");
   19fad:	83 ec 0c             	sub    esp,0xc
   19fb0:	68 b8 31 08 00       	push   0x831b8
   19fb5:	e8 1c e0 ff ff       	call   17fd6 <puts>
   19fba:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:118
            waitForKeyboardKey();
   19fbd:	e8 90 72 ff ff       	call   11252 <waitForKeyboardKey>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:119
            cursorMoveTo(0,cursorGetPosY());
   19fc2:	e8 80 df ff ff       	call   17f47 <cursorGetPosY>
   19fc7:	83 ec 08             	sub    esp,0x8
   19fca:	50                   	push   eax
   19fcb:	6a 00                	push   0x0
   19fcd:	e8 d5 de ff ff       	call   17ea7 <cursorMoveTo>
   19fd2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:67
void HIGH_CODE_SECTION printMPTable()
{
    mpConfig_t* mpptr=kMPConfigTable;
    int cnt=0;
    
    while (mpptr->nextRecAddress!=0xFFFFFFFF)
   19fd5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19fd8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   19fdb:	83 f8 ff             	cmp    eax,0xffffffff
   19fde:	0f 85 1c fc ff ff    	jne    19c00 <printMPTable+0x1d>
   19fe4:	eb 01                	jmp    19fe7 <printMPTable+0x404>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:111
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
                break;
            default:
                return;
   19fe6:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:123
            waitForKeyboardKey();
            cursorMoveTo(0,cursorGetPosY());
        }

    }
}
   19fe7:	8d 65 f4             	lea    esp,[ebp-0xc]
   19fea:	5b                   	pop    ebx
   19feb:	5e                   	pop    esi
   19fec:	5f                   	pop    edi
   19fed:	5d                   	pop    ebp
   19fee:	c3                   	ret    

00019fef <mpInit>:
mpInit():
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:126

unsigned HIGH_CODE_SECTION mpInit()
{
   19fef:	55                   	push   ebp
   19ff0:	89 e5                	mov    ebp,esp
   19ff2:	57                   	push   edi
   19ff3:	56                   	push   esi
   19ff4:	53                   	push   ebx
   19ff5:	83 ec 5c             	sub    esp,0x5c
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:129
    uint8_t* recPtr;
    char lTempString[15];
    memset(lTempString, 0, 15);
   19ff8:	83 ec 04             	sub    esp,0x4
   19ffb:	6a 0f                	push   0xf
   19ffd:	6a 00                	push   0x0
   19fff:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a002:	50                   	push   eax
   1a003:	e8 a5 af 00 00       	call   24fad <memset>
   1a008:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:130
    mpFindTables();
   1a00b:	e8 f9 fa ff ff       	call   19b09 <mpFindTables>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:131
    printd(DEBUG_MP,"MP table found @ 0x%08X, sig=%c%c%c%c, features=%u/%u/%u/%u/%u, length=%u\n", mp, mp->signature[0], mp->signature[1], mp->signature[2], mp->signature[3], mp->feature1, mp->feature2, mp->feature3, mp->feature4, mp->feature5, mp->length);
   1a010:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a015:	0f b6 40 08          	movzx  eax,BYTE PTR [eax+0x8]
   1a019:	0f b6 f0             	movzx  esi,al
   1a01c:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a021:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   1a025:	0f b6 f8             	movzx  edi,al
   1a028:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a02d:	0f b6 40 0e          	movzx  eax,BYTE PTR [eax+0xe]
   1a031:	0f b6 c0             	movzx  eax,al
   1a034:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
   1a037:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a03c:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
   1a040:	0f b6 d8             	movzx  ebx,al
   1a043:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
   1a046:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a04b:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
   1a04f:	0f b6 c8             	movzx  ecx,al
   1a052:	89 4d ac             	mov    DWORD PTR [ebp-0x54],ecx
   1a055:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a05a:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1a05e:	0f b6 d0             	movzx  edx,al
   1a061:	89 55 a8             	mov    DWORD PTR [ebp-0x58],edx
   1a064:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a069:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a06d:	0f be c0             	movsx  eax,al
   1a070:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
   1a073:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a078:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1a07c:	0f be d8             	movsx  ebx,al
   1a07f:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a084:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a088:	0f be c8             	movsx  ecx,al
   1a08b:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a090:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a093:	0f be d0             	movsx  edx,al
   1a096:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a09b:	83 ec 0c             	sub    esp,0xc
   1a09e:	56                   	push   esi
   1a09f:	57                   	push   edi
   1a0a0:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1a0a3:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
   1a0a6:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
   1a0a9:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
   1a0ac:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
   1a0af:	53                   	push   ebx
   1a0b0:	51                   	push   ecx
   1a0b1:	52                   	push   edx
   1a0b2:	50                   	push   eax
   1a0b3:	68 ec 31 08 00       	push   0x831ec
   1a0b8:	68 00 08 00 00       	push   0x800
   1a0bd:	e8 91 cf 00 00       	call   27053 <printd>
   1a0c2:	83 c4 40             	add    esp,0x40
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:132
    if (mp->feature1!=0)
   1a0c5:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a0ca:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1a0ce:	84 c0                	test   al,al
   1a0d0:	74 27                	je     1a0f9 <mpInit+0x10a>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:134
    {
        printk("NOTE: need to implement Intel MP default configurations (%u)",mp->feature1);
   1a0d2:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a0d7:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1a0db:	0f b6 c0             	movzx  eax,al
   1a0de:	83 ec 08             	sub    esp,0x8
   1a0e1:	50                   	push   eax
   1a0e2:	68 38 32 08 00       	push   0x83238
   1a0e7:	e8 47 cf 00 00       	call   27033 <printk>
   1a0ec:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:135
        return false;
   1a0ef:	b8 00 00 00 00       	mov    eax,0x0
   1a0f4:	e9 12 0a 00 00       	jmp    1ab0b <mpInit+0xb1c>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:137
    }
    mc=(struct mpc_table*)mp->physptr;
   1a0f9:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a0fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1a101:	a3 6c 65 09 00       	mov    ds:0x9656c,eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:138
    printd(DEBUG_MP,"MC table found @ 0x%08X, sig=%c%c%c%c, length=%u, lapic=0x%08X, OEM tbl=0x%08X\n", mc, mc->signature[0], mc->signature[1], mc->signature[2], mc->signature[3], mc->length, mc->lapic, mc->oemptr);
   1a106:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a10b:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
   1a10e:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a113:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   1a116:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
   1a119:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a11e:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
   1a122:	0f b7 f0             	movzx  esi,ax
   1a125:	89 75 b0             	mov    DWORD PTR [ebp-0x50],esi
   1a128:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a12d:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a131:	0f be f8             	movsx  edi,al
   1a134:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a139:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1a13d:	0f be f0             	movsx  esi,al
   1a140:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a145:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a149:	0f be d8             	movsx  ebx,al
   1a14c:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a151:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a154:	0f be d0             	movsx  edx,al
   1a157:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a15c:	83 ec 08             	sub    esp,0x8
   1a15f:	51                   	push   ecx
   1a160:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1a163:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
   1a166:	57                   	push   edi
   1a167:	56                   	push   esi
   1a168:	53                   	push   ebx
   1a169:	52                   	push   edx
   1a16a:	50                   	push   eax
   1a16b:	68 78 32 08 00       	push   0x83278
   1a170:	68 00 08 00 00       	push   0x800
   1a175:	e8 d9 ce 00 00       	call   27053 <printd>
   1a17a:	83 c4 30             	add    esp,0x30
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:139
    memcpy(lTempString, mc->oem,4);
   1a17d:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a182:	83 c0 08             	add    eax,0x8
   1a185:	83 ec 04             	sub    esp,0x4
   1a188:	6a 04                	push   0x4
   1a18a:	50                   	push   eax
   1a18b:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a18e:	50                   	push   eax
   1a18f:	e8 0c b8 00 00       	call   259a0 <memcpy>
   1a194:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:140
    printd(DEBUG_MP,"\tMPC OEM '%s'", lTempString);
   1a197:	83 ec 04             	sub    esp,0x4
   1a19a:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a19d:	50                   	push   eax
   1a19e:	68 c8 32 08 00       	push   0x832c8
   1a1a3:	68 00 08 00 00       	push   0x800
   1a1a8:	e8 a6 ce 00 00       	call   27053 <printd>
   1a1ad:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:141
    memset(lTempString, 0, 15);
   1a1b0:	83 ec 04             	sub    esp,0x4
   1a1b3:	6a 0f                	push   0xf
   1a1b5:	6a 00                	push   0x0
   1a1b7:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a1ba:	50                   	push   eax
   1a1bb:	e8 ed ad 00 00       	call   24fad <memset>
   1a1c0:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:142
        memcpy(lTempString, mc->productid,12);
   1a1c3:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a1c8:	83 c0 10             	add    eax,0x10
   1a1cb:	83 ec 04             	sub    esp,0x4
   1a1ce:	6a 0c                	push   0xc
   1a1d0:	50                   	push   eax
   1a1d1:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a1d4:	50                   	push   eax
   1a1d5:	e8 c6 b7 00 00       	call   259a0 <memcpy>
   1a1da:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:143
    printd(DEBUG_MP,", product '%s': %s\n", lTempString);
   1a1dd:	83 ec 04             	sub    esp,0x4
   1a1e0:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a1e3:	50                   	push   eax
   1a1e4:	68 d6 32 08 00       	push   0x832d6
   1a1e9:	68 00 08 00 00       	push   0x800
   1a1ee:	e8 60 ce 00 00       	call   27053 <printd>
   1a1f3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:144
    recPtr=(uint8_t*)mp->physptr+sizeof(struct mpc_table);
   1a1f6:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a1fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1a1fe:	83 c0 2c             	add    eax,0x2c
   1a201:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:145
    printd(DEBUG_MP,"Parsing MC %u table entries at 0x%08X\n", mc->count, recPtr);
   1a204:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a209:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a20d:	0f b7 c0             	movzx  eax,ax
   1a210:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a213:	50                   	push   eax
   1a214:	68 ec 32 08 00       	push   0x832ec
   1a219:	68 00 08 00 00       	push   0x800
   1a21e:	e8 30 ce 00 00       	call   27053 <printd>
   1a223:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:146
    for (int cnt=0;cnt< mc->count;cnt++)
   1a226:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   1a22d:	e9 6f 08 00 00       	jmp    1aaa1 <mpInit+0xab2>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:148
    {
        switch((int)*(uint8_t*)recPtr)
   1a232:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a235:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a238:	0f b6 c0             	movzx  eax,al
   1a23b:	83 f8 04             	cmp    eax,0x4
   1a23e:	0f 87 04 08 00 00    	ja     1aa48 <mpInit+0xa59>
   1a244:	8b 04 85 58 34 08 00 	mov    eax,DWORD PTR [eax*4+0x83458]
   1a24b:	ff e0                	jmp    eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:152
        {
            case 0:
                //TODO: Add all this info to a kernel structure
                printd(DEBUG_MP,"\tCPU:  ");
   1a24d:	83 ec 08             	sub    esp,0x8
   1a250:	68 13 33 08 00       	push   0x83313
   1a255:	68 00 08 00 00       	push   0x800
   1a25a:	e8 f4 cd 00 00       	call   27053 <printd>
   1a25f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:153
                struct mpc_cpu* cpu=(struct mpc_cpu*)recPtr;
   1a262:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a265:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:154
                memcpy(kMPConfigTable[cnt].rec,recPtr,20);
   1a268:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a26d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a270:	c1 e2 05             	shl    edx,0x5
   1a273:	01 d0                	add    eax,edx
   1a275:	83 ec 04             	sub    esp,0x4
   1a278:	6a 14                	push   0x14
   1a27a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a27d:	50                   	push   eax
   1a27e:	e8 1d b7 00 00       	call   259a0 <memcpy>
   1a283:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:155
                if (cnt==0)
   1a286:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a28a:	75 16                	jne    1a2a2 <mpInit+0x2b3>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:156
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a28c:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a291:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a294:	c1 e2 05             	shl    edx,0x5
   1a297:	01 d0                	add    eax,edx
   1a299:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a2a0:	eb 72                	jmp    1a314 <mpInit+0x325>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:157
                else if (cnt==mc->count-1)
   1a2a2:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a2a7:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a2ab:	0f b7 c0             	movzx  eax,ax
   1a2ae:	83 e8 01             	sub    eax,0x1
   1a2b1:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a2b4:	75 16                	jne    1a2cc <mpInit+0x2dd>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:158
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a2b6:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a2bb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a2be:	c1 e2 05             	shl    edx,0x5
   1a2c1:	01 d0                	add    eax,edx
   1a2c3:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a2ca:	eb 48                	jmp    1a314 <mpInit+0x325>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:161
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a2cc:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a2d1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a2d4:	c1 e2 05             	shl    edx,0x5
   1a2d7:	01 d0                	add    eax,edx
   1a2d9:	8b 15 40 03 a0 00    	mov    edx,DWORD PTR ds:0xa00340
   1a2df:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a2e2:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a2e8:	c1 e1 05             	shl    ecx,0x5
   1a2eb:	01 ca                	add    edx,ecx
   1a2ed:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:162
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a2f0:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a2f5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a2f8:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1a2fe:	c1 e2 05             	shl    edx,0x5
   1a301:	01 d0                	add    eax,edx
   1a303:	8b 15 40 03 a0 00    	mov    edx,DWORD PTR ds:0xa00340
   1a309:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a30c:	c1 e1 05             	shl    ecx,0x5
   1a30f:	01 ca                	add    edx,ecx
   1a311:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:164
                }
                kMPConfigTable[cnt].recType=CPU;
   1a314:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a319:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a31c:	c1 e2 05             	shl    edx,0x5
   1a31f:	01 d0                	add    eax,edx
   1a321:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:165
                printd(DEBUG_MP,"APICId=%u, Enabled=%s, %s\n", cpu->apicid, (cpu->cpuflag&0x1)?"yes":"no", (cpu->cpuflag&0x2)?"BSP":"");
   1a328:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1a32b:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a32f:	0f b6 c0             	movzx  eax,al
   1a332:	83 e0 02             	and    eax,0x2
   1a335:	85 c0                	test   eax,eax
   1a337:	74 07                	je     1a340 <mpInit+0x351>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:165 (discriminator 1)
   1a339:	b9 94 30 08 00       	mov    ecx,0x83094
   1a33e:	eb 05                	jmp    1a345 <mpInit+0x356>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:165 (discriminator 2)
   1a340:	b9 98 30 08 00       	mov    ecx,0x83098
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:165 (discriminator 4)
   1a345:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1a348:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a34c:	0f b6 c0             	movzx  eax,al
   1a34f:	83 e0 01             	and    eax,0x1
   1a352:	85 c0                	test   eax,eax
   1a354:	74 07                	je     1a35d <mpInit+0x36e>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:165 (discriminator 5)
   1a356:	ba 99 30 08 00       	mov    edx,0x83099
   1a35b:	eb 05                	jmp    1a362 <mpInit+0x373>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:165 (discriminator 6)
   1a35d:	ba 9d 30 08 00       	mov    edx,0x8309d
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:165 (discriminator 8)
   1a362:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1a365:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a369:	0f b6 c0             	movzx  eax,al
   1a36c:	83 ec 0c             	sub    esp,0xc
   1a36f:	51                   	push   ecx
   1a370:	52                   	push   edx
   1a371:	50                   	push   eax
   1a372:	68 1b 33 08 00       	push   0x8331b
   1a377:	68 00 08 00 00       	push   0x800
   1a37c:	e8 d2 cc 00 00       	call   27053 <printd>
   1a381:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:166 (discriminator 8)
                recPtr+=20;
   1a384:	83 45 e4 14          	add    DWORD PTR [ebp-0x1c],0x14
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:167 (discriminator 8)
                break;
   1a388:	e9 df 06 00 00       	jmp    1aa6c <mpInit+0xa7d>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:169
            case 1:
                printd(DEBUG_MP,"\tBus:  ");
   1a38d:	83 ec 08             	sub    esp,0x8
   1a390:	68 36 33 08 00       	push   0x83336
   1a395:	68 00 08 00 00       	push   0x800
   1a39a:	e8 b4 cc 00 00       	call   27053 <printd>
   1a39f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:170
                struct mpc_bus* bus=(struct mpc_bus*)recPtr;
   1a3a2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a3a5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:171
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1a3a8:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a3ad:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a3b0:	c1 e2 05             	shl    edx,0x5
   1a3b3:	01 d0                	add    eax,edx
   1a3b5:	83 ec 04             	sub    esp,0x4
   1a3b8:	6a 08                	push   0x8
   1a3ba:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a3bd:	50                   	push   eax
   1a3be:	e8 dd b5 00 00       	call   259a0 <memcpy>
   1a3c3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:172
                if (cnt==0)
   1a3c6:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a3ca:	75 16                	jne    1a3e2 <mpInit+0x3f3>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:173
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a3cc:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a3d1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a3d4:	c1 e2 05             	shl    edx,0x5
   1a3d7:	01 d0                	add    eax,edx
   1a3d9:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a3e0:	eb 72                	jmp    1a454 <mpInit+0x465>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:174
                else if (cnt==mc->count-1)
   1a3e2:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a3e7:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a3eb:	0f b7 c0             	movzx  eax,ax
   1a3ee:	83 e8 01             	sub    eax,0x1
   1a3f1:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a3f4:	75 16                	jne    1a40c <mpInit+0x41d>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:175
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a3f6:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a3fb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a3fe:	c1 e2 05             	shl    edx,0x5
   1a401:	01 d0                	add    eax,edx
   1a403:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a40a:	eb 48                	jmp    1a454 <mpInit+0x465>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:178
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a40c:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a411:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a414:	c1 e2 05             	shl    edx,0x5
   1a417:	01 d0                	add    eax,edx
   1a419:	8b 15 40 03 a0 00    	mov    edx,DWORD PTR ds:0xa00340
   1a41f:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a422:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a428:	c1 e1 05             	shl    ecx,0x5
   1a42b:	01 ca                	add    edx,ecx
   1a42d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:179
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a430:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a435:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a438:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1a43e:	c1 e2 05             	shl    edx,0x5
   1a441:	01 d0                	add    eax,edx
   1a443:	8b 15 40 03 a0 00    	mov    edx,DWORD PTR ds:0xa00340
   1a449:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a44c:	c1 e1 05             	shl    ecx,0x5
   1a44f:	01 ca                	add    edx,ecx
   1a451:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:181
                }
                recPtr+=8;
   1a454:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:182
                kMPConfigTable[cnt].recType=BUS;
   1a458:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a45d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a460:	c1 e2 05             	shl    edx,0x5
   1a463:	01 d0                	add    eax,edx
   1a465:	c7 40 14 01 00 00 00 	mov    DWORD PTR [eax+0x14],0x1
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:183
                printd(DEBUG_MP,"ID=%u, BusType=%c%c%c%c%c%c, Type=%c\n", bus->busid, bus->bustype[0], bus->bustype[1], bus->bustype[2], bus->bustype[3], bus->bustype[4], bus->bustype[5], bus->type );
   1a46c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a46f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a472:	0f b6 c8             	movzx  ecx,al
   1a475:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a478:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
   1a47c:	0f b6 c0             	movzx  eax,al
   1a47f:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
   1a482:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a485:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
   1a489:	0f b6 f8             	movzx  edi,al
   1a48c:	89 7d b0             	mov    DWORD PTR [ebp-0x50],edi
   1a48f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a492:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
   1a496:	0f b6 f8             	movzx  edi,al
   1a499:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a49c:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
   1a4a0:	0f b6 f0             	movzx  esi,al
   1a4a3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a4a6:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a4aa:	0f b6 d8             	movzx  ebx,al
   1a4ad:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a4b0:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1a4b4:	0f b6 d0             	movzx  edx,al
   1a4b7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a4ba:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a4be:	0f b6 c0             	movzx  eax,al
   1a4c1:	83 ec 08             	sub    esp,0x8
   1a4c4:	51                   	push   ecx
   1a4c5:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1a4c8:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
   1a4cb:	57                   	push   edi
   1a4cc:	56                   	push   esi
   1a4cd:	53                   	push   ebx
   1a4ce:	52                   	push   edx
   1a4cf:	50                   	push   eax
   1a4d0:	68 40 33 08 00       	push   0x83340
   1a4d5:	68 00 08 00 00       	push   0x800
   1a4da:	e8 74 cb 00 00       	call   27053 <printd>
   1a4df:	83 c4 30             	add    esp,0x30
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:184
                break;
   1a4e2:	e9 85 05 00 00       	jmp    1aa6c <mpInit+0xa7d>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:186
            case 2:
                printd(DEBUG_MP,"\tAPIC: ");
   1a4e7:	83 ec 08             	sub    esp,0x8
   1a4ea:	68 66 33 08 00       	push   0x83366
   1a4ef:	68 00 08 00 00       	push   0x800
   1a4f4:	e8 5a cb 00 00       	call   27053 <printd>
   1a4f9:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:187
                struct mpc_ioapic* apic=(struct mpc_ioapic*)recPtr;
   1a4fc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a4ff:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:188
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1a502:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a507:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a50a:	c1 e2 05             	shl    edx,0x5
   1a50d:	01 d0                	add    eax,edx
   1a50f:	83 ec 04             	sub    esp,0x4
   1a512:	6a 08                	push   0x8
   1a514:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a517:	50                   	push   eax
   1a518:	e8 83 b4 00 00       	call   259a0 <memcpy>
   1a51d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:189
                if (cnt==0)
   1a520:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a524:	75 16                	jne    1a53c <mpInit+0x54d>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:190
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a526:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a52b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a52e:	c1 e2 05             	shl    edx,0x5
   1a531:	01 d0                	add    eax,edx
   1a533:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a53a:	eb 72                	jmp    1a5ae <mpInit+0x5bf>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:191
                else if (cnt==mc->count-1)
   1a53c:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a541:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a545:	0f b7 c0             	movzx  eax,ax
   1a548:	83 e8 01             	sub    eax,0x1
   1a54b:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a54e:	75 16                	jne    1a566 <mpInit+0x577>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:192
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a550:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a555:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a558:	c1 e2 05             	shl    edx,0x5
   1a55b:	01 d0                	add    eax,edx
   1a55d:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a564:	eb 48                	jmp    1a5ae <mpInit+0x5bf>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:195
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a566:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a56b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a56e:	c1 e2 05             	shl    edx,0x5
   1a571:	01 d0                	add    eax,edx
   1a573:	8b 15 40 03 a0 00    	mov    edx,DWORD PTR ds:0xa00340
   1a579:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a57c:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a582:	c1 e1 05             	shl    ecx,0x5
   1a585:	01 ca                	add    edx,ecx
   1a587:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:196
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a58a:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a58f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a592:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1a598:	c1 e2 05             	shl    edx,0x5
   1a59b:	01 d0                	add    eax,edx
   1a59d:	8b 15 40 03 a0 00    	mov    edx,DWORD PTR ds:0xa00340
   1a5a3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a5a6:	c1 e1 05             	shl    ecx,0x5
   1a5a9:	01 ca                	add    edx,ecx
   1a5ab:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:198
                }
                kMPConfigTable[cnt].recType=IOAPIC;
   1a5ae:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a5b3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a5b6:	c1 e2 05             	shl    edx,0x5
   1a5b9:	01 d0                	add    eax,edx
   1a5bb:	c7 40 14 02 00 00 00 	mov    DWORD PTR [eax+0x14],0x2
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:199
                recPtr+=8;
   1a5c2:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:200
                printd(DEBUG_MP,"ID=%02X, Address=0x%08X, Enabled=%s\n",apic->apicid, apic->apicaddr, apic->flags&0x1?"yes":"no");
   1a5c6:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1a5c9:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a5cd:	0f b6 c0             	movzx  eax,al
   1a5d0:	83 e0 01             	and    eax,0x1
   1a5d3:	85 c0                	test   eax,eax
   1a5d5:	74 07                	je     1a5de <mpInit+0x5ef>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:200 (discriminator 1)
   1a5d7:	b9 99 30 08 00       	mov    ecx,0x83099
   1a5dc:	eb 05                	jmp    1a5e3 <mpInit+0x5f4>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:200 (discriminator 2)
   1a5de:	b9 9d 30 08 00       	mov    ecx,0x8309d
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:200 (discriminator 4)
   1a5e3:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1a5e6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1a5e9:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1a5ec:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a5f0:	0f b6 c0             	movzx  eax,al
   1a5f3:	83 ec 0c             	sub    esp,0xc
   1a5f6:	51                   	push   ecx
   1a5f7:	52                   	push   edx
   1a5f8:	50                   	push   eax
   1a5f9:	68 70 33 08 00       	push   0x83370
   1a5fe:	68 00 08 00 00       	push   0x800
   1a603:	e8 4b ca 00 00       	call   27053 <printd>
   1a608:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:201 (discriminator 4)
                kIOAPICPtr=(uintptr_t*)apic->apicaddr;
   1a60b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1a60e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1a611:	a3 3c 03 a0 00       	mov    ds:0xa0033c,eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:202 (discriminator 4)
                break;
   1a616:	e9 51 04 00 00       	jmp    1aa6c <mpInit+0xa7d>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:204
            case 3:
                printd(DEBUG_MP,"\tIRQ:  ");
   1a61b:	83 ec 08             	sub    esp,0x8
   1a61e:	68 95 33 08 00       	push   0x83395
   1a623:	68 00 08 00 00       	push   0x800
   1a628:	e8 26 ca 00 00       	call   27053 <printd>
   1a62d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:205
                struct mpc_intsrc*intr=(struct mpc_intsrc*)recPtr;
   1a630:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a633:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:206
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1a636:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a63b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a63e:	c1 e2 05             	shl    edx,0x5
   1a641:	01 d0                	add    eax,edx
   1a643:	83 ec 04             	sub    esp,0x4
   1a646:	6a 08                	push   0x8
   1a648:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a64b:	50                   	push   eax
   1a64c:	e8 4f b3 00 00       	call   259a0 <memcpy>
   1a651:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:207
                if (cnt==0)
   1a654:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a658:	75 16                	jne    1a670 <mpInit+0x681>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:208
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a65a:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a65f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a662:	c1 e2 05             	shl    edx,0x5
   1a665:	01 d0                	add    eax,edx
   1a667:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a66e:	eb 72                	jmp    1a6e2 <mpInit+0x6f3>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:209
                else if (cnt==mc->count-1)
   1a670:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a675:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a679:	0f b7 c0             	movzx  eax,ax
   1a67c:	83 e8 01             	sub    eax,0x1
   1a67f:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a682:	75 16                	jne    1a69a <mpInit+0x6ab>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:210
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a684:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a689:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a68c:	c1 e2 05             	shl    edx,0x5
   1a68f:	01 d0                	add    eax,edx
   1a691:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a698:	eb 48                	jmp    1a6e2 <mpInit+0x6f3>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:213
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a69a:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a69f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a6a2:	c1 e2 05             	shl    edx,0x5
   1a6a5:	01 d0                	add    eax,edx
   1a6a7:	8b 15 40 03 a0 00    	mov    edx,DWORD PTR ds:0xa00340
   1a6ad:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a6b0:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a6b6:	c1 e1 05             	shl    ecx,0x5
   1a6b9:	01 ca                	add    edx,ecx
   1a6bb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:214
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a6be:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a6c3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a6c6:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1a6cc:	c1 e2 05             	shl    edx,0x5
   1a6cf:	01 d0                	add    eax,edx
   1a6d1:	8b 15 40 03 a0 00    	mov    edx,DWORD PTR ds:0xa00340
   1a6d7:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a6da:	c1 e1 05             	shl    ecx,0x5
   1a6dd:	01 ca                	add    edx,ecx
   1a6df:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:216
                }
                kMPConfigTable[cnt].recType = IOINTASS;
   1a6e2:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a6e7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a6ea:	c1 e2 05             	shl    edx,0x5
   1a6ed:	01 d0                	add    eax,edx
   1a6ef:	c7 40 14 03 00 00 00 	mov    DWORD PTR [eax+0x14],0x3
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:217
                recPtr+=8;
   1a6f6:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1a6fa:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a6fd:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a701:	0f b6 c0             	movzx  eax,al
   1a704:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1a707:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a70a:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a70e:	0f b6 f8             	movzx  edi,al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1a711:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a714:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a718:	0f b6 f0             	movzx  esi,al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1a71b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a71e:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a722:	0f b6 d8             	movzx  ebx,al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:227
                            :intr->irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
   1a725:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a728:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a72c:	0f b7 c0             	movzx  eax,ax
   1a72f:	83 e0 0c             	and    eax,0xc
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a732:	85 c0                	test   eax,eax
   1a734:	74 39                	je     1a76f <mpInit+0x780>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:228
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
   1a736:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a739:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a73d:	0f b7 c0             	movzx  eax,ax
   1a740:	83 e0 0c             	and    eax,0xc
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:229
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
   1a743:	83 f8 04             	cmp    eax,0x4
   1a746:	74 20                	je     1a768 <mpInit+0x779>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:229 (discriminator 1)
   1a748:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a74b:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a74f:	0f b7 c0             	movzx  eax,ax
   1a752:	83 e0 0c             	and    eax,0xc
   1a755:	83 f8 08             	cmp    eax,0x8
   1a758:	75 07                	jne    1a761 <mpInit+0x772>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:229 (discriminator 3)
   1a75a:	b9 18 31 08 00       	mov    ecx,0x83118
   1a75f:	eb 13                	jmp    1a774 <mpInit+0x785>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:229 (discriminator 4)
   1a761:	b9 1a 31 08 00       	mov    ecx,0x8311a
   1a766:	eb 0c                	jmp    1a774 <mpInit+0x785>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:229 (discriminator 2)
   1a768:	b9 1c 31 08 00       	mov    ecx,0x8311c
   1a76d:	eb 05                	jmp    1a774 <mpInit+0x785>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:218 (discriminator 1)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a76f:	b9 21 31 08 00       	mov    ecx,0x83121
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:224 (discriminator 3)
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
                            :intr->irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
   1a774:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a777:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a77b:	0f b7 c0             	movzx  eax,ax
   1a77e:	83 e0 03             	and    eax,0x3
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:218 (discriminator 3)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a781:	85 c0                	test   eax,eax
   1a783:	74 39                	je     1a7be <mpInit+0x7cf>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:225
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
                            :intr->irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
                            :(intr->irqflag&0x3)==0x1?"AH"
   1a785:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a788:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a78c:	0f b7 c0             	movzx  eax,ax
   1a78f:	83 e0 03             	and    eax,0x3
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:226
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   1a792:	83 f8 01             	cmp    eax,0x1
   1a795:	74 20                	je     1a7b7 <mpInit+0x7c8>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:226 (discriminator 1)
   1a797:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a79a:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a79e:	0f b7 c0             	movzx  eax,ax
   1a7a1:	83 e0 03             	and    eax,0x3
   1a7a4:	83 f8 02             	cmp    eax,0x2
   1a7a7:	75 07                	jne    1a7b0 <mpInit+0x7c1>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:226 (discriminator 3)
   1a7a9:	ba 23 31 08 00       	mov    edx,0x83123
   1a7ae:	eb 13                	jmp    1a7c3 <mpInit+0x7d4>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:226 (discriminator 4)
   1a7b0:	ba 27 31 08 00       	mov    edx,0x83127
   1a7b5:	eb 0c                	jmp    1a7c3 <mpInit+0x7d4>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:226 (discriminator 2)
   1a7b7:	ba 2d 31 08 00       	mov    edx,0x8312d
   1a7bc:	eb 05                	jmp    1a7c3 <mpInit+0x7d4>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:218 (discriminator 4)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a7be:	ba 30 31 08 00       	mov    edx,0x83130
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:219 (discriminator 6)
                        intr->irqtype==0?"INT"                      
   1a7c3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a7c6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:218 (discriminator 6)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a7ca:	84 c0                	test   al,al
   1a7cc:	74 3d                	je     1a80b <mpInit+0x81c>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:220
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
   1a7ce:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a7d1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:221
                            :intr->irqtype==2?"SMI"
   1a7d5:	3c 01                	cmp    al,0x1
   1a7d7:	74 2b                	je     1a804 <mpInit+0x815>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:221 (discriminator 1)
   1a7d9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a7dc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:222 (discriminator 1)
                            :intr->irqtype==3?"Ext"
   1a7e0:	3c 02                	cmp    al,0x2
   1a7e2:	74 19                	je     1a7fd <mpInit+0x80e>
   1a7e4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a7e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:223 (discriminator 1)
                            :"unk",                                 //iType
   1a7eb:	3c 03                	cmp    al,0x3
   1a7ed:	75 07                	jne    1a7f6 <mpInit+0x807>
   1a7ef:	b8 33 31 08 00       	mov    eax,0x83133
   1a7f4:	eb 1a                	jmp    1a810 <mpInit+0x821>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:223 (discriminator 2)
   1a7f6:	b8 37 31 08 00       	mov    eax,0x83137
   1a7fb:	eb 13                	jmp    1a810 <mpInit+0x821>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:222 (discriminator 2)
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
                            :intr->irqtype==3?"Ext"
   1a7fd:	b8 3b 31 08 00       	mov    eax,0x8313b
   1a802:	eb 0c                	jmp    1a810 <mpInit+0x821>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:221 (discriminator 2)
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
   1a804:	b8 3f 31 08 00       	mov    eax,0x8313f
   1a809:	eb 05                	jmp    1a810 <mpInit+0x821>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:218 (discriminator 7)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a80b:	b8 43 31 08 00       	mov    eax,0x83143
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:218 (discriminator 9)
   1a810:	83 ec 0c             	sub    esp,0xc
   1a813:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1a816:	57                   	push   edi
   1a817:	56                   	push   esi
   1a818:	53                   	push   ebx
   1a819:	51                   	push   ecx
   1a81a:	52                   	push   edx
   1a81b:	50                   	push   eax
   1a81c:	68 a0 33 08 00       	push   0x833a0
   1a821:	68 00 08 00 00       	push   0x800
   1a826:	e8 28 c8 00 00       	call   27053 <printd>
   1a82b:	83 c4 30             	add    esp,0x30
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:231 (discriminator 9)
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
                break;
   1a82e:	e9 39 02 00 00       	jmp    1aa6c <mpInit+0xa7d>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:233
            case 4:
                printd(DEBUG_MP,"\tLINT: ");
   1a833:	83 ec 08             	sub    esp,0x8
   1a836:	68 de 33 08 00       	push   0x833de
   1a83b:	68 00 08 00 00       	push   0x800
   1a840:	e8 0e c8 00 00       	call   27053 <printd>
   1a845:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:234
                struct mpc_lintsrc* lint=(struct mpc_lintsrc*)recPtr;
   1a848:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a84b:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:235
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1a84e:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a853:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a856:	c1 e2 05             	shl    edx,0x5
   1a859:	01 d0                	add    eax,edx
   1a85b:	83 ec 04             	sub    esp,0x4
   1a85e:	6a 08                	push   0x8
   1a860:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a863:	50                   	push   eax
   1a864:	e8 37 b1 00 00       	call   259a0 <memcpy>
   1a869:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:236
                if (cnt==0)
   1a86c:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a870:	75 16                	jne    1a888 <mpInit+0x899>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:237
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a872:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a877:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a87a:	c1 e2 05             	shl    edx,0x5
   1a87d:	01 d0                	add    eax,edx
   1a87f:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a886:	eb 72                	jmp    1a8fa <mpInit+0x90b>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:238
                else if (cnt==mc->count-1)
   1a888:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a88d:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a891:	0f b7 c0             	movzx  eax,ax
   1a894:	83 e8 01             	sub    eax,0x1
   1a897:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a89a:	75 16                	jne    1a8b2 <mpInit+0x8c3>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:239
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a89c:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a8a1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a8a4:	c1 e2 05             	shl    edx,0x5
   1a8a7:	01 d0                	add    eax,edx
   1a8a9:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a8b0:	eb 48                	jmp    1a8fa <mpInit+0x90b>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:242
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a8b2:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a8b7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a8ba:	c1 e2 05             	shl    edx,0x5
   1a8bd:	01 d0                	add    eax,edx
   1a8bf:	8b 15 40 03 a0 00    	mov    edx,DWORD PTR ds:0xa00340
   1a8c5:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a8c8:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a8ce:	c1 e1 05             	shl    ecx,0x5
   1a8d1:	01 ca                	add    edx,ecx
   1a8d3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:243
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a8d6:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a8db:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a8de:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1a8e4:	c1 e2 05             	shl    edx,0x5
   1a8e7:	01 d0                	add    eax,edx
   1a8e9:	8b 15 40 03 a0 00    	mov    edx,DWORD PTR ds:0xa00340
   1a8ef:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a8f2:	c1 e1 05             	shl    ecx,0x5
   1a8f5:	01 ca                	add    edx,ecx
   1a8f7:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:245
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
   1a8fa:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1a8ff:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a902:	c1 e2 05             	shl    edx,0x5
   1a905:	01 d0                	add    eax,edx
   1a907:	c7 40 14 04 00 00 00 	mov    DWORD PTR [eax+0x14],0x4
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:246
                recPtr+=8;
   1a90e:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1a912:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a915:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1a919:	0f b6 c0             	movzx  eax,al
   1a91c:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1a91f:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a922:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1a926:	0f b6 f8             	movzx  edi,al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1a929:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a92c:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1a930:	0f b6 f0             	movzx  esi,al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1a933:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a936:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1a93a:	0f b6 d8             	movzx  ebx,al
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:256
                            :lint->irqtype==3?"Ext"
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
   1a93d:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a940:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a944:	0f b7 c0             	movzx  eax,ax
   1a947:	83 e0 0c             	and    eax,0xc
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1a94a:	85 c0                	test   eax,eax
   1a94c:	74 39                	je     1a987 <mpInit+0x998>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:257
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
   1a94e:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a951:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a955:	0f b7 c0             	movzx  eax,ax
   1a958:	83 e0 0c             	and    eax,0xc
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:258
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
   1a95b:	83 f8 04             	cmp    eax,0x4
   1a95e:	74 20                	je     1a980 <mpInit+0x991>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:258 (discriminator 1)
   1a960:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a963:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a967:	0f b7 c0             	movzx  eax,ax
   1a96a:	83 e0 0c             	and    eax,0xc
   1a96d:	83 f8 08             	cmp    eax,0x8
   1a970:	75 07                	jne    1a979 <mpInit+0x98a>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:258 (discriminator 3)
   1a972:	b9 18 31 08 00       	mov    ecx,0x83118
   1a977:	eb 13                	jmp    1a98c <mpInit+0x99d>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:258 (discriminator 4)
   1a979:	b9 1a 31 08 00       	mov    ecx,0x8311a
   1a97e:	eb 0c                	jmp    1a98c <mpInit+0x99d>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:258 (discriminator 2)
   1a980:	b9 1c 31 08 00       	mov    ecx,0x8311c
   1a985:	eb 05                	jmp    1a98c <mpInit+0x99d>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:247 (discriminator 1)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1a987:	b9 21 31 08 00       	mov    ecx,0x83121
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:253 (discriminator 3)
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
                            :lint->irqtype==3?"Ext"
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
   1a98c:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a98f:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a993:	0f b7 c0             	movzx  eax,ax
   1a996:	83 e0 03             	and    eax,0x3
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:247 (discriminator 3)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1a999:	85 c0                	test   eax,eax
   1a99b:	74 39                	je     1a9d6 <mpInit+0x9e7>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:254
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
                            :lint->irqtype==3?"Ext"
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
                            :(lint->irqflag&0x3)==0x1?"AH"
   1a99d:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a9a0:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a9a4:	0f b7 c0             	movzx  eax,ax
   1a9a7:	83 e0 03             	and    eax,0x3
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:255
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   1a9aa:	83 f8 01             	cmp    eax,0x1
   1a9ad:	74 20                	je     1a9cf <mpInit+0x9e0>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:255 (discriminator 1)
   1a9af:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a9b2:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a9b6:	0f b7 c0             	movzx  eax,ax
   1a9b9:	83 e0 03             	and    eax,0x3
   1a9bc:	83 f8 02             	cmp    eax,0x2
   1a9bf:	75 07                	jne    1a9c8 <mpInit+0x9d9>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:255 (discriminator 3)
   1a9c1:	ba 23 31 08 00       	mov    edx,0x83123
   1a9c6:	eb 13                	jmp    1a9db <mpInit+0x9ec>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:255 (discriminator 4)
   1a9c8:	ba 27 31 08 00       	mov    edx,0x83127
   1a9cd:	eb 0c                	jmp    1a9db <mpInit+0x9ec>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:255 (discriminator 2)
   1a9cf:	ba 2d 31 08 00       	mov    edx,0x8312d
   1a9d4:	eb 05                	jmp    1a9db <mpInit+0x9ec>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:247 (discriminator 4)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1a9d6:	ba 30 31 08 00       	mov    edx,0x83130
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:248 (discriminator 6)
                             lint->irqtype==0?"INT"                      //type
   1a9db:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a9de:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:247 (discriminator 6)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1a9e2:	84 c0                	test   al,al
   1a9e4:	74 3d                	je     1aa23 <mpInit+0xa34>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:249
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
   1a9e6:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a9e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:250
                            :lint->irqtype==2?"SMI"
   1a9ed:	3c 01                	cmp    al,0x1
   1a9ef:	74 2b                	je     1aa1c <mpInit+0xa2d>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:250 (discriminator 1)
   1a9f1:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a9f4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:251 (discriminator 1)
                            :lint->irqtype==3?"Ext"
   1a9f8:	3c 02                	cmp    al,0x2
   1a9fa:	74 19                	je     1aa15 <mpInit+0xa26>
   1a9fc:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a9ff:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:252 (discriminator 1)
                            :"unk", //iType
   1aa03:	3c 03                	cmp    al,0x3
   1aa05:	75 07                	jne    1aa0e <mpInit+0xa1f>
   1aa07:	b8 33 31 08 00       	mov    eax,0x83133
   1aa0c:	eb 1a                	jmp    1aa28 <mpInit+0xa39>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:252 (discriminator 2)
   1aa0e:	b8 37 31 08 00       	mov    eax,0x83137
   1aa13:	eb 13                	jmp    1aa28 <mpInit+0xa39>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:251 (discriminator 2)
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
                            :lint->irqtype==3?"Ext"
   1aa15:	b8 3b 31 08 00       	mov    eax,0x8313b
   1aa1a:	eb 0c                	jmp    1aa28 <mpInit+0xa39>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:250 (discriminator 2)
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
   1aa1c:	b8 3f 31 08 00       	mov    eax,0x8313f
   1aa21:	eb 05                	jmp    1aa28 <mpInit+0xa39>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:247 (discriminator 7)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1aa23:	b8 43 31 08 00       	mov    eax,0x83143
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:247 (discriminator 9)
   1aa28:	83 ec 0c             	sub    esp,0xc
   1aa2b:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1aa2e:	57                   	push   edi
   1aa2f:	56                   	push   esi
   1aa30:	53                   	push   ebx
   1aa31:	51                   	push   ecx
   1aa32:	52                   	push   edx
   1aa33:	50                   	push   eax
   1aa34:	68 e8 33 08 00       	push   0x833e8
   1aa39:	68 00 08 00 00       	push   0x800
   1aa3e:	e8 10 c6 00 00       	call   27053 <printd>
   1aa43:	83 c4 30             	add    esp,0x30
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:260 (discriminator 9)
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
                break;
   1aa46:	eb 24                	jmp    1aa6c <mpInit+0xa7d>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:262
            default:
                printd(DEBUG_MP,"\tue %04X, ", (int)*(uint8_t*)recPtr);
   1aa48:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1aa4b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1aa4e:	0f b6 c0             	movzx  eax,al
   1aa51:	83 ec 04             	sub    esp,0x4
   1aa54:	50                   	push   eax
   1aa55:	68 26 34 08 00       	push   0x83426
   1aa5a:	68 00 08 00 00       	push   0x800
   1aa5f:	e8 ef c5 00 00       	call   27053 <printd>
   1aa64:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:263
                recPtr+=8;
   1aa67:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:264
                break;
   1aa6b:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:266
        }
        if (cnt > 0 && cnt%250==0)
   1aa6c:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1aa70:	7e 2b                	jle    1aa9d <mpInit+0xaae>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:266 (discriminator 1)
   1aa72:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1aa75:	ba d3 4d 62 10       	mov    edx,0x10624dd3
   1aa7a:	89 c8                	mov    eax,ecx
   1aa7c:	f7 ea                	imul   edx
   1aa7e:	c1 fa 04             	sar    edx,0x4
   1aa81:	89 c8                	mov    eax,ecx
   1aa83:	c1 f8 1f             	sar    eax,0x1f
   1aa86:	29 c2                	sub    edx,eax
   1aa88:	89 d0                	mov    eax,edx
   1aa8a:	69 c0 fa 00 00 00    	imul   eax,eax,0xfa
   1aa90:	29 c1                	sub    ecx,eax
   1aa92:	89 c8                	mov    eax,ecx
   1aa94:	85 c0                	test   eax,eax
   1aa96:	75 05                	jne    1aa9d <mpInit+0xaae>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:267
            waitForKeyboardKey();
   1aa98:	e8 b5 67 ff ff       	call   11252 <waitForKeyboardKey>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:146 (discriminator 2)
    memset(lTempString, 0, 15);
        memcpy(lTempString, mc->productid,12);
    printd(DEBUG_MP,", product '%s': %s\n", lTempString);
    recPtr=(uint8_t*)mp->physptr+sizeof(struct mpc_table);
    printd(DEBUG_MP,"Parsing MC %u table entries at 0x%08X\n", mc->count, recPtr);
    for (int cnt=0;cnt< mc->count;cnt++)
   1aa9d:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:146 (discriminator 1)
   1aaa1:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1aaa6:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1aaaa:	0f b7 c0             	movzx  eax,ax
   1aaad:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1aab0:	0f 8f 7c f7 ff ff    	jg     1a232 <mpInit+0x243>
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:269
                break;
        }
        if (cnt > 0 && cnt%250==0)
            waitForKeyboardKey();
    }
    printd(DEBUG_MP,"rec5 pp=%08X(%08X),np=%08X(%08X)\n", kMPConfigTable[5].prevRecAddress, &kMPConfigTable[4], kMPConfigTable[5].nextRecAddress, &kMPConfigTable[6]);
   1aab6:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1aabb:	8d 98 c0 00 00 00    	lea    ebx,[eax+0xc0]
   1aac1:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1aac6:	05 a0 00 00 00       	add    eax,0xa0
   1aacb:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1aace:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1aad3:	8d 88 80 00 00 00    	lea    ecx,[eax+0x80]
   1aad9:	a1 40 03 a0 00       	mov    eax,ds:0xa00340
   1aade:	05 a0 00 00 00       	add    eax,0xa0
   1aae3:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   1aae6:	83 ec 08             	sub    esp,0x8
   1aae9:	53                   	push   ebx
   1aaea:	52                   	push   edx
   1aaeb:	51                   	push   ecx
   1aaec:	50                   	push   eax
   1aaed:	68 34 34 08 00       	push   0x83434
   1aaf2:	68 00 08 00 00       	push   0x800
   1aaf7:	e8 57 c5 00 00       	call   27053 <printd>
   1aafc:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:270
    return mc->count;
   1aaff:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1ab04:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1ab08:	0f b7 c0             	movzx  eax,ax
/home/yogi/NetBeansProjects/chrisOS/src/cpu/smp.c:271 (discriminator 1)
   1ab0b:	8d 65 f4             	lea    esp,[ebp-0xc]
   1ab0e:	5b                   	pop    ebx
   1ab0f:	5e                   	pop    esi
   1ab10:	5f                   	pop    edi
   1ab11:	5d                   	pop    ebp
   1ab12:	c3                   	ret    
   1ab13:	90                   	nop

0001ab14 <activateDebugger>:
activateDebugger():
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:19
extern uint8_t kTerminalHeight;
extern uint32_t exceptionCS;
extern uint32_t debugReturnFlags;

void activateDebugger()
{
   1ab14:	55                   	push   ebp
   1ab15:	89 e5                	mov    ebp,esp
   1ab17:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:20
    kDebuggerActive=!kDebuggerActive;
   1ab1a:	0f b6 05 d4 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d4
   1ab21:	0f b6 c0             	movzx  eax,al
   1ab24:	85 c0                	test   eax,eax
   1ab26:	0f 95 c0             	setne  al
   1ab29:	83 f0 01             	xor    eax,0x1
   1ab2c:	0f b6 c0             	movzx  eax,al
   1ab2f:	83 e0 01             	and    eax,0x1
   1ab32:	a2 d4 a5 09 00       	mov    ds:0x9a5d4,al
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:21
    if (kDebuggerActive)
   1ab37:	0f b6 05 d4 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d4
   1ab3e:	84 c0                	test   al,al
   1ab40:	0f 84 87 00 00 00    	je     1abcd <activateDebugger+0xb9>
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:24
    {
        //Activate the debugger
        savedTermHeight=kTerminalHeight;
   1ab46:	0f b6 05 27 00 a0 00 	movzx  eax,BYTE PTR ds:0xa00027
   1ab4d:	a2 d5 a5 09 00       	mov    ds:0x9a5d5,al
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:25
        kTerminalHeight=20;
   1ab52:	c6 05 27 00 a0 00 14 	mov    BYTE PTR ds:0xa00027,0x14
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:26
        cursorSavePosition();
   1ab59:	e8 95 cf ff ff       	call   17af3 <cursorSavePosition>
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:27
        cursorMoveTo(70,0);
   1ab5e:	83 ec 08             	sub    esp,0x8
   1ab61:	6a 00                	push   0x0
   1ab63:	6a 46                	push   0x46
   1ab65:	e8 3d d3 ff ff       	call   17ea7 <cursorMoveTo>
   1ab6a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:28
        printk("D");
   1ab6d:	83 ec 0c             	sub    esp,0xc
   1ab70:	68 80 35 08 00       	push   0x83580
   1ab75:	e8 b9 c4 00 00       	call   27033 <printk>
   1ab7a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:29
        for (int cnt=21;cnt<savedTermHeight;cnt++)
   1ab7d:	c7 45 f4 15 00 00 00 	mov    DWORD PTR [ebp-0xc],0x15
   1ab84:	eb 12                	jmp    1ab98 <activateDebugger+0x84>
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:30 (discriminator 3)
            terminal_clear_line(cnt);
   1ab86:	83 ec 0c             	sub    esp,0xc
   1ab89:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1ab8c:	e8 92 d0 ff ff       	call   17c23 <terminal_clear_line>
   1ab91:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:29 (discriminator 3)
        savedTermHeight=kTerminalHeight;
        kTerminalHeight=20;
        cursorSavePosition();
        cursorMoveTo(70,0);
        printk("D");
        for (int cnt=21;cnt<savedTermHeight;cnt++)
   1ab94:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:29 (discriminator 1)
   1ab98:	0f b6 05 d5 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d5
   1ab9f:	0f b6 c0             	movzx  eax,al
   1aba2:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1aba5:	7f df                	jg     1ab86 <activateDebugger+0x72>
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:31
            terminal_clear_line(cnt);
        cursorMoveTo(0,21);
   1aba7:	83 ec 08             	sub    esp,0x8
   1abaa:	6a 15                	push   0x15
   1abac:	6a 00                	push   0x0
   1abae:	e8 f4 d2 ff ff       	call   17ea7 <cursorMoveTo>
   1abb3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:32
        printk("-------------------------------- DEBUG --------------------------------");
   1abb6:	83 ec 0c             	sub    esp,0xc
   1abb9:	68 84 35 08 00       	push   0x83584
   1abbe:	e8 70 c4 00 00       	call   27033 <printk>
   1abc3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:33
        cursorRestorePosition();
   1abc6:	e8 74 cf ff ff       	call   17b3f <cursorRestorePosition>
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:43
        cursorSavePosition();
        cursorMoveTo(70,0);
        printk(" ");
        cursorRestorePosition();
    }
}
   1abcb:	eb 35                	jmp    1ac02 <activateDebugger+0xee>
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:37
        printk("-------------------------------- DEBUG --------------------------------");
        cursorRestorePosition();
    }
    else    //Deactivate the debugger
    {
        kTerminalHeight=savedTermHeight;
   1abcd:	0f b6 05 d5 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d5
   1abd4:	a2 27 00 a0 00       	mov    ds:0xa00027,al
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:38
        cursorSavePosition();
   1abd9:	e8 15 cf ff ff       	call   17af3 <cursorSavePosition>
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:39
        cursorMoveTo(70,0);
   1abde:	83 ec 08             	sub    esp,0x8
   1abe1:	6a 00                	push   0x0
   1abe3:	6a 46                	push   0x46
   1abe5:	e8 bd d2 ff ff       	call   17ea7 <cursorMoveTo>
   1abea:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:40
        printk(" ");
   1abed:	83 ec 0c             	sub    esp,0xc
   1abf0:	68 cc 35 08 00       	push   0x835cc
   1abf5:	e8 39 c4 00 00       	call   27033 <printk>
   1abfa:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:41
        cursorRestorePosition();
   1abfd:	e8 3d cf ff ff       	call   17b3f <cursorRestorePosition>
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:43
    }
}
   1ac02:	90                   	nop
   1ac03:	c9                   	leave  
   1ac04:	c3                   	ret    

0001ac05 <debugStep>:
debugStep():
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:46

void debugStep()
{
   1ac05:	55                   	push   ebp
   1ac06:	89 e5                	mov    ebp,esp
   1ac08:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:47
    cursorSavePosition();
   1ac0b:	e8 e3 ce ff ff       	call   17af3 <cursorSavePosition>
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:48
    cursorMoveTo(0,22);
   1ac10:	83 ec 08             	sub    esp,0x8
   1ac13:	6a 16                	push   0x16
   1ac15:	6a 00                	push   0x0
   1ac17:	e8 8b d2 ff ff       	call   17ea7 <cursorMoveTo>
   1ac1c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:49
    printDebugRegs();
   1ac1f:	e8 38 a8 00 00       	call   2545c <printDebugRegs>
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:50
    cursorRestorePosition();
   1ac24:	e8 16 cf ff ff       	call   17b3f <cursorRestorePosition>
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:51
    waitForKeyboardKey();
   1ac29:	e8 24 66 ff ff       	call   11252 <waitForKeyboardKey>
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:52
    return;
   1ac2e:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/debugger/debugger.c:53
}
   1ac2f:	c9                   	leave  
   1ac30:	c3                   	ret    
   1ac31:	66 90                	xchg   ax,ax
   1ac33:	90                   	nop

0001ac34 <fatfs_init>:
fatfs_init():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:44

//-----------------------------------------------------------------------------
// fatfs_init: Load FAT Parameters
//-----------------------------------------------------------------------------
int fatfs_init(struct fatfs *fs)
{
   1ac34:	55                   	push   ebp
   1ac35:	89 e5                	mov    ebp,esp
   1ac37:	83 ec 28             	sub    esp,0x28
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:52
    uint32 FATSz;
    uint32 root_dir_sectors;
    uint32 total_sectors;
    uint32 data_sectors;
    uint32 count_of_clusters;
    uint8 valid_partition = 0;
   1ac3a:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:54

    fs->currentsector.address = FAT32_INVALID_CLUSTER;
   1ac3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ac41:	c7 80 44 02 00 00 ff 	mov    DWORD PTR [eax+0x244],0xffffffff
   1ac48:	ff ff ff 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:55
    fs->currentsector.dirty = 0;
   1ac4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ac4e:	c7 80 48 02 00 00 00 	mov    DWORD PTR [eax+0x248],0x0
   1ac55:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:57

    fs->next_free_cluster = 0; // Invalid
   1ac58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ac5b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:59

    fatfs_fat_init(fs);
   1ac62:	83 ec 0c             	sub    esp,0xc
   1ac65:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ac68:	e8 43 56 00 00       	call   202b0 <fatfs_fat_init>
   1ac6d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:62

    // Make sure we have a read function (write function is optional)
    if (!fs->disk_io.read_media)
   1ac70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ac73:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1ac76:	85 c0                	test   eax,eax
   1ac78:	75 0a                	jne    1ac84 <fatfs_init+0x50>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:63
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1ac7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1ac7f:	e9 46 05 00 00       	jmp    1b1ca <fatfs_init+0x596>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:69

    // MBR: Sector 0 on the disk
    // NOTE: Some removeable media does not have this.

    // Load MBR (LBA 0) into the 512 byte buffer
    if (!fs->disk_io.read_media(0, fs->currentsector.sector, 1))
   1ac84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ac87:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1ac8a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ac8d:	83 c2 44             	add    edx,0x44
   1ac90:	83 ec 04             	sub    esp,0x4
   1ac93:	6a 01                	push   0x1
   1ac95:	52                   	push   edx
   1ac96:	6a 00                	push   0x0
   1ac98:	ff d0                	call   eax
   1ac9a:	83 c4 10             	add    esp,0x10
   1ac9d:	85 c0                	test   eax,eax
   1ac9f:	75 0a                	jne    1acab <fatfs_init+0x77>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:70
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1aca1:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1aca6:	e9 1f 05 00 00       	jmp    1b1ca <fatfs_init+0x596>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:74

    // Make Sure 0x55 and 0xAA are at end of sector
    // (this should be the case regardless of the MBR or boot sector)
    if (fs->currentsector.sector[SIGNATURE_POSITION] != 0x55 || fs->currentsector.sector[SIGNATURE_POSITION+1] != 0xAA)
   1acab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1acae:	0f b6 80 42 02 00 00 	movzx  eax,BYTE PTR [eax+0x242]
   1acb5:	3c 55                	cmp    al,0x55
   1acb7:	75 0e                	jne    1acc7 <fatfs_init+0x93>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:74 (discriminator 1)
   1acb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1acbc:	0f b6 80 43 02 00 00 	movzx  eax,BYTE PTR [eax+0x243]
   1acc3:	3c aa                	cmp    al,0xaa
   1acc5:	74 0a                	je     1acd1 <fatfs_init+0x9d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:75
        return FAT_INIT_INVALID_SIGNATURE;
   1acc7:	b8 fd ff ff ff       	mov    eax,0xfffffffd
   1accc:	e9 f9 04 00 00       	jmp    1b1ca <fatfs_init+0x596>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:78

    // Now check again using the access function to prove endian conversion function
    if (GET_16BIT_WORD(fs->currentsector.sector, SIGNATURE_POSITION) != SIGNATURE_VALUE)
   1acd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1acd4:	0f b6 80 43 02 00 00 	movzx  eax,BYTE PTR [eax+0x243]
   1acdb:	0f b6 c0             	movzx  eax,al
   1acde:	c1 e0 08             	shl    eax,0x8
   1ace1:	89 c2                	mov    edx,eax
   1ace3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ace6:	0f b6 80 42 02 00 00 	movzx  eax,BYTE PTR [eax+0x242]
   1aced:	0f b6 c0             	movzx  eax,al
   1acf0:	01 d0                	add    eax,edx
   1acf2:	3d 55 aa 00 00       	cmp    eax,0xaa55
   1acf7:	74 0a                	je     1ad03 <fatfs_init+0xcf>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:79
        return FAT_INIT_ENDIAN_ERROR;
   1acf9:	b8 fc ff ff ff       	mov    eax,0xfffffffc
   1acfe:	e9 c7 04 00 00       	jmp    1b1ca <fatfs_init+0x596>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:86
    // Verify packed structures
    if (sizeof(struct fat_dir_entry) != FAT_DIR_ENTRY_SIZE)
        return FAT_INIT_STRUCT_PACKING;

    // Check the partition type code
    switch(fs->currentsector.sector[PARTITION1_TYPECODE_LOCATION])
   1ad03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad06:	0f b6 80 06 02 00 00 	movzx  eax,BYTE PTR [eax+0x206]
   1ad0d:	0f b6 c0             	movzx  eax,al
   1ad10:	83 f8 0f             	cmp    eax,0xf
   1ad13:	77 15                	ja     1ad2a <fatfs_init+0xf6>
   1ad15:	8b 04 85 d0 35 08 00 	mov    eax,DWORD PTR [eax*4+0x835d0]
   1ad1c:	ff e0                	jmp    eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:94
        case 0x06:
        case 0x0C:
        case 0x0E:
        case 0x0F:
        case 0x05:
            valid_partition = 1;
   1ad1e:	c6 45 ef 01          	mov    BYTE PTR [ebp-0x11],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:95
        break;
   1ad22:	eb 19                	jmp    1ad3d <fatfs_init+0x109>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:97
        case 0x00:
            valid_partition = 0;
   1ad24:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:98
            break;
   1ad28:	eb 13                	jmp    1ad3d <fatfs_init+0x109>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:100
        default:
            if (fs->currentsector.sector[PARTITION1_TYPECODE_LOCATION] <= 0x06)
   1ad2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad2d:	0f b6 80 06 02 00 00 	movzx  eax,BYTE PTR [eax+0x206]
   1ad34:	3c 06                	cmp    al,0x6
   1ad36:	77 04                	ja     1ad3c <fatfs_init+0x108>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:101
                valid_partition = 1;
   1ad38:	c6 45 ef 01          	mov    BYTE PTR [ebp-0x11],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:102
        break;
   1ad3c:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:106
    }

    // Read LBA Begin for the file system
    if (valid_partition)
   1ad3d:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
   1ad41:	74 4d                	je     1ad90 <fatfs_init+0x15c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:107
        fs->lba_begin = GET_32BIT_WORD(fs->currentsector.sector, PARTITION1_LBA_BEGIN_LOCATION);
   1ad43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad46:	0f b6 80 0d 02 00 00 	movzx  eax,BYTE PTR [eax+0x20d]
   1ad4d:	0f b6 c0             	movzx  eax,al
   1ad50:	c1 e0 18             	shl    eax,0x18
   1ad53:	89 c2                	mov    edx,eax
   1ad55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad58:	0f b6 80 0c 02 00 00 	movzx  eax,BYTE PTR [eax+0x20c]
   1ad5f:	0f b6 c0             	movzx  eax,al
   1ad62:	c1 e0 10             	shl    eax,0x10
   1ad65:	01 c2                	add    edx,eax
   1ad67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad6a:	0f b6 80 0b 02 00 00 	movzx  eax,BYTE PTR [eax+0x20b]
   1ad71:	0f b6 c0             	movzx  eax,al
   1ad74:	c1 e0 08             	shl    eax,0x8
   1ad77:	01 c2                	add    edx,eax
   1ad79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad7c:	0f b6 80 0a 02 00 00 	movzx  eax,BYTE PTR [eax+0x20a]
   1ad83:	0f b6 c0             	movzx  eax,al
   1ad86:	01 c2                	add    edx,eax
   1ad88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad8b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
   1ad8e:	eb 0a                	jmp    1ad9a <fatfs_init+0x166>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:110
    // Else possibly MBR less disk
    else
        fs->lba_begin = 0;
   1ad90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad93:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:114

    // Load Volume 1 table into sector buffer
    // (We may already have this in the buffer if MBR less drive!)
    if (!fs->disk_io.read_media(fs->lba_begin, fs->currentsector.sector, 1))
   1ad9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad9d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1ada0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ada3:	8d 4a 44             	lea    ecx,[edx+0x44]
   1ada6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ada9:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
   1adac:	83 ec 04             	sub    esp,0x4
   1adaf:	6a 01                	push   0x1
   1adb1:	51                   	push   ecx
   1adb2:	52                   	push   edx
   1adb3:	ff d0                	call   eax
   1adb5:	83 c4 10             	add    esp,0x10
   1adb8:	85 c0                	test   eax,eax
   1adba:	75 0a                	jne    1adc6 <fatfs_init+0x192>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:115
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1adbc:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1adc1:	e9 04 04 00 00       	jmp    1b1ca <fatfs_init+0x596>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:118

    // Make sure there are 512 bytes per cluster
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE)
   1adc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1adc9:	0f b6 40 50          	movzx  eax,BYTE PTR [eax+0x50]
   1adcd:	0f b6 c0             	movzx  eax,al
   1add0:	c1 e0 08             	shl    eax,0x8
   1add3:	89 c2                	mov    edx,eax
   1add5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1add8:	0f b6 40 4f          	movzx  eax,BYTE PTR [eax+0x4f]
   1addc:	0f b6 c0             	movzx  eax,al
   1addf:	01 d0                	add    eax,edx
   1ade1:	3d 00 02 00 00       	cmp    eax,0x200
   1ade6:	74 0a                	je     1adf2 <fatfs_init+0x1be>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:119
        return FAT_INIT_INVALID_SECTOR_SIZE;
   1ade8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
   1aded:	e9 d8 03 00 00       	jmp    1b1ca <fatfs_init+0x596>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:122

    // Load Parameters of FAT partition
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
   1adf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1adf5:	0f b6 50 51          	movzx  edx,BYTE PTR [eax+0x51]
   1adf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1adfc:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:123
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
   1adfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae01:	0f b6 40 53          	movzx  eax,BYTE PTR [eax+0x53]
   1ae05:	0f b6 c0             	movzx  eax,al
   1ae08:	c1 e0 08             	shl    eax,0x8
   1ae0b:	89 c2                	mov    edx,eax
   1ae0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae10:	0f b6 40 52          	movzx  eax,BYTE PTR [eax+0x52]
   1ae14:	0f b6 c0             	movzx  eax,al
   1ae17:	01 d0                	add    eax,edx
   1ae19:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:124
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
   1ae1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae20:	0f b6 40 54          	movzx  eax,BYTE PTR [eax+0x54]
   1ae24:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:125
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);
   1ae27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae2a:	0f b6 40 56          	movzx  eax,BYTE PTR [eax+0x56]
   1ae2e:	0f b6 c0             	movzx  eax,al
   1ae31:	c1 e0 08             	shl    eax,0x8
   1ae34:	89 c2                	mov    edx,eax
   1ae36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae39:	0f b6 40 55          	movzx  eax,BYTE PTR [eax+0x55]
   1ae3d:	0f b6 c0             	movzx  eax,al
   1ae40:	01 c2                	add    edx,eax
   1ae42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae45:	66 89 50 28          	mov    WORD PTR [eax+0x28],dx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:127

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
   1ae49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae4c:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1ae50:	0f b6 c0             	movzx  eax,al
   1ae53:	c1 e0 08             	shl    eax,0x8
   1ae56:	89 c2                	mov    edx,eax
   1ae58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae5b:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1ae5f:	0f b6 c0             	movzx  eax,al
   1ae62:	01 d0                	add    eax,edx
   1ae64:	85 c0                	test   eax,eax
   1ae66:	74 25                	je     1ae8d <fatfs_init+0x259>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:128
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
   1ae68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae6b:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1ae6f:	0f b6 c0             	movzx  eax,al
   1ae72:	c1 e0 08             	shl    eax,0x8
   1ae75:	89 c2                	mov    edx,eax
   1ae77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae7a:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1ae7e:	0f b6 c0             	movzx  eax,al
   1ae81:	01 d0                	add    eax,edx
   1ae83:	89 c2                	mov    edx,eax
   1ae85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae88:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
   1ae8b:	eb 3f                	jmp    1aecc <fatfs_init+0x298>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:130
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
   1ae8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae90:	0f b6 40 6b          	movzx  eax,BYTE PTR [eax+0x6b]
   1ae94:	0f b6 c0             	movzx  eax,al
   1ae97:	c1 e0 18             	shl    eax,0x18
   1ae9a:	89 c2                	mov    edx,eax
   1ae9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae9f:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
   1aea3:	0f b6 c0             	movzx  eax,al
   1aea6:	c1 e0 10             	shl    eax,0x10
   1aea9:	01 c2                	add    edx,eax
   1aeab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aeae:	0f b6 40 69          	movzx  eax,BYTE PTR [eax+0x69]
   1aeb2:	0f b6 c0             	movzx  eax,al
   1aeb5:	c1 e0 08             	shl    eax,0x8
   1aeb8:	01 c2                	add    edx,eax
   1aeba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aebd:	0f b6 40 68          	movzx  eax,BYTE PTR [eax+0x68]
   1aec1:	0f b6 c0             	movzx  eax,al
   1aec4:	01 c2                	add    edx,eax
   1aec6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aec9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:133

    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
   1aecc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aecf:	0f b6 40 73          	movzx  eax,BYTE PTR [eax+0x73]
   1aed3:	0f b6 c0             	movzx  eax,al
   1aed6:	c1 e0 18             	shl    eax,0x18
   1aed9:	89 c2                	mov    edx,eax
   1aedb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aede:	0f b6 40 72          	movzx  eax,BYTE PTR [eax+0x72]
   1aee2:	0f b6 c0             	movzx  eax,al
   1aee5:	c1 e0 10             	shl    eax,0x10
   1aee8:	01 c2                	add    edx,eax
   1aeea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aeed:	0f b6 40 71          	movzx  eax,BYTE PTR [eax+0x71]
   1aef1:	0f b6 c0             	movzx  eax,al
   1aef4:	c1 e0 08             	shl    eax,0x8
   1aef7:	01 c2                	add    edx,eax
   1aef9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aefc:	0f b6 40 70          	movzx  eax,BYTE PTR [eax+0x70]
   1af00:	0f b6 c0             	movzx  eax,al
   1af03:	01 c2                	add    edx,eax
   1af05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af08:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:134
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
   1af0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af0e:	0f b6 40 75          	movzx  eax,BYTE PTR [eax+0x75]
   1af12:	0f b6 c0             	movzx  eax,al
   1af15:	c1 e0 08             	shl    eax,0x8
   1af18:	89 c2                	mov    edx,eax
   1af1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af1d:	0f b6 40 74          	movzx  eax,BYTE PTR [eax+0x74]
   1af21:	0f b6 c0             	movzx  eax,al
   1af24:	01 c2                	add    edx,eax
   1af26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af29:	66 89 50 18          	mov    WORD PTR [eax+0x18],dx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:137

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
   1af2d:	0f b7 55 ec          	movzx  edx,WORD PTR [ebp-0x14]
   1af31:	0f b6 4d eb          	movzx  ecx,BYTE PTR [ebp-0x15]
   1af35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af38:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1af3b:	0f af c1             	imul   eax,ecx
   1af3e:	01 c2                	add    edx,eax
   1af40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af43:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:138
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
   1af46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af49:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1af4d:	0f b7 c0             	movzx  eax,ax
   1af50:	c1 e0 05             	shl    eax,0x5
   1af53:	05 ff 01 00 00       	add    eax,0x1ff
   1af58:	8d 90 ff 01 00 00    	lea    edx,[eax+0x1ff]
   1af5e:	85 c0                	test   eax,eax
   1af60:	0f 48 c2             	cmovs  eax,edx
   1af63:	c1 f8 09             	sar    eax,0x9
   1af66:	89 c2                	mov    edx,eax
   1af68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af6b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:141

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;
   1af6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af71:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1af74:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   1af78:	01 c2                	add    edx,eax
   1af7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af7d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:144

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);
   1af80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af83:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   1af86:	0f b6 4d eb          	movzx  ecx,BYTE PTR [ebp-0x15]
   1af8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af8d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1af90:	0f af c1             	imul   eax,ecx
   1af93:	01 c2                	add    edx,eax
   1af95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af98:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:146

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
   1af9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af9e:	0f b6 80 43 02 00 00 	movzx  eax,BYTE PTR [eax+0x243]
   1afa5:	0f b6 c0             	movzx  eax,al
   1afa8:	c1 e0 08             	shl    eax,0x8
   1afab:	89 c2                	mov    edx,eax
   1afad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1afb0:	0f b6 80 42 02 00 00 	movzx  eax,BYTE PTR [eax+0x242]
   1afb7:	0f b6 c0             	movzx  eax,al
   1afba:	01 d0                	add    eax,edx
   1afbc:	3d 55 aa 00 00       	cmp    eax,0xaa55
   1afc1:	74 0a                	je     1afcd <fatfs_init+0x399>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:147
        return FAT_INIT_INVALID_SIGNATURE;
   1afc3:	b8 fd ff ff ff       	mov    eax,0xfffffffd
   1afc8:	e9 fd 01 00 00       	jmp    1b1ca <fatfs_init+0x596>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:150

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
   1afcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1afd0:	0f b6 40 56          	movzx  eax,BYTE PTR [eax+0x56]
   1afd4:	0f b6 c0             	movzx  eax,al
   1afd7:	c1 e0 08             	shl    eax,0x8
   1afda:	89 c2                	mov    edx,eax
   1afdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1afdf:	0f b6 40 55          	movzx  eax,BYTE PTR [eax+0x55]
   1afe3:	0f b6 c0             	movzx  eax,al
   1afe6:	01 d0                	add    eax,edx
   1afe8:	c1 e0 05             	shl    eax,0x5
   1afeb:	89 c2                	mov    edx,eax
   1afed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aff0:	0f b6 40 50          	movzx  eax,BYTE PTR [eax+0x50]
   1aff4:	0f b6 c0             	movzx  eax,al
   1aff7:	c1 e0 08             	shl    eax,0x8
   1affa:	89 c1                	mov    ecx,eax
   1affc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1afff:	0f b6 40 4f          	movzx  eax,BYTE PTR [eax+0x4f]
   1b003:	0f b6 c0             	movzx  eax,al
   1b006:	01 c8                	add    eax,ecx
   1b008:	83 e8 01             	sub    eax,0x1
   1b00b:	01 c2                	add    edx,eax
   1b00d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b010:	0f b6 40 50          	movzx  eax,BYTE PTR [eax+0x50]
   1b014:	0f b6 c0             	movzx  eax,al
   1b017:	c1 e0 08             	shl    eax,0x8
   1b01a:	89 c1                	mov    ecx,eax
   1b01c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b01f:	0f b6 40 4f          	movzx  eax,BYTE PTR [eax+0x4f]
   1b023:	0f b6 c0             	movzx  eax,al
   1b026:	01 c1                	add    ecx,eax
   1b028:	89 d0                	mov    eax,edx
   1b02a:	99                   	cdq    
   1b02b:	f7 f9                	idiv   ecx
   1b02d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:152

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
   1b030:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b033:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1b037:	0f b6 c0             	movzx  eax,al
   1b03a:	c1 e0 08             	shl    eax,0x8
   1b03d:	89 c2                	mov    edx,eax
   1b03f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b042:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1b046:	0f b6 c0             	movzx  eax,al
   1b049:	01 d0                	add    eax,edx
   1b04b:	85 c0                	test   eax,eax
   1b04d:	74 20                	je     1b06f <fatfs_init+0x43b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:153
        FATSz = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
   1b04f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b052:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1b056:	0f b6 c0             	movzx  eax,al
   1b059:	c1 e0 08             	shl    eax,0x8
   1b05c:	89 c2                	mov    edx,eax
   1b05e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b061:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1b065:	0f b6 c0             	movzx  eax,al
   1b068:	01 d0                	add    eax,edx
   1b06a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1b06d:	eb 3c                	jmp    1b0ab <fatfs_init+0x477>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:155
    else
        FATSz = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
   1b06f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b072:	0f b6 40 6b          	movzx  eax,BYTE PTR [eax+0x6b]
   1b076:	0f b6 c0             	movzx  eax,al
   1b079:	c1 e0 18             	shl    eax,0x18
   1b07c:	89 c2                	mov    edx,eax
   1b07e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b081:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
   1b085:	0f b6 c0             	movzx  eax,al
   1b088:	c1 e0 10             	shl    eax,0x10
   1b08b:	01 c2                	add    edx,eax
   1b08d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b090:	0f b6 40 69          	movzx  eax,BYTE PTR [eax+0x69]
   1b094:	0f b6 c0             	movzx  eax,al
   1b097:	c1 e0 08             	shl    eax,0x8
   1b09a:	01 c2                	add    edx,eax
   1b09c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b09f:	0f b6 40 68          	movzx  eax,BYTE PTR [eax+0x68]
   1b0a3:	0f b6 c0             	movzx  eax,al
   1b0a6:	01 d0                	add    eax,edx
   1b0a8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:157

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16) != 0)
   1b0ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0ae:	0f b6 40 58          	movzx  eax,BYTE PTR [eax+0x58]
   1b0b2:	0f b6 c0             	movzx  eax,al
   1b0b5:	c1 e0 08             	shl    eax,0x8
   1b0b8:	89 c2                	mov    edx,eax
   1b0ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0bd:	0f b6 40 57          	movzx  eax,BYTE PTR [eax+0x57]
   1b0c1:	0f b6 c0             	movzx  eax,al
   1b0c4:	01 d0                	add    eax,edx
   1b0c6:	85 c0                	test   eax,eax
   1b0c8:	74 20                	je     1b0ea <fatfs_init+0x4b6>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:158
        total_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16);
   1b0ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0cd:	0f b6 40 58          	movzx  eax,BYTE PTR [eax+0x58]
   1b0d1:	0f b6 c0             	movzx  eax,al
   1b0d4:	c1 e0 08             	shl    eax,0x8
   1b0d7:	89 c2                	mov    edx,eax
   1b0d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0dc:	0f b6 40 57          	movzx  eax,BYTE PTR [eax+0x57]
   1b0e0:	0f b6 c0             	movzx  eax,al
   1b0e3:	01 d0                	add    eax,edx
   1b0e5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   1b0e8:	eb 3c                	jmp    1b126 <fatfs_init+0x4f2>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:160
    else
        total_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_TOTSEC32);
   1b0ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0ed:	0f b6 40 67          	movzx  eax,BYTE PTR [eax+0x67]
   1b0f1:	0f b6 c0             	movzx  eax,al
   1b0f4:	c1 e0 18             	shl    eax,0x18
   1b0f7:	89 c2                	mov    edx,eax
   1b0f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0fc:	0f b6 40 66          	movzx  eax,BYTE PTR [eax+0x66]
   1b100:	0f b6 c0             	movzx  eax,al
   1b103:	c1 e0 10             	shl    eax,0x10
   1b106:	01 c2                	add    edx,eax
   1b108:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b10b:	0f b6 40 65          	movzx  eax,BYTE PTR [eax+0x65]
   1b10f:	0f b6 c0             	movzx  eax,al
   1b112:	c1 e0 08             	shl    eax,0x8
   1b115:	01 c2                	add    edx,eax
   1b117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b11a:	0f b6 40 64          	movzx  eax,BYTE PTR [eax+0x64]
   1b11e:	0f b6 c0             	movzx  eax,al
   1b121:	01 d0                	add    eax,edx
   1b123:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:162

    data_sectors = total_sectors - (GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT) + (fs->currentsector.sector[BPB_NUMFATS] * FATSz) + root_dir_sectors);
   1b126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b129:	0f b6 40 53          	movzx  eax,BYTE PTR [eax+0x53]
   1b12d:	0f b6 c0             	movzx  eax,al
   1b130:	c1 e0 08             	shl    eax,0x8
   1b133:	89 c2                	mov    edx,eax
   1b135:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b138:	0f b6 40 52          	movzx  eax,BYTE PTR [eax+0x52]
   1b13c:	0f b6 c0             	movzx  eax,al
   1b13f:	01 d0                	add    eax,edx
   1b141:	89 c2                	mov    edx,eax
   1b143:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b146:	0f b6 40 54          	movzx  eax,BYTE PTR [eax+0x54]
   1b14a:	0f b6 c0             	movzx  eax,al
   1b14d:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   1b151:	01 c2                	add    edx,eax
   1b153:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1b156:	01 c2                	add    edx,eax
   1b158:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1b15b:	29 d0                	sub    eax,edx
   1b15d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:165

    // Find out which version of FAT this is...
    if (fs->sectors_per_cluster != 0)
   1b160:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b163:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b166:	84 c0                	test   al,al
   1b168:	74 5b                	je     1b1c5 <fatfs_init+0x591>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:167
    {
        count_of_clusters = data_sectors / fs->sectors_per_cluster;
   1b16a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b16d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b170:	0f b6 c8             	movzx  ecx,al
   1b173:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1b176:	ba 00 00 00 00       	mov    edx,0x0
   1b17b:	f7 f1                	div    ecx
   1b17d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:169

        if(count_of_clusters < 4085)
   1b180:	81 7d dc f4 0f 00 00 	cmp    DWORD PTR [ebp-0x24],0xff4
   1b187:	77 07                	ja     1b190 <fatfs_init+0x55c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:171
            // Volume is FAT12
            return FAT_INIT_WRONG_FILESYS_TYPE;
   1b189:	b8 fb ff ff ff       	mov    eax,0xfffffffb
   1b18e:	eb 3a                	jmp    1b1ca <fatfs_init+0x596>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:172
        else if(count_of_clusters < 65525)
   1b190:	81 7d dc f4 ff 00 00 	cmp    DWORD PTR [ebp-0x24],0xfff4
   1b197:	77 1b                	ja     1b1b4 <fatfs_init+0x580>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:175
        {
            // Clear this FAT32 specific param
            fs->rootdir_first_cluster = 0;
   1b199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b19c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:178

            // Volume is FAT16
            fs->fat_type = FAT_TYPE_16;
   1b1a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1a6:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:179
            return FAT_INIT_OK;
   1b1ad:	b8 00 00 00 00       	mov    eax,0x0
   1b1b2:	eb 16                	jmp    1b1ca <fatfs_init+0x596>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:184
        }
        else
        {
            // Volume is FAT32
            fs->fat_type = FAT_TYPE_32;
   1b1b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1b7:	c7 40 30 01 00 00 00 	mov    DWORD PTR [eax+0x30],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:185
            return FAT_INIT_OK;
   1b1be:	b8 00 00 00 00       	mov    eax,0x0
   1b1c3:	eb 05                	jmp    1b1ca <fatfs_init+0x596>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:189
        }
    }
    else
        return FAT_INIT_WRONG_FILESYS_TYPE;
   1b1c5:	b8 fb ff ff ff       	mov    eax,0xfffffffb
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:190
}
   1b1ca:	c9                   	leave  
   1b1cb:	c3                   	ret    

0001b1cc <fatfs_lba_of_cluster>:
fatfs_lba_of_cluster():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:196
//-----------------------------------------------------------------------------
// fatfs_lba_of_cluster: This function converts a cluster number into a sector /
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
   1b1cc:	55                   	push   ebp
   1b1cd:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:197
    if (fs->fat_type == FAT_TYPE_16)
   1b1cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1d2:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b1d5:	85 c0                	test   eax,eax
   1b1d7:	75 39                	jne    1b212 <fatfs_lba_of_cluster+0x46>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:198
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
   1b1d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1b1df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1e2:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1b1e6:	0f b7 c0             	movzx  eax,ax
   1b1e9:	c1 e0 05             	shl    eax,0x5
   1b1ec:	8d 88 ff 01 00 00    	lea    ecx,[eax+0x1ff]
   1b1f2:	85 c0                	test   eax,eax
   1b1f4:	0f 48 c1             	cmovs  eax,ecx
   1b1f7:	c1 f8 09             	sar    eax,0x9
   1b1fa:	01 c2                	add    edx,eax
   1b1fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1b1ff:	8d 48 fe             	lea    ecx,[eax-0x2]
   1b202:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b205:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b208:	0f b6 c0             	movzx  eax,al
   1b20b:	0f af c1             	imul   eax,ecx
   1b20e:	01 d0                	add    eax,edx
   1b210:	eb 1a                	jmp    1b22c <fatfs_lba_of_cluster+0x60>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:200
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
   1b212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b215:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1b218:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1b21b:	8d 48 fe             	lea    ecx,[eax-0x2]
   1b21e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b221:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b224:	0f b6 c0             	movzx  eax,al
   1b227:	0f af c1             	imul   eax,ecx
   1b22a:	01 d0                	add    eax,edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:201
}
   1b22c:	5d                   	pop    ebp
   1b22d:	c3                   	ret    

0001b22e <fatfs_sector_read>:
fatfs_sector_read():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:206
//-----------------------------------------------------------------------------
// fatfs_sector_read:
//-----------------------------------------------------------------------------
int fatfs_sector_read(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
   1b22e:	55                   	push   ebp
   1b22f:	89 e5                	mov    ebp,esp
   1b231:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:207
    return fs->disk_io.read_media(lba, target, count);
   1b234:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b237:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b23a:	83 ec 04             	sub    esp,0x4
   1b23d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b240:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1b243:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b246:	ff d0                	call   eax
   1b248:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:208
}
   1b24b:	c9                   	leave  
   1b24c:	c3                   	ret    

0001b24d <fatfs_sector_write>:
fatfs_sector_write():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:213
//-----------------------------------------------------------------------------
// fatfs_sector_write:
//-----------------------------------------------------------------------------
int fatfs_sector_write(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
   1b24d:	55                   	push   ebp
   1b24e:	89 e5                	mov    ebp,esp
   1b250:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:214
    return fs->disk_io.write_media(lba, target, count);
   1b253:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b256:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b259:	83 ec 04             	sub    esp,0x4
   1b25c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b25f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1b262:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b265:	ff d0                	call   eax
   1b267:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:215
}
   1b26a:	c9                   	leave  
   1b26b:	c3                   	ret    

0001b26c <fatfs_sector_reader>:
fatfs_sector_reader():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:221
//-----------------------------------------------------------------------------
// fatfs_sector_reader: From the provided startcluster and sector offset
// Returns True if success, returns False if not (including if read out of range)
//-----------------------------------------------------------------------------
int fatfs_sector_reader(struct fatfs *fs, uint32 start_cluster, uint32 offset, uint8 *target)
{
   1b26c:	55                   	push   ebp
   1b26d:	89 e5                	mov    ebp,esp
   1b26f:	83 ec 28             	sub    esp,0x28
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:222
    uint32 sector_to_read = 0;
   1b272:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:223
    uint32 cluster_to_read = 0;
   1b279:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:224
    uint32 cluster_chain = 0;
   1b280:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:229
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
   1b287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b28a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b28d:	85 c0                	test   eax,eax
   1b28f:	75 36                	jne    1b2c7 <fatfs_sector_reader+0x5b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:229 (discriminator 1)
   1b291:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1b295:	75 30                	jne    1b2c7 <fatfs_sector_reader+0x5b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:231
    {
        if (offset < fs->rootdir_sectors)
   1b297:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b29a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1b29d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1b2a0:	76 1b                	jbe    1b2bd <fatfs_sector_reader+0x51>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:232
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
   1b2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2a5:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1b2a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2ab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1b2ae:	01 c2                	add    edx,eax
   1b2b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b2b3:	01 d0                	add    eax,edx
   1b2b5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:231
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
    {
        if (offset < fs->rootdir_sectors)
   1b2b8:	e9 8e 00 00 00       	jmp    1b34b <fatfs_sector_reader+0xdf>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:234
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
        else
            return 0;
   1b2bd:	b8 00 00 00 00       	mov    eax,0x0
   1b2c2:	e9 e4 00 00 00       	jmp    1b3ab <fatfs_sector_reader+0x13f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:240
    }
    // FAT16/32 Other
    else
    {
        // Set start of cluster chain to initial value
        cluster_chain = start_cluster;
   1b2c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1b2ca:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:243

        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
   1b2cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2d0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b2d3:	0f b6 c8             	movzx  ecx,al
   1b2d6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b2d9:	ba 00 00 00 00       	mov    edx,0x0
   1b2de:	f7 f1                	div    ecx
   1b2e0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:244
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);
   1b2e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2e6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b2e9:	0f b6 c0             	movzx  eax,al
   1b2ec:	0f af 45 e4          	imul   eax,DWORD PTR [ebp-0x1c]
   1b2f0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1b2f3:	29 c2                	sub    edx,eax
   1b2f5:	89 d0                	mov    eax,edx
   1b2f7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:247

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
   1b2fa:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   1b301:	eb 18                	jmp    1b31b <fatfs_sector_reader+0xaf>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:248 (discriminator 3)
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
   1b303:	83 ec 08             	sub    esp,0x8
   1b306:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b309:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b30c:	e8 f9 52 00 00       	call   2060a <fatfs_find_next_cluster>
   1b311:	83 c4 10             	add    esp,0x10
   1b314:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:247 (discriminator 3)
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
   1b317:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:247 (discriminator 1)
   1b31b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1b31e:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   1b321:	72 e0                	jb     1b303 <fatfs_sector_reader+0x97>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:251
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);

        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER)
   1b323:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1b327:	75 07                	jne    1b330 <fatfs_sector_reader+0xc4>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:252
            return 0;
   1b329:	b8 00 00 00 00       	mov    eax,0x0
   1b32e:	eb 7b                	jmp    1b3ab <fatfs_sector_reader+0x13f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:255

        // Calculate sector address
        lba = fatfs_lba_of_cluster(fs, cluster_chain)+sector_to_read;
   1b330:	83 ec 08             	sub    esp,0x8
   1b333:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b336:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b339:	e8 8e fe ff ff       	call   1b1cc <fatfs_lba_of_cluster>
   1b33e:	83 c4 10             	add    esp,0x10
   1b341:	89 c2                	mov    edx,eax
   1b343:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1b346:	01 d0                	add    eax,edx
   1b348:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:259
    }

    // User provided target array
    if (target)
   1b34b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b34f:	74 18                	je     1b369 <fatfs_sector_reader+0xfd>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:260
        return fs->disk_io.read_media(lba, target, 1);
   1b351:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b354:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b357:	83 ec 04             	sub    esp,0x4
   1b35a:	6a 01                	push   0x1
   1b35c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b35f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1b362:	ff d0                	call   eax
   1b364:	83 c4 10             	add    esp,0x10
   1b367:	eb 42                	jmp    1b3ab <fatfs_sector_reader+0x13f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:262
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
   1b369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b36c:	8b 80 44 02 00 00    	mov    eax,DWORD PTR [eax+0x244]
   1b372:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   1b375:	74 2f                	je     1b3a6 <fatfs_sector_reader+0x13a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:264
    {
        fs->currentsector.address = lba;
   1b377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b37a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1b37d:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:265
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b383:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b386:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b389:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b38c:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b38f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b392:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b398:	83 ec 04             	sub    esp,0x4
   1b39b:	6a 01                	push   0x1
   1b39d:	51                   	push   ecx
   1b39e:	52                   	push   edx
   1b39f:	ff d0                	call   eax
   1b3a1:	83 c4 10             	add    esp,0x10
   1b3a4:	eb 05                	jmp    1b3ab <fatfs_sector_reader+0x13f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:268
    }
    else
        return 1;
   1b3a6:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:269
}
   1b3ab:	c9                   	leave  
   1b3ac:	c3                   	ret    

0001b3ad <fatfs_read_sector>:
fatfs_read_sector():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:275
//-----------------------------------------------------------------------------
// fatfs_read_sector: Read from the provided cluster and sector offset
// Returns True if success, returns False if not
//-----------------------------------------------------------------------------
int fatfs_read_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
   1b3ad:	55                   	push   ebp
   1b3ae:	89 e5                	mov    ebp,esp
   1b3b0:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:277
    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
   1b3b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3b6:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b3b9:	85 c0                	test   eax,eax
   1b3bb:	0f 85 83 00 00 00    	jne    1b444 <fatfs_read_sector+0x97>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:277 (discriminator 1)
   1b3c1:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1b3c5:	75 7d                	jne    1b444 <fatfs_read_sector+0x97>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:282
    {
        uint32 lba;

        // In FAT16, there are a limited amount of sectors in root dir!
        if (sector < fs->rootdir_sectors)
   1b3c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1b3cd:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1b3d0:	76 1e                	jbe    1b3f0 <fatfs_read_sector+0x43>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:283
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
   1b3d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3d5:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1b3d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3db:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1b3de:	01 c2                	add    edx,eax
   1b3e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b3e3:	01 d0                	add    eax,edx
   1b3e5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:288
        else
            return 0;

        // User target buffer passed in
        if (target)
   1b3e8:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b3ec:	74 27                	je     1b415 <fatfs_read_sector+0x68>
   1b3ee:	eb 0a                	jmp    1b3fa <fatfs_read_sector+0x4d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:285

        // In FAT16, there are a limited amount of sectors in root dir!
        if (sector < fs->rootdir_sectors)
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
        else
            return 0;
   1b3f0:	b8 00 00 00 00       	mov    eax,0x0
   1b3f5:	e9 c5 00 00 00       	jmp    1b4bf <fatfs_read_sector+0x112>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:291

        // User target buffer passed in
        if (target)
        {
            // Read from disk
            return fs->disk_io.read_media(lba, target, 1);
   1b3fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3fd:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b400:	83 ec 04             	sub    esp,0x4
   1b403:	6a 01                	push   0x1
   1b405:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b408:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b40b:	ff d0                	call   eax
   1b40d:	83 c4 10             	add    esp,0x10
   1b410:	e9 aa 00 00 00       	jmp    1b4bf <fatfs_read_sector+0x112>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:296
        }
        else
        {
            // Calculate read address
            fs->currentsector.address = lba;
   1b415:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b418:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1b41b:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:299

            // Read from disk
            return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b421:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b424:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b427:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b42a:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b42d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b430:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b436:	83 ec 04             	sub    esp,0x4
   1b439:	6a 01                	push   0x1
   1b43b:	51                   	push   ecx
   1b43c:	52                   	push   edx
   1b43d:	ff d0                	call   eax
   1b43f:	83 c4 10             	add    esp,0x10
   1b442:	eb 7b                	jmp    1b4bf <fatfs_read_sector+0x112>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:306
    }
    // FAT16/32 Other
    else
    {
        // User target buffer passed in
        if (target)
   1b444:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b448:	74 33                	je     1b47d <fatfs_read_sector+0xd0>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:309
        {
            // Calculate read address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;
   1b44a:	83 ec 08             	sub    esp,0x8
   1b44d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b450:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b453:	e8 74 fd ff ff       	call   1b1cc <fatfs_lba_of_cluster>
   1b458:	83 c4 10             	add    esp,0x10
   1b45b:	89 c2                	mov    edx,eax
   1b45d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b460:	01 d0                	add    eax,edx
   1b462:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:312

            // Read from disk
            return fs->disk_io.read_media(lba, target, 1);
   1b465:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b468:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b46b:	83 ec 04             	sub    esp,0x4
   1b46e:	6a 01                	push   0x1
   1b470:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b473:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1b476:	ff d0                	call   eax
   1b478:	83 c4 10             	add    esp,0x10
   1b47b:	eb 42                	jmp    1b4bf <fatfs_read_sector+0x112>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:317
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
   1b47d:	83 ec 08             	sub    esp,0x8
   1b480:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b483:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b486:	e8 41 fd ff ff       	call   1b1cc <fatfs_lba_of_cluster>
   1b48b:	83 c4 10             	add    esp,0x10
   1b48e:	89 c2                	mov    edx,eax
   1b490:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b493:	01 c2                	add    edx,eax
   1b495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b498:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:320

            // Read from disk
            return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b49e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4a1:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b4a4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b4a7:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b4aa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b4ad:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b4b3:	83 ec 04             	sub    esp,0x4
   1b4b6:	6a 01                	push   0x1
   1b4b8:	51                   	push   ecx
   1b4b9:	52                   	push   edx
   1b4ba:	ff d0                	call   eax
   1b4bc:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:323
        }
    }
}
   1b4bf:	c9                   	leave  
   1b4c0:	c3                   	ret    

0001b4c1 <fatfs_write_sector>:
fatfs_write_sector():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:330
// fatfs_write_sector: Write to the provided cluster and sector offset
// Returns True if success, returns False if not
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_write_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
   1b4c1:	55                   	push   ebp
   1b4c2:	89 e5                	mov    ebp,esp
   1b4c4:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:332
    // No write access?
    if (!fs->disk_io.write_media)
   1b4c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4ca:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b4cd:	85 c0                	test   eax,eax
   1b4cf:	75 0a                	jne    1b4db <fatfs_write_sector+0x1a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:333
        return 0;
   1b4d1:	b8 00 00 00 00       	mov    eax,0x0
   1b4d6:	e9 0c 01 00 00       	jmp    1b5e7 <fatfs_write_sector+0x126>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:336

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
   1b4db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4de:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b4e1:	85 c0                	test   eax,eax
   1b4e3:	0f 85 83 00 00 00    	jne    1b56c <fatfs_write_sector+0xab>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:336 (discriminator 1)
   1b4e9:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1b4ed:	75 7d                	jne    1b56c <fatfs_write_sector+0xab>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:341
    {
        uint32 lba;

        // In FAT16 we cannot extend the root dir!
        if (sector < fs->rootdir_sectors)
   1b4ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1b4f5:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1b4f8:	76 1e                	jbe    1b518 <fatfs_write_sector+0x57>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:342
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
   1b4fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4fd:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1b500:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b503:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1b506:	01 c2                	add    edx,eax
   1b508:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b50b:	01 d0                	add    eax,edx
   1b50d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:347
        else
            return 0;

        // User target buffer passed in
        if (target)
   1b510:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b514:	74 27                	je     1b53d <fatfs_write_sector+0x7c>
   1b516:	eb 0a                	jmp    1b522 <fatfs_write_sector+0x61>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:344

        // In FAT16 we cannot extend the root dir!
        if (sector < fs->rootdir_sectors)
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
        else
            return 0;
   1b518:	b8 00 00 00 00       	mov    eax,0x0
   1b51d:	e9 c5 00 00 00       	jmp    1b5e7 <fatfs_write_sector+0x126>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:350

        // User target buffer passed in
        if (target)
        {
            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
   1b522:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b525:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b528:	83 ec 04             	sub    esp,0x4
   1b52b:	6a 01                	push   0x1
   1b52d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b530:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b533:	ff d0                	call   eax
   1b535:	83 c4 10             	add    esp,0x10
   1b538:	e9 aa 00 00 00       	jmp    1b5e7 <fatfs_write_sector+0x126>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:355
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = lba;
   1b53d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b540:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1b543:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:358

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b54c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b54f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b552:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b555:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b558:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b55e:	83 ec 04             	sub    esp,0x4
   1b561:	6a 01                	push   0x1
   1b563:	51                   	push   ecx
   1b564:	52                   	push   edx
   1b565:	ff d0                	call   eax
   1b567:	83 c4 10             	add    esp,0x10
   1b56a:	eb 7b                	jmp    1b5e7 <fatfs_write_sector+0x126>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:365
    }
    // FAT16/32 Other
    else
    {
        // User target buffer passed in
        if (target)
   1b56c:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b570:	74 33                	je     1b5a5 <fatfs_write_sector+0xe4>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:368
        {
            // Calculate write address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;
   1b572:	83 ec 08             	sub    esp,0x8
   1b575:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b578:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b57b:	e8 4c fc ff ff       	call   1b1cc <fatfs_lba_of_cluster>
   1b580:	83 c4 10             	add    esp,0x10
   1b583:	89 c2                	mov    edx,eax
   1b585:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b588:	01 d0                	add    eax,edx
   1b58a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:371

            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
   1b58d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b590:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b593:	83 ec 04             	sub    esp,0x4
   1b596:	6a 01                	push   0x1
   1b598:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b59b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1b59e:	ff d0                	call   eax
   1b5a0:	83 c4 10             	add    esp,0x10
   1b5a3:	eb 42                	jmp    1b5e7 <fatfs_write_sector+0x126>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:376
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
   1b5a5:	83 ec 08             	sub    esp,0x8
   1b5a8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b5ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b5ae:	e8 19 fc ff ff       	call   1b1cc <fatfs_lba_of_cluster>
   1b5b3:	83 c4 10             	add    esp,0x10
   1b5b6:	89 c2                	mov    edx,eax
   1b5b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b5bb:	01 c2                	add    edx,eax
   1b5bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5c0:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:379

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b5c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5c9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b5cc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b5cf:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b5d2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b5d5:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b5db:	83 ec 04             	sub    esp,0x4
   1b5de:	6a 01                	push   0x1
   1b5e0:	51                   	push   ecx
   1b5e1:	52                   	push   edx
   1b5e2:	ff d0                	call   eax
   1b5e4:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:382
        }
    }
}
   1b5e7:	c9                   	leave  
   1b5e8:	c3                   	ret    

0001b5e9 <fatfs_show_details>:
fatfs_show_details():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:388
#endif
//-----------------------------------------------------------------------------
// fatfs_show_details: Show the details about the filesystem
//-----------------------------------------------------------------------------
void fatfs_show_details(struct fatfs *fs)
{
   1b5e9:	55                   	push   ebp
   1b5ea:	89 e5                	mov    ebp,esp
   1b5ec:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:389
    FAT_PRINTF(("FAT details:\r\n"));
   1b5ef:	83 ec 0c             	sub    esp,0xc
   1b5f2:	68 10 36 08 00       	push   0x83610
   1b5f7:	e8 37 ba 00 00       	call   27033 <printk>
   1b5fc:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:390
    FAT_PRINTF((" Type =%s", (fs->fat_type == FAT_TYPE_32) ? "FAT32": "FAT16"));
   1b5ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b602:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b605:	83 f8 01             	cmp    eax,0x1
   1b608:	75 07                	jne    1b611 <fatfs_show_details+0x28>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:390 (discriminator 1)
   1b60a:	b8 1f 36 08 00       	mov    eax,0x8361f
   1b60f:	eb 05                	jmp    1b616 <fatfs_show_details+0x2d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:390 (discriminator 2)
   1b611:	b8 25 36 08 00       	mov    eax,0x83625
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:390 (discriminator 4)
   1b616:	83 ec 08             	sub    esp,0x8
   1b619:	50                   	push   eax
   1b61a:	68 2b 36 08 00       	push   0x8362b
   1b61f:	e8 0f ba 00 00       	call   27033 <printk>
   1b624:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:391 (discriminator 4)
    FAT_PRINTF((" Root Dir First Cluster = %x\r\n", fs->rootdir_first_cluster));
   1b627:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b62a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1b62d:	83 ec 08             	sub    esp,0x8
   1b630:	50                   	push   eax
   1b631:	68 38 36 08 00       	push   0x83638
   1b636:	e8 f8 b9 00 00       	call   27033 <printk>
   1b63b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:392 (discriminator 4)
    FAT_PRINTF((" FAT Begin LBA = 0x%x\r\n",fs->fat_begin_lba));
   1b63e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b641:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   1b644:	83 ec 08             	sub    esp,0x8
   1b647:	50                   	push   eax
   1b648:	68 57 36 08 00       	push   0x83657
   1b64d:	e8 e1 b9 00 00       	call   27033 <printk>
   1b652:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:393 (discriminator 4)
    FAT_PRINTF((" Cluster Begin LBA = 0x%x\r\n",fs->cluster_begin_lba));
   1b655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b658:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1b65b:	83 ec 08             	sub    esp,0x8
   1b65e:	50                   	push   eax
   1b65f:	68 6f 36 08 00       	push   0x8366f
   1b664:	e8 ca b9 00 00       	call   27033 <printk>
   1b669:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:394 (discriminator 4)
    FAT_PRINTF((" Sectors Per Cluster = %d\r\n", fs->sectors_per_cluster));
   1b66c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b66f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b672:	0f b6 c0             	movzx  eax,al
   1b675:	83 ec 08             	sub    esp,0x8
   1b678:	50                   	push   eax
   1b679:	68 8b 36 08 00       	push   0x8368b
   1b67e:	e8 b0 b9 00 00       	call   27033 <printk>
   1b683:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:395 (discriminator 4)
}
   1b686:	90                   	nop
   1b687:	c9                   	leave  
   1b688:	c3                   	ret    

0001b689 <fatfs_get_root_cluster>:
fatfs_get_root_cluster():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:400
//-----------------------------------------------------------------------------
// fatfs_get_root_cluster: Get the root dir cluster
//-----------------------------------------------------------------------------
uint32 fatfs_get_root_cluster(struct fatfs *fs)
{
   1b689:	55                   	push   ebp
   1b68a:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:402
    // NOTE: On FAT16 this will be 0 which has a special meaning...
    return fs->rootdir_first_cluster;
   1b68c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b68f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:403
}
   1b692:	5d                   	pop    ebp
   1b693:	c3                   	ret    

0001b694 <fatfs_get_file_entry>:
fatfs_get_file_entry():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:408
//-------------------------------------------------------------
// fatfs_get_file_entry: Find the file entry for a filename
//-------------------------------------------------------------
uint32 fatfs_get_file_entry(struct fatfs *fs, uint32 Cluster, char *name_to_find, struct fat_dir_entry *sfEntry)
{
   1b694:	55                   	push   ebp
   1b695:	89 e5                	mov    ebp,esp
   1b697:	81 ec 38 01 00 00    	sub    esp,0x138
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:409
    uint8 item=0;
   1b69d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:410
    uint16 recordoffset = 0;
   1b6a1:	66 c7 45 ea 00 00    	mov    WORD PTR [ebp-0x16],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:411
    uint8 i=0;
   1b6a7:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:412
    int x=0;
   1b6ab:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:413
    char *long_filename = NULL;
   1b6b2:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:416
    char short_filename[13];
    struct lfn_cache lfn;
    int dotRequired = 0;
   1b6b9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:419
    struct fat_dir_entry *directoryEntry;

    fatfs_lfn_cache_init(&lfn, 1);
   1b6c0:	83 ec 08             	sub    esp,0x8
   1b6c3:	6a 01                	push   0x1
   1b6c5:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1b6cb:	50                   	push   eax
   1b6cc:	e8 8f 39 00 00       	call   1f060 <fatfs_lfn_cache_init>
   1b6d1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:425

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1b6d4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1b6d7:	8d 50 01             	lea    edx,[eax+0x1]
   1b6da:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1b6dd:	6a 00                	push   0x0
   1b6df:	50                   	push   eax
   1b6e0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b6e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b6e6:	e8 81 fb ff ff       	call   1b26c <fatfs_sector_reader>
   1b6eb:	83 c4 10             	add    esp,0x10
   1b6ee:	85 c0                	test   eax,eax
   1b6f0:	0f 84 13 02 00 00    	je     1b909 <fatfs_get_file_entry+0x275>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:428
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1b6f6:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1b6fa:	e9 fb 01 00 00       	jmp    1b8fa <fatfs_get_file_entry+0x266>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:431
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1b6ff:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1b703:	c1 e0 05             	shl    eax,0x5
   1b706:	66 89 45 ea          	mov    WORD PTR [ebp-0x16],ax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:434

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1b70a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b70d:	8d 50 44             	lea    edx,[eax+0x44]
   1b710:	0f b7 45 ea          	movzx  eax,WORD PTR [ebp-0x16]
   1b714:	01 d0                	add    eax,edx
   1b716:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:438

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1b719:	83 ec 0c             	sub    esp,0xc
   1b71c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1b71f:	e8 56 3c 00 00       	call   1f37a <fatfs_entry_lfn_text>
   1b724:	83 c4 10             	add    esp,0x10
   1b727:	85 c0                	test   eax,eax
   1b729:	74 24                	je     1b74f <fatfs_get_file_entry+0xbb>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:439
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
   1b72b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b72e:	8d 50 44             	lea    edx,[eax+0x44]
   1b731:	0f b7 45 ea          	movzx  eax,WORD PTR [ebp-0x16]
   1b735:	01 d0                	add    eax,edx
   1b737:	83 ec 08             	sub    esp,0x8
   1b73a:	50                   	push   eax
   1b73b:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1b741:	50                   	push   eax
   1b742:	e8 6f 39 00 00       	call   1f0b6 <fatfs_lfn_cache_entry>
   1b747:	83 c4 10             	add    esp,0x10
   1b74a:	e9 a1 01 00 00       	jmp    1b8f0 <fatfs_get_file_entry+0x25c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:442

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1b74f:	83 ec 0c             	sub    esp,0xc
   1b752:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1b755:	e8 43 3c 00 00       	call   1f39d <fatfs_entry_lfn_invalid>
   1b75a:	83 c4 10             	add    esp,0x10
   1b75d:	85 c0                	test   eax,eax
   1b75f:	74 19                	je     1b77a <fatfs_get_file_entry+0xe6>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:443
                    fatfs_lfn_cache_init(&lfn, 0);
   1b761:	83 ec 08             	sub    esp,0x8
   1b764:	6a 00                	push   0x0
   1b766:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1b76c:	50                   	push   eax
   1b76d:	e8 ee 38 00 00       	call   1f060 <fatfs_lfn_cache_init>
   1b772:	83 c4 10             	add    esp,0x10
   1b775:	e9 76 01 00 00       	jmp    1b8f0 <fatfs_get_file_entry+0x25c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:446

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
   1b77a:	83 ec 08             	sub    esp,0x8
   1b77d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1b780:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1b786:	50                   	push   eax
   1b787:	e8 52 3c 00 00       	call   1f3de <fatfs_entry_lfn_exists>
   1b78c:	83 c4 10             	add    esp,0x10
   1b78f:	85 c0                	test   eax,eax
   1b791:	74 60                	je     1b7f3 <fatfs_get_file_entry+0x15f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:448
                {
                    long_filename = fatfs_lfn_cache_get(&lfn);
   1b793:	83 ec 0c             	sub    esp,0xc
   1b796:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1b79c:	50                   	push   eax
   1b79d:	e8 80 3b 00 00       	call   1f322 <fatfs_lfn_cache_get>
   1b7a2:	83 c4 10             	add    esp,0x10
   1b7a5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:451

                    // Compare names to see if they match
                    if (fatfs_compare_names(long_filename, name_to_find))
   1b7a8:	83 ec 08             	sub    esp,0x8
   1b7ab:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1b7ae:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1b7b1:	e8 5d 47 00 00       	call   1ff13 <fatfs_compare_names>
   1b7b6:	83 c4 10             	add    esp,0x10
   1b7b9:	85 c0                	test   eax,eax
   1b7bb:	74 1d                	je     1b7da <fatfs_get_file_entry+0x146>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:453
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
   1b7bd:	83 ec 04             	sub    esp,0x4
   1b7c0:	6a 20                	push   0x20
   1b7c2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1b7c5:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b7c8:	e8 d3 a1 00 00       	call   259a0 <memcpy>
   1b7cd:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:454
                        return 1;
   1b7d0:	b8 01 00 00 00       	mov    eax,0x1
   1b7d5:	e9 35 01 00 00       	jmp    1b90f <fatfs_get_file_entry+0x27b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:457
                    }

                    fatfs_lfn_cache_init(&lfn, 0);
   1b7da:	83 ec 08             	sub    esp,0x8
   1b7dd:	6a 00                	push   0x0
   1b7df:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1b7e5:	50                   	push   eax
   1b7e6:	e8 75 38 00 00       	call   1f060 <fatfs_lfn_cache_init>
   1b7eb:	83 c4 10             	add    esp,0x10
   1b7ee:	e9 fd 00 00 00       	jmp    1b8f0 <fatfs_get_file_entry+0x25c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:462
                }
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   1b7f3:	83 ec 0c             	sub    esp,0xc
   1b7f6:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1b7f9:	e8 3a 3c 00 00       	call   1f438 <fatfs_entry_sfn_only>
   1b7fe:	83 c4 10             	add    esp,0x10
   1b801:	85 c0                	test   eax,eax
   1b803:	0f 84 e7 00 00 00    	je     1b8f0 <fatfs_get_file_entry+0x25c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:464
                {
                    memset(short_filename, 0, sizeof(short_filename));
   1b809:	83 ec 04             	sub    esp,0x4
   1b80c:	6a 0d                	push   0xd
   1b80e:	6a 00                	push   0x0
   1b810:	8d 45 d3             	lea    eax,[ebp-0x2d]
   1b813:	50                   	push   eax
   1b814:	e8 94 97 00 00       	call   24fad <memset>
   1b819:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:467

                    // Copy name to string
                    for (i=0; i<8; i++)
   1b81c:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
   1b820:	eb 1d                	jmp    1b83f <fatfs_get_file_entry+0x1ab>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:468 (discriminator 3)
                        short_filename[i] = directoryEntry->Name[i];
   1b822:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1b826:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   1b82a:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1b82d:	0f b6 14 11          	movzx  edx,BYTE PTR [ecx+edx*1]
   1b831:	88 54 05 d3          	mov    BYTE PTR [ebp+eax*1-0x2d],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:467 (discriminator 3)
                if (fatfs_entry_sfn_only(directoryEntry) )
                {
                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++)
   1b835:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1b839:	83 c0 01             	add    eax,0x1
   1b83c:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:467 (discriminator 1)
   1b83f:	80 7d f6 07          	cmp    BYTE PTR [ebp-0xa],0x7
   1b843:	76 dd                	jbe    1b822 <fatfs_get_file_entry+0x18e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:471
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
   1b845:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:472
                    for (i=8; i<11; i++)
   1b84c:	c6 45 f6 08          	mov    BYTE PTR [ebp-0xa],0x8
   1b850:	eb 36                	jmp    1b888 <fatfs_get_file_entry+0x1f4>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:474
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
   1b852:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1b856:	8d 48 01             	lea    ecx,[eax+0x1]
   1b859:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1b85d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1b860:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1b864:	88 44 0d d3          	mov    BYTE PTR [ebp+ecx*1-0x2d],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:475
                        if (directoryEntry->Name[i] != ' ')
   1b868:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1b86c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1b86f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1b873:	3c 20                	cmp    al,0x20
   1b875:	74 07                	je     1b87e <fatfs_get_file_entry+0x1ea>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:476
                            dotRequired = 1;
   1b877:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:472 (discriminator 2)
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
   1b87e:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1b882:	83 c0 01             	add    eax,0x1
   1b885:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:472 (discriminator 1)
   1b888:	80 7d f6 0a          	cmp    BYTE PTR [ebp-0xa],0xa
   1b88c:	76 c4                	jbe    1b852 <fatfs_get_file_entry+0x1be>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:480
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
   1b88e:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   1b892:	74 14                	je     1b8a8 <fatfs_get_file_entry+0x214>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:483
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
   1b894:	0f b6 45 d3          	movzx  eax,BYTE PTR [ebp-0x2d]
   1b898:	3c 2e                	cmp    al,0x2e
   1b89a:	74 06                	je     1b8a2 <fatfs_get_file_entry+0x20e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:484
                            short_filename[8] = '.';
   1b89c:	c6 45 db 2e          	mov    BYTE PTR [ebp-0x25],0x2e
   1b8a0:	eb 0a                	jmp    1b8ac <fatfs_get_file_entry+0x218>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:486
                        else
                            short_filename[8] = ' ';
   1b8a2:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
   1b8a6:	eb 04                	jmp    1b8ac <fatfs_get_file_entry+0x218>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:489
                    }
                    else
                        short_filename[8] = ' ';
   1b8a8:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:492

                    // Compare names to see if they match
                    if (fatfs_compare_names(short_filename, name_to_find))
   1b8ac:	83 ec 08             	sub    esp,0x8
   1b8af:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1b8b2:	8d 45 d3             	lea    eax,[ebp-0x2d]
   1b8b5:	50                   	push   eax
   1b8b6:	e8 58 46 00 00       	call   1ff13 <fatfs_compare_names>
   1b8bb:	83 c4 10             	add    esp,0x10
   1b8be:	85 c0                	test   eax,eax
   1b8c0:	74 1a                	je     1b8dc <fatfs_get_file_entry+0x248>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:494
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
   1b8c2:	83 ec 04             	sub    esp,0x4
   1b8c5:	6a 20                	push   0x20
   1b8c7:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1b8ca:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b8cd:	e8 ce a0 00 00       	call   259a0 <memcpy>
   1b8d2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:495
                        return 1;
   1b8d5:	b8 01 00 00 00       	mov    eax,0x1
   1b8da:	eb 33                	jmp    1b90f <fatfs_get_file_entry+0x27b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:498
                    }

                    fatfs_lfn_cache_init(&lfn, 0);
   1b8dc:	83 ec 08             	sub    esp,0x8
   1b8df:	6a 00                	push   0x0
   1b8e1:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1b8e7:	50                   	push   eax
   1b8e8:	e8 73 37 00 00       	call   1f060 <fatfs_lfn_cache_init>
   1b8ed:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:428 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1b8f0:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1b8f4:	83 c0 01             	add    eax,0x1
   1b8f7:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:428 (discriminator 1)
   1b8fa:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1b8fe:	0f 86 fb fd ff ff    	jbe    1b6ff <fatfs_get_file_entry+0x6b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:504 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1b904:	e9 cb fd ff ff       	jmp    1b6d4 <fatfs_get_file_entry+0x40>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:503
                    fatfs_lfn_cache_init(&lfn, 0);
                }
            } // End of if
        }
        else
            break;
   1b909:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:506
    } // End of while loop

    return 0;
   1b90a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:507 (discriminator 2)
}
   1b90f:	c9                   	leave  
   1b910:	c3                   	ret    

0001b911 <fatfs_sfn_exists>:
fatfs_sfn_exists():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:514
// fatfs_sfn_exists: Check if a short filename exists.
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_sfn_exists(struct fatfs *fs, uint32 Cluster, char *shortname)
{
   1b911:	55                   	push   ebp
   1b912:	89 e5                	mov    ebp,esp
   1b914:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:515
    uint8 item=0;
   1b917:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:516
    uint16 recordoffset = 0;
   1b91b:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:517
    int x=0;
   1b921:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:524

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1b928:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1b92b:	8d 50 01             	lea    edx,[eax+0x1]
   1b92e:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1b931:	6a 00                	push   0x0
   1b933:	50                   	push   eax
   1b934:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b937:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b93a:	e8 2d f9 ff ff       	call   1b26c <fatfs_sector_reader>
   1b93f:	83 c4 10             	add    esp,0x10
   1b942:	85 c0                	test   eax,eax
   1b944:	0f 84 8a 00 00 00    	je     1b9d4 <fatfs_sfn_exists+0xc3>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:527
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1b94a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1b94e:	eb 79                	jmp    1b9c9 <fatfs_sfn_exists+0xb8>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:530
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1b950:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1b954:	c1 e0 05             	shl    eax,0x5
   1b957:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:533

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1b95b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b95e:	8d 50 44             	lea    edx,[eax+0x44]
   1b961:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1b965:	01 d0                	add    eax,edx
   1b967:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:537

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1b96a:	83 ec 0c             	sub    esp,0xc
   1b96d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1b970:	e8 05 3a 00 00       	call   1f37a <fatfs_entry_lfn_text>
   1b975:	83 c4 10             	add    esp,0x10
   1b978:	85 c0                	test   eax,eax
   1b97a:	75 43                	jne    1b9bf <fatfs_sfn_exists+0xae>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:541
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1b97c:	83 ec 0c             	sub    esp,0xc
   1b97f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1b982:	e8 16 3a 00 00       	call   1f39d <fatfs_entry_lfn_invalid>
   1b987:	83 c4 10             	add    esp,0x10
   1b98a:	85 c0                	test   eax,eax
   1b98c:	75 31                	jne    1b9bf <fatfs_sfn_exists+0xae>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:546
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   1b98e:	83 ec 0c             	sub    esp,0xc
   1b991:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1b994:	e8 9f 3a 00 00       	call   1f438 <fatfs_entry_sfn_only>
   1b999:	83 c4 10             	add    esp,0x10
   1b99c:	85 c0                	test   eax,eax
   1b99e:	74 1f                	je     1b9bf <fatfs_sfn_exists+0xae>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:548
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   1b9a0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1b9a3:	83 ec 04             	sub    esp,0x4
   1b9a6:	6a 0b                	push   0xb
   1b9a8:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1b9ab:	50                   	push   eax
   1b9ac:	e8 5b 62 ff ff       	call   11c0c <strncmp>
   1b9b1:	83 c4 10             	add    esp,0x10
   1b9b4:	85 c0                	test   eax,eax
   1b9b6:	75 07                	jne    1b9bf <fatfs_sfn_exists+0xae>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:549
                        return 1;
   1b9b8:	b8 01 00 00 00       	mov    eax,0x1
   1b9bd:	eb 1b                	jmp    1b9da <fatfs_sfn_exists+0xc9>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:527 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1b9bf:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1b9c3:	83 c0 01             	add    eax,0x1
   1b9c6:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:527 (discriminator 1)
   1b9c9:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1b9cd:	76 81                	jbe    1b950 <fatfs_sfn_exists+0x3f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:555 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1b9cf:	e9 54 ff ff ff       	jmp    1b928 <fatfs_sfn_exists+0x17>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:554
                        return 1;
                }
            } // End of if
        }
        else
            break;
   1b9d4:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:557
    } // End of while loop

    return 0;
   1b9d5:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:558
}
   1b9da:	c9                   	leave  
   1b9db:	c3                   	ret    

0001b9dc <fatfs_update_timestamps>:
fatfs_update_timestamps():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:565
//-------------------------------------------------------------
// fatfs_update_timestamps: Update date/time details
//-------------------------------------------------------------
#if FATFS_INC_TIME_DATE_SUPPORT
int fatfs_update_timestamps(struct fat_dir_entry *directoryEntry, int create, int modify, int access)
{
   1b9dc:	55                   	push   ebp
   1b9dd:	89 e5                	mov    ebp,esp
   1b9df:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:572
    struct tm * time_info;
    uint16 fat_time;
    uint16 fat_date;

    // Get system time
    time(&time_now);
   1b9e2:	83 ec 0c             	sub    esp,0xc
   1b9e5:	8d 45 ec             	lea    eax,[ebp-0x14]
   1b9e8:	50                   	push   eax
   1b9e9:	e8 92 bc 00 00       	call   27680 <time>
   1b9ee:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:575

    // Convert to local time
    time_info = localtime(&time_now);
   1b9f1:	83 ec 0c             	sub    esp,0xc
   1b9f4:	8d 45 ec             	lea    eax,[ebp-0x14]
   1b9f7:	50                   	push   eax
   1b9f8:	e8 a1 bf 00 00       	call   2799e <localtime>
   1b9fd:	83 c4 10             	add    esp,0x10
   1ba00:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:578

    // Convert time to FAT format
    fat_time = fatfs_convert_to_fat_time(time_info->tm_hour, time_info->tm_min, time_info->tm_sec);
   1ba03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ba06:	8b 08                	mov    ecx,DWORD PTR [eax]
   1ba08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ba0b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1ba0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ba11:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1ba14:	83 ec 04             	sub    esp,0x4
   1ba17:	51                   	push   ecx
   1ba18:	52                   	push   edx
   1ba19:	50                   	push   eax
   1ba1a:	e8 e9 40 00 00       	call   1fb08 <fatfs_convert_to_fat_time>
   1ba1f:	83 c4 10             	add    esp,0x10
   1ba22:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:581

    // Convert date to FAT format
    fat_date = fatfs_convert_to_fat_date(time_info->tm_mday, time_info->tm_mon + 1, time_info->tm_year + 1900);
   1ba26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ba29:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   1ba2c:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   1ba32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ba35:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1ba38:	8d 50 01             	lea    edx,[eax+0x1]
   1ba3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ba3e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1ba41:	83 ec 04             	sub    esp,0x4
   1ba44:	51                   	push   ecx
   1ba45:	52                   	push   edx
   1ba46:	50                   	push   eax
   1ba47:	e8 0e 41 00 00       	call   1fb5a <fatfs_convert_to_fat_date>
   1ba4c:	83 c4 10             	add    esp,0x10
   1ba4f:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:584

    // Update requested fields
    if (create)
   1ba53:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1ba57:	74 38                	je     1ba91 <fatfs_update_timestamps+0xb5>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:586
    {
        directoryEntry->CrtTime[1] = fat_time >> 8;
   1ba59:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1ba5d:	66 c1 e8 08          	shr    ax,0x8
   1ba61:	89 c2                	mov    edx,eax
   1ba63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ba66:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:587
        directoryEntry->CrtTime[0] = fat_time >> 0;
   1ba69:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1ba6d:	89 c2                	mov    edx,eax
   1ba6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ba72:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:588
        directoryEntry->CrtDate[1] = fat_date >> 8;
   1ba75:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1ba79:	66 c1 e8 08          	shr    ax,0x8
   1ba7d:	89 c2                	mov    edx,eax
   1ba7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ba82:	88 50 11             	mov    BYTE PTR [eax+0x11],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:589
        directoryEntry->CrtDate[0] = fat_date >> 0;
   1ba85:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1ba89:	89 c2                	mov    edx,eax
   1ba8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ba8e:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:592
    }

    if (modify)
   1ba91:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   1ba95:	74 38                	je     1bacf <fatfs_update_timestamps+0xf3>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:594
    {
        directoryEntry->WrtTime[1] = fat_time >> 8;
   1ba97:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1ba9b:	66 c1 e8 08          	shr    ax,0x8
   1ba9f:	89 c2                	mov    edx,eax
   1baa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1baa4:	88 50 17             	mov    BYTE PTR [eax+0x17],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:595
        directoryEntry->WrtTime[0] = fat_time >> 0;
   1baa7:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1baab:	89 c2                	mov    edx,eax
   1baad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bab0:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:596
        directoryEntry->WrtDate[1] = fat_date >> 8;
   1bab3:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bab7:	66 c1 e8 08          	shr    ax,0x8
   1babb:	89 c2                	mov    edx,eax
   1babd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bac0:	88 50 19             	mov    BYTE PTR [eax+0x19],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:597
        directoryEntry->WrtDate[0] = fat_date >> 0;
   1bac3:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bac7:	89 c2                	mov    edx,eax
   1bac9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bacc:	88 50 18             	mov    BYTE PTR [eax+0x18],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:600
    }

    if (access)
   1bacf:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1bad3:	74 38                	je     1bb0d <fatfs_update_timestamps+0x131>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:602
    {
        directoryEntry->LstAccDate[1] = fat_time >> 8;
   1bad5:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bad9:	66 c1 e8 08          	shr    ax,0x8
   1badd:	89 c2                	mov    edx,eax
   1badf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bae2:	88 50 13             	mov    BYTE PTR [eax+0x13],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:603
        directoryEntry->LstAccDate[0] = fat_time >> 0;
   1bae5:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bae9:	89 c2                	mov    edx,eax
   1baeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1baee:	88 50 12             	mov    BYTE PTR [eax+0x12],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:604
        directoryEntry->LstAccDate[1] = fat_date >> 8;
   1baf1:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1baf5:	66 c1 e8 08          	shr    ax,0x8
   1baf9:	89 c2                	mov    edx,eax
   1bafb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bafe:	88 50 13             	mov    BYTE PTR [eax+0x13],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:605
        directoryEntry->LstAccDate[0] = fat_date >> 0;
   1bb01:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bb05:	89 c2                	mov    edx,eax
   1bb07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb0a:	88 50 12             	mov    BYTE PTR [eax+0x12],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:608
    }

    return 1;
   1bb0d:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:609
}
   1bb12:	c9                   	leave  
   1bb13:	c3                   	ret    

0001bb14 <fatfs_update_file_length>:
fatfs_update_file_length():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:617
// fatfs_update_file_length: Find a SFN entry and update it
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_update_file_length(struct fatfs *fs, uint32 Cluster, char *shortname, uint32 fileLength)
{
   1bb14:	55                   	push   ebp
   1bb15:	89 e5                	mov    ebp,esp
   1bb17:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:618
    uint8 item=0;
   1bb1a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:619
    uint16 recordoffset = 0;
   1bb1e:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:620
    int x=0;
   1bb24:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:624
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
   1bb2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb2e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1bb31:	85 c0                	test   eax,eax
   1bb33:	75 0a                	jne    1bb3f <fatfs_update_file_length+0x2b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:625
        return 0;
   1bb35:	b8 00 00 00 00       	mov    eax,0x0
   1bb3a:	e9 14 01 00 00       	jmp    1bc53 <fatfs_update_file_length+0x13f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:631

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1bb3f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1bb42:	8d 50 01             	lea    edx,[eax+0x1]
   1bb45:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1bb48:	6a 00                	push   0x0
   1bb4a:	50                   	push   eax
   1bb4b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1bb4e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1bb51:	e8 16 f7 ff ff       	call   1b26c <fatfs_sector_reader>
   1bb56:	83 c4 10             	add    esp,0x10
   1bb59:	85 c0                	test   eax,eax
   1bb5b:	0f 84 ec 00 00 00    	je     1bc4d <fatfs_update_file_length+0x139>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:634
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1bb61:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1bb65:	e9 d4 00 00 00       	jmp    1bc3e <fatfs_update_file_length+0x12a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:637
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1bb6a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1bb6e:	c1 e0 05             	shl    eax,0x5
   1bb71:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:640

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1bb75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb78:	8d 50 44             	lea    edx,[eax+0x44]
   1bb7b:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1bb7f:	01 d0                	add    eax,edx
   1bb81:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:644

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1bb84:	83 ec 0c             	sub    esp,0xc
   1bb87:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bb8a:	e8 eb 37 00 00       	call   1f37a <fatfs_entry_lfn_text>
   1bb8f:	83 c4 10             	add    esp,0x10
   1bb92:	85 c0                	test   eax,eax
   1bb94:	0f 85 9a 00 00 00    	jne    1bc34 <fatfs_update_file_length+0x120>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:648
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1bb9a:	83 ec 0c             	sub    esp,0xc
   1bb9d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bba0:	e8 f8 37 00 00       	call   1f39d <fatfs_entry_lfn_invalid>
   1bba5:	83 c4 10             	add    esp,0x10
   1bba8:	85 c0                	test   eax,eax
   1bbaa:	0f 85 84 00 00 00    	jne    1bc34 <fatfs_update_file_length+0x120>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:654
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   1bbb0:	83 ec 0c             	sub    esp,0xc
   1bbb3:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bbb6:	e8 7d 38 00 00       	call   1f438 <fatfs_entry_sfn_only>
   1bbbb:	83 c4 10             	add    esp,0x10
   1bbbe:	85 c0                	test   eax,eax
   1bbc0:	74 72                	je     1bc34 <fatfs_update_file_length+0x120>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:656
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   1bbc2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1bbc5:	83 ec 04             	sub    esp,0x4
   1bbc8:	6a 0b                	push   0xb
   1bbca:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1bbcd:	50                   	push   eax
   1bbce:	e8 39 60 ff ff       	call   11c0c <strncmp>
   1bbd3:	83 c4 10             	add    esp,0x10
   1bbd6:	85 c0                	test   eax,eax
   1bbd8:	75 5a                	jne    1bc34 <fatfs_update_file_length+0x120>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:658
                    {
                        directoryEntry->FileSize = FAT_HTONL(fileLength);
   1bbda:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1bbdd:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   1bbe0:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:662

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
   1bbe3:	6a 01                	push   0x1
   1bbe5:	6a 01                	push   0x1
   1bbe7:	6a 00                	push   0x0
   1bbe9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bbec:	e8 eb fd ff ff       	call   1b9dc <fatfs_update_timestamps>
   1bbf1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:666
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
   1bbf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bbf7:	8d 50 44             	lea    edx,[eax+0x44]
   1bbfa:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1bbfe:	01 d0                	add    eax,edx
   1bc00:	83 ec 04             	sub    esp,0x4
   1bc03:	6a 20                	push   0x20
   1bc05:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bc08:	50                   	push   eax
   1bc09:	e8 92 9d 00 00       	call   259a0 <memcpy>
   1bc0e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:669

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1bc11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bc14:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1bc17:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1bc1a:	8d 4a 44             	lea    ecx,[edx+0x44]
   1bc1d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1bc20:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1bc26:	83 ec 04             	sub    esp,0x4
   1bc29:	6a 01                	push   0x1
   1bc2b:	51                   	push   ecx
   1bc2c:	52                   	push   edx
   1bc2d:	ff d0                	call   eax
   1bc2f:	83 c4 10             	add    esp,0x10
   1bc32:	eb 1f                	jmp    1bc53 <fatfs_update_file_length+0x13f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:634 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1bc34:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1bc38:	83 c0 01             	add    eax,0x1
   1bc3b:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:634 (discriminator 1)
   1bc3e:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1bc42:	0f 86 22 ff ff ff    	jbe    1bb6a <fatfs_update_file_length+0x56>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:676 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1bc48:	e9 f2 fe ff ff       	jmp    1bb3f <fatfs_update_file_length+0x2b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:675
                    }
                }
            } // End of if
        }
        else
            break;
   1bc4d:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:678
    } // End of while loop

    return 0;
   1bc4e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:679
}
   1bc53:	c9                   	leave  
   1bc54:	c3                   	ret    

0001bc55 <fatfs_mark_file_deleted>:
fatfs_mark_file_deleted():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:687
// fatfs_mark_file_deleted: Find a SFN entry and mark if as deleted
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_mark_file_deleted(struct fatfs *fs, uint32 Cluster, char *shortname)
{
   1bc55:	55                   	push   ebp
   1bc56:	89 e5                	mov    ebp,esp
   1bc58:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:688
    uint8 item=0;
   1bc5b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:689
    uint16 recordoffset = 0;
   1bc5f:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:690
    int x=0;
   1bc65:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:694
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
   1bc6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bc6f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1bc72:	85 c0                	test   eax,eax
   1bc74:	75 0a                	jne    1bc80 <fatfs_mark_file_deleted+0x2b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:695
        return 0;
   1bc76:	b8 00 00 00 00       	mov    eax,0x0
   1bc7b:	e9 11 01 00 00       	jmp    1bd91 <fatfs_mark_file_deleted+0x13c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:701

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1bc80:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1bc83:	8d 50 01             	lea    edx,[eax+0x1]
   1bc86:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1bc89:	6a 00                	push   0x0
   1bc8b:	50                   	push   eax
   1bc8c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1bc8f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1bc92:	e8 d5 f5 ff ff       	call   1b26c <fatfs_sector_reader>
   1bc97:	83 c4 10             	add    esp,0x10
   1bc9a:	85 c0                	test   eax,eax
   1bc9c:	0f 84 e9 00 00 00    	je     1bd8b <fatfs_mark_file_deleted+0x136>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:704
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1bca2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1bca6:	e9 d1 00 00 00       	jmp    1bd7c <fatfs_mark_file_deleted+0x127>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:707
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1bcab:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1bcaf:	c1 e0 05             	shl    eax,0x5
   1bcb2:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:710

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1bcb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bcb9:	8d 50 44             	lea    edx,[eax+0x44]
   1bcbc:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1bcc0:	01 d0                	add    eax,edx
   1bcc2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:714

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1bcc5:	83 ec 0c             	sub    esp,0xc
   1bcc8:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bccb:	e8 aa 36 00 00       	call   1f37a <fatfs_entry_lfn_text>
   1bcd0:	83 c4 10             	add    esp,0x10
   1bcd3:	85 c0                	test   eax,eax
   1bcd5:	0f 85 97 00 00 00    	jne    1bd72 <fatfs_mark_file_deleted+0x11d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:718
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1bcdb:	83 ec 0c             	sub    esp,0xc
   1bcde:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bce1:	e8 b7 36 00 00       	call   1f39d <fatfs_entry_lfn_invalid>
   1bce6:	83 c4 10             	add    esp,0x10
   1bce9:	85 c0                	test   eax,eax
   1bceb:	0f 85 81 00 00 00    	jne    1bd72 <fatfs_mark_file_deleted+0x11d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:724
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   1bcf1:	83 ec 0c             	sub    esp,0xc
   1bcf4:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bcf7:	e8 3c 37 00 00       	call   1f438 <fatfs_entry_sfn_only>
   1bcfc:	83 c4 10             	add    esp,0x10
   1bcff:	85 c0                	test   eax,eax
   1bd01:	74 6f                	je     1bd72 <fatfs_mark_file_deleted+0x11d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:726
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
   1bd03:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1bd06:	83 ec 04             	sub    esp,0x4
   1bd09:	6a 0b                	push   0xb
   1bd0b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1bd0e:	50                   	push   eax
   1bd0f:	e8 f8 5e ff ff       	call   11c0c <strncmp>
   1bd14:	83 c4 10             	add    esp,0x10
   1bd17:	85 c0                	test   eax,eax
   1bd19:	75 57                	jne    1bd72 <fatfs_mark_file_deleted+0x11d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:729
                    {
                        // Mark as deleted
                        directoryEntry->Name[0] = FILE_HEADER_DELETED;
   1bd1b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1bd1e:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:733

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
   1bd21:	6a 01                	push   0x1
   1bd23:	6a 01                	push   0x1
   1bd25:	6a 00                	push   0x0
   1bd27:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bd2a:	e8 ad fc ff ff       	call   1b9dc <fatfs_update_timestamps>
   1bd2f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:737
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
   1bd32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bd35:	8d 50 44             	lea    edx,[eax+0x44]
   1bd38:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1bd3c:	01 d0                	add    eax,edx
   1bd3e:	83 ec 04             	sub    esp,0x4
   1bd41:	6a 20                	push   0x20
   1bd43:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bd46:	50                   	push   eax
   1bd47:	e8 54 9c 00 00       	call   259a0 <memcpy>
   1bd4c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:740

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1bd4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bd52:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1bd55:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1bd58:	8d 4a 44             	lea    ecx,[edx+0x44]
   1bd5b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1bd5e:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1bd64:	83 ec 04             	sub    esp,0x4
   1bd67:	6a 01                	push   0x1
   1bd69:	51                   	push   ecx
   1bd6a:	52                   	push   edx
   1bd6b:	ff d0                	call   eax
   1bd6d:	83 c4 10             	add    esp,0x10
   1bd70:	eb 1f                	jmp    1bd91 <fatfs_mark_file_deleted+0x13c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:704 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1bd72:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1bd76:	83 c0 01             	add    eax,0x1
   1bd79:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:704 (discriminator 1)
   1bd7c:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1bd80:	0f 86 25 ff ff ff    	jbe    1bcab <fatfs_mark_file_deleted+0x56>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:747 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1bd86:	e9 f5 fe ff ff       	jmp    1bc80 <fatfs_mark_file_deleted+0x2b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:746
                    }
                }
            } // End of if
        }
        else
            break;
   1bd8b:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:749
    } // End of while loop

    return 0;
   1bd8c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:750
}
   1bd91:	c9                   	leave  
   1bd92:	c3                   	ret    

0001bd93 <fatfs_list_directory_start>:
fatfs_list_directory_start():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:757
//-----------------------------------------------------------------------------
// fatfs_list_directory_start: Initialise a directory listing procedure
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fatfs_list_directory_start(struct fatfs *fs, struct fs_dir_list_status *dirls, uint32 StartCluster)
{
   1bd93:	55                   	push   ebp
   1bd94:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:758
    dirls->cluster = StartCluster;
   1bd96:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1bd99:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1bd9c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:759
    dirls->sector = 0;
   1bd9f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1bda2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:760
    dirls->offset = 0;
   1bda8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1bdab:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:761
}
   1bdaf:	90                   	nop
   1bdb0:	5d                   	pop    ebp
   1bdb1:	c3                   	ret    

0001bdb2 <fatfs_list_directory_next>:
fatfs_list_directory_next():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:769
// fatfs_list_directory_next: Get the next entry in the directory.
// Returns: 1 = found, 0 = end of listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fatfs_list_directory_next(struct fatfs *fs, struct fs_dir_list_status *dirls, struct fs_dir_ent *entry)
{
   1bdb2:	55                   	push   ebp
   1bdb3:	89 e5                	mov    ebp,esp
   1bdb5:	81 ec 38 01 00 00    	sub    esp,0x138
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:773
    uint8 i,item;
    uint16 recordoffset;
    struct fat_dir_entry *directoryEntry;
    char *long_filename = NULL;
   1bdbb:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:776
    char short_filename[13];
    struct lfn_cache lfn;
    int dotRequired = 0;
   1bdc2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:777
    int result = 0;
   1bdc9:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:780

    // Initialise LFN cache first
    fatfs_lfn_cache_init(&lfn, 0);
   1bdd0:	83 ec 08             	sub    esp,0x8
   1bdd3:	6a 00                	push   0x0
   1bdd5:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1bddb:	50                   	push   eax
   1bddc:	e8 7f 32 00 00       	call   1f060 <fatfs_lfn_cache_init>
   1bde1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:785

    while (1)
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
   1bde4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1bde7:	8b 10                	mov    edx,DWORD PTR [eax]
   1bde9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1bdec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1bdef:	6a 00                	push   0x0
   1bdf1:	52                   	push   edx
   1bdf2:	50                   	push   eax
   1bdf3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1bdf6:	e8 71 f4 ff ff       	call   1b26c <fatfs_sector_reader>
   1bdfb:	83 c4 10             	add    esp,0x10
   1bdfe:	85 c0                	test   eax,eax
   1be00:	0f 84 56 04 00 00    	je     1c25c <fatfs_list_directory_next+0x4aa>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:788
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1be06:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1be09:	0f b6 40 08          	movzx  eax,BYTE PTR [eax+0x8]
   1be0d:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
   1be10:	e9 24 04 00 00       	jmp    1c239 <fatfs_list_directory_next+0x487>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:791
            {
                // Increase directory offset
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1be15:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1be19:	c1 e0 05             	shl    eax,0x5
   1be1c:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:794

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1be20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1be23:	8d 50 44             	lea    edx,[eax+0x44]
   1be26:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   1be2a:	01 d0                	add    eax,edx
   1be2c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:798

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if ( fatfs_entry_lfn_text(directoryEntry) )
   1be2f:	83 ec 0c             	sub    esp,0xc
   1be32:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1be35:	e8 40 35 00 00       	call   1f37a <fatfs_entry_lfn_text>
   1be3a:	83 c4 10             	add    esp,0x10
   1be3d:	85 c0                	test   eax,eax
   1be3f:	74 24                	je     1be65 <fatfs_list_directory_next+0xb3>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:799
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
   1be41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1be44:	8d 50 44             	lea    edx,[eax+0x44]
   1be47:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   1be4b:	01 d0                	add    eax,edx
   1be4d:	83 ec 08             	sub    esp,0x8
   1be50:	50                   	push   eax
   1be51:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1be57:	50                   	push   eax
   1be58:	e8 59 32 00 00       	call   1f0b6 <fatfs_lfn_cache_entry>
   1be5d:	83 c4 10             	add    esp,0x10
   1be60:	e9 ca 03 00 00       	jmp    1c22f <fatfs_list_directory_next+0x47d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:802

                // If Invalid record found delete any long file name information collated
                else if ( fatfs_entry_lfn_invalid(directoryEntry) )
   1be65:	83 ec 0c             	sub    esp,0xc
   1be68:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1be6b:	e8 2d 35 00 00       	call   1f39d <fatfs_entry_lfn_invalid>
   1be70:	83 c4 10             	add    esp,0x10
   1be73:	85 c0                	test   eax,eax
   1be75:	74 19                	je     1be90 <fatfs_list_directory_next+0xde>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:803
                    fatfs_lfn_cache_init(&lfn, 0);
   1be77:	83 ec 08             	sub    esp,0x8
   1be7a:	6a 00                	push   0x0
   1be7c:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1be82:	50                   	push   eax
   1be83:	e8 d8 31 00 00       	call   1f060 <fatfs_lfn_cache_init>
   1be88:	83 c4 10             	add    esp,0x10
   1be8b:	e9 9f 03 00 00       	jmp    1c22f <fatfs_list_directory_next+0x47d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:806

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
   1be90:	83 ec 08             	sub    esp,0x8
   1be93:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1be96:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1be9c:	50                   	push   eax
   1be9d:	e8 3c 35 00 00       	call   1f3de <fatfs_entry_lfn_exists>
   1bea2:	83 c4 10             	add    esp,0x10
   1bea5:	85 c0                	test   eax,eax
   1bea7:	0f 84 67 01 00 00    	je     1c014 <fatfs_list_directory_next+0x262>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:809
                {
                    // Get text
                    long_filename = fatfs_lfn_cache_get(&lfn);
   1bead:	83 ec 0c             	sub    esp,0xc
   1beb0:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1beb6:	50                   	push   eax
   1beb7:	e8 66 34 00 00       	call   1f322 <fatfs_lfn_cache_get>
   1bebc:	83 c4 10             	add    esp,0x10
   1bebf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:810
                    strncpy(entry->filename, long_filename, FATFS_MAX_LONG_FILENAME-1);
   1bec2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bec5:	83 ec 04             	sub    esp,0x4
   1bec8:	6a 7f                	push   0x7f
   1beca:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1becd:	50                   	push   eax
   1bece:	e8 99 5d ff ff       	call   11c6c <strncpy>
   1bed3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:812

                    if (fatfs_entry_is_dir(directoryEntry))
   1bed6:	83 ec 0c             	sub    esp,0xc
   1bed9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1bedc:	e8 a3 35 00 00       	call   1f484 <fatfs_entry_is_dir>
   1bee1:	83 c4 10             	add    esp,0x10
   1bee4:	85 c0                	test   eax,eax
   1bee6:	74 0c                	je     1bef4 <fatfs_list_directory_next+0x142>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:813
                        entry->is_dir = 1;
   1bee8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1beeb:	c6 80 80 00 00 00 01 	mov    BYTE PTR [eax+0x80],0x1
   1bef2:	eb 0a                	jmp    1befe <fatfs_list_directory_next+0x14c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:815
                    else
                        entry->is_dir = 0;
   1bef4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bef7:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:819

#if FATFS_INC_TIME_DATE_SUPPORT
                    // Get time / dates
                    entry->create_time = ((uint16)directoryEntry->CrtTime[1] << 8) | directoryEntry->CrtTime[0];
   1befe:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bf01:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   1bf05:	0f b6 c0             	movzx  eax,al
   1bf08:	c1 e0 08             	shl    eax,0x8
   1bf0b:	89 c2                	mov    edx,eax
   1bf0d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bf10:	0f b6 40 0e          	movzx  eax,BYTE PTR [eax+0xe]
   1bf14:	0f b6 c0             	movzx  eax,al
   1bf17:	09 d0                	or     eax,edx
   1bf19:	89 c2                	mov    edx,eax
   1bf1b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bf1e:	66 89 90 94 00 00 00 	mov    WORD PTR [eax+0x94],dx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:820
                    entry->create_date = ((uint16)directoryEntry->CrtDate[1] << 8) | directoryEntry->CrtDate[0];
   1bf25:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bf28:	0f b6 40 11          	movzx  eax,BYTE PTR [eax+0x11]
   1bf2c:	0f b6 c0             	movzx  eax,al
   1bf2f:	c1 e0 08             	shl    eax,0x8
   1bf32:	89 c2                	mov    edx,eax
   1bf34:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bf37:	0f b6 40 10          	movzx  eax,BYTE PTR [eax+0x10]
   1bf3b:	0f b6 c0             	movzx  eax,al
   1bf3e:	09 d0                	or     eax,edx
   1bf40:	89 c2                	mov    edx,eax
   1bf42:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bf45:	66 89 90 92 00 00 00 	mov    WORD PTR [eax+0x92],dx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:821
                    entry->access_date = ((uint16)directoryEntry->LstAccDate[1] << 8) | directoryEntry->LstAccDate[0];
   1bf4c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bf4f:	0f b6 40 13          	movzx  eax,BYTE PTR [eax+0x13]
   1bf53:	0f b6 c0             	movzx  eax,al
   1bf56:	c1 e0 08             	shl    eax,0x8
   1bf59:	89 c2                	mov    edx,eax
   1bf5b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bf5e:	0f b6 40 12          	movzx  eax,BYTE PTR [eax+0x12]
   1bf62:	0f b6 c0             	movzx  eax,al
   1bf65:	09 d0                	or     eax,edx
   1bf67:	89 c2                	mov    edx,eax
   1bf69:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bf6c:	66 89 90 8c 00 00 00 	mov    WORD PTR [eax+0x8c],dx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:822
                    entry->write_time  = ((uint16)directoryEntry->WrtTime[1] << 8) | directoryEntry->WrtTime[0];
   1bf73:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bf76:	0f b6 40 17          	movzx  eax,BYTE PTR [eax+0x17]
   1bf7a:	0f b6 c0             	movzx  eax,al
   1bf7d:	c1 e0 08             	shl    eax,0x8
   1bf80:	89 c2                	mov    edx,eax
   1bf82:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bf85:	0f b6 40 16          	movzx  eax,BYTE PTR [eax+0x16]
   1bf89:	0f b6 c0             	movzx  eax,al
   1bf8c:	09 d0                	or     eax,edx
   1bf8e:	89 c2                	mov    edx,eax
   1bf90:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bf93:	66 89 90 8e 00 00 00 	mov    WORD PTR [eax+0x8e],dx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:823
                    entry->write_date  = ((uint16)directoryEntry->WrtDate[1] << 8) | directoryEntry->WrtDate[0];
   1bf9a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bf9d:	0f b6 40 19          	movzx  eax,BYTE PTR [eax+0x19]
   1bfa1:	0f b6 c0             	movzx  eax,al
   1bfa4:	c1 e0 08             	shl    eax,0x8
   1bfa7:	89 c2                	mov    edx,eax
   1bfa9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bfac:	0f b6 40 18          	movzx  eax,BYTE PTR [eax+0x18]
   1bfb0:	0f b6 c0             	movzx  eax,al
   1bfb3:	09 d0                	or     eax,edx
   1bfb5:	89 c2                	mov    edx,eax
   1bfb7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bfba:	66 89 90 90 00 00 00 	mov    WORD PTR [eax+0x90],dx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:826
#endif

                    entry->size = FAT_HTONL(directoryEntry->FileSize);
   1bfc1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bfc4:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1bfc7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bfca:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:827
                    entry->cluster = (FAT_HTONS(directoryEntry->FstClusHI)<<16) | FAT_HTONS(directoryEntry->FstClusLO);
   1bfd0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bfd3:	0f b7 40 14          	movzx  eax,WORD PTR [eax+0x14]
   1bfd7:	0f b7 c0             	movzx  eax,ax
   1bfda:	c1 e0 10             	shl    eax,0x10
   1bfdd:	89 c2                	mov    edx,eax
   1bfdf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bfe2:	0f b7 40 1a          	movzx  eax,WORD PTR [eax+0x1a]
   1bfe6:	0f b7 c0             	movzx  eax,ax
   1bfe9:	09 d0                	or     eax,edx
   1bfeb:	89 c2                	mov    edx,eax
   1bfed:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bff0:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:830

                    // Next starting position
                    dirls->offset = item + 1;
   1bff6:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1bffa:	8d 50 01             	lea    edx,[eax+0x1]
   1bffd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c000:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:831
                    result = 1;
   1c003:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:832
                    return 1;
   1c00a:	b8 01 00 00 00       	mov    eax,0x1
   1c00f:	e9 4c 02 00 00       	jmp    1c260 <fatfs_list_directory_next+0x4ae>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:837
                }
                // Normal Entry, only 8.3 Text
                else
#endif
                if ( fatfs_entry_sfn_only(directoryEntry) )
   1c014:	83 ec 0c             	sub    esp,0xc
   1c017:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c01a:	e8 19 34 00 00       	call   1f438 <fatfs_entry_sfn_only>
   1c01f:	83 c4 10             	add    esp,0x10
   1c022:	85 c0                	test   eax,eax
   1c024:	0f 84 05 02 00 00    	je     1c22f <fatfs_list_directory_next+0x47d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:839
                {
                    fatfs_lfn_cache_init(&lfn, 0);
   1c02a:	83 ec 08             	sub    esp,0x8
   1c02d:	6a 00                	push   0x0
   1c02f:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1c035:	50                   	push   eax
   1c036:	e8 25 30 00 00       	call   1f060 <fatfs_lfn_cache_init>
   1c03b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:841

                    memset(short_filename, 0, sizeof(short_filename));
   1c03e:	83 ec 04             	sub    esp,0x4
   1c041:	6a 0d                	push   0xd
   1c043:	6a 00                	push   0x0
   1c045:	8d 45 d3             	lea    eax,[ebp-0x2d]
   1c048:	50                   	push   eax
   1c049:	e8 5f 8f 00 00       	call   24fad <memset>
   1c04e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:844

                    // Copy name to string
                    for (i=0; i<8; i++)
   1c051:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1c055:	eb 1d                	jmp    1c074 <fatfs_list_directory_next+0x2c2>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:845 (discriminator 3)
                        short_filename[i] = directoryEntry->Name[i];
   1c057:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c05b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   1c05f:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1c062:	0f b6 14 11          	movzx  edx,BYTE PTR [ecx+edx*1]
   1c066:	88 54 05 d3          	mov    BYTE PTR [ebp+eax*1-0x2d],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:844 (discriminator 3)
                    fatfs_lfn_cache_init(&lfn, 0);

                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++)
   1c06a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c06e:	83 c0 01             	add    eax,0x1
   1c071:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:844 (discriminator 1)
   1c074:	80 7d f7 07          	cmp    BYTE PTR [ebp-0x9],0x7
   1c078:	76 dd                	jbe    1c057 <fatfs_list_directory_next+0x2a5>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:848
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
   1c07a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:849
                    for (i=8; i<11; i++)
   1c081:	c6 45 f7 08          	mov    BYTE PTR [ebp-0x9],0x8
   1c085:	eb 36                	jmp    1c0bd <fatfs_list_directory_next+0x30b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:851
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
   1c087:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c08b:	8d 48 01             	lea    ecx,[eax+0x1]
   1c08e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c092:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1c095:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1c099:	88 44 0d d3          	mov    BYTE PTR [ebp+ecx*1-0x2d],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:852
                        if (directoryEntry->Name[i] != ' ')
   1c09d:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c0a1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1c0a4:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1c0a8:	3c 20                	cmp    al,0x20
   1c0aa:	74 07                	je     1c0b3 <fatfs_list_directory_next+0x301>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:853
                            dotRequired = 1;
   1c0ac:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:849 (discriminator 2)
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
   1c0b3:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c0b7:	83 c0 01             	add    eax,0x1
   1c0ba:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:849 (discriminator 1)
   1c0bd:	80 7d f7 0a          	cmp    BYTE PTR [ebp-0x9],0xa
   1c0c1:	76 c4                	jbe    1c087 <fatfs_list_directory_next+0x2d5>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:857
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
   1c0c3:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1c0c7:	74 14                	je     1c0dd <fatfs_list_directory_next+0x32b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:860
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
   1c0c9:	0f b6 45 d3          	movzx  eax,BYTE PTR [ebp-0x2d]
   1c0cd:	3c 2e                	cmp    al,0x2e
   1c0cf:	74 06                	je     1c0d7 <fatfs_list_directory_next+0x325>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:861
                            short_filename[8] = '.';
   1c0d1:	c6 45 db 2e          	mov    BYTE PTR [ebp-0x25],0x2e
   1c0d5:	eb 0a                	jmp    1c0e1 <fatfs_list_directory_next+0x32f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:863
                        else
                            short_filename[8] = ' ';
   1c0d7:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
   1c0db:	eb 04                	jmp    1c0e1 <fatfs_list_directory_next+0x32f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:866
                    }
                    else
                        short_filename[8] = ' ';
   1c0dd:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:868

                    fatfs_get_sfn_display_name(entry->filename, short_filename);
   1c0e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c0e4:	83 ec 08             	sub    esp,0x8
   1c0e7:	8d 55 d3             	lea    edx,[ebp-0x2d]
   1c0ea:	52                   	push   edx
   1c0eb:	50                   	push   eax
   1c0ec:	e8 d7 3f 00 00       	call   200c8 <fatfs_get_sfn_display_name>
   1c0f1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:870

                    if (fatfs_entry_is_dir(directoryEntry))
   1c0f4:	83 ec 0c             	sub    esp,0xc
   1c0f7:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c0fa:	e8 85 33 00 00       	call   1f484 <fatfs_entry_is_dir>
   1c0ff:	83 c4 10             	add    esp,0x10
   1c102:	85 c0                	test   eax,eax
   1c104:	74 0c                	je     1c112 <fatfs_list_directory_next+0x360>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:871
                        entry->is_dir = 1;
   1c106:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c109:	c6 80 80 00 00 00 01 	mov    BYTE PTR [eax+0x80],0x1
   1c110:	eb 0a                	jmp    1c11c <fatfs_list_directory_next+0x36a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:873
                    else
                        entry->is_dir = 0;
   1c112:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c115:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:877

#if FATFS_INC_TIME_DATE_SUPPORT
                    // Get time / dates
                    entry->create_time = ((uint16)directoryEntry->CrtTime[1] << 8) | directoryEntry->CrtTime[0];
   1c11c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c11f:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   1c123:	0f b6 c0             	movzx  eax,al
   1c126:	c1 e0 08             	shl    eax,0x8
   1c129:	89 c2                	mov    edx,eax
   1c12b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c12e:	0f b6 40 0e          	movzx  eax,BYTE PTR [eax+0xe]
   1c132:	0f b6 c0             	movzx  eax,al
   1c135:	09 d0                	or     eax,edx
   1c137:	89 c2                	mov    edx,eax
   1c139:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c13c:	66 89 90 94 00 00 00 	mov    WORD PTR [eax+0x94],dx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:878
                    entry->create_date = ((uint16)directoryEntry->CrtDate[1] << 8) | directoryEntry->CrtDate[0];
   1c143:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c146:	0f b6 40 11          	movzx  eax,BYTE PTR [eax+0x11]
   1c14a:	0f b6 c0             	movzx  eax,al
   1c14d:	c1 e0 08             	shl    eax,0x8
   1c150:	89 c2                	mov    edx,eax
   1c152:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c155:	0f b6 40 10          	movzx  eax,BYTE PTR [eax+0x10]
   1c159:	0f b6 c0             	movzx  eax,al
   1c15c:	09 d0                	or     eax,edx
   1c15e:	89 c2                	mov    edx,eax
   1c160:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c163:	66 89 90 92 00 00 00 	mov    WORD PTR [eax+0x92],dx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:879
                    entry->access_date = ((uint16)directoryEntry->LstAccDate[1] << 8) | directoryEntry->LstAccDate[0];
   1c16a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c16d:	0f b6 40 13          	movzx  eax,BYTE PTR [eax+0x13]
   1c171:	0f b6 c0             	movzx  eax,al
   1c174:	c1 e0 08             	shl    eax,0x8
   1c177:	89 c2                	mov    edx,eax
   1c179:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c17c:	0f b6 40 12          	movzx  eax,BYTE PTR [eax+0x12]
   1c180:	0f b6 c0             	movzx  eax,al
   1c183:	09 d0                	or     eax,edx
   1c185:	89 c2                	mov    edx,eax
   1c187:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c18a:	66 89 90 8c 00 00 00 	mov    WORD PTR [eax+0x8c],dx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:880
                    entry->write_time  = ((uint16)directoryEntry->WrtTime[1] << 8) | directoryEntry->WrtTime[0];
   1c191:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c194:	0f b6 40 17          	movzx  eax,BYTE PTR [eax+0x17]
   1c198:	0f b6 c0             	movzx  eax,al
   1c19b:	c1 e0 08             	shl    eax,0x8
   1c19e:	89 c2                	mov    edx,eax
   1c1a0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c1a3:	0f b6 40 16          	movzx  eax,BYTE PTR [eax+0x16]
   1c1a7:	0f b6 c0             	movzx  eax,al
   1c1aa:	09 d0                	or     eax,edx
   1c1ac:	89 c2                	mov    edx,eax
   1c1ae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c1b1:	66 89 90 8e 00 00 00 	mov    WORD PTR [eax+0x8e],dx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:881
                    entry->write_date  = ((uint16)directoryEntry->WrtDate[1] << 8) | directoryEntry->WrtDate[0];
   1c1b8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c1bb:	0f b6 40 19          	movzx  eax,BYTE PTR [eax+0x19]
   1c1bf:	0f b6 c0             	movzx  eax,al
   1c1c2:	c1 e0 08             	shl    eax,0x8
   1c1c5:	89 c2                	mov    edx,eax
   1c1c7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c1ca:	0f b6 40 18          	movzx  eax,BYTE PTR [eax+0x18]
   1c1ce:	0f b6 c0             	movzx  eax,al
   1c1d1:	09 d0                	or     eax,edx
   1c1d3:	89 c2                	mov    edx,eax
   1c1d5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c1d8:	66 89 90 90 00 00 00 	mov    WORD PTR [eax+0x90],dx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:884
#endif

                    entry->size = FAT_HTONL(directoryEntry->FileSize);
   1c1df:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c1e2:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1c1e5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c1e8:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:885
                    entry->cluster = (FAT_HTONS(directoryEntry->FstClusHI)<<16) | FAT_HTONS(directoryEntry->FstClusLO);
   1c1ee:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c1f1:	0f b7 40 14          	movzx  eax,WORD PTR [eax+0x14]
   1c1f5:	0f b7 c0             	movzx  eax,ax
   1c1f8:	c1 e0 10             	shl    eax,0x10
   1c1fb:	89 c2                	mov    edx,eax
   1c1fd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c200:	0f b7 40 1a          	movzx  eax,WORD PTR [eax+0x1a]
   1c204:	0f b7 c0             	movzx  eax,ax
   1c207:	09 d0                	or     eax,edx
   1c209:	89 c2                	mov    edx,eax
   1c20b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c20e:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:888

                    // Next starting position
                    dirls->offset = item + 1;
   1c214:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1c218:	8d 50 01             	lea    edx,[eax+0x1]
   1c21b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c21e:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:889
                    result = 1;
   1c221:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:890
                    return 1;
   1c228:	b8 01 00 00 00       	mov    eax,0x1
   1c22d:	eb 31                	jmp    1c260 <fatfs_list_directory_next+0x4ae>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:788 (discriminator 2)
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1c22f:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1c233:	83 c0 01             	add    eax,0x1
   1c236:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:788 (discriminator 1)
   1c239:	80 7d f6 0f          	cmp    BYTE PTR [ebp-0xa],0xf
   1c23d:	0f 86 d2 fb ff ff    	jbe    1be15 <fatfs_list_directory_next+0x63>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:895
                    return 1;
                }
            }// end of for

            // If reached end of the dir move onto next sector
            dirls->sector++;
   1c243:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c246:	8b 00                	mov    eax,DWORD PTR [eax]
   1c248:	8d 50 01             	lea    edx,[eax+0x1]
   1c24b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c24e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:896
            dirls->offset = 0;
   1c250:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c253:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:900
        }
        else
            break;
    }
   1c257:	e9 88 fb ff ff       	jmp    1bde4 <fatfs_list_directory_next+0x32>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:899
            // If reached end of the dir move onto next sector
            dirls->sector++;
            dirls->offset = 0;
        }
        else
            break;
   1c25c:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:902
    }

    return result;
   1c25d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_access.c:903 (discriminator 1)
}
   1c260:	c9                   	leave  
   1c261:	c3                   	ret    
   1c262:	66 90                	xchg   ax,ax

0001c264 <fat_list_init>:
fat_list_init():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   1c264:	55                   	push   ebp
   1c265:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   1c267:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c26a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   1c271:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c274:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c27a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:51
}
   1c27c:	90                   	nop
   1c27d:	5d                   	pop    ebp
   1c27e:	c3                   	ret    

0001c27f <fat_list_remove>:
fat_list_remove():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   1c27f:	55                   	push   ebp
   1c280:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   1c282:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c285:	8b 00                	mov    eax,DWORD PTR [eax]
   1c287:	85 c0                	test   eax,eax
   1c289:	75 0d                	jne    1c298 <fat_list_remove+0x19>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   1c28b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c28e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c291:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c294:	89 10                	mov    DWORD PTR [eax],edx
   1c296:	eb 0e                	jmp    1c2a6 <fat_list_remove+0x27>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   1c298:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c29b:	8b 00                	mov    eax,DWORD PTR [eax]
   1c29d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c2a0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   1c2a3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   1c2a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c2a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c2ac:	85 c0                	test   eax,eax
   1c2ae:	75 0d                	jne    1c2bd <fat_list_remove+0x3e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   1c2b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c2b3:	8b 10                	mov    edx,DWORD PTR [eax]
   1c2b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c2b8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   1c2bb:	eb 0d                	jmp    1c2ca <fat_list_remove+0x4b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   1c2bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c2c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c2c3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c2c6:	8b 12                	mov    edx,DWORD PTR [edx]
   1c2c8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:69
}
   1c2ca:	90                   	nop
   1c2cb:	5d                   	pop    ebp
   1c2cc:	c3                   	ret    

0001c2cd <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1c2cd:	55                   	push   ebp
   1c2ce:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   1c2d0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c2d3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c2d6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   1c2d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c2db:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c2de:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c2e1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   1c2e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c2e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c2ea:	85 c0                	test   eax,eax
   1c2ec:	75 0b                	jne    1c2f9 <fat_list_insert_after+0x2c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   1c2ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c2f1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c2f4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   1c2f7:	eb 0b                	jmp    1c304 <fat_list_insert_after+0x37>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   1c2f9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c2fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c2ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c302:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   1c304:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c307:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c30a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:86
}
   1c30d:	90                   	nop
   1c30e:	5d                   	pop    ebp
   1c30f:	c3                   	ret    

0001c310 <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1c310:	55                   	push   ebp
   1c311:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   1c313:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c316:	8b 10                	mov    edx,DWORD PTR [eax]
   1c318:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c31b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   1c31d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c320:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c323:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   1c326:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c329:	8b 00                	mov    eax,DWORD PTR [eax]
   1c32b:	85 c0                	test   eax,eax
   1c32d:	75 0a                	jne    1c339 <fat_list_insert_before+0x29>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   1c32f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c332:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c335:	89 10                	mov    DWORD PTR [eax],edx
   1c337:	eb 0b                	jmp    1c344 <fat_list_insert_before+0x34>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   1c339:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c33c:	8b 00                	mov    eax,DWORD PTR [eax]
   1c33e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c341:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   1c344:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c347:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c34a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:103
}
   1c34c:	90                   	nop
   1c34d:	5d                   	pop    ebp
   1c34e:	c3                   	ret    

0001c34f <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   1c34f:	55                   	push   ebp
   1c350:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   1c352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c355:	8b 00                	mov    eax,DWORD PTR [eax]
   1c357:	85 c0                	test   eax,eax
   1c359:	75 26                	jne    1c381 <fat_list_insert_first+0x32>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   1c35b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c35e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c361:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   1c363:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c366:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c369:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   1c36c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c36f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   1c375:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c378:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   1c37f:	eb 14                	jmp    1c395 <fat_list_insert_first+0x46>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   1c381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c384:	8b 00                	mov    eax,DWORD PTR [eax]
   1c386:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c389:	50                   	push   eax
   1c38a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c38d:	e8 7e ff ff ff       	call   1c310 <fat_list_insert_before>
   1c392:	83 c4 0c             	add    esp,0xc
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:121
}
   1c395:	90                   	nop
   1c396:	c9                   	leave  
   1c397:	c3                   	ret    

0001c398 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   1c398:	55                   	push   ebp
   1c399:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   1c39b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c39e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c3a1:	85 c0                	test   eax,eax
   1c3a3:	75 10                	jne    1c3b5 <fat_list_insert_last+0x1d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   1c3a5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c3a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c3ab:	e8 9f ff ff ff       	call   1c34f <fat_list_insert_first>
   1c3b0:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   1c3b3:	eb 15                	jmp    1c3ca <fat_list_insert_last+0x32>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   1c3b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c3b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c3bb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c3be:	50                   	push   eax
   1c3bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c3c2:	e8 06 ff ff ff       	call   1c2cd <fat_list_insert_after>
   1c3c7:	83 c4 0c             	add    esp,0xc
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:134
}
   1c3ca:	90                   	nop
   1c3cb:	c9                   	leave  
   1c3cc:	c3                   	ret    

0001c3cd <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   1c3cd:	55                   	push   ebp
   1c3ce:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   1c3d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c3d3:	8b 00                	mov    eax,DWORD PTR [eax]
   1c3d5:	85 c0                	test   eax,eax
   1c3d7:	0f 94 c0             	sete   al
   1c3da:	0f b6 c0             	movzx  eax,al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:143
}
   1c3dd:	5d                   	pop    ebp
   1c3de:	c3                   	ret    

0001c3df <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   1c3df:	55                   	push   ebp
   1c3e0:	89 e5                	mov    ebp,esp
   1c3e2:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   1c3e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c3e8:	8b 00                	mov    eax,DWORD PTR [eax]
   1c3ea:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:154
    if (node)
   1c3ed:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1c3f1:	74 0e                	je     1c401 <fat_list_pop_head+0x22>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   1c3f3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   1c3f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c3f9:	e8 81 fe ff ff       	call   1c27f <fat_list_remove>
   1c3fe:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:157

    return node;
   1c401:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:158
}
   1c404:	c9                   	leave  
   1c405:	c3                   	ret    

0001c406 <fatfs_cache_init>:
fatfs_cache_init():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_cache.c:43

//-----------------------------------------------------------------------------
// fatfs_cache_init:
//-----------------------------------------------------------------------------
int fatfs_cache_init(struct fatfs *fs, FL_FILE *file)
{
   1c406:	55                   	push   ebp
   1c407:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_cache.c:54
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
        file->cluster_cache_data[i] = 0;
    }
#endif

    return 1;
   1c409:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_cache.c:55
}
   1c40e:	5d                   	pop    ebp
   1c40f:	c3                   	ret    

0001c410 <fatfs_cache_get_next_cluster>:
fatfs_cache_get_next_cluster():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_cache.c:60
//-----------------------------------------------------------------------------
// fatfs_cache_get_next_cluster:
//-----------------------------------------------------------------------------
int fatfs_cache_get_next_cluster(struct fatfs *fs, FL_FILE *file, uint32 clusterIdx, uint32 *pNextCluster)
{
   1c410:	55                   	push   ebp
   1c411:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_cache.c:71
        *pNextCluster = file->cluster_cache_data[slot];
        return 1;
    }
#endif

    return 0;
   1c413:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_cache.c:72
}
   1c418:	5d                   	pop    ebp
   1c419:	c3                   	ret    

0001c41a <fatfs_cache_set_next_cluster>:
fatfs_cache_set_next_cluster():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_cache.c:77
//-----------------------------------------------------------------------------
// fatfs_cache_set_next_cluster:
//-----------------------------------------------------------------------------
int fatfs_cache_set_next_cluster(struct fatfs *fs, FL_FILE *file, uint32 clusterIdx, uint32 nextCluster)
{
   1c41a:	55                   	push   ebp
   1c41b:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_cache.c:90
        file->cluster_cache_idx[slot] = clusterIdx;
        file->cluster_cache_data[slot] = nextCluster;
    }
#endif

    return 1;
   1c41d:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_cache.c:91
}
   1c422:	5d                   	pop    ebp
   1c423:	c3                   	ret    

0001c424 <fat_list_init>:
fat_list_init():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   1c424:	55                   	push   ebp
   1c425:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   1c427:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c42a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   1c431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c434:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c437:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c43a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:51
}
   1c43c:	90                   	nop
   1c43d:	5d                   	pop    ebp
   1c43e:	c3                   	ret    

0001c43f <fat_list_remove>:
fat_list_remove():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   1c43f:	55                   	push   ebp
   1c440:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   1c442:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c445:	8b 00                	mov    eax,DWORD PTR [eax]
   1c447:	85 c0                	test   eax,eax
   1c449:	75 0d                	jne    1c458 <fat_list_remove+0x19>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   1c44b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c44e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c451:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c454:	89 10                	mov    DWORD PTR [eax],edx
   1c456:	eb 0e                	jmp    1c466 <fat_list_remove+0x27>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   1c458:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c45b:	8b 00                	mov    eax,DWORD PTR [eax]
   1c45d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c460:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   1c463:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   1c466:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c469:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c46c:	85 c0                	test   eax,eax
   1c46e:	75 0d                	jne    1c47d <fat_list_remove+0x3e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   1c470:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c473:	8b 10                	mov    edx,DWORD PTR [eax]
   1c475:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c478:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   1c47b:	eb 0d                	jmp    1c48a <fat_list_remove+0x4b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   1c47d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c480:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c483:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c486:	8b 12                	mov    edx,DWORD PTR [edx]
   1c488:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:69
}
   1c48a:	90                   	nop
   1c48b:	5d                   	pop    ebp
   1c48c:	c3                   	ret    

0001c48d <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1c48d:	55                   	push   ebp
   1c48e:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   1c490:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c493:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c496:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   1c498:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c49b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c49e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c4a1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   1c4a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c4a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c4aa:	85 c0                	test   eax,eax
   1c4ac:	75 0b                	jne    1c4b9 <fat_list_insert_after+0x2c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   1c4ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c4b1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c4b4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   1c4b7:	eb 0b                	jmp    1c4c4 <fat_list_insert_after+0x37>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   1c4b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c4bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c4bf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c4c2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   1c4c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c4c7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c4ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:86
}
   1c4cd:	90                   	nop
   1c4ce:	5d                   	pop    ebp
   1c4cf:	c3                   	ret    

0001c4d0 <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1c4d0:	55                   	push   ebp
   1c4d1:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   1c4d3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c4d6:	8b 10                	mov    edx,DWORD PTR [eax]
   1c4d8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c4db:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   1c4dd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c4e0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c4e3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   1c4e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c4e9:	8b 00                	mov    eax,DWORD PTR [eax]
   1c4eb:	85 c0                	test   eax,eax
   1c4ed:	75 0a                	jne    1c4f9 <fat_list_insert_before+0x29>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   1c4ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c4f2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c4f5:	89 10                	mov    DWORD PTR [eax],edx
   1c4f7:	eb 0b                	jmp    1c504 <fat_list_insert_before+0x34>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   1c4f9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c4fc:	8b 00                	mov    eax,DWORD PTR [eax]
   1c4fe:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c501:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   1c504:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c507:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c50a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:103
}
   1c50c:	90                   	nop
   1c50d:	5d                   	pop    ebp
   1c50e:	c3                   	ret    

0001c50f <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   1c50f:	55                   	push   ebp
   1c510:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   1c512:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c515:	8b 00                	mov    eax,DWORD PTR [eax]
   1c517:	85 c0                	test   eax,eax
   1c519:	75 26                	jne    1c541 <fat_list_insert_first+0x32>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   1c51b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c51e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c521:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   1c523:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c526:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c529:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   1c52c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c52f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   1c535:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c538:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   1c53f:	eb 14                	jmp    1c555 <fat_list_insert_first+0x46>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   1c541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c544:	8b 00                	mov    eax,DWORD PTR [eax]
   1c546:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c549:	50                   	push   eax
   1c54a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c54d:	e8 7e ff ff ff       	call   1c4d0 <fat_list_insert_before>
   1c552:	83 c4 0c             	add    esp,0xc
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:121
}
   1c555:	90                   	nop
   1c556:	c9                   	leave  
   1c557:	c3                   	ret    

0001c558 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   1c558:	55                   	push   ebp
   1c559:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   1c55b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c55e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c561:	85 c0                	test   eax,eax
   1c563:	75 10                	jne    1c575 <fat_list_insert_last+0x1d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   1c565:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c568:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c56b:	e8 9f ff ff ff       	call   1c50f <fat_list_insert_first>
   1c570:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   1c573:	eb 15                	jmp    1c58a <fat_list_insert_last+0x32>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   1c575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c578:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c57b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c57e:	50                   	push   eax
   1c57f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c582:	e8 06 ff ff ff       	call   1c48d <fat_list_insert_after>
   1c587:	83 c4 0c             	add    esp,0xc
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:134
}
   1c58a:	90                   	nop
   1c58b:	c9                   	leave  
   1c58c:	c3                   	ret    

0001c58d <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   1c58d:	55                   	push   ebp
   1c58e:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   1c590:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c593:	8b 00                	mov    eax,DWORD PTR [eax]
   1c595:	85 c0                	test   eax,eax
   1c597:	0f 94 c0             	sete   al
   1c59a:	0f b6 c0             	movzx  eax,al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:143
}
   1c59d:	5d                   	pop    ebp
   1c59e:	c3                   	ret    

0001c59f <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   1c59f:	55                   	push   ebp
   1c5a0:	89 e5                	mov    ebp,esp
   1c5a2:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   1c5a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c5a8:	8b 00                	mov    eax,DWORD PTR [eax]
   1c5aa:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:154
    if (node)
   1c5ad:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1c5b1:	74 0e                	je     1c5c1 <fat_list_pop_head+0x22>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   1c5b3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   1c5b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c5b9:	e8 81 fe ff ff       	call   1c43f <fat_list_remove>
   1c5be:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:157

    return node;
   1c5c1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:158
}
   1c5c4:	c9                   	leave  
   1c5c5:	c3                   	ret    

0001c5c6 <_allocate_file>:
_allocate_file():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:72

//-----------------------------------------------------------------------------
// _allocate_file: Find a slot in the open files buffer for a new file
//-----------------------------------------------------------------------------
static FL_FILE* _allocate_file(void)
{
   1c5c6:	55                   	push   ebp
   1c5c7:	89 e5                	mov    ebp,esp
   1c5c9:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:74
    // Allocate free file
    struct fat_node *node = fat_list_pop_head(&_free_file_list);
   1c5cc:	68 10 eb 09 00       	push   0x9eb10
   1c5d1:	e8 c9 ff ff ff       	call   1c59f <fat_list_pop_head>
   1c5d6:	83 c4 04             	add    esp,0x4
   1c5d9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:77

    // Add to open list
    if (node)
   1c5dc:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1c5e0:	74 10                	je     1c5f2 <_allocate_file+0x2c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:78
        fat_list_insert_last(&_open_file_list, node);
   1c5e2:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   1c5e5:	68 08 eb 09 00       	push   0x9eb08
   1c5ea:	e8 69 ff ff ff       	call   1c558 <fat_list_insert_last>
   1c5ef:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:80

    return fat_list_entry(node, FL_FILE, list_node);
   1c5f2:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1c5f6:	74 0a                	je     1c602 <_allocate_file+0x3c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:80 (discriminator 1)
   1c5f8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1c5fb:	2d 34 03 00 00       	sub    eax,0x334
   1c600:	eb 05                	jmp    1c607 <_allocate_file+0x41>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:80 (discriminator 2)
   1c602:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:81 (discriminator 5)
}
   1c607:	c9                   	leave  
   1c608:	c3                   	ret    

0001c609 <_check_file_open>:
_check_file_open():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:86
//-----------------------------------------------------------------------------
// _check_file_open: Returns true if the file is already open
//-----------------------------------------------------------------------------
static int _check_file_open(FL_FILE* file)
{
   1c609:	55                   	push   ebp
   1c60a:	89 e5                	mov    ebp,esp
   1c60c:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:90
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
   1c60f:	a1 08 eb 09 00       	mov    eax,ds:0x9eb08
   1c614:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1c617:	eb 6f                	jmp    1c688 <_check_file_open+0x7f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:92
    {
        FL_FILE* openFile = fat_list_entry(node, FL_FILE, list_node);
   1c619:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1c61d:	74 0a                	je     1c629 <_check_file_open+0x20>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:92 (discriminator 1)
   1c61f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1c622:	2d 34 03 00 00       	sub    eax,0x334
   1c627:	eb 05                	jmp    1c62e <_check_file_open+0x25>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:92 (discriminator 2)
   1c629:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:92 (discriminator 4)
   1c62e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:95 (discriminator 4)

        // If not the current file
        if (openFile != file)
   1c631:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1c634:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1c637:	74 46                	je     1c67f <_check_file_open+0x76>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:98
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
   1c639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c63c:	8d 50 14             	lea    edx,[eax+0x14]
   1c63f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1c642:	83 c0 14             	add    eax,0x14
   1c645:	83 ec 08             	sub    esp,0x8
   1c648:	52                   	push   edx
   1c649:	50                   	push   eax
   1c64a:	e8 c4 38 00 00       	call   1ff13 <fatfs_compare_names>
   1c64f:	83 c4 10             	add    esp,0x10
   1c652:	85 c0                	test   eax,eax
   1c654:	74 29                	je     1c67f <_check_file_open+0x76>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:98 (discriminator 1)
   1c656:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c659:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1c65f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1c662:	05 94 00 00 00       	add    eax,0x94
   1c667:	83 ec 08             	sub    esp,0x8
   1c66a:	52                   	push   edx
   1c66b:	50                   	push   eax
   1c66c:	e8 a2 38 00 00       	call   1ff13 <fatfs_compare_names>
   1c671:	83 c4 10             	add    esp,0x10
   1c674:	85 c0                	test   eax,eax
   1c676:	74 07                	je     1c67f <_check_file_open+0x76>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:99
                return 1;
   1c678:	b8 01 00 00 00       	mov    eax,0x1
   1c67d:	eb 14                	jmp    1c693 <_check_file_open+0x8a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:90 (discriminator 2)
static int _check_file_open(FL_FILE* file)
{
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
   1c67f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1c682:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c685:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:90 (discriminator 1)
   1c688:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1c68c:	75 8b                	jne    1c619 <_check_file_open+0x10>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:103
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
                return 1;
        }
    }

    return 0;
   1c68e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:104
}
   1c693:	c9                   	leave  
   1c694:	c3                   	ret    

0001c695 <_free_file>:
_free_file():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:109
//-----------------------------------------------------------------------------
// _free_file: Free open file handle
//-----------------------------------------------------------------------------
static void _free_file(FL_FILE* file)
{
   1c695:	55                   	push   ebp
   1c696:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:111
    // Remove from open list
    fat_list_remove(&_open_file_list, &file->list_node);
   1c698:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c69b:	05 34 03 00 00       	add    eax,0x334
   1c6a0:	50                   	push   eax
   1c6a1:	68 08 eb 09 00       	push   0x9eb08
   1c6a6:	e8 94 fd ff ff       	call   1c43f <fat_list_remove>
   1c6ab:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:114

    // Add to free list
    fat_list_insert_last(&_free_file_list, &file->list_node);
   1c6ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c6b1:	05 34 03 00 00       	add    eax,0x334
   1c6b6:	50                   	push   eax
   1c6b7:	68 10 eb 09 00       	push   0x9eb10
   1c6bc:	e8 97 fe ff ff       	call   1c558 <fat_list_insert_last>
   1c6c1:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:115
}
   1c6c4:	90                   	nop
   1c6c5:	c9                   	leave  
   1c6c6:	c3                   	ret    

0001c6c7 <_open_directory>:
_open_directory():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:126
//-----------------------------------------------------------------------------
// _open_directory: Cycle through path string to find the start cluster
// address of the highest subdir.
//-----------------------------------------------------------------------------
static int _open_directory(char *path, uint32 *pathCluster)
{
   1c6c7:	55                   	push   ebp
   1c6c8:	89 e5                	mov    ebp,esp
   1c6ca:	81 ec b8 00 00 00    	sub    esp,0xb8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:134
    char currentfolder[FATFS_MAX_LONG_FILENAME];
    struct fat_dir_entry sfEntry;
    uint32 startcluster;

    // Set starting cluster to root cluster
    startcluster = fatfs_get_root_cluster(&_fs);
   1c6d0:	83 ec 0c             	sub    esp,0xc
   1c6d3:	68 a0 e6 09 00       	push   0x9e6a0
   1c6d8:	e8 ac ef ff ff       	call   1b689 <fatfs_get_root_cluster>
   1c6dd:	83 c4 10             	add    esp,0x10
   1c6e0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:137

    // Find number of levels
    levels = fatfs_total_path_levels(path);
   1c6e3:	83 ec 0c             	sub    esp,0xc
   1c6e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c6e9:	e8 c2 34 00 00       	call   1fbb0 <fatfs_total_path_levels>
   1c6ee:	83 c4 10             	add    esp,0x10
   1c6f1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:140

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   1c6f4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1c6fb:	e9 93 00 00 00       	jmp    1c793 <_open_directory+0xcc>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:142
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
   1c700:	68 80 00 00 00       	push   0x80
   1c705:	8d 85 6c ff ff ff    	lea    eax,[ebp-0x94]
   1c70b:	50                   	push   eax
   1c70c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1c70f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c712:	e8 29 35 00 00       	call   1fc40 <fatfs_get_substring>
   1c717:	83 c4 10             	add    esp,0x10
   1c71a:	83 f8 ff             	cmp    eax,0xffffffff
   1c71d:	75 0a                	jne    1c729 <_open_directory+0x62>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:143
            return 0;
   1c71f:	b8 00 00 00 00       	mov    eax,0x0
   1c724:	e9 86 00 00 00       	jmp    1c7af <_open_directory+0xe8>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:146

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   1c729:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
   1c72f:	50                   	push   eax
   1c730:	8d 85 6c ff ff ff    	lea    eax,[ebp-0x94]
   1c736:	50                   	push   eax
   1c737:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1c73a:	68 a0 e6 09 00       	push   0x9e6a0
   1c73f:	e8 50 ef ff ff       	call   1b694 <fatfs_get_file_entry>
   1c744:	83 c4 10             	add    esp,0x10
   1c747:	85 c0                	test   eax,eax
   1c749:	74 3d                	je     1c788 <_open_directory+0xc1>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:149
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
   1c74b:	83 ec 0c             	sub    esp,0xc
   1c74e:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
   1c754:	50                   	push   eax
   1c755:	e8 2a 2d 00 00       	call   1f484 <fatfs_entry_is_dir>
   1c75a:	83 c4 10             	add    esp,0x10
   1c75d:	85 c0                	test   eax,eax
   1c75f:	74 20                	je     1c781 <_open_directory+0xba>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:150
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   1c761:	0f b7 85 60 ff ff ff 	movzx  eax,WORD PTR [ebp-0xa0]
   1c768:	0f b7 c0             	movzx  eax,ax
   1c76b:	c1 e0 10             	shl    eax,0x10
   1c76e:	89 c2                	mov    edx,eax
   1c770:	0f b7 85 66 ff ff ff 	movzx  eax,WORD PTR [ebp-0x9a]
   1c777:	0f b7 c0             	movzx  eax,ax
   1c77a:	01 d0                	add    eax,edx
   1c77c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   1c77f:	eb 0e                	jmp    1c78f <_open_directory+0xc8>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:152
            else
                return 0;
   1c781:	b8 00 00 00 00       	mov    eax,0x0
   1c786:	eb 27                	jmp    1c7af <_open_directory+0xe8>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:155
        }
        else
            return 0;
   1c788:	b8 00 00 00 00       	mov    eax,0x0
   1c78d:	eb 20                	jmp    1c7af <_open_directory+0xe8>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:140 (discriminator 2)

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   1c78f:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:140 (discriminator 1)
   1c793:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c796:	83 c0 01             	add    eax,0x1
   1c799:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1c79c:	0f 8f 5e ff ff ff    	jg     1c700 <_open_directory+0x39>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:158
        }
        else
            return 0;
    }

    *pathCluster = startcluster;
   1c7a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c7a5:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1c7a8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:159
    return 1;
   1c7aa:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:160 (discriminator 1)
}
   1c7af:	c9                   	leave  
   1c7b0:	c3                   	ret    

0001c7b1 <_create_directory>:
_create_directory():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:166
//-----------------------------------------------------------------------------
// _create_directory: Cycle through path string and create the end directory
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static int _create_directory(char *path)
{
   1c7b1:	55                   	push   ebp
   1c7b2:	89 e5                	mov    ebp,esp
   1c7b4:	53                   	push   ebx
   1c7b5:	83 ec 44             	sub    esp,0x44
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:170
    FL_FILE* file;
    struct fat_dir_entry sfEntry;
    char shortFilename[FAT_SFN_SIZE_FULL];
    int tailNum = 0;
   1c7b8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:174
    int i;

    // Allocate a new file handle
    file = _allocate_file();
   1c7bf:	e8 02 fe ff ff       	call   1c5c6 <_allocate_file>
   1c7c4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:175
    if (!file)
   1c7c7:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   1c7cb:	75 0a                	jne    1c7d7 <_create_directory+0x26>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:176
        return 0;
   1c7cd:	b8 00 00 00 00       	mov    eax,0x0
   1c7d2:	e9 94 03 00 00       	jmp    1cb6b <_create_directory+0x3ba>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:179

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   1c7d7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c7da:	83 c0 14             	add    eax,0x14
   1c7dd:	83 ec 04             	sub    esp,0x4
   1c7e0:	68 80 00 00 00       	push   0x80
   1c7e5:	6a 00                	push   0x0
   1c7e7:	50                   	push   eax
   1c7e8:	e8 c0 87 00 00       	call   24fad <memset>
   1c7ed:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:180
    memset(file->filename, '\0', sizeof(file->filename));
   1c7f0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c7f3:	05 94 00 00 00       	add    eax,0x94
   1c7f8:	83 ec 04             	sub    esp,0x4
   1c7fb:	68 80 00 00 00       	push   0x80
   1c800:	6a 00                	push   0x0
   1c802:	50                   	push   eax
   1c803:	e8 a5 87 00 00       	call   24fad <memset>
   1c808:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:183

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)path, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
   1c80b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c80e:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1c814:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c817:	83 c0 14             	add    eax,0x14
   1c81a:	83 ec 0c             	sub    esp,0xc
   1c81d:	68 80 00 00 00       	push   0x80
   1c822:	52                   	push   edx
   1c823:	68 80 00 00 00       	push   0x80
   1c828:	50                   	push   eax
   1c829:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c82c:	e8 14 35 00 00       	call   1fd45 <fatfs_split_path>
   1c831:	83 c4 20             	add    esp,0x20
   1c834:	83 f8 ff             	cmp    eax,0xffffffff
   1c837:	75 18                	jne    1c851 <_create_directory+0xa0>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:185
    {
        _free_file(file);
   1c839:	83 ec 0c             	sub    esp,0xc
   1c83c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c83f:	e8 51 fe ff ff       	call   1c695 <_free_file>
   1c844:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:186
        return 0;
   1c847:	b8 00 00 00 00       	mov    eax,0x0
   1c84c:	e9 1a 03 00 00       	jmp    1cb6b <_create_directory+0x3ba>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:190
    }

    // Check if file already open
    if (_check_file_open(file))
   1c851:	83 ec 0c             	sub    esp,0xc
   1c854:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c857:	e8 ad fd ff ff       	call   1c609 <_check_file_open>
   1c85c:	83 c4 10             	add    esp,0x10
   1c85f:	85 c0                	test   eax,eax
   1c861:	74 18                	je     1c87b <_create_directory+0xca>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:192
    {
        _free_file(file);
   1c863:	83 ec 0c             	sub    esp,0xc
   1c866:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c869:	e8 27 fe ff ff       	call   1c695 <_free_file>
   1c86e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:193
        return 0;
   1c871:	b8 00 00 00 00       	mov    eax,0x0
   1c876:	e9 f0 02 00 00       	jmp    1cb6b <_create_directory+0x3ba>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:197
    }

    // If file is in the root dir
    if (file->path[0] == 0)
   1c87b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c87e:	0f b6 40 14          	movzx  eax,BYTE PTR [eax+0x14]
   1c882:	84 c0                	test   al,al
   1c884:	75 19                	jne    1c89f <_create_directory+0xee>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:198
        file->parentcluster = fatfs_get_root_cluster(&_fs);
   1c886:	83 ec 0c             	sub    esp,0xc
   1c889:	68 a0 e6 09 00       	push   0x9e6a0
   1c88e:	e8 f6 ed ff ff       	call   1b689 <fatfs_get_root_cluster>
   1c893:	83 c4 10             	add    esp,0x10
   1c896:	89 c2                	mov    edx,eax
   1c898:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c89b:	89 10                	mov    DWORD PTR [eax],edx
   1c89d:	eb 32                	jmp    1c8d1 <_create_directory+0x120>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:202
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
   1c89f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c8a2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1c8a5:	83 c2 14             	add    edx,0x14
   1c8a8:	83 ec 08             	sub    esp,0x8
   1c8ab:	50                   	push   eax
   1c8ac:	52                   	push   edx
   1c8ad:	e8 15 fe ff ff       	call   1c6c7 <_open_directory>
   1c8b2:	83 c4 10             	add    esp,0x10
   1c8b5:	85 c0                	test   eax,eax
   1c8b7:	75 18                	jne    1c8d1 <_create_directory+0x120>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:204
        {
            _free_file(file);
   1c8b9:	83 ec 0c             	sub    esp,0xc
   1c8bc:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c8bf:	e8 d1 fd ff ff       	call   1c695 <_free_file>
   1c8c4:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:205
            return 0;
   1c8c7:	b8 00 00 00 00       	mov    eax,0x0
   1c8cc:	e9 9a 02 00 00       	jmp    1cb6b <_create_directory+0x3ba>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:210
        }
    }

    // Check if same filename exists in directory
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry) == 1)
   1c8d1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c8d4:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1c8da:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c8dd:	8b 00                	mov    eax,DWORD PTR [eax]
   1c8df:	8d 55 cc             	lea    edx,[ebp-0x34]
   1c8e2:	52                   	push   edx
   1c8e3:	51                   	push   ecx
   1c8e4:	50                   	push   eax
   1c8e5:	68 a0 e6 09 00       	push   0x9e6a0
   1c8ea:	e8 a5 ed ff ff       	call   1b694 <fatfs_get_file_entry>
   1c8ef:	83 c4 10             	add    esp,0x10
   1c8f2:	83 f8 01             	cmp    eax,0x1
   1c8f5:	75 18                	jne    1c90f <_create_directory+0x15e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:212
    {
        _free_file(file);
   1c8f7:	83 ec 0c             	sub    esp,0xc
   1c8fa:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c8fd:	e8 93 fd ff ff       	call   1c695 <_free_file>
   1c902:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:213
        return 0;
   1c905:	b8 00 00 00 00       	mov    eax,0x0
   1c90a:	e9 5c 02 00 00       	jmp    1cb6b <_create_directory+0x3ba>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:216
    }

    file->startcluster = 0;
   1c90f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c912:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:219

    // Create the file space for the folder (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
   1c919:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c91c:	83 c0 04             	add    eax,0x4
   1c91f:	6a 01                	push   0x1
   1c921:	50                   	push   eax
   1c922:	6a 01                	push   0x1
   1c924:	68 a0 e6 09 00       	push   0x9e6a0
   1c929:	e8 da 44 00 00       	call   20e08 <fatfs_allocate_free_space>
   1c92e:	83 c4 10             	add    esp,0x10
   1c931:	85 c0                	test   eax,eax
   1c933:	75 18                	jne    1c94d <_create_directory+0x19c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:221
    {
        _free_file(file);
   1c935:	83 ec 0c             	sub    esp,0xc
   1c938:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c93b:	e8 55 fd ff ff       	call   1c695 <_free_file>
   1c940:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:222
        return 0;
   1c943:	b8 00 00 00 00       	mov    eax,0x0
   1c948:	e9 1e 02 00 00       	jmp    1cb6b <_create_directory+0x3ba>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:226
    }

    // Erase new directory cluster
    memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
   1c94d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c950:	05 28 01 00 00       	add    eax,0x128
   1c955:	83 ec 04             	sub    esp,0x4
   1c958:	68 00 02 00 00       	push   0x200
   1c95d:	6a 00                	push   0x0
   1c95f:	50                   	push   eax
   1c960:	e8 48 86 00 00       	call   24fad <memset>
   1c965:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:227
    for (i=0;i<_fs.sectors_per_cluster;i++)
   1c968:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   1c96f:	eb 42                	jmp    1c9b3 <_create_directory+0x202>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:229
    {
        if (!fatfs_write_sector(&_fs, file->startcluster, i, file->file_data_sector))
   1c971:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c974:	8d 88 28 01 00 00    	lea    ecx,[eax+0x128]
   1c97a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1c97d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c980:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c983:	51                   	push   ecx
   1c984:	52                   	push   edx
   1c985:	50                   	push   eax
   1c986:	68 a0 e6 09 00       	push   0x9e6a0
   1c98b:	e8 31 eb ff ff       	call   1b4c1 <fatfs_write_sector>
   1c990:	83 c4 10             	add    esp,0x10
   1c993:	85 c0                	test   eax,eax
   1c995:	75 18                	jne    1c9af <_create_directory+0x1fe>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:231
        {
            _free_file(file);
   1c997:	83 ec 0c             	sub    esp,0xc
   1c99a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c99d:	e8 f3 fc ff ff       	call   1c695 <_free_file>
   1c9a2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:232
            return 0;
   1c9a5:	b8 00 00 00 00       	mov    eax,0x0
   1c9aa:	e9 bc 01 00 00       	jmp    1cb6b <_create_directory+0x3ba>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:227 (discriminator 2)
        return 0;
    }

    // Erase new directory cluster
    memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
    for (i=0;i<_fs.sectors_per_cluster;i++)
   1c9af:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:227 (discriminator 1)
   1c9b3:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1c9ba:	0f b6 c0             	movzx  eax,al
   1c9bd:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   1c9c0:	7f af                	jg     1c971 <_create_directory+0x1c0>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:239
    }

#if FATFS_INC_LFN_SUPPORT

    // Generate a short filename & tail
    tailNum = 0;
   1c9c2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:243
    do
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);
   1c9c9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c9cc:	05 94 00 00 00       	add    eax,0x94
   1c9d1:	83 ec 08             	sub    esp,0x8
   1c9d4:	50                   	push   eax
   1c9d5:	8d 45 c1             	lea    eax,[ebp-0x3f]
   1c9d8:	50                   	push   eax
   1c9d9:	e8 66 2d 00 00       	call   1f744 <fatfs_lfn_create_sfn>
   1c9de:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:246

        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
   1c9e1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1c9e5:	74 1f                	je     1ca06 <_create_directory+0x255>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:247
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
   1c9e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1c9ea:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1c9ed:	81 c2 14 01 00 00    	add    edx,0x114
   1c9f3:	83 ec 04             	sub    esp,0x4
   1c9f6:	50                   	push   eax
   1c9f7:	8d 45 c1             	lea    eax,[ebp-0x3f]
   1c9fa:	50                   	push   eax
   1c9fb:	52                   	push   edx
   1c9fc:	e8 c9 2f 00 00       	call   1f9ca <fatfs_lfn_generate_tail>
   1ca01:	83 c4 10             	add    esp,0x10
   1ca04:	eb 1b                	jmp    1ca21 <_create_directory+0x270>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:250
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
   1ca06:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ca09:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1ca0f:	83 ec 04             	sub    esp,0x4
   1ca12:	6a 0b                	push   0xb
   1ca14:	8d 45 c1             	lea    eax,[ebp-0x3f]
   1ca17:	50                   	push   eax
   1ca18:	52                   	push   edx
   1ca19:	e8 82 8f 00 00       	call   259a0 <memcpy>
   1ca1e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:253

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
   1ca21:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ca24:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1ca2a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ca2d:	8b 00                	mov    eax,DWORD PTR [eax]
   1ca2f:	83 ec 04             	sub    esp,0x4
   1ca32:	52                   	push   edx
   1ca33:	50                   	push   eax
   1ca34:	68 a0 e6 09 00       	push   0x9e6a0
   1ca39:	e8 d3 ee ff ff       	call   1b911 <fatfs_sfn_exists>
   1ca3e:	83 c4 10             	add    esp,0x10
   1ca41:	85 c0                	test   eax,eax
   1ca43:	74 13                	je     1ca58 <_create_directory+0x2a7>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:256
            break;

        tailNum++;
   1ca45:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:258
    }
    while (tailNum < 9999);
   1ca49:	81 7d f4 0e 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270e
   1ca50:	0f 8e 73 ff ff ff    	jle    1c9c9 <_create_directory+0x218>
   1ca56:	eb 01                	jmp    1ca59 <_create_directory+0x2a8>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:254
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
            break;
   1ca58:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:261
        tailNum++;
    }
    while (tailNum < 9999);

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
   1ca59:	81 7d f4 0f 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270f
   1ca60:	75 2f                	jne    1ca91 <_create_directory+0x2e0>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:264
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1ca62:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ca65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1ca68:	83 ec 08             	sub    esp,0x8
   1ca6b:	50                   	push   eax
   1ca6c:	68 a0 e6 09 00       	push   0x9e6a0
   1ca71:	e8 d8 40 00 00       	call   20b4e <fatfs_free_cluster_chain>
   1ca76:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:266

        _free_file(file);
   1ca79:	83 ec 0c             	sub    esp,0xc
   1ca7c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1ca7f:	e8 11 fc ff ff       	call   1c695 <_free_file>
   1ca84:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:267
        return 0;
   1ca87:	b8 00 00 00 00       	mov    eax,0x0
   1ca8c:	e9 da 00 00 00       	jmp    1cb6b <_create_directory+0x3ba>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:295
        return 0;
    }
#endif

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 1))
   1ca91:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ca94:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1ca97:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ca9a:	8d 98 14 01 00 00    	lea    ebx,[eax+0x114]
   1caa0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1caa3:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1caa9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1caac:	8b 00                	mov    eax,DWORD PTR [eax]
   1caae:	83 ec 04             	sub    esp,0x4
   1cab1:	6a 01                	push   0x1
   1cab3:	6a 00                	push   0x0
   1cab5:	52                   	push   edx
   1cab6:	53                   	push   ebx
   1cab7:	51                   	push   ecx
   1cab8:	50                   	push   eax
   1cab9:	68 a0 e6 09 00       	push   0x9e6a0
   1cabe:	e8 5d 46 00 00       	call   21120 <fatfs_add_file_entry>
   1cac3:	83 c4 20             	add    esp,0x20
   1cac6:	85 c0                	test   eax,eax
   1cac8:	75 2c                	jne    1caf6 <_create_directory+0x345>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:298
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1caca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cacd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1cad0:	83 ec 08             	sub    esp,0x8
   1cad3:	50                   	push   eax
   1cad4:	68 a0 e6 09 00       	push   0x9e6a0
   1cad9:	e8 70 40 00 00       	call   20b4e <fatfs_free_cluster_chain>
   1cade:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:300

        _free_file(file);
   1cae1:	83 ec 0c             	sub    esp,0xc
   1cae4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cae7:	e8 a9 fb ff ff       	call   1c695 <_free_file>
   1caec:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:301
        return 0;
   1caef:	b8 00 00 00 00       	mov    eax,0x0
   1caf4:	eb 75                	jmp    1cb6b <_create_directory+0x3ba>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:305
    }

    // General
    file->filelength = 0;
   1caf6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1caf9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:306
    file->bytenum = 0;
   1cb00:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb03:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:307
    file->file_data_address = 0xFFFFFFFF;
   1cb0a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb0d:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1cb14:	ff ff ff 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:308
    file->file_data_dirty = 0;
   1cb17:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb1a:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1cb21:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:309
    file->filelength_changed = 0;
   1cb24:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb27:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:312

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
   1cb2e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb31:	c7 80 20 01 00 00 ff 	mov    DWORD PTR [eax+0x120],0xffffffff
   1cb38:	ff ff ff 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:313
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
   1cb3b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb3e:	c7 80 24 01 00 00 ff 	mov    DWORD PTR [eax+0x124],0xffffffff
   1cb45:	ff ff ff 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:315

    fatfs_fat_purge(&_fs);
   1cb48:	83 ec 0c             	sub    esp,0xc
   1cb4b:	68 a0 e6 09 00       	push   0x9e6a0
   1cb50:	e8 5f 3a 00 00       	call   205b4 <fatfs_fat_purge>
   1cb55:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:317

    _free_file(file);
   1cb58:	83 ec 0c             	sub    esp,0xc
   1cb5b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cb5e:	e8 32 fb ff ff       	call   1c695 <_free_file>
   1cb63:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:318
    return 1;
   1cb66:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:319 (discriminator 1)
}
   1cb6b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1cb6e:	c9                   	leave  
   1cb6f:	c3                   	ret    

0001cb70 <_open_file>:
_open_file():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:325
#endif
//-----------------------------------------------------------------------------
// _open_file: Open a file for reading
//-----------------------------------------------------------------------------
static FL_FILE* _open_file(const char *path)
{
   1cb70:	55                   	push   ebp
   1cb71:	89 e5                	mov    ebp,esp
   1cb73:	83 ec 38             	sub    esp,0x38
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:330
    FL_FILE* file;
    struct fat_dir_entry sfEntry;

    // Allocate a new file handle
    file = _allocate_file();
   1cb76:	e8 4b fa ff ff       	call   1c5c6 <_allocate_file>
   1cb7b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:331
    if (!file)
   1cb7e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1cb82:	75 0a                	jne    1cb8e <_open_file+0x1e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:332
        return NULL;
   1cb84:	b8 00 00 00 00       	mov    eax,0x0
   1cb89:	e9 fc 01 00 00       	jmp    1cd8a <_open_file+0x21a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:335

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   1cb8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cb91:	83 c0 14             	add    eax,0x14
   1cb94:	83 ec 04             	sub    esp,0x4
   1cb97:	68 80 00 00 00       	push   0x80
   1cb9c:	6a 00                	push   0x0
   1cb9e:	50                   	push   eax
   1cb9f:	e8 09 84 00 00       	call   24fad <memset>
   1cba4:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:336
    memset(file->filename, '\0', sizeof(file->filename));
   1cba7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cbaa:	05 94 00 00 00       	add    eax,0x94
   1cbaf:	83 ec 04             	sub    esp,0x4
   1cbb2:	68 80 00 00 00       	push   0x80
   1cbb7:	6a 00                	push   0x0
   1cbb9:	50                   	push   eax
   1cbba:	e8 ee 83 00 00       	call   24fad <memset>
   1cbbf:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:339

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)path, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
   1cbc2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cbc5:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1cbcb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cbce:	83 c0 14             	add    eax,0x14
   1cbd1:	83 ec 0c             	sub    esp,0xc
   1cbd4:	68 80 00 00 00       	push   0x80
   1cbd9:	52                   	push   edx
   1cbda:	68 80 00 00 00       	push   0x80
   1cbdf:	50                   	push   eax
   1cbe0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1cbe3:	e8 5d 31 00 00       	call   1fd45 <fatfs_split_path>
   1cbe8:	83 c4 20             	add    esp,0x20
   1cbeb:	83 f8 ff             	cmp    eax,0xffffffff
   1cbee:	75 18                	jne    1cc08 <_open_file+0x98>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:341
    {
        _free_file(file);
   1cbf0:	83 ec 0c             	sub    esp,0xc
   1cbf3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1cbf6:	e8 9a fa ff ff       	call   1c695 <_free_file>
   1cbfb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:342
        return NULL;
   1cbfe:	b8 00 00 00 00       	mov    eax,0x0
   1cc03:	e9 82 01 00 00       	jmp    1cd8a <_open_file+0x21a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:346
    }

    // Check if file already open
    if (_check_file_open(file))
   1cc08:	83 ec 0c             	sub    esp,0xc
   1cc0b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1cc0e:	e8 f6 f9 ff ff       	call   1c609 <_check_file_open>
   1cc13:	83 c4 10             	add    esp,0x10
   1cc16:	85 c0                	test   eax,eax
   1cc18:	74 18                	je     1cc32 <_open_file+0xc2>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:348
    {
        _free_file(file);
   1cc1a:	83 ec 0c             	sub    esp,0xc
   1cc1d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1cc20:	e8 70 fa ff ff       	call   1c695 <_free_file>
   1cc25:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:349
        return NULL;
   1cc28:	b8 00 00 00 00       	mov    eax,0x0
   1cc2d:	e9 58 01 00 00       	jmp    1cd8a <_open_file+0x21a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:353
    }

    // If file is in the root dir
    if (file->path[0]==0)
   1cc32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cc35:	0f b6 40 14          	movzx  eax,BYTE PTR [eax+0x14]
   1cc39:	84 c0                	test   al,al
   1cc3b:	75 19                	jne    1cc56 <_open_file+0xe6>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:354
        file->parentcluster = fatfs_get_root_cluster(&_fs);
   1cc3d:	83 ec 0c             	sub    esp,0xc
   1cc40:	68 a0 e6 09 00       	push   0x9e6a0
   1cc45:	e8 3f ea ff ff       	call   1b689 <fatfs_get_root_cluster>
   1cc4a:	83 c4 10             	add    esp,0x10
   1cc4d:	89 c2                	mov    edx,eax
   1cc4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cc52:	89 10                	mov    DWORD PTR [eax],edx
   1cc54:	eb 32                	jmp    1cc88 <_open_file+0x118>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:358
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
   1cc56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cc59:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1cc5c:	83 c2 14             	add    edx,0x14
   1cc5f:	83 ec 08             	sub    esp,0x8
   1cc62:	50                   	push   eax
   1cc63:	52                   	push   edx
   1cc64:	e8 5e fa ff ff       	call   1c6c7 <_open_directory>
   1cc69:	83 c4 10             	add    esp,0x10
   1cc6c:	85 c0                	test   eax,eax
   1cc6e:	75 18                	jne    1cc88 <_open_file+0x118>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:360
        {
            _free_file(file);
   1cc70:	83 ec 0c             	sub    esp,0xc
   1cc73:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1cc76:	e8 1a fa ff ff       	call   1c695 <_free_file>
   1cc7b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:361
            return NULL;
   1cc7e:	b8 00 00 00 00       	mov    eax,0x0
   1cc83:	e9 02 01 00 00       	jmp    1cd8a <_open_file+0x21a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:366
        }
    }

    // Using dir cluster address search for filename
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry))
   1cc88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cc8b:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1cc91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cc94:	8b 00                	mov    eax,DWORD PTR [eax]
   1cc96:	8d 55 d4             	lea    edx,[ebp-0x2c]
   1cc99:	52                   	push   edx
   1cc9a:	51                   	push   ecx
   1cc9b:	50                   	push   eax
   1cc9c:	68 a0 e6 09 00       	push   0x9e6a0
   1cca1:	e8 ee e9 ff ff       	call   1b694 <fatfs_get_file_entry>
   1cca6:	83 c4 10             	add    esp,0x10
   1cca9:	85 c0                	test   eax,eax
   1ccab:	0f 84 c6 00 00 00    	je     1cd77 <_open_file+0x207>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:368
        // Make sure entry is file not dir!
        if (fatfs_entry_is_file(&sfEntry))
   1ccb1:	83 ec 0c             	sub    esp,0xc
   1ccb4:	8d 45 d4             	lea    eax,[ebp-0x2c]
   1ccb7:	50                   	push   eax
   1ccb8:	e8 e9 27 00 00       	call   1f4a6 <fatfs_entry_is_file>
   1ccbd:	83 c4 10             	add    esp,0x10
   1ccc0:	85 c0                	test   eax,eax
   1ccc2:	0f 84 af 00 00 00    	je     1cd77 <_open_file+0x207>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:371
        {
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
   1ccc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cccb:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1ccd1:	83 ec 04             	sub    esp,0x4
   1ccd4:	6a 0b                	push   0xb
   1ccd6:	8d 45 d4             	lea    eax,[ebp-0x2c]
   1ccd9:	50                   	push   eax
   1ccda:	52                   	push   edx
   1ccdb:	e8 c0 8c 00 00       	call   259a0 <memcpy>
   1cce0:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:372
            file->filelength = FAT_HTONL(sfEntry.FileSize);
   1cce3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1cce6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cce9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:373
            file->bytenum = 0;
   1ccec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ccef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:374
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   1ccf6:	0f b7 45 e8          	movzx  eax,WORD PTR [ebp-0x18]
   1ccfa:	0f b7 c0             	movzx  eax,ax
   1ccfd:	c1 e0 10             	shl    eax,0x10
   1cd00:	89 c2                	mov    edx,eax
   1cd02:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1cd06:	0f b7 c0             	movzx  eax,ax
   1cd09:	01 c2                	add    edx,eax
   1cd0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cd0e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:375
            file->file_data_address = 0xFFFFFFFF;
   1cd11:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cd14:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1cd1b:	ff ff ff 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:376
            file->file_data_dirty = 0;
   1cd1e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cd21:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1cd28:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:377
            file->filelength_changed = 0;
   1cd2b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cd2e:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:380

            // Quick lookup for next link in the chain
            file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
   1cd35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cd38:	c7 80 20 01 00 00 ff 	mov    DWORD PTR [eax+0x120],0xffffffff
   1cd3f:	ff ff ff 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:381
            file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
   1cd42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cd45:	c7 80 24 01 00 00 ff 	mov    DWORD PTR [eax+0x124],0xffffffff
   1cd4c:	ff ff ff 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:383

            fatfs_cache_init(&_fs, file);
   1cd4f:	83 ec 08             	sub    esp,0x8
   1cd52:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1cd55:	68 a0 e6 09 00       	push   0x9e6a0
   1cd5a:	e8 a7 f6 ff ff       	call   1c406 <fatfs_cache_init>
   1cd5f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:385

            fatfs_fat_purge(&_fs);
   1cd62:	83 ec 0c             	sub    esp,0xc
   1cd65:	68 a0 e6 09 00       	push   0x9e6a0
   1cd6a:	e8 45 38 00 00       	call   205b4 <fatfs_fat_purge>
   1cd6f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:387

            return file;
   1cd72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cd75:	eb 13                	jmp    1cd8a <_open_file+0x21a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:390
        }

    _free_file(file);
   1cd77:	83 ec 0c             	sub    esp,0xc
   1cd7a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1cd7d:	e8 13 f9 ff ff       	call   1c695 <_free_file>
   1cd82:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:391
    return NULL;
   1cd85:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:392 (discriminator 1)
}
   1cd8a:	c9                   	leave  
   1cd8b:	c3                   	ret    

0001cd8c <_create_file>:
_create_file():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:398
//-----------------------------------------------------------------------------
// _create_file: Create a new file
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static FL_FILE* _create_file(const char *filename)
{
   1cd8c:	55                   	push   ebp
   1cd8d:	89 e5                	mov    ebp,esp
   1cd8f:	53                   	push   ebx
   1cd90:	83 ec 44             	sub    esp,0x44
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:402
    FL_FILE* file;
    struct fat_dir_entry sfEntry;
    char shortFilename[FAT_SFN_SIZE_FULL];
    int tailNum = 0;
   1cd93:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:405

    // No write access?
    if (!_fs.disk_io.write_media)
   1cd9a:	a1 d8 e6 09 00       	mov    eax,ds:0x9e6d8
   1cd9f:	85 c0                	test   eax,eax
   1cda1:	75 0a                	jne    1cdad <_create_file+0x21>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:406
        return NULL;
   1cda3:	b8 00 00 00 00       	mov    eax,0x0
   1cda8:	e9 3a 03 00 00       	jmp    1d0e7 <_create_file+0x35b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:409

    // Allocate a new file handle
    file = _allocate_file();
   1cdad:	e8 14 f8 ff ff       	call   1c5c6 <_allocate_file>
   1cdb2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:410
    if (!file)
   1cdb5:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1cdb9:	75 0a                	jne    1cdc5 <_create_file+0x39>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:411
        return NULL;
   1cdbb:	b8 00 00 00 00       	mov    eax,0x0
   1cdc0:	e9 22 03 00 00       	jmp    1d0e7 <_create_file+0x35b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:414

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   1cdc5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cdc8:	83 c0 14             	add    eax,0x14
   1cdcb:	83 ec 04             	sub    esp,0x4
   1cdce:	68 80 00 00 00       	push   0x80
   1cdd3:	6a 00                	push   0x0
   1cdd5:	50                   	push   eax
   1cdd6:	e8 d2 81 00 00       	call   24fad <memset>
   1cddb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:415
    memset(file->filename, '\0', sizeof(file->filename));
   1cdde:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cde1:	05 94 00 00 00       	add    eax,0x94
   1cde6:	83 ec 04             	sub    esp,0x4
   1cde9:	68 80 00 00 00       	push   0x80
   1cdee:	6a 00                	push   0x0
   1cdf0:	50                   	push   eax
   1cdf1:	e8 b7 81 00 00       	call   24fad <memset>
   1cdf6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:418

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)filename, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
   1cdf9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cdfc:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1ce02:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1ce05:	83 c0 14             	add    eax,0x14
   1ce08:	83 ec 0c             	sub    esp,0xc
   1ce0b:	68 80 00 00 00       	push   0x80
   1ce10:	52                   	push   edx
   1ce11:	68 80 00 00 00       	push   0x80
   1ce16:	50                   	push   eax
   1ce17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ce1a:	e8 26 2f 00 00       	call   1fd45 <fatfs_split_path>
   1ce1f:	83 c4 20             	add    esp,0x20
   1ce22:	83 f8 ff             	cmp    eax,0xffffffff
   1ce25:	75 18                	jne    1ce3f <_create_file+0xb3>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:420
    {
        _free_file(file);
   1ce27:	83 ec 0c             	sub    esp,0xc
   1ce2a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1ce2d:	e8 63 f8 ff ff       	call   1c695 <_free_file>
   1ce32:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:421
        return NULL;
   1ce35:	b8 00 00 00 00       	mov    eax,0x0
   1ce3a:	e9 a8 02 00 00       	jmp    1d0e7 <_create_file+0x35b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:425
    }

    // Check if file already open
    if (_check_file_open(file))
   1ce3f:	83 ec 0c             	sub    esp,0xc
   1ce42:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1ce45:	e8 bf f7 ff ff       	call   1c609 <_check_file_open>
   1ce4a:	83 c4 10             	add    esp,0x10
   1ce4d:	85 c0                	test   eax,eax
   1ce4f:	74 18                	je     1ce69 <_create_file+0xdd>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:427
    {
        _free_file(file);
   1ce51:	83 ec 0c             	sub    esp,0xc
   1ce54:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1ce57:	e8 39 f8 ff ff       	call   1c695 <_free_file>
   1ce5c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:428
        return NULL;
   1ce5f:	b8 00 00 00 00       	mov    eax,0x0
   1ce64:	e9 7e 02 00 00       	jmp    1d0e7 <_create_file+0x35b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:432
    }

    // If file is in the root dir
    if (file->path[0] == 0)
   1ce69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1ce6c:	0f b6 40 14          	movzx  eax,BYTE PTR [eax+0x14]
   1ce70:	84 c0                	test   al,al
   1ce72:	75 19                	jne    1ce8d <_create_file+0x101>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:433
        file->parentcluster = fatfs_get_root_cluster(&_fs);
   1ce74:	83 ec 0c             	sub    esp,0xc
   1ce77:	68 a0 e6 09 00       	push   0x9e6a0
   1ce7c:	e8 08 e8 ff ff       	call   1b689 <fatfs_get_root_cluster>
   1ce81:	83 c4 10             	add    esp,0x10
   1ce84:	89 c2                	mov    edx,eax
   1ce86:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1ce89:	89 10                	mov    DWORD PTR [eax],edx
   1ce8b:	eb 32                	jmp    1cebf <_create_file+0x133>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:437
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
   1ce8d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1ce90:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1ce93:	83 c2 14             	add    edx,0x14
   1ce96:	83 ec 08             	sub    esp,0x8
   1ce99:	50                   	push   eax
   1ce9a:	52                   	push   edx
   1ce9b:	e8 27 f8 ff ff       	call   1c6c7 <_open_directory>
   1cea0:	83 c4 10             	add    esp,0x10
   1cea3:	85 c0                	test   eax,eax
   1cea5:	75 18                	jne    1cebf <_create_file+0x133>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:439
        {
            _free_file(file);
   1cea7:	83 ec 0c             	sub    esp,0xc
   1ceaa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1cead:	e8 e3 f7 ff ff       	call   1c695 <_free_file>
   1ceb2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:440
            return NULL;
   1ceb5:	b8 00 00 00 00       	mov    eax,0x0
   1ceba:	e9 28 02 00 00       	jmp    1d0e7 <_create_file+0x35b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:445
        }
    }

    // Check if same filename exists in directory
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry) == 1)
   1cebf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cec2:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1cec8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cecb:	8b 00                	mov    eax,DWORD PTR [eax]
   1cecd:	8d 55 d0             	lea    edx,[ebp-0x30]
   1ced0:	52                   	push   edx
   1ced1:	51                   	push   ecx
   1ced2:	50                   	push   eax
   1ced3:	68 a0 e6 09 00       	push   0x9e6a0
   1ced8:	e8 b7 e7 ff ff       	call   1b694 <fatfs_get_file_entry>
   1cedd:	83 c4 10             	add    esp,0x10
   1cee0:	83 f8 01             	cmp    eax,0x1
   1cee3:	75 18                	jne    1cefd <_create_file+0x171>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:447
    {
        _free_file(file);
   1cee5:	83 ec 0c             	sub    esp,0xc
   1cee8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1ceeb:	e8 a5 f7 ff ff       	call   1c695 <_free_file>
   1cef0:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:448
        return NULL;
   1cef3:	b8 00 00 00 00       	mov    eax,0x0
   1cef8:	e9 ea 01 00 00       	jmp    1d0e7 <_create_file+0x35b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:451
    }

    file->startcluster = 0;
   1cefd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cf00:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:454

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
   1cf07:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cf0a:	83 c0 04             	add    eax,0x4
   1cf0d:	6a 01                	push   0x1
   1cf0f:	50                   	push   eax
   1cf10:	6a 01                	push   0x1
   1cf12:	68 a0 e6 09 00       	push   0x9e6a0
   1cf17:	e8 ec 3e 00 00       	call   20e08 <fatfs_allocate_free_space>
   1cf1c:	83 c4 10             	add    esp,0x10
   1cf1f:	85 c0                	test   eax,eax
   1cf21:	75 18                	jne    1cf3b <_create_file+0x1af>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:456
    {
        _free_file(file);
   1cf23:	83 ec 0c             	sub    esp,0xc
   1cf26:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1cf29:	e8 67 f7 ff ff       	call   1c695 <_free_file>
   1cf2e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:457
        return NULL;
   1cf31:	b8 00 00 00 00       	mov    eax,0x0
   1cf36:	e9 ac 01 00 00       	jmp    1d0e7 <_create_file+0x35b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:462
    }

#if FATFS_INC_LFN_SUPPORT
    // Generate a short filename & tail
    tailNum = 0;
   1cf3b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:466
    do
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);
   1cf42:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cf45:	05 94 00 00 00       	add    eax,0x94
   1cf4a:	83 ec 08             	sub    esp,0x8
   1cf4d:	50                   	push   eax
   1cf4e:	8d 45 c5             	lea    eax,[ebp-0x3b]
   1cf51:	50                   	push   eax
   1cf52:	e8 ed 27 00 00       	call   1f744 <fatfs_lfn_create_sfn>
   1cf57:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:469

        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
   1cf5a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1cf5e:	74 1f                	je     1cf7f <_create_file+0x1f3>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:470
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
   1cf60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cf63:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1cf66:	81 c2 14 01 00 00    	add    edx,0x114
   1cf6c:	83 ec 04             	sub    esp,0x4
   1cf6f:	50                   	push   eax
   1cf70:	8d 45 c5             	lea    eax,[ebp-0x3b]
   1cf73:	50                   	push   eax
   1cf74:	52                   	push   edx
   1cf75:	e8 50 2a 00 00       	call   1f9ca <fatfs_lfn_generate_tail>
   1cf7a:	83 c4 10             	add    esp,0x10
   1cf7d:	eb 1b                	jmp    1cf9a <_create_file+0x20e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:473
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
   1cf7f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cf82:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1cf88:	83 ec 04             	sub    esp,0x4
   1cf8b:	6a 0b                	push   0xb
   1cf8d:	8d 45 c5             	lea    eax,[ebp-0x3b]
   1cf90:	50                   	push   eax
   1cf91:	52                   	push   edx
   1cf92:	e8 09 8a 00 00       	call   259a0 <memcpy>
   1cf97:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:476

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
   1cf9a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cf9d:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1cfa3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cfa6:	8b 00                	mov    eax,DWORD PTR [eax]
   1cfa8:	83 ec 04             	sub    esp,0x4
   1cfab:	52                   	push   edx
   1cfac:	50                   	push   eax
   1cfad:	68 a0 e6 09 00       	push   0x9e6a0
   1cfb2:	e8 5a e9 ff ff       	call   1b911 <fatfs_sfn_exists>
   1cfb7:	83 c4 10             	add    esp,0x10
   1cfba:	85 c0                	test   eax,eax
   1cfbc:	74 13                	je     1cfd1 <_create_file+0x245>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:479
            break;

        tailNum++;
   1cfbe:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:481
    }
    while (tailNum < 9999);
   1cfc2:	81 7d f4 0e 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270e
   1cfc9:	0f 8e 73 ff ff ff    	jle    1cf42 <_create_file+0x1b6>
   1cfcf:	eb 01                	jmp    1cfd2 <_create_file+0x246>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:477
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
            break;
   1cfd1:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:484
        tailNum++;
    }
    while (tailNum < 9999);

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
   1cfd2:	81 7d f4 0f 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270f
   1cfd9:	75 2f                	jne    1d00a <_create_file+0x27e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:487
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1cfdb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cfde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1cfe1:	83 ec 08             	sub    esp,0x8
   1cfe4:	50                   	push   eax
   1cfe5:	68 a0 e6 09 00       	push   0x9e6a0
   1cfea:	e8 5f 3b 00 00       	call   20b4e <fatfs_free_cluster_chain>
   1cfef:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:489

        _free_file(file);
   1cff2:	83 ec 0c             	sub    esp,0xc
   1cff5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1cff8:	e8 98 f6 ff ff       	call   1c695 <_free_file>
   1cffd:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:490
        return NULL;
   1d000:	b8 00 00 00 00       	mov    eax,0x0
   1d005:	e9 dd 00 00 00       	jmp    1d0e7 <_create_file+0x35b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:518
        return NULL;
    }
#endif

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 0))
   1d00a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d00d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1d010:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d013:	8d 98 14 01 00 00    	lea    ebx,[eax+0x114]
   1d019:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d01c:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1d022:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d025:	8b 00                	mov    eax,DWORD PTR [eax]
   1d027:	83 ec 04             	sub    esp,0x4
   1d02a:	6a 00                	push   0x0
   1d02c:	6a 00                	push   0x0
   1d02e:	52                   	push   edx
   1d02f:	53                   	push   ebx
   1d030:	51                   	push   ecx
   1d031:	50                   	push   eax
   1d032:	68 a0 e6 09 00       	push   0x9e6a0
   1d037:	e8 e4 40 00 00       	call   21120 <fatfs_add_file_entry>
   1d03c:	83 c4 20             	add    esp,0x20
   1d03f:	85 c0                	test   eax,eax
   1d041:	75 2c                	jne    1d06f <_create_file+0x2e3>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:521
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1d043:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d046:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d049:	83 ec 08             	sub    esp,0x8
   1d04c:	50                   	push   eax
   1d04d:	68 a0 e6 09 00       	push   0x9e6a0
   1d052:	e8 f7 3a 00 00       	call   20b4e <fatfs_free_cluster_chain>
   1d057:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:523

        _free_file(file);
   1d05a:	83 ec 0c             	sub    esp,0xc
   1d05d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d060:	e8 30 f6 ff ff       	call   1c695 <_free_file>
   1d065:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:524
        return NULL;
   1d068:	b8 00 00 00 00       	mov    eax,0x0
   1d06d:	eb 78                	jmp    1d0e7 <_create_file+0x35b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:528
    }

    // General
    file->filelength = 0;
   1d06f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d072:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:529
    file->bytenum = 0;
   1d079:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d07c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:530
    file->file_data_address = 0xFFFFFFFF;
   1d083:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d086:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1d08d:	ff ff ff 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:531
    file->file_data_dirty = 0;
   1d090:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d093:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1d09a:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:532
    file->filelength_changed = 0;
   1d09d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d0a0:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:535

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
   1d0a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d0aa:	c7 80 20 01 00 00 ff 	mov    DWORD PTR [eax+0x120],0xffffffff
   1d0b1:	ff ff ff 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:536
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
   1d0b4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d0b7:	c7 80 24 01 00 00 ff 	mov    DWORD PTR [eax+0x124],0xffffffff
   1d0be:	ff ff ff 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:538

    fatfs_cache_init(&_fs, file);
   1d0c1:	83 ec 08             	sub    esp,0x8
   1d0c4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d0c7:	68 a0 e6 09 00       	push   0x9e6a0
   1d0cc:	e8 35 f3 ff ff       	call   1c406 <fatfs_cache_init>
   1d0d1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:540

    fatfs_fat_purge(&_fs);
   1d0d4:	83 ec 0c             	sub    esp,0xc
   1d0d7:	68 a0 e6 09 00       	push   0x9e6a0
   1d0dc:	e8 d3 34 00 00       	call   205b4 <fatfs_fat_purge>
   1d0e1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:542

    return file;
   1d0e4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:543 (discriminator 1)
}
   1d0e7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1d0ea:	c9                   	leave  
   1d0eb:	c3                   	ret    

0001d0ec <_read_sectors>:
_read_sectors():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:549
#endif
//-----------------------------------------------------------------------------
// _read_sectors: Read sector(s) from disk to file
//-----------------------------------------------------------------------------
static uint32 _read_sectors(FL_FILE* file, uint32 offset, uint8 *buffer, uint32 count)
{
   1d0ec:	55                   	push   ebp
   1d0ed:	89 e5                	mov    ebp,esp
   1d0ef:	83 ec 28             	sub    esp,0x28
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:550
    uint32 Sector = 0;
   1d0f2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:551
    uint32 ClusterIdx = 0;
   1d0f9:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:552
    uint32 Cluster = 0;
   1d100:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:557
    uint32 i;
    uint32 lba;

    // Find cluster index within file & sector with cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   1d107:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d10e:	0f b6 c8             	movzx  ecx,al
   1d111:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d114:	ba 00 00 00 00       	mov    edx,0x0
   1d119:	f7 f1                	div    ecx
   1d11b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:558
    Sector = offset - (ClusterIdx * _fs.sectors_per_cluster);
   1d11e:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d125:	0f b6 c0             	movzx  eax,al
   1d128:	0f af 45 e8          	imul   eax,DWORD PTR [ebp-0x18]
   1d12c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1d12f:	29 c2                	sub    edx,eax
   1d131:	89 d0                	mov    eax,edx
   1d133:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:561

    // Limit number of sectors read to the number remaining in this cluster
    if ((Sector + count) > _fs.sectors_per_cluster)
   1d136:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1d139:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d13c:	01 c2                	add    edx,eax
   1d13e:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d145:	0f b6 c0             	movzx  eax,al
   1d148:	39 c2                	cmp    edx,eax
   1d14a:	76 10                	jbe    1d15c <_read_sectors+0x70>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:562
        count = _fs.sectors_per_cluster - Sector;
   1d14c:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d153:	0f b6 c0             	movzx  eax,al
   1d156:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1d159:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:565

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
   1d15c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d15f:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d165:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d168:	75 11                	jne    1d17b <_read_sectors+0x8f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:566
        Cluster = file->last_fat_lookup.CurrentCluster;
   1d16a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d16d:	8b 80 24 01 00 00    	mov    eax,DWORD PTR [eax+0x124]
   1d173:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d176:	e9 bb 00 00 00       	jmp    1d236 <_read_sectors+0x14a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:571
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
   1d17b:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1d17f:	74 2b                	je     1d1ac <_read_sectors+0xc0>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:571 (discriminator 1)
   1d181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d184:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d18a:	83 c0 01             	add    eax,0x1
   1d18d:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d190:	75 1a                	jne    1d1ac <_read_sectors+0xc0>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:573
        {
            i = file->last_fat_lookup.ClusterIdx;
   1d192:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d195:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d19b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:574
            Cluster = file->last_fat_lookup.CurrentCluster;
   1d19e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d1a1:	8b 80 24 01 00 00    	mov    eax,DWORD PTR [eax+0x124]
   1d1a7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d1aa:	eb 10                	jmp    1d1bc <_read_sectors+0xd0>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:580
        }
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
   1d1ac:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:581
            Cluster = file->startcluster;
   1d1b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d1b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d1b9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:585
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1d1bc:	eb 52                	jmp    1d210 <_read_sectors+0x124>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:590
        {
            uint32 nextCluster;

            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))
   1d1be:	8d 45 e0             	lea    eax,[ebp-0x20]
   1d1c1:	50                   	push   eax
   1d1c2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d1c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d1c8:	68 a0 e6 09 00       	push   0x9e6a0
   1d1cd:	e8 3e f2 ff ff       	call   1c410 <fatfs_cache_get_next_cluster>
   1d1d2:	83 c4 10             	add    esp,0x10
   1d1d5:	85 c0                	test   eax,eax
   1d1d7:	75 2d                	jne    1d206 <_read_sectors+0x11a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:593
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
   1d1d9:	83 ec 08             	sub    esp,0x8
   1d1dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d1df:	68 a0 e6 09 00       	push   0x9e6a0
   1d1e4:	e8 21 34 00 00       	call   2060a <fatfs_find_next_cluster>
   1d1e9:	83 c4 10             	add    esp,0x10
   1d1ec:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:596

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
   1d1ef:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1d1f2:	50                   	push   eax
   1d1f3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d1f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d1f9:	68 a0 e6 09 00       	push   0x9e6a0
   1d1fe:	e8 17 f2 ff ff       	call   1c41a <fatfs_cache_set_next_cluster>
   1d203:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:599
            }

            Cluster = nextCluster;
   1d206:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1d209:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:585
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1d20c:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:585 (discriminator 1)
   1d210:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d213:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d216:	72 a6                	jb     1d1be <_read_sectors+0xd2>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:603

            Cluster = nextCluster;
        }

        // Record current cluster lookup details (if valid)
        if (Cluster != FAT32_LAST_CLUSTER)
   1d218:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1d21c:	74 18                	je     1d236 <_read_sectors+0x14a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:605
        {
            file->last_fat_lookup.CurrentCluster = Cluster;
   1d21e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d221:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1d224:	89 90 24 01 00 00    	mov    DWORD PTR [eax+0x124],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:606
            file->last_fat_lookup.ClusterIdx = ClusterIdx;
   1d22a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d22d:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1d230:	89 90 20 01 00 00    	mov    DWORD PTR [eax+0x120],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:611
        }
    }

    // If end of cluster chain then return false
    if (Cluster == FAT32_LAST_CLUSTER)
   1d236:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1d23a:	75 07                	jne    1d243 <_read_sectors+0x157>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:612
        return 0;
   1d23c:	b8 00 00 00 00       	mov    eax,0x0
   1d241:	eb 41                	jmp    1d284 <_read_sectors+0x198>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:615

    // Calculate sector address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + Sector;
   1d243:	83 ec 08             	sub    esp,0x8
   1d246:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d249:	68 a0 e6 09 00       	push   0x9e6a0
   1d24e:	e8 79 df ff ff       	call   1b1cc <fatfs_lba_of_cluster>
   1d253:	83 c4 10             	add    esp,0x10
   1d256:	89 c2                	mov    edx,eax
   1d258:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d25b:	01 d0                	add    eax,edx
   1d25d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:618

    // Read sector of file
    if (fatfs_sector_read(&_fs, lba, buffer, count))
   1d260:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1d263:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1d266:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1d269:	68 a0 e6 09 00       	push   0x9e6a0
   1d26e:	e8 bb df ff ff       	call   1b22e <fatfs_sector_read>
   1d273:	83 c4 10             	add    esp,0x10
   1d276:	85 c0                	test   eax,eax
   1d278:	74 05                	je     1d27f <_read_sectors+0x193>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:619
        return count;
   1d27a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d27d:	eb 05                	jmp    1d284 <_read_sectors+0x198>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:621
    else
        return 0;
   1d27f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:622
}
   1d284:	c9                   	leave  
   1d285:	c3                   	ret    

0001d286 <fl_init>:
fl_init():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:632

//-----------------------------------------------------------------------------
// fl_init: Initialise library
//-----------------------------------------------------------------------------
void __attribute__ ((constructor)) fl_init(void)
{
   1d286:	55                   	push   ebp
   1d287:	89 e5                	mov    ebp,esp
   1d289:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:638
    int i;

    //printk("fl_init: Entered\n");
    
    //printk("fl_init: About to initialize free file list\n");
    fat_list_init(&_free_file_list);
   1d28c:	68 10 eb 09 00       	push   0x9eb10
   1d291:	e8 8e f1 ff ff       	call   1c424 <fat_list_init>
   1d296:	83 c4 04             	add    esp,0x4
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:641
    //printk("fl_init: Initialized free file list\n");
    //printk("fl_init: About to initialize open file list\n");
    fat_list_init(&_open_file_list);
   1d299:	68 08 eb 09 00       	push   0x9eb08
   1d29e:	e8 81 f1 ff ff       	call   1c424 <fat_list_init>
   1d2a3:	83 c4 04             	add    esp,0x4
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:646
    //printk("fl_init: Initialized open file list\n");

    //printk("fl_init: Adding all objects to free list\n");
    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
   1d2a6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1d2ad:	eb 28                	jmp    1d2d7 <fl_init+0x51>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:647 (discriminator 3)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);
   1d2af:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1d2b2:	69 c0 3c 03 00 00    	imul   eax,eax,0x33c
   1d2b8:	05 30 03 00 00       	add    eax,0x330
   1d2bd:	05 e0 a5 09 00       	add    eax,0x9a5e0
   1d2c2:	83 c0 04             	add    eax,0x4
   1d2c5:	50                   	push   eax
   1d2c6:	68 10 eb 09 00       	push   0x9eb10
   1d2cb:	e8 88 f2 ff ff       	call   1c558 <fat_list_insert_last>
   1d2d0:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:646 (discriminator 3)
    fat_list_init(&_open_file_list);
    //printk("fl_init: Initialized open file list\n");

    //printk("fl_init: Adding all objects to free list\n");
    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
   1d2d3:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:646 (discriminator 1)
   1d2d7:	83 7d fc 13          	cmp    DWORD PTR [ebp-0x4],0x13
   1d2db:	7e d2                	jle    1d2af <fl_init+0x29>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:650
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    //printk("fl_init: Returning\n");
    _filelib_init = 1;
   1d2dd:	c7 05 90 e6 09 00 01 	mov    DWORD PTR ds:0x9e690,0x1
   1d2e4:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:651
}
   1d2e7:	90                   	nop
   1d2e8:	c9                   	leave  
   1d2e9:	c3                   	ret    

0001d2ea <fl_attach_locks>:
fl_attach_locks():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:656
//-----------------------------------------------------------------------------
// fl_attach_locks:
//-----------------------------------------------------------------------------
void fl_attach_locks(void (*lock)(void), void (*unlock)(void))
{
   1d2ea:	55                   	push   ebp
   1d2eb:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:657
    _fs.fl_lock = lock;
   1d2ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d2f0:	a3 dc e6 09 00       	mov    ds:0x9e6dc,eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:658
    _fs.fl_unlock = unlock;
   1d2f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d2f8:	a3 e0 e6 09 00       	mov    ds:0x9e6e0,eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:659
}
   1d2fd:	90                   	nop
   1d2fe:	5d                   	pop    ebp
   1d2ff:	c3                   	ret    

0001d300 <fl_attach_media>:
fl_attach_media():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:664
//-----------------------------------------------------------------------------
// fl_attach_media:
//-----------------------------------------------------------------------------
int fl_attach_media(fn_diskio_read rd, fn_diskio_write wr)
{
   1d300:	55                   	push   ebp
   1d301:	89 e5                	mov    ebp,esp
   1d303:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:669
    int res;

    //printk("fl_attach_media: Entered\n");
    // If first call to library, initialise
    CHECK_FL_INIT();
   1d306:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1d30b:	85 c0                	test   eax,eax
   1d30d:	75 05                	jne    1d314 <fl_attach_media+0x14>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:669 (discriminator 1)
   1d30f:	e8 72 ff ff ff       	call   1d286 <fl_init>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:671
    //FAT_PRINTF(("fl_attach_media: CHEKC_FL_INIT returned\n")); //clr
    _fs.disk_io.read_media = rd;
   1d314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d317:	a3 d4 e6 09 00       	mov    ds:0x9e6d4,eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:672
    _fs.disk_io.write_media = wr;
   1d31c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d31f:	a3 d8 e6 09 00       	mov    ds:0x9e6d8,eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:675

    // Initialise FAT parameters
    if ((res = fatfs_init(&_fs)) != FAT_INIT_OK)
   1d324:	83 ec 0c             	sub    esp,0xc
   1d327:	68 a0 e6 09 00       	push   0x9e6a0
   1d32c:	e8 03 d9 ff ff       	call   1ac34 <fatfs_init>
   1d331:	83 c4 10             	add    esp,0x10
   1d334:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d337:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1d33b:	74 18                	je     1d355 <fl_attach_media+0x55>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:677
    {
        FAT_PRINTF(("FAT_FS: Error could not load FAT details (%d)!\r\n", res));
   1d33d:	83 ec 08             	sub    esp,0x8
   1d340:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d343:	68 a8 36 08 00       	push   0x836a8
   1d348:	e8 e6 9c 00 00       	call   27033 <printk>
   1d34d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:678
        return res;
   1d350:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d353:	eb 0f                	jmp    1d364 <fl_attach_media+0x64>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:682
    }

    //FAT_PRINTF(("fl_attach_media: returning valid=1\n")); //clr
    _filelib_valid = 1;
   1d355:	c7 05 94 e6 09 00 01 	mov    DWORD PTR ds:0x9e694,0x1
   1d35c:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:683
    return FAT_INIT_OK;
   1d35f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:684
}
   1d364:	c9                   	leave  
   1d365:	c3                   	ret    

0001d366 <fl_shutdown>:
fl_shutdown():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:689
//-----------------------------------------------------------------------------
// fl_shutdown: Call before shutting down system
//-----------------------------------------------------------------------------
 void __attribute__ ((destructor))fl_shutdown(void)
{
   1d366:	55                   	push   ebp
   1d367:	89 e5                	mov    ebp,esp
   1d369:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:691
    // If first call to library, initialise
    CHECK_FL_INIT();
   1d36c:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1d371:	85 c0                	test   eax,eax
   1d373:	75 05                	jne    1d37a <fl_shutdown+0x14>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:691 (discriminator 1)
   1d375:	e8 0c ff ff ff       	call   1d286 <fl_init>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:693

    FL_LOCK(&_fs);
   1d37a:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d37f:	85 c0                	test   eax,eax
   1d381:	74 07                	je     1d38a <fl_shutdown+0x24>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:693 (discriminator 1)
   1d383:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d388:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:694
    fatfs_fat_purge(&_fs);
   1d38a:	83 ec 0c             	sub    esp,0xc
   1d38d:	68 a0 e6 09 00       	push   0x9e6a0
   1d392:	e8 1d 32 00 00       	call   205b4 <fatfs_fat_purge>
   1d397:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:695
    FL_UNLOCK(&_fs);
   1d39a:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d39f:	85 c0                	test   eax,eax
   1d3a1:	74 07                	je     1d3aa <fl_shutdown+0x44>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:695 (discriminator 1)
   1d3a3:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d3a8:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:696
}
   1d3aa:	90                   	nop
   1d3ab:	c9                   	leave  
   1d3ac:	c3                   	ret    

0001d3ad <fl_fopen>:
fl_fopen():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:701
//-----------------------------------------------------------------------------
// fopen: Open or Create a file for reading or writing
//-----------------------------------------------------------------------------
void* fl_fopen(const char *path, const char *mode)
{
   1d3ad:	55                   	push   ebp
   1d3ae:	89 e5                	mov    ebp,esp
   1d3b0:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:704
    int i;
    FL_FILE* file;
    uint8 flags = 0;
   1d3b3:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:707

    // If first call to library, initialise
    CHECK_FL_INIT();
   1d3b7:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1d3bc:	85 c0                	test   eax,eax
   1d3be:	75 05                	jne    1d3c5 <fl_fopen+0x18>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:707 (discriminator 1)
   1d3c0:	e8 c1 fe ff ff       	call   1d286 <fl_init>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:709

    if (!_filelib_valid)
   1d3c5:	a1 94 e6 09 00       	mov    eax,ds:0x9e694
   1d3ca:	85 c0                	test   eax,eax
   1d3cc:	75 0a                	jne    1d3d8 <fl_fopen+0x2b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:710
        return NULL;
   1d3ce:	b8 00 00 00 00       	mov    eax,0x0
   1d3d3:	e9 8c 01 00 00       	jmp    1d564 <fl_fopen+0x1b7>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:712

    if (!path || !mode)
   1d3d8:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1d3dc:	74 06                	je     1d3e4 <fl_fopen+0x37>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:712 (discriminator 1)
   1d3de:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1d3e2:	75 0a                	jne    1d3ee <fl_fopen+0x41>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:713
        return NULL;
   1d3e4:	b8 00 00 00 00       	mov    eax,0x0
   1d3e9:	e9 76 01 00 00       	jmp    1d564 <fl_fopen+0x1b7>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:733
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations
    //        will move it back to the end of file.
    //        The file is created if it does not exist.

    for (i=0;i<(int)strlen(mode);i++)
   1d3ee:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1d3f5:	e9 93 00 00 00       	jmp    1d48d <fl_fopen+0xe0>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:735
    {
        switch (mode[i])
   1d3fa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1d3fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d400:	01 d0                	add    eax,edx
   1d402:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1d405:	0f be c0             	movsx  eax,al
   1d408:	83 e8 2b             	sub    eax,0x2b
   1d40b:	83 f8 4c             	cmp    eax,0x4c
   1d40e:	77 79                	ja     1d489 <fl_fopen+0xdc>
   1d410:	8b 04 85 dc 36 08 00 	mov    eax,DWORD PTR [eax*4+0x836dc]
   1d417:	ff e0                	jmp    eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:739
        {
        case 'r':
        case 'R':
            flags |= FILE_READ;
   1d419:	80 4d ef 01          	or     BYTE PTR [ebp-0x11],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:740
            break;
   1d41d:	eb 6a                	jmp    1d489 <fl_fopen+0xdc>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:743
        case 'w':
        case 'W':
            flags |= FILE_WRITE;
   1d41f:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:744
            flags |= FILE_ERASE;
   1d423:	80 4d ef 10          	or     BYTE PTR [ebp-0x11],0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:745
            flags |= FILE_CREATE;
   1d427:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:746
            break;
   1d42b:	eb 5c                	jmp    1d489 <fl_fopen+0xdc>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:749
        case 'a':
        case 'A':
            flags |= FILE_WRITE;
   1d42d:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:750
            flags |= FILE_APPEND;
   1d431:	80 4d ef 04          	or     BYTE PTR [ebp-0x11],0x4
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:751
            flags |= FILE_CREATE;
   1d435:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:752
            break;
   1d439:	eb 4e                	jmp    1d489 <fl_fopen+0xdc>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:754
        case '+':
            if (flags & FILE_READ)
   1d43b:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d43f:	83 e0 01             	and    eax,0x1
   1d442:	85 c0                	test   eax,eax
   1d444:	74 06                	je     1d44c <fl_fopen+0x9f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:755
                flags |= FILE_WRITE;
   1d446:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:769
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
            }
            break;
   1d44a:	eb 3c                	jmp    1d488 <fl_fopen+0xdb>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:756
            flags |= FILE_CREATE;
            break;
        case '+':
            if (flags & FILE_READ)
                flags |= FILE_WRITE;
            else if (flags & FILE_WRITE)
   1d44c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d450:	83 e0 02             	and    eax,0x2
   1d453:	85 c0                	test   eax,eax
   1d455:	74 0e                	je     1d465 <fl_fopen+0xb8>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:758
            {
                flags |= FILE_READ;
   1d457:	80 4d ef 01          	or     BYTE PTR [ebp-0x11],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:759
                flags |= FILE_ERASE;
   1d45b:	80 4d ef 10          	or     BYTE PTR [ebp-0x11],0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:760
                flags |= FILE_CREATE;
   1d45f:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:769
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
            }
            break;
   1d463:	eb 23                	jmp    1d488 <fl_fopen+0xdb>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:762
            {
                flags |= FILE_READ;
                flags |= FILE_ERASE;
                flags |= FILE_CREATE;
            }
            else if (flags & FILE_APPEND)
   1d465:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d469:	83 e0 04             	and    eax,0x4
   1d46c:	85 c0                	test   eax,eax
   1d46e:	74 18                	je     1d488 <fl_fopen+0xdb>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:764
            {
                flags |= FILE_READ;
   1d470:	80 4d ef 01          	or     BYTE PTR [ebp-0x11],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:765
                flags |= FILE_WRITE;
   1d474:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:766
                flags |= FILE_APPEND;
   1d478:	80 4d ef 04          	or     BYTE PTR [ebp-0x11],0x4
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:767
                flags |= FILE_CREATE;
   1d47c:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:769
            }
            break;
   1d480:	eb 06                	jmp    1d488 <fl_fopen+0xdb>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:772
        case 'b':
        case 'B':
            flags |= FILE_BINARY;
   1d482:	80 4d ef 08          	or     BYTE PTR [ebp-0x11],0x8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:773
            break;
   1d486:	eb 01                	jmp    1d489 <fl_fopen+0xdc>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:769
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
            }
            break;
   1d488:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:733 (discriminator 2)
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations
    //        will move it back to the end of file.
    //        The file is created if it does not exist.

    for (i=0;i<(int)strlen(mode);i++)
   1d489:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:733 (discriminator 1)
   1d48d:	83 ec 0c             	sub    esp,0xc
   1d490:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1d493:	e8 6c 9d 00 00       	call   27204 <strlen>
   1d498:	83 c4 10             	add    esp,0x10
   1d49b:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1d49e:	0f 8f 56 ff ff ff    	jg     1d3fa <fl_fopen+0x4d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:777
            flags |= FILE_BINARY;
            break;
        }
    }

    file = NULL;
   1d4a4:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:785
    // No write support!
    flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
#endif

    // No write access - remove write/modify flags
    if (!_fs.disk_io.write_media)
   1d4ab:	a1 d8 e6 09 00       	mov    eax,ds:0x9e6d8
   1d4b0:	85 c0                	test   eax,eax
   1d4b2:	75 04                	jne    1d4b8 <fl_fopen+0x10b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:786
        flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
   1d4b4:	80 65 ef d9          	and    BYTE PTR [ebp-0x11],0xd9
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:788

    FL_LOCK(&_fs);
   1d4b8:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d4bd:	85 c0                	test   eax,eax
   1d4bf:	74 07                	je     1d4c8 <fl_fopen+0x11b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:788 (discriminator 1)
   1d4c1:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d4c6:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:791

    // Read
    if (flags & FILE_READ)
   1d4c8:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d4cc:	83 e0 01             	and    eax,0x1
   1d4cf:	85 c0                	test   eax,eax
   1d4d1:	74 11                	je     1d4e4 <fl_fopen+0x137>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:792
        file = _open_file(path);
   1d4d3:	83 ec 0c             	sub    esp,0xc
   1d4d6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d4d9:	e8 92 f6 ff ff       	call   1cb70 <_open_file>
   1d4de:	83 c4 10             	add    esp,0x10
   1d4e1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:796

    // Create New
#if FATFS_INC_WRITE_SUPPORT
    if (!file && (flags & FILE_CREATE))
   1d4e4:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1d4e8:	75 1c                	jne    1d506 <fl_fopen+0x159>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:796 (discriminator 1)
   1d4ea:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d4ee:	83 e0 20             	and    eax,0x20
   1d4f1:	85 c0                	test   eax,eax
   1d4f3:	74 11                	je     1d506 <fl_fopen+0x159>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:797
        file = _create_file(path);
   1d4f5:	83 ec 0c             	sub    esp,0xc
   1d4f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d4fb:	e8 8c f8 ff ff       	call   1cd8c <_create_file>
   1d500:	83 c4 10             	add    esp,0x10
   1d503:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:801
#endif

    // Write Existing (and not open due to read or create)
    if (!(flags & FILE_READ))
   1d506:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d50a:	83 e0 01             	and    eax,0x1
   1d50d:	85 c0                	test   eax,eax
   1d50f:	75 2d                	jne    1d53e <fl_fopen+0x191>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:802
        if ((flags & FILE_CREATE) && !file)
   1d511:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d515:	83 e0 20             	and    eax,0x20
   1d518:	85 c0                	test   eax,eax
   1d51a:	74 22                	je     1d53e <fl_fopen+0x191>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:802 (discriminator 1)
   1d51c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1d520:	75 1c                	jne    1d53e <fl_fopen+0x191>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:803
            if (flags & (FILE_WRITE | FILE_APPEND))
   1d522:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d526:	83 e0 06             	and    eax,0x6
   1d529:	85 c0                	test   eax,eax
   1d52b:	74 11                	je     1d53e <fl_fopen+0x191>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:804
                file = _open_file(path);
   1d52d:	83 ec 0c             	sub    esp,0xc
   1d530:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d533:	e8 38 f6 ff ff       	call   1cb70 <_open_file>
   1d538:	83 c4 10             	add    esp,0x10
   1d53b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:806

    if (file)
   1d53e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1d542:	74 0d                	je     1d551 <fl_fopen+0x1a4>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:807
        file->flags = flags;
   1d544:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d547:	0f b6 55 ef          	movzx  edx,BYTE PTR [ebp-0x11]
   1d54b:	88 90 30 03 00 00    	mov    BYTE PTR [eax+0x330],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:809

    FL_UNLOCK(&_fs);
   1d551:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d556:	85 c0                	test   eax,eax
   1d558:	74 07                	je     1d561 <fl_fopen+0x1b4>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:809 (discriminator 1)
   1d55a:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d55f:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:810
    return file;
   1d561:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:811
}
   1d564:	c9                   	leave  
   1d565:	c3                   	ret    

0001d566 <_write_sectors>:
_write_sectors():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:817
//-----------------------------------------------------------------------------
// _write_sectors: Write sector(s) to disk
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static uint32 _write_sectors(FL_FILE* file, uint32 offset, uint8 *buf, uint32 count)
{
   1d566:	55                   	push   ebp
   1d567:	89 e5                	mov    ebp,esp
   1d569:	83 ec 28             	sub    esp,0x28
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:818
    uint32 SectorNumber = 0;
   1d56c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:819
    uint32 ClusterIdx = 0;
   1d573:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:820
    uint32 Cluster = 0;
   1d57a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:821
    uint32 LastCluster = FAT32_LAST_CLUSTER;
   1d581:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [ebp-0x24],0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:824
    uint32 i;
    uint32 lba;
    uint32 TotalWriteCount = count;
   1d588:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d58b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:827

    // Find values for Cluster index & sector within cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   1d58e:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d595:	0f b6 c8             	movzx  ecx,al
   1d598:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d59b:	ba 00 00 00 00       	mov    edx,0x0
   1d5a0:	f7 f1                	div    ecx
   1d5a2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:828
    SectorNumber = offset - (ClusterIdx * _fs.sectors_per_cluster);
   1d5a5:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d5ac:	0f b6 c0             	movzx  eax,al
   1d5af:	0f af 45 e8          	imul   eax,DWORD PTR [ebp-0x18]
   1d5b3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1d5b6:	29 c2                	sub    edx,eax
   1d5b8:	89 d0                	mov    eax,edx
   1d5ba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:831

    // Limit number of sectors written to the number remaining in this cluster
    if ((SectorNumber + count) > _fs.sectors_per_cluster)
   1d5bd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1d5c0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d5c3:	01 c2                	add    edx,eax
   1d5c5:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d5cc:	0f b6 c0             	movzx  eax,al
   1d5cf:	39 c2                	cmp    edx,eax
   1d5d1:	76 10                	jbe    1d5e3 <_write_sectors+0x7d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:832
        count = _fs.sectors_per_cluster - SectorNumber;
   1d5d3:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d5da:	0f b6 c0             	movzx  eax,al
   1d5dd:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1d5e0:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:835

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
   1d5e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d5e6:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d5ec:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d5ef:	75 11                	jne    1d602 <_write_sectors+0x9c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:836
        Cluster = file->last_fat_lookup.CurrentCluster;
   1d5f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d5f4:	8b 80 24 01 00 00    	mov    eax,DWORD PTR [eax+0x124]
   1d5fa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d5fd:	e9 13 01 00 00       	jmp    1d715 <_write_sectors+0x1af>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:841
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
   1d602:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1d606:	74 2b                	je     1d633 <_write_sectors+0xcd>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:841 (discriminator 1)
   1d608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d60b:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d611:	83 c0 01             	add    eax,0x1
   1d614:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d617:	75 1a                	jne    1d633 <_write_sectors+0xcd>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:843
        {
            i = file->last_fat_lookup.ClusterIdx;
   1d619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d61c:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d622:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:844
            Cluster = file->last_fat_lookup.CurrentCluster;
   1d625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d628:	8b 80 24 01 00 00    	mov    eax,DWORD PTR [eax+0x124]
   1d62e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d631:	eb 10                	jmp    1d643 <_write_sectors+0xdd>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:850
        }
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
   1d633:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:851
            Cluster = file->startcluster;
   1d63a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d63d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d640:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:855
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1d643:	eb 5e                	jmp    1d6a3 <_write_sectors+0x13d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:860
        {
            uint32 nextCluster;

            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))
   1d645:	8d 45 d8             	lea    eax,[ebp-0x28]
   1d648:	50                   	push   eax
   1d649:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d64c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d64f:	68 a0 e6 09 00       	push   0x9e6a0
   1d654:	e8 b7 ed ff ff       	call   1c410 <fatfs_cache_get_next_cluster>
   1d659:	83 c4 10             	add    esp,0x10
   1d65c:	85 c0                	test   eax,eax
   1d65e:	75 2d                	jne    1d68d <_write_sectors+0x127>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:863
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
   1d660:	83 ec 08             	sub    esp,0x8
   1d663:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d666:	68 a0 e6 09 00       	push   0x9e6a0
   1d66b:	e8 9a 2f 00 00       	call   2060a <fatfs_find_next_cluster>
   1d670:	83 c4 10             	add    esp,0x10
   1d673:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:866

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
   1d676:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1d679:	50                   	push   eax
   1d67a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d67d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d680:	68 a0 e6 09 00       	push   0x9e6a0
   1d685:	e8 90 ed ff ff       	call   1c41a <fatfs_cache_set_next_cluster>
   1d68a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:869
            }

            LastCluster = Cluster;
   1d68d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d690:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:870
            Cluster = nextCluster;
   1d693:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1d696:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:873

            // Dont keep following a dead end
            if (Cluster == FAT32_LAST_CLUSTER)
   1d699:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1d69d:	74 0e                	je     1d6ad <_write_sectors+0x147>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:855
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1d69f:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:855 (discriminator 1)
   1d6a3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d6a6:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d6a9:	72 9a                	jb     1d645 <_write_sectors+0xdf>
   1d6ab:	eb 01                	jmp    1d6ae <_write_sectors+0x148>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:874
            LastCluster = Cluster;
            Cluster = nextCluster;

            // Dont keep following a dead end
            if (Cluster == FAT32_LAST_CLUSTER)
                break;
   1d6ad:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:878
        }

        // If we have reached the end of the chain, allocate more!
        if (Cluster == FAT32_LAST_CLUSTER)
   1d6ae:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1d6b2:	75 49                	jne    1d6fd <_write_sectors+0x197>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:881
        {
            // Add some more cluster(s) to the last good cluster chain
            if (!fatfs_add_free_space(&_fs, &LastCluster,  (TotalWriteCount + _fs.sectors_per_cluster -1) / _fs.sectors_per_cluster))
   1d6b4:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d6bb:	0f b6 d0             	movzx  edx,al
   1d6be:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1d6c1:	01 d0                	add    eax,edx
   1d6c3:	83 e8 01             	sub    eax,0x1
   1d6c6:	0f b6 15 a0 e6 09 00 	movzx  edx,BYTE PTR ds:0x9e6a0
   1d6cd:	0f b6 ca             	movzx  ecx,dl
   1d6d0:	ba 00 00 00 00       	mov    edx,0x0
   1d6d5:	f7 f1                	div    ecx
   1d6d7:	83 ec 04             	sub    esp,0x4
   1d6da:	50                   	push   eax
   1d6db:	8d 45 dc             	lea    eax,[ebp-0x24]
   1d6de:	50                   	push   eax
   1d6df:	68 a0 e6 09 00       	push   0x9e6a0
   1d6e4:	e8 77 36 00 00       	call   20d60 <fatfs_add_free_space>
   1d6e9:	83 c4 10             	add    esp,0x10
   1d6ec:	85 c0                	test   eax,eax
   1d6ee:	75 07                	jne    1d6f7 <_write_sectors+0x191>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:882
                return 0;
   1d6f0:	b8 00 00 00 00       	mov    eax,0x0
   1d6f5:	eb 5f                	jmp    1d756 <_write_sectors+0x1f0>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:884

            Cluster = LastCluster;
   1d6f7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1d6fa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:888
        }

        // Record current cluster lookup details
        file->last_fat_lookup.CurrentCluster = Cluster;
   1d6fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d700:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1d703:	89 90 24 01 00 00    	mov    DWORD PTR [eax+0x124],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:889
        file->last_fat_lookup.ClusterIdx = ClusterIdx;
   1d709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d70c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1d70f:	89 90 20 01 00 00    	mov    DWORD PTR [eax+0x120],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:893
    }

    // Calculate write address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + SectorNumber;
   1d715:	83 ec 08             	sub    esp,0x8
   1d718:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d71b:	68 a0 e6 09 00       	push   0x9e6a0
   1d720:	e8 a7 da ff ff       	call   1b1cc <fatfs_lba_of_cluster>
   1d725:	83 c4 10             	add    esp,0x10
   1d728:	89 c2                	mov    edx,eax
   1d72a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d72d:	01 d0                	add    eax,edx
   1d72f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:895

    if (fatfs_sector_write(&_fs, lba, buf, count))
   1d732:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1d735:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1d738:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1d73b:	68 a0 e6 09 00       	push   0x9e6a0
   1d740:	e8 08 db ff ff       	call   1b24d <fatfs_sector_write>
   1d745:	83 c4 10             	add    esp,0x10
   1d748:	85 c0                	test   eax,eax
   1d74a:	74 05                	je     1d751 <_write_sectors+0x1eb>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:896
        return count;
   1d74c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d74f:	eb 05                	jmp    1d756 <_write_sectors+0x1f0>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:898
    else
        return 0;
   1d751:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:899 (discriminator 1)
}
   1d756:	c9                   	leave  
   1d757:	c3                   	ret    

0001d758 <fl_fflush>:
fl_fflush():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:905
#endif
//-----------------------------------------------------------------------------
// fl_fflush: Flush un-written data to the file
//-----------------------------------------------------------------------------
int fl_fflush(void *f)
{
   1d758:	55                   	push   ebp
   1d759:	89 e5                	mov    ebp,esp
   1d75b:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:907
#if FATFS_INC_WRITE_SUPPORT
    FL_FILE *file = (FL_FILE *)f;
   1d75e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d761:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:910

    // If first call to library, initialise
    CHECK_FL_INIT();
   1d764:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1d769:	85 c0                	test   eax,eax
   1d76b:	75 05                	jne    1d772 <fl_fflush+0x1a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:910 (discriminator 1)
   1d76d:	e8 14 fb ff ff       	call   1d286 <fl_init>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:912

    if (file)
   1d772:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1d776:	74 5f                	je     1d7d7 <fl_fflush+0x7f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:914
    {
        FL_LOCK(&_fs);
   1d778:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d77d:	85 c0                	test   eax,eax
   1d77f:	74 07                	je     1d788 <fl_fflush+0x30>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:914 (discriminator 1)
   1d781:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d786:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:917

        // If some write data still in buffer
        if (file->file_data_dirty)
   1d788:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d78b:	8b 80 2c 03 00 00    	mov    eax,DWORD PTR [eax+0x32c]
   1d791:	85 c0                	test   eax,eax
   1d793:	74 32                	je     1d7c7 <fl_fflush+0x6f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:920
        {
            // Write back current sector before loading next
            if (_write_sectors(file, file->file_data_address, file->file_data_sector, 1))
   1d795:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d798:	8d 90 28 01 00 00    	lea    edx,[eax+0x128]
   1d79e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d7a1:	8b 80 28 03 00 00    	mov    eax,DWORD PTR [eax+0x328]
   1d7a7:	6a 01                	push   0x1
   1d7a9:	52                   	push   edx
   1d7aa:	50                   	push   eax
   1d7ab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d7ae:	e8 b3 fd ff ff       	call   1d566 <_write_sectors>
   1d7b3:	83 c4 10             	add    esp,0x10
   1d7b6:	85 c0                	test   eax,eax
   1d7b8:	74 0d                	je     1d7c7 <fl_fflush+0x6f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:921
                file->file_data_dirty = 0;
   1d7ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d7bd:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1d7c4:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:924
        }

        FL_UNLOCK(&_fs);
   1d7c7:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d7cc:	85 c0                	test   eax,eax
   1d7ce:	74 07                	je     1d7d7 <fl_fflush+0x7f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:924 (discriminator 1)
   1d7d0:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d7d5:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:927
    }
#endif
    return 0;
   1d7d7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:928
}
   1d7dc:	c9                   	leave  
   1d7dd:	c3                   	ret    

0001d7de <fl_fclose>:
fl_fclose():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:933
//-----------------------------------------------------------------------------
// fl_fclose: Close an open file
//-----------------------------------------------------------------------------
void fl_fclose(void *f)
{
   1d7de:	55                   	push   ebp
   1d7df:	89 e5                	mov    ebp,esp
   1d7e1:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:934
    FL_FILE *file = (FL_FILE *)f;
   1d7e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d7e7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:937

    // If first call to library, initialise
    CHECK_FL_INIT();
   1d7ea:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1d7ef:	85 c0                	test   eax,eax
   1d7f1:	75 05                	jne    1d7f8 <fl_fclose+0x1a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:937 (discriminator 1)
   1d7f3:	e8 8e fa ff ff       	call   1d286 <fl_init>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:939

    if (file)
   1d7f8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1d7fc:	0f 84 c6 00 00 00    	je     1d8c8 <fl_fclose+0xea>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:941
    {
        FL_LOCK(&_fs);
   1d802:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d807:	85 c0                	test   eax,eax
   1d809:	74 07                	je     1d812 <fl_fclose+0x34>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:941 (discriminator 1)
   1d80b:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d810:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:944

        // Flush un-written data to file
        fl_fflush(f);
   1d812:	83 ec 0c             	sub    esp,0xc
   1d815:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d818:	e8 3b ff ff ff       	call   1d758 <fl_fflush>
   1d81d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:947

        // File size changed?
        if (file->filelength_changed)
   1d820:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d823:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1d826:	85 c0                	test   eax,eax
   1d828:	74 2e                	je     1d858 <fl_fclose+0x7a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:951
        {
#if FATFS_INC_WRITE_SUPPORT
            // Update filesize in directory
            fatfs_update_file_length(&_fs, file->parentcluster, (char*)file->shortfilename, file->filelength);
   1d82a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d82d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1d830:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d833:	8d 88 14 01 00 00    	lea    ecx,[eax+0x114]
   1d839:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d83c:	8b 00                	mov    eax,DWORD PTR [eax]
   1d83e:	52                   	push   edx
   1d83f:	51                   	push   ecx
   1d840:	50                   	push   eax
   1d841:	68 a0 e6 09 00       	push   0x9e6a0
   1d846:	e8 c9 e2 ff ff       	call   1bb14 <fatfs_update_file_length>
   1d84b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:953
#endif
            file->filelength_changed = 0;
   1d84e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d851:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:956
        }

        file->bytenum = 0;
   1d858:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d85b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:957
        file->filelength = 0;
   1d862:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d865:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:958
        file->startcluster = 0;
   1d86c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d86f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:959
        file->file_data_address = 0xFFFFFFFF;
   1d876:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d879:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1d880:	ff ff ff 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:960
        file->file_data_dirty = 0;
   1d883:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d886:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1d88d:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:961
        file->filelength_changed = 0;
   1d890:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d893:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:964

        // Free file handle
        _free_file(file);
   1d89a:	83 ec 0c             	sub    esp,0xc
   1d89d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d8a0:	e8 f0 ed ff ff       	call   1c695 <_free_file>
   1d8a5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:966

        fatfs_fat_purge(&_fs);
   1d8a8:	83 ec 0c             	sub    esp,0xc
   1d8ab:	68 a0 e6 09 00       	push   0x9e6a0
   1d8b0:	e8 ff 2c 00 00       	call   205b4 <fatfs_fat_purge>
   1d8b5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:968

        FL_UNLOCK(&_fs);
   1d8b8:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d8bd:	85 c0                	test   eax,eax
   1d8bf:	74 07                	je     1d8c8 <fl_fclose+0xea>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:968 (discriminator 1)
   1d8c1:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d8c6:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:970
    }
}
   1d8c8:	90                   	nop
   1d8c9:	c9                   	leave  
   1d8ca:	c3                   	ret    

0001d8cb <fl_fgetc>:
fl_fgetc():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:975
//-----------------------------------------------------------------------------
// fl_fgetc: Get a character in the stream
//-----------------------------------------------------------------------------
int fl_fgetc(void *f)
{
   1d8cb:	55                   	push   ebp
   1d8cc:	89 e5                	mov    ebp,esp
   1d8ce:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:977
    int res;
    uint8 data = 0;
   1d8d1:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:979

    res = fl_fread(&data, 1, 1, f);
   1d8d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d8d8:	6a 01                	push   0x1
   1d8da:	6a 01                	push   0x1
   1d8dc:	8d 45 f3             	lea    eax,[ebp-0xd]
   1d8df:	50                   	push   eax
   1d8e0:	e8 95 00 00 00       	call   1d97a <fl_fread>
   1d8e5:	83 c4 10             	add    esp,0x10
   1d8e8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:980
    if (res == 1)
   1d8eb:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   1d8ef:	75 09                	jne    1d8fa <fl_fgetc+0x2f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:981
        return (int)data;
   1d8f1:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   1d8f5:	0f b6 c0             	movzx  eax,al
   1d8f8:	eb 03                	jmp    1d8fd <fl_fgetc+0x32>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:983
    else
        return res;
   1d8fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:984 (discriminator 1)
}
   1d8fd:	c9                   	leave  
   1d8fe:	c3                   	ret    

0001d8ff <fl_fgets>:
fl_fgets():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:989
//-----------------------------------------------------------------------------
// fl_fgets: Get a string from a stream
//-----------------------------------------------------------------------------
char *fl_fgets(char *s, int n, void *f)
{
   1d8ff:	55                   	push   ebp
   1d900:	89 e5                	mov    ebp,esp
   1d902:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:990
    int idx = 0;
   1d905:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:993

    // Space for null terminator?
    if (n > 0)
   1d90c:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1d910:	7e 56                	jle    1d968 <fl_fgets+0x69>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:996
    {
        // While space (+space for null terminator)
        while (idx < (n-1))
   1d912:	eb 32                	jmp    1d946 <fl_fgets+0x47>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:998
        {
            int ch = fl_fgetc(f);
   1d914:	83 ec 0c             	sub    esp,0xc
   1d917:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1d91a:	e8 ac ff ff ff       	call   1d8cb <fl_fgetc>
   1d91f:	83 c4 10             	add    esp,0x10
   1d922:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1001

            // EOF / Error?
            if (ch < 0)
   1d925:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1d929:	78 28                	js     1d953 <fl_fgets+0x54>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1005
                break;

            // Store character read from stream
            s[idx++] = (char)ch;
   1d92b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d92e:	8d 50 01             	lea    edx,[eax+0x1]
   1d931:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   1d934:	89 c2                	mov    edx,eax
   1d936:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d939:	01 d0                	add    eax,edx
   1d93b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1d93e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1008

            // End of line?
            if (ch == '\n')
   1d940:	83 7d f0 0a          	cmp    DWORD PTR [ebp-0x10],0xa
   1d944:	74 10                	je     1d956 <fl_fgets+0x57>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:996

    // Space for null terminator?
    if (n > 0)
    {
        // While space (+space for null terminator)
        while (idx < (n-1))
   1d946:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d949:	83 e8 01             	sub    eax,0x1
   1d94c:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1d94f:	7f c3                	jg     1d914 <fl_fgets+0x15>
   1d951:	eb 04                	jmp    1d957 <fl_fgets+0x58>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1002
        {
            int ch = fl_fgetc(f);

            // EOF / Error?
            if (ch < 0)
                break;
   1d953:	90                   	nop
   1d954:	eb 01                	jmp    1d957 <fl_fgets+0x58>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1009
            // Store character read from stream
            s[idx++] = (char)ch;

            // End of line?
            if (ch == '\n')
                break;
   1d956:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1012
        }

        if (idx > 0)
   1d957:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1d95b:	7e 0b                	jle    1d968 <fl_fgets+0x69>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1013
            s[idx] = '\0';
   1d95d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1d960:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d963:	01 d0                	add    eax,edx
   1d965:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1016
    }

    return (idx > 0) ? s : 0;
   1d968:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1d96c:	7e 05                	jle    1d973 <fl_fgets+0x74>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1016 (discriminator 1)
   1d96e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d971:	eb 05                	jmp    1d978 <fl_fgets+0x79>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1016 (discriminator 2)
   1d973:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1017 (discriminator 5)
}
   1d978:	c9                   	leave  
   1d979:	c3                   	ret    

0001d97a <fl_fread>:
fl_fread():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1022
//-----------------------------------------------------------------------------
// fl_fread: Read a block of data from the file
//-----------------------------------------------------------------------------
int fl_fread(void * buffer, int size, int length, void *f )
{
   1d97a:	55                   	push   ebp
   1d97b:	89 e5                	mov    ebp,esp
   1d97d:	53                   	push   ebx
   1d97e:	83 ec 24             	sub    esp,0x24
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1026
    uint32 sector;
    uint32 offset;
    int copyCount;
    int count = size * length;
   1d981:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d984:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
   1d988:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1027
    int bytesRead = 0;
   1d98b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1029

    FL_FILE *file = (FL_FILE *)f;
   1d992:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d995:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1032

    // If first call to library, initialise
    CHECK_FL_INIT();
   1d998:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1d99d:	85 c0                	test   eax,eax
   1d99f:	75 05                	jne    1d9a6 <fl_fread+0x2c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1032 (discriminator 1)
   1d9a1:	e8 e0 f8 ff ff       	call   1d286 <fl_init>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1034

    if (buffer==NULL || file==NULL)
   1d9a6:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1d9aa:	74 06                	je     1d9b2 <fl_fread+0x38>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1034 (discriminator 1)
   1d9ac:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1d9b0:	75 0a                	jne    1d9bc <fl_fread+0x42>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1035
        return -1;
   1d9b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1d9b7:	e9 d8 01 00 00       	jmp    1db94 <fl_fread+0x21a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1038

    // No read permissions
    if (!(file->flags & FILE_READ))
   1d9bc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1d9bf:	0f b6 80 30 03 00 00 	movzx  eax,BYTE PTR [eax+0x330]
   1d9c6:	0f b6 c0             	movzx  eax,al
   1d9c9:	83 e0 01             	and    eax,0x1
   1d9cc:	85 c0                	test   eax,eax
   1d9ce:	75 0a                	jne    1d9da <fl_fread+0x60>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1039
        return -1;
   1d9d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1d9d5:	e9 ba 01 00 00       	jmp    1db94 <fl_fread+0x21a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1042

    // Nothing to be done
    if (!count)
   1d9da:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1d9de:	75 0a                	jne    1d9ea <fl_fread+0x70>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1043
        return 0;
   1d9e0:	b8 00 00 00 00       	mov    eax,0x0
   1d9e5:	e9 aa 01 00 00       	jmp    1db94 <fl_fread+0x21a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1046

    // Check if read starts past end of file
    if (file->bytenum >= file->filelength)
   1d9ea:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1d9ed:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1d9f0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1d9f3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1d9f6:	39 c2                	cmp    edx,eax
   1d9f8:	72 0a                	jb     1da04 <fl_fread+0x8a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1047
        return -1;
   1d9fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1d9ff:	e9 90 01 00 00       	jmp    1db94 <fl_fread+0x21a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1050

    // Limit to file size
    if ( (file->bytenum + count) > file->filelength )
   1da04:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1da07:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1da0a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1da0d:	01 c2                	add    edx,eax
   1da0f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1da12:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1da15:	39 c2                	cmp    edx,eax
   1da17:	76 13                	jbe    1da2c <fl_fread+0xb2>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1051
        count = file->filelength - file->bytenum;
   1da19:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1da1c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1da1f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1da22:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1da25:	29 c2                	sub    edx,eax
   1da27:	89 d0                	mov    eax,edx
   1da29:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1054

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;
   1da2c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1da2f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1da32:	c1 e8 09             	shr    eax,0x9
   1da35:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1057

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
   1da38:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1da3b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1da3e:	25 ff 01 00 00       	and    eax,0x1ff
   1da43:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1059

    while (bytesRead < count)
   1da46:	e9 34 01 00 00       	jmp    1db7f <fl_fread+0x205>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1062
    {
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
   1da4b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1da4f:	75 63                	jne    1dab4 <fl_fread+0x13a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1062 (discriminator 1)
   1da51:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1da54:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1da57:	3d ff 01 00 00       	cmp    eax,0x1ff
   1da5c:	7e 56                	jle    1dab4 <fl_fread+0x13a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1065
        {
            // Read as many sectors as possible into target buffer
            uint32 sectorsRead = _read_sectors(file, sector, (uint8*)((uint8*)buffer + bytesRead), (count - bytesRead) / FAT_SECTOR_SIZE);
   1da5e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1da61:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1da64:	8d 90 ff 01 00 00    	lea    edx,[eax+0x1ff]
   1da6a:	85 c0                	test   eax,eax
   1da6c:	0f 48 c2             	cmovs  eax,edx
   1da6f:	c1 f8 09             	sar    eax,0x9
   1da72:	89 c1                	mov    ecx,eax
   1da74:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   1da77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1da7a:	01 d0                	add    eax,edx
   1da7c:	51                   	push   ecx
   1da7d:	50                   	push   eax
   1da7e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1da81:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1da84:	e8 63 f6 ff ff       	call   1d0ec <_read_sectors>
   1da89:	83 c4 10             	add    esp,0x10
   1da8c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1066
            if (sectorsRead)
   1da8f:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
   1da93:	0f 84 f4 00 00 00    	je     1db8d <fl_fread+0x213>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1069
            {
                // We have upto one sector to copy
                copyCount = FAT_SECTOR_SIZE * sectorsRead;
   1da99:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1da9c:	c1 e0 09             	shl    eax,0x9
   1da9f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1072

                // Move onto next sector and reset copy offset
                sector+= sectorsRead;
   1daa2:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1daa5:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1073
                offset = 0;
   1daa8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1063

    while (bytesRead < count)
    {
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
        {
   1daaf:	e9 b4 00 00 00       	jmp    1db68 <fl_fread+0x1ee>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1081
                break;
        }
        else
        {
            // Do we need to re-read the sector?
            if (file->file_data_address != sector)
   1dab4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dab7:	8b 80 28 03 00 00    	mov    eax,DWORD PTR [eax+0x328]
   1dabd:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1dac0:	74 55                	je     1db17 <fl_fread+0x19d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1084
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
   1dac2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dac5:	8b 80 2c 03 00 00    	mov    eax,DWORD PTR [eax+0x32c]
   1dacb:	85 c0                	test   eax,eax
   1dacd:	74 0e                	je     1dadd <fl_fread+0x163>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1085
                    fl_fflush(file);
   1dacf:	83 ec 0c             	sub    esp,0xc
   1dad2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1dad5:	e8 7e fc ff ff       	call   1d758 <fl_fflush>
   1dada:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1088

                // Get LBA of sector offset within file
                if (!_read_sectors(file, sector, file->file_data_sector, 1))
   1dadd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dae0:	05 28 01 00 00       	add    eax,0x128
   1dae5:	6a 01                	push   0x1
   1dae7:	50                   	push   eax
   1dae8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1daeb:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1daee:	e8 f9 f5 ff ff       	call   1d0ec <_read_sectors>
   1daf3:	83 c4 10             	add    esp,0x10
   1daf6:	85 c0                	test   eax,eax
   1daf8:	0f 84 92 00 00 00    	je     1db90 <fl_fread+0x216>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1092
                    // Read failed - out of range (probably)
                    break;

                file->file_data_address = sector;
   1dafe:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1db01:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1db04:	89 90 28 03 00 00    	mov    DWORD PTR [eax+0x328],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1093
                file->file_data_dirty = 0;
   1db0a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1db0d:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1db14:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1097
            }

            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
   1db17:	b8 00 02 00 00       	mov    eax,0x200
   1db1c:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
   1db1f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1100

            // Only require some of this sector?
            if (copyCount > (count - bytesRead))
   1db22:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1db25:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1db28:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   1db2b:	7d 09                	jge    1db36 <fl_fread+0x1bc>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1101
                copyCount = (count - bytesRead);
   1db2d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1db30:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1db33:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1104

            // Copy to application buffer
            memcpy( (uint8*)((uint8*)buffer + bytesRead), (uint8*)(file->file_data_sector + offset), copyCount);
   1db36:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1db39:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1db3c:	8d 8a 28 01 00 00    	lea    ecx,[edx+0x128]
   1db42:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1db45:	01 d1                	add    ecx,edx
   1db47:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
   1db4a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1db4d:	01 da                	add    edx,ebx
   1db4f:	83 ec 04             	sub    esp,0x4
   1db52:	50                   	push   eax
   1db53:	51                   	push   ecx
   1db54:	52                   	push   edx
   1db55:	e8 46 7e 00 00       	call   259a0 <memcpy>
   1db5a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1107

            // Move onto next sector and reset copy offset
            sector++;
   1db5d:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1108
            offset = 0;
   1db61:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1112
        }

        // Increase total read count
        bytesRead += copyCount;
   1db68:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1db6b:	01 45 e4             	add    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1115

        // Increment file pointer
        file->bytenum += copyCount;
   1db6e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1db71:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1db74:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1db77:	01 c2                	add    edx,eax
   1db79:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1db7c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1059
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
   1db7f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1db82:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1db85:	0f 8c c0 fe ff ff    	jl     1da4b <fl_fread+0xd1>
   1db8b:	eb 04                	jmp    1db91 <fl_fread+0x217>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1076
                // Move onto next sector and reset copy offset
                sector+= sectorsRead;
                offset = 0;
            }
            else
                break;
   1db8d:	90                   	nop
   1db8e:	eb 01                	jmp    1db91 <fl_fread+0x217>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1090
                    fl_fflush(file);

                // Get LBA of sector offset within file
                if (!_read_sectors(file, sector, file->file_data_sector, 1))
                    // Read failed - out of range (probably)
                    break;
   1db90:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1118

        // Increment file pointer
        file->bytenum += copyCount;
    }

    return bytesRead;
   1db91:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1119
}
   1db94:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1db97:	c9                   	leave  
   1db98:	c3                   	ret    

0001db99 <fl_fseek>:
fl_fseek():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1124
//-----------------------------------------------------------------------------
// fl_fseek: Seek to a specific place in the file
//-----------------------------------------------------------------------------
int fl_fseek( void *f, long offset, int origin )
{
   1db99:	55                   	push   ebp
   1db9a:	89 e5                	mov    ebp,esp
   1db9c:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1125
    FL_FILE *file = (FL_FILE *)f;
   1db9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dba2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1126
    int res = -1;
   1dba5:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1129

    // If first call to library, initialise
    CHECK_FL_INIT();
   1dbac:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1dbb1:	85 c0                	test   eax,eax
   1dbb3:	75 05                	jne    1dbba <fl_fseek+0x21>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1129 (discriminator 1)
   1dbb5:	e8 cc f6 ff ff       	call   1d286 <fl_init>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1131

    if (!file)
   1dbba:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1dbbe:	75 0a                	jne    1dbca <fl_fseek+0x31>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1132
        return -1;
   1dbc0:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1dbc5:	e9 1d 01 00 00       	jmp    1dce7 <fl_fseek+0x14e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1134

    if (origin == SEEK_END && offset != 0)
   1dbca:	83 7d 10 02          	cmp    DWORD PTR [ebp+0x10],0x2
   1dbce:	75 10                	jne    1dbe0 <fl_fseek+0x47>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1134 (discriminator 1)
   1dbd0:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1dbd4:	74 0a                	je     1dbe0 <fl_fseek+0x47>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1135
        return -1;
   1dbd6:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1dbdb:	e9 07 01 00 00       	jmp    1dce7 <fl_fseek+0x14e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1137

    FL_LOCK(&_fs);
   1dbe0:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1dbe5:	85 c0                	test   eax,eax
   1dbe7:	74 07                	je     1dbf0 <fl_fseek+0x57>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1137 (discriminator 1)
   1dbe9:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1dbee:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1140

    // Invalidate file buffer
    file->file_data_address = 0xFFFFFFFF;
   1dbf0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dbf3:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1dbfa:	ff ff ff 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1141
    file->file_data_dirty = 0;
   1dbfd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc00:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1dc07:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1143

    if (origin == SEEK_SET)
   1dc0a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   1dc0e:	75 31                	jne    1dc41 <fl_fseek+0xa8>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1145
    {
        file->bytenum = (uint32)offset;
   1dc10:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1dc13:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc16:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1147

        if (file->bytenum > file->filelength)
   1dc19:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc1c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dc1f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc22:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1dc25:	39 c2                	cmp    edx,eax
   1dc27:	76 0c                	jbe    1dc35 <fl_fseek+0x9c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1148
            file->bytenum = file->filelength;
   1dc29:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc2c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1dc2f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc32:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1150

        res = 0;
   1dc35:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1dc3c:	e9 93 00 00 00       	jmp    1dcd4 <fl_fseek+0x13b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1152
    }
    else if (origin == SEEK_CUR)
   1dc41:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
   1dc45:	75 6b                	jne    1dcb2 <fl_fseek+0x119>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1155
    {
        // Positive shift
        if (offset >= 0)
   1dc47:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1dc4b:	78 2f                	js     1dc7c <fl_fseek+0xe3>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1157
        {
            file->bytenum += offset;
   1dc4d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc50:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dc53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1dc56:	01 c2                	add    edx,eax
   1dc58:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc5b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1159

            if (file->bytenum > file->filelength)
   1dc5e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc61:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dc64:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc67:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1dc6a:	39 c2                	cmp    edx,eax
   1dc6c:	76 3b                	jbe    1dca9 <fl_fseek+0x110>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1160
                file->bytenum = file->filelength;
   1dc6e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc71:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1dc74:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc77:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
   1dc7a:	eb 2d                	jmp    1dca9 <fl_fseek+0x110>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1166
        }
        // Negative shift
        else
        {
            // Make shift positive
            offset = -offset;
   1dc7c:	f7 5d 0c             	neg    DWORD PTR [ebp+0xc]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1169

            // Limit to negative shift to start of file
            if ((uint32)offset > file->bytenum)
   1dc7f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc82:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dc85:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1dc88:	39 c2                	cmp    edx,eax
   1dc8a:	73 0c                	jae    1dc98 <fl_fseek+0xff>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1170
                file->bytenum = 0;
   1dc8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc8f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
   1dc96:	eb 11                	jmp    1dca9 <fl_fseek+0x110>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1172
            else
                file->bytenum-= offset;
   1dc98:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc9b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dc9e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1dca1:	29 c2                	sub    edx,eax
   1dca3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dca6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1175
        }

        res = 0;
   1dca9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1dcb0:	eb 22                	jmp    1dcd4 <fl_fseek+0x13b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1177
    }
    else if (origin == SEEK_END)
   1dcb2:	83 7d 10 02          	cmp    DWORD PTR [ebp+0x10],0x2
   1dcb6:	75 15                	jne    1dccd <fl_fseek+0x134>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1179
    {
        file->bytenum = file->filelength;
   1dcb8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dcbb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1dcbe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dcc1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1180
        res = 0;
   1dcc4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1dccb:	eb 07                	jmp    1dcd4 <fl_fseek+0x13b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1183
    }
    else
        res = -1;
   1dccd:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1185

    FL_UNLOCK(&_fs);
   1dcd4:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1dcd9:	85 c0                	test   eax,eax
   1dcdb:	74 07                	je     1dce4 <fl_fseek+0x14b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1185 (discriminator 1)
   1dcdd:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1dce2:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1187

    return res;
   1dce4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1188
}
   1dce7:	c9                   	leave  
   1dce8:	c3                   	ret    

0001dce9 <fl_fgetpos>:
fl_fgetpos():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1193
//-----------------------------------------------------------------------------
// fl_fgetpos: Get the current file position
//-----------------------------------------------------------------------------
int fl_fgetpos(void *f , uint32 * position)
{
   1dce9:	55                   	push   ebp
   1dcea:	89 e5                	mov    ebp,esp
   1dcec:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1194
    FL_FILE *file = (FL_FILE *)f;
   1dcef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dcf2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1196

    if (!file)
   1dcf5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1dcf9:	75 07                	jne    1dd02 <fl_fgetpos+0x19>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1197
        return -1;
   1dcfb:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1dd00:	eb 30                	jmp    1dd32 <fl_fgetpos+0x49>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1199

    FL_LOCK(&_fs);
   1dd02:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1dd07:	85 c0                	test   eax,eax
   1dd09:	74 07                	je     1dd12 <fl_fgetpos+0x29>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1199 (discriminator 1)
   1dd0b:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1dd10:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1202

    // Get position
    *position = file->bytenum;
   1dd12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dd15:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dd18:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1dd1b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1204

    FL_UNLOCK(&_fs);
   1dd1d:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1dd22:	85 c0                	test   eax,eax
   1dd24:	74 07                	je     1dd2d <fl_fgetpos+0x44>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1204 (discriminator 1)
   1dd26:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1dd2b:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1206

    return 0;
   1dd2d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1207
}
   1dd32:	c9                   	leave  
   1dd33:	c3                   	ret    

0001dd34 <fl_ftell>:
fl_ftell():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1212
//-----------------------------------------------------------------------------
// fl_ftell: Get the current file position
//-----------------------------------------------------------------------------
long fl_ftell(void *f)
{
   1dd34:	55                   	push   ebp
   1dd35:	89 e5                	mov    ebp,esp
   1dd37:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1213
    uint32 pos = 0;
   1dd3a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1215

    fl_fgetpos(f, &pos);
   1dd41:	83 ec 08             	sub    esp,0x8
   1dd44:	8d 45 f4             	lea    eax,[ebp-0xc]
   1dd47:	50                   	push   eax
   1dd48:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1dd4b:	e8 99 ff ff ff       	call   1dce9 <fl_fgetpos>
   1dd50:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1217

    return (long)pos;
   1dd53:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1218
}
   1dd56:	c9                   	leave  
   1dd57:	c3                   	ret    

0001dd58 <fl_feof>:
fl_feof():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1223
//-----------------------------------------------------------------------------
// fl_feof: Is the file pointer at the end of the stream?
//-----------------------------------------------------------------------------
int fl_feof(void *f)
{
   1dd58:	55                   	push   ebp
   1dd59:	89 e5                	mov    ebp,esp
   1dd5b:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1224
    FL_FILE *file = (FL_FILE *)f;
   1dd5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dd61:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1227
    int res;

    if (!file)
   1dd64:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1dd68:	75 07                	jne    1dd71 <fl_feof+0x19>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1228
        return -1;
   1dd6a:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1dd6f:	eb 43                	jmp    1ddb4 <fl_feof+0x5c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1230

    FL_LOCK(&_fs);
   1dd71:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1dd76:	85 c0                	test   eax,eax
   1dd78:	74 07                	je     1dd81 <fl_feof+0x29>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1230 (discriminator 1)
   1dd7a:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1dd7f:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1232

    if (file->bytenum == file->filelength)
   1dd81:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dd84:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dd87:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dd8a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1dd8d:	39 c2                	cmp    edx,eax
   1dd8f:	75 09                	jne    1dd9a <fl_feof+0x42>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1233
        res = EOF;
   1dd91:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
   1dd98:	eb 07                	jmp    1dda1 <fl_feof+0x49>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1235
    else
        res = 0;
   1dd9a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1237

    FL_UNLOCK(&_fs);
   1dda1:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1dda6:	85 c0                	test   eax,eax
   1dda8:	74 07                	je     1ddb1 <fl_feof+0x59>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1237 (discriminator 1)
   1ddaa:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1ddaf:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1239

    return res;
   1ddb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1240
}
   1ddb4:	c9                   	leave  
   1ddb5:	c3                   	ret    

0001ddb6 <fl_fputc>:
fl_fputc():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1246
//-----------------------------------------------------------------------------
// fl_fputc: Write a character to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fputc(int c, void *f)
{
   1ddb6:	55                   	push   ebp
   1ddb7:	89 e5                	mov    ebp,esp
   1ddb9:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1247
    uint8 data = (uint8)c;
   1ddbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ddbf:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1250
    int res;

    res = fl_fwrite(&data, 1, 1, f);
   1ddc2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1ddc5:	6a 01                	push   0x1
   1ddc7:	6a 01                	push   0x1
   1ddc9:	8d 45 f3             	lea    eax,[ebp-0xd]
   1ddcc:	50                   	push   eax
   1ddcd:	e8 16 00 00 00       	call   1dde8 <fl_fwrite>
   1ddd2:	83 c4 10             	add    esp,0x10
   1ddd5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1251
    if (res == 1)
   1ddd8:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   1dddc:	75 05                	jne    1dde3 <fl_fputc+0x2d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1252
        return c;
   1ddde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dde1:	eb 03                	jmp    1dde6 <fl_fputc+0x30>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1254
    else
        return res;
   1dde3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1255 (discriminator 1)
}
   1dde6:	c9                   	leave  
   1dde7:	c3                   	ret    

0001dde8 <fl_fwrite>:
fl_fwrite():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1262
//-----------------------------------------------------------------------------
// fl_fwrite: Write a block of data to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fwrite(const void * data, int size, int count, void *f )
{
   1dde8:	55                   	push   ebp
   1dde9:	89 e5                	mov    ebp,esp
   1ddeb:	83 ec 28             	sub    esp,0x28
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1263
    FL_FILE *file = (FL_FILE *)f;
   1ddee:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1ddf1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1266
    uint32 sector;
    uint32 offset;
    uint32 length = (size*count);
   1ddf4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ddf7:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
   1ddfb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1267
    uint8 *buffer = (uint8 *)data;
   1ddfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1de01:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1268
    uint32 bytesWritten = 0;
   1de04:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1272
    uint32 copyCount;

    // If first call to library, initialise
    CHECK_FL_INIT();
   1de0b:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1de10:	85 c0                	test   eax,eax
   1de12:	75 05                	jne    1de19 <fl_fwrite+0x31>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1272 (discriminator 1)
   1de14:	e8 6d f4 ff ff       	call   1d286 <fl_init>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1274

    if (!file)
   1de19:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   1de1d:	75 0a                	jne    1de29 <fl_fwrite+0x41>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1275
        return -1;
   1de1f:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1de24:	e9 8a 02 00 00       	jmp    1e0b3 <fl_fwrite+0x2cb>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1277

    FL_LOCK(&_fs);
   1de29:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1de2e:	85 c0                	test   eax,eax
   1de30:	74 07                	je     1de39 <fl_fwrite+0x51>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1277 (discriminator 1)
   1de32:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1de37:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1280

    // No write permissions
    if (!(file->flags & FILE_WRITE))
   1de39:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1de3c:	0f b6 80 30 03 00 00 	movzx  eax,BYTE PTR [eax+0x330]
   1de43:	0f b6 c0             	movzx  eax,al
   1de46:	83 e0 02             	and    eax,0x2
   1de49:	85 c0                	test   eax,eax
   1de4b:	75 1a                	jne    1de67 <fl_fwrite+0x7f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1282
    {
        FL_UNLOCK(&_fs);
   1de4d:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1de52:	85 c0                	test   eax,eax
   1de54:	74 07                	je     1de5d <fl_fwrite+0x75>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1282 (discriminator 1)
   1de56:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1de5b:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1283
        return -1;
   1de5d:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1de62:	e9 4c 02 00 00       	jmp    1e0b3 <fl_fwrite+0x2cb>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1287
    }

    // Append writes to end of file
    if (file->flags & FILE_APPEND)
   1de67:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1de6a:	0f b6 80 30 03 00 00 	movzx  eax,BYTE PTR [eax+0x330]
   1de71:	0f b6 c0             	movzx  eax,al
   1de74:	83 e0 04             	and    eax,0x4
   1de77:	85 c0                	test   eax,eax
   1de79:	74 0c                	je     1de87 <fl_fwrite+0x9f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1288
        file->bytenum = file->filelength;
   1de7b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1de7e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1de81:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1de84:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1292
    // Else write to current position

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;
   1de87:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1de8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1de8d:	c1 e8 09             	shr    eax,0x9
   1de90:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1295

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
   1de93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1de96:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1de99:	25 ff 01 00 00       	and    eax,0x1ff
   1de9e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1297

    while (bytesWritten < length)
   1dea1:	e9 b7 01 00 00       	jmp    1e05d <fl_fwrite+0x275>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1300
    {
        // Whole sector or more to be written?
        if ((offset == 0) && ((length - bytesWritten) >= FAT_SECTOR_SIZE))
   1dea6:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1deaa:	0f 85 b6 00 00 00    	jne    1df66 <fl_fwrite+0x17e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1300 (discriminator 1)
   1deb0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1deb3:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1deb6:	3d ff 01 00 00       	cmp    eax,0x1ff
   1debb:	0f 86 a5 00 00 00    	jbe    1df66 <fl_fwrite+0x17e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1305
        {
            uint32 sectorsWrote;

            // Buffered sector, flush back to disk
            if (file->file_data_address != 0xFFFFFFFF)
   1dec1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1dec4:	8b 80 28 03 00 00    	mov    eax,DWORD PTR [eax+0x328]
   1deca:	83 f8 ff             	cmp    eax,0xffffffff
   1decd:	74 35                	je     1df04 <fl_fwrite+0x11c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1308
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
   1decf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1ded2:	8b 80 2c 03 00 00    	mov    eax,DWORD PTR [eax+0x32c]
   1ded8:	85 c0                	test   eax,eax
   1deda:	74 0e                	je     1deea <fl_fwrite+0x102>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1309
                    fl_fflush(file);
   1dedc:	83 ec 0c             	sub    esp,0xc
   1dedf:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1dee2:	e8 71 f8 ff ff       	call   1d758 <fl_fflush>
   1dee7:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1311

                file->file_data_address = 0xFFFFFFFF;
   1deea:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1deed:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1def4:	ff ff ff 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1312
                file->file_data_dirty = 0;
   1def7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1defa:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1df01:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1316
            }

            // Write as many sectors as possible
            sectorsWrote = _write_sectors(file, sector, (uint8*)(buffer + bytesWritten), (length - bytesWritten) / FAT_SECTOR_SIZE);
   1df04:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1df07:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1df0a:	c1 e8 09             	shr    eax,0x9
   1df0d:	89 c2                	mov    edx,eax
   1df0f:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
   1df12:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1df15:	01 c8                	add    eax,ecx
   1df17:	52                   	push   edx
   1df18:	50                   	push   eax
   1df19:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1df1c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1df1f:	e8 42 f6 ff ff       	call   1d566 <_write_sectors>
   1df24:	83 c4 10             	add    esp,0x10
   1df27:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1317
            copyCount = FAT_SECTOR_SIZE * sectorsWrote;
   1df2a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1df2d:	c1 e0 09             	shl    eax,0x9
   1df30:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1320

            // Increase total read count
            bytesWritten += copyCount;
   1df33:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1df36:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1323

            // Increment file pointer
            file->bytenum += copyCount;
   1df39:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1df3c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1df3f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1df42:	01 c2                	add    edx,eax
   1df44:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1df47:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1326

            // Move onto next sector and reset copy offset
            sector+= sectorsWrote;
   1df4a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1df4d:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1327
            offset = 0;
   1df50:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1329

            if (!sectorsWrote)
   1df57:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
   1df5b:	0f 84 0a 01 00 00    	je     1e06b <fl_fwrite+0x283>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1301

    while (bytesWritten < length)
    {
        // Whole sector or more to be written?
        if ((offset == 0) && ((length - bytesWritten) >= FAT_SECTOR_SIZE))
        {
   1df61:	e9 f7 00 00 00       	jmp    1e05d <fl_fwrite+0x275>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1335
                break;
        }
        else
        {
            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
   1df66:	b8 00 02 00 00       	mov    eax,0x200
   1df6b:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
   1df6e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1338

            // Only require some of this sector?
            if (copyCount > (length - bytesWritten))
   1df71:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1df74:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1df77:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1df7a:	73 09                	jae    1df85 <fl_fwrite+0x19d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1339
                copyCount = (length - bytesWritten);
   1df7c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1df7f:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1df82:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1342

            // Do we need to read a new sector?
            if (file->file_data_address != sector)
   1df85:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1df88:	8b 80 28 03 00 00    	mov    eax,DWORD PTR [eax+0x328]
   1df8e:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1df91:	74 75                	je     1e008 <fl_fwrite+0x220>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1345
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
   1df93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1df96:	8b 80 2c 03 00 00    	mov    eax,DWORD PTR [eax+0x32c]
   1df9c:	85 c0                	test   eax,eax
   1df9e:	74 0e                	je     1dfae <fl_fwrite+0x1c6>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1346
                    fl_fflush(file);
   1dfa0:	83 ec 0c             	sub    esp,0xc
   1dfa3:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1dfa6:	e8 ad f7 ff ff       	call   1d758 <fl_fflush>
   1dfab:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1349

                // If we plan to overwrite the whole sector, we don't need to read it first!
                if (copyCount != FAT_SECTOR_SIZE)
   1dfae:	81 7d e8 00 02 00 00 	cmp    DWORD PTR [ebp-0x18],0x200
   1dfb5:	74 38                	je     1dfef <fl_fwrite+0x207>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1356
                    // NOTE: This does not have succeed; if last sector of file
                    // reached, no valid data will be read in, but write will
                    // allocate some more space for new data.

                    // Get LBA of sector offset within file
                    if (!_read_sectors(file, sector, file->file_data_sector, 1))
   1dfb7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1dfba:	05 28 01 00 00       	add    eax,0x128
   1dfbf:	6a 01                	push   0x1
   1dfc1:	50                   	push   eax
   1dfc2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1dfc5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1dfc8:	e8 1f f1 ff ff       	call   1d0ec <_read_sectors>
   1dfcd:	83 c4 10             	add    esp,0x10
   1dfd0:	85 c0                	test   eax,eax
   1dfd2:	75 1b                	jne    1dfef <fl_fwrite+0x207>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1357
                        memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
   1dfd4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1dfd7:	05 28 01 00 00       	add    eax,0x128
   1dfdc:	83 ec 04             	sub    esp,0x4
   1dfdf:	68 00 02 00 00       	push   0x200
   1dfe4:	6a 00                	push   0x0
   1dfe6:	50                   	push   eax
   1dfe7:	e8 c1 6f 00 00       	call   24fad <memset>
   1dfec:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1360
                }

                file->file_data_address = sector;
   1dfef:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1dff2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1dff5:	89 90 28 03 00 00    	mov    DWORD PTR [eax+0x328],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1361
                file->file_data_dirty = 0;
   1dffb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1dffe:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1e005:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1365
            }

            // Copy from application buffer into sector buffer
            memcpy((uint8*)(file->file_data_sector + offset), (uint8*)(buffer + bytesWritten), copyCount);
   1e008:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   1e00b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e00e:	01 c2                	add    edx,eax
   1e010:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e013:	8d 88 28 01 00 00    	lea    ecx,[eax+0x128]
   1e019:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e01c:	01 c8                	add    eax,ecx
   1e01e:	83 ec 04             	sub    esp,0x4
   1e021:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1e024:	52                   	push   edx
   1e025:	50                   	push   eax
   1e026:	e8 75 79 00 00       	call   259a0 <memcpy>
   1e02b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1368

            // Mark buffer as dirty
            file->file_data_dirty = 1;
   1e02e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e031:	c7 80 2c 03 00 00 01 	mov    DWORD PTR [eax+0x32c],0x1
   1e038:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1371

            // Increase total read count
            bytesWritten += copyCount;
   1e03b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e03e:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1374

            // Increment file pointer
            file->bytenum += copyCount;
   1e041:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e044:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e047:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e04a:	01 c2                	add    edx,eax
   1e04c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e04f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1377

            // Move onto next sector and reset copy offset
            sector++;
   1e052:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1378
            offset = 0;
   1e056:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1297
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesWritten < length)
   1e05d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e060:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1e063:	0f 82 3d fe ff ff    	jb     1dea6 <fl_fwrite+0xbe>
   1e069:	eb 01                	jmp    1e06c <fl_fwrite+0x284>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1330
            // Move onto next sector and reset copy offset
            sector+= sectorsWrote;
            offset = 0;

            if (!sectorsWrote)
                break;
   1e06b:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1383
            offset = 0;
        }
    }

    // Write increased extent of the file?
    if (file->bytenum > file->filelength)
   1e06c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e06f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e072:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e075:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1e078:	39 c2                	cmp    edx,eax
   1e07a:	76 16                	jbe    1e092 <fl_fwrite+0x2aa>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1386
    {
        // Increase file size to new point
        file->filelength = file->bytenum;
   1e07c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e07f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e082:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e085:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1390

        // We are changing the file length and this
        // will need to be writen back at some point
        file->filelength_changed = 1;
   1e088:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e08b:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1396
    }

#if FATFS_INC_TIME_DATE_SUPPORT
    // If time & date support is enabled, always force directory entry to be
    // written in-order to update file modify / access time & date.
    file->filelength_changed = 1;
   1e092:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e095:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1399
#endif

    FL_UNLOCK(&_fs);
   1e09c:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e0a1:	85 c0                	test   eax,eax
   1e0a3:	74 07                	je     1e0ac <fl_fwrite+0x2c4>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1399 (discriminator 1)
   1e0a5:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e0aa:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1401

    return (size*count);
   1e0ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e0af:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1402
}
   1e0b3:	c9                   	leave  
   1e0b4:	c3                   	ret    

0001e0b5 <fl_fputs>:
fl_fputs():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1409
//-----------------------------------------------------------------------------
// fl_fputs: Write a character string to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fputs(const char * str, void *f)
{
   1e0b5:	55                   	push   ebp
   1e0b6:	89 e5                	mov    ebp,esp
   1e0b8:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1410
    int len = (int)strlen(str);
   1e0bb:	83 ec 0c             	sub    esp,0xc
   1e0be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e0c1:	e8 3e 91 00 00       	call   27204 <strlen>
   1e0c6:	83 c4 10             	add    esp,0x10
   1e0c9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1411
    int res = fl_fwrite(str, 1, len, f);
   1e0cc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e0cf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1e0d2:	6a 01                	push   0x1
   1e0d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e0d7:	e8 0c fd ff ff       	call   1dde8 <fl_fwrite>
   1e0dc:	83 c4 10             	add    esp,0x10
   1e0df:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1413

    if (res == len)
   1e0e2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e0e5:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1e0e8:	75 05                	jne    1e0ef <fl_fputs+0x3a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1414
        return len;
   1e0ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1e0ed:	eb 03                	jmp    1e0f2 <fl_fputs+0x3d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1416
    else
        return res;
   1e0ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1417
}
   1e0f2:	c9                   	leave  
   1e0f3:	c3                   	ret    

0001e0f4 <fl_remove>:
fl_remove():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1424
//-----------------------------------------------------------------------------
// fl_remove: Remove a file from the filesystem
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_remove( const char * filename )
{
   1e0f4:	55                   	push   ebp
   1e0f5:	89 e5                	mov    ebp,esp
   1e0f7:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1426
    FL_FILE* file;
    int res = -1;
   1e0fa:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1428

    FL_LOCK(&_fs);
   1e101:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e106:	85 c0                	test   eax,eax
   1e108:	74 07                	je     1e111 <fl_remove+0x1d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1428 (discriminator 1)
   1e10a:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e10f:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1431

    // Use read_file as this will check if the file is already open!
    file = fl_fopen((char*)filename, "r");
   1e111:	83 ec 08             	sub    esp,0x8
   1e114:	68 10 38 08 00       	push   0x83810
   1e119:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e11c:	e8 8c f2 ff ff       	call   1d3ad <fl_fopen>
   1e121:	83 c4 10             	add    esp,0x10
   1e124:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1432
    if (file)
   1e127:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1e12b:	74 54                	je     1e181 <fl_remove+0x8d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1435
    {
        // Delete allocated space
        if (fatfs_free_cluster_chain(&_fs, file->startcluster))
   1e12d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e130:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1e133:	83 ec 08             	sub    esp,0x8
   1e136:	50                   	push   eax
   1e137:	68 a0 e6 09 00       	push   0x9e6a0
   1e13c:	e8 0d 2a 00 00       	call   20b4e <fatfs_free_cluster_chain>
   1e141:	83 c4 10             	add    esp,0x10
   1e144:	85 c0                	test   eax,eax
   1e146:	74 39                	je     1e181 <fl_remove+0x8d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1438
        {
            // Remove directory entries
            if (fatfs_mark_file_deleted(&_fs, file->parentcluster, (char*)file->shortfilename))
   1e148:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e14b:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1e151:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e154:	8b 00                	mov    eax,DWORD PTR [eax]
   1e156:	83 ec 04             	sub    esp,0x4
   1e159:	52                   	push   edx
   1e15a:	50                   	push   eax
   1e15b:	68 a0 e6 09 00       	push   0x9e6a0
   1e160:	e8 f0 da ff ff       	call   1bc55 <fatfs_mark_file_deleted>
   1e165:	83 c4 10             	add    esp,0x10
   1e168:	85 c0                	test   eax,eax
   1e16a:	74 15                	je     1e181 <fl_remove+0x8d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1442
            {
                // Close the file handle (this should not write anything to the file
                // as we have not changed the file since opening it!)
                fl_fclose(file);
   1e16c:	83 ec 0c             	sub    esp,0xc
   1e16f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1e172:	e8 67 f6 ff ff       	call   1d7de <fl_fclose>
   1e177:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1444

                res = 0;
   1e17a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1449
            }
        }
    }

    FL_UNLOCK(&_fs);
   1e181:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e186:	85 c0                	test   eax,eax
   1e188:	74 07                	je     1e191 <fl_remove+0x9d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1449 (discriminator 1)
   1e18a:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e18f:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1451

    return res;
   1e191:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1452
}
   1e194:	c9                   	leave  
   1e195:	c3                   	ret    

0001e196 <fl_createdirectory>:
fl_createdirectory():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1459
//-----------------------------------------------------------------------------
// fl_createdirectory: Create a directory based on a path
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_createdirectory(const char *path)
{
   1e196:	55                   	push   ebp
   1e197:	89 e5                	mov    ebp,esp
   1e199:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1463
    int res;

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e19c:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1e1a1:	85 c0                	test   eax,eax
   1e1a3:	75 05                	jne    1e1aa <fl_createdirectory+0x14>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1463 (discriminator 1)
   1e1a5:	e8 dc f0 ff ff       	call   1d286 <fl_init>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1465

    FL_LOCK(&_fs);
   1e1aa:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e1af:	85 c0                	test   eax,eax
   1e1b1:	74 07                	je     1e1ba <fl_createdirectory+0x24>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1465 (discriminator 1)
   1e1b3:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e1b8:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1466
    res =_create_directory((char*)path);
   1e1ba:	83 ec 0c             	sub    esp,0xc
   1e1bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e1c0:	e8 ec e5 ff ff       	call   1c7b1 <_create_directory>
   1e1c5:	83 c4 10             	add    esp,0x10
   1e1c8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1467
    FL_UNLOCK(&_fs);
   1e1cb:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e1d0:	85 c0                	test   eax,eax
   1e1d2:	74 07                	je     1e1db <fl_createdirectory+0x45>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1467 (discriminator 1)
   1e1d4:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e1d9:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1469

    return res;
   1e1db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1470
}
   1e1de:	c9                   	leave  
   1e1df:	c3                   	ret    

0001e1e0 <fl_listdirectory>:
fl_listdirectory():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1477
//-----------------------------------------------------------------------------
// fl_listdirectory: List a directory based on a path
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fl_listdirectory(const char *path)
{
   1e1e0:	55                   	push   ebp
   1e1e1:	89 e5                	mov    ebp,esp
   1e1e3:	56                   	push   esi
   1e1e4:	53                   	push   ebx
   1e1e5:	81 ec c0 00 00 00    	sub    esp,0xc0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1481
    FL_DIR dirstat;

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e1eb:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1e1f0:	85 c0                	test   eax,eax
   1e1f2:	75 05                	jne    1e1f9 <fl_listdirectory+0x19>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1481 (discriminator 1)
   1e1f4:	e8 8d f0 ff ff       	call   1d286 <fl_init>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1483

    FAT_PRINTF(("\r\nDirectory %s\r\n", path));
   1e1f9:	83 ec 08             	sub    esp,0x8
   1e1fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e1ff:	68 12 38 08 00       	push   0x83812
   1e204:	e8 2a 8e 00 00       	call   27033 <printk>
   1e209:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1484
        FL_LOCK(&_fs);
   1e20c:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e211:	85 c0                	test   eax,eax
   1e213:	74 07                	je     1e21c <fl_listdirectory+0x3c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1484 (discriminator 1)
   1e215:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e21a:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1487


        if (fl_opendir(path, &dirstat))
   1e21c:	83 ec 08             	sub    esp,0x8
   1e21f:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e222:	50                   	push   eax
   1e223:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e226:	e8 ed 00 00 00       	call   1e318 <fl_opendir>
   1e22b:	83 c4 10             	add    esp,0x10
   1e22e:	85 c0                	test   eax,eax
   1e230:	0f 84 ca 00 00 00    	je     1e300 <fl_listdirectory+0x120>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1491
    {
        struct fs_dir_ent dirent;

        while (fl_readdir(&dirstat, &dirent) == 0)
   1e236:	e9 98 00 00 00       	jmp    1e2d3 <fl_listdirectory+0xf3>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1495
        {
#if FATFS_INC_TIME_DATE_SUPPORT
            int d,m,y,h,mn,s;
            fatfs_convert_from_fat_time(dirent.write_time, &h,&m,&s);
   1e23b:	0f b7 45 ca          	movzx  eax,WORD PTR [ebp-0x36]
   1e23f:	0f b7 c0             	movzx  eax,ax
   1e242:	8d 55 d4             	lea    edx,[ebp-0x2c]
   1e245:	52                   	push   edx
   1e246:	8d 55 e4             	lea    edx,[ebp-0x1c]
   1e249:	52                   	push   edx
   1e24a:	8d 55 dc             	lea    edx,[ebp-0x24]
   1e24d:	52                   	push   edx
   1e24e:	50                   	push   eax
   1e24f:	e8 07 18 00 00       	call   1fa5b <fatfs_convert_from_fat_time>
   1e254:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1496
            fatfs_convert_from_fat_date(dirent.write_date, &d,&mn,&y);
   1e257:	0f b7 45 cc          	movzx  eax,WORD PTR [ebp-0x34]
   1e25b:	0f b7 c0             	movzx  eax,ax
   1e25e:	8d 55 e0             	lea    edx,[ebp-0x20]
   1e261:	52                   	push   edx
   1e262:	8d 55 d8             	lea    edx,[ebp-0x28]
   1e265:	52                   	push   edx
   1e266:	8d 55 e8             	lea    edx,[ebp-0x18]
   1e269:	52                   	push   edx
   1e26a:	50                   	push   eax
   1e26b:	e8 40 18 00 00       	call   1fab0 <fatfs_convert_from_fat_date>
   1e270:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1497
            FAT_PRINTF(("%02d/%02d/%04d  %02d:%02d      ", mn,d,y,h,m));
   1e273:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
   1e276:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
   1e279:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1e27c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1e27f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1e282:	83 ec 08             	sub    esp,0x8
   1e285:	56                   	push   esi
   1e286:	53                   	push   ebx
   1e287:	51                   	push   ecx
   1e288:	52                   	push   edx
   1e289:	50                   	push   eax
   1e28a:	68 24 38 08 00       	push   0x83824
   1e28f:	e8 9f 8d 00 00       	call   27033 <printk>
   1e294:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1500
#endif

            if (dirent.is_dir)
   1e297:	0f b6 45 bc          	movzx  eax,BYTE PTR [ebp-0x44]
   1e29b:	84 c0                	test   al,al
   1e29d:	74 19                	je     1e2b8 <fl_listdirectory+0xd8>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1502
            {
                FAT_PRINTF(("%s <DIR>\r\n", dirent.filename));
   1e29f:	83 ec 08             	sub    esp,0x8
   1e2a2:	8d 85 3c ff ff ff    	lea    eax,[ebp-0xc4]
   1e2a8:	50                   	push   eax
   1e2a9:	68 44 38 08 00       	push   0x83844
   1e2ae:	e8 80 8d 00 00       	call   27033 <printk>
   1e2b3:	83 c4 10             	add    esp,0x10
   1e2b6:	eb 1b                	jmp    1e2d3 <fl_listdirectory+0xf3>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1506
            }
            else
            {
                FAT_PRINTF(("%s [%d bytes]\r\n", dirent.filename, dirent.size));
   1e2b8:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
   1e2bb:	83 ec 04             	sub    esp,0x4
   1e2be:	50                   	push   eax
   1e2bf:	8d 85 3c ff ff ff    	lea    eax,[ebp-0xc4]
   1e2c5:	50                   	push   eax
   1e2c6:	68 4f 38 08 00       	push   0x8384f
   1e2cb:	e8 63 8d 00 00       	call   27033 <printk>
   1e2d0:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1491

        if (fl_opendir(path, &dirstat))
    {
        struct fs_dir_ent dirent;

        while (fl_readdir(&dirstat, &dirent) == 0)
   1e2d3:	83 ec 08             	sub    esp,0x8
   1e2d6:	8d 85 3c ff ff ff    	lea    eax,[ebp-0xc4]
   1e2dc:	50                   	push   eax
   1e2dd:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e2e0:	50                   	push   eax
   1e2e1:	e8 e9 00 00 00       	call   1e3cf <fl_readdir>
   1e2e6:	83 c4 10             	add    esp,0x10
   1e2e9:	85 c0                	test   eax,eax
   1e2eb:	0f 84 4a ff ff ff    	je     1e23b <fl_listdirectory+0x5b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1510
            {
                FAT_PRINTF(("%s [%d bytes]\r\n", dirent.filename, dirent.size));
            }
        }

        fl_closedir(&dirstat);
   1e2f1:	83 ec 0c             	sub    esp,0xc
   1e2f4:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e2f7:	50                   	push   eax
   1e2f8:	e8 3a 01 00 00       	call   1e437 <fl_closedir>
   1e2fd:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1513
    }

    FL_UNLOCK(&_fs);
   1e300:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e305:	85 c0                	test   eax,eax
   1e307:	74 07                	je     1e310 <fl_listdirectory+0x130>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1513 (discriminator 1)
   1e309:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e30e:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1514
}
   1e310:	90                   	nop
   1e311:	8d 65 f8             	lea    esp,[ebp-0x8]
   1e314:	5b                   	pop    ebx
   1e315:	5e                   	pop    esi
   1e316:	5d                   	pop    ebp
   1e317:	c3                   	ret    

0001e318 <fl_opendir>:
fl_opendir():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1521
//-----------------------------------------------------------------------------
// fl_opendir: Opens a directory for listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
FL_DIR* fl_opendir(const char* path, FL_DIR *dir)
{
   1e318:	55                   	push   ebp
   1e319:	89 e5                	mov    ebp,esp
   1e31b:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1523
    int levels;
    int res = 1;
   1e31e:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1524
    uint32 cluster = FAT32_INVALID_CLUSTER;
   1e325:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1527

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e32c:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1e331:	85 c0                	test   eax,eax
   1e333:	75 05                	jne    1e33a <fl_opendir+0x22>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1527 (discriminator 1)
   1e335:	e8 4c ef ff ff       	call   1d286 <fl_init>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1529

    FL_LOCK(&_fs);
   1e33a:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e33f:	85 c0                	test   eax,eax
   1e341:	74 07                	je     1e34a <fl_opendir+0x32>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1529 (discriminator 1)
   1e343:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e348:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1531

    levels = fatfs_total_path_levels((char*)path) + 1;
   1e34a:	83 ec 0c             	sub    esp,0xc
   1e34d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e350:	e8 5b 18 00 00       	call   1fbb0 <fatfs_total_path_levels>
   1e355:	83 c4 10             	add    esp,0x10
   1e358:	83 c0 01             	add    eax,0x1
   1e35b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1534

    // If path is in the root dir
    if (levels == 0)
   1e35e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1e362:	75 15                	jne    1e379 <fl_opendir+0x61>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1535
        cluster = fatfs_get_root_cluster(&_fs);
   1e364:	83 ec 0c             	sub    esp,0xc
   1e367:	68 a0 e6 09 00       	push   0x9e6a0
   1e36c:	e8 18 d3 ff ff       	call   1b689 <fatfs_get_root_cluster>
   1e371:	83 c4 10             	add    esp,0x10
   1e374:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
   1e377:	eb 15                	jmp    1e38e <fl_opendir+0x76>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1538
    // Find parent directory start cluster
    else
        res = _open_directory((char*)path, &cluster);
   1e379:	83 ec 08             	sub    esp,0x8
   1e37c:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e37f:	50                   	push   eax
   1e380:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e383:	e8 3f e3 ff ff       	call   1c6c7 <_open_directory>
   1e388:	83 c4 10             	add    esp,0x10
   1e38b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1540

    if (res)
   1e38e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1e392:	74 17                	je     1e3ab <fl_opendir+0x93>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1541
        fatfs_list_directory_start(&_fs, dir, cluster);
   1e394:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e397:	83 ec 04             	sub    esp,0x4
   1e39a:	50                   	push   eax
   1e39b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e39e:	68 a0 e6 09 00       	push   0x9e6a0
   1e3a3:	e8 eb d9 ff ff       	call   1bd93 <fatfs_list_directory_start>
   1e3a8:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1543

    FL_UNLOCK(&_fs);
   1e3ab:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e3b0:	85 c0                	test   eax,eax
   1e3b2:	74 07                	je     1e3bb <fl_opendir+0xa3>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1543 (discriminator 1)
   1e3b4:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e3b9:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1545

    return cluster != FAT32_INVALID_CLUSTER ? dir : 0;
   1e3bb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e3be:	83 f8 ff             	cmp    eax,0xffffffff
   1e3c1:	74 05                	je     1e3c8 <fl_opendir+0xb0>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1545 (discriminator 1)
   1e3c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e3c6:	eb 05                	jmp    1e3cd <fl_opendir+0xb5>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1545 (discriminator 2)
   1e3c8:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1546
}
   1e3cd:	c9                   	leave  
   1e3ce:	c3                   	ret    

0001e3cf <fl_readdir>:
fl_readdir():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1553
//-----------------------------------------------------------------------------
// fl_readdir: Get next item in directory
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_readdir(FL_DIR *dirls, fl_dirent *entry)
{
   1e3cf:	55                   	push   ebp
   1e3d0:	89 e5                	mov    ebp,esp
   1e3d2:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1554
    int res = 0;
   1e3d5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1557

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e3dc:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1e3e1:	85 c0                	test   eax,eax
   1e3e3:	75 05                	jne    1e3ea <fl_readdir+0x1b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1557 (discriminator 1)
   1e3e5:	e8 9c ee ff ff       	call   1d286 <fl_init>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1559

    FL_LOCK(&_fs);
   1e3ea:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e3ef:	85 c0                	test   eax,eax
   1e3f1:	74 07                	je     1e3fa <fl_readdir+0x2b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1559 (discriminator 1)
   1e3f3:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e3f8:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1561

    res = fatfs_list_directory_next(&_fs, dirls, entry);
   1e3fa:	83 ec 04             	sub    esp,0x4
   1e3fd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e400:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e403:	68 a0 e6 09 00       	push   0x9e6a0
   1e408:	e8 a5 d9 ff ff       	call   1bdb2 <fatfs_list_directory_next>
   1e40d:	83 c4 10             	add    esp,0x10
   1e410:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1563

    FL_UNLOCK(&_fs);
   1e413:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e418:	85 c0                	test   eax,eax
   1e41a:	74 07                	je     1e423 <fl_readdir+0x54>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1563 (discriminator 1)
   1e41c:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e421:	ff d0                	call   eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1565

    return res ? 0 : -1;
   1e423:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1e427:	74 07                	je     1e430 <fl_readdir+0x61>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1565 (discriminator 1)
   1e429:	b8 00 00 00 00       	mov    eax,0x0
   1e42e:	eb 05                	jmp    1e435 <fl_readdir+0x66>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1565 (discriminator 2)
   1e430:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1566 (discriminator 5)
}
   1e435:	c9                   	leave  
   1e436:	c3                   	ret    

0001e437 <fl_closedir>:
fl_closedir():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1573
//-----------------------------------------------------------------------------
// fl_closedir: Close directory after listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_closedir(FL_DIR* dir)
{
   1e437:	55                   	push   ebp
   1e438:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1575
    // Not used
    return 0;
   1e43a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1576
}
   1e43f:	5d                   	pop    ebp
   1e440:	c3                   	ret    

0001e441 <fl_is_dir>:
fl_is_dir():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1583
//-----------------------------------------------------------------------------
// fl_is_dir: Is this a directory?
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_is_dir(const char *path)
{
   1e441:	55                   	push   ebp
   1e442:	89 e5                	mov    ebp,esp
   1e444:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1584
    int res = 0;
   1e447:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1587
    FL_DIR dir;

    if (fl_opendir(path, &dir))
   1e44e:	83 ec 08             	sub    esp,0x8
   1e451:	8d 45 e8             	lea    eax,[ebp-0x18]
   1e454:	50                   	push   eax
   1e455:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e458:	e8 bb fe ff ff       	call   1e318 <fl_opendir>
   1e45d:	83 c4 10             	add    esp,0x10
   1e460:	85 c0                	test   eax,eax
   1e462:	74 16                	je     1e47a <fl_is_dir+0x39>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1589
    {
        res = 1;
   1e464:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1590
        fl_closedir(&dir);
   1e46b:	83 ec 0c             	sub    esp,0xc
   1e46e:	8d 45 e8             	lea    eax,[ebp-0x18]
   1e471:	50                   	push   eax
   1e472:	e8 c0 ff ff ff       	call   1e437 <fl_closedir>
   1e477:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1593
    }

    return res;
   1e47a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1594
}
   1e47d:	c9                   	leave  
   1e47e:	c3                   	ret    

0001e47f <fl_format>:
fl_format():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1601
//-----------------------------------------------------------------------------
// fl_format: Format a partition with either FAT16 or FAT32 based on size
//-----------------------------------------------------------------------------
#if FATFS_INC_FORMAT_SUPPORT
int fl_format(uint32 volume_sectors, const char *name)
{
   1e47f:	55                   	push   ebp
   1e480:	89 e5                	mov    ebp,esp
   1e482:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1602
    return fatfs_format(&_fs, volume_sectors, name);
   1e485:	83 ec 04             	sub    esp,0x4
   1e488:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e48b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e48e:	68 a0 e6 09 00       	push   0x9e6a0
   1e493:	e8 8a 0b 00 00       	call   1f022 <fatfs_format>
   1e498:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_filelib.c:1603
}
   1e49b:	c9                   	leave  
   1e49c:	c3                   	ret    
   1e49d:	66 90                	xchg   ax,ax
   1e49f:	90                   	nop

0001e4a0 <fatfs_calc_cluster_size>:
fatfs_calc_cluster_size():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:78

//-----------------------------------------------------------------------------
// fatfs_calc_cluster_size: Calculate what cluster size should be used
//-----------------------------------------------------------------------------
static uint8 fatfs_calc_cluster_size(uint32 sectors, int is_fat32)
{
   1e4a0:	55                   	push   ebp
   1e4a1:	89 e5                	mov    ebp,esp
   1e4a3:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:81
    int i;

    if (!is_fat32)
   1e4a6:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1e4aa:	75 3a                	jne    1e4e6 <fatfs_calc_cluster_size+0x46>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:83
    {
        for (i=0; _cluster_size_table16[i].sectors_per_cluster != 0;i++)
   1e4ac:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1e4b3:	eb 20                	jmp    1e4d5 <fatfs_calc_cluster_size+0x35>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:84
            if (sectors <= _cluster_size_table16[i].sectors)
   1e4b5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e4b8:	8b 04 c5 60 d9 02 00 	mov    eax,DWORD PTR [eax*8+0x2d960]
   1e4bf:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1e4c2:	72 0d                	jb     1e4d1 <fatfs_calc_cluster_size+0x31>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:85
                return _cluster_size_table16[i].sectors_per_cluster;
   1e4c4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e4c7:	0f b6 04 c5 64 d9 02 	movzx  eax,BYTE PTR [eax*8+0x2d964]
   1e4ce:	00 
   1e4cf:	eb 52                	jmp    1e523 <fatfs_calc_cluster_size+0x83>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:83 (discriminator 2)
{
    int i;

    if (!is_fat32)
    {
        for (i=0; _cluster_size_table16[i].sectors_per_cluster != 0;i++)
   1e4d1:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:83 (discriminator 1)
   1e4d5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e4d8:	0f b6 04 c5 64 d9 02 	movzx  eax,BYTE PTR [eax*8+0x2d964]
   1e4df:	00 
   1e4e0:	84 c0                	test   al,al
   1e4e2:	75 d1                	jne    1e4b5 <fatfs_calc_cluster_size+0x15>
   1e4e4:	eb 38                	jmp    1e51e <fatfs_calc_cluster_size+0x7e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:89
            if (sectors <= _cluster_size_table16[i].sectors)
                return _cluster_size_table16[i].sectors_per_cluster;
    }
    else
    {
        for (i=0; _cluster_size_table32[i].sectors_per_cluster != 0;i++)
   1e4e6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1e4ed:	eb 20                	jmp    1e50f <fatfs_calc_cluster_size+0x6f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:90
            if (sectors <= _cluster_size_table32[i].sectors)
   1e4ef:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e4f2:	8b 04 c5 a0 d9 02 00 	mov    eax,DWORD PTR [eax*8+0x2d9a0]
   1e4f9:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1e4fc:	72 0d                	jb     1e50b <fatfs_calc_cluster_size+0x6b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:91
                return _cluster_size_table32[i].sectors_per_cluster;
   1e4fe:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e501:	0f b6 04 c5 a4 d9 02 	movzx  eax,BYTE PTR [eax*8+0x2d9a4]
   1e508:	00 
   1e509:	eb 18                	jmp    1e523 <fatfs_calc_cluster_size+0x83>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:89 (discriminator 2)
            if (sectors <= _cluster_size_table16[i].sectors)
                return _cluster_size_table16[i].sectors_per_cluster;
    }
    else
    {
        for (i=0; _cluster_size_table32[i].sectors_per_cluster != 0;i++)
   1e50b:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:89 (discriminator 1)
   1e50f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e512:	0f b6 04 c5 a4 d9 02 	movzx  eax,BYTE PTR [eax*8+0x2d9a4]
   1e519:	00 
   1e51a:	84 c0                	test   al,al
   1e51c:	75 d1                	jne    1e4ef <fatfs_calc_cluster_size+0x4f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:94
            if (sectors <= _cluster_size_table32[i].sectors)
                return _cluster_size_table32[i].sectors_per_cluster;
    }

    return 0;
   1e51e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:95
}
   1e523:	c9                   	leave  
   1e524:	c3                   	ret    

0001e525 <fatfs_erase_sectors>:
fatfs_erase_sectors():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:100
//-----------------------------------------------------------------------------
// fatfs_erase_sectors: Erase a number of sectors
//-----------------------------------------------------------------------------
static int fatfs_erase_sectors(struct fatfs *fs, uint32 lba, int count)
{
   1e525:	55                   	push   ebp
   1e526:	89 e5                	mov    ebp,esp
   1e528:	53                   	push   ebx
   1e529:	83 ec 14             	sub    esp,0x14
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:104
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1e52c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e52f:	83 c0 44             	add    eax,0x44
   1e532:	83 ec 04             	sub    esp,0x4
   1e535:	68 00 02 00 00       	push   0x200
   1e53a:	6a 00                	push   0x0
   1e53c:	50                   	push   eax
   1e53d:	e8 6b 6a 00 00       	call   24fad <memset>
   1e542:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:106

    for (i=0;i<count;i++)
   1e545:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1e54c:	eb 2f                	jmp    1e57d <fatfs_erase_sectors+0x58>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:107
        if (!fs->disk_io.write_media(lba + i, fs->currentsector.sector, 1))
   1e54e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e551:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1e554:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1e557:	8d 4a 44             	lea    ecx,[edx+0x44]
   1e55a:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
   1e55d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1e560:	01 da                	add    edx,ebx
   1e562:	83 ec 04             	sub    esp,0x4
   1e565:	6a 01                	push   0x1
   1e567:	51                   	push   ecx
   1e568:	52                   	push   edx
   1e569:	ff d0                	call   eax
   1e56b:	83 c4 10             	add    esp,0x10
   1e56e:	85 c0                	test   eax,eax
   1e570:	75 07                	jne    1e579 <fatfs_erase_sectors+0x54>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:108
            return 0;
   1e572:	b8 00 00 00 00       	mov    eax,0x0
   1e577:	eb 11                	jmp    1e58a <fatfs_erase_sectors+0x65>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:106 (discriminator 2)
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    for (i=0;i<count;i++)
   1e579:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:106 (discriminator 1)
   1e57d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1e580:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1e583:	7c c9                	jl     1e54e <fatfs_erase_sectors+0x29>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:110
        if (!fs->disk_io.write_media(lba + i, fs->currentsector.sector, 1))
            return 0;

    return 1;
   1e585:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:111
}
   1e58a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1e58d:	c9                   	leave  
   1e58e:	c3                   	ret    

0001e58f <fatfs_create_boot_sector>:
fatfs_create_boot_sector():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:116
//-----------------------------------------------------------------------------
// fatfs_create_boot_sector: Create the boot sector
//-----------------------------------------------------------------------------
static int fatfs_create_boot_sector(struct fatfs *fs, uint32 boot_sector_lba, uint32 vol_sectors, const char *name, int is_fat32)
{
   1e58f:	55                   	push   ebp
   1e590:	89 e5                	mov    ebp,esp
   1e592:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:121
    uint32 total_clusters;
    int i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1e595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e598:	83 c0 44             	add    eax,0x44
   1e59b:	83 ec 04             	sub    esp,0x4
   1e59e:	68 00 02 00 00       	push   0x200
   1e5a3:	6a 00                	push   0x0
   1e5a5:	50                   	push   eax
   1e5a6:	e8 02 6a 00 00       	call   24fad <memset>
   1e5ab:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:124

    // OEM Name & Jump Code
    fs->currentsector.sector[0] = 0xEB;
   1e5ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e5b1:	c6 40 44 eb          	mov    BYTE PTR [eax+0x44],0xeb
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:125
    fs->currentsector.sector[1] = 0x3C;
   1e5b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e5b8:	c6 40 45 3c          	mov    BYTE PTR [eax+0x45],0x3c
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:126
    fs->currentsector.sector[2] = 0x90;
   1e5bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e5bf:	c6 40 46 90          	mov    BYTE PTR [eax+0x46],0x90
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:127
    fs->currentsector.sector[3] = 0x4D;
   1e5c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e5c6:	c6 40 47 4d          	mov    BYTE PTR [eax+0x47],0x4d
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:128
    fs->currentsector.sector[4] = 0x53;
   1e5ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e5cd:	c6 40 48 53          	mov    BYTE PTR [eax+0x48],0x53
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:129
    fs->currentsector.sector[5] = 0x44;
   1e5d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e5d4:	c6 40 49 44          	mov    BYTE PTR [eax+0x49],0x44
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:130
    fs->currentsector.sector[6] = 0x4F;
   1e5d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e5db:	c6 40 4a 4f          	mov    BYTE PTR [eax+0x4a],0x4f
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:131
    fs->currentsector.sector[7] = 0x53;
   1e5df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e5e2:	c6 40 4b 53          	mov    BYTE PTR [eax+0x4b],0x53
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:132
    fs->currentsector.sector[8] = 0x35;
   1e5e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e5e9:	c6 40 4c 35          	mov    BYTE PTR [eax+0x4c],0x35
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:133
    fs->currentsector.sector[9] = 0x2E;
   1e5ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e5f0:	c6 40 4d 2e          	mov    BYTE PTR [eax+0x4d],0x2e
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:134
    fs->currentsector.sector[10] = 0x30;
   1e5f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e5f7:	c6 40 4e 30          	mov    BYTE PTR [eax+0x4e],0x30
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:137

    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
   1e5fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e5fe:	c6 40 4f 00          	mov    BYTE PTR [eax+0x4f],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:138
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;
   1e602:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e605:	c6 40 50 02          	mov    BYTE PTR [eax+0x50],0x2
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:141

    // Get sectors per cluster size for the disk
    fs->sectors_per_cluster = fatfs_calc_cluster_size(vol_sectors, is_fat32);
   1e609:	83 ec 08             	sub    esp,0x8
   1e60c:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   1e60f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1e612:	e8 89 fe ff ff       	call   1e4a0 <fatfs_calc_cluster_size>
   1e617:	83 c4 10             	add    esp,0x10
   1e61a:	89 c2                	mov    edx,eax
   1e61c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e61f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:142
    if (!fs->sectors_per_cluster)
   1e621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e624:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1e627:	84 c0                	test   al,al
   1e629:	75 0a                	jne    1e635 <fatfs_create_boot_sector+0xa6>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:143
        return 0; // Invalid disk size
   1e62b:	b8 00 00 00 00       	mov    eax,0x0
   1e630:	e9 dc 04 00 00       	jmp    1eb11 <fatfs_create_boot_sector+0x582>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:146

    // Sectors per cluster
    fs->currentsector.sector[13] = fs->sectors_per_cluster;
   1e635:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e638:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   1e63b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e63e:	88 50 51             	mov    BYTE PTR [eax+0x51],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:149

    // Reserved Sectors
    if (!is_fat32)
   1e641:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1e645:	75 0b                	jne    1e652 <fatfs_create_boot_sector+0xc3>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:150
        fs->reserved_sectors = 8;
   1e647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e64a:	66 c7 40 2a 08 00    	mov    WORD PTR [eax+0x2a],0x8
   1e650:	eb 09                	jmp    1e65b <fatfs_create_boot_sector+0xcc>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:152
    else
        fs->reserved_sectors = 32;
   1e652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e655:	66 c7 40 2a 20 00    	mov    WORD PTR [eax+0x2a],0x20
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:153
    fs->currentsector.sector[14] = (fs->reserved_sectors >> 0) & 0xFF;
   1e65b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e65e:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1e662:	89 c2                	mov    edx,eax
   1e664:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e667:	88 50 52             	mov    BYTE PTR [eax+0x52],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:154
    fs->currentsector.sector[15] = (fs->reserved_sectors >> 8) & 0xFF;
   1e66a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e66d:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1e671:	66 c1 e8 08          	shr    ax,0x8
   1e675:	89 c2                	mov    edx,eax
   1e677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e67a:	88 50 53             	mov    BYTE PTR [eax+0x53],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:157

    // Number of FATS
    fs->num_of_fats = 2;
   1e67d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e680:	c6 40 2c 02          	mov    BYTE PTR [eax+0x2c],0x2
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:158
    fs->currentsector.sector[16] = fs->num_of_fats;
   1e684:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e687:	0f b6 50 2c          	movzx  edx,BYTE PTR [eax+0x2c]
   1e68b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e68e:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:161

    // Max entries in root dir (FAT16 only)
    if (!is_fat32)
   1e691:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1e695:	75 2d                	jne    1e6c4 <fatfs_create_boot_sector+0x135>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:163
    {
        fs->root_entry_count = 512;
   1e697:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e69a:	66 c7 40 28 00 02    	mov    WORD PTR [eax+0x28],0x200
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:164
        fs->currentsector.sector[17] = (fs->root_entry_count >> 0) & 0xFF;
   1e6a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6a3:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1e6a7:	89 c2                	mov    edx,eax
   1e6a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6ac:	88 50 55             	mov    BYTE PTR [eax+0x55],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:165
        fs->currentsector.sector[18] = (fs->root_entry_count >> 8) & 0xFF;
   1e6af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6b2:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1e6b6:	66 c1 e8 08          	shr    ax,0x8
   1e6ba:	89 c2                	mov    edx,eax
   1e6bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6bf:	88 50 56             	mov    BYTE PTR [eax+0x56],dl
   1e6c2:	eb 17                	jmp    1e6db <fatfs_create_boot_sector+0x14c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:169
    }
    else
    {
        fs->root_entry_count = 0;
   1e6c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6c7:	66 c7 40 28 00 00    	mov    WORD PTR [eax+0x28],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:170
        fs->currentsector.sector[17] = 0;
   1e6cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6d0:	c6 40 55 00          	mov    BYTE PTR [eax+0x55],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:171
        fs->currentsector.sector[18] = 0;
   1e6d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6d7:	c6 40 56 00          	mov    BYTE PTR [eax+0x56],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:175
    }

    // [FAT16] Total sectors (use FAT32 count instead)
    fs->currentsector.sector[19] = 0x00;
   1e6db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6de:	c6 40 57 00          	mov    BYTE PTR [eax+0x57],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:176
    fs->currentsector.sector[20] = 0x00;
   1e6e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6e5:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:179

    // Media type
    fs->currentsector.sector[21] = 0xF8;
   1e6e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6ec:	c6 40 59 f8          	mov    BYTE PTR [eax+0x59],0xf8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:183


    // FAT16 BS Details
    if (!is_fat32)
   1e6f0:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1e6f4:	0f 85 8c 01 00 00    	jne    1e886 <fatfs_create_boot_sector+0x2f7>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:186
    {
        // Count of sectors used by the FAT table (FAT16 only)
        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
   1e6fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6fd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1e700:	0f b6 c8             	movzx  ecx,al
   1e703:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e706:	ba 00 00 00 00       	mov    edx,0x0
   1e70b:	f7 f1                	div    ecx
   1e70d:	83 c0 01             	add    eax,0x1
   1e710:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:187
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/2)) + 1;
   1e713:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e716:	c1 e8 08             	shr    eax,0x8
   1e719:	8d 50 01             	lea    edx,[eax+0x1]
   1e71c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e71f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:188
        fs->currentsector.sector[22] = (uint8)((fs->fat_sectors >> 0) & 0xFF);
   1e722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e725:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1e728:	89 c2                	mov    edx,eax
   1e72a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e72d:	88 50 5a             	mov    BYTE PTR [eax+0x5a],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:189
        fs->currentsector.sector[23] = (uint8)((fs->fat_sectors >> 8) & 0xFF);
   1e730:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e733:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1e736:	c1 e8 08             	shr    eax,0x8
   1e739:	89 c2                	mov    edx,eax
   1e73b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e73e:	88 50 5b             	mov    BYTE PTR [eax+0x5b],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:192

        // Sectors per track
        fs->currentsector.sector[24] = 0x00;
   1e741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e744:	c6 40 5c 00          	mov    BYTE PTR [eax+0x5c],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:193
        fs->currentsector.sector[25] = 0x00;
   1e748:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e74b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:196

        // Heads
        fs->currentsector.sector[26] = 0x00;
   1e74f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e752:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:197
        fs->currentsector.sector[27] = 0x00;
   1e756:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e759:	c6 40 5f 00          	mov    BYTE PTR [eax+0x5f],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:200

        // Hidden sectors
        fs->currentsector.sector[28] = 0x20;
   1e75d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e760:	c6 40 60 20          	mov    BYTE PTR [eax+0x60],0x20
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:201
        fs->currentsector.sector[29] = 0x00;
   1e764:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e767:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:202
        fs->currentsector.sector[30] = 0x00;
   1e76b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e76e:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:203
        fs->currentsector.sector[31] = 0x00;
   1e772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e775:	c6 40 63 00          	mov    BYTE PTR [eax+0x63],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:206

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
   1e779:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e77c:	89 c2                	mov    edx,eax
   1e77e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e781:	88 50 64             	mov    BYTE PTR [eax+0x64],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:207
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
   1e784:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e787:	c1 e8 08             	shr    eax,0x8
   1e78a:	89 c2                	mov    edx,eax
   1e78c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e78f:	88 50 65             	mov    BYTE PTR [eax+0x65],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:208
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
   1e792:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e795:	c1 e8 10             	shr    eax,0x10
   1e798:	89 c2                	mov    edx,eax
   1e79a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e79d:	88 50 66             	mov    BYTE PTR [eax+0x66],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:209
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);
   1e7a0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e7a3:	c1 e8 18             	shr    eax,0x18
   1e7a6:	89 c2                	mov    edx,eax
   1e7a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7ab:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:212

        // Drive number
        fs->currentsector.sector[36] = 0x00;
   1e7ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7b1:	c6 40 68 00          	mov    BYTE PTR [eax+0x68],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:215

        // Reserved
        fs->currentsector.sector[37] = 0x00;
   1e7b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7b8:	c6 40 69 00          	mov    BYTE PTR [eax+0x69],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:218

        // Boot signature
        fs->currentsector.sector[38] = 0x29;
   1e7bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7bf:	c6 40 6a 29          	mov    BYTE PTR [eax+0x6a],0x29
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:221

        // Volume ID
        fs->currentsector.sector[39] = 0x12;
   1e7c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7c6:	c6 40 6b 12          	mov    BYTE PTR [eax+0x6b],0x12
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:222
        fs->currentsector.sector[40] = 0x34;
   1e7ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7cd:	c6 40 6c 34          	mov    BYTE PTR [eax+0x6c],0x34
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:223
        fs->currentsector.sector[41] = 0x56;
   1e7d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7d4:	c6 40 6d 56          	mov    BYTE PTR [eax+0x6d],0x56
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:224
        fs->currentsector.sector[42] = 0x78;
   1e7d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7db:	c6 40 6e 78          	mov    BYTE PTR [eax+0x6e],0x78
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:227

        // Volume name
        for (i=0;i<11;i++)
   1e7df:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1e7e6:	eb 41                	jmp    1e829 <fatfs_create_boot_sector+0x29a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:229
        {
            if (i < (int)strlen(name))
   1e7e8:	83 ec 0c             	sub    esp,0xc
   1e7eb:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1e7ee:	e8 11 8a 00 00       	call   27204 <strlen>
   1e7f3:	83 c4 10             	add    esp,0x10
   1e7f6:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1e7f9:	7e 1c                	jle    1e817 <fatfs_create_boot_sector+0x288>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:230
                fs->currentsector.sector[i+43] = name[i];
   1e7fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1e7fe:	8d 50 2b             	lea    edx,[eax+0x2b]
   1e801:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1e804:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1e807:	01 c8                	add    eax,ecx
   1e809:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1e80c:	89 c1                	mov    ecx,eax
   1e80e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e811:	88 4c 10 44          	mov    BYTE PTR [eax+edx*1+0x44],cl
   1e815:	eb 0e                	jmp    1e825 <fatfs_create_boot_sector+0x296>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:232
            else
                fs->currentsector.sector[i+43] = ' ';
   1e817:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1e81a:	8d 50 2b             	lea    edx,[eax+0x2b]
   1e81d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e820:	c6 44 10 44 20       	mov    BYTE PTR [eax+edx*1+0x44],0x20
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:227 (discriminator 2)
        fs->currentsector.sector[40] = 0x34;
        fs->currentsector.sector[41] = 0x56;
        fs->currentsector.sector[42] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
   1e825:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:227 (discriminator 1)
   1e829:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   1e82d:	7e b9                	jle    1e7e8 <fatfs_create_boot_sector+0x259>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:236
            else
                fs->currentsector.sector[i+43] = ' ';
        }

        // File sys type
        fs->currentsector.sector[54] = 'F';
   1e82f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e832:	c6 40 7a 46          	mov    BYTE PTR [eax+0x7a],0x46
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:237
        fs->currentsector.sector[55] = 'A';
   1e836:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e839:	c6 40 7b 41          	mov    BYTE PTR [eax+0x7b],0x41
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:238
        fs->currentsector.sector[56] = 'T';
   1e83d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e840:	c6 40 7c 54          	mov    BYTE PTR [eax+0x7c],0x54
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:239
        fs->currentsector.sector[57] = '1';
   1e844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e847:	c6 40 7d 31          	mov    BYTE PTR [eax+0x7d],0x31
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:240
        fs->currentsector.sector[58] = '6';
   1e84b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e84e:	c6 40 7e 36          	mov    BYTE PTR [eax+0x7e],0x36
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:241
        fs->currentsector.sector[59] = ' ';
   1e852:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e855:	c6 40 7f 20          	mov    BYTE PTR [eax+0x7f],0x20
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:242
        fs->currentsector.sector[60] = ' ';
   1e859:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e85c:	c6 80 80 00 00 00 20 	mov    BYTE PTR [eax+0x80],0x20
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:243
        fs->currentsector.sector[61] = ' ';
   1e863:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e866:	c6 80 81 00 00 00 20 	mov    BYTE PTR [eax+0x81],0x20
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:246

        // Signature
        fs->currentsector.sector[510] = 0x55;
   1e86d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e870:	c6 80 42 02 00 00 55 	mov    BYTE PTR [eax+0x242],0x55
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:247
        fs->currentsector.sector[511] = 0xAA;
   1e877:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e87a:	c6 80 43 02 00 00 aa 	mov    BYTE PTR [eax+0x243],0xaa
   1e881:	e9 61 02 00 00       	jmp    1eae7 <fatfs_create_boot_sector+0x558>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:253
    }
    // FAT32 BS Details
    else
    {
        // Count of sectors used by the FAT table (FAT16 only)
        fs->currentsector.sector[22] = 0;
   1e886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e889:	c6 40 5a 00          	mov    BYTE PTR [eax+0x5a],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:254
        fs->currentsector.sector[23] = 0;
   1e88d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e890:	c6 40 5b 00          	mov    BYTE PTR [eax+0x5b],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:257

        // Sectors per track (default)
        fs->currentsector.sector[24] = 0x3F;
   1e894:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e897:	c6 40 5c 3f          	mov    BYTE PTR [eax+0x5c],0x3f
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:258
        fs->currentsector.sector[25] = 0x00;
   1e89b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e89e:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:261

        // Heads (default)
        fs->currentsector.sector[26] = 0xFF;
   1e8a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8a5:	c6 40 5e ff          	mov    BYTE PTR [eax+0x5e],0xff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:262
        fs->currentsector.sector[27] = 0x00;
   1e8a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8ac:	c6 40 5f 00          	mov    BYTE PTR [eax+0x5f],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:265

        // Hidden sectors
        fs->currentsector.sector[28] = 0x00;
   1e8b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8b3:	c6 40 60 00          	mov    BYTE PTR [eax+0x60],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:266
        fs->currentsector.sector[29] = 0x00;
   1e8b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8ba:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:267
        fs->currentsector.sector[30] = 0x00;
   1e8be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8c1:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:268
        fs->currentsector.sector[31] = 0x00;
   1e8c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8c8:	c6 40 63 00          	mov    BYTE PTR [eax+0x63],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:271

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
   1e8cc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e8cf:	89 c2                	mov    edx,eax
   1e8d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8d4:	88 50 64             	mov    BYTE PTR [eax+0x64],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:272
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
   1e8d7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e8da:	c1 e8 08             	shr    eax,0x8
   1e8dd:	89 c2                	mov    edx,eax
   1e8df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8e2:	88 50 65             	mov    BYTE PTR [eax+0x65],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:273
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
   1e8e5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e8e8:	c1 e8 10             	shr    eax,0x10
   1e8eb:	89 c2                	mov    edx,eax
   1e8ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8f0:	88 50 66             	mov    BYTE PTR [eax+0x66],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:274
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);
   1e8f3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e8f6:	c1 e8 18             	shr    eax,0x18
   1e8f9:	89 c2                	mov    edx,eax
   1e8fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8fe:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:276

        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
   1e901:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e904:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1e907:	0f b6 c8             	movzx  ecx,al
   1e90a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e90d:	ba 00 00 00 00       	mov    edx,0x0
   1e912:	f7 f1                	div    ecx
   1e914:	83 c0 01             	add    eax,0x1
   1e917:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:277
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/4)) + 1;
   1e91a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e91d:	c1 e8 07             	shr    eax,0x7
   1e920:	8d 50 01             	lea    edx,[eax+0x1]
   1e923:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e926:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:280

        // BPB_FATSz32
        fs->currentsector.sector[36] = (uint8)((fs->fat_sectors>>0)&0xFF);
   1e929:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e92c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1e92f:	89 c2                	mov    edx,eax
   1e931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e934:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:281
        fs->currentsector.sector[37] = (uint8)((fs->fat_sectors>>8)&0xFF);
   1e937:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e93a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1e93d:	c1 e8 08             	shr    eax,0x8
   1e940:	89 c2                	mov    edx,eax
   1e942:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e945:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:282
        fs->currentsector.sector[38] = (uint8)((fs->fat_sectors>>16)&0xFF);
   1e948:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e94b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1e94e:	c1 e8 10             	shr    eax,0x10
   1e951:	89 c2                	mov    edx,eax
   1e953:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e956:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:283
        fs->currentsector.sector[39] = (uint8)((fs->fat_sectors>>24)&0xFF);
   1e959:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e95c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1e95f:	c1 e8 18             	shr    eax,0x18
   1e962:	89 c2                	mov    edx,eax
   1e964:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e967:	88 50 6b             	mov    BYTE PTR [eax+0x6b],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:286

        // BPB_ExtFlags
        fs->currentsector.sector[40] = 0;
   1e96a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e96d:	c6 40 6c 00          	mov    BYTE PTR [eax+0x6c],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:287
        fs->currentsector.sector[41] = 0;
   1e971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e974:	c6 40 6d 00          	mov    BYTE PTR [eax+0x6d],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:290

        // BPB_FSVer
        fs->currentsector.sector[42] = 0;
   1e978:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e97b:	c6 40 6e 00          	mov    BYTE PTR [eax+0x6e],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:291
        fs->currentsector.sector[43] = 0;
   1e97f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e982:	c6 40 6f 00          	mov    BYTE PTR [eax+0x6f],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:294

        // BPB_RootClus
        fs->currentsector.sector[44] = (uint8)((fs->rootdir_first_cluster>>0)&0xFF);
   1e986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e989:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1e98c:	89 c2                	mov    edx,eax
   1e98e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e991:	88 50 70             	mov    BYTE PTR [eax+0x70],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:295
        fs->currentsector.sector[45] = (uint8)((fs->rootdir_first_cluster>>8)&0xFF);
   1e994:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e997:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1e99a:	c1 e8 08             	shr    eax,0x8
   1e99d:	89 c2                	mov    edx,eax
   1e99f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9a2:	88 50 71             	mov    BYTE PTR [eax+0x71],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:296
        fs->currentsector.sector[46] = (uint8)((fs->rootdir_first_cluster>>16)&0xFF);
   1e9a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1e9ab:	c1 e8 10             	shr    eax,0x10
   1e9ae:	89 c2                	mov    edx,eax
   1e9b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9b3:	88 50 72             	mov    BYTE PTR [eax+0x72],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:297
        fs->currentsector.sector[47] = (uint8)((fs->rootdir_first_cluster>>24)&0xFF);
   1e9b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9b9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1e9bc:	c1 e8 18             	shr    eax,0x18
   1e9bf:	89 c2                	mov    edx,eax
   1e9c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9c4:	88 50 73             	mov    BYTE PTR [eax+0x73],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:300

        // BPB_FSInfo
        fs->currentsector.sector[48] = (uint8)((fs->fs_info_sector>>0)&0xFF);
   1e9c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9ca:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   1e9ce:	89 c2                	mov    edx,eax
   1e9d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9d3:	88 50 74             	mov    BYTE PTR [eax+0x74],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:301
        fs->currentsector.sector[49] = (uint8)((fs->fs_info_sector>>8)&0xFF);
   1e9d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9d9:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   1e9dd:	66 c1 e8 08          	shr    ax,0x8
   1e9e1:	89 c2                	mov    edx,eax
   1e9e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9e6:	88 50 75             	mov    BYTE PTR [eax+0x75],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:304

        // BPB_BkBootSec
        fs->currentsector.sector[50] = 6;
   1e9e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9ec:	c6 40 76 06          	mov    BYTE PTR [eax+0x76],0x6
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:305
        fs->currentsector.sector[51] = 0;
   1e9f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9f3:	c6 40 77 00          	mov    BYTE PTR [eax+0x77],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:308

        // Drive number
        fs->currentsector.sector[64] = 0x00;
   1e9f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9fa:	c6 80 84 00 00 00 00 	mov    BYTE PTR [eax+0x84],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:311

        // Boot signature
        fs->currentsector.sector[66] = 0x29;
   1ea01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea04:	c6 80 86 00 00 00 29 	mov    BYTE PTR [eax+0x86],0x29
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:314

        // Volume ID
        fs->currentsector.sector[67] = 0x12;
   1ea0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea0e:	c6 80 87 00 00 00 12 	mov    BYTE PTR [eax+0x87],0x12
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:315
        fs->currentsector.sector[68] = 0x34;
   1ea15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea18:	c6 80 88 00 00 00 34 	mov    BYTE PTR [eax+0x88],0x34
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:316
        fs->currentsector.sector[69] = 0x56;
   1ea1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea22:	c6 80 89 00 00 00 56 	mov    BYTE PTR [eax+0x89],0x56
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:317
        fs->currentsector.sector[70] = 0x78;
   1ea29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea2c:	c6 80 8a 00 00 00 78 	mov    BYTE PTR [eax+0x8a],0x78
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:320

        // Volume name
        for (i=0;i<11;i++)
   1ea33:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1ea3a:	eb 41                	jmp    1ea7d <fatfs_create_boot_sector+0x4ee>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:322
        {
            if (i < (int)strlen(name))
   1ea3c:	83 ec 0c             	sub    esp,0xc
   1ea3f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1ea42:	e8 bd 87 00 00       	call   27204 <strlen>
   1ea47:	83 c4 10             	add    esp,0x10
   1ea4a:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1ea4d:	7e 1c                	jle    1ea6b <fatfs_create_boot_sector+0x4dc>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:323
                fs->currentsector.sector[i+71] = name[i];
   1ea4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ea52:	8d 50 47             	lea    edx,[eax+0x47]
   1ea55:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1ea58:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1ea5b:	01 c8                	add    eax,ecx
   1ea5d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ea60:	89 c1                	mov    ecx,eax
   1ea62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea65:	88 4c 10 44          	mov    BYTE PTR [eax+edx*1+0x44],cl
   1ea69:	eb 0e                	jmp    1ea79 <fatfs_create_boot_sector+0x4ea>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:325
            else
                fs->currentsector.sector[i+71] = ' ';
   1ea6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ea6e:	8d 50 47             	lea    edx,[eax+0x47]
   1ea71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea74:	c6 44 10 44 20       	mov    BYTE PTR [eax+edx*1+0x44],0x20
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:320 (discriminator 2)
        fs->currentsector.sector[68] = 0x34;
        fs->currentsector.sector[69] = 0x56;
        fs->currentsector.sector[70] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
   1ea79:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:320 (discriminator 1)
   1ea7d:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   1ea81:	7e b9                	jle    1ea3c <fatfs_create_boot_sector+0x4ad>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:329
            else
                fs->currentsector.sector[i+71] = ' ';
        }

        // File sys type
        fs->currentsector.sector[82] = 'F';
   1ea83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea86:	c6 80 96 00 00 00 46 	mov    BYTE PTR [eax+0x96],0x46
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:330
        fs->currentsector.sector[83] = 'A';
   1ea8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea90:	c6 80 97 00 00 00 41 	mov    BYTE PTR [eax+0x97],0x41
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:331
        fs->currentsector.sector[84] = 'T';
   1ea97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea9a:	c6 80 98 00 00 00 54 	mov    BYTE PTR [eax+0x98],0x54
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:332
        fs->currentsector.sector[85] = '3';
   1eaa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eaa4:	c6 80 99 00 00 00 33 	mov    BYTE PTR [eax+0x99],0x33
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:333
        fs->currentsector.sector[86] = '2';
   1eaab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eaae:	c6 80 9a 00 00 00 32 	mov    BYTE PTR [eax+0x9a],0x32
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:334
        fs->currentsector.sector[87] = ' ';
   1eab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eab8:	c6 80 9b 00 00 00 20 	mov    BYTE PTR [eax+0x9b],0x20
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:335
        fs->currentsector.sector[88] = ' ';
   1eabf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eac2:	c6 80 9c 00 00 00 20 	mov    BYTE PTR [eax+0x9c],0x20
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:336
        fs->currentsector.sector[89] = ' ';
   1eac9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eacc:	c6 80 9d 00 00 00 20 	mov    BYTE PTR [eax+0x9d],0x20
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:339

        // Signature
        fs->currentsector.sector[510] = 0x55;
   1ead3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ead6:	c6 80 42 02 00 00 55 	mov    BYTE PTR [eax+0x242],0x55
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:340
        fs->currentsector.sector[511] = 0xAA;
   1eadd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eae0:	c6 80 43 02 00 00 aa 	mov    BYTE PTR [eax+0x243],0xaa
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:343
    }

    if (fs->disk_io.write_media(boot_sector_lba, fs->currentsector.sector, 1))
   1eae7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eaea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1eaed:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1eaf0:	83 c2 44             	add    edx,0x44
   1eaf3:	83 ec 04             	sub    esp,0x4
   1eaf6:	6a 01                	push   0x1
   1eaf8:	52                   	push   edx
   1eaf9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1eafc:	ff d0                	call   eax
   1eafe:	83 c4 10             	add    esp,0x10
   1eb01:	85 c0                	test   eax,eax
   1eb03:	74 07                	je     1eb0c <fatfs_create_boot_sector+0x57d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:344
        return 1;
   1eb05:	b8 01 00 00 00       	mov    eax,0x1
   1eb0a:	eb 05                	jmp    1eb11 <fatfs_create_boot_sector+0x582>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:346
    else
        return 0;
   1eb0c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:347
}
   1eb11:	c9                   	leave  
   1eb12:	c3                   	ret    

0001eb13 <fatfs_create_fsinfo_sector>:
fatfs_create_fsinfo_sector():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:352
//-----------------------------------------------------------------------------
// fatfs_create_fsinfo_sector: Create the FSInfo sector (FAT32)
//-----------------------------------------------------------------------------
static int fatfs_create_fsinfo_sector(struct fatfs *fs, uint32 sector_lba)
{
   1eb13:	55                   	push   ebp
   1eb14:	89 e5                	mov    ebp,esp
   1eb16:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:354
    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1eb19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb1c:	83 c0 44             	add    eax,0x44
   1eb1f:	83 ec 04             	sub    esp,0x4
   1eb22:	68 00 02 00 00       	push   0x200
   1eb27:	6a 00                	push   0x0
   1eb29:	50                   	push   eax
   1eb2a:	e8 7e 64 00 00       	call   24fad <memset>
   1eb2f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:357

    // FSI_LeadSig
    fs->currentsector.sector[0] = 0x52;
   1eb32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb35:	c6 40 44 52          	mov    BYTE PTR [eax+0x44],0x52
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:358
    fs->currentsector.sector[1] = 0x52;
   1eb39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb3c:	c6 40 45 52          	mov    BYTE PTR [eax+0x45],0x52
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:359
    fs->currentsector.sector[2] = 0x61;
   1eb40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb43:	c6 40 46 61          	mov    BYTE PTR [eax+0x46],0x61
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:360
    fs->currentsector.sector[3] = 0x41;
   1eb47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb4a:	c6 40 47 41          	mov    BYTE PTR [eax+0x47],0x41
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:363

    // FSI_StrucSig
    fs->currentsector.sector[484] = 0x72;
   1eb4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb51:	c6 80 28 02 00 00 72 	mov    BYTE PTR [eax+0x228],0x72
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:364
    fs->currentsector.sector[485] = 0x72;
   1eb58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb5b:	c6 80 29 02 00 00 72 	mov    BYTE PTR [eax+0x229],0x72
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:365
    fs->currentsector.sector[486] = 0x41;
   1eb62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb65:	c6 80 2a 02 00 00 41 	mov    BYTE PTR [eax+0x22a],0x41
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:366
    fs->currentsector.sector[487] = 0x61;
   1eb6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb6f:	c6 80 2b 02 00 00 61 	mov    BYTE PTR [eax+0x22b],0x61
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:369

    // FSI_Free_Count
    fs->currentsector.sector[488] = 0xFF;
   1eb76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb79:	c6 80 2c 02 00 00 ff 	mov    BYTE PTR [eax+0x22c],0xff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:370
    fs->currentsector.sector[489] = 0xFF;
   1eb80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb83:	c6 80 2d 02 00 00 ff 	mov    BYTE PTR [eax+0x22d],0xff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:371
    fs->currentsector.sector[490] = 0xFF;
   1eb8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb8d:	c6 80 2e 02 00 00 ff 	mov    BYTE PTR [eax+0x22e],0xff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:372
    fs->currentsector.sector[491] = 0xFF;
   1eb94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb97:	c6 80 2f 02 00 00 ff 	mov    BYTE PTR [eax+0x22f],0xff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:375

    // FSI_Nxt_Free
    fs->currentsector.sector[492] = 0xFF;
   1eb9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eba1:	c6 80 30 02 00 00 ff 	mov    BYTE PTR [eax+0x230],0xff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:376
    fs->currentsector.sector[493] = 0xFF;
   1eba8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebab:	c6 80 31 02 00 00 ff 	mov    BYTE PTR [eax+0x231],0xff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:377
    fs->currentsector.sector[494] = 0xFF;
   1ebb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebb5:	c6 80 32 02 00 00 ff 	mov    BYTE PTR [eax+0x232],0xff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:378
    fs->currentsector.sector[495] = 0xFF;
   1ebbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebbf:	c6 80 33 02 00 00 ff 	mov    BYTE PTR [eax+0x233],0xff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:381

    // Signature
    fs->currentsector.sector[510] = 0x55;
   1ebc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebc9:	c6 80 42 02 00 00 55 	mov    BYTE PTR [eax+0x242],0x55
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:382
    fs->currentsector.sector[511] = 0xAA;
   1ebd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebd3:	c6 80 43 02 00 00 aa 	mov    BYTE PTR [eax+0x243],0xaa
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:384

    if (fs->disk_io.write_media(sector_lba, fs->currentsector.sector, 1))
   1ebda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebdd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1ebe0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ebe3:	83 c2 44             	add    edx,0x44
   1ebe6:	83 ec 04             	sub    esp,0x4
   1ebe9:	6a 01                	push   0x1
   1ebeb:	52                   	push   edx
   1ebec:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1ebef:	ff d0                	call   eax
   1ebf1:	83 c4 10             	add    esp,0x10
   1ebf4:	85 c0                	test   eax,eax
   1ebf6:	74 07                	je     1ebff <fatfs_create_fsinfo_sector+0xec>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:385
        return 1;
   1ebf8:	b8 01 00 00 00       	mov    eax,0x1
   1ebfd:	eb 05                	jmp    1ec04 <fatfs_create_fsinfo_sector+0xf1>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:387
    else
        return 0;
   1ebff:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:388
}
   1ec04:	c9                   	leave  
   1ec05:	c3                   	ret    

0001ec06 <fatfs_erase_fat>:
fatfs_erase_fat():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:393
//-----------------------------------------------------------------------------
// fatfs_erase_fat: Erase FAT table using fs details in fs struct
//-----------------------------------------------------------------------------
static int fatfs_erase_fat(struct fatfs *fs, int is_fat32)
{
   1ec06:	55                   	push   ebp
   1ec07:	89 e5                	mov    ebp,esp
   1ec09:	53                   	push   ebx
   1ec0a:	83 ec 14             	sub    esp,0x14
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:397
    uint32 i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1ec0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec10:	83 c0 44             	add    eax,0x44
   1ec13:	83 ec 04             	sub    esp,0x4
   1ec16:	68 00 02 00 00       	push   0x200
   1ec1b:	6a 00                	push   0x0
   1ec1d:	50                   	push   eax
   1ec1e:	e8 8a 63 00 00       	call   24fad <memset>
   1ec23:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:400

    // Initialise default allocate / reserved clusters
    if (!is_fat32)
   1ec26:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1ec2a:	75 1e                	jne    1ec4a <fatfs_erase_fat+0x44>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:402
    {
        SET_16BIT_WORD(fs->currentsector.sector, 0, 0xFFF8);
   1ec2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec2f:	c6 40 44 f8          	mov    BYTE PTR [eax+0x44],0xf8
   1ec33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec36:	c6 40 45 ff          	mov    BYTE PTR [eax+0x45],0xff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:403
        SET_16BIT_WORD(fs->currentsector.sector, 2, 0xFFFF);
   1ec3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec3d:	c6 40 46 ff          	mov    BYTE PTR [eax+0x46],0xff
   1ec41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec44:	c6 40 47 ff          	mov    BYTE PTR [eax+0x47],0xff
   1ec48:	eb 54                	jmp    1ec9e <fatfs_erase_fat+0x98>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:407
    }
    else
    {
        SET_32BIT_WORD(fs->currentsector.sector, 0, 0x0FFFFFF8);
   1ec4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec4d:	c6 40 44 f8          	mov    BYTE PTR [eax+0x44],0xf8
   1ec51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec54:	c6 40 45 ff          	mov    BYTE PTR [eax+0x45],0xff
   1ec58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec5b:	c6 40 46 ff          	mov    BYTE PTR [eax+0x46],0xff
   1ec5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec62:	c6 40 47 0f          	mov    BYTE PTR [eax+0x47],0xf
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:408
        SET_32BIT_WORD(fs->currentsector.sector, 4, 0xFFFFFFFF);
   1ec66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec69:	c6 40 48 ff          	mov    BYTE PTR [eax+0x48],0xff
   1ec6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec70:	c6 40 49 ff          	mov    BYTE PTR [eax+0x49],0xff
   1ec74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec77:	c6 40 4a ff          	mov    BYTE PTR [eax+0x4a],0xff
   1ec7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec7e:	c6 40 4b ff          	mov    BYTE PTR [eax+0x4b],0xff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:409
        SET_32BIT_WORD(fs->currentsector.sector, 8, 0x0FFFFFFF);
   1ec82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec85:	c6 40 4c ff          	mov    BYTE PTR [eax+0x4c],0xff
   1ec89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec8c:	c6 40 4d ff          	mov    BYTE PTR [eax+0x4d],0xff
   1ec90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec93:	c6 40 4e ff          	mov    BYTE PTR [eax+0x4e],0xff
   1ec97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec9a:	c6 40 4f 0f          	mov    BYTE PTR [eax+0x4f],0xf
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:412
    }

    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
   1ec9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eca1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1eca4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1eca7:	8d 4a 44             	lea    ecx,[edx+0x44]
   1ecaa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ecad:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
   1ecb0:	83 ec 04             	sub    esp,0x4
   1ecb3:	6a 01                	push   0x1
   1ecb5:	51                   	push   ecx
   1ecb6:	52                   	push   edx
   1ecb7:	ff d0                	call   eax
   1ecb9:	83 c4 10             	add    esp,0x10
   1ecbc:	85 c0                	test   eax,eax
   1ecbe:	75 07                	jne    1ecc7 <fatfs_erase_fat+0xc1>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:413
        return 0;
   1ecc0:	b8 00 00 00 00       	mov    eax,0x0
   1ecc5:	eb 71                	jmp    1ed38 <fatfs_erase_fat+0x132>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:416

    // Zero remaining FAT sectors
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1ecc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecca:	83 c0 44             	add    eax,0x44
   1eccd:	83 ec 04             	sub    esp,0x4
   1ecd0:	68 00 02 00 00       	push   0x200
   1ecd5:	6a 00                	push   0x0
   1ecd7:	50                   	push   eax
   1ecd8:	e8 d0 62 00 00       	call   24fad <memset>
   1ecdd:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:417
    for (i=1;i<fs->fat_sectors*fs->num_of_fats;i++)
   1ece0:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
   1ece7:	eb 32                	jmp    1ed1b <fatfs_erase_fat+0x115>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:418
        if (!fs->disk_io.write_media(fs->fat_begin_lba + i, fs->currentsector.sector, 1))
   1ece9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1ecef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ecf2:	8d 4a 44             	lea    ecx,[edx+0x44]
   1ecf5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ecf8:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
   1ecfb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1ecfe:	01 da                	add    edx,ebx
   1ed00:	83 ec 04             	sub    esp,0x4
   1ed03:	6a 01                	push   0x1
   1ed05:	51                   	push   ecx
   1ed06:	52                   	push   edx
   1ed07:	ff d0                	call   eax
   1ed09:	83 c4 10             	add    esp,0x10
   1ed0c:	85 c0                	test   eax,eax
   1ed0e:	75 07                	jne    1ed17 <fatfs_erase_fat+0x111>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:419
            return 0;
   1ed10:	b8 00 00 00 00       	mov    eax,0x0
   1ed15:	eb 21                	jmp    1ed38 <fatfs_erase_fat+0x132>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:417 (discriminator 2)
    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
        return 0;

    // Zero remaining FAT sectors
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
    for (i=1;i<fs->fat_sectors*fs->num_of_fats;i++)
   1ed17:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:417 (discriminator 1)
   1ed1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed1e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
   1ed21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed24:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1ed28:	0f b6 c0             	movzx  eax,al
   1ed2b:	0f af c2             	imul   eax,edx
   1ed2e:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1ed31:	77 b6                	ja     1ece9 <fatfs_erase_fat+0xe3>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:421
        if (!fs->disk_io.write_media(fs->fat_begin_lba + i, fs->currentsector.sector, 1))
            return 0;

    return 1;
   1ed33:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:422
}
   1ed38:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1ed3b:	c9                   	leave  
   1ed3c:	c3                   	ret    

0001ed3d <fatfs_format_fat16>:
fatfs_format_fat16():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:427
//-----------------------------------------------------------------------------
// fatfs_format_fat16: Format a FAT16 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat16(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   1ed3d:	55                   	push   ebp
   1ed3e:	89 e5                	mov    ebp,esp
   1ed40:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:428
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
   1ed43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed46:	c7 80 44 02 00 00 ff 	mov    DWORD PTR [eax+0x244],0xffffffff
   1ed4d:	ff ff ff 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:429
    fs->currentsector.dirty = 0;
   1ed50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed53:	c7 80 48 02 00 00 00 	mov    DWORD PTR [eax+0x248],0x0
   1ed5a:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:431

    fs->next_free_cluster = 0; // Invalid
   1ed5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed60:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:433

    fatfs_fat_init(fs);
   1ed67:	83 ec 0c             	sub    esp,0xc
   1ed6a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ed6d:	e8 3e 15 00 00       	call   202b0 <fatfs_fat_init>
   1ed72:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:436

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
   1ed75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed78:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1ed7b:	85 c0                	test   eax,eax
   1ed7d:	74 0a                	je     1ed89 <fatfs_format_fat16+0x4c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:436 (discriminator 1)
   1ed7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed82:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1ed85:	85 c0                	test   eax,eax
   1ed87:	75 0a                	jne    1ed93 <fatfs_format_fat16+0x56>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:437
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1ed89:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1ed8e:	e9 29 01 00 00       	jmp    1eebc <fatfs_format_fat16+0x17f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:440

    // Volume is FAT16
    fs->fat_type = FAT_TYPE_16;
   1ed93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed96:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:443

    // Not valid for FAT16
    fs->fs_info_sector = 0;
   1ed9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eda0:	66 c7 40 18 00 00    	mov    WORD PTR [eax+0x18],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:444
    fs->rootdir_first_cluster = 0;
   1eda6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eda9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:448

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
   1edb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edb3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:449
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 0))
   1edba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edbd:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   1edc0:	83 ec 0c             	sub    esp,0xc
   1edc3:	6a 00                	push   0x0
   1edc5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1edc8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1edcb:	50                   	push   eax
   1edcc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1edcf:	e8 bb f7 ff ff       	call   1e58f <fatfs_create_boot_sector>
   1edd4:	83 c4 20             	add    esp,0x20
   1edd7:	85 c0                	test   eax,eax
   1edd9:	75 0a                	jne    1ede5 <fatfs_format_fat16+0xa8>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:450
        return 0;
   1eddb:	b8 00 00 00 00       	mov    eax,0x0
   1ede0:	e9 d7 00 00 00       	jmp    1eebc <fatfs_format_fat16+0x17f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:453

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = fs->reserved_sectors + (fs->num_of_fats * fs->fat_sectors);
   1ede5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ede8:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1edec:	0f b7 d0             	movzx  edx,ax
   1edef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edf2:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1edf6:	0f b6 c8             	movzx  ecx,al
   1edf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edfc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1edff:	0f af c1             	imul   eax,ecx
   1ee02:	01 c2                	add    edx,eax
   1ee04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee07:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:454
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
   1ee0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee0d:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1ee11:	0f b7 c0             	movzx  eax,ax
   1ee14:	c1 e0 05             	shl    eax,0x5
   1ee17:	05 ff 01 00 00       	add    eax,0x1ff
   1ee1c:	8d 90 ff 01 00 00    	lea    edx,[eax+0x1ff]
   1ee22:	85 c0                	test   eax,eax
   1ee24:	0f 48 c2             	cmovs  eax,edx
   1ee27:	c1 f8 09             	sar    eax,0x9
   1ee2a:	89 c2                	mov    edx,eax
   1ee2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee2f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:457

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
   1ee32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee35:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1ee38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee3b:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1ee3f:	0f b7 c0             	movzx  eax,ax
   1ee42:	01 c2                	add    edx,eax
   1ee44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee47:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:460

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);
   1ee4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee4d:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   1ee50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee53:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1ee57:	0f b6 c8             	movzx  ecx,al
   1ee5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee5d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1ee60:	0f af c1             	imul   eax,ecx
   1ee63:	01 c2                	add    edx,eax
   1ee65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee68:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:463

    // Initialise FAT sectors
    if (!fatfs_erase_fat(fs, 0))
   1ee6b:	83 ec 08             	sub    esp,0x8
   1ee6e:	6a 00                	push   0x0
   1ee70:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ee73:	e8 8e fd ff ff       	call   1ec06 <fatfs_erase_fat>
   1ee78:	83 c4 10             	add    esp,0x10
   1ee7b:	85 c0                	test   eax,eax
   1ee7d:	75 07                	jne    1ee86 <fatfs_format_fat16+0x149>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:464
        return 0;
   1ee7f:	b8 00 00 00 00       	mov    eax,0x0
   1ee84:	eb 36                	jmp    1eebc <fatfs_format_fat16+0x17f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:467

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fs->lba_begin + fs->rootdir_first_sector, fs->rootdir_sectors))
   1ee86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee89:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1ee8c:	89 c1                	mov    ecx,eax
   1ee8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee91:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1ee94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee97:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1ee9a:	01 d0                	add    eax,edx
   1ee9c:	83 ec 04             	sub    esp,0x4
   1ee9f:	51                   	push   ecx
   1eea0:	50                   	push   eax
   1eea1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1eea4:	e8 7c f6 ff ff       	call   1e525 <fatfs_erase_sectors>
   1eea9:	83 c4 10             	add    esp,0x10
   1eeac:	85 c0                	test   eax,eax
   1eeae:	75 07                	jne    1eeb7 <fatfs_format_fat16+0x17a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:468
        return 0;
   1eeb0:	b8 00 00 00 00       	mov    eax,0x0
   1eeb5:	eb 05                	jmp    1eebc <fatfs_format_fat16+0x17f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:470

    return 1;
   1eeb7:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:471
}
   1eebc:	c9                   	leave  
   1eebd:	c3                   	ret    

0001eebe <fatfs_format_fat32>:
fatfs_format_fat32():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:476
//-----------------------------------------------------------------------------
// fatfs_format_fat32: Format a FAT32 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat32(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   1eebe:	55                   	push   ebp
   1eebf:	89 e5                	mov    ebp,esp
   1eec1:	53                   	push   ebx
   1eec2:	83 ec 04             	sub    esp,0x4
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:477
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
   1eec5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eec8:	c7 80 44 02 00 00 ff 	mov    DWORD PTR [eax+0x244],0xffffffff
   1eecf:	ff ff ff 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:478
    fs->currentsector.dirty = 0;
   1eed2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eed5:	c7 80 48 02 00 00 00 	mov    DWORD PTR [eax+0x248],0x0
   1eedc:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:480

    fs->next_free_cluster = 0; // Invalid
   1eedf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eee2:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:482

    fatfs_fat_init(fs);
   1eee9:	83 ec 0c             	sub    esp,0xc
   1eeec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1eeef:	e8 bc 13 00 00       	call   202b0 <fatfs_fat_init>
   1eef4:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:485

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
   1eef7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eefa:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1eefd:	85 c0                	test   eax,eax
   1eeff:	74 0a                	je     1ef0b <fatfs_format_fat32+0x4d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:485 (discriminator 1)
   1ef01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef04:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1ef07:	85 c0                	test   eax,eax
   1ef09:	75 0a                	jne    1ef15 <fatfs_format_fat32+0x57>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:486
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1ef0b:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1ef10:	e9 08 01 00 00       	jmp    1f01d <fatfs_format_fat32+0x15f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:489

    // Volume is FAT32
    fs->fat_type = FAT_TYPE_32;
   1ef15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef18:	c7 40 30 01 00 00 00 	mov    DWORD PTR [eax+0x30],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:492

    // Basic defaults for normal FAT32 partitions
    fs->fs_info_sector = 1;
   1ef1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef22:	66 c7 40 18 01 00    	mov    WORD PTR [eax+0x18],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:493
    fs->rootdir_first_cluster = 2;
   1ef28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef2b:	c7 40 08 02 00 00 00 	mov    DWORD PTR [eax+0x8],0x2
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:497

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
   1ef32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef35:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:498
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 1))
   1ef3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef3f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   1ef42:	83 ec 0c             	sub    esp,0xc
   1ef45:	6a 01                	push   0x1
   1ef47:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1ef4a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1ef4d:	50                   	push   eax
   1ef4e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ef51:	e8 39 f6 ff ff       	call   1e58f <fatfs_create_boot_sector>
   1ef56:	83 c4 20             	add    esp,0x20
   1ef59:	85 c0                	test   eax,eax
   1ef5b:	75 0a                	jne    1ef67 <fatfs_format_fat32+0xa9>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:499
        return 0;
   1ef5d:	b8 00 00 00 00       	mov    eax,0x0
   1ef62:	e9 b6 00 00 00       	jmp    1f01d <fatfs_format_fat32+0x15f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:502

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
   1ef67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef6a:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1ef6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef70:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1ef74:	0f b7 c0             	movzx  eax,ax
   1ef77:	01 c2                	add    edx,eax
   1ef79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef7c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:505

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);
   1ef7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef82:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   1ef85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef88:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1ef8c:	0f b6 c8             	movzx  ecx,al
   1ef8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef92:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1ef95:	0f af c1             	imul   eax,ecx
   1ef98:	01 c2                	add    edx,eax
   1ef9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef9d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:508

    // Initialise FSInfo sector
    if (!fatfs_create_fsinfo_sector(fs, fs->fs_info_sector))
   1efa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efa3:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   1efa7:	0f b7 c0             	movzx  eax,ax
   1efaa:	83 ec 08             	sub    esp,0x8
   1efad:	50                   	push   eax
   1efae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1efb1:	e8 5d fb ff ff       	call   1eb13 <fatfs_create_fsinfo_sector>
   1efb6:	83 c4 10             	add    esp,0x10
   1efb9:	85 c0                	test   eax,eax
   1efbb:	75 07                	jne    1efc4 <fatfs_format_fat32+0x106>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:509
        return 0;
   1efbd:	b8 00 00 00 00       	mov    eax,0x0
   1efc2:	eb 59                	jmp    1f01d <fatfs_format_fat32+0x15f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:512

    // Initialise FAT sectors
    if (!fatfs_erase_fat(fs, 1))
   1efc4:	83 ec 08             	sub    esp,0x8
   1efc7:	6a 01                	push   0x1
   1efc9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1efcc:	e8 35 fc ff ff       	call   1ec06 <fatfs_erase_fat>
   1efd1:	83 c4 10             	add    esp,0x10
   1efd4:	85 c0                	test   eax,eax
   1efd6:	75 07                	jne    1efdf <fatfs_format_fat32+0x121>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:513
        return 0;
   1efd8:	b8 00 00 00 00       	mov    eax,0x0
   1efdd:	eb 3e                	jmp    1f01d <fatfs_format_fat32+0x15f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:516

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fatfs_lba_of_cluster(fs, fs->rootdir_first_cluster), fs->sectors_per_cluster))
   1efdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1efe5:	0f b6 d8             	movzx  ebx,al
   1efe8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efeb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1efee:	83 ec 08             	sub    esp,0x8
   1eff1:	50                   	push   eax
   1eff2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1eff5:	e8 d2 c1 ff ff       	call   1b1cc <fatfs_lba_of_cluster>
   1effa:	83 c4 10             	add    esp,0x10
   1effd:	83 ec 04             	sub    esp,0x4
   1f000:	53                   	push   ebx
   1f001:	50                   	push   eax
   1f002:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f005:	e8 1b f5 ff ff       	call   1e525 <fatfs_erase_sectors>
   1f00a:	83 c4 10             	add    esp,0x10
   1f00d:	85 c0                	test   eax,eax
   1f00f:	75 07                	jne    1f018 <fatfs_format_fat32+0x15a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:517
        return 0;
   1f011:	b8 00 00 00 00       	mov    eax,0x0
   1f016:	eb 05                	jmp    1f01d <fatfs_format_fat32+0x15f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:519

    return 1;
   1f018:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:520
}
   1f01d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1f020:	c9                   	leave  
   1f021:	c3                   	ret    

0001f022 <fatfs_format>:
fatfs_format():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:525
//-----------------------------------------------------------------------------
// fatfs_format: Format a partition with either FAT16 or FAT32 based on size
//-----------------------------------------------------------------------------
int fatfs_format(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   1f022:	55                   	push   ebp
   1f023:	89 e5                	mov    ebp,esp
   1f025:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:527
    // 2GB - 32K limit for safe behaviour for FAT16
    if (volume_sectors <= 4194304)
   1f028:	81 7d 0c 00 00 40 00 	cmp    DWORD PTR [ebp+0xc],0x400000
   1f02f:	77 16                	ja     1f047 <fatfs_format+0x25>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:528
        return fatfs_format_fat16(fs, volume_sectors, name);
   1f031:	83 ec 04             	sub    esp,0x4
   1f034:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1f037:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f03a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f03d:	e8 fb fc ff ff       	call   1ed3d <fatfs_format_fat16>
   1f042:	83 c4 10             	add    esp,0x10
   1f045:	eb 14                	jmp    1f05b <fatfs_format+0x39>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:530
    else
        return fatfs_format_fat32(fs, volume_sectors, name);
   1f047:	83 ec 04             	sub    esp,0x4
   1f04a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1f04d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f050:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f053:	e8 66 fe ff ff       	call   1eebe <fatfs_format_fat32>
   1f058:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_format.c:531
}
   1f05b:	c9                   	leave  
   1f05c:	c3                   	ret    
   1f05d:	66 90                	xchg   ax,ax
   1f05f:	90                   	nop

0001f060 <fatfs_lfn_cache_init>:
fatfs_lfn_cache_init():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:40

//-----------------------------------------------------------------------------
// fatfs_lfn_cache_init: Clear long file name cache
//-----------------------------------------------------------------------------
void fatfs_lfn_cache_init(struct lfn_cache *lfn, int wipeTable)
{
   1f060:	55                   	push   ebp
   1f061:	89 e5                	mov    ebp,esp
   1f063:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:41
    int i = 0;
   1f066:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:43

    lfn->no_of_strings = 0;
   1f06d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f070:	c6 80 05 01 00 00 00 	mov    BYTE PTR [eax+0x105],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:48

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
   1f077:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1f07b:	74 36                	je     1f0b3 <fatfs_lfn_cache_init+0x53>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:49
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
   1f07d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1f084:	eb 27                	jmp    1f0ad <fatfs_lfn_cache_init+0x4d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:50 (discriminator 3)
            memset(lfn->String[i], 0x00, MAX_LFN_ENTRY_LENGTH);
   1f086:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f089:	89 d0                	mov    eax,edx
   1f08b:	01 c0                	add    eax,eax
   1f08d:	01 d0                	add    eax,edx
   1f08f:	c1 e0 02             	shl    eax,0x2
   1f092:	01 d0                	add    eax,edx
   1f094:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f097:	01 d0                	add    eax,edx
   1f099:	83 ec 04             	sub    esp,0x4
   1f09c:	6a 0d                	push   0xd
   1f09e:	6a 00                	push   0x0
   1f0a0:	50                   	push   eax
   1f0a1:	e8 07 5f 00 00       	call   24fad <memset>
   1f0a6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:49 (discriminator 3)

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
   1f0a9:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:49 (discriminator 1)
   1f0ad:	83 7d f4 13          	cmp    DWORD PTR [ebp-0xc],0x13
   1f0b1:	7e d3                	jle    1f086 <fatfs_lfn_cache_init+0x26>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:52
            memset(lfn->String[i], 0x00, MAX_LFN_ENTRY_LENGTH);
#endif
}
   1f0b3:	90                   	nop
   1f0b4:	c9                   	leave  
   1f0b5:	c3                   	ret    

0001f0b6 <fatfs_lfn_cache_entry>:
fatfs_lfn_cache_entry():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:59
// fatfs_lfn_cache_entry - Function extracts long file name text from sector
// at a specific offset
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_lfn_cache_entry(struct lfn_cache *lfn, uint8 *entryBuffer)
{
   1f0b6:	55                   	push   ebp
   1f0b7:	89 e5                	mov    ebp,esp
   1f0b9:	53                   	push   ebx
   1f0ba:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:61
    uint8 LFNIndex, i;
    LFNIndex = entryBuffer[0] & 0x1F;
   1f0bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f0c0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f0c3:	83 e0 1f             	and    eax,0x1f
   1f0c6:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:64

    // Limit file name to cache size!
    if (LFNIndex > MAX_LONGFILENAME_ENTRIES)
   1f0c9:	80 7d fa 14          	cmp    BYTE PTR [ebp-0x6],0x14
   1f0cd:	0f 87 45 02 00 00    	ja     1f318 <fatfs_lfn_cache_entry+0x262>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:68
        return ;

    // This is an error condition
    if (LFNIndex == 0)
   1f0d3:	80 7d fa 00          	cmp    BYTE PTR [ebp-0x6],0x0
   1f0d7:	0f 84 3e 02 00 00    	je     1f31b <fatfs_lfn_cache_entry+0x265>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:71
        return ;

    if (lfn->no_of_strings == 0)
   1f0dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0e0:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f0e7:	84 c0                	test   al,al
   1f0e9:	75 0d                	jne    1f0f8 <fatfs_lfn_cache_entry+0x42>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:72
        lfn->no_of_strings = LFNIndex;
   1f0eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0ee:	0f b6 55 fa          	movzx  edx,BYTE PTR [ebp-0x6]
   1f0f2:	88 90 05 01 00 00    	mov    BYTE PTR [eax+0x105],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:74

    lfn->String[LFNIndex-1][0] = entryBuffer[1];
   1f0f8:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f0fc:	8d 50 ff             	lea    edx,[eax-0x1]
   1f0ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f102:	0f b6 48 01          	movzx  ecx,BYTE PTR [eax+0x1]
   1f106:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f109:	89 d0                	mov    eax,edx
   1f10b:	01 c0                	add    eax,eax
   1f10d:	01 d0                	add    eax,edx
   1f10f:	c1 e0 02             	shl    eax,0x2
   1f112:	01 d0                	add    eax,edx
   1f114:	01 d8                	add    eax,ebx
   1f116:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:75
    lfn->String[LFNIndex-1][1] = entryBuffer[3];
   1f118:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f11c:	8d 50 ff             	lea    edx,[eax-0x1]
   1f11f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f122:	0f b6 48 03          	movzx  ecx,BYTE PTR [eax+0x3]
   1f126:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f129:	89 d0                	mov    eax,edx
   1f12b:	01 c0                	add    eax,eax
   1f12d:	01 d0                	add    eax,edx
   1f12f:	c1 e0 02             	shl    eax,0x2
   1f132:	01 d0                	add    eax,edx
   1f134:	01 d8                	add    eax,ebx
   1f136:	83 c0 01             	add    eax,0x1
   1f139:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:76
    lfn->String[LFNIndex-1][2] = entryBuffer[5];
   1f13b:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f13f:	8d 50 ff             	lea    edx,[eax-0x1]
   1f142:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f145:	0f b6 48 05          	movzx  ecx,BYTE PTR [eax+0x5]
   1f149:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f14c:	89 d0                	mov    eax,edx
   1f14e:	01 c0                	add    eax,eax
   1f150:	01 d0                	add    eax,edx
   1f152:	c1 e0 02             	shl    eax,0x2
   1f155:	01 d0                	add    eax,edx
   1f157:	01 d8                	add    eax,ebx
   1f159:	83 c0 02             	add    eax,0x2
   1f15c:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:77
    lfn->String[LFNIndex-1][3] = entryBuffer[7];
   1f15e:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f162:	8d 50 ff             	lea    edx,[eax-0x1]
   1f165:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f168:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
   1f16c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f16f:	89 d0                	mov    eax,edx
   1f171:	01 c0                	add    eax,eax
   1f173:	01 d0                	add    eax,edx
   1f175:	c1 e0 02             	shl    eax,0x2
   1f178:	01 d0                	add    eax,edx
   1f17a:	01 d8                	add    eax,ebx
   1f17c:	83 c0 03             	add    eax,0x3
   1f17f:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:78
    lfn->String[LFNIndex-1][4] = entryBuffer[9];
   1f181:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f185:	8d 50 ff             	lea    edx,[eax-0x1]
   1f188:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f18b:	0f b6 48 09          	movzx  ecx,BYTE PTR [eax+0x9]
   1f18f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f192:	89 d0                	mov    eax,edx
   1f194:	01 c0                	add    eax,eax
   1f196:	01 d0                	add    eax,edx
   1f198:	c1 e0 02             	shl    eax,0x2
   1f19b:	01 d0                	add    eax,edx
   1f19d:	01 d8                	add    eax,ebx
   1f19f:	83 c0 04             	add    eax,0x4
   1f1a2:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:79
    lfn->String[LFNIndex-1][5] = entryBuffer[0x0E];
   1f1a4:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f1a8:	8d 50 ff             	lea    edx,[eax-0x1]
   1f1ab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f1ae:	0f b6 48 0e          	movzx  ecx,BYTE PTR [eax+0xe]
   1f1b2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f1b5:	89 d0                	mov    eax,edx
   1f1b7:	01 c0                	add    eax,eax
   1f1b9:	01 d0                	add    eax,edx
   1f1bb:	c1 e0 02             	shl    eax,0x2
   1f1be:	01 d0                	add    eax,edx
   1f1c0:	01 d8                	add    eax,ebx
   1f1c2:	83 c0 05             	add    eax,0x5
   1f1c5:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:80
    lfn->String[LFNIndex-1][6] = entryBuffer[0x10];
   1f1c7:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f1cb:	8d 50 ff             	lea    edx,[eax-0x1]
   1f1ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f1d1:	0f b6 48 10          	movzx  ecx,BYTE PTR [eax+0x10]
   1f1d5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f1d8:	89 d0                	mov    eax,edx
   1f1da:	01 c0                	add    eax,eax
   1f1dc:	01 d0                	add    eax,edx
   1f1de:	c1 e0 02             	shl    eax,0x2
   1f1e1:	01 d0                	add    eax,edx
   1f1e3:	01 d8                	add    eax,ebx
   1f1e5:	83 c0 06             	add    eax,0x6
   1f1e8:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:81
    lfn->String[LFNIndex-1][7] = entryBuffer[0x12];
   1f1ea:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f1ee:	8d 50 ff             	lea    edx,[eax-0x1]
   1f1f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f1f4:	0f b6 48 12          	movzx  ecx,BYTE PTR [eax+0x12]
   1f1f8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f1fb:	89 d0                	mov    eax,edx
   1f1fd:	01 c0                	add    eax,eax
   1f1ff:	01 d0                	add    eax,edx
   1f201:	c1 e0 02             	shl    eax,0x2
   1f204:	01 d0                	add    eax,edx
   1f206:	01 d8                	add    eax,ebx
   1f208:	83 c0 07             	add    eax,0x7
   1f20b:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:82
    lfn->String[LFNIndex-1][8] = entryBuffer[0x14];
   1f20d:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f211:	8d 50 ff             	lea    edx,[eax-0x1]
   1f214:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f217:	0f b6 48 14          	movzx  ecx,BYTE PTR [eax+0x14]
   1f21b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f21e:	89 d0                	mov    eax,edx
   1f220:	01 c0                	add    eax,eax
   1f222:	01 d0                	add    eax,edx
   1f224:	c1 e0 02             	shl    eax,0x2
   1f227:	01 d0                	add    eax,edx
   1f229:	01 d8                	add    eax,ebx
   1f22b:	83 c0 08             	add    eax,0x8
   1f22e:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:83
    lfn->String[LFNIndex-1][9] = entryBuffer[0x16];
   1f230:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f234:	8d 50 ff             	lea    edx,[eax-0x1]
   1f237:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f23a:	0f b6 48 16          	movzx  ecx,BYTE PTR [eax+0x16]
   1f23e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f241:	89 d0                	mov    eax,edx
   1f243:	01 c0                	add    eax,eax
   1f245:	01 d0                	add    eax,edx
   1f247:	c1 e0 02             	shl    eax,0x2
   1f24a:	01 d0                	add    eax,edx
   1f24c:	01 d8                	add    eax,ebx
   1f24e:	83 c0 09             	add    eax,0x9
   1f251:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:84
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
   1f253:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f257:	8d 50 ff             	lea    edx,[eax-0x1]
   1f25a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f25d:	0f b6 48 18          	movzx  ecx,BYTE PTR [eax+0x18]
   1f261:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f264:	89 d0                	mov    eax,edx
   1f266:	01 c0                	add    eax,eax
   1f268:	01 d0                	add    eax,edx
   1f26a:	c1 e0 02             	shl    eax,0x2
   1f26d:	01 d0                	add    eax,edx
   1f26f:	01 d8                	add    eax,ebx
   1f271:	83 c0 0a             	add    eax,0xa
   1f274:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:85
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
   1f276:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f27a:	8d 50 ff             	lea    edx,[eax-0x1]
   1f27d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f280:	0f b6 48 1c          	movzx  ecx,BYTE PTR [eax+0x1c]
   1f284:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f287:	89 d0                	mov    eax,edx
   1f289:	01 c0                	add    eax,eax
   1f28b:	01 d0                	add    eax,edx
   1f28d:	c1 e0 02             	shl    eax,0x2
   1f290:	01 d0                	add    eax,edx
   1f292:	01 d8                	add    eax,ebx
   1f294:	83 c0 0b             	add    eax,0xb
   1f297:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:86
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];
   1f299:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f29d:	8d 50 ff             	lea    edx,[eax-0x1]
   1f2a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f2a3:	0f b6 48 1e          	movzx  ecx,BYTE PTR [eax+0x1e]
   1f2a7:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f2aa:	89 d0                	mov    eax,edx
   1f2ac:	01 c0                	add    eax,eax
   1f2ae:	01 d0                	add    eax,edx
   1f2b0:	c1 e0 02             	shl    eax,0x2
   1f2b3:	01 d0                	add    eax,edx
   1f2b5:	01 d8                	add    eax,ebx
   1f2b7:	83 c0 0c             	add    eax,0xc
   1f2ba:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:88

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
   1f2bc:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
   1f2c0:	eb 4e                	jmp    1f310 <fatfs_lfn_cache_entry+0x25a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:89
        if (lfn->String[LFNIndex-1][i]==0xFF)
   1f2c2:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f2c6:	8d 50 ff             	lea    edx,[eax-0x1]
   1f2c9:	0f b6 4d fb          	movzx  ecx,BYTE PTR [ebp-0x5]
   1f2cd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f2d0:	89 d0                	mov    eax,edx
   1f2d2:	01 c0                	add    eax,eax
   1f2d4:	01 d0                	add    eax,edx
   1f2d6:	c1 e0 02             	shl    eax,0x2
   1f2d9:	01 d0                	add    eax,edx
   1f2db:	01 d8                	add    eax,ebx
   1f2dd:	01 c8                	add    eax,ecx
   1f2df:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f2e2:	3c ff                	cmp    al,0xff
   1f2e4:	75 20                	jne    1f306 <fatfs_lfn_cache_entry+0x250>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:90
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
   1f2e6:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f2ea:	8d 50 ff             	lea    edx,[eax-0x1]
   1f2ed:	0f b6 4d fb          	movzx  ecx,BYTE PTR [ebp-0x5]
   1f2f1:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f2f4:	89 d0                	mov    eax,edx
   1f2f6:	01 c0                	add    eax,eax
   1f2f8:	01 d0                	add    eax,edx
   1f2fa:	c1 e0 02             	shl    eax,0x2
   1f2fd:	01 d0                	add    eax,edx
   1f2ff:	01 d8                	add    eax,ebx
   1f301:	01 c8                	add    eax,ecx
   1f303:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:88 (discriminator 2)
    lfn->String[LFNIndex-1][9] = entryBuffer[0x16];
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
   1f306:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   1f30a:	83 c0 01             	add    eax,0x1
   1f30d:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:88 (discriminator 1)
   1f310:	80 7d fb 0c          	cmp    BYTE PTR [ebp-0x5],0xc
   1f314:	76 ac                	jbe    1f2c2 <fatfs_lfn_cache_entry+0x20c>
   1f316:	eb 04                	jmp    1f31c <fatfs_lfn_cache_entry+0x266>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:65
    uint8 LFNIndex, i;
    LFNIndex = entryBuffer[0] & 0x1F;

    // Limit file name to cache size!
    if (LFNIndex > MAX_LONGFILENAME_ENTRIES)
        return ;
   1f318:	90                   	nop
   1f319:	eb 01                	jmp    1f31c <fatfs_lfn_cache_entry+0x266>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:69

    // This is an error condition
    if (LFNIndex == 0)
        return ;
   1f31b:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:91
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF)
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
}
   1f31c:	83 c4 10             	add    esp,0x10
   1f31f:	5b                   	pop    ebx
   1f320:	5d                   	pop    ebp
   1f321:	c3                   	ret    

0001f322 <fatfs_lfn_cache_get>:
fatfs_lfn_cache_get():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:98
//-----------------------------------------------------------------------------
// fatfs_lfn_cache_get: Get a reference to the long filename
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
char* fatfs_lfn_cache_get(struct lfn_cache *lfn)
{
   1f322:	55                   	push   ebp
   1f323:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:100
    // Null terminate long filename
    if (lfn->no_of_strings == MAX_LONGFILENAME_ENTRIES)
   1f325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f328:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f32f:	3c 14                	cmp    al,0x14
   1f331:	75 0c                	jne    1f33f <fatfs_lfn_cache_get+0x1d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:101
        lfn->Null = '\0';
   1f333:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f336:	c6 80 04 01 00 00 00 	mov    BYTE PTR [eax+0x104],0x0
   1f33d:	eb 36                	jmp    1f375 <fatfs_lfn_cache_get+0x53>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:102
    else if (lfn->no_of_strings)
   1f33f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f342:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f349:	84 c0                	test   al,al
   1f34b:	74 22                	je     1f36f <fatfs_lfn_cache_get+0x4d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:103
        lfn->String[lfn->no_of_strings][0] = '\0';
   1f34d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f350:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f357:	0f b6 d0             	movzx  edx,al
   1f35a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   1f35d:	89 d0                	mov    eax,edx
   1f35f:	01 c0                	add    eax,eax
   1f361:	01 d0                	add    eax,edx
   1f363:	c1 e0 02             	shl    eax,0x2
   1f366:	01 d0                	add    eax,edx
   1f368:	01 c8                	add    eax,ecx
   1f36a:	c6 00 00             	mov    BYTE PTR [eax],0x0
   1f36d:	eb 06                	jmp    1f375 <fatfs_lfn_cache_get+0x53>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:105
    else
        lfn->String[0][0] = '\0';
   1f36f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f372:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:107

    return (char*)&lfn->String[0][0];
   1f375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:108
}
   1f378:	5d                   	pop    ebp
   1f379:	c3                   	ret    

0001f37a <fatfs_entry_lfn_text>:
fatfs_entry_lfn_text():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:115
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_text: If LFN text entry found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_text(struct fat_dir_entry *entry)
{
   1f37a:	55                   	push   ebp
   1f37b:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:116
    if ((entry->Attr & FILE_ATTR_LFN_TEXT) == FILE_ATTR_LFN_TEXT)
   1f37d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f380:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f384:	0f b6 c0             	movzx  eax,al
   1f387:	83 e0 0f             	and    eax,0xf
   1f38a:	83 f8 0f             	cmp    eax,0xf
   1f38d:	75 07                	jne    1f396 <fatfs_entry_lfn_text+0x1c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:117
        return 1;
   1f38f:	b8 01 00 00 00       	mov    eax,0x1
   1f394:	eb 05                	jmp    1f39b <fatfs_entry_lfn_text+0x21>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:119
    else
        return 0;
   1f396:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:120
}
   1f39b:	5d                   	pop    ebp
   1f39c:	c3                   	ret    

0001f39d <fatfs_entry_lfn_invalid>:
fatfs_entry_lfn_invalid():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:127
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_invalid: If SFN found not relating to LFN
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
   1f39d:	55                   	push   ebp
   1f39e:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:128
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
   1f3a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3a3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f3a6:	84 c0                	test   al,al
   1f3a8:	74 26                	je     1f3d0 <fatfs_entry_lfn_invalid+0x33>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:129 (discriminator 1)
         (entry->Name[0]==FILE_HEADER_DELETED)||
   1f3aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3ad:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:128 (discriminator 1)
// fatfs_entry_lfn_invalid: If SFN found not relating to LFN
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
   1f3b0:	3c e5                	cmp    al,0xe5
   1f3b2:	74 1c                	je     1f3d0 <fatfs_entry_lfn_invalid+0x33>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:130
         (entry->Name[0]==FILE_HEADER_DELETED)||
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
   1f3b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3b7:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:129
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
         (entry->Name[0]==FILE_HEADER_DELETED)||
   1f3bb:	3c 08                	cmp    al,0x8
   1f3bd:	74 11                	je     1f3d0 <fatfs_entry_lfn_invalid+0x33>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:131
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
         (entry->Attr & FILE_ATTR_SYSHID) )
   1f3bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3c2:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f3c6:	0f b6 c0             	movzx  eax,al
   1f3c9:	83 e0 06             	and    eax,0x6
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:130
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
         (entry->Name[0]==FILE_HEADER_DELETED)||
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
   1f3cc:	85 c0                	test   eax,eax
   1f3ce:	74 07                	je     1f3d7 <fatfs_entry_lfn_invalid+0x3a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:132
         (entry->Attr & FILE_ATTR_SYSHID) )
        return 1;
   1f3d0:	b8 01 00 00 00       	mov    eax,0x1
   1f3d5:	eb 05                	jmp    1f3dc <fatfs_entry_lfn_invalid+0x3f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:134
    else
        return 0;
   1f3d7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:135
}
   1f3dc:	5d                   	pop    ebp
   1f3dd:	c3                   	ret    

0001f3de <fatfs_entry_lfn_exists>:
fatfs_entry_lfn_exists():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:142
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_exists: If LFN exists and correlation SFN found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
   1f3de:	55                   	push   ebp
   1f3df:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:143
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f3e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f3e4:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f3e8:	3c 0f                	cmp    al,0xf
   1f3ea:	74 45                	je     1f431 <fatfs_entry_lfn_exists+0x53>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:144 (discriminator 1)
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1f3ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f3ef:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:143 (discriminator 1)
// fatfs_entry_lfn_exists: If LFN exists and correlation SFN found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f3f2:	84 c0                	test   al,al
   1f3f4:	74 3b                	je     1f431 <fatfs_entry_lfn_exists+0x53>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:145
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1f3f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f3f9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:144
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1f3fc:	3c e5                	cmp    al,0xe5
   1f3fe:	74 31                	je     1f431 <fatfs_entry_lfn_exists+0x53>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:146
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1f400:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f403:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:145
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1f407:	3c 08                	cmp    al,0x8
   1f409:	74 26                	je     1f431 <fatfs_entry_lfn_exists+0x53>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:147
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
   1f40b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f40e:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f412:	0f b6 c0             	movzx  eax,al
   1f415:	83 e0 06             	and    eax,0x6
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:146
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1f418:	85 c0                	test   eax,eax
   1f41a:	75 15                	jne    1f431 <fatfs_entry_lfn_exists+0x53>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:148
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
         (lfn->no_of_strings) )
   1f41c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f41f:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:147
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
   1f426:	84 c0                	test   al,al
   1f428:	74 07                	je     1f431 <fatfs_entry_lfn_exists+0x53>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:149
         (lfn->no_of_strings) )
        return 1;
   1f42a:	b8 01 00 00 00       	mov    eax,0x1
   1f42f:	eb 05                	jmp    1f436 <fatfs_entry_lfn_exists+0x58>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:151
    else
        return 0;
   1f431:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:152
}
   1f436:	5d                   	pop    ebp
   1f437:	c3                   	ret    

0001f438 <fatfs_entry_sfn_only>:
fatfs_entry_sfn_only():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:158
#endif
//-----------------------------------------------------------------------------
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
   1f438:	55                   	push   ebp
   1f439:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:159
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f43b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f43e:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f442:	3c 0f                	cmp    al,0xf
   1f444:	74 37                	je     1f47d <fatfs_entry_sfn_only+0x45>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:160 (discriminator 1)
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1f446:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f449:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:159 (discriminator 1)
//-----------------------------------------------------------------------------
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f44c:	84 c0                	test   al,al
   1f44e:	74 2d                	je     1f47d <fatfs_entry_sfn_only+0x45>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:161
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1f450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f453:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:160
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1f456:	3c e5                	cmp    al,0xe5
   1f458:	74 23                	je     1f47d <fatfs_entry_sfn_only+0x45>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:162
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1f45a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f45d:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:161
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1f461:	3c 08                	cmp    al,0x8
   1f463:	74 18                	je     1f47d <fatfs_entry_sfn_only+0x45>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:163
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) )
   1f465:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f468:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f46c:	0f b6 c0             	movzx  eax,al
   1f46f:	83 e0 06             	and    eax,0x6
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:162
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1f472:	85 c0                	test   eax,eax
   1f474:	75 07                	jne    1f47d <fatfs_entry_sfn_only+0x45>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:164
         (!(entry->Attr&FILE_ATTR_SYSHID)) )
        return 1;
   1f476:	b8 01 00 00 00       	mov    eax,0x1
   1f47b:	eb 05                	jmp    1f482 <fatfs_entry_sfn_only+0x4a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:166
    else
        return 0;
   1f47d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:167
}
   1f482:	5d                   	pop    ebp
   1f483:	c3                   	ret    

0001f484 <fatfs_entry_is_dir>:
fatfs_entry_is_dir():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:173
// TODO: FILE_ATTR_SYSHID ?!?!??!
//-----------------------------------------------------------------------------
// fatfs_entry_is_dir: Returns 1 if a directory
//-----------------------------------------------------------------------------
int fatfs_entry_is_dir(struct fat_dir_entry *entry)
{
   1f484:	55                   	push   ebp
   1f485:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:174
    if (entry->Attr & FILE_TYPE_DIR)
   1f487:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f48a:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f48e:	0f b6 c0             	movzx  eax,al
   1f491:	83 e0 10             	and    eax,0x10
   1f494:	85 c0                	test   eax,eax
   1f496:	74 07                	je     1f49f <fatfs_entry_is_dir+0x1b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:175
        return 1;
   1f498:	b8 01 00 00 00       	mov    eax,0x1
   1f49d:	eb 05                	jmp    1f4a4 <fatfs_entry_is_dir+0x20>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:177
    else
        return 0;
   1f49f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:178
}
   1f4a4:	5d                   	pop    ebp
   1f4a5:	c3                   	ret    

0001f4a6 <fatfs_entry_is_file>:
fatfs_entry_is_file():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:183
//-----------------------------------------------------------------------------
// fatfs_entry_is_file: Returns 1 is a file entry
//-----------------------------------------------------------------------------
int fatfs_entry_is_file(struct fat_dir_entry *entry)
{
   1f4a6:	55                   	push   ebp
   1f4a7:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:184
    if (entry->Attr & FILE_TYPE_FILE)
   1f4a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4ac:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f4b0:	0f b6 c0             	movzx  eax,al
   1f4b3:	83 e0 20             	and    eax,0x20
   1f4b6:	85 c0                	test   eax,eax
   1f4b8:	74 07                	je     1f4c1 <fatfs_entry_is_file+0x1b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:185
        return 1;
   1f4ba:	b8 01 00 00 00       	mov    eax,0x1
   1f4bf:	eb 05                	jmp    1f4c6 <fatfs_entry_is_file+0x20>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:187
    else
        return 0;
   1f4c1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:188
}
   1f4c6:	5d                   	pop    ebp
   1f4c7:	c3                   	ret    

0001f4c8 <fatfs_lfn_entries_required>:
fatfs_lfn_entries_required():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:194
//-----------------------------------------------------------------------------
// fatfs_lfn_entries_required: Calculate number of 13 characters entries
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_lfn_entries_required(char *filename)
{
   1f4c8:	55                   	push   ebp
   1f4c9:	89 e5                	mov    ebp,esp
   1f4cb:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:195
    int length = (int)strlen(filename);
   1f4ce:	83 ec 0c             	sub    esp,0xc
   1f4d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f4d4:	e8 2b 7d 00 00       	call   27204 <strlen>
   1f4d9:	83 c4 10             	add    esp,0x10
   1f4dc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:197

    if (length)
   1f4df:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1f4e3:	74 1d                	je     1f502 <fatfs_lfn_entries_required+0x3a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:198
        return (length + MAX_LFN_ENTRY_LENGTH - 1) / MAX_LFN_ENTRY_LENGTH;
   1f4e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f4e8:	8d 48 0c             	lea    ecx,[eax+0xc]
   1f4eb:	ba 4f ec c4 4e       	mov    edx,0x4ec4ec4f
   1f4f0:	89 c8                	mov    eax,ecx
   1f4f2:	f7 ea                	imul   edx
   1f4f4:	c1 fa 02             	sar    edx,0x2
   1f4f7:	89 c8                	mov    eax,ecx
   1f4f9:	c1 f8 1f             	sar    eax,0x1f
   1f4fc:	29 c2                	sub    edx,eax
   1f4fe:	89 d0                	mov    eax,edx
   1f500:	eb 05                	jmp    1f507 <fatfs_lfn_entries_required+0x3f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:200
    else
        return 0;
   1f502:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:201
}
   1f507:	c9                   	leave  
   1f508:	c3                   	ret    

0001f509 <fatfs_filename_to_lfn>:
fatfs_filename_to_lfn():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:208
//-----------------------------------------------------------------------------
// fatfs_filename_to_lfn:
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk)
{
   1f509:	55                   	push   ebp
   1f50a:	89 e5                	mov    ebp,esp
   1f50c:	83 ec 68             	sub    esp,0x68
   1f50f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f512:	88 45 a4             	mov    BYTE PTR [ebp-0x5c],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:210
    int i;
    int nameIndexes[MAX_LFN_ENTRY_LENGTH] = {1,3,5,7,9,0x0E,0x10,0x12,0x14,0x16,0x18,0x1C,0x1E};
   1f515:	c7 45 b4 01 00 00 00 	mov    DWORD PTR [ebp-0x4c],0x1
   1f51c:	c7 45 b8 03 00 00 00 	mov    DWORD PTR [ebp-0x48],0x3
   1f523:	c7 45 bc 05 00 00 00 	mov    DWORD PTR [ebp-0x44],0x5
   1f52a:	c7 45 c0 07 00 00 00 	mov    DWORD PTR [ebp-0x40],0x7
   1f531:	c7 45 c4 09 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x9
   1f538:	c7 45 c8 0e 00 00 00 	mov    DWORD PTR [ebp-0x38],0xe
   1f53f:	c7 45 cc 10 00 00 00 	mov    DWORD PTR [ebp-0x34],0x10
   1f546:	c7 45 d0 12 00 00 00 	mov    DWORD PTR [ebp-0x30],0x12
   1f54d:	c7 45 d4 14 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x14
   1f554:	c7 45 d8 16 00 00 00 	mov    DWORD PTR [ebp-0x28],0x16
   1f55b:	c7 45 dc 18 00 00 00 	mov    DWORD PTR [ebp-0x24],0x18
   1f562:	c7 45 e0 1c 00 00 00 	mov    DWORD PTR [ebp-0x20],0x1c
   1f569:	c7 45 e4 1e 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1e
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:213

    // 13 characters entries
    int length = (int)strlen(filename);
   1f570:	83 ec 0c             	sub    esp,0xc
   1f573:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f576:	e8 89 7c 00 00       	call   27204 <strlen>
   1f57b:	83 c4 10             	add    esp,0x10
   1f57e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:214
    int entriesRequired = fatfs_lfn_entries_required(filename);
   1f581:	83 ec 0c             	sub    esp,0xc
   1f584:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f587:	e8 3c ff ff ff       	call   1f4c8 <fatfs_lfn_entries_required>
   1f58c:	83 c4 10             	add    esp,0x10
   1f58f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:217

    // Filename offset
    int start = entry * MAX_LFN_ENTRY_LENGTH;
   1f592:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1f595:	89 d0                	mov    eax,edx
   1f597:	01 c0                	add    eax,eax
   1f599:	01 d0                	add    eax,edx
   1f59b:	c1 e0 02             	shl    eax,0x2
   1f59e:	01 d0                	add    eax,edx
   1f5a0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:220

    // Initialise to zeros
    memset(buffer, 0x00, FAT_DIR_ENTRY_SIZE);
   1f5a3:	83 ec 04             	sub    esp,0x4
   1f5a6:	6a 20                	push   0x20
   1f5a8:	6a 00                	push   0x0
   1f5aa:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f5ad:	e8 fb 59 00 00       	call   24fad <memset>
   1f5b2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:223

    // LFN entry number
    buffer[0] = (uint8)(((entriesRequired-1)==entry)?(0x40|(entry+1)):(entry+1));
   1f5b5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1f5b8:	83 e8 01             	sub    eax,0x1
   1f5bb:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1f5be:	75 0d                	jne    1f5cd <fatfs_filename_to_lfn+0xc4>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:223 (discriminator 1)
   1f5c0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1f5c3:	83 c0 01             	add    eax,0x1
   1f5c6:	83 c8 40             	or     eax,0x40
   1f5c9:	89 c2                	mov    edx,eax
   1f5cb:	eb 06                	jmp    1f5d3 <fatfs_filename_to_lfn+0xca>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:223 (discriminator 2)
   1f5cd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1f5d0:	8d 50 01             	lea    edx,[eax+0x1]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:223 (discriminator 4)
   1f5d3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f5d6:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:226 (discriminator 4)

    // LFN flag
    buffer[11] = 0x0F;
   1f5d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f5db:	83 c0 0b             	add    eax,0xb
   1f5de:	c6 00 0f             	mov    BYTE PTR [eax],0xf
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:229 (discriminator 4)

    // Checksum of short filename
    buffer[13] = sfnChk;
   1f5e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f5e4:	8d 50 0d             	lea    edx,[eax+0xd]
   1f5e7:	0f b6 45 a4          	movzx  eax,BYTE PTR [ebp-0x5c]
   1f5eb:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:232 (discriminator 4)

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
   1f5ed:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1f5f4:	eb 78                	jmp    1f66e <fatfs_filename_to_lfn+0x165>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:234
    {
        if ( (start+i) < length )
   1f5f6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1f5f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f5fc:	01 d0                	add    eax,edx
   1f5fe:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   1f601:	7d 24                	jge    1f627 <fatfs_filename_to_lfn+0x11e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:235
            buffer[nameIndexes[i]] = filename[start+i];
   1f603:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f606:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1f60a:	89 c2                	mov    edx,eax
   1f60c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f60f:	01 d0                	add    eax,edx
   1f611:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
   1f614:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f617:	01 ca                	add    edx,ecx
   1f619:	89 d1                	mov    ecx,edx
   1f61b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f61e:	01 ca                	add    edx,ecx
   1f620:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1f623:	88 10                	mov    BYTE PTR [eax],dl
   1f625:	eb 43                	jmp    1f66a <fatfs_filename_to_lfn+0x161>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:236
        else if ( (start+i) == length )
   1f627:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1f62a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f62d:	01 d0                	add    eax,edx
   1f62f:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   1f632:	75 13                	jne    1f647 <fatfs_filename_to_lfn+0x13e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:237
            buffer[nameIndexes[i]] = 0x00;
   1f634:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f637:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1f63b:	89 c2                	mov    edx,eax
   1f63d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f640:	01 d0                	add    eax,edx
   1f642:	c6 00 00             	mov    BYTE PTR [eax],0x0
   1f645:	eb 23                	jmp    1f66a <fatfs_filename_to_lfn+0x161>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:240
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   1f647:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f64a:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1f64e:	89 c2                	mov    edx,eax
   1f650:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f653:	01 d0                	add    eax,edx
   1f655:	c6 00 ff             	mov    BYTE PTR [eax],0xff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:241
            buffer[nameIndexes[i]+1] = 0xFF;
   1f658:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f65b:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1f65f:	8d 50 01             	lea    edx,[eax+0x1]
   1f662:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f665:	01 d0                	add    eax,edx
   1f667:	c6 00 ff             	mov    BYTE PTR [eax],0xff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:232 (discriminator 2)

    // Checksum of short filename
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
   1f66a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:232 (discriminator 1)
   1f66e:	83 7d f4 0c          	cmp    DWORD PTR [ebp-0xc],0xc
   1f672:	7e 82                	jle    1f5f6 <fatfs_filename_to_lfn+0xed>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:244
        {
            buffer[nameIndexes[i]] = 0xFF;
            buffer[nameIndexes[i]+1] = 0xFF;
        }
    }
}
   1f674:	90                   	nop
   1f675:	c9                   	leave  
   1f676:	c3                   	ret    

0001f677 <fatfs_sfn_create_entry>:
fatfs_sfn_create_entry():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:251
//-----------------------------------------------------------------------------
// fatfs_sfn_create_entry: Create the short filename directory entry
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
{
   1f677:	55                   	push   ebp
   1f678:	89 e5                	mov    ebp,esp
   1f67a:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:255
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
   1f67d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1f684:	eb 1b                	jmp    1f6a1 <fatfs_sfn_create_entry+0x2a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:256 (discriminator 3)
        entry->Name[i] = shortfilename[i];
   1f686:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1f689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f68c:	01 d0                	add    eax,edx
   1f68e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f691:	89 c1                	mov    ecx,eax
   1f693:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   1f696:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1f699:	01 d0                	add    eax,edx
   1f69b:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:255 (discriminator 3)
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
{
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
   1f69d:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:255 (discriminator 1)
   1f6a1:	83 7d fc 0a          	cmp    DWORD PTR [ebp-0x4],0xa
   1f6a5:	7e df                	jle    1f686 <fatfs_sfn_create_entry+0xf>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:259
        entry->Name[i] = shortfilename[i];

    // Unless we have a RTC we might as well set these to 1980
    entry->CrtTimeTenth = 0x00;
   1f6a7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f6aa:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:260
    entry->CrtTime[1] = entry->CrtTime[0] = 0x00;
   1f6ae:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f6b1:	c6 40 0e 00          	mov    BYTE PTR [eax+0xe],0x0
   1f6b5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f6b8:	0f b6 50 0e          	movzx  edx,BYTE PTR [eax+0xe]
   1f6bc:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f6bf:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:261
    entry->CrtDate[1] = 0x00;
   1f6c2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f6c5:	c6 40 11 00          	mov    BYTE PTR [eax+0x11],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:262
    entry->CrtDate[0] = 0x20;
   1f6c9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f6cc:	c6 40 10 20          	mov    BYTE PTR [eax+0x10],0x20
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:263
    entry->LstAccDate[1] = 0x00;
   1f6d0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f6d3:	c6 40 13 00          	mov    BYTE PTR [eax+0x13],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:264
    entry->LstAccDate[0] = 0x20;
   1f6d7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f6da:	c6 40 12 20          	mov    BYTE PTR [eax+0x12],0x20
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:265
    entry->WrtTime[1] = entry->WrtTime[0] = 0x00;
   1f6de:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f6e1:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
   1f6e5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f6e8:	0f b6 50 16          	movzx  edx,BYTE PTR [eax+0x16]
   1f6ec:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f6ef:	88 50 17             	mov    BYTE PTR [eax+0x17],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:266
    entry->WrtDate[1] = 0x00;
   1f6f2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f6f5:	c6 40 19 00          	mov    BYTE PTR [eax+0x19],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:267
    entry->WrtDate[0] = 0x20;
   1f6f9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f6fc:	c6 40 18 20          	mov    BYTE PTR [eax+0x18],0x20
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:269

    if (!dir)
   1f700:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1f704:	75 09                	jne    1f70f <fatfs_sfn_create_entry+0x98>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:270
        entry->Attr = FILE_TYPE_FILE;
   1f706:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f709:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
   1f70d:	eb 07                	jmp    1f716 <fatfs_sfn_create_entry+0x9f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:272
    else
        entry->Attr = FILE_TYPE_DIR;
   1f70f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f712:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:274

    entry->NTRes = 0x00;
   1f716:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f719:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:276

    entry->FstClusHI = FAT_HTONS((uint16)((startCluster>>16) & 0xFFFF));
   1f71d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1f720:	c1 e8 10             	shr    eax,0x10
   1f723:	89 c2                	mov    edx,eax
   1f725:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f728:	66 89 50 14          	mov    WORD PTR [eax+0x14],dx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:277
    entry->FstClusLO = FAT_HTONS((uint16)((startCluster>>0) & 0xFFFF));
   1f72c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1f72f:	89 c2                	mov    edx,eax
   1f731:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f734:	66 89 50 1a          	mov    WORD PTR [eax+0x1a],dx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:278
    entry->FileSize = FAT_HTONL(size);
   1f738:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f73b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1f73e:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:279
}
   1f741:	90                   	nop
   1f742:	c9                   	leave  
   1f743:	c3                   	ret    

0001f744 <fatfs_lfn_create_sfn>:
fatfs_lfn_create_sfn():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:286
//-----------------------------------------------------------------------------
// fatfs_lfn_create_sfn: Create a padded SFN
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_create_sfn(char *sfn_output, char *filename)
{
   1f744:	55                   	push   ebp
   1f745:	89 e5                	mov    ebp,esp
   1f747:	83 ec 28             	sub    esp,0x28
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:288
    int i;
    int dotPos = -1;
   1f74a:	c7 45 f0 ff ff ff ff 	mov    DWORD PTR [ebp-0x10],0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:291
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
   1f751:	83 ec 0c             	sub    esp,0xc
   1f754:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f757:	e8 a8 7a 00 00       	call   27204 <strlen>
   1f75c:	83 c4 10             	add    esp,0x10
   1f75f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:294

    // Invalid to start with .
    if (filename[0]=='.')
   1f762:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f765:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f768:	3c 2e                	cmp    al,0x2e
   1f76a:	75 0a                	jne    1f776 <fatfs_lfn_create_sfn+0x32>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:295
        return 0;
   1f76c:	b8 00 00 00 00       	mov    eax,0x0
   1f771:	e9 a5 01 00 00       	jmp    1f91b <fatfs_lfn_create_sfn+0x1d7>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:297

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
   1f776:	83 ec 04             	sub    esp,0x4
   1f779:	6a 0b                	push   0xb
   1f77b:	6a 20                	push   0x20
   1f77d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f780:	e8 28 58 00 00       	call   24fad <memset>
   1f785:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:298
    memset(ext, ' ', 3);
   1f788:	83 ec 04             	sub    esp,0x4
   1f78b:	6a 03                	push   0x3
   1f78d:	6a 20                	push   0x20
   1f78f:	8d 45 e5             	lea    eax,[ebp-0x1b]
   1f792:	50                   	push   eax
   1f793:	e8 15 58 00 00       	call   24fad <memset>
   1f798:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:301

    // Find dot seperator
    for (i = 0; i< len; i++)
   1f79b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1f7a2:	eb 19                	jmp    1f7bd <fatfs_lfn_create_sfn+0x79>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:303
    {
        if (filename[i]=='.')
   1f7a4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f7a7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f7aa:	01 d0                	add    eax,edx
   1f7ac:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f7af:	3c 2e                	cmp    al,0x2e
   1f7b1:	75 06                	jne    1f7b9 <fatfs_lfn_create_sfn+0x75>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:304
            dotPos = i;
   1f7b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f7b6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:301 (discriminator 2)

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
    memset(ext, ' ', 3);

    // Find dot seperator
    for (i = 0; i< len; i++)
   1f7b9:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:301 (discriminator 1)
   1f7bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f7c0:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1f7c3:	7c df                	jl     1f7a4 <fatfs_lfn_create_sfn+0x60>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:308
        if (filename[i]=='.')
            dotPos = i;
    }

    // Extract extensions
    if (dotPos!=-1)
   1f7c5:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   1f7c9:	74 44                	je     1f80f <fatfs_lfn_create_sfn+0xcb>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:311
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
   1f7cb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1f7ce:	83 c0 01             	add    eax,0x1
   1f7d1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1f7d4:	eb 28                	jmp    1f7fe <fatfs_lfn_create_sfn+0xba>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:312
            if (i<len)
   1f7d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f7d9:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1f7dc:	7d 1c                	jge    1f7fa <fatfs_lfn_create_sfn+0xb6>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:313
                ext[i-(dotPos+1)] = filename[i];
   1f7de:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1f7e1:	8d 50 01             	lea    edx,[eax+0x1]
   1f7e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f7e7:	29 d0                	sub    eax,edx
   1f7e9:	89 c2                	mov    edx,eax
   1f7eb:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1f7ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f7f1:	01 c8                	add    eax,ecx
   1f7f3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f7f6:	88 44 15 e5          	mov    BYTE PTR [ebp+edx*1-0x1b],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:311 (discriminator 2)

    // Extract extensions
    if (dotPos!=-1)
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
   1f7fa:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:311 (discriminator 1)
   1f7fe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1f801:	83 c0 04             	add    eax,0x4
   1f804:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1f807:	7f cd                	jg     1f7d6 <fatfs_lfn_create_sfn+0x92>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:316
            if (i<len)
                ext[i-(dotPos+1)] = filename[i];

        // Shorten the length to the dot position
        len = dotPos;
   1f809:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1f80c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:320
    }

    // Add filename part
    pos = 0;
   1f80f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:321
    for (i=0;i<len;i++)
   1f816:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1f81d:	e9 85 00 00 00       	jmp    1f8a7 <fatfs_lfn_create_sfn+0x163>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:323
    {
        if ( (filename[i]!=' ') && (filename[i]!='.') )
   1f822:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f825:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f828:	01 d0                	add    eax,edx
   1f82a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f82d:	3c 20                	cmp    al,0x20
   1f82f:	74 6c                	je     1f89d <fatfs_lfn_create_sfn+0x159>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:323 (discriminator 1)
   1f831:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f834:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f837:	01 d0                	add    eax,edx
   1f839:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f83c:	3c 2e                	cmp    al,0x2e
   1f83e:	74 5d                	je     1f89d <fatfs_lfn_create_sfn+0x159>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:325
        {
            if (filename[i] >= 'a' && filename[i] <= 'z')
   1f840:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f843:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f846:	01 d0                	add    eax,edx
   1f848:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f84b:	3c 60                	cmp    al,0x60
   1f84d:	7e 31                	jle    1f880 <fatfs_lfn_create_sfn+0x13c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:325 (discriminator 1)
   1f84f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f852:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f855:	01 d0                	add    eax,edx
   1f857:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f85a:	3c 7a                	cmp    al,0x7a
   1f85c:	7f 22                	jg     1f880 <fatfs_lfn_create_sfn+0x13c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:326
                sfn_output[pos++] = filename[i] - 'a' + 'A';
   1f85e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1f861:	8d 50 01             	lea    edx,[eax+0x1]
   1f864:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   1f867:	89 c2                	mov    edx,eax
   1f869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f86c:	01 d0                	add    eax,edx
   1f86e:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1f871:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1f874:	01 ca                	add    edx,ecx
   1f876:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1f879:	83 ea 20             	sub    edx,0x20
   1f87c:	88 10                	mov    BYTE PTR [eax],dl
   1f87e:	eb 1d                	jmp    1f89d <fatfs_lfn_create_sfn+0x159>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:328
            else
                sfn_output[pos++] = filename[i];
   1f880:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1f883:	8d 50 01             	lea    edx,[eax+0x1]
   1f886:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   1f889:	89 c2                	mov    edx,eax
   1f88b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f88e:	01 c2                	add    edx,eax
   1f890:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1f893:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f896:	01 c8                	add    eax,ecx
   1f898:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f89b:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:332
        }

        // Fill upto 8 characters
        if (pos==FAT_SFN_SIZE_PARTIAL)
   1f89d:	83 7d ec 08          	cmp    DWORD PTR [ebp-0x14],0x8
   1f8a1:	74 12                	je     1f8b5 <fatfs_lfn_create_sfn+0x171>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:321 (discriminator 2)
        len = dotPos;
    }

    // Add filename part
    pos = 0;
    for (i=0;i<len;i++)
   1f8a3:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:321 (discriminator 1)
   1f8a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f8aa:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1f8ad:	0f 8c 6f ff ff ff    	jl     1f822 <fatfs_lfn_create_sfn+0xde>
   1f8b3:	eb 01                	jmp    1f8b6 <fatfs_lfn_create_sfn+0x172>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:333
                sfn_output[pos++] = filename[i];
        }

        // Fill upto 8 characters
        if (pos==FAT_SFN_SIZE_PARTIAL)
            break;
   1f8b5:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:337
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
   1f8b6:	c7 45 f4 08 00 00 00 	mov    DWORD PTR [ebp-0xc],0x8
   1f8bd:	eb 51                	jmp    1f910 <fatfs_lfn_create_sfn+0x1cc>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:339
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
   1f8bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f8c2:	83 e8 08             	sub    eax,0x8
   1f8c5:	0f b6 44 05 e5       	movzx  eax,BYTE PTR [ebp+eax*1-0x1b]
   1f8ca:	3c 60                	cmp    al,0x60
   1f8cc:	7e 29                	jle    1f8f7 <fatfs_lfn_create_sfn+0x1b3>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:339 (discriminator 1)
   1f8ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f8d1:	83 e8 08             	sub    eax,0x8
   1f8d4:	0f b6 44 05 e5       	movzx  eax,BYTE PTR [ebp+eax*1-0x1b]
   1f8d9:	3c 7a                	cmp    al,0x7a
   1f8db:	7f 1a                	jg     1f8f7 <fatfs_lfn_create_sfn+0x1b3>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:340
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
   1f8dd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f8e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f8e3:	01 d0                	add    eax,edx
   1f8e5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f8e8:	83 ea 08             	sub    edx,0x8
   1f8eb:	0f b6 54 15 e5       	movzx  edx,BYTE PTR [ebp+edx*1-0x1b]
   1f8f0:	83 ea 20             	sub    edx,0x20
   1f8f3:	88 10                	mov    BYTE PTR [eax],dl
   1f8f5:	eb 15                	jmp    1f90c <fatfs_lfn_create_sfn+0x1c8>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:342
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
   1f8f7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f8fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f8fd:	01 c2                	add    edx,eax
   1f8ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f902:	83 e8 08             	sub    eax,0x8
   1f905:	0f b6 44 05 e5       	movzx  eax,BYTE PTR [ebp+eax*1-0x1b]
   1f90a:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:337 (discriminator 2)
        if (pos==FAT_SFN_SIZE_PARTIAL)
            break;
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
   1f90c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:337 (discriminator 1)
   1f910:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   1f914:	7e a9                	jle    1f8bf <fatfs_lfn_create_sfn+0x17b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:345
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
    }

    return 1;
   1f916:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:346 (discriminator 1)
}
   1f91b:	c9                   	leave  
   1f91c:	c3                   	ret    

0001f91d <fatfs_itoa>:
fatfs_itoa():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:351
//-----------------------------------------------------------------------------
// fatfs_itoa:
//-----------------------------------------------------------------------------
static void fatfs_itoa(uint32 num, char *s)
{
   1f91d:	55                   	push   ebp
   1f91e:	89 e5                	mov    ebp,esp
   1f920:	53                   	push   ebx
   1f921:	83 ec 30             	sub    esp,0x30
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:354
    char* cp;
    char outbuf[12];
    const char digits[] = "0123456789ABCDEF";
   1f924:	c7 45 db 30 31 32 33 	mov    DWORD PTR [ebp-0x25],0x33323130
   1f92b:	c7 45 df 34 35 36 37 	mov    DWORD PTR [ebp-0x21],0x37363534
   1f932:	c7 45 e3 38 39 41 42 	mov    DWORD PTR [ebp-0x1d],0x42413938
   1f939:	c7 45 e7 43 44 45 46 	mov    DWORD PTR [ebp-0x19],0x46454443
   1f940:	c6 45 eb 00          	mov    BYTE PTR [ebp-0x15],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:357

    // Build string backwards
    cp = outbuf;
   1f944:	8d 45 ec             	lea    eax,[ebp-0x14]
   1f947:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:360 (discriminator 1)
    do
    {
        *cp++ = digits[(int)(num % 10)];
   1f94a:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   1f94d:	8d 41 01             	lea    eax,[ecx+0x1]
   1f950:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   1f953:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f956:	ba cd cc cc cc       	mov    edx,0xcccccccd
   1f95b:	89 d8                	mov    eax,ebx
   1f95d:	f7 e2                	mul    edx
   1f95f:	c1 ea 03             	shr    edx,0x3
   1f962:	89 d0                	mov    eax,edx
   1f964:	c1 e0 02             	shl    eax,0x2
   1f967:	01 d0                	add    eax,edx
   1f969:	01 c0                	add    eax,eax
   1f96b:	29 c3                	sub    ebx,eax
   1f96d:	89 da                	mov    edx,ebx
   1f96f:	89 d0                	mov    eax,edx
   1f971:	0f b6 44 05 db       	movzx  eax,BYTE PTR [ebp+eax*1-0x25]
   1f976:	88 01                	mov    BYTE PTR [ecx],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:362 (discriminator 1)
    }
    while ((num /= 10) > 0);
   1f978:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f97b:	ba cd cc cc cc       	mov    edx,0xcccccccd
   1f980:	f7 e2                	mul    edx
   1f982:	89 d0                	mov    eax,edx
   1f984:	c1 e8 03             	shr    eax,0x3
   1f987:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
   1f98a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1f98e:	75 ba                	jne    1f94a <fatfs_itoa+0x2d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:364

    *cp-- = 0;
   1f990:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1f993:	8d 50 ff             	lea    edx,[eax-0x1]
   1f996:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   1f999:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:367

    // Copy in forwards
    while (cp >= outbuf)
   1f99c:	eb 17                	jmp    1f9b5 <fatfs_itoa+0x98>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:368
        *s++ = *cp--;
   1f99e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f9a1:	8d 50 01             	lea    edx,[eax+0x1]
   1f9a4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
   1f9a7:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   1f9aa:	8d 4a ff             	lea    ecx,[edx-0x1]
   1f9ad:	89 4d f8             	mov    DWORD PTR [ebp-0x8],ecx
   1f9b0:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1f9b3:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:367
    while ((num /= 10) > 0);

    *cp-- = 0;

    // Copy in forwards
    while (cp >= outbuf)
   1f9b5:	8d 45 ec             	lea    eax,[ebp-0x14]
   1f9b8:	39 45 f8             	cmp    DWORD PTR [ebp-0x8],eax
   1f9bb:	73 e1                	jae    1f99e <fatfs_itoa+0x81>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:370
        *s++ = *cp--;

    *s = 0;
   1f9bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f9c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:371
}
   1f9c3:	90                   	nop
   1f9c4:	83 c4 30             	add    esp,0x30
   1f9c7:	5b                   	pop    ebx
   1f9c8:	5d                   	pop    ebp
   1f9c9:	c3                   	ret    

0001f9ca <fatfs_lfn_generate_tail>:
fatfs_lfn_generate_tail():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:381
// sfn_output = Output short filename with tail
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_generate_tail(char *sfn_output, char *sfn_input, uint32 tailNum)
{
   1f9ca:	55                   	push   ebp
   1f9cb:	89 e5                	mov    ebp,esp
   1f9cd:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:385
    int tail_chars;
    char tail_str[12];

    if (tailNum > 99999)
   1f9d0:	81 7d 10 9f 86 01 00 	cmp    DWORD PTR [ebp+0x10],0x1869f
   1f9d7:	76 07                	jbe    1f9e0 <fatfs_lfn_generate_tail+0x16>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:386
        return 0;
   1f9d9:	b8 00 00 00 00       	mov    eax,0x0
   1f9de:	eb 79                	jmp    1fa59 <fatfs_lfn_generate_tail+0x8f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:389

    // Convert to number
    memset(tail_str, 0x00, sizeof(tail_str));
   1f9e0:	83 ec 04             	sub    esp,0x4
   1f9e3:	6a 0c                	push   0xc
   1f9e5:	6a 00                	push   0x0
   1f9e7:	8d 45 e8             	lea    eax,[ebp-0x18]
   1f9ea:	50                   	push   eax
   1f9eb:	e8 bd 55 00 00       	call   24fad <memset>
   1f9f0:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:390
    tail_str[0] = '~';
   1f9f3:	c6 45 e8 7e          	mov    BYTE PTR [ebp-0x18],0x7e
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:391
    fatfs_itoa(tailNum, tail_str+1);
   1f9f7:	8d 45 e8             	lea    eax,[ebp-0x18]
   1f9fa:	83 c0 01             	add    eax,0x1
   1f9fd:	83 ec 08             	sub    esp,0x8
   1fa00:	50                   	push   eax
   1fa01:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1fa04:	e8 14 ff ff ff       	call   1f91d <fatfs_itoa>
   1fa09:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:394

    // Copy in base filename
    memcpy(sfn_output, sfn_input, FAT_SFN_SIZE_FULL);
   1fa0c:	83 ec 04             	sub    esp,0x4
   1fa0f:	6a 0b                	push   0xb
   1fa11:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1fa14:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fa17:	e8 84 5f 00 00       	call   259a0 <memcpy>
   1fa1c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:397

    // Overwrite with tail
    tail_chars = (int)strlen(tail_str);
   1fa1f:	83 ec 0c             	sub    esp,0xc
   1fa22:	8d 45 e8             	lea    eax,[ebp-0x18]
   1fa25:	50                   	push   eax
   1fa26:	e8 d9 77 00 00       	call   27204 <strlen>
   1fa2b:	83 c4 10             	add    esp,0x10
   1fa2e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:398
    memcpy(sfn_output+(FAT_SFN_SIZE_PARTIAL-tail_chars), tail_str, tail_chars);
   1fa31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fa34:	ba 08 00 00 00       	mov    edx,0x8
   1fa39:	2b 55 f4             	sub    edx,DWORD PTR [ebp-0xc]
   1fa3c:	89 d1                	mov    ecx,edx
   1fa3e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1fa41:	01 ca                	add    edx,ecx
   1fa43:	83 ec 04             	sub    esp,0x4
   1fa46:	50                   	push   eax
   1fa47:	8d 45 e8             	lea    eax,[ebp-0x18]
   1fa4a:	50                   	push   eax
   1fa4b:	52                   	push   edx
   1fa4c:	e8 4f 5f 00 00       	call   259a0 <memcpy>
   1fa51:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:400

    return 1;
   1fa54:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:401 (discriminator 1)
}
   1fa59:	c9                   	leave  
   1fa5a:	c3                   	ret    

0001fa5b <fatfs_convert_from_fat_time>:
fatfs_convert_from_fat_time():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:409
//-----------------------------------------------------------------------------
// fatfs_convert_from_fat_time: Convert FAT time to h/m/s
//-----------------------------------------------------------------------------
#if FATFS_INC_TIME_DATE_SUPPORT
void fatfs_convert_from_fat_time(uint16 fat_time, int *hours, int *minutes, int *seconds)
{
   1fa5b:	55                   	push   ebp
   1fa5c:	89 e5                	mov    ebp,esp
   1fa5e:	83 ec 04             	sub    esp,0x4
   1fa61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fa64:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:410
    *hours = (fat_time >> FAT_TIME_HOURS_SHIFT) & FAT_TIME_HOURS_MASK;
   1fa68:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1fa6c:	66 c1 e8 0b          	shr    ax,0xb
   1fa70:	0f b7 c0             	movzx  eax,ax
   1fa73:	83 e0 1f             	and    eax,0x1f
   1fa76:	89 c2                	mov    edx,eax
   1fa78:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fa7b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:411
    *minutes = (fat_time >> FAT_TIME_MINUTES_SHIFT) & FAT_TIME_MINUTES_MASK;
   1fa7d:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1fa81:	66 c1 e8 05          	shr    ax,0x5
   1fa85:	0f b7 c0             	movzx  eax,ax
   1fa88:	83 e0 3f             	and    eax,0x3f
   1fa8b:	89 c2                	mov    edx,eax
   1fa8d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fa90:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:412
    *seconds = (fat_time >> FAT_TIME_SECONDS_SHIFT) & FAT_TIME_SECONDS_MASK;
   1fa92:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1fa96:	83 e0 1f             	and    eax,0x1f
   1fa99:	89 c2                	mov    edx,eax
   1fa9b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fa9e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:413
    *seconds = *seconds * FAT_TIME_SECONDS_SCALE;
   1faa0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1faa3:	8b 00                	mov    eax,DWORD PTR [eax]
   1faa5:	8d 14 00             	lea    edx,[eax+eax*1]
   1faa8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1faab:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:414
}
   1faad:	90                   	nop
   1faae:	c9                   	leave  
   1faaf:	c3                   	ret    

0001fab0 <fatfs_convert_from_fat_date>:
fatfs_convert_from_fat_date():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:419
//-----------------------------------------------------------------------------
// fatfs_convert_from_fat_date: Convert FAT date to d/m/y
//-----------------------------------------------------------------------------
void fatfs_convert_from_fat_date(uint16 fat_date, int *day, int *month, int *year)
{
   1fab0:	55                   	push   ebp
   1fab1:	89 e5                	mov    ebp,esp
   1fab3:	83 ec 04             	sub    esp,0x4
   1fab6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fab9:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:420
    *day = (fat_date >> FAT_DATE_DAY_SHIFT) & FAT_DATE_DAY_MASK;
   1fabd:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1fac1:	83 e0 1f             	and    eax,0x1f
   1fac4:	89 c2                	mov    edx,eax
   1fac6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fac9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:421
    *month = (fat_date >> FAT_DATE_MONTH_SHIFT) & FAT_DATE_MONTH_MASK;
   1facb:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1facf:	66 c1 e8 05          	shr    ax,0x5
   1fad3:	0f b7 c0             	movzx  eax,ax
   1fad6:	83 e0 0f             	and    eax,0xf
   1fad9:	89 c2                	mov    edx,eax
   1fadb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fade:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:422
    *year = (fat_date >> FAT_DATE_YEAR_SHIFT) & FAT_DATE_YEAR_MASK;
   1fae0:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1fae4:	66 c1 e8 09          	shr    ax,0x9
   1fae8:	0f b7 c0             	movzx  eax,ax
   1faeb:	83 e0 7f             	and    eax,0x7f
   1faee:	89 c2                	mov    edx,eax
   1faf0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1faf3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:423
    *year = *year + FAT_DATE_YEAR_OFFSET;
   1faf5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1faf8:	8b 00                	mov    eax,DWORD PTR [eax]
   1fafa:	8d 90 bc 07 00 00    	lea    edx,[eax+0x7bc]
   1fb00:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fb03:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:424
}
   1fb05:	90                   	nop
   1fb06:	c9                   	leave  
   1fb07:	c3                   	ret    

0001fb08 <fatfs_convert_to_fat_time>:
fatfs_convert_to_fat_time():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:429
//-----------------------------------------------------------------------------
// fatfs_convert_to_fat_time: Convert h/m/s to FAT time
//-----------------------------------------------------------------------------
uint16 fatfs_convert_to_fat_time(int hours, int minutes, int seconds)
{
   1fb08:	55                   	push   ebp
   1fb09:	89 e5                	mov    ebp,esp
   1fb0b:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:430
    uint16 fat_time = 0;
   1fb0e:	66 c7 45 fe 00 00    	mov    WORD PTR [ebp-0x2],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:433

    // Most FAT times are to a resolution of 2 seconds
    seconds /= FAT_TIME_SECONDS_SCALE;
   1fb14:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fb17:	89 c2                	mov    edx,eax
   1fb19:	c1 ea 1f             	shr    edx,0x1f
   1fb1c:	01 d0                	add    eax,edx
   1fb1e:	d1 f8                	sar    eax,1
   1fb20:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:435

    fat_time = (hours & FAT_TIME_HOURS_MASK) << FAT_TIME_HOURS_SHIFT;
   1fb23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fb26:	c1 e0 0b             	shl    eax,0xb
   1fb29:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:436
    fat_time|= (minutes & FAT_TIME_MINUTES_MASK) << FAT_TIME_MINUTES_SHIFT;
   1fb2d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fb30:	83 e0 3f             	and    eax,0x3f
   1fb33:	c1 e0 05             	shl    eax,0x5
   1fb36:	89 c2                	mov    edx,eax
   1fb38:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   1fb3c:	09 d0                	or     eax,edx
   1fb3e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:437
    fat_time|= (seconds & FAT_TIME_SECONDS_MASK) << FAT_TIME_SECONDS_SHIFT;
   1fb42:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fb45:	83 e0 1f             	and    eax,0x1f
   1fb48:	89 c2                	mov    edx,eax
   1fb4a:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   1fb4e:	09 d0                	or     eax,edx
   1fb50:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:439

    return fat_time;
   1fb54:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:440
}
   1fb58:	c9                   	leave  
   1fb59:	c3                   	ret    

0001fb5a <fatfs_convert_to_fat_date>:
fatfs_convert_to_fat_date():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:445
//-----------------------------------------------------------------------------
// fatfs_convert_to_fat_date: Convert d/m/y to FAT date
//-----------------------------------------------------------------------------
uint16 fatfs_convert_to_fat_date(int day, int month, int year)
{
   1fb5a:	55                   	push   ebp
   1fb5b:	89 e5                	mov    ebp,esp
   1fb5d:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:446
    uint16 fat_date = 0;
   1fb60:	66 c7 45 fe 00 00    	mov    WORD PTR [ebp-0x2],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:449

    // FAT dates are relative to 1980
    if (year >= FAT_DATE_YEAR_OFFSET)
   1fb66:	81 7d 10 bb 07 00 00 	cmp    DWORD PTR [ebp+0x10],0x7bb
   1fb6d:	7e 07                	jle    1fb76 <fatfs_convert_to_fat_date+0x1c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:450
        year -= FAT_DATE_YEAR_OFFSET;
   1fb6f:	81 6d 10 bc 07 00 00 	sub    DWORD PTR [ebp+0x10],0x7bc
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:452

    fat_date = (day & FAT_DATE_DAY_MASK) << FAT_DATE_DAY_SHIFT;
   1fb76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fb79:	83 e0 1f             	and    eax,0x1f
   1fb7c:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:453
    fat_date|= (month & FAT_DATE_MONTH_MASK) << FAT_DATE_MONTH_SHIFT;
   1fb80:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fb83:	83 e0 0f             	and    eax,0xf
   1fb86:	c1 e0 05             	shl    eax,0x5
   1fb89:	89 c2                	mov    edx,eax
   1fb8b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   1fb8f:	09 d0                	or     eax,edx
   1fb91:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:454
    fat_date|= (year & FAT_DATE_YEAR_MASK) << FAT_DATE_YEAR_SHIFT;
   1fb95:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fb98:	c1 e0 09             	shl    eax,0x9
   1fb9b:	89 c2                	mov    edx,eax
   1fb9d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   1fba1:	09 d0                	or     eax,edx
   1fba3:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:456

    return fat_date;
   1fba7:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_misc.c:457
}
   1fbab:	c9                   	leave  
   1fbac:	c3                   	ret    
   1fbad:	66 90                	xchg   ax,ax
   1fbaf:	90                   	nop

0001fbb0 <fatfs_total_path_levels>:
fatfs_total_path_levels():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:45
//        c:\folder\file.zip
//        /dev/etc/samba.conf
// Returns: -1 = Error, 0 or more = Ok
//-----------------------------------------------------------------------------
int fatfs_total_path_levels(char *path)
{
   1fbb0:	55                   	push   ebp
   1fbb1:	89 e5                	mov    ebp,esp
   1fbb3:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:46
    int levels = 0;
   1fbb6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:49
    char expectedchar;

    if (!path)
   1fbbd:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1fbc1:	75 07                	jne    1fbca <fatfs_total_path_levels+0x1a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:50
        return -1;
   1fbc3:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1fbc8:	eb 74                	jmp    1fc3e <fatfs_total_path_levels+0x8e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:55

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
   1fbca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fbcd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fbd0:	3c 2f                	cmp    al,0x2f
   1fbd2:	75 0a                	jne    1fbde <fatfs_total_path_levels+0x2e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:57
    {
        expectedchar = '/';
   1fbd4:	c6 45 fb 2f          	mov    BYTE PTR [ebp-0x5],0x2f
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:58
        path++;
   1fbd8:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   1fbdc:	eb 50                	jmp    1fc2e <fatfs_total_path_levels+0x7e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:60
    }
    else if (path[1] == ':' || path[2] == '\\')
   1fbde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fbe1:	83 c0 01             	add    eax,0x1
   1fbe4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fbe7:	3c 3a                	cmp    al,0x3a
   1fbe9:	74 0d                	je     1fbf8 <fatfs_total_path_levels+0x48>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:60 (discriminator 1)
   1fbeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fbee:	83 c0 02             	add    eax,0x2
   1fbf1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fbf4:	3c 5c                	cmp    al,0x5c
   1fbf6:	75 0a                	jne    1fc02 <fatfs_total_path_levels+0x52>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:62
    {
        expectedchar = '\\';
   1fbf8:	c6 45 fb 5c          	mov    BYTE PTR [ebp-0x5],0x5c
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:63
        path += 3;
   1fbfc:	83 45 08 03          	add    DWORD PTR [ebp+0x8],0x3
   1fc00:	eb 07                	jmp    1fc09 <fatfs_total_path_levels+0x59>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:66
    }
    else
        return -1;
   1fc02:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1fc07:	eb 35                	jmp    1fc3e <fatfs_total_path_levels+0x8e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:69

    // Count levels in path string
    while (*path)
   1fc09:	eb 23                	jmp    1fc2e <fatfs_total_path_levels+0x7e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:75
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
   1fc0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fc0e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fc11:	3a 45 fb             	cmp    al,BYTE PTR [ebp-0x5]
   1fc14:	75 06                	jne    1fc1c <fatfs_total_path_levels+0x6c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:75 (discriminator 1)
   1fc16:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   1fc1a:	eb 0e                	jmp    1fc2a <fatfs_total_path_levels+0x7a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:76
            path++;
   1fc1c:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:72

    // Count levels in path string
    while (*path)
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
   1fc20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fc23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fc26:	84 c0                	test   al,al
   1fc28:	75 e1                	jne    1fc0b <fatfs_total_path_levels+0x5b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:80
            if (*path == expectedchar) { path++; break; }
            path++;
        }

        // Increase number of subdirs founds
        levels++;
   1fc2a:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:69
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
   1fc2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fc31:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fc34:	84 c0                	test   al,al
   1fc36:	75 e8                	jne    1fc20 <fatfs_total_path_levels+0x70>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:84
        // Increase number of subdirs founds
        levels++;
    }

    // Subtract the file itself
    return levels-1;
   1fc38:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1fc3b:	83 e8 01             	sub    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:85
}
   1fc3e:	c9                   	leave  
   1fc3f:	c3                   	ret    

0001fc40 <fatfs_get_substring>:
fatfs_get_substring():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:93
// (or file) at the specified level.
// E.g. C:\folder\file.zip : Level 0 = C:\folder, Level 1 = file.zip
// Returns: -1 = Error, 0 = Ok
//-----------------------------------------------------------------------------
int fatfs_get_substring(char *path, int levelreq, char *output, int max_len)
{
   1fc40:	55                   	push   ebp
   1fc41:	89 e5                	mov    ebp,esp
   1fc43:	83 ec 28             	sub    esp,0x28
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:95
    int i;
    int pathlen=0;
   1fc46:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:96
    int levels=0;
   1fc4d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:97
    int copypnt=0;
   1fc54:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:100
    char expectedchar;

    if (!path || max_len <= 0)
   1fc5b:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1fc5f:	74 06                	je     1fc67 <fatfs_get_substring+0x27>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:100 (discriminator 1)
   1fc61:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1fc65:	7f 0a                	jg     1fc71 <fatfs_get_substring+0x31>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:101
        return -1;
   1fc67:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1fc6c:	e9 d2 00 00 00       	jmp    1fd43 <fatfs_get_substring+0x103>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:106

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
   1fc71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fc74:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fc77:	3c 2f                	cmp    al,0x2f
   1fc79:	75 0a                	jne    1fc85 <fatfs_get_substring+0x45>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:108
    {
        expectedchar = '/';
   1fc7b:	c6 45 eb 2f          	mov    BYTE PTR [ebp-0x15],0x2f
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:109
        path++;
   1fc7f:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   1fc83:	eb 2e                	jmp    1fcb3 <fatfs_get_substring+0x73>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:111
    }
    else if (path[1] == ':' || path[2] == '\\')
   1fc85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fc88:	83 c0 01             	add    eax,0x1
   1fc8b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fc8e:	3c 3a                	cmp    al,0x3a
   1fc90:	74 0d                	je     1fc9f <fatfs_get_substring+0x5f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:111 (discriminator 1)
   1fc92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fc95:	83 c0 02             	add    eax,0x2
   1fc98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fc9b:	3c 5c                	cmp    al,0x5c
   1fc9d:	75 0a                	jne    1fca9 <fatfs_get_substring+0x69>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:113
    {
        expectedchar = '\\';
   1fc9f:	c6 45 eb 5c          	mov    BYTE PTR [ebp-0x15],0x5c
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:114
        path += 3;
   1fca3:	83 45 08 03          	add    DWORD PTR [ebp+0x8],0x3
   1fca7:	eb 0a                	jmp    1fcb3 <fatfs_get_substring+0x73>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:117
    }
    else
        return -1;
   1fca9:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1fcae:	e9 90 00 00 00       	jmp    1fd43 <fatfs_get_substring+0x103>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:120

    // Get string length of path
    pathlen = (int)strlen (path);
   1fcb3:	83 ec 0c             	sub    esp,0xc
   1fcb6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fcb9:	e8 46 75 00 00       	call   27204 <strlen>
   1fcbe:	83 c4 10             	add    esp,0x10
   1fcc1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:123

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
   1fcc4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1fccb:	eb 4d                	jmp    1fd1a <fatfs_get_substring+0xda>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:126
    {
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;
   1fccd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fcd0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fcd3:	3a 45 eb             	cmp    al,BYTE PTR [ebp-0x15]
   1fcd6:	75 04                	jne    1fcdc <fatfs_get_substring+0x9c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:126 (discriminator 1)
   1fcd8:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:129

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1)))
   1fcdc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1fcdf:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   1fce2:	75 2e                	jne    1fd12 <fatfs_get_substring+0xd2>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:129 (discriminator 1)
   1fce4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fce7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fcea:	3a 45 eb             	cmp    al,BYTE PTR [ebp-0x15]
   1fced:	74 23                	je     1fd12 <fatfs_get_substring+0xd2>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:129 (discriminator 2)
   1fcef:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fcf2:	83 e8 01             	sub    eax,0x1
   1fcf5:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   1fcf8:	7e 18                	jle    1fd12 <fatfs_get_substring+0xd2>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:130
            output[copypnt++] = *path;
   1fcfa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1fcfd:	8d 50 01             	lea    edx,[eax+0x1]
   1fd00:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   1fd03:	89 c2                	mov    edx,eax
   1fd05:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fd08:	01 c2                	add    edx,eax
   1fd0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fd0d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fd10:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:133 (discriminator 2)

        // Increment through path string
        path++;
   1fd12:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:123 (discriminator 2)

    // Get string length of path
    pathlen = (int)strlen (path);

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
   1fd16:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:123 (discriminator 1)
   1fd1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fd1d:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   1fd20:	7c ab                	jl     1fccd <fatfs_get_substring+0x8d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:137
        // Increment through path string
        path++;
    }

    // Null Terminate
    output[copypnt] = '\0';
   1fd22:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1fd25:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fd28:	01 d0                	add    eax,edx
   1fd2a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:140

    // If a string was copied return 0 else return 1
    if (output[0] != '\0')
   1fd2d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fd30:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fd33:	84 c0                	test   al,al
   1fd35:	74 07                	je     1fd3e <fatfs_get_substring+0xfe>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:141
        return 0;    // OK
   1fd37:	b8 00 00 00 00       	mov    eax,0x0
   1fd3c:	eb 05                	jmp    1fd43 <fatfs_get_substring+0x103>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:143
    else
        return -1;    // Error
   1fd3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:144
}
   1fd43:	c9                   	leave  
   1fd44:	c3                   	ret    

0001fd45 <fatfs_split_path>:
fatfs_split_path():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:152
// Returned is the path string and file Name string
// E.g. C:\folder\file.zip -> path = C:\folder  filename = file.zip
// E.g. C:\file.zip -> path = [blank]  filename = file.zip
//-----------------------------------------------------------------------------
int fatfs_split_path(char *full_path, char *path, int max_path, char *filename, int max_filename)
{
   1fd45:	55                   	push   ebp
   1fd46:	89 e5                	mov    ebp,esp
   1fd48:	53                   	push   ebx
   1fd49:	83 ec 14             	sub    esp,0x14
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:156
    int strindex;

    // Count the levels to the filepath
    int levels = fatfs_total_path_levels(full_path);
   1fd4c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fd4f:	e8 5c fe ff ff       	call   1fbb0 <fatfs_total_path_levels>
   1fd54:	83 c4 04             	add    esp,0x4
   1fd57:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:157
    if (levels == -1)
   1fd5a:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   1fd5e:	75 0a                	jne    1fd6a <fatfs_split_path+0x25>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:158
        return -1;
   1fd60:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1fd65:	e9 88 00 00 00       	jmp    1fdf2 <fatfs_split_path+0xad>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:161

    // Get filename part of string
    if (fatfs_get_substring(full_path, levels, filename, max_filename) != 0)
   1fd6a:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   1fd6d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1fd70:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1fd73:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fd76:	e8 c5 fe ff ff       	call   1fc40 <fatfs_get_substring>
   1fd7b:	83 c4 10             	add    esp,0x10
   1fd7e:	85 c0                	test   eax,eax
   1fd80:	74 07                	je     1fd89 <fatfs_split_path+0x44>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:162
        return -1;
   1fd82:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1fd87:	eb 69                	jmp    1fdf2 <fatfs_split_path+0xad>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:165

    // If root file
    if (levels == 0)
   1fd89:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1fd8d:	75 08                	jne    1fd97 <fatfs_split_path+0x52>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:166
        path[0] = '\0';
   1fd8f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fd92:	c6 00 00             	mov    BYTE PTR [eax],0x0
   1fd95:	eb 56                	jmp    1fded <fatfs_split_path+0xa8>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:169
    else
    {
        strindex = (int)strlen(full_path) - (int)strlen(filename);
   1fd97:	83 ec 0c             	sub    esp,0xc
   1fd9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fd9d:	e8 62 74 00 00       	call   27204 <strlen>
   1fda2:	83 c4 10             	add    esp,0x10
   1fda5:	89 c3                	mov    ebx,eax
   1fda7:	83 ec 0c             	sub    esp,0xc
   1fdaa:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1fdad:	e8 52 74 00 00       	call   27204 <strlen>
   1fdb2:	83 c4 10             	add    esp,0x10
   1fdb5:	29 c3                	sub    ebx,eax
   1fdb7:	89 d8                	mov    eax,ebx
   1fdb9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:170
        if (strindex > max_path)
   1fdbc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fdbf:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1fdc2:	7e 06                	jle    1fdca <fatfs_split_path+0x85>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:171
            strindex = max_path;
   1fdc4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fdc7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:173

        memcpy(path, full_path, strindex);
   1fdca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fdcd:	83 ec 04             	sub    esp,0x4
   1fdd0:	50                   	push   eax
   1fdd1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fdd4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1fdd7:	e8 c4 5b 00 00       	call   259a0 <memcpy>
   1fddc:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:174
        path[strindex-1] = '\0';
   1fddf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fde2:	8d 50 ff             	lea    edx,[eax-0x1]
   1fde5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fde8:	01 d0                	add    eax,edx
   1fdea:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:177
    }

    return 0;
   1fded:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:178
}
   1fdf2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1fdf5:	c9                   	leave  
   1fdf6:	c3                   	ret    

0001fdf7 <FileString_StrCmpNoCase>:
FileString_StrCmpNoCase():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:183
//-----------------------------------------------------------------------------
// FileString_StrCmpNoCase: Compare two strings case with case sensitivity
//-----------------------------------------------------------------------------
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
   1fdf7:	55                   	push   ebp
   1fdf8:	89 e5                	mov    ebp,esp
   1fdfa:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:187
    int diff;
    char a,b;

    while (n--)
   1fdfd:	eb 74                	jmp    1fe73 <FileString_StrCmpNoCase+0x7c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:189
    {
        a = *s1;
   1fdff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fe02:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fe05:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:190
        b = *s2;
   1fe08:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fe0b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fe0e:	88 45 fe             	mov    BYTE PTR [ebp-0x2],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:193

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
   1fe11:	80 7d ff 40          	cmp    BYTE PTR [ebp-0x1],0x40
   1fe15:	7e 10                	jle    1fe27 <FileString_StrCmpNoCase+0x30>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:193 (discriminator 1)
   1fe17:	80 7d ff 5a          	cmp    BYTE PTR [ebp-0x1],0x5a
   1fe1b:	7f 0a                	jg     1fe27 <FileString_StrCmpNoCase+0x30>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:194
            a+= 32;
   1fe1d:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   1fe21:	83 c0 20             	add    eax,0x20
   1fe24:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:195
        if ((b>='A') && (b<='Z'))
   1fe27:	80 7d fe 40          	cmp    BYTE PTR [ebp-0x2],0x40
   1fe2b:	7e 10                	jle    1fe3d <FileString_StrCmpNoCase+0x46>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:195 (discriminator 1)
   1fe2d:	80 7d fe 5a          	cmp    BYTE PTR [ebp-0x2],0x5a
   1fe31:	7f 0a                	jg     1fe3d <FileString_StrCmpNoCase+0x46>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:196
            b+= 32;
   1fe33:	0f b6 45 fe          	movzx  eax,BYTE PTR [ebp-0x2]
   1fe37:	83 c0 20             	add    eax,0x20
   1fe3a:	88 45 fe             	mov    BYTE PTR [ebp-0x2],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:198

        diff = a - b;
   1fe3d:	0f be 55 ff          	movsx  edx,BYTE PTR [ebp-0x1]
   1fe41:	0f be 45 fe          	movsx  eax,BYTE PTR [ebp-0x2]
   1fe45:	29 c2                	sub    edx,eax
   1fe47:	89 d0                	mov    eax,edx
   1fe49:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:201

        // If different
        if (diff)
   1fe4c:	83 7d f8 00          	cmp    DWORD PTR [ebp-0x8],0x0
   1fe50:	74 05                	je     1fe57 <FileString_StrCmpNoCase+0x60>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:202
            return diff;
   1fe52:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1fe55:	eb 32                	jmp    1fe89 <FileString_StrCmpNoCase+0x92>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:205

        // If run out of strings
        if ( (*s1 == 0) || (*s2 == 0) )
   1fe57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fe5a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fe5d:	84 c0                	test   al,al
   1fe5f:	74 23                	je     1fe84 <FileString_StrCmpNoCase+0x8d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:205 (discriminator 1)
   1fe61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fe64:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fe67:	84 c0                	test   al,al
   1fe69:	74 19                	je     1fe84 <FileString_StrCmpNoCase+0x8d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:208
            break;

        s1++;
   1fe6b:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:209
        s2++;
   1fe6f:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:187
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
   1fe73:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fe76:	8d 50 ff             	lea    edx,[eax-0x1]
   1fe79:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   1fe7c:	85 c0                	test   eax,eax
   1fe7e:	0f 85 7b ff ff ff    	jne    1fdff <FileString_StrCmpNoCase+0x8>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:211
            break;

        s1++;
        s2++;
    }
    return 0;
   1fe84:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:212
}
   1fe89:	c9                   	leave  
   1fe8a:	c3                   	ret    

0001fe8b <FileString_GetExtension>:
FileString_GetExtension():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:218
//-----------------------------------------------------------------------------
// FileString_GetExtension: Get index to extension within filename
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_GetExtension(char *str)
{
   1fe8b:	55                   	push   ebp
   1fe8c:	89 e5                	mov    ebp,esp
   1fe8e:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:219
    int dotPos = -1;
   1fe91:	c7 45 fc ff ff ff ff 	mov    DWORD PTR [ebp-0x4],0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:220
    char *strSrc = str;
   1fe98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fe9b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:223

    // Find last '.' in string (if at all)
    while (*strSrc)
   1fe9e:	eb 1b                	jmp    1febb <FileString_GetExtension+0x30>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:225
    {
        if (*strSrc=='.')
   1fea0:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1fea3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fea6:	3c 2e                	cmp    al,0x2e
   1fea8:	75 0d                	jne    1feb7 <FileString_GetExtension+0x2c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:226
            dotPos = (int)(strSrc-str);
   1feaa:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   1fead:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1feb0:	29 c2                	sub    edx,eax
   1feb2:	89 d0                	mov    eax,edx
   1feb4:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:228

        strSrc++;
   1feb7:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:223
{
    int dotPos = -1;
    char *strSrc = str;

    // Find last '.' in string (if at all)
    while (*strSrc)
   1febb:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1febe:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fec1:	84 c0                	test   al,al
   1fec3:	75 db                	jne    1fea0 <FileString_GetExtension+0x15>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:231
            dotPos = (int)(strSrc-str);

        strSrc++;
    }

    return dotPos;
   1fec5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:232
}
   1fec8:	c9                   	leave  
   1fec9:	c3                   	ret    

0001feca <FileString_TrimLength>:
FileString_TrimLength():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:238
//-----------------------------------------------------------------------------
// FileString_TrimLength: Get length of string excluding trailing spaces
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
   1feca:	55                   	push   ebp
   1fecb:	89 e5                	mov    ebp,esp
   1fecd:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:239
    int length = strLen;
   1fed0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fed3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:240
    char *strSrc = str+strLen-1;
   1fed6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fed9:	8d 50 ff             	lea    edx,[eax-0x1]
   1fedc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fedf:	01 d0                	add    eax,edx
   1fee1:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:243

    // Find last non white space
    while (strLen != 0)
   1fee4:	eb 1f                	jmp    1ff05 <FileString_TrimLength+0x3b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:245
    {
        if (*strSrc == ' ')
   1fee6:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1fee9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1feec:	3c 20                	cmp    al,0x20
   1feee:	75 1d                	jne    1ff0d <FileString_TrimLength+0x43>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:246
            length = (int)(strSrc - str);
   1fef0:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   1fef3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fef6:	29 c2                	sub    edx,eax
   1fef8:	89 d0                	mov    eax,edx
   1fefa:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:250
        else
            break;

        strSrc--;
   1fefd:	83 6d f8 01          	sub    DWORD PTR [ebp-0x8],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:251
        strLen--;
   1ff01:	83 6d 0c 01          	sub    DWORD PTR [ebp+0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:243
{
    int length = strLen;
    char *strSrc = str+strLen-1;

    // Find last non white space
    while (strLen != 0)
   1ff05:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1ff09:	75 db                	jne    1fee6 <FileString_TrimLength+0x1c>
   1ff0b:	eb 01                	jmp    1ff0e <FileString_TrimLength+0x44>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:248
    {
        if (*strSrc == ' ')
            length = (int)(strSrc - str);
        else
            break;
   1ff0d:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:254

        strSrc--;
        strLen--;
    }

    return length;
   1ff0e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:255
}
   1ff11:	c9                   	leave  
   1ff12:	c3                   	ret    

0001ff13 <fatfs_compare_names>:
fatfs_compare_names():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:261
//-----------------------------------------------------------------------------
// fatfs_compare_names: Compare two filenames (without copying or changing origonals)
// Returns 1 if match, 0 if not
//-----------------------------------------------------------------------------
int fatfs_compare_names(char* strA, char* strB)
{
   1ff13:	55                   	push   ebp
   1ff14:	89 e5                	mov    ebp,esp
   1ff16:	53                   	push   ebx
   1ff17:	83 ec 24             	sub    esp,0x24
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:262
    char *ext1 = NULL;
   1ff1a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:263
    char *ext2 = NULL;
   1ff21:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:268
    int ext1Pos, ext2Pos;
    int file1Len, file2Len;

    // Get both files extension
    ext1Pos = FileString_GetExtension(strA);
   1ff28:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ff2b:	e8 5b ff ff ff       	call   1fe8b <FileString_GetExtension>
   1ff30:	83 c4 04             	add    esp,0x4
   1ff33:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:269
    ext2Pos = FileString_GetExtension(strB);
   1ff36:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1ff39:	e8 4d ff ff ff       	call   1fe8b <FileString_GetExtension>
   1ff3e:	83 c4 04             	add    esp,0x4
   1ff41:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:274

    // NOTE: Extension position can be different for matching
    // filename if trailing space are present before it!
    // Check that if one has an extension, so does the other
    if ((ext1Pos==-1) && (ext2Pos!=-1))
   1ff44:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   1ff48:	75 10                	jne    1ff5a <fatfs_compare_names+0x47>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:274 (discriminator 1)
   1ff4a:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
   1ff4e:	74 0a                	je     1ff5a <fatfs_compare_names+0x47>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:275
        return 0;
   1ff50:	b8 00 00 00 00       	mov    eax,0x0
   1ff55:	e9 21 01 00 00       	jmp    2007b <fatfs_compare_names+0x168>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:276
    if ((ext2Pos==-1) && (ext1Pos!=-1))
   1ff5a:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
   1ff5e:	75 10                	jne    1ff70 <fatfs_compare_names+0x5d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:276 (discriminator 1)
   1ff60:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   1ff64:	74 0a                	je     1ff70 <fatfs_compare_names+0x5d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:277
        return 0;
   1ff66:	b8 00 00 00 00       	mov    eax,0x0
   1ff6b:	e9 0b 01 00 00       	jmp    2007b <fatfs_compare_names+0x168>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:280

    // If they both have extensions, compare them
    if (ext1Pos!=-1)
   1ff70:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   1ff74:	0f 84 84 00 00 00    	je     1fffe <fatfs_compare_names+0xeb>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:283
    {
        // Set pointer to start of extension
        ext1 = strA+ext1Pos+1;
   1ff7a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1ff7d:	8d 50 01             	lea    edx,[eax+0x1]
   1ff80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ff83:	01 d0                	add    eax,edx
   1ff85:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:284
        ext2 = strB+ext2Pos+1;
   1ff88:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1ff8b:	8d 50 01             	lea    edx,[eax+0x1]
   1ff8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ff91:	01 d0                	add    eax,edx
   1ff93:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:287

        // Verify that the file extension lengths match!
        if (strlen(ext1) != strlen(ext2))
   1ff96:	83 ec 0c             	sub    esp,0xc
   1ff99:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1ff9c:	e8 63 72 00 00       	call   27204 <strlen>
   1ffa1:	83 c4 10             	add    esp,0x10
   1ffa4:	89 c3                	mov    ebx,eax
   1ffa6:	83 ec 0c             	sub    esp,0xc
   1ffa9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1ffac:	e8 53 72 00 00       	call   27204 <strlen>
   1ffb1:	83 c4 10             	add    esp,0x10
   1ffb4:	39 c3                	cmp    ebx,eax
   1ffb6:	74 0a                	je     1ffc2 <fatfs_compare_names+0xaf>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:288
            return 0;
   1ffb8:	b8 00 00 00 00       	mov    eax,0x0
   1ffbd:	e9 b9 00 00 00       	jmp    2007b <fatfs_compare_names+0x168>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:291

        // If they dont match
        if (FileString_StrCmpNoCase(ext1, ext2, (int)strlen(ext1))!=0)
   1ffc2:	83 ec 0c             	sub    esp,0xc
   1ffc5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1ffc8:	e8 37 72 00 00       	call   27204 <strlen>
   1ffcd:	83 c4 10             	add    esp,0x10
   1ffd0:	83 ec 04             	sub    esp,0x4
   1ffd3:	50                   	push   eax
   1ffd4:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1ffd7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1ffda:	e8 18 fe ff ff       	call   1fdf7 <FileString_StrCmpNoCase>
   1ffdf:	83 c4 10             	add    esp,0x10
   1ffe2:	85 c0                	test   eax,eax
   1ffe4:	74 0a                	je     1fff0 <fatfs_compare_names+0xdd>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:292
            return 0;
   1ffe6:	b8 00 00 00 00       	mov    eax,0x0
   1ffeb:	e9 8b 00 00 00       	jmp    2007b <fatfs_compare_names+0x168>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:295

        // Filelength is upto extensions
        file1Len = ext1Pos;
   1fff0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1fff3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:296
        file2Len = ext2Pos;
   1fff6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1fff9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   1fffc:	eb 22                	jmp    20020 <fatfs_compare_names+0x10d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:302
    }
    // No extensions
    else
    {
        // Filelength is actual filelength
        file1Len = (int)strlen(strA);
   1fffe:	83 ec 0c             	sub    esp,0xc
   20001:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20004:	e8 fb 71 00 00       	call   27204 <strlen>
   20009:	83 c4 10             	add    esp,0x10
   2000c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:303
        file2Len = (int)strlen(strB);
   2000f:	83 ec 0c             	sub    esp,0xc
   20012:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   20015:	e8 ea 71 00 00       	call   27204 <strlen>
   2001a:	83 c4 10             	add    esp,0x10
   2001d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:307
    }

    // Find length without trailing spaces (before ext)
    file1Len = FileString_TrimLength(strA, file1Len);
   20020:	83 ec 08             	sub    esp,0x8
   20023:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   20026:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20029:	e8 9c fe ff ff       	call   1feca <FileString_TrimLength>
   2002e:	83 c4 10             	add    esp,0x10
   20031:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:308
    file2Len = FileString_TrimLength(strB, file2Len);
   20034:	83 ec 08             	sub    esp,0x8
   20037:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   2003a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2003d:	e8 88 fe ff ff       	call   1feca <FileString_TrimLength>
   20042:	83 c4 10             	add    esp,0x10
   20045:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:311

    // Check the file lengths match
    if (file1Len!=file2Len)
   20048:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2004b:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   2004e:	74 07                	je     20057 <fatfs_compare_names+0x144>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:312
        return 0;
   20050:	b8 00 00 00 00       	mov    eax,0x0
   20055:	eb 24                	jmp    2007b <fatfs_compare_names+0x168>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:315

    // Compare main part of filenames
    if (FileString_StrCmpNoCase(strA, strB, file1Len)!=0)
   20057:	83 ec 04             	sub    esp,0x4
   2005a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2005d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   20060:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20063:	e8 8f fd ff ff       	call   1fdf7 <FileString_StrCmpNoCase>
   20068:	83 c4 10             	add    esp,0x10
   2006b:	85 c0                	test   eax,eax
   2006d:	74 07                	je     20076 <fatfs_compare_names+0x163>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:316
        return 0;
   2006f:	b8 00 00 00 00       	mov    eax,0x0
   20074:	eb 05                	jmp    2007b <fatfs_compare_names+0x168>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:318
    else
        return 1;
   20076:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:319
}
   2007b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   2007e:	c9                   	leave  
   2007f:	c3                   	ret    

00020080 <fatfs_string_ends_with_slash>:
fatfs_string_ends_with_slash():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:324
//-----------------------------------------------------------------------------
// fatfs_string_ends_with_slash: Does the string end with a slash (\ or /)
//-----------------------------------------------------------------------------
int fatfs_string_ends_with_slash(char *path)
{
   20080:	55                   	push   ebp
   20081:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:325
    if (path)
   20083:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   20087:	74 38                	je     200c1 <fatfs_string_ends_with_slash+0x41>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:327
    {
        while (*path)
   20089:	eb 2c                	jmp    200b7 <fatfs_string_ends_with_slash+0x37>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:330
        {
            // Last character?
            if (!(*(path+1)))
   2008b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2008e:	83 c0 01             	add    eax,0x1
   20091:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20094:	84 c0                	test   al,al
   20096:	75 1b                	jne    200b3 <fatfs_string_ends_with_slash+0x33>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:332
            {
                if (*path == '\\' || *path == '/')
   20098:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2009b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2009e:	3c 5c                	cmp    al,0x5c
   200a0:	74 0a                	je     200ac <fatfs_string_ends_with_slash+0x2c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:332 (discriminator 1)
   200a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   200a5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   200a8:	3c 2f                	cmp    al,0x2f
   200aa:	75 07                	jne    200b3 <fatfs_string_ends_with_slash+0x33>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:333
                    return 1;
   200ac:	b8 01 00 00 00       	mov    eax,0x1
   200b1:	eb 13                	jmp    200c6 <fatfs_string_ends_with_slash+0x46>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:336
            }

            path++;
   200b3:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:327
//-----------------------------------------------------------------------------
int fatfs_string_ends_with_slash(char *path)
{
    if (path)
    {
        while (*path)
   200b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   200ba:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   200bd:	84 c0                	test   al,al
   200bf:	75 ca                	jne    2008b <fatfs_string_ends_with_slash+0xb>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:340

            path++;
        }
    }

    return 0;
   200c1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:341
}
   200c6:	5d                   	pop    ebp
   200c7:	c3                   	ret    

000200c8 <fatfs_get_sfn_display_name>:
fatfs_get_sfn_display_name():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:346
//-----------------------------------------------------------------------------
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
   200c8:	55                   	push   ebp
   200c9:	89 e5                	mov    ebp,esp
   200cb:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:347
    int len = 0;
   200ce:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:348
    while (*in && len <= 11)
   200d5:	eb 40                	jmp    20117 <fatfs_get_sfn_display_name+0x4f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:350
    {
        char a = *in++;
   200d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   200da:	8d 50 01             	lea    edx,[eax+0x1]
   200dd:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
   200e0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   200e3:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:352

        if (a == ' ')
   200e6:	80 7d fb 20          	cmp    BYTE PTR [ebp-0x5],0x20
   200ea:	75 02                	jne    200ee <fatfs_get_sfn_display_name+0x26>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:353
            continue;
   200ec:	eb 29                	jmp    20117 <fatfs_get_sfn_display_name+0x4f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:355
        // Make lower case if uppercase
        else if ((a>='A') && (a<='Z'))
   200ee:	80 7d fb 40          	cmp    BYTE PTR [ebp-0x5],0x40
   200f2:	7e 10                	jle    20104 <fatfs_get_sfn_display_name+0x3c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:355 (discriminator 1)
   200f4:	80 7d fb 5a          	cmp    BYTE PTR [ebp-0x5],0x5a
   200f8:	7f 0a                	jg     20104 <fatfs_get_sfn_display_name+0x3c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:356
            a+= 32;
   200fa:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   200fe:	83 c0 20             	add    eax,0x20
   20101:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:358

        *out++ = a;
   20104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20107:	8d 50 01             	lea    edx,[eax+0x1]
   2010a:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   2010d:	0f b6 55 fb          	movzx  edx,BYTE PTR [ebp-0x5]
   20111:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:359
        len++;
   20113:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:348
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
    int len = 0;
    while (*in && len <= 11)
   20117:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2011a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2011d:	84 c0                	test   al,al
   2011f:	74 06                	je     20127 <fatfs_get_sfn_display_name+0x5f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:348 (discriminator 1)
   20121:	83 7d fc 0b          	cmp    DWORD PTR [ebp-0x4],0xb
   20125:	7e b0                	jle    200d7 <fatfs_get_sfn_display_name+0xf>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:362

        *out++ = a;
        len++;
    }

    *out = '\0';
   20127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2012a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:363
    return 1;
   2012d:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:364
}
   20132:	c9                   	leave  
   20133:	c3                   	ret    

00020134 <fatfs_get_extension>:
fatfs_get_extension():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:371
// fatfs_get_extension: Get extension of filename passed in 'filename'.
// Returned extension is always lower case.
// Returns: 1 if ok, 0 if not.
//-----------------------------------------------------------------------------
int fatfs_get_extension(char* filename, char* out, int maxlen)
{
   20134:	55                   	push   ebp
   20135:	89 e5                	mov    ebp,esp
   20137:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:372
    int len = 0;
   2013a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:375

    // Get files extension offset
    int ext_pos = FileString_GetExtension(filename);
   20141:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20144:	e8 42 fd ff ff       	call   1fe8b <FileString_GetExtension>
   20149:	83 c4 04             	add    esp,0x4
   2014c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:377

    if (ext_pos > 0 && out && maxlen)
   2014f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20153:	7e 71                	jle    201c6 <fatfs_get_extension+0x92>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:377 (discriminator 1)
   20155:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   20159:	74 6b                	je     201c6 <fatfs_get_extension+0x92>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:377 (discriminator 2)
   2015b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   2015f:	74 65                	je     201c6 <fatfs_get_extension+0x92>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:379
    {
        filename += ext_pos + 1;
   20161:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20164:	83 c0 01             	add    eax,0x1
   20167:	01 45 08             	add    DWORD PTR [ebp+0x8],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:381

        while (*filename && len < (maxlen-1))
   2016a:	eb 38                	jmp    201a4 <fatfs_get_extension+0x70>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:383
        {
            char a = *filename++;
   2016c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2016f:	8d 50 01             	lea    edx,[eax+0x1]
   20172:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   20175:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20178:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:386

            // Make lowercase if uppercase
            if ((a>='A') && (a<='Z'))
   2017b:	80 7d fb 40          	cmp    BYTE PTR [ebp-0x5],0x40
   2017f:	7e 10                	jle    20191 <fatfs_get_extension+0x5d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:386 (discriminator 1)
   20181:	80 7d fb 5a          	cmp    BYTE PTR [ebp-0x5],0x5a
   20185:	7f 0a                	jg     20191 <fatfs_get_extension+0x5d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:387
                a+= 32;
   20187:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   2018b:	83 c0 20             	add    eax,0x20
   2018e:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:389

            *out++ = a;
   20191:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20194:	8d 50 01             	lea    edx,[eax+0x1]
   20197:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
   2019a:	0f b6 55 fb          	movzx  edx,BYTE PTR [ebp-0x5]
   2019e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:390
            len++;
   201a0:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:381

    if (ext_pos > 0 && out && maxlen)
    {
        filename += ext_pos + 1;

        while (*filename && len < (maxlen-1))
   201a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   201a7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   201aa:	84 c0                	test   al,al
   201ac:	74 0b                	je     201b9 <fatfs_get_extension+0x85>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:381 (discriminator 1)
   201ae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   201b1:	83 e8 01             	sub    eax,0x1
   201b4:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   201b7:	7f b3                	jg     2016c <fatfs_get_extension+0x38>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:393

            *out++ = a;
            len++;
        }

        *out = '\0';
   201b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   201bc:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:394
        return 1;
   201bf:	b8 01 00 00 00       	mov    eax,0x1
   201c4:	eb 05                	jmp    201cb <fatfs_get_extension+0x97>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:397
    }

    return 0;
   201c6:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:398
}
   201cb:	c9                   	leave  
   201cc:	c3                   	ret    

000201cd <fatfs_create_path_string>:
fatfs_create_path_string():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:404
//-----------------------------------------------------------------------------
// fatfs_create_path_string: Append path & filename to create file path string.
// Returns: 1 if ok, 0 if not.
//-----------------------------------------------------------------------------
int fatfs_create_path_string(char* path, char *filename, char* out, int maxlen)
{
   201cd:	55                   	push   ebp
   201ce:	89 e5                	mov    ebp,esp
   201d0:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:405
    int len = 0;
   201d3:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:406
    char last = 0;
   201da:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:407
    char seperator = '/';
   201de:	c6 45 fa 2f          	mov    BYTE PTR [ebp-0x6],0x2f
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:409

    if (path && filename && out && maxlen > 0)
   201e2:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   201e6:	0f 84 bb 00 00 00    	je     202a7 <fatfs_create_path_string+0xda>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:409 (discriminator 1)
   201ec:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   201f0:	0f 84 b1 00 00 00    	je     202a7 <fatfs_create_path_string+0xda>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:409 (discriminator 2)
   201f6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   201fa:	0f 84 a7 00 00 00    	je     202a7 <fatfs_create_path_string+0xda>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:409 (discriminator 3)
   20200:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   20204:	0f 8e 9d 00 00 00    	jle    202a7 <fatfs_create_path_string+0xda>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:411
    {
        while (*path && len < (maxlen-2))
   2020a:	eb 2c                	jmp    20238 <fatfs_create_path_string+0x6b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:413
        {
            last = *path++;
   2020c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2020f:	8d 50 01             	lea    edx,[eax+0x1]
   20212:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   20215:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20218:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:414
            if (last == '\\')
   2021b:	80 7d fb 5c          	cmp    BYTE PTR [ebp-0x5],0x5c
   2021f:	75 04                	jne    20225 <fatfs_create_path_string+0x58>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:415
                seperator = '\\';
   20221:	c6 45 fa 5c          	mov    BYTE PTR [ebp-0x6],0x5c
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:416
            *out++ = last;
   20225:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20228:	8d 50 01             	lea    edx,[eax+0x1]
   2022b:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   2022e:	0f b6 55 fb          	movzx  edx,BYTE PTR [ebp-0x5]
   20232:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:417
            len++;
   20234:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:411
    char last = 0;
    char seperator = '/';

    if (path && filename && out && maxlen > 0)
    {
        while (*path && len < (maxlen-2))
   20238:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2023b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2023e:	84 c0                	test   al,al
   20240:	74 0b                	je     2024d <fatfs_create_path_string+0x80>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:411 (discriminator 1)
   20242:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   20245:	83 e8 02             	sub    eax,0x2
   20248:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   2024b:	7f bf                	jg     2020c <fatfs_create_path_string+0x3f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:421
            *out++ = last;
            len++;
        }

        // Add a seperator if trailing one not found
        if (last != '\\' && last != '/')
   2024d:	80 7d fb 5c          	cmp    BYTE PTR [ebp-0x5],0x5c
   20251:	74 32                	je     20285 <fatfs_create_path_string+0xb8>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:421 (discriminator 1)
   20253:	80 7d fb 2f          	cmp    BYTE PTR [ebp-0x5],0x2f
   20257:	74 2c                	je     20285 <fatfs_create_path_string+0xb8>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:422
            *out++ = seperator;
   20259:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2025c:	8d 50 01             	lea    edx,[eax+0x1]
   2025f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   20262:	0f b6 55 fa          	movzx  edx,BYTE PTR [ebp-0x6]
   20266:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:424

        while (*filename && len < (maxlen-1))
   20268:	eb 1b                	jmp    20285 <fatfs_create_path_string+0xb8>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:426
        {
            *out++ = *filename++;
   2026a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2026d:	8d 50 01             	lea    edx,[eax+0x1]
   20270:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   20273:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20276:	8d 4a 01             	lea    ecx,[edx+0x1]
   20279:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   2027c:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   2027f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:427
            len++;
   20281:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:424

        // Add a seperator if trailing one not found
        if (last != '\\' && last != '/')
            *out++ = seperator;

        while (*filename && len < (maxlen-1))
   20285:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20288:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2028b:	84 c0                	test   al,al
   2028d:	74 0b                	je     2029a <fatfs_create_path_string+0xcd>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:424 (discriminator 1)
   2028f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   20292:	83 e8 01             	sub    eax,0x1
   20295:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   20298:	7f d0                	jg     2026a <fatfs_create_path_string+0x9d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:430
        {
            *out++ = *filename++;
            len++;
        }

        *out = '\0';
   2029a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2029d:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:432

        return 1;
   202a0:	b8 01 00 00 00       	mov    eax,0x1
   202a5:	eb 05                	jmp    202ac <fatfs_create_path_string+0xdf>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:435
    }

    return 0;
   202a7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_string.c:436
}
   202ac:	c9                   	leave  
   202ad:	c3                   	ret    
   202ae:	66 90                	xchg   ax,ax

000202b0 <fatfs_fat_init>:
fatfs_fat_init():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:61

//-----------------------------------------------------------------------------
// fatfs_fat_init:
//-----------------------------------------------------------------------------
void fatfs_fat_init(struct fatfs *fs)
{
   202b0:	55                   	push   ebp
   202b1:	89 e5                	mov    ebp,esp
   202b3:	53                   	push   ebx
   202b4:	83 ec 14             	sub    esp,0x14
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:65
    int i;

    // FAT buffer chain head
    fs->fat_buffer_head = NULL;
   202b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   202ba:	c7 80 54 02 00 00 00 	mov    DWORD PTR [eax+0x254],0x0
   202c1:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:67

    for (i=0;i<FAT_BUFFERS;i++)
   202c4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   202cb:	e9 cf 00 00 00       	jmp    2039f <fatfs_fat_init+0xef>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:70 (discriminator 3)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   202d0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   202d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   202d6:	c1 e0 04             	shl    eax,0x4
   202d9:	89 c1                	mov    ecx,eax
   202db:	c1 e1 05             	shl    ecx,0x5
   202de:	01 c8                	add    eax,ecx
   202e0:	01 d0                	add    eax,edx
   202e2:	05 58 04 00 00       	add    eax,0x458
   202e7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:71 (discriminator 3)
        fs->fat_buffers[i].dirty = 0;
   202ed:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   202f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   202f3:	c1 e0 04             	shl    eax,0x4
   202f6:	89 c1                	mov    ecx,eax
   202f8:	c1 e1 05             	shl    ecx,0x5
   202fb:	01 c8                	add    eax,ecx
   202fd:	01 d0                	add    eax,edx
   202ff:	05 5c 04 00 00       	add    eax,0x45c
   20304:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:72 (discriminator 3)
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   2030a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2030d:	c1 e0 04             	shl    eax,0x4
   20310:	89 c2                	mov    edx,eax
   20312:	c1 e2 05             	shl    edx,0x5
   20315:	01 d0                	add    eax,edx
   20317:	8d 90 50 02 00 00    	lea    edx,[eax+0x250]
   2031d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20320:	01 d0                	add    eax,edx
   20322:	83 c0 08             	add    eax,0x8
   20325:	83 ec 04             	sub    esp,0x4
   20328:	68 00 02 00 00       	push   0x200
   2032d:	6a 00                	push   0x0
   2032f:	50                   	push   eax
   20330:	e8 78 4c 00 00       	call   24fad <memset>
   20335:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:73 (discriminator 3)
        fs->fat_buffers[i].ptr = NULL;
   20338:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2033b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2033e:	c1 e0 04             	shl    eax,0x4
   20341:	89 c1                	mov    ecx,eax
   20343:	c1 e1 05             	shl    ecx,0x5
   20346:	01 c8                	add    eax,ecx
   20348:	01 d0                	add    eax,edx
   2034a:	05 60 04 00 00       	add    eax,0x460
   2034f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:76 (discriminator 3)

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   20355:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20358:	8b 90 54 02 00 00    	mov    edx,DWORD PTR [eax+0x254]
   2035e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   20361:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20364:	c1 e0 04             	shl    eax,0x4
   20367:	89 c3                	mov    ebx,eax
   20369:	c1 e3 05             	shl    ebx,0x5
   2036c:	01 d8                	add    eax,ebx
   2036e:	01 c8                	add    eax,ecx
   20370:	05 64 04 00 00       	add    eax,0x464
   20375:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:77 (discriminator 3)
        fs->fat_buffer_head = &fs->fat_buffers[i];
   20377:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2037a:	c1 e0 04             	shl    eax,0x4
   2037d:	89 c2                	mov    edx,eax
   2037f:	c1 e2 05             	shl    edx,0x5
   20382:	01 d0                	add    eax,edx
   20384:	8d 90 50 02 00 00    	lea    edx,[eax+0x250]
   2038a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2038d:	01 d0                	add    eax,edx
   2038f:	8d 50 08             	lea    edx,[eax+0x8]
   20392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20395:	89 90 54 02 00 00    	mov    DWORD PTR [eax+0x254],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:67 (discriminator 3)
    int i;

    // FAT buffer chain head
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
   2039b:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:67 (discriminator 1)
   2039f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   203a3:	0f 8e 27 ff ff ff    	jle    202d0 <fatfs_fat_init+0x20>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:79

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
    }
}
   203a9:	90                   	nop
   203aa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   203ad:	c9                   	leave  
   203ae:	c3                   	ret    

000203af <fatfs_fat_writeback>:
fatfs_fat_writeback():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:84
//-----------------------------------------------------------------------------
// fatfs_fat_writeback: Writeback 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
static int fatfs_fat_writeback(struct fatfs *fs, struct fat_buffer *pcur)
{
   203af:	55                   	push   ebp
   203b0:	89 e5                	mov    ebp,esp
   203b2:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:85
    if (pcur)
   203b5:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   203b9:	0f 84 9b 00 00 00    	je     2045a <fatfs_fat_writeback+0xab>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:88
    {
        // Writeback sector if changed
        if (pcur->dirty)
   203bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   203c2:	8b 80 04 02 00 00    	mov    eax,DWORD PTR [eax+0x204]
   203c8:	85 c0                	test   eax,eax
   203ca:	0f 84 83 00 00 00    	je     20453 <fatfs_fat_writeback+0xa4>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:90
        {
            if (fs->disk_io.write_media)
   203d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   203d3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   203d6:	85 c0                	test   eax,eax
   203d8:	74 6c                	je     20446 <fatfs_fat_writeback+0x97>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:92
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
   203da:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:93
                uint32 offset = pcur->address - fs->fat_begin_lba;
   203e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   203e4:	8b 90 00 02 00 00    	mov    edx,DWORD PTR [eax+0x200]
   203ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   203ed:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   203f0:	29 c2                	sub    edx,eax
   203f2:	89 d0                	mov    eax,edx
   203f4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:96

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
   203f7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   203fa:	8d 50 01             	lea    edx,[eax+0x1]
   203fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20400:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   20403:	39 c2                	cmp    edx,eax
   20405:	77 09                	ja     20410 <fatfs_fat_writeback+0x61>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:97
                    sectors = FAT_BUFFER_SECTORS;
   20407:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
   2040e:	eb 0c                	jmp    2041c <fatfs_fat_writeback+0x6d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:99
                else
                    sectors = fs->fat_sectors - offset;
   20410:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20413:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   20416:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
   20419:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:101

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
   2041c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2041f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   20422:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   20425:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20428:	8b 92 00 02 00 00    	mov    edx,DWORD PTR [edx+0x200]
   2042e:	83 ec 04             	sub    esp,0x4
   20431:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   20434:	51                   	push   ecx
   20435:	52                   	push   edx
   20436:	ff d0                	call   eax
   20438:	83 c4 10             	add    esp,0x10
   2043b:	85 c0                	test   eax,eax
   2043d:	75 07                	jne    20446 <fatfs_fat_writeback+0x97>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:102
                    return 0;
   2043f:	b8 00 00 00 00       	mov    eax,0x0
   20444:	eb 19                	jmp    2045f <fatfs_fat_writeback+0xb0>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:105
            }

            pcur->dirty = 0;
   20446:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20449:	c7 80 04 02 00 00 00 	mov    DWORD PTR [eax+0x204],0x0
   20450:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:108
        }

        return 1;
   20453:	b8 01 00 00 00       	mov    eax,0x1
   20458:	eb 05                	jmp    2045f <fatfs_fat_writeback+0xb0>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:111
    }
    else
        return 0;
   2045a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:112
}
   2045f:	c9                   	leave  
   20460:	c3                   	ret    

00020461 <fatfs_fat_read_sector>:
fatfs_fat_read_sector():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:117
//-----------------------------------------------------------------------------
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
   20461:	55                   	push   ebp
   20462:	89 e5                	mov    ebp,esp
   20464:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:118
    struct fat_buffer *last = NULL;
   20467:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:119
    struct fat_buffer *pcur = fs->fat_buffer_head;
   2046e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20471:	8b 80 54 02 00 00    	mov    eax,DWORD PTR [eax+0x254]
   20477:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:122

    // Itterate through sector buffer list
    while (pcur)
   2047a:	eb 60                	jmp    204dc <fatfs_fat_read_sector+0x7b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:125
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
   2047c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2047f:	8b 80 00 02 00 00    	mov    eax,DWORD PTR [eax+0x200]
   20485:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   20488:	77 11                	ja     2049b <fatfs_fat_read_sector+0x3a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:125 (discriminator 1)
   2048a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2048d:	8b 80 00 02 00 00    	mov    eax,DWORD PTR [eax+0x200]
   20493:	83 c0 01             	add    eax,0x1
   20496:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   20499:	77 49                	ja     204e4 <fatfs_fat_read_sector+0x83>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:129
            break;

        // End of list?
        if (pcur->next == NULL)
   2049b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2049e:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
   204a4:	85 c0                	test   eax,eax
   204a6:	75 22                	jne    204ca <fatfs_fat_read_sector+0x69>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:132
        {
            // Remove buffer from list
            if (last)
   204a8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   204ac:	74 0f                	je     204bd <fatfs_fat_read_sector+0x5c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:133
                last->next = NULL;
   204ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   204b1:	c7 80 0c 02 00 00 00 	mov    DWORD PTR [eax+0x20c],0x0
   204b8:	00 00 00 
   204bb:	eb 0d                	jmp    204ca <fatfs_fat_read_sector+0x69>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:136
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
   204bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   204c0:	c7 80 54 02 00 00 00 	mov    DWORD PTR [eax+0x254],0x0
   204c7:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:139
        }

        last = pcur;
   204ca:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   204cd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:140
        pcur = pcur->next;
   204d0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   204d3:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
   204d9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:122
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
   204dc:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   204e0:	75 9a                	jne    2047c <fatfs_fat_read_sector+0x1b>
   204e2:	eb 01                	jmp    204e5 <fatfs_fat_read_sector+0x84>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:126
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
            break;
   204e4:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:144
        last = pcur;
        pcur = pcur->next;
    }

    // We found the sector already in FAT buffer chain
    if (pcur)
   204e5:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   204e9:	74 29                	je     20514 <fatfs_fat_read_sector+0xb3>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:146
    {
        pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * FAT_SECTOR_SIZE));
   204eb:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   204ee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   204f1:	8b 80 00 02 00 00    	mov    eax,DWORD PTR [eax+0x200]
   204f7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   204fa:	29 c1                	sub    ecx,eax
   204fc:	89 c8                	mov    eax,ecx
   204fe:	c1 e0 09             	shl    eax,0x9
   20501:	01 c2                	add    edx,eax
   20503:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20506:	89 90 08 02 00 00    	mov    DWORD PTR [eax+0x208],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:147
        return pcur;
   2050c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2050f:	e9 9e 00 00 00       	jmp    205b2 <fatfs_fat_read_sector+0x151>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:151
    }

    // Else, we removed the last item from the list
    pcur = last;
   20514:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20517:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:154

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
   2051a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2051d:	8b 90 54 02 00 00    	mov    edx,DWORD PTR [eax+0x254]
   20523:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20526:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:155
    fs->fat_buffer_head = pcur;
   2052c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2052f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20532:	89 90 54 02 00 00    	mov    DWORD PTR [eax+0x254],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:158

    // Writeback sector if changed
    if (pcur->dirty)
   20538:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2053b:	8b 80 04 02 00 00    	mov    eax,DWORD PTR [eax+0x204]
   20541:	85 c0                	test   eax,eax
   20543:	74 1c                	je     20561 <fatfs_fat_read_sector+0x100>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:159
        if (!fatfs_fat_writeback(fs, pcur))
   20545:	83 ec 08             	sub    esp,0x8
   20548:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   2054b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2054e:	e8 5c fe ff ff       	call   203af <fatfs_fat_writeback>
   20553:	83 c4 10             	add    esp,0x10
   20556:	85 c0                	test   eax,eax
   20558:	75 07                	jne    20561 <fatfs_fat_read_sector+0x100>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:160
            return 0;
   2055a:	b8 00 00 00 00       	mov    eax,0x0
   2055f:	eb 51                	jmp    205b2 <fatfs_fat_read_sector+0x151>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:163

    // Address is now new sector
    pcur->address = sector;
   20561:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20564:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20567:	89 90 00 02 00 00    	mov    DWORD PTR [eax+0x200],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:166

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
   2056d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20570:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   20573:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   20576:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20579:	8b 92 00 02 00 00    	mov    edx,DWORD PTR [edx+0x200]
   2057f:	83 ec 04             	sub    esp,0x4
   20582:	6a 01                	push   0x1
   20584:	51                   	push   ecx
   20585:	52                   	push   edx
   20586:	ff d0                	call   eax
   20588:	83 c4 10             	add    esp,0x10
   2058b:	85 c0                	test   eax,eax
   2058d:	75 14                	jne    205a3 <fatfs_fat_read_sector+0x142>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:169
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
   2058f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20592:	c7 80 00 02 00 00 ff 	mov    DWORD PTR [eax+0x200],0xffffffff
   20599:	ff ff ff 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:170
        return NULL;
   2059c:	b8 00 00 00 00       	mov    eax,0x0
   205a1:	eb 0f                	jmp    205b2 <fatfs_fat_read_sector+0x151>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:173
    }

    pcur->ptr = pcur->sector;
   205a3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   205a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   205a9:	89 90 08 02 00 00    	mov    DWORD PTR [eax+0x208],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:174
    return pcur;
   205af:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:175
}
   205b2:	c9                   	leave  
   205b3:	c3                   	ret    

000205b4 <fatfs_fat_purge>:
fatfs_fat_purge():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:180
//-----------------------------------------------------------------------------
// fatfs_fat_purge: Purge 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
int fatfs_fat_purge(struct fatfs *fs)
{
   205b4:	55                   	push   ebp
   205b5:	89 e5                	mov    ebp,esp
   205b7:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:181
    struct fat_buffer *pcur = fs->fat_buffer_head;
   205ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   205bd:	8b 80 54 02 00 00    	mov    eax,DWORD PTR [eax+0x254]
   205c3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:184

    // Itterate through sector buffer list
    while (pcur)
   205c6:	eb 35                	jmp    205fd <fatfs_fat_purge+0x49>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:187
    {
        // Writeback sector if changed
        if (pcur->dirty)
   205c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   205cb:	8b 80 04 02 00 00    	mov    eax,DWORD PTR [eax+0x204]
   205d1:	85 c0                	test   eax,eax
   205d3:	74 1c                	je     205f1 <fatfs_fat_purge+0x3d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:188
            if (!fatfs_fat_writeback(fs, pcur))
   205d5:	83 ec 08             	sub    esp,0x8
   205d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   205db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   205de:	e8 cc fd ff ff       	call   203af <fatfs_fat_writeback>
   205e3:	83 c4 10             	add    esp,0x10
   205e6:	85 c0                	test   eax,eax
   205e8:	75 07                	jne    205f1 <fatfs_fat_purge+0x3d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:189
                return 0;
   205ea:	b8 00 00 00 00       	mov    eax,0x0
   205ef:	eb 17                	jmp    20608 <fatfs_fat_purge+0x54>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:191

        pcur = pcur->next;
   205f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   205f4:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
   205fa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:184
int fatfs_fat_purge(struct fatfs *fs)
{
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
   205fd:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20601:	75 c5                	jne    205c8 <fatfs_fat_purge+0x14>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:194
                return 0;

        pcur = pcur->next;
    }

    return 1;
   20603:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:195
}
   20608:	c9                   	leave  
   20609:	c3                   	ret    

0002060a <fatfs_find_next_cluster>:
fatfs_find_next_cluster():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:206
//-----------------------------------------------------------------------------
// fatfs_find_next_cluster: Return cluster number of next cluster in chain by
// reading FAT table and traversing it. Return 0xffffffff for end of chain.
//-----------------------------------------------------------------------------
uint32 fatfs_find_next_cluster(struct fatfs *fs, uint32 current_cluster)
{
   2060a:	55                   	push   ebp
   2060b:	89 e5                	mov    ebp,esp
   2060d:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:212
    uint32 fat_sector_offset, position;
    uint32 nextcluster;
    struct fat_buffer *pbuf;

    // Why is '..' labelled with cluster 0 when it should be 2 ??
    if (current_cluster == 0)
   20610:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   20614:	75 07                	jne    2061d <fatfs_find_next_cluster+0x13>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:213
        current_cluster = 2;
   20616:	c7 45 0c 02 00 00 00 	mov    DWORD PTR [ebp+0xc],0x2
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:216

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
   2061d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20620:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20623:	85 c0                	test   eax,eax
   20625:	75 0b                	jne    20632 <fatfs_find_next_cluster+0x28>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:217
        fat_sector_offset = current_cluster / 256;
   20627:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2062a:	c1 e8 08             	shr    eax,0x8
   2062d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   20630:	eb 09                	jmp    2063b <fatfs_find_next_cluster+0x31>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:219
    else
        fat_sector_offset = current_cluster / 128;
   20632:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20635:	c1 e8 07             	shr    eax,0x7
   20638:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:222

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   2063b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2063e:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   20641:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20644:	01 d0                	add    eax,edx
   20646:	83 ec 08             	sub    esp,0x8
   20649:	50                   	push   eax
   2064a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2064d:	e8 0f fe ff ff       	call   20461 <fatfs_fat_read_sector>
   20652:	83 c4 10             	add    esp,0x10
   20655:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:223
    if (!pbuf)
   20658:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   2065c:	75 0a                	jne    20668 <fatfs_find_next_cluster+0x5e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:224
        return (FAT32_LAST_CLUSTER);
   2065e:	b8 ff ff ff ff       	mov    eax,0xffffffff
   20663:	e9 2a 01 00 00       	jmp    20792 <fatfs_find_next_cluster+0x188>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:226

    if (fs->fat_type == FAT_TYPE_16)
   20668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2066b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   2066e:	85 c0                	test   eax,eax
   20670:	75 71                	jne    206e3 <fatfs_find_next_cluster+0xd9>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:229
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (current_cluster - (fat_sector_offset * 256)) * 2;
   20672:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20675:	c1 e0 08             	shl    eax,0x8
   20678:	89 c2                	mov    edx,eax
   2067a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2067d:	29 d0                	sub    eax,edx
   2067f:	01 c0                	add    eax,eax
   20681:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:232

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
   20684:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20687:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   2068d:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   20690:	0f b7 d2             	movzx  edx,dx
   20693:	83 c2 01             	add    edx,0x1
   20696:	01 d0                	add    eax,edx
   20698:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2069b:	0f b6 c0             	movzx  eax,al
   2069e:	c1 e0 08             	shl    eax,0x8
   206a1:	89 c1                	mov    ecx,eax
   206a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   206a6:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   206ac:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   206af:	0f b7 c0             	movzx  eax,ax
   206b2:	01 d0                	add    eax,edx
   206b4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   206b7:	0f b6 c0             	movzx  eax,al
   206ba:	01 c8                	add    eax,ecx
   206bc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:235

        // If end of chain found
        if (nextcluster >= 0xFFF8 && nextcluster <= 0xFFFF)
   206bf:	81 7d f0 f7 ff 00 00 	cmp    DWORD PTR [ebp-0x10],0xfff7
   206c6:	0f 86 c3 00 00 00    	jbe    2078f <fatfs_find_next_cluster+0x185>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:235 (discriminator 1)
   206cc:	81 7d f0 ff ff 00 00 	cmp    DWORD PTR [ebp-0x10],0xffff
   206d3:	0f 87 b6 00 00 00    	ja     2078f <fatfs_find_next_cluster+0x185>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:236
            return (FAT32_LAST_CLUSTER);
   206d9:	b8 ff ff ff ff       	mov    eax,0xffffffff
   206de:	e9 af 00 00 00       	jmp    20792 <fatfs_find_next_cluster+0x188>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:241
    }
    else
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (current_cluster - (fat_sector_offset * 128)) * 4;
   206e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   206e6:	c1 e0 07             	shl    eax,0x7
   206e9:	89 c2                	mov    edx,eax
   206eb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   206ee:	29 d0                	sub    eax,edx
   206f0:	c1 e0 02             	shl    eax,0x2
   206f3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:244

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);
   206f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   206f9:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   206ff:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   20702:	0f b7 d2             	movzx  edx,dx
   20705:	83 c2 03             	add    edx,0x3
   20708:	01 d0                	add    eax,edx
   2070a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2070d:	0f b6 c0             	movzx  eax,al
   20710:	c1 e0 18             	shl    eax,0x18
   20713:	89 c1                	mov    ecx,eax
   20715:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20718:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   2071e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   20721:	0f b7 d2             	movzx  edx,dx
   20724:	83 c2 02             	add    edx,0x2
   20727:	01 d0                	add    eax,edx
   20729:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2072c:	0f b6 c0             	movzx  eax,al
   2072f:	c1 e0 10             	shl    eax,0x10
   20732:	01 c1                	add    ecx,eax
   20734:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20737:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   2073d:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   20740:	0f b7 d2             	movzx  edx,dx
   20743:	83 c2 01             	add    edx,0x1
   20746:	01 d0                	add    eax,edx
   20748:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2074b:	0f b6 c0             	movzx  eax,al
   2074e:	c1 e0 08             	shl    eax,0x8
   20751:	01 c1                	add    ecx,eax
   20753:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20756:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   2075c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2075f:	0f b7 c0             	movzx  eax,ax
   20762:	01 d0                	add    eax,edx
   20764:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20767:	0f b6 c0             	movzx  eax,al
   2076a:	01 c8                	add    eax,ecx
   2076c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:247

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;
   2076f:	81 65 f0 ff ff ff 0f 	and    DWORD PTR [ebp-0x10],0xfffffff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:250

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF)
   20776:	81 7d f0 f7 ff ff 0f 	cmp    DWORD PTR [ebp-0x10],0xffffff7
   2077d:	76 10                	jbe    2078f <fatfs_find_next_cluster+0x185>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:250 (discriminator 1)
   2077f:	81 7d f0 ff ff ff 0f 	cmp    DWORD PTR [ebp-0x10],0xfffffff
   20786:	77 07                	ja     2078f <fatfs_find_next_cluster+0x185>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:251
            return (FAT32_LAST_CLUSTER);
   20788:	b8 ff ff ff ff       	mov    eax,0xffffffff
   2078d:	eb 03                	jmp    20792 <fatfs_find_next_cluster+0x188>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:255
    }

    // Else return next cluster
    return (nextcluster);
   2078f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:256
}
   20792:	c9                   	leave  
   20793:	c3                   	ret    

00020794 <fatfs_set_fs_info_next_free_cluster>:
fatfs_set_fs_info_next_free_cluster():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:261
//-----------------------------------------------------------------------------
// fatfs_set_fs_info_next_free_cluster: Write the next free cluster to the FSINFO table
//-----------------------------------------------------------------------------
void fatfs_set_fs_info_next_free_cluster(struct fatfs *fs, uint32 newValue)
{
   20794:	55                   	push   ebp
   20795:	89 e5                	mov    ebp,esp
   20797:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:262
    if (fs->fat_type == FAT_TYPE_16)
   2079a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2079d:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   207a0:	85 c0                	test   eax,eax
   207a2:	0f 84 de 00 00 00    	je     20886 <fatfs_set_fs_info_next_free_cluster+0xf2>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:267
        ;
    else
    {
        // Load sector to change it
        struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
   207a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   207ab:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   207ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   207b1:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   207b5:	0f b7 c0             	movzx  eax,ax
   207b8:	01 d0                	add    eax,edx
   207ba:	83 ec 08             	sub    esp,0x8
   207bd:	50                   	push   eax
   207be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   207c1:	e8 9b fc ff ff       	call   20461 <fatfs_fat_read_sector>
   207c6:	83 c4 10             	add    esp,0x10
   207c9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:268
        if (!pbuf)
   207cc:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   207d0:	0f 84 af 00 00 00    	je     20885 <fatfs_set_fs_info_next_free_cluster+0xf1>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:272
            return ;

        // Change
        FAT32_SET_32BIT_WORD(pbuf, 492, newValue);
   207d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   207d9:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   207df:	05 ec 01 00 00       	add    eax,0x1ec
   207e4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   207e7:	88 10                	mov    BYTE PTR [eax],dl
   207e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   207ec:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   207f2:	05 ed 01 00 00       	add    eax,0x1ed
   207f7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   207fa:	c1 ea 08             	shr    edx,0x8
   207fd:	88 10                	mov    BYTE PTR [eax],dl
   207ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20802:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20808:	05 ee 01 00 00       	add    eax,0x1ee
   2080d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20810:	c1 ea 10             	shr    edx,0x10
   20813:	88 10                	mov    BYTE PTR [eax],dl
   20815:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20818:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   2081e:	05 ef 01 00 00       	add    eax,0x1ef
   20823:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20826:	c1 ea 18             	shr    edx,0x18
   20829:	88 10                	mov    BYTE PTR [eax],dl
   2082b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2082e:	c7 80 04 02 00 00 01 	mov    DWORD PTR [eax+0x204],0x1
   20835:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:273
        fs->next_free_cluster = newValue;
   20838:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2083b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   2083e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:276

        // Write back FSINFO sector to disk
        if (fs->disk_io.write_media)
   20841:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20844:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   20847:	85 c0                	test   eax,eax
   20849:	74 1e                	je     20869 <fatfs_set_fs_info_next_free_cluster+0xd5>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:277
            fs->disk_io.write_media(pbuf->address, pbuf->sector, 1);
   2084b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2084e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   20851:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   20854:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   20857:	8b 92 00 02 00 00    	mov    edx,DWORD PTR [edx+0x200]
   2085d:	83 ec 04             	sub    esp,0x4
   20860:	6a 01                	push   0x1
   20862:	51                   	push   ecx
   20863:	52                   	push   edx
   20864:	ff d0                	call   eax
   20866:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:280

        // Invalidate cache entry
        pbuf->address = FAT32_INVALID_CLUSTER;
   20869:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2086c:	c7 80 00 02 00 00 ff 	mov    DWORD PTR [eax+0x200],0xffffffff
   20873:	ff ff ff 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:281
        pbuf->dirty = 0;
   20876:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20879:	c7 80 04 02 00 00 00 	mov    DWORD PTR [eax+0x204],0x0
   20880:	00 00 00 
   20883:	eb 01                	jmp    20886 <fatfs_set_fs_info_next_free_cluster+0xf2>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:269
    else
    {
        // Load sector to change it
        struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
        if (!pbuf)
            return ;
   20885:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:283

        // Invalidate cache entry
        pbuf->address = FAT32_INVALID_CLUSTER;
        pbuf->dirty = 0;
    }
}
   20886:	c9                   	leave  
   20887:	c3                   	ret    

00020888 <fatfs_find_blank_cluster>:
fatfs_find_blank_cluster():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:289
//-----------------------------------------------------------------------------
// fatfs_find_blank_cluster: Find a free cluster entry by reading the FAT
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_find_blank_cluster(struct fatfs *fs, uint32 start_cluster, uint32 *free_cluster)
{
   20888:	55                   	push   ebp
   20889:	89 e5                	mov    ebp,esp
   2088b:	83 ec 28             	sub    esp,0x28
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:292
    uint32 fat_sector_offset, position;
    uint32 nextcluster;
    uint32 current_cluster = start_cluster;
   2088e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20891:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:298
    struct fat_buffer *pbuf;

    do
    {
        // Find which sector of FAT table to read
        if (fs->fat_type == FAT_TYPE_16)
   20894:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20897:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   2089a:	85 c0                	test   eax,eax
   2089c:	75 0b                	jne    208a9 <fatfs_find_blank_cluster+0x21>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:299
            fat_sector_offset = current_cluster / 256;
   2089e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   208a1:	c1 e8 08             	shr    eax,0x8
   208a4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   208a7:	eb 09                	jmp    208b2 <fatfs_find_blank_cluster+0x2a>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:301
        else
            fat_sector_offset = current_cluster / 128;
   208a9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   208ac:	c1 e8 07             	shr    eax,0x7
   208af:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:303

        if ( fat_sector_offset < fs->fat_sectors)
   208b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   208b5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   208b8:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   208bb:	0f 86 28 01 00 00    	jbe    209e9 <fatfs_find_blank_cluster+0x161>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:306
        {
            // Read FAT sector into buffer
            pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   208c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   208c4:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   208c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   208ca:	01 d0                	add    eax,edx
   208cc:	83 ec 08             	sub    esp,0x8
   208cf:	50                   	push   eax
   208d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   208d3:	e8 89 fb ff ff       	call   20461 <fatfs_fat_read_sector>
   208d8:	83 c4 10             	add    esp,0x10
   208db:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:307
            if (!pbuf)
   208de:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   208e2:	75 0a                	jne    208ee <fatfs_find_blank_cluster+0x66>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:308
                return 0;
   208e4:	b8 00 00 00 00       	mov    eax,0x0
   208e9:	e9 19 01 00 00       	jmp    20a07 <fatfs_find_blank_cluster+0x17f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:310

            if (fs->fat_type == FAT_TYPE_16)
   208ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   208f1:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   208f4:	85 c0                	test   eax,eax
   208f6:	75 52                	jne    2094a <fatfs_find_blank_cluster+0xc2>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:313
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 256)) * 2;
   208f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   208fb:	c1 e0 08             	shl    eax,0x8
   208fe:	89 c2                	mov    edx,eax
   20900:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20903:	29 d0                	sub    eax,edx
   20905:	01 c0                	add    eax,eax
   20907:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:316

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
   2090a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2090d:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20913:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   20916:	0f b7 d2             	movzx  edx,dx
   20919:	83 c2 01             	add    edx,0x1
   2091c:	01 d0                	add    eax,edx
   2091e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20921:	0f b6 c0             	movzx  eax,al
   20924:	c1 e0 08             	shl    eax,0x8
   20927:	89 c1                	mov    ecx,eax
   20929:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2092c:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20932:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   20935:	0f b7 c0             	movzx  eax,ax
   20938:	01 d0                	add    eax,edx
   2093a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2093d:	0f b6 c0             	movzx  eax,al
   20940:	01 c8                	add    eax,ecx
   20942:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   20945:	e9 93 00 00 00       	jmp    209dd <fatfs_find_blank_cluster+0x155>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:321
            }
            else
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 128)) * 4;
   2094a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2094d:	c1 e0 07             	shl    eax,0x7
   20950:	89 c2                	mov    edx,eax
   20952:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20955:	29 d0                	sub    eax,edx
   20957:	c1 e0 02             	shl    eax,0x2
   2095a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:324

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);
   2095d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20960:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20966:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   20969:	0f b7 d2             	movzx  edx,dx
   2096c:	83 c2 03             	add    edx,0x3
   2096f:	01 d0                	add    eax,edx
   20971:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20974:	0f b6 c0             	movzx  eax,al
   20977:	c1 e0 18             	shl    eax,0x18
   2097a:	89 c1                	mov    ecx,eax
   2097c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2097f:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20985:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   20988:	0f b7 d2             	movzx  edx,dx
   2098b:	83 c2 02             	add    edx,0x2
   2098e:	01 d0                	add    eax,edx
   20990:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20993:	0f b6 c0             	movzx  eax,al
   20996:	c1 e0 10             	shl    eax,0x10
   20999:	01 c1                	add    ecx,eax
   2099b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2099e:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   209a4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   209a7:	0f b7 d2             	movzx  edx,dx
   209aa:	83 c2 01             	add    edx,0x1
   209ad:	01 d0                	add    eax,edx
   209af:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   209b2:	0f b6 c0             	movzx  eax,al
   209b5:	c1 e0 08             	shl    eax,0x8
   209b8:	01 c1                	add    ecx,eax
   209ba:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   209bd:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   209c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   209c6:	0f b7 c0             	movzx  eax,ax
   209c9:	01 d0                	add    eax,edx
   209cb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   209ce:	0f b6 c0             	movzx  eax,al
   209d1:	01 c8                	add    eax,ecx
   209d3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:327

                // Mask out MS 4 bits (its 28bit addressing)
                nextcluster = nextcluster & 0x0FFFFFFF;
   209d6:	81 65 f0 ff ff ff 0f 	and    DWORD PTR [ebp-0x10],0xfffffff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:330
            }

            if (nextcluster !=0 )
   209dd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   209e1:	74 0d                	je     209f0 <fatfs_find_blank_cluster+0x168>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:331
                current_cluster++;
   209e3:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
   209e7:	eb 07                	jmp    209f0 <fatfs_find_blank_cluster+0x168>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:335
        }
        else
            // Otherwise, run out of FAT sectors to check...
            return 0;
   209e9:	b8 00 00 00 00       	mov    eax,0x0
   209ee:	eb 17                	jmp    20a07 <fatfs_find_blank_cluster+0x17f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:337
    }
    while (nextcluster != 0x0);
   209f0:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   209f4:	0f 85 9a fe ff ff    	jne    20894 <fatfs_find_blank_cluster+0xc>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:340

    // Found blank entry
    *free_cluster = current_cluster;
   209fa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   209fd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20a00:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:341
    return 1;
   20a02:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:342
}
   20a07:	c9                   	leave  
   20a08:	c3                   	ret    

00020a09 <fatfs_fat_set_cluster>:
fatfs_fat_set_cluster():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:350
// fatfs_fat_set_cluster: Set a cluster link in the chain. NOTE: Immediate
// write (slow).
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_fat_set_cluster(struct fatfs *fs, uint32 cluster, uint32 next_cluster)
{
   20a09:	55                   	push   ebp
   20a0a:	89 e5                	mov    ebp,esp
   20a0c:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:355
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
   20a0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20a12:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20a15:	85 c0                	test   eax,eax
   20a17:	75 0b                	jne    20a24 <fatfs_fat_set_cluster+0x1b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:356
        fat_sector_offset = cluster / 256;
   20a19:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20a1c:	c1 e8 08             	shr    eax,0x8
   20a1f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   20a22:	eb 09                	jmp    20a2d <fatfs_fat_set_cluster+0x24>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:358
    else
        fat_sector_offset = cluster / 128;
   20a24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20a27:	c1 e8 07             	shr    eax,0x7
   20a2a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:361

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   20a2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20a30:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   20a33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20a36:	01 d0                	add    eax,edx
   20a38:	83 ec 08             	sub    esp,0x8
   20a3b:	50                   	push   eax
   20a3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20a3f:	e8 1d fa ff ff       	call   20461 <fatfs_fat_read_sector>
   20a44:	83 c4 10             	add    esp,0x10
   20a47:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:362
    if (!pbuf)
   20a4a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20a4e:	75 0a                	jne    20a5a <fatfs_fat_set_cluster+0x51>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:363
        return 0;
   20a50:	b8 00 00 00 00       	mov    eax,0x0
   20a55:	e9 f2 00 00 00       	jmp    20b4c <fatfs_fat_set_cluster+0x143>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:365

    if (fs->fat_type == FAT_TYPE_16)
   20a5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20a5d:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20a60:	85 c0                	test   eax,eax
   20a62:	75 59                	jne    20abd <fatfs_fat_set_cluster+0xb4>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:368
    {
        // Find 16 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 256)) * 2;
   20a64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20a67:	c1 e0 08             	shl    eax,0x8
   20a6a:	89 c2                	mov    edx,eax
   20a6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20a6f:	29 d0                	sub    eax,edx
   20a71:	01 c0                	add    eax,eax
   20a73:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:371

        // Write Next Clusters value to Sector Buffer
        FAT16_SET_16BIT_WORD(pbuf, (uint16)position, ((uint16)next_cluster));
   20a76:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20a79:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20a7f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20a82:	0f b7 c0             	movzx  eax,ax
   20a85:	01 d0                	add    eax,edx
   20a87:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20a8a:	88 10                	mov    BYTE PTR [eax],dl
   20a8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20a8f:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20a95:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20a98:	0f b7 d2             	movzx  edx,dx
   20a9b:	83 c2 01             	add    edx,0x1
   20a9e:	01 d0                	add    eax,edx
   20aa0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20aa3:	0f b7 d2             	movzx  edx,dx
   20aa6:	c1 fa 08             	sar    edx,0x8
   20aa9:	88 10                	mov    BYTE PTR [eax],dl
   20aab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20aae:	c7 80 04 02 00 00 01 	mov    DWORD PTR [eax+0x204],0x1
   20ab5:	00 00 00 
   20ab8:	e9 8a 00 00 00       	jmp    20b47 <fatfs_fat_set_cluster+0x13e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:376
    }
    else
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 128)) * 4;
   20abd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20ac0:	c1 e0 07             	shl    eax,0x7
   20ac3:	89 c2                	mov    edx,eax
   20ac5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20ac8:	29 d0                	sub    eax,edx
   20aca:	c1 e0 02             	shl    eax,0x2
   20acd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:379

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);
   20ad0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20ad3:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20ad9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20adc:	0f b7 c0             	movzx  eax,ax
   20adf:	01 d0                	add    eax,edx
   20ae1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20ae4:	88 10                	mov    BYTE PTR [eax],dl
   20ae6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20ae9:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20aef:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20af2:	0f b7 d2             	movzx  edx,dx
   20af5:	83 c2 01             	add    edx,0x1
   20af8:	01 d0                	add    eax,edx
   20afa:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20afd:	c1 ea 08             	shr    edx,0x8
   20b00:	88 10                	mov    BYTE PTR [eax],dl
   20b02:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20b05:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20b0b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20b0e:	0f b7 d2             	movzx  edx,dx
   20b11:	83 c2 02             	add    edx,0x2
   20b14:	01 d0                	add    eax,edx
   20b16:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20b19:	c1 ea 10             	shr    edx,0x10
   20b1c:	88 10                	mov    BYTE PTR [eax],dl
   20b1e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20b21:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20b27:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20b2a:	0f b7 d2             	movzx  edx,dx
   20b2d:	83 c2 03             	add    edx,0x3
   20b30:	01 d0                	add    eax,edx
   20b32:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20b35:	c1 ea 18             	shr    edx,0x18
   20b38:	88 10                	mov    BYTE PTR [eax],dl
   20b3a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20b3d:	c7 80 04 02 00 00 01 	mov    DWORD PTR [eax+0x204],0x1
   20b44:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:382
    }

    return 1;
   20b47:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:383
}
   20b4c:	c9                   	leave  
   20b4d:	c3                   	ret    

00020b4e <fatfs_free_cluster_chain>:
fatfs_free_cluster_chain():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:390
//-----------------------------------------------------------------------------
// fatfs_free_cluster_chain: Follow a chain marking each element as free
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_free_cluster_chain(struct fatfs *fs, uint32 start_cluster)
{
   20b4e:	55                   	push   ebp
   20b4f:	89 e5                	mov    ebp,esp
   20b51:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:392
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;
   20b54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20b57:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:395

    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
   20b5a:	eb 2d                	jmp    20b89 <fatfs_free_cluster_chain+0x3b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:397
    {
        last_cluster = next_cluster;
   20b5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20b5f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:400

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
   20b62:	83 ec 08             	sub    esp,0x8
   20b65:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   20b68:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20b6b:	e8 9a fa ff ff       	call   2060a <fatfs_find_next_cluster>
   20b70:	83 c4 10             	add    esp,0x10
   20b73:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:403

        // Clear last link
        fatfs_fat_set_cluster(fs, last_cluster, 0x00000000);
   20b76:	83 ec 04             	sub    esp,0x4
   20b79:	6a 00                	push   0x0
   20b7b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   20b7e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20b81:	e8 83 fe ff ff       	call   20a09 <fatfs_fat_set_cluster>
   20b86:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:395
{
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;

    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
   20b89:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   20b8d:	74 06                	je     20b95 <fatfs_free_cluster_chain+0x47>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:395 (discriminator 1)
   20b8f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20b93:	75 c7                	jne    20b5c <fatfs_free_cluster_chain+0xe>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:406

        // Clear last link
        fatfs_fat_set_cluster(fs, last_cluster, 0x00000000);
    }

    return 1;
   20b95:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:407
}
   20b9a:	c9                   	leave  
   20b9b:	c3                   	ret    

00020b9c <fatfs_fat_add_cluster_to_chain>:
fatfs_fat_add_cluster_to_chain():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:415
// fatfs_fat_add_cluster_to_chain: Follow a chain marking and then add a new entry
// to the current tail.
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_fat_add_cluster_to_chain(struct fatfs *fs, uint32 start_cluster, uint32 newEntry)
{
   20b9c:	55                   	push   ebp
   20b9d:	89 e5                	mov    ebp,esp
   20b9f:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:416
    uint32 last_cluster = FAT32_LAST_CLUSTER;
   20ba2:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:417
    uint32 next_cluster = start_cluster;
   20ba9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20bac:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:419

    if (start_cluster == FAT32_LAST_CLUSTER)
   20baf:	83 7d 0c ff          	cmp    DWORD PTR [ebp+0xc],0xffffffff
   20bb3:	75 2e                	jne    20be3 <fatfs_fat_add_cluster_to_chain+0x47>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:420
        return 0;
   20bb5:	b8 00 00 00 00       	mov    eax,0x0
   20bba:	eb 59                	jmp    20c15 <fatfs_fat_add_cluster_to_chain+0x79>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:425

    // Loop until end of chain
    while ( next_cluster != FAT32_LAST_CLUSTER )
    {
        last_cluster = next_cluster;
   20bbc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20bbf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:428

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
   20bc2:	83 ec 08             	sub    esp,0x8
   20bc5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   20bc8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20bcb:	e8 3a fa ff ff       	call   2060a <fatfs_find_next_cluster>
   20bd0:	83 c4 10             	add    esp,0x10
   20bd3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:429
        if (!next_cluster)
   20bd6:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20bda:	75 07                	jne    20be3 <fatfs_fat_add_cluster_to_chain+0x47>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:430
            return 0;
   20bdc:	b8 00 00 00 00       	mov    eax,0x0
   20be1:	eb 32                	jmp    20c15 <fatfs_fat_add_cluster_to_chain+0x79>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:423

    if (start_cluster == FAT32_LAST_CLUSTER)
        return 0;

    // Loop until end of chain
    while ( next_cluster != FAT32_LAST_CLUSTER )
   20be3:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   20be7:	75 d3                	jne    20bbc <fatfs_fat_add_cluster_to_chain+0x20>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:434
        if (!next_cluster)
            return 0;
    }

    // Add link in for new cluster
    fatfs_fat_set_cluster(fs, last_cluster, newEntry);
   20be9:	83 ec 04             	sub    esp,0x4
   20bec:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   20bef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   20bf2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20bf5:	e8 0f fe ff ff       	call   20a09 <fatfs_fat_set_cluster>
   20bfa:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:437

    // Mark new cluster as end of chain
    fatfs_fat_set_cluster(fs, newEntry, FAT32_LAST_CLUSTER);
   20bfd:	83 ec 04             	sub    esp,0x4
   20c00:	6a ff                	push   0xffffffff
   20c02:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   20c05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20c08:	e8 fc fd ff ff       	call   20a09 <fatfs_fat_set_cluster>
   20c0d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:439

    return 1;
   20c10:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:440
}
   20c15:	c9                   	leave  
   20c16:	c3                   	ret    

00020c17 <fatfs_count_free_clusters>:
fatfs_count_free_clusters():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:446
#endif
//-----------------------------------------------------------------------------
// fatfs_count_free_clusters:
//-----------------------------------------------------------------------------
uint32 fatfs_count_free_clusters(struct fatfs *fs)
{
   20c17:	55                   	push   ebp
   20c18:	89 e5                	mov    ebp,esp
   20c1a:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:448
    uint32 i,j;
    uint32 count = 0;
   20c1d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:451
    struct fat_buffer *pbuf;

    for (i = 0; i < fs->fat_sectors; i++)
   20c24:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   20c2b:	e9 19 01 00 00       	jmp    20d49 <fatfs_count_free_clusters+0x132>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:454
    {
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
   20c30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20c33:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   20c36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20c39:	01 d0                	add    eax,edx
   20c3b:	83 ec 08             	sub    esp,0x8
   20c3e:	50                   	push   eax
   20c3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20c42:	e8 1a f8 ff ff       	call   20461 <fatfs_fat_read_sector>
   20c47:	83 c4 10             	add    esp,0x10
   20c4a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:455
        if (!pbuf)
   20c4d:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   20c51:	0f 84 03 01 00 00    	je     20d5a <fatfs_count_free_clusters+0x143>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:458
            break;

        for (j = 0; j < FAT_SECTOR_SIZE; )
   20c57:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   20c5e:	e9 d5 00 00 00       	jmp    20d38 <fatfs_count_free_clusters+0x121>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:460
        {
            if (fs->fat_type == FAT_TYPE_16)
   20c63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20c66:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20c69:	85 c0                	test   eax,eax
   20c6b:	75 49                	jne    20cb6 <fatfs_count_free_clusters+0x9f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:462
            {
                if (FAT16_GET_16BIT_WORD(pbuf, (uint16)j) == 0)
   20c6d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20c70:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20c76:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20c79:	0f b7 d2             	movzx  edx,dx
   20c7c:	83 c2 01             	add    edx,0x1
   20c7f:	01 d0                	add    eax,edx
   20c81:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20c84:	0f b6 c0             	movzx  eax,al
   20c87:	c1 e0 08             	shl    eax,0x8
   20c8a:	89 c1                	mov    ecx,eax
   20c8c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20c8f:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20c95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20c98:	0f b7 c0             	movzx  eax,ax
   20c9b:	01 d0                	add    eax,edx
   20c9d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20ca0:	0f b6 c0             	movzx  eax,al
   20ca3:	01 c8                	add    eax,ecx
   20ca5:	85 c0                	test   eax,eax
   20ca7:	75 04                	jne    20cad <fatfs_count_free_clusters+0x96>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:463
                    count++;
   20ca9:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:465

                j += 2;
   20cad:	83 45 f0 02          	add    DWORD PTR [ebp-0x10],0x2
   20cb1:	e9 82 00 00 00       	jmp    20d38 <fatfs_count_free_clusters+0x121>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:469
            }
            else
            {
                if (FAT32_GET_32BIT_WORD(pbuf, (uint16)j) == 0)
   20cb6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20cb9:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20cbf:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20cc2:	0f b7 d2             	movzx  edx,dx
   20cc5:	83 c2 03             	add    edx,0x3
   20cc8:	01 d0                	add    eax,edx
   20cca:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20ccd:	0f b6 c0             	movzx  eax,al
   20cd0:	c1 e0 18             	shl    eax,0x18
   20cd3:	89 c1                	mov    ecx,eax
   20cd5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20cd8:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20cde:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20ce1:	0f b7 d2             	movzx  edx,dx
   20ce4:	83 c2 02             	add    edx,0x2
   20ce7:	01 d0                	add    eax,edx
   20ce9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20cec:	0f b6 c0             	movzx  eax,al
   20cef:	c1 e0 10             	shl    eax,0x10
   20cf2:	01 c1                	add    ecx,eax
   20cf4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20cf7:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20cfd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20d00:	0f b7 d2             	movzx  edx,dx
   20d03:	83 c2 01             	add    edx,0x1
   20d06:	01 d0                	add    eax,edx
   20d08:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20d0b:	0f b6 c0             	movzx  eax,al
   20d0e:	c1 e0 08             	shl    eax,0x8
   20d11:	01 c1                	add    ecx,eax
   20d13:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20d16:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20d1c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20d1f:	0f b7 c0             	movzx  eax,ax
   20d22:	01 d0                	add    eax,edx
   20d24:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20d27:	0f b6 c0             	movzx  eax,al
   20d2a:	01 c8                	add    eax,ecx
   20d2c:	85 c0                	test   eax,eax
   20d2e:	75 04                	jne    20d34 <fatfs_count_free_clusters+0x11d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:470
                    count++;
   20d30:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:472

                j += 4;
   20d34:	83 45 f0 04          	add    DWORD PTR [ebp-0x10],0x4
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:458 (discriminator 1)
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
        if (!pbuf)
            break;

        for (j = 0; j < FAT_SECTOR_SIZE; )
   20d38:	81 7d f0 ff 01 00 00 	cmp    DWORD PTR [ebp-0x10],0x1ff
   20d3f:	0f 86 1e ff ff ff    	jbe    20c63 <fatfs_count_free_clusters+0x4c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:451 (discriminator 2)
{
    uint32 i,j;
    uint32 count = 0;
    struct fat_buffer *pbuf;

    for (i = 0; i < fs->fat_sectors; i++)
   20d45:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:451 (discriminator 1)
   20d49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20d4c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   20d4f:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   20d52:	0f 87 d8 fe ff ff    	ja     20c30 <fatfs_count_free_clusters+0x19>
   20d58:	eb 01                	jmp    20d5b <fatfs_count_free_clusters+0x144>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:456
    {
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
        if (!pbuf)
            break;
   20d5a:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:477
                j += 4;
            }
        }
    }

    return count;
   20d5b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_table.c:478
}
   20d5e:	c9                   	leave  
   20d5f:	c3                   	ret    

00020d60 <fatfs_add_free_space>:
fatfs_add_free_space():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:46
//-----------------------------------------------------------------------------
// fatfs_add_free_space: Allocate another cluster of free space to the end
// of a files cluster chain.
//-----------------------------------------------------------------------------
int fatfs_add_free_space(struct fatfs *fs, uint32 *startCluster, uint32 clusters)
{
   20d60:	55                   	push   ebp
   20d61:	89 e5                	mov    ebp,esp
   20d63:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:49
    uint32 i;
    uint32 nextcluster;
    uint32 start = *startCluster;
   20d66:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20d69:	8b 00                	mov    eax,DWORD PTR [eax]
   20d6b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:52

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
   20d6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20d71:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   20d74:	83 f8 ff             	cmp    eax,0xffffffff
   20d77:	74 10                	je     20d89 <fatfs_add_free_space+0x29>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:53
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);
   20d79:	83 ec 08             	sub    esp,0x8
   20d7c:	6a ff                	push   0xffffffff
   20d7e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20d81:	e8 0e fa ff ff       	call   20794 <fatfs_set_fs_info_next_free_cluster>
   20d86:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:55

    for (i=0;i<clusters;i++)
   20d89:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   20d90:	eb 67                	jmp    20df9 <fatfs_add_free_space+0x99>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:58
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
   20d92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20d95:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   20d98:	83 ec 04             	sub    esp,0x4
   20d9b:	8d 55 ec             	lea    edx,[ebp-0x14]
   20d9e:	52                   	push   edx
   20d9f:	50                   	push   eax
   20da0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20da3:	e8 e0 fa ff ff       	call   20888 <fatfs_find_blank_cluster>
   20da8:	83 c4 10             	add    esp,0x10
   20dab:	85 c0                	test   eax,eax
   20dad:	74 3f                	je     20dee <fatfs_add_free_space+0x8e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:61
        {
            // Point last to this
            fatfs_fat_set_cluster(fs, start, nextcluster);
   20daf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20db2:	83 ec 04             	sub    esp,0x4
   20db5:	50                   	push   eax
   20db6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   20db9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20dbc:	e8 48 fc ff ff       	call   20a09 <fatfs_fat_set_cluster>
   20dc1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:64

            // Point this to end of file
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
   20dc4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20dc7:	83 ec 04             	sub    esp,0x4
   20dca:	6a ff                	push   0xffffffff
   20dcc:	50                   	push   eax
   20dcd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20dd0:	e8 34 fc ff ff       	call   20a09 <fatfs_fat_set_cluster>
   20dd5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:67

            // Adjust argument reference
            start = nextcluster;
   20dd8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20ddb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:68
            if (i == 0)
   20dde:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20de2:	75 11                	jne    20df5 <fatfs_add_free_space+0x95>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:69
                *startCluster = nextcluster;
   20de4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20de7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20dea:	89 10                	mov    DWORD PTR [eax],edx
   20dec:	eb 07                	jmp    20df5 <fatfs_add_free_space+0x95>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:72
        }
        else
            return 0;
   20dee:	b8 00 00 00 00       	mov    eax,0x0
   20df3:	eb 11                	jmp    20e06 <fatfs_add_free_space+0xa6>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:55 (discriminator 2)

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);

    for (i=0;i<clusters;i++)
   20df5:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:55 (discriminator 1)
   20df9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20dfc:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   20dff:	72 91                	jb     20d92 <fatfs_add_free_space+0x32>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:75
        }
        else
            return 0;
    }

    return 1;
   20e01:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:76 (discriminator 1)
}
   20e06:	c9                   	leave  
   20e07:	c3                   	ret    

00020e08 <fatfs_allocate_free_space>:
fatfs_allocate_free_space():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:83
// fatfs_allocate_free_space: Add an ammount of free space to a file either from
// 'startCluster' if newFile = false, or allocating a new start to the chain if
// newFile = true.
//-----------------------------------------------------------------------------
int fatfs_allocate_free_space(struct fatfs *fs, int newFile, uint32 *startCluster, uint32 size)
{
   20e08:	55                   	push   ebp
   20e09:	89 e5                	mov    ebp,esp
   20e0b:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:88
    uint32 clusterSize;
    uint32 clusterCount;
    uint32 nextcluster;

    if (size==0)
   20e0e:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   20e12:	75 0a                	jne    20e1e <fatfs_allocate_free_space+0x16>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:89
        return 0;
   20e14:	b8 00 00 00 00       	mov    eax,0x0
   20e19:	e9 c8 00 00 00       	jmp    20ee6 <fatfs_allocate_free_space+0xde>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:92

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
   20e1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20e21:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   20e24:	83 f8 ff             	cmp    eax,0xffffffff
   20e27:	74 10                	je     20e39 <fatfs_allocate_free_space+0x31>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:93
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);
   20e29:	83 ec 08             	sub    esp,0x8
   20e2c:	6a ff                	push   0xffffffff
   20e2e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20e31:	e8 5e f9 ff ff       	call   20794 <fatfs_set_fs_info_next_free_cluster>
   20e36:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:96

    // Work out size and clusters
    clusterSize = fs->sectors_per_cluster * FAT_SECTOR_SIZE;
   20e39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20e3c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20e3f:	0f b6 c0             	movzx  eax,al
   20e42:	c1 e0 09             	shl    eax,0x9
   20e45:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:97
    clusterCount = (size / clusterSize);
   20e48:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   20e4b:	ba 00 00 00 00       	mov    edx,0x0
   20e50:	f7 75 f0             	div    DWORD PTR [ebp-0x10]
   20e53:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:100

    // If any left over
    if (size-(clusterSize*clusterCount))
   20e56:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20e59:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   20e5d:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
   20e60:	74 04                	je     20e66 <fatfs_allocate_free_space+0x5e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:101
        clusterCount++;
   20e62:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:104

    // Allocated first link in the chain if a new file
    if (newFile)
   20e66:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   20e6a:	74 4d                	je     20eb9 <fatfs_allocate_free_space+0xb1>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:106
    {
        if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
   20e6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20e6f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   20e72:	83 ec 04             	sub    esp,0x4
   20e75:	8d 55 ec             	lea    edx,[ebp-0x14]
   20e78:	52                   	push   edx
   20e79:	50                   	push   eax
   20e7a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20e7d:	e8 06 fa ff ff       	call   20888 <fatfs_find_blank_cluster>
   20e82:	83 c4 10             	add    esp,0x10
   20e85:	85 c0                	test   eax,eax
   20e87:	75 07                	jne    20e90 <fatfs_allocate_free_space+0x88>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:107
            return 0;
   20e89:	b8 00 00 00 00       	mov    eax,0x0
   20e8e:	eb 56                	jmp    20ee6 <fatfs_allocate_free_space+0xde>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:110

        // If this is all that is needed then all done
        if (clusterCount==1)
   20e90:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   20e94:	75 2b                	jne    20ec1 <fatfs_allocate_free_space+0xb9>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:112
        {
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
   20e96:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20e99:	83 ec 04             	sub    esp,0x4
   20e9c:	6a ff                	push   0xffffffff
   20e9e:	50                   	push   eax
   20e9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20ea2:	e8 62 fb ff ff       	call   20a09 <fatfs_fat_set_cluster>
   20ea7:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:113
            *startCluster = nextcluster;
   20eaa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20ead:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20eb0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:114
            return 1;
   20eb2:	b8 01 00 00 00       	mov    eax,0x1
   20eb7:	eb 2d                	jmp    20ee6 <fatfs_allocate_free_space+0xde>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:119
        }
    }
    // Allocate from end of current chain (startCluster is end of chain)
    else
        nextcluster = *startCluster;
   20eb9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20ebc:	8b 00                	mov    eax,DWORD PTR [eax]
   20ebe:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:121

    if (!fatfs_add_free_space(fs, &nextcluster, clusterCount))
   20ec1:	83 ec 04             	sub    esp,0x4
   20ec4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   20ec7:	8d 45 ec             	lea    eax,[ebp-0x14]
   20eca:	50                   	push   eax
   20ecb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20ece:	e8 8d fe ff ff       	call   20d60 <fatfs_add_free_space>
   20ed3:	83 c4 10             	add    esp,0x10
   20ed6:	85 c0                	test   eax,eax
   20ed8:	75 07                	jne    20ee1 <fatfs_allocate_free_space+0xd9>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:122
            return 0;
   20eda:	b8 00 00 00 00       	mov    eax,0x0
   20edf:	eb 05                	jmp    20ee6 <fatfs_allocate_free_space+0xde>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:124

    return 1;
   20ee1:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:125 (discriminator 1)
}
   20ee6:	c9                   	leave  
   20ee7:	c3                   	ret    

00020ee8 <fatfs_find_free_dir_offset>:
fatfs_find_free_dir_offset():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:131
//-----------------------------------------------------------------------------
// fatfs_find_free_dir_offset: Find a free space in the directory for a new entry
// which takes up 'entryCount' blocks (or allocate some more)
//-----------------------------------------------------------------------------
static int fatfs_find_free_dir_offset(struct fatfs *fs, uint32 dirCluster, int entryCount, uint32 *pSector, uint8 *pOffset)
{
   20ee8:	55                   	push   ebp
   20ee9:	89 e5                	mov    ebp,esp
   20eeb:	83 ec 28             	sub    esp,0x28
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:133
    struct fat_dir_entry *directoryEntry;
    uint8 item=0;
   20eee:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:134
    uint16 recordoffset = 0;
   20ef2:	66 c7 45 e6 00 00    	mov    WORD PTR [ebp-0x1a],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:135
    uint8 i=0;
   20ef8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:136
    int x=0;
   20efc:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:137
    int possible_spaces = 0;
   20f03:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:138
    int start_recorded = 0;
   20f0a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:141

    // No entries required?
    if (entryCount == 0)
   20f11:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   20f15:	75 0a                	jne    20f21 <fatfs_find_free_dir_offset+0x39>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:142
        return 0;
   20f17:	b8 00 00 00 00       	mov    eax,0x0
   20f1c:	e9 fd 01 00 00       	jmp    2111e <fatfs_find_free_dir_offset+0x236>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:148

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   20f21:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20f24:	8d 50 01             	lea    edx,[eax+0x1]
   20f27:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   20f2a:	6a 00                	push   0x0
   20f2c:	50                   	push   eax
   20f2d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   20f30:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20f33:	e8 34 a3 ff ff       	call   1b26c <fatfs_sector_reader>
   20f38:	83 c4 10             	add    esp,0x10
   20f3b:	85 c0                	test   eax,eax
   20f3d:	0f 84 1a 01 00 00    	je     2105d <fatfs_find_free_dir_offset+0x175>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:151
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   20f43:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   20f47:	e9 02 01 00 00       	jmp    2104e <fatfs_find_free_dir_offset+0x166>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:154
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   20f4c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   20f50:	c1 e0 05             	shl    eax,0x5
   20f53:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:157

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   20f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20f5a:	8d 50 44             	lea    edx,[eax+0x44]
   20f5d:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   20f61:	01 d0                	add    eax,edx
   20f63:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:160

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   20f66:	83 ec 0c             	sub    esp,0xc
   20f69:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   20f6c:	e8 09 e4 ff ff       	call   1f37a <fatfs_entry_lfn_text>
   20f71:	83 c4 10             	add    esp,0x10
   20f74:	85 c0                	test   eax,eax
   20f76:	74 2c                	je     20fa4 <fatfs_find_free_dir_offset+0xbc>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:163
                {
                    // First entry?
                    if (possible_spaces == 0)
   20f78:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   20f7c:	75 1d                	jne    20f9b <fatfs_find_free_dir_offset+0xb3>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:166
                    {
                        // Store start
                        *pSector = x-1;
   20f7e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20f81:	83 e8 01             	sub    eax,0x1
   20f84:	89 c2                	mov    edx,eax
   20f86:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   20f89:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:167
                        *pOffset = item;
   20f8b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   20f8e:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   20f92:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:168
                        start_recorded = 1;
   20f94:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:173
                    }

                    // Increment the count in-case the file turns
                    // out to be deleted...
                    possible_spaces++;
   20f9b:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
   20f9f:	e9 a0 00 00 00       	jmp    21044 <fatfs_find_free_dir_offset+0x15c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:179
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   20fa4:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   20fa8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   20fab:	0f b6 44 02 44       	movzx  eax,BYTE PTR [edx+eax*1+0x44]
   20fb0:	3c e5                	cmp    al,0xe5
   20fb2:	75 39                	jne    20fed <fatfs_find_free_dir_offset+0x105>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:182
                    {
                        // First entry?
                        if (possible_spaces == 0)
   20fb4:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   20fb8:	75 1d                	jne    20fd7 <fatfs_find_free_dir_offset+0xef>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:185
                        {
                            // Store start
                            *pSector = x-1;
   20fba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20fbd:	83 e8 01             	sub    eax,0x1
   20fc0:	89 c2                	mov    edx,eax
   20fc2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   20fc5:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:186
                            *pOffset = item;
   20fc7:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   20fca:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   20fce:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:187
                            start_recorded = 1;
   20fd0:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:190
                        }

                        possible_spaces++;
   20fd7:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:193

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   20fdb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20fde:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   20fe1:	7c 61                	jl     21044 <fatfs_find_free_dir_offset+0x15c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:194
                            return 1;
   20fe3:	b8 01 00 00 00       	mov    eax,0x1
   20fe8:	e9 31 01 00 00       	jmp    2111e <fatfs_find_free_dir_offset+0x236>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:199

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   20fed:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   20ff1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   20ff4:	0f b6 44 02 44       	movzx  eax,BYTE PTR [edx+eax*1+0x44]
   20ff9:	84 c0                	test   al,al
   20ffb:	75 39                	jne    21036 <fatfs_find_free_dir_offset+0x14e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:202
                    {
                        // First entry?
                        if (possible_spaces == 0)
   20ffd:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   21001:	75 1d                	jne    21020 <fatfs_find_free_dir_offset+0x138>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:205
                        {
                            // Store start
                            *pSector = x-1;
   21003:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21006:	83 e8 01             	sub    eax,0x1
   21009:	89 c2                	mov    edx,eax
   2100b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   2100e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:206
                            *pOffset = item;
   21010:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   21013:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   21017:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:207
                            start_recorded = 1;
   21019:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:211
                        }

                        // Increment the blank entries count
                        possible_spaces++;
   21020:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:214

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   21024:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   21027:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   2102a:	7c 18                	jl     21044 <fatfs_find_free_dir_offset+0x15c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:215
                            return 1;
   2102c:	b8 01 00 00 00       	mov    eax,0x1
   21031:	e9 e8 00 00 00       	jmp    2111e <fatfs_find_free_dir_offset+0x236>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:221
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   21036:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:222
                        start_recorded = 0;
   2103d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:151 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   21044:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   21048:	83 c0 01             	add    eax,0x1
   2104b:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:151 (discriminator 1)
   2104e:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   21052:	0f 86 f4 fe ff ff    	jbe    20f4c <fatfs_find_free_dir_offset+0x64>
   21058:	e9 c4 fe ff ff       	jmp    20f21 <fatfs_find_free_dir_offset+0x39>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:233
        else
        {
            uint32 newCluster;

            // Get a new cluster for directory
            if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &newCluster))
   2105d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21060:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   21063:	83 ec 04             	sub    esp,0x4
   21066:	8d 55 dc             	lea    edx,[ebp-0x24]
   21069:	52                   	push   edx
   2106a:	50                   	push   eax
   2106b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2106e:	e8 15 f8 ff ff       	call   20888 <fatfs_find_blank_cluster>
   21073:	83 c4 10             	add    esp,0x10
   21076:	85 c0                	test   eax,eax
   21078:	75 0a                	jne    21084 <fatfs_find_free_dir_offset+0x19c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:234
                return 0;
   2107a:	b8 00 00 00 00       	mov    eax,0x0
   2107f:	e9 9a 00 00 00       	jmp    2111e <fatfs_find_free_dir_offset+0x236>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:237

            // Add cluster to end of directory tree
            if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
   21084:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   21087:	83 ec 04             	sub    esp,0x4
   2108a:	50                   	push   eax
   2108b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2108e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21091:	e8 06 fb ff ff       	call   20b9c <fatfs_fat_add_cluster_to_chain>
   21096:	83 c4 10             	add    esp,0x10
   21099:	85 c0                	test   eax,eax
   2109b:	75 07                	jne    210a4 <fatfs_find_free_dir_offset+0x1bc>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:238
                return 0;
   2109d:	b8 00 00 00 00       	mov    eax,0x0
   210a2:	eb 7a                	jmp    2111e <fatfs_find_free_dir_offset+0x236>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:241

            // Erase new directory cluster
            memset(fs->currentsector.sector, 0x00, FAT_SECTOR_SIZE);
   210a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   210a7:	83 c0 44             	add    eax,0x44
   210aa:	83 ec 04             	sub    esp,0x4
   210ad:	68 00 02 00 00       	push   0x200
   210b2:	6a 00                	push   0x0
   210b4:	50                   	push   eax
   210b5:	e8 f3 3e 00 00       	call   24fad <memset>
   210ba:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:242
            for (i=0;i<fs->sectors_per_cluster;i++)
   210bd:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
   210c1:	eb 2b                	jmp    210ee <fatfs_find_free_dir_offset+0x206>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:244
            {
                if (!fatfs_write_sector(fs, newCluster, i, 0))
   210c3:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   210c7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   210ca:	6a 00                	push   0x0
   210cc:	52                   	push   edx
   210cd:	50                   	push   eax
   210ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   210d1:	e8 eb a3 ff ff       	call   1b4c1 <fatfs_write_sector>
   210d6:	83 c4 10             	add    esp,0x10
   210d9:	85 c0                	test   eax,eax
   210db:	75 07                	jne    210e4 <fatfs_find_free_dir_offset+0x1fc>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:245
                    return 0;
   210dd:	b8 00 00 00 00       	mov    eax,0x0
   210e2:	eb 3a                	jmp    2111e <fatfs_find_free_dir_offset+0x236>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:242 (discriminator 2)
            if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
                return 0;

            // Erase new directory cluster
            memset(fs->currentsector.sector, 0x00, FAT_SECTOR_SIZE);
            for (i=0;i<fs->sectors_per_cluster;i++)
   210e4:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   210e8:	83 c0 01             	add    eax,0x1
   210eb:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:242 (discriminator 1)
   210ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   210f1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   210f4:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
   210f7:	77 ca                	ja     210c3 <fatfs_find_free_dir_offset+0x1db>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:249
                if (!fatfs_write_sector(fs, newCluster, i, 0))
                    return 0;
            }

            // If non of the name fitted on previous sectors
            if (!start_recorded)
   210f9:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   210fd:	75 1a                	jne    21119 <fatfs_find_free_dir_offset+0x231>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:252
            {
                // Store start
                *pSector = (x-1);
   210ff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21102:	83 e8 01             	sub    eax,0x1
   21105:	89 c2                	mov    edx,eax
   21107:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   2110a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:253
                *pOffset = 0;
   2110c:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   2110f:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:254
                start_recorded = 1;
   21112:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:257
            }

            return 1;
   21119:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:262 (discriminator 2)
        }
    } // End of while loop

    return 0;
}
   2111e:	c9                   	leave  
   2111f:	c3                   	ret    

00021120 <fatfs_add_file_entry>:
fatfs_add_file_entry():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:267
//-----------------------------------------------------------------------------
// fatfs_add_file_entry: Add a directory entry to a location found by FindFreeOffset
//-----------------------------------------------------------------------------
int fatfs_add_file_entry(struct fatfs *fs, uint32 dirCluster, char *filename, char *shortfilename, uint32 startCluster, uint32 size, int dir)
{
   21120:	55                   	push   ebp
   21121:	89 e5                	mov    ebp,esp
   21123:	83 ec 58             	sub    esp,0x58
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:268
    uint8 item=0;
   21126:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:269
    uint16 recordoffset = 0;
   2112a:	66 c7 45 da 00 00    	mov    WORD PTR [ebp-0x26],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:270
    uint8 i=0;
   21130:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:271
    uint32 x=0;
   21134:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:274
    int entryCount;
    struct fat_dir_entry shortEntry;
    int dirtySector = 0;
   2113b:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:276

    uint32 dirSector = 0;
   21142:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [ebp-0x4c],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:277
    uint8 dirOffset = 0;
   21149:	c6 45 b3 00          	mov    BYTE PTR [ebp-0x4d],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:278
    int foundEnd = 0;
   2114d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:284

    uint8 checksum;
    uint8 *pSname;

    // No write access?
    if (!fs->disk_io.write_media)
   21154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21157:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   2115a:	85 c0                	test   eax,eax
   2115c:	75 0a                	jne    21168 <fatfs_add_file_entry+0x48>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:285
        return 0;
   2115e:	b8 00 00 00 00       	mov    eax,0x0
   21163:	e9 0c 02 00 00       	jmp    21374 <fatfs_add_file_entry+0x254>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:290

#if FATFS_INC_LFN_SUPPORT
    // How many LFN entries are required?
    // NOTE: We always request one LFN even if it would fit in a SFN!
    entryCount = fatfs_lfn_entries_required(filename);
   21168:	83 ec 0c             	sub    esp,0xc
   2116b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   2116e:	e8 55 e3 ff ff       	call   1f4c8 <fatfs_lfn_entries_required>
   21173:	83 c4 10             	add    esp,0x10
   21176:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:291
    if (!entryCount)
   21179:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   2117d:	75 0a                	jne    21189 <fatfs_add_file_entry+0x69>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:292
        return 0;
   2117f:	b8 00 00 00 00       	mov    eax,0x0
   21184:	e9 eb 01 00 00       	jmp    21374 <fatfs_add_file_entry+0x254>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:299
    entryCount = 0;
#endif

    // Find space in the directory for this filename (or allocate some more)
    // NOTE: We need to find space for at least the LFN + SFN (or just the SFN if LFNs not supported).
    if (!fatfs_find_free_dir_offset(fs, dirCluster, entryCount + 1, &dirSector, &dirOffset))
   21189:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2118c:	8d 50 01             	lea    edx,[eax+0x1]
   2118f:	83 ec 0c             	sub    esp,0xc
   21192:	8d 45 b3             	lea    eax,[ebp-0x4d]
   21195:	50                   	push   eax
   21196:	8d 45 b4             	lea    eax,[ebp-0x4c]
   21199:	50                   	push   eax
   2119a:	52                   	push   edx
   2119b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2119e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   211a1:	e8 42 fd ff ff       	call   20ee8 <fatfs_find_free_dir_offset>
   211a6:	83 c4 20             	add    esp,0x20
   211a9:	85 c0                	test   eax,eax
   211ab:	75 0a                	jne    211b7 <fatfs_add_file_entry+0x97>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:300
        return 0;
   211ad:	b8 00 00 00 00       	mov    eax,0x0
   211b2:	e9 bd 01 00 00       	jmp    21374 <fatfs_add_file_entry+0x254>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:303

    // Generate checksum of short filename
    pSname = (uint8*)shortfilename;
   211b7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   211ba:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:304
    checksum = 0;
   211bd:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:305
    for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;
   211c1:	c6 45 f6 0b          	mov    BYTE PTR [ebp-0xa],0xb
   211c5:	eb 3b                	jmp    21202 <fatfs_add_file_entry+0xe2>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:305 (discriminator 7)
   211c7:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
   211cb:	83 e0 01             	and    eax,0x1
   211ce:	85 c0                	test   eax,eax
   211d0:	74 07                	je     211d9 <fatfs_add_file_entry+0xb9>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:305 (discriminator 2)
   211d2:	ba 80 ff ff ff       	mov    edx,0xffffff80
   211d7:	eb 05                	jmp    211de <fatfs_add_file_entry+0xbe>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:305 (discriminator 3)
   211d9:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:305 (discriminator 5)
   211de:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
   211e2:	d0 e8                	shr    al,1
   211e4:	8d 0c 02             	lea    ecx,[edx+eax*1]
   211e7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   211ea:	8d 50 01             	lea    edx,[eax+0x1]
   211ed:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
   211f0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   211f3:	01 c8                	add    eax,ecx
   211f5:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
   211f8:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   211fc:	83 e8 01             	sub    eax,0x1
   211ff:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:305 (discriminator 6)
   21202:	80 7d f6 00          	cmp    BYTE PTR [ebp-0xa],0x0
   21206:	75 bf                	jne    211c7 <fatfs_add_file_entry+0xa7>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:308

    // Start from current sector where space was found!
    x = dirSector;
   21208:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   2120b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:314

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   2120e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21211:	8d 50 01             	lea    edx,[eax+0x1]
   21214:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   21217:	6a 00                	push   0x0
   21219:	50                   	push   eax
   2121a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2121d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21220:	e8 47 a0 ff ff       	call   1b26c <fatfs_sector_reader>
   21225:	83 c4 10             	add    esp,0x10
   21228:	85 c0                	test   eax,eax
   2122a:	0f 84 3f 01 00 00    	je     2136f <fatfs_add_file_entry+0x24f>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:317
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   21230:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   21234:	e9 ea 00 00 00       	jmp    21323 <fatfs_add_file_entry+0x203>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:320
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   21239:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   2123d:	c1 e0 05             	shl    eax,0x5
   21240:	66 89 45 da          	mov    WORD PTR [ebp-0x26],ax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:323

                // If the start position for the entry has been found
                if (foundEnd==0)
   21244:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   21248:	75 1d                	jne    21267 <fatfs_add_file_entry+0x147>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:324
                    if ( (dirSector==(x-1)) && (dirOffset==item) )
   2124a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2124d:	8d 50 ff             	lea    edx,[eax-0x1]
   21250:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   21253:	39 c2                	cmp    edx,eax
   21255:	75 10                	jne    21267 <fatfs_add_file_entry+0x147>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:324 (discriminator 1)
   21257:	0f b6 45 b3          	movzx  eax,BYTE PTR [ebp-0x4d]
   2125b:	3a 45 f7             	cmp    al,BYTE PTR [ebp-0x9]
   2125e:	75 07                	jne    21267 <fatfs_add_file_entry+0x147>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:325
                        foundEnd = 1;
   21260:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:328

                // Start adding filename
                if (foundEnd)
   21267:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   2126b:	0f 84 a8 00 00 00    	je     21319 <fatfs_add_file_entry+0x1f9>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:330
                {
                    if (entryCount==0)
   21271:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   21275:	75 74                	jne    212eb <fatfs_add_file_entry+0x1cb>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:333
                    {
                        // Short filename
                        fatfs_sfn_create_entry(shortfilename, size, startCluster, &shortEntry, dir);
   21277:	83 ec 0c             	sub    esp,0xc
   2127a:	ff 75 20             	push   DWORD PTR [ebp+0x20]
   2127d:	8d 45 ba             	lea    eax,[ebp-0x46]
   21280:	50                   	push   eax
   21281:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   21284:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
   21287:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   2128a:	e8 e8 e3 ff ff       	call   1f677 <fatfs_sfn_create_entry>
   2128f:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:337

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update create, access & modify time & date
                        fatfs_update_timestamps(&shortEntry, 1, 1, 1);
   21292:	6a 01                	push   0x1
   21294:	6a 01                	push   0x1
   21296:	6a 01                	push   0x1
   21298:	8d 45 ba             	lea    eax,[ebp-0x46]
   2129b:	50                   	push   eax
   2129c:	e8 3b a7 ff ff       	call   1b9dc <fatfs_update_timestamps>
   212a1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:340
#endif

                        memcpy(&fs->currentsector.sector[recordoffset], &shortEntry, sizeof(shortEntry));
   212a4:	0f b7 45 da          	movzx  eax,WORD PTR [ebp-0x26]
   212a8:	8d 50 40             	lea    edx,[eax+0x40]
   212ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   212ae:	01 d0                	add    eax,edx
   212b0:	8d 50 04             	lea    edx,[eax+0x4]
   212b3:	83 ec 04             	sub    esp,0x4
   212b6:	6a 20                	push   0x20
   212b8:	8d 45 ba             	lea    eax,[ebp-0x46]
   212bb:	50                   	push   eax
   212bc:	52                   	push   edx
   212bd:	e8 de 46 00 00       	call   259a0 <memcpy>
   212c2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:343

                        // Writeback
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   212c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   212c8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   212cb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   212ce:	8d 4a 44             	lea    ecx,[edx+0x44]
   212d1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   212d4:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   212da:	83 ec 04             	sub    esp,0x4
   212dd:	6a 01                	push   0x1
   212df:	51                   	push   ecx
   212e0:	52                   	push   edx
   212e1:	ff d0                	call   eax
   212e3:	83 c4 10             	add    esp,0x10
   212e6:	e9 89 00 00 00       	jmp    21374 <fatfs_add_file_entry+0x254>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:348
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
   212eb:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:351

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   212ef:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
   212f3:	0f b7 55 da          	movzx  edx,WORD PTR [ebp-0x26]
   212f7:	8d 4a 40             	lea    ecx,[edx+0x40]
   212fa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   212fd:	01 ca                	add    edx,ecx
   212ff:	83 c2 04             	add    edx,0x4
   21302:	50                   	push   eax
   21303:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   21306:	52                   	push   edx
   21307:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   2130a:	e8 fa e1 ff ff       	call   1f509 <fatfs_filename_to_lfn>
   2130f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:352
                        dirtySector = 1;
   21312:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:317 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   21319:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   2131d:	83 c0 01             	add    eax,0x1
   21320:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:317 (discriminator 1)
   21323:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   21327:	0f 86 0c ff ff ff    	jbe    21239 <fatfs_add_file_entry+0x119>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:359
#endif
                }
            } // End of if

            // Write back to disk before loading another sector
            if (dirtySector)
   2132d:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   21331:	0f 84 d7 fe ff ff    	je     2120e <fatfs_add_file_entry+0xee>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:361
            {
                if (!fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1))
   21337:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2133a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   2133d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   21340:	8d 4a 44             	lea    ecx,[edx+0x44]
   21343:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   21346:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   2134c:	83 ec 04             	sub    esp,0x4
   2134f:	6a 01                	push   0x1
   21351:	51                   	push   ecx
   21352:	52                   	push   edx
   21353:	ff d0                	call   eax
   21355:	83 c4 10             	add    esp,0x10
   21358:	85 c0                	test   eax,eax
   2135a:	75 07                	jne    21363 <fatfs_add_file_entry+0x243>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:362
                    return 0;
   2135c:	b8 00 00 00 00       	mov    eax,0x0
   21361:	eb 11                	jmp    21374 <fatfs_add_file_entry+0x254>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:364

                dirtySector = 0;
   21363:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   2136a:	e9 9f fe ff ff       	jmp    2120e <fatfs_add_file_entry+0xee>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:368
            }
        }
        else
            return 0;
   2136f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_write.c:372 (discriminator 2)
    } // End of while loop

    return 0;
}
   21374:	c9                   	leave  
   21375:	c3                   	ret    
   21376:	66 90                	xchg   ax,ax

00021378 <printMBR>:
printMBR():
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:13
uint8_t partBuffer[512*20]; //10240
gptHeader_t* gptHdr;
gptPartEntry_t* gptPart;

void printMBR(struct mbr_t* mbr)
{
   21378:	55                   	push   ebp
   21379:	89 e5                	mov    ebp,esp
   2137b:	57                   	push   edi
   2137c:	56                   	push   esi
   2137d:	53                   	push   ebx
   2137e:	83 ec 1c             	sub    esp,0x1c
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:14
    printk("Part#\tStart\tEnd\t\tTotal\t\tPartType\tBoot\n");
   21381:	83 ec 0c             	sub    esp,0xc
   21384:	68 60 38 08 00       	push   0x83860
   21389:	e8 a5 5c 00 00       	call   27033 <printk>
   2138e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:15
    for (int cnt=0;cnt<mbr->partCount;cnt++)
   21391:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   21398:	e9 8b 00 00 00       	jmp    21428 <printMBR+0xb0>
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:17
    {
        if (mbr->parts[cnt].partStartSector>0)
   2139d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   213a0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   213a3:	c1 e2 04             	shl    edx,0x4
   213a6:	01 d0                	add    eax,edx
   213a8:	8b 00                	mov    eax,DWORD PTR [eax]
   213aa:	85 c0                	test   eax,eax
   213ac:	74 76                	je     21424 <printMBR+0xac>
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:18
            printk("%u\t\t%u\t\t%u\t%u\t\t%u\t\t%s\n",cnt,mbr->parts[cnt].partStartSector, mbr->parts[cnt].partEndSector, mbr->parts[cnt].partTotalSectors,mbr->parts[cnt].systemID,mbr->parts[cnt].bootable?"Y":"N");
   213ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   213b1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   213b4:	c1 e2 04             	shl    edx,0x4
   213b7:	01 d0                	add    eax,edx
   213b9:	83 c0 0c             	add    eax,0xc
   213bc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   213bf:	84 c0                	test   al,al
   213c1:	74 07                	je     213ca <printMBR+0x52>
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:18 (discriminator 1)
   213c3:	bf 87 38 08 00       	mov    edi,0x83887
   213c8:	eb 05                	jmp    213cf <printMBR+0x57>
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:18 (discriminator 2)
   213ca:	bf 89 38 08 00       	mov    edi,0x83889
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:18 (discriminator 4)
   213cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   213d2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   213d5:	c1 e2 04             	shl    edx,0x4
   213d8:	01 d0                	add    eax,edx
   213da:	83 c0 0d             	add    eax,0xd
   213dd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   213e0:	0f b6 d8             	movzx  ebx,al
   213e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   213e6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   213e9:	c1 e2 04             	shl    edx,0x4
   213ec:	01 d0                	add    eax,edx
   213ee:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   213f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   213f4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   213f7:	c1 e2 04             	shl    edx,0x4
   213fa:	01 d0                	add    eax,edx
   213fc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   213ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21402:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
   21405:	c1 e6 04             	shl    esi,0x4
   21408:	01 f0                	add    eax,esi
   2140a:	8b 00                	mov    eax,DWORD PTR [eax]
   2140c:	83 ec 04             	sub    esp,0x4
   2140f:	57                   	push   edi
   21410:	53                   	push   ebx
   21411:	51                   	push   ecx
   21412:	52                   	push   edx
   21413:	50                   	push   eax
   21414:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   21417:	68 8b 38 08 00       	push   0x8388b
   2141c:	e8 12 5c 00 00       	call   27033 <printk>
   21421:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:15 (discriminator 2)
gptPartEntry_t* gptPart;

void printMBR(struct mbr_t* mbr)
{
    printk("Part#\tStart\tEnd\t\tTotal\t\tPartType\tBoot\n");
    for (int cnt=0;cnt<mbr->partCount;cnt++)
   21424:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:15 (discriminator 1)
   21428:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2142b:	8b 80 00 04 00 00    	mov    eax,DWORD PTR [eax+0x400]
   21431:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   21434:	0f 8f 63 ff ff ff    	jg     2139d <printMBR+0x25>
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:20
    {
        if (mbr->parts[cnt].partStartSector>0)
            printk("%u\t\t%u\t\t%u\t%u\t\t%u\t\t%s\n",cnt,mbr->parts[cnt].partStartSector, mbr->parts[cnt].partEndSector, mbr->parts[cnt].partTotalSectors,mbr->parts[cnt].systemID,mbr->parts[cnt].bootable?"Y":"N");
    }
    printk("\n");
   2143a:	83 ec 0c             	sub    esp,0xc
   2143d:	68 a2 38 08 00       	push   0x838a2
   21442:	e8 ec 5b 00 00       	call   27033 <printk>
   21447:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:21
}
   2144a:	90                   	nop
   2144b:	8d 65 f4             	lea    esp,[ebp-0xc]
   2144e:	5b                   	pop    ebx
   2144f:	5e                   	pop    esi
   21450:	5f                   	pop    edi
   21451:	5d                   	pop    ebp
   21452:	c3                   	ret    

00021453 <parseMBR>:
parseMBR():
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:24
    
bool parseMBR(struct ataDeviceInfo_t* devInfo, struct mbr_t* mbr)
{
   21453:	55                   	push   ebp
   21454:	89 e5                	mov    ebp,esp
   21456:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:25
    HBA_PORT* port=(HBA_PORT*)devInfo->ioPort;
   21459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2145c:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21462:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:27
    
    memset(mbr,0,sizeof(struct mbr_t));
   21465:	83 ec 04             	sub    esp,0x4
   21468:	68 17 04 00 00       	push   0x417
   2146d:	6a 00                	push   0x0
   2146f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   21472:	e8 36 3b 00 00       	call   24fad <memset>
   21477:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:28
    mbr->parts[0].partStartSector=0;
   2147a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2147d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:29
    printd(DEBUG_HARDDRIVE,"devInfo->ABAR=0x%08X\n",devInfo->ABAR);
   21483:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21486:	8b 80 6f 02 00 00    	mov    eax,DWORD PTR [eax+0x26f]
   2148c:	83 ec 04             	sub    esp,0x4
   2148f:	50                   	push   eax
   21490:	68 a4 38 08 00       	push   0x838a4
   21495:	6a 08                	push   0x8
   21497:	e8 b7 5b 00 00       	call   27053 <printd>
   2149c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:30
    if (devInfo->ABAR)
   2149f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   214a2:	8b 80 6f 02 00 00    	mov    eax,DWORD PTR [eax+0x26f]
   214a8:	85 c0                	test   eax,eax
   214aa:	74 66                	je     21512 <parseMBR+0xbf>
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:32
    {
        printd(DEBUG_HARDDRIVE,"Disk is SATA\n");
   214ac:	83 ec 08             	sub    esp,0x8
   214af:	68 ba 38 08 00       	push   0x838ba
   214b4:	6a 08                	push   0x8
   214b6:	e8 98 5b 00 00       	call   27053 <printd>
   214bb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:33
        ahciSetCurrentDisk(port);
   214be:	83 ec 0c             	sub    esp,0xc
   214c1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   214c4:	e8 6a 3a ff ff       	call   14f33 <ahciSetCurrentDisk>
   214c9:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:34
        bool lResult=ahciRead(port,0,mbrBuffer,1);
   214cc:	6a 01                	push   0x1
   214ce:	68 a0 8d 09 00       	push   0x98da0
   214d3:	6a 00                	push   0x0
   214d5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   214d8:	e8 8a 3a ff ff       	call   14f67 <ahciRead>
   214dd:	83 c4 10             	add    esp,0x10
   214e0:	85 c0                	test   eax,eax
   214e2:	0f 95 c0             	setne  al
   214e5:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:35
        if (!lResult)
   214e8:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   214ec:	83 f0 01             	xor    eax,0x1
   214ef:	84 c0                	test   al,al
   214f1:	74 75                	je     21568 <parseMBR+0x115>
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:37
        {
            printk("Could not read ATA MBR (0x%08X)", lResult);
   214f3:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   214f7:	83 ec 08             	sub    esp,0x8
   214fa:	50                   	push   eax
   214fb:	68 c8 38 08 00       	push   0x838c8
   21500:	e8 2e 5b 00 00       	call   27033 <printk>
   21505:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:38
            return false;
   21508:	b8 00 00 00 00       	mov    eax,0x0
   2150d:	e9 98 03 00 00       	jmp    218aa <parseMBR+0x457>
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:43
        }
    }
    else
    {
        printd(DEBUG_HARDDRIVE,"Disk is ATA\n");
   21512:	83 ec 08             	sub    esp,0x8
   21515:	68 e8 38 08 00       	push   0x838e8
   2151a:	6a 08                	push   0x8
   2151c:	e8 32 5b 00 00       	call   27053 <printd>
   21521:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:44
        int lResult=ataReadDisk(devInfo, mbr->parts, 0, mbrBuffer, 1);
   21524:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21527:	83 ec 0c             	sub    esp,0xc
   2152a:	6a 01                	push   0x1
   2152c:	68 a0 8d 09 00       	push   0x98da0
   21531:	6a 00                	push   0x0
   21533:	50                   	push   eax
   21534:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21537:	e8 ff 14 00 00       	call   22a3b <ataReadDisk>
   2153c:	83 c4 20             	add    esp,0x20
   2153f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:45
        if (lResult!=512)
   21542:	81 7d ec 00 02 00 00 	cmp    DWORD PTR [ebp-0x14],0x200
   21549:	74 1d                	je     21568 <parseMBR+0x115>
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:47
        {
            printk("Could not read ATA MBR (0x%08X)", lResult);
   2154b:	83 ec 08             	sub    esp,0x8
   2154e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   21551:	68 c8 38 08 00       	push   0x838c8
   21556:	e8 d8 5a 00 00       	call   27033 <printk>
   2155b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:48
            return false;
   2155e:	b8 00 00 00 00       	mov    eax,0x0
   21563:	e9 42 03 00 00       	jmp    218aa <parseMBR+0x457>
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:51
        }
    }
    memcpy(mbr->diskID, &mbrBuffer[0x1b4], 10);
   21568:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2156b:	05 04 04 00 00       	add    eax,0x404
   21570:	83 ec 04             	sub    esp,0x4
   21573:	6a 0a                	push   0xa
   21575:	68 54 8f 09 00       	push   0x98f54
   2157a:	50                   	push   eax
   2157b:	e8 20 44 00 00       	call   259a0 <memcpy>
   21580:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:52
    mbr->validBootSector=mbrBuffer[0x1FE]==0x55 && mbrBuffer[0x1FF]==0xAA;
   21583:	0f b6 05 9e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9e
   2158a:	3c 55                	cmp    al,0x55
   2158c:	75 12                	jne    215a0 <parseMBR+0x14d>
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:52 (discriminator 1)
   2158e:	0f b6 05 9f 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9f
   21595:	3c aa                	cmp    al,0xaa
   21597:	75 07                	jne    215a0 <parseMBR+0x14d>
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:52 (discriminator 3)
   21599:	b8 01 00 00 00       	mov    eax,0x1
   2159e:	eb 05                	jmp    215a5 <parseMBR+0x152>
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:52 (discriminator 4)
   215a0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:52 (discriminator 6)
   215a5:	83 e0 01             	and    eax,0x1
   215a8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   215ab:	88 82 0e 04 00 00    	mov    BYTE PTR [edx+0x40e],al
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:53 (discriminator 6)
    mbr->parts[0].bootable = mbrBuffer[MBR_PART1_OFFSET+0]==0x80;
   215b1:	0f b6 05 5e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f5e
   215b8:	3c 80                	cmp    al,0x80
   215ba:	0f 94 c2             	sete   dl
   215bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   215c0:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:54 (discriminator 6)
    mbr->parts[0].systemID = mbrBuffer[MBR_PART1_OFFSET+4];
   215c3:	0f b6 15 62 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f62
   215ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   215cd:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:55 (discriminator 6)
    mbr->parts[0].partStartSector = mbrBuffer[MBR_PART1_OFFSET+8] | (mbrBuffer[MBR_PART1_OFFSET+9]<<8) | (mbrBuffer[MBR_PART1_OFFSET+10]<<16) | (mbrBuffer[MBR_PART1_OFFSET+11]<<24);
   215d0:	0f b6 05 66 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f66
   215d7:	0f b6 c0             	movzx  eax,al
   215da:	0f b6 15 67 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f67
   215e1:	0f b6 d2             	movzx  edx,dl
   215e4:	c1 e2 08             	shl    edx,0x8
   215e7:	09 c2                	or     edx,eax
   215e9:	0f b6 05 68 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f68
   215f0:	0f b6 c0             	movzx  eax,al
   215f3:	c1 e0 10             	shl    eax,0x10
   215f6:	09 c2                	or     edx,eax
   215f8:	0f b6 05 69 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f69
   215ff:	0f b6 c0             	movzx  eax,al
   21602:	c1 e0 18             	shl    eax,0x18
   21605:	09 d0                	or     eax,edx
   21607:	89 c2                	mov    edx,eax
   21609:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2160c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:56 (discriminator 6)
    mbr->parts[0].partTotalSectors = mbrBuffer[MBR_PART1_OFFSET+12] | (mbrBuffer[MBR_PART1_OFFSET+13]<<8) | (mbrBuffer[MBR_PART1_OFFSET+14]<<16) | (mbrBuffer[MBR_PART1_OFFSET+15]<<24);
   2160e:	0f b6 05 6a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6a
   21615:	0f b6 c0             	movzx  eax,al
   21618:	0f b6 15 6b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f6b
   2161f:	0f b6 d2             	movzx  edx,dl
   21622:	c1 e2 08             	shl    edx,0x8
   21625:	09 c2                	or     edx,eax
   21627:	0f b6 05 6c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6c
   2162e:	0f b6 c0             	movzx  eax,al
   21631:	c1 e0 10             	shl    eax,0x10
   21634:	09 c2                	or     edx,eax
   21636:	0f b6 05 6d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6d
   2163d:	0f b6 c0             	movzx  eax,al
   21640:	c1 e0 18             	shl    eax,0x18
   21643:	09 d0                	or     eax,edx
   21645:	89 c2                	mov    edx,eax
   21647:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2164a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:57 (discriminator 6)
    mbr->parts[0].partEndSector = mbr->parts[0].partStartSector + mbr->parts[0].partTotalSectors;
   2164d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21650:	8b 10                	mov    edx,DWORD PTR [eax]
   21652:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21655:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   21658:	01 c2                	add    edx,eax
   2165a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2165d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:59 (discriminator 6)

    mbr->parts[1].bootable = mbrBuffer[MBR_PART2_OFFSET+0]==0x80;
   21660:	0f b6 05 6e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6e
   21667:	3c 80                	cmp    al,0x80
   21669:	0f 94 c2             	sete   dl
   2166c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2166f:	88 50 1c             	mov    BYTE PTR [eax+0x1c],dl
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:60 (discriminator 6)
    mbr->parts[1].systemID = mbrBuffer[MBR_PART2_OFFSET+4];
   21672:	0f b6 15 72 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f72
   21679:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2167c:	88 50 1d             	mov    BYTE PTR [eax+0x1d],dl
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:61 (discriminator 6)
    mbr->parts[1].partStartSector = mbrBuffer[MBR_PART2_OFFSET+8] | (mbrBuffer[MBR_PART2_OFFSET+9]<<8) | (mbrBuffer[MBR_PART2_OFFSET+10]<<16) | (mbrBuffer[MBR_PART2_OFFSET+11]<<24);
   2167f:	0f b6 05 76 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f76
   21686:	0f b6 c0             	movzx  eax,al
   21689:	0f b6 15 77 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f77
   21690:	0f b6 d2             	movzx  edx,dl
   21693:	c1 e2 08             	shl    edx,0x8
   21696:	09 c2                	or     edx,eax
   21698:	0f b6 05 78 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f78
   2169f:	0f b6 c0             	movzx  eax,al
   216a2:	c1 e0 10             	shl    eax,0x10
   216a5:	09 c2                	or     edx,eax
   216a7:	0f b6 05 79 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f79
   216ae:	0f b6 c0             	movzx  eax,al
   216b1:	c1 e0 18             	shl    eax,0x18
   216b4:	09 d0                	or     eax,edx
   216b6:	89 c2                	mov    edx,eax
   216b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   216bb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:62 (discriminator 6)
    mbr->parts[1].partTotalSectors = mbrBuffer[MBR_PART2_OFFSET+12] | (mbrBuffer[MBR_PART2_OFFSET+13]<<8) | (mbrBuffer[MBR_PART2_OFFSET+14]<<16) | (mbrBuffer[MBR_PART2_OFFSET+15]<<24);
   216be:	0f b6 05 7a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7a
   216c5:	0f b6 c0             	movzx  eax,al
   216c8:	0f b6 15 7b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f7b
   216cf:	0f b6 d2             	movzx  edx,dl
   216d2:	c1 e2 08             	shl    edx,0x8
   216d5:	09 c2                	or     edx,eax
   216d7:	0f b6 05 7c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7c
   216de:	0f b6 c0             	movzx  eax,al
   216e1:	c1 e0 10             	shl    eax,0x10
   216e4:	09 c2                	or     edx,eax
   216e6:	0f b6 05 7d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7d
   216ed:	0f b6 c0             	movzx  eax,al
   216f0:	c1 e0 18             	shl    eax,0x18
   216f3:	09 d0                	or     eax,edx
   216f5:	89 c2                	mov    edx,eax
   216f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   216fa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:63 (discriminator 6)
    mbr->parts[1].partEndSector = mbr->parts[1].partStartSector + mbr->parts[1].partTotalSectors;
   216fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21700:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   21703:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21706:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   21709:	01 c2                	add    edx,eax
   2170b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2170e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:65 (discriminator 6)

    mbr->parts[2].bootable = mbrBuffer[MBR_PART3_OFFSET+0]==0x80;
   21711:	0f b6 05 7e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7e
   21718:	3c 80                	cmp    al,0x80
   2171a:	0f 94 c2             	sete   dl
   2171d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21720:	88 50 2c             	mov    BYTE PTR [eax+0x2c],dl
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:66 (discriminator 6)
    mbr->parts[2].systemID = mbrBuffer[MBR_PART3_OFFSET+4];
   21723:	0f b6 15 82 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f82
   2172a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2172d:	88 50 2d             	mov    BYTE PTR [eax+0x2d],dl
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:67 (discriminator 6)
    mbr->parts[2].partStartSector = mbrBuffer[MBR_PART3_OFFSET+8] | (mbrBuffer[MBR_PART3_OFFSET+9]<<8) | (mbrBuffer[MBR_PART3_OFFSET+10]<<16) | (mbrBuffer[MBR_PART3_OFFSET+11]<<24);
   21730:	0f b6 05 86 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f86
   21737:	0f b6 c0             	movzx  eax,al
   2173a:	0f b6 15 87 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f87
   21741:	0f b6 d2             	movzx  edx,dl
   21744:	c1 e2 08             	shl    edx,0x8
   21747:	09 c2                	or     edx,eax
   21749:	0f b6 05 88 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f88
   21750:	0f b6 c0             	movzx  eax,al
   21753:	c1 e0 10             	shl    eax,0x10
   21756:	09 c2                	or     edx,eax
   21758:	0f b6 05 89 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f89
   2175f:	0f b6 c0             	movzx  eax,al
   21762:	c1 e0 18             	shl    eax,0x18
   21765:	09 d0                	or     eax,edx
   21767:	89 c2                	mov    edx,eax
   21769:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2176c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:68 (discriminator 6)
    mbr->parts[2].partTotalSectors = mbrBuffer[MBR_PART3_OFFSET+12] | (mbrBuffer[MBR_PART3_OFFSET+13]<<8) | (mbrBuffer[MBR_PART3_OFFSET+14]<<16) | (mbrBuffer[MBR_PART3_OFFSET+15]<<24);
   2176f:	0f b6 05 8a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8a
   21776:	0f b6 c0             	movzx  eax,al
   21779:	0f b6 15 8b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f8b
   21780:	0f b6 d2             	movzx  edx,dl
   21783:	c1 e2 08             	shl    edx,0x8
   21786:	09 c2                	or     edx,eax
   21788:	0f b6 05 8c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8c
   2178f:	0f b6 c0             	movzx  eax,al
   21792:	c1 e0 10             	shl    eax,0x10
   21795:	09 c2                	or     edx,eax
   21797:	0f b6 05 8d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8d
   2179e:	0f b6 c0             	movzx  eax,al
   217a1:	c1 e0 18             	shl    eax,0x18
   217a4:	09 d0                	or     eax,edx
   217a6:	89 c2                	mov    edx,eax
   217a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   217ab:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:69 (discriminator 6)
    mbr->parts[2].partEndSector = mbr->parts[2].partStartSector + mbr->parts[2].partTotalSectors;
   217ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   217b1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
   217b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   217b7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   217ba:	01 c2                	add    edx,eax
   217bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   217bf:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:71 (discriminator 6)

    mbr->parts[3].bootable = mbrBuffer[MBR_PART4_OFFSET+0]==0x80;
   217c2:	0f b6 05 8e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8e
   217c9:	3c 80                	cmp    al,0x80
   217cb:	0f 94 c2             	sete   dl
   217ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   217d1:	88 50 3c             	mov    BYTE PTR [eax+0x3c],dl
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:72 (discriminator 6)
    mbr->parts[3].systemID = mbrBuffer[MBR_PART4_OFFSET+4];
   217d4:	0f b6 15 92 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f92
   217db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   217de:	88 50 3d             	mov    BYTE PTR [eax+0x3d],dl
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:73 (discriminator 6)
    mbr->parts[3].partStartSector = mbrBuffer[MBR_PART4_OFFSET+8] | (mbrBuffer[MBR_PART4_OFFSET+9]<<8) | (mbrBuffer[MBR_PART4_OFFSET+10]<<16) | (mbrBuffer[MBR_PART4_OFFSET+11]<<24);
   217e1:	0f b6 05 96 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f96
   217e8:	0f b6 c0             	movzx  eax,al
   217eb:	0f b6 15 97 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f97
   217f2:	0f b6 d2             	movzx  edx,dl
   217f5:	c1 e2 08             	shl    edx,0x8
   217f8:	09 c2                	or     edx,eax
   217fa:	0f b6 05 98 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f98
   21801:	0f b6 c0             	movzx  eax,al
   21804:	c1 e0 10             	shl    eax,0x10
   21807:	09 c2                	or     edx,eax
   21809:	0f b6 05 99 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f99
   21810:	0f b6 c0             	movzx  eax,al
   21813:	c1 e0 18             	shl    eax,0x18
   21816:	09 d0                	or     eax,edx
   21818:	89 c2                	mov    edx,eax
   2181a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2181d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:74 (discriminator 6)
    mbr->parts[3].partTotalSectors = mbrBuffer[MBR_PART4_OFFSET+12] | (mbrBuffer[MBR_PART4_OFFSET+13]<<8) | (mbrBuffer[MBR_PART4_OFFSET+14]<<16) | (mbrBuffer[MBR_PART4_OFFSET+15]<<24);
   21820:	0f b6 05 9a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9a
   21827:	0f b6 c0             	movzx  eax,al
   2182a:	0f b6 15 9b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f9b
   21831:	0f b6 d2             	movzx  edx,dl
   21834:	c1 e2 08             	shl    edx,0x8
   21837:	09 c2                	or     edx,eax
   21839:	0f b6 05 9c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9c
   21840:	0f b6 c0             	movzx  eax,al
   21843:	c1 e0 10             	shl    eax,0x10
   21846:	09 c2                	or     edx,eax
   21848:	0f b6 05 9d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9d
   2184f:	0f b6 c0             	movzx  eax,al
   21852:	c1 e0 18             	shl    eax,0x18
   21855:	09 d0                	or     eax,edx
   21857:	89 c2                	mov    edx,eax
   21859:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2185c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:75 (discriminator 6)
    mbr->parts[3].partEndSector = mbr->parts[3].partStartSector + mbr->parts[3].partTotalSectors;
   2185f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21862:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
   21865:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21868:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   2186b:	01 c2                	add    edx,eax
   2186d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21870:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:76 (discriminator 6)
    mbr->partCount=4;
   21873:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21876:	c7 80 00 04 00 00 04 	mov    DWORD PTR [eax+0x400],0x4
   2187d:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:77 (discriminator 6)
    if (mbr->parts[0].systemID=0xEE)
   21880:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21883:	c6 40 0d ee          	mov    BYTE PTR [eax+0xd],0xee
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:79 (discriminator 6)
    {
        printd(DEBUG_HARDDRIVE,"Found GPT partition table\n");
   21887:	83 ec 08             	sub    esp,0x8
   2188a:	68 f5 38 08 00       	push   0x838f5
   2188f:	6a 08                	push   0x8
   21891:	e8 bd 57 00 00       	call   27053 <printd>
   21896:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:80 (discriminator 6)
        return parseGPT(port, mbr);
   21899:	83 ec 08             	sub    esp,0x8
   2189c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2189f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   218a2:	e8 05 00 00 00       	call   218ac <parseGPT>
   218a7:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:83
    }
    return true;
}
   218aa:	c9                   	leave  
   218ab:	c3                   	ret    

000218ac <parseGPT>:
parseGPT():
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:86

bool parseGPT(HBA_PORT* port, struct mbr_t* mbr)
{
   218ac:	55                   	push   ebp
   218ad:	89 e5                	mov    ebp,esp
   218af:	53                   	push   ebx
   218b0:	83 ec 14             	sub    esp,0x14
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:87
int readLen=0;
   218b3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:89

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
   218ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   218bd:	8b 00                	mov    eax,DWORD PTR [eax]
   218bf:	6a 01                	push   0x1
   218c1:	68 a0 8d 09 00       	push   0x98da0
   218c6:	50                   	push   eax
   218c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   218ca:	e8 98 36 ff ff       	call   14f67 <ahciRead>
   218cf:	83 c4 10             	add    esp,0x10
   218d2:	85 c0                	test   eax,eax
   218d4:	0f 95 c0             	setne  al
   218d7:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:90
    gptHdr=mbrBuffer;
   218da:	c7 05 84 8d 09 00 a0 	mov    DWORD PTR ds:0x98d84,0x98da0
   218e1:	8d 09 00 
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:96

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
            gptHdr->partEntrySize,
            gptHdr->lastUsableLBAL);
   218e4:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   218e9:	8b 58 30             	mov    ebx,DWORD PTR [eax+0x30]
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:95
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
            gptHdr->partEntrySize,
   218ec:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   218f1:	8b 48 54             	mov    ecx,DWORD PTR [eax+0x54]
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:94
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
   218f4:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   218f9:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:93
            gptHdr->partEntryLBAL,
   218fc:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   21901:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
   21904:	83 ec 08             	sub    esp,0x8
   21907:	53                   	push   ebx
   21908:	51                   	push   ecx
   21909:	52                   	push   edx
   2190a:	50                   	push   eax
   2190b:	68 10 39 08 00       	push   0x83910
   21910:	6a 08                	push   0x8
   21912:	e8 3c 57 00 00       	call   27053 <printd>
   21917:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:97
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
            gptHdr->partEntrySize,
            gptHdr->lastUsableLBAL);
    readLen=((gptHdr->partEntryCount*gptHdr->partEntrySize)/512)+1;
   2191a:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   2191f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
   21922:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   21927:	8b 40 54             	mov    eax,DWORD PTR [eax+0x54]
   2192a:	0f af c2             	imul   eax,edx
   2192d:	c1 e8 09             	shr    eax,0x9
   21930:	83 c0 01             	add    eax,0x1
   21933:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:99
    
    printd(DEBUG_HARDDRIVE,"Reading GPT partition table @ lba %u for %u sectors\n",gptHdr->partEntryLBAL,readLen);
   21936:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   2193b:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
   2193e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   21941:	50                   	push   eax
   21942:	68 5c 39 08 00       	push   0x8395c
   21947:	6a 08                	push   0x8
   21949:	e8 05 57 00 00       	call   27053 <printd>
   2194e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:100
    lResult=ahciRead(port,gptHdr->partEntryLBAL,partBuffer,10);
   21951:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   21956:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
   21959:	6a 0a                	push   0xa
   2195b:	68 80 65 09 00       	push   0x96580
   21960:	50                   	push   eax
   21961:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21964:	e8 fe 35 ff ff       	call   14f67 <ahciRead>
   21969:	83 c4 10             	add    esp,0x10
   2196c:	85 c0                	test   eax,eax
   2196e:	0f 95 c0             	setne  al
   21971:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:102
    
    gptPart=partBuffer;
   21974:	c7 05 80 8d 09 00 80 	mov    DWORD PTR ds:0x98d80,0x96580
   2197b:	65 09 00 
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:103
    mbr->partCount=0;
   2197e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21981:	c7 80 00 04 00 00 00 	mov    DWORD PTR [eax+0x400],0x0
   21988:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:104
    for (int cnt=0;cnt<20;cnt++)
   2198b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   21992:	e9 b6 00 00 00       	jmp    21a4d <parseGPT+0x1a1>
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:106
    {
        printd(DEBUG_HARDDRIVE,"Part %u, first=%u\n",cnt,gptPart[cnt].partFirstLBAL);
   21997:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   2199c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   2199f:	c1 e2 07             	shl    edx,0x7
   219a2:	01 d0                	add    eax,edx
   219a4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   219a7:	50                   	push   eax
   219a8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   219ab:	68 91 39 08 00       	push   0x83991
   219b0:	6a 08                	push   0x8
   219b2:	e8 9c 56 00 00       	call   27053 <printd>
   219b7:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:107
        if (gptPart[cnt].partFirstLBAL>0)
   219ba:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   219bf:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   219c2:	c1 e2 07             	shl    edx,0x7
   219c5:	01 d0                	add    eax,edx
   219c7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   219ca:	85 c0                	test   eax,eax
   219cc:	74 7b                	je     21a49 <parseGPT+0x19d>
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:109
        {
            mbr->parts[cnt].partStartSector=gptPart[cnt].partFirstLBAL;
   219ce:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   219d3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   219d6:	c1 e2 07             	shl    edx,0x7
   219d9:	01 d0                	add    eax,edx
   219db:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   219de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   219e1:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   219e4:	c1 e1 04             	shl    ecx,0x4
   219e7:	01 ca                	add    edx,ecx
   219e9:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:110
            mbr->parts[cnt].partEndSector=gptPart[cnt].partLastLBAL;
   219eb:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   219f0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   219f3:	c1 e2 07             	shl    edx,0x7
   219f6:	01 d0                	add    eax,edx
   219f8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   219fb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   219fe:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21a01:	c1 e1 04             	shl    ecx,0x4
   21a04:	01 ca                	add    edx,ecx
   21a06:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:111
            mbr->parts[cnt].partTotalSectors=mbr->parts[cnt].partEndSector-mbr->parts[cnt].partStartSector;
   21a09:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21a0c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21a0f:	c1 e2 04             	shl    edx,0x4
   21a12:	01 d0                	add    eax,edx
   21a14:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   21a17:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21a1a:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21a1d:	c1 e1 04             	shl    ecx,0x4
   21a20:	01 c8                	add    eax,ecx
   21a22:	8b 00                	mov    eax,DWORD PTR [eax]
   21a24:	29 c2                	sub    edx,eax
   21a26:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21a29:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21a2c:	c1 e1 04             	shl    ecx,0x4
   21a2f:	01 c8                	add    eax,ecx
   21a31:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:113
            //mbr->parts[cnt].systemID
            mbr->partCount++;
   21a34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21a37:	8b 80 00 04 00 00    	mov    eax,DWORD PTR [eax+0x400]
   21a3d:	8d 50 01             	lea    edx,[eax+0x1]
   21a40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21a43:	89 90 00 04 00 00    	mov    DWORD PTR [eax+0x400],edx
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:104 (discriminator 2)
    printd(DEBUG_HARDDRIVE,"Reading GPT partition table @ lba %u for %u sectors\n",gptHdr->partEntryLBAL,readLen);
    lResult=ahciRead(port,gptHdr->partEntryLBAL,partBuffer,10);
    
    gptPart=partBuffer;
    mbr->partCount=0;
    for (int cnt=0;cnt<20;cnt++)
   21a49:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:104 (discriminator 1)
   21a4d:	83 7d f4 13          	cmp    DWORD PTR [ebp-0xc],0x13
   21a51:	0f 8e 40 ff ff ff    	jle    21997 <parseGPT+0xeb>
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:118
            mbr->partCount++;
        }
    }


    return true;
   21a57:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/filesystem/mbr.c:120
        
}
   21a5c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   21a5f:	c9                   	leave  
   21a60:	c3                   	ret    
   21a61:	66 90                	xchg   ax,ax
   21a63:	90                   	nop

00021a64 <outb>:
outb():
/home/yogi/NetBeansProjects/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   21a64:	55                   	push   ebp
   21a65:	89 e5                	mov    ebp,esp
   21a67:	83 ec 08             	sub    esp,0x8
   21a6a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   21a6d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21a70:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   21a74:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/NetBeansProjects/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   21a77:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   21a7b:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   21a7f:	ee                   	out    dx,al
/home/yogi/NetBeansProjects/chrisOS/include/io.h:24
}
   21a80:	90                   	nop
   21a81:	c9                   	leave  
   21a82:	c3                   	ret    

00021a83 <inb>:
inb():
/home/yogi/NetBeansProjects/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   21a83:	55                   	push   ebp
   21a84:	89 e5                	mov    ebp,esp
   21a86:	83 ec 14             	sub    esp,0x14
   21a89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21a8c:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/NetBeansProjects/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   21a90:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   21a94:	89 c2                	mov    edx,eax
   21a96:	ec                   	in     al,dx
   21a97:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/NetBeansProjects/chrisOS/include/io.h:40
	return __val;
   21a9a:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/NetBeansProjects/chrisOS/include/io.h:41
}
   21a9e:	c9                   	leave  
   21a9f:	c3                   	ret    

00021aa0 <inw>:
inw():
/home/yogi/NetBeansProjects/chrisOS/include/io.h:44

static __inline unsigned short inw(unsigned short __port)
{
   21aa0:	55                   	push   ebp
   21aa1:	89 e5                	mov    ebp,esp
   21aa3:	83 ec 14             	sub    esp,0x14
   21aa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21aa9:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/NetBeansProjects/chrisOS/include/io.h:46
	unsigned short __val;
	__asm__ volatile ("inw %0, %1" : "=a" (__val) : "dN" (__port));
   21aad:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   21ab1:	89 c2                	mov    edx,eax
   21ab3:	66 ed                	in     ax,dx
   21ab5:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/NetBeansProjects/chrisOS/include/io.h:47
	return __val;
   21ab9:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/NetBeansProjects/chrisOS/include/io.h:48
}
   21abd:	c9                   	leave  
   21abe:	c3                   	ret    

00021abf <insw>:
insw():
/home/yogi/NetBeansProjects/chrisOS/include/io.h:86
		      : "+D" (__buf), "+c" (__n)
		      : "d" (__port));
}

static __inline void insw(unsigned short __port, void *__buf, unsigned long __n)
{
   21abf:	55                   	push   ebp
   21ac0:	89 e5                	mov    ebp,esp
   21ac2:	57                   	push   edi
   21ac3:	53                   	push   ebx
   21ac4:	83 ec 04             	sub    esp,0x4
   21ac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21aca:	66 89 45 f4          	mov    WORD PTR [ebp-0xc],ax
/home/yogi/NetBeansProjects/chrisOS/include/io.h:87
	__asm__ volatile ("cld; rep; insw"
   21ace:	0f b7 55 f4          	movzx  edx,WORD PTR [ebp-0xc]
   21ad2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   21ad5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   21ad8:	89 cb                	mov    ebx,ecx
   21ada:	89 df                	mov    edi,ebx
   21adc:	89 c1                	mov    ecx,eax
   21ade:	fc                   	cld    
   21adf:	f3 66 6d             	rep ins WORD PTR es:[edi],dx
   21ae2:	89 c8                	mov    eax,ecx
   21ae4:	89 fb                	mov    ebx,edi
   21ae6:	89 5d 0c             	mov    DWORD PTR [ebp+0xc],ebx
   21ae9:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/include/io.h:90
		      : "+D" (__buf), "+c" (__n)
		      : "d" (__port));
}
   21aec:	90                   	nop
   21aed:	83 c4 04             	add    esp,0x4
   21af0:	5b                   	pop    ebx
   21af1:	5f                   	pop    edi
   21af2:	5d                   	pop    ebp
   21af3:	c3                   	ret    

00021af4 <ataWaitForDRQ>:
ataWaitForDRQ():
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:22
float ticks=0;
struct ataDeviceInfo_t* atablockingReadDev;

//Returns non-zero value IF TIMEOUT
uint8_t __attribute__((noinline)) ataWaitForDRQ(struct ataDeviceInfo_t* devInfo, bool toBeSet, int forHowManyMS)
{
   21af4:	55                   	push   ebp
   21af5:	89 e5                	mov    ebp,esp
   21af7:	83 ec 14             	sub    esp,0x14
   21afa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21afd:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:23
    int ticks = forHowManyMS*kTicksPerMS;
   21b00:	a1 84 02 a0 00       	mov    eax,ds:0xa00284
   21b05:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   21b08:	0f af c2             	imul   eax,edx
   21b0b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:24
    uint8_t inValue=0;
   21b0e:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:25
    while (ticks > 0)
   21b12:	eb 57                	jmp    21b6b <ataWaitForDRQ+0x77>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:27
    {
        STI
   21b14:	fb                   	sti    
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:29
        //waitTicks(1);
        __asm__("sti\nhlt\n");
   21b15:	fb                   	sti    
   21b16:	f4                   	hlt    
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:30
        inValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
   21b17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21b1a:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21b20:	83 c0 07             	add    eax,0x7
   21b23:	0f b7 c0             	movzx  eax,ax
   21b26:	50                   	push   eax
   21b27:	e8 57 ff ff ff       	call   21a83 <inb>
   21b2c:	83 c4 04             	add    esp,0x4
   21b2f:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:31
        if (toBeSet && (inValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ)
   21b32:	80 7d ec 00          	cmp    BYTE PTR [ebp-0x14],0x0
   21b36:	74 12                	je     21b4a <ataWaitForDRQ+0x56>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:31 (discriminator 1)
   21b38:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   21b3c:	83 e0 08             	and    eax,0x8
   21b3f:	85 c0                	test   eax,eax
   21b41:	74 07                	je     21b4a <ataWaitForDRQ+0x56>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:32
                return 0;
   21b43:	b8 00 00 00 00       	mov    eax,0x0
   21b48:	eb 5e                	jmp    21ba8 <ataWaitForDRQ+0xb4>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:33
        else if ((!toBeSet && (inValue & ATA_STATUS_DRQ) != ATA_STATUS_DRQ))
   21b4a:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
   21b4e:	83 f0 01             	xor    eax,0x1
   21b51:	84 c0                	test   al,al
   21b53:	74 12                	je     21b67 <ataWaitForDRQ+0x73>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:33 (discriminator 1)
   21b55:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   21b59:	83 e0 08             	and    eax,0x8
   21b5c:	85 c0                	test   eax,eax
   21b5e:	75 07                	jne    21b67 <ataWaitForDRQ+0x73>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:34
                return 0;
   21b60:	b8 00 00 00 00       	mov    eax,0x0
   21b65:	eb 41                	jmp    21ba8 <ataWaitForDRQ+0xb4>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:35
        ticks--;
   21b67:	83 6d fc 01          	sub    DWORD PTR [ebp-0x4],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:25
//Returns non-zero value IF TIMEOUT
uint8_t __attribute__((noinline)) ataWaitForDRQ(struct ataDeviceInfo_t* devInfo, bool toBeSet, int forHowManyMS)
{
    int ticks = forHowManyMS*kTicksPerMS;
    uint8_t inValue=0;
    while (ticks > 0)
   21b6b:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   21b6f:	7f a3                	jg     21b14 <ataWaitForDRQ+0x20>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:37
                return 0;
        else if ((!toBeSet && (inValue & ATA_STATUS_DRQ) != ATA_STATUS_DRQ))
                return 0;
        ticks--;
    }
    hdError=inb(devInfo->ioPort+ATA_PORT_ERROR);
   21b71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21b74:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21b7a:	83 c0 01             	add    eax,0x1
   21b7d:	0f b7 c0             	movzx  eax,ax
   21b80:	50                   	push   eax
   21b81:	e8 fd fe ff ff       	call   21a83 <inb>
   21b86:	83 c4 04             	add    esp,0x4
   21b89:	0f b6 c0             	movzx  eax,al
   21b8c:	a3 1c eb 09 00       	mov    ds:0x9eb1c,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:38
    if ((hdError & 0x4)==0x4)
   21b91:	a1 1c eb 09 00       	mov    eax,ds:0x9eb1c
   21b96:	83 e0 04             	and    eax,0x4
   21b99:	85 c0                	test   eax,eax
   21b9b:	74 07                	je     21ba4 <ataWaitForDRQ+0xb0>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:39
        return 0;
   21b9d:	b8 00 00 00 00       	mov    eax,0x0
   21ba2:	eb 04                	jmp    21ba8 <ataWaitForDRQ+0xb4>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:40
    return inValue;
   21ba4:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:41
}
   21ba8:	c9                   	leave  
   21ba9:	c3                   	ret    

00021baa <ataWaitForIdle>:
ataWaitForIdle():
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:44

uint8_t ataWaitForIdle(struct ataDeviceInfo_t* devInfo)
{
   21baa:	55                   	push   ebp
   21bab:	89 e5                	mov    ebp,esp
   21bad:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:45
    ticks = 0;
   21bb0:	d9 ee                	fldz   
   21bb2:	d9 1d 28 eb 09 00    	fstp   DWORD PTR ds:0x9eb28
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:46
    uint8_t lValue=0;
   21bb8:	c6 45 ff 00          	mov    BYTE PTR [ebp-0x1],0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:48
    //printk("aaWaitForIdle: ticks(%u@0x%08X)=ATA_STANDARD_WAIT_MS(%d)*kTicksPerMS((%d@0x%08X))\n", ticks, &ticks, (ATA_STANDARD_WAIT_MS), kTicksPerMS, &kTicksPerMS);
    lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
   21bbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21bbf:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21bc5:	83 c0 07             	add    eax,0x7
   21bc8:	0f b7 c0             	movzx  eax,ax
   21bcb:	50                   	push   eax
   21bcc:	e8 b2 fe ff ff       	call   21a83 <inb>
   21bd1:	83 c4 04             	add    esp,0x4
   21bd4:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:49
    if ((lValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ && ticks)
   21bd7:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   21bdb:	83 e0 08             	and    eax,0x8
   21bde:	85 c0                	test   eax,eax
   21be0:	74 76                	je     21c58 <ataWaitForIdle+0xae>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:49 (discriminator 1)
   21be2:	d9 05 28 eb 09 00    	fld    DWORD PTR ds:0x9eb28
   21be8:	d9 ee                	fldz   
   21bea:	df e9                	fucomip st,st(1)
   21bec:	7a 0a                	jp     21bf8 <ataWaitForIdle+0x4e>
   21bee:	d9 ee                	fldz   
   21bf0:	df e9                	fucomip st,st(1)
   21bf2:	dd d8                	fstp   st(0)
   21bf4:	74 19                	je     21c0f <ataWaitForIdle+0x65>
   21bf6:	eb 02                	jmp    21bfa <ataWaitForIdle+0x50>
   21bf8:	dd d8                	fstp   st(0)
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:50
        inw(devInfo->ioPort+ATA_PORT_DATA);
   21bfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21bfd:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21c03:	0f b7 c0             	movzx  eax,ax
   21c06:	50                   	push   eax
   21c07:	e8 94 fe ff ff       	call   21aa0 <inw>
   21c0c:	83 c4 04             	add    esp,0x4
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:51
    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   21c0f:	eb 47                	jmp    21c58 <ataWaitForIdle+0xae>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:53
    {
        __asm__("sti\nhlt\n");
   21c11:	fb                   	sti    
   21c12:	f4                   	hlt    
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:54
        lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
   21c13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21c16:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21c1c:	83 c0 07             	add    eax,0x7
   21c1f:	0f b7 c0             	movzx  eax,ax
   21c22:	50                   	push   eax
   21c23:	e8 5b fe ff ff       	call   21a83 <inb>
   21c28:	83 c4 04             	add    esp,0x4
   21c2b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:56
            //If both BUSY and DRQ are zero, then, the command is probably complete. 
        if ((lValue & (ATA_STATUS_DRQ | ATA_STATUS_BUSY)) == 0 )
   21c2e:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   21c32:	25 88 00 00 00       	and    eax,0x88
   21c37:	85 c0                	test   eax,eax
   21c39:	75 07                	jne    21c42 <ataWaitForIdle+0x98>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:57
                    return 0;
   21c3b:	b8 00 00 00 00       	mov    eax,0x0
   21c40:	eb 73                	jmp    21cb5 <ataWaitForIdle+0x10b>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:58
        ticks++;
   21c42:	d9 05 28 eb 09 00    	fld    DWORD PTR ds:0x9eb28
   21c48:	d9 e8                	fld1   
   21c4a:	de c1                	faddp  st(1),st
   21c4c:	d9 5d ec             	fstp   DWORD PTR [ebp-0x14]
   21c4f:	d9 45 ec             	fld    DWORD PTR [ebp-0x14]
   21c52:	d9 1d 28 eb 09 00    	fstp   DWORD PTR ds:0x9eb28
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:51
    uint8_t lValue=0;
    //printk("aaWaitForIdle: ticks(%u@0x%08X)=ATA_STANDARD_WAIT_MS(%d)*kTicksPerMS((%d@0x%08X))\n", ticks, &ticks, (ATA_STANDARD_WAIT_MS), kTicksPerMS, &kTicksPerMS);
    lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
    if ((lValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ && ticks)
        inw(devInfo->ioPort+ATA_PORT_DATA);
    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   21c58:	d9 05 28 eb 09 00    	fld    DWORD PTR ds:0x9eb28
   21c5e:	d9 c0                	fld    st(0)
   21c60:	d9 e8                	fld1   
   21c62:	de c1                	faddp  st(1),st
   21c64:	d9 5d ec             	fstp   DWORD PTR [ebp-0x14]
   21c67:	d9 45 ec             	fld    DWORD PTR [ebp-0x14]
   21c6a:	d9 1d 28 eb 09 00    	fstp   DWORD PTR ds:0x9eb28
   21c70:	8b 15 84 02 a0 00    	mov    edx,DWORD PTR ds:0xa00284
   21c76:	89 d0                	mov    eax,edx
   21c78:	c1 e0 02             	shl    eax,0x2
   21c7b:	01 d0                	add    eax,edx
   21c7d:	01 c0                	add    eax,eax
   21c7f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   21c82:	db 45 e8             	fild   DWORD PTR [ebp-0x18]
   21c85:	d9 5d ec             	fstp   DWORD PTR [ebp-0x14]
   21c88:	d9 45 ec             	fld    DWORD PTR [ebp-0x14]
   21c8b:	df e9                	fucomip st,st(1)
   21c8d:	dd d8                	fstp   st(0)
   21c8f:	73 80                	jae    21c11 <ataWaitForIdle+0x67>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:60
            //If both BUSY and DRQ are zero, then, the command is probably complete. 
        if ((lValue & (ATA_STATUS_DRQ | ATA_STATUS_BUSY)) == 0 )
                    return 0;
        ticks++;
    }
    hdError=inb(devInfo->ioPort+ATA_PORT_ERROR);
   21c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21c94:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21c9a:	83 c0 01             	add    eax,0x1
   21c9d:	0f b7 c0             	movzx  eax,ax
   21ca0:	50                   	push   eax
   21ca1:	e8 dd fd ff ff       	call   21a83 <inb>
   21ca6:	83 c4 04             	add    esp,0x4
   21ca9:	0f b6 c0             	movzx  eax,al
   21cac:	a3 1c eb 09 00       	mov    ds:0x9eb1c,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:61
    return lValue;
   21cb1:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:62
}
   21cb5:	c9                   	leave  
   21cb6:	c3                   	ret    

00021cb7 <ataControllerIsReady>:
ataControllerIsReady():
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:66


uint8_t ataControllerIsReady(struct ataDeviceInfo_t* devInfo)
{
   21cb7:	55                   	push   ebp
   21cb8:	89 e5                	mov    ebp,esp
   21cba:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:67
    int ticks = 0;
   21cbd:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:69
    
    int lStatus=0;
   21cc4:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:70
    uint8_t err=0;
   21ccb:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:72

    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   21ccf:	eb 4a                	jmp    21d1b <ataControllerIsReady+0x64>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:74
    {
        lStatus=inb(devInfo->ioPort+ATA_PORT_STATUS);
   21cd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21cd4:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21cda:	83 c0 07             	add    eax,0x7
   21cdd:	0f b7 c0             	movzx  eax,ax
   21ce0:	50                   	push   eax
   21ce1:	e8 9d fd ff ff       	call   21a83 <inb>
   21ce6:	83 c4 04             	add    esp,0x4
   21ce9:	0f b6 c0             	movzx  eax,al
   21cec:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:75
        wait(1);
   21cef:	83 ec 0c             	sub    esp,0xc
   21cf2:	6a 01                	push   0x1
   21cf4:	e8 79 65 00 00       	call   28272 <wait>
   21cf9:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:76
        ticks++;
   21cfc:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:77
	lStatus &= (ATA_STATUS_BUSY | ATA_STATUS_READY| ATA_STATUS_SEEK);
   21d00:	81 65 f0 d0 00 00 00 	and    DWORD PTR [ebp-0x10],0xd0
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:78
        if (lStatus & ATA_STATUS_READY )
   21d07:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21d0a:	83 e0 40             	and    eax,0x40
   21d0d:	85 c0                	test   eax,eax
   21d0f:	74 0a                	je     21d1b <ataControllerIsReady+0x64>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:79
                return true;
   21d11:	b8 01 00 00 00       	mov    eax,0x1
   21d16:	e9 9c 00 00 00       	jmp    21db7 <ataControllerIsReady+0x100>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:72
    int ticks = 0;
    
    int lStatus=0;
    uint8_t err=0;

    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   21d1b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21d1e:	8d 42 01             	lea    eax,[edx+0x1]
   21d21:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   21d24:	8b 0d 84 02 a0 00    	mov    ecx,DWORD PTR ds:0xa00284
   21d2a:	89 c8                	mov    eax,ecx
   21d2c:	c1 e0 02             	shl    eax,0x2
   21d2f:	01 c8                	add    eax,ecx
   21d31:	01 c0                	add    eax,eax
   21d33:	39 c2                	cmp    edx,eax
   21d35:	7e 9a                	jle    21cd1 <ataControllerIsReady+0x1a>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:82
	lStatus &= (ATA_STATUS_BUSY | ATA_STATUS_READY| ATA_STATUS_SEEK);
        if (lStatus & ATA_STATUS_READY )
                return true;
    }

    if (lStatus==ATA_STATUS_ERROR || lStatus==ATA_STATUS_BUSY)
   21d37:	83 7d f0 01          	cmp    DWORD PTR [ebp-0x10],0x1
   21d3b:	74 09                	je     21d46 <ataControllerIsReady+0x8f>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:82 (discriminator 1)
   21d3d:	81 7d f0 80 00 00 00 	cmp    DWORD PTR [ebp-0x10],0x80
   21d44:	75 36                	jne    21d7c <ataControllerIsReady+0xc5>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:84
    {
         err=inb(0x1f1);
   21d46:	83 ec 0c             	sub    esp,0xc
   21d49:	68 f1 01 00 00       	push   0x1f1
   21d4e:	e8 30 fd ff ff       	call   21a83 <inb>
   21d53:	83 c4 10             	add    esp,0x10
   21d56:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:86
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   21d59:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   21d5e:	83 e0 08             	and    eax,0x8
   21d61:	85 c0                	test   eax,eax
   21d63:	74 17                	je     21d7c <ataControllerIsReady+0xc5>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:87
            printd(DEBUG_HARDDRIVE,"ataControllerIsReady: DRQ wait failed, lStatus=%02X, err=%02X\n",lStatus,err);
   21d65:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   21d69:	50                   	push   eax
   21d6a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   21d6d:	68 c0 3a 08 00       	push   0x83ac0
   21d72:	6a 08                	push   0x8
   21d74:	e8 da 52 00 00       	call   27053 <printd>
   21d79:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:90
#endif
    }
    if ( (lStatus & ATA_STATUS_READY)==0 && err==4)
   21d7c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21d7f:	83 e0 40             	and    eax,0x40
   21d82:	85 c0                	test   eax,eax
   21d84:	75 0d                	jne    21d93 <ataControllerIsReady+0xdc>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:90 (discriminator 1)
   21d86:	80 7d ef 04          	cmp    BYTE PTR [ebp-0x11],0x4
   21d8a:	75 07                	jne    21d93 <ataControllerIsReady+0xdc>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:91
        lStatus=ATA_STATUS_READY;
   21d8c:	c7 45 f0 40 00 00 00 	mov    DWORD PTR [ebp-0x10],0x40
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:93
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   21d93:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   21d98:	83 e0 08             	and    eax,0x8
   21d9b:	85 c0                	test   eax,eax
   21d9d:	74 13                	je     21db2 <ataControllerIsReady+0xfb>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:94
            printk("ataControllerIsReady: returning %02X\n",lStatus);
   21d9f:	83 ec 08             	sub    esp,0x8
   21da2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   21da5:	68 00 3b 08 00       	push   0x83b00
   21daa:	e8 84 52 00 00       	call   27033 <printk>
   21daf:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:96
#endif
    return true;
   21db2:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:97
}
   21db7:	c9                   	leave  
   21db8:	c3                   	ret    

00021db9 <ataStatusIsOk>:
ataStatusIsOk():
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:100

static bool ataStatusIsOk(struct ataDeviceInfo_t* devInfo)
{
   21db9:	55                   	push   ebp
   21dba:	89 e5                	mov    ebp,esp
   21dbc:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:101
	unsigned char status = inb(devInfo->ioPort+ATA_PORT_STATUS);
   21dbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21dc2:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21dc8:	83 c0 07             	add    eax,0x7
   21dcb:	0f b7 c0             	movzx  eax,ax
   21dce:	50                   	push   eax
   21dcf:	e8 af fc ff ff       	call   21a83 <inb>
   21dd4:	83 c4 04             	add    esp,0x4
   21dd7:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:103

	if (status & ATA_STATUS_BUSY)
   21dda:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   21dde:	84 c0                	test   al,al
   21de0:	79 07                	jns    21de9 <ataStatusIsOk+0x30>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:104
		return false;
   21de2:	b8 00 00 00 00       	mov    eax,0x0
   21de7:	eb 3b                	jmp    21e24 <ataStatusIsOk+0x6b>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:105
	if (status & ATA_STATUS_WRITE_ERROR)
   21de9:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   21ded:	83 e0 20             	and    eax,0x20
   21df0:	85 c0                	test   eax,eax
   21df2:	74 07                	je     21dfb <ataStatusIsOk+0x42>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:106
		return true;
   21df4:	b8 01 00 00 00       	mov    eax,0x1
   21df9:	eb 29                	jmp    21e24 <ataStatusIsOk+0x6b>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:107
	if (!(status & ATA_STATUS_READY))
   21dfb:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   21dff:	83 e0 40             	and    eax,0x40
   21e02:	85 c0                	test   eax,eax
   21e04:	75 07                	jne    21e0d <ataStatusIsOk+0x54>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:108
		return true;
   21e06:	b8 01 00 00 00       	mov    eax,0x1
   21e0b:	eb 17                	jmp    21e24 <ataStatusIsOk+0x6b>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:109
	if (!(status & ATA_STATUS_SEEK))
   21e0d:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   21e11:	83 e0 10             	and    eax,0x10
   21e14:	85 c0                	test   eax,eax
   21e16:	75 07                	jne    21e1f <ataStatusIsOk+0x66>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:110
		return true;
   21e18:	b8 01 00 00 00       	mov    eax,0x1
   21e1d:	eb 05                	jmp    21e24 <ataStatusIsOk+0x6b>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:111
	return 1;
   21e1f:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:112
}
   21e24:	c9                   	leave  
   21e25:	c3                   	ret    

00021e26 <ataSelectDrive>:
ataSelectDrive():
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:115

bool ataSelectDrive(struct ataDeviceInfo_t* devInfo, uint8_t head)
{
   21e26:	55                   	push   ebp
   21e27:	89 e5                	mov    ebp,esp
   21e29:	83 ec 28             	sub    esp,0x28
   21e2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21e2f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:116
    ataWaitForIdle(devInfo);
   21e32:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21e35:	e8 70 fd ff ff       	call   21baa <ataWaitForIdle>
   21e3a:	83 c4 04             	add    esp,0x4
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:117
    outb(devInfo->ioPort+ATA_DRIVE_SELECT, devInfo->driveHeadPortDesignation | (head& 0xF) ); 
   21e3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21e40:	0f b6 80 6e 02 00 00 	movzx  eax,BYTE PTR [eax+0x26e]
   21e47:	89 c2                	mov    edx,eax
   21e49:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   21e4d:	83 e0 0f             	and    eax,0xf
   21e50:	09 d0                	or     eax,edx
   21e52:	0f b6 d0             	movzx  edx,al
   21e55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21e58:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21e5e:	83 c0 06             	add    eax,0x6
   21e61:	0f b7 c0             	movzx  eax,ax
   21e64:	52                   	push   edx
   21e65:	50                   	push   eax
   21e66:	e8 f9 fb ff ff       	call   21a64 <outb>
   21e6b:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:119
    //printk("Sending 0x%02X", drive==master?ATA_DRIVE_MASTER:ATA_DRIVE_SLAVE | (head& 0xF));
    if (!ataStatusIsOk(devInfo))
   21e6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21e71:	e8 43 ff ff ff       	call   21db9 <ataStatusIsOk>
   21e76:	83 c4 04             	add    esp,0x4
   21e79:	83 f0 01             	xor    eax,0x1
   21e7c:	84 c0                	test   al,al
   21e7e:	74 6e                	je     21eee <ataSelectDrive+0xc8>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:122
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   21e80:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   21e85:	83 e0 08             	and    eax,0x8
   21e88:	85 c0                	test   eax,eax
   21e8a:	74 3d                	je     21ec9 <ataSelectDrive+0xa3>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:123
            printk("ataSelectDrive: Failed to select drive %u, bus %u, status=0x%02X is not ok\n", devInfo->driveNo, devInfo->bus, inb(devInfo->ioPort+ATA_PORT_STATUS));
   21e8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21e8f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21e95:	83 c0 07             	add    eax,0x7
   21e98:	0f b7 c0             	movzx  eax,ax
   21e9b:	50                   	push   eax
   21e9c:	e8 e2 fb ff ff       	call   21a83 <inb>
   21ea1:	83 c4 04             	add    esp,0x4
   21ea4:	0f b6 c8             	movzx  ecx,al
   21ea7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21eaa:	8b 90 61 02 00 00    	mov    edx,DWORD PTR [eax+0x261]
   21eb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21eb3:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   21eb9:	51                   	push   ecx
   21eba:	52                   	push   edx
   21ebb:	50                   	push   eax
   21ebc:	68 28 3b 08 00       	push   0x83b28
   21ec1:	e8 6d 51 00 00       	call   27033 <printk>
   21ec6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:125
#endif
            return inb(devInfo->ioPort+ATA_PORT_STATUS);
   21ec9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21ecc:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21ed2:	83 c0 07             	add    eax,0x7
   21ed5:	0f b7 c0             	movzx  eax,ax
   21ed8:	83 ec 0c             	sub    esp,0xc
   21edb:	50                   	push   eax
   21edc:	e8 a2 fb ff ff       	call   21a83 <inb>
   21ee1:	83 c4 10             	add    esp,0x10
   21ee4:	84 c0                	test   al,al
   21ee6:	0f 95 c0             	setne  al
   21ee9:	e9 96 00 00 00       	jmp    21f84 <ataSelectDrive+0x15e>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:128
    }
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   21eee:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   21ef3:	83 e0 08             	and    eax,0x8
   21ef6:	85 c0                	test   eax,eax
   21ef8:	0f 84 81 00 00 00    	je     21f7f <ataSelectDrive+0x159>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:130
    {
        wait(10);
   21efe:	83 ec 0c             	sub    esp,0xc
   21f01:	6a 0a                	push   0xa
   21f03:	e8 6a 63 00 00       	call   28272 <wait>
   21f08:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:131
        unsigned lDrive=inb(devInfo->ioPort+ATA_DRIVE_SELECT);
   21f0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21f0e:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21f14:	83 c0 06             	add    eax,0x6
   21f17:	0f b7 c0             	movzx  eax,ax
   21f1a:	83 ec 0c             	sub    esp,0xc
   21f1d:	50                   	push   eax
   21f1e:	e8 60 fb ff ff       	call   21a83 <inb>
   21f23:	83 c4 10             	add    esp,0x10
   21f26:	0f b6 c0             	movzx  eax,al
   21f29:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:132
            printk("ataSelectDrive: Drive selected: %s (%u, 0x%02X), err=0x%02X\n", (lDrive & (1<<4)) == 1<<4?"Slave":"Master", devInfo->driveNo, lDrive, inb(devInfo->ioPort+ATA_PORT_ERROR));
   21f2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21f2f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21f35:	83 c0 01             	add    eax,0x1
   21f38:	0f b7 c0             	movzx  eax,ax
   21f3b:	83 ec 0c             	sub    esp,0xc
   21f3e:	50                   	push   eax
   21f3f:	e8 3f fb ff ff       	call   21a83 <inb>
   21f44:	83 c4 10             	add    esp,0x10
   21f47:	0f b6 d0             	movzx  edx,al
   21f4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21f4d:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   21f53:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21f56:	83 e1 10             	and    ecx,0x10
   21f59:	85 c9                	test   ecx,ecx
   21f5b:	74 07                	je     21f64 <ataSelectDrive+0x13e>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:132 (discriminator 1)
   21f5d:	b9 74 3b 08 00       	mov    ecx,0x83b74
   21f62:	eb 05                	jmp    21f69 <ataSelectDrive+0x143>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:132 (discriminator 2)
   21f64:	b9 7a 3b 08 00       	mov    ecx,0x83b7a
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:132 (discriminator 4)
   21f69:	83 ec 0c             	sub    esp,0xc
   21f6c:	52                   	push   edx
   21f6d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   21f70:	50                   	push   eax
   21f71:	51                   	push   ecx
   21f72:	68 84 3b 08 00       	push   0x83b84
   21f77:	e8 b7 50 00 00       	call   27033 <printk>
   21f7c:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:136
    }
#endif
        
    return 0;
   21f7f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:137
}
   21f84:	c9                   	leave  
   21f85:	c3                   	ret    

00021f86 <ataResetController>:
ataResetController():
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:161
	outb(++port, 0xA0 |(drive<<4)|head);
	outb(++port, cmd);
}
*/
static void ataResetController(struct ataDeviceInfo_t* devInfo)
{
   21f86:	55                   	push   ebp
   21f87:	89 e5                	mov    ebp,esp
   21f89:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:162
        outb(devInfo->ioPort+ATA_PORT_COMMAND, 4);
   21f8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21f8f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21f95:	83 c0 07             	add    eax,0x7
   21f98:	0f b7 c0             	movzx  eax,ax
   21f9b:	6a 04                	push   0x4
   21f9d:	50                   	push   eax
   21f9e:	e8 c1 fa ff ff       	call   21a64 <outb>
   21fa3:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:163
        waitTicks(kTicksPerSecond/10);
   21fa6:	8b 0d 80 02 a0 00    	mov    ecx,DWORD PTR ds:0xa00280
   21fac:	ba 67 66 66 66       	mov    edx,0x66666667
   21fb1:	89 c8                	mov    eax,ecx
   21fb3:	f7 ea                	imul   edx
   21fb5:	c1 fa 02             	sar    edx,0x2
   21fb8:	89 c8                	mov    eax,ecx
   21fba:	c1 f8 1f             	sar    eax,0x1f
   21fbd:	29 c2                	sub    edx,eax
   21fbf:	89 d0                	mov    eax,edx
   21fc1:	83 ec 0c             	sub    esp,0xc
   21fc4:	50                   	push   eax
   21fc5:	e8 8d 62 00 00       	call   28257 <waitTicks>
   21fca:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:164
        outb(devInfo->ioPort+ATA_PORT_CONTROL, 1<<2);
   21fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21fd0:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21fd6:	66 05 f6 03          	add    ax,0x3f6
   21fda:	0f b7 c0             	movzx  eax,ax
   21fdd:	83 ec 08             	sub    esp,0x8
   21fe0:	6a 04                	push   0x4
   21fe2:	50                   	push   eax
   21fe3:	e8 7c fa ff ff       	call   21a64 <outb>
   21fe8:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:165
        wait(10);
   21feb:	83 ec 0c             	sub    esp,0xc
   21fee:	6a 0a                	push   0xa
   21ff0:	e8 7d 62 00 00       	call   28272 <wait>
   21ff5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:166
        outb(devInfo->ioPort+ATA_PORT_CONTROL, 0);
   21ff8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21ffb:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22001:	66 05 f6 03          	add    ax,0x3f6
   22005:	0f b7 c0             	movzx  eax,ax
   22008:	83 ec 08             	sub    esp,0x8
   2200b:	6a 00                	push   0x0
   2200d:	50                   	push   eax
   2200e:	e8 51 fa ff ff       	call   21a64 <outb>
   22013:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:167
        if (!ataControllerIsReady(devInfo))
   22016:	83 ec 0c             	sub    esp,0xc
   22019:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2201c:	e8 96 fc ff ff       	call   21cb7 <ataControllerIsReady>
   22021:	83 c4 10             	add    esp,0x10
   22024:	84 c0                	test   al,al
   22026:	75 1c                	jne    22044 <ataResetController+0xbe>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:169
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22028:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   2202d:	83 e0 08             	and    eax,0x8
   22030:	85 c0                	test   eax,eax
   22032:	74 10                	je     22044 <ataResetController+0xbe>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:170
            printk("HD-controller still busy\n");
   22034:	83 ec 0c             	sub    esp,0xc
   22037:	68 c1 3b 08 00       	push   0x83bc1
   2203c:	e8 f2 4f 00 00       	call   27033 <printk>
   22041:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:172
#endif
        if ((hdError = inb(devInfo->ioPort+ATA_PORT_ERROR)) != 0 && (hdError = inb(devInfo->ioPort+ATA_PORT_ERROR)) != 4)
   22044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22047:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2204d:	83 c0 01             	add    eax,0x1
   22050:	0f b7 c0             	movzx  eax,ax
   22053:	83 ec 0c             	sub    esp,0xc
   22056:	50                   	push   eax
   22057:	e8 27 fa ff ff       	call   21a83 <inb>
   2205c:	83 c4 10             	add    esp,0x10
   2205f:	0f b6 c0             	movzx  eax,al
   22062:	a3 1c eb 09 00       	mov    ds:0x9eb1c,eax
   22067:	a1 1c eb 09 00       	mov    eax,ds:0x9eb1c
   2206c:	85 c0                	test   eax,eax
   2206e:	74 5d                	je     220cd <ataResetController+0x147>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:172 (discriminator 1)
   22070:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22073:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22079:	83 c0 01             	add    eax,0x1
   2207c:	0f b7 c0             	movzx  eax,ax
   2207f:	83 ec 0c             	sub    esp,0xc
   22082:	50                   	push   eax
   22083:	e8 fb f9 ff ff       	call   21a83 <inb>
   22088:	83 c4 10             	add    esp,0x10
   2208b:	0f b6 c0             	movzx  eax,al
   2208e:	a3 1c eb 09 00       	mov    ds:0x9eb1c,eax
   22093:	a1 1c eb 09 00       	mov    eax,ds:0x9eb1c
   22098:	83 f8 04             	cmp    eax,0x4
   2209b:	74 30                	je     220cd <ataResetController+0x147>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:173
            printk("Controller reset failed on %s bus: %02x\n",devInfo->bus==0?"Primary":"Secondary", hdError);
   2209d:	a1 1c eb 09 00       	mov    eax,ds:0x9eb1c
   220a2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   220a5:	8b 92 61 02 00 00    	mov    edx,DWORD PTR [edx+0x261]
   220ab:	85 d2                	test   edx,edx
   220ad:	75 07                	jne    220b6 <ataResetController+0x130>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:173 (discriminator 1)
   220af:	ba db 3b 08 00       	mov    edx,0x83bdb
   220b4:	eb 05                	jmp    220bb <ataResetController+0x135>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:173 (discriminator 2)
   220b6:	ba e3 3b 08 00       	mov    edx,0x83be3
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:173 (discriminator 4)
   220bb:	83 ec 04             	sub    esp,0x4
   220be:	50                   	push   eax
   220bf:	52                   	push   edx
   220c0:	68 f0 3b 08 00       	push   0x83bf0
   220c5:	e8 69 4f 00 00       	call   27033 <printk>
   220ca:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:175
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   220cd:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   220d2:	83 e0 08             	and    eax,0x8
   220d5:	85 c0                	test   eax,eax
   220d7:	74 10                	je     220e9 <ataResetController+0x163>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:176
            printk("ataResetController: controller is ready\n");
   220d9:	83 ec 0c             	sub    esp,0xc
   220dc:	68 1c 3c 08 00       	push   0x83c1c
   220e1:	e8 4d 4f 00 00       	call   27033 <printk>
   220e6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:178
#endif
}
   220e9:	90                   	nop
   220ea:	c9                   	leave  
   220eb:	c3                   	ret    

000220ec <ataInit>:
ataInit():
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:180
int ataInit(struct ataDeviceInfo_t* devInfo)
{
   220ec:	55                   	push   ebp
   220ed:	89 e5                	mov    ebp,esp
   220ef:	53                   	push   ebx
   220f0:	83 ec 14             	sub    esp,0x14
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:181
    ataResetController(devInfo);
   220f3:	83 ec 0c             	sub    esp,0xc
   220f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   220f9:	e8 88 fe ff ff       	call   21f86 <ataResetController>
   220fe:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:182
    int cStatus=0, ticks=0;
   22101:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   22108:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:183
    ataSelectDrive(devInfo,0);
   2210f:	83 ec 08             	sub    esp,0x8
   22112:	6a 00                	push   0x0
   22114:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   22117:	e8 0a fd ff ff       	call   21e26 <ataSelectDrive>
   2211c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:184
    outb(devInfo->ioPort+ATA_PORT_SECTORCOUNT, 0x55);
   2211f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22122:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22128:	83 c0 02             	add    eax,0x2
   2212b:	0f b7 c0             	movzx  eax,ax
   2212e:	83 ec 08             	sub    esp,0x8
   22131:	6a 55                	push   0x55
   22133:	50                   	push   eax
   22134:	e8 2b f9 ff ff       	call   21a64 <outb>
   22139:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:185
    outb(devInfo->ioPort+ATA_PORT_SECTOR_NUMBER, 0xAA);
   2213c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2213f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22145:	83 c0 03             	add    eax,0x3
   22148:	0f b7 c0             	movzx  eax,ax
   2214b:	83 ec 08             	sub    esp,0x8
   2214e:	68 aa 00 00 00       	push   0xaa
   22153:	50                   	push   eax
   22154:	e8 0b f9 ff ff       	call   21a64 <outb>
   22159:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:186
    outb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW,0x55);
   2215c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2215f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22165:	83 c0 04             	add    eax,0x4
   22168:	0f b7 c0             	movzx  eax,ax
   2216b:	83 ec 08             	sub    esp,0x8
   2216e:	6a 55                	push   0x55
   22170:	50                   	push   eax
   22171:	e8 ee f8 ff ff       	call   21a64 <outb>
   22176:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:187
    outb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH,0xAA);
   22179:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2217c:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22182:	83 c0 05             	add    eax,0x5
   22185:	0f b7 c0             	movzx  eax,ax
   22188:	83 ec 08             	sub    esp,0x8
   2218b:	68 aa 00 00 00       	push   0xaa
   22190:	50                   	push   eax
   22191:	e8 ce f8 ff ff       	call   21a64 <outb>
   22196:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:188
    outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
   22199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2219c:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   221a2:	83 c0 07             	add    eax,0x7
   221a5:	0f b7 c0             	movzx  eax,ax
   221a8:	83 ec 08             	sub    esp,0x8
   221ab:	68 ec 00 00 00       	push   0xec
   221b0:	50                   	push   eax
   221b1:	e8 ae f8 ff ff       	call   21a64 <outb>
   221b6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:189
    wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
   221b9:	8b 15 84 02 a0 00    	mov    edx,DWORD PTR ds:0xa00284
   221bf:	89 d0                	mov    eax,edx
   221c1:	c1 e0 02             	shl    eax,0x2
   221c4:	01 d0                	add    eax,edx
   221c6:	01 c0                	add    eax,eax
   221c8:	83 ec 0c             	sub    esp,0xc
   221cb:	50                   	push   eax
   221cc:	e8 a1 60 00 00       	call   28272 <wait>
   221d1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:190
    cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
   221d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   221d7:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   221dd:	83 c0 07             	add    eax,0x7
   221e0:	0f b7 c0             	movzx  eax,ax
   221e3:	83 ec 0c             	sub    esp,0xc
   221e6:	50                   	push   eax
   221e7:	e8 97 f8 ff ff       	call   21a83 <inb>
   221ec:	83 c4 10             	add    esp,0x10
   221ef:	0f b6 c0             	movzx  eax,al
   221f2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:191
    if (cStatus==0)
   221f5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   221f9:	75 33                	jne    2222e <ataInit+0x142>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:194
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   221fb:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   22200:	83 e0 08             	and    eax,0x8
   22203:	85 c0                	test   eax,eax
   22205:	74 1d                	je     22224 <ataInit+0x138>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:195
            printk("Drive %02X, not ready(%02X)\n",devInfo->driveNo, cStatus);
   22207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2220a:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   22210:	83 ec 04             	sub    esp,0x4
   22213:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22216:	50                   	push   eax
   22217:	68 45 3c 08 00       	push   0x83c45
   2221c:	e8 12 4e 00 00       	call   27033 <printk>
   22221:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:197
#endif
        return false;
   22224:	b8 00 00 00 00       	mov    eax,0x0
   22229:	e9 f3 01 00 00       	jmp    22421 <ataInit+0x335>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:199
    }
    if ((cStatus & 1) == 1)
   2222e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   22231:	83 e0 01             	and    eax,0x1
   22234:	85 c0                	test   eax,eax
   22236:	0f 84 bb 00 00 00    	je     222f7 <ataInit+0x20b>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:201
    {
        int err = inb(devInfo->ioPort+ATA_PORT_ERROR);
   2223c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2223f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22245:	83 c0 01             	add    eax,0x1
   22248:	0f b7 c0             	movzx  eax,ax
   2224b:	83 ec 0c             	sub    esp,0xc
   2224e:	50                   	push   eax
   2224f:	e8 2f f8 ff ff       	call   21a83 <inb>
   22254:	83 c4 10             	add    esp,0x10
   22257:	0f b6 c0             	movzx  eax,al
   2225a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:203
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   2225d:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   22262:	83 e0 08             	and    eax,0x8
   22265:	85 c0                	test   eax,eax
   22267:	74 1d                	je     22286 <ataInit+0x19a>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:204
            printk("drive %02X, cStatus=%02X, errreg=%02X\n",devInfo->driveNo, cStatus,err);
   22269:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2226c:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   22272:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   22275:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22278:	50                   	push   eax
   22279:	68 64 3c 08 00       	push   0x83c64
   2227e:	e8 b0 4d 00 00       	call   27033 <printk>
   22283:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:206
#endif
        if (err!=4)
   22286:	83 7d ec 04          	cmp    DWORD PTR [ebp-0x14],0x4
   2228a:	74 0a                	je     22296 <ataInit+0x1aa>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:207
            return false;
   2228c:	b8 00 00 00 00       	mov    eax,0x0
   22291:	e9 8b 01 00 00       	jmp    22421 <ataInit+0x335>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:208
        useCDROMIdentify = true;
   22296:	c6 05 18 eb 09 00 01 	mov    BYTE PTR ds:0x9eb18,0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:209
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
   2229d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   222a0:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   222a6:	83 c0 07             	add    eax,0x7
   222a9:	0f b7 c0             	movzx  eax,ax
   222ac:	83 ec 0c             	sub    esp,0xc
   222af:	50                   	push   eax
   222b0:	e8 ce f7 ff ff       	call   21a83 <inb>
   222b5:	83 c4 10             	add    esp,0x10
   222b8:	0f b6 c0             	movzx  eax,al
   222bb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:210
        if (cStatus==0)
   222be:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   222c2:	75 33                	jne    222f7 <ataInit+0x20b>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:213
        {
#ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   222c4:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   222c9:	83 e0 08             	and    eax,0x8
   222cc:	85 c0                	test   eax,eax
   222ce:	74 1d                	je     222ed <ataInit+0x201>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:214
                printk("Drive %02X, not ready(%02X)\n",devInfo->driveNo, cStatus);
   222d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   222d3:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   222d9:	83 ec 04             	sub    esp,0x4
   222dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   222df:	50                   	push   eax
   222e0:	68 45 3c 08 00       	push   0x83c45
   222e5:	e8 49 4d 00 00       	call   27033 <printk>
   222ea:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:216
#endif
            return false;
   222ed:	b8 00 00 00 00       	mov    eax,0x0
   222f2:	e9 2a 01 00 00       	jmp    22421 <ataInit+0x335>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:219
        }
    }
    ticks=ATA_STANDARD_WAIT_MS*kTicksPerMS;
   222f7:	8b 15 84 02 a0 00    	mov    edx,DWORD PTR ds:0xa00284
   222fd:	89 d0                	mov    eax,edx
   222ff:	c1 e0 02             	shl    eax,0x2
   22302:	01 d0                	add    eax,edx
   22304:	01 c0                	add    eax,eax
   22306:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:220
    while ((cStatus & ATA_STATUS_BUSY) == ATA_STATUS_BUSY && (ticks>0))
   22309:	eb 32                	jmp    2233d <ataInit+0x251>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:222
    {
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
   2230b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2230e:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22314:	83 c0 07             	add    eax,0x7
   22317:	0f b7 c0             	movzx  eax,ax
   2231a:	83 ec 0c             	sub    esp,0xc
   2231d:	50                   	push   eax
   2231e:	e8 60 f7 ff ff       	call   21a83 <inb>
   22323:	83 c4 10             	add    esp,0x10
   22326:	0f b6 c0             	movzx  eax,al
   22329:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:223
        wait(1);
   2232c:	83 ec 0c             	sub    esp,0xc
   2232f:	6a 01                	push   0x1
   22331:	e8 3c 5f 00 00       	call   28272 <wait>
   22336:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:224
        ticks--;
   22339:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:220
#endif
            return false;
        }
    }
    ticks=ATA_STANDARD_WAIT_MS*kTicksPerMS;
    while ((cStatus & ATA_STATUS_BUSY) == ATA_STATUS_BUSY && (ticks>0))
   2233d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   22340:	25 80 00 00 00       	and    eax,0x80
   22345:	85 c0                	test   eax,eax
   22347:	74 06                	je     2234f <ataInit+0x263>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:220 (discriminator 1)
   22349:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   2234d:	7f bc                	jg     2230b <ataInit+0x21f>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:226
    {
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
        wait(1);
        ticks--;
    }
    if (!ataControllerIsReady(devInfo))
   2234f:	83 ec 0c             	sub    esp,0xc
   22352:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   22355:	e8 5d f9 ff ff       	call   21cb7 <ataControllerIsReady>
   2235a:	83 c4 10             	add    esp,0x10
   2235d:	84 c0                	test   al,al
   2235f:	75 0a                	jne    2236b <ataInit+0x27f>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:227
        return false;
   22361:	b8 00 00 00 00       	mov    eax,0x0
   22366:	e9 b6 00 00 00       	jmp    22421 <ataInit+0x335>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:228
    if (inb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW)!=0x55 || inb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH)!=0xaa)
   2236b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2236e:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22374:	83 c0 04             	add    eax,0x4
   22377:	0f b7 c0             	movzx  eax,ax
   2237a:	83 ec 0c             	sub    esp,0xc
   2237d:	50                   	push   eax
   2237e:	e8 00 f7 ff ff       	call   21a83 <inb>
   22383:	83 c4 10             	add    esp,0x10
   22386:	3c 55                	cmp    al,0x55
   22388:	75 1f                	jne    223a9 <ataInit+0x2bd>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:228 (discriminator 1)
   2238a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2238d:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22393:	83 c0 05             	add    eax,0x5
   22396:	0f b7 c0             	movzx  eax,ax
   22399:	83 ec 0c             	sub    esp,0xc
   2239c:	50                   	push   eax
   2239d:	e8 e1 f6 ff ff       	call   21a83 <inb>
   223a2:	83 c4 10             	add    esp,0x10
   223a5:	3c aa                	cmp    al,0xaa
   223a7:	74 73                	je     2241c <ataInit+0x330>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:231
    {
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   223a9:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   223ae:	83 e0 08             	and    eax,0x8
   223b1:	85 c0                	test   eax,eax
   223b3:	74 4e                	je     22403 <ataInit+0x317>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:232
        printk("Cylinder port non-zero (%X,%X), device is non-ATA\n",inb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW), inb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH));
   223b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   223b8:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   223be:	83 c0 05             	add    eax,0x5
   223c1:	0f b7 c0             	movzx  eax,ax
   223c4:	83 ec 0c             	sub    esp,0xc
   223c7:	50                   	push   eax
   223c8:	e8 b6 f6 ff ff       	call   21a83 <inb>
   223cd:	83 c4 10             	add    esp,0x10
   223d0:	0f b6 d8             	movzx  ebx,al
   223d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   223d6:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   223dc:	83 c0 04             	add    eax,0x4
   223df:	0f b7 c0             	movzx  eax,ax
   223e2:	83 ec 0c             	sub    esp,0xc
   223e5:	50                   	push   eax
   223e6:	e8 98 f6 ff ff       	call   21a83 <inb>
   223eb:	83 c4 10             	add    esp,0x10
   223ee:	0f b6 c0             	movzx  eax,al
   223f1:	83 ec 04             	sub    esp,0x4
   223f4:	53                   	push   ebx
   223f5:	50                   	push   eax
   223f6:	68 8c 3c 08 00       	push   0x83c8c
   223fb:	e8 33 4c 00 00       	call   27033 <printk>
   22400:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:234
#endif
        if (useCDROMIdentify)
   22403:	0f b6 05 18 eb 09 00 	movzx  eax,BYTE PTR ds:0x9eb18
   2240a:	84 c0                	test   al,al
   2240c:	74 07                	je     22415 <ataInit+0x329>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:235
            return true;
   2240e:	b8 01 00 00 00       	mov    eax,0x1
   22413:	eb 0c                	jmp    22421 <ataInit+0x335>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:237
        else
            return false;
   22415:	b8 00 00 00 00       	mov    eax,0x0
   2241a:	eb 05                	jmp    22421 <ataInit+0x335>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:239
    }
    return true;
   2241c:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:240
}
   22421:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   22424:	c9                   	leave  
   22425:	c3                   	ret    

00022426 <ataGetModelFromIdentify>:
ataGetModelFromIdentify():
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:243

void ataGetModelFromIdentify(struct ataDeviceInfo_t* devInfo)
{
   22426:	55                   	push   ebp
   22427:	89 e5                	mov    ebp,esp
   22429:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:244
    uint16_t* ident=devInfo->ATAIdentifyData+27;
   2242c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2242f:	83 c0 36             	add    eax,0x36
   22432:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:245
    for (int cnt=0;cnt<40;cnt+=2)
   22435:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   2243c:	eb 3d                	jmp    2247b <ataGetModelFromIdentify+0x55>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:247 (discriminator 3)
    {
        devInfo->ATADeviceModel[cnt]=(*ident >> 8) & 0xFF;
   2243e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   22441:	0f b7 00             	movzx  eax,WORD PTR [eax]
   22444:	66 c1 e8 08          	shr    ax,0x8
   22448:	89 c1                	mov    ecx,eax
   2244a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2244d:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   22450:	01 d0                	add    eax,edx
   22452:	05 00 02 00 00       	add    eax,0x200
   22457:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:248 (discriminator 3)
        devInfo->ATADeviceModel[cnt+1]=(*ident++) & 0xFF;
   22459:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   2245c:	8d 48 01             	lea    ecx,[eax+0x1]
   2245f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   22462:	8d 50 02             	lea    edx,[eax+0x2]
   22465:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   22468:	0f b7 00             	movzx  eax,WORD PTR [eax]
   2246b:	89 c2                	mov    edx,eax
   2246d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22470:	88 94 08 00 02 00 00 	mov    BYTE PTR [eax+ecx*1+0x200],dl
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:245 (discriminator 3)
}

void ataGetModelFromIdentify(struct ataDeviceInfo_t* devInfo)
{
    uint16_t* ident=devInfo->ATAIdentifyData+27;
    for (int cnt=0;cnt<40;cnt+=2)
   22477:	83 45 f8 02          	add    DWORD PTR [ebp-0x8],0x2
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:245 (discriminator 1)
   2247b:	83 7d f8 27          	cmp    DWORD PTR [ebp-0x8],0x27
   2247f:	7e bd                	jle    2243e <ataGetModelFromIdentify+0x18>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:250
    {
        devInfo->ATADeviceModel[cnt]=(*ident >> 8) & 0xFF;
        devInfo->ATADeviceModel[cnt+1]=(*ident++) & 0xFF;
    }
    devInfo->ATADeviceModel[79]='\0';
   22481:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22484:	c6 80 4f 02 00 00 00 	mov    BYTE PTR [eax+0x24f],0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:251
}
   2248b:	90                   	nop
   2248c:	c9                   	leave  
   2248d:	c3                   	ret    

0002248e <ataIdentify>:
ataIdentify():
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:254

int ataIdentify(struct ataDeviceInfo_t* devInfo)
{
   2248e:	55                   	push   ebp
   2248f:	89 e5                	mov    ebp,esp
   22491:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:256
    //For ATA devices, read the identity data.  For SATA, we've already read it into ATAIdentityData
    if (devInfo->queryATAData)
   22494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22497:	0f b6 80 50 02 00 00 	movzx  eax,BYTE PTR [eax+0x250]
   2249e:	84 c0                	test   al,al
   224a0:	0f 84 9c 00 00 00    	je     22542 <ataIdentify+0xb4>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:258
    {
        if (useCDROMIdentify)
   224a6:	0f b6 05 18 eb 09 00 	movzx  eax,BYTE PTR ds:0x9eb18
   224ad:	84 c0                	test   al,al
   224af:	74 1f                	je     224d0 <ataIdentify+0x42>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:259
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_CDROM_COMMAND);
   224b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   224b4:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   224ba:	83 c0 07             	add    eax,0x7
   224bd:	0f b7 c0             	movzx  eax,ax
   224c0:	68 a1 00 00 00       	push   0xa1
   224c5:	50                   	push   eax
   224c6:	e8 99 f5 ff ff       	call   21a64 <outb>
   224cb:	83 c4 08             	add    esp,0x8
   224ce:	eb 1d                	jmp    224ed <ataIdentify+0x5f>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:261
        else
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
   224d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   224d3:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   224d9:	83 c0 07             	add    eax,0x7
   224dc:	0f b7 c0             	movzx  eax,ax
   224df:	68 ec 00 00 00       	push   0xec
   224e4:	50                   	push   eax
   224e5:	e8 7a f5 ff ff       	call   21a64 <outb>
   224ea:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:262
        wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
   224ed:	8b 15 84 02 a0 00    	mov    edx,DWORD PTR ds:0xa00284
   224f3:	89 d0                	mov    eax,edx
   224f5:	c1 e0 02             	shl    eax,0x2
   224f8:	01 d0                	add    eax,edx
   224fa:	01 c0                	add    eax,eax
   224fc:	83 ec 0c             	sub    esp,0xc
   224ff:	50                   	push   eax
   22500:	e8 6d 5d 00 00       	call   28272 <wait>
   22505:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:263
        for (int readCount=0;readCount<=255;readCount++)
   22508:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   2250f:	eb 28                	jmp    22539 <ataIdentify+0xab>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:265 (discriminator 3)
        {
            devInfo->ATAIdentifyData[readCount]=inw(devInfo->ioPort+ATA_PORT_DATA);
   22511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22514:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2251a:	0f b7 c0             	movzx  eax,ax
   2251d:	83 ec 0c             	sub    esp,0xc
   22520:	50                   	push   eax
   22521:	e8 7a f5 ff ff       	call   21aa0 <inw>
   22526:	83 c4 10             	add    esp,0x10
   22529:	89 c1                	mov    ecx,eax
   2252b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2252e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   22531:	66 89 0c 50          	mov    WORD PTR [eax+edx*2],cx
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:263 (discriminator 3)
        if (useCDROMIdentify)
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_CDROM_COMMAND);
        else
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
        wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
        for (int readCount=0;readCount<=255;readCount++)
   22535:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:263 (discriminator 1)
   22539:	81 7d f4 ff 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xff
   22540:	7e cf                	jle    22511 <ataIdentify+0x83>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:268
        {
            devInfo->ATAIdentifyData[readCount]=inw(devInfo->ioPort+ATA_PORT_DATA);
        }
    }
    ataGetModelFromIdentify(devInfo);
   22542:	83 ec 0c             	sub    esp,0xc
   22545:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   22548:	e8 d9 fe ff ff       	call   22426 <ataGetModelFromIdentify>
   2254d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:269
    devInfo->totalSectorCount = devInfo->ATAIdentifyData[60] | (devInfo->ATAIdentifyData[61]<<16);
   22550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22553:	0f b7 40 78          	movzx  eax,WORD PTR [eax+0x78]
   22557:	0f b7 d0             	movzx  edx,ax
   2255a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2255d:	0f b7 40 7a          	movzx  eax,WORD PTR [eax+0x7a]
   22561:	0f b7 c0             	movzx  eax,ax
   22564:	c1 e0 10             	shl    eax,0x10
   22567:	09 d0                	or     eax,edx
   22569:	89 c2                	mov    edx,eax
   2256b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2256e:	89 90 56 02 00 00    	mov    DWORD PTR [eax+0x256],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:270
    devInfo->sectorSize = (devInfo->ATAIdentifyData[106] & 1<<12)==1<<12
   22574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22577:	0f b7 80 d4 00 00 00 	movzx  eax,WORD PTR [eax+0xd4]
   2257e:	0f b7 c0             	movzx  eax,ax
   22581:	25 00 10 00 00       	and    eax,0x1000
   22586:	85 c0                	test   eax,eax
   22588:	74 20                	je     225aa <ataIdentify+0x11c>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:271 (discriminator 1)
            ?devInfo->ATAIdentifyData[117] | (devInfo->ATAIdentifyData[18]<<16)
   2258a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2258d:	0f b7 80 ea 00 00 00 	movzx  eax,WORD PTR [eax+0xea]
   22594:	0f b7 d0             	movzx  edx,ax
   22597:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2259a:	0f b7 40 24          	movzx  eax,WORD PTR [eax+0x24]
   2259e:	0f b7 c0             	movzx  eax,ax
   225a1:	c1 e0 10             	shl    eax,0x10
   225a4:	09 d0                	or     eax,edx
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:270 (discriminator 1)
            devInfo->ATAIdentifyData[readCount]=inw(devInfo->ioPort+ATA_PORT_DATA);
        }
    }
    ataGetModelFromIdentify(devInfo);
    devInfo->totalSectorCount = devInfo->ATAIdentifyData[60] | (devInfo->ATAIdentifyData[61]<<16);
    devInfo->sectorSize = (devInfo->ATAIdentifyData[106] & 1<<12)==1<<12
   225a6:	89 c2                	mov    edx,eax
   225a8:	eb 05                	jmp    225af <ataIdentify+0x121>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:270 (discriminator 2)
   225aa:	ba 00 02 00 00       	mov    edx,0x200
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:270 (discriminator 4)
   225af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   225b2:	89 90 5a 02 00 00    	mov    DWORD PTR [eax+0x25a],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:273 (discriminator 4)
            ?devInfo->ATAIdentifyData[117] | (devInfo->ATAIdentifyData[18]<<16)
            :512;
    devInfo->dmaSupported=devInfo->ATAIdentifyData[49]>>8 & 0x1;
   225b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   225bb:	0f b7 40 62          	movzx  eax,WORD PTR [eax+0x62]
   225bf:	66 c1 e8 08          	shr    ax,0x8
   225c3:	0f b7 c0             	movzx  eax,ax
   225c6:	83 e0 01             	and    eax,0x1
   225c9:	85 c0                	test   eax,eax
   225cb:	0f 95 c2             	setne  dl
   225ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   225d1:	88 90 60 02 00 00    	mov    BYTE PTR [eax+0x260],dl
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:274 (discriminator 4)
    devInfo->lbaSupported=devInfo->ATAIdentifyData[49]>>9 & 0x1;
   225d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   225da:	0f b7 40 62          	movzx  eax,WORD PTR [eax+0x62]
   225de:	66 c1 e8 09          	shr    ax,0x9
   225e2:	0f b7 c0             	movzx  eax,ax
   225e5:	83 e0 01             	and    eax,0x1
   225e8:	85 c0                	test   eax,eax
   225ea:	0f 95 c2             	setne  dl
   225ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   225f0:	88 90 5e 02 00 00    	mov    BYTE PTR [eax+0x25e],dl
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:275 (discriminator 4)
    devInfo->lba48Supported=devInfo->ATAIdentifyData[83]>>10 & 0x1;
   225f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   225f9:	0f b7 80 a6 00 00 00 	movzx  eax,WORD PTR [eax+0xa6]
   22600:	66 c1 e8 0a          	shr    ax,0xa
   22604:	0f b7 c0             	movzx  eax,ax
   22607:	83 e0 01             	and    eax,0x1
   2260a:	85 c0                	test   eax,eax
   2260c:	0f 95 c2             	setne  dl
   2260f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22612:	88 90 5f 02 00 00    	mov    BYTE PTR [eax+0x25f],dl
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:278 (discriminator 4)
    
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22618:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   2261d:	83 e0 08             	and    eax,0x8
   22620:	85 c0                	test   eax,eax
   22622:	74 24                	je     22648 <ataIdentify+0x1ba>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:279
        printk("drive %d, model=%s\n",devInfo->driveNo, devInfo->ATADeviceModel);
   22624:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22627:	8d 90 00 02 00 00    	lea    edx,[eax+0x200]
   2262d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22630:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   22636:	83 ec 04             	sub    esp,0x4
   22639:	52                   	push   edx
   2263a:	50                   	push   eax
   2263b:	68 bf 3c 08 00       	push   0x83cbf
   22640:	e8 ee 49 00 00       	call   27033 <printk>
   22645:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:281
#endif
    return 1;
   22648:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:282
}
   2264d:	c9                   	leave  
   2264e:	c3                   	ret    

0002264f <ataScanForHarddrives>:
ataScanForHarddrives():
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:285

int ataScanForHarddrives()
{
   2264f:	55                   	push   ebp
   22650:	89 e5                	mov    ebp,esp
   22652:	53                   	push   ebx
   22653:	83 ec 04             	sub    esp,0x4
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:286
    kATADeviceInfo[0].bus=ATAPrimary;
   22656:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   2265b:	c7 80 61 02 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
   22662:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:287
    kATADeviceInfo[0].driveNo=0;
   22665:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   2266a:	c7 80 65 02 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
   22671:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:288
    kATADeviceInfo[0].ioPort=0x1F0;
   22674:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   22679:	c7 80 69 02 00 00 f0 	mov    DWORD PTR [eax+0x269],0x1f0
   22680:	01 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:289
    kATADeviceInfo[0].irqNum=0x14;
   22683:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   22688:	c6 80 6d 02 00 00 14 	mov    BYTE PTR [eax+0x26d],0x14
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:290
    kATADeviceInfo[0].driveHeadPortDesignation=0xA0;
   2268f:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   22694:	c6 80 6e 02 00 00 a0 	mov    BYTE PTR [eax+0x26e],0xa0
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:291
    kATADeviceInfo[0].queryATAData=true;
   2269b:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   226a0:	c6 80 50 02 00 00 01 	mov    BYTE PTR [eax+0x250],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:292
    kATADeviceInfo[0].ATADeviceAvailable=ataInit(&kATADeviceInfo[0]);
   226a7:	8b 1d c0 02 a0 00    	mov    ebx,DWORD PTR ds:0xa002c0
   226ad:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   226b2:	83 ec 0c             	sub    esp,0xc
   226b5:	50                   	push   eax
   226b6:	e8 31 fa ff ff       	call   220ec <ataInit>
   226bb:	83 c4 10             	add    esp,0x10
   226be:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:293
    if (kATADeviceInfo[0].ATADeviceAvailable)
   226c4:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   226c9:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   226d0:	84 c0                	test   al,al
   226d2:	74 3c                	je     22710 <ataScanForHarddrives+0xc1>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:295
    {
        ataIdentify(&kATADeviceInfo[0]);
   226d4:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   226d9:	83 ec 0c             	sub    esp,0xc
   226dc:	50                   	push   eax
   226dd:	e8 ac fd ff ff       	call   2248e <ataIdentify>
   226e2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:296
        if (useCDROMIdentify)
   226e5:	0f b6 05 18 eb 09 00 	movzx  eax,BYTE PTR ds:0x9eb18
   226ec:	84 c0                	test   al,al
   226ee:	74 11                	je     22701 <ataScanForHarddrives+0xb2>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:297
            kATADeviceInfo[0].ATADeviceType=ATA_DEVICE_TYPE_CD;
   226f0:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   226f5:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   226fc:	00 00 00 
   226ff:	eb 0f                	jmp    22710 <ataScanForHarddrives+0xc1>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:299
        else
            kATADeviceInfo[0].ATADeviceType=ATA_DEVICE_TYPE_HD;
   22701:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   22706:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   2270d:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:301
    }
    useCDROMIdentify=false;
   22710:	c6 05 18 eb 09 00 00 	mov    BYTE PTR ds:0x9eb18,0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:303

    kATADeviceInfo[1].bus=ATAPrimary;
   22717:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   2271c:	05 73 02 00 00       	add    eax,0x273
   22721:	c7 80 61 02 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
   22728:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:304
    kATADeviceInfo[1].driveNo=1;
   2272b:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   22730:	05 73 02 00 00       	add    eax,0x273
   22735:	c7 80 65 02 00 00 01 	mov    DWORD PTR [eax+0x265],0x1
   2273c:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:305
    kATADeviceInfo[1].ioPort=0x1F0;
   2273f:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   22744:	05 73 02 00 00       	add    eax,0x273
   22749:	c7 80 69 02 00 00 f0 	mov    DWORD PTR [eax+0x269],0x1f0
   22750:	01 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:306
    kATADeviceInfo[1].irqNum=0x14;
   22753:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   22758:	05 73 02 00 00       	add    eax,0x273
   2275d:	c6 80 6d 02 00 00 14 	mov    BYTE PTR [eax+0x26d],0x14
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:307
    kATADeviceInfo[1].driveHeadPortDesignation=0xB0;
   22764:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   22769:	05 73 02 00 00       	add    eax,0x273
   2276e:	c6 80 6e 02 00 00 b0 	mov    BYTE PTR [eax+0x26e],0xb0
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:308
    kATADeviceInfo[1].queryATAData=true;
   22775:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   2277a:	05 73 02 00 00       	add    eax,0x273
   2277f:	c6 80 50 02 00 00 01 	mov    BYTE PTR [eax+0x250],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:309
    kATADeviceInfo[1].ATADeviceAvailable=ataInit(&kATADeviceInfo[1]);
   22786:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   2278b:	8d 98 73 02 00 00    	lea    ebx,[eax+0x273]
   22791:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   22796:	05 73 02 00 00       	add    eax,0x273
   2279b:	83 ec 0c             	sub    esp,0xc
   2279e:	50                   	push   eax
   2279f:	e8 48 f9 ff ff       	call   220ec <ataInit>
   227a4:	83 c4 10             	add    esp,0x10
   227a7:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:310
    if (kATADeviceInfo[1].ATADeviceAvailable)
   227ad:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   227b2:	05 73 02 00 00       	add    eax,0x273
   227b7:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   227be:	84 c0                	test   al,al
   227c0:	74 4b                	je     2280d <ataScanForHarddrives+0x1be>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:312
    {
        ataIdentify(&kATADeviceInfo[1]);
   227c2:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   227c7:	05 73 02 00 00       	add    eax,0x273
   227cc:	83 ec 0c             	sub    esp,0xc
   227cf:	50                   	push   eax
   227d0:	e8 b9 fc ff ff       	call   2248e <ataIdentify>
   227d5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:313
        if (useCDROMIdentify)
   227d8:	0f b6 05 18 eb 09 00 	movzx  eax,BYTE PTR ds:0x9eb18
   227df:	84 c0                	test   al,al
   227e1:	74 16                	je     227f9 <ataScanForHarddrives+0x1aa>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:314
            kATADeviceInfo[1].ATADeviceType=ATA_DEVICE_TYPE_CD;
   227e3:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   227e8:	05 73 02 00 00       	add    eax,0x273
   227ed:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   227f4:	00 00 00 
   227f7:	eb 14                	jmp    2280d <ataScanForHarddrives+0x1be>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:316
        else
            kATADeviceInfo[1].ATADeviceType=ATA_DEVICE_TYPE_HD;
   227f9:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   227fe:	05 73 02 00 00       	add    eax,0x273
   22803:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   2280a:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:318
    }
    kATADeviceInfo[2].bus=ATASecondary;
   2280d:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   22812:	05 e6 04 00 00       	add    eax,0x4e6
   22817:	c7 80 61 02 00 00 01 	mov    DWORD PTR [eax+0x261],0x1
   2281e:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:319
    kATADeviceInfo[2].driveNo=2;
   22821:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   22826:	05 e6 04 00 00       	add    eax,0x4e6
   2282b:	c7 80 65 02 00 00 02 	mov    DWORD PTR [eax+0x265],0x2
   22832:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:320
    kATADeviceInfo[2].ioPort=0x170;
   22835:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   2283a:	05 e6 04 00 00       	add    eax,0x4e6
   2283f:	c7 80 69 02 00 00 70 	mov    DWORD PTR [eax+0x269],0x170
   22846:	01 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:321
    kATADeviceInfo[2].irqNum=0x15;
   22849:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   2284e:	05 e6 04 00 00       	add    eax,0x4e6
   22853:	c6 80 6d 02 00 00 15 	mov    BYTE PTR [eax+0x26d],0x15
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:322
    kATADeviceInfo[2].driveHeadPortDesignation=0xA0;
   2285a:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   2285f:	05 e6 04 00 00       	add    eax,0x4e6
   22864:	c6 80 6e 02 00 00 a0 	mov    BYTE PTR [eax+0x26e],0xa0
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:323
    kATADeviceInfo[2].queryATAData=false;
   2286b:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   22870:	05 e6 04 00 00       	add    eax,0x4e6
   22875:	c6 80 50 02 00 00 00 	mov    BYTE PTR [eax+0x250],0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:324
    kATADeviceInfo[2].ATADeviceAvailable=ataInit(&kATADeviceInfo[2]);
   2287c:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   22881:	8d 98 e6 04 00 00    	lea    ebx,[eax+0x4e6]
   22887:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   2288c:	05 e6 04 00 00       	add    eax,0x4e6
   22891:	83 ec 0c             	sub    esp,0xc
   22894:	50                   	push   eax
   22895:	e8 52 f8 ff ff       	call   220ec <ataInit>
   2289a:	83 c4 10             	add    esp,0x10
   2289d:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:325
    if (kATADeviceInfo[2].ATADeviceAvailable)
   228a3:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   228a8:	05 e6 04 00 00       	add    eax,0x4e6
   228ad:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   228b4:	84 c0                	test   al,al
   228b6:	74 4b                	je     22903 <ataScanForHarddrives+0x2b4>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:327
    {
        ataIdentify(&kATADeviceInfo[2]);
   228b8:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   228bd:	05 e6 04 00 00       	add    eax,0x4e6
   228c2:	83 ec 0c             	sub    esp,0xc
   228c5:	50                   	push   eax
   228c6:	e8 c3 fb ff ff       	call   2248e <ataIdentify>
   228cb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:328
        if (useCDROMIdentify)
   228ce:	0f b6 05 18 eb 09 00 	movzx  eax,BYTE PTR ds:0x9eb18
   228d5:	84 c0                	test   al,al
   228d7:	74 16                	je     228ef <ataScanForHarddrives+0x2a0>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:329
            kATADeviceInfo[2].ATADeviceType=ATA_DEVICE_TYPE_CD;
   228d9:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   228de:	05 e6 04 00 00       	add    eax,0x4e6
   228e3:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   228ea:	00 00 00 
   228ed:	eb 14                	jmp    22903 <ataScanForHarddrives+0x2b4>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:331
        else
            kATADeviceInfo[2].ATADeviceType=ATA_DEVICE_TYPE_HD;
   228ef:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   228f4:	05 e6 04 00 00       	add    eax,0x4e6
   228f9:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   22900:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:334
    }

    kATADeviceInfo[3].bus=ATASecondary;
   22903:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   22908:	05 59 07 00 00       	add    eax,0x759
   2290d:	c7 80 61 02 00 00 01 	mov    DWORD PTR [eax+0x261],0x1
   22914:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:335
    kATADeviceInfo[3].driveNo=3;
   22917:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   2291c:	05 59 07 00 00       	add    eax,0x759
   22921:	c7 80 65 02 00 00 03 	mov    DWORD PTR [eax+0x265],0x3
   22928:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:336
    kATADeviceInfo[3].ioPort=0x170;
   2292b:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   22930:	05 59 07 00 00       	add    eax,0x759
   22935:	c7 80 69 02 00 00 70 	mov    DWORD PTR [eax+0x269],0x170
   2293c:	01 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:337
    kATADeviceInfo[3].irqNum=0x15;
   2293f:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   22944:	05 59 07 00 00       	add    eax,0x759
   22949:	c6 80 6d 02 00 00 15 	mov    BYTE PTR [eax+0x26d],0x15
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:338
    kATADeviceInfo[3].driveHeadPortDesignation=0xB0;
   22950:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   22955:	05 59 07 00 00       	add    eax,0x759
   2295a:	c6 80 6e 02 00 00 b0 	mov    BYTE PTR [eax+0x26e],0xb0
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:339
    kATADeviceInfo[3].queryATAData=true;
   22961:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   22966:	05 59 07 00 00       	add    eax,0x759
   2296b:	c6 80 50 02 00 00 01 	mov    BYTE PTR [eax+0x250],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:340
    kATADeviceInfo[3].ATADeviceAvailable=ataInit(&kATADeviceInfo[3]);
   22972:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   22977:	8d 98 59 07 00 00    	lea    ebx,[eax+0x759]
   2297d:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   22982:	05 59 07 00 00       	add    eax,0x759
   22987:	83 ec 0c             	sub    esp,0xc
   2298a:	50                   	push   eax
   2298b:	e8 5c f7 ff ff       	call   220ec <ataInit>
   22990:	83 c4 10             	add    esp,0x10
   22993:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:341
    if (kATADeviceInfo[3].ATADeviceAvailable)
   22999:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   2299e:	05 59 07 00 00       	add    eax,0x759
   229a3:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   229aa:	84 c0                	test   al,al
   229ac:	74 4b                	je     229f9 <ataScanForHarddrives+0x3aa>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:343
    {
        ataIdentify(&kATADeviceInfo[3]);
   229ae:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   229b3:	05 59 07 00 00       	add    eax,0x759
   229b8:	83 ec 0c             	sub    esp,0xc
   229bb:	50                   	push   eax
   229bc:	e8 cd fa ff ff       	call   2248e <ataIdentify>
   229c1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:344
        if (useCDROMIdentify)
   229c4:	0f b6 05 18 eb 09 00 	movzx  eax,BYTE PTR ds:0x9eb18
   229cb:	84 c0                	test   al,al
   229cd:	74 16                	je     229e5 <ataScanForHarddrives+0x396>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:345
            kATADeviceInfo[3].ATADeviceType=ATA_DEVICE_TYPE_CD;
   229cf:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   229d4:	05 59 07 00 00       	add    eax,0x759
   229d9:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   229e0:	00 00 00 
   229e3:	eb 14                	jmp    229f9 <ataScanForHarddrives+0x3aa>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:347
        else
            kATADeviceInfo[3].ATADeviceType=ATA_DEVICE_TYPE_HD;
   229e5:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   229ea:	05 59 07 00 00       	add    eax,0x759
   229ef:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   229f6:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:351
    }

#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   229f9:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   229fe:	83 e0 08             	and    eax,0x8
   22a01:	85 c0                	test   eax,eax
   22a03:	74 2c                	je     22a31 <ataScanForHarddrives+0x3e2>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:352
        printk("INIT: Disk1=%s  Disk2=%s\n", kATADeviceInfo[0].ATADeviceModel, kATADeviceInfo[1].ATADeviceModel);
   22a05:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   22a0a:	05 73 02 00 00       	add    eax,0x273
   22a0f:	8d 90 00 02 00 00    	lea    edx,[eax+0x200]
   22a15:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   22a1a:	05 00 02 00 00       	add    eax,0x200
   22a1f:	83 ec 04             	sub    esp,0x4
   22a22:	52                   	push   edx
   22a23:	50                   	push   eax
   22a24:	68 d3 3c 08 00       	push   0x83cd3
   22a29:	e8 05 46 00 00       	call   27033 <printk>
   22a2e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:354
#endif
            return 0;
   22a31:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:355
}
   22a36:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   22a39:	c9                   	leave  
   22a3a:	c3                   	ret    

00022a3b <ataReadDisk>:
ataReadDisk():
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:357
int ataReadDisk(struct ataDeviceInfo_t* devInfo, uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
   22a3b:	55                   	push   ebp
   22a3c:	89 e5                	mov    ebp,esp
   22a3e:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:358
    atablockingReadDev = devInfo;
   22a41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22a44:	a3 a0 8f 09 00       	mov    ds:0x98fa0,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:359
    if (sector_count==0)    //this function can be called with a sector_count of 0 in order to set partOffset
   22a49:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   22a4d:	75 07                	jne    22a56 <ataReadDisk+0x1b>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:360
        return -1;
   22a4f:	b8 ff ff ff ff       	mov    eax,0xffffffff
   22a54:	eb 14                	jmp    22a6a <ataReadDisk+0x2f>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:361
    return ataBlockingRead28(sector, buffer, sector_count);
   22a56:	83 ec 04             	sub    esp,0x4
   22a59:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   22a5c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   22a5f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   22a62:	e8 05 00 00 00       	call   22a6c <ataBlockingRead28>
   22a67:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:362
}
   22a6a:	c9                   	leave  
   22a6b:	c3                   	ret    

00022a6c <ataBlockingRead28>:
ataBlockingRead28():
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:365

int ataBlockingRead28(uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
   22a6c:	55                   	push   ebp
   22a6d:	89 e5                	mov    ebp,esp
   22a6f:	83 ec 28             	sub    esp,0x28
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:367
    //For now if the FAT library calls this, we assume we've already read the same partition most recently
    int lResult=0;
   22a72:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:368
    uint8_t* bufp=buffer;
   22a79:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   22a7c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:369
    uint32_t lSectorsLeft=sector_count;
   22a7f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   22a82:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:370
    uint32_t lSector=sector+partOffset; //this represents the start of the partition
   22a85:	a1 20 eb 09 00       	mov    eax,ds:0x9eb20
   22a8a:	89 c2                	mov    edx,eax
   22a8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22a8f:	01 d0                	add    eax,edx
   22a91:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:373

#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22a94:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   22a99:	83 e0 08             	and    eax,0x8
   22a9c:	85 c0                	test   eax,eax
   22a9e:	74 1b                	je     22abb <ataBlockingRead28+0x4f>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:375
        {
            printk("ataBlockingRead28: sec: 0x%08X, buf 0x%08X, cnt 0x%08X\n", lSector, bufp, sector_count);
   22aa0:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   22aa3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22aa6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   22aa9:	68 f0 3c 08 00       	push   0x83cf0
   22aae:	e8 80 45 00 00       	call   27033 <printk>
   22ab3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:376
            waitForKeyboardKey();
   22ab6:	e8 97 e7 fe ff       	call   11252 <waitForKeyboardKey>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:379
        }
#endif
    lResult=ataWaitForIdle(atablockingReadDev);
   22abb:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22ac0:	83 ec 0c             	sub    esp,0xc
   22ac3:	50                   	push   eax
   22ac4:	e8 e1 f0 ff ff       	call   21baa <ataWaitForIdle>
   22ac9:	83 c4 10             	add    esp,0x10
   22acc:	0f b6 c0             	movzx  eax,al
   22acf:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:380
    if (lResult)
   22ad2:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   22ad6:	74 13                	je     22aeb <ataBlockingRead28+0x7f>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:381
        panic("ataBlockingRead28: Timeout waiting for DRQ and BSY to be clear (0x%02X)", lResult);
   22ad8:	83 ec 08             	sub    esp,0x8
   22adb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   22ade:	68 28 3d 08 00       	push   0x83d28
   22ae3:	e8 d0 40 00 00       	call   26bb8 <panic>
   22ae8:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:386
        //Select the drive we want
        //NOTE: Drive selected prior to calling this function
        //ataSelectDrive(drive,0);
        //Magic bit (6) to set LBA mode and top 4 bits of LBA28 sector # go in bottom 4
    outb(atablockingReadDev->ioPort+ATA_DRIVE_SELECT, inb(atablockingReadDev->ioPort+ATA_DRIVE_SELECT) | (1 << 6) | ((lSector >> 24) & 0x0F));
   22aeb:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22af0:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22af6:	83 c0 06             	add    eax,0x6
   22af9:	0f b7 c0             	movzx  eax,ax
   22afc:	83 ec 0c             	sub    esp,0xc
   22aff:	50                   	push   eax
   22b00:	e8 7e ef ff ff       	call   21a83 <inb>
   22b05:	83 c4 10             	add    esp,0x10
   22b08:	89 c2                	mov    edx,eax
   22b0a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   22b0d:	c1 e8 18             	shr    eax,0x18
   22b10:	83 e0 0f             	and    eax,0xf
   22b13:	09 d0                	or     eax,edx
   22b15:	83 c8 40             	or     eax,0x40
   22b18:	0f b6 d0             	movzx  edx,al
   22b1b:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22b20:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22b26:	83 c0 06             	add    eax,0x6
   22b29:	0f b7 c0             	movzx  eax,ax
   22b2c:	83 ec 08             	sub    esp,0x8
   22b2f:	52                   	push   edx
   22b30:	50                   	push   eax
   22b31:	e8 2e ef ff ff       	call   21a64 <outb>
   22b36:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:389

    //Send the sector count (8 bit))
    outb(atablockingReadDev->ioPort+ATA_PORT_SECTORCOUNT, sector_count);
   22b39:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   22b3c:	0f b6 d0             	movzx  edx,al
   22b3f:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22b44:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22b4a:	83 c0 02             	add    eax,0x2
   22b4d:	0f b7 c0             	movzx  eax,ax
   22b50:	83 ec 08             	sub    esp,0x8
   22b53:	52                   	push   edx
   22b54:	50                   	push   eax
   22b55:	e8 0a ef ff ff       	call   21a64 <outb>
   22b5a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:392

    //Send the LBA sector number in the next 3 fields + high bit in the 
    outb(atablockingReadDev->ioPort+ATA_PORT_SECTOR_NUMBER, (lSector) & 0xFF);
   22b5d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   22b60:	0f b6 d0             	movzx  edx,al
   22b63:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22b68:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22b6e:	83 c0 03             	add    eax,0x3
   22b71:	0f b7 c0             	movzx  eax,ax
   22b74:	83 ec 08             	sub    esp,0x8
   22b77:	52                   	push   edx
   22b78:	50                   	push   eax
   22b79:	e8 e6 ee ff ff       	call   21a64 <outb>
   22b7e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:393
    outb(atablockingReadDev->ioPort+ATA_PORT_CYLINDER_LOW, (lSector >> 8) & 0xFF);
   22b81:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   22b84:	c1 e8 08             	shr    eax,0x8
   22b87:	0f b6 d0             	movzx  edx,al
   22b8a:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22b8f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22b95:	83 c0 04             	add    eax,0x4
   22b98:	0f b7 c0             	movzx  eax,ax
   22b9b:	83 ec 08             	sub    esp,0x8
   22b9e:	52                   	push   edx
   22b9f:	50                   	push   eax
   22ba0:	e8 bf ee ff ff       	call   21a64 <outb>
   22ba5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:394
    outb(atablockingReadDev->ioPort+ATA_PORT_CYLINDER_HIGH, (lSector >> 16) & 0xFF);
   22ba8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   22bab:	c1 e8 10             	shr    eax,0x10
   22bae:	0f b6 d0             	movzx  edx,al
   22bb1:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22bb6:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22bbc:	83 c0 05             	add    eax,0x5
   22bbf:	0f b7 c0             	movzx  eax,ax
   22bc2:	83 ec 08             	sub    esp,0x8
   22bc5:	52                   	push   edx
   22bc6:	50                   	push   eax
   22bc7:	e8 98 ee ff ff       	call   21a64 <outb>
   22bcc:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:395
    outb(atablockingReadDev->ioPort+ATA_PORT_COMMAND, ATA_COMMAND_READ_SECTOR);
   22bcf:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22bd4:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22bda:	83 c0 07             	add    eax,0x7
   22bdd:	0f b7 c0             	movzx  eax,ax
   22be0:	83 ec 08             	sub    esp,0x8
   22be3:	6a 20                	push   0x20
   22be5:	50                   	push   eax
   22be6:	e8 79 ee ff ff       	call   21a64 <outb>
   22beb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:396
    lResult=ataWaitForDRQ(atablockingReadDev, true, ATA_STANDARD_WAIT_MS*kTicksPerMS);
   22bee:	8b 15 84 02 a0 00    	mov    edx,DWORD PTR ds:0xa00284
   22bf4:	89 d0                	mov    eax,edx
   22bf6:	c1 e0 02             	shl    eax,0x2
   22bf9:	01 d0                	add    eax,edx
   22bfb:	01 c0                	add    eax,eax
   22bfd:	89 c2                	mov    edx,eax
   22bff:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22c04:	83 ec 04             	sub    esp,0x4
   22c07:	52                   	push   edx
   22c08:	6a 01                	push   0x1
   22c0a:	50                   	push   eax
   22c0b:	e8 e4 ee ff ff       	call   21af4 <ataWaitForDRQ>
   22c10:	83 c4 10             	add    esp,0x10
   22c13:	0f b6 c0             	movzx  eax,al
   22c16:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:397
    if (lResult)
   22c19:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   22c1d:	0f 84 35 01 00 00    	je     22d58 <ataBlockingRead28+0x2ec>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:398
        panic("ataBlockingRead28: Timeout waiting for DRQ to be set Stts=0x%02X, Err=0x%02X", lResult, hdError);
   22c23:	a1 1c eb 09 00       	mov    eax,ds:0x9eb1c
   22c28:	83 ec 04             	sub    esp,0x4
   22c2b:	50                   	push   eax
   22c2c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   22c2f:	68 70 3d 08 00       	push   0x83d70
   22c34:	e8 7f 3f 00 00       	call   26bb8 <panic>
   22c39:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:399
    while (lSectorsLeft)
   22c3c:	e9 17 01 00 00       	jmp    22d58 <ataBlockingRead28+0x2ec>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:401
    {
        insw(atablockingReadDev->ioPort+ATA_PORT_DATA, bufp, 256);
   22c41:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22c46:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22c4c:	0f b7 c0             	movzx  eax,ax
   22c4f:	83 ec 04             	sub    esp,0x4
   22c52:	68 00 01 00 00       	push   0x100
   22c57:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22c5a:	50                   	push   eax
   22c5b:	e8 5f ee ff ff       	call   21abf <insw>
   22c60:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:403
        #ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22c63:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   22c68:	83 e0 08             	and    eax,0x8
   22c6b:	85 c0                	test   eax,eax
   22c6d:	74 52                	je     22cc1 <ataBlockingRead28+0x255>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:405
            {
                printk("ataBlockingRead28: Debugging: ");
   22c6f:	83 ec 0c             	sub    esp,0xc
   22c72:	68 c0 3d 08 00       	push   0x83dc0
   22c77:	e8 b7 43 00 00       	call   27033 <printk>
   22c7c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:406
                for (int cnt2=0;cnt2<20;cnt2++)
   22c7f:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   22c86:	eb 23                	jmp    22cab <ataBlockingRead28+0x23f>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:407 (discriminator 3)
                    printk("%02X ", bufp[cnt2]);
   22c88:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   22c8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   22c8e:	01 d0                	add    eax,edx
   22c90:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   22c93:	0f b6 c0             	movzx  eax,al
   22c96:	83 ec 08             	sub    esp,0x8
   22c99:	50                   	push   eax
   22c9a:	68 df 3d 08 00       	push   0x83ddf
   22c9f:	e8 8f 43 00 00       	call   27033 <printk>
   22ca4:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:406 (discriminator 3)
        insw(atablockingReadDev->ioPort+ATA_PORT_DATA, bufp, 256);
        #ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            {
                printk("ataBlockingRead28: Debugging: ");
                for (int cnt2=0;cnt2<20;cnt2++)
   22ca7:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:406 (discriminator 1)
   22cab:	83 7d e8 13          	cmp    DWORD PTR [ebp-0x18],0x13
   22caf:	7e d7                	jle    22c88 <ataBlockingRead28+0x21c>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:408
                    printk("%02X ", bufp[cnt2]);
                printk("\n");
   22cb1:	83 ec 0c             	sub    esp,0xc
   22cb4:	68 e5 3d 08 00       	push   0x83de5
   22cb9:	e8 75 43 00 00       	call   27033 <printk>
   22cbe:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:411
            }
        #endif
        if (--lSectorsLeft>0) //zero based vs 1 based
   22cc1:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
   22cc5:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   22cc9:	0f 84 89 00 00 00    	je     22d58 <ataBlockingRead28+0x2ec>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:413
        {
            wait(50);
   22ccf:	83 ec 0c             	sub    esp,0xc
   22cd2:	6a 32                	push   0x32
   22cd4:	e8 99 55 00 00       	call   28272 <wait>
   22cd9:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:414
            lResult=ataWaitForDRQ(atablockingReadDev, true, ATA_STANDARD_WAIT_MS*kTicksPerMS);
   22cdc:	8b 15 84 02 a0 00    	mov    edx,DWORD PTR ds:0xa00284
   22ce2:	89 d0                	mov    eax,edx
   22ce4:	c1 e0 02             	shl    eax,0x2
   22ce7:	01 d0                	add    eax,edx
   22ce9:	01 c0                	add    eax,eax
   22ceb:	89 c2                	mov    edx,eax
   22ced:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22cf2:	83 ec 04             	sub    esp,0x4
   22cf5:	52                   	push   edx
   22cf6:	6a 01                	push   0x1
   22cf8:	50                   	push   eax
   22cf9:	e8 f6 ed ff ff       	call   21af4 <ataWaitForDRQ>
   22cfe:	83 c4 10             	add    esp,0x10
   22d01:	0f b6 c0             	movzx  eax,al
   22d04:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:415
            bufp+=512;
   22d07:	81 45 f4 00 02 00 00 	add    DWORD PTR [ebp-0xc],0x200
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:416
            lSector++;
   22d0e:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:417
            if (lResult)
   22d12:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   22d16:	74 19                	je     22d31 <ataBlockingRead28+0x2c5>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:418
                panic("ataBlockingRead28: Timeout in read loop, waiting for DRQ to be set Stts=0x%02X, Err=0x%02X", lResult, hdError);
   22d18:	a1 1c eb 09 00       	mov    eax,ds:0x9eb1c
   22d1d:	83 ec 04             	sub    esp,0x4
   22d20:	50                   	push   eax
   22d21:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   22d24:	68 e8 3d 08 00       	push   0x83de8
   22d29:	e8 8a 3e 00 00       	call   26bb8 <panic>
   22d2e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:420
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22d31:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   22d36:	83 e0 08             	and    eax,0x8
   22d39:	85 c0                	test   eax,eax
   22d3b:	74 1b                	je     22d58 <ataBlockingRead28+0x2ec>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:422
        {
            printk("ataBlockingRead28: sec=0x%08X, buf=0x%08X, rep=0x%08X    \n", lSector, bufp, lSectorsLeft);
   22d3d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   22d40:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22d43:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   22d46:	68 44 3e 08 00       	push   0x83e44
   22d4b:	e8 e3 42 00 00       	call   27033 <printk>
   22d50:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:423
            waitForKeyboardKey();
   22d53:	e8 fa e4 fe ff       	call   11252 <waitForKeyboardKey>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:399
    outb(atablockingReadDev->ioPort+ATA_PORT_CYLINDER_HIGH, (lSector >> 16) & 0xFF);
    outb(atablockingReadDev->ioPort+ATA_PORT_COMMAND, ATA_COMMAND_READ_SECTOR);
    lResult=ataWaitForDRQ(atablockingReadDev, true, ATA_STANDARD_WAIT_MS*kTicksPerMS);
    if (lResult)
        panic("ataBlockingRead28: Timeout waiting for DRQ to be set Stts=0x%02X, Err=0x%02X", lResult, hdError);
    while (lSectorsLeft)
   22d58:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   22d5c:	0f 85 df fe ff ff    	jne    22c41 <ataBlockingRead28+0x1d5>
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:428
            waitForKeyboardKey();
        }
#endif
        }
    }
    return 512*sector_count;
   22d62:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   22d65:	c1 e0 09             	shl    eax,0x9
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:429
}
   22d68:	c9                   	leave  
   22d69:	c3                   	ret    

00022d6a <ataBlockingWrite28>:
ataBlockingWrite28():
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:432

int ataBlockingWrite28(/*unsigned drive, */uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
   22d6a:	55                   	push   ebp
   22d6b:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/init/ata_disk.c:468
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            printk("ataBlockingWrite28: Finished sending data\n");
#endif
    return 512;
*/}
   22d6d:	90                   	nop
   22d6e:	5d                   	pop    ebp
   22d6f:	c3                   	ret    

00022d70 <__get_cpuid_max>:
__get_cpuid_max():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:179
   pointer is non-null, then first four bytes of the signature
   (as found in ebx register) are returned in location pointed by sig.  */

static __inline unsigned int
__get_cpuid_max (unsigned int __ext, unsigned int *__sig)
{
   22d70:	55                   	push   ebp
   22d71:	89 e5                	mov    ebp,esp
   22d73:	53                   	push   ebx
   22d74:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:185
  unsigned int __eax, __ebx, __ecx, __edx;

#ifndef __x86_64__
  /* See if we can use cpuid.  On AMD64 we always can.  */
#if __GNUC__ >= 3
  __asm__ ("pushf{l|d}\n\t"
   22d77:	9c                   	pushf  
   22d78:	9c                   	pushf  
   22d79:	5a                   	pop    edx
   22d7a:	89 d0                	mov    eax,edx
   22d7c:	81 f2 00 00 20 00    	xor    edx,0x200000
   22d82:	52                   	push   edx
   22d83:	9d                   	popf   
   22d84:	9c                   	pushf  
   22d85:	5a                   	pop    edx
   22d86:	9d                   	popf   
   22d87:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   22d8a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:214
	   "popfl\n\t"
	   : "=&r" (__eax), "=&r" (__ebx)
	   : "i" (0x00200000));
#endif

  if (!((__eax ^ __ebx) & 0x00200000))
   22d8d:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   22d90:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
   22d93:	25 00 00 20 00       	and    eax,0x200000
   22d98:	85 c0                	test   eax,eax
   22d9a:	75 07                	jne    22da3 <__get_cpuid_max+0x33>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:215
    return 0;
   22d9c:	b8 00 00 00 00       	mov    eax,0x0
   22da1:	eb 22                	jmp    22dc5 <__get_cpuid_max+0x55>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:219
#endif

  /* Host supports cpuid.  Return highest supported cpuid input value.  */
  __cpuid (__ext, __eax, __ebx, __ecx, __edx);
   22da3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22da6:	0f a2                	cpuid  
   22da8:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   22dab:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
   22dae:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   22db1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:221

  if (__sig)
   22db4:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   22db8:	74 08                	je     22dc2 <__get_cpuid_max+0x52>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:222
    *__sig = __ebx;
   22dba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   22dbd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   22dc0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:224

  return __eax;
   22dc2:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:225
}
   22dc5:	83 c4 10             	add    esp,0x10
   22dc8:	5b                   	pop    ebx
   22dc9:	5d                   	pop    ebp
   22dca:	c3                   	ret    

00022dcb <__get_cpuid>:
__get_cpuid():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:236

static __inline int
__get_cpuid (unsigned int __level,
	     unsigned int *__eax, unsigned int *__ebx,
	     unsigned int *__ecx, unsigned int *__edx)
{
   22dcb:	55                   	push   ebp
   22dcc:	89 e5                	mov    ebp,esp
   22dce:	56                   	push   esi
   22dcf:	53                   	push   ebx
   22dd0:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:237
  unsigned int __ext = __level & 0x80000000;
   22dd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22dd6:	25 00 00 00 80       	and    eax,0x80000000
   22ddb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:239

  if (__get_cpuid_max (__ext, 0) < __level)
   22dde:	6a 00                	push   0x0
   22de0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22de3:	e8 88 ff ff ff       	call   22d70 <__get_cpuid_max>
   22de8:	83 c4 08             	add    esp,0x8
   22deb:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   22dee:	73 07                	jae    22df7 <__get_cpuid+0x2c>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:240
    return 0;
   22df0:	b8 00 00 00 00       	mov    eax,0x0
   22df5:	eb 1e                	jmp    22e15 <__get_cpuid+0x4a>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:242

  __cpuid (__level, *__eax, *__ebx, *__ecx, *__edx);
   22df7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22dfa:	0f a2                	cpuid  
   22dfc:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
   22dff:	89 06                	mov    DWORD PTR [esi],eax
   22e01:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   22e04:	89 18                	mov    DWORD PTR [eax],ebx
   22e06:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   22e09:	89 08                	mov    DWORD PTR [eax],ecx
   22e0b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   22e0e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:243
  return 1;
   22e10:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:244
}
   22e15:	8d 65 f8             	lea    esp,[ebp-0x8]
   22e18:	5b                   	pop    ebx
   22e19:	5e                   	pop    esi
   22e1a:	5d                   	pop    ebp
   22e1b:	c3                   	ret    

00022e1c <detect_cpu>:
detect_cpu():
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:45
void printregs(int eax, int ebx, int ecx, int edx);
extern struct cpuinfo_t kcpuInfo;


/* Simply call this function detect_cpu(); */
int HIGH_CODE_SECTION detect_cpu(void) { /* or main() if your trying to port this as an independant application */
   22e1c:	55                   	push   ebp
   22e1d:	89 e5                	mov    ebp,esp
   22e1f:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:47
	unsigned int ebx, unused;
        __get_cpuid(0, &unused, &ebx, &unused, &unused);
   22e22:	8d 45 f0             	lea    eax,[ebp-0x10]
   22e25:	50                   	push   eax
   22e26:	8d 45 f0             	lea    eax,[ebp-0x10]
   22e29:	50                   	push   eax
   22e2a:	8d 45 f4             	lea    eax,[ebp-0xc]
   22e2d:	50                   	push   eax
   22e2e:	8d 45 f0             	lea    eax,[ebp-0x10]
   22e31:	50                   	push   eax
   22e32:	6a 00                	push   0x0
   22e34:	e8 92 ff ff ff       	call   22dcb <__get_cpuid>
   22e39:	83 c4 14             	add    esp,0x14
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:48
	switch(ebx) {
   22e3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   22e3f:	3d 41 75 74 68       	cmp    eax,0x68747541
   22e44:	74 0e                	je     22e54 <detect_cpu+0x38>
   22e46:	3d 47 65 6e 75       	cmp    eax,0x756e6547
   22e4b:	75 0e                	jne    22e5b <detect_cpu+0x3f>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:50
		case 0x756e6547: /* Intel Magic Code */
		do_intel();
   22e4d:	e8 2a 00 00 00       	call   22e7c <do_intel>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:51
		break;
   22e52:	eb 21                	jmp    22e75 <detect_cpu+0x59>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:53
		case 0x68747541: /* AMD Magic Code */
		do_amd();
   22e54:	e8 27 06 00 00       	call   23480 <do_amd>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:54
		break;
   22e59:	eb 1a                	jmp    22e75 <detect_cpu+0x59>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:56
		default:
		printk("Unknown x86 CPU Detected\n");
   22e5b:	83 ec 0c             	sub    esp,0xc
   22e5e:	68 80 3e 08 00       	push   0x83e80
   22e63:	e8 cb 41 00 00       	call   27033 <printk>
   22e68:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:57
                __asm__("pushf\n pop eax\n and eax,0xFFDFFFFF\n push eax\n popf\n");
   22e6b:	9c                   	pushf  
   22e6c:	58                   	pop    eax
   22e6d:	25 ff ff df ff       	and    eax,0xffdfffff
   22e72:	50                   	push   eax
   22e73:	9d                   	popf   
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:58
		break;
   22e74:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:60
	}
	return 0;
   22e75:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:61
}
   22e7a:	c9                   	leave  
   22e7b:	c3                   	ret    

00022e7c <do_intel>:
do_intel():
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:120
	"Reserved", 
	"Reserved"
};

/* Intel-specific information */
int HIGH_CODE_SECTION do_intel(void) {
   22e7c:	55                   	push   ebp
   22e7d:	89 e5                	mov    ebp,esp
   22e7f:	53                   	push   ebx
   22e80:	83 ec 24             	sub    esp,0x24
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:121
	unsigned int eax=0, ebx=0, ecx=0, edx=0, max_eax=0, signature, unused;
   22e83:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   22e8a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   22e91:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   22e98:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   22e9f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:122
	sprintf(kcpuInfo.vendor,"Intel");
   22ea6:	83 ec 08             	sub    esp,0x8
   22ea9:	68 d7 40 08 00       	push   0x840d7
   22eae:	68 78 00 a0 00       	push   0xa00078
   22eb3:	e8 cf 41 00 00       	call   27087 <sprintf>
   22eb8:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:123
        __get_cpuid(1, &eax, &ebx, &unused, &unused);
   22ebb:	83 ec 0c             	sub    esp,0xc
   22ebe:	8d 45 dc             	lea    eax,[ebp-0x24]
   22ec1:	50                   	push   eax
   22ec2:	8d 45 dc             	lea    eax,[ebp-0x24]
   22ec5:	50                   	push   eax
   22ec6:	8d 45 ec             	lea    eax,[ebp-0x14]
   22ec9:	50                   	push   eax
   22eca:	8d 45 f0             	lea    eax,[ebp-0x10]
   22ecd:	50                   	push   eax
   22ece:	6a 01                	push   0x1
   22ed0:	e8 f6 fe ff ff       	call   22dcb <__get_cpuid>
   22ed5:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:124
	kcpuInfo.model = (eax >> 4) & 0xf;
   22ed8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   22edb:	c1 e8 04             	shr    eax,0x4
   22ede:	83 e0 0f             	and    eax,0xf
   22ee1:	a3 64 00 a0 00       	mov    ds:0xa00064,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:125
	kcpuInfo.family = (eax >> 8) & 0xf;
   22ee6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   22ee9:	c1 e8 08             	shr    eax,0x8
   22eec:	83 e0 0f             	and    eax,0xf
   22eef:	a3 60 00 a0 00       	mov    ds:0xa00060,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:126
	kcpuInfo.type = (eax >> 12) & 0x3;
   22ef4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   22ef7:	c1 e8 0c             	shr    eax,0xc
   22efa:	83 e0 03             	and    eax,0x3
   22efd:	a3 6c 00 a0 00       	mov    ds:0xa0006c,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:127
	kcpuInfo.brand = ebx & 0xff;
   22f02:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   22f05:	0f b6 c0             	movzx  eax,al
   22f08:	a3 70 00 a0 00       	mov    ds:0xa00070,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:128
	kcpuInfo.stepping = eax & 0xf;
   22f0d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   22f10:	83 e0 0f             	and    eax,0xf
   22f13:	a3 68 00 a0 00       	mov    ds:0xa00068,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:129
	signature = eax;
   22f18:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   22f1b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:130
	switch(kcpuInfo.type) {
   22f1e:	a1 6c 00 a0 00       	mov    eax,ds:0xa0006c
   22f23:	83 f8 01             	cmp    eax,0x1
   22f26:	74 2e                	je     22f56 <do_intel+0xda>
   22f28:	83 f8 01             	cmp    eax,0x1
   22f2b:	7f 06                	jg     22f33 <do_intel+0xb7>
   22f2d:	85 c0                	test   eax,eax
   22f2f:	74 0e                	je     22f3f <do_intel+0xc3>
   22f31:	eb 67                	jmp    22f9a <do_intel+0x11e>
   22f33:	83 f8 02             	cmp    eax,0x2
   22f36:	74 35                	je     22f6d <do_intel+0xf1>
   22f38:	83 f8 03             	cmp    eax,0x3
   22f3b:	74 47                	je     22f84 <do_intel+0x108>
   22f3d:	eb 5b                	jmp    22f9a <do_intel+0x11e>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:132
		case 0:
		sprintf(kcpuInfo.type_name,"Original OEM");
   22f3f:	83 ec 08             	sub    esp,0x8
   22f42:	68 dd 40 08 00       	push   0x840dd
   22f47:	68 0e 01 a0 00       	push   0xa0010e
   22f4c:	e8 36 41 00 00       	call   27087 <sprintf>
   22f51:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:133
		break;
   22f54:	eb 44                	jmp    22f9a <do_intel+0x11e>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:135
		case 1:
		sprintf(kcpuInfo.type_name,"Overdrive");
   22f56:	83 ec 08             	sub    esp,0x8
   22f59:	68 ea 40 08 00       	push   0x840ea
   22f5e:	68 0e 01 a0 00       	push   0xa0010e
   22f63:	e8 1f 41 00 00       	call   27087 <sprintf>
   22f68:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:136
		break;
   22f6b:	eb 2d                	jmp    22f9a <do_intel+0x11e>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:138
		case 2:
		sprintf(kcpuInfo.type_name,"Dual-capable");
   22f6d:	83 ec 08             	sub    esp,0x8
   22f70:	68 f4 40 08 00       	push   0x840f4
   22f75:	68 0e 01 a0 00       	push   0xa0010e
   22f7a:	e8 08 41 00 00       	call   27087 <sprintf>
   22f7f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:139
		break;
   22f82:	eb 16                	jmp    22f9a <do_intel+0x11e>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:141
		case 3:
		sprintf(kcpuInfo.type_name,"Reserved");
   22f84:	83 ec 08             	sub    esp,0x8
   22f87:	68 1e 3f 08 00       	push   0x83f1e
   22f8c:	68 0e 01 a0 00       	push   0xa0010e
   22f91:	e8 f1 40 00 00       	call   27087 <sprintf>
   22f96:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:142
		break;
   22f99:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:144
	}
	switch(kcpuInfo.family) {
   22f9a:	a1 60 00 a0 00       	mov    eax,ds:0xa00060
   22f9f:	83 e8 03             	sub    eax,0x3
   22fa2:	83 f8 0c             	cmp    eax,0xc
   22fa5:	77 7a                	ja     23021 <do_intel+0x1a5>
   22fa7:	8b 04 85 2c 42 08 00 	mov    eax,DWORD PTR [eax*4+0x8422c]
   22fae:	ff e0                	jmp    eax
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:146
		case 3:
		sprintf(kcpuInfo.family_name,"i386");
   22fb0:	83 ec 08             	sub    esp,0x8
   22fb3:	68 01 41 08 00       	push   0x84101
   22fb8:	68 40 01 a0 00       	push   0xa00140
   22fbd:	e8 c5 40 00 00       	call   27087 <sprintf>
   22fc2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:147
		break;
   22fc5:	eb 5a                	jmp    23021 <do_intel+0x1a5>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:149
		case 4:
		sprintf(kcpuInfo.family_name,"i486");
   22fc7:	83 ec 08             	sub    esp,0x8
   22fca:	68 06 41 08 00       	push   0x84106
   22fcf:	68 40 01 a0 00       	push   0xa00140
   22fd4:	e8 ae 40 00 00       	call   27087 <sprintf>
   22fd9:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:150
		break;
   22fdc:	eb 43                	jmp    23021 <do_intel+0x1a5>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:152
		case 5:
		sprintf(kcpuInfo.family_name,"Pentium");
   22fde:	83 ec 08             	sub    esp,0x8
   22fe1:	68 0b 41 08 00       	push   0x8410b
   22fe6:	68 40 01 a0 00       	push   0xa00140
   22feb:	e8 97 40 00 00       	call   27087 <sprintf>
   22ff0:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:153
		break;
   22ff3:	eb 2c                	jmp    23021 <do_intel+0x1a5>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:155
		case 6:
		sprintf(kcpuInfo.family_name,"Pentium Pro");
   22ff5:	83 ec 08             	sub    esp,0x8
   22ff8:	68 13 41 08 00       	push   0x84113
   22ffd:	68 40 01 a0 00       	push   0xa00140
   23002:	e8 80 40 00 00       	call   27087 <sprintf>
   23007:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:156
		break;
   2300a:	eb 15                	jmp    23021 <do_intel+0x1a5>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:158
		case 15:
		sprintf(kcpuInfo.family_name,"Pentium 4");
   2300c:	83 ec 08             	sub    esp,0x8
   2300f:	68 1f 41 08 00       	push   0x8411f
   23014:	68 40 01 a0 00       	push   0xa00140
   23019:	e8 69 40 00 00       	call   27087 <sprintf>
   2301e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:160
	}
	if(kcpuInfo.family == 15) {
   23021:	a1 60 00 a0 00       	mov    eax,ds:0xa00060
   23026:	83 f8 0f             	cmp    eax,0xf
   23029:	75 0e                	jne    23039 <do_intel+0x1bd>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:161
		kcpuInfo.extended_family = (eax >> 20) & 0xff;
   2302b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2302e:	c1 e8 14             	shr    eax,0x14
   23031:	0f b6 c0             	movzx  eax,al
   23034:	a3 74 00 a0 00       	mov    ds:0xa00074,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:163
	}
	switch(kcpuInfo.family) {
   23039:	a1 60 00 a0 00       	mov    eax,ds:0xa00060
   2303e:	83 e8 03             	sub    eax,0x3
   23041:	83 f8 0c             	cmp    eax,0xc
   23044:	0f 87 f6 01 00 00    	ja     23240 <do_intel+0x3c4>
   2304a:	8b 04 85 60 42 08 00 	mov    eax,DWORD PTR [eax*4+0x84260]
   23051:	ff e0                	jmp    eax
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:167
		case 3:
		break;
		case 4:
		switch(kcpuInfo.model) {
   23053:	a1 64 00 a0 00       	mov    eax,ds:0xa00064
   23058:	83 f8 08             	cmp    eax,0x8
   2305b:	0f 87 db 01 00 00    	ja     2323c <do_intel+0x3c0>
   23061:	8b 04 85 94 42 08 00 	mov    eax,DWORD PTR [eax*4+0x84294]
   23068:	ff e0                	jmp    eax
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:170
			case 0:
			case 1:
			sprintf(kcpuInfo.model_name,"DX");
   2306a:	83 ec 08             	sub    esp,0x8
   2306d:	68 29 41 08 00       	push   0x84129
   23072:	68 aa 00 a0 00       	push   0xa000aa
   23077:	e8 0b 40 00 00       	call   27087 <sprintf>
   2307c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:171
			break;
   2307f:	e9 89 00 00 00       	jmp    2310d <do_intel+0x291>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:173
			case 2:
			sprintf(kcpuInfo.model_name,"SX");
   23084:	83 ec 08             	sub    esp,0x8
   23087:	68 2c 41 08 00       	push   0x8412c
   2308c:	68 aa 00 a0 00       	push   0xa000aa
   23091:	e8 f1 3f 00 00       	call   27087 <sprintf>
   23096:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:174
			break;
   23099:	eb 72                	jmp    2310d <do_intel+0x291>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:176
			case 3:
			sprintf(kcpuInfo.model_name,"487/DX2");
   2309b:	83 ec 08             	sub    esp,0x8
   2309e:	68 2f 41 08 00       	push   0x8412f
   230a3:	68 aa 00 a0 00       	push   0xa000aa
   230a8:	e8 da 3f 00 00       	call   27087 <sprintf>
   230ad:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:177
			break;
   230b0:	eb 5b                	jmp    2310d <do_intel+0x291>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:179
			case 4:
			sprintf(kcpuInfo.model_name,"SL");
   230b2:	83 ec 08             	sub    esp,0x8
   230b5:	68 37 41 08 00       	push   0x84137
   230ba:	68 aa 00 a0 00       	push   0xa000aa
   230bf:	e8 c3 3f 00 00       	call   27087 <sprintf>
   230c4:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:180
			break;
   230c7:	eb 44                	jmp    2310d <do_intel+0x291>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:182
			case 5:
			sprintf(kcpuInfo.model_name,"SX2");
   230c9:	83 ec 08             	sub    esp,0x8
   230cc:	68 3a 41 08 00       	push   0x8413a
   230d1:	68 aa 00 a0 00       	push   0xa000aa
   230d6:	e8 ac 3f 00 00       	call   27087 <sprintf>
   230db:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:183
			break;
   230de:	eb 2d                	jmp    2310d <do_intel+0x291>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:185
			case 7:
			sprintf(kcpuInfo.model_name,"Write-back enhanced DX2");
   230e0:	83 ec 08             	sub    esp,0x8
   230e3:	68 3e 41 08 00       	push   0x8413e
   230e8:	68 aa 00 a0 00       	push   0xa000aa
   230ed:	e8 95 3f 00 00       	call   27087 <sprintf>
   230f2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:186
			break;
   230f5:	eb 16                	jmp    2310d <do_intel+0x291>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:188
			case 8:
			sprintf(kcpuInfo.model_name,"DX4");
   230f7:	83 ec 08             	sub    esp,0x8
   230fa:	68 56 41 08 00       	push   0x84156
   230ff:	68 aa 00 a0 00       	push   0xa000aa
   23104:	e8 7e 3f 00 00       	call   27087 <sprintf>
   23109:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:189
			break;
   2310c:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:191
		}
		break;
   2310d:	e9 2a 01 00 00       	jmp    2323c <do_intel+0x3c0>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:193
		case 5:
		switch(kcpuInfo.model) {
   23112:	a1 64 00 a0 00       	mov    eax,ds:0xa00064
   23117:	83 f8 02             	cmp    eax,0x2
   2311a:	74 35                	je     23151 <do_intel+0x2d5>
   2311c:	83 f8 02             	cmp    eax,0x2
   2311f:	7f 0a                	jg     2312b <do_intel+0x2af>
   23121:	83 f8 01             	cmp    eax,0x1
   23124:	74 14                	je     2313a <do_intel+0x2be>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:207
			break;
			case 4:
			sprintf(kcpuInfo.model_name,"MMX");
			break;
		}
		break;
   23126:	e9 15 01 00 00       	jmp    23240 <do_intel+0x3c4>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:193
			sprintf(kcpuInfo.model_name,"DX4");
			break;
		}
		break;
		case 5:
		switch(kcpuInfo.model) {
   2312b:	83 f8 03             	cmp    eax,0x3
   2312e:	74 38                	je     23168 <do_intel+0x2ec>
   23130:	83 f8 04             	cmp    eax,0x4
   23133:	74 4a                	je     2317f <do_intel+0x303>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:207
			break;
			case 4:
			sprintf(kcpuInfo.model_name,"MMX");
			break;
		}
		break;
   23135:	e9 06 01 00 00       	jmp    23240 <do_intel+0x3c4>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:195
		}
		break;
		case 5:
		switch(kcpuInfo.model) {
			case 1:
			sprintf(kcpuInfo.model_name,"60/66");
   2313a:	83 ec 08             	sub    esp,0x8
   2313d:	68 5a 41 08 00       	push   0x8415a
   23142:	68 aa 00 a0 00       	push   0xa000aa
   23147:	e8 3b 3f 00 00       	call   27087 <sprintf>
   2314c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:196
			break;
   2314f:	eb 44                	jmp    23195 <do_intel+0x319>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:198
			case 2:
			sprintf(kcpuInfo.model_name,"75-200");
   23151:	83 ec 08             	sub    esp,0x8
   23154:	68 60 41 08 00       	push   0x84160
   23159:	68 aa 00 a0 00       	push   0xa000aa
   2315e:	e8 24 3f 00 00       	call   27087 <sprintf>
   23163:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:199
			break;
   23166:	eb 2d                	jmp    23195 <do_intel+0x319>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:201
			case 3:
			sprintf(kcpuInfo.model_name,"for 486 system");
   23168:	83 ec 08             	sub    esp,0x8
   2316b:	68 67 41 08 00       	push   0x84167
   23170:	68 aa 00 a0 00       	push   0xa000aa
   23175:	e8 0d 3f 00 00       	call   27087 <sprintf>
   2317a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:202
			break;
   2317d:	eb 16                	jmp    23195 <do_intel+0x319>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:204
			case 4:
			sprintf(kcpuInfo.model_name,"MMX");
   2317f:	83 ec 08             	sub    esp,0x8
   23182:	68 76 41 08 00       	push   0x84176
   23187:	68 aa 00 a0 00       	push   0xa000aa
   2318c:	e8 f6 3e 00 00       	call   27087 <sprintf>
   23191:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:205
			break;
   23194:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:207
		}
		break;
   23195:	e9 a6 00 00 00       	jmp    23240 <do_intel+0x3c4>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:209
		case 6:
		switch(kcpuInfo.model) {
   2319a:	a1 64 00 a0 00       	mov    eax,ds:0xa00064
   2319f:	83 f8 08             	cmp    eax,0x8
   231a2:	0f 87 97 00 00 00    	ja     2323f <do_intel+0x3c3>
   231a8:	8b 04 85 b8 42 08 00 	mov    eax,DWORD PTR [eax*4+0x842b8]
   231af:	ff e0                	jmp    eax
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:211
			case 1:
			sprintf(kcpuInfo.model_name,"Pentium Pro");
   231b1:	83 ec 08             	sub    esp,0x8
   231b4:	68 13 41 08 00       	push   0x84113
   231b9:	68 aa 00 a0 00       	push   0xa000aa
   231be:	e8 c4 3e 00 00       	call   27087 <sprintf>
   231c3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:212
			break;
   231c6:	eb 72                	jmp    2323a <do_intel+0x3be>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:214
			case 3:
			sprintf(kcpuInfo.model_name,"Pentium II Model 3");
   231c8:	83 ec 08             	sub    esp,0x8
   231cb:	68 7a 41 08 00       	push   0x8417a
   231d0:	68 aa 00 a0 00       	push   0xa000aa
   231d5:	e8 ad 3e 00 00       	call   27087 <sprintf>
   231da:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:215
			break;
   231dd:	eb 5b                	jmp    2323a <do_intel+0x3be>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:217
			case 5:
			sprintf(kcpuInfo.model_name,"Pentium II Model 5/Xeon/Celeron");
   231df:	83 ec 08             	sub    esp,0x8
   231e2:	68 90 41 08 00       	push   0x84190
   231e7:	68 aa 00 a0 00       	push   0xa000aa
   231ec:	e8 96 3e 00 00       	call   27087 <sprintf>
   231f1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:218
			break;
   231f4:	eb 44                	jmp    2323a <do_intel+0x3be>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:220
			case 6:
			sprintf(kcpuInfo.model_name,"Celeron");
   231f6:	83 ec 08             	sub    esp,0x8
   231f9:	68 b0 41 08 00       	push   0x841b0
   231fe:	68 aa 00 a0 00       	push   0xa000aa
   23203:	e8 7f 3e 00 00       	call   27087 <sprintf>
   23208:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:221
			break;
   2320b:	eb 2d                	jmp    2323a <do_intel+0x3be>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:223
			case 7:
			sprintf(kcpuInfo.model_name,"Pentium III/Pentium III Xeon - external L2 cache");
   2320d:	83 ec 08             	sub    esp,0x8
   23210:	68 b8 41 08 00       	push   0x841b8
   23215:	68 aa 00 a0 00       	push   0xa000aa
   2321a:	e8 68 3e 00 00       	call   27087 <sprintf>
   2321f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:224
			break;
   23222:	eb 16                	jmp    2323a <do_intel+0x3be>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:226
			case 8:
			sprintf(kcpuInfo.model_name,"Pentium III/Pentium III Xeon - internal L2 cache");
   23224:	83 ec 08             	sub    esp,0x8
   23227:	68 ec 41 08 00       	push   0x841ec
   2322c:	68 aa 00 a0 00       	push   0xa000aa
   23231:	e8 51 3e 00 00       	call   27087 <sprintf>
   23236:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:227
			break;
   23239:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:229
		}
		break;
   2323a:	eb 03                	jmp    2323f <do_intel+0x3c3>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:191
			break;
			case 8:
			sprintf(kcpuInfo.model_name,"DX4");
			break;
		}
		break;
   2323c:	90                   	nop
   2323d:	eb 01                	jmp    23240 <do_intel+0x3c4>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:229
			break;
			case 8:
			sprintf(kcpuInfo.model_name,"Pentium III/Pentium III Xeon - internal L2 cache");
			break;
		}
		break;
   2323f:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:233
		case 15:
		break;
	}
	__get_cpuid(0x80000000, &max_eax, &unused, &unused, &unused);
   23240:	83 ec 0c             	sub    esp,0xc
   23243:	8d 45 dc             	lea    eax,[ebp-0x24]
   23246:	50                   	push   eax
   23247:	8d 45 dc             	lea    eax,[ebp-0x24]
   2324a:	50                   	push   eax
   2324b:	8d 45 dc             	lea    eax,[ebp-0x24]
   2324e:	50                   	push   eax
   2324f:	8d 45 e0             	lea    eax,[ebp-0x20]
   23252:	50                   	push   eax
   23253:	68 00 00 00 80       	push   0x80000000
   23258:	e8 6e fb ff ff       	call   22dcb <__get_cpuid>
   2325d:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:239
	/* Quok said: If the max extended eax value is high enough to support the processor brand string
	(values 0x80000002 to 0x80000004), then we'll use that information to return the brand information. 
	Otherwise, we'll refer back to the brand tables above for backwards compatibility with older processors. 
	According to the Sept. 2006 Intel Arch Software Developer's Guide, if extended eax values are supported, 
	then all 3 values for the processor brand string are supported, but we'll test just to make sure and be safe. */
	if(max_eax >= 0x80000004) {
   23260:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23263:	3d 03 00 00 80       	cmp    eax,0x80000003
   23268:	0f 86 e1 00 00 00    	jbe    2334f <do_intel+0x4d3>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:240
		if(max_eax >= 0x80000002) {
   2326e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23271:	3d 01 00 00 80       	cmp    eax,0x80000001
   23276:	76 3e                	jbe    232b6 <do_intel+0x43a>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:241
			__get_cpuid(0x80000002, &eax, &ebx, &ecx, &edx);
   23278:	83 ec 0c             	sub    esp,0xc
   2327b:	8d 45 e4             	lea    eax,[ebp-0x1c]
   2327e:	50                   	push   eax
   2327f:	8d 45 e8             	lea    eax,[ebp-0x18]
   23282:	50                   	push   eax
   23283:	8d 45 ec             	lea    eax,[ebp-0x14]
   23286:	50                   	push   eax
   23287:	8d 45 f0             	lea    eax,[ebp-0x10]
   2328a:	50                   	push   eax
   2328b:	68 02 00 00 80       	push   0x80000002
   23290:	e8 36 fb ff ff       	call   22dcb <__get_cpuid>
   23295:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:242
			printregs(eax, ebx, ecx, edx);
   23298:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   2329b:	89 c3                	mov    ebx,eax
   2329d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   232a0:	89 c1                	mov    ecx,eax
   232a2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   232a5:	89 c2                	mov    edx,eax
   232a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   232aa:	53                   	push   ebx
   232ab:	51                   	push   ecx
   232ac:	52                   	push   edx
   232ad:	50                   	push   eax
   232ae:	e8 28 01 00 00       	call   233db <printregs>
   232b3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:244
		}
		if(max_eax >= 0x80000003) {
   232b6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   232b9:	3d 02 00 00 80       	cmp    eax,0x80000002
   232be:	76 3e                	jbe    232fe <do_intel+0x482>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:245
			__get_cpuid(0x80000003, &eax, &ebx, &ecx, &edx);
   232c0:	83 ec 0c             	sub    esp,0xc
   232c3:	8d 45 e4             	lea    eax,[ebp-0x1c]
   232c6:	50                   	push   eax
   232c7:	8d 45 e8             	lea    eax,[ebp-0x18]
   232ca:	50                   	push   eax
   232cb:	8d 45 ec             	lea    eax,[ebp-0x14]
   232ce:	50                   	push   eax
   232cf:	8d 45 f0             	lea    eax,[ebp-0x10]
   232d2:	50                   	push   eax
   232d3:	68 03 00 00 80       	push   0x80000003
   232d8:	e8 ee fa ff ff       	call   22dcb <__get_cpuid>
   232dd:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:246
			printregs(eax, ebx, ecx, edx);
   232e0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   232e3:	89 c3                	mov    ebx,eax
   232e5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   232e8:	89 c1                	mov    ecx,eax
   232ea:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   232ed:	89 c2                	mov    edx,eax
   232ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   232f2:	53                   	push   ebx
   232f3:	51                   	push   ecx
   232f4:	52                   	push   edx
   232f5:	50                   	push   eax
   232f6:	e8 e0 00 00 00       	call   233db <printregs>
   232fb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:248
		}
		if(max_eax >= 0x80000004) {
   232fe:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23301:	3d 03 00 00 80       	cmp    eax,0x80000003
   23306:	0f 86 c5 00 00 00    	jbe    233d1 <do_intel+0x555>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:249
			__get_cpuid(0x80000004, &eax, &ebx, &ecx, &edx);
   2330c:	83 ec 0c             	sub    esp,0xc
   2330f:	8d 45 e4             	lea    eax,[ebp-0x1c]
   23312:	50                   	push   eax
   23313:	8d 45 e8             	lea    eax,[ebp-0x18]
   23316:	50                   	push   eax
   23317:	8d 45 ec             	lea    eax,[ebp-0x14]
   2331a:	50                   	push   eax
   2331b:	8d 45 f0             	lea    eax,[ebp-0x10]
   2331e:	50                   	push   eax
   2331f:	68 04 00 00 80       	push   0x80000004
   23324:	e8 a2 fa ff ff       	call   22dcb <__get_cpuid>
   23329:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:250
			printregs(eax, ebx, ecx, edx);
   2332c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   2332f:	89 c3                	mov    ebx,eax
   23331:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   23334:	89 c1                	mov    ecx,eax
   23336:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23339:	89 c2                	mov    edx,eax
   2333b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2333e:	53                   	push   ebx
   2333f:	51                   	push   ecx
   23340:	52                   	push   edx
   23341:	50                   	push   eax
   23342:	e8 94 00 00 00       	call   233db <printregs>
   23347:	83 c4 10             	add    esp,0x10
   2334a:	e9 82 00 00 00       	jmp    233d1 <do_intel+0x555>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:252
		}
	} else if(kcpuInfo.brand > 0) {
   2334f:	a1 70 00 a0 00       	mov    eax,ds:0xa00070
   23354:	85 c0                	test   eax,eax
   23356:	7e 79                	jle    233d1 <do_intel+0x555>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:253
		if(kcpuInfo.brand < 0x18) {
   23358:	a1 70 00 a0 00       	mov    eax,ds:0xa00070
   2335d:	83 f8 17             	cmp    eax,0x17
   23360:	7f 5a                	jg     233bc <do_intel+0x540>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:254
			if(signature == 0x000006B1 || signature == 0x00000F13) {
   23362:	81 7d f4 b1 06 00 00 	cmp    DWORD PTR [ebp-0xc],0x6b1
   23369:	74 09                	je     23374 <do_intel+0x4f8>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:254 (discriminator 1)
   2336b:	81 7d f4 13 0f 00 00 	cmp    DWORD PTR [ebp-0xc],0xf13
   23372:	75 24                	jne    23398 <do_intel+0x51c>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:255
				sprintf(kcpuInfo.brand_name,"%s\n", Intel_Other[kcpuInfo.brand]);
   23374:	a1 70 00 a0 00       	mov    eax,ds:0xa00070
   23379:	8b 04 85 40 da 02 00 	mov    eax,DWORD PTR [eax*4+0x2da40]
   23380:	83 ec 04             	sub    esp,0x4
   23383:	50                   	push   eax
   23384:	68 1d 42 08 00       	push   0x8421d
   23389:	68 72 01 a0 00       	push   0xa00172
   2338e:	e8 f4 3c 00 00       	call   27087 <sprintf>
   23393:	83 c4 10             	add    esp,0x10
   23396:	eb 39                	jmp    233d1 <do_intel+0x555>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:257
			} else {
				sprintf(kcpuInfo.brand_name, "%s\n", Intel[kcpuInfo.brand]);
   23398:	a1 70 00 a0 00       	mov    eax,ds:0xa00070
   2339d:	8b 04 85 e0 d9 02 00 	mov    eax,DWORD PTR [eax*4+0x2d9e0]
   233a4:	83 ec 04             	sub    esp,0x4
   233a7:	50                   	push   eax
   233a8:	68 1d 42 08 00       	push   0x8421d
   233ad:	68 72 01 a0 00       	push   0xa00172
   233b2:	e8 d0 3c 00 00       	call   27087 <sprintf>
   233b7:	83 c4 10             	add    esp,0x10
   233ba:	eb 15                	jmp    233d1 <do_intel+0x555>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:260
			}
		} else {
			sprintf(kcpuInfo.brand_name, "Reserved\n");
   233bc:	83 ec 08             	sub    esp,0x8
   233bf:	68 21 42 08 00       	push   0x84221
   233c4:	68 72 01 a0 00       	push   0xa00172
   233c9:	e8 b9 3c 00 00       	call   27087 <sprintf>
   233ce:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:263
		}
	}
	return 0;
   233d1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:264
}
   233d6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   233d9:	c9                   	leave  
   233da:	c3                   	ret    

000233db <printregs>:
printregs():
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:267

/* Print Registers */
void HIGH_CODE_SECTION printregs(int eax, int ebx, int ecx, int edx) {
   233db:	55                   	push   ebp
   233dc:	89 e5                	mov    ebp,esp
   233de:	53                   	push   ebx
   233df:	83 ec 24             	sub    esp,0x24
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:270
	int j;
	char string[17];
	string[16] = '\0';
   233e2:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:271
	for(j = 0; j < 4; j++) {
   233e6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   233ed:	eb 6a                	jmp    23459 <printregs+0x7e>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:272 (discriminator 3)
		string[j] = eax >> (8 * j);
   233ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   233f2:	c1 e0 03             	shl    eax,0x3
   233f5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   233f8:	89 c1                	mov    ecx,eax
   233fa:	d3 fa                	sar    edx,cl
   233fc:	89 d0                	mov    eax,edx
   233fe:	89 c1                	mov    ecx,eax
   23400:	8d 55 e3             	lea    edx,[ebp-0x1d]
   23403:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   23406:	01 d0                	add    eax,edx
   23408:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:273 (discriminator 3)
		string[j + 4] = ebx >> (8 * j);
   2340a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2340d:	83 c0 04             	add    eax,0x4
   23410:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23413:	c1 e2 03             	shl    edx,0x3
   23416:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
   23419:	89 d1                	mov    ecx,edx
   2341b:	d3 fb                	sar    ebx,cl
   2341d:	89 da                	mov    edx,ebx
   2341f:	88 54 05 e3          	mov    BYTE PTR [ebp+eax*1-0x1d],dl
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:274 (discriminator 3)
		string[j + 8] = ecx >> (8 * j);
   23423:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   23426:	83 c0 08             	add    eax,0x8
   23429:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   2342c:	c1 e2 03             	shl    edx,0x3
   2342f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
   23432:	89 d1                	mov    ecx,edx
   23434:	d3 fb                	sar    ebx,cl
   23436:	89 da                	mov    edx,ebx
   23438:	88 54 05 e3          	mov    BYTE PTR [ebp+eax*1-0x1d],dl
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:275 (discriminator 3)
		string[j + 12] = edx >> (8 * j);
   2343c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2343f:	83 c0 0c             	add    eax,0xc
   23442:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23445:	c1 e2 03             	shl    edx,0x3
   23448:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
   2344b:	89 d1                	mov    ecx,edx
   2344d:	d3 fb                	sar    ebx,cl
   2344f:	89 da                	mov    edx,ebx
   23451:	88 54 05 e3          	mov    BYTE PTR [ebp+eax*1-0x1d],dl
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:271 (discriminator 3)
/* Print Registers */
void HIGH_CODE_SECTION printregs(int eax, int ebx, int ecx, int edx) {
	int j;
	char string[17];
	string[16] = '\0';
	for(j = 0; j < 4; j++) {
   23455:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:271 (discriminator 1)
   23459:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
   2345d:	7e 90                	jle    233ef <printregs+0x14>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:277
		string[j] = eax >> (8 * j);
		string[j + 4] = ebx >> (8 * j);
		string[j + 8] = ecx >> (8 * j);
		string[j + 12] = edx >> (8 * j);
	}
	sprintf(kcpuInfo.brand_name, "%s%s", kcpuInfo.brand_name, string);
   2345f:	8d 45 e3             	lea    eax,[ebp-0x1d]
   23462:	50                   	push   eax
   23463:	68 72 01 a0 00       	push   0xa00172
   23468:	68 dc 42 08 00       	push   0x842dc
   2346d:	68 72 01 a0 00       	push   0xa00172
   23472:	e8 10 3c 00 00       	call   27087 <sprintf>
   23477:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:278
}
   2347a:	90                   	nop
   2347b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   2347e:	c9                   	leave  
   2347f:	c3                   	ret    

00023480 <do_amd>:
do_amd():
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:281

/* AMD-specific information */
int HIGH_CODE_SECTION do_amd(void) {
   23480:	55                   	push   ebp
   23481:	89 e5                	mov    ebp,esp
   23483:	53                   	push   ebx
   23484:	83 ec 24             	sub    esp,0x24
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:283
	//printf("AMD Specific Features:\n");
	unsigned int extended=0, eax=0, ebx=0, ecx=0, edx=0, unused=0;
   23487:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   2348e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   23495:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   2349c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   234a3:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   234aa:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:284
	__get_cpuid(1, &eax, &unused, &unused, &unused);
   234b1:	8d 45 dc             	lea    eax,[ebp-0x24]
   234b4:	50                   	push   eax
   234b5:	8d 45 dc             	lea    eax,[ebp-0x24]
   234b8:	50                   	push   eax
   234b9:	8d 45 dc             	lea    eax,[ebp-0x24]
   234bc:	50                   	push   eax
   234bd:	8d 45 ec             	lea    eax,[ebp-0x14]
   234c0:	50                   	push   eax
   234c1:	6a 01                	push   0x1
   234c3:	e8 03 f9 ff ff       	call   22dcb <__get_cpuid>
   234c8:	83 c4 14             	add    esp,0x14
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:285
	kcpuInfo.model = (eax >> 4) & 0xf;
   234cb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   234ce:	c1 e8 04             	shr    eax,0x4
   234d1:	83 e0 0f             	and    eax,0xf
   234d4:	a3 64 00 a0 00       	mov    ds:0xa00064,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:286
	kcpuInfo.family = (eax >> 8) & 0xf;
   234d9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   234dc:	c1 e8 08             	shr    eax,0x8
   234df:	83 e0 0f             	and    eax,0xf
   234e2:	a3 60 00 a0 00       	mov    ds:0xa00060,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:287
	kcpuInfo.stepping = eax & 0xf;
   234e7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   234ea:	83 e0 0f             	and    eax,0xf
   234ed:	a3 68 00 a0 00       	mov    ds:0xa00068,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:289
	//reserved = eax >> 12;
	sprintf(kcpuInfo.vendor, "AMD");
   234f2:	83 ec 08             	sub    esp,0x8
   234f5:	68 e1 42 08 00       	push   0x842e1
   234fa:	68 78 00 a0 00       	push   0xa00078
   234ff:	e8 83 3b 00 00       	call   27087 <sprintf>
   23504:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:290
	switch(kcpuInfo.family) 
   23507:	a1 60 00 a0 00       	mov    eax,ds:0xa00060
   2350c:	83 f8 05             	cmp    eax,0x5
   2350f:	74 46                	je     23557 <do_amd+0xd7>
   23511:	83 f8 05             	cmp    eax,0x5
   23514:	7f 0a                	jg     23520 <do_amd+0xa0>
   23516:	83 f8 04             	cmp    eax,0x4
   23519:	74 1c                	je     23537 <do_amd+0xb7>
   2351b:	e9 a1 01 00 00       	jmp    236c1 <do_amd+0x241>
   23520:	83 f8 06             	cmp    eax,0x6
   23523:	0f 84 ad 00 00 00    	je     235d6 <do_amd+0x156>
   23529:	83 f8 0f             	cmp    eax,0xf
   2352c:	0f 84 37 01 00 00    	je     23669 <do_amd+0x1e9>
   23532:	e9 8a 01 00 00       	jmp    236c1 <do_amd+0x241>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:293
        {
		case 4:
		sprintf(kcpuInfo.model_name, "486 Model %d", kcpuInfo.model);
   23537:	a1 64 00 a0 00       	mov    eax,ds:0xa00064
   2353c:	83 ec 04             	sub    esp,0x4
   2353f:	50                   	push   eax
   23540:	68 e5 42 08 00       	push   0x842e5
   23545:	68 aa 00 a0 00       	push   0xa000aa
   2354a:	e8 38 3b 00 00       	call   27087 <sprintf>
   2354f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:294
		break;
   23552:	e9 6a 01 00 00       	jmp    236c1 <do_amd+0x241>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:296
		case 5:
		switch(kcpuInfo.model) {
   23557:	a1 64 00 a0 00       	mov    eax,ds:0xa00064
   2355c:	83 f8 09             	cmp    eax,0x9
   2355f:	77 54                	ja     235b5 <do_amd+0x135>
   23561:	8b 04 85 3c 44 08 00 	mov    eax,DWORD PTR [eax*4+0x8443c]
   23568:	ff e0                	jmp    eax
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:304
			case 2:
			case 3:
			case 6:
			case 7:
			
                            sprintf(kcpuInfo.model_name, "K6 Model %d", kcpuInfo.model);
   2356a:	a1 64 00 a0 00       	mov    eax,ds:0xa00064
   2356f:	83 ec 04             	sub    esp,0x4
   23572:	50                   	push   eax
   23573:	68 f2 42 08 00       	push   0x842f2
   23578:	68 aa 00 a0 00       	push   0xa000aa
   2357d:	e8 05 3b 00 00       	call   27087 <sprintf>
   23582:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:305
			break;
   23585:	eb 4a                	jmp    235d1 <do_amd+0x151>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:307
			case 8:
			sprintf(kcpuInfo.model_name, "K6-2 Model 8");
   23587:	83 ec 08             	sub    esp,0x8
   2358a:	68 fe 42 08 00       	push   0x842fe
   2358f:	68 aa 00 a0 00       	push   0xa000aa
   23594:	e8 ee 3a 00 00       	call   27087 <sprintf>
   23599:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:308
			break;
   2359c:	eb 33                	jmp    235d1 <do_amd+0x151>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:310
			case 9:
			sprintf(kcpuInfo.model_name, "K6-III Model 9");
   2359e:	83 ec 08             	sub    esp,0x8
   235a1:	68 0b 43 08 00       	push   0x8430b
   235a6:	68 aa 00 a0 00       	push   0xa000aa
   235ab:	e8 d7 3a 00 00       	call   27087 <sprintf>
   235b0:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:311
			break;
   235b3:	eb 1c                	jmp    235d1 <do_amd+0x151>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:313
			default:
			sprintf(kcpuInfo.model_name, "K5/K6 Model %d", kcpuInfo.model);
   235b5:	a1 64 00 a0 00       	mov    eax,ds:0xa00064
   235ba:	83 ec 04             	sub    esp,0x4
   235bd:	50                   	push   eax
   235be:	68 1a 43 08 00       	push   0x8431a
   235c3:	68 aa 00 a0 00       	push   0xa000aa
   235c8:	e8 ba 3a 00 00       	call   27087 <sprintf>
   235cd:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:314
			break;
   235d0:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:316
		}
		break;
   235d1:	e9 eb 00 00 00       	jmp    236c1 <do_amd+0x241>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:318
		case 6:
		switch(kcpuInfo.model) {
   235d6:	a1 64 00 a0 00       	mov    eax,ds:0xa00064
   235db:	83 f8 07             	cmp    eax,0x7
   235de:	77 6b                	ja     2364b <do_amd+0x1cb>
   235e0:	8b 04 85 64 44 08 00 	mov    eax,DWORD PTR [eax*4+0x84464]
   235e7:	ff e0                	jmp    eax
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:322
			case 1:
			case 2:
			case 4:
			sprintf(kcpuInfo.model_name, "Athlon Model %d", kcpuInfo.model);
   235e9:	a1 64 00 a0 00       	mov    eax,ds:0xa00064
   235ee:	83 ec 04             	sub    esp,0x4
   235f1:	50                   	push   eax
   235f2:	68 29 43 08 00       	push   0x84329
   235f7:	68 aa 00 a0 00       	push   0xa000aa
   235fc:	e8 86 3a 00 00       	call   27087 <sprintf>
   23601:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:323
			break;
   23604:	eb 61                	jmp    23667 <do_amd+0x1e7>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:325
			case 3:
			sprintf(kcpuInfo.model_name, "Duron Model 3");
   23606:	83 ec 08             	sub    esp,0x8
   23609:	68 39 43 08 00       	push   0x84339
   2360e:	68 aa 00 a0 00       	push   0xa000aa
   23613:	e8 6f 3a 00 00       	call   27087 <sprintf>
   23618:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:326
			break;
   2361b:	eb 4a                	jmp    23667 <do_amd+0x1e7>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:328
			case 6:
			sprintf(kcpuInfo.model_name, "Athlon MP/Mobile Athlon Model 6");
   2361d:	83 ec 08             	sub    esp,0x8
   23620:	68 48 43 08 00       	push   0x84348
   23625:	68 aa 00 a0 00       	push   0xa000aa
   2362a:	e8 58 3a 00 00       	call   27087 <sprintf>
   2362f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:329
			break;
   23632:	eb 33                	jmp    23667 <do_amd+0x1e7>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:331
			case 7:
			sprintf(kcpuInfo.model_name, "Mobile Duron Model 7");
   23634:	83 ec 08             	sub    esp,0x8
   23637:	68 68 43 08 00       	push   0x84368
   2363c:	68 aa 00 a0 00       	push   0xa000aa
   23641:	e8 41 3a 00 00       	call   27087 <sprintf>
   23646:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:332
			break;
   23649:	eb 1c                	jmp    23667 <do_amd+0x1e7>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:334
			default:
			sprintf(kcpuInfo.model_name, "Duron/Athlon Model %d", kcpuInfo.model);
   2364b:	a1 64 00 a0 00       	mov    eax,ds:0xa00064
   23650:	83 ec 04             	sub    esp,0x4
   23653:	50                   	push   eax
   23654:	68 7d 43 08 00       	push   0x8437d
   23659:	68 aa 00 a0 00       	push   0xa000aa
   2365e:	e8 24 3a 00 00       	call   27087 <sprintf>
   23663:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:335
			break;
   23666:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:337
		}
		break;
   23667:	eb 58                	jmp    236c1 <do_amd+0x241>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:339
                case 15:
                    switch(kcpuInfo.model)
   23669:	a1 64 00 a0 00       	mov    eax,ds:0xa00064
   2366e:	83 f8 1e             	cmp    eax,0x1e
   23671:	77 4d                	ja     236c0 <do_amd+0x240>
   23673:	8b 04 85 84 44 08 00 	mov    eax,DWORD PTR [eax*4+0x84484]
   2367a:	ff e0                	jmp    eax
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:343
                    {
                        case 1:
                        case 2:
                            sprintf(kcpuInfo.model_name, "FX Series/Opertron (Piledriver)");
   2367c:	83 ec 08             	sub    esp,0x8
   2367f:	68 94 43 08 00       	push   0x84394
   23684:	68 aa 00 a0 00       	push   0xa000aa
   23689:	e8 f9 39 00 00       	call   27087 <sprintf>
   2368e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:344
                            break;
   23691:	eb 2d                	jmp    236c0 <do_amd+0x240>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:347
                        case 10:
                        case 13:
                            sprintf(kcpuInfo.model_name, "A/R-Series/Athlon/Semperon/Firepro (Piledriver)");
   23693:	83 ec 08             	sub    esp,0x8
   23696:	68 b4 43 08 00       	push   0x843b4
   2369b:	68 aa 00 a0 00       	push   0xa000aa
   236a0:	e8 e2 39 00 00       	call   27087 <sprintf>
   236a5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:348
                            break;
   236a8:	eb 16                	jmp    236c0 <do_amd+0x240>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:350
                        case 30:
                            sprintf(kcpuInfo.model_name, "Elite A-Series/R-Series/Opertron (SteamRoller)");
   236aa:	83 ec 08             	sub    esp,0x8
   236ad:	68 e4 43 08 00       	push   0x843e4
   236b2:	68 aa 00 a0 00       	push   0xa000aa
   236b7:	e8 cb 39 00 00       	call   27087 <sprintf>
   236bc:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:351
                            break;
   236bf:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:353
                    }
                    break;
   236c0:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:355
	}
	__get_cpuid(0x80000000, &extended, &unused, &unused, &unused);
   236c1:	83 ec 0c             	sub    esp,0xc
   236c4:	8d 45 dc             	lea    eax,[ebp-0x24]
   236c7:	50                   	push   eax
   236c8:	8d 45 dc             	lea    eax,[ebp-0x24]
   236cb:	50                   	push   eax
   236cc:	8d 45 dc             	lea    eax,[ebp-0x24]
   236cf:	50                   	push   eax
   236d0:	8d 45 f0             	lea    eax,[ebp-0x10]
   236d3:	50                   	push   eax
   236d4:	68 00 00 00 80       	push   0x80000000
   236d9:	e8 ed f6 ff ff       	call   22dcb <__get_cpuid>
   236de:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:356
	if(extended == 0) {
   236e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   236e4:	85 c0                	test   eax,eax
   236e6:	75 0a                	jne    236f2 <do_amd+0x272>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:357
		return 0;
   236e8:	b8 00 00 00 00       	mov    eax,0x0
   236ed:	e9 a5 00 00 00       	jmp    23797 <do_amd+0x317>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:359
	}
	if(extended >= 0x80000002) {
   236f2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   236f5:	3d 01 00 00 80       	cmp    eax,0x80000001
   236fa:	76 52                	jbe    2374e <do_amd+0x2ce>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:361
		unsigned int j;
		for(j = 0x80000002; j <= 0x80000004; j++) {
   236fc:	c7 45 f4 02 00 00 80 	mov    DWORD PTR [ebp-0xc],0x80000002
   23703:	eb 40                	jmp    23745 <do_amd+0x2c5>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:362 (discriminator 3)
			__get_cpuid(j, &eax, &ebx, &ecx, &edx);
   23705:	83 ec 0c             	sub    esp,0xc
   23708:	8d 45 e0             	lea    eax,[ebp-0x20]
   2370b:	50                   	push   eax
   2370c:	8d 45 e4             	lea    eax,[ebp-0x1c]
   2370f:	50                   	push   eax
   23710:	8d 45 e8             	lea    eax,[ebp-0x18]
   23713:	50                   	push   eax
   23714:	8d 45 ec             	lea    eax,[ebp-0x14]
   23717:	50                   	push   eax
   23718:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2371b:	e8 ab f6 ff ff       	call   22dcb <__get_cpuid>
   23720:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:363 (discriminator 3)
			printregs(eax, ebx, ecx, edx);
   23723:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23726:	89 c3                	mov    ebx,eax
   23728:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   2372b:	89 c1                	mov    ecx,eax
   2372d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   23730:	89 c2                	mov    edx,eax
   23732:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23735:	53                   	push   ebx
   23736:	51                   	push   ecx
   23737:	52                   	push   edx
   23738:	50                   	push   eax
   23739:	e8 9d fc ff ff       	call   233db <printregs>
   2373e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:361 (discriminator 3)
	if(extended == 0) {
		return 0;
	}
	if(extended >= 0x80000002) {
		unsigned int j;
		for(j = 0x80000002; j <= 0x80000004; j++) {
   23741:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:361 (discriminator 1)
   23745:	81 7d f4 04 00 00 80 	cmp    DWORD PTR [ebp-0xc],0x80000004
   2374c:	76 b7                	jbe    23705 <do_amd+0x285>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:366
			__get_cpuid(j, &eax, &ebx, &ecx, &edx);
			printregs(eax, ebx, ecx, edx);
		}
	}
	if(extended >= 0x80000007) {
   2374e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23751:	3d 06 00 00 80       	cmp    eax,0x80000006
   23756:	76 3a                	jbe    23792 <do_amd+0x312>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:367
		__get_cpuid(0x80000007, &unused, &unused, &unused, &edx);
   23758:	83 ec 0c             	sub    esp,0xc
   2375b:	8d 45 e0             	lea    eax,[ebp-0x20]
   2375e:	50                   	push   eax
   2375f:	8d 45 dc             	lea    eax,[ebp-0x24]
   23762:	50                   	push   eax
   23763:	8d 45 dc             	lea    eax,[ebp-0x24]
   23766:	50                   	push   eax
   23767:	8d 45 dc             	lea    eax,[ebp-0x24]
   2376a:	50                   	push   eax
   2376b:	68 07 00 00 80       	push   0x80000007
   23770:	e8 56 f6 ff ff       	call   22dcb <__get_cpuid>
   23775:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:368
		if(edx & 1) {
   23778:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   2377b:	83 e0 01             	and    eax,0x1
   2377e:	85 c0                	test   eax,eax
   23780:	74 10                	je     23792 <do_amd+0x312>
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:369
			printk("Temperature Sensing Diode Detected!\n");
   23782:	83 ec 0c             	sub    esp,0xc
   23785:	68 14 44 08 00       	push   0x84414
   2378a:	e8 a4 38 00 00       	call   27033 <printk>
   2378f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:372
		}
	}
	return 0;
   23792:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/cpudet-clean.c:373 (discriminator 1)
}
   23797:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   2379a:	c9                   	leave  
   2379b:	c3                   	ret    

0002379c <print_e820_entry>:
print_e820_entry():
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:10

extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
   2379c:	55                   	push   ebp
   2379d:	89 e5                	mov    ebp,esp
   2379f:	53                   	push   ebx
   237a0:	83 ec 04             	sub    esp,0x4
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:13
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
                                            buffer.Type==1?"Usable":buffer.Type==2?"Rsvd(2)":buffer.Type==3?"Rclm":buffer.Type==4?"NVS":"Rsvd");
   237a3:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:11
extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
   237a6:	83 f8 01             	cmp    eax,0x1
   237a9:	74 34                	je     237df <print_e820_entry+0x43>
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:13
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
                                            buffer.Type==1?"Usable":buffer.Type==2?"Rsvd(2)":buffer.Type==3?"Rclm":buffer.Type==4?"NVS":"Rsvd");
   237ab:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   237ae:	83 f8 02             	cmp    eax,0x2
   237b1:	74 25                	je     237d8 <print_e820_entry+0x3c>
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:13 (discriminator 1)
   237b3:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   237b6:	83 f8 03             	cmp    eax,0x3
   237b9:	74 16                	je     237d1 <print_e820_entry+0x35>
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:13 (discriminator 3)
   237bb:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   237be:	83 f8 04             	cmp    eax,0x4
   237c1:	75 07                	jne    237ca <print_e820_entry+0x2e>
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:13 (discriminator 5)
   237c3:	b8 00 46 08 00       	mov    eax,0x84600
   237c8:	eb 1a                	jmp    237e4 <print_e820_entry+0x48>
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:13 (discriminator 6)
   237ca:	b8 04 46 08 00       	mov    eax,0x84604
   237cf:	eb 13                	jmp    237e4 <print_e820_entry+0x48>
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:13 (discriminator 4)
   237d1:	b8 09 46 08 00       	mov    eax,0x84609
   237d6:	eb 0c                	jmp    237e4 <print_e820_entry+0x48>
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:13 (discriminator 2)
   237d8:	b8 0e 46 08 00       	mov    eax,0x8460e
   237dd:	eb 05                	jmp    237e4 <print_e820_entry+0x48>
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:11 (discriminator 1)
extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
   237df:	b8 16 46 08 00       	mov    eax,0x84616
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:11 (discriminator 3)
   237e4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:12 (discriminator 3)
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
   237e7:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   237ea:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   237ed:	01 da                	add    edx,ebx
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:11 (discriminator 3)
extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
   237ef:	8d 5a ff             	lea    ebx,[edx-0x1]
   237f2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   237f5:	83 ec 0c             	sub    esp,0xc
   237f8:	50                   	push   eax
   237f9:	51                   	push   ecx
   237fa:	53                   	push   ebx
   237fb:	52                   	push   edx
   237fc:	68 1d 46 08 00       	push   0x8461d
   23801:	e8 2d 38 00 00       	call   27033 <printk>
   23806:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:14 (discriminator 3)
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
                                            buffer.Type==1?"Usable":buffer.Type==2?"Rsvd(2)":buffer.Type==3?"Rclm":buffer.Type==4?"NVS":"Rsvd");
}
   23809:	90                   	nop
   2380a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   2380d:	c9                   	leave  
   2380e:	c3                   	ret    

0002380f <printE820Map>:
printE820Map():
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:17

void printE820Map()
{
   2380f:	55                   	push   ebp
   23810:	89 e5                	mov    ebp,esp
   23812:	53                   	push   ebx
   23813:	83 ec 14             	sub    esp,0x14
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:18
    SMAP_entry* buffer=smap_table;
   23816:	a1 40 00 a0 00       	mov    eax,ds:0xa00040
   2381b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:19
    int entryCount=kE820RecordCount;
   2381e:	0f b7 05 50 00 a0 00 	movzx  eax,WORD PTR ds:0xa00050
   23825:	98                   	cwde   
   23826:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:20
    print_e820_map(smap_table, kE820RecordCount);
   23829:	0f b7 05 50 00 a0 00 	movzx  eax,WORD PTR ds:0xa00050
   23830:	0f bf d0             	movsx  edx,ax
   23833:	a1 40 00 a0 00       	mov    eax,ds:0xa00040
   23838:	83 ec 08             	sub    esp,0x8
   2383b:	52                   	push   edx
   2383c:	50                   	push   eax
   2383d:	e8 b4 00 00 00       	call   238f6 <print_e820_map>
   23842:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:21
        for (int cnt=0;cnt<entryCount;cnt++)
   23845:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   2384c:	e9 93 00 00 00       	jmp    238e4 <printE820Map+0xd5>
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:23
        {
        print_e820_entry(buffer[cnt]);
   23851:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23854:	89 d0                	mov    eax,edx
   23856:	01 c0                	add    eax,eax
   23858:	01 d0                	add    eax,edx
   2385a:	c1 e0 03             	shl    eax,0x3
   2385d:	89 c2                	mov    edx,eax
   2385f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23862:	01 d0                	add    eax,edx
   23864:	83 ec 08             	sub    esp,0x8
   23867:	83 ec 18             	sub    esp,0x18
   2386a:	89 e2                	mov    edx,esp
   2386c:	8b 08                	mov    ecx,DWORD PTR [eax]
   2386e:	89 0a                	mov    DWORD PTR [edx],ecx
   23870:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   23873:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   23876:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   23879:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   2387c:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
   2387f:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
   23882:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   23885:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
   23888:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   2388b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
   2388e:	e8 09 ff ff ff       	call   2379c <print_e820_entry>
   23893:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:24
        cnt++;
   23896:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:25
        if (cnt>0 && ((cnt+2)%cursorGetMaxY())==0)
   2389a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   2389e:	7e 40                	jle    238e0 <printE820Map+0xd1>
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:25 (discriminator 1)
   238a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   238a3:	8d 58 02             	lea    ebx,[eax+0x2]
   238a6:	e8 6c 46 ff ff       	call   17f17 <cursorGetMaxY>
   238ab:	89 c1                	mov    ecx,eax
   238ad:	89 d8                	mov    eax,ebx
   238af:	99                   	cdq    
   238b0:	f7 f9                	idiv   ecx
   238b2:	89 d0                	mov    eax,edx
   238b4:	85 c0                	test   eax,eax
   238b6:	75 28                	jne    238e0 <printE820Map+0xd1>
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:27
        {
            puts("Paused, press a key to continue");
   238b8:	83 ec 0c             	sub    esp,0xc
   238bb:	68 3c 46 08 00       	push   0x8463c
   238c0:	e8 11 47 ff ff       	call   17fd6 <puts>
   238c5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:28
            waitForKeyboardKey();
   238c8:	e8 85 d9 fe ff       	call   11252 <waitForKeyboardKey>
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:29
            cursorMoveTo(0,cursorGetPosY());
   238cd:	e8 75 46 ff ff       	call   17f47 <cursorGetPosY>
   238d2:	83 ec 08             	sub    esp,0x8
   238d5:	50                   	push   eax
   238d6:	6a 00                	push   0x0
   238d8:	e8 ca 45 ff ff       	call   17ea7 <cursorMoveTo>
   238dd:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:21 (discriminator 2)
void printE820Map()
{
    SMAP_entry* buffer=smap_table;
    int entryCount=kE820RecordCount;
    print_e820_map(smap_table, kE820RecordCount);
        for (int cnt=0;cnt<entryCount;cnt++)
   238e0:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:21 (discriminator 1)
   238e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   238e7:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   238ea:	0f 8c 61 ff ff ff    	jl     23851 <printE820Map+0x42>
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:32
            puts("Paused, press a key to continue");
            waitForKeyboardKey();
            cursorMoveTo(0,cursorGetPosY());
        }
        }
}
   238f0:	90                   	nop
   238f1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   238f4:	c9                   	leave  
   238f5:	c3                   	ret    

000238f6 <print_e820_map>:
print_e820_map():
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:35

void print_e820_map(SMAP_entry* buffer, int entryCount)
{
   238f6:	55                   	push   ebp
   238f7:	89 e5                	mov    ebp,esp
   238f9:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:36
    bool printOnlyUsable=entryCount>10?true:false;
   238fc:	83 7d 0c 0a          	cmp    DWORD PTR [ebp+0xc],0xa
   23900:	0f 9f c0             	setg   al
   23903:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:38
    
        for (int cnt=0;cnt<entryCount;cnt++)
   23906:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   2390d:	e9 bc 00 00 00       	jmp    239ce <print_e820_map+0xd8>
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:40
        {
            if ((!printOnlyUsable) || (printOnlyUsable && buffer[cnt].Type==1))
   23912:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   23916:	83 f0 01             	xor    eax,0x1
   23919:	84 c0                	test   al,al
   2391b:	75 21                	jne    2393e <print_e820_map+0x48>
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:40 (discriminator 1)
   2391d:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
   23921:	74 62                	je     23985 <print_e820_map+0x8f>
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:40 (discriminator 2)
   23923:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23926:	89 d0                	mov    eax,edx
   23928:	01 c0                	add    eax,eax
   2392a:	01 d0                	add    eax,edx
   2392c:	c1 e0 03             	shl    eax,0x3
   2392f:	89 c2                	mov    edx,eax
   23931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23934:	01 d0                	add    eax,edx
   23936:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   23939:	83 f8 01             	cmp    eax,0x1
   2393c:	75 47                	jne    23985 <print_e820_map+0x8f>
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:41
                print_e820_entry(buffer[cnt]);
   2393e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23941:	89 d0                	mov    eax,edx
   23943:	01 c0                	add    eax,eax
   23945:	01 d0                	add    eax,edx
   23947:	c1 e0 03             	shl    eax,0x3
   2394a:	89 c2                	mov    edx,eax
   2394c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2394f:	01 d0                	add    eax,edx
   23951:	83 ec 08             	sub    esp,0x8
   23954:	83 ec 18             	sub    esp,0x18
   23957:	89 e2                	mov    edx,esp
   23959:	8b 08                	mov    ecx,DWORD PTR [eax]
   2395b:	89 0a                	mov    DWORD PTR [edx],ecx
   2395d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   23960:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   23963:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   23966:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   23969:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
   2396c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
   2396f:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   23972:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
   23975:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   23978:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
   2397b:	e8 1c fe ff ff       	call   2379c <print_e820_entry>
   23980:	83 c4 20             	add    esp,0x20
   23983:	eb 45                	jmp    239ca <print_e820_map+0xd4>
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:43
            else
                print_e820_entry(buffer[cnt]);
   23985:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23988:	89 d0                	mov    eax,edx
   2398a:	01 c0                	add    eax,eax
   2398c:	01 d0                	add    eax,edx
   2398e:	c1 e0 03             	shl    eax,0x3
   23991:	89 c2                	mov    edx,eax
   23993:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23996:	01 d0                	add    eax,edx
   23998:	83 ec 08             	sub    esp,0x8
   2399b:	83 ec 18             	sub    esp,0x18
   2399e:	89 e2                	mov    edx,esp
   239a0:	8b 08                	mov    ecx,DWORD PTR [eax]
   239a2:	89 0a                	mov    DWORD PTR [edx],ecx
   239a4:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   239a7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   239aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   239ad:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   239b0:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
   239b3:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
   239b6:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   239b9:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
   239bc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   239bf:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
   239c2:	e8 d5 fd ff ff       	call   2379c <print_e820_entry>
   239c7:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:38 (discriminator 2)

void print_e820_map(SMAP_entry* buffer, int entryCount)
{
    bool printOnlyUsable=entryCount>10?true:false;
    
        for (int cnt=0;cnt<entryCount;cnt++)
   239ca:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:38 (discriminator 1)
   239ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   239d1:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   239d4:	0f 8c 38 ff ff ff    	jl     23912 <print_e820_map+0x1c>
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:45
            if ((!printOnlyUsable) || (printOnlyUsable && buffer[cnt].Type==1))
                print_e820_entry(buffer[cnt]);
            else
                print_e820_entry(buffer[cnt]);
        }
}
   239da:	90                   	nop
   239db:	c9                   	leave  
   239dc:	c3                   	ret    

000239dd <sum_e820_usable_memory>:
sum_e820_usable_memory():
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:48

uint64_t sum_e820_usable_memory(SMAP_entry* buffer, int entryCount)
{
   239dd:	55                   	push   ebp
   239de:	89 e5                	mov    ebp,esp
   239e0:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:49
    qword lRetVal = 0;
   239e3:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:51
    
    for (int cnt=0;cnt<entryCount;cnt++)
   239ea:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   239f1:	eb 38                	jmp    23a2b <sum_e820_usable_memory+0x4e>
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:53
    {
        if (buffer[cnt].Type==1)    
   239f3:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   239f6:	89 d0                	mov    eax,edx
   239f8:	01 c0                	add    eax,eax
   239fa:	01 d0                	add    eax,edx
   239fc:	c1 e0 03             	shl    eax,0x3
   239ff:	89 c2                	mov    edx,eax
   23a01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23a04:	01 d0                	add    eax,edx
   23a06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   23a09:	83 f8 01             	cmp    eax,0x1
   23a0c:	75 19                	jne    23a27 <sum_e820_usable_memory+0x4a>
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:54
            lRetVal += buffer[cnt].LengthL;
   23a0e:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   23a11:	89 d0                	mov    eax,edx
   23a13:	01 c0                	add    eax,eax
   23a15:	01 d0                	add    eax,edx
   23a17:	c1 e0 03             	shl    eax,0x3
   23a1a:	89 c2                	mov    edx,eax
   23a1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23a1f:	01 d0                	add    eax,edx
   23a21:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   23a24:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:51 (discriminator 2)

uint64_t sum_e820_usable_memory(SMAP_entry* buffer, int entryCount)
{
    qword lRetVal = 0;
    
    for (int cnt=0;cnt<entryCount;cnt++)
   23a27:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:51 (discriminator 1)
   23a2b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   23a2e:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   23a31:	7c c0                	jl     239f3 <sum_e820_usable_memory+0x16>
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:56
    {
        if (buffer[cnt].Type==1)    
            lRetVal += buffer[cnt].LengthL;
    }
    return lRetVal;
   23a33:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   23a36:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/e820.c:57
   23a3b:	c9                   	leave  
   23a3c:	c3                   	ret    
   23a3d:	66 90                	xchg   ax,ax
   23a3f:	90                   	nop

00023a40 <fat_list_init>:
fat_list_init():
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   23a40:	55                   	push   ebp
   23a41:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   23a43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23a46:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   23a4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23a50:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   23a53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23a56:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:51
}
   23a58:	90                   	nop
   23a59:	5d                   	pop    ebp
   23a5a:	c3                   	ret    

00023a5b <fat_list_remove>:
fat_list_remove():
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   23a5b:	55                   	push   ebp
   23a5c:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   23a5e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23a61:	8b 00                	mov    eax,DWORD PTR [eax]
   23a63:	85 c0                	test   eax,eax
   23a65:	75 0d                	jne    23a74 <fat_list_remove+0x19>
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:61
        list->head = node->next;
   23a67:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23a6a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   23a6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23a70:	89 10                	mov    DWORD PTR [eax],edx
   23a72:	eb 0e                	jmp    23a82 <fat_list_remove+0x27>
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:63
    else
        node->previous->next = node->next;
   23a74:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23a77:	8b 00                	mov    eax,DWORD PTR [eax]
   23a79:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23a7c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   23a7f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:65

    if(!node->next)
   23a82:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23a85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23a88:	85 c0                	test   eax,eax
   23a8a:	75 0d                	jne    23a99 <fat_list_remove+0x3e>
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:66
        list->tail = node->previous;
   23a8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23a8f:	8b 10                	mov    edx,DWORD PTR [eax]
   23a91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23a94:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   23a97:	eb 0d                	jmp    23aa6 <fat_list_remove+0x4b>
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   23a99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23a9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23a9f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23aa2:	8b 12                	mov    edx,DWORD PTR [edx]
   23aa4:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:69
}
   23aa6:	90                   	nop
   23aa7:	5d                   	pop    ebp
   23aa8:	c3                   	ret    

00023aa9 <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   23aa9:	55                   	push   ebp
   23aaa:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   23aac:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   23aaf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23ab2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:80
    new_node->next = node->next;
   23ab4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23ab7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   23aba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   23abd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:81
    if (!node->next)
   23ac0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23ac3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23ac6:	85 c0                	test   eax,eax
   23ac8:	75 0b                	jne    23ad5 <fat_list_insert_after+0x2c>
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:82
        list->tail = new_node;
   23aca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23acd:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23ad0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   23ad3:	eb 0b                	jmp    23ae0 <fat_list_insert_after+0x37>
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:84
    else
        node->next->previous = new_node;
   23ad5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23ad8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23adb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23ade:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:85
    node->next = new_node;
   23ae0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23ae3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23ae6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:86
}
   23ae9:	90                   	nop
   23aea:	5d                   	pop    ebp
   23aeb:	c3                   	ret    

00023aec <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   23aec:	55                   	push   ebp
   23aed:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   23aef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23af2:	8b 10                	mov    edx,DWORD PTR [eax]
   23af4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   23af7:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:97
    new_node->next = node;
   23af9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   23afc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23aff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:98
    if (!node->previous)
   23b02:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b05:	8b 00                	mov    eax,DWORD PTR [eax]
   23b07:	85 c0                	test   eax,eax
   23b09:	75 0a                	jne    23b15 <fat_list_insert_before+0x29>
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:99
        list->head = new_node;
   23b0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23b0e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23b11:	89 10                	mov    DWORD PTR [eax],edx
   23b13:	eb 0b                	jmp    23b20 <fat_list_insert_before+0x34>
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:101
    else
        node->previous->next = new_node;
   23b15:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b18:	8b 00                	mov    eax,DWORD PTR [eax]
   23b1a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23b1d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:102
    node->previous = new_node;
   23b20:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b23:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23b26:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:103
}
   23b28:	90                   	nop
   23b29:	5d                   	pop    ebp
   23b2a:	c3                   	ret    

00023b2b <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   23b2b:	55                   	push   ebp
   23b2c:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   23b2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23b31:	8b 00                	mov    eax,DWORD PTR [eax]
   23b33:	85 c0                	test   eax,eax
   23b35:	75 26                	jne    23b5d <fat_list_insert_first+0x32>
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:114
    {
        list->head = node;
   23b37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23b3a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23b3d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:115
        list->tail = node;
   23b3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23b42:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23b45:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:116
        node->previous = 0;
   23b48:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b4b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:117
        node->next = 0;
   23b51:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   23b5b:	eb 14                	jmp    23b71 <fat_list_insert_first+0x46>
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   23b5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23b60:	8b 00                	mov    eax,DWORD PTR [eax]
   23b62:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   23b65:	50                   	push   eax
   23b66:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   23b69:	e8 7e ff ff ff       	call   23aec <fat_list_insert_before>
   23b6e:	83 c4 0c             	add    esp,0xc
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:121
}
   23b71:	90                   	nop
   23b72:	c9                   	leave  
   23b73:	c3                   	ret    

00023b74 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   23b74:	55                   	push   ebp
   23b75:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   23b77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23b7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23b7d:	85 c0                	test   eax,eax
   23b7f:	75 10                	jne    23b91 <fat_list_insert_last+0x1d>
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:131
        fat_list_insert_first(list, node);
   23b81:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   23b84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   23b87:	e8 9f ff ff ff       	call   23b2b <fat_list_insert_first>
   23b8c:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   23b8f:	eb 15                	jmp    23ba6 <fat_list_insert_last+0x32>
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   23b91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23b94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23b97:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   23b9a:	50                   	push   eax
   23b9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   23b9e:	e8 06 ff ff ff       	call   23aa9 <fat_list_insert_after>
   23ba3:	83 c4 0c             	add    esp,0xc
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:134
}
   23ba6:	90                   	nop
   23ba7:	c9                   	leave  
   23ba8:	c3                   	ret    

00023ba9 <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   23ba9:	55                   	push   ebp
   23baa:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   23bac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23baf:	8b 00                	mov    eax,DWORD PTR [eax]
   23bb1:	85 c0                	test   eax,eax
   23bb3:	0f 94 c0             	sete   al
   23bb6:	0f b6 c0             	movzx  eax,al
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:143
}
   23bb9:	5d                   	pop    ebp
   23bba:	c3                   	ret    

00023bbb <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   23bbb:	55                   	push   ebp
   23bbc:	89 e5                	mov    ebp,esp
   23bbe:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   23bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23bc4:	8b 00                	mov    eax,DWORD PTR [eax]
   23bc6:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:154
    if (node)
   23bc9:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   23bcd:	74 0e                	je     23bdd <fat_list_pop_head+0x22>
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:155
        fat_list_remove(list, node);
   23bcf:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   23bd2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   23bd5:	e8 81 fe ff ff       	call   23a5b <fat_list_remove>
   23bda:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:157

    return node;
   23bdd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/NetBeansProjects/chrisOS/src/init/../fat/fat_list.h:158
}
   23be0:	c9                   	leave  
   23be1:	c3                   	ret    

00023be2 <outb>:
outb():
/home/yogi/NetBeansProjects/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   23be2:	55                   	push   ebp
   23be3:	89 e5                	mov    ebp,esp
   23be5:	83 ec 08             	sub    esp,0x8
   23be8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   23beb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23bee:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   23bf2:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/NetBeansProjects/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   23bf5:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   23bf9:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   23bfd:	ee                   	out    dx,al
/home/yogi/NetBeansProjects/chrisOS/include/io.h:24
}
   23bfe:	90                   	nop
   23bff:	c9                   	leave  
   23c00:	c3                   	ret    

00023c01 <gdt_init>:
gdt_init():
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:80
 3 (0x18) - data @ 0x0          <-- Non-kernel data (DS/ES/FS/GS/SS): Will always be 0x0
 4 (0x20) - code @ 0xC0000000   <-- will belong to the kernel proper
 5 (0x28) - code @ 0x0          <-- Non-kernel code (CS): Will always be 0x0
 */
void HIGH_CODE_SECTION gdt_init()
{
   23c01:	55                   	push   ebp
   23c02:	89 e5                	mov    ebp,esp
   23c04:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:81
    gdtEntry(1, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,
   23c07:	83 ec 08             	sub    esp,0x8
   23c0a:	6a 01                	push   0x1
   23c0c:	6a c0                	push   0xffffffc0
   23c0e:	6a 88                	push   0xffffff88
   23c10:	68 ff ff 0f 00       	push   0xfffff
   23c15:	6a 00                	push   0x0
   23c17:	6a 01                	push   0x1
   23c19:	e8 56 4c ff ff       	call   18874 <gdtEntry>
   23c1e:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:83
              GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(2, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE,
   23c21:	83 ec 08             	sub    esp,0x8
   23c24:	6a 01                	push   0x1
   23c26:	6a c0                	push   0xffffffc0
   23c28:	6a 82                	push   0xffffff82
   23c2a:	68 ff ff 0f 00       	push   0xfffff
   23c2f:	6a 00                	push   0x0
   23c31:	6a 02                	push   0x2
   23c33:	e8 3c 4c ff ff       	call   18874 <gdtEntry>
   23c38:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:85
              GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(3, 0, 0xFFFFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE,      //this will stay at base 0x0, never 0xc0000000
   23c3b:	83 ec 08             	sub    esp,0x8
   23c3e:	6a 01                	push   0x1
   23c40:	6a c0                	push   0xffffffc0
   23c42:	6a 82                	push   0xffffff82
   23c44:	6a ff                	push   0xffffffff
   23c46:	6a 00                	push   0x0
   23c48:	6a 03                	push   0x3
   23c4a:	e8 25 4c ff ff       	call   18874 <gdtEntry>
   23c4f:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:87
          GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(4, KERNEL_PAGED_BASE_ADDRESS , 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,
   23c52:	83 ec 08             	sub    esp,0x8
   23c55:	6a 01                	push   0x1
   23c57:	6a c0                	push   0xffffffc0
   23c59:	6a 88                	push   0xffffff88
   23c5b:	68 ff ff 0f 00       	push   0xfffff
   23c60:	68 00 00 00 c0       	push   0xc0000000
   23c65:	6a 04                	push   0x4
   23c67:	e8 08 4c ff ff       	call   18874 <gdtEntry>
   23c6c:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:89
              GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(5, 0x0 , 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,       //this will always stay at base 0x0, never 0xC0000000
   23c6f:	83 ec 08             	sub    esp,0x8
   23c72:	6a 01                	push   0x1
   23c74:	6a c0                	push   0xffffffc0
   23c76:	6a 88                	push   0xffffff88
   23c78:	68 ff ff 0f 00       	push   0xfffff
   23c7d:	6a 00                	push   0x0
   23c7f:	6a 05                	push   0x5
   23c81:	e8 ee 4b ff ff       	call   18874 <gdtEntry>
   23c86:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:92
              GDT_GRANULAR | GDT_32BIT,true);
    
    gdtEntryRM(1, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,
   23c89:	83 ec 0c             	sub    esp,0xc
   23c8c:	68 80 00 00 00       	push   0x80
   23c91:	68 88 00 00 00       	push   0x88
   23c96:	68 ff ff 0f 00       	push   0xfffff
   23c9b:	6a 00                	push   0x0
   23c9d:	6a 01                	push   0x1
   23c9f:	e8 a3 4c ff ff       	call   18947 <gdtEntryRM>
   23ca4:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:94
              GDT_GRANULAR | GDT_16BIT);
    gdtEntryRM(2, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE,
   23ca7:	83 ec 0c             	sub    esp,0xc
   23caa:	68 80 00 00 00       	push   0x80
   23caf:	68 82 00 00 00       	push   0x82
   23cb4:	68 ff ff 0f 00       	push   0xfffff
   23cb9:	6a 00                	push   0x0
   23cbb:	6a 02                	push   0x2
   23cbd:	e8 85 4c ff ff       	call   18947 <gdtEntryRM>
   23cc2:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:96
              GDT_GRANULAR | GDT_16BIT);
    gdtEntryRM(3, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_WRITABLE,
   23cc5:	83 ec 0c             	sub    esp,0xc
   23cc8:	68 c0 00 00 00       	push   0xc0
   23ccd:	68 8a 00 00 00       	push   0x8a
   23cd2:	68 ff ff 0f 00       	push   0xfffff
   23cd7:	6a 00                	push   0x0
   23cd9:	6a 03                	push   0x3
   23cdb:	e8 67 4c ff ff       	call   18947 <gdtEntryRM>
   23ce0:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:99
              GDT_GRANULAR | GDT_32BIT);

    gdtp.limit = sizeof(struct GDT) * GDT_ENTRIES - 1;
   23ce3:	66 c7 05 4c 04 a0 00 	mov    WORD PTR ds:0xa0044c,0x18f
   23cea:	8f 01 
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:100
    gdtp.base = (unsigned int)INIT_GDT_TABLE_ADDRESS;
   23cec:	c7 05 4e 04 a0 00 00 	mov    DWORD PTR ds:0xa0044e,0x105000
   23cf3:	50 10 00 
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:101
    rmGdtp.limit = sizeof(struct GDT) * GDT_ENTRIES - 1;
   23cf6:	66 c7 05 3c 04 a0 00 	mov    WORD PTR ds:0xa0043c,0x18f
   23cfd:	8f 01 
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:102
    rmGdtp.base = (unsigned int)rmGdt;
   23cff:	a1 44 04 a0 00       	mov    eax,ds:0xa00444
   23d04:	a3 3e 04 a0 00       	mov    ds:0xa0043e,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:103
    set_gdt(&gdtp);
   23d09:	83 ec 0c             	sub    esp,0xc
   23d0c:	68 4c 04 a0 00       	push   0xa0044c
   23d11:	e8 27 d4 fd ff       	call   113d <set_gdt>
   23d16:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:104
}
   23d19:	90                   	nop
   23d1a:	c9                   	leave  
   23d1b:	c3                   	ret    

00023d1c <quietHardware>:
quietHardware():
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:107

void HIGH_CODE_SECTION quietHardware()
{
   23d1c:	55                   	push   ebp
   23d1d:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:108
    outb(0xa1, 0x7f);
   23d1f:	6a 7f                	push   0x7f
   23d21:	68 a1 00 00 00       	push   0xa1
   23d26:	e8 b7 fe ff ff       	call   23be2 <outb>
   23d2b:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:109
    outb(0x21, 0xff);
   23d2e:	68 ff 00 00 00       	push   0xff
   23d33:	6a 21                	push   0x21
   23d35:	e8 a8 fe ff ff       	call   23be2 <outb>
   23d3a:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:110
}
   23d3d:	90                   	nop
   23d3e:	c9                   	leave  
   23d3f:	c3                   	ret    

00023d40 <doHDSetup>:
doHDSetup():
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:113

void doHDSetup()
{
   23d40:	55                   	push   ebp
   23d41:	89 e5                	mov    ebp,esp
   23d43:	57                   	push   edi
   23d44:	56                   	push   esi
   23d45:	53                   	push   ebx
   23d46:	81 ec 2c 08 00 00    	sub    esp,0x82c
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:114
    printk("ATA: Scanning for hard drives on primary bus ...\n");
   23d4c:	83 ec 0c             	sub    esp,0xc
   23d4f:	68 40 48 08 00       	push   0x84840
   23d54:	e8 da 32 00 00       	call   27033 <printk>
   23d59:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:115
    ataScanForHarddrives();
   23d5c:	e8 ee e8 ff ff       	call   2264f <ataScanForHarddrives>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:117
    char* p1[512];
    memset(p1,0,512);
   23d61:	83 ec 04             	sub    esp,0x4
   23d64:	68 00 02 00 00       	push   0x200
   23d69:	6a 00                	push   0x0
   23d6b:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   23d71:	50                   	push   eax
   23d72:	e8 36 12 00 00       	call   24fad <memset>
   23d77:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:119
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
   23d7a:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   23d7f:	05 00 02 00 00       	add    eax,0x200
   23d84:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:120
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   23d8a:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   23d8f:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   23d96:	3c 01                	cmp    al,0x1
   23d98:	75 14                	jne    23dae <doHDSetup+0x6e>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:120 (discriminator 1)
   23d9a:	83 ec 0c             	sub    esp,0xc
   23d9d:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   23da3:	50                   	push   eax
   23da4:	e8 9f 37 00 00       	call   27548 <strtrim>
   23da9:	83 c4 10             	add    esp,0x10
   23dac:	eb 05                	jmp    23db3 <doHDSetup+0x73>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:120 (discriminator 2)
   23dae:	b8 72 48 08 00       	mov    eax,0x84872
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:120 (discriminator 4)
   23db3:	83 ec 08             	sub    esp,0x8
   23db6:	50                   	push   eax
   23db7:	68 78 48 08 00       	push   0x84878
   23dbc:	e8 72 32 00 00       	call   27033 <printk>
   23dc1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:121 (discriminator 4)
    if (kATADeviceInfo[0].ATADeviceAvailable)
   23dc4:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   23dc9:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   23dd0:	84 c0                	test   al,al
   23dd2:	0f 84 92 00 00 00    	je     23e6a <doHDSetup+0x12a>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:127
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
                kATADeviceInfo[0].lba48Supported?",LBA48":"",
                kATADeviceInfo[0].dmaSupported?",DMA":"");
   23dd8:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   23ddd:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:123
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   23de4:	84 c0                	test   al,al
   23de6:	74 07                	je     23def <doHDSetup+0xaf>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:123 (discriminator 1)
   23de8:	bf 89 48 08 00       	mov    edi,0x84889
   23ded:	eb 05                	jmp    23df4 <doHDSetup+0xb4>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:123 (discriminator 2)
   23def:	bf 8e 48 08 00       	mov    edi,0x8488e
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:126 (discriminator 4)
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
                kATADeviceInfo[0].lba48Supported?",LBA48":"",
   23df4:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   23df9:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:123 (discriminator 4)
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   23e00:	84 c0                	test   al,al
   23e02:	74 07                	je     23e0b <doHDSetup+0xcb>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:123 (discriminator 5)
   23e04:	be 8f 48 08 00       	mov    esi,0x8488f
   23e09:	eb 05                	jmp    23e10 <doHDSetup+0xd0>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:123 (discriminator 6)
   23e0b:	be 8e 48 08 00       	mov    esi,0x8488e
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:125 (discriminator 8)
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
   23e10:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   23e15:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:123 (discriminator 8)
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   23e1c:	84 c0                	test   al,al
   23e1e:	74 07                	je     23e27 <doHDSetup+0xe7>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:123 (discriminator 9)
   23e20:	bb 96 48 08 00       	mov    ebx,0x84896
   23e25:	eb 05                	jmp    23e2c <doHDSetup+0xec>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:123 (discriminator 10)
   23e27:	bb 8e 48 08 00       	mov    ebx,0x8488e
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:124 (discriminator 12)
                kATADeviceInfo[0].sectorSize,
   23e2c:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:123 (discriminator 12)
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   23e31:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   23e37:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   23e3d:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   23e43:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   23e49:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   23e4f:	0f af d1             	imul   edx,ecx
   23e52:	c1 ea 14             	shr    edx,0x14
   23e55:	83 ec 08             	sub    esp,0x8
   23e58:	57                   	push   edi
   23e59:	56                   	push   esi
   23e5a:	53                   	push   ebx
   23e5b:	50                   	push   eax
   23e5c:	52                   	push   edx
   23e5d:	68 9b 48 08 00       	push   0x8489b
   23e62:	e8 cc 31 00 00       	call   27033 <printk>
   23e67:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:129
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
                kATADeviceInfo[0].lba48Supported?",LBA48":"",
                kATADeviceInfo[0].dmaSupported?",DMA":"");
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
   23e6a:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   23e6f:	05 73 02 00 00       	add    eax,0x273
   23e74:	05 00 02 00 00       	add    eax,0x200
   23e79:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:130
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   23e7f:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   23e84:	05 73 02 00 00       	add    eax,0x273
   23e89:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   23e90:	3c 01                	cmp    al,0x1
   23e92:	75 14                	jne    23ea8 <doHDSetup+0x168>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:130 (discriminator 1)
   23e94:	83 ec 0c             	sub    esp,0xc
   23e97:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   23e9d:	50                   	push   eax
   23e9e:	e8 a5 36 00 00       	call   27548 <strtrim>
   23ea3:	83 c4 10             	add    esp,0x10
   23ea6:	eb 05                	jmp    23ead <doHDSetup+0x16d>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:130 (discriminator 2)
   23ea8:	b8 72 48 08 00       	mov    eax,0x84872
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:130 (discriminator 4)
   23ead:	83 ec 08             	sub    esp,0x8
   23eb0:	50                   	push   eax
   23eb1:	68 b0 48 08 00       	push   0x848b0
   23eb6:	e8 78 31 00 00       	call   27033 <printk>
   23ebb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:131 (discriminator 4)
    if (kATADeviceInfo[1].ATADeviceAvailable)
   23ebe:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   23ec3:	05 73 02 00 00       	add    eax,0x273
   23ec8:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   23ecf:	84 c0                	test   al,al
   23ed1:	0f 84 b2 00 00 00    	je     23f89 <doHDSetup+0x249>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:137
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
                kATADeviceInfo[1].lba48Supported?",LBA48":"",
                kATADeviceInfo[1].dmaSupported?",DMA":"");
   23ed7:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   23edc:	05 73 02 00 00       	add    eax,0x273
   23ee1:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:133
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   23ee8:	84 c0                	test   al,al
   23eea:	74 07                	je     23ef3 <doHDSetup+0x1b3>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:133 (discriminator 1)
   23eec:	bf 89 48 08 00       	mov    edi,0x84889
   23ef1:	eb 05                	jmp    23ef8 <doHDSetup+0x1b8>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:133 (discriminator 2)
   23ef3:	bf 8e 48 08 00       	mov    edi,0x8488e
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:136 (discriminator 4)
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
                kATADeviceInfo[1].lba48Supported?",LBA48":"",
   23ef8:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   23efd:	05 73 02 00 00       	add    eax,0x273
   23f02:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:133 (discriminator 4)
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   23f09:	84 c0                	test   al,al
   23f0b:	74 07                	je     23f14 <doHDSetup+0x1d4>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:133 (discriminator 5)
   23f0d:	be 8f 48 08 00       	mov    esi,0x8488f
   23f12:	eb 05                	jmp    23f19 <doHDSetup+0x1d9>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:133 (discriminator 6)
   23f14:	be 8e 48 08 00       	mov    esi,0x8488e
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:135 (discriminator 8)
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
   23f19:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   23f1e:	05 73 02 00 00       	add    eax,0x273
   23f23:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:133 (discriminator 8)
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   23f2a:	84 c0                	test   al,al
   23f2c:	74 07                	je     23f35 <doHDSetup+0x1f5>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:133 (discriminator 9)
   23f2e:	bb 96 48 08 00       	mov    ebx,0x84896
   23f33:	eb 05                	jmp    23f3a <doHDSetup+0x1fa>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:133 (discriminator 10)
   23f35:	bb 8e 48 08 00       	mov    ebx,0x8488e
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:134 (discriminator 12)
                kATADeviceInfo[1].sectorSize,
   23f3a:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   23f3f:	05 73 02 00 00       	add    eax,0x273
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:133 (discriminator 12)
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   23f44:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   23f4a:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   23f50:	81 c2 73 02 00 00    	add    edx,0x273
   23f56:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   23f5c:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   23f62:	81 c2 73 02 00 00    	add    edx,0x273
   23f68:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   23f6e:	0f af d1             	imul   edx,ecx
   23f71:	c1 ea 14             	shr    edx,0x14
   23f74:	83 ec 08             	sub    esp,0x8
   23f77:	57                   	push   edi
   23f78:	56                   	push   esi
   23f79:	53                   	push   ebx
   23f7a:	50                   	push   eax
   23f7b:	52                   	push   edx
   23f7c:	68 c1 48 08 00       	push   0x848c1
   23f81:	e8 ad 30 00 00       	call   27033 <printk>
   23f86:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:139
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
                kATADeviceInfo[1].lba48Supported?",LBA48":"",
                kATADeviceInfo[1].dmaSupported?",DMA":"");
    }
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
   23f89:	83 ec 0c             	sub    esp,0xc
   23f8c:	68 d8 48 08 00       	push   0x848d8
   23f91:	e8 9d 30 00 00       	call   27033 <printk>
   23f96:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:140
    *p1=kATADeviceInfo[2].ATADeviceModel;
   23f99:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   23f9e:	05 e6 04 00 00       	add    eax,0x4e6
   23fa3:	05 00 02 00 00       	add    eax,0x200
   23fa8:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:141
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   23fae:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   23fb3:	05 e6 04 00 00       	add    eax,0x4e6
   23fb8:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   23fbf:	3c 01                	cmp    al,0x1
   23fc1:	75 14                	jne    23fd7 <doHDSetup+0x297>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:141 (discriminator 1)
   23fc3:	83 ec 0c             	sub    esp,0xc
   23fc6:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   23fcc:	50                   	push   eax
   23fcd:	e8 76 35 00 00       	call   27548 <strtrim>
   23fd2:	83 c4 10             	add    esp,0x10
   23fd5:	eb 05                	jmp    23fdc <doHDSetup+0x29c>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:141 (discriminator 2)
   23fd7:	b8 72 48 08 00       	mov    eax,0x84872
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:141 (discriminator 4)
   23fdc:	83 ec 08             	sub    esp,0x8
   23fdf:	50                   	push   eax
   23fe0:	68 78 48 08 00       	push   0x84878
   23fe5:	e8 49 30 00 00       	call   27033 <printk>
   23fea:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:142 (discriminator 4)
    if (kATADeviceInfo[2].ATADeviceAvailable)
   23fed:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   23ff2:	05 e6 04 00 00       	add    eax,0x4e6
   23ff7:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   23ffe:	84 c0                	test   al,al
   24000:	0f 84 b2 00 00 00    	je     240b8 <doHDSetup+0x378>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:148
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
                kATADeviceInfo[2].lba48Supported?",LBA48":"",
                kATADeviceInfo[2].dmaSupported?",DMA":"");
   24006:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   2400b:	05 e6 04 00 00       	add    eax,0x4e6
   24010:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:144
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   24017:	84 c0                	test   al,al
   24019:	74 07                	je     24022 <doHDSetup+0x2e2>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:144 (discriminator 1)
   2401b:	bf 89 48 08 00       	mov    edi,0x84889
   24020:	eb 05                	jmp    24027 <doHDSetup+0x2e7>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:144 (discriminator 2)
   24022:	bf 8e 48 08 00       	mov    edi,0x8488e
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:147 (discriminator 4)
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
                kATADeviceInfo[2].lba48Supported?",LBA48":"",
   24027:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   2402c:	05 e6 04 00 00       	add    eax,0x4e6
   24031:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:144 (discriminator 4)
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   24038:	84 c0                	test   al,al
   2403a:	74 07                	je     24043 <doHDSetup+0x303>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:144 (discriminator 5)
   2403c:	be 8f 48 08 00       	mov    esi,0x8488f
   24041:	eb 05                	jmp    24048 <doHDSetup+0x308>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:144 (discriminator 6)
   24043:	be 8e 48 08 00       	mov    esi,0x8488e
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:146 (discriminator 8)
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
   24048:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   2404d:	05 e6 04 00 00       	add    eax,0x4e6
   24052:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:144 (discriminator 8)
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   24059:	84 c0                	test   al,al
   2405b:	74 07                	je     24064 <doHDSetup+0x324>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:144 (discriminator 9)
   2405d:	bb 96 48 08 00       	mov    ebx,0x84896
   24062:	eb 05                	jmp    24069 <doHDSetup+0x329>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:144 (discriminator 10)
   24064:	bb 8e 48 08 00       	mov    ebx,0x8488e
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:145 (discriminator 12)
                kATADeviceInfo[2].sectorSize,
   24069:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   2406e:	05 e6 04 00 00       	add    eax,0x4e6
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:144 (discriminator 12)
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   24073:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   24079:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   2407f:	81 c2 e6 04 00 00    	add    edx,0x4e6
   24085:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   2408b:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   24091:	81 c2 e6 04 00 00    	add    edx,0x4e6
   24097:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   2409d:	0f af d1             	imul   edx,ecx
   240a0:	c1 ea 14             	shr    edx,0x14
   240a3:	83 ec 08             	sub    esp,0x8
   240a6:	57                   	push   edi
   240a7:	56                   	push   esi
   240a8:	53                   	push   ebx
   240a9:	50                   	push   eax
   240aa:	52                   	push   edx
   240ab:	68 9b 48 08 00       	push   0x8489b
   240b0:	e8 7e 2f 00 00       	call   27033 <printk>
   240b5:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:150
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
                kATADeviceInfo[2].lba48Supported?",LBA48":"",
                kATADeviceInfo[2].dmaSupported?",DMA":"");
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
   240b8:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   240bd:	05 59 07 00 00       	add    eax,0x759
   240c2:	05 00 02 00 00       	add    eax,0x200
   240c7:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:151
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   240cd:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   240d2:	05 59 07 00 00       	add    eax,0x759
   240d7:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   240de:	3c 01                	cmp    al,0x1
   240e0:	75 14                	jne    240f6 <doHDSetup+0x3b6>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:151 (discriminator 1)
   240e2:	83 ec 0c             	sub    esp,0xc
   240e5:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   240eb:	50                   	push   eax
   240ec:	e8 57 34 00 00       	call   27548 <strtrim>
   240f1:	83 c4 10             	add    esp,0x10
   240f4:	eb 05                	jmp    240fb <doHDSetup+0x3bb>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:151 (discriminator 2)
   240f6:	b8 72 48 08 00       	mov    eax,0x84872
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:151 (discriminator 4)
   240fb:	83 ec 08             	sub    esp,0x8
   240fe:	50                   	push   eax
   240ff:	68 b0 48 08 00       	push   0x848b0
   24104:	e8 2a 2f 00 00       	call   27033 <printk>
   24109:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:152 (discriminator 4)
    if (kATADeviceInfo[3].ATADeviceAvailable)
   2410c:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   24111:	05 59 07 00 00       	add    eax,0x759
   24116:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   2411d:	84 c0                	test   al,al
   2411f:	0f 84 b2 00 00 00    	je     241d7 <doHDSetup+0x497>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:158
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
                kATADeviceInfo[3].lba48Supported?",LBA48":"",
                kATADeviceInfo[3].dmaSupported?",DMA":"");
   24125:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   2412a:	05 59 07 00 00       	add    eax,0x759
   2412f:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:154
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   24136:	84 c0                	test   al,al
   24138:	74 07                	je     24141 <doHDSetup+0x401>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:154 (discriminator 1)
   2413a:	bf 89 48 08 00       	mov    edi,0x84889
   2413f:	eb 05                	jmp    24146 <doHDSetup+0x406>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:154 (discriminator 2)
   24141:	bf 8e 48 08 00       	mov    edi,0x8488e
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:157 (discriminator 4)
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
                kATADeviceInfo[3].lba48Supported?",LBA48":"",
   24146:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   2414b:	05 59 07 00 00       	add    eax,0x759
   24150:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:154 (discriminator 4)
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   24157:	84 c0                	test   al,al
   24159:	74 07                	je     24162 <doHDSetup+0x422>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:154 (discriminator 5)
   2415b:	be 8f 48 08 00       	mov    esi,0x8488f
   24160:	eb 05                	jmp    24167 <doHDSetup+0x427>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:154 (discriminator 6)
   24162:	be 8e 48 08 00       	mov    esi,0x8488e
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:156 (discriminator 8)
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
   24167:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   2416c:	05 59 07 00 00       	add    eax,0x759
   24171:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:154 (discriminator 8)
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   24178:	84 c0                	test   al,al
   2417a:	74 07                	je     24183 <doHDSetup+0x443>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:154 (discriminator 9)
   2417c:	bb 96 48 08 00       	mov    ebx,0x84896
   24181:	eb 05                	jmp    24188 <doHDSetup+0x448>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:154 (discriminator 10)
   24183:	bb 8e 48 08 00       	mov    ebx,0x8488e
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:155 (discriminator 12)
                kATADeviceInfo[3].sectorSize,
   24188:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   2418d:	05 59 07 00 00       	add    eax,0x759
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:154 (discriminator 12)
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   24192:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   24198:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   2419e:	81 c2 59 07 00 00    	add    edx,0x759
   241a4:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   241aa:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   241b0:	81 c2 59 07 00 00    	add    edx,0x759
   241b6:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   241bc:	0f af d1             	imul   edx,ecx
   241bf:	c1 ea 14             	shr    edx,0x14
   241c2:	83 ec 08             	sub    esp,0x8
   241c5:	57                   	push   edi
   241c6:	56                   	push   esi
   241c7:	53                   	push   ebx
   241c8:	50                   	push   eax
   241c9:	52                   	push   edx
   241ca:	68 c1 48 08 00       	push   0x848c1
   241cf:	e8 5f 2e 00 00       	call   27033 <printk>
   241d4:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:160
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
                kATADeviceInfo[3].lba48Supported?",LBA48":"",
                kATADeviceInfo[3].dmaSupported?",DMA":"");
    }
    if (ParamExists(kBootParams,"noahci",kBootParamCount))
   241d7:	a1 c0 8f 09 00       	mov    eax,ds:0x98fc0
   241dc:	83 ec 04             	sub    esp,0x4
   241df:	50                   	push   eax
   241e0:	68 0c 49 08 00       	push   0x8490c
   241e5:	68 e0 8f 09 00       	push   0x98fe0
   241ea:	e8 e0 01 00 00       	call   243cf <ParamExists>
   241ef:	83 c4 10             	add    esp,0x10
   241f2:	84 c0                	test   al,al
   241f4:	74 15                	je     2420b <doHDSetup+0x4cb>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:161
        printk("AHCI: No scanning per parameter 'noahci'\n");
   241f6:	83 ec 0c             	sub    esp,0xc
   241f9:	68 14 49 08 00       	push   0x84914
   241fe:	e8 30 2e 00 00       	call   27033 <printk>
   24203:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:181
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
                        kATADeviceInfo[cnt].dmaSupported?",DMA":"");
            }
    }
}
   24206:	e9 bb 01 00 00       	jmp    243c6 <doHDSetup+0x686>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:164
    }
    if (ParamExists(kBootParams,"noahci",kBootParamCount))
        printk("AHCI: No scanning per parameter 'noahci'\n");
    else
    {
        printk("AHCI: Initializing ...\n");
   2420b:	83 ec 0c             	sub    esp,0xc
   2420e:	68 3e 49 08 00       	push   0x8493e
   24213:	e8 1b 2e 00 00       	call   27033 <printk>
   24218:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:165
        ahciInit();
   2421b:	e8 5c 10 ff ff       	call   1527c <ahciInit>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:166
        printk(" done\n");
   24220:	83 ec 0c             	sub    esp,0xc
   24223:	68 56 49 08 00       	push   0x84956
   24228:	e8 06 2e 00 00       	call   27033 <printk>
   2422d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:167
        printk("AHCI: SATA Disks:\n");
   24230:	83 ec 0c             	sub    esp,0xc
   24233:	68 5d 49 08 00       	push   0x8495d
   24238:	e8 f6 2d 00 00       	call   27033 <printk>
   2423d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:168
        for (int cnt=4;cnt<10;cnt++)
   24240:	c7 45 e4 04 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x4
   24247:	e9 70 01 00 00       	jmp    243bc <doHDSetup+0x67c>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:169
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
   2424c:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   24252:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24255:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   2425b:	01 d0                	add    eax,edx
   2425d:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   24264:	84 c0                	test   al,al
   24266:	0f 84 4c 01 00 00    	je     243b8 <doHDSetup+0x678>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:171
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
   2426c:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   24272:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24275:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   2427b:	01 d0                	add    eax,edx
   2427d:	05 00 02 00 00       	add    eax,0x200
   24282:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:172
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   24288:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   2428e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24291:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24297:	01 d0                	add    eax,edx
   24299:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   242a0:	3c 01                	cmp    al,0x1
   242a2:	75 14                	jne    242b8 <doHDSetup+0x578>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:172 (discriminator 1)
   242a4:	83 ec 0c             	sub    esp,0xc
   242a7:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   242ad:	50                   	push   eax
   242ae:	e8 95 32 00 00       	call   27548 <strtrim>
   242b3:	83 c4 10             	add    esp,0x10
   242b6:	eb 05                	jmp    242bd <doHDSetup+0x57d>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:172 (discriminator 2)
   242b8:	b8 72 48 08 00       	mov    eax,0x84872
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:172 (discriminator 4)
   242bd:	83 ec 04             	sub    esp,0x4
   242c0:	50                   	push   eax
   242c1:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   242c4:	68 70 49 08 00       	push   0x84970
   242c9:	e8 65 2d 00 00       	call   27033 <printk>
   242ce:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:178 (discriminator 4)
                printk("\t%uMB (%ubps %s%s%s)\n", 
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
                        kATADeviceInfo[cnt].dmaSupported?",DMA":"");
   242d1:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   242d7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   242da:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   242e0:	01 d0                	add    eax,edx
   242e2:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:173 (discriminator 4)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   242e9:	84 c0                	test   al,al
   242eb:	74 0c                	je     242f9 <doHDSetup+0x5b9>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:173 (discriminator 1)
   242ed:	c7 85 d4 f7 ff ff 89 	mov    DWORD PTR [ebp-0x82c],0x84889
   242f4:	48 08 00 
   242f7:	eb 0a                	jmp    24303 <doHDSetup+0x5c3>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:173 (discriminator 2)
   242f9:	c7 85 d4 f7 ff ff 8e 	mov    DWORD PTR [ebp-0x82c],0x8488e
   24300:	48 08 00 
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:177 (discriminator 4)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
   24303:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   24309:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   2430c:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24312:	01 d0                	add    eax,edx
   24314:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:173 (discriminator 4)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   2431b:	84 c0                	test   al,al
   2431d:	74 07                	je     24326 <doHDSetup+0x5e6>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:173 (discriminator 5)
   2431f:	bf 8f 48 08 00       	mov    edi,0x8488f
   24324:	eb 05                	jmp    2432b <doHDSetup+0x5eb>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:173 (discriminator 6)
   24326:	bf 8e 48 08 00       	mov    edi,0x8488e
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:176 (discriminator 8)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
   2432b:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   24331:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24334:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   2433a:	01 d0                	add    eax,edx
   2433c:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:173 (discriminator 8)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   24343:	84 c0                	test   al,al
   24345:	74 07                	je     2434e <doHDSetup+0x60e>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:173 (discriminator 9)
   24347:	be 96 48 08 00       	mov    esi,0x84896
   2434c:	eb 05                	jmp    24353 <doHDSetup+0x613>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:173 (discriminator 10)
   2434e:	be 8e 48 08 00       	mov    esi,0x8488e
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:175 (discriminator 12)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
   24353:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   24359:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   2435c:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24362:	01 d0                	add    eax,edx
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:173 (discriminator 12)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   24364:	8b 88 5a 02 00 00    	mov    ecx,DWORD PTR [eax+0x25a]
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:174 (discriminator 12)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
   2436a:	8b 15 c0 02 a0 00    	mov    edx,DWORD PTR ds:0xa002c0
   24370:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24373:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24379:	01 d0                	add    eax,edx
   2437b:	8b 90 56 02 00 00    	mov    edx,DWORD PTR [eax+0x256]
   24381:	8b 1d c0 02 a0 00    	mov    ebx,DWORD PTR ds:0xa002c0
   24387:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   2438a:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24390:	01 d8                	add    eax,ebx
   24392:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   24398:	0f af c2             	imul   eax,edx
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:173 (discriminator 12)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   2439b:	c1 e8 14             	shr    eax,0x14
   2439e:	83 ec 08             	sub    esp,0x8
   243a1:	ff b5 d4 f7 ff ff    	push   DWORD PTR [ebp-0x82c]
   243a7:	57                   	push   edi
   243a8:	56                   	push   esi
   243a9:	51                   	push   ecx
   243aa:	50                   	push   eax
   243ab:	68 c1 48 08 00       	push   0x848c1
   243b0:	e8 7e 2c 00 00       	call   27033 <printk>
   243b5:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:168 (discriminator 2)
    {
        printk("AHCI: Initializing ...\n");
        ahciInit();
        printk(" done\n");
        printk("AHCI: SATA Disks:\n");
        for (int cnt=4;cnt<10;cnt++)
   243b8:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:168 (discriminator 1)
   243bc:	83 7d e4 09          	cmp    DWORD PTR [ebp-0x1c],0x9
   243c0:	0f 8e 86 fe ff ff    	jle    2424c <doHDSetup+0x50c>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:181
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
                        kATADeviceInfo[cnt].dmaSupported?",DMA":"");
            }
    }
}
   243c6:	90                   	nop
   243c7:	8d 65 f4             	lea    esp,[ebp-0xc]
   243ca:	5b                   	pop    ebx
   243cb:	5e                   	pop    esi
   243cc:	5f                   	pop    edi
   243cd:	5d                   	pop    ebp
   243ce:	c3                   	ret    

000243cf <ParamExists>:
ParamExists():
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:184

bool HIGH_CODE_SECTION ParamExists(char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH], char* cmdToFind, int paramCount)
{
   243cf:	55                   	push   ebp
   243d0:	89 e5                	mov    ebp,esp
   243d2:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:185
    for (int cnt=0;cnt<paramCount+1;cnt++)
   243d5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   243dc:	eb 2b                	jmp    24409 <ParamExists+0x3a>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:186
        if (!strcmp(params[cnt],cmdToFind))
   243de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   243e1:	c1 e0 09             	shl    eax,0x9
   243e4:	89 c2                	mov    edx,eax
   243e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   243e9:	01 d0                	add    eax,edx
   243eb:	83 ec 08             	sub    esp,0x8
   243ee:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   243f1:	50                   	push   eax
   243f2:	e8 49 2d 00 00       	call   27140 <strcmp>
   243f7:	83 c4 10             	add    esp,0x10
   243fa:	85 c0                	test   eax,eax
   243fc:	75 07                	jne    24405 <ParamExists+0x36>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:187
            return true;
   243fe:	b8 01 00 00 00       	mov    eax,0x1
   24403:	eb 14                	jmp    24419 <ParamExists+0x4a>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:185 (discriminator 2)
    }
}

bool HIGH_CODE_SECTION ParamExists(char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH], char* cmdToFind, int paramCount)
{
    for (int cnt=0;cnt<paramCount+1;cnt++)
   24405:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:185 (discriminator 1)
   24409:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2440c:	83 c0 01             	add    eax,0x1
   2440f:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   24412:	7f ca                	jg     243de <ParamExists+0xf>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:188
        if (!strcmp(params[cnt],cmdToFind))
            return true;
    return false;
   24414:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:189
}
   24419:	c9                   	leave  
   2441a:	c3                   	ret    

0002441b <kernel_main>:
kernel_main():
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:191

void HIGH_CODE_SECTION kernel_main(/*multiboot_info_t* mbd, unsigned int magic*/) {
   2441b:	55                   	push   ebp
   2441c:	89 e5                	mov    ebp,esp
   2441e:	56                   	push   esi
   2441f:	53                   	push   ebx
   24420:	81 ec d0 00 00 00    	sub    esp,0xd0
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:197
    
char currTime[150];
struct tm theDateTime;
    //Zero out all of the memory we will be using as rebooting a computer doesn't necessarily clear memory
    //memset(0x200000,0,0x1000000);
    kTicksPerSecond=TICKS_PER_SECOND;
   24426:	c7 05 80 02 a0 00 64 	mov    DWORD PTR ds:0xa00280,0x64
   2442d:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:198
    kTermInit();
   24430:	e8 65 3b ff ff       	call   17f9a <kTermInit>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:199
    kInitDone=false;
   24435:	c6 05 a0 02 a0 00 00 	mov    BYTE PTR ds:0xa002a0,0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:200
    kPagingInitDone=false;
   2443c:	c6 05 a1 02 a0 00 00 	mov    BYTE PTR ds:0xa002a1,0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:201
    kTicksPerMS=1000/kTicksPerSecond;
   24443:	8b 35 80 02 a0 00    	mov    esi,DWORD PTR ds:0xa00280
   24449:	b8 e8 03 00 00       	mov    eax,0x3e8
   2444e:	99                   	cdq    
   2444f:	f7 fe                	idiv   esi
   24451:	a3 84 02 a0 00       	mov    ds:0xa00284,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:202
    kDebugStartsNow=false;
   24456:	c6 05 b0 02 a0 00 00 	mov    BYTE PTR ds:0xa002b0,0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:203
    memset(kATADeviceInfo,0x0,sizeof(struct ataDeviceInfo_t)*20);
   2445d:	a1 c0 02 a0 00       	mov    eax,ds:0xa002c0
   24462:	83 ec 04             	sub    esp,0x4
   24465:	68 fc 30 00 00       	push   0x30fc
   2446a:	6a 00                	push   0x0
   2446c:	50                   	push   eax
   2446d:	e8 3b 0b 00 00       	call   24fad <memset>
   24472:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:204
    memset(kGDTAvailable,0xFA,0x4096);
   24475:	a1 f0 03 a0 00       	mov    eax,ds:0xa003f0
   2447a:	83 ec 04             	sub    esp,0x4
   2447d:	68 96 40 00 00       	push   0x4096
   24482:	68 fa 00 00 00       	push   0xfa
   24487:	50                   	push   eax
   24488:	e8 20 0b 00 00       	call   24fad <memset>
   2448d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:205
    memset(kTSSAvailable,0xFA,TSS_TABLE_RECORD_COUNT*0x68);
   24490:	a1 f4 03 a0 00       	mov    eax,ds:0xa003f4
   24495:	83 ec 04             	sub    esp,0x4
   24498:	68 00 a0 01 00       	push   0x1a000
   2449d:	68 fa 00 00 00       	push   0xfa
   244a2:	50                   	push   eax
   244a3:	e8 05 0b 00 00       	call   24fad <memset>
   244a8:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:207

    __asm__("mov esp,0xff00\n" /*\
   244ab:	bc 00 ff 00 00       	mov    esp,0xff00
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:210
            "mov eax,0\nmov dr6,eax":::"eax"*/);
    /* Initialize terminal interface */
    *kTicksSinceStart=0;
   244b0:	a1 60 02 a0 00       	mov    eax,ds:0xa00260
   244b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:211
    identify_data_sizes(&kDataSizes);
   244bb:	83 ec 0c             	sub    esp,0xc
   244be:	68 54 02 a0 00       	push   0xa00254
   244c3:	e8 b3 0a 00 00       	call   24f7b <identify_data_sizes>
   244c8:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:212
    terminal_clear();
   244cb:	e8 c2 36 ff ff       	call   17b92 <terminal_clear>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:213
    printk("Booting ...\n");
   244d0:	83 ec 0c             	sub    esp,0xc
   244d3:	68 85 49 08 00       	push   0x84985
   244d8:	e8 56 2b 00 00       	call   27033 <printk>
   244dd:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:214
    gdt_init();
   244e0:	e8 1c f7 ff ff       	call   23c01 <gdt_init>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:215
    quietHardware();
   244e5:	e8 32 f8 ff ff       	call   23d1c <quietHardware>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:216
    int lLowMemKB = getInt12Memory();
   244ea:	e8 7e cb fd ff       	call   106d <getInt12Memory>
   244ef:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:217
    kE820Status = isE820Available(); //
   244f2:	e8 31 cb fd ff       	call   1028 <isE820Available>
   244f7:	a3 44 00 a0 00       	mov    ds:0xa00044,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:218
    if (kE820Status==0x534d4150)
   244fc:	a1 44 00 a0 00       	mov    eax,ds:0xa00044
   24501:	3d 50 41 4d 53       	cmp    eax,0x534d4150
   24506:	75 0b                	jne    24513 <kernel_main+0xf8>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:219
        kE820RecordCount = getE820Memory_asm();
   24508:	e8 2b cd fd ff       	call   1238 <getE820Memory_asm>
   2450d:	66 a3 50 00 a0 00    	mov    ds:0xa00050,ax
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:221
    //Move the SMAP table from low memory up to where we want it
    memcpy(smap_table, lowSmapTablePtr, kE820RecordCount*24);
   24513:	0f b7 05 50 00 a0 00 	movzx  eax,WORD PTR ds:0xa00050
   2451a:	0f bf d0             	movsx  edx,ax
   2451d:	89 d0                	mov    eax,edx
   2451f:	01 c0                	add    eax,eax
   24521:	01 d0                	add    eax,edx
   24523:	c1 e0 03             	shl    eax,0x3
   24526:	89 c1                	mov    ecx,eax
   24528:	8b 15 5f 13 00 00    	mov    edx,DWORD PTR ds:0x135f
   2452e:	a1 40 00 a0 00       	mov    eax,ds:0xa00040
   24533:	83 ec 04             	sub    esp,0x4
   24536:	51                   	push   ecx
   24537:	52                   	push   edx
   24538:	50                   	push   eax
   24539:	e8 62 14 00 00       	call   259a0 <memcpy>
   2453e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:222
    idt_init(&kInitialIDTReg, PIC_REMAP_OFFSET);
   24541:	83 ec 08             	sub    esp,0x8
   24544:	6a 20                	push   0x20
   24546:	68 e0 a3 09 00       	push   0x9a3e0
   2454b:	e8 78 45 ff ff       	call   18ac8 <idt_init>
   24550:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:223
    init_PIT(kTicksPerSecond);
   24553:	a1 80 02 a0 00       	mov    eax,ds:0xa00280
   24558:	83 ec 0c             	sub    esp,0xc
   2455b:	50                   	push   eax
   2455c:	e8 2c cc fd ff       	call   118d <init_PIT>
   24561:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:225
    //Remap the exception vectors (0x0-0x1f)
    PIC_remap(0x00+PIC_REMAP_OFFSET, 0x8+PIC_REMAP_OFFSET);
   24564:	83 ec 08             	sub    esp,0x8
   24567:	6a 28                	push   0x28
   24569:	6a 20                	push   0x20
   2456b:	e8 52 54 ff ff       	call   199c2 <PIC_remap>
   24570:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:226
    IRQ_clear_mask(0);
   24573:	83 ec 0c             	sub    esp,0xc
   24576:	6a 00                	push   0x0
   24578:	e8 e3 53 ff ff       	call   19960 <IRQ_clear_mask>
   2457d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:227
    IRQ_clear_mask(1);
   24580:	83 ec 0c             	sub    esp,0xc
   24583:	6a 01                	push   0x1
   24585:	e8 d6 53 ff ff       	call   19960 <IRQ_clear_mask>
   2458a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:228
    initSystemDate();
   2458d:	e8 72 0b 00 00       	call   25104 <initSystemDate>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:229
    gmtime_r(&kSystemStartTime,&theDateTime);
   24592:	83 ec 08             	sub    esp,0x8
   24595:	8d 85 30 ff ff ff    	lea    eax,[ebp-0xd0]
   2459b:	50                   	push   eax
   2459c:	68 88 02 a0 00       	push   0xa00288
   245a1:	e8 ef 30 00 00       	call   27695 <gmtime_r>
   245a6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:230
    printk("Boot: ");
   245a9:	83 ec 0c             	sub    esp,0xc
   245ac:	68 92 49 08 00       	push   0x84992
   245b1:	e8 7d 2a 00 00       	call   27033 <printk>
   245b6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:231
    gets(kBootCmd,150);
   245b9:	83 ec 08             	sub    esp,0x8
   245bc:	68 96 00 00 00       	push   0x96
   245c1:	68 00 a4 09 00       	push   0x9a400
   245c6:	e8 24 cd fe ff       	call   112ef <gets>
   245cb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:232
    kBootParamCount=parseParamsShell(kBootCmd, kBootParams, MAX_PARAM_COUNT*MAX_PARAM_WIDTH);
   245ce:	83 ec 04             	sub    esp,0x4
   245d1:	68 00 14 00 00       	push   0x1400
   245d6:	68 e0 8f 09 00       	push   0x98fe0
   245db:	68 00 a4 09 00       	push   0x9a400
   245e0:	e8 5d de fe ff       	call   12442 <parseParamsShell>
   245e5:	83 c4 10             	add    esp,0x10
   245e8:	a3 c0 8f 09 00       	mov    ds:0x98fc0,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:233
    strftime((char*)&currTime, 50, "%H:%M:%S on %m/%d/%y", &theDateTime);
   245ed:	8d 85 30 ff ff ff    	lea    eax,[ebp-0xd0]
   245f3:	50                   	push   eax
   245f4:	68 99 49 08 00       	push   0x84999
   245f9:	6a 32                	push   0x32
   245fb:	8d 85 5e ff ff ff    	lea    eax,[ebp-0xa2]
   24601:	50                   	push   eax
   24602:	e8 a9 c0 fe ff       	call   106b0 <strftime>
   24607:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:235
    //wait(50);
    printk("chrisOS %s booting @%s",  COMPLETE_VERSION, &currTime);
   2460a:	83 ec 04             	sub    esp,0x4
   2460d:	8d 85 5e ff ff ff    	lea    eax,[ebp-0xa2]
   24613:	50                   	push   eax
   24614:	68 ae 49 08 00       	push   0x849ae
   24619:	68 c2 49 08 00       	push   0x849c2
   2461e:	e8 10 2a 00 00       	call   27033 <printk>
   24623:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:237
#ifndef DEBUG_NONE
    if (kDebugLevel > 0)
   24626:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   2462b:	85 c0                	test   eax,eax
   2462d:	74 16                	je     24645 <kernel_main+0x22a>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:238
        printk ("(debug=%X)", kDebugLevel);
   2462f:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   24634:	83 ec 08             	sub    esp,0x8
   24637:	50                   	push   eax
   24638:	68 d9 49 08 00       	push   0x849d9
   2463d:	e8 f1 29 00 00       	call   27033 <printk>
   24642:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:240
#endif
    printk("\n");
   24645:	83 ec 0c             	sub    esp,0xc
   24648:	68 e4 49 08 00       	push   0x849e4
   2464d:	e8 e1 29 00 00       	call   27033 <printk>
   24652:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:241
    if (kE820Status==0x534d4150)
   24655:	a1 44 00 a0 00       	mov    eax,ds:0xa00044
   2465a:	3d 50 41 4d 53       	cmp    eax,0x534d4150
   2465f:	75 4f                	jne    246b0 <kernel_main+0x295>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:243
    {
        printk("E820: available (%08X), translating ...", kE820Status);
   24661:	a1 44 00 a0 00       	mov    eax,ds:0xa00044
   24666:	83 ec 08             	sub    esp,0x8
   24669:	50                   	push   eax
   2466a:	68 e8 49 08 00       	push   0x849e8
   2466f:	e8 bf 29 00 00       	call   27033 <printk>
   24674:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:244
        kE820MemoryBytes = sum_e820_usable_memory(smap_table,kE820RecordCount);
   24677:	0f b7 05 50 00 a0 00 	movzx  eax,WORD PTR ds:0xa00050
   2467e:	0f bf d0             	movsx  edx,ax
   24681:	a1 40 00 a0 00       	mov    eax,ds:0xa00040
   24686:	83 ec 08             	sub    esp,0x8
   24689:	52                   	push   edx
   2468a:	50                   	push   eax
   2468b:	e8 4d f3 ff ff       	call   239dd <sum_e820_usable_memory>
   24690:	83 c4 10             	add    esp,0x10
   24693:	a3 48 00 a0 00       	mov    ds:0xa00048,eax
   24698:	89 15 4c 00 a0 00    	mov    DWORD PTR ds:0xa0004c,edx
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:245
        printk("done\n");
   2469e:	83 ec 0c             	sub    esp,0xc
   246a1:	68 10 4a 08 00       	push   0x84a10
   246a6:	e8 88 29 00 00       	call   27033 <printk>
   246ab:	83 c4 10             	add    esp,0x10
   246ae:	eb 16                	jmp    246c6 <kernel_main+0x2ab>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:249
        //print_e820_map(smap_table, kE820RecordCount);
    }
    else
        printk("E820: not available (%08X ... looking for alternatives.\n", kE820Status);
   246b0:	a1 44 00 a0 00       	mov    eax,ds:0xa00044
   246b5:	83 ec 08             	sub    esp,0x8
   246b8:	50                   	push   eax
   246b9:	68 18 4a 08 00       	push   0x84a18
   246be:	e8 70 29 00 00       	call   27033 <printk>
   246c3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:251

    printk("E820: Usable memory: Low=%6d (INT12), Total=%10d (E820)\n",lLowMemKB * 1024, kE820MemoryBytes);
   246c6:	a1 48 00 a0 00       	mov    eax,ds:0xa00048
   246cb:	8b 15 4c 00 a0 00    	mov    edx,DWORD PTR ds:0xa0004c
   246d1:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   246d4:	c1 e1 0a             	shl    ecx,0xa
   246d7:	52                   	push   edx
   246d8:	50                   	push   eax
   246d9:	51                   	push   ecx
   246da:	68 54 4a 08 00       	push   0x84a54
   246df:	e8 4f 29 00 00       	call   27033 <printk>
   246e4:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:252
    if (kE820MemoryBytes < MINIMUM_USABLE_MEMORY)
   246e7:	a1 48 00 a0 00       	mov    eax,ds:0xa00048
   246ec:	8b 15 4c 00 a0 00    	mov    edx,DWORD PTR ds:0xa0004c
   246f2:	83 fa 00             	cmp    edx,0x0
   246f5:	77 3d                	ja     24734 <kernel_main+0x319>
   246f7:	83 fa 00             	cmp    edx,0x0
   246fa:	72 07                	jb     24703 <kernel_main+0x2e8>
   246fc:	3d ff ff ff 0f       	cmp    eax,0xfffffff
   24701:	77 31                	ja     24734 <kernel_main+0x319>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:254
    {
        printk("\n\nE820: Either the available memory is less than the minimum required of %d MB\nor memory capacity cannot be determined\n.", MINIMUM_USABLE_MEMORY / 1024 / 1024);
   24703:	83 ec 08             	sub    esp,0x8
   24706:	68 00 01 00 00       	push   0x100
   2470b:	68 90 4a 08 00       	push   0x84a90
   24710:	e8 1e 29 00 00       	call   27033 <printk>
   24715:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:255
        printk("3820: Ignore? ");
   24718:	83 ec 0c             	sub    esp,0xc
   2471b:	68 09 4b 08 00       	push   0x84b09
   24720:	e8 0e 29 00 00       	call   27033 <printk>
   24725:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:257
        
        while (getKeyboardKey()!='y')
   24728:	eb 01                	jmp    2472b <kernel_main+0x310>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:258
        {__asm("hlt\n");}
   2472a:	f4                   	hlt    
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:257
    if (kE820MemoryBytes < MINIMUM_USABLE_MEMORY)
    {
        printk("\n\nE820: Either the available memory is less than the minimum required of %d MB\nor memory capacity cannot be determined\n.", MINIMUM_USABLE_MEMORY / 1024 / 1024);
        printk("3820: Ignore? ");
        
        while (getKeyboardKey()!='y')
   2472b:	e8 b5 cb fe ff       	call   112e5 <getKeyboardKey>
   24730:	3c 79                	cmp    al,0x79
   24732:	75 f6                	jne    2472a <kernel_main+0x30f>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:260
        {__asm("hlt\n");}
    }
    __asm__ ("mov eax,%0\n push eax\n pop esp\n"::"r" (STACK_BASE_ADDRESS):"eax");
   24734:	ba e0 ff 99 00       	mov    edx,0x99ffe0
   24739:	89 d0                	mov    eax,edx
   2473b:	50                   	push   eax
   2473c:	5c                   	pop    esp
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:261
    detect_cpu();
   2473d:	e8 da e6 ff ff       	call   22e1c <detect_cpu>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:262
    printk("CPU: Detected CPU: %s\n", kcpuInfo.brand_name);
   24742:	83 ec 08             	sub    esp,0x8
   24745:	68 72 01 a0 00       	push   0xa00172
   2474a:	68 18 4b 08 00       	push   0x84b18
   2474f:	e8 df 28 00 00       	call   27033 <printk>
   24754:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:263
    identifyCPUFeatures(&kCPUFeatures);
   24757:	83 ec 0c             	sub    esp,0xc
   2475a:	68 44 03 a0 00       	push   0xa00344
   2475f:	e8 80 42 ff ff       	call   189e4 <identifyCPUFeatures>
   24764:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:264
    if (apicCheckFor())
   24767:	e8 66 3d ff ff       	call   184d2 <apicCheckFor>
   2476c:	84 c0                	test   al,al
   2476e:	0f 84 ad 00 00 00    	je     24821 <kernel_main+0x406>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:266
    {
        kCPU[0].apicID=apciGetAPICID(0);
   24774:	83 ec 0c             	sub    esp,0xc
   24777:	6a 00                	push   0x0
   24779:	e8 ad 3d ff ff       	call   1852b <apciGetAPICID>
   2477e:	83 c4 10             	add    esp,0x10
   24781:	0f b6 c0             	movzx  eax,al
   24784:	a3 60 03 a0 00       	mov    ds:0xa00360,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:267
        kCPU[0].registerBase=apicGetAPICBase();
   24789:	e8 b2 3d ff ff       	call   18540 <apicGetAPICBase>
   2478e:	a3 64 03 a0 00       	mov    ds:0xa00364,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:268
        kCPU[0].ticksPerSecond=apicGetHZ();
   24793:	e8 ed 3e ff ff       	call   18685 <apicGetHZ>
   24798:	ba 00 00 00 00       	mov    edx,0x0
   2479d:	a3 68 03 a0 00       	mov    ds:0xa00368,eax
   247a2:	89 15 6c 03 a0 00    	mov    DWORD PTR ds:0xa0036c,edx
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:270
        //IRQ_set_mask(0);
        printk("APIC: %s APIC %u Found, address %08X, initializing ... ", acpiGetAPICVersion()==0?"Discrete":"Integrated", kCPU[0].apicID, kCPU[0].registerBase);
   247a8:	8b 35 64 03 a0 00    	mov    esi,DWORD PTR ds:0xa00364
   247ae:	8b 1d 60 03 a0 00    	mov    ebx,DWORD PTR ds:0xa00360
   247b4:	e8 5d 3d ff ff       	call   18516 <acpiGetAPICVersion>
   247b9:	84 c0                	test   al,al
   247bb:	75 07                	jne    247c4 <kernel_main+0x3a9>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:270 (discriminator 1)
   247bd:	b8 2f 4b 08 00       	mov    eax,0x84b2f
   247c2:	eb 05                	jmp    247c9 <kernel_main+0x3ae>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:270 (discriminator 2)
   247c4:	b8 38 4b 08 00       	mov    eax,0x84b38
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:270 (discriminator 4)
   247c9:	56                   	push   esi
   247ca:	53                   	push   ebx
   247cb:	50                   	push   eax
   247cc:	68 44 4b 08 00       	push   0x84b44
   247d1:	e8 5d 28 00 00       	call   27033 <printk>
   247d6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:271 (discriminator 4)
        if (apicIsEnabled())
   247d9:	e8 0f 3e ff ff       	call   185ed <apicIsEnabled>
   247de:	84 c0                	test   al,al
   247e0:	74 10                	je     247f2 <kernel_main+0x3d7>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:272
            printk("enabled ... ");
   247e2:	83 ec 0c             	sub    esp,0xc
   247e5:	68 7c 4b 08 00       	push   0x84b7c
   247ea:	e8 44 28 00 00       	call   27033 <printk>
   247ef:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:273
        printk("done\n");
   247f2:	83 ec 0c             	sub    esp,0xc
   247f5:	68 10 4a 08 00       	push   0x84a10
   247fa:	e8 34 28 00 00       	call   27033 <printk>
   247ff:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:274
        printk("APIC: Timer running at %u hz.\n",kCPU[0].ticksPerSecond);
   24802:	a1 68 03 a0 00       	mov    eax,ds:0xa00368
   24807:	8b 15 6c 03 a0 00    	mov    edx,DWORD PTR ds:0xa0036c
   2480d:	83 ec 04             	sub    esp,0x4
   24810:	52                   	push   edx
   24811:	50                   	push   eax
   24812:	68 8c 4b 08 00       	push   0x84b8c
   24817:	e8 17 28 00 00       	call   27033 <printk>
   2481c:	83 c4 10             	add    esp,0x10
   2481f:	eb 10                	jmp    24831 <kernel_main+0x416>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:277
    }
    else
        printk("APIC: not found\n");
   24821:	83 ec 0c             	sub    esp,0xc
   24824:	68 ab 4b 08 00       	push   0x84bab
   24829:	e8 05 28 00 00       	call   27033 <printk>
   2482e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:278
    printk("TSC: ticks per 10 = %u\n", tscGetTicksPerSecond());
   24831:	e8 45 3f ff ff       	call   1877b <tscGetTicksPerSecond>
   24836:	83 ec 08             	sub    esp,0x8
   24839:	50                   	push   eax
   2483a:	68 bc 4b 08 00       	push   0x84bbc
   2483f:	e8 ef 27 00 00       	call   27033 <printk>
   24844:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:280
#ifndef DISABLE_PAGING
    kCPU[0].registerBase=apicGetAPICBase();
   24847:	e8 f4 3c ff ff       	call   18540 <apicGetAPICBase>
   2484c:	a3 64 03 a0 00       	mov    ds:0xa00364,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:281
    printk("PAGING: enabling 4k paging\n");
   24851:	83 ec 0c             	sub    esp,0xc
   24854:	68 d4 4b 08 00       	push   0x84bd4
   24859:	e8 d5 27 00 00       	call   27033 <printk>
   2485e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:282
    initializeKernelPaging();
   24861:	e8 72 02 00 00       	call   24ad8 <initializeKernelPaging>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:283
    printk("PAGING: remapping APIC from 0x%08X to 0x%08X\n", kCPU[0].registerBase, kAPICRegisterRemapAddress);
   24866:	8b 15 30 03 a0 00    	mov    edx,DWORD PTR ds:0xa00330
   2486c:	a1 64 03 a0 00       	mov    eax,ds:0xa00364
   24871:	83 ec 04             	sub    esp,0x4
   24874:	52                   	push   edx
   24875:	50                   	push   eax
   24876:	68 f0 4b 08 00       	push   0x84bf0
   2487b:	e8 b3 27 00 00       	call   27033 <printk>
   24880:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:285
    //map APIC address 0xFEE00000 to 0x825000
    kMapPage(kAPICRegisterRemapAddress, kCPU[0].registerBase,0x13);  //0x63 + cache disabled
   24883:	8b 15 64 03 a0 00    	mov    edx,DWORD PTR ds:0xa00364
   24889:	a1 30 03 a0 00       	mov    eax,ds:0xa00330
   2488e:	83 ec 04             	sub    esp,0x4
   24891:	6a 13                	push   0x13
   24893:	52                   	push   edx
   24894:	50                   	push   eax
   24895:	e8 9d ce fe ff       	call   11737 <kMapPage>
   2489a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:286
    printk("PAGING: Kernel paged base: 0x%08X\n",KERNEL_PAGED_BASE_ADDRESS);
   2489d:	83 ec 08             	sub    esp,0x8
   248a0:	68 00 00 00 c0       	push   0xc0000000
   248a5:	68 20 4c 08 00       	push   0x84c20
   248aa:	e8 84 27 00 00       	call   27033 <printk>
   248af:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:287
    printk("PAGING: Making page @ 0x00000000 read only\n");
   248b2:	83 ec 0c             	sub    esp,0xc
   248b5:	68 44 4c 08 00       	push   0x84c44
   248ba:	e8 74 27 00 00       	call   27033 <printk>
   248bf:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:288
    kSetPhysicalRangeRO(0x0,0xFFF,true);
   248c2:	83 ec 04             	sub    esp,0x4
   248c5:	6a 01                	push   0x1
   248c7:	68 ff 0f 00 00       	push   0xfff
   248cc:	6a 00                	push   0x0
   248ce:	e8 f3 d1 fe ff       	call   11ac6 <kSetPhysicalRangeRO>
   248d3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:289
    printk("PAGING: Testing whether CPU honors WP flag ... ");
   248d6:	83 ec 0c             	sub    esp,0xc
   248d9:	68 70 4c 08 00       	push   0x84c70
   248de:	e8 50 27 00 00       	call   27033 <printk>
   248e3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:290
  __asm__("cli\n");
   248e6:	fa                   	cli    
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:291
  __asm__("mov %0,[0x0]\n":"=r" (kOriginalAddressZeroValue));
   248e7:	a1 00 00 00 00       	mov    eax,ds:0x0
   248ec:	a3 e4 03 a0 00       	mov    ds:0xa003e4,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:292
  __asm__("mov eax,0xdeadbeef\n mov [0x0],eax\n");    //purposely read address 0 which we made "read only"
   248f1:	b8 ef be ad de       	mov    eax,0xdeadbeef
   248f6:	a3 00 00 00 00       	mov    ds:0x0,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:293
    printk("works\n");
   248fb:	83 ec 0c             	sub    esp,0xc
   248fe:	68 a0 4c 08 00       	push   0x84ca0
   24903:	e8 2b 27 00 00       	call   27033 <printk>
   24908:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:294
    kSetPhysicalRangeRO(0x0,0xFFF,true);
   2490b:	83 ec 04             	sub    esp,0x4
   2490e:	6a 01                	push   0x1
   24910:	68 ff 0f 00 00       	push   0xfff
   24915:	6a 00                	push   0x0
   24917:	e8 aa d1 fe ff       	call   11ac6 <kSetPhysicalRangeRO>
   2491c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:295
    kPagingInitDone=true;
   2491f:	c6 05 a1 02 a0 00 01 	mov    BYTE PTR ds:0xa002a1,0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:297
#endif
    printk("CLOCK: tick frequency is %uhz\n",kTicksPerSecond);
   24926:	a1 80 02 a0 00       	mov    eax,ds:0xa00280
   2492b:	83 ec 08             	sub    esp,0x8
   2492e:	50                   	push   eax
   2492f:	68 a8 4c 08 00       	push   0x84ca8
   24934:	e8 fa 26 00 00       	call   27033 <printk>
   24939:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:298
    printk("CLOCK: testing ... "); wait(100); printk("works\n");
   2493c:	83 ec 0c             	sub    esp,0xc
   2493f:	68 c7 4c 08 00       	push   0x84cc7
   24944:	e8 ea 26 00 00       	call   27033 <printk>
   24949:	83 c4 10             	add    esp,0x10
   2494c:	83 ec 0c             	sub    esp,0xc
   2494f:	6a 64                	push   0x64
   24951:	e8 1c 39 00 00       	call   28272 <wait>
   24956:	83 c4 10             	add    esp,0x10
   24959:	83 ec 0c             	sub    esp,0xc
   2495c:	68 a0 4c 08 00       	push   0x84ca0
   24961:	e8 cd 26 00 00       	call   27033 <printk>
   24966:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:301

#ifdef __SMP__
    if (ParamExists(kBootParams,"nosmp",kBootParamCount))
   24969:	a1 c0 8f 09 00       	mov    eax,ds:0x98fc0
   2496e:	83 ec 04             	sub    esp,0x4
   24971:	50                   	push   eax
   24972:	68 db 4c 08 00       	push   0x84cdb
   24977:	68 e0 8f 09 00       	push   0x98fe0
   2497c:	e8 4e fa ff ff       	call   243cf <ParamExists>
   24981:	83 c4 10             	add    esp,0x10
   24984:	84 c0                	test   al,al
   24986:	74 12                	je     2499a <kernel_main+0x57f>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:302
        printk("SMP: No AP processor startup per 'nosmp' parameter\n");
   24988:	83 ec 0c             	sub    esp,0xc
   2498b:	68 e4 4c 08 00       	push   0x84ce4
   24990:	e8 9e 26 00 00       	call   27033 <printk>
   24995:	83 c4 10             	add    esp,0x10
   24998:	eb 77                	jmp    24a11 <kernel_main+0x5f6>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:305
    else
    {
        printk("SMP: Initializing, ");
   2499a:	83 ec 0c             	sub    esp,0xc
   2499d:	68 18 4d 08 00       	push   0x84d18
   249a2:	e8 8c 26 00 00       	call   27033 <printk>
   249a7:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:306
        printk("%u MP records parsed\n",mpInit());
   249aa:	e8 40 56 ff ff       	call   19fef <mpInit>
   249af:	83 ec 08             	sub    esp,0x8
   249b2:	50                   	push   eax
   249b3:	68 2c 4d 08 00       	push   0x84d2c
   249b8:	e8 76 26 00 00       	call   27033 <printk>
   249bd:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:308
        //cursorUpdateBiosCursor();
        printk("SMP: Starting up AP processors\n");
   249c0:	83 ec 0c             	sub    esp,0xc
   249c3:	68 44 4d 08 00       	push   0x84d44
   249c8:	e8 66 26 00 00       	call   27033 <printk>
   249cd:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:309
        AP_startup();
   249d0:	e8 e1 cb fd ff       	call   15b6 <AP_startup>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:310
        wait(500);
   249d5:	83 ec 0c             	sub    esp,0xc
   249d8:	68 f4 01 00 00       	push   0x1f4
   249dd:	e8 90 38 00 00       	call   28272 <wait>
   249e2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:311
        printk("SMP: CPUs 2 thru %u (of %u total) started... done\n",smpBootCPUsStarted+1, smpBootCPUCount+1);
   249e5:	0f b6 05 9a 15 00 00 	movzx  eax,BYTE PTR ds:0x159a
   249ec:	0f b6 c0             	movzx  eax,al
   249ef:	8d 50 01             	lea    edx,[eax+0x1]
   249f2:	0f b6 05 9c 15 00 00 	movzx  eax,BYTE PTR ds:0x159c
   249f9:	0f b6 c0             	movzx  eax,al
   249fc:	83 c0 01             	add    eax,0x1
   249ff:	83 ec 04             	sub    esp,0x4
   24a02:	52                   	push   edx
   24a03:	50                   	push   eax
   24a04:	68 64 4d 08 00       	push   0x84d64
   24a09:	e8 25 26 00 00       	call   27033 <printk>
   24a0e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:316
        //if (kIOAPICPtr)
        //    kMapPage(CPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS, (uintptr_t)kIOAPICPtr, 0x13);
    }
#endif
    if (ParamExists(kBootParams,"nopci",kBootParamCount))
   24a11:	a1 c0 8f 09 00       	mov    eax,ds:0x98fc0
   24a16:	83 ec 04             	sub    esp,0x4
   24a19:	50                   	push   eax
   24a1a:	68 97 4d 08 00       	push   0x84d97
   24a1f:	68 e0 8f 09 00       	push   0x98fe0
   24a24:	e8 a6 f9 ff ff       	call   243cf <ParamExists>
   24a29:	83 c4 10             	add    esp,0x10
   24a2c:	84 c0                	test   al,al
   24a2e:	74 12                	je     24a42 <kernel_main+0x627>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:317
        printk("PCI: No scanning per parameter 'nopci'\n");
   24a30:	83 ec 0c             	sub    esp,0xc
   24a33:	68 a0 4d 08 00       	push   0x84da0
   24a38:	e8 f6 25 00 00       	call   27033 <printk>
   24a3d:	83 c4 10             	add    esp,0x10
   24a40:	eb 6e                	jmp    24ab0 <kernel_main+0x695>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:320
    else
    {
        printk("PCI: initializing ...");
   24a42:	83 ec 0c             	sub    esp,0xc
   24a45:	68 c8 4d 08 00       	push   0x84dc8
   24a4a:	e8 e4 25 00 00       	call   27033 <printk>
   24a4f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:321
        pciInitialize();
   24a52:	e8 1e 2d ff ff       	call   17775 <pciInitialize>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:322
        printk(" found %u %s, %u devices (%u bridges)\n",kPCIBusCount, kPCIBusCount<=1?"bus":"busses", kPCIDeviceCount, kPCIBridgeCount);
   24a57:	0f b6 05 ad 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002ad
   24a5e:	0f b6 c8             	movzx  ecx,al
   24a61:	0f b6 05 ac 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002ac
   24a68:	0f b6 d0             	movzx  edx,al
   24a6b:	0f b6 05 af 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002af
   24a72:	3c 01                	cmp    al,0x1
   24a74:	77 07                	ja     24a7d <kernel_main+0x662>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:322 (discriminator 1)
   24a76:	bb de 4d 08 00       	mov    ebx,0x84dde
   24a7b:	eb 05                	jmp    24a82 <kernel_main+0x667>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:322 (discriminator 2)
   24a7d:	bb e2 4d 08 00       	mov    ebx,0x84de2
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:322 (discriminator 4)
   24a82:	0f b6 05 af 02 a0 00 	movzx  eax,BYTE PTR ds:0xa002af
   24a89:	0f b6 c0             	movzx  eax,al
   24a8c:	83 ec 0c             	sub    esp,0xc
   24a8f:	51                   	push   ecx
   24a90:	52                   	push   edx
   24a91:	53                   	push   ebx
   24a92:	50                   	push   eax
   24a93:	68 ec 4d 08 00       	push   0x84dec
   24a98:	e8 96 25 00 00       	call   27033 <printk>
   24a9d:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:323 (discriminator 4)
        printk("PCI: initialization complete ...\n");
   24aa0:	83 ec 0c             	sub    esp,0xc
   24aa3:	68 14 4e 08 00       	push   0x84e14
   24aa8:	e8 86 25 00 00       	call   27033 <printk>
   24aad:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:325
    }
    doHDSetup();
   24ab0:	e8 8b f2 ff ff       	call   23d40 <doHDSetup>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:326
kInitDone = true;
   24ab5:	c6 05 a0 02 a0 00 01 	mov    BYTE PTR ds:0xa002a0,0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:327
    goto overStuff; /*******************************************/
   24abc:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:379 (discriminator 1)
        //kpagingUpdatePresentFlagA(0x0,false);
//    __asm__("mov eax,0xdeadbead\n mov [0x0100],eax\n");    //purposely read address 0 which we made "read only"
        
//        terminal_clear();
MAINLOOPv:
        __asm__("nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n");
   24abd:	90                   	nop
   24abe:	90                   	nop
   24abf:	90                   	nop
   24ac0:	90                   	nop
   24ac1:	90                   	nop
   24ac2:	90                   	nop
   24ac3:	90                   	nop
   24ac4:	90                   	nop
   24ac5:	90                   	nop
   24ac6:	90                   	nop
   24ac7:	90                   	nop
   24ac8:	90                   	nop
   24ac9:	90                   	nop
   24aca:	90                   	nop
   24acb:	90                   	nop
   24acc:	90                   	nop
   24acd:	90                   	nop
   24ace:	90                   	nop
   24acf:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:383 (discriminator 1)
//    char a[255];
//    gets(a,255);
//    if (!strncmp(a,"debug",5))
        biShell();
   24ad0:	e8 8a e8 fe ff       	call   1335f <biShell>
/home/yogi/NetBeansProjects/chrisOS/src/init/init.c:387 (discriminator 1)
//    if (a>0)
//        printk("%c",a);
//    __asm__("hlt\n");
    goto MAINLOOPv;
   24ad5:	eb e6                	jmp    24abd <kernel_main+0x6a2>
   24ad7:	90                   	nop

00024ad8 <initializeKernelPaging>:
initializeKernelPaging():
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:12
extern uint32_t kDebugLevel;
extern struct idt_entry kInitialIDT[0x30];
extern struct idt_ptr kInitialIDTReg;

void initializeKernelPaging()
{
   24ad8:	55                   	push   ebp
   24ad9:	89 e5                	mov    ebp,esp
   24adb:	83 ec 38             	sub    esp,0x38
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:17
        uint32_t *ptr;
        uint32_t *ptrT;
        uint32_t *ptr2;
        uint32_t *kKernelPageTables;
        uint16_t tempEntries = (0xFFFFFFFF/0x400000)+1;  //Map entire 4GB memory space 
   24ade:	66 c7 45 e6 00 04    	mov    WORD PTR [ebp-0x1a],0x400
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:20

       
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Entering setupKernelPaging module\n");
   24ae4:	83 ec 08             	sub    esp,0x8
   24ae7:	68 38 4e 08 00       	push   0x84e38
   24aec:	6a 20                	push   0x20
   24aee:	e8 60 25 00 00       	call   27053 <printd>
   24af3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:21
        ptr=(uint32_t*)kKernelPageDir;
   24af6:	a1 a4 02 a0 00       	mov    eax,ds:0xa002a4
   24afb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:22
        ptrT=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
   24afe:	c7 45 f4 00 f0 16 00 	mov    DWORD PTR [ebp-0xc],0x16f000
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:23
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Page directory at 0x%08X, table at 0x%08x\n", ptr, ptrT);
   24b05:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   24b08:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   24b0b:	68 6c 4e 08 00       	push   0x84e6c
   24b10:	6a 20                	push   0x20
   24b12:	e8 3c 25 00 00       	call   27053 <printd>
   24b17:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:24
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: (0x%04X page directory entries)\n", tempEntries);
   24b1a:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   24b1e:	83 ec 04             	sub    esp,0x4
   24b21:	50                   	push   eax
   24b22:	68 a8 4e 08 00       	push   0x84ea8
   24b27:	6a 20                	push   0x20
   24b29:	e8 25 25 00 00       	call   27053 <printd>
   24b2e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:25
        for (uint32_t cnt=0;cnt < tempEntries; cnt++)
   24b31:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   24b38:	eb 65                	jmp    24b9f <initializeKernelPaging+0xc7>
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:27
        {
                ptr[cnt] = (KERNEL_PAGE_TABLE_BASE_ADDRESS + (cnt*4096)) | 0x3;
   24b3a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   24b3d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   24b44:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   24b47:	01 d0                	add    eax,edx
   24b49:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   24b4c:	81 c2 6f 01 00 00    	add    edx,0x16f
   24b52:	c1 e2 0c             	shl    edx,0xc
   24b55:	83 ca 03             	or     edx,0x3
   24b58:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:29
                //Create a guest page table for each Page Directory
                for (int cnt2=0;cnt2<1024;cnt2++)
   24b5a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   24b61:	eb 28                	jmp    24b8b <initializeKernelPaging+0xb3>
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:31 (discriminator 3)
                {
                    ptrT[cnt2] = ((0x400000 * cnt)  + ((cnt2) << 12)) | 0x3;
   24b63:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   24b66:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   24b6d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   24b70:	01 d0                	add    eax,edx
   24b72:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   24b75:	89 d1                	mov    ecx,edx
   24b77:	c1 e1 16             	shl    ecx,0x16
   24b7a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   24b7d:	c1 e2 0c             	shl    edx,0xc
   24b80:	01 ca                	add    edx,ecx
   24b82:	83 ca 03             	or     edx,0x3
   24b85:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:29 (discriminator 3)
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: (0x%04X page directory entries)\n", tempEntries);
        for (uint32_t cnt=0;cnt < tempEntries; cnt++)
        {
                ptr[cnt] = (KERNEL_PAGE_TABLE_BASE_ADDRESS + (cnt*4096)) | 0x3;
                //Create a guest page table for each Page Directory
                for (int cnt2=0;cnt2<1024;cnt2++)
   24b87:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:29 (discriminator 1)
   24b8b:	81 7d ec ff 03 00 00 	cmp    DWORD PTR [ebp-0x14],0x3ff
   24b92:	7e cf                	jle    24b63 <initializeKernelPaging+0x8b>
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:33 (discriminator 2)
                {
                    ptrT[cnt2] = ((0x400000 * cnt)  + ((cnt2) << 12)) | 0x3;
                }
                ptrT += 0x400;
   24b94:	81 45 f4 00 10 00 00 	add    DWORD PTR [ebp-0xc],0x1000
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:25 (discriminator 2)
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Entering setupKernelPaging module\n");
        ptr=(uint32_t*)kKernelPageDir;
        ptrT=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Page directory at 0x%08X, table at 0x%08x\n", ptr, ptrT);
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: (0x%04X page directory entries)\n", tempEntries);
        for (uint32_t cnt=0;cnt < tempEntries; cnt++)
   24b9b:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:25 (discriminator 1)
   24b9f:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   24ba3:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   24ba6:	77 92                	ja     24b3a <initializeKernelPaging+0x62>
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:35
                {
                    ptrT[cnt2] = ((0x400000 * cnt)  + ((cnt2) << 12)) | 0x3;
                }
                ptrT += 0x400;
        }
        uint32_t pageDirEntrySize = 0x400000;
   24ba8:	c7 45 dc 00 00 40 00 	mov    DWORD PTR [ebp-0x24],0x400000
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:36
        ptr2=(void*)KERNEL_PAGE_DIR_ADDRESS + (KERNEL_PAGED_BASE_ADDRESS / 0x400000)*4; //(((uint32_t)KERNEL_PAGED_BASE_ADDRESS / (uint32_t)0x400000) * 4);
   24baf:	c7 45 d8 00 dc 15 00 	mov    DWORD PTR [ebp-0x28],0x15dc00
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:37
        kKernelPageTables=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
   24bb6:	c7 45 d4 00 f0 16 00 	mov    DWORD PTR [ebp-0x2c],0x16f000
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:39
        //Initialize Kernel Page Directory
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Kernel page dir at 0x%08X, table at 0x%08x\n", ptr2, kKernelPageTables);
   24bbd:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   24bc0:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
   24bc3:	68 d8 4e 08 00       	push   0x84ed8
   24bc8:	6a 20                	push   0x20
   24bca:	e8 84 24 00 00       	call   27053 <printd>
   24bcf:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:40
        uint32_t pageDirEntryCount= 0x40;   //Map C0000000-CFFFFFFF=00000000-0FFFFFFF 
   24bd2:	c7 45 d0 40 00 00 00 	mov    DWORD PTR [ebp-0x30],0x40
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:41
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: 0x%08X entries\n", pageDirEntryCount);
   24bd9:	83 ec 04             	sub    esp,0x4
   24bdc:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   24bdf:	68 14 4f 08 00       	push   0x84f14
   24be4:	6a 20                	push   0x20
   24be6:	e8 68 24 00 00       	call   27053 <printd>
   24beb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:42
        for (uint32_t cnt=0;cnt <= pageDirEntryCount; cnt++)
   24bee:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   24bf5:	eb 24                	jmp    24c1b <initializeKernelPaging+0x143>
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:44 (discriminator 3)
        {
                ptr2[cnt] = (KERNEL_PAGE_TABLE_BASE_ADDRESS + (cnt*4096)) | 0x3;
   24bf7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   24bfa:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   24c01:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   24c04:	01 d0                	add    eax,edx
   24c06:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   24c09:	81 c2 6f 01 00 00    	add    edx,0x16f
   24c0f:	c1 e2 0c             	shl    edx,0xc
   24c12:	83 ca 03             	or     edx,0x3
   24c15:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:42 (discriminator 3)
        kKernelPageTables=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
        //Initialize Kernel Page Directory
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Kernel page dir at 0x%08X, table at 0x%08x\n", ptr2, kKernelPageTables);
        uint32_t pageDirEntryCount= 0x40;   //Map C0000000-CFFFFFFF=00000000-0FFFFFFF 
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: 0x%08X entries\n", pageDirEntryCount);
        for (uint32_t cnt=0;cnt <= pageDirEntryCount; cnt++)
   24c17:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:42 (discriminator 1)
   24c1b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   24c1e:	3b 45 d0             	cmp    eax,DWORD PTR [ebp-0x30]
   24c21:	76 d4                	jbe    24bf7 <initializeKernelPaging+0x11f>
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:46
        {
                ptr2[cnt] = (KERNEL_PAGE_TABLE_BASE_ADDRESS + (cnt*4096)) | 0x3;
        }
        __asm__("mov cr3,%0\n":: "a" (KERNEL_PAGE_DIR_ADDRESS));
   24c23:	b8 00 d0 15 00       	mov    eax,0x15d000
   24c28:	0f 22 d8             	mov    cr3,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:47
       __asm__("mov eax,cr0\n or eax,0x80000000\n mov cr0,eax\n");
   24c2b:	0f 20 c0             	mov    eax,cr0
   24c2e:	0d 00 00 00 80       	or     eax,0x80000000
   24c33:	0f 22 c0             	mov    cr0,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:56
/*BEFORE:
 0 - blank
 1 (0x08) - code @ 0x0
 2 (0x10) - data @ 0x0
*/
       gdtEntry(1, KERNEL_PAGED_BASE_ADDRESS, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,
   24c36:	83 ec 08             	sub    esp,0x8
   24c39:	6a 01                	push   0x1
   24c3b:	6a c0                	push   0xffffffc0
   24c3d:	6a 88                	push   0xffffff88
   24c3f:	68 ff ff 0f 00       	push   0xfffff
   24c44:	68 00 00 00 c0       	push   0xc0000000
   24c49:	6a 01                	push   0x1
   24c4b:	e8 24 3c ff ff       	call   18874 <gdtEntry>
   24c50:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:58
                  GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(2, KERNEL_PAGED_BASE_ADDRESS, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE,
   24c53:	83 ec 08             	sub    esp,0x8
   24c56:	6a 01                	push   0x1
   24c58:	6a c0                	push   0xffffffc0
   24c5a:	6a 82                	push   0xffffff82
   24c5c:	68 ff ff 0f 00       	push   0xfffff
   24c61:	68 00 00 00 c0       	push   0xc0000000
   24c66:	6a 02                	push   0x2
   24c68:	e8 07 3c ff ff       	call   18874 <gdtEntry>
   24c6d:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:67
 1 (0x08) - code @ 0xC0000000
 2 (0x10) - data @ 0xC0000000
*/

        struct gdt_ptr gdtp;
        gdtp.limit = sizeof(struct GDT) * GDT_ENTRIES - 1;
   24c70:	66 c7 45 ca 8f 01    	mov    WORD PTR [ebp-0x36],0x18f
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:68
        gdtp.base = (unsigned int)INIT_GDT_TABLE_ADDRESS;
   24c76:	c7 45 cc 00 50 10 00 	mov    DWORD PTR [ebp-0x34],0x105000
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:69
        set_gdt(&gdtp);
   24c7d:	83 ec 0c             	sub    esp,0xc
   24c80:	8d 45 ca             	lea    eax,[ebp-0x36]
   24c83:	50                   	push   eax
   24c84:	e8 b4 c4 fd ff       	call   113d <set_gdt>
   24c89:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:70
        idt_init(&kInitialIDTReg, PIC_REMAP_OFFSET);
   24c8c:	83 ec 08             	sub    esp,0x8
   24c8f:	6a 20                	push   0x20
   24c91:	68 e0 a3 09 00       	push   0x9a3e0
   24c96:	e8 2d 3e ff ff       	call   18ac8 <idt_init>
   24c9b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:71
        doPagingJump();
   24c9e:	e8 84 c6 fd ff       	call   1327 <doPagingJump>
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:75

    
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING_CONFIG) == DEBUG_PAGING_CONFIG)
   24ca3:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   24ca8:	83 e0 20             	and    eax,0x20
   24cab:	85 c0                	test   eax,eax
   24cad:	74 15                	je     24cc4 <initializeKernelPaging+0x1ec>
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:76
            printk("Clearing up temporary low page entries at 0x%08X\n", KERNEL_TEMP_LOW_PAGE_TABLE_BASE_ADDRESS);
   24caf:	83 ec 08             	sub    esp,0x8
   24cb2:	68 00 00 09 05       	push   0x5090000
   24cb7:	68 34 4f 08 00       	push   0x84f34
   24cbc:	e8 72 23 00 00       	call   27033 <printk>
   24cc1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:80
#endif
        //Now that we've fixed our IDT, lets restart interrupts!
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING_CONFIG) == DEBUG_PAGING_CONFIG)
   24cc4:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   24cc9:	83 e0 20             	and    eax,0x20
   24ccc:	85 c0                	test   eax,eax
   24cce:	74 10                	je     24ce0 <initializeKernelPaging+0x208>
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:81
            printk("Exiting setupKernelPaging module\n");
   24cd0:	83 ec 0c             	sub    esp,0xc
   24cd3:	68 68 4f 08 00       	push   0x84f68
   24cd8:	e8 56 23 00 00       	call   27033 <printk>
   24cdd:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/initPaging.c:83
#endif
}
   24ce0:	90                   	nop
   24ce1:	c9                   	leave  
   24ce2:	c3                   	ret    
   24ce3:	90                   	nop

00024ce4 <outb>:
outb():
/home/yogi/NetBeansProjects/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   24ce4:	55                   	push   ebp
   24ce5:	89 e5                	mov    ebp,esp
   24ce7:	83 ec 08             	sub    esp,0x8
   24cea:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   24ced:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24cf0:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   24cf4:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/NetBeansProjects/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   24cf7:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   24cfb:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   24cff:	ee                   	out    dx,al
/home/yogi/NetBeansProjects/chrisOS/include/io.h:24
}
   24d00:	90                   	nop
   24d01:	c9                   	leave  
   24d02:	c3                   	ret    

00024d03 <inb>:
inb():
/home/yogi/NetBeansProjects/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   24d03:	55                   	push   ebp
   24d04:	89 e5                	mov    ebp,esp
   24d06:	83 ec 14             	sub    esp,0x14
   24d09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24d0c:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/NetBeansProjects/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   24d10:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   24d14:	89 c2                	mov    edx,eax
   24d16:	ec                   	in     al,dx
   24d17:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/NetBeansProjects/chrisOS/include/io.h:40
	return __val;
   24d1a:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/NetBeansProjects/chrisOS/include/io.h:41
}
   24d1e:	c9                   	leave  
   24d1f:	c3                   	ret    

00024d20 <reverse>:
reverse():
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:29
//#include <string.h>

/* reverse:  reverse string s in place */
extern int strlen(char*);
 void reverse(char s[])
 {
   24d20:	55                   	push   ebp
   24d21:	89 e5                	mov    ebp,esp
   24d23:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:33
     int i, j;
     char c;

     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
   24d26:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   24d2d:	83 ec 0c             	sub    esp,0xc
   24d30:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   24d33:	e8 cc 24 00 00       	call   27204 <strlen>
   24d38:	83 c4 10             	add    esp,0x10
   24d3b:	83 e8 01             	sub    eax,0x1
   24d3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   24d41:	eb 39                	jmp    24d7c <reverse+0x5c>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:34 (discriminator 3)
         c = s[i];
   24d43:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   24d46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24d49:	01 d0                	add    eax,edx
   24d4b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   24d4e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:35 (discriminator 3)
         s[i] = s[j];
   24d51:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   24d54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24d57:	01 c2                	add    edx,eax
   24d59:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   24d5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24d5f:	01 c8                	add    eax,ecx
   24d61:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   24d64:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:36 (discriminator 3)
         s[j] = c;
   24d66:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   24d69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24d6c:	01 c2                	add    edx,eax
   24d6e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   24d72:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:33 (discriminator 3)
 void reverse(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
   24d74:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
   24d78:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:33 (discriminator 1)
   24d7c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   24d7f:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   24d82:	7c bf                	jl     24d43 <reverse+0x23>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:38
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
   24d84:	90                   	nop
   24d85:	c9                   	leave  
   24d86:	c3                   	ret    

00024d87 <itoa>:
itoa():
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:40
 void itoa(int n, char s[])
 {
   24d87:	55                   	push   ebp
   24d88:	89 e5                	mov    ebp,esp
   24d8a:	53                   	push   ebx
   24d8b:	83 ec 14             	sub    esp,0x14
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:43
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
   24d8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24d91:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   24d94:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   24d98:	79 03                	jns    24d9d <itoa+0x16>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:44
         n = -n;          /* make n positive */
   24d9a:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:45
     i = 0;
   24d9d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:47 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
   24da4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   24da7:	8d 50 01             	lea    edx,[eax+0x1]
   24daa:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   24dad:	89 c2                	mov    edx,eax
   24daf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24db2:	8d 1c 02             	lea    ebx,[edx+eax*1]
   24db5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   24db8:	ba 67 66 66 66       	mov    edx,0x66666667
   24dbd:	89 c8                	mov    eax,ecx
   24dbf:	f7 ea                	imul   edx
   24dc1:	c1 fa 02             	sar    edx,0x2
   24dc4:	89 c8                	mov    eax,ecx
   24dc6:	c1 f8 1f             	sar    eax,0x1f
   24dc9:	29 c2                	sub    edx,eax
   24dcb:	89 d0                	mov    eax,edx
   24dcd:	c1 e0 02             	shl    eax,0x2
   24dd0:	01 d0                	add    eax,edx
   24dd2:	01 c0                	add    eax,eax
   24dd4:	29 c1                	sub    ecx,eax
   24dd6:	89 ca                	mov    edx,ecx
   24dd8:	89 d0                	mov    eax,edx
   24dda:	83 c0 30             	add    eax,0x30
   24ddd:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:48 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
   24ddf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   24de2:	ba 67 66 66 66       	mov    edx,0x66666667
   24de7:	89 c8                	mov    eax,ecx
   24de9:	f7 ea                	imul   edx
   24deb:	c1 fa 02             	sar    edx,0x2
   24dee:	89 c8                	mov    eax,ecx
   24df0:	c1 f8 1f             	sar    eax,0x1f
   24df3:	29 c2                	sub    edx,eax
   24df5:	89 d0                	mov    eax,edx
   24df7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
   24dfa:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   24dfe:	7f a4                	jg     24da4 <itoa+0x1d>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:49
     if (sign < 0)
   24e00:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   24e04:	79 13                	jns    24e19 <itoa+0x92>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:50
         s[i++] = '-';
   24e06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   24e09:	8d 50 01             	lea    edx,[eax+0x1]
   24e0c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   24e0f:	89 c2                	mov    edx,eax
   24e11:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24e14:	01 d0                	add    eax,edx
   24e16:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:51
     s[i] = '\0';
   24e19:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   24e1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24e1f:	01 d0                	add    eax,edx
   24e21:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:52
     reverse(s);
   24e24:	83 ec 0c             	sub    esp,0xc
   24e27:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   24e2a:	e8 f1 fe ff ff       	call   24d20 <reverse>
   24e2f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:53
 }
   24e32:	90                   	nop
   24e33:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   24e36:	c9                   	leave  
   24e37:	c3                   	ret    

00024e38 <itox>:
itox():
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:55
void itox(unsigned int i, char *s)
{
   24e38:	55                   	push   ebp
   24e39:	89 e5                	mov    ebp,esp
   24e3b:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:58
    unsigned char n;

    s += 4;
   24e3e:	83 45 0c 04          	add    DWORD PTR [ebp+0xc],0x4
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:59
    *s = '\0';
   24e42:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24e45:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:61

    for (n = 8; n != 0; --n) {
   24e48:	c6 45 ff 08          	mov    BYTE PTR [ebp-0x1],0x8
   24e4c:	eb 1e                	jmp    24e6c <itox+0x34>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:62 (discriminator 3)
        *--s = "0123456789ABCDEF"[i & 0x0F];
   24e4e:	83 6d 0c 01          	sub    DWORD PTR [ebp+0xc],0x1
   24e52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24e55:	83 e0 0f             	and    eax,0xf
   24e58:	0f b6 90 a0 50 08 00 	movzx  edx,BYTE PTR [eax+0x850a0]
   24e5f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24e62:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:63 (discriminator 3)
        i >>= 4;
   24e64:	c1 6d 08 04          	shr    DWORD PTR [ebp+0x8],0x4
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:61 (discriminator 3)
    unsigned char n;

    s += 4;
    *s = '\0';

    for (n = 8; n != 0; --n) {
   24e68:	80 6d ff 01          	sub    BYTE PTR [ebp-0x1],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:61 (discriminator 1)
   24e6c:	80 7d ff 00          	cmp    BYTE PTR [ebp-0x1],0x0
   24e70:	75 dc                	jne    24e4e <itox+0x16>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:65
        *--s = "0123456789ABCDEF"[i & 0x0F];
        i >>= 4;
    }
}
   24e72:	90                   	nop
   24e73:	c9                   	leave  
   24e74:	c3                   	ret    

00024e75 <atoi>:
atoi():
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:68
// A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
int atoi(char *str)
{
   24e75:	55                   	push   ebp
   24e76:	89 e5                	mov    ebp,esp
   24e78:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:69
    int res = 0; // Initialize result
   24e7b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:73
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
   24e82:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   24e89:	eb 28                	jmp    24eb3 <atoi+0x3e>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:74 (discriminator 3)
        res = res*10 + str[i] - '0';
   24e8b:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   24e8e:	89 d0                	mov    eax,edx
   24e90:	c1 e0 02             	shl    eax,0x2
   24e93:	01 d0                	add    eax,edx
   24e95:	01 c0                	add    eax,eax
   24e97:	89 c1                	mov    ecx,eax
   24e99:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   24e9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24e9f:	01 d0                	add    eax,edx
   24ea1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   24ea4:	0f be c0             	movsx  eax,al
   24ea7:	01 c8                	add    eax,ecx
   24ea9:	83 e8 30             	sub    eax,0x30
   24eac:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:73 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
   24eaf:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:73 (discriminator 1)
   24eb3:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   24eb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24eb9:	01 d0                	add    eax,edx
   24ebb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   24ebe:	84 c0                	test   al,al
   24ec0:	75 c9                	jne    24e8b <atoi+0x16>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:77
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
   24ec2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:78
}
   24ec5:	c9                   	leave  
   24ec6:	c3                   	ret    

00024ec7 <convert>:
convert():
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:81

int convert(int s)
{
   24ec7:	55                   	push   ebp
   24ec8:	89 e5                	mov    ebp,esp
   24eca:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:83
  int c;
  char hex[] = {'A', 'B', 'C', 'D', 'E', 'F'};
   24ecd:	c6 45 f6 41          	mov    BYTE PTR [ebp-0xa],0x41
   24ed1:	c6 45 f7 42          	mov    BYTE PTR [ebp-0x9],0x42
   24ed5:	c6 45 f8 43          	mov    BYTE PTR [ebp-0x8],0x43
   24ed9:	c6 45 f9 44          	mov    BYTE PTR [ebp-0x7],0x44
   24edd:	c6 45 fa 45          	mov    BYTE PTR [ebp-0x6],0x45
   24ee1:	c6 45 fb 46          	mov    BYTE PTR [ebp-0x5],0x46
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:84
  c = (s >= 0 && s < 9) ? s + '0' : hex[s - 10];
   24ee5:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   24ee9:	78 0e                	js     24ef9 <convert+0x32>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:84 (discriminator 1)
   24eeb:	83 7d 08 08          	cmp    DWORD PTR [ebp+0x8],0x8
   24eef:	7f 08                	jg     24ef9 <convert+0x32>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:84 (discriminator 3)
   24ef1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24ef4:	83 c0 30             	add    eax,0x30
   24ef7:	eb 0e                	jmp    24f07 <convert+0x40>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:84 (discriminator 4)
   24ef9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24efc:	83 e8 0a             	sub    eax,0xa
   24eff:	0f b6 44 05 f6       	movzx  eax,BYTE PTR [ebp+eax*1-0xa]
   24f04:	0f be c0             	movsx  eax,al
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:84 (discriminator 6)
   24f07:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:85 (discriminator 6)
  return c;
   24f0a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:86 (discriminator 6)
}
   24f0d:	c9                   	leave  
   24f0e:	c3                   	ret    

00024f0f <itoha>:
itoha():
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:89

void itoha(unsigned int n, char *buf)
{
   24f0f:	55                   	push   ebp
   24f10:	89 e5                	mov    ebp,esp
   24f12:	53                   	push   ebx
   24f13:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:90
  int i = 0, j =0;
   24f16:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   24f1d:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:91
  j=7;
   24f24:	c7 45 f8 07 00 00 00 	mov    DWORD PTR [ebp-0x8],0x7
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:92
  while(n != 0)
   24f2b:	eb 37                	jmp    24f64 <itoha+0x55>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:94
  {
    i = n % 16;
   24f2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24f30:	83 e0 0f             	and    eax,0xf
   24f33:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:95
      buf[j--] = convert(i);
   24f36:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   24f39:	8d 50 ff             	lea    edx,[eax-0x1]
   24f3c:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   24f3f:	89 c2                	mov    edx,eax
   24f41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24f44:	8d 1c 02             	lea    ebx,[edx+eax*1]
   24f47:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   24f4a:	e8 78 ff ff ff       	call   24ec7 <convert>
   24f4f:	83 c4 04             	add    esp,0x4
   24f52:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:96
      n = (n - i) / 16;
   24f54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   24f57:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   24f5a:	29 c2                	sub    edx,eax
   24f5c:	89 d0                	mov    eax,edx
   24f5e:	c1 e8 04             	shr    eax,0x4
   24f61:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:92

void itoha(unsigned int n, char *buf)
{
  int i = 0, j =0;
  j=7;
  while(n != 0)
   24f64:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   24f68:	75 c3                	jne    24f2d <itoha+0x1e>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:98
  {
    i = n % 16;
      buf[j--] = convert(i);
      n = (n - i) / 16;
  }
  buf[j] = '\0';
   24f6a:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   24f6d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24f70:	01 d0                	add    eax,edx
   24f72:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:99
}
   24f75:	90                   	nop
   24f76:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   24f79:	c9                   	leave  
   24f7a:	c3                   	ret    

00024f7b <identify_data_sizes>:
identify_data_sizes():
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:102

void identify_data_sizes(sizeof_t* sizes)
{
   24f7b:	55                   	push   ebp
   24f7c:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:103
    sizes->shortSize = sizeof(short);
   24f7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24f81:	66 c7 00 02 00       	mov    WORD PTR [eax],0x2
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:104
    sizes->intSize = sizeof(int);
   24f86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24f89:	66 c7 40 02 04 00    	mov    WORD PTR [eax+0x2],0x4
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:105
    sizes->longSize = sizeof(long);
   24f8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24f92:	66 c7 40 04 04 00    	mov    WORD PTR [eax+0x4],0x4
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:106
    sizes->longLongSize = sizeof(long long);
   24f98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24f9b:	66 c7 40 06 08 00    	mov    WORD PTR [eax+0x6],0x8
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:107
    sizes->longLongIntSize = sizeof(long long int);
   24fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24fa4:	66 c7 40 08 08 00    	mov    WORD PTR [eax+0x8],0x8
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:108
}
   24faa:	90                   	nop
   24fab:	5d                   	pop    ebp
   24fac:	c3                   	ret    

00024fad <memset>:
memset():
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:111

void *memset(void *d1, int val, size_t len)
{
   24fad:	55                   	push   ebp
   24fae:	89 e5                	mov    ebp,esp
   24fb0:	83 ec 20             	sub    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:112
    uint8_t *d = d1;
   24fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24fb6:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:113
    uint16_t*e = d1;
   24fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24fbc:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:114
    uint16_t eVal=(val << 16) | (val << 8) | val;
   24fbf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24fc2:	c1 e0 10             	shl    eax,0x10
   24fc5:	89 c2                	mov    edx,eax
   24fc7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24fca:	c1 e0 08             	shl    eax,0x8
   24fcd:	09 c2                	or     edx,eax
   24fcf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24fd2:	09 d0                	or     eax,edx
   24fd4:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:115
    uint32_t*f = d1;
   24fd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24fdb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:116
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
   24fde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24fe1:	c1 e0 18             	shl    eax,0x18
   24fe4:	89 c2                	mov    edx,eax
   24fe6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24fe9:	c1 e0 10             	shl    eax,0x10
   24fec:	09 c2                	or     edx,eax
   24fee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24ff1:	c1 e0 08             	shl    eax,0x8
   24ff4:	09 d0                	or     eax,edx
   24ff6:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
   24ff9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:118
    
    if ((len%4)==0)
   24ffc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   24fff:	83 e0 03             	and    eax,0x3
   25002:	85 c0                	test   eax,eax
   25004:	75 1c                	jne    25022 <memset+0x75>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:119
    while (len-=4) {
   25006:	eb 0e                	jmp    25016 <memset+0x69>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:120
        *d++ = fVal;
   25008:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   2500b:	8d 50 01             	lea    edx,[eax+0x1]
   2500e:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   25011:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   25014:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:119
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
   25016:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
   2501a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   2501e:	75 e8                	jne    25008 <memset+0x5b>
   25020:	eb 42                	jmp    25064 <memset+0xb7>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:122
        *d++ = fVal;
    }
    else if (((len%2)==0))
   25022:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25025:	83 e0 01             	and    eax,0x1
   25028:	85 c0                	test   eax,eax
   2502a:	75 2b                	jne    25057 <memset+0xaa>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:123
    while (len-=2) {
   2502c:	eb 0f                	jmp    2503d <memset+0x90>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:124
        *d++ = eVal;
   2502e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   25031:	8d 50 01             	lea    edx,[eax+0x1]
   25034:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   25037:	0f b7 55 f6          	movzx  edx,WORD PTR [ebp-0xa]
   2503b:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:123
    if ((len%4)==0)
    while (len-=4) {
        *d++ = fVal;
    }
    else if (((len%2)==0))
    while (len-=2) {
   2503d:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
   25041:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   25045:	75 e7                	jne    2502e <memset+0x81>
   25047:	eb 1b                	jmp    25064 <memset+0xb7>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:128
        *d++ = eVal;
    }
    else
    while (len--) {
        *d++ = val;
   25049:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   2504c:	8d 50 01             	lea    edx,[eax+0x1]
   2504f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   25052:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   25055:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:127
    else if (((len%2)==0))
    while (len-=2) {
        *d++ = eVal;
    }
    else
    while (len--) {
   25057:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2505a:	8d 50 ff             	lea    edx,[eax-0x1]
   2505d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25060:	85 c0                	test   eax,eax
   25062:	75 e5                	jne    25049 <memset+0x9c>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:130
        *d++ = val;
    }
    return d1;
   25064:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:131
}
   25067:	c9                   	leave  
   25068:	c3                   	ret    

00025069 <bcdToDec>:
bcdToDec():
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:134

uint8_t bcdToDec(uint8_t val)
{
   25069:	55                   	push   ebp
   2506a:	89 e5                	mov    ebp,esp
   2506c:	83 ec 04             	sub    esp,0x4
   2506f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25072:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:135
  return ( (val/16*10) + (val%16) );
   25075:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   25079:	c0 e8 04             	shr    al,0x4
   2507c:	89 c2                	mov    edx,eax
   2507e:	89 d0                	mov    eax,edx
   25080:	c1 e0 02             	shl    eax,0x2
   25083:	01 d0                	add    eax,edx
   25085:	01 c0                	add    eax,eax
   25087:	89 c2                	mov    edx,eax
   25089:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   2508d:	83 e0 0f             	and    eax,0xf
   25090:	01 d0                	add    eax,edx
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:136
}
   25092:	c9                   	leave  
   25093:	c3                   	ret    

00025094 <decToBcd>:
decToBcd():
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:139

uint8_t decToBcd(uint8_t val)
{
   25094:	55                   	push   ebp
   25095:	89 e5                	mov    ebp,esp
   25097:	53                   	push   ebx
   25098:	83 ec 04             	sub    esp,0x4
   2509b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2509e:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:140
  return ( (val/10*16) + (val%10) );
   250a1:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   250a5:	0f b6 d0             	movzx  edx,al
   250a8:	89 d0                	mov    eax,edx
   250aa:	c1 e0 02             	shl    eax,0x2
   250ad:	01 d0                	add    eax,edx
   250af:	c1 e0 03             	shl    eax,0x3
   250b2:	01 d0                	add    eax,edx
   250b4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   250bb:	01 d0                	add    eax,edx
   250bd:	66 c1 e8 08          	shr    ax,0x8
   250c1:	c0 e8 03             	shr    al,0x3
   250c4:	c1 e0 04             	shl    eax,0x4
   250c7:	89 c3                	mov    ebx,eax
   250c9:	0f b6 4d f8          	movzx  ecx,BYTE PTR [ebp-0x8]
   250cd:	0f b6 d1             	movzx  edx,cl
   250d0:	89 d0                	mov    eax,edx
   250d2:	c1 e0 02             	shl    eax,0x2
   250d5:	01 d0                	add    eax,edx
   250d7:	c1 e0 03             	shl    eax,0x3
   250da:	01 d0                	add    eax,edx
   250dc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   250e3:	01 d0                	add    eax,edx
   250e5:	66 c1 e8 08          	shr    ax,0x8
   250e9:	89 c2                	mov    edx,eax
   250eb:	c0 ea 03             	shr    dl,0x3
   250ee:	89 d0                	mov    eax,edx
   250f0:	c1 e0 02             	shl    eax,0x2
   250f3:	01 d0                	add    eax,edx
   250f5:	01 c0                	add    eax,eax
   250f7:	29 c1                	sub    ecx,eax
   250f9:	89 ca                	mov    edx,ecx
   250fb:	8d 04 13             	lea    eax,[ebx+edx*1]
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:141
}
   250fe:	83 c4 04             	add    esp,0x4
   25101:	5b                   	pop    ebx
   25102:	5d                   	pop    ebp
   25103:	c3                   	ret    

00025104 <initSystemDate>:
initSystemDate():
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:143
void initSystemDate()
{
   25104:	55                   	push   ebp
   25105:	89 e5                	mov    ebp,esp
   25107:	83 ec 38             	sub    esp,0x38
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:146
    struct tm tmbuf;

    outb(0x70, 0x00);
   2510a:	6a 00                	push   0x0
   2510c:	6a 70                	push   0x70
   2510e:	e8 d1 fb ff ff       	call   24ce4 <outb>
   25113:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:147
    tmbuf.tm_sec = bcdToDec(inb(0x71));
   25116:	6a 71                	push   0x71
   25118:	e8 e6 fb ff ff       	call   24d03 <inb>
   2511d:	83 c4 04             	add    esp,0x4
   25120:	0f b6 c0             	movzx  eax,al
   25123:	50                   	push   eax
   25124:	e8 40 ff ff ff       	call   25069 <bcdToDec>
   25129:	83 c4 04             	add    esp,0x4
   2512c:	0f b6 c0             	movzx  eax,al
   2512f:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:148
    outb(0x70, 0x02);
   25132:	6a 02                	push   0x2
   25134:	6a 70                	push   0x70
   25136:	e8 a9 fb ff ff       	call   24ce4 <outb>
   2513b:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:149
    tmbuf.tm_min = bcdToDec(inb(0x71));
   2513e:	6a 71                	push   0x71
   25140:	e8 be fb ff ff       	call   24d03 <inb>
   25145:	83 c4 04             	add    esp,0x4
   25148:	0f b6 c0             	movzx  eax,al
   2514b:	50                   	push   eax
   2514c:	e8 18 ff ff ff       	call   25069 <bcdToDec>
   25151:	83 c4 04             	add    esp,0x4
   25154:	0f b6 c0             	movzx  eax,al
   25157:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:150
    outb(0x70, 0x04);
   2515a:	6a 04                	push   0x4
   2515c:	6a 70                	push   0x70
   2515e:	e8 81 fb ff ff       	call   24ce4 <outb>
   25163:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:151
    tmbuf.tm_hour = bcdToDec(inb(0x71));
   25166:	6a 71                	push   0x71
   25168:	e8 96 fb ff ff       	call   24d03 <inb>
   2516d:	83 c4 04             	add    esp,0x4
   25170:	0f b6 c0             	movzx  eax,al
   25173:	50                   	push   eax
   25174:	e8 f0 fe ff ff       	call   25069 <bcdToDec>
   25179:	83 c4 04             	add    esp,0x4
   2517c:	0f b6 c0             	movzx  eax,al
   2517f:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:152
    outb(0x70, 0x07);
   25182:	6a 07                	push   0x7
   25184:	6a 70                	push   0x70
   25186:	e8 59 fb ff ff       	call   24ce4 <outb>
   2518b:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:153
    tmbuf.tm_mday = bcdToDec(inb(0x71));
   2518e:	6a 71                	push   0x71
   25190:	e8 6e fb ff ff       	call   24d03 <inb>
   25195:	83 c4 04             	add    esp,0x4
   25198:	0f b6 c0             	movzx  eax,al
   2519b:	50                   	push   eax
   2519c:	e8 c8 fe ff ff       	call   25069 <bcdToDec>
   251a1:	83 c4 04             	add    esp,0x4
   251a4:	0f b6 c0             	movzx  eax,al
   251a7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:154
    outb(0x70, 0x08);
   251aa:	6a 08                	push   0x8
   251ac:	6a 70                	push   0x70
   251ae:	e8 31 fb ff ff       	call   24ce4 <outb>
   251b3:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:155
    tmbuf.tm_mon = bcdToDec(inb(0x71));
   251b6:	6a 71                	push   0x71
   251b8:	e8 46 fb ff ff       	call   24d03 <inb>
   251bd:	83 c4 04             	add    esp,0x4
   251c0:	0f b6 c0             	movzx  eax,al
   251c3:	50                   	push   eax
   251c4:	e8 a0 fe ff ff       	call   25069 <bcdToDec>
   251c9:	83 c4 04             	add    esp,0x4
   251cc:	0f b6 c0             	movzx  eax,al
   251cf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:156
    outb(0x70, 0x09);
   251d2:	6a 09                	push   0x9
   251d4:	6a 70                	push   0x70
   251d6:	e8 09 fb ff ff       	call   24ce4 <outb>
   251db:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:157
    tmbuf.tm_year = bcdToDec(inb(0x71));
   251de:	6a 71                	push   0x71
   251e0:	e8 1e fb ff ff       	call   24d03 <inb>
   251e5:	83 c4 04             	add    esp,0x4
   251e8:	0f b6 c0             	movzx  eax,al
   251eb:	50                   	push   eax
   251ec:	e8 78 fe ff ff       	call   25069 <bcdToDec>
   251f1:	83 c4 04             	add    esp,0x4
   251f4:	0f b6 c0             	movzx  eax,al
   251f7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:158
    tmbuf.tm_isdst = -1;
   251fa:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:159
    tmbuf.tm_year += 2000;
   25201:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   25204:	05 d0 07 00 00       	add    eax,0x7d0
   25209:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:160
    tmbuf.tm_year = tmbuf.tm_year - 1900;
   2520c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   2520f:	2d 6c 07 00 00       	sub    eax,0x76c
   25214:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:161
    kSystemStartTime = mktime(&tmbuf);
   25217:	83 ec 0c             	sub    esp,0xc
   2521a:	8d 45 cc             	lea    eax,[ebp-0x34]
   2521d:	50                   	push   eax
   2521e:	e8 cc 27 00 00       	call   279ef <mktime>
   25223:	83 c4 10             	add    esp,0x10
   25226:	a3 88 02 a0 00       	mov    ds:0xa00288,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:162
    kSystemCurrentTime = kSystemStartTime;
   2522b:	a1 88 02 a0 00       	mov    eax,ds:0xa00288
   25230:	a3 8c 02 a0 00       	mov    ds:0xa0028c,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:164
//printf("System Date = %d/%d/%d %d:%d:%d\n", tmbuf.tm_mon, tmbuf.tm_mday, tmbuf.tm_year, tmbuf.tm_hour, tmbuf.tm_min, tmbuf.tm_sec, tmbuf.tm_hour, tmbuf.tm_min, tmbuf.tm_sec);
}
   25235:	90                   	nop
   25236:	c9                   	leave  
   25237:	c3                   	ret    

00025238 <strtoupper>:
strtoupper():
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:166
char * strtoupper(char* pointerToString)
{
   25238:	55                   	push   ebp
   25239:	89 e5                	mov    ebp,esp
   2523b:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:167
    uint8_t start=0, length=strlen(pointerToString);
   2523e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   25242:	83 ec 0c             	sub    esp,0xc
   25245:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   25248:	e8 b7 1f 00 00       	call   27204 <strlen>
   2524d:	83 c4 10             	add    esp,0x10
   25250:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:168
    char* myPtr=pointerToString;
   25253:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25256:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:171
    
        // Trim.Start:
        while (start<length)
   25259:	eb 44                	jmp    2529f <strtoupper+0x67>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:173
        {
            if (myPtr[start]>='a' && myPtr[start]<='z')
   2525b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   2525f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25262:	01 d0                	add    eax,edx
   25264:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   25267:	3c 60                	cmp    al,0x60
   25269:	7e 2a                	jle    25295 <strtoupper+0x5d>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:173 (discriminator 1)
   2526b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   2526f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25272:	01 d0                	add    eax,edx
   25274:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   25277:	3c 7a                	cmp    al,0x7a
   25279:	7f 1a                	jg     25295 <strtoupper+0x5d>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:174
                myPtr[start]-=32;
   2527b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   2527f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25282:	01 d0                	add    eax,edx
   25284:	0f b6 4d f7          	movzx  ecx,BYTE PTR [ebp-0x9]
   25288:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2528b:	01 ca                	add    edx,ecx
   2528d:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   25290:	83 ea 20             	sub    edx,0x20
   25293:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:175
            start++;
   25295:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   25299:	83 c0 01             	add    eax,0x1
   2529c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:171
{
    uint8_t start=0, length=strlen(pointerToString);
    char* myPtr=pointerToString;
    
        // Trim.Start:
        while (start<length)
   2529f:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   252a3:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
   252a6:	72 b3                	jb     2525b <strtoupper+0x23>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:178
            if (myPtr[start]>='a' && myPtr[start]<='z')
                myPtr[start]-=32;
            start++;
        }

    return pointerToString;
   252a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:179
}
   252ab:	c9                   	leave  
   252ac:	c3                   	ret    

000252ad <printDumpedRegs>:
printDumpedRegs():
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:182

void printDumpedRegs()
{
   252ad:	55                   	push   ebp
   252ae:	89 e5                	mov    ebp,esp
   252b0:	56                   	push   esi
   252b1:	53                   	push   ebx
   252b2:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:183
    uint32_t esp = exceptionSavedESP;
   252b5:	a1 ec 01 a0 00       	mov    eax,ds:0xa001ec
   252ba:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:187
    uint8_t* lCSIPPtr;

    
    lCSIPPtr=(uint8_t*)(exceptionEIP);
   252bd:	a1 f8 01 a0 00       	mov    eax,ds:0xa001f8
   252c2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:188
    printk("EAX=%08X\tEBX=%08X\tECX=%08X\tEDX=%08X\tEFL=%08X\n", exceptionAX, exceptionBX, exceptionCX, exceptionDX,exceptionFlags);
   252c5:	8b 35 f0 01 a0 00    	mov    esi,DWORD PTR ds:0xa001f0
   252cb:	8b 1d bc 01 a0 00    	mov    ebx,DWORD PTR ds:0xa001bc
   252d1:	8b 0d b8 01 a0 00    	mov    ecx,DWORD PTR ds:0xa001b8
   252d7:	8b 15 b4 01 a0 00    	mov    edx,DWORD PTR ds:0xa001b4
   252dd:	a1 b0 01 a0 00       	mov    eax,ds:0xa001b0
   252e2:	83 ec 08             	sub    esp,0x8
   252e5:	56                   	push   esi
   252e6:	53                   	push   ebx
   252e7:	51                   	push   ecx
   252e8:	52                   	push   edx
   252e9:	50                   	push   eax
   252ea:	68 b4 50 08 00       	push   0x850b4
   252ef:	e8 3f 1d 00 00       	call   27033 <printk>
   252f4:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:189
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", exceptionBP, exceptionSI, exceptionDI, exceptionSavedESP);
   252f7:	8b 1d ec 01 a0 00    	mov    ebx,DWORD PTR ds:0xa001ec
   252fd:	8b 0d c4 01 a0 00    	mov    ecx,DWORD PTR ds:0xa001c4
   25303:	8b 15 c0 01 a0 00    	mov    edx,DWORD PTR ds:0xa001c0
   25309:	a1 c8 01 a0 00       	mov    eax,ds:0xa001c8
   2530e:	83 ec 0c             	sub    esp,0xc
   25311:	53                   	push   ebx
   25312:	51                   	push   ecx
   25313:	52                   	push   edx
   25314:	50                   	push   eax
   25315:	68 e4 50 08 00       	push   0x850e4
   2531a:	e8 14 1d 00 00       	call   27033 <printk>
   2531f:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:190
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\tCR4=%08X\n", exceptionCR0, exceptionCR2, exceptionCR3, exceptionCR4);
   25322:	8b 1d d4 01 a0 00    	mov    ebx,DWORD PTR ds:0xa001d4
   25328:	8b 0d d0 01 a0 00    	mov    ecx,DWORD PTR ds:0xa001d0
   2532e:	8b 15 00 02 a0 00    	mov    edx,DWORD PTR ds:0xa00200
   25334:	a1 cc 01 a0 00       	mov    eax,ds:0xa001cc
   25339:	83 ec 0c             	sub    esp,0xc
   2533c:	53                   	push   ebx
   2533d:	51                   	push   ecx
   2533e:	52                   	push   edx
   2533f:	50                   	push   eax
   25340:	68 0c 51 08 00       	push   0x8510c
   25345:	e8 e9 1c 00 00       	call   27033 <printk>
   2534a:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:191
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", exceptionDS, exceptionES, exceptionGS, exceptionFS);
   2534d:	8b 1d e0 01 a0 00    	mov    ebx,DWORD PTR ds:0xa001e0
   25353:	8b 0d e4 01 a0 00    	mov    ecx,DWORD PTR ds:0xa001e4
   25359:	8b 15 dc 01 a0 00    	mov    edx,DWORD PTR ds:0xa001dc
   2535f:	a1 d8 01 a0 00       	mov    eax,ds:0xa001d8
   25364:	83 ec 0c             	sub    esp,0xc
   25367:	53                   	push   ebx
   25368:	51                   	push   ecx
   25369:	52                   	push   edx
   2536a:	50                   	push   eax
   2536b:	68 34 51 08 00       	push   0x85134
   25370:	e8 be 1c 00 00       	call   27033 <printk>
   25375:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:192
    printk("GDT=%08X\n",gdtp.base);
   25378:	a1 4e 04 a0 00       	mov    eax,ds:0xa0044e
   2537d:	83 ec 08             	sub    esp,0x8
   25380:	50                   	push   eax
   25381:	68 59 51 08 00       	push   0x85159
   25386:	e8 a8 1c 00 00       	call   27033 <printk>
   2538b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:193
    printk("CS:EIP = %04X:%08X, error code=%08X\n", exceptionCS, exceptionEIP, exceptionErrorCode);
   2538e:	8b 0d f4 01 a0 00    	mov    ecx,DWORD PTR ds:0xa001f4
   25394:	8b 15 f8 01 a0 00    	mov    edx,DWORD PTR ds:0xa001f8
   2539a:	a1 fc 01 a0 00       	mov    eax,ds:0xa001fc
   2539f:	51                   	push   ecx
   253a0:	52                   	push   edx
   253a1:	50                   	push   eax
   253a2:	68 64 51 08 00       	push   0x85164
   253a7:	e8 87 1c 00 00       	call   27033 <printk>
   253ac:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:194
          printk("Bytes at CS:EIP: ");
   253af:	83 ec 0c             	sub    esp,0xc
   253b2:	68 89 51 08 00       	push   0x85189
   253b7:	e8 77 1c 00 00       	call   27033 <printk>
   253bc:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:195
          for (int cnt=0;cnt<19;cnt++)
   253bf:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   253c6:	eb 23                	jmp    253eb <printDumpedRegs+0x13e>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:196 (discriminator 3)
              printk("%02X ", lCSIPPtr[cnt]);
   253c8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   253cb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   253ce:	01 d0                	add    eax,edx
   253d0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   253d3:	0f b6 c0             	movzx  eax,al
   253d6:	83 ec 08             	sub    esp,0x8
   253d9:	50                   	push   eax
   253da:	68 9b 51 08 00       	push   0x8519b
   253df:	e8 4f 1c 00 00       	call   27033 <printk>
   253e4:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:195 (discriminator 3)
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\tCR4=%08X\n", exceptionCR0, exceptionCR2, exceptionCR3, exceptionCR4);
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", exceptionDS, exceptionES, exceptionGS, exceptionFS);
    printk("GDT=%08X\n",gdtp.base);
    printk("CS:EIP = %04X:%08X, error code=%08X\n", exceptionCS, exceptionEIP, exceptionErrorCode);
          printk("Bytes at CS:EIP: ");
          for (int cnt=0;cnt<19;cnt++)
   253e7:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:195 (discriminator 1)
   253eb:	83 7d f0 12          	cmp    DWORD PTR [ebp-0x10],0x12
   253ef:	7e d7                	jle    253c8 <printDumpedRegs+0x11b>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:197
              printk("%02X ", lCSIPPtr[cnt]);
          printk("\n");
   253f1:	83 ec 0c             	sub    esp,0xc
   253f4:	68 a1 51 08 00       	push   0x851a1
   253f9:	e8 35 1c 00 00       	call   27033 <printk>
   253fe:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:198
          printk ("Stack @ 0x%08x:0x%08X:\n",exceptionSS, esp);
   25401:	a1 e8 01 a0 00       	mov    eax,ds:0xa001e8
   25406:	83 ec 04             	sub    esp,0x4
   25409:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2540c:	50                   	push   eax
   2540d:	68 a3 51 08 00       	push   0x851a3
   25412:	e8 1c 1c 00 00       	call   27033 <printk>
   25417:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:199
          for (int cnt=0;cnt<10;cnt++)
   2541a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   25421:	eb 2b                	jmp    2544e <printDumpedRegs+0x1a1>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:201 (discriminator 3)
          {
              printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
   25423:	a1 a8 01 a0 00       	mov    eax,ds:0xa001a8
   25428:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   2542b:	c1 e2 02             	shl    edx,0x2
   2542e:	01 d0                	add    eax,edx
   25430:	8b 00                	mov    eax,DWORD PTR [eax]
   25432:	83 ec 04             	sub    esp,0x4
   25435:	50                   	push   eax
   25436:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   25439:	68 bb 51 08 00       	push   0x851bb
   2543e:	e8 f0 1b 00 00       	call   27033 <printk>
   25443:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:202 (discriminator 3)
              esp+=4;
   25446:	83 45 f4 04          	add    DWORD PTR [ebp-0xc],0x4
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:199 (discriminator 3)
          printk("Bytes at CS:EIP: ");
          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
          printk("\n");
          printk ("Stack @ 0x%08x:0x%08X:\n",exceptionSS, esp);
          for (int cnt=0;cnt<10;cnt++)
   2544a:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:199 (discriminator 1)
   2544e:	83 7d ec 09          	cmp    DWORD PTR [ebp-0x14],0x9
   25452:	7e cf                	jle    25423 <printDumpedRegs+0x176>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:206
              printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
              esp+=4;
          }


}
   25454:	90                   	nop
   25455:	8d 65 f8             	lea    esp,[ebp-0x8]
   25458:	5b                   	pop    ebx
   25459:	5e                   	pop    esi
   2545a:	5d                   	pop    ebp
   2545b:	c3                   	ret    

0002545c <printDebugRegs>:
printDebugRegs():
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:209

void printDebugRegs()
{
   2545c:	55                   	push   ebp
   2545d:	89 e5                	mov    ebp,esp
   2545f:	56                   	push   esi
   25460:	53                   	push   ebx
   25461:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:210
    uint32_t esp = debugSavedESP;
   25464:	a1 40 02 a0 00       	mov    eax,ds:0xa00240
   25469:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:213
    uint8_t* lCSIPPtr;

    lCSIPPtr=(uint8_t*)(debugEIP);
   2546c:	a1 50 02 a0 00       	mov    eax,ds:0xa00250
   25471:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:214
    printk("EAX=%08X\tEBX=%08X\tECX=%08X\tEDX=%08X\tEFL=%08X\n", debugAX, debugBX, debugCX, debugDX,debugFlags);
   25474:	8b 35 44 02 a0 00    	mov    esi,DWORD PTR ds:0xa00244
   2547a:	8b 1d 10 02 a0 00    	mov    ebx,DWORD PTR ds:0xa00210
   25480:	8b 0d 0c 02 a0 00    	mov    ecx,DWORD PTR ds:0xa0020c
   25486:	8b 15 08 02 a0 00    	mov    edx,DWORD PTR ds:0xa00208
   2548c:	a1 04 02 a0 00       	mov    eax,ds:0xa00204
   25491:	83 ec 08             	sub    esp,0x8
   25494:	56                   	push   esi
   25495:	53                   	push   ebx
   25496:	51                   	push   ecx
   25497:	52                   	push   edx
   25498:	50                   	push   eax
   25499:	68 b4 50 08 00       	push   0x850b4
   2549e:	e8 90 1b 00 00       	call   27033 <printk>
   254a3:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:215
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", debugBP, debugSI, debugDI, debugSavedESP);
   254a6:	8b 1d 40 02 a0 00    	mov    ebx,DWORD PTR ds:0xa00240
   254ac:	8b 0d 18 02 a0 00    	mov    ecx,DWORD PTR ds:0xa00218
   254b2:	8b 15 14 02 a0 00    	mov    edx,DWORD PTR ds:0xa00214
   254b8:	a1 1c 02 a0 00       	mov    eax,ds:0xa0021c
   254bd:	83 ec 0c             	sub    esp,0xc
   254c0:	53                   	push   ebx
   254c1:	51                   	push   ecx
   254c2:	52                   	push   edx
   254c3:	50                   	push   eax
   254c4:	68 e4 50 08 00       	push   0x850e4
   254c9:	e8 65 1b 00 00       	call   27033 <printk>
   254ce:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:216
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\n", debugCR0, debugCR3, debugCR4);
   254d1:	8b 0d 28 02 a0 00    	mov    ecx,DWORD PTR ds:0xa00228
   254d7:	8b 15 24 02 a0 00    	mov    edx,DWORD PTR ds:0xa00224
   254dd:	a1 20 02 a0 00       	mov    eax,ds:0xa00220
   254e2:	51                   	push   ecx
   254e3:	52                   	push   edx
   254e4:	50                   	push   eax
   254e5:	68 cd 51 08 00       	push   0x851cd
   254ea:	e8 44 1b 00 00       	call   27033 <printk>
   254ef:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:217
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", debugDS, debugES, debugGS, debugFS);
   254f2:	8b 1d 34 02 a0 00    	mov    ebx,DWORD PTR ds:0xa00234
   254f8:	8b 0d 38 02 a0 00    	mov    ecx,DWORD PTR ds:0xa00238
   254fe:	8b 15 30 02 a0 00    	mov    edx,DWORD PTR ds:0xa00230
   25504:	a1 2c 02 a0 00       	mov    eax,ds:0xa0022c
   25509:	83 ec 0c             	sub    esp,0xc
   2550c:	53                   	push   ebx
   2550d:	51                   	push   ecx
   2550e:	52                   	push   edx
   2550f:	50                   	push   eax
   25510:	68 34 51 08 00       	push   0x85134
   25515:	e8 19 1b 00 00       	call   27033 <printk>
   2551a:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:218
    printk("CS:EIP = %04X:%08X, error code=%08X\n", debugCS, debugEIP, debugErrorCode);
   2551d:	8b 0d 48 02 a0 00    	mov    ecx,DWORD PTR ds:0xa00248
   25523:	8b 15 50 02 a0 00    	mov    edx,DWORD PTR ds:0xa00250
   25529:	a1 4c 02 a0 00       	mov    eax,ds:0xa0024c
   2552e:	51                   	push   ecx
   2552f:	52                   	push   edx
   25530:	50                   	push   eax
   25531:	68 64 51 08 00       	push   0x85164
   25536:	e8 f8 1a 00 00       	call   27033 <printk>
   2553b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:219
          printk("Bytes at CS:EIP: ");
   2553e:	83 ec 0c             	sub    esp,0xc
   25541:	68 89 51 08 00       	push   0x85189
   25546:	e8 e8 1a 00 00       	call   27033 <printk>
   2554b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:220
          for (int cnt=0;cnt<19;cnt++)
   2554e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   25555:	eb 23                	jmp    2557a <printDebugRegs+0x11e>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:221 (discriminator 3)
              printk("%02X ", lCSIPPtr[cnt]);
   25557:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2555a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2555d:	01 d0                	add    eax,edx
   2555f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   25562:	0f b6 c0             	movzx  eax,al
   25565:	83 ec 08             	sub    esp,0x8
   25568:	50                   	push   eax
   25569:	68 9b 51 08 00       	push   0x8519b
   2556e:	e8 c0 1a 00 00       	call   27033 <printk>
   25573:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:220 (discriminator 3)
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", debugBP, debugSI, debugDI, debugSavedESP);
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\n", debugCR0, debugCR3, debugCR4);
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", debugDS, debugES, debugGS, debugFS);
    printk("CS:EIP = %04X:%08X, error code=%08X\n", debugCS, debugEIP, debugErrorCode);
          printk("Bytes at CS:EIP: ");
          for (int cnt=0;cnt<19;cnt++)
   25576:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:220 (discriminator 1)
   2557a:	83 7d f0 12          	cmp    DWORD PTR [ebp-0x10],0x12
   2557e:	7e d7                	jle    25557 <printDebugRegs+0xfb>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:222
              printk("%02X ", lCSIPPtr[cnt]);
          printk("\n");
   25580:	83 ec 0c             	sub    esp,0xc
   25583:	68 a1 51 08 00       	push   0x851a1
   25588:	e8 a6 1a 00 00       	call   27033 <printk>
   2558d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:223
          printk ("Stack @ 0x%08x:0x%08X:\n",debugSS, esp);
   25590:	a1 3c 02 a0 00       	mov    eax,ds:0xa0023c
   25595:	83 ec 04             	sub    esp,0x4
   25598:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2559b:	50                   	push   eax
   2559c:	68 a3 51 08 00       	push   0x851a3
   255a1:	e8 8d 1a 00 00       	call   27033 <printk>
   255a6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:224
          for (int cnt=0;cnt<10;cnt++)
   255a9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   255b0:	eb 2b                	jmp    255dd <printDebugRegs+0x181>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:226 (discriminator 3)
          {
              printk("\t0x%08X%: 0x%08X\n",esp, debugSavedStack[cnt]);
   255b2:	a1 ac 01 a0 00       	mov    eax,ds:0xa001ac
   255b7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   255ba:	c1 e2 02             	shl    edx,0x2
   255bd:	01 d0                	add    eax,edx
   255bf:	8b 00                	mov    eax,DWORD PTR [eax]
   255c1:	83 ec 04             	sub    esp,0x4
   255c4:	50                   	push   eax
   255c5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   255c8:	68 bb 51 08 00       	push   0x851bb
   255cd:	e8 61 1a 00 00       	call   27033 <printk>
   255d2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:227 (discriminator 3)
              esp+=4;
   255d5:	83 45 f4 04          	add    DWORD PTR [ebp-0xc],0x4
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:224 (discriminator 3)
          printk("Bytes at CS:EIP: ");
          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
          printk("\n");
          printk ("Stack @ 0x%08x:0x%08X:\n",debugSS, esp);
          for (int cnt=0;cnt<10;cnt++)
   255d9:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:224 (discriminator 1)
   255dd:	83 7d ec 09          	cmp    DWORD PTR [ebp-0x14],0x9
   255e1:	7e cf                	jle    255b2 <printDebugRegs+0x156>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:231
              printk("\t0x%08X%: 0x%08X\n",esp, debugSavedStack[cnt]);
              esp+=4;
          }


}
   255e3:	90                   	nop
   255e4:	8d 65 f8             	lea    esp,[ebp-0x8]
   255e7:	5b                   	pop    ebx
   255e8:	5e                   	pop    esi
   255e9:	5d                   	pop    ebp
   255ea:	c3                   	ret    

000255eb <reboot>:
reboot():
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:239
/* keyboard interface IO port: data and control
   READ:   status port
   WRITE:  control register */
 
void reboot(bool waitFirst)
{
   255eb:	55                   	push   ebp
   255ec:	89 e5                	mov    ebp,esp
   255ee:	83 ec 28             	sub    esp,0x28
   255f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   255f4:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:242
    uint8_t temp;
 
    if (waitFirst)
   255f7:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   255fb:	74 21                	je     2561e <reboot+0x33>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:244
    {
        puts("Rebooting ... ");
   255fd:	83 ec 0c             	sub    esp,0xc
   25600:	68 e9 51 08 00       	push   0x851e9
   25605:	e8 cc 29 ff ff       	call   17fd6 <puts>
   2560a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:245
        __asm__("sti\n");
   2560d:	fb                   	sti    
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:246
        wait(3000);
   2560e:	83 ec 0c             	sub    esp,0xc
   25611:	68 b8 0b 00 00       	push   0xbb8
   25616:	e8 57 2c 00 00       	call   28272 <wait>
   2561b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:248
    }
    __asm__ volatile ("cli"); /* disable all interrupts */
   2561e:	fa                   	cli    
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:253
 
    /* Clear all keyboard buffers (output and command buffers) */
    do
    {
        temp = inb(KBRD_INTRFC); /* empty user data */
   2561f:	83 ec 0c             	sub    esp,0xc
   25622:	6a 64                	push   0x64
   25624:	e8 da f6 ff ff       	call   24d03 <inb>
   25629:	83 c4 10             	add    esp,0x10
   2562c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:254
        if (check_flag(temp, KBRD_BIT_KDATA) != 0)
   2562f:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   25633:	83 e0 01             	and    eax,0x1
   25636:	85 c0                	test   eax,eax
   25638:	74 0d                	je     25647 <reboot+0x5c>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:255
            inb(KBRD_IO); /* empty keyboard data */
   2563a:	83 ec 0c             	sub    esp,0xc
   2563d:	6a 60                	push   0x60
   2563f:	e8 bf f6 ff ff       	call   24d03 <inb>
   25644:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:256
    } while (check_flag(temp, KBRD_BIT_UDATA) != 0);
   25647:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   2564b:	83 e0 02             	and    eax,0x2
   2564e:	85 c0                	test   eax,eax
   25650:	75 cd                	jne    2561f <reboot+0x34>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:258
 
    outb(KBRD_INTRFC, KBRD_RESET); /* pulse CPU reset line */
   25652:	83 ec 08             	sub    esp,0x8
   25655:	68 fe 00 00 00       	push   0xfe
   2565a:	6a 64                	push   0x64
   2565c:	e8 83 f6 ff ff       	call   24ce4 <outb>
   25661:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:260 (discriminator 1)
loop:
    __asm__ volatile ("hlt"); /* if that didn't work, halt the CPU */
   25664:	f4                   	hlt    
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:261 (discriminator 1)
    goto loop; /* if a NMI is received, halt again */
   25665:	eb fd                	jmp    25664 <reboot+0x79>

00025667 <dumpKernelAddresses>:
dumpKernelAddresses():
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:265
}

void dumpKernelAddresses()
{
   25667:	55                   	push   ebp
   25668:	89 e5                	mov    ebp,esp
   2566a:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:266
printk("Kernel Variable List:\n\tKERNEL_OBJECT_BASE_ADDRESS0x%08X\n",KERNEL_OBJECT_BASE_ADDRESS);
   2566d:	83 ec 08             	sub    esp,0x8
   25670:	68 00 00 10 00       	push   0x100000
   25675:	68 f8 51 08 00       	push   0x851f8
   2567a:	e8 b4 19 00 00       	call   27033 <printk>
   2567f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:267
printk("\tKERNEL_OBJECT_BASE_ADDRESS=0x%08x\n",KERNEL_OBJECT_BASE_ADDRESS);
   25682:	83 ec 08             	sub    esp,0x8
   25685:	68 00 00 10 00       	push   0x100000
   2568a:	68 34 52 08 00       	push   0x85234
   2568f:	e8 9f 19 00 00       	call   27033 <printk>
   25694:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:268
printk("\tE820_TABLE_ADDRESS=0x%08x\n",E820_TABLE_ADDRESS);
   25697:	83 ec 08             	sub    esp,0x8
   2569a:	68 00 00 10 00       	push   0x100000
   2569f:	68 58 52 08 00       	push   0x85258
   256a4:	e8 8a 19 00 00       	call   27033 <printk>
   256a9:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:269
printk("\tMP_CONFIG_TABLE_ADDRESS=0x%08x\n",MP_CONFIG_TABLE_ADDRESS);
   256ac:	83 ec 08             	sub    esp,0x8
   256af:	68 c0 12 10 00       	push   0x1012c0
   256b4:	68 74 52 08 00       	push   0x85274
   256b9:	e8 75 19 00 00       	call   27033 <printk>
   256be:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:270
printk("\tKEYBOARD_BUFFER_ADDRESS=0x%08x\n",KEYBOARD_BUFFER_ADDRESS);
   256c1:	83 ec 08             	sub    esp,0x8
   256c4:	68 c0 32 10 00       	push   0x1032c0
   256c9:	68 98 52 08 00       	push   0x85298
   256ce:	e8 60 19 00 00       	call   27033 <printk>
   256d3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:271
printk("\tIDT_TABLE_ADDRESS=0x%08x\n",IDT_TABLE_ADDRESS);
   256d6:	83 ec 08             	sub    esp,0x8
   256d9:	68 00 40 10 00       	push   0x104000
   256de:	68 b9 52 08 00       	push   0x852b9
   256e3:	e8 4b 19 00 00       	call   27033 <printk>
   256e8:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:272
printk("\tINIT_GDT_TABLE_ADDRESS=0x%08x\n",INIT_GDT_TABLE_ADDRESS);
   256eb:	83 ec 08             	sub    esp,0x8
   256ee:	68 00 50 10 00       	push   0x105000
   256f3:	68 d4 52 08 00       	push   0x852d4
   256f8:	e8 36 19 00 00       	call   27033 <printk>
   256fd:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:273
printk("\tTASK_TABLE_ADDRESS=0x%08x\n",TASK_TABLE_ADDRESS);
   25700:	83 ec 08             	sub    esp,0x8
   25703:	68 00 60 10 00       	push   0x106000
   25708:	68 f4 52 08 00       	push   0x852f4
   2570d:	e8 21 19 00 00       	call   27033 <printk>
   25712:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:274
printk("\tTSS_TABLE_ADDRESS=0x%08x\n",TSS_TABLE_ADDRESS);
   25715:	83 ec 08             	sub    esp,0x8
   25718:	68 00 00 12 00       	push   0x120000
   2571d:	68 10 53 08 00       	push   0x85310
   25722:	e8 0c 19 00 00       	call   27033 <printk>
   25727:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:275
printk("\tATA_MBR_ARRAY_ADDRESS=0x%08x\n",ATA_MBR_ARRAY_ADDRESS);
   2572a:	83 ec 08             	sub    esp,0x8
   2572d:	68 00 a0 13 00       	push   0x13a000
   25732:	68 2c 53 08 00       	push   0x8532c
   25737:	e8 f7 18 00 00       	call   27033 <printk>
   2573c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:276
printk("\tPCI_DEVICE_LIST_ADDRESS=0x%08x\n",PCI_DEVICE_LIST_ADDRESS);
   2573f:	83 ec 08             	sub    esp,0x8
   25742:	68 00 b0 13 00       	push   0x13b000
   25747:	68 4c 53 08 00       	push   0x8534c
   2574c:	e8 e2 18 00 00       	call   27033 <printk>
   25751:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:277
printk("\tPCI_BRIDGE_LIST_ADDRESS=0x%08x\n",PCI_BRIDGE_LIST_ADDRESS);
   25754:	83 ec 08             	sub    esp,0x8
   25757:	68 00 b0 14 00       	push   0x14b000
   2575c:	68 70 53 08 00       	push   0x85370
   25761:	e8 cd 18 00 00       	call   27033 <printk>
   25766:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:278
printk("\tPCI_FUNCTION_LIST_ADDRESS=0x%08x\n",PCI_FUNCTION_LIST_ADDRESS);
   25769:	83 ec 08             	sub    esp,0x8
   2576c:	68 00 b0 15 00       	push   0x15b000
   25771:	68 94 53 08 00       	push   0x85394
   25776:	e8 b8 18 00 00       	call   27033 <printk>
   2577b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:279
printk("\tGDT_PMODE_16BIT_TABLE_ADDRESS=0x%08x\n",GDT_PMODE_16BIT_TABLE_ADDRESS);
   2577e:	83 ec 08             	sub    esp,0x8
   25781:	68 00 c0 15 00       	push   0x15c000
   25786:	68 b8 53 08 00       	push   0x853b8
   2578b:	e8 a3 18 00 00       	call   27033 <printk>
   25790:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:280
printk("\tKERNEL_PAGE_DIR_ADDRESS=0x%08x\n",KERNEL_PAGE_DIR_ADDRESS);
   25793:	83 ec 08             	sub    esp,0x8
   25796:	68 00 d0 15 00       	push   0x15d000
   2579b:	68 e0 53 08 00       	push   0x853e0
   257a0:	e8 8e 18 00 00       	call   27033 <printk>
   257a5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:281
printk("\tKERNEL_PAGE_TABLE_BASE_ADDRESS=0x%08x\n",KERNEL_PAGE_TABLE_BASE_ADDRESS);
   257a8:	83 ec 08             	sub    esp,0x8
   257ab:	68 00 f0 16 00       	push   0x16f000
   257b0:	68 04 54 08 00       	push   0x85404
   257b5:	e8 79 18 00 00       	call   27033 <printk>
   257ba:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:282
printk("\tSAVED_STACK_FOR_EXCEPTIONS_ADDRESS=0x%08x\n",SAVED_STACK_FOR_EXCEPTIONS_ADDRESS);
   257bd:	83 ec 08             	sub    esp,0x8
   257c0:	68 00 00 57 00       	push   0x570000
   257c5:	68 2c 54 08 00       	push   0x8542c
   257ca:	e8 64 18 00 00       	call   27033 <printk>
   257cf:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:283
printk("\tSAVED_STACK_FOR_DEBUGGING_ADDRESS=0x%08x\n",SAVED_STACK_FOR_DEBUGGING_ADDRESS);
   257d2:	83 ec 08             	sub    esp,0x8
   257d5:	68 00 20 57 00       	push   0x572000
   257da:	68 58 54 08 00       	push   0x85458
   257df:	e8 4f 18 00 00       	call   27033 <printk>
   257e4:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:284
printk("\tCPU_APIC_REGISTER_REMAP_BASE_ADDRESS=0x%08x\n",CPU_APIC_REGISTER_REMAP_BASE_ADDRESS);
   257e7:	83 ec 08             	sub    esp,0x8
   257ea:	68 00 40 57 00       	push   0x574000
   257ef:	68 84 54 08 00       	push   0x85484
   257f4:	e8 3a 18 00 00       	call   27033 <printk>
   257f9:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:285
printk("\tCPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS=0x%08x\n",CPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS);
   257fc:	83 ec 08             	sub    esp,0x8
   257ff:	68 00 50 57 00       	push   0x575000
   25804:	68 b4 54 08 00       	push   0x854b4
   25809:	e8 25 18 00 00       	call   27033 <printk>
   2580e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:286
printk("\tKERNEL_TICKS_SINCE_START_VARIABLE_ADDRESS=0x%08x\n",KERNEL_TICKS_SINCE_START_VARIABLE_ADDRESS);
   25811:	83 ec 08             	sub    esp,0x8
   25814:	68 04 50 57 00       	push   0x575004
   25819:	68 e4 54 08 00       	push   0x854e4
   2581e:	e8 10 18 00 00       	call   27033 <printk>
   25823:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:287
printk("\tAHCI_ABAR_REMAPPED_ADDRESS=0x%08x\n",AHCI_ABAR_REMAPPED_ADDRESS);
   25826:	83 ec 08             	sub    esp,0x8
   25829:	68 00 60 57 00       	push   0x576000
   2582e:	68 18 55 08 00       	push   0x85518
   25833:	e8 fb 17 00 00       	call   27033 <printk>
   25838:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:288
printk("\tAHCI_PORT_BASE_REMAP_ADDRESS=0x%08x\n",AHCI_PORT_BASE_REMAP_ADDRESS);
   2583b:	83 ec 08             	sub    esp,0x8
   2583e:	68 00 60 5b 00       	push   0x5b6000
   25843:	68 3c 55 08 00       	push   0x8553c
   25848:	e8 e6 17 00 00       	call   27033 <printk>
   2584d:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:289
printk("\tAHCI_DISK_BUFFER_ADDRESS=0x%08x\n",AHCI_DISK_BUFFER_ADDRESS);
   25850:	83 ec 08             	sub    esp,0x8
   25853:	68 00 60 6f 00       	push   0x6f6000
   25858:	68 64 55 08 00       	push   0x85564
   2585d:	e8 d1 17 00 00       	call   27033 <printk>
   25862:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:290
printk("\tATA_DEVICE_INFO_ADDRESS=0x%08x\n",ATA_DEVICE_INFO_ADDRESS);
   25865:	83 ec 08             	sub    esp,0x8
   25868:	68 00 60 83 00       	push   0x836000
   2586d:	68 88 55 08 00       	push   0x85588
   25872:	e8 bc 17 00 00       	call   27033 <printk>
   25877:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:291
printk("\tAHCI_CAPS_ADDRESS=0x%08x\n",AHCI_CAPS_ADDRESS);
   2587a:	83 ec 08             	sub    esp,0x8
   2587d:	68 20 ae 83 00       	push   0x83ae20
   25882:	68 a9 55 08 00       	push   0x855a9
   25887:	e8 a7 17 00 00       	call   27033 <printk>
   2588c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:292
printk("\tTSS_AVAILABLE_ADDRESS=0x%08x\n",TSS_AVAILABLE_ADDRESS);
   2588f:	83 ec 08             	sub    esp,0x8
   25892:	68 40 fc 83 00       	push   0x83fc40
   25897:	68 c4 55 08 00       	push   0x855c4
   2589c:	e8 92 17 00 00       	call   27033 <printk>
   258a1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:293
printk("\tGDT_AVAILABLE_ADDRESS=0x%08x\n",GDT_AVAILABLE_ADDRESS);
   258a4:	83 ec 08             	sub    esp,0x8
   258a7:	68 40 fd 83 00       	push   0x83fd40
   258ac:	68 e4 55 08 00       	push   0x855e4
   258b1:	e8 7d 17 00 00       	call   27033 <printk>
   258b6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:294
printk("\tEXEC_FILE_LOAD_INFO=0x%08x\n",EXEC_FILE_LOAD_INFO);
   258b9:	83 ec 08             	sub    esp,0x8
   258bc:	68 40 ff 83 00       	push   0x83ff40
   258c1:	68 03 56 08 00       	push   0x85603
   258c6:	e8 68 17 00 00       	call   27033 <printk>
   258cb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:295
printk("\tAHCI_ABAR_ADDRESS=0x%08x\n",AHCI_ABAR_ADDRESS);
   258ce:	83 ec 08             	sub    esp,0x8
   258d1:	68 e0 85 85 00       	push   0x8585e0
   258d6:	68 20 56 08 00       	push   0x85620
   258db:	e8 53 17 00 00       	call   27033 <printk>
   258e0:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:296
printk("\tEND_OF_KERNEL_OBJECTS_ADDRESS=0x%08x\n",END_OF_KERNEL_OBJECTS_ADDRESS);
   258e3:	83 ec 08             	sub    esp,0x8
   258e6:	68 e0 85 95 00       	push   0x9585e0
   258eb:	68 3c 56 08 00       	push   0x8563c
   258f0:	e8 3e 17 00 00       	call   27033 <printk>
   258f5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:297
}
   258f8:	90                   	nop
   258f9:	c9                   	leave  
   258fa:	c3                   	ret    

000258fb <pauseDisplay>:
pauseDisplay():
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:300

bool pauseDisplay(bool offerToQuit)
{
   258fb:	55                   	push   ebp
   258fc:	89 e5                	mov    ebp,esp
   258fe:	83 ec 28             	sub    esp,0x28
   25901:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25904:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:301
    if (offerToQuit)
   25907:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   2590b:	74 12                	je     2591f <pauseDisplay+0x24>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:302
        printk("Press q to quit, any other key to continue ...");
   2590d:	83 ec 0c             	sub    esp,0xc
   25910:	68 64 56 08 00       	push   0x85664
   25915:	e8 19 17 00 00       	call   27033 <printk>
   2591a:	83 c4 10             	add    esp,0x10
   2591d:	eb 10                	jmp    2592f <pauseDisplay+0x34>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:304
    else
        printk("Press a key to continue ... ");
   2591f:	83 ec 0c             	sub    esp,0xc
   25922:	68 93 56 08 00       	push   0x85693
   25927:	e8 07 17 00 00       	call   27033 <printk>
   2592c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:305
    char lPressedKey=waitForKeyboardKey();
   2592f:	e8 1e b9 fe ff       	call   11252 <waitForKeyboardKey>
   25934:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:306
    cursorMoveToX(0);
   25937:	83 ec 0c             	sub    esp,0xc
   2593a:	6a 00                	push   0x0
   2593c:	e8 92 25 ff ff       	call   17ed3 <cursorMoveToX>
   25941:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:307
    printk("                                           ");
   25944:	83 ec 0c             	sub    esp,0xc
   25947:	68 b0 56 08 00       	push   0x856b0
   2594c:	e8 e2 16 00 00       	call   27033 <printk>
   25951:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:308
    cursorMoveToX(0);
   25954:	83 ec 0c             	sub    esp,0xc
   25957:	6a 00                	push   0x0
   25959:	e8 75 25 ff ff       	call   17ed3 <cursorMoveToX>
   2595e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:309
    if (lPressedKey=='q' && offerToQuit)
   25961:	80 7d f7 71          	cmp    BYTE PTR [ebp-0x9],0x71
   25965:	75 0d                	jne    25974 <pauseDisplay+0x79>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:309 (discriminator 1)
   25967:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   2596b:	74 07                	je     25974 <pauseDisplay+0x79>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:310
        return true;
   2596d:	b8 01 00 00 00       	mov    eax,0x1
   25972:	eb 05                	jmp    25979 <pauseDisplay+0x7e>
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:311
    return false;
   25974:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:312
}
   25979:	c9                   	leave  
   2597a:	c3                   	ret    

0002597b <mallocTemp>:
mallocTemp():
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:316

int memPtr=0xe00000;
uintptr_t* mallocTemp(int size)
{
   2597b:	55                   	push   ebp
   2597c:	89 e5                	mov    ebp,esp
   2597e:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:317
    uintptr_t lRetVal = memPtr;
   25981:	a1 a0 da 02 00       	mov    eax,ds:0x2daa0
   25986:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:318
    memPtr+=size;
   25989:	8b 15 a0 da 02 00    	mov    edx,DWORD PTR ds:0x2daa0
   2598f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25992:	01 d0                	add    eax,edx
   25994:	a3 a0 da 02 00       	mov    ds:0x2daa0,eax
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:319
    return (uintptr_t*)lRetVal;
   25999:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/NetBeansProjects/chrisOS/src/init/utility.c:320
   2599c:	c9                   	leave  
   2599d:	c3                   	ret    
   2599e:	66 90                	xchg   ax,ax

000259a0 <memcpy>:
memcpy():
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:12
 */
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time
void * memcpy(void *dest, const void *src, size_t n)
{
   259a0:	55                   	push   ebp
   259a1:	89 e5                	mov    ebp,esp
   259a3:	83 ec 20             	sub    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:15
    bool dw,dd;
    
    dd=n%4==0;
   259a6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   259a9:	83 e0 03             	and    eax,0x3
   259ac:	85 c0                	test   eax,eax
   259ae:	0f 94 c0             	sete   al
   259b1:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:16
    dw=n%2==0;
   259b4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   259b7:	83 e0 01             	and    eax,0x1
   259ba:	85 c0                	test   eax,eax
   259bc:	0f 94 c0             	sete   al
   259bf:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:17
    if (dd)
   259c2:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
   259c6:	74 7d                	je     25a45 <memcpy+0xa5>
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:19
    {
        n /=4;
   259c8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   259cb:	c1 e8 02             	shr    eax,0x2
   259ce:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:20
        const uint32_t *f = src;
   259d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   259d4:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:21
        uint32_t *t = dest;
   259d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   259da:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:23

        if (f < t) {
   259dd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   259e0:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
   259e3:	73 4b                	jae    25a30 <memcpy+0x90>
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:24
                f += n;
   259e5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   259e8:	c1 e0 02             	shl    eax,0x2
   259eb:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:25
                t += n;
   259ee:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   259f1:	c1 e0 02             	shl    eax,0x2
   259f4:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:26
                while ( (n)-- > 0)
   259f7:	eb 12                	jmp    25a0b <memcpy+0x6b>
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:27
                        *--t = *--f;
   259f9:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
   259fd:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
   25a01:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   25a04:	8b 10                	mov    edx,DWORD PTR [eax]
   25a06:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   25a09:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:26
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
   25a0b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25a0e:	8d 50 ff             	lea    edx,[eax-0x1]
   25a11:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25a14:	85 c0                	test   eax,eax
   25a16:	75 e1                	jne    259f9 <memcpy+0x59>
   25a18:	eb 23                	jmp    25a3d <memcpy+0x9d>
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:30
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
   25a1a:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   25a1d:	8d 50 04             	lea    edx,[eax+0x4]
   25a20:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   25a23:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   25a26:	8d 4a 04             	lea    ecx,[edx+0x4]
   25a29:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
   25a2c:	8b 12                	mov    edx,DWORD PTR [edx]
   25a2e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:29
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
   25a30:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25a33:	8d 50 ff             	lea    edx,[eax-0x1]
   25a36:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25a39:	85 c0                	test   eax,eax
   25a3b:	75 dd                	jne    25a1a <memcpy+0x7a>
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:31
                        *t++ = *f++;
        return dest;
   25a3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25a40:	e9 ea 00 00 00       	jmp    25b2f <memcpy+0x18f>
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:33
    }
    else if (dw)
   25a45:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
   25a49:	74 79                	je     25ac4 <memcpy+0x124>
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:35
    {
        n /=2;
   25a4b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25a4e:	d1 e8                	shr    eax,1
   25a50:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:36
        const uint32_t *f = src;
   25a53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25a56:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:37
        uint32_t *t = dest;
   25a59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25a5c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:39

        if (f < t) {
   25a5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25a62:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   25a65:	73 4b                	jae    25ab2 <memcpy+0x112>
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:40
                f += n;
   25a67:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25a6a:	c1 e0 02             	shl    eax,0x2
   25a6d:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:41
                t += n;
   25a70:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25a73:	c1 e0 02             	shl    eax,0x2
   25a76:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:42
                while ( (n)-- > 0)
   25a79:	eb 12                	jmp    25a8d <memcpy+0xed>
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:43
                        *--t = *--f;
   25a7b:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
   25a7f:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
   25a83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25a86:	8b 10                	mov    edx,DWORD PTR [eax]
   25a88:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25a8b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:42
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
   25a8d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25a90:	8d 50 ff             	lea    edx,[eax-0x1]
   25a93:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25a96:	85 c0                	test   eax,eax
   25a98:	75 e1                	jne    25a7b <memcpy+0xdb>
   25a9a:	eb 23                	jmp    25abf <memcpy+0x11f>
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:46
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
   25a9c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25a9f:	8d 50 04             	lea    edx,[eax+0x4]
   25aa2:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   25aa5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   25aa8:	8d 4a 04             	lea    ecx,[edx+0x4]
   25aab:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
   25aae:	8b 12                	mov    edx,DWORD PTR [edx]
   25ab0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:45
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
   25ab2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25ab5:	8d 50 ff             	lea    edx,[eax-0x1]
   25ab8:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25abb:	85 c0                	test   eax,eax
   25abd:	75 dd                	jne    25a9c <memcpy+0xfc>
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:47
                        *t++ = *f++;
        return dest;
   25abf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25ac2:	eb 6b                	jmp    25b2f <memcpy+0x18f>
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:51
    }
    else
    {
        const char *f = src;
   25ac4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25ac7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:52
        char *t = dest;
   25aca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25acd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:54

        if (f < t) {
   25ad0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   25ad3:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   25ad6:	73 47                	jae    25b1f <memcpy+0x17f>
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:55
                f += n;
   25ad8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25adb:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:56
                t += n;
   25ade:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25ae1:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:57
                while (n-- > 0)
   25ae4:	eb 13                	jmp    25af9 <memcpy+0x159>
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:58
                        *--t = *--f;
   25ae6:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
   25aea:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
   25aee:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   25af1:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   25af4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   25af7:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:57
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
   25af9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25afc:	8d 50 ff             	lea    edx,[eax-0x1]
   25aff:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25b02:	85 c0                	test   eax,eax
   25b04:	75 e0                	jne    25ae6 <memcpy+0x146>
   25b06:	eb 24                	jmp    25b2c <memcpy+0x18c>
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:61
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
   25b08:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   25b0b:	8d 50 01             	lea    edx,[eax+0x1]
   25b0e:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   25b11:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   25b14:	8d 4a 01             	lea    ecx,[edx+0x1]
   25b17:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
   25b1a:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   25b1d:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:60
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
   25b1f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25b22:	8d 50 ff             	lea    edx,[eax-0x1]
   25b25:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25b28:	85 c0                	test   eax,eax
   25b2a:	75 dc                	jne    25b08 <memcpy+0x168>
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:62
                        *t++ = *f++;
        return dest;
   25b2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/src/memcpy.c:64
    }
   25b2f:	c9                   	leave  
   25b30:	c3                   	ret    
   25b31:	66 90                	xchg   ax,ax
   25b33:	90                   	nop

00025b34 <fat_list_init>:
fat_list_init():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   25b34:	55                   	push   ebp
   25b35:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   25b37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25b3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   25b41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25b44:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   25b47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25b4a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:51
}
   25b4c:	90                   	nop
   25b4d:	5d                   	pop    ebp
   25b4e:	c3                   	ret    

00025b4f <fat_list_remove>:
fat_list_remove():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   25b4f:	55                   	push   ebp
   25b50:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   25b52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25b55:	8b 00                	mov    eax,DWORD PTR [eax]
   25b57:	85 c0                	test   eax,eax
   25b59:	75 0d                	jne    25b68 <fat_list_remove+0x19>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   25b5b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25b5e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   25b61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25b64:	89 10                	mov    DWORD PTR [eax],edx
   25b66:	eb 0e                	jmp    25b76 <fat_list_remove+0x27>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   25b68:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25b6b:	8b 00                	mov    eax,DWORD PTR [eax]
   25b6d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   25b70:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   25b73:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   25b76:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25b79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25b7c:	85 c0                	test   eax,eax
   25b7e:	75 0d                	jne    25b8d <fat_list_remove+0x3e>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   25b80:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25b83:	8b 10                	mov    edx,DWORD PTR [eax]
   25b85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25b88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   25b8b:	eb 0d                	jmp    25b9a <fat_list_remove+0x4b>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   25b8d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25b90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25b93:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   25b96:	8b 12                	mov    edx,DWORD PTR [edx]
   25b98:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:69
}
   25b9a:	90                   	nop
   25b9b:	5d                   	pop    ebp
   25b9c:	c3                   	ret    

00025b9d <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   25b9d:	55                   	push   ebp
   25b9e:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   25ba0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25ba3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   25ba6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   25ba8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25bab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   25bae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25bb1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   25bb4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25bb7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25bba:	85 c0                	test   eax,eax
   25bbc:	75 0b                	jne    25bc9 <fat_list_insert_after+0x2c>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   25bbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25bc1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   25bc4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   25bc7:	eb 0b                	jmp    25bd4 <fat_list_insert_after+0x37>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   25bc9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25bcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25bcf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   25bd2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   25bd4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25bd7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   25bda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:86
}
   25bdd:	90                   	nop
   25bde:	5d                   	pop    ebp
   25bdf:	c3                   	ret    

00025be0 <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   25be0:	55                   	push   ebp
   25be1:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   25be3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25be6:	8b 10                	mov    edx,DWORD PTR [eax]
   25be8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25beb:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   25bed:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25bf0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   25bf3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   25bf6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25bf9:	8b 00                	mov    eax,DWORD PTR [eax]
   25bfb:	85 c0                	test   eax,eax
   25bfd:	75 0a                	jne    25c09 <fat_list_insert_before+0x29>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   25bff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25c02:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   25c05:	89 10                	mov    DWORD PTR [eax],edx
   25c07:	eb 0b                	jmp    25c14 <fat_list_insert_before+0x34>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   25c09:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25c0c:	8b 00                	mov    eax,DWORD PTR [eax]
   25c0e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   25c11:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   25c14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25c17:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   25c1a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:103
}
   25c1c:	90                   	nop
   25c1d:	5d                   	pop    ebp
   25c1e:	c3                   	ret    

00025c1f <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   25c1f:	55                   	push   ebp
   25c20:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   25c22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25c25:	8b 00                	mov    eax,DWORD PTR [eax]
   25c27:	85 c0                	test   eax,eax
   25c29:	75 26                	jne    25c51 <fat_list_insert_first+0x32>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   25c2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25c2e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   25c31:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   25c33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25c36:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   25c39:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   25c3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25c3f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   25c45:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25c48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   25c4f:	eb 14                	jmp    25c65 <fat_list_insert_first+0x46>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   25c51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25c54:	8b 00                	mov    eax,DWORD PTR [eax]
   25c56:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   25c59:	50                   	push   eax
   25c5a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   25c5d:	e8 7e ff ff ff       	call   25be0 <fat_list_insert_before>
   25c62:	83 c4 0c             	add    esp,0xc
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:121
}
   25c65:	90                   	nop
   25c66:	c9                   	leave  
   25c67:	c3                   	ret    

00025c68 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   25c68:	55                   	push   ebp
   25c69:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   25c6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25c6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25c71:	85 c0                	test   eax,eax
   25c73:	75 10                	jne    25c85 <fat_list_insert_last+0x1d>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   25c75:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   25c78:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   25c7b:	e8 9f ff ff ff       	call   25c1f <fat_list_insert_first>
   25c80:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   25c83:	eb 15                	jmp    25c9a <fat_list_insert_last+0x32>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   25c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25c88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25c8b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   25c8e:	50                   	push   eax
   25c8f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   25c92:	e8 06 ff ff ff       	call   25b9d <fat_list_insert_after>
   25c97:	83 c4 0c             	add    esp,0xc
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:134
}
   25c9a:	90                   	nop
   25c9b:	c9                   	leave  
   25c9c:	c3                   	ret    

00025c9d <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   25c9d:	55                   	push   ebp
   25c9e:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   25ca0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25ca3:	8b 00                	mov    eax,DWORD PTR [eax]
   25ca5:	85 c0                	test   eax,eax
   25ca7:	0f 94 c0             	sete   al
   25caa:	0f b6 c0             	movzx  eax,al
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:143
}
   25cad:	5d                   	pop    ebp
   25cae:	c3                   	ret    

00025caf <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   25caf:	55                   	push   ebp
   25cb0:	89 e5                	mov    ebp,esp
   25cb2:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   25cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25cb8:	8b 00                	mov    eax,DWORD PTR [eax]
   25cba:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:154
    if (node)
   25cbd:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   25cc1:	74 0e                	je     25cd1 <fat_list_pop_head+0x22>
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   25cc3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   25cc6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   25cc9:	e8 81 fe ff ff       	call   25b4f <fat_list_remove>
   25cce:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:157

    return node;
   25cd1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/NetBeansProjects/chrisOS/src/fat/fat_list.h:158
}
   25cd4:	c9                   	leave  
   25cd5:	c3                   	ret    

00025cd6 <processELFDynamicSection>:
processELFDynamicSection():
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:19
uint32_t libLoadOffset=LIBRARY_BASE_LOAD_ADDRESS;
extern int kExecLoadCount;
extern elfInfo_t* KERNEL_DATA_SECTION kExecLoadInfo;

void processELFDynamicSection(elfInfo_t* elfInfo)
{
   25cd6:	55                   	push   ebp
   25cd7:	89 e5                	mov    ebp,esp
   25cd9:	57                   	push   edi
   25cda:	53                   	push   ebx
   25cdb:	83 c4 80             	add    esp,0xffffff80
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:20
    Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;
   25cde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25ce1:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   25ce7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:23

    //Next process the rest of the dynamic section entries
    elfInfo->dynamicInfo.neededCount=0;
   25cea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25ced:	c7 80 a0 18 00 00 00 	mov    DWORD PTR [eax+0x18a0],0x0
   25cf4:	00 00 00 
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:24
    for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   25cf7:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   25cfe:	e9 61 04 00 00       	jmp    26164 <processELFDynamicSection+0x48e>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:26
    {
        switch (dyn[cnt].d_tag)
   25d03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25d06:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   25d0d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25d10:	01 d0                	add    eax,edx
   25d12:	8b 00                	mov    eax,DWORD PTR [eax]
   25d14:	83 f8 1e             	cmp    eax,0x1e
   25d17:	0f 87 3f 04 00 00    	ja     2615c <processELFDynamicSection+0x486>
   25d1d:	8b 04 85 fc 58 08 00 	mov    eax,DWORD PTR [eax*4+0x858fc]
   25d24:	ff e0                	jmp    eax
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:30
        {
            //DT_NEEDED is a library which we need to load
            case DT_NEEDED:
                printk("ELF at: 0x%08X, copy to: 0x%08X, neededCount=0x%08X\n",elfInfo, elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount],elfInfo->dynamicInfo.neededCount);
   25d26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25d29:	8b 80 a0 18 00 00    	mov    eax,DWORD PTR [eax+0x18a0]
   25d2f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   25d32:	8b 92 a0 18 00 00    	mov    edx,DWORD PTR [edx+0x18a0]
   25d38:	c1 e2 08             	shl    edx,0x8
   25d3b:	8d 8a 50 0e 00 00    	lea    ecx,[edx+0xe50]
   25d41:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   25d44:	01 ca                	add    edx,ecx
   25d46:	83 c2 04             	add    edx,0x4
   25d49:	50                   	push   eax
   25d4a:	52                   	push   edx
   25d4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   25d4e:	68 e0 57 08 00       	push   0x857e0
   25d53:	e8 db 12 00 00       	call   27033 <printk>
   25d58:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:31
                strcpy(elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount++],(char*)(elfInfo->dynamicInfo.strTableAddress+dyn[cnt].d_un.d_ptr));
   25d5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25d5e:	8b 90 b8 18 00 00    	mov    edx,DWORD PTR [eax+0x18b8]
   25d64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25d67:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
   25d6e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25d71:	01 c8                	add    eax,ecx
   25d73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25d76:	01 d0                	add    eax,edx
   25d78:	89 c3                	mov    ebx,eax
   25d7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25d7d:	8b 80 a0 18 00 00    	mov    eax,DWORD PTR [eax+0x18a0]
   25d83:	8d 48 01             	lea    ecx,[eax+0x1]
   25d86:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   25d89:	89 8a a0 18 00 00    	mov    DWORD PTR [edx+0x18a0],ecx
   25d8f:	c1 e0 08             	shl    eax,0x8
   25d92:	8d 90 50 0e 00 00    	lea    edx,[eax+0xe50]
   25d98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25d9b:	01 d0                	add    eax,edx
   25d9d:	83 c0 04             	add    eax,0x4
   25da0:	83 ec 08             	sub    esp,0x8
   25da3:	53                   	push   ebx
   25da4:	50                   	push   eax
   25da5:	e8 ea 13 00 00       	call   27194 <strcpy>
   25daa:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:32
                char fileName[100]="/";
   25dad:	c7 45 84 2f 00 00 00 	mov    DWORD PTR [ebp-0x7c],0x2f
   25db4:	8d 55 88             	lea    edx,[ebp-0x78]
   25db7:	b8 00 00 00 00       	mov    eax,0x0
   25dbc:	b9 18 00 00 00       	mov    ecx,0x18
   25dc1:	89 d7                	mov    edi,edx
   25dc3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:33
                strcat(fileName,elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount-1]);
   25dc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25dc8:	8b 80 a0 18 00 00    	mov    eax,DWORD PTR [eax+0x18a0]
   25dce:	83 e8 01             	sub    eax,0x1
   25dd1:	c1 e0 08             	shl    eax,0x8
   25dd4:	8d 90 50 0e 00 00    	lea    edx,[eax+0xe50]
   25dda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25ddd:	01 d0                	add    eax,edx
   25ddf:	83 c0 04             	add    eax,0x4
   25de2:	83 ec 08             	sub    esp,0x8
   25de5:	50                   	push   eax
   25de6:	8d 45 84             	lea    eax,[ebp-0x7c]
   25de9:	50                   	push   eax
   25dea:	e8 bd 12 00 00       	call   270ac <strcat>
   25def:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:34
                printd(DEBUG_ELF_LOADER,"Found NEEDED, library name='%s', orig name='%s'\n",fileName,elfInfo->dynamicInfo.strTableAddress+dyn[cnt].d_un.d_ptr);
   25df2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25df5:	8b 90 b8 18 00 00    	mov    edx,DWORD PTR [eax+0x18b8]
   25dfb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25dfe:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
   25e05:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25e08:	01 c8                	add    eax,ecx
   25e0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25e0d:	01 d0                	add    eax,edx
   25e0f:	50                   	push   eax
   25e10:	8d 45 84             	lea    eax,[ebp-0x7c]
   25e13:	50                   	push   eax
   25e14:	68 18 58 08 00       	push   0x85818
   25e19:	68 00 02 00 00       	push   0x200
   25e1e:	e8 30 12 00 00       	call   27053 <printd>
   25e23:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:35
                if (kDebugLevel&DEBUG_ELF_LOADER)
   25e26:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   25e2b:	25 00 02 00 00       	and    eax,0x200
   25e30:	85 c0                	test   eax,eax
   25e32:	74 1e                	je     25e52 <processELFDynamicSection+0x17c>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:37
                {
                    printd(DEBUG_ELF_LOADER,"loadElf: Calling loadElf again to load '%s' ... press a key to continue\n",&fileName);
   25e34:	83 ec 04             	sub    esp,0x4
   25e37:	8d 45 84             	lea    eax,[ebp-0x7c]
   25e3a:	50                   	push   eax
   25e3b:	68 4c 58 08 00       	push   0x8584c
   25e40:	68 00 02 00 00       	push   0x200
   25e45:	e8 09 12 00 00       	call   27053 <printd>
   25e4a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:38
                    waitForKeyboardKey();
   25e4d:	e8 00 b4 fe ff       	call   11252 <waitForKeyboardKey>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:40
                }
                void* fPtr=fopen(fileName, "r");
   25e52:	83 ec 08             	sub    esp,0x8
   25e55:	68 95 58 08 00       	push   0x85895
   25e5a:	8d 45 84             	lea    eax,[ebp-0x7c]
   25e5d:	50                   	push   eax
   25e5e:	e8 4a 75 ff ff       	call   1d3ad <fl_fopen>
   25e63:	83 c4 10             	add    esp,0x10
   25e66:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:41
                if (fPtr==0)
   25e69:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   25e6d:	75 23                	jne    25e92 <processELFDynamicSection+0x1bc>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:43
                {
                    printk("Error opening file '%s', cannot exec\n",fileName);
   25e6f:	83 ec 08             	sub    esp,0x8
   25e72:	8d 45 84             	lea    eax,[ebp-0x7c]
   25e75:	50                   	push   eax
   25e76:	68 98 58 08 00       	push   0x85898
   25e7b:	e8 b3 11 00 00       	call   27033 <printk>
   25e80:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:44
                    elfInfo->loadCompleted=false;
   25e83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25e86:	c6 80 d4 18 00 00 00 	mov    BYTE PTR [eax+0x18d4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:45
                    return;
   25e8d:	e9 e4 02 00 00       	jmp    26176 <processELFDynamicSection+0x4a0>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:47
                }   
                elfInfo->dynamicInfo.neededExecLoadNum[elfInfo->dynamicInfo.neededPtr++]=kExecLoadCount;
   25e92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25e95:	8b 80 54 18 00 00    	mov    eax,DWORD PTR [eax+0x1854]
   25e9b:	8d 48 01             	lea    ecx,[eax+0x1]
   25e9e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   25ea1:	89 8a 54 18 00 00    	mov    DWORD PTR [edx+0x1854],ecx
   25ea7:	8b 0d 04 04 a0 00    	mov    ecx,DWORD PTR ds:0xa00404
   25ead:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   25eb0:	05 14 06 00 00       	add    eax,0x614
   25eb5:	89 4c 82 08          	mov    DWORD PTR [edx+eax*4+0x8],ecx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:48
                elfInfo_t* elfLibPtr=&kExecLoadInfo[kExecLoadCount++];
   25eb9:	8b 0d 00 04 a0 00    	mov    ecx,DWORD PTR ds:0xa00400
   25ebf:	a1 04 04 a0 00       	mov    eax,ds:0xa00404
   25ec4:	8d 50 01             	lea    edx,[eax+0x1]
   25ec7:	89 15 04 04 a0 00    	mov    DWORD PTR ds:0xa00404,edx
   25ecd:	69 c0 d8 18 00 00    	imul   eax,eax,0x18d8
   25ed3:	01 c8                	add    eax,ecx
   25ed5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:49
                loadElf(fPtr,elfLibPtr,true);
   25ed8:	83 ec 04             	sub    esp,0x4
   25edb:	6a 01                	push   0x1
   25edd:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   25ee0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   25ee3:	e8 5b 08 00 00       	call   26743 <loadElf>
   25ee8:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:50
                fclose(fPtr);
   25eeb:	83 ec 0c             	sub    esp,0xc
   25eee:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   25ef1:	e8 e8 78 ff ff       	call   1d7de <fl_fclose>
   25ef6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:51
                if (!elfLibPtr->loadCompleted)
   25ef9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   25efc:	0f b6 80 d4 18 00 00 	movzx  eax,BYTE PTR [eax+0x18d4]
   25f03:	83 f0 01             	xor    eax,0x1
   25f06:	84 c0                	test   al,al
   25f08:	0f 84 51 02 00 00    	je     2615f <processELFDynamicSection+0x489>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:53
                {
                    printd(DEBUG_ELF_LOADER,"EXEC: processELFDynamicSection ... loading library failed.");
   25f0e:	83 ec 08             	sub    esp,0x8
   25f11:	68 c0 58 08 00       	push   0x858c0
   25f16:	68 00 02 00 00       	push   0x200
   25f1b:	e8 33 11 00 00       	call   27053 <printd>
   25f20:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:54
                    elfInfo->loadCompleted=false;
   25f23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25f26:	c6 80 d4 18 00 00 00 	mov    BYTE PTR [eax+0x18d4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:55
                    return;
   25f2d:	90                   	nop
   25f2e:	e9 43 02 00 00       	jmp    26176 <processELFDynamicSection+0x4a0>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:59
                }
                break;
            case DT_PLTRELSZ:
                elfInfo->dynamicInfo.pltGOTTableTableSize=dyn[cnt].d_un.d_val;
   25f33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   25f3d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25f40:	01 d0                	add    eax,edx
   25f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25f45:	89 c2                	mov    edx,eax
   25f47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25f4a:	89 90 98 18 00 00    	mov    DWORD PTR [eax+0x1898],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:60
                break;
   25f50:	e9 0b 02 00 00       	jmp    26160 <processELFDynamicSection+0x48a>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:62
            case DT_PLTGOT:
                elfInfo->dynamicInfo.pltGOTTableAddress=dyn[cnt].d_un.d_ptr;
   25f55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   25f5f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25f62:	01 d0                	add    eax,edx
   25f64:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   25f67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25f6a:	89 90 b0 18 00 00    	mov    DWORD PTR [eax+0x18b0],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:63
                break;
   25f70:	e9 eb 01 00 00       	jmp    26160 <processELFDynamicSection+0x48a>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:65
            case DT_HASH:
                elfInfo->dynamicInfo.hashTableAddress=dyn[cnt].d_un.d_ptr;
   25f75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25f78:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   25f7f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25f82:	01 d0                	add    eax,edx
   25f84:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   25f87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25f8a:	89 90 b4 18 00 00    	mov    DWORD PTR [eax+0x18b4],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:66
                break;
   25f90:	e9 cb 01 00 00       	jmp    26160 <processELFDynamicSection+0x48a>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:74
                break;
            case DT_SYMTAB:
                //Already found it above
                break;
            case DT_RELA:
                elfInfo->dynamicInfo.relATableAddress=dyn[cnt].d_un.d_ptr;
   25f95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25f98:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   25f9f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25fa2:	01 d0                	add    eax,edx
   25fa4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   25fa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25faa:	89 90 c0 18 00 00    	mov    DWORD PTR [eax+0x18c0],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:75
                break;
   25fb0:	e9 ab 01 00 00       	jmp    26160 <processELFDynamicSection+0x48a>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:77
            case DT_RELASZ:
                elfInfo->dynamicInfo.relATableSize=dyn[cnt].d_un.d_val;
   25fb5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25fb8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   25fbf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25fc2:	01 d0                	add    eax,edx
   25fc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25fc7:	89 c2                	mov    edx,eax
   25fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25fcc:	89 90 84 18 00 00    	mov    DWORD PTR [eax+0x1884],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:78
                break;
   25fd2:	e9 89 01 00 00       	jmp    26160 <processELFDynamicSection+0x48a>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:80
            case DT_RELAENT:
                elfInfo->dynamicInfo.relAEntrySize=dyn[cnt].d_un.d_val;
   25fd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25fda:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   25fe1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25fe4:	01 d0                	add    eax,edx
   25fe6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25fe9:	89 c2                	mov    edx,eax
   25feb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25fee:	89 90 88 18 00 00    	mov    DWORD PTR [eax+0x1888],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:81
                break;
   25ff4:	e9 67 01 00 00       	jmp    26160 <processELFDynamicSection+0x48a>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:83
            case DT_STRSZ:
                elfInfo->dynamicInfo.strTableSize=dyn[cnt].d_un.d_val;
   25ff9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25ffc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26003:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26006:	01 d0                	add    eax,edx
   26008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2600b:	89 c2                	mov    edx,eax
   2600d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26010:	89 90 8c 18 00 00    	mov    DWORD PTR [eax+0x188c],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:84
                break;
   26016:	e9 45 01 00 00       	jmp    26160 <processELFDynamicSection+0x48a>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:86
            case DT_SYMENT:
                elfInfo->dynamicInfo.symEntrySize=dyn[cnt].d_un.d_val;
   2601b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2601e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26025:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26028:	01 d0                	add    eax,edx
   2602a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2602d:	89 c2                	mov    edx,eax
   2602f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26032:	89 90 90 18 00 00    	mov    DWORD PTR [eax+0x1890],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:87
                break;
   26038:	e9 23 01 00 00       	jmp    26160 <processELFDynamicSection+0x48a>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:89
            case DT_INIT:
                elfInfo->dynamicInfo.initFunctionAddress=dyn[cnt].d_un.d_ptr;
   2603d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26040:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26047:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2604a:	01 d0                	add    eax,edx
   2604c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   2604f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26052:	89 90 c4 18 00 00    	mov    DWORD PTR [eax+0x18c4],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:90
                elfInfo->dynamicInfo.initFunctionAddress+=libLoadOffset;
   26058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2605b:	8b 90 c4 18 00 00    	mov    edx,DWORD PTR [eax+0x18c4]
   26061:	a1 a4 da 02 00       	mov    eax,ds:0x2daa4
   26066:	01 c2                	add    edx,eax
   26068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2606b:	89 90 c4 18 00 00    	mov    DWORD PTR [eax+0x18c4],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:91
                break;
   26071:	e9 ea 00 00 00       	jmp    26160 <processELFDynamicSection+0x48a>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:93
            case DT_FINI:
                elfInfo->dynamicInfo.termFunctionAddress=dyn[cnt].d_un.d_ptr;
   26076:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26079:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26080:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26083:	01 d0                	add    eax,edx
   26085:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26088:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2608b:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:94
                elfInfo->dynamicInfo.termFunctionAddress+=libLoadOffset;
   26091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26094:	8b 90 c8 18 00 00    	mov    edx,DWORD PTR [eax+0x18c8]
   2609a:	a1 a4 da 02 00       	mov    eax,ds:0x2daa4
   2609f:	01 c2                	add    edx,eax
   260a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   260a4:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:95
                break;
   260aa:	e9 b1 00 00 00       	jmp    26160 <processELFDynamicSection+0x48a>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:105
                //Can't find the relocation section this way, using section headers
                //elfInfo->dynamicInfo.relTableAddress=dyn[cnt].d_un.d_ptr;
                //printk("%s: Found DT_REL, address=0x%08X (0x%08X)\n",isLibrary?"library":"executable",dyn[cnt].d_un.d_ptr,elfInfo->dynamicInfo.relTableAddress);
                break;
            case DT_RELSZ:
                elfInfo->dynamicInfo.relTableSize=dyn[cnt].d_un.d_val;
   260af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   260b2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   260b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   260bc:	01 d0                	add    eax,edx
   260be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   260c1:	89 c2                	mov    edx,eax
   260c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   260c6:	89 90 94 18 00 00    	mov    DWORD PTR [eax+0x1894],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:106
                break;
   260cc:	e9 8f 00 00 00       	jmp    26160 <processELFDynamicSection+0x48a>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:108
            case DT_RELENT:
                elfInfo->dynamicInfo.relEntrySize=dyn[cnt].d_un.d_val;
   260d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   260d4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   260db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   260de:	01 d0                	add    eax,edx
   260e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   260e3:	89 c2                	mov    edx,eax
   260e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   260e8:	89 90 9c 18 00 00    	mov    DWORD PTR [eax+0x189c],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:109
                break;
   260ee:	eb 70                	jmp    26160 <processELFDynamicSection+0x48a>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:121
            case DT_JMPREL:
                break;
            case DT_BIND_NOW:
                break;
            case DT_INIT_ARRAY:
                elfInfo->dynamicInfo.initFunctionAddress=dyn[cnt].d_un.d_ptr;
   260f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   260f3:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   260fa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   260fd:	01 d0                	add    eax,edx
   260ff:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26102:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26105:	89 90 c4 18 00 00    	mov    DWORD PTR [eax+0x18c4],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:122
                elfInfo->dynamicInfo.initFunctionAddress+=libLoadOffset;
   2610b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2610e:	8b 90 c4 18 00 00    	mov    edx,DWORD PTR [eax+0x18c4]
   26114:	a1 a4 da 02 00       	mov    eax,ds:0x2daa4
   26119:	01 c2                	add    edx,eax
   2611b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2611e:	89 90 c4 18 00 00    	mov    DWORD PTR [eax+0x18c4],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:123
                break;
   26124:	eb 3a                	jmp    26160 <processELFDynamicSection+0x48a>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:125
            case DT_FINI_ARRAY:
                elfInfo->dynamicInfo.termFunctionAddress=dyn[cnt].d_un.d_ptr;
   26126:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26129:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26130:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26133:	01 d0                	add    eax,edx
   26135:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26138:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2613b:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:126
                elfInfo->dynamicInfo.termFunctionAddress+=libLoadOffset;
   26141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26144:	8b 90 c8 18 00 00    	mov    edx,DWORD PTR [eax+0x18c8]
   2614a:	a1 a4 da 02 00       	mov    eax,ds:0x2daa4
   2614f:	01 c2                	add    edx,eax
   26151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26154:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:127
                break;
   2615a:	eb 04                	jmp    26160 <processELFDynamicSection+0x48a>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:135
            case DT_FINI_ARRAYSZ:
                break;
            case DT_FLAGS:
                break;
            default:
                break;
   2615c:	90                   	nop
   2615d:	eb 01                	jmp    26160 <processELFDynamicSection+0x48a>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:57
                {
                    printd(DEBUG_ELF_LOADER,"EXEC: processELFDynamicSection ... loading library failed.");
                    elfInfo->loadCompleted=false;
                    return;
                }
                break;
   2615f:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:24
{
    Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;

    //Next process the rest of the dynamic section entries
    elfInfo->dynamicInfo.neededCount=0;
    for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   26160:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:24 (discriminator 1)
   26164:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26167:	8b 80 4c 0e 00 00    	mov    eax,DWORD PTR [eax+0xe4c]
   2616d:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   26170:	0f 8f 8d fb ff ff    	jg     25d03 <processELFDynamicSection+0x2d>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:139
            default:
                break;
        }
    }

}
   26176:	8d 65 f8             	lea    esp,[ebp-0x8]
   26179:	5b                   	pop    ebx
   2617a:	5f                   	pop    edi
   2617b:	5d                   	pop    ebp
   2617c:	c3                   	ret    

0002617d <loadSections>:
loadSections():
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:142

void loadSections(void* file,elfInfo_t* elfInfo, bool isLibrary)
{
   2617d:	55                   	push   ebp
   2617e:	89 e5                	mov    ebp,esp
   26180:	53                   	push   ebx
   26181:	83 ec 24             	sub    esp,0x24
   26184:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26187:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:146
    uint8_t* loadAddress;

    //Go to the beginning of the file and get the elf header
    fl_fseek(file, 0, SEEK_SET);
   2618a:	83 ec 04             	sub    esp,0x4
   2618d:	6a 00                	push   0x0
   2618f:	6a 00                	push   0x0
   26191:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26194:	e8 00 7a ff ff       	call   1db99 <fl_fseek>
   26199:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:147
    fl_fread(&elfInfo->hdr, sizeof(elfInfo->hdr),1,file);
   2619c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2619f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   261a2:	6a 01                	push   0x1
   261a4:	6a 34                	push   0x34
   261a6:	50                   	push   eax
   261a7:	e8 ce 77 ff ff       	call   1d97a <fl_fread>
   261ac:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:148
    if (elfInfo->hdr.e_ident[0] != 0x7F) 
   261af:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   261b2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   261b5:	3c 7f                	cmp    al,0x7f
   261b7:	74 66                	je     2621f <loadSections+0xa2>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:149
        if (elfInfo->hdr.e_ident[1] != 'E') 
   261b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   261bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   261c0:	3c 45                	cmp    al,0x45
   261c2:	74 5b                	je     2621f <loadSections+0xa2>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:150
            if (elfInfo->hdr.e_ident[1] != 'L') 
   261c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   261c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   261cb:	3c 4c                	cmp    al,0x4c
   261cd:	74 50                	je     2621f <loadSections+0xa2>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:151
                if (elfInfo->hdr.e_ident[2] != 'F')
   261cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   261d2:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   261d6:	3c 46                	cmp    al,0x46
   261d8:	74 45                	je     2621f <loadSections+0xa2>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:153
                {
                    printd(DEBUG_ELF_LOADER,"Invalid ELF magic '%c' '%c' '%c', cannot load", elfInfo->hdr.e_ident[1], elfInfo->hdr.e_ident[2], elfInfo->hdr.e_ident[3]);
   261da:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   261dd:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   261e1:	0f b6 c8             	movzx  ecx,al
   261e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   261e7:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   261eb:	0f b6 d0             	movzx  edx,al
   261ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   261f1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   261f5:	0f b6 c0             	movzx  eax,al
   261f8:	83 ec 0c             	sub    esp,0xc
   261fb:	51                   	push   ecx
   261fc:	52                   	push   edx
   261fd:	50                   	push   eax
   261fe:	68 78 59 08 00       	push   0x85978
   26203:	68 00 02 00 00       	push   0x200
   26208:	e8 46 0e 00 00       	call   27053 <printd>
   2620d:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:154
                    elfInfo->loadCompleted=false;
   26210:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26213:	c6 80 d4 18 00 00 00 	mov    BYTE PTR [eax+0x18d4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:155
                    return;
   2621a:	e9 1f 05 00 00       	jmp    2673e <loadSections+0x5c1>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:159
                }
    
    //Make sure the file is viable
    if (elfInfo->hdr.e_type!=ET_EXEC && elfInfo->hdr.e_type!=ET_DYN)
   2621f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26222:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   26226:	66 83 f8 02          	cmp    ax,0x2
   2622a:	74 3c                	je     26268 <loadSections+0xeb>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:159 (discriminator 1)
   2622c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2622f:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   26233:	66 83 f8 03          	cmp    ax,0x3
   26237:	74 2f                	je     26268 <loadSections+0xeb>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:161
    {
        printd(DEBUG_ELF_LOADER,"Wrong ELF type 0x%04X, cannot load\n", elfInfo->hdr.e_type);
   26239:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2623c:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   26240:	0f b7 c0             	movzx  eax,ax
   26243:	83 ec 04             	sub    esp,0x4
   26246:	50                   	push   eax
   26247:	68 a8 59 08 00       	push   0x859a8
   2624c:	68 00 02 00 00       	push   0x200
   26251:	e8 fd 0d 00 00       	call   27053 <printd>
   26256:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:162
        elfInfo->loadCompleted=false;
   26259:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2625c:	c6 80 d4 18 00 00 00 	mov    BYTE PTR [eax+0x18d4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:163
        return;
   26263:	e9 d6 04 00 00       	jmp    2673e <loadSections+0x5c1>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:165
    }
    if (elfInfo->hdr.e_machine!=EM_386)
   26268:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2626b:	0f b7 40 12          	movzx  eax,WORD PTR [eax+0x12]
   2626f:	66 83 f8 03          	cmp    ax,0x3
   26273:	74 2f                	je     262a4 <loadSections+0x127>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:167
    {
        printd(DEBUG_ELF_LOADER,"Wrong ELF architecture 0x%04X, cannot load\n", elfInfo->hdr.e_type);
   26275:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26278:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   2627c:	0f b7 c0             	movzx  eax,ax
   2627f:	83 ec 04             	sub    esp,0x4
   26282:	50                   	push   eax
   26283:	68 cc 59 08 00       	push   0x859cc
   26288:	68 00 02 00 00       	push   0x200
   2628d:	e8 c1 0d 00 00       	call   27053 <printd>
   26292:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:168
        elfInfo->loadCompleted=false;
   26295:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26298:	c6 80 d4 18 00 00 00 	mov    BYTE PTR [eax+0x18d4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:169
        return;
   2629f:	e9 9a 04 00 00       	jmp    2673e <loadSections+0x5c1>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:173
    }
    
    //Get the section header table
    printd(DEBUG_ELF_LOADER,"section header record count= %u\n", elfInfo->hdr.e_shnum);
   262a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   262a7:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
   262ab:	0f b7 c0             	movzx  eax,ax
   262ae:	83 ec 04             	sub    esp,0x4
   262b1:	50                   	push   eax
   262b2:	68 f8 59 08 00       	push   0x859f8
   262b7:	68 00 02 00 00       	push   0x200
   262bc:	e8 92 0d 00 00       	call   27053 <printd>
   262c1:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:174
    printd(DEBUG_ELF_LOADER,"e_shentsize=%u, oursize=%u\n", elfInfo->hdr.e_shentsize, sizeof(Elf32_Shdr) );
   262c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   262c7:	0f b7 40 2e          	movzx  eax,WORD PTR [eax+0x2e]
   262cb:	0f b7 c0             	movzx  eax,ax
   262ce:	6a 28                	push   0x28
   262d0:	50                   	push   eax
   262d1:	68 19 5a 08 00       	push   0x85a19
   262d6:	68 00 02 00 00       	push   0x200
   262db:	e8 73 0d 00 00       	call   27053 <printd>
   262e0:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:175
    fl_fseek(file, elfInfo->hdr.e_shoff,SEEK_SET);
   262e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   262e6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   262e9:	83 ec 04             	sub    esp,0x4
   262ec:	6a 00                	push   0x0
   262ee:	50                   	push   eax
   262ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   262f2:	e8 a2 78 ff ff       	call   1db99 <fl_fseek>
   262f7:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:176
    printd(DEBUG_ELF_LOADER,"reading SHOFF\n",elfInfo->hdr.e_shoff);
   262fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   262fd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   26300:	83 ec 04             	sub    esp,0x4
   26303:	50                   	push   eax
   26304:	68 35 5a 08 00       	push   0x85a35
   26309:	68 00 02 00 00       	push   0x200
   2630e:	e8 40 0d 00 00       	call   27053 <printd>
   26313:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:177
    fl_fread(elfInfo->secHdrTable, sizeof(Elf32_Shdr),elfInfo->hdr.e_shnum,file);
   26316:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26319:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
   2631d:	0f b7 c0             	movzx  eax,ax
   26320:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   26323:	83 c2 34             	add    edx,0x34
   26326:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26329:	50                   	push   eax
   2632a:	6a 28                	push   0x28
   2632c:	52                   	push   edx
   2632d:	e8 48 76 ff ff       	call   1d97a <fl_fread>
   26332:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:180
    
    //Get the program header table
    printd(DEBUG_ELF_LOADER,"seeking to 0x%08X ...",elfInfo->hdr.e_phoff);
   26335:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26338:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   2633b:	83 ec 04             	sub    esp,0x4
   2633e:	50                   	push   eax
   2633f:	68 44 5a 08 00       	push   0x85a44
   26344:	68 00 02 00 00       	push   0x200
   26349:	e8 05 0d 00 00       	call   27053 <printd>
   2634e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:181
    printd(DEBUG_ELF_LOADER,"reading PHOFF\n",elfInfo->hdr.e_phoff);
   26351:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26354:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   26357:	83 ec 04             	sub    esp,0x4
   2635a:	50                   	push   eax
   2635b:	68 5a 5a 08 00       	push   0x85a5a
   26360:	68 00 02 00 00       	push   0x200
   26365:	e8 e9 0c 00 00       	call   27053 <printd>
   2636a:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:182
    fl_fseek(file, elfInfo->hdr.e_phoff, SEEK_SET);
   2636d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26370:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   26373:	83 ec 04             	sub    esp,0x4
   26376:	6a 00                	push   0x0
   26378:	50                   	push   eax
   26379:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2637c:	e8 18 78 ff ff       	call   1db99 <fl_fseek>
   26381:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:183
    fl_fread(elfInfo->pgmHdrTable, sizeof(Elf32_Phdr),elfInfo->hdr.e_phnum,file);
   26384:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26387:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
   2638b:	0f b7 c0             	movzx  eax,ax
   2638e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   26391:	81 c2 04 08 00 00    	add    edx,0x804
   26397:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2639a:	50                   	push   eax
   2639b:	6a 20                	push   0x20
   2639d:	52                   	push   edx
   2639e:	e8 d7 75 ff ff       	call   1d97a <fl_fread>
   263a3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:186
    
    //Process the program header table and load all of the sections in the file into memory
    for (int cnt=0;cnt<elfInfo->hdr.e_phnum;cnt++)
   263a6:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   263ad:	e9 64 03 00 00       	jmp    26716 <loadSections+0x599>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:188
    {
        loadAddress = (uint8_t*)elfInfo->pgmHdrTable[cnt].p_vaddr;
   263b2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   263b5:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   263b8:	83 c2 40             	add    edx,0x40
   263bb:	c1 e2 05             	shl    edx,0x5
   263be:	01 d0                	add    eax,edx
   263c0:	83 c0 0c             	add    eax,0xc
   263c3:	8b 00                	mov    eax,DWORD PTR [eax]
   263c5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:189
        if (isLibrary)
   263c8:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   263cc:	74 1e                	je     263ec <loadSections+0x26f>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:191
        {
            loadAddress+=libLoadOffset;
   263ce:	a1 a4 da 02 00       	mov    eax,ds:0x2daa4
   263d3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:192
            elfInfo->pgmHdrTable[cnt].p_vaddr=loadAddress;
   263d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   263d9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   263dc:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   263df:	83 c1 40             	add    ecx,0x40
   263e2:	c1 e1 05             	shl    ecx,0x5
   263e5:	01 ca                	add    edx,ecx
   263e7:	83 c2 0c             	add    edx,0xc
   263ea:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:195
        }

        if (elfInfo->pgmHdrTable[cnt].p_vaddr==KERNEL_DATA_LOAD_ADDRESS)
   263ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   263ef:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   263f2:	83 c2 40             	add    edx,0x40
   263f5:	c1 e2 05             	shl    edx,0x5
   263f8:	01 d0                	add    eax,edx
   263fa:	83 c0 0c             	add    eax,0xc
   263fd:	8b 00                	mov    eax,DWORD PTR [eax]
   263ff:	3d 00 00 00 02       	cmp    eax,0x2000000
   26404:	75 1d                	jne    26423 <loadSections+0x2a6>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:197
        {
            printd(DEBUG_ELF_LOADER,"Section %u load address is kernel data base address (0x%08X), skipping load\n",cnt,loadAddress);
   26406:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26409:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   2640c:	68 6c 5a 08 00       	push   0x85a6c
   26411:	68 00 02 00 00       	push   0x200
   26416:	e8 38 0c 00 00       	call   27053 <printd>
   2641b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:198
            continue;
   2641e:	e9 ef 02 00 00       	jmp    26712 <loadSections+0x595>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:200
        }
        else if (elfInfo->pgmHdrTable[cnt].p_offset==elfInfo->hdr.e_phoff)
   26423:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26426:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26429:	83 c2 40             	add    edx,0x40
   2642c:	c1 e2 05             	shl    edx,0x5
   2642f:	01 d0                	add    eax,edx
   26431:	83 c0 08             	add    eax,0x8
   26434:	8b 10                	mov    edx,DWORD PTR [eax]
   26436:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26439:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   2643c:	39 c2                	cmp    edx,eax
   2643e:	75 2e                	jne    2646e <loadSections+0x2f1>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:202
        {
            printd(DEBUG_ELF_LOADER,"Section %u file offset is program header address (0x%08X),skipping load\n",cnt,elfInfo->pgmHdrTable[cnt].p_offset);
   26440:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26443:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26446:	83 c2 40             	add    edx,0x40
   26449:	c1 e2 05             	shl    edx,0x5
   2644c:	01 d0                	add    eax,edx
   2644e:	83 c0 08             	add    eax,0x8
   26451:	8b 00                	mov    eax,DWORD PTR [eax]
   26453:	50                   	push   eax
   26454:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26457:	68 bc 5a 08 00       	push   0x85abc
   2645c:	68 00 02 00 00       	push   0x200
   26461:	e8 ed 0b 00 00       	call   27053 <printd>
   26466:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:203
            continue;
   26469:	e9 a4 02 00 00       	jmp    26712 <loadSections+0x595>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:205
        }
        if (loadAddress!=0 && elfInfo->libLoadAddress==0 && (elfInfo->hdr.e_type!=ET_REL && elfInfo->hdr.e_type!=ET_DYN))
   2646e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   26472:	74 4b                	je     264bf <loadSections+0x342>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:205 (discriminator 1)
   26474:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26477:	8b 80 d0 18 00 00    	mov    eax,DWORD PTR [eax+0x18d0]
   2647d:	85 c0                	test   eax,eax
   2647f:	75 3e                	jne    264bf <loadSections+0x342>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:205 (discriminator 2)
   26481:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26484:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   26488:	66 83 f8 01          	cmp    ax,0x1
   2648c:	74 31                	je     264bf <loadSections+0x342>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:205 (discriminator 3)
   2648e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26491:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   26495:	66 83 f8 03          	cmp    ax,0x3
   26499:	74 24                	je     264bf <loadSections+0x342>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:207
        {
            elfInfo->libLoadAddress=(uintptr_t)loadAddress;
   2649b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   2649e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   264a1:	89 90 d0 18 00 00    	mov    DWORD PTR [eax+0x18d0],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:208
            printd(DEBUG_ELF_LOADER,"Setting main load address to 0x%08X\n",loadAddress);
   264a7:	83 ec 04             	sub    esp,0x4
   264aa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   264ad:	68 08 5b 08 00       	push   0x85b08
   264b2:	68 00 02 00 00       	push   0x200
   264b7:	e8 97 0b 00 00       	call   27053 <printd>
   264bc:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:212
            
        }
        //printd(DEBUG_ELF_LOADER,"Next load address is 0x%08X\n",elfInfo->pgmHdrTable[cnt].p_vaddr);
        if (elfInfo->pgmHdrTable[cnt].p_filesz>0)
   264bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   264c2:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   264c5:	c1 e2 05             	shl    edx,0x5
   264c8:	01 d0                	add    eax,edx
   264ca:	05 14 08 00 00       	add    eax,0x814
   264cf:	8b 00                	mov    eax,DWORD PTR [eax]
   264d1:	85 c0                	test   eax,eax
   264d3:	0f 84 9f 01 00 00    	je     26678 <loadSections+0x4fb>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:214
        {
            printd(DEBUG_ELF_LOADER,"seeking to 0x%08X ...",elfInfo->pgmHdrTable[cnt].p_offset);
   264d9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   264dc:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   264df:	83 c2 40             	add    edx,0x40
   264e2:	c1 e2 05             	shl    edx,0x5
   264e5:	01 d0                	add    eax,edx
   264e7:	83 c0 08             	add    eax,0x8
   264ea:	8b 00                	mov    eax,DWORD PTR [eax]
   264ec:	83 ec 04             	sub    esp,0x4
   264ef:	50                   	push   eax
   264f0:	68 44 5a 08 00       	push   0x85a44
   264f5:	68 00 02 00 00       	push   0x200
   264fa:	e8 54 0b 00 00       	call   27053 <printd>
   264ff:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:215
            fl_fseek(file, elfInfo->pgmHdrTable[cnt].p_offset, SEEK_SET);
   26502:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26505:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26508:	83 c2 40             	add    edx,0x40
   2650b:	c1 e2 05             	shl    edx,0x5
   2650e:	01 d0                	add    eax,edx
   26510:	83 c0 08             	add    eax,0x8
   26513:	8b 00                	mov    eax,DWORD PTR [eax]
   26515:	83 ec 04             	sub    esp,0x4
   26518:	6a 00                	push   0x0
   2651a:	50                   	push   eax
   2651b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2651e:	e8 76 76 ff ff       	call   1db99 <fl_fseek>
   26523:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:216
            printd(DEBUG_ELF_LOADER,"reading %u bytes to 0x%08X\n",elfInfo->pgmHdrTable[cnt].p_memsz,loadAddress);
   26526:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26529:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2652c:	c1 e2 05             	shl    edx,0x5
   2652f:	01 d0                	add    eax,edx
   26531:	05 18 08 00 00       	add    eax,0x818
   26536:	8b 00                	mov    eax,DWORD PTR [eax]
   26538:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2653b:	50                   	push   eax
   2653c:	68 2d 5b 08 00       	push   0x85b2d
   26541:	68 00 02 00 00       	push   0x200
   26546:	e8 08 0b 00 00       	call   27053 <printd>
   2654b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:217
            fl_fread(loadAddress, 1, elfInfo->pgmHdrTable[cnt].p_memsz, file);
   2654e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26551:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26554:	c1 e2 05             	shl    edx,0x5
   26557:	01 d0                	add    eax,edx
   26559:	05 18 08 00 00       	add    eax,0x818
   2655e:	8b 00                	mov    eax,DWORD PTR [eax]
   26560:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26563:	50                   	push   eax
   26564:	6a 01                	push   0x1
   26566:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26569:	e8 0c 74 ff ff       	call   1d97a <fl_fread>
   2656e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:218
            printd(DEBUG_ELF_LOADER,"Section %u loaded 0x%08X bytes at 0x%08X\n", cnt, elfInfo->pgmHdrTable[cnt].p_memsz, loadAddress);
   26571:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26574:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26577:	c1 e2 05             	shl    edx,0x5
   2657a:	01 d0                	add    eax,edx
   2657c:	05 18 08 00 00       	add    eax,0x818
   26581:	8b 00                	mov    eax,DWORD PTR [eax]
   26583:	83 ec 0c             	sub    esp,0xc
   26586:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26589:	50                   	push   eax
   2658a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   2658d:	68 4c 5b 08 00       	push   0x85b4c
   26592:	68 00 02 00 00       	push   0x200
   26597:	e8 b7 0a 00 00       	call   27053 <printd>
   2659c:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:219
            if (elfInfo->pgmHdrTable[cnt].p_filesz<elfInfo->pgmHdrTable[cnt].p_memsz)
   2659f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   265a2:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   265a5:	c1 e2 05             	shl    edx,0x5
   265a8:	01 d0                	add    eax,edx
   265aa:	05 14 08 00 00       	add    eax,0x814
   265af:	8b 10                	mov    edx,DWORD PTR [eax]
   265b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   265b4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   265b7:	c1 e1 05             	shl    ecx,0x5
   265ba:	01 c8                	add    eax,ecx
   265bc:	05 18 08 00 00       	add    eax,0x818
   265c1:	8b 00                	mov    eax,DWORD PTR [eax]
   265c3:	39 c2                	cmp    edx,eax
   265c5:	0f 83 47 01 00 00    	jae    26712 <loadSections+0x595>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:221
            {
                printd(DEBUG_ELF_LOADER,"Section %u has uninitialized data, zeroed 0x%08X bytes at 0x%08X\n", cnt, elfInfo->pgmHdrTable[cnt].p_memsz-elfInfo->pgmHdrTable[cnt].p_filesz, loadAddress+elfInfo->pgmHdrTable[cnt].p_filesz);
   265cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   265ce:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   265d1:	c1 e2 05             	shl    edx,0x5
   265d4:	01 d0                	add    eax,edx
   265d6:	05 14 08 00 00       	add    eax,0x814
   265db:	8b 10                	mov    edx,DWORD PTR [eax]
   265dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   265e0:	01 c2                	add    edx,eax
   265e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   265e5:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   265e8:	c1 e1 05             	shl    ecx,0x5
   265eb:	01 c8                	add    eax,ecx
   265ed:	05 18 08 00 00       	add    eax,0x818
   265f2:	8b 08                	mov    ecx,DWORD PTR [eax]
   265f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   265f7:	8b 5d f0             	mov    ebx,DWORD PTR [ebp-0x10]
   265fa:	c1 e3 05             	shl    ebx,0x5
   265fd:	01 d8                	add    eax,ebx
   265ff:	05 14 08 00 00       	add    eax,0x814
   26604:	8b 00                	mov    eax,DWORD PTR [eax]
   26606:	29 c1                	sub    ecx,eax
   26608:	89 c8                	mov    eax,ecx
   2660a:	83 ec 0c             	sub    esp,0xc
   2660d:	52                   	push   edx
   2660e:	50                   	push   eax
   2660f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26612:	68 78 5b 08 00       	push   0x85b78
   26617:	68 00 02 00 00       	push   0x200
   2661c:	e8 32 0a 00 00       	call   27053 <printd>
   26621:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:222
                memset(loadAddress+elfInfo->pgmHdrTable[cnt].p_filesz+1,0,elfInfo->pgmHdrTable[cnt].p_memsz-elfInfo->pgmHdrTable[cnt].p_filesz);
   26624:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26627:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2662a:	c1 e2 05             	shl    edx,0x5
   2662d:	01 d0                	add    eax,edx
   2662f:	05 18 08 00 00       	add    eax,0x818
   26634:	8b 10                	mov    edx,DWORD PTR [eax]
   26636:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26639:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   2663c:	c1 e1 05             	shl    ecx,0x5
   2663f:	01 c8                	add    eax,ecx
   26641:	05 14 08 00 00       	add    eax,0x814
   26646:	8b 00                	mov    eax,DWORD PTR [eax]
   26648:	29 c2                	sub    edx,eax
   2664a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2664d:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   26650:	c1 e1 05             	shl    ecx,0x5
   26653:	01 c8                	add    eax,ecx
   26655:	05 14 08 00 00       	add    eax,0x814
   2665a:	8b 00                	mov    eax,DWORD PTR [eax]
   2665c:	8d 48 01             	lea    ecx,[eax+0x1]
   2665f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26662:	01 c8                	add    eax,ecx
   26664:	83 ec 04             	sub    esp,0x4
   26667:	52                   	push   edx
   26668:	6a 00                	push   0x0
   2666a:	50                   	push   eax
   2666b:	e8 3d e9 ff ff       	call   24fad <memset>
   26670:	83 c4 10             	add    esp,0x10
   26673:	e9 9a 00 00 00       	jmp    26712 <loadSections+0x595>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:225
            }
        }
        else if (elfInfo->pgmHdrTable[cnt].p_memsz>0)
   26678:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2667b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2667e:	c1 e2 05             	shl    edx,0x5
   26681:	01 d0                	add    eax,edx
   26683:	05 18 08 00 00       	add    eax,0x818
   26688:	8b 00                	mov    eax,DWORD PTR [eax]
   2668a:	85 c0                	test   eax,eax
   2668c:	74 30                	je     266be <loadSections+0x541>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:227
        {
            printd(DEBUG_ELF_LOADER,"Section %u not loadable, zeroed 0x%08X bytes at 0x%08X\n",cnt, elfInfo->pgmHdrTable[cnt].p_memsz, loadAddress);
   2668e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26691:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26694:	c1 e2 05             	shl    edx,0x5
   26697:	01 d0                	add    eax,edx
   26699:	05 18 08 00 00       	add    eax,0x818
   2669e:	8b 00                	mov    eax,DWORD PTR [eax]
   266a0:	83 ec 0c             	sub    esp,0xc
   266a3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   266a6:	50                   	push   eax
   266a7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   266aa:	68 bc 5b 08 00       	push   0x85bbc
   266af:	68 00 02 00 00       	push   0x200
   266b4:	e8 9a 09 00 00       	call   27053 <printd>
   266b9:	83 c4 20             	add    esp,0x20
   266bc:	eb 54                	jmp    26712 <loadSections+0x595>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:233
            //CLR 02/10/2017: Remarked out memset below, as loading the kernelData was overwriting all the existing values.
            //memset(loadAddress,0,elfInfo->pgmHdrTable[cnt].p_memsz);
        }
#ifndef DEBUG_NONE
        else
            if ((kDebugLevel & DEBUG_ELF_LOADER) == DEBUG_ELF_LOADER)
   266be:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   266c3:	25 00 02 00 00       	and    eax,0x200
   266c8:	85 c0                	test   eax,eax
   266ca:	74 46                	je     26712 <loadSections+0x595>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:234
                printd(DEBUG_ELF_LOADER,"Section %u, file/mem sizes=0x%X/0x%X, not loading\n", cnt, elfInfo->pgmHdrTable[cnt].p_filesz>0,elfInfo->pgmHdrTable[cnt].p_memsz);
   266cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   266cf:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   266d2:	c1 e2 05             	shl    edx,0x5
   266d5:	01 d0                	add    eax,edx
   266d7:	05 18 08 00 00       	add    eax,0x818
   266dc:	8b 10                	mov    edx,DWORD PTR [eax]
   266de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   266e1:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   266e4:	c1 e1 05             	shl    ecx,0x5
   266e7:	01 c8                	add    eax,ecx
   266e9:	05 14 08 00 00       	add    eax,0x814
   266ee:	8b 00                	mov    eax,DWORD PTR [eax]
   266f0:	85 c0                	test   eax,eax
   266f2:	0f 95 c0             	setne  al
   266f5:	0f b6 c0             	movzx  eax,al
   266f8:	83 ec 0c             	sub    esp,0xc
   266fb:	52                   	push   edx
   266fc:	50                   	push   eax
   266fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26700:	68 f4 5b 08 00       	push   0x85bf4
   26705:	68 00 02 00 00       	push   0x200
   2670a:	e8 44 09 00 00       	call   27053 <printd>
   2670f:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:186 (discriminator 2)
    printd(DEBUG_ELF_LOADER,"reading PHOFF\n",elfInfo->hdr.e_phoff);
    fl_fseek(file, elfInfo->hdr.e_phoff, SEEK_SET);
    fl_fread(elfInfo->pgmHdrTable, sizeof(Elf32_Phdr),elfInfo->hdr.e_phnum,file);
    
    //Process the program header table and load all of the sections in the file into memory
    for (int cnt=0;cnt<elfInfo->hdr.e_phnum;cnt++)
   26712:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:186 (discriminator 1)
   26716:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26719:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
   2671d:	0f b7 c0             	movzx  eax,ax
   26720:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   26723:	0f 8f 89 fc ff ff    	jg     263b2 <loadSections+0x235>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:239
                printd(DEBUG_ELF_LOADER,"Section %u, file/mem sizes=0x%X/0x%X, not loading\n", cnt, elfInfo->pgmHdrTable[cnt].p_filesz>0,elfInfo->pgmHdrTable[cnt].p_memsz);
#endif

    }
    //Done processing the program header table
    printd(DEBUG_ELF_LOADER,"LoadElf: done loading file\n");
   26729:	83 ec 08             	sub    esp,0x8
   2672c:	68 27 5c 08 00       	push   0x85c27
   26731:	68 00 02 00 00       	push   0x200
   26736:	e8 18 09 00 00       	call   27053 <printd>
   2673b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:241
    
}
   2673e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   26741:	c9                   	leave  
   26742:	c3                   	ret    

00026743 <loadElf>:
loadElf():
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:244

void loadElf(void* file,elfInfo_t* elfInfo, bool isLibrary)
{
   26743:	55                   	push   ebp
   26744:	89 e5                	mov    ebp,esp
   26746:	57                   	push   edi
   26747:	56                   	push   esi
   26748:	53                   	push   ebx
   26749:	83 ec 2c             	sub    esp,0x2c
   2674c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2674f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:245
    char* sectStringTable=(char*)0x1900000;  //TODO: Fix this!!!
   26752:	c7 45 dc 00 00 90 01 	mov    DWORD PTR [ebp-0x24],0x1900000
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:248

    //Initialize the structs we will be using
    memset(elfInfo,0,sizeof(elfInfo_t));
   26759:	83 ec 04             	sub    esp,0x4
   2675c:	68 d8 18 00 00       	push   0x18d8
   26761:	6a 00                	push   0x0
   26763:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   26766:	e8 42 e8 ff ff       	call   24fad <memset>
   2676b:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:249
    memset(&elfInfo->dynamicInfo,0,sizeof(elfDynamic_t));
   2676e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26771:	05 54 0e 00 00       	add    eax,0xe54
   26776:	83 ec 04             	sub    esp,0x4
   26779:	68 7c 0a 00 00       	push   0xa7c
   2677e:	6a 00                	push   0x0
   26780:	50                   	push   eax
   26781:	e8 27 e8 ff ff       	call   24fad <memset>
   26786:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:251

    elfInfo->loadCompleted=true;
   26789:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2678c:	c6 80 d4 18 00 00 01 	mov    BYTE PTR [eax+0x18d4],0x1
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:253
    //Load all of the sections in the file to memory
    loadSections(file,elfInfo,isLibrary);
   26793:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   26797:	83 ec 04             	sub    esp,0x4
   2679a:	50                   	push   eax
   2679b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2679e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   267a1:	e8 d7 f9 ff ff       	call   2617d <loadSections>
   267a6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:257
    

    //List the sections (debugging)
    if (kDebugLevel&DEBUG_ELF_LOADER)
   267a9:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   267ae:	25 00 02 00 00       	and    eax,0x200
   267b3:	85 c0                	test   eax,eax
   267b5:	0f 84 12 01 00 00    	je     268cd <loadElf+0x18a>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:259
    {
        printd(DEBUG_ELF_LOADER,"Table\t     MemAddr\t\tFileAddr\t\tSize\ttype\n");
   267bb:	83 ec 08             	sub    esp,0x8
   267be:	68 44 5c 08 00       	push   0x85c44
   267c3:	68 00 02 00 00       	push   0x200
   267c8:	e8 86 08 00 00       	call   27053 <printd>
   267cd:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:260
        for (int cnt=0;cnt<elfInfo->hdr.e_shentsize;cnt++)
   267d0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   267d7:	e9 c4 00 00 00       	jmp    268a0 <loadElf+0x15d>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:262
        {
            if ((uint8_t*)*(sectStringTable+elfInfo->secHdrTable[cnt].sh_name)>0)
   267dc:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   267df:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   267e2:	89 d0                	mov    eax,edx
   267e4:	c1 e0 02             	shl    eax,0x2
   267e7:	01 d0                	add    eax,edx
   267e9:	c1 e0 03             	shl    eax,0x3
   267ec:	01 c8                	add    eax,ecx
   267ee:	83 c0 34             	add    eax,0x34
   267f1:	8b 10                	mov    edx,DWORD PTR [eax]
   267f3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   267f6:	01 d0                	add    eax,edx
   267f8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   267fb:	0f be c0             	movsx  eax,al
   267fe:	85 c0                	test   eax,eax
   26800:	0f 84 96 00 00 00    	je     2689c <loadElf+0x159>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:263
                printd(DEBUG_ELF_LOADER,"%-10s\t0x%08X\t0x%08X\t0x%08X\t0x%08X\n",
   26806:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   26809:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   2680c:	89 d0                	mov    eax,edx
   2680e:	c1 e0 02             	shl    eax,0x2
   26811:	01 d0                	add    eax,edx
   26813:	c1 e0 03             	shl    eax,0x3
   26816:	01 c8                	add    eax,ecx
   26818:	83 c0 38             	add    eax,0x38
   2681b:	8b 38                	mov    edi,DWORD PTR [eax]
   2681d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   26820:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   26823:	89 d0                	mov    eax,edx
   26825:	c1 e0 02             	shl    eax,0x2
   26828:	01 d0                	add    eax,edx
   2682a:	c1 e0 03             	shl    eax,0x3
   2682d:	01 c8                	add    eax,ecx
   2682f:	83 c0 48             	add    eax,0x48
   26832:	8b 30                	mov    esi,DWORD PTR [eax]
   26834:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   26837:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   2683a:	89 d0                	mov    eax,edx
   2683c:	c1 e0 02             	shl    eax,0x2
   2683f:	01 d0                	add    eax,edx
   26841:	c1 e0 03             	shl    eax,0x3
   26844:	01 c8                	add    eax,ecx
   26846:	83 c0 44             	add    eax,0x44
   26849:	8b 18                	mov    ebx,DWORD PTR [eax]
   2684b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   2684e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   26851:	89 d0                	mov    eax,edx
   26853:	c1 e0 02             	shl    eax,0x2
   26856:	01 d0                	add    eax,edx
   26858:	c1 e0 03             	shl    eax,0x3
   2685b:	01 c8                	add    eax,ecx
   2685d:	83 c0 40             	add    eax,0x40
   26860:	8b 08                	mov    ecx,DWORD PTR [eax]
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:264
                        sectStringTable+elfInfo->secHdrTable[cnt].sh_name,
   26862:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26865:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
   26868:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   2686b:	89 d0                	mov    eax,edx
   2686d:	c1 e0 02             	shl    eax,0x2
   26870:	01 d0                	add    eax,edx
   26872:	c1 e0 03             	shl    eax,0x3
   26875:	03 45 d0             	add    eax,DWORD PTR [ebp-0x30]
   26878:	83 c0 34             	add    eax,0x34
   2687b:	8b 10                	mov    edx,DWORD PTR [eax]
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:263
    {
        printd(DEBUG_ELF_LOADER,"Table\t     MemAddr\t\tFileAddr\t\tSize\ttype\n");
        for (int cnt=0;cnt<elfInfo->hdr.e_shentsize;cnt++)
        {
            if ((uint8_t*)*(sectStringTable+elfInfo->secHdrTable[cnt].sh_name)>0)
                printd(DEBUG_ELF_LOADER,"%-10s\t0x%08X\t0x%08X\t0x%08X\t0x%08X\n",
   2687d:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   26880:	01 d0                	add    eax,edx
   26882:	83 ec 04             	sub    esp,0x4
   26885:	57                   	push   edi
   26886:	56                   	push   esi
   26887:	53                   	push   ebx
   26888:	51                   	push   ecx
   26889:	50                   	push   eax
   2688a:	68 70 5c 08 00       	push   0x85c70
   2688f:	68 00 02 00 00       	push   0x200
   26894:	e8 ba 07 00 00       	call   27053 <printd>
   26899:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:260 (discriminator 2)

    //List the sections (debugging)
    if (kDebugLevel&DEBUG_ELF_LOADER)
    {
        printd(DEBUG_ELF_LOADER,"Table\t     MemAddr\t\tFileAddr\t\tSize\ttype\n");
        for (int cnt=0;cnt<elfInfo->hdr.e_shentsize;cnt++)
   2689c:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:260 (discriminator 1)
   268a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   268a3:	0f b7 40 2e          	movzx  eax,WORD PTR [eax+0x2e]
   268a7:	0f b7 c0             	movzx  eax,ax
   268aa:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   268ad:	0f 8f 29 ff ff ff    	jg     267dc <loadElf+0x99>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:270
                        elfInfo->secHdrTable[cnt].sh_addr,
                        elfInfo->secHdrTable[cnt].sh_offset,
                        elfInfo->secHdrTable[cnt].sh_size, 
                        elfInfo->secHdrTable[cnt].sh_type);
        }
        printd(DEBUG_ELF_LOADER,"End of section table... press a key to continue\n");
   268b3:	83 ec 08             	sub    esp,0x8
   268b6:	68 94 5c 08 00       	push   0x85c94
   268bb:	68 00 02 00 00       	push   0x200
   268c0:	e8 8e 07 00 00       	call   27053 <printd>
   268c5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:271
        waitForKeyboardKey();
   268c8:	e8 85 a9 fe ff       	call   11252 <waitForKeyboardKey>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:275
    }
    
    //Find the symbol and string tables in the dynamic section
    if (elfInfo->dynamicSectionAddress>0)
   268cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   268d0:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   268d6:	85 c0                	test   eax,eax
   268d8:	0f 84 94 01 00 00    	je     26a72 <loadElf+0x32f>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:277
    {
        printd(DEBUG_ELF_LOADER,"Processing dynamic sect, section address=0x%08X, count=%u\n",elfInfo->dynamicSectionAddress,elfInfo->dynamicRecordCount);
   268de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   268e1:	8b 90 4c 0e 00 00    	mov    edx,DWORD PTR [eax+0xe4c]
   268e7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   268ea:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   268f0:	52                   	push   edx
   268f1:	50                   	push   eax
   268f2:	68 c8 5c 08 00       	push   0x85cc8
   268f7:	68 00 02 00 00       	push   0x200
   268fc:	e8 52 07 00 00       	call   27053 <printd>
   26901:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:278
        Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;
   26904:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26907:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   2690d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:281

        //First iterate the section to find the string & symbol tables
        for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   26910:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   26917:	e9 e4 00 00 00       	jmp    26a00 <loadElf+0x2bd>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:283
        {
            if (dyn[cnt].d_tag==DT_STRTAB)
   2691c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   2691f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26926:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   26929:	01 d0                	add    eax,edx
   2692b:	8b 00                	mov    eax,DWORD PTR [eax]
   2692d:	83 f8 05             	cmp    eax,0x5
   26930:	75 5b                	jne    2698d <loadElf+0x24a>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:285
            {
                elfInfo->dynamicInfo.strTableAddress=dyn[cnt].d_un.d_ptr;
   26932:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   26935:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   2693c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   2693f:	01 d0                	add    eax,edx
   26941:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26944:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26947:	89 90 b8 18 00 00    	mov    DWORD PTR [eax+0x18b8],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:286
                if (isLibrary)
   2694d:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
   26951:	74 19                	je     2696c <loadElf+0x229>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:287
                    elfInfo->dynamicInfo.strTableAddress+=libLoadOffset;
   26953:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26956:	8b 90 b8 18 00 00    	mov    edx,DWORD PTR [eax+0x18b8]
   2695c:	a1 a4 da 02 00       	mov    eax,ds:0x2daa4
   26961:	01 c2                	add    edx,eax
   26963:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26966:	89 90 b8 18 00 00    	mov    DWORD PTR [eax+0x18b8],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:288
                printd(DEBUG_ELF_LOADER,"Found dynamic string table address 0x%08X\n",elfInfo->dynamicInfo.strTableAddress);
   2696c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2696f:	8b 80 b8 18 00 00    	mov    eax,DWORD PTR [eax+0x18b8]
   26975:	83 ec 04             	sub    esp,0x4
   26978:	50                   	push   eax
   26979:	68 04 5d 08 00       	push   0x85d04
   2697e:	68 00 02 00 00       	push   0x200
   26983:	e8 cb 06 00 00       	call   27053 <printd>
   26988:	83 c4 10             	add    esp,0x10
   2698b:	eb 6f                	jmp    269fc <loadElf+0x2b9>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:290
            }
            else if (dyn[cnt].d_tag==DT_SYMTAB)
   2698d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   26990:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26997:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   2699a:	01 d0                	add    eax,edx
   2699c:	8b 00                	mov    eax,DWORD PTR [eax]
   2699e:	83 f8 06             	cmp    eax,0x6
   269a1:	75 59                	jne    269fc <loadElf+0x2b9>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:292
            {
                elfInfo->dynamicInfo.symTableAddress=dyn[cnt].d_un.d_ptr;
   269a3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   269a6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   269ad:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   269b0:	01 d0                	add    eax,edx
   269b2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   269b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   269b8:	89 90 bc 18 00 00    	mov    DWORD PTR [eax+0x18bc],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:293
                if (isLibrary)
   269be:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
   269c2:	74 19                	je     269dd <loadElf+0x29a>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:294
                    elfInfo->dynamicInfo.symTableAddress+=libLoadOffset;
   269c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   269c7:	8b 90 bc 18 00 00    	mov    edx,DWORD PTR [eax+0x18bc]
   269cd:	a1 a4 da 02 00       	mov    eax,ds:0x2daa4
   269d2:	01 c2                	add    edx,eax
   269d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   269d7:	89 90 bc 18 00 00    	mov    DWORD PTR [eax+0x18bc],edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:295
                printd(DEBUG_ELF_LOADER,"Found dynamic symbol table address 0x%08X\n",elfInfo->dynamicInfo.symTableAddress);
   269dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   269e0:	8b 80 bc 18 00 00    	mov    eax,DWORD PTR [eax+0x18bc]
   269e6:	83 ec 04             	sub    esp,0x4
   269e9:	50                   	push   eax
   269ea:	68 30 5d 08 00       	push   0x85d30
   269ef:	68 00 02 00 00       	push   0x200
   269f4:	e8 5a 06 00 00       	call   27053 <printd>
   269f9:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:281 (discriminator 2)
    {
        printd(DEBUG_ELF_LOADER,"Processing dynamic sect, section address=0x%08X, count=%u\n",elfInfo->dynamicSectionAddress,elfInfo->dynamicRecordCount);
        Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;

        //First iterate the section to find the string & symbol tables
        for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   269fc:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:281 (discriminator 1)
   26a00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a03:	8b 80 4c 0e 00 00    	mov    eax,DWORD PTR [eax+0xe4c]
   26a09:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   26a0c:	0f 8f 0a ff ff ff    	jg     2691c <loadElf+0x1d9>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:298
                if (isLibrary)
                    elfInfo->dynamicInfo.symTableAddress+=libLoadOffset;
                printd(DEBUG_ELF_LOADER,"Found dynamic symbol table address 0x%08X\n",elfInfo->dynamicInfo.symTableAddress);
            }
        }
        if (!elfInfo->dynamicInfo.strTableAddress)
   26a12:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a15:	8b 80 b8 18 00 00    	mov    eax,DWORD PTR [eax+0x18b8]
   26a1b:	85 c0                	test   eax,eax
   26a1d:	75 1c                	jne    26a3b <loadElf+0x2f8>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:300
        {
            printk("EXEC: Dynamic loading, unable to find dynamic string table address, cannot execute.\n");
   26a1f:	83 ec 0c             	sub    esp,0xc
   26a22:	68 5c 5d 08 00       	push   0x85d5c
   26a27:	e8 07 06 00 00       	call   27033 <printk>
   26a2c:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:301
            elfInfo->loadCompleted=false;
   26a2f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a32:	c6 80 d4 18 00 00 00 	mov    BYTE PTR [eax+0x18d4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:302
            return;
   26a39:	eb 37                	jmp    26a72 <loadElf+0x32f>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:304
        }
        else if (!elfInfo->dynamicInfo.symTableAddress)
   26a3b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a3e:	8b 80 bc 18 00 00    	mov    eax,DWORD PTR [eax+0x18bc]
   26a44:	85 c0                	test   eax,eax
   26a46:	75 1c                	jne    26a64 <loadElf+0x321>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:306
        {
            printk("EXEC: Dynamic loading, unable to find dynamic symbol table address, cannot execute.\n");
   26a48:	83 ec 0c             	sub    esp,0xc
   26a4b:	68 b4 5d 08 00       	push   0x85db4
   26a50:	e8 de 05 00 00       	call   27033 <printk>
   26a55:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:307
            elfInfo->loadCompleted=false;
   26a58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a5b:	c6 80 d4 18 00 00 00 	mov    BYTE PTR [eax+0x18d4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:308
            return;
   26a62:	eb 0e                	jmp    26a72 <loadElf+0x32f>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:311
        }

     processELFDynamicSection(elfInfo);   
   26a64:	83 ec 0c             	sub    esp,0xc
   26a67:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   26a6a:	e8 67 f2 ff ff       	call   25cd6 <processELFDynamicSection>
   26a6f:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:314
    
    }
}
   26a72:	8d 65 f4             	lea    esp,[ebp-0xc]
   26a75:	5b                   	pop    ebx
   26a76:	5e                   	pop    esi
   26a77:	5f                   	pop    edi
   26a78:	5d                   	pop    ebp
   26a79:	c3                   	ret    

00026a7a <exec>:
exec():
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:317

int exec(char* fileName,int argc,char** argv)
{
   26a7a:	55                   	push   ebp
   26a7b:	89 e5                	mov    ebp,esp
   26a7d:	53                   	push   ebx
   26a7e:	83 ec 14             	sub    esp,0x14
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:318
    int lRetVal=-1;
   26a81:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:322
    register int *eax __asm__("eax");
    
    //Open the executable
    void* fPtr=fopen(fileName, "r");
   26a88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26a8b:	83 ec 08             	sub    esp,0x8
   26a8e:	68 95 58 08 00       	push   0x85895
   26a93:	50                   	push   eax
   26a94:	e8 14 69 ff ff       	call   1d3ad <fl_fopen>
   26a99:	83 c4 10             	add    esp,0x10
   26a9c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:323
    if (fPtr==0)
   26a9f:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   26aa3:	75 21                	jne    26ac6 <exec+0x4c>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:325
    {
        printk("Error opening file '%s' (0x%08X), cannot exec\n",fileName,fPtr);
   26aa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26aa8:	83 ec 04             	sub    esp,0x4
   26aab:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26aae:	50                   	push   eax
   26aaf:	68 0c 5e 08 00       	push   0x85e0c
   26ab4:	e8 7a 05 00 00       	call   27033 <printk>
   26ab9:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:326
        return -1;
   26abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
   26ac1:	e9 ea 00 00 00       	jmp    26bb0 <exec+0x136>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:330
    } 
    
    //Get a slot in the load info
    elfInfo_t* elf=&kExecLoadInfo[kExecLoadCount++];
   26ac6:	8b 0d 00 04 a0 00    	mov    ecx,DWORD PTR ds:0xa00400
   26acc:	a1 04 04 a0 00       	mov    eax,ds:0xa00404
   26ad1:	8d 50 01             	lea    edx,[eax+0x1]
   26ad4:	89 15 04 04 a0 00    	mov    DWORD PTR ds:0xa00404,edx
   26ada:	69 c0 d8 18 00 00    	imul   eax,eax,0x18d8
   26ae0:	01 c8                	add    eax,ecx
   26ae2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:333
    
    //Load the executable
    loadElf(fPtr,elf,false);
   26ae5:	83 ec 04             	sub    esp,0x4
   26ae8:	6a 00                	push   0x0
   26aea:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   26aed:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26af0:	e8 4e fc ff ff       	call   26743 <loadElf>
   26af5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:334
    printd(DEBUG_ELF_LOADER,"exec: back from loading ELF file, result=%s\n",elf->loadCompleted?"Success":"Failure");;
   26af8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   26afb:	0f b6 80 d4 18 00 00 	movzx  eax,BYTE PTR [eax+0x18d4]
   26b02:	84 c0                	test   al,al
   26b04:	74 07                	je     26b0d <exec+0x93>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:334 (discriminator 1)
   26b06:	b8 3b 5e 08 00       	mov    eax,0x85e3b
   26b0b:	eb 05                	jmp    26b12 <exec+0x98>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:334 (discriminator 2)
   26b0d:	b8 43 5e 08 00       	mov    eax,0x85e43
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:334 (discriminator 4)
   26b12:	83 ec 04             	sub    esp,0x4
   26b15:	50                   	push   eax
   26b16:	68 4c 5e 08 00       	push   0x85e4c
   26b1b:	68 00 02 00 00       	push   0x200
   26b20:	e8 2e 05 00 00       	call   27053 <printd>
   26b25:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:335 (discriminator 4)
    fclose(fPtr);
   26b28:	83 ec 0c             	sub    esp,0xc
   26b2b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26b2e:	e8 ab 6c ff ff       	call   1d7de <fl_fclose>
   26b33:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:338 (discriminator 4)
    
    //If loaded successfully then execute
    if (elf->loadCompleted)
   26b36:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   26b39:	0f b6 80 d4 18 00 00 	movzx  eax,BYTE PTR [eax+0x18d4]
   26b40:	84 c0                	test   al,al
   26b42:	74 69                	je     26bad <exec+0x133>
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:340
    {
        printd(DEBUG_ELF_LOADER,"exec: Executing %s at 0x%08X, return address is =0x%08X\n", fileName, elf->hdr.e_entry, __builtin_return_address(0));
   26b44:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
   26b47:	89 c1                	mov    ecx,eax
   26b49:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   26b4c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   26b4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26b52:	83 ec 0c             	sub    esp,0xc
   26b55:	51                   	push   ecx
   26b56:	52                   	push   edx
   26b57:	50                   	push   eax
   26b58:	68 7c 5e 08 00       	push   0x85e7c
   26b5d:	68 00 02 00 00       	push   0x200
   26b62:	e8 ec 04 00 00       	call   27053 <printd>
   26b67:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:341
        __asm__("push ebx\npush ecx\n"::[argvp] "b" (argv), [argcv] "c" (argc));
   26b6a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   26b6d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   26b70:	89 d3                	mov    ebx,edx
   26b72:	53                   	push   ebx
   26b73:	51                   	push   ecx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:342
        __asm__("mov edx,%[pgmptr]\n"::[pgmptr] "d" (elf->hdr.e_entry));
   26b74:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   26b77:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
   26b7a:	89 d2                	mov    edx,edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:343
        __asm__("call edx\n"::[pgmptr] "d" (elf->hdr.e_entry));
   26b7c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   26b7f:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
   26b82:	ff d2                	call   edx
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:344
        lRetVal=(uint32_t)eax;
   26b84:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:345
        printd(DEBUG_ELF_LOADER,"exec: Back from executing %s, return value is 0x%08X, 0x%08X, __bra=0x%08X\n", fileName, lRetVal, &fileName, __builtin_return_address(0));
   26b87:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
   26b8a:	89 c2                	mov    edx,eax
   26b8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26b8f:	83 ec 08             	sub    esp,0x8
   26b92:	52                   	push   edx
   26b93:	8d 55 08             	lea    edx,[ebp+0x8]
   26b96:	52                   	push   edx
   26b97:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26b9a:	50                   	push   eax
   26b9b:	68 b8 5e 08 00       	push   0x85eb8
   26ba0:	68 00 02 00 00       	push   0x200
   26ba5:	e8 a9 04 00 00       	call   27053 <printd>
   26baa:	83 c4 20             	add    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:347
    }
    return lRetVal;
   26bad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/NetBeansProjects/chrisOS/src/newloader.c:348
}
   26bb0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   26bb3:	c9                   	leave  
   26bb4:	c3                   	ret    
   26bb5:	66 90                	xchg   ax,ax
   26bb7:	90                   	nop

00026bb8 <panic>:
panic():
/home/yogi/NetBeansProjects/chrisOS/src/panic.c:8
#include <stdarg.h>
#include <time.h>
#include "printf.h"

void __attribute__((noinline))panic(const char *format, ...)
{
   26bb8:	55                   	push   ebp
   26bb9:	89 e5                	mov    ebp,esp
   26bbb:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/panic.c:10
    va_list args;
    va_start( args, format );
   26bbe:	8d 45 0c             	lea    eax,[ebp+0xc]
   26bc1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/panic.c:11
    printk("\n>>>panic at instruction prior to address 0x%08X<<<\n", __builtin_return_address(0));
   26bc4:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
   26bc7:	83 ec 08             	sub    esp,0x8
   26bca:	50                   	push   eax
   26bcb:	68 04 5f 08 00       	push   0x85f04
   26bd0:	e8 5e 04 00 00       	call   27033 <printk>
   26bd5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/panic.c:12
    printk("  >>>");
   26bd8:	83 ec 0c             	sub    esp,0xc
   26bdb:	68 39 5f 08 00       	push   0x85f39
   26be0:	e8 4e 04 00 00       	call   27033 <printk>
   26be5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/panic.c:13
    printk_valist( format,args);
   26be8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26beb:	83 ec 08             	sub    esp,0x8
   26bee:	50                   	push   eax
   26bef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26bf2:	e8 21 04 00 00       	call   27018 <printk_valist>
   26bf7:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/panic.c:14 (discriminator 1)
    panicLoop: goto panicLoop;
   26bfa:	eb fe                	jmp    26bfa <panic+0x42>

00026bfc <printchar>:
printchar():
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:41
//extern bool pauseDisplay(bool offerToQuit);
extern uint32_t kDebugLevel;
uint8_t printDLineCount;

static void printchar(char **str, int c)
{
   26bfc:	55                   	push   ebp
   26bfd:	89 e5                	mov    ebp,esp
   26bff:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:43
	
	if (str) {
   26c02:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   26c06:	74 19                	je     26c21 <printchar+0x25>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:44
		**str = c;
   26c08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26c0b:	8b 00                	mov    eax,DWORD PTR [eax]
   26c0d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   26c10:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:45
		++(*str);
   26c12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26c15:	8b 00                	mov    eax,DWORD PTR [eax]
   26c17:	8d 50 01             	lea    edx,[eax+0x1]
   26c1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26c1d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:48
	}
	else terminal_putchar((unsigned char)c);
}
   26c1f:	eb 12                	jmp    26c33 <printchar+0x37>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:47
	
	if (str) {
		**str = c;
		++(*str);
	}
	else terminal_putchar((unsigned char)c);
   26c21:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26c24:	0f b6 c0             	movzx  eax,al
   26c27:	83 ec 0c             	sub    esp,0xc
   26c2a:	50                   	push   eax
   26c2b:	e8 9e 10 ff ff       	call   17cce <terminal_putchar>
   26c30:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:48
}
   26c33:	90                   	nop
   26c34:	c9                   	leave  
   26c35:	c3                   	ret    

00026c36 <prints>:
prints():
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:54

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   26c36:	55                   	push   ebp
   26c37:	89 e5                	mov    ebp,esp
   26c39:	57                   	push   edi
   26c3a:	56                   	push   esi
   26c3b:	53                   	push   ebx
   26c3c:	83 ec 1c             	sub    esp,0x1c
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:55
	register int pc = 0, padchar = ' ';
   26c3f:	bb 00 00 00 00       	mov    ebx,0x0
   26c44:	c7 45 e4 20 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x20
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:57

	if (width > 0) {
   26c4b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   26c4f:	7e 39                	jle    26c8a <prints+0x54>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:58
		register int len = 0;
   26c51:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:60
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   26c56:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
   26c59:	eb 06                	jmp    26c61 <prints+0x2b>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:60 (discriminator 3)
   26c5b:	83 c6 01             	add    esi,0x1
   26c5e:	83 c7 01             	add    edi,0x1
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:60 (discriminator 1)
   26c61:	0f b6 07             	movzx  eax,BYTE PTR [edi]
   26c64:	84 c0                	test   al,al
   26c66:	75 f3                	jne    26c5b <prints+0x25>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:61
		if (len >= width) width = 0;
   26c68:	3b 75 10             	cmp    esi,DWORD PTR [ebp+0x10]
   26c6b:	7c 09                	jl     26c76 <prints+0x40>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:61 (discriminator 1)
   26c6d:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
   26c74:	eb 03                	jmp    26c79 <prints+0x43>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:62
		else width -= len;
   26c76:	29 75 10             	sub    DWORD PTR [ebp+0x10],esi
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:63
		if (pad & PAD_ZERO) padchar = '0';
   26c79:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   26c7c:	83 e0 02             	and    eax,0x2
   26c7f:	85 c0                	test   eax,eax
   26c81:	74 07                	je     26c8a <prints+0x54>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:63 (discriminator 1)
   26c83:	c7 45 e4 30 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x30
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:65
	}
	if (!(pad & PAD_RIGHT)) {
   26c8a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   26c8d:	83 e0 01             	and    eax,0x1
   26c90:	85 c0                	test   eax,eax
   26c92:	75 41                	jne    26cd5 <prints+0x9f>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:66
		for ( ; width > 0; --width) {
   26c94:	eb 18                	jmp    26cae <prints+0x78>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:67 (discriminator 2)
			printchar (out, padchar);
   26c96:	83 ec 08             	sub    esp,0x8
   26c99:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   26c9c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26c9f:	e8 58 ff ff ff       	call   26bfc <printchar>
   26ca4:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:68 (discriminator 2)
			++pc;
   26ca7:	83 c3 01             	add    ebx,0x1
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:66 (discriminator 2)
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
   26caa:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:66 (discriminator 1)
   26cae:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   26cb2:	7f e2                	jg     26c96 <prints+0x60>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:71
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   26cb4:	eb 1f                	jmp    26cd5 <prints+0x9f>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:72 (discriminator 2)
		printchar (out, *string);
   26cb6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26cb9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26cbc:	0f be c0             	movsx  eax,al
   26cbf:	83 ec 08             	sub    esp,0x8
   26cc2:	50                   	push   eax
   26cc3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26cc6:	e8 31 ff ff ff       	call   26bfc <printchar>
   26ccb:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:73 (discriminator 2)
		++pc;
   26cce:	83 c3 01             	add    ebx,0x1
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:71 (discriminator 2)
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   26cd1:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:71 (discriminator 1)
   26cd5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26cd8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26cdb:	84 c0                	test   al,al
   26cdd:	75 d7                	jne    26cb6 <prints+0x80>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:75
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
   26cdf:	eb 18                	jmp    26cf9 <prints+0xc3>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:76 (discriminator 2)
		printchar (out, padchar);
   26ce1:	83 ec 08             	sub    esp,0x8
   26ce4:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   26ce7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26cea:	e8 0d ff ff ff       	call   26bfc <printchar>
   26cef:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:77 (discriminator 2)
		++pc;
   26cf2:	83 c3 01             	add    ebx,0x1
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:75 (discriminator 2)
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
   26cf5:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:75 (discriminator 1)
   26cf9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   26cfd:	7f e2                	jg     26ce1 <prints+0xab>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:80
		printchar (out, padchar);
		++pc;
	}

	return pc;
   26cff:	89 d8                	mov    eax,ebx
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:81
}
   26d01:	8d 65 f4             	lea    esp,[ebp-0xc]
   26d04:	5b                   	pop    ebx
   26d05:	5e                   	pop    esi
   26d06:	5f                   	pop    edi
   26d07:	5d                   	pop    ebp
   26d08:	c3                   	ret    

00026d09 <printi>:
printi():
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:87

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   26d09:	55                   	push   ebp
   26d0a:	89 e5                	mov    ebp,esp
   26d0c:	57                   	push   edi
   26d0d:	56                   	push   esi
   26d0e:	53                   	push   ebx
   26d0f:	83 ec 2c             	sub    esp,0x2c
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:90
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
   26d12:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
   26d19:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:91
	register unsigned int u = i;
   26d20:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:93

	if (i == 0) {
   26d23:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   26d27:	75 22                	jne    26d4b <printi+0x42>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:94
		print_buf[0] = '0';
   26d29:	c6 45 dc 30          	mov    BYTE PTR [ebp-0x24],0x30
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:95
		print_buf[1] = '\0';
   26d2d:	c6 45 dd 00          	mov    BYTE PTR [ebp-0x23],0x0
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:96
		return prints (out, print_buf, width, pad);
   26d31:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
   26d34:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   26d37:	8d 45 dc             	lea    eax,[ebp-0x24]
   26d3a:	50                   	push   eax
   26d3b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26d3e:	e8 f3 fe ff ff       	call   26c36 <prints>
   26d43:	83 c4 10             	add    esp,0x10
   26d46:	e9 af 00 00 00       	jmp    26dfa <printi+0xf1>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:99
	}

	if (sg && b == 10 && i < 0) {
   26d4b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   26d4f:	74 1a                	je     26d6b <printi+0x62>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:99 (discriminator 1)
   26d51:	83 7d 10 0a          	cmp    DWORD PTR [ebp+0x10],0xa
   26d55:	75 14                	jne    26d6b <printi+0x62>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:99 (discriminator 2)
   26d57:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   26d5b:	79 0e                	jns    26d6b <printi+0x62>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:100
		neg = 1;
   26d5d:	c7 45 d4 01 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x1
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:101
		u = -i;
   26d64:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26d67:	f7 d8                	neg    eax
   26d69:	89 c6                	mov    esi,eax
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:104
	}

	s = print_buf + PRINT_BUF_LEN-1;
   26d6b:	8d 5d dc             	lea    ebx,[ebp-0x24]
   26d6e:	83 c3 0b             	add    ebx,0xb
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:105
	*s = '\0';
   26d71:	c6 03 00             	mov    BYTE PTR [ebx],0x0
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:107

	while (u) {
   26d74:	eb 35                	jmp    26dab <printi+0xa2>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:108
		t = u % b;
   26d76:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   26d79:	89 f0                	mov    eax,esi
   26d7b:	ba 00 00 00 00       	mov    edx,0x0
   26d80:	f7 f1                	div    ecx
   26d82:	89 d0                	mov    eax,edx
   26d84:	89 c7                	mov    edi,eax
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:109
		if( t >= 10 )
   26d86:	83 ff 09             	cmp    edi,0x9
   26d89:	7e 08                	jle    26d93 <printi+0x8a>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:110
			t += letbase - '0' - 10;
   26d8b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
   26d8e:	83 e8 3a             	sub    eax,0x3a
   26d91:	01 c7                	add    edi,eax
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:111
		*--s = t + '0';
   26d93:	83 eb 01             	sub    ebx,0x1
   26d96:	89 f8                	mov    eax,edi
   26d98:	83 c0 30             	add    eax,0x30
   26d9b:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:112
		u /= b;
   26d9d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   26da0:	89 f0                	mov    eax,esi
   26da2:	ba 00 00 00 00       	mov    edx,0x0
   26da7:	f7 f1                	div    ecx
   26da9:	89 c6                	mov    esi,eax
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:107
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
   26dab:	85 f6                	test   esi,esi
   26dad:	75 c7                	jne    26d76 <printi+0x6d>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:115
			t += letbase - '0' - 10;
		*--s = t + '0';
		u /= b;
	}

	if (neg) {
   26daf:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
   26db3:	74 30                	je     26de5 <printi+0xdc>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:116
		if( width && (pad & PAD_ZERO) ) {
   26db5:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   26db9:	74 24                	je     26ddf <printi+0xd6>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:116 (discriminator 1)
   26dbb:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
   26dbe:	83 e0 02             	and    eax,0x2
   26dc1:	85 c0                	test   eax,eax
   26dc3:	74 1a                	je     26ddf <printi+0xd6>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:117
			printchar (out, '-');
   26dc5:	83 ec 08             	sub    esp,0x8
   26dc8:	6a 2d                	push   0x2d
   26dca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26dcd:	e8 2a fe ff ff       	call   26bfc <printchar>
   26dd2:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:118
			++pc;
   26dd5:	83 45 d0 01          	add    DWORD PTR [ebp-0x30],0x1
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:119
			--width;
   26dd9:	83 6d 18 01          	sub    DWORD PTR [ebp+0x18],0x1
   26ddd:	eb 06                	jmp    26de5 <printi+0xdc>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:122
		}
		else {
			*--s = '-';
   26ddf:	83 eb 01             	sub    ebx,0x1
   26de2:	c6 03 2d             	mov    BYTE PTR [ebx],0x2d
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:126
		}
	}

	return pc + prints (out, s, width, pad);
   26de5:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
   26de8:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   26deb:	53                   	push   ebx
   26dec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26def:	e8 42 fe ff ff       	call   26c36 <prints>
   26df4:	83 c4 10             	add    esp,0x10
   26df7:	03 45 d0             	add    eax,DWORD PTR [ebp-0x30]
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:127 (discriminator 1)
}
   26dfa:	8d 65 f4             	lea    esp,[ebp-0xc]
   26dfd:	5b                   	pop    ebx
   26dfe:	5e                   	pop    esi
   26dff:	5f                   	pop    edi
   26e00:	5d                   	pop    ebp
   26e01:	c3                   	ret    

00026e02 <print>:
print():
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:130

static int print(char **out, const char *format, va_list args )
{
   26e02:	55                   	push   ebp
   26e03:	89 e5                	mov    ebp,esp
   26e05:	57                   	push   edi
   26e06:	56                   	push   esi
   26e07:	53                   	push   ebx
   26e08:	83 ec 1c             	sub    esp,0x1c
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:132
	register int width, pad;
	register int pc = 0;
   26e0b:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:135
	char scr[2];

	for (; *format != 0; ++format) {
   26e10:	e9 da 01 00 00       	jmp    26fef <print+0x1ed>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:136
		if (*format == '%') {
   26e15:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e18:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26e1b:	3c 25                	cmp    al,0x25
   26e1d:	0f 85 ad 01 00 00    	jne    26fd0 <print+0x1ce>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:137
			++format;
   26e23:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:138
			width = pad = 0;
   26e27:	bf 00 00 00 00       	mov    edi,0x0
   26e2c:	89 fe                	mov    esi,edi
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:139
			if (*format == '\0') break;
   26e2e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e31:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26e34:	84 c0                	test   al,al
   26e36:	0f 84 c3 01 00 00    	je     26fff <print+0x1fd>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:140
			if (*format == '%') goto out;
   26e3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e3f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26e42:	3c 25                	cmp    al,0x25
   26e44:	0f 84 85 01 00 00    	je     26fcf <print+0x1cd>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:141
			if (*format == '-') {
   26e4a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e4d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26e50:	3c 2d                	cmp    al,0x2d
   26e52:	75 12                	jne    26e66 <print+0x64>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:142
				++format;
   26e54:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:143
				pad = PAD_RIGHT;
   26e58:	bf 01 00 00 00       	mov    edi,0x1
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:145
			}
			while (*format == '0') {
   26e5d:	eb 07                	jmp    26e66 <print+0x64>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:146
				++format;
   26e5f:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:147
				pad |= PAD_ZERO;
   26e63:	83 cf 02             	or     edi,0x2
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:145
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
   26e66:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e69:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26e6c:	3c 30                	cmp    al,0x30
   26e6e:	74 ef                	je     26e5f <print+0x5d>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:149
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   26e70:	eb 1d                	jmp    26e8f <print+0x8d>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:150 (discriminator 3)
				width *= 10;
   26e72:	89 f0                	mov    eax,esi
   26e74:	c1 e0 02             	shl    eax,0x2
   26e77:	01 f0                	add    eax,esi
   26e79:	01 c0                	add    eax,eax
   26e7b:	89 c6                	mov    esi,eax
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:151 (discriminator 3)
				width += *format - '0';
   26e7d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e80:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26e83:	0f be c0             	movsx  eax,al
   26e86:	83 e8 30             	sub    eax,0x30
   26e89:	01 c6                	add    esi,eax
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:149 (discriminator 3)
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   26e8b:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:149 (discriminator 1)
   26e8f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e92:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26e95:	3c 2f                	cmp    al,0x2f
   26e97:	7e 0a                	jle    26ea3 <print+0xa1>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:149 (discriminator 2)
   26e99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e9c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26e9f:	3c 39                	cmp    al,0x39
   26ea1:	7e cf                	jle    26e72 <print+0x70>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:153
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
   26ea3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ea6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26ea9:	3c 73                	cmp    al,0x73
   26eab:	75 2b                	jne    26ed8 <print+0xd6>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:154
				register char *s = (char *)va_arg( args, int );
   26ead:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26eb0:	8d 50 04             	lea    edx,[eax+0x4]
   26eb3:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   26eb6:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:155
				pc += prints (out, s?s:"(null)", width, pad);
   26eb8:	85 c0                	test   eax,eax
   26eba:	74 02                	je     26ebe <print+0xbc>
   26ebc:	eb 05                	jmp    26ec3 <print+0xc1>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:155 (discriminator 2)
   26ebe:	b8 3f 5f 08 00       	mov    eax,0x85f3f
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:155 (discriminator 4)
   26ec3:	57                   	push   edi
   26ec4:	56                   	push   esi
   26ec5:	50                   	push   eax
   26ec6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26ec9:	e8 68 fd ff ff       	call   26c36 <prints>
   26ece:	83 c4 10             	add    esp,0x10
   26ed1:	01 c3                	add    ebx,eax
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:156 (discriminator 4)
				continue;
   26ed3:	e9 13 01 00 00       	jmp    26feb <print+0x1e9>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:158
			}
			if( *format == 'd' ) {
   26ed8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26edb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26ede:	3c 64                	cmp    al,0x64
   26ee0:	75 29                	jne    26f0b <print+0x109>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:159
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   26ee2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26ee5:	8d 50 04             	lea    edx,[eax+0x4]
   26ee8:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   26eeb:	8b 00                	mov    eax,DWORD PTR [eax]
   26eed:	83 ec 04             	sub    esp,0x4
   26ef0:	6a 61                	push   0x61
   26ef2:	57                   	push   edi
   26ef3:	56                   	push   esi
   26ef4:	6a 01                	push   0x1
   26ef6:	6a 0a                	push   0xa
   26ef8:	50                   	push   eax
   26ef9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26efc:	e8 08 fe ff ff       	call   26d09 <printi>
   26f01:	83 c4 20             	add    esp,0x20
   26f04:	01 c3                	add    ebx,eax
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:160
				continue;
   26f06:	e9 e0 00 00 00       	jmp    26feb <print+0x1e9>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:162
			}
			if( *format == 'x' ) {
   26f0b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26f0e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26f11:	3c 78                	cmp    al,0x78
   26f13:	75 29                	jne    26f3e <print+0x13c>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:163
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   26f15:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26f18:	8d 50 04             	lea    edx,[eax+0x4]
   26f1b:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   26f1e:	8b 00                	mov    eax,DWORD PTR [eax]
   26f20:	83 ec 04             	sub    esp,0x4
   26f23:	6a 61                	push   0x61
   26f25:	57                   	push   edi
   26f26:	56                   	push   esi
   26f27:	6a 00                	push   0x0
   26f29:	6a 10                	push   0x10
   26f2b:	50                   	push   eax
   26f2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26f2f:	e8 d5 fd ff ff       	call   26d09 <printi>
   26f34:	83 c4 20             	add    esp,0x20
   26f37:	01 c3                	add    ebx,eax
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:164
				continue;
   26f39:	e9 ad 00 00 00       	jmp    26feb <print+0x1e9>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:166
			}
			if( *format == 'X' ) {
   26f3e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26f41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26f44:	3c 58                	cmp    al,0x58
   26f46:	75 26                	jne    26f6e <print+0x16c>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:167
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   26f48:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26f4b:	8d 50 04             	lea    edx,[eax+0x4]
   26f4e:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   26f51:	8b 00                	mov    eax,DWORD PTR [eax]
   26f53:	83 ec 04             	sub    esp,0x4
   26f56:	6a 41                	push   0x41
   26f58:	57                   	push   edi
   26f59:	56                   	push   esi
   26f5a:	6a 00                	push   0x0
   26f5c:	6a 10                	push   0x10
   26f5e:	50                   	push   eax
   26f5f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26f62:	e8 a2 fd ff ff       	call   26d09 <printi>
   26f67:	83 c4 20             	add    esp,0x20
   26f6a:	01 c3                	add    ebx,eax
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:168
				continue;
   26f6c:	eb 7d                	jmp    26feb <print+0x1e9>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:170
			}
			if( *format == 'u' ) {
   26f6e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26f71:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26f74:	3c 75                	cmp    al,0x75
   26f76:	75 26                	jne    26f9e <print+0x19c>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:171
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   26f78:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26f7b:	8d 50 04             	lea    edx,[eax+0x4]
   26f7e:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   26f81:	8b 00                	mov    eax,DWORD PTR [eax]
   26f83:	83 ec 04             	sub    esp,0x4
   26f86:	6a 61                	push   0x61
   26f88:	57                   	push   edi
   26f89:	56                   	push   esi
   26f8a:	6a 00                	push   0x0
   26f8c:	6a 0a                	push   0xa
   26f8e:	50                   	push   eax
   26f8f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26f92:	e8 72 fd ff ff       	call   26d09 <printi>
   26f97:	83 c4 20             	add    esp,0x20
   26f9a:	01 c3                	add    ebx,eax
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:172
				continue;
   26f9c:	eb 4d                	jmp    26feb <print+0x1e9>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:174
			}
			if( *format == 'c' ) {
   26f9e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26fa1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26fa4:	3c 63                	cmp    al,0x63
   26fa6:	75 43                	jne    26feb <print+0x1e9>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:176
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   26fa8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26fab:	8d 50 04             	lea    edx,[eax+0x4]
   26fae:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   26fb1:	8b 00                	mov    eax,DWORD PTR [eax]
   26fb3:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:177
				scr[1] = '\0';
   26fb6:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:178
				pc += prints (out, scr, width, pad);
   26fba:	57                   	push   edi
   26fbb:	56                   	push   esi
   26fbc:	8d 45 e6             	lea    eax,[ebp-0x1a]
   26fbf:	50                   	push   eax
   26fc0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26fc3:	e8 6e fc ff ff       	call   26c36 <prints>
   26fc8:	83 c4 10             	add    esp,0x10
   26fcb:	01 c3                	add    ebx,eax
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:179
				continue;
   26fcd:	eb 1c                	jmp    26feb <print+0x1e9>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:140
	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
   26fcf:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:184
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
   26fd0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26fd3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26fd6:	0f be c0             	movsx  eax,al
   26fd9:	83 ec 08             	sub    esp,0x8
   26fdc:	50                   	push   eax
   26fdd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26fe0:	e8 17 fc ff ff       	call   26bfc <printchar>
   26fe5:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:185
			++pc;
   26fe8:	83 c3 01             	add    ebx,0x1
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:135
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   26feb:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:135 (discriminator 1)
   26fef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ff2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26ff5:	84 c0                	test   al,al
   26ff7:	0f 85 18 fe ff ff    	jne    26e15 <print+0x13>
   26ffd:	eb 01                	jmp    27000 <print+0x1fe>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:139
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
   26fff:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:188
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
   27000:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   27004:	74 08                	je     2700e <print+0x20c>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:188 (discriminator 1)
   27006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27009:	8b 00                	mov    eax,DWORD PTR [eax]
   2700b:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:190
	va_end( args );
	return pc;
   2700e:	89 d8                	mov    eax,ebx
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:191
}
   27010:	8d 65 f4             	lea    esp,[ebp-0xc]
   27013:	5b                   	pop    ebx
   27014:	5e                   	pop    esi
   27015:	5f                   	pop    edi
   27016:	5d                   	pop    ebp
   27017:	c3                   	ret    

00027018 <printk_valist>:
printk_valist():
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:194

int printk_valist(const char *format, va_list args)
{
   27018:	55                   	push   ebp
   27019:	89 e5                	mov    ebp,esp
   2701b:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:195
    return print(0, format, args);
   2701e:	83 ec 04             	sub    esp,0x4
   27021:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   27024:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27027:	6a 00                	push   0x0
   27029:	e8 d4 fd ff ff       	call   26e02 <print>
   2702e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:196
}
   27031:	c9                   	leave  
   27032:	c3                   	ret    

00027033 <printk>:
printk():
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:199

int printk(const char *format, ...)
{
   27033:	55                   	push   ebp
   27034:	89 e5                	mov    ebp,esp
   27036:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:201
        va_list args;
        va_start( args, format );
   27039:	8d 45 0c             	lea    eax,[ebp+0xc]
   2703c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:202
        return printk_valist(format, args);
   2703f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   27042:	83 ec 08             	sub    esp,0x8
   27045:	50                   	push   eax
   27046:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27049:	e8 ca ff ff ff       	call   27018 <printk_valist>
   2704e:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:203
}
   27051:	c9                   	leave  
   27052:	c3                   	ret    

00027053 <printd>:
printd():
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:209

#ifdef DEBUG_NONE
int printd() {}
#else
int printd(uint32_t DebugLevel, const char *format, ...)
{
   27053:	55                   	push   ebp
   27054:	89 e5                	mov    ebp,esp
   27056:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:210
    if ((kDebugLevel & DebugLevel) == DebugLevel)    
   27059:	a1 38 03 a0 00       	mov    eax,ds:0xa00338
   2705e:	23 45 08             	and    eax,DWORD PTR [ebp+0x8]
   27061:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   27064:	75 1a                	jne    27080 <printd+0x2d>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:214
    {
        va_list args;

        va_start( args, format );
   27066:	8d 45 10             	lea    eax,[ebp+0x10]
   27069:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:220
//        if (++printDLineCount==SYS_VGA_HEIGHT-1)
//        {
//            pauseDisplay(false);
//            printDLineCount=0;
//        }
        return printk_valist(format, args);
   2706c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2706f:	83 ec 08             	sub    esp,0x8
   27072:	50                   	push   eax
   27073:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   27076:	e8 9d ff ff ff       	call   27018 <printk_valist>
   2707b:	83 c4 10             	add    esp,0x10
   2707e:	eb 05                	jmp    27085 <printd+0x32>
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:222
    }
    return 0;
   27080:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:223 (discriminator 1)
}
   27085:	c9                   	leave  
   27086:	c3                   	ret    

00027087 <sprintf>:
sprintf():
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:227
#endif

int sprintf(char *out, const char *format, ...)
{
   27087:	55                   	push   ebp
   27088:	89 e5                	mov    ebp,esp
   2708a:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:230
        va_list args;
        
        va_start( args, format );
   2708d:	8d 45 10             	lea    eax,[ebp+0x10]
   27090:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:231
        return print( &out, format, args );
   27093:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   27096:	83 ec 04             	sub    esp,0x4
   27099:	50                   	push   eax
   2709a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2709d:	8d 45 08             	lea    eax,[ebp+0x8]
   270a0:	50                   	push   eax
   270a1:	e8 5c fd ff ff       	call   26e02 <print>
   270a6:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/printf.c:232
}
   270a9:	c9                   	leave  
   270aa:	c3                   	ret    
   270ab:	90                   	nop

000270ac <strcat>:
strcat():
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   char *
   STRCAT (char *dest, const char *src)
   {
   270ac:	55                   	push   ebp
   270ad:	89 e5                	mov    ebp,esp
   270af:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcat.c:31
     strcpy (dest + strlen (dest), src);
   270b2:	83 ec 0c             	sub    esp,0xc
   270b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   270b8:	e8 47 01 00 00       	call   27204 <strlen>
   270bd:	83 c4 10             	add    esp,0x10
   270c0:	89 c2                	mov    edx,eax
   270c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   270c5:	01 d0                	add    eax,edx
   270c7:	83 ec 08             	sub    esp,0x8
   270ca:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   270cd:	50                   	push   eax
   270ce:	e8 c1 00 00 00       	call   27194 <strcpy>
   270d3:	83 c4 10             	add    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcat.c:32
     return dest;
   270d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcat.c:33
   }
   270d9:	c9                   	leave  
   270da:	c3                   	ret    

000270db <concatenate>:
concatenate():
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcat.c:35

   void concatenate(char p[], char q[]) {
   270db:	55                   	push   ebp
   270dc:	89 e5                	mov    ebp,esp
   270de:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcat.c:38
   int c, d;
 
   c = 0;
   270e1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcat.c:40
 
   while (p[c] != '\0') {
   270e8:	eb 04                	jmp    270ee <concatenate+0x13>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcat.c:41
      c++;  	
   270ea:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcat.c:40
   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
   270ee:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   270f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   270f4:	01 d0                	add    eax,edx
   270f6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   270f9:	84 c0                	test   al,al
   270fb:	75 ed                	jne    270ea <concatenate+0xf>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcat.c:44
      c++;  	
   }
 
   d = 0;
   270fd:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcat.c:46
 
   while (q[d] != '\0') {
   27104:	eb 1d                	jmp    27123 <concatenate+0x48>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcat.c:47
      p[c] = q[d];
   27106:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   27109:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2710c:	01 c2                	add    edx,eax
   2710e:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27111:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27114:	01 c8                	add    eax,ecx
   27116:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27119:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcat.c:48
      d++;
   2711b:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcat.c:49
      c++;	
   2711f:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcat.c:46
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
   27123:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   27126:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27129:	01 d0                	add    eax,edx
   2712b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2712e:	84 c0                	test   al,al
   27130:	75 d4                	jne    27106 <concatenate+0x2b>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcat.c:52
      p[c] = q[d];
      d++;
      c++;	
   }
 
   p[c] = '\0';
   27132:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   27135:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27138:	01 d0                	add    eax,edx
   2713a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcat.c:53
   2713d:	90                   	nop
   2713e:	c9                   	leave  
   2713f:	c3                   	ret    

00027140 <strcmp>:
strcmp():
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcmp.c:25

/* Compare S1 and S2, returning less than, equal to or
   greater than zero if S1 is lexicographically less than,
   equal to or greater than S2.  */
int strcmp (const char *p1, const char *p2)
{
   27140:	55                   	push   ebp
   27141:	89 e5                	mov    ebp,esp
   27143:	56                   	push   esi
   27144:	53                   	push   ebx
   27145:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcmp.c:26
  register const unsigned char *s1 = (const unsigned char *) p1;
   27148:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcmp.c:27
  register const unsigned char *s2 = (const unsigned char *) p2;
   2714b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcmp.c:32
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
   2714e:	89 d8                	mov    eax,ebx
   27150:	8d 58 01             	lea    ebx,[eax+0x1]
   27153:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27156:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcmp.c:33
      c2 = (unsigned char) *s2++;
   27159:	89 f0                	mov    eax,esi
   2715b:	8d 70 01             	lea    esi,[eax+0x1]
   2715e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27161:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcmp.c:34
      if (c1 == '\0')
   27164:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
   27168:	75 0e                	jne    27178 <strcmp+0x38>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcmp.c:35
	return c1 - c2;
   2716a:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   2716e:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   27172:	29 c2                	sub    edx,eax
   27174:	89 d0                	mov    eax,edx
   27176:	eb 15                	jmp    2718d <strcmp+0x4d>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcmp.c:37
    }
  while (c1 == c2);
   27178:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   2717c:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
   2717f:	74 cd                	je     2714e <strcmp+0xe>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcmp.c:39

  return c1 - c2;
   27181:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   27185:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   27189:	29 c2                	sub    edx,eax
   2718b:	89 d0                	mov    eax,edx
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcmp.c:40
}
   2718d:	83 c4 10             	add    esp,0x10
   27190:	5b                   	pop    ebx
   27191:	5e                   	pop    esi
   27192:	5d                   	pop    ebp
   27193:	c3                   	ret    

00027194 <strcpy>:
strcpy():
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcpy.c:5
#include "strings.h"

char *
strcpy(char *s1, const char *s2)
{
   27194:	55                   	push   ebp
   27195:	89 e5                	mov    ebp,esp
   27197:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcpy.c:6
    char *s = s1;
   2719a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2719d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
   271a0:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcpy.c:7 (discriminator 1)
   271a1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   271a4:	8d 50 01             	lea    edx,[eax+0x1]
   271a7:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   271aa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   271ad:	8d 4a 01             	lea    ecx,[edx+0x1]
   271b0:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   271b3:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   271b6:	88 10                	mov    BYTE PTR [eax],dl
   271b8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   271bb:	84 c0                	test   al,al
   271bd:	75 e2                	jne    271a1 <strcpy+0xd>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcpy.c:9
	;
    return (s1);
   271bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcpy.c:10
}
   271c2:	c9                   	leave  
   271c3:	c3                   	ret    

000271c4 <strcpyc>:
strcpyc():
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcpy.c:14

char *
strcpyc(char *s1, const char *s2, unsigned count)
{
   271c4:	55                   	push   ebp
   271c5:	89 e5                	mov    ebp,esp
   271c7:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcpy.c:15
    char *s = s1;
   271ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   271cd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcpy.c:16
    while ((*s++ = *s2++) != 0 && count-->0)
   271d0:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcpy.c:16 (discriminator 2)
   271d1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   271d4:	8d 50 01             	lea    edx,[eax+0x1]
   271d7:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   271da:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   271dd:	8d 4a 01             	lea    ecx,[edx+0x1]
   271e0:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   271e3:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   271e6:	88 10                	mov    BYTE PTR [eax],dl
   271e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   271eb:	84 c0                	test   al,al
   271ed:	74 0d                	je     271fc <strcpyc+0x38>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcpy.c:16 (discriminator 1)
   271ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   271f2:	8d 50 ff             	lea    edx,[eax-0x1]
   271f5:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   271f8:	85 c0                	test   eax,eax
   271fa:	75 d5                	jne    271d1 <strcpyc+0xd>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcpy.c:18
	;
    return (s1);
   271fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/src/strings/strcpy.c:19
}
   271ff:	c9                   	leave  
   27200:	c3                   	ret    
   27201:	66 90                	xchg   ax,ax
   27203:	90                   	nop

00027204 <strlen>:
strlen():
/home/yogi/NetBeansProjects/chrisOS/src/strings/strlen.c:3
#include <stddef.h>

size_t strlen(const char* str) {
   27204:	55                   	push   ebp
   27205:	89 e5                	mov    ebp,esp
   27207:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/strings/strlen.c:4
          size_t ret = 0;
   2720a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/NetBeansProjects/chrisOS/src/strings/strlen.c:5
        while ( str[ret] != 0 )
   27211:	eb 04                	jmp    27217 <strlen+0x13>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strlen.c:6
                ret++;
   27213:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/NetBeansProjects/chrisOS/src/strings/strlen.c:5
#include <stddef.h>

size_t strlen(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
   27217:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2721a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   2721d:	01 d0                	add    eax,edx
   2721f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27222:	84 c0                	test   al,al
   27224:	75 ed                	jne    27213 <strlen+0xf>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strlen.c:7
                ret++;
        return ret;
   27226:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/NetBeansProjects/chrisOS/src/strings/strlen.c:8
}
   27229:	c9                   	leave  
   2722a:	c3                   	ret    
   2722b:	90                   	nop

0002722c <strtoul>:
strtoul():
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
strtoul(const char *nptr, char **endptr, register int base)
{
   2722c:	55                   	push   ebp
   2722d:	89 e5                	mov    ebp,esp
   2722f:	57                   	push   edi
   27230:	56                   	push   esi
   27231:	53                   	push   ebx
   27232:	83 ec 08             	sub    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
   27235:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
   27238:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   2723f:	89 f0                	mov    eax,esi
   27241:	8d 70 01             	lea    esi,[eax+0x1]
   27244:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27247:	0f be d8             	movsx  ebx,al
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
   2724a:	83 fb 20             	cmp    ebx,0x20
   2724d:	74 f0                	je     2723f <strtoul+0x13>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:73
	if (c == '-') {
   2724f:	83 fb 2d             	cmp    ebx,0x2d
   27252:	75 14                	jne    27268 <strtoul+0x3c>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:74
		neg = 1;
   27254:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:75
		c = *s++;
   2725b:	89 f0                	mov    eax,esi
   2725d:	8d 70 01             	lea    esi,[eax+0x1]
   27260:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27263:	0f be d8             	movsx  ebx,al
   27266:	eb 10                	jmp    27278 <strtoul+0x4c>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:76
	} else if (c == '+')
   27268:	83 fb 2b             	cmp    ebx,0x2b
   2726b:	75 0b                	jne    27278 <strtoul+0x4c>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:77
		c = *s++;
   2726d:	89 f0                	mov    eax,esi
   2726f:	8d 70 01             	lea    esi,[eax+0x1]
   27272:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27275:	0f be d8             	movsx  ebx,al
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
   27278:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   2727c:	74 06                	je     27284 <strtoul+0x58>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:78 (discriminator 2)
   2727e:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
   27282:	75 26                	jne    272aa <strtoul+0x7e>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:78 (discriminator 3)
   27284:	83 fb 30             	cmp    ebx,0x30
   27287:	75 21                	jne    272aa <strtoul+0x7e>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
   27289:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   2728c:	3c 78                	cmp    al,0x78
   2728e:	74 07                	je     27297 <strtoul+0x6b>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:79 (discriminator 1)
   27290:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   27293:	3c 58                	cmp    al,0x58
   27295:	75 13                	jne    272aa <strtoul+0x7e>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:80
		c = s[1];
   27297:	8d 46 01             	lea    eax,[esi+0x1]
   2729a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2729d:	0f be d8             	movsx  ebx,al
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:81
		s += 2;
   272a0:	83 c6 02             	add    esi,0x2
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:82
		base = 16;
   272a3:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
   272aa:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   272ae:	75 14                	jne    272c4 <strtoul+0x98>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
   272b0:	83 fb 30             	cmp    ebx,0x30
   272b3:	75 07                	jne    272bc <strtoul+0x90>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:85 (discriminator 1)
   272b5:	b8 08 00 00 00       	mov    eax,0x8
   272ba:	eb 05                	jmp    272c1 <strtoul+0x95>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:85 (discriminator 2)
   272bc:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:85 (discriminator 4)
   272c1:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   272c4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   272c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
   272cc:	ba 00 00 00 00       	mov    edx,0x0
   272d1:	f7 f1                	div    ecx
   272d3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   272d6:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   272d9:	b8 ff ff ff ff       	mov    eax,0xffffffff
   272de:	ba 00 00 00 00       	mov    edx,0x0
   272e3:	f7 f1                	div    ecx
   272e5:	89 d0                	mov    eax,edx
   272e7:	89 c2                	mov    edx,eax
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
   272e9:	bf 00 00 00 00       	mov    edi,0x0
   272ee:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
   272f3:	8d 43 d0             	lea    eax,[ebx-0x30]
   272f6:	83 f8 09             	cmp    eax,0x9
   272f9:	77 05                	ja     27300 <strtoul+0xd4>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:90
			c -= '0';
   272fb:	83 eb 30             	sub    ebx,0x30
   272fe:	eb 25                	jmp    27325 <strtoul+0xf9>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
   27300:	89 d8                	mov    eax,ebx
   27302:	83 c8 20             	or     eax,0x20
   27305:	83 e8 61             	sub    eax,0x61
   27308:	83 f8 19             	cmp    eax,0x19
   2730b:	77 56                	ja     27363 <strtoul+0x137>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
   2730d:	83 fb 40             	cmp    ebx,0x40
   27310:	7e 0c                	jle    2731e <strtoul+0xf2>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:92 (discriminator 1)
   27312:	83 fb 5a             	cmp    ebx,0x5a
   27315:	7f 07                	jg     2731e <strtoul+0xf2>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:92 (discriminator 3)
   27317:	b8 37 00 00 00       	mov    eax,0x37
   2731c:	eb 05                	jmp    27323 <strtoul+0xf7>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:92 (discriminator 4)
   2731e:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:92 (discriminator 6)
   27323:	29 c3                	sub    ebx,eax
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
   27325:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
   27328:	7d 3c                	jge    27366 <strtoul+0x13a>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
   2732a:	89 c8                	mov    eax,ecx
   2732c:	85 c0                	test   eax,eax
   2732e:	78 10                	js     27340 <strtoul+0x114>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:97 (discriminator 1)
   27330:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   27333:	77 0b                	ja     27340 <strtoul+0x114>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:97 (discriminator 2)
   27335:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   27338:	75 0d                	jne    27347 <strtoul+0x11b>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:97 (discriminator 3)
   2733a:	89 d0                	mov    eax,edx
   2733c:	39 c3                	cmp    ebx,eax
   2733e:	7e 07                	jle    27347 <strtoul+0x11b>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:98
			any = -1;
   27340:	b9 ff ff ff ff       	mov    ecx,0xffffffff
   27345:	eb 0f                	jmp    27356 <strtoul+0x12a>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:100
		else {
			any = 1;
   27347:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:101
			acc *= base;
   2734c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2734f:	0f af f8             	imul   edi,eax
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:102
			acc += c;
   27352:	89 d8                	mov    eax,ebx
   27354:	01 c7                	add    edi,eax
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   27356:	89 f0                	mov    eax,esi
   27358:	8d 70 01             	lea    esi,[eax+0x1]
   2735b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2735e:	0f be d8             	movsx  ebx,al
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
   27361:	eb 90                	jmp    272f3 <strtoul+0xc7>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
   27363:	90                   	nop
   27364:	eb 01                	jmp    27367 <strtoul+0x13b>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
   27366:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
   27367:	89 c8                	mov    eax,ecx
   27369:	85 c0                	test   eax,eax
   2736b:	79 07                	jns    27374 <strtoul+0x148>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
   2736d:	bf ff ff ff ff       	mov    edi,0xffffffff
   27372:	eb 08                	jmp    2737c <strtoul+0x150>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:107
	} else if (neg)
   27374:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   27378:	74 02                	je     2737c <strtoul+0x150>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:108
		acc = -acc;
   2737a:	f7 df                	neg    edi
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:109
	if (endptr != 0)
   2737c:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   27380:	74 13                	je     27395 <strtoul+0x169>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
   27382:	89 c8                	mov    eax,ecx
   27384:	85 c0                	test   eax,eax
   27386:	74 05                	je     2738d <strtoul+0x161>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:110 (discriminator 1)
   27388:	8d 46 ff             	lea    eax,[esi-0x1]
   2738b:	eb 03                	jmp    27390 <strtoul+0x164>
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:110 (discriminator 2)
   2738d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:110 (discriminator 4)
   27390:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   27393:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:111
	return (acc);
   27395:	89 f8                	mov    eax,edi
/home/yogi/NetBeansProjects/chrisOS/src/strings/stroul.c:112
}
   27397:	83 c4 08             	add    esp,0x8
   2739a:	5b                   	pop    ebx
   2739b:	5e                   	pop    esi
   2739c:	5f                   	pop    edi
   2739d:	5d                   	pop    ebp
   2739e:	c3                   	ret    
   2739f:	90                   	nop

000273a0 <strleft>:
strleft():
/home/yogi/NetBeansProjects/chrisOS/src/strings/strparts.c:2
char* strleft(char* val, int cnt)
{
   273a0:	55                   	push   ebp
   273a1:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
   273a3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   273a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   273a9:	01 d0                	add    eax,edx
   273ab:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/strings/strparts.c:4
    return val;
   273ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/src/strings/strparts.c:5
}
   273b1:	5d                   	pop    ebp
   273b2:	c3                   	ret    
   273b3:	90                   	nop

000273b4 <strtol>:
strtol():
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long
strtol(const char *nptr, char **endptr, register int base)
{
   273b4:	55                   	push   ebp
   273b5:	89 e5                	mov    ebp,esp
   273b7:	57                   	push   edi
   273b8:	56                   	push   esi
   273b9:	53                   	push   ebx
   273ba:	83 ec 0c             	sub    esp,0xc
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
   273bd:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
   273c0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   273c7:	89 f0                	mov    eax,esi
   273c9:	8d 70 01             	lea    esi,[eax+0x1]
   273cc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   273cf:	0f be d8             	movsx  ebx,al
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
   273d2:	83 fb 20             	cmp    ebx,0x20
   273d5:	74 f0                	je     273c7 <strtol+0x13>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:103
	if (c == '-') {
   273d7:	83 fb 2d             	cmp    ebx,0x2d
   273da:	75 14                	jne    273f0 <strtol+0x3c>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:104
		neg = 1;
   273dc:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:105
		c = *s++;
   273e3:	89 f0                	mov    eax,esi
   273e5:	8d 70 01             	lea    esi,[eax+0x1]
   273e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   273eb:	0f be d8             	movsx  ebx,al
   273ee:	eb 10                	jmp    27400 <strtol+0x4c>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:106
	} else if (c == '+')
   273f0:	83 fb 2b             	cmp    ebx,0x2b
   273f3:	75 0b                	jne    27400 <strtol+0x4c>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:107
		c = *s++;
   273f5:	89 f0                	mov    eax,esi
   273f7:	8d 70 01             	lea    esi,[eax+0x1]
   273fa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   273fd:	0f be d8             	movsx  ebx,al
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
   27400:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   27404:	74 06                	je     2740c <strtol+0x58>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:108 (discriminator 2)
   27406:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
   2740a:	75 26                	jne    27432 <strtol+0x7e>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:108 (discriminator 3)
   2740c:	83 fb 30             	cmp    ebx,0x30
   2740f:	75 21                	jne    27432 <strtol+0x7e>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
   27411:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   27414:	3c 78                	cmp    al,0x78
   27416:	74 07                	je     2741f <strtol+0x6b>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:109 (discriminator 1)
   27418:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   2741b:	3c 58                	cmp    al,0x58
   2741d:	75 13                	jne    27432 <strtol+0x7e>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:110
		c = s[1];
   2741f:	8d 46 01             	lea    eax,[esi+0x1]
   27422:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27425:	0f be d8             	movsx  ebx,al
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:111
		s += 2;
   27428:	83 c6 02             	add    esi,0x2
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:112
		base = 16;
   2742b:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
   27432:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   27436:	75 14                	jne    2744c <strtol+0x98>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
   27438:	83 fb 30             	cmp    ebx,0x30
   2743b:	75 07                	jne    27444 <strtol+0x90>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:115 (discriminator 1)
   2743d:	b8 08 00 00 00       	mov    eax,0x8
   27442:	eb 05                	jmp    27449 <strtol+0x95>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:115 (discriminator 2)
   27444:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:115 (discriminator 4)
   27449:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   2744c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   27450:	74 07                	je     27459 <strtol+0xa5>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:134 (discriminator 1)
   27452:	b8 00 00 00 80       	mov    eax,0x80000000
   27457:	eb 05                	jmp    2745e <strtol+0xaa>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:134 (discriminator 2)
   27459:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
   2745e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   27461:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
   27464:	ba 00 00 00 00       	mov    edx,0x0
   27469:	f7 f1                	div    ecx
   2746b:	89 d1                	mov    ecx,edx
   2746d:	89 c8                	mov    eax,ecx
   2746f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
   27472:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
   27475:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   27478:	ba 00 00 00 00       	mov    edx,0x0
   2747d:	f7 f7                	div    edi
   2747f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
   27482:	bf 00 00 00 00       	mov    edi,0x0
   27487:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
   2748c:	8d 43 d0             	lea    eax,[ebx-0x30]
   2748f:	83 f8 09             	cmp    eax,0x9
   27492:	77 05                	ja     27499 <strtol+0xe5>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:139
			c -= '0';
   27494:	83 eb 30             	sub    ebx,0x30
   27497:	eb 25                	jmp    274be <strtol+0x10a>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
   27499:	89 d8                	mov    eax,ebx
   2749b:	83 c8 20             	or     eax,0x20
   2749e:	83 e8 61             	sub    eax,0x61
   274a1:	83 f8 19             	cmp    eax,0x19
   274a4:	77 55                	ja     274fb <strtol+0x147>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
   274a6:	83 fb 40             	cmp    ebx,0x40
   274a9:	7e 0c                	jle    274b7 <strtol+0x103>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:141 (discriminator 1)
   274ab:	83 fb 5a             	cmp    ebx,0x5a
   274ae:	7f 07                	jg     274b7 <strtol+0x103>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:141 (discriminator 3)
   274b0:	b8 37 00 00 00       	mov    eax,0x37
   274b5:	eb 05                	jmp    274bc <strtol+0x108>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:141 (discriminator 4)
   274b7:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:141 (discriminator 6)
   274bc:	29 c3                	sub    ebx,eax
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
   274be:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
   274c1:	7d 3b                	jge    274fe <strtol+0x14a>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
   274c3:	89 c8                	mov    eax,ecx
   274c5:	85 c0                	test   eax,eax
   274c7:	78 0f                	js     274d8 <strtol+0x124>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:146 (discriminator 1)
   274c9:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   274cc:	77 0a                	ja     274d8 <strtol+0x124>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:146 (discriminator 2)
   274ce:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   274d1:	75 0c                	jne    274df <strtol+0x12b>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:146 (discriminator 3)
   274d3:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
   274d6:	7e 07                	jle    274df <strtol+0x12b>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:147
			any = -1;
   274d8:	b9 ff ff ff ff       	mov    ecx,0xffffffff
   274dd:	eb 0f                	jmp    274ee <strtol+0x13a>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:149
		else {
			any = 1;
   274df:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:150
			acc *= base;
   274e4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   274e7:	0f af f8             	imul   edi,eax
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:151
			acc += c;
   274ea:	89 d8                	mov    eax,ebx
   274ec:	01 c7                	add    edi,eax
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   274ee:	89 f0                	mov    eax,esi
   274f0:	8d 70 01             	lea    esi,[eax+0x1]
   274f3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   274f6:	0f be d8             	movsx  ebx,al
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
   274f9:	eb 91                	jmp    2748c <strtol+0xd8>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
   274fb:	90                   	nop
   274fc:	eb 01                	jmp    274ff <strtol+0x14b>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
   274fe:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
   274ff:	89 c8                	mov    eax,ecx
   27501:	85 c0                	test   eax,eax
   27503:	79 16                	jns    2751b <strtol+0x167>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
   27505:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   27509:	74 07                	je     27512 <strtol+0x15e>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:155 (discriminator 1)
   2750b:	b8 00 00 00 80       	mov    eax,0x80000000
   27510:	eb 05                	jmp    27517 <strtol+0x163>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:155 (discriminator 2)
   27512:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:155 (discriminator 4)
   27517:	89 c7                	mov    edi,eax
   27519:	eb 08                	jmp    27523 <strtol+0x16f>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:156
	} else if (neg)
   2751b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   2751f:	74 02                	je     27523 <strtol+0x16f>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:157
		acc = -acc;
   27521:	f7 df                	neg    edi
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:158
	if (endptr != 0)
   27523:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   27527:	74 13                	je     2753c <strtol+0x188>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
   27529:	89 c8                	mov    eax,ecx
   2752b:	85 c0                	test   eax,eax
   2752d:	74 05                	je     27534 <strtol+0x180>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:159 (discriminator 1)
   2752f:	8d 46 ff             	lea    eax,[esi-0x1]
   27532:	eb 03                	jmp    27537 <strtol+0x183>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:159 (discriminator 2)
   27534:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:159 (discriminator 4)
   27537:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   2753a:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:160
	return (acc);
   2753c:	89 f8                	mov    eax,edi
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtol.c:161
}
   2753e:	83 c4 0c             	add    esp,0xc
   27541:	5b                   	pop    ebx
   27542:	5e                   	pop    esi
   27543:	5f                   	pop    edi
   27544:	5d                   	pop    ebp
   27545:	c3                   	ret    
   27546:	66 90                	xchg   ax,ax

00027548 <strtrim>:
strtrim():
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:5
#include "strings.h"

/*FROM: http://codereview.stackexchange.com/questions/20897/trim-function-in-c*/
char * strtrim(char * *pointerToString)
{
   27548:	55                   	push   ebp
   27549:	89 e5                	mov    ebp,esp
   2754b:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:6
    uint8_t start=0, length=0;
   2754e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   27552:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:9

        // Trim.Start:
        length = strlen(*pointerToString);
   27556:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27559:	8b 00                	mov    eax,DWORD PTR [eax]
   2755b:	83 ec 0c             	sub    esp,0xc
   2755e:	50                   	push   eax
   2755f:	e8 a0 fc ff ff       	call   27204 <strlen>
   27564:	83 c4 10             	add    esp,0x10
   27567:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:10
        while ((*pointerToString)[start]==' ') start++;
   2756a:	eb 0a                	jmp    27576 <strtrim+0x2e>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:10 (discriminator 2)
   2756c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27570:	83 c0 01             	add    eax,0x1
   27573:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:10 (discriminator 1)
   27576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27579:	8b 10                	mov    edx,DWORD PTR [eax]
   2757b:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   2757f:	01 d0                	add    eax,edx
   27581:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27584:	3c 20                	cmp    al,0x20
   27586:	74 e4                	je     2756c <strtrim+0x24>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:11
        (*pointerToString) += start;
   27588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2758b:	8b 10                	mov    edx,DWORD PTR [eax]
   2758d:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27591:	01 c2                	add    edx,eax
   27593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27596:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:13

        if (start < length) // Required for empty (ex. "    ") input
   27598:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   2759c:	3a 45 f5             	cmp    al,BYTE PTR [ebp-0xb]
   2759f:	73 46                	jae    275e7 <strtrim+0x9f>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:16
        {
            // Trim.End:
            uint8_t end = strlen(*pointerToString)-1; // Get string length again (after Trim.Start)
   275a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   275a4:	8b 00                	mov    eax,DWORD PTR [eax]
   275a6:	83 ec 0c             	sub    esp,0xc
   275a9:	50                   	push   eax
   275aa:	e8 55 fc ff ff       	call   27204 <strlen>
   275af:	83 c4 10             	add    esp,0x10
   275b2:	83 e8 01             	sub    eax,0x1
   275b5:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:17
            while ((*pointerToString)[end]==' ') end--;
   275b8:	eb 0a                	jmp    275c4 <strtrim+0x7c>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:17 (discriminator 2)
   275ba:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   275be:	83 e8 01             	sub    eax,0x1
   275c1:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:17 (discriminator 1)
   275c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   275c7:	8b 10                	mov    edx,DWORD PTR [eax]
   275c9:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   275cd:	01 d0                	add    eax,edx
   275cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   275d2:	3c 20                	cmp    al,0x20
   275d4:	74 e4                	je     275ba <strtrim+0x72>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:18
            (*pointerToString)[end+1] = 0;
   275d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   275d9:	8b 00                	mov    eax,DWORD PTR [eax]
   275db:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   275df:	83 c2 01             	add    edx,0x1
   275e2:	01 d0                	add    eax,edx
   275e4:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:21
        }

    return *pointerToString;
   275e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   275ea:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:22
}
   275ec:	c9                   	leave  
   275ed:	c3                   	ret    

000275ee <strtrim2>:
strtrim2():
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:25

char * strtrim2(char* pointerToString)
{
   275ee:	55                   	push   ebp
   275ef:	89 e5                	mov    ebp,esp
   275f1:	83 ec 18             	sub    esp,0x18
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:26
    uint8_t start=0, length=0;
   275f4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   275f8:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:29

        // Trim.Start:
        length = strlen(pointerToString);
   275fc:	83 ec 0c             	sub    esp,0xc
   275ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27602:	e8 fd fb ff ff       	call   27204 <strlen>
   27607:	83 c4 10             	add    esp,0x10
   2760a:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:30
        while ((pointerToString)[start]==' ') start++;
   2760d:	eb 0a                	jmp    27619 <strtrim2+0x2b>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:30 (discriminator 2)
   2760f:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27613:	83 c0 01             	add    eax,0x1
   27616:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:30 (discriminator 1)
   27619:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   2761d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27620:	01 d0                	add    eax,edx
   27622:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27625:	3c 20                	cmp    al,0x20
   27627:	74 e6                	je     2760f <strtrim2+0x21>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:31
        (pointerToString) += start;
   27629:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   2762d:	01 45 08             	add    DWORD PTR [ebp+0x8],eax
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:33

        if (start < length) // Required for empty (ex. "    ") input
   27630:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27634:	3a 45 f5             	cmp    al,BYTE PTR [ebp-0xb]
   27637:	73 3f                	jae    27678 <strtrim2+0x8a>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:36
        {
            // Trim.End:
            uint8_t end = strlen(pointerToString)-1; // Get string length again (after Trim.Start)
   27639:	83 ec 0c             	sub    esp,0xc
   2763c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2763f:	e8 c0 fb ff ff       	call   27204 <strlen>
   27644:	83 c4 10             	add    esp,0x10
   27647:	83 e8 01             	sub    eax,0x1
   2764a:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:37
            while ((pointerToString)[end]==' ') end--;
   2764d:	eb 0a                	jmp    27659 <strtrim2+0x6b>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:37 (discriminator 2)
   2764f:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   27653:	83 e8 01             	sub    eax,0x1
   27656:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:37 (discriminator 1)
   27659:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   2765d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27660:	01 d0                	add    eax,edx
   27662:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27665:	3c 20                	cmp    al,0x20
   27667:	74 e6                	je     2764f <strtrim2+0x61>
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:38
            (pointerToString)[end+1] = 0;
   27669:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   2766d:	8d 50 01             	lea    edx,[eax+0x1]
   27670:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27673:	01 d0                	add    eax,edx
   27675:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:41
        }

    return pointerToString;
   27678:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/src/strings/strtrim.c:42
}
   2767b:	c9                   	leave  
   2767c:	c3                   	ret    
   2767d:	66 90                	xchg   ax,ax
   2767f:	90                   	nop

00027680 <time>:
time():
/home/yogi/NetBeansProjects/chrisOS/src/time.c:83
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

extern time_t kSystemCurrentTime;
time_t time(time_t* arg)
{
   27680:	55                   	push   ebp
   27681:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/time.c:84
    *arg = kSystemCurrentTime;
   27683:	8b 15 8c 02 a0 00    	mov    edx,DWORD PTR ds:0xa0028c
   27689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2768c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:85
    return kSystemCurrentTime;
   2768e:	a1 8c 02 a0 00       	mov    eax,ds:0xa0028c
/home/yogi/NetBeansProjects/chrisOS/src/time.c:86
}
   27693:	5d                   	pop    ebp
   27694:	c3                   	ret    

00027695 <gmtime_r>:
gmtime_r():
/home/yogi/NetBeansProjects/chrisOS/src/time.c:88

struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) {
   27695:	55                   	push   ebp
   27696:	89 e5                	mov    ebp,esp
   27698:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/time.c:89
  time_t time = *timer;
   2769b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2769e:	8b 00                	mov    eax,DWORD PTR [eax]
   276a0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:91
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
   276a3:	c7 45 f8 b2 07 00 00 	mov    DWORD PTR [ebp-0x8],0x7b2
/home/yogi/NetBeansProjects/chrisOS/src/time.c:93

  dayclock = (unsigned long) time % SECS_DAY;
   276aa:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   276ad:	ba 07 45 2e c2       	mov    edx,0xc22e4507
   276b2:	89 c8                	mov    eax,ecx
   276b4:	f7 e2                	mul    edx
   276b6:	89 d0                	mov    eax,edx
   276b8:	c1 e8 10             	shr    eax,0x10
   276bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   276be:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   276c1:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
   276c7:	29 c1                	sub    ecx,eax
   276c9:	89 c8                	mov    eax,ecx
   276cb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:94
  dayno = (unsigned long) time / SECS_DAY;
   276ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   276d1:	ba 07 45 2e c2       	mov    edx,0xc22e4507
   276d6:	f7 e2                	mul    edx
   276d8:	89 d0                	mov    eax,edx
   276da:	c1 e8 10             	shr    eax,0x10
   276dd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:96

  tmbuf->tm_sec = dayclock % 60;
   276e0:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   276e3:	ba 89 88 88 88       	mov    edx,0x88888889
   276e8:	89 c8                	mov    eax,ecx
   276ea:	f7 e2                	mul    edx
   276ec:	89 d0                	mov    eax,edx
   276ee:	c1 e8 05             	shr    eax,0x5
   276f1:	89 c2                	mov    edx,eax
   276f3:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
   276fa:	89 c2                	mov    edx,eax
   276fc:	89 d0                	mov    eax,edx
   276fe:	c1 e0 04             	shl    eax,0x4
   27701:	29 d0                	sub    eax,edx
   27703:	29 c1                	sub    ecx,eax
   27705:	89 c8                	mov    eax,ecx
   27707:	89 c2                	mov    edx,eax
   27709:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2770c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:97
  tmbuf->tm_min = (dayclock % 3600) / 60;
   2770e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   27711:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   27716:	89 c8                	mov    eax,ecx
   27718:	f7 e2                	mul    edx
   2771a:	89 d0                	mov    eax,edx
   2771c:	c1 e8 0b             	shr    eax,0xb
   2771f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
   27725:	29 c1                	sub    ecx,eax
   27727:	89 c8                	mov    eax,ecx
   27729:	ba 89 88 88 88       	mov    edx,0x88888889
   2772e:	f7 e2                	mul    edx
   27730:	89 d0                	mov    eax,edx
   27732:	c1 e8 05             	shr    eax,0x5
   27735:	89 c2                	mov    edx,eax
   27737:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2773a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:98
  tmbuf->tm_hour = dayclock / 3600;
   2773d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   27740:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   27745:	f7 e2                	mul    edx
   27747:	89 d0                	mov    eax,edx
   27749:	c1 e8 0b             	shr    eax,0xb
   2774c:	89 c2                	mov    edx,eax
   2774e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27751:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:99
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
   27754:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   27757:	8d 48 04             	lea    ecx,[eax+0x4]
   2775a:	ba 25 49 92 24       	mov    edx,0x24924925
   2775f:	89 c8                	mov    eax,ecx
   27761:	f7 e2                	mul    edx
   27763:	89 c8                	mov    eax,ecx
   27765:	29 d0                	sub    eax,edx
   27767:	d1 e8                	shr    eax,1
   27769:	01 d0                	add    eax,edx
   2776b:	c1 e8 02             	shr    eax,0x2
   2776e:	89 c2                	mov    edx,eax
   27770:	c1 e2 03             	shl    edx,0x3
   27773:	29 c2                	sub    edx,eax
   27775:	89 c8                	mov    eax,ecx
   27777:	29 d0                	sub    eax,edx
   27779:	89 c2                	mov    edx,eax
   2777b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2777e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:100
  while (dayno >= (unsigned long) YEARSIZE(year)) {
   27781:	eb 66                	jmp    277e9 <gmtime_r+0x154>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:101
    dayno -= YEARSIZE(year);
   27783:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   27786:	83 e0 03             	and    eax,0x3
   27789:	85 c0                	test   eax,eax
   2778b:	75 50                	jne    277dd <gmtime_r+0x148>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:101 (discriminator 1)
   2778d:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27790:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27795:	89 c8                	mov    eax,ecx
   27797:	f7 ea                	imul   edx
   27799:	c1 fa 05             	sar    edx,0x5
   2779c:	89 c8                	mov    eax,ecx
   2779e:	c1 f8 1f             	sar    eax,0x1f
   277a1:	29 c2                	sub    edx,eax
   277a3:	89 d0                	mov    eax,edx
   277a5:	6b c0 64             	imul   eax,eax,0x64
   277a8:	29 c1                	sub    ecx,eax
   277aa:	89 c8                	mov    eax,ecx
   277ac:	85 c0                	test   eax,eax
   277ae:	75 26                	jne    277d6 <gmtime_r+0x141>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:101 (discriminator 4)
   277b0:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   277b3:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   277b8:	89 c8                	mov    eax,ecx
   277ba:	f7 ea                	imul   edx
   277bc:	c1 fa 07             	sar    edx,0x7
   277bf:	89 c8                	mov    eax,ecx
   277c1:	c1 f8 1f             	sar    eax,0x1f
   277c4:	29 c2                	sub    edx,eax
   277c6:	89 d0                	mov    eax,edx
   277c8:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   277ce:	29 c1                	sub    ecx,eax
   277d0:	89 c8                	mov    eax,ecx
   277d2:	85 c0                	test   eax,eax
   277d4:	75 07                	jne    277dd <gmtime_r+0x148>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:101 (discriminator 5)
   277d6:	b8 6e 01 00 00       	mov    eax,0x16e
   277db:	eb 05                	jmp    277e2 <gmtime_r+0x14d>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:101 (discriminator 6)
   277dd:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/NetBeansProjects/chrisOS/src/time.c:101 (discriminator 8)
   277e2:	29 45 fc             	sub    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:102 (discriminator 8)
    year++;
   277e5:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/NetBeansProjects/chrisOS/src/time.c:100

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
   277e9:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   277ec:	83 e0 03             	and    eax,0x3
   277ef:	85 c0                	test   eax,eax
   277f1:	75 50                	jne    27843 <gmtime_r+0x1ae>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:100 (discriminator 1)
   277f3:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   277f6:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   277fb:	89 c8                	mov    eax,ecx
   277fd:	f7 ea                	imul   edx
   277ff:	c1 fa 05             	sar    edx,0x5
   27802:	89 c8                	mov    eax,ecx
   27804:	c1 f8 1f             	sar    eax,0x1f
   27807:	29 c2                	sub    edx,eax
   27809:	89 d0                	mov    eax,edx
   2780b:	6b c0 64             	imul   eax,eax,0x64
   2780e:	29 c1                	sub    ecx,eax
   27810:	89 c8                	mov    eax,ecx
   27812:	85 c0                	test   eax,eax
   27814:	75 26                	jne    2783c <gmtime_r+0x1a7>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:100 (discriminator 4)
   27816:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27819:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2781e:	89 c8                	mov    eax,ecx
   27820:	f7 ea                	imul   edx
   27822:	c1 fa 07             	sar    edx,0x7
   27825:	89 c8                	mov    eax,ecx
   27827:	c1 f8 1f             	sar    eax,0x1f
   2782a:	29 c2                	sub    edx,eax
   2782c:	89 d0                	mov    eax,edx
   2782e:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   27834:	29 c1                	sub    ecx,eax
   27836:	89 c8                	mov    eax,ecx
   27838:	85 c0                	test   eax,eax
   2783a:	75 07                	jne    27843 <gmtime_r+0x1ae>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:100 (discriminator 5)
   2783c:	b8 6e 01 00 00       	mov    eax,0x16e
   27841:	eb 05                	jmp    27848 <gmtime_r+0x1b3>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:100 (discriminator 6)
   27843:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/NetBeansProjects/chrisOS/src/time.c:100 (discriminator 8)
   27848:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   2784b:	0f 86 32 ff ff ff    	jbe    27783 <gmtime_r+0xee>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:104
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
   27851:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   27854:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
   2785a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2785d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:105
  tmbuf->tm_yday = dayno;
   27860:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   27863:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27866:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:106
  tmbuf->tm_mon = 0;
   27869:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2786c:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/time.c:107
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
   27873:	e9 89 00 00 00       	jmp    27901 <gmtime_r+0x26c>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:108
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
   27878:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   2787b:	83 e0 03             	and    eax,0x3
   2787e:	85 c0                	test   eax,eax
   27880:	75 50                	jne    278d2 <gmtime_r+0x23d>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:108 (discriminator 1)
   27882:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27885:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2788a:	89 c8                	mov    eax,ecx
   2788c:	f7 ea                	imul   edx
   2788e:	c1 fa 05             	sar    edx,0x5
   27891:	89 c8                	mov    eax,ecx
   27893:	c1 f8 1f             	sar    eax,0x1f
   27896:	29 c2                	sub    edx,eax
   27898:	89 d0                	mov    eax,edx
   2789a:	6b c0 64             	imul   eax,eax,0x64
   2789d:	29 c1                	sub    ecx,eax
   2789f:	89 c8                	mov    eax,ecx
   278a1:	85 c0                	test   eax,eax
   278a3:	75 26                	jne    278cb <gmtime_r+0x236>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:108 (discriminator 4)
   278a5:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   278a8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   278ad:	89 c8                	mov    eax,ecx
   278af:	f7 ea                	imul   edx
   278b1:	c1 fa 07             	sar    edx,0x7
   278b4:	89 c8                	mov    eax,ecx
   278b6:	c1 f8 1f             	sar    eax,0x1f
   278b9:	29 c2                	sub    edx,eax
   278bb:	89 d0                	mov    eax,edx
   278bd:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   278c3:	29 c1                	sub    ecx,eax
   278c5:	89 c8                	mov    eax,ecx
   278c7:	85 c0                	test   eax,eax
   278c9:	75 07                	jne    278d2 <gmtime_r+0x23d>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:108 (discriminator 5)
   278cb:	ba 01 00 00 00       	mov    edx,0x1
   278d0:	eb 05                	jmp    278d7 <gmtime_r+0x242>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:108 (discriminator 6)
   278d2:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/NetBeansProjects/chrisOS/src/time.c:108 (discriminator 8)
   278d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   278da:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   278dd:	89 d0                	mov    eax,edx
   278df:	01 c0                	add    eax,eax
   278e1:	01 d0                	add    eax,edx
   278e3:	c1 e0 02             	shl    eax,0x2
   278e6:	01 c8                	add    eax,ecx
   278e8:	8b 04 85 60 5f 08 00 	mov    eax,DWORD PTR [eax*4+0x85f60]
   278ef:	29 45 fc             	sub    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:109 (discriminator 8)
    tmbuf->tm_mon++;
   278f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   278f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   278f8:	8d 50 01             	lea    edx,[eax+0x1]
   278fb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   278fe:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:107
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
   27901:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   27904:	83 e0 03             	and    eax,0x3
   27907:	85 c0                	test   eax,eax
   27909:	75 50                	jne    2795b <gmtime_r+0x2c6>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:107 (discriminator 1)
   2790b:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   2790e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27913:	89 c8                	mov    eax,ecx
   27915:	f7 ea                	imul   edx
   27917:	c1 fa 05             	sar    edx,0x5
   2791a:	89 c8                	mov    eax,ecx
   2791c:	c1 f8 1f             	sar    eax,0x1f
   2791f:	29 c2                	sub    edx,eax
   27921:	89 d0                	mov    eax,edx
   27923:	6b c0 64             	imul   eax,eax,0x64
   27926:	29 c1                	sub    ecx,eax
   27928:	89 c8                	mov    eax,ecx
   2792a:	85 c0                	test   eax,eax
   2792c:	75 26                	jne    27954 <gmtime_r+0x2bf>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:107 (discriminator 4)
   2792e:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27931:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27936:	89 c8                	mov    eax,ecx
   27938:	f7 ea                	imul   edx
   2793a:	c1 fa 07             	sar    edx,0x7
   2793d:	89 c8                	mov    eax,ecx
   2793f:	c1 f8 1f             	sar    eax,0x1f
   27942:	29 c2                	sub    edx,eax
   27944:	89 d0                	mov    eax,edx
   27946:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   2794c:	29 c1                	sub    ecx,eax
   2794e:	89 c8                	mov    eax,ecx
   27950:	85 c0                	test   eax,eax
   27952:	75 07                	jne    2795b <gmtime_r+0x2c6>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:107 (discriminator 5)
   27954:	ba 01 00 00 00       	mov    edx,0x1
   27959:	eb 05                	jmp    27960 <gmtime_r+0x2cb>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:107 (discriminator 6)
   2795b:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/NetBeansProjects/chrisOS/src/time.c:107 (discriminator 8)
   27960:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27963:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   27966:	89 d0                	mov    eax,edx
   27968:	01 c0                	add    eax,eax
   2796a:	01 d0                	add    eax,edx
   2796c:	c1 e0 02             	shl    eax,0x2
   2796f:	01 c8                	add    eax,ecx
   27971:	8b 04 85 60 5f 08 00 	mov    eax,DWORD PTR [eax*4+0x85f60]
   27978:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   2797b:	0f 86 f7 fe ff ff    	jbe    27878 <gmtime_r+0x1e3>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:111
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
   27981:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   27984:	83 c0 01             	add    eax,0x1
   27987:	89 c2                	mov    edx,eax
   27989:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2798c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:112
  tmbuf->tm_isdst = 0;
   2798f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27992:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/NetBeansProjects/chrisOS/src/time.c:113
  return tmbuf;
   27999:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/NetBeansProjects/chrisOS/src/time.c:114
}
   2799c:	c9                   	leave  
   2799d:	c3                   	ret    

0002799e <localtime>:
localtime():
/home/yogi/NetBeansProjects/chrisOS/src/time.c:116

struct tm *localtime(const time_t *timer) {
   2799e:	55                   	push   ebp
   2799f:	89 e5                	mov    ebp,esp
   279a1:	83 ec 30             	sub    esp,0x30
/home/yogi/NetBeansProjects/chrisOS/src/time.c:120
  time_t t;
  struct tm tmbuf;
  
  t = *timer - kTimeZone;
   279a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   279a7:	8b 10                	mov    edx,DWORD PTR [eax]
   279a9:	a1 90 02 a0 00       	mov    eax,ds:0xa00290
   279ae:	29 c2                	sub    edx,eax
   279b0:	89 d0                	mov    eax,edx
   279b2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:121
  return gmtime_r(&t, &tmbuf);
   279b5:	8d 45 d0             	lea    eax,[ebp-0x30]
   279b8:	50                   	push   eax
   279b9:	8d 45 fc             	lea    eax,[ebp-0x4]
   279bc:	50                   	push   eax
   279bd:	e8 d3 fc ff ff       	call   27695 <gmtime_r>
   279c2:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/time.c:122
}
   279c5:	c9                   	leave  
   279c6:	c3                   	ret    

000279c7 <localtime_r>:
localtime_r():
/home/yogi/NetBeansProjects/chrisOS/src/time.c:124

struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
   279c7:	55                   	push   ebp
   279c8:	89 e5                	mov    ebp,esp
   279ca:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/time.c:127
  time_t t;

  t = *timer - kTimeZone;
   279cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   279d0:	8b 10                	mov    edx,DWORD PTR [eax]
   279d2:	a1 90 02 a0 00       	mov    eax,ds:0xa00290
   279d7:	29 c2                	sub    edx,eax
   279d9:	89 d0                	mov    eax,edx
   279db:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:128
  return gmtime_r(&t, tmbuf);
   279de:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   279e1:	8d 45 fc             	lea    eax,[ebp-0x4]
   279e4:	50                   	push   eax
   279e5:	e8 ab fc ff ff       	call   27695 <gmtime_r>
   279ea:	83 c4 08             	add    esp,0x8
/home/yogi/NetBeansProjects/chrisOS/src/time.c:129
}
   279ed:	c9                   	leave  
   279ee:	c3                   	ret    

000279ef <mktime>:
mktime():
/home/yogi/NetBeansProjects/chrisOS/src/time.c:131

time_t mktime(struct tm *tmbuf) {
   279ef:	55                   	push   ebp
   279f0:	89 e5                	mov    ebp,esp
   279f2:	56                   	push   esi
   279f3:	53                   	push   ebx
   279f4:	83 ec 20             	sub    esp,0x20
/home/yogi/NetBeansProjects/chrisOS/src/time.c:139
  int yday, month;
  /*unsigned*/ long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
   279f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   279fa:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
   279fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27a00:	8b 08                	mov    ecx,DWORD PTR [eax]
   27a02:	ba 89 88 88 88       	mov    edx,0x88888889
   27a07:	89 c8                	mov    eax,ecx
   27a09:	f7 ea                	imul   edx
   27a0b:	8d 04 0a             	lea    eax,[edx+ecx*1]
   27a0e:	c1 f8 05             	sar    eax,0x5
   27a11:	89 c2                	mov    edx,eax
   27a13:	89 c8                	mov    eax,ecx
   27a15:	c1 f8 1f             	sar    eax,0x1f
   27a18:	29 c2                	sub    edx,eax
   27a1a:	89 d0                	mov    eax,edx
   27a1c:	8d 14 03             	lea    edx,[ebx+eax*1]
   27a1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27a22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:140
  tmbuf->tm_sec %= 60;
   27a25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27a28:	8b 08                	mov    ecx,DWORD PTR [eax]
   27a2a:	ba 89 88 88 88       	mov    edx,0x88888889
   27a2f:	89 c8                	mov    eax,ecx
   27a31:	f7 ea                	imul   edx
   27a33:	8d 04 0a             	lea    eax,[edx+ecx*1]
   27a36:	c1 f8 05             	sar    eax,0x5
   27a39:	89 c2                	mov    edx,eax
   27a3b:	89 c8                	mov    eax,ecx
   27a3d:	c1 f8 1f             	sar    eax,0x1f
   27a40:	29 c2                	sub    edx,eax
   27a42:	89 d0                	mov    eax,edx
   27a44:	89 c2                	mov    edx,eax
   27a46:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
   27a4d:	89 c2                	mov    edx,eax
   27a4f:	89 d0                	mov    eax,edx
   27a51:	c1 e0 04             	shl    eax,0x4
   27a54:	29 d0                	sub    eax,edx
   27a56:	29 c1                	sub    ecx,eax
   27a58:	89 c8                	mov    eax,ecx
   27a5a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   27a5d:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:141
  if (tmbuf->tm_sec < 0) {
   27a5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27a62:	8b 00                	mov    eax,DWORD PTR [eax]
   27a64:	85 c0                	test   eax,eax
   27a66:	79 1c                	jns    27a84 <mktime+0x95>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:142
    tmbuf->tm_sec += 60;
   27a68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27a6b:	8b 00                	mov    eax,DWORD PTR [eax]
   27a6d:	8d 50 3c             	lea    edx,[eax+0x3c]
   27a70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27a73:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:143
    tmbuf->tm_min--;
   27a75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27a78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   27a7b:	8d 50 ff             	lea    edx,[eax-0x1]
   27a7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27a81:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:145
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
   27a84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27a87:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
   27a8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27a8d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   27a90:	ba 89 88 88 88       	mov    edx,0x88888889
   27a95:	89 c8                	mov    eax,ecx
   27a97:	f7 ea                	imul   edx
   27a99:	8d 04 0a             	lea    eax,[edx+ecx*1]
   27a9c:	c1 f8 05             	sar    eax,0x5
   27a9f:	89 c2                	mov    edx,eax
   27aa1:	89 c8                	mov    eax,ecx
   27aa3:	c1 f8 1f             	sar    eax,0x1f
   27aa6:	29 c2                	sub    edx,eax
   27aa8:	89 d0                	mov    eax,edx
   27aaa:	8d 14 03             	lea    edx,[ebx+eax*1]
   27aad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27ab0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:146
  tmbuf->tm_min = tmbuf->tm_min % 60;
   27ab3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27ab6:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   27ab9:	ba 89 88 88 88       	mov    edx,0x88888889
   27abe:	89 c8                	mov    eax,ecx
   27ac0:	f7 ea                	imul   edx
   27ac2:	8d 04 0a             	lea    eax,[edx+ecx*1]
   27ac5:	c1 f8 05             	sar    eax,0x5
   27ac8:	89 c2                	mov    edx,eax
   27aca:	89 c8                	mov    eax,ecx
   27acc:	c1 f8 1f             	sar    eax,0x1f
   27acf:	29 c2                	sub    edx,eax
   27ad1:	89 d0                	mov    eax,edx
   27ad3:	89 c2                	mov    edx,eax
   27ad5:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
   27adc:	89 c2                	mov    edx,eax
   27ade:	89 d0                	mov    eax,edx
   27ae0:	c1 e0 04             	shl    eax,0x4
   27ae3:	29 d0                	sub    eax,edx
   27ae5:	29 c1                	sub    ecx,eax
   27ae7:	89 c8                	mov    eax,ecx
   27ae9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   27aec:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:147
  if (tmbuf->tm_min < 0) {
   27aef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27af2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   27af5:	85 c0                	test   eax,eax
   27af7:	79 1e                	jns    27b17 <mktime+0x128>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:148
    tmbuf->tm_min += 60;
   27af9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27afc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   27aff:	8d 50 3c             	lea    edx,[eax+0x3c]
   27b02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b05:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:149
    tmbuf->tm_hour--;
   27b08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b0b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   27b0e:	8d 50 ff             	lea    edx,[eax-0x1]
   27b11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b14:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:151
  }
  day = tmbuf->tm_hour / 24;
   27b17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b1a:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   27b1d:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   27b22:	89 c8                	mov    eax,ecx
   27b24:	f7 ea                	imul   edx
   27b26:	c1 fa 02             	sar    edx,0x2
   27b29:	89 c8                	mov    eax,ecx
   27b2b:	c1 f8 1f             	sar    eax,0x1f
   27b2e:	29 c2                	sub    edx,eax
   27b30:	89 d0                	mov    eax,edx
   27b32:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:152
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
   27b35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b38:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   27b3b:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   27b40:	89 c8                	mov    eax,ecx
   27b42:	f7 ea                	imul   edx
   27b44:	c1 fa 02             	sar    edx,0x2
   27b47:	89 c8                	mov    eax,ecx
   27b49:	c1 f8 1f             	sar    eax,0x1f
   27b4c:	29 c2                	sub    edx,eax
   27b4e:	89 d0                	mov    eax,edx
   27b50:	01 c0                	add    eax,eax
   27b52:	01 d0                	add    eax,edx
   27b54:	c1 e0 03             	shl    eax,0x3
   27b57:	29 c1                	sub    ecx,eax
   27b59:	89 ca                	mov    edx,ecx
   27b5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b5e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:153
  if (tmbuf->tm_hour < 0) {
   27b61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   27b67:	85 c0                	test   eax,eax
   27b69:	79 13                	jns    27b7e <mktime+0x18f>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:154
    tmbuf->tm_hour += 24;
   27b6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b6e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   27b71:	8d 50 18             	lea    edx,[eax+0x18]
   27b74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b77:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:155
    day--;
   27b7a:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/NetBeansProjects/chrisOS/src/time.c:157
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
   27b7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b81:	8b 58 14             	mov    ebx,DWORD PTR [eax+0x14]
   27b84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b87:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   27b8a:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   27b8f:	89 c8                	mov    eax,ecx
   27b91:	f7 ea                	imul   edx
   27b93:	d1 fa                	sar    edx,1
   27b95:	89 c8                	mov    eax,ecx
   27b97:	c1 f8 1f             	sar    eax,0x1f
   27b9a:	29 c2                	sub    edx,eax
   27b9c:	89 d0                	mov    eax,edx
   27b9e:	8d 14 03             	lea    edx,[ebx+eax*1]
   27ba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27ba4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:158
  tmbuf->tm_mon %= 12;
   27ba7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27baa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   27bad:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   27bb2:	89 c8                	mov    eax,ecx
   27bb4:	f7 ea                	imul   edx
   27bb6:	d1 fa                	sar    edx,1
   27bb8:	89 c8                	mov    eax,ecx
   27bba:	c1 f8 1f             	sar    eax,0x1f
   27bbd:	29 c2                	sub    edx,eax
   27bbf:	89 d0                	mov    eax,edx
   27bc1:	01 c0                	add    eax,eax
   27bc3:	01 d0                	add    eax,edx
   27bc5:	c1 e0 02             	shl    eax,0x2
   27bc8:	29 c1                	sub    ecx,eax
   27bca:	89 ca                	mov    edx,ecx
   27bcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27bcf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:159
  if (tmbuf->tm_mon < 0) {
   27bd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27bd5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   27bd8:	85 c0                	test   eax,eax
   27bda:	79 1e                	jns    27bfa <mktime+0x20b>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:160
    tmbuf->tm_mon += 12;
   27bdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27bdf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   27be2:	8d 50 0c             	lea    edx,[eax+0xc]
   27be5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27be8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:161
    tmbuf->tm_year--;
   27beb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27bee:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27bf1:	8d 50 ff             	lea    edx,[eax-0x1]
   27bf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27bf7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:163
  }
  day += (tmbuf->tm_mday - 1);
   27bfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27bfd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   27c00:	83 e8 01             	sub    eax,0x1
   27c03:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:164
  while (day < 0) {
   27c06:	e9 c1 00 00 00       	jmp    27ccc <mktime+0x2dd>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:165
    if(--tmbuf->tm_mon < 0) {
   27c0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c0e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   27c11:	8d 50 ff             	lea    edx,[eax-0x1]
   27c14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c17:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
   27c1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   27c20:	85 c0                	test   eax,eax
   27c22:	79 19                	jns    27c3d <mktime+0x24e>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:166
      tmbuf->tm_year--;
   27c24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c27:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27c2a:	8d 50 ff             	lea    edx,[eax-0x1]
   27c2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c30:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:167
      tmbuf->tm_mon = 11;
   27c33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c36:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/NetBeansProjects/chrisOS/src/time.c:169
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
   27c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c40:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27c43:	83 e0 03             	and    eax,0x3
   27c46:	85 c0                	test   eax,eax
   27c48:	75 62                	jne    27cac <mktime+0x2bd>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:169 (discriminator 1)
   27c4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c4d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27c50:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   27c56:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27c5b:	89 c8                	mov    eax,ecx
   27c5d:	f7 ea                	imul   edx
   27c5f:	c1 fa 05             	sar    edx,0x5
   27c62:	89 c8                	mov    eax,ecx
   27c64:	c1 f8 1f             	sar    eax,0x1f
   27c67:	29 c2                	sub    edx,eax
   27c69:	89 d0                	mov    eax,edx
   27c6b:	6b c0 64             	imul   eax,eax,0x64
   27c6e:	29 c1                	sub    ecx,eax
   27c70:	89 c8                	mov    eax,ecx
   27c72:	85 c0                	test   eax,eax
   27c74:	75 2f                	jne    27ca5 <mktime+0x2b6>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:169 (discriminator 4)
   27c76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c79:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27c7c:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   27c82:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27c87:	89 c8                	mov    eax,ecx
   27c89:	f7 ea                	imul   edx
   27c8b:	c1 fa 07             	sar    edx,0x7
   27c8e:	89 c8                	mov    eax,ecx
   27c90:	c1 f8 1f             	sar    eax,0x1f
   27c93:	29 c2                	sub    edx,eax
   27c95:	89 d0                	mov    eax,edx
   27c97:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   27c9d:	29 c1                	sub    ecx,eax
   27c9f:	89 c8                	mov    eax,ecx
   27ca1:	85 c0                	test   eax,eax
   27ca3:	75 07                	jne    27cac <mktime+0x2bd>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:169 (discriminator 5)
   27ca5:	ba 01 00 00 00       	mov    edx,0x1
   27caa:	eb 05                	jmp    27cb1 <mktime+0x2c2>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:169 (discriminator 6)
   27cac:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/NetBeansProjects/chrisOS/src/time.c:169 (discriminator 8)
   27cb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27cb4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   27cb7:	89 d0                	mov    eax,edx
   27cb9:	01 c0                	add    eax,eax
   27cbb:	01 d0                	add    eax,edx
   27cbd:	c1 e0 02             	shl    eax,0x2
   27cc0:	01 c8                	add    eax,ecx
   27cc2:	8b 04 85 60 5f 08 00 	mov    eax,DWORD PTR [eax*4+0x85f60]
   27cc9:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:164
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
   27ccc:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   27cd0:	0f 88 35 ff ff ff    	js     27c0b <mktime+0x21c>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:171
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
   27cd6:	e9 c2 00 00 00       	jmp    27d9d <mktime+0x3ae>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:172
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
   27cdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27cde:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27ce1:	83 e0 03             	and    eax,0x3
   27ce4:	85 c0                	test   eax,eax
   27ce6:	75 62                	jne    27d4a <mktime+0x35b>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:172 (discriminator 1)
   27ce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27ceb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27cee:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   27cf4:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27cf9:	89 c8                	mov    eax,ecx
   27cfb:	f7 ea                	imul   edx
   27cfd:	c1 fa 05             	sar    edx,0x5
   27d00:	89 c8                	mov    eax,ecx
   27d02:	c1 f8 1f             	sar    eax,0x1f
   27d05:	29 c2                	sub    edx,eax
   27d07:	89 d0                	mov    eax,edx
   27d09:	6b c0 64             	imul   eax,eax,0x64
   27d0c:	29 c1                	sub    ecx,eax
   27d0e:	89 c8                	mov    eax,ecx
   27d10:	85 c0                	test   eax,eax
   27d12:	75 2f                	jne    27d43 <mktime+0x354>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:172 (discriminator 4)
   27d14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d17:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27d1a:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   27d20:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27d25:	89 c8                	mov    eax,ecx
   27d27:	f7 ea                	imul   edx
   27d29:	c1 fa 07             	sar    edx,0x7
   27d2c:	89 c8                	mov    eax,ecx
   27d2e:	c1 f8 1f             	sar    eax,0x1f
   27d31:	29 c2                	sub    edx,eax
   27d33:	89 d0                	mov    eax,edx
   27d35:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   27d3b:	29 c1                	sub    ecx,eax
   27d3d:	89 c8                	mov    eax,ecx
   27d3f:	85 c0                	test   eax,eax
   27d41:	75 07                	jne    27d4a <mktime+0x35b>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:172 (discriminator 5)
   27d43:	ba 01 00 00 00       	mov    edx,0x1
   27d48:	eb 05                	jmp    27d4f <mktime+0x360>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:172 (discriminator 6)
   27d4a:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/NetBeansProjects/chrisOS/src/time.c:172 (discriminator 8)
   27d4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d52:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   27d55:	89 d0                	mov    eax,edx
   27d57:	01 c0                	add    eax,eax
   27d59:	01 d0                	add    eax,edx
   27d5b:	c1 e0 02             	shl    eax,0x2
   27d5e:	01 c8                	add    eax,ecx
   27d60:	8b 04 85 60 5f 08 00 	mov    eax,DWORD PTR [eax*4+0x85f60]
   27d67:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:173 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
   27d6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d6d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   27d70:	8d 50 01             	lea    edx,[eax+0x1]
   27d73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d76:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
   27d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d7c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   27d7f:	83 f8 0c             	cmp    eax,0xc
   27d82:	75 19                	jne    27d9d <mktime+0x3ae>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:174
      tmbuf->tm_mon = 0;
   27d84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d87:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/NetBeansProjects/chrisOS/src/time.c:175
      tmbuf->tm_year++;
   27d8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d91:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27d94:	8d 50 01             	lea    edx,[eax+0x1]
   27d97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d9a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:171
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
   27d9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27da0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27da3:	83 e0 03             	and    eax,0x3
   27da6:	85 c0                	test   eax,eax
   27da8:	75 62                	jne    27e0c <mktime+0x41d>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:171 (discriminator 1)
   27daa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27dad:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27db0:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   27db6:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27dbb:	89 c8                	mov    eax,ecx
   27dbd:	f7 ea                	imul   edx
   27dbf:	c1 fa 05             	sar    edx,0x5
   27dc2:	89 c8                	mov    eax,ecx
   27dc4:	c1 f8 1f             	sar    eax,0x1f
   27dc7:	29 c2                	sub    edx,eax
   27dc9:	89 d0                	mov    eax,edx
   27dcb:	6b c0 64             	imul   eax,eax,0x64
   27dce:	29 c1                	sub    ecx,eax
   27dd0:	89 c8                	mov    eax,ecx
   27dd2:	85 c0                	test   eax,eax
   27dd4:	75 2f                	jne    27e05 <mktime+0x416>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:171 (discriminator 4)
   27dd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27dd9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27ddc:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   27de2:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27de7:	89 c8                	mov    eax,ecx
   27de9:	f7 ea                	imul   edx
   27deb:	c1 fa 07             	sar    edx,0x7
   27dee:	89 c8                	mov    eax,ecx
   27df0:	c1 f8 1f             	sar    eax,0x1f
   27df3:	29 c2                	sub    edx,eax
   27df5:	89 d0                	mov    eax,edx
   27df7:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   27dfd:	29 c1                	sub    ecx,eax
   27dff:	89 c8                	mov    eax,ecx
   27e01:	85 c0                	test   eax,eax
   27e03:	75 07                	jne    27e0c <mktime+0x41d>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:171 (discriminator 5)
   27e05:	ba 01 00 00 00       	mov    edx,0x1
   27e0a:	eb 05                	jmp    27e11 <mktime+0x422>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:171 (discriminator 6)
   27e0c:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/NetBeansProjects/chrisOS/src/time.c:171 (discriminator 8)
   27e11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e14:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   27e17:	89 d0                	mov    eax,edx
   27e19:	01 c0                	add    eax,eax
   27e1b:	01 d0                	add    eax,edx
   27e1d:	c1 e0 02             	shl    eax,0x2
   27e20:	01 c8                	add    eax,ecx
   27e22:	8b 04 85 60 5f 08 00 	mov    eax,DWORD PTR [eax*4+0x85f60]
   27e29:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   27e2c:	0f 8e a9 fe ff ff    	jle    27cdb <mktime+0x2ec>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:178
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
   27e32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   27e35:	8d 50 01             	lea    edx,[eax+0x1]
   27e38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e3b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:179
  year = EPOCH_YR;
   27e3e:	c7 45 e0 b2 07 00 00 	mov    DWORD PTR [ebp-0x20],0x7b2
/home/yogi/NetBeansProjects/chrisOS/src/time.c:180
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
   27e45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e48:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27e4b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   27e4e:	81 ea 6c 07 00 00    	sub    edx,0x76c
   27e54:	39 d0                	cmp    eax,edx
   27e56:	7d 0a                	jge    27e62 <mktime+0x473>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:180 (discriminator 1)
   27e58:	b8 19 fc ff ff       	mov    eax,0xfffffc19
   27e5d:	e9 c0 03 00 00       	jmp    28222 <mktime+0x833>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:181
  seconds = 0;
   27e62:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/NetBeansProjects/chrisOS/src/time.c:182
  day = 0;                      // Means days since day 0 now
   27e69:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/time.c:183
  overflow = 0;
   27e70:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/NetBeansProjects/chrisOS/src/time.c:190
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
   27e77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e7a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27e7d:	05 6c 07 00 00       	add    eax,0x76c
   27e82:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:192

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
   27e85:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   27e88:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   27e8b:	3d 7c c6 59 00       	cmp    eax,0x59c67c
   27e90:	7e 07                	jle    27e99 <mktime+0x4aa>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:192 (discriminator 1)
   27e92:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/NetBeansProjects/chrisOS/src/time.c:193
  day = (tm_year - year) * 365;
   27e99:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   27e9c:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   27e9f:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
   27ea5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:194
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
   27ea8:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
   27ead:	2b 45 f4             	sub    eax,DWORD PTR [ebp-0xc]
   27eb0:	89 c2                	mov    edx,eax
   27eb2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   27eb5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   27eb8:	8d 48 03             	lea    ecx,[eax+0x3]
   27ebb:	85 c0                	test   eax,eax
   27ebd:	0f 48 c1             	cmovs  eax,ecx
   27ec0:	c1 f8 02             	sar    eax,0x2
   27ec3:	83 c0 01             	add    eax,0x1
   27ec6:	39 c2                	cmp    edx,eax
   27ec8:	7d 04                	jge    27ece <mktime+0x4df>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:194 (discriminator 1)
   27eca:	83 4d e8 02          	or     DWORD PTR [ebp-0x18],0x2
/home/yogi/NetBeansProjects/chrisOS/src/time.c:195
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
   27ece:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   27ed1:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   27ed4:	8d 50 03             	lea    edx,[eax+0x3]
   27ed7:	85 c0                	test   eax,eax
   27ed9:	0f 48 c2             	cmovs  eax,edx
   27edc:	c1 f8 02             	sar    eax,0x2
   27edf:	89 c1                	mov    ecx,eax
   27ee1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   27ee4:	83 e0 03             	and    eax,0x3
   27ee7:	85 c0                	test   eax,eax
   27ee9:	74 29                	je     27f14 <mktime+0x525>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:195 (discriminator 1)
   27eeb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   27eee:	99                   	cdq    
   27eef:	c1 ea 1e             	shr    edx,0x1e
   27ef2:	01 d0                	add    eax,edx
   27ef4:	83 e0 03             	and    eax,0x3
   27ef7:	29 d0                	sub    eax,edx
   27ef9:	89 c3                	mov    ebx,eax
   27efb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   27efe:	99                   	cdq    
   27eff:	c1 ea 1e             	shr    edx,0x1e
   27f02:	01 d0                	add    eax,edx
   27f04:	83 e0 03             	and    eax,0x3
   27f07:	29 d0                	sub    eax,edx
   27f09:	39 c3                	cmp    ebx,eax
   27f0b:	7d 07                	jge    27f14 <mktime+0x525>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:195 (discriminator 3)
   27f0d:	b8 01 00 00 00       	mov    eax,0x1
   27f12:	eb 05                	jmp    27f19 <mktime+0x52a>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:195 (discriminator 4)
   27f14:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/time.c:195 (discriminator 6)
   27f19:	01 c8                	add    eax,ecx
   27f1b:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:196 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
   27f1e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   27f21:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   27f24:	89 c1                	mov    ecx,eax
   27f26:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27f2b:	89 c8                	mov    eax,ecx
   27f2d:	f7 ea                	imul   edx
   27f2f:	c1 fa 05             	sar    edx,0x5
   27f32:	89 c8                	mov    eax,ecx
   27f34:	c1 f8 1f             	sar    eax,0x1f
   27f37:	89 d6                	mov    esi,edx
   27f39:	29 c6                	sub    esi,eax
   27f3b:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   27f3e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27f43:	89 c8                	mov    eax,ecx
   27f45:	f7 ea                	imul   edx
   27f47:	c1 fa 05             	sar    edx,0x5
   27f4a:	89 c8                	mov    eax,ecx
   27f4c:	c1 f8 1f             	sar    eax,0x1f
   27f4f:	29 c2                	sub    edx,eax
   27f51:	89 d0                	mov    eax,edx
   27f53:	6b c0 64             	imul   eax,eax,0x64
   27f56:	29 c1                	sub    ecx,eax
   27f58:	89 c8                	mov    eax,ecx
   27f5a:	85 c0                	test   eax,eax
   27f5c:	74 49                	je     27fa7 <mktime+0x5b8>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:196 (discriminator 1)
   27f5e:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   27f61:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27f66:	89 c8                	mov    eax,ecx
   27f68:	f7 ea                	imul   edx
   27f6a:	c1 fa 05             	sar    edx,0x5
   27f6d:	89 c8                	mov    eax,ecx
   27f6f:	c1 f8 1f             	sar    eax,0x1f
   27f72:	89 d3                	mov    ebx,edx
   27f74:	29 c3                	sub    ebx,eax
   27f76:	6b c3 64             	imul   eax,ebx,0x64
   27f79:	89 cb                	mov    ebx,ecx
   27f7b:	29 c3                	sub    ebx,eax
   27f7d:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   27f80:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27f85:	89 c8                	mov    eax,ecx
   27f87:	f7 ea                	imul   edx
   27f89:	c1 fa 05             	sar    edx,0x5
   27f8c:	89 c8                	mov    eax,ecx
   27f8e:	c1 f8 1f             	sar    eax,0x1f
   27f91:	29 c2                	sub    edx,eax
   27f93:	89 d0                	mov    eax,edx
   27f95:	6b c0 64             	imul   eax,eax,0x64
   27f98:	29 c1                	sub    ecx,eax
   27f9a:	89 c8                	mov    eax,ecx
   27f9c:	39 c3                	cmp    ebx,eax
   27f9e:	7d 07                	jge    27fa7 <mktime+0x5b8>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:196 (discriminator 3)
   27fa0:	b8 01 00 00 00       	mov    eax,0x1
   27fa5:	eb 05                	jmp    27fac <mktime+0x5bd>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:196 (discriminator 4)
   27fa7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/time.c:196 (discriminator 6)
   27fac:	01 f0                	add    eax,esi
   27fae:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:197 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
   27fb1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   27fb4:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   27fb7:	89 c1                	mov    ecx,eax
   27fb9:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27fbe:	89 c8                	mov    eax,ecx
   27fc0:	f7 ea                	imul   edx
   27fc2:	c1 fa 07             	sar    edx,0x7
   27fc5:	89 c8                	mov    eax,ecx
   27fc7:	c1 f8 1f             	sar    eax,0x1f
   27fca:	89 d6                	mov    esi,edx
   27fcc:	29 c6                	sub    esi,eax
   27fce:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   27fd1:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27fd6:	89 c8                	mov    eax,ecx
   27fd8:	f7 ea                	imul   edx
   27fda:	c1 fa 07             	sar    edx,0x7
   27fdd:	89 c8                	mov    eax,ecx
   27fdf:	c1 f8 1f             	sar    eax,0x1f
   27fe2:	29 c2                	sub    edx,eax
   27fe4:	89 d0                	mov    eax,edx
   27fe6:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   27fec:	29 c1                	sub    ecx,eax
   27fee:	89 c8                	mov    eax,ecx
   27ff0:	85 c0                	test   eax,eax
   27ff2:	74 4f                	je     28043 <mktime+0x654>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:197 (discriminator 1)
   27ff4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   27ff7:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27ffc:	89 c8                	mov    eax,ecx
   27ffe:	f7 ea                	imul   edx
   28000:	c1 fa 07             	sar    edx,0x7
   28003:	89 c8                	mov    eax,ecx
   28005:	c1 f8 1f             	sar    eax,0x1f
   28008:	89 d3                	mov    ebx,edx
   2800a:	29 c3                	sub    ebx,eax
   2800c:	69 c3 90 01 00 00    	imul   eax,ebx,0x190
   28012:	89 cb                	mov    ebx,ecx
   28014:	29 c3                	sub    ebx,eax
   28016:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   28019:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2801e:	89 c8                	mov    eax,ecx
   28020:	f7 ea                	imul   edx
   28022:	c1 fa 07             	sar    edx,0x7
   28025:	89 c8                	mov    eax,ecx
   28027:	c1 f8 1f             	sar    eax,0x1f
   2802a:	29 c2                	sub    edx,eax
   2802c:	89 d0                	mov    eax,edx
   2802e:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   28034:	29 c1                	sub    ecx,eax
   28036:	89 c8                	mov    eax,ecx
   28038:	39 c3                	cmp    ebx,eax
   2803a:	7d 07                	jge    28043 <mktime+0x654>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:197 (discriminator 3)
   2803c:	b8 01 00 00 00       	mov    eax,0x1
   28041:	eb 05                	jmp    28048 <mktime+0x659>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:197 (discriminator 4)
   28043:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/NetBeansProjects/chrisOS/src/time.c:197 (discriminator 6)
   28048:	01 f0                	add    eax,esi
   2804a:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:199 (discriminator 6)

  yday = month = 0;
   2804d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   28054:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   28057:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:200 (discriminator 6)
  while (month < tmbuf->tm_mon) {
   2805a:	eb 7b                	jmp    280d7 <mktime+0x6e8>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:201
    yday += _ytab[LEAPYEAR(tm_year)][month];
   2805c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   2805f:	83 e0 03             	and    eax,0x3
   28062:	85 c0                	test   eax,eax
   28064:	75 50                	jne    280b6 <mktime+0x6c7>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:201 (discriminator 1)
   28066:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   28069:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2806e:	89 c8                	mov    eax,ecx
   28070:	f7 ea                	imul   edx
   28072:	c1 fa 05             	sar    edx,0x5
   28075:	89 c8                	mov    eax,ecx
   28077:	c1 f8 1f             	sar    eax,0x1f
   2807a:	29 c2                	sub    edx,eax
   2807c:	89 d0                	mov    eax,edx
   2807e:	6b c0 64             	imul   eax,eax,0x64
   28081:	29 c1                	sub    ecx,eax
   28083:	89 c8                	mov    eax,ecx
   28085:	85 c0                	test   eax,eax
   28087:	75 26                	jne    280af <mktime+0x6c0>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:201 (discriminator 4)
   28089:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   2808c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28091:	89 c8                	mov    eax,ecx
   28093:	f7 ea                	imul   edx
   28095:	c1 fa 07             	sar    edx,0x7
   28098:	89 c8                	mov    eax,ecx
   2809a:	c1 f8 1f             	sar    eax,0x1f
   2809d:	29 c2                	sub    edx,eax
   2809f:	89 d0                	mov    eax,edx
   280a1:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   280a7:	29 c1                	sub    ecx,eax
   280a9:	89 c8                	mov    eax,ecx
   280ab:	85 c0                	test   eax,eax
   280ad:	75 07                	jne    280b6 <mktime+0x6c7>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:201 (discriminator 5)
   280af:	ba 01 00 00 00       	mov    edx,0x1
   280b4:	eb 05                	jmp    280bb <mktime+0x6cc>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:201 (discriminator 6)
   280b6:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/NetBeansProjects/chrisOS/src/time.c:201 (discriminator 8)
   280bb:	89 d0                	mov    eax,edx
   280bd:	01 c0                	add    eax,eax
   280bf:	01 d0                	add    eax,edx
   280c1:	c1 e0 02             	shl    eax,0x2
   280c4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   280c7:	01 d0                	add    eax,edx
   280c9:	8b 04 85 60 5f 08 00 	mov    eax,DWORD PTR [eax*4+0x85f60]
   280d0:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:202 (discriminator 8)
    month++;
   280d3:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/NetBeansProjects/chrisOS/src/time.c:200
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
   280d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   280da:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   280dd:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   280e0:	0f 8f 76 ff ff ff    	jg     2805c <mktime+0x66d>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:204
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
   280e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   280e9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   280ec:	83 e8 01             	sub    eax,0x1
   280ef:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:205
  if (day + yday < 0) overflow|=4;
   280f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   280f5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   280f8:	01 d0                	add    eax,edx
   280fa:	85 c0                	test   eax,eax
   280fc:	79 04                	jns    28102 <mktime+0x713>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:205 (discriminator 1)
   280fe:	83 4d e8 04          	or     DWORD PTR [ebp-0x18],0x4
/home/yogi/NetBeansProjects/chrisOS/src/time.c:206
  day += yday;
   28102:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   28105:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:208

  tmbuf->tm_yday = yday;
   28108:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2810b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2810e:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:209
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
   28111:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   28114:	8d 48 04             	lea    ecx,[eax+0x4]
   28117:	ba 93 24 49 92       	mov    edx,0x92492493
   2811c:	89 c8                	mov    eax,ecx
   2811e:	f7 ea                	imul   edx
   28120:	8d 04 0a             	lea    eax,[edx+ecx*1]
   28123:	c1 f8 02             	sar    eax,0x2
   28126:	89 c2                	mov    edx,eax
   28128:	89 c8                	mov    eax,ecx
   2812a:	c1 f8 1f             	sar    eax,0x1f
   2812d:	29 c2                	sub    edx,eax
   2812f:	89 d0                	mov    eax,edx
   28131:	89 c2                	mov    edx,eax
   28133:	c1 e2 03             	shl    edx,0x3
   28136:	29 c2                	sub    edx,eax
   28138:	89 c8                	mov    eax,ecx
   2813a:	29 d0                	sub    eax,edx
   2813c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2813f:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:211

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
   28142:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28145:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   28148:	c1 e0 02             	shl    eax,0x2
   2814b:	89 c2                	mov    edx,eax
   2814d:	c1 e2 04             	shl    edx,0x4
   28150:	29 c2                	sub    edx,eax
   28152:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28155:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   28158:	01 d0                	add    eax,edx
   2815a:	c1 e0 02             	shl    eax,0x2
   2815d:	89 c2                	mov    edx,eax
   2815f:	c1 e2 04             	shl    edx,0x4
   28162:	29 c2                	sub    edx,eax
   28164:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28167:	8b 00                	mov    eax,DWORD PTR [eax]
   28169:	01 d0                	add    eax,edx
   2816b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:213

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
   2816e:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
   28173:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
   28176:	89 c1                	mov    ecx,eax
   28178:	ba 07 45 2e c2       	mov    edx,0xc22e4507
   2817d:	89 c8                	mov    eax,ecx
   2817f:	f7 ea                	imul   edx
   28181:	8d 04 0a             	lea    eax,[edx+ecx*1]
   28184:	c1 f8 10             	sar    eax,0x10
   28187:	89 c2                	mov    edx,eax
   28189:	89 c8                	mov    eax,ecx
   2818b:	c1 f8 1f             	sar    eax,0x1f
   2818e:	29 c2                	sub    edx,eax
   28190:	89 d0                	mov    eax,edx
   28192:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   28195:	7d 04                	jge    2819b <mktime+0x7ac>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:213 (discriminator 1)
   28197:	83 4d e8 08          	or     DWORD PTR [ebp-0x18],0x8
/home/yogi/NetBeansProjects/chrisOS/src/time.c:214
  seconds += day * SECS_DAY;
   2819b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2819e:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
   281a4:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:217

  // Now adjust according to timezone and daylight saving time
  if (((kTimeZone > 0) && (TIME_MAX - kTimeZone < seconds)) || 
   281a7:	a1 90 02 a0 00       	mov    eax,ds:0xa00290
   281ac:	85 c0                	test   eax,eax
   281ae:	7e 13                	jle    281c3 <mktime+0x7d4>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:217 (discriminator 1)
   281b0:	a1 90 02 a0 00       	mov    eax,ds:0xa00290
   281b5:	ba ff ff ff 7f       	mov    edx,0x7fffffff
   281ba:	29 c2                	sub    edx,eax
   281bc:	89 d0                	mov    eax,edx
   281be:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   281c1:	7c 15                	jl     281d8 <mktime+0x7e9>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:218 (discriminator 3)
      ((kTimeZone < 0) && (seconds < -kTimeZone))) {
   281c3:	a1 90 02 a0 00       	mov    eax,ds:0xa00290
/home/yogi/NetBeansProjects/chrisOS/src/time.c:217 (discriminator 3)

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
  seconds += day * SECS_DAY;

  // Now adjust according to timezone and daylight saving time
  if (((kTimeZone > 0) && (TIME_MAX - kTimeZone < seconds)) || 
   281c8:	85 c0                	test   eax,eax
   281ca:	79 10                	jns    281dc <mktime+0x7ed>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:218
      ((kTimeZone < 0) && (seconds < -kTimeZone))) {
   281cc:	a1 90 02 a0 00       	mov    eax,ds:0xa00290
   281d1:	f7 d8                	neg    eax
   281d3:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   281d6:	7e 04                	jle    281dc <mktime+0x7ed>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:219
          overflow|=16;
   281d8:	83 4d e8 10          	or     DWORD PTR [ebp-0x18],0x10
/home/yogi/NetBeansProjects/chrisOS/src/time.c:221
  }
  seconds += kTimeZone;
   281dc:	a1 90 02 a0 00       	mov    eax,ds:0xa00290
   281e1:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:223

  if (tmbuf->tm_isdst) {
   281e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   281e7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   281ea:	85 c0                	test   eax,eax
   281ec:	74 0a                	je     281f8 <mktime+0x809>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:224
    dst = _dstbias;
   281ee:	a1 2c 04 a0 00       	mov    eax,ds:0xa0042c
   281f3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
   281f6:	eb 07                	jmp    281ff <mktime+0x810>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:226
  } else {
    dst = 0;
   281f8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/NetBeansProjects/chrisOS/src/time.c:229
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
   281ff:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   28202:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   28205:	7e 04                	jle    2820b <mktime+0x81c>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:229 (discriminator 1)
   28207:	83 4d e8 20          	or     DWORD PTR [ebp-0x18],0x20
/home/yogi/NetBeansProjects/chrisOS/src/time.c:230
  seconds -= dst;
   2820b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   2820e:	29 45 dc             	sub    DWORD PTR [ebp-0x24],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:232

  if (overflow) return (time_t) overflow-2;
   28211:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   28215:	74 08                	je     2821f <mktime+0x830>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:232 (discriminator 1)
   28217:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2821a:	83 e8 02             	sub    eax,0x2
   2821d:	eb 03                	jmp    28222 <mktime+0x833>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:235

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
   2821f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
/home/yogi/NetBeansProjects/chrisOS/src/time.c:236
}
   28222:	83 c4 20             	add    esp,0x20
   28225:	5b                   	pop    ebx
   28226:	5e                   	pop    esi
   28227:	5d                   	pop    ebp
   28228:	c3                   	ret    

00028229 <_strdate>:
_strdate():
/home/yogi/NetBeansProjects/chrisOS/src/time.c:241

#if !defined(KERNEL) && !defined(OS_LIB)


char *_strdate(char *s) {
   28229:	55                   	push   ebp
   2822a:	89 e5                	mov    ebp,esp
   2822c:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/time.c:244
  time_t now;

  time(&now);
   2822f:	8d 45 fc             	lea    eax,[ebp-0x4]
   28232:	50                   	push   eax
   28233:	e8 48 f4 ff ff       	call   27680 <time>
   28238:	83 c4 04             	add    esp,0x4
/home/yogi/NetBeansProjects/chrisOS/src/time.c:247
  //fix me!
  //  strftime(s, 9, "%D", localtime(&now));
  return s;
   2823b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/src/time.c:248
}
   2823e:	c9                   	leave  
   2823f:	c3                   	ret    

00028240 <_strtime>:
_strtime():
/home/yogi/NetBeansProjects/chrisOS/src/time.c:250

char *_strtime(char *s) {
   28240:	55                   	push   ebp
   28241:	89 e5                	mov    ebp,esp
   28243:	83 ec 10             	sub    esp,0x10
/home/yogi/NetBeansProjects/chrisOS/src/time.c:253
  time_t now;

  time(&now);
   28246:	8d 45 fc             	lea    eax,[ebp-0x4]
   28249:	50                   	push   eax
   2824a:	e8 31 f4 ff ff       	call   27680 <time>
   2824f:	83 c4 04             	add    esp,0x4
/home/yogi/NetBeansProjects/chrisOS/src/time.c:256
  //fix me
  //  strftime(s, 9, "%T", localtime(&now));
  return s;
   28252:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/NetBeansProjects/chrisOS/src/time.c:257
}
   28255:	c9                   	leave  
   28256:	c3                   	ret    

00028257 <waitTicks>:
waitTicks():
/home/yogi/NetBeansProjects/chrisOS/src/time.c:260

void __attribute__((noinline))waitTicks(int TicksToWait)
{
   28257:	55                   	push   ebp
   28258:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/time.c:262
    //printf("ttw=%u",ttw);
    if (TicksToWait==0)
   2825a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   2825e:	74 0f                	je     2826f <waitTicks+0x18>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:267 (discriminator 1)
        return;
    //printd(DEBUG_TIMER,"ttw=%08X", TicksToWait);
    do
    {
        __asm("sti\nhlt\n");
   28260:	fb                   	sti    
   28261:	f4                   	hlt    
/home/yogi/NetBeansProjects/chrisOS/src/time.c:268 (discriminator 1)
        TicksToWait--;
   28262:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/NetBeansProjects/chrisOS/src/time.c:269 (discriminator 1)
    } while (TicksToWait>0);
   28266:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   2826a:	7f f4                	jg     28260 <waitTicks+0x9>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:270 (discriminator 2)
    return;
   2826c:	90                   	nop
   2826d:	eb 01                	jmp    28270 <waitTicks+0x19>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:263

void __attribute__((noinline))waitTicks(int TicksToWait)
{
    //printf("ttw=%u",ttw);
    if (TicksToWait==0)
        return;
   2826f:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/time.c:271
    {
        __asm("sti\nhlt\n");
        TicksToWait--;
    } while (TicksToWait>0);
    return;
}
   28270:	5d                   	pop    ebp
   28271:	c3                   	ret    

00028272 <wait>:
wait():
/home/yogi/NetBeansProjects/chrisOS/src/time.c:274

void /*__attribute__((noinline))*/wait(int msToWait)
{
   28272:	55                   	push   ebp
   28273:	89 e5                	mov    ebp,esp
/home/yogi/NetBeansProjects/chrisOS/src/time.c:277
    //printk("msToWait=%u, ticksperms=%u, ticksToWait=%u",msToWait, kTicksPerMS, msToWait*kTicksPerMS);
    //STOPHERE2
    waitTicks(msToWait/kTicksPerMS);
   28275:	8b 0d 84 02 a0 00    	mov    ecx,DWORD PTR ds:0xa00284
   2827b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2827e:	99                   	cdq    
   2827f:	f7 f9                	idiv   ecx
   28281:	50                   	push   eax
   28282:	e8 d0 ff ff ff       	call   28257 <waitTicks>
   28287:	83 c4 04             	add    esp,0x4
/home/yogi/NetBeansProjects/chrisOS/src/time.c:278
}
   2828a:	90                   	nop
   2828b:	c9                   	leave  
   2828c:	c3                   	ret    

0002828d <wait3>:
wait3():
/home/yogi/NetBeansProjects/chrisOS/src/time.c:281

void wait3(double msToWait)
{
   2828d:	55                   	push   ebp
   2828e:	89 e5                	mov    ebp,esp
   28290:	83 ec 28             	sub    esp,0x28
   28293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28296:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   28299:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2829c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:282
volatile double endTicks = (double)*kTicksSinceStart + msToWait/ (1000/kTicksPerSecond);
   2829f:	a1 60 02 a0 00       	mov    eax,ds:0xa00260
   282a4:	8b 00                	mov    eax,DWORD PTR [eax]
   282a6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   282a9:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   282b0:	df 6d d8             	fild   QWORD PTR [ebp-0x28]
   282b3:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   282b6:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   282b9:	dd 45 e8             	fld    QWORD PTR [ebp-0x18]
   282bc:	8b 0d 80 02 a0 00    	mov    ecx,DWORD PTR ds:0xa00280
   282c2:	b8 e8 03 00 00       	mov    eax,0x3e8
   282c7:	ba 00 00 00 00       	mov    edx,0x0
   282cc:	f7 f1                	div    ecx
   282ce:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   282d1:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   282d8:	df 6d d8             	fild   QWORD PTR [ebp-0x28]
   282db:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   282de:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   282e1:	de f9                	fdivp  st(1),st
   282e3:	de c1                	faddp  st(1),st
   282e5:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   282e8:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   282eb:	dd 5d f8             	fstp   QWORD PTR [ebp-0x8]
/home/yogi/NetBeansProjects/chrisOS/src/time.c:284

while (endTicks > (double)*kTicksSinceStart)
   282ee:	eb 02                	jmp    282f2 <wait3+0x65>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:285
    {__asm__("sti\n hlt\n");}
   282f0:	fb                   	sti    
   282f1:	f4                   	hlt    
/home/yogi/NetBeansProjects/chrisOS/src/time.c:284

void wait3(double msToWait)
{
volatile double endTicks = (double)*kTicksSinceStart + msToWait/ (1000/kTicksPerSecond);

while (endTicks > (double)*kTicksSinceStart)
   282f2:	a1 60 02 a0 00       	mov    eax,ds:0xa00260
   282f7:	8b 00                	mov    eax,DWORD PTR [eax]
   282f9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   282fc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   28303:	df 6d d8             	fild   QWORD PTR [ebp-0x28]
   28306:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   28309:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   2830c:	dd 45 f8             	fld    QWORD PTR [ebp-0x8]
   2830f:	df e9                	fucomip st,st(1)
   28311:	dd d8                	fstp   st(0)
   28313:	77 db                	ja     282f0 <wait3+0x63>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:287
    {__asm__("sti\n hlt\n");}
    
}
   28315:	90                   	nop
   28316:	c9                   	leave  
   28317:	c3                   	ret    

00028318 <wait2>:
wait2():
/home/yogi/NetBeansProjects/chrisOS/src/time.c:290

void wait2(unsigned msToWait)
{
   28318:	55                   	push   ebp
   28319:	89 e5                	mov    ebp,esp
   2831b:	53                   	push   ebx
   2831c:	83 ec 24             	sub    esp,0x24
/home/yogi/NetBeansProjects/chrisOS/src/time.c:291
    uint64_t startTicks = *kTicksSinceStart;             //25
   2831f:	a1 60 02 a0 00       	mov    eax,ds:0xa00260
   28324:	8b 00                	mov    eax,DWORD PTR [eax]
   28326:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   28329:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/NetBeansProjects/chrisOS/src/time.c:292
    unsigned msPerTick = 1000 / kTicksPerSecond;         //18
   28330:	8b 1d 80 02 a0 00    	mov    ebx,DWORD PTR ds:0xa00280
   28336:	b8 e8 03 00 00       	mov    eax,0x3e8
   2833b:	ba 00 00 00 00       	mov    edx,0x0
   28340:	f7 f3                	div    ebx
   28342:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/NetBeansProjects/chrisOS/src/time.c:293
    uint64_t totalTicksToWait = msToWait/msPerTick;     //4321/18
   28345:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28348:	ba 00 00 00 00       	mov    edx,0x0
   2834d:	f7 75 ec             	div    DWORD PTR [ebp-0x14]
   28350:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
   28353:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/NetBeansProjects/chrisOS/src/time.c:294
    uint64_t endTicks = startTicks + totalTicksToWait;
   2835a:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   2835d:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
   28360:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   28363:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   28366:	01 c8                	add    eax,ecx
   28368:	11 da                	adc    edx,ebx
   2836a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   2836d:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
/home/yogi/NetBeansProjects/chrisOS/src/time.c:296

    if (endTicks < *kTicksSinceStart)
   28370:	a1 60 02 a0 00       	mov    eax,ds:0xa00260
   28375:	8b 00                	mov    eax,DWORD PTR [eax]
   28377:	ba 00 00 00 00       	mov    edx,0x0
   2837c:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   2837f:	72 0d                	jb     2838e <wait2+0x76>
   28381:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   28384:	77 25                	ja     283ab <wait2+0x93>
   28386:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
   28389:	77 20                	ja     283ab <wait2+0x93>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:304
    //waitTicks(totalTicksToWait);
    //return;
    //printf("Waiting %u, ticks since start=%u  ms", msToWait, kTicksSinceStart);
    //printf ("startTicks=%u, msPerTick=%u, totalTicksToWait=%u, endTicks=%u, kTicksSinceStart=%u", startTicks, msPerTick, totalTicksToWait, endTicks, kTicksSinceStart);
    //printf("\nStart waiting ... endTicks=%u, kTicksSinceStart=%u\n",endTicks, kTicksSinceStart);
    while (endTicks > *kTicksSinceStart)
   2838b:	eb 01                	jmp    2838e <wait2+0x76>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:305
    {__asm__("hlt\n");}
   2838d:	f4                   	hlt    
/home/yogi/NetBeansProjects/chrisOS/src/time.c:304
    //waitTicks(totalTicksToWait);
    //return;
    //printf("Waiting %u, ticks since start=%u  ms", msToWait, kTicksSinceStart);
    //printf ("startTicks=%u, msPerTick=%u, totalTicksToWait=%u, endTicks=%u, kTicksSinceStart=%u", startTicks, msPerTick, totalTicksToWait, endTicks, kTicksSinceStart);
    //printf("\nStart waiting ... endTicks=%u, kTicksSinceStart=%u\n",endTicks, kTicksSinceStart);
    while (endTicks > *kTicksSinceStart)
   2838e:	a1 60 02 a0 00       	mov    eax,ds:0xa00260
   28393:	8b 00                	mov    eax,DWORD PTR [eax]
   28395:	ba 00 00 00 00       	mov    edx,0x0
   2839a:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   2839d:	72 ee                	jb     2838d <wait2+0x75>
   2839f:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   283a2:	77 08                	ja     283ac <wait2+0x94>
   283a4:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
   283a7:	72 e4                	jb     2838d <wait2+0x75>
   283a9:	eb 01                	jmp    283ac <wait2+0x94>
/home/yogi/NetBeansProjects/chrisOS/src/time.c:297
    unsigned msPerTick = 1000 / kTicksPerSecond;         //18
    uint64_t totalTicksToWait = msToWait/msPerTick;     //4321/18
    uint64_t endTicks = startTicks + totalTicksToWait;

    if (endTicks < *kTicksSinceStart)
        return;
   283ab:	90                   	nop
/home/yogi/NetBeansProjects/chrisOS/src/time.c:307
    //printf ("startTicks=%u, msPerTick=%u, totalTicksToWait=%u, endTicks=%u, kTicksSinceStart=%u", startTicks, msPerTick, totalTicksToWait, endTicks, kTicksSinceStart);
    //printf("\nStart waiting ... endTicks=%u, kTicksSinceStart=%u\n",endTicks, kTicksSinceStart);
    while (endTicks > *kTicksSinceStart)
    {__asm__("hlt\n");}
    //printf("done waiting!\n");
}
   283ac:	83 c4 24             	add    esp,0x24
   283af:	5b                   	pop    ebx
   283b0:	5d                   	pop    ebp
   283b1:	c3                   	ret    
   283b2:	66 90                	xchg   ax,ax
   283b4:	66 90                	xchg   ax,ax
   283b6:	66 90                	xchg   ax,ax
   283b8:	66 90                	xchg   ax,ax
   283ba:	66 90                	xchg   ax,ax
   283bc:	66 90                	xchg   ax,ax
   283be:	66 90                	xchg   ax,ax

000283c0 <__udivdi3>:
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1287
#endif

#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
   283c0:	55                   	push   ebp
   283c1:	57                   	push   edi
   283c2:	56                   	push   esi
   283c3:	53                   	push   ebx
   283c4:	83 ec 1c             	sub    esp,0x1c
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1014
#endif
UDWtype
__udivmoddi4 (UDWtype n, UDWtype d, UDWtype *rp)
{
  const DWunion nn = {.ll = n};
  const DWunion dd = {.ll = d};
   283c7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1287
#endif

#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
   283cb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
   283cf:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
   283d3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1026
  d1 = dd.s.high;
  n0 = nn.s.low;
  n1 = nn.s.high;

#if !UDIV_NEEDS_NORMALIZATION
  if (d1 == 0)
   283d7:	85 f6                	test   esi,esi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1013
static inline __attribute__ ((__always_inline__))
#endif
UDWtype
__udivmoddi4 (UDWtype n, UDWtype d, UDWtype *rp)
{
  const DWunion nn = {.ll = n};
   283d9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
   283dd:	89 ca                	mov    edx,ecx
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1014
  const DWunion dd = {.ll = d};
   283df:	89 f8                	mov    eax,edi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1026
  d1 = dd.s.high;
  n0 = nn.s.low;
  n1 = nn.s.high;

#if !UDIV_NEEDS_NORMALIZATION
  if (d1 == 0)
   283e1:	75 3d                	jne    28420 <__udivdi3+0x60>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1028
    {
      if (d0 > n1)
   283e3:	39 cf                	cmp    edi,ecx
   283e5:	0f 87 c5 00 00 00    	ja     284b0 <__udivdi3+0xf0>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1041
	}
      else
	{
	  /* qq = NN / 0d */

	  if (d0 == 0)
   283eb:	85 ff                	test   edi,edi
   283ed:	89 fd                	mov    ebp,edi
   283ef:	75 0b                	jne    283fc <__udivdi3+0x3c>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1042
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */
   283f1:	b8 01 00 00 00       	mov    eax,0x1
   283f6:	31 d2                	xor    edx,edx
   283f8:	f7 f7                	div    edi
   283fa:	89 c5                	mov    ebp,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1044

	  udiv_qrnnd (q1, n1, 0, n1, d0);
   283fc:	89 c8                	mov    eax,ecx
   283fe:	31 d2                	xor    edx,edx
   28400:	f7 f5                	div    ebp
   28402:	89 c1                	mov    ecx,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1045
	  udiv_qrnnd (q0, n0, n1, n0, d0);
   28404:	89 d8                	mov    eax,ebx
   28406:	89 cf                	mov    edi,ecx
   28408:	f7 f5                	div    ebp
   2840a:	89 c3                	mov    ebx,eax
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   2840c:	89 d8                	mov    eax,ebx
   2840e:	89 fa                	mov    edx,edi
   28410:	83 c4 1c             	add    esp,0x1c
   28413:	5b                   	pop    ebx
   28414:	5e                   	pop    esi
   28415:	5f                   	pop    edi
   28416:	5d                   	pop    ebp
   28417:	c3                   	ret    
   28418:	90                   	nop
   28419:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1136
    }
#endif /* UDIV_NEEDS_NORMALIZATION */

  else
    {
      if (d1 > n1)
   28420:	39 ce                	cmp    esi,ecx
   28422:	77 74                	ja     28498 <__udivdi3+0xd8>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1155
	}
      else
	{
	  /* 0q = NN / dd */

	  count_leading_zeros (bm, d1);
   28424:	0f bd fe             	bsr    edi,esi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1156
	  if (bm == 0)
   28427:	83 f7 1f             	xor    edi,0x1f
   2842a:	0f 84 98 00 00 00    	je     284c8 <__udivdi3+0x108>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1188
	  else
	    {
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;
   28430:	bb 20 00 00 00       	mov    ebx,0x20
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1190

	      d1 = (d1 << bm) | (d0 >> b);
   28435:	89 f9                	mov    ecx,edi
   28437:	89 c5                	mov    ebp,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1188
	  else
	    {
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;
   28439:	29 fb                	sub    ebx,edi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1190

	      d1 = (d1 << bm) | (d0 >> b);
   2843b:	d3 e6                	shl    esi,cl
   2843d:	89 d9                	mov    ecx,ebx
   2843f:	d3 ed                	shr    ebp,cl
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1191
	      d0 = d0 << bm;
   28441:	89 f9                	mov    ecx,edi
   28443:	d3 e0                	shl    eax,cl
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1190
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
   28445:	09 ee                	or     esi,ebp
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1192
	      d0 = d0 << bm;
	      n2 = n1 >> b;
   28447:	89 d9                	mov    ecx,ebx
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1191
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
	      d0 = d0 << bm;
   28449:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1192
	      n2 = n1 >> b;
   2844d:	89 d5                	mov    ebp,edx
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1193
	      n1 = (n1 << bm) | (n0 >> b);
   2844f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1192

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
	      d0 = d0 << bm;
	      n2 = n1 >> b;
   28453:	d3 ed                	shr    ebp,cl
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1193
	      n1 = (n1 << bm) | (n0 >> b);
   28455:	89 f9                	mov    ecx,edi
   28457:	d3 e2                	shl    edx,cl
   28459:	89 d9                	mov    ecx,ebx
   2845b:	d3 e8                	shr    eax,cl
   2845d:	09 c2                	or     edx,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1196
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
   2845f:	89 d0                	mov    eax,edx
   28461:	89 ea                	mov    edx,ebp
   28463:	f7 f6                	div    esi
   28465:	89 d5                	mov    ebp,edx
   28467:	89 c3                	mov    ebx,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1197
	      umul_ppmm (m1, m0, q0, d0);
   28469:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1199

	      if (m1 > n1 || (m1 == n1 && m0 > n0))
   2846d:	39 d5                	cmp    ebp,edx
   2846f:	72 10                	jb     28481 <__udivdi3+0xc1>
   28471:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
   28475:	89 f9                	mov    ecx,edi
   28477:	d3 e6                	shl    esi,cl
   28479:	39 c6                	cmp    esi,eax
   2847b:	73 07                	jae    28484 <__udivdi3+0xc4>
   2847d:	39 d5                	cmp    ebp,edx
   2847f:	75 03                	jne    28484 <__udivdi3+0xc4>
   28481:	83 eb 01             	sub    ebx,0x1
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1202
		{
		  q0--;
		  sub_ddmmss (m1, m0, m1, m0, d1, d0);
   28484:	31 ff                	xor    edi,edi
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   28486:	89 d8                	mov    eax,ebx
   28488:	89 fa                	mov    edx,edi
   2848a:	83 c4 1c             	add    esp,0x1c
   2848d:	5b                   	pop    ebx
   2848e:	5e                   	pop    esi
   2848f:	5f                   	pop    edi
   28490:	5d                   	pop    ebp
   28491:	c3                   	ret    
   28492:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1136
    }
#endif /* UDIV_NEEDS_NORMALIZATION */

  else
    {
      if (d1 > n1)
   28498:	31 ff                	xor    edi,edi
   2849a:	31 db                	xor    ebx,ebx
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   2849c:	89 d8                	mov    eax,ebx
   2849e:	89 fa                	mov    edx,edi
   284a0:	83 c4 1c             	add    esp,0x1c
   284a3:	5b                   	pop    ebx
   284a4:	5e                   	pop    esi
   284a5:	5f                   	pop    edi
   284a6:	5d                   	pop    ebp
   284a7:	c3                   	ret    
   284a8:	90                   	nop
   284a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1032
    {
      if (d0 > n1)
	{
	  /* 0q = nn / 0D */

	  udiv_qrnnd (q0, n0, n1, n0, d0);
   284b0:	89 d8                	mov    eax,ebx
   284b2:	f7 f7                	div    edi
   284b4:	31 ff                	xor    edi,edi
   284b6:	89 c3                	mov    ebx,eax
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   284b8:	89 d8                	mov    eax,ebx
   284ba:	89 fa                	mov    edx,edi
   284bc:	83 c4 1c             	add    esp,0x1c
   284bf:	5b                   	pop    ebx
   284c0:	5e                   	pop    esi
   284c1:	5f                   	pop    edi
   284c2:	5d                   	pop    ebp
   284c3:	c3                   	ret    
   284c4:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1166

		 This special case is necessary, not an optimization.  */

	      /* The condition on the next line takes advantage of that
		 n1 >= d1 (true due to program flow).  */
	      if (n1 > d1 || n0 >= d0)
   284c8:	39 ce                	cmp    esi,ecx
   284ca:	72 0c                	jb     284d8 <__udivdi3+0x118>
   284cc:	31 db                	xor    ebx,ebx
   284ce:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
   284d2:	0f 87 34 ff ff ff    	ja     2840c <__udivdi3+0x4c>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1169
		{
		  q0 = 1;
		  sub_ddmmss (n1, n0, n1, n0, d1, d0);
   284d8:	bb 01 00 00 00       	mov    ebx,0x1
   284dd:	e9 2a ff ff ff       	jmp    2840c <__udivdi3+0x4c>
