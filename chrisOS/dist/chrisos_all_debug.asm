
Debug/cross-Linux/chrisos:     file format elf32-i386


Disassembly of section .text:

00001000 <tos>:
tos():
/home/yogi/src/os/chrisOS/asm/boot.s:15
.att_syntax noprefix
.code16
.globl tos
.type tos, @function
tos:
    ljmp $0,$tos3
    1000:	ea 05 10 00 00 e9 ca 	jmp    0xcae9:0x1005

00001005 <tos3>:
tos3():
/home/yogi/src/os/chrisOS/asm/boot.s:18
tos3:
.code32
        jmp	initAP	# initialize awakened AP
    1005:	e9 ca 06 00 00       	jmp    16d4 <initAP>
    100a:	66 90                	xchg   ax,ax
    100c:	02 b0 ad 1b 03 00    	add    dh,BYTE PTR [eax+0x31bad]
    1012:	00 00                	add    BYTE PTR [eax],al
    1014:	fb                   	sti    
    1015:	4f                   	dec    edi
    1016:	52                   	push   edx
    1017:	e4 e8                	in     al,0xe8

00001018 <_start>:
_start():
/home/yogi/src/os/chrisOS/asm/boot.s:84
        //mov %esp, stack_top

	# We are now ready to actually execute C code. We cannot embed that in an
	# assembly file, so we'll create a kernel.c file in a moment. In that file,
	# we'll create a C entry point called kernel_main and call it here.
	call kernel_main
    1018:	e8 74 34 02 00       	call   24491 <kernel_main>
/home/yogi/src/os/chrisOS/asm/boot.s:92
	# infinite loop. To do that, we use the clear interrupt ('cli') instruction
	# to disable interrupts, the halt instruction ('hlt') to stop the CPU until
	# the next interrupt arrives, and jumping to the halt instruction if it ever
	# continues execution, just to be safe. We will create a local label rather
	# than real symbol and jump to there endlessly.
	cli
    101d:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/boot.s:93
	hlt
    101e:	f4                   	hlt    
/home/yogi/src/os/chrisOS/asm/boot.s:95
.Lhang:
	jmp .Lhang
    101f:	eb fe                	jmp    101f <_start+0x7>
    1021:	66 90                	xchg   ax,ax
    1023:	66 90                	xchg   ax,ax
    1025:	66 90                	xchg   ax,ax
    1027:	90                   	nop

00001028 <isE820Available>:
isE820Available():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:11

.globl isE820Available
.type isE820Available, @function
isE820Available:
.code32
mov eax,0x10
    1028:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:12
mov ds,eax
    102d:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:13
mov saveESP, esp
    102f:	89 25 c1 12 00 00    	mov    DWORD PTR ds:0x12c1,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:14
mov sp, 0xfffc
    1035:	66 bc fc ff          	mov    sp,0xfffc
/home/yogi/src/os/chrisOS/asm/bootCPU.s:15
call leaveProtMode
    1039:	e8 67 00 00 00       	call   10a5 <leaveProtMode>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:17
.code16
mov ax, 0x8000
    103e:	b8 00 80 8e d0       	mov    eax,0xd08e8000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:19
mov ss, ax
pusha
    1043:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:20
mov eax,0x0000E820
    1044:	66 b8 20 e8          	mov    ax,0xe820
    1048:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:21
mov edx, 0x534D4150
    104a:	66 ba 50 41          	mov    dx,0x4150
    104e:	4d                   	dec    ebp
    104f:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:22
mov ebx, 0
    1050:	66 bb 00 00          	mov    bx,0x0
    1054:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:23
mov ecx, 100
    1056:	66 b9 64 00          	mov    cx,0x64
    105a:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:24
lea di, e820data
    105c:	8d 3e                	lea    edi,[esi]
    105e:	dd 12                	fst    QWORD PTR [edx]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:25
int 0x15
    1060:	cd 15                	int    0x15
/home/yogi/src/os/chrisOS/asm/bootCPU.s:26
mov savedValue, eax
    1062:	66 a3 c5 12 61 e8    	mov    ds:0xe86112c5,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:29
popa
.code32
call reenterProtMode
    1068:	83 00 00             	add    DWORD PTR [eax],0x0
    106b:	00 c3                	add    bl,al

0000106d <getInt12Memory>:
getInt12Memory():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:37

.globl getInt12Memory
.type getInt12Memory, @function
getInt12Memory:
.code32
mov eax,0x10
    106d:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:38
mov ds,eax
    1072:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:39
mov saveESP, esp
    1074:	89 25 c1 12 00 00    	mov    DWORD PTR ds:0x12c1,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:40
mov sp, 0xfffc
    107a:	66 bc fc ff          	mov    sp,0xfffc
/home/yogi/src/os/chrisOS/asm/bootCPU.s:41
call leaveProtMode
    107e:	e8 22 00 00 00       	call   10a5 <leaveProtMode>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:43
.code16
mov ax, 0x8000
    1083:	b8 00 80 8e d0       	mov    eax,0xd08e8000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:45
mov ss, ax
int 0x12
    1088:	cd 12                	int    0x12
/home/yogi/src/os/chrisOS/asm/bootCPU.s:46
movzx edx,ax
    108a:	66 0f b7 d0          	movzx  dx,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:47
mov savedValue, edx
    108e:	66 89 16             	mov    WORD PTR [esi],dx
    1091:	c5 12                	lds    edx,FWORD PTR [edx]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:48
mov ax, 0x1112    
    1093:	b8 12 11 30 db       	mov    eax,0xdb301112
/home/yogi/src/os/chrisOS/asm/bootCPU.s:50
xor bl, bl    
int 0x10 
    1098:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:52
.code32
call reenterProtMode
    109a:	e8 50 00 00 00       	call   10ef <reenterProtMode>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:53
ret
    109f:	c3                   	ret    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:54
jmp hang
    10a0:	e9 b6 00 00 00       	jmp    115b <hang>

000010a5 <leaveProtMode>:
leaveProtMode():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:60
//background, do on team, etc.
.globl leaveProtMode
.type leaveProtMode, @function
leaveProtMode:
.code32
lgdt [rmGdtp]
    10a5:	0f 01 15 3c 04 12 00 	lgdtd  ds:0x12043c
/home/yogi/src/os/chrisOS/asm/bootCPU.s:61
jmp 0x8:Into16BitProt
    10ac:	ea b3 10 00 00 08 00 	jmp    0x8:0x10b3

000010b3 <Into16BitProt>:
Into16BitProt():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:64
Into16BitProt:
.code16
mov ax,0x10
    10b3:	b8 10 00 8e d8       	mov    eax,0xd88e0010
/home/yogi/src/os/chrisOS/asm/bootCPU.s:66
mov ds, ax
mov gs, ax
    10b8:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:67
mov fs, ax
    10ba:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:68
mov es, ax
    10bc:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:70
.code32
mov eax, cr0
    10be:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:71
and al, 0xFe
    10c1:	24 fe                	and    al,0xfe
/home/yogi/src/os/chrisOS/asm/bootCPU.s:72
mov cr0, eax
    10c3:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:74
.code32
jmp 0:LeaveProtModeJmp
    10c6:	ea cd 10 00 00 00 00 	jmp    0x0:0x10cd

000010cd <LeaveProtModeJmp>:
LeaveProtModeJmp():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:77
LeaveProtModeJmp:
.code16
mov ax, 0
    10cd:	b8 00 00 8e d8       	mov    eax,0xd88e0000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:79
mov ds, ax
mov es, ax
    10d2:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:80
mov fs, ax
    10d4:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:81
mov gs, ax
    10d6:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:82
sidt [saved_idt]
    10d8:	0f 01 0e             	sidtd  [esi]
    10db:	d7                   	xlat   BYTE PTR ds:[ebx]
    10dc:	12 0f                	adc    cl,BYTE PTR [edi]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:83
lidt [idt_real]
    10de:	01 1e                	add    DWORD PTR [esi],ebx
    10e0:	cf                   	iret   
    10e1:	12 0f                	adc    cl,BYTE PTR [edi]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:84
sgdt [saved_gdt16_lo]
    10e3:	01 06                	add    DWORD PTR [esi],eax
    10e5:	bb 12 b8 00 00       	mov    ebx,0xb812
/home/yogi/src/os/chrisOS/asm/bootCPU.s:87
.code16
mov ax,0
mov ss,ax
    10ea:	8e d0                	mov    ss,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:88
mov ds, ax
    10ec:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:90
.code32
ret
    10ee:	c3                   	ret    

000010ef <reenterProtMode>:
reenterProtMode():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:96

.globl reenterProtMode
.type reenterProtMode, @function
reenterProtMode:
.code16
lgdt [saved_gdt16_lo]
    10ef:	0f 01 16             	lgdtd  [esi]
    10f2:	bb 12 0f 01 1e       	mov    ebx,0x1e010f12
/home/yogi/src/os/chrisOS/asm/bootCPU.s:97
lidt [saved_idt]
    10f7:	d7                   	xlat   BYTE PTR ds:[ebx]
    10f8:	12 0f                	adc    cl,BYTE PTR [edi]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:99
.code32
mov eax, cr0
    10fa:	20 c0                	and    al,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:100
or  al, 0x1
    10fc:	0c 01                	or     al,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:102
.code16
or  eax,0x10000   #clr 05/12/2016 - added wp bit
    10fe:	66 0d 00 00          	or     ax,0x0
    1102:	01 00                	add    DWORD PTR [eax],eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:104
.code32
mov cr0, eax
    1104:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:106
.code16
ljmp 0x18:reenterProtModeJmp
    1107:	ea 0c 11 18 00 66 b8 	jmp    0xb866:0x18110c

0000110c <reenterProtModeJmp>:
reenterProtModeJmp():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:109
reenterProtModeJmp:
.code32
mov ax,0x10
    110c:	66 b8 10 00          	mov    ax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:110
mov ds,ax
    1110:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:111
mov es,ax
    1112:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:112
mov gs,ax
    1114:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:113
lgdt [kernelGDT]
    1116:	0f 01 15 4c 04 12 00 	lgdtd  ds:0x12044c
/home/yogi/src/os/chrisOS/asm/bootCPU.s:114
ljmp 0x8:reenterProtMode32Jmp
    111d:	ea 24 11 00 00 08 00 	jmp    0x8:0x1124

00001124 <reenterProtMode32Jmp>:
reenterProtMode32Jmp():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:117
reenterProtMode32Jmp:
.code16
mov ax,0x10
    1124:	b8 10 00 8e d8       	mov    eax,0xd88e0010
/home/yogi/src/os/chrisOS/asm/bootCPU.s:119
mov ds,ax
mov ss,ax
    1129:	8e d0                	mov    ss,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:120
mov es,ax
    112b:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:121
mov fs,ax
    112d:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:122
mov gs,ax
    112f:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:124
.code32
mov eax,savedValue
    1131:	a1 c5 12 00 00       	mov    eax,ds:0x12c5
/home/yogi/src/os/chrisOS/asm/bootCPU.s:125
mov esp,saveESP
    1136:	8b 25 c1 12 00 00    	mov    esp,DWORD PTR ds:0x12c1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:126
ret
    113c:	c3                   	ret    

0000113d <set_gdt>:
set_gdt():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:132

.globl set_gdt
.type set_gdt, @function
set_gdt:
.code32
push eax
    113d:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:133
    mov eax, [esp + 0x8]
    113e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:134
    lgdt [eax]
    1142:	0f 01 10             	lgdtd  [eax]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:135
    pop eax
    1145:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:136
    jmp 0x08:.reload_CS
    1146:	ea 4d 11 00 00 08 00 	jmp    0x8:0x114d

0000114d <.reload_CS>:
.reload_CS():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:139
.reload_CS:
.code16
    mov ax, 0x10
    114d:	b8 10 00 8e d8       	mov    eax,0xd88e0010
/home/yogi/src/os/chrisOS/asm/bootCPU.s:141
    mov ds, ax
    mov es, ax
    1152:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:142
    mov fs, ax
    1154:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:143
    mov gs, ax
    1156:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:144
    mov ss, ax
    1158:	8e d0                	mov    ss,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:146
.code32
    ret
    115a:	c3                   	ret    

0000115b <hang>:
hang():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:148
hang:
    hlt
    115b:	f4                   	hlt    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:149
    jmp hang
    115c:	eb fd                	jmp    115b <hang>

0000115e <idt_load>:
idt_load():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:156
// Loads the IDT defined in '_idtp' into the processor.
// This is declared in C as 'extern void idt_load();'
.globl idt_load
.type idt_load, @function
idt_load:
    push ebp
    115e:	55                   	push   ebp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:157
    mov ebp, esp
    115f:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:158
    push eax
    1161:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:159
    push ebx
    1162:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:160
    cli
    1163:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:161
    mov eax,[ebp+12]    #size + bottom of offset
    1164:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:162
    mov ebx,[ebp+8]     #top of offset
    1167:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:163
    ror eax,16          #mov the size out of the way
    116a:	c1 c8 10             	ror    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:164
    mov ax,bx           #move the top of the address
    116d:	66 89 d8             	mov    ax,bx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:165
    ror eax,16
    1170:	c1 c8 10             	ror    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:166
    shr ebx,16
    1173:	c1 eb 10             	shr    ebx,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:167
    mov idtPtrToLoad,eax
    1176:	a3 47 15 00 00       	mov    ds:0x1547,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:168
    mov idtPtrToLoad+4,ebx
    117b:	89 1d 4b 15 00 00    	mov    DWORD PTR ds:0x154b,ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:171
    //we always put our IDT in idtPtrToLoad before calling idt_load
//    mov eax, word ptr idtPtrToLoad
    lidt [idtPtrToLoad]
    1181:	0f 01 1d 47 15 00 00 	lidtd  ds:0x1547
/home/yogi/src/os/chrisOS/asm/bootCPU.s:172
    sti
    1188:	fb                   	sti    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:173
    pop ebx
    1189:	5b                   	pop    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:174
    pop eax
    118a:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:175
    pop ebp
    118b:	5d                   	pop    ebp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:176
    ret
    118c:	c3                   	ret    

0000118d <init_PIT>:
init_PIT():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:182
 #Input
 # ebx   Desired PIT frequency in Hz
 .globl init_PIT
.type init_PIT, @function
init_PIT:
    push ebp
    118d:	55                   	push   ebp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:183
    mov ebp, esp
    118e:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:185
    # Do some checking
    mov ebx,[ebp+8]
    1190:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:186
    pushad
    1193:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:187
    mov eax,0x10000                   #eax = reload value for slowest possible frequency (65536)
    1194:	b8 00 00 01 00       	mov    eax,0x10000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:188
    cmp ebx,18                        #Is the requested frequency too low?
    1199:	83 fb 12             	cmp    ebx,0x12
/home/yogi/src/os/chrisOS/asm/bootCPU.s:189
    jbe .gotReloadValue               # yes, use slowest possible frequency
    119c:	76 34                	jbe    11d2 <.gotReloadValue>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:191
 
    mov eax,1                         #ax = reload value for fastest possible frequency (1)
    119e:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:192
    cmp ebx,1193181                   #Is the requested frequency too high?
    11a3:	81 fb dd 34 12 00    	cmp    ebx,0x1234dd
/home/yogi/src/os/chrisOS/asm/bootCPU.s:193
    jae .gotReloadValue               # yes, use fastest possible frequency
    11a9:	73 27                	jae    11d2 <.gotReloadValue>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:197
 
    # Calculate the reload value
 
    mov eax,3579545
    11ab:	b8 99 9e 36 00       	mov    eax,0x369e99
/home/yogi/src/os/chrisOS/asm/bootCPU.s:198
    mov edx,0                         #edx:eax = 3579545
    11b0:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:199
    div ebx                           #eax = 3579545 / frequency, edx = remainder
    11b5:	f7 f3                	div    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:200
    cmp edx,3579545 / 2               #Is the remainder more than half?
    11b7:	81 fa 4c 4f 1b 00    	cmp    edx,0x1b4f4c
/home/yogi/src/os/chrisOS/asm/bootCPU.s:201
    jb .l1                            # no, round down
    11bd:	72 01                	jb     11c0 <.l1>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:202
    inc eax                           # yes, round up
    11bf:	40                   	inc    eax

000011c0 <.l1>:
.l1():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:204
 .l1:
    mov ebx,3
    11c0:	bb 03 00 00 00       	mov    ebx,0x3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:205
    mov edx,0                         #edx:eax = 3579545 * 256 / frequency
    11c5:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:206
    div ebx                           #eax = (3579545 * 256 / 3 * 256) / frequency
    11ca:	f7 f3                	div    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:207
    cmp edx,3 / 2                     #Is the remainder more than half?
    11cc:	83 fa 01             	cmp    edx,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:208
    jb .l2                            # no, round down
    11cf:	72 01                	jb     11d2 <.gotReloadValue>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:209
    inc eax                           # yes, round up
    11d1:	40                   	inc    eax

000011d2 <.gotReloadValue>:
.gotReloadValue():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:216
 
 
 # Store the reload value and calculate the actual frequency
 
 .gotReloadValue:
    push eax                          #Store reload_value for later
    11d2:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:217
    mov [PIT_reload_value],ax         #Store the reload value for later
    11d3:	66 a3 1f 13 00 00    	mov    ds:0x131f,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:218
    mov ebx,eax                       #ebx = reload value
    11d9:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:220
 
    mov eax,3579545
    11db:	b8 99 9e 36 00       	mov    eax,0x369e99
/home/yogi/src/os/chrisOS/asm/bootCPU.s:221
    mov edx,0                         #edx:eax = 3579545
    11e0:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:222
    div ebx                           #eax = 3579545 / reload_value, edx = remainder
    11e5:	f7 f3                	div    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:223
    cmp edx,3579545 / 2               #Is the remainder more than half?
    11e7:	81 fa 4c 4f 1b 00    	cmp    edx,0x1b4f4c
/home/yogi/src/os/chrisOS/asm/bootCPU.s:224
    jb .l3                            # no, round down
    11ed:	72 01                	jb     11f0 <.l3>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:225
    inc eax                           # yes, round up
    11ef:	40                   	inc    eax

000011f0 <.l3>:
.l3():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:227
 .l3:
    mov ebx,3
    11f0:	bb 03 00 00 00       	mov    ebx,0x3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:228
    mov edx,0                         #edx:eax = 3579545 / reload_value
    11f5:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:229
    div ebx                           #eax = (3579545 / 3) / frequency
    11fa:	f7 f3                	div    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:230
    cmp edx,3 / 2                     #Is the remainder more than half?
    11fc:	83 fa 01             	cmp    edx,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:231
    jb .l4                            # no, round down
    11ff:	72 01                	jb     1202 <.l4>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:232
    inc eax                           # yes, round up
    1201:	40                   	inc    eax

00001202 <.l4>:
.l4():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:234
 .l4:
    mov [IRQ0_frequency],eax          #Store the actual frequency for displaying later
    1202:	a3 17 13 00 00       	mov    ds:0x1317,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:248
 #           time in ms = reload_value * 3000 / 3579545 * (2^42)/(2^42)
 #           time in ms = reload_value * 3000 * (2^42) / 3579545 / (2^42)
 #           time in ms * 2^32 = reload_value * 3000 * (2^42) / 3579545 / (2^42) * (2^32)
 #           time in ms * 2^32 = reload_value * 3000 * (2^42) / 3579545 / (2^10)
 
    pop ebx                           #ebx = reload_value
    1207:	5b                   	pop    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:249
    mov eax,0xDBB3A062                #eax = 3000 * (2^42) / 3579545
    1208:	b8 62 a0 b3 db       	mov    eax,0xdbb3a062
/home/yogi/src/os/chrisOS/asm/bootCPU.s:250
    mul ebx                           #edx:eax = reload_value * 3000 * (2^42) / 3579545
    120d:	f7 e3                	mul    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:251
    shrd eax,edx,10
    120f:	0f ac d0 0a          	shrd   eax,edx,0xa
/home/yogi/src/os/chrisOS/asm/bootCPU.s:252
    shr edx,10                        #edx:eax = reload_value * 3000 * (2^42) / 3579545 / (2^10)
    1213:	c1 ea 0a             	shr    edx,0xa
/home/yogi/src/os/chrisOS/asm/bootCPU.s:254
 
    mov [IRQ0_ms],edx                 #Set whole ms between IRQs
    1216:	89 15 0f 13 00 00    	mov    DWORD PTR ds:0x130f,edx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:255
    mov [IRQ0_fractions],eax          #Set fractions of 1 ms between IRQs
    121c:	a3 07 13 00 00       	mov    ds:0x1307,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:260
 
 
 # Program the PIT channel
 
    pushfd
    1221:	9c                   	pushf  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:261
    cli                               #Disabled interrupts (just in case)
    1222:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:263
 
    mov al,0b00110100                  #channel 0, lobyte/hibyte, rate generator
    1223:	b0 34                	mov    al,0x34
/home/yogi/src/os/chrisOS/asm/bootCPU.s:264
    out 0x43, al
    1225:	e6 43                	out    0x43,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:266
 
    mov ax,[PIT_reload_value]         #ax = 16 bit reload value
    1227:	66 a1 1f 13 00 00    	mov    ax,ds:0x131f
/home/yogi/src/os/chrisOS/asm/bootCPU.s:267
    out 0x40,al                       #Set low byte of PIT reload value
    122d:	e6 40                	out    0x40,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:268
    mov al,ah                         #ax = high 8 bits of reload value
    122f:	88 e0                	mov    al,ah
/home/yogi/src/os/chrisOS/asm/bootCPU.s:269
    out 0x40,al                       #Set high byte of PIT reload value
    1231:	e6 40                	out    0x40,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:271
 
    popfd
    1233:	9d                   	popf   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:273
 
    popad
    1234:	61                   	popa   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:274
    pop ebp
    1235:	5d                   	pop    ebp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:275
    sti
    1236:	fb                   	sti    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:276
    ret
    1237:	c3                   	ret    

00001238 <getE820Memory_asm>:
getE820Memory_asm():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:282

 .globl getE820Memory_asm
.type getE820Memory_asm, @function
getE820Memory_asm:
.code32
mov eax,0x10
    1238:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:283
mov ds,eax
    123d:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:284
mov saveESP, esp
    123f:	89 25 c1 12 00 00    	mov    DWORD PTR ds:0x12c1,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:285
mov sp, 0xfff7
    1245:	66 bc f7 ff          	mov    sp,0xfff7
/home/yogi/src/os/chrisOS/asm/bootCPU.s:286
call leaveProtMode
    1249:	e8 57 fe ff ff       	call   10a5 <leaveProtMode>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:287
pusha
    124e:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:289
.code16
lea eax, word ptr lowSmapTbl
    124f:	66 8d 06             	lea    ax,[esi]
    1252:	67 13 0f             	adc    ecx,DWORD PTR [bx]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:291
.code32
movzx eax,ax
    1255:	b7 c0                	mov    bh,0xc0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:292
mov lowSmapTablePtr,eax
    1257:	a3 5f 13 00 00       	mov    ds:0x135f,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:293
mov ax, 0
    125c:	66 b8 00 00          	mov    ax,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:294
mov es, ax
    1260:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:295
mov ebx, 0
    1262:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:297
.code16
lea edi, word ptr [lowSmapTbl]
    1267:	66 8d 3e             	lea    di,[esi]
    126a:	67 13 66 b8          	adc    esp,DWORD PTR [bp-0x48]

0000126c <getE820Memory_asm_getNext>:
.code32():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:300
.code32:
getE820Memory_asm_getNext:
mov eax, 0xe820
    126c:	66 b8 20 e8          	mov    ax,0xe820
    1270:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:301
mov edx, 0x534D4150
    1272:	66 ba 50 41          	mov    dx,0x4150
    1276:	4d                   	dec    ebp
    1277:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:302
mov ecx, 0x24
    1278:	66 b9 24 00          	mov    cx,0x24
    127c:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:303
int 0x15
    127e:	cd 15                	int    0x15
/home/yogi/src/os/chrisOS/asm/bootCPU.s:304
add edi,24
    1280:	66 83 c7 18          	add    di,0x18
/home/yogi/src/os/chrisOS/asm/bootCPU.s:305
cmp eax, 0x534D4150
    1284:	66 3d 50 41          	cmp    ax,0x4150
    1288:	4d                   	dec    ebp
    1289:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:306
jne getE820Memory_asm_exit
    128a:	75 1c                	jne    12a8 <getE820Memory_asm_exit>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:307
cmp ecx,20
    128c:	66 83 f9 14          	cmp    cx,0x14
/home/yogi/src/os/chrisOS/asm/bootCPU.s:308
jl getE820Memory_asm_exit
    1290:	7c 16                	jl     12a8 <getE820Memory_asm_exit>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:309
push eax
    1292:	66 50                	push   ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:310
mov eax,recCnt
    1294:	66 a1 cd 12 66 40    	mov    ax,ds:0x406612cd
/home/yogi/src/os/chrisOS/asm/bootCPU.s:312
inc eax
mov recCnt, eax
    129a:	66 a3 cd 12 66 58    	mov    ds:0x586612cd,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:314
pop eax
cmp ebx,0
    12a0:	66 83 fb 00          	cmp    bx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:315
je  getE820Memory_asm_exit
    12a4:	74 02                	je     12a8 <getE820Memory_asm_exit>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:316
jmp getE820Memory_asm_getNext
    12a6:	eb c4                	jmp    126c <getE820Memory_asm_getNext>

000012a8 <getE820Memory_asm_exit>:
getE820Memory_asm_exit():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:318
getE820Memory_asm_exit:
mov eax,recCnt
    12a8:	66 a1 cd 12 66 a3    	mov    ax,ds:0xa36612cd
/home/yogi/src/os/chrisOS/asm/bootCPU.s:319
mov savedValue, eax
    12ae:	c5 12                	lds    edx,FWORD PTR [edx]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:322


popa
    12b0:	61                   	popa   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:323
mov eax, savedValue
    12b1:	66 a1 c5 12 e8 35    	mov    ax,ds:0x35e812c5
/home/yogi/src/os/chrisOS/asm/bootCPU.s:325
.code32
call reenterProtMode
    12b7:	fe                   	(bad)  
    12b8:	ff                   	(bad)  
    12b9:	ff c3                	inc    ebx

000012bb <saved_gdt16_lo>:
	...

000012bd <saved_gdt16_hi>:
	...

000012bf <saved_gdt16_hi2>:
	...

000012c1 <saveESP>:
saveESP():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:326
ret
    12c1:	00 00                	add    BYTE PTR [eax],al
	...

000012c5 <savedValue>:
	...

000012cd <recCnt>:
	...

000012cf <idt_real>:
idt_real():
    12cf:	ff 03                	inc    DWORD PTR [ebx]
    12d1:	00 00                	add    BYTE PTR [eax],al
	...

000012d5 <retVal>:
	...

000012d7 <saved_idt>:
saved_idt():
    12d7:	00 00                	add    BYTE PTR [eax],al
    12d9:	00 00                	add    BYTE PTR [eax],al
	...

000012dd <e820data>:
	...

000012f7 <system_timer_fractions>:
	...

000012ff <system_timer_ms>:
	...

00001307 <IRQ0_fractions>:
	...

0000130f <IRQ0_ms>:
	...

00001317 <IRQ0_frequency>:
	...

0000131f <PIT_reload_value>:
PIT_reload_value():
    131f:	12 00                	adc    al,BYTE PTR [eax]
    1321:	00 00                	add    BYTE PTR [eax],al
    1323:	00 00                	add    BYTE PTR [eax],al
	...

00001327 <doPagingJump>:
doPagingJump():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:371
                         .word 0
 .globl doPagingJump
.type doPagingJump, @function
doPagingJump:
.code32
cli #turn off interrupts until we get the IDT fixed up
    1327:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:372
ljmp 0x20:pagingEnableJmp
    1328:	ea 2f 13 00 00 20 00 	jmp    0x20:0x132f

0000132f <pagingEnableJmp>:
pagingEnableJmp():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:374
pagingEnableJmp:
push eax
    132f:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:375
mov ax, 0x10
    1330:	66 b8 10 00          	mov    ax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:376
mov ds, ax
    1334:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:377
mov es, ax
    1336:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:378
mov gs, ax
    1338:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:379
mov fs, ax
    133a:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:380
pop eax
    133c:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:381
ret
    133d:	c3                   	ret    

0000133e <doNonPagingJump>:
doNonPagingJump():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:385
 .globl doNonPagingJump
.type doNonPagingJump, @function
doNonPagingJump:
push eax
    133e:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:386
mov eax,cr0
    133f:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:387
and eax,0xEFFFFFFF
    1342:	25 ff ff ff ef       	and    eax,0xefffffff
/home/yogi/src/os/chrisOS/asm/bootCPU.s:388
mov cr0,eax
    1347:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:389
ljmp 0x28:pagingDisableJmp
    134a:	ea 51 13 00 00 28 00 	jmp    0x28:0x1351

00001351 <pagingDisableJmp>:
pagingDisableJmp():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:391
pagingDisableJmp:
mov ax, 0x18
    1351:	66 b8 18 00          	mov    ax,0x18
/home/yogi/src/os/chrisOS/asm/bootCPU.s:392
mov ds, ax
    1355:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:393
mov es, ax
    1357:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:394
mov gs, ax
    1359:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:395
mov fs, ax
    135b:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:396
pop eax
    135d:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:397
ret
    135e:	c3                   	ret    

0000135f <lowSmapTablePtr>:
	...

00001367 <lowSmapTbl>:
	...

00001547 <idtPtrToLoad>:
	...

0000154f <msg>:
msg():
    154f:	48                   	dec    eax
    1550:	65                   	gs
    1551:	6c                   	ins    BYTE PTR es:[edi],dx
    1552:	6c                   	ins    BYTE PTR es:[edi],dx
    1553:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1554:	20 66 72             	and    BYTE PTR [esi+0x72],ah
    1557:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1558:	6d                   	ins    DWORD PTR es:[edi],dx
    1559:	20 70 72             	and    BYTE PTR [eax+0x72],dh
    155c:	6f                   	outs   dx,DWORD PTR ds:[esi]
    155d:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
    1560:	73 6f                	jae    15d1 <AP_startup+0x1b>
    1562:	72 20                	jb     1584 <msg2+0xa>

00001563 <pid>:
pid():
    1563:	20 20                	and    BYTE PTR [eax],ah
    1565:	20 43 52             	and    BYTE PTR [ebx+0x52],al
    1568:	30 3d 78 78 78 78    	xor    BYTE PTR ds:0x78787878,bh

0000156a <msw>:
msw():
    156a:	78 78                	js     15e4 <broadcast_AP_startup+0xb>
    156c:	78 78                	js     15e6 <broadcast_AP_startup+0xd>
    156e:	78 78                	js     15e8 <broadcast_AP_startup+0xf>
    1570:	78 78                	js     15ea <broadcast_AP_startup+0x11>
    1572:	20 0a                	and    BYTE PTR [edx],cl
    1574:	0d 26 00 00 00       	or     eax,0x26

00001575 <len>:
len():
    1575:	26 00 00             	add    BYTE PTR es:[eax],al
	...

00001579 <att>:
att():
    1579:	0b 57 61             	or     edx,DWORD PTR [edi+0x61]

0000157a <msg2>:
msg2():
    157a:	57                   	push   edi
    157b:	61                   	popa   
    157c:	6b 69 6e 67          	imul   ebp,DWORD PTR [ecx+0x6e],0x67
    1580:	20 75 70             	and    BYTE PTR [ebp+0x70],dh
    1583:	20 41 50             	and    BYTE PTR [ecx+0x50],al
    1586:	20 70 72             	and    BYTE PTR [eax+0x72],dh
    1589:	6f                   	outs   dx,DWORD PTR ds:[esi]
    158a:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
    158d:	73 6f                	jae    15fe <.B0+0xc>
    158f:	72 73                	jb     1604 <.B0+0x12>
    1591:	0a 0d 19 00 00 00    	or     cl,BYTE PTR ds:0x19

00001593 <len2>:
len2():
    1593:	19 00                	sbb    DWORD PTR [eax],eax
	...

00001597 <att2>:
att2():
    1597:	0c 01                	or     al,0x1

00001598 <mutex>:
mutex():
    1598:	01 00                	add    DWORD PTR [eax],eax

0000159a <smpBootCPUCount>:
	...

0000159c <smpBootCPUsStarted>:
	...

0000159e <newSS>:
newSS():
    159e:	00 20                	add    BYTE PTR [eax],ah

000015a0 <theGDT>:
	...
theGDT():
    15a8:	ff                   	(bad)  
    15a9:	ff 00                	inc    DWORD PTR [eax]
    15ab:	00 00                	add    BYTE PTR [eax],al
    15ad:	92                   	xchg   edx,eax
    15ae:	8f 00                	pop    DWORD PTR [eax]

000015b0 <regGDT>:
regGDT():
    15b0:	0f 00 a0 15 00 00 89 	verr   WORD PTR [eax-0x76ffffeb]

000015b6 <AP_startup>:
AP_startup():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:446
#-----------------------------------------------------------------
#-----------------------------------------------------------------#-----------------------------------------------------------------

.global AP_startup
AP_startup:
movl     %esp, saveESP
    15b6:	89 25 c1 12 00 00    	mov    DWORD PTR ds:0x12c1,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:448
//lea	tos, %esp		# and set up new stack
call    setup_timer_channel2
    15bc:	e8 7e 00 00 00       	call   163f <setup_timer_channel2>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:450
//call	display_APIC_LocalID
call	broadcast_AP_startup
    15c1:	e8 13 00 00 00       	call   15d9 <broadcast_AP_startup>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:451
call	delay_until_APs_halt
    15c6:	e8 64 00 00 00       	call   162f <delay_until_APs_halt>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:452
mov     $0x10, %eax
    15cb:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:453
mov     %eax, %ds
    15d0:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:454
mov     saveESP, %esp
    15d2:	8b 25 c1 12 00 00    	mov    esp,DWORD PTR ds:0x12c1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:455
ret
    15d8:	c3                   	ret    

000015d9 <broadcast_AP_startup>:
broadcast_AP_startup():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:462
.global broadcast_AP_startup
broadcast_AP_startup:
#
# This procedure is called by the main CPU to awaken other CPUs.
#
	push	%ebx
    15d9:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:463
	push	%ds
    15da:	1e                   	push   ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:466

	# address the Local-APIC registers' page
	mov	$0x10, %ax
    15db:	66 b8 10 00          	mov    ax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:467
	mov	%ax, %ds
    15df:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:468
    	mov     kAPICRegisterRemapAddress, %ebx
    15e1:	8b 1d 30 03 12 00    	mov    ebx,DWORD PTR ds:0x120330
/home/yogi/src/os/chrisOS/asm/bootCPU.s:471

	# issue an 'INIT' Inter-Processor Interrupt command
	mov	$0x000C4500, %eax	# broadcase INIT-IPI
    15e7:	b8 00 45 0c 00       	mov    eax,0xc4500
/home/yogi/src/os/chrisOS/asm/bootCPU.s:472
	mov	%eax, 0x300(%ebx)	# to all-except-self
    15ec:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax

000015f2 <.B0>:
.B0():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:473
.B0:	bt	$12, 0x300(%ebx)	# command in progress?
    15f2:	0f ba a3 00 03 00 00 	bt     DWORD PTR [ebx+0x300],0xc
    15f9:	0c 
/home/yogi/src/os/chrisOS/asm/bootCPU.s:474
	jc	.B0			# yes, spin till done
    15fa:	72 f6                	jb     15f2 <.B0>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:477

	# do ten-millisecond delay, allow time for APs to awaken
	mov	$10000, %eax		# number of microseconds
    15fc:	b8 10 27 00 00       	mov    eax,0x2710
/home/yogi/src/os/chrisOS/asm/bootCPU.s:478
	call	delay_EAX_micro_secs	# for a programmed delay
    1601:	e8 f9 00 00 00       	call   16ff <delay_EAX_micro_secs>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:481
	
	# finish the Intel 'MP Initialization Protocol'
	mov	$5, %ecx		# issue 'Startup' twice
    1606:	b9 05 00 00 00       	mov    ecx,0x5

0000160b <nxIPI>:
nxIPI():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:483
#nxIPI:	mov	$0x000C4601, %eax	# broadcast Startup-IPI #startup IPI for base address of 4096
nxIPI:	mov	$0x000C4601, %eax	# broadcast Startup-IPI 
    160b:	b8 01 46 0c 00       	mov    eax,0xc4601
/home/yogi/src/os/chrisOS/asm/bootCPU.s:484
	mov	%eax, 0x300(%ebx)	# to all-except-self
    1610:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax

00001616 <.B1>:
.B1():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:485
.B1:	bt	$12, 0x300(%ebx)	# command in progress?
    1616:	0f ba a3 00 03 00 00 	bt     DWORD PTR [ebx+0x300],0xc
    161d:	0c 
/home/yogi/src/os/chrisOS/asm/bootCPU.s:486
	jc	.B1			# yes, spin till done
    161e:	72 f6                	jb     1616 <.B1>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:489

	# delay for 200 microseconds	
	mov	$200, %eax		# number of microseconds
    1620:	b8 c8 00 00 00       	mov    eax,0xc8
/home/yogi/src/os/chrisOS/asm/bootCPU.s:490
	call	delay_EAX_micro_secs	# for a programmed delay
    1625:	e8 d5 00 00 00       	call   16ff <delay_EAX_micro_secs>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:491
	loop	nxIPI	
    162a:	e2 df                	loop   160b <nxIPI>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:493
		
	pop	%ds
    162c:	1f                   	pop    ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:494
	pop	%ebx
    162d:	5b                   	pop    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:495
	ret
    162e:	c3                   	ret    

0000162f <delay_until_APs_halt>:
delay_until_APs_halt():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:502
delay_until_APs_halt:
#
# This procedure is called by the main CPU so that it will not
# terminate our program until the other CPUs have been halted.
#
.W0:	mov	smpBootCPUCount, %ax		# number of APs awoken
    162f:	66 a1 9a 15 00 00    	mov    ax,ds:0x159a
/home/yogi/src/os/chrisOS/asm/bootCPU.s:503
	sub	smpBootCPUsStarted, %ax		# less number finished
    1635:	66 2b 05 9c 15 00 00 	sub    ax,WORD PTR ds:0x159c
/home/yogi/src/os/chrisOS/asm/bootCPU.s:504
	jnz	.W0			# spin unless all done
    163c:	75 f1                	jne    162f <delay_until_APs_halt>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:505
	ret
    163e:	c3                   	ret    

0000163f <setup_timer_channel2>:
setup_timer_channel2():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:514
#
# This procedure initializes the 8254 Programmable Timer/Counter
# so Timer Channel 2 can be used in 'one-shot' timing durations.
#
	# enable the 8254 Channel-2 counter
	in	$0x61, %al		# get PORT_B settings
    163f:	e4 61                	in     al,0x61
/home/yogi/src/os/chrisOS/asm/bootCPU.s:515
	and	$0xFD, %al		# turn PC speaker off
    1641:	24 fd                	and    al,0xfd
/home/yogi/src/os/chrisOS/asm/bootCPU.s:516
	or	$0x01, %al		# turn on Gate2 input
    1643:	0c 01                	or     al,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:517
	out	%al, $0x61		# output new settings
    1645:	e6 61                	out    0x61,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:520

	# program channel-2 for one-shot countdown
	mov	$0xB0, %al		# chn2, r/w LSB/MSB
    1647:	b0 b0                	mov    al,0xb0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:521
	out	%al, $0x43		# issue PIT command
    1649:	e6 43                	out    0x43,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:522
	ret
    164b:	c3                   	ret    

0000164c <display_APIC_LocalID>:
display_APIC_LocalID():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:536
# video services.  Because ROM-BIOS routines are not 'reentrant'
# it is necessary to employ a 'spinlock' to insure that only one
# processor at a time will be executing these ROM-BIOS services. 
#
	# read the Local-APIC ID-register
	push	%ds
    164c:	1e                   	push   ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:537
	xor	%ax, %ax
    164d:	31 c0                	xor    eax,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:538
	mov	%ax, %ds
    164f:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:539
	mov	$0xFEE00020, %ebx
    1651:	66 bb 20 00          	mov    bx,0x20
    1655:	e0 fe                	loopne 1655 <display_APIC_LocalID+0x9>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:540
	mov	(%ebx), %eax
    1657:	67 66 8b 03          	mov    ax,WORD PTR [bp+di]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:541
	pop	%ds
    165b:	1f                   	pop    ds

0000165c <spin>:
spin():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:544

	# acquire the spinlock -- allow only one CPU at a time
spin:	bt	$0, mutex
    165c:	0f ba 26 98          	bt     DWORD PTR [esi],0x98
    1660:	15 00 73 f8 f0       	adc    eax,0xf0f87300
/home/yogi/src/os/chrisOS/asm/bootCPU.s:547
	jnc	spin
	lock	
	btr	$0, mutex
    1665:	0f ba 36 98          	btr    DWORD PTR [esi],0x98
    1669:	15 00 73 ef 66       	adc    eax,0x66ef7300
/home/yogi/src/os/chrisOS/asm/bootCPU.s:551
	jnc	spin

	# write CPU Local-APIC ID-number into shared buffer
	rol	$8, %eax		# get ID-number in AL
    166e:	c1 c0 08             	rol    eax,0x8
/home/yogi/src/os/chrisOS/asm/bootCPU.s:552
	and	$0xF, %al		# isolate lowest nybble
    1671:	24 0f                	and    al,0xf
/home/yogi/src/os/chrisOS/asm/bootCPU.s:555

#unremark to have the first CPu clear the screen
        pusha
    1673:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:556
        cmp $0x1,%al
    1674:	3c 01                	cmp    al,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:557
        ja overClearScreen
    1676:	77 28                	ja     16a0 <overClearScreen>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:558
        call clearScreen
    1678:	e8 01 01 b4 0f       	call   fb4177e <_months_abbrev+0xfa2129e>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:561
#jmp overClearScreen
	mov	$0x0F, %ah		# get display-page
	int	$0x10			# call video bios
    167d:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:563

	mov	$0x02, %ah		# set cursor position
    167f:	b4 02                	mov    ah,0x2
/home/yogi/src/os/chrisOS/asm/bootCPU.s:564
        mov     $0,%bh
    1681:	b7 00                	mov    bh,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:565
        mov     $0x2000,%dx
    1683:	ba 00 20 cd 10       	mov    edx,0x10cd2000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:567
	int	$0x10			# call video bios
        mov     $0x3,ah
    1688:	b4 03                	mov    ah,0x3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:568
        int     $0x10
    168a:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:569
	mov	$0x1301, %ax		# write_string
    168c:	b8 01 13 8d 2e       	mov    eax,0x2e8d1301
/home/yogi/src/os/chrisOS/asm/bootCPU.s:570
	lea	msg2, %bp		# point ES:BP to string
    1691:	7a 15                	jp     16a8 <overClearScreen+0x8>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:571
	mov	len2, %cx		# number of characters
    1693:	8b 0e                	mov    ecx,DWORD PTR [esi]
    1695:	93                   	xchg   ebx,eax
    1696:	15 8a 1e 97 15       	adc    eax,0x15971e8a
/home/yogi/src/os/chrisOS/asm/bootCPU.s:573
	mov	att2, %bl		# display attributes
	mov	$0x1301, %ax		# write_string
    169b:	b8 01 13 cd 10       	mov    eax,0x10cd1301

000016a0 <overClearScreen>:
overClearScreen():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:577
	int	$0x10			# call video bios 

overClearScreen:
        popa
    16a0:	61                   	popa   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:578
        or	$'0', %al		# convert to numeral	
    16a1:	0c 30                	or     al,0x30
/home/yogi/src/os/chrisOS/asm/bootCPU.s:579
	movb	%al, pid		# write to shared buffer	
    16a3:	a2 63 15 8d 3e       	mov    ds:0x3e8d1563,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:582
#jmp overPrinting
	# format the contents of register CR0 for display
	lea	msw, %di
    16a8:	6a 15                	push   0x15
/home/yogi/src/os/chrisOS/asm/bootCPU.s:583
	mov	%cr0, %eax
    16aa:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:584
	call	eax2hex
    16ad:	e8 a4 00 b4 0f       	call   fb41756 <_months_abbrev+0xfa21276>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:587
	# display the information using ROM-BIOS routines
	mov	$0x0F, %ah		# get display-page
	int	$0x10			# call video bios
    16b2:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:589

	mov	$0x03, %ah		# get cursor position
    16b4:	b4 03                	mov    ah,0x3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:590
	int	$0x10			# call video bios
    16b6:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:592

	mov	$0x1301, %ax		# write_string
    16b8:	b8 01 13 8d 2e       	mov    eax,0x2e8d1301
/home/yogi/src/os/chrisOS/asm/bootCPU.s:593
	lea	msg, %bp		# point ES:BP to string
    16bd:	4f                   	dec    edi
    16be:	15 8b 0e 75 15       	adc    eax,0x15750e8b
/home/yogi/src/os/chrisOS/asm/bootCPU.s:595
	mov	len, %cx		# number of characters
	mov	att, %bl		# display attributes
    16c3:	8a 1e                	mov    bl,BYTE PTR [esi]
    16c5:	79 15                	jns    16dc <initAP+0x8>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:596
	mov	$0x1301, %ax		# write_string
    16c7:	b8 01 13 cd 10       	mov    eax,0x10cd1301

000016cc <overPrinting>:
overPrinting():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:600
	int	$0x10			# call video bios 
overPrinting:
	# release spinlock -- finished with 'non-reentrant' code
	lock 	
    16cc:	f0 0f ba 2e 98       	lock bts DWORD PTR [esi],0x98
/home/yogi/src/os/chrisOS/asm/bootCPU.s:601
	bts 	$0, mutex
    16d1:	15 00 c3 fa 8c       	adc    eax,0x8cfac300

000016d4 <initAP>:
initAP():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:612
#=================================================================
#-----------------------------------------------------------------
.code16
.globl initAP
.type initAP, @function
initAP:	cli
    16d4:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:613
	mov	%cs, %ax		# address program's data
    16d5:	8c c8                	mov    eax,cs
/home/yogi/src/os/chrisOS/asm/bootCPU.s:614
	mov	%ax, %ds		#    with DS register
    16d7:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:615
	mov	%ax, %es		#    also ES register
    16d9:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:616
	lock				# insure 'atomic' update
    16db:	f0 ff 06             	lock inc DWORD PTR [esi]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:617
	incw	smpBootCPUCount			# increment count of APs
    16de:	9a 15 b8 00 10 0f c1 	call   0xc10f:0x1000b815
/home/yogi/src/os/chrisOS/asm/bootCPU.s:621

	# setup an exclusive stack-area for this processor
	mov	$0x1000, %ax		# paragraphs in segment
	xadd	%ax, newSS		# 'atomic' xchg-and-add
    16e5:	06                   	push   es
    16e6:	9e                   	sahf   
    16e7:	15 8e d0 66 31       	adc    eax,0x3166d08e
/home/yogi/src/os/chrisOS/asm/bootCPU.s:623
	mov	%ax, %ss		# segment-address in SS
	xor	%esp, %esp		# top-of-stack into ESP
    16ec:	e4 66                	in     al,0x66
/home/yogi/src/os/chrisOS/asm/bootCPU.s:624
        mov     $0,%esp
    16ee:	bc 00 00 00 00       	mov    esp,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:625
	call	allow_4GB_addressing	# adjust DS's seg-limit
    16f3:	e8 38 00 f0 ff       	call   fff01730 <CHECKSUM+0x1b9dc735>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:630
#	call	display_APIC_LocalID	# display this CPU's ID

	# put this processor to sleep
	lock				# insure 'atomic' update
	incw	smpBootCPUsStarted			# increment count of APs
    16f8:	06                   	push   es
    16f9:	9c                   	pushf  
    16fa:	15 fa f4 eb fc       	adc    eax,0xfcebf4fa

000016fb <freeze>:
freeze():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:632

freeze:	cli				# do not awaken this CPU
    16fb:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:633
	hlt				# 'fetch-execute' ceases	
    16fc:	f4                   	hlt    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:634
	jmp	freeze			# just-in-case of an NMI
    16fd:	eb fc                	jmp    16fb <freeze>

000016ff <delay_EAX_micro_secs>:
delay_EAX_micro_secs():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:641
#-----------------------------------------------------------------
delay_EAX_micro_secs:
#
# This procedure creates a programmed delay for EAX microseconds.
#
	pushal
    16ff:	66 60                	pushaw 
/home/yogi/src/os/chrisOS/asm/bootCPU.s:643

	mov	%eax, %ecx		# number of microseconds
    1701:	66 89 c1             	mov    cx,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:644
	mov	$100000, %eax		# microseconds-per-second
    1704:	66 b8 a0 86          	mov    ax,0x86a0
    1708:	01 00                	add    DWORD PTR [eax],eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:645
	xor	%edx, %edx		# is extended to quadword
    170a:	66 31 d2             	xor    dx,dx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:646
	div	%ecx			# division by double-word
    170d:	66 f7 f1             	div    cx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:648
	
	mov	%eax, %ecx		# input-frequency divisor
    1710:	66 89 c1             	mov    cx,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:649
	mov	$1193182, %eax		# timer's input-frequency
    1713:	66 b8 de 34          	mov    ax,0x34de
    1717:	12 00                	adc    al,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:650
	xor	%edx, %edx		# is extended to quadword
    1719:	66 31 d2             	xor    dx,dx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:651
	div	%ecx			# division by double-word
    171c:	66 f7 f1             	div    cx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:653

	out	%al, $0x42		# transfer to Latch LSB
    171f:	e6 42                	out    0x42,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:654
	xchg	%al, %ah		# LSB swapped with MSB
    1721:	86 c4                	xchg   ah,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:655
	out	%al, $0x42		# transfer to Latch MSB
    1723:	e6 42                	out    0x42,al

00001725 <.T0>:
.T0():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:657

.T0:	in	$0x61, %al		# check PORT_B settings
    1725:	e4 61                	in     al,0x61
/home/yogi/src/os/chrisOS/asm/bootCPU.s:658
	test	$0x20, %al		# has counter2 expired?
    1727:	a8 20                	test   al,0x20
/home/yogi/src/os/chrisOS/asm/bootCPU.s:659
	jz	.T0			# no, continue polling
    1729:	74 fa                	je     1725 <.T0>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:661
	
	popal
    172b:	66 61                	popaw  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:662
	ret
    172d:	c3                   	ret    

0000172e <allow_4GB_addressing>:
allow_4GB_addressing():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:671
#
# This procedure will be called by each processor in order to 
# raise the 'hidden' segment-limit in its DS segment-register
# which permits Local-APIC registers to be addressed with DS.   
#
	pushf				# preserve FLAGS settings
    172e:	9c                   	pushf  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:672
	push	%ds			# preserve DS contents
    172f:	1e                   	push   ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:674

	cli				# no device interrupts
    1730:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:676

	mov	%cr0, %eax		# get machine status
    1731:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:677
	bts	$0, %eax		# set PE-bit to 1
    1734:	66 0f ba e8 00       	bts    ax,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:678
	mov	%eax, %cr0		# enter protected mode
    1739:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:679
	lgdt	regGDT			# load GDTR register-image
    173c:	0f 01 16             	lgdtd  [esi]
    173f:	b0 15                	mov    al,0x15
/home/yogi/src/os/chrisOS/asm/bootCPU.s:680
	mov	$sel_FS, %ax		# address 4GB data-segment
    1741:	b8 08 00 8e d8       	mov    eax,0xd88e0008
/home/yogi/src/os/chrisOS/asm/bootCPU.s:683
	mov	%ax, %ds		#   with the DS register

	mov	%cr0, %eax		# get machine status
    1746:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:684
	btr	$0, %eax		# reset PE-bit to 0
    1749:	66 0f ba f0 00       	btr    ax,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:685
	mov	%eax, %cr0		# leave protected mode
    174e:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:687
.code16		
	pop	%ds			# restore register DS
    1751:	1f                   	pop    ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:688
	popf				# restore FLAGS value
    1752:	9d                   	popf   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:689
	ret				
    1753:	c3                   	ret    

00001754 <eax2hex>:
eax2hex():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:692
#-----------------------------------------------------------------
eax2hex:  # converts value in EAX to hexadecimal string at DS:DI
	pusha	
    1754:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:694

	mov	$8, %cx
    1755:	b9 08 00 66 c1       	mov    ecx,0xc1660008

00001758 <nxnyb>:
nxnyb():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:696
nxnyb:
	rol	$4, %eax
    1758:	66 c1 c0 04          	rol    ax,0x4
/home/yogi/src/os/chrisOS/asm/bootCPU.s:697
	mov	%al, %bl
    175c:	88 c3                	mov    bl,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:698
	and	$0xF, %bx
    175e:	83 e3 0f             	and    ebx,0xf
/home/yogi/src/os/chrisOS/asm/bootCPU.s:699
	mov	hex(%bx), %dl
    1761:	8a 97 6c 17 88 15    	mov    dl,BYTE PTR [edi+0x1588176c]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:701
	mov	%dl, (%di)
	inc	%di
    1767:	47                   	inc    edi
/home/yogi/src/os/chrisOS/asm/bootCPU.s:702
	loop	nxnyb	
    1768:	e2 ee                	loop   1758 <nxnyb>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:704

	popa
    176a:	61                   	popa   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:705
	ret
    176b:	c3                   	ret    

0000176c <hex>:
hex():
    176c:	30 31                	xor    BYTE PTR [ecx],dh
    176e:	32 33                	xor    dh,BYTE PTR [ebx]
    1770:	34 35                	xor    al,0x35
    1772:	36                   	ss
    1773:	37                   	aaa    
    1774:	38 39                	cmp    BYTE PTR [ecx],bh
    1776:	41                   	inc    ecx
    1777:	42                   	inc    edx
    1778:	43                   	inc    ebx
    1779:	44                   	inc    esp
    177a:	45                   	inc    ebp
    177b:	46                   	inc    esi

0000177c <clearScreen>:
clearScreen():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:711
#-----------------------------------------------------------------
hex:	.ascii	"0123456789ABCDEF"	# array of hex numerals

.intel_syntax noprefix
clearScreen:
    pusha
    177c:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:713

    mov ax, 0x0700  # function 07, AL=0 means scroll whole window
    177d:	b8 00 07 b7 07       	mov    eax,0x7b70700
/home/yogi/src/os/chrisOS/asm/bootCPU.s:715
    mov bh, 0x07    # character attribute = white on black
    mov cx, 0x0000  # row = 0, col = 0
    1782:	b9 00 00 ba 4f       	mov    ecx,0x4fba0000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:716
    mov dx, 0x184f  # row = 24 (0x18), col = 79 (0x4f)
    1787:	18 cd                	sbb    ch,cl
/home/yogi/src/os/chrisOS/asm/bootCPU.s:717
    int 0x10        # call BIOS video interrupt
    1789:	10 b4 02 b7 00 ba 00 	adc    BYTE PTR [edx+eax*1+0xba00b7],dh
/home/yogi/src/os/chrisOS/asm/bootCPU.s:720
    mov ah,02
    mov bh,0
    mov dx,0
    1790:	00 cd                	add    ch,cl
/home/yogi/src/os/chrisOS/asm/bootCPU.s:721
    int 0x10
    1792:	10 61 c3             	adc    BYTE PTR [ecx-0x3d],ah
	...

0000fec5 <stk>:
stk():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:723
    popa
    ret
    fec5:	fa                   	cli    
    fec6:	fa                   	cli    
    fec7:	fa                   	cli    
    fec8:	fa                   	cli    
    fec9:	fa                   	cli    
    feca:	fa                   	cli    
    fecb:	fa                   	cli    
    fecc:	fa                   	cli    
    fecd:	fa                   	cli    
    fece:	fa                   	cli    
    fecf:	fa                   	cli    
    fed0:	fa                   	cli    
    fed1:	fa                   	cli    
    fed2:	fa                   	cli    
    fed3:	fa                   	cli    
    fed4:	fa                   	cli    
    fed5:	fa                   	cli    
    fed6:	fa                   	cli    
    fed7:	fa                   	cli    
    fed8:	fa                   	cli    
    fed9:	fa                   	cli    
    feda:	fa                   	cli    
    fedb:	fa                   	cli    
    fedc:	fa                   	cli    
    fedd:	fa                   	cli    
    fede:	fa                   	cli    
    fedf:	fa                   	cli    
    fee0:	fa                   	cli    
    fee1:	fa                   	cli    
    fee2:	fa                   	cli    
    fee3:	fa                   	cli    
    fee4:	fa                   	cli    
    fee5:	fa                   	cli    
    fee6:	fa                   	cli    
    fee7:	fa                   	cli    
    fee8:	fa                   	cli    
    fee9:	fa                   	cli    
    feea:	fa                   	cli    
    feeb:	fa                   	cli    
    feec:	fa                   	cli    
    feed:	fa                   	cli    
    feee:	fa                   	cli    
    feef:	fa                   	cli    
    fef0:	fa                   	cli    
    fef1:	fa                   	cli    
    fef2:	fa                   	cli    
    fef3:	fa                   	cli    
    fef4:	fa                   	cli    
    fef5:	fa                   	cli    
    fef6:	fa                   	cli    
    fef7:	fa                   	cli    
    fef8:	fa                   	cli    
    fef9:	fa                   	cli    
    fefa:	fa                   	cli    
    fefb:	fa                   	cli    
    fefc:	fa                   	cli    
    fefd:	fa                   	cli    
    fefe:	fa                   	cli    
    feff:	fa                   	cli    
    ff00:	fa                   	cli    
    ff01:	fa                   	cli    
    ff02:	fa                   	cli    
    ff03:	fa                   	cli    
    ff04:	fa                   	cli    
    ff05:	fa                   	cli    
    ff06:	fa                   	cli    
    ff07:	fa                   	cli    
    ff08:	fa                   	cli    
    ff09:	fa                   	cli    
    ff0a:	fa                   	cli    
    ff0b:	fa                   	cli    
    ff0c:	fa                   	cli    
    ff0d:	fa                   	cli    
    ff0e:	fa                   	cli    
    ff0f:	fa                   	cli    
    ff10:	fa                   	cli    
    ff11:	fa                   	cli    
    ff12:	fa                   	cli    
    ff13:	fa                   	cli    
    ff14:	fa                   	cli    
    ff15:	fa                   	cli    
    ff16:	fa                   	cli    
    ff17:	fa                   	cli    
    ff18:	fa                   	cli    
    ff19:	fa                   	cli    
    ff1a:	fa                   	cli    
    ff1b:	fa                   	cli    
    ff1c:	fa                   	cli    
    ff1d:	fa                   	cli    
    ff1e:	fa                   	cli    
    ff1f:	fa                   	cli    
    ff20:	fa                   	cli    
    ff21:	fa                   	cli    
    ff22:	fa                   	cli    
    ff23:	fa                   	cli    
    ff24:	fa                   	cli    
    ff25:	fa                   	cli    
    ff26:	fa                   	cli    
    ff27:	fa                   	cli    
    ff28:	fa                   	cli    
    ff29:	fa                   	cli    
    ff2a:	fa                   	cli    
    ff2b:	fa                   	cli    
    ff2c:	fa                   	cli    
    ff2d:	fa                   	cli    
    ff2e:	fa                   	cli    
    ff2f:	fa                   	cli    
    ff30:	fa                   	cli    
    ff31:	fa                   	cli    
    ff32:	fa                   	cli    
    ff33:	fa                   	cli    
    ff34:	fa                   	cli    
    ff35:	fa                   	cli    
    ff36:	fa                   	cli    
    ff37:	fa                   	cli    
    ff38:	fa                   	cli    
    ff39:	fa                   	cli    
    ff3a:	fa                   	cli    
    ff3b:	fa                   	cli    
    ff3c:	fa                   	cli    
    ff3d:	fa                   	cli    
    ff3e:	fa                   	cli    
    ff3f:	fa                   	cli    
    ff40:	fa                   	cli    
    ff41:	fa                   	cli    
    ff42:	fa                   	cli    
    ff43:	fa                   	cli    
    ff44:	fa                   	cli    
    ff45:	fa                   	cli    
    ff46:	fa                   	cli    
    ff47:	fa                   	cli    
    ff48:	fa                   	cli    
    ff49:	fa                   	cli    
    ff4a:	fa                   	cli    
    ff4b:	fa                   	cli    
    ff4c:	fa                   	cli    
    ff4d:	fa                   	cli    
    ff4e:	fa                   	cli    
    ff4f:	fa                   	cli    
    ff50:	fa                   	cli    
    ff51:	fa                   	cli    
    ff52:	fa                   	cli    
    ff53:	fa                   	cli    
    ff54:	fa                   	cli    
    ff55:	fa                   	cli    
    ff56:	fa                   	cli    
    ff57:	fa                   	cli    
    ff58:	fa                   	cli    
    ff59:	fa                   	cli    
    ff5a:	fa                   	cli    
    ff5b:	fa                   	cli    
    ff5c:	fa                   	cli    
    ff5d:	fa                   	cli    
    ff5e:	fa                   	cli    
    ff5f:	fa                   	cli    
    ff60:	fa                   	cli    
    ff61:	fa                   	cli    
    ff62:	fa                   	cli    
    ff63:	fa                   	cli    
    ff64:	fa                   	cli    
    ff65:	fa                   	cli    
    ff66:	fa                   	cli    
    ff67:	fa                   	cli    
    ff68:	fa                   	cli    
    ff69:	fa                   	cli    
    ff6a:	fa                   	cli    
    ff6b:	fa                   	cli    
    ff6c:	fa                   	cli    
    ff6d:	fa                   	cli    
    ff6e:	fa                   	cli    
    ff6f:	fa                   	cli    
    ff70:	fa                   	cli    
    ff71:	fa                   	cli    
    ff72:	fa                   	cli    
    ff73:	fa                   	cli    
    ff74:	fa                   	cli    
    ff75:	fa                   	cli    
    ff76:	fa                   	cli    
    ff77:	fa                   	cli    
    ff78:	fa                   	cli    
    ff79:	fa                   	cli    
    ff7a:	fa                   	cli    
    ff7b:	fa                   	cli    
    ff7c:	fa                   	cli    
    ff7d:	fa                   	cli    
    ff7e:	fa                   	cli    
    ff7f:	fa                   	cli    
    ff80:	fa                   	cli    
    ff81:	fa                   	cli    
    ff82:	fa                   	cli    
    ff83:	fa                   	cli    
    ff84:	fa                   	cli    
    ff85:	fa                   	cli    
    ff86:	fa                   	cli    
    ff87:	fa                   	cli    
    ff88:	fa                   	cli    
    ff89:	fa                   	cli    
    ff8a:	fa                   	cli    
    ff8b:	fa                   	cli    
    ff8c:	fa                   	cli    
    ff8d:	fa                   	cli    
    ff8e:	fa                   	cli    
    ff8f:	fa                   	cli    
    ff90:	fa                   	cli    
    ff91:	fa                   	cli    
    ff92:	fa                   	cli    
    ff93:	fa                   	cli    
    ff94:	fa                   	cli    
    ff95:	fa                   	cli    
    ff96:	fa                   	cli    
    ff97:	fa                   	cli    
    ff98:	fa                   	cli    
    ff99:	fa                   	cli    
    ff9a:	fa                   	cli    
    ff9b:	fa                   	cli    
    ff9c:	fa                   	cli    
    ff9d:	fa                   	cli    
    ff9e:	fa                   	cli    
    ff9f:	fa                   	cli    
    ffa0:	fa                   	cli    
    ffa1:	fa                   	cli    
    ffa2:	fa                   	cli    
    ffa3:	fa                   	cli    
    ffa4:	fa                   	cli    
    ffa5:	fa                   	cli    
    ffa6:	fa                   	cli    
    ffa7:	fa                   	cli    
    ffa8:	fa                   	cli    
    ffa9:	fa                   	cli    
    ffaa:	fa                   	cli    
    ffab:	fa                   	cli    
    ffac:	fa                   	cli    
    ffad:	fa                   	cli    
    ffae:	fa                   	cli    
    ffaf:	fa                   	cli    
    ffb0:	fa                   	cli    
    ffb1:	fa                   	cli    
    ffb2:	fa                   	cli    
    ffb3:	fa                   	cli    
    ffb4:	fa                   	cli    
    ffb5:	fa                   	cli    
    ffb6:	fa                   	cli    
    ffb7:	fa                   	cli    
    ffb8:	fa                   	cli    
    ffb9:	fa                   	cli    
    ffba:	fa                   	cli    
    ffbb:	fa                   	cli    
    ffbc:	fa                   	cli    
    ffbd:	fa                   	cli    
    ffbe:	fa                   	cli    
    ffbf:	fa                   	cli    
    ffc0:	fa                   	cli    
    ffc1:	fa                   	cli    
    ffc2:	fa                   	cli    
    ffc3:	fa                   	cli    

0000ffc4 <irq13ESP>:
irq13ESP():
    ffc4:	00 00                	add    BYTE PTR [eax],al
    ffc6:	10 00                	adc    BYTE PTR [eax],al
    ffc8:	10 00                	adc    BYTE PTR [eax],al
	...

0000ffcc <irq13SavedESP>:
	...

0000ffd4 <irq14ESP>:
irq14ESP():
    ffd4:	00 00                	add    BYTE PTR [eax],al
    ffd6:	10 00                	adc    BYTE PTR [eax],al
    ffd8:	10 00                	adc    BYTE PTR [eax],al
	...

0000ffdc <irq14SavedESP>:
	...

0000ffe4 <espForFatalExceptions>:
espForFatalExceptions():
    ffe4:	00 00                	add    BYTE PTR [eax],al
    ffe6:	10 00                	adc    BYTE PTR [eax],al
    ffe8:	10 00                	adc    BYTE PTR [eax],al
	...

0000ffec <savedESP>:
	...

0000fff4 <bufr>:
	...

00010004 <savedESP_irq0>:
	...

00010014 <debugReturnFlags>:
	...

0001001c <debugESP>:
debugESP():
   1001c:	00 00                	add    BYTE PTR [eax],al
	...

00010020 <_isr_00_wrapper>:
_isr_00_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:38
debugESP: .WORD 0,0


.global _isr_00_wrapper        
_isr_00_wrapper:                #remapped to 0x0a
        mov exceptionSavedESP, esp
   10020:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:39
        mov exceptionAX,eax
   10026:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:40
        mov exceptionBP, ebp
   1002b:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:41
        mov     ebp, esp
   10031:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:42
        mov     ax, 0x0                  # save exception number
   10033:	66 b8 00 00          	mov    ax,0x0
/home/yogi/src/os//chrisOS/asm/isr.s:43
        jmp isr_My_Common
   10037:	e9 5e 01 00 00       	jmp    1019a <isr_My_Common>

0001003c <_isr_02_wrapper>:
_isr_02_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:46
.global _isr_02_wrapper        
_isr_02_wrapper:                #remapped to 0x0a
        mov exceptionSavedESP, esp
   1003c:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:47
        mov exceptionAX,eax
   10042:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:48
        mov exceptionBP, ebp
   10047:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:49
        mov     ebp, esp
   1004d:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:50
        mov     ax, 0x2                  # save exception number
   1004f:	66 b8 02 00          	mov    ax,0x2
/home/yogi/src/os//chrisOS/asm/isr.s:51
        jmp isr_My_Common
   10053:	e9 42 01 00 00       	jmp    1019a <isr_My_Common>

00010058 <_isr_03_wrapper>:
_isr_03_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:60
        mov exceptionAX,eax
        mov exceptionBP, ebp
        mov     ebp, esp
        mov     ax, 0x3                  # save exception number
*/
        orw [esp+8],0x100
   10058:	66 81 4c 24 08 00 01 	or     WORD PTR [esp+0x8],0x100
/home/yogi/src/os//chrisOS/asm/isr.s:61
        pusha
   1005f:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:62
        call activateDebugger
   10060:	e8 df aa 00 00       	call   1ab44 <activateDebugger>
/home/yogi/src/os//chrisOS/asm/isr.s:65
 /*       jmp isr_My_Common
*/
        popa
   10065:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:66
        sti
   10066:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:67
        iretd
   10067:	cf                   	iret   

00010068 <_isr_04_wrapper>:
_isr_04_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:70
.global _isr_04_wrapper        
_isr_04_wrapper:                #remapped to 0x0c
        mov exceptionSavedESP, esp
   10068:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:71
        mov exceptionAX,eax
   1006e:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:72
        mov exceptionBP, ebp
   10073:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:73
        mov     ebp, esp
   10079:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:74
        mov     ax, 0x4                  # save exception number
   1007b:	66 b8 04 00          	mov    ax,0x4
/home/yogi/src/os//chrisOS/asm/isr.s:75
        jmp isr_My_Common
   1007f:	e9 16 01 00 00       	jmp    1019a <isr_My_Common>

00010084 <_isr_05_wrapper>:
_isr_05_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:78
.global _isr_05_wrapper        
_isr_05_wrapper:                #remapped to 0x0d
        mov exceptionSavedESP, esp
   10084:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:79
        mov exceptionAX,eax
   1008a:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:80
        mov exceptionBP, ebp
   1008f:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:81
        mov     ebp, esp
   10095:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:82
        mov     ax, 0x5                  # save exception number
   10097:	66 b8 05 00          	mov    ax,0x5
/home/yogi/src/os//chrisOS/asm/isr.s:83
        jmp isr_My_Common
   1009b:	e9 fa 00 00 00       	jmp    1019a <isr_My_Common>

000100a0 <_isr_06_wrapper>:
_isr_06_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:86
.global _isr_06_wrapper
_isr_06_wrapper:                #remapped to 0x0e
        mov exceptionSavedESP, esp
   100a0:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:87
        mov exceptionAX,eax
   100a6:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:88
        mov exceptionBP, ebp
   100ab:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:89
        mov     ebp, esp
   100b1:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:90
        mov     ax, 0x6                  # save exception number
   100b3:	66 b8 06 00          	mov    ax,0x6
/home/yogi/src/os//chrisOS/asm/isr.s:91
        jmp isr_My_Common
   100b7:	e9 de 00 00 00       	jmp    1019a <isr_My_Common>

000100bc <_isr_07_wrapper>:
_isr_07_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:94
.global _isr_07_wrapper        
_isr_07_wrapper:                #remapped to 0x0f
        mov exceptionSavedESP, esp
   100bc:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:95
        mov exceptionAX,eax
   100c2:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:96
        mov exceptionBP, ebp
   100c7:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:97
        mov     ebp, esp
   100cd:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:98
        mov     ax, 0x7                  # save exception number
   100cf:	66 b8 07 00          	mov    ax,0x7
/home/yogi/src/os//chrisOS/asm/isr.s:99
        jmp isr_My_Common
   100d3:	e9 c2 00 00 00       	jmp    1019a <isr_My_Common>

000100d8 <_isr_08_wrapper>:
_isr_08_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:102
.global _isr_08_wrapper                 #remapped to 0x10
_isr_08_wrapper:                
        mov exceptionSavedESP, esp
   100d8:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:103
        mov exceptionAX,eax
   100de:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:104
        mov exceptionBP, ebp
   100e3:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:105
        mov     ebp, esp
   100e9:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:106
        mov     ax, 0x8                  # save exception number
   100eb:	66 b8 08 00          	mov    ax,0x8
/home/yogi/src/os//chrisOS/asm/isr.s:107
        jmp isr_My_Common
   100ef:	e9 a6 00 00 00       	jmp    1019a <isr_My_Common>
/home/yogi/src/os//chrisOS/asm/isr.s:130
#        mov ebx, cr2
#        mov exceptionCR2, ebx
#        pop ebx
#        pop ebp
        //push bx                         #clr 05/20/2016- We're not going to recover from a double fault so don't try pushing things on the stack to save them because the stack may be corrupted
        mov bx,10
   100f4:	66 bb 0a 00          	mov    bx,0xa
/home/yogi/src/os//chrisOS/asm/isr.s:131
        mov ds,bx
   100f8:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:132
        mov es,bx
   100fa:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:133
        mov fs,bx
   100fc:	8e e3                	mov    fs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:134
        mov gs,bx
   100fe:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:136
        //pop bx                        #clr 05/20/2016- We're not going to recover from a double fault so don't try pushing things on the stack to save them because the stack may be corrupted
        call    doubleFaultHandler     # jump to the common code
   10100:	e8 9a 96 00 00       	call   1979f <doubleFaultHandler>

00010105 <_isr_09_wrapper>:
_isr_09_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:139
.global _isr_09_wrapper                 #remapped to 0x11
_isr_09_wrapper:
        mov exceptionSavedESP, esp
   10105:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:140
        mov exceptionAX,eax
   1010b:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:141
        mov exceptionBP, ebp
   10110:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:142
        mov     ebp, esp
   10116:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:143
        mov     ax, 0x9                  # save exception number
   10118:	66 b8 09 00          	mov    ax,0x9
/home/yogi/src/os//chrisOS/asm/isr.s:144
        jmp isr_My_Common
   1011c:	eb 7c                	jmp    1019a <isr_My_Common>

0001011e <_isr_10_wrapper>:
_isr_10_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:147
.global _isr_10_wrapper                 #remapped to 0x12
_isr_10_wrapper:                        
        mov exceptionSavedESP, esp
   1011e:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:148
        mov exceptionAX,eax
   10124:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:149
        mov exceptionBP, ebp
   10129:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:150
        mov     ebp, esp
   1012f:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:151
        mov     ax, 0xa                  # save exception number
   10131:	66 b8 0a 00          	mov    ax,0xa
/home/yogi/src/os//chrisOS/asm/isr.s:152
        jmp isr_My_Common
   10135:	eb 63                	jmp    1019a <isr_My_Common>

00010137 <_isr_11_wrapper>:
_isr_11_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:155
.global _isr_11_wrapper                 #remapped to 0x13
_isr_11_wrapper:
        mov exceptionSavedESP, esp
   10137:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:156
        mov exceptionAX,eax
   1013d:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:157
        mov exceptionBP, ebp
   10142:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:158
        mov     ebp, esp
   10148:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:159
        mov     ax, 0x8                  # save exception number
   1014a:	66 b8 08 00          	mov    ax,0x8
/home/yogi/src/os//chrisOS/asm/isr.s:160
        jmp isr_My_Common
   1014e:	eb 4a                	jmp    1019a <isr_My_Common>

00010150 <_isr_12_wrapper>:
_isr_12_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:163
.global _isr_12_wrapper        
_isr_12_wrapper:                        #remapped to 0x14
        mov exceptionSavedESP, esp
   10150:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:164
        mov exceptionAX,eax
   10156:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:165
        mov exceptionBP, ebp
   1015b:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:166
        mov     ebp, esp
   10161:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:167
        mov     ax, 0xc                  # save exception number
   10163:	66 b8 0c 00          	mov    ax,0xc
/home/yogi/src/os//chrisOS/asm/isr.s:168
        jmp isr_My_Common
   10167:	eb 31                	jmp    1019a <isr_My_Common>

00010169 <_isr_13_wrapper>:
_isr_13_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:171
.global _isr_13_wrapper                 #remapped to 0x15
_isr_13_wrapper:
cli;
   10169:	fa                   	cli    
/home/yogi/src/os//chrisOS/asm/isr.s:172
        mov exceptionSavedESP, esp
   1016a:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:173
        mov exceptionAX,eax
   10170:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:174
        mov exceptionBP, ebp
   10175:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:175
        mov     ebp, esp
   1017b:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:176
        mov     ax, 0xd                  # save exception number
   1017d:	66 b8 0d 00          	mov    ax,0xd
/home/yogi/src/os//chrisOS/asm/isr.s:177
        jmp isr_My_Common
   10181:	eb 17                	jmp    1019a <isr_My_Common>

00010183 <_isr_14_wrapper>:
_isr_14_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:181
.global _isr_14_wrapper                 #remapped to 0x16
_isr_14_wrapper:
#cli;hlt;
mov exceptionSavedESP, esp
   10183:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:182
        mov exceptionAX,eax
   10189:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:183
        mov exceptionBP, ebp
   1018e:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:184
        mov     ebp, esp
   10194:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:185
        mov     ax, 0xe                  # save exception number
   10196:	66 b8 0e 00          	mov    ax,0xe

0001019a <isr_My_Common>:
isr_My_Common():
/home/yogi/src/os//chrisOS/asm/isr.s:187
isr_My_Common:
        mov exceptionNumber,ax
   1019a:	66 a3 a4 01 12 00    	mov    ds:0x1201a4,ax
/home/yogi/src/os//chrisOS/asm/isr.s:188
        pushad                          # other regs because its an ISR
   101a0:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:189
        mov eax,ds
   101a1:	8c d8                	mov    eax,ds
/home/yogi/src/os//chrisOS/asm/isr.s:190
        mov exceptionDS,eax
   101a3:	a3 d8 01 12 00       	mov    ds:0x1201d8,eax
/home/yogi/src/os//chrisOS/asm/isr.s:191
        mov exceptionBX, ebx
   101a8:	89 1d b4 01 12 00    	mov    DWORD PTR ds:0x1201b4,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:192
        mov exceptionCX, ecx
   101ae:	89 0d b8 01 12 00    	mov    DWORD PTR ds:0x1201b8,ecx
/home/yogi/src/os//chrisOS/asm/isr.s:193
        mov exceptionDX, edx
   101b4:	89 15 bc 01 12 00    	mov    DWORD PTR ds:0x1201bc,edx
/home/yogi/src/os//chrisOS/asm/isr.s:194
        mov exceptionSI, esi
   101ba:	89 35 c0 01 12 00    	mov    DWORD PTR ds:0x1201c0,esi
/home/yogi/src/os//chrisOS/asm/isr.s:195
        mov exceptionDI, edi
   101c0:	89 3d c4 01 12 00    	mov    DWORD PTR ds:0x1201c4,edi
/home/yogi/src/os//chrisOS/asm/isr.s:196
        mov eax, cr0
   101c6:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os//chrisOS/asm/isr.s:197
        mov exceptionCR0, eax
   101c9:	a3 cc 01 12 00       	mov    ds:0x1201cc,eax
/home/yogi/src/os//chrisOS/asm/isr.s:198
        mov eax, cr3
   101ce:	0f 20 d8             	mov    eax,cr3
/home/yogi/src/os//chrisOS/asm/isr.s:199
        mov exceptionCR3, eax
   101d1:	a3 d0 01 12 00       	mov    ds:0x1201d0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:200
        mov eax, cr4
   101d6:	0f 20 e0             	mov    eax,cr4
/home/yogi/src/os//chrisOS/asm/isr.s:201
        mov exceptionCR4, eax
   101d9:	a3 d4 01 12 00       	mov    ds:0x1201d4,eax
/home/yogi/src/os//chrisOS/asm/isr.s:202
        mov eax,es
   101de:	8c c0                	mov    eax,es
/home/yogi/src/os//chrisOS/asm/isr.s:203
        mov exceptionES,eax
   101e0:	a3 dc 01 12 00       	mov    ds:0x1201dc,eax
/home/yogi/src/os//chrisOS/asm/isr.s:204
        mov eax,fs
   101e5:	8c e0                	mov    eax,fs
/home/yogi/src/os//chrisOS/asm/isr.s:205
        mov exceptionFS,eax
   101e7:	a3 e0 01 12 00       	mov    ds:0x1201e0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:206
        mov eax,gs
   101ec:	8c e8                	mov    eax,gs
/home/yogi/src/os//chrisOS/asm/isr.s:207
        mov exceptionGS,eax
   101ee:	a3 e4 01 12 00       	mov    ds:0x1201e4,eax
/home/yogi/src/os//chrisOS/asm/isr.s:208
        mov eax,ss
   101f3:	8c d0                	mov    eax,ss
/home/yogi/src/os//chrisOS/asm/isr.s:209
        mov exceptionSS,eax
   101f5:	a3 e8 01 12 00       	mov    ds:0x1201e8,eax
/home/yogi/src/os//chrisOS/asm/isr.s:210
        mov eax, exceptionAX
   101fa:	a1 b0 01 12 00       	mov    eax,ds:0x1201b0
/home/yogi/src/os//chrisOS/asm/isr.s:211
        mov     bx, 0x10
   101ff:	66 bb 10 00          	mov    bx,0x10
/home/yogi/src/os//chrisOS/asm/isr.s:212
        mov     ds, bx
   10203:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:213
        mov     es, bx                  # load ds and es with valid selector
   10205:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:214
	mov     gs, bx
   10207:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:216
    
    mov ebx,exceptionNumber
   10209:	8b 1d a4 01 12 00    	mov    ebx,DWORD PTR ds:0x1201a4
/home/yogi/src/os//chrisOS/asm/isr.s:217
    mov bl,[_isr_has_errorCode+ebx]
   1020f:	8a 9b 83 06 01 00    	mov    bl,BYTE PTR [ebx+0x10683]
/home/yogi/src/os//chrisOS/asm/isr.s:218
    cmp bl,1
   10215:	80 fb 01             	cmp    bl,0x1
/home/yogi/src/os//chrisOS/asm/isr.s:219
    je  getExceptionDetailsWithError
   10218:	74 1f                	je     10239 <getExceptionDetailsWithError>
/home/yogi/src/os//chrisOS/asm/isr.s:220
    mov ebx, [ebp+8]
   1021a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:221
    mov exceptionFlags, ebx
   1021d:	89 1d f0 01 12 00    	mov    DWORD PTR ds:0x1201f0,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:222
    mov bx, [ebp+4]
   10223:	66 8b 5d 04          	mov    bx,WORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:223
    mov exceptionCS, bx
   10227:	66 89 1d fc 01 12 00 	mov    WORD PTR ds:0x1201fc,bx
/home/yogi/src/os//chrisOS/asm/isr.s:224
    mov ebx, [ebp+0]
   1022e:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/src/os//chrisOS/asm/isr.s:225
    mov exceptionEIP, ebx
   10231:	89 1d f8 01 12 00    	mov    DWORD PTR ds:0x1201f8,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:226
    jmp saveTheStack
   10237:	eb 33                	jmp    1026c <saveTheStack>

00010239 <getExceptionDetailsWithError>:
getExceptionDetailsWithError():
/home/yogi/src/os//chrisOS/asm/isr.s:229

getExceptionDetailsWithError:
     mov ebx, [ebp+12]
   10239:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os//chrisOS/asm/isr.s:230
     mov exceptionFlags, ebx
   1023c:	89 1d f0 01 12 00    	mov    DWORD PTR ds:0x1201f0,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:231
     mov bx, [ebp+8]
   10242:	66 8b 5d 08          	mov    bx,WORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:232
     mov exceptionCS, bx
   10246:	66 89 1d fc 01 12 00 	mov    WORD PTR ds:0x1201fc,bx
/home/yogi/src/os//chrisOS/asm/isr.s:233
     mov ebx, [ebp+4]
   1024d:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:234
     mov exceptionEIP, ebx
   10250:	89 1d f8 01 12 00    	mov    DWORD PTR ds:0x1201f8,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:235
     mov ebx, cr2
   10256:	0f 20 d3             	mov    ebx,cr2
/home/yogi/src/os//chrisOS/asm/isr.s:236
     mov exceptionCR2, ebx
   10259:	89 1d 00 02 12 00    	mov    DWORD PTR ds:0x120200,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:237
     mov ebx, [ebp]
   1025f:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/src/os//chrisOS/asm/isr.s:238
     movzx ebx,bx
   10262:	0f b7 db             	movzx  ebx,bx
/home/yogi/src/os//chrisOS/asm/isr.s:239
     mov exceptionErrorCode, bx
   10265:	66 89 1d f4 01 12 00 	mov    WORD PTR ds:0x1201f4,bx

0001026c <saveTheStack>:
saveTheStack():
/home/yogi/src/os//chrisOS/asm/isr.s:242

saveTheStack:
jmp overSaveTheStack
   1026c:	eb 13                	jmp    10281 <overSaveTheStack>
/home/yogi/src/os//chrisOS/asm/isr.s:243
        mov esi, exceptionSavedESP
   1026e:	8b 35 ec 01 12 00    	mov    esi,DWORD PTR ds:0x1201ec
/home/yogi/src/os//chrisOS/asm/isr.s:245
//        add esi, 16 #drop the 4 dwords that are passed to the proc
        mov edi, exceptionSavedStack
   10274:	8b 3d a8 01 12 00    	mov    edi,DWORD PTR ds:0x1201a8
/home/yogi/src/os//chrisOS/asm/isr.s:246
        mov cx, 30
   1027a:	66 b9 1e 00          	mov    cx,0x1e
/home/yogi/src/os//chrisOS/asm/isr.s:247
        cld
   1027e:	fc                   	cld    
/home/yogi/src/os//chrisOS/asm/isr.s:248
        rep movsd
   1027f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]

00010281 <overSaveTheStack>:
overSaveTheStack():
/home/yogi/src/os//chrisOS/asm/isr.s:252

        #Figure out which exception handler to call
overSaveTheStack:
        mov ax,exceptionNumber
   10281:	66 a1 a4 01 12 00    	mov    ax,ds:0x1201a4
/home/yogi/src/os//chrisOS/asm/isr.s:253
        cmp ax,0xe
   10287:	66 83 f8 0e          	cmp    ax,0xe
/home/yogi/src/os//chrisOS/asm/isr.s:254
        jne notPagingHandler
   1028b:	75 09                	jne    10296 <notPagingHandler>
/home/yogi/src/os//chrisOS/asm/isr.s:255
        call 0x08:pagingExceptionHandler
   1028d:	9a 91 95 01 00 08 00 	call   0x8:0x19591
/home/yogi/src/os//chrisOS/asm/isr.s:256
        jmp onTheWayOut
   10294:	eb 07                	jmp    1029d <onTheWayOut>

00010296 <notPagingHandler>:
notPagingHandler():
/home/yogi/src/os//chrisOS/asm/isr.s:260

notPagingHandler:
toDefaultHandler:
        call 0x08:defaultISRHandler
   10296:	9a 4b 97 01 00 08 00 	call   0x8:0x1974b

0001029d <onTheWayOut>:
onTheWayOut():
/home/yogi/src/os//chrisOS/asm/isr.s:262
onTheWayOut:
        popad                           # restoring the regs
   1029d:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:263
        mov esp, exceptionSavedESP
   1029e:	8b 25 ec 01 12 00    	mov    esp,DWORD PTR ds:0x1201ec
/home/yogi/src/os//chrisOS/asm/isr.s:265
#        add esp, 4 #get rid of error code per prolog http://geezer.osdevbrasil.net/osd/intr/index.htm 9. If the exception pushed an error code, the handler must pop it now and discard it. 
        mov ebx,exceptionNumber
   102a4:	8b 1d a4 01 12 00    	mov    ebx,DWORD PTR ds:0x1201a4
/home/yogi/src/os//chrisOS/asm/isr.s:266
        mov bl,[_isr_has_errorCode+ebx]
   102aa:	8a 9b 83 06 01 00    	mov    bl,BYTE PTR [ebx+0x10683]
/home/yogi/src/os//chrisOS/asm/isr.s:267
        cmp bl,1
   102b0:	80 fb 01             	cmp    bl,0x1
/home/yogi/src/os//chrisOS/asm/isr.s:268
        jnz overCorrection
   102b3:	75 03                	jne    102b8 <overCorrection>
/home/yogi/src/os//chrisOS/asm/isr.s:269
        add esp, 4 #get rid of error code per prolog http://geezer.osdevbrasil.net/osd/intr/index.htm 9. If the exception pushed an error code, the handler must pop it now and discard it. 
   102b5:	83 c4 04             	add    esp,0x4

000102b8 <overCorrection>:
overCorrection():
/home/yogi/src/os//chrisOS/asm/isr.s:271
overCorrection:
        mov     bx, exceptionDS
   102b8:	66 8b 1d d8 01 12 00 	mov    bx,WORD PTR ds:0x1201d8
/home/yogi/src/os//chrisOS/asm/isr.s:272
        mov     ds, bx
   102bf:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:273
        mov     bx, exceptionES
   102c1:	66 8b 1d dc 01 12 00 	mov    bx,WORD PTR ds:0x1201dc
/home/yogi/src/os//chrisOS/asm/isr.s:274
        mov     es, bx                  # load ds and es with valid selector
   102c8:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:275
        mov     bx, exceptionFS
   102ca:	66 8b 1d e0 01 12 00 	mov    bx,WORD PTR ds:0x1201e0
/home/yogi/src/os//chrisOS/asm/isr.s:276
        mov     fs,bx
   102d1:	8e e3                	mov    fs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:277
        mov     bx, exceptionGS
   102d3:	66 8b 1d e4 01 12 00 	mov    bx,WORD PTR ds:0x1201e4
/home/yogi/src/os//chrisOS/asm/isr.s:278
	mov     gs, bx
   102da:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:279
        mov ebp,exceptionBP
   102dc:	8b 2d c8 01 12 00    	mov    ebp,DWORD PTR ds:0x1201c8
/home/yogi/src/os//chrisOS/asm/isr.s:280
        mov ebx,exceptionBX
   102e2:	8b 1d b4 01 12 00    	mov    ebx,DWORD PTR ds:0x1201b4
/home/yogi/src/os//chrisOS/asm/isr.s:281
        mov eax, exceptionAX
   102e8:	a1 b0 01 12 00       	mov    eax,ds:0x1201b0
/home/yogi/src/os//chrisOS/asm/isr.s:282
        sti
   102ed:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:283
        iretd
   102ee:	cf                   	iret   

000102ef <_isr_15_wrapper>:
_isr_15_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:287

.global _isr_15_wrapper        
_isr_15_wrapper:
        mov exceptionSavedESP, esp
   102ef:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:288
        mov exceptionAX,eax
   102f5:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:289
        mov exceptionBP, ebp
   102fa:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:290
        mov     ebp, esp
   10300:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:291
        mov     ax, 0xf                  # save exception number
   10302:	66 b8 0f 00          	mov    ax,0xf
/home/yogi/src/os//chrisOS/asm/isr.s:292
        jmp isr_My_Common
   10306:	e9 8f fe ff ff       	jmp    1019a <isr_My_Common>

0001030b <_isr_16_wrapper>:
_isr_16_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:295
.global _isr_16_wrapper        
_isr_16_wrapper:
        mov exceptionSavedESP, esp
   1030b:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:296
        mov exceptionAX,eax
   10311:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:297
        mov exceptionBP, ebp
   10316:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:298
        mov     ebp, esp
   1031c:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:299
        mov     ax, 0x10                  # save exception number
   1031e:	66 b8 10 00          	mov    ax,0x10
/home/yogi/src/os//chrisOS/asm/isr.s:300
        jmp isr_My_Common
   10322:	e9 73 fe ff ff       	jmp    1019a <isr_My_Common>

00010327 <_isr_17_wrapper>:
_isr_17_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:303
.global _isr_17_wrapper        
_isr_17_wrapper:
        mov exceptionSavedESP, esp
   10327:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:304
        mov exceptionAX,eax
   1032d:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:305
        mov exceptionBP, ebp
   10332:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:306
        mov     ebp, esp
   10338:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:307
        mov     ax, 0x11                  # save exception number
   1033a:	66 b8 11 00          	mov    ax,0x11
/home/yogi/src/os//chrisOS/asm/isr.s:308
        jmp isr_My_Common
   1033e:	e9 57 fe ff ff       	jmp    1019a <isr_My_Common>

00010343 <_isr_18_wrapper>:
_isr_18_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:311
.global _isr_18_wrapper        
_isr_18_wrapper:
        mov exceptionSavedESP, esp
   10343:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:312
        mov exceptionAX,eax
   10349:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:313
        mov exceptionBP, ebp
   1034e:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:314
        mov     ebp, esp
   10354:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:315
        mov     ax, 0x12                  # save exception number
   10356:	66 b8 12 00          	mov    ax,0x12
/home/yogi/src/os//chrisOS/asm/isr.s:316
        jmp isr_My_Common
   1035a:	e9 3b fe ff ff       	jmp    1019a <isr_My_Common>

0001035f <_isr_19_wrapper>:
_isr_19_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:319
.global _isr_19_wrapper        
_isr_19_wrapper:
        mov exceptionSavedESP, esp
   1035f:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:320
        mov exceptionAX,eax
   10365:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:321
        mov exceptionBP, ebp
   1036a:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:322
        mov     ebp, esp
   10370:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:323
        mov     ax, 0x13                  # save exception number
   10372:	66 b8 13 00          	mov    ax,0x13
/home/yogi/src/os//chrisOS/asm/isr.s:324
        jmp isr_My_Common
   10376:	e9 1f fe ff ff       	jmp    1019a <isr_My_Common>

0001037b <_isr_20_wrapper>:
_isr_20_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:327
.global _isr_20_wrapper        #8 based exception 0x14
_isr_20_wrapper:
        mov exceptionSavedESP, esp
   1037b:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:328
        mov exceptionAX,eax
   10381:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:329
        mov exceptionBP, ebp
   10386:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:330
        mov     ebp, esp
   1038c:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:331
        mov     ax, 0x14                  # save exception number
   1038e:	66 b8 14 00          	mov    ax,0x14
/home/yogi/src/os//chrisOS/asm/isr.s:332
        jmp isr_My_Common
   10392:	e9 03 fe ff ff       	jmp    1019a <isr_My_Common>

00010397 <_isr_21_wrapper>:
_isr_21_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:335
.global _isr_21_wrapper        
_isr_21_wrapper:
        mov exceptionSavedESP, esp
   10397:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:336
        mov exceptionAX,eax
   1039d:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:337
        mov exceptionBP, ebp
   103a2:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:338
        mov     ebp, esp
   103a8:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:339
        mov     ax, 0x15                  # save exception number
   103aa:	66 b8 15 00          	mov    ax,0x15
/home/yogi/src/os//chrisOS/asm/isr.s:340
        jmp isr_My_Common
   103ae:	e9 e7 fd ff ff       	jmp    1019a <isr_My_Common>

000103b3 <_isr_22_wrapper>:
_isr_22_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:343
.global _isr_22_wrapper        
_isr_22_wrapper:
        mov exceptionSavedESP, esp
   103b3:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:344
        mov exceptionAX,eax
   103b9:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:345
        mov exceptionBP, ebp
   103be:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:346
        mov     ebp, esp
   103c4:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:347
        mov     ax, 0x16                  # save exception number
   103c6:	66 b8 16 00          	mov    ax,0x16
/home/yogi/src/os//chrisOS/asm/isr.s:348
        jmp isr_My_Common
   103ca:	e9 cb fd ff ff       	jmp    1019a <isr_My_Common>

000103cf <_isr_23_wrapper>:
_isr_23_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:351
.global _isr_23_wrapper        
_isr_23_wrapper:
        mov exceptionSavedESP, esp
   103cf:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:352
        mov exceptionAX,eax
   103d5:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:353
        mov exceptionBP, ebp
   103da:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:354
        mov     ebp, esp
   103e0:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:355
        mov     ax, 0x17                  # save exception number
   103e2:	66 b8 17 00          	mov    ax,0x17
/home/yogi/src/os//chrisOS/asm/isr.s:356
        jmp isr_My_Common
   103e6:	e9 af fd ff ff       	jmp    1019a <isr_My_Common>

000103eb <_isr_24_wrapper>:
_isr_24_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:359
.global _isr_24_wrapper        
_isr_24_wrapper:
        mov exceptionSavedESP, esp
   103eb:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:360
        mov exceptionAX,eax
   103f1:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:361
        mov exceptionBP, ebp
   103f6:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:362
        mov     ebp, esp
   103fc:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:363
        mov     ax, 0x18                  # save exception number
   103fe:	66 b8 18 00          	mov    ax,0x18
/home/yogi/src/os//chrisOS/asm/isr.s:364
        jmp isr_My_Common
   10402:	e9 93 fd ff ff       	jmp    1019a <isr_My_Common>

00010407 <_isr_25_wrapper>:
_isr_25_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:367
.global _isr_25_wrapper        
_isr_25_wrapper:
        mov exceptionSavedESP, esp
   10407:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:368
        mov exceptionAX,eax
   1040d:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:369
        mov exceptionBP, ebp
   10412:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:370
        mov     ebp, esp
   10418:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:371
        mov     ax, 0x19                  # save exception number
   1041a:	66 b8 19 00          	mov    ax,0x19
/home/yogi/src/os//chrisOS/asm/isr.s:372
        jmp isr_My_Common
   1041e:	e9 77 fd ff ff       	jmp    1019a <isr_My_Common>

00010423 <_isr_26_wrapper>:
_isr_26_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:375
.global _isr_26_wrapper        
_isr_26_wrapper:
        mov exceptionSavedESP, esp
   10423:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:376
        mov exceptionAX,eax
   10429:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:377
        mov exceptionBP, ebp
   1042e:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:378
        mov     ebp, esp
   10434:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:379
        mov     ax, 0x1a                  # save exception number
   10436:	66 b8 1a 00          	mov    ax,0x1a
/home/yogi/src/os//chrisOS/asm/isr.s:380
        jmp isr_My_Common
   1043a:	e9 5b fd ff ff       	jmp    1019a <isr_My_Common>

0001043f <_isr_27_wrapper>:
_isr_27_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:383
.global _isr_27_wrapper        
_isr_27_wrapper:
        mov exceptionSavedESP, esp
   1043f:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:384
        mov exceptionAX,eax
   10445:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:385
        mov exceptionBP, ebp
   1044a:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:386
        mov     ebp, esp
   10450:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:387
        mov     ax, 0x1b                  # save exception number
   10452:	66 b8 1b 00          	mov    ax,0x1b
/home/yogi/src/os//chrisOS/asm/isr.s:388
        jmp isr_My_Common
   10456:	e9 3f fd ff ff       	jmp    1019a <isr_My_Common>

0001045b <_isr_28_wrapper>:
_isr_28_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:391
.global _isr_28_wrapper        
_isr_28_wrapper:
        mov exceptionSavedESP, esp
   1045b:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:392
        mov exceptionAX,eax
   10461:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:393
        mov exceptionBP, ebp
   10466:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:394
        mov     ebp, esp
   1046c:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:395
        mov     ax, 0x1c                  # save exception number
   1046e:	66 b8 1c 00          	mov    ax,0x1c
/home/yogi/src/os//chrisOS/asm/isr.s:396
        jmp isr_My_Common
   10472:	e9 23 fd ff ff       	jmp    1019a <isr_My_Common>

00010477 <_isr_29_wrapper>:
_isr_29_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:399
.global _isr_29_wrapper        
_isr_29_wrapper:
        mov exceptionSavedESP, esp
   10477:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:400
        mov exceptionAX,eax
   1047d:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:401
        mov exceptionBP, ebp
   10482:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:402
        mov     ebp, esp
   10488:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:403
        mov     ax, 0x1d                  # save exception number
   1048a:	66 b8 1d 00          	mov    ax,0x1d
/home/yogi/src/os//chrisOS/asm/isr.s:404
        jmp isr_My_Common
   1048e:	e9 07 fd ff ff       	jmp    1019a <isr_My_Common>

00010493 <_isr_30_wrapper>:
_isr_30_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:407
.global _isr_30_wrapper        
_isr_30_wrapper:
        mov exceptionSavedESP, esp
   10493:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:408
        mov exceptionAX,eax
   10499:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:409
        mov exceptionBP, ebp
   1049e:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:410
        mov     ebp, esp
   104a4:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:411
        mov     ax, 0x1e                  # save exception number
   104a6:	66 b8 1e 00          	mov    ax,0x1e
/home/yogi/src/os//chrisOS/asm/isr.s:412
        jmp isr_My_Common
   104aa:	e9 eb fc ff ff       	jmp    1019a <isr_My_Common>

000104af <_isr_31_wrapper>:
_isr_31_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:415
.global _isr_31_wrapper        
_isr_31_wrapper:                            #DEBUG EXCEPTION
cli
   104af:	fa                   	cli    
/home/yogi/src/os//chrisOS/asm/isr.s:416
    mov debugBP,ebp
   104b0:	89 2d 1c 02 12 00    	mov    DWORD PTR ds:0x12021c,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:417
    mov debugSavedESP, esp
   104b6:	89 25 40 02 12 00    	mov    DWORD PTR ds:0x120240,esp
/home/yogi/src/os//chrisOS/asm/isr.s:418
    mov debugESP,esp
   104bc:	89 25 1c 00 01 00    	mov    DWORD PTR ds:0x1001c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:419
    pushad
   104c2:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:420
    mov ebp, debugESP
   104c3:	8b 2d 1c 00 01 00    	mov    ebp,DWORD PTR ds:0x1001c
/home/yogi/src/os//chrisOS/asm/isr.s:422
    
    mov debugBX, ebx
   104c9:	89 1d 08 02 12 00    	mov    DWORD PTR ds:0x120208,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:423
    mov ebx,debugSavedESP
   104cf:	8b 1d 40 02 12 00    	mov    ebx,DWORD PTR ds:0x120240
/home/yogi/src/os//chrisOS/asm/isr.s:424
    add ebx,12
   104d5:	83 c3 0c             	add    ebx,0xc
/home/yogi/src/os//chrisOS/asm/isr.s:425
    mov debugSavedESP,ebx
   104d8:	89 1d 40 02 12 00    	mov    DWORD PTR ds:0x120240,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:426
    mov ebx, [ebp+8]
   104de:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:427
    mov debugFlags, ebx
   104e1:	89 1d 44 02 12 00    	mov    DWORD PTR ds:0x120244,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:428
    mov debugReturnFlags,ebx
   104e7:	89 1d 14 00 01 00    	mov    DWORD PTR ds:0x10014,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:429
    movw bx, [ebp+4]
   104ed:	66 8b 5d 04          	mov    bx,WORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:430
    movw debugCS, bx
   104f1:	66 89 1d 4c 02 12 00 	mov    WORD PTR ds:0x12024c,bx
/home/yogi/src/os//chrisOS/asm/isr.s:431
    mov ebx, [ebp+0]
   104f8:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/src/os//chrisOS/asm/isr.s:432
    mov debugEIP, ebx
   104fb:	89 1d 50 02 12 00    	mov    DWORD PTR ds:0x120250,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:434

    mov debugCX, ecx
   10501:	89 0d 0c 02 12 00    	mov    DWORD PTR ds:0x12020c,ecx
/home/yogi/src/os//chrisOS/asm/isr.s:435
    mov debugDX, edx
   10507:	89 15 10 02 12 00    	mov    DWORD PTR ds:0x120210,edx
/home/yogi/src/os//chrisOS/asm/isr.s:436
    mov debugSI, esi
   1050d:	89 35 14 02 12 00    	mov    DWORD PTR ds:0x120214,esi
/home/yogi/src/os//chrisOS/asm/isr.s:437
    mov debugDI, edi
   10513:	89 3d 18 02 12 00    	mov    DWORD PTR ds:0x120218,edi
/home/yogi/src/os//chrisOS/asm/isr.s:438
    mov debugAX,eax
   10519:	a3 04 02 12 00       	mov    ds:0x120204,eax
/home/yogi/src/os//chrisOS/asm/isr.s:440

    movw ax,ds
   1051e:	66 8c d8             	mov    ax,ds
/home/yogi/src/os//chrisOS/asm/isr.s:441
    movw debugDS,eax
   10521:	66 a3 2c 02 12 00    	mov    ds:0x12022c,ax
/home/yogi/src/os//chrisOS/asm/isr.s:442
    mov eax, cr0
   10527:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os//chrisOS/asm/isr.s:443
    mov debugCR0, eax
   1052a:	a3 20 02 12 00       	mov    ds:0x120220,eax
/home/yogi/src/os//chrisOS/asm/isr.s:444
    mov eax, cr3
   1052f:	0f 20 d8             	mov    eax,cr3
/home/yogi/src/os//chrisOS/asm/isr.s:445
    mov debugCR3, eax
   10532:	a3 24 02 12 00       	mov    ds:0x120224,eax
/home/yogi/src/os//chrisOS/asm/isr.s:446
    mov eax, cr4
   10537:	0f 20 e0             	mov    eax,cr4
/home/yogi/src/os//chrisOS/asm/isr.s:447
    mov debugCR4, eax
   1053a:	a3 28 02 12 00       	mov    ds:0x120228,eax
/home/yogi/src/os//chrisOS/asm/isr.s:448
    mov eax,es
   1053f:	8c c0                	mov    eax,es
/home/yogi/src/os//chrisOS/asm/isr.s:449
    mov debugES,eax
   10541:	a3 30 02 12 00       	mov    ds:0x120230,eax
/home/yogi/src/os//chrisOS/asm/isr.s:450
    mov eax,fs
   10546:	8c e0                	mov    eax,fs
/home/yogi/src/os//chrisOS/asm/isr.s:451
    mov debugFS,eax
   10548:	a3 34 02 12 00       	mov    ds:0x120234,eax
/home/yogi/src/os//chrisOS/asm/isr.s:452
    mov eax,gs
   1054d:	8c e8                	mov    eax,gs
/home/yogi/src/os//chrisOS/asm/isr.s:453
    mov debugGS,eax
   1054f:	a3 38 02 12 00       	mov    ds:0x120238,eax
/home/yogi/src/os//chrisOS/asm/isr.s:454
    mov eax,ss
   10554:	8c d0                	mov    eax,ss
/home/yogi/src/os//chrisOS/asm/isr.s:455
    mov debugSS,eax
   10556:	a3 3c 02 12 00       	mov    ds:0x12023c,eax
/home/yogi/src/os//chrisOS/asm/isr.s:457

    mov esi, debugSavedESP
   1055b:	8b 35 40 02 12 00    	mov    esi,DWORD PTR ds:0x120240
/home/yogi/src/os//chrisOS/asm/isr.s:458
    mov edi, debugSavedStack
   10561:	8b 3d ac 01 12 00    	mov    edi,DWORD PTR ds:0x1201ac
/home/yogi/src/os//chrisOS/asm/isr.s:459
    mov cx, 30
   10567:	66 b9 1e 00          	mov    cx,0x1e
/home/yogi/src/os//chrisOS/asm/isr.s:460
    cld
   1056b:	fc                   	cld    
/home/yogi/src/os//chrisOS/asm/isr.s:461
    rep movsd
   1056c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
/home/yogi/src/os//chrisOS/asm/isr.s:462
    call debugStep
   1056e:	e8 c2 a6 00 00       	call   1ac35 <debugStep>
/home/yogi/src/os//chrisOS/asm/isr.s:463
    popa
   10573:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:464
    sti
   10574:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:465
    iretd
   10575:	cf                   	iret   

00010576 <_isr_32_wrapper>:
_isr_32_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:468
.global _isr_32_wrapper        
_isr_32_wrapper:
        mov exceptionSavedESP, esp
   10576:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:469
        mov exceptionAX,eax
   1057c:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:470
        mov exceptionBP, ebp
   10581:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:471
        mov     ebp, esp
   10587:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:472
        mov     ax, 0x20                  # save exception number
   10589:	66 b8 20 00          	mov    ax,0x20
/home/yogi/src/os//chrisOS/asm/isr.s:473
        jmp isr_My_Common
   1058d:	e9 08 fc ff ff       	jmp    1019a <isr_My_Common>

00010592 <_irq0_handler>:
_irq0_handler():
/home/yogi/src/os//chrisOS/asm/isr.s:478


.global _irq0_handler
_irq0_handler:                #remapped to 0x08
cli
   10592:	fa                   	cli    
/home/yogi/src/os//chrisOS/asm/isr.s:480
#cli;hlt;
        push    ebp
   10593:	55                   	push   ebp
/home/yogi/src/os//chrisOS/asm/isr.s:481
        pushf
   10594:	9c                   	pushf  
/home/yogi/src/os//chrisOS/asm/isr.s:482
        mov     ebp, esp
   10595:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:483
        add ebp,4
   10597:	83 c5 04             	add    ebp,0x4
/home/yogi/src/os//chrisOS/asm/isr.s:484
        push eax
   1059a:	50                   	push   eax
/home/yogi/src/os//chrisOS/asm/isr.s:485
        mov ax,0xFFFF
   1059b:	66 b8 ff ff          	mov    ax,0xffff
/home/yogi/src/os//chrisOS/asm/isr.s:486
cld
   1059f:	fc                   	cld    
/home/yogi/src/os//chrisOS/asm/isr.s:488
#cld #C code following the sysV ABI requires DF to be clear on function entry
        push    ebx
   105a0:	53                   	push   ebx
/home/yogi/src/os//chrisOS/asm/isr.s:489
        mov ebx, [ebp+12]
   105a1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os//chrisOS/asm/isr.s:490
        mov exceptionFlags, ebx
   105a4:	89 1d f0 01 12 00    	mov    DWORD PTR ds:0x1201f0,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:491
        mov bx, [ebp+8]
   105aa:	66 8b 5d 08          	mov    bx,WORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:492
        mov exceptionCS, bx
   105ae:	66 89 1d fc 01 12 00 	mov    WORD PTR ds:0x1201fc,bx
/home/yogi/src/os//chrisOS/asm/isr.s:493
        mov ebx, [ebp+4]
   105b5:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:494
        mov exceptionEIP, ebx
   105b8:	89 1d f8 01 12 00    	mov    DWORD PTR ds:0x1201f8,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:495
        pop ebx
   105be:	5b                   	pop    ebx
/home/yogi/src/os//chrisOS/asm/isr.s:496
        pushad                          # other regs because its an ISR
   105bf:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:497
         mov     bx, 0x10
   105c0:	66 bb 10 00          	mov    bx,0x10
/home/yogi/src/os//chrisOS/asm/isr.s:498
        mov     ds, bx
   105c4:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:499
        mov     es, bx                  # load ds and es with valid selector
   105c6:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:500
	mov     gs, bx
   105c8:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:501
        call    irq0_handler          # call actual ISR code
   105ca:	e8 b9 8a 00 00       	call   19088 <irq0_handler>
/home/yogi/src/os//chrisOS/asm/isr.s:502
        popad  
   105cf:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:503
mov al,0x20
   105d0:	b0 20                	mov    al,0x20
/home/yogi/src/os//chrisOS/asm/isr.s:504
out 0x20,al
   105d2:	e6 20                	out    0x20,al
/home/yogi/src/os//chrisOS/asm/isr.s:507
//mov eax,0
//mov [0xa000B0],eax
        pop eax
   105d4:	58                   	pop    eax
/home/yogi/src/os//chrisOS/asm/isr.s:508
        popf
   105d5:	9d                   	popf   
/home/yogi/src/os//chrisOS/asm/isr.s:509
        pop ebp                         # restoring the regs
   105d6:	5d                   	pop    ebp
/home/yogi/src/os//chrisOS/asm/isr.s:510
        sti
   105d7:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:511
        iretd
   105d8:	cf                   	iret   

000105d9 <_isr_01_wrapper>:
_isr_01_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:514
.global _isr_01_wrapper        
_isr_01_wrapper:                #KEYBOARD HANDLER
cli
   105d9:	fa                   	cli    
/home/yogi/src/os//chrisOS/asm/isr.s:519
#cli;hlt;
        //clear the trap flag if it is set
        //we'll re-set it later if need be
        //andw [esp+8],0xFEFF
        mov exceptionAX, eax
   105da:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:520
        mov exceptionBX, ebx
   105df:	89 1d b4 01 12 00    	mov    DWORD PTR ds:0x1201b4,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:521
        mov exceptionCX, ecx
   105e5:	89 0d b8 01 12 00    	mov    DWORD PTR ds:0x1201b8,ecx
/home/yogi/src/os//chrisOS/asm/isr.s:522
        mov exceptionDX, edx
   105eb:	89 15 bc 01 12 00    	mov    DWORD PTR ds:0x1201bc,edx
/home/yogi/src/os//chrisOS/asm/isr.s:523
        mov exceptionSI, esi
   105f1:	89 35 c0 01 12 00    	mov    DWORD PTR ds:0x1201c0,esi
/home/yogi/src/os//chrisOS/asm/isr.s:524
        mov exceptionDI, edi
   105f7:	89 3d c4 01 12 00    	mov    DWORD PTR ds:0x1201c4,edi
/home/yogi/src/os//chrisOS/asm/isr.s:525
        mov exceptionBP, ebp
   105fd:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:526
        mov eax, cr0
   10603:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os//chrisOS/asm/isr.s:527
        mov exceptionCR0, eax
   10606:	a3 cc 01 12 00       	mov    ds:0x1201cc,eax
/home/yogi/src/os//chrisOS/asm/isr.s:528
        mov eax, cr3
   1060b:	0f 20 d8             	mov    eax,cr3
/home/yogi/src/os//chrisOS/asm/isr.s:529
        mov exceptionCR3, eax
   1060e:	a3 d0 01 12 00       	mov    ds:0x1201d0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:530
        mov eax, cr4
   10613:	0f 20 e0             	mov    eax,cr4
/home/yogi/src/os//chrisOS/asm/isr.s:531
        mov exceptionCR4, eax
   10616:	a3 d4 01 12 00       	mov    ds:0x1201d4,eax
/home/yogi/src/os//chrisOS/asm/isr.s:532
        mov eax, exceptionAX
   1061b:	a1 b0 01 12 00       	mov    eax,ds:0x1201b0
/home/yogi/src/os//chrisOS/asm/isr.s:533
        pushad
   10620:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:534
        pushf
   10621:	9c                   	pushf  
/home/yogi/src/os//chrisOS/asm/isr.s:535
        mov     ebp, esp
   10622:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:536
        add ebp,36
   10624:	83 c5 24             	add    ebp,0x24
/home/yogi/src/os//chrisOS/asm/isr.s:537
        mov ax,0x0001
   10627:	66 b8 01 00          	mov    ax,0x1
/home/yogi/src/os//chrisOS/asm/isr.s:538
cld
   1062b:	fc                   	cld    
/home/yogi/src/os//chrisOS/asm/isr.s:540
#cld #C code following the sysV ABI requires DF to be clear on function entry
        mov ebx, [ebp+8]
   1062c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:541
        mov exceptionFlags, ebx
   1062f:	89 1d f0 01 12 00    	mov    DWORD PTR ds:0x1201f0,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:542
        mov bx, [ebp+4]
   10635:	66 8b 5d 04          	mov    bx,WORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:543
        mov exceptionCS, bx
   10639:	66 89 1d fc 01 12 00 	mov    WORD PTR ds:0x1201fc,bx
/home/yogi/src/os//chrisOS/asm/isr.s:544
        mov ebx, [ebp+0]
   10640:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/src/os//chrisOS/asm/isr.s:545
        mov exceptionEIP, ebx
   10643:	89 1d f8 01 12 00    	mov    DWORD PTR ds:0x1201f8,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:546
        mov     bx, 0x10
   10649:	66 bb 10 00          	mov    bx,0x10
/home/yogi/src/os//chrisOS/asm/isr.s:547
        mov     ds, bx
   1064d:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:548
        mov     es, bx                  # load ds and es with valid selector
   1064f:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:549
	mov     gs, bx
   10651:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:550
        call    kbd_handler          # call actual ISR code
   10653:	e8 7b 8b 00 00       	call   191d3 <kbd_handler>
/home/yogi/src/os//chrisOS/asm/isr.s:551
        popf
   10658:	9d                   	popf   
/home/yogi/src/os//chrisOS/asm/isr.s:552
        popad  
   10659:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:553
mov al,0x20
   1065a:	b0 20                	mov    al,0x20
/home/yogi/src/os//chrisOS/asm/isr.s:554
out 0x20,al
   1065c:	e6 20                	out    0x20,al
/home/yogi/src/os//chrisOS/asm/isr.s:555
        mov     al,kKbdHandlerActivateDebugger
   1065e:	a0 74 65 09 00       	mov    al,ds:0x96574
/home/yogi/src/os//chrisOS/asm/isr.s:556
        cmp     al,1
   10663:	3c 01                	cmp    al,0x1
/home/yogi/src/os//chrisOS/asm/isr.s:557
        jne done
   10665:	75 13                	jne    1067a <done>
/home/yogi/src/os//chrisOS/asm/isr.s:558
        orw [esp+8],0x100
   10667:	66 81 4c 24 08 00 01 	or     WORD PTR [esp+0x8],0x100
/home/yogi/src/os//chrisOS/asm/isr.s:559
        mov al,0
   1066e:	b0 00                	mov    al,0x0
/home/yogi/src/os//chrisOS/asm/isr.s:560
        mov kKbdHandlerActivateDebugger,al
   10670:	a2 74 65 09 00       	mov    ds:0x96574,al
/home/yogi/src/os//chrisOS/asm/isr.s:561
        mov eax,exceptionAX
   10675:	a1 b0 01 12 00       	mov    eax,ds:0x1201b0

0001067a <done>:
done():
/home/yogi/src/os//chrisOS/asm/isr.s:563
done:
        sti
   1067a:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:564
        iretd
   1067b:	cf                   	iret   

0001067c <_call_gate_wrapper>:
_call_gate_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:570



.global _call_gate_wrapper
_call_gate_wrapper:
        push    ds
   1067c:	1e                   	push   ds
/home/yogi/src/os//chrisOS/asm/isr.s:571
        push    es                      # saving segment registers and
   1067d:	06                   	push   es
/home/yogi/src/os//chrisOS/asm/isr.s:572
        pushad                          # other regs because its an ISR
   1067e:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:574
 #       call    call_gate_proc
        popad                           # restoring the regs
   1067f:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:575
        pop     es
   10680:	07                   	pop    es
/home/yogi/src/os//chrisOS/asm/isr.s:576
        pop     ds
   10681:	1f                   	pop    ds
/home/yogi/src/os//chrisOS/asm/isr.s:577
        retf
   10682:	cb                   	retf   

00010683 <_isr_has_errorCode>:
	...
_isr_has_errorCode():
   1068b:	01 00                	add    DWORD PTR [eax],eax
   1068d:	01 01                	add    DWORD PTR [ecx],eax
   1068f:	01 01                	add    DWORD PTR [ecx],eax
   10691:	01 00                	add    DWORD PTR [eax],eax
   10693:	00 01                	add    BYTE PTR [ecx],al
	...

000106a3 <_ltr>:
_ltr():
/home/yogi/src/os//chrisOS/asm/isr.s:583

        _isr_has_errorCode:  .byte      0,0,0,0,0,0,0,0, 1,0,1,1,1,1,1,0
                             .byte      0,1,0,0,0,0,0,0, 0,0,0,0,0,0,0,0
.global _ltr
_ltr:
		push ax
   106a3:	66 50                	push   ax
/home/yogi/src/os//chrisOS/asm/isr.s:584
		mov ax, 0x58
   106a5:	66 b8 58 00          	mov    ax,0x58
/home/yogi/src/os//chrisOS/asm/isr.s:585
        ltr     ax
   106a9:	0f 00 d8             	ltr    ax
/home/yogi/src/os//chrisOS/asm/isr.s:586
        pop ax
   106ac:	66 58                	pop    ax
/home/yogi/src/os//chrisOS/asm/isr.s:587
        ret
   106ae:	c3                   	ret    
   106af:	90                   	nop

000106b0 <strftime>:
strftime():
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:58

static char *_fmt(const char *format, const struct tm *t, char *pt, const char *ptlim);
static char *_conv(const int n, char *format, char *pt, const char *ptlim);
static char *_add(const char *str, char *pt, const char *ptlim);

size_t HIGH_CODE_SECTION strftime(char *s, size_t maxsize, const char *format, const struct tm *t) {
   106b0:	55                   	push   ebp
   106b1:	89 e5                	mov    ebp,esp
   106b3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:61
  char *p;

  p = _fmt(((format == NULL) ? "%c" : format), t, s, s + maxsize);
   106b6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   106b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   106bc:	01 c2                	add    edx,eax
   106be:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   106c2:	74 05                	je     106c9 <strftime+0x19>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:61 (discriminator 1)
   106c4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   106c7:	eb 05                	jmp    106ce <strftime+0x1e>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:61 (discriminator 2)
   106c9:	b8 00 50 04 00       	mov    eax,0x45000
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:61 (discriminator 4)
   106ce:	52                   	push   edx
   106cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   106d2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   106d5:	50                   	push   eax
   106d6:	e8 2c 00 00 00       	call   10707 <_fmt>
   106db:	83 c4 10             	add    esp,0x10
   106de:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:62 (discriminator 4)
  if (p == s + maxsize) return 0;
   106e1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   106e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   106e7:	01 d0                	add    eax,edx
   106e9:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   106ec:	75 07                	jne    106f5 <strftime+0x45>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:62 (discriminator 1)
   106ee:	b8 00 00 00 00       	mov    eax,0x0
   106f3:	eb 10                	jmp    10705 <strftime+0x55>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:63
  *p = '\0';
   106f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   106f8:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:64
  return p - s;
   106fb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   106fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10701:	29 c2                	sub    edx,eax
   10703:	89 d0                	mov    eax,edx
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:65
}
   10705:	c9                   	leave  
   10706:	c3                   	ret    

00010707 <_fmt>:
_fmt():
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:67

static HIGH_CODE_SECTION char *_fmt(const char *format, const struct tm *t, char *pt, const char *ptlim) {
   10707:	55                   	push   ebp
   10708:	89 e5                	mov    ebp,esp
   1070a:	53                   	push   ebx
   1070b:	83 ec 74             	sub    esp,0x74
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:68
  for ( ; *format; ++format) {
   1070e:	e9 68 0a 00 00       	jmp    1117b <_fmt+0xa74>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:69
    if (*format == '%') {
   10713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10716:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10719:	3c 25                	cmp    al,0x25
   1071b:	0f 85 3d 0a 00 00    	jne    1115e <_fmt+0xa57>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:70
      if (*format == 'E') {
   10721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10724:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10727:	3c 45                	cmp    al,0x45
   10729:	75 06                	jne    10731 <_fmt+0x2a>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:71
        format++; // Alternate Era
   1072b:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   1072f:	eb 0e                	jmp    1073f <_fmt+0x38>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:72
      } else if (*format == 'O') {
   10731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10734:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10737:	3c 4f                	cmp    al,0x4f
   10739:	75 04                	jne    1073f <_fmt+0x38>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:73
        format++; // Alternate numeric symbols
   1073b:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:76
      }

      switch (*++format) {
   1073f:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   10743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10746:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10749:	0f be c0             	movsx  eax,al
   1074c:	83 f8 7a             	cmp    eax,0x7a
   1074f:	0f 87 08 0a 00 00    	ja     1115d <_fmt+0xa56>
   10755:	8b 04 85 94 50 04 00 	mov    eax,DWORD PTR [eax*4+0x45094]
   1075c:	ff e0                	jmp    eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:78
        case '\0':
          --format;
   1075e:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:79
          break;
   10762:	e9 f7 09 00 00       	jmp    1115e <_fmt+0xa57>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82

        case 'A':
          pt = _add((t->tm_wday < 0 || t->tm_wday > 6) ? "?" : _days[t->tm_wday], pt, ptlim);
   10767:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1076a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   1076d:	85 c0                	test   eax,eax
   1076f:	78 1a                	js     1078b <_fmt+0x84>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82 (discriminator 1)
   10771:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10774:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10777:	83 f8 06             	cmp    eax,0x6
   1077a:	7f 0f                	jg     1078b <_fmt+0x84>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82 (discriminator 3)
   1077c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1077f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10782:	8b 04 85 58 04 12 00 	mov    eax,DWORD PTR [eax*4+0x120458]
   10789:	eb 05                	jmp    10790 <_fmt+0x89>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82 (discriminator 4)
   1078b:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82 (discriminator 6)
   10790:	83 ec 04             	sub    esp,0x4
   10793:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10796:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10799:	50                   	push   eax
   1079a:	e8 27 0a 00 00       	call   111c6 <_add>
   1079f:	83 c4 10             	add    esp,0x10
   107a2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:83 (discriminator 6)
          continue;
   107a5:	e9 cd 09 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86

        case 'a':
          pt = _add((t->tm_wday < 0 || t->tm_wday > 6) ? "?" : _days_abbrev[t->tm_wday], pt, ptlim);
   107aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107ad:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   107b0:	85 c0                	test   eax,eax
   107b2:	78 1a                	js     107ce <_fmt+0xc7>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86 (discriminator 1)
   107b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107b7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   107ba:	83 f8 06             	cmp    eax,0x6
   107bd:	7f 0f                	jg     107ce <_fmt+0xc7>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86 (discriminator 3)
   107bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107c2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   107c5:	8b 04 85 74 04 12 00 	mov    eax,DWORD PTR [eax*4+0x120474]
   107cc:	eb 05                	jmp    107d3 <_fmt+0xcc>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86 (discriminator 4)
   107ce:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86 (discriminator 6)
   107d3:	83 ec 04             	sub    esp,0x4
   107d6:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   107d9:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   107dc:	50                   	push   eax
   107dd:	e8 e4 09 00 00       	call   111c6 <_add>
   107e2:	83 c4 10             	add    esp,0x10
   107e5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:87 (discriminator 6)
          continue;
   107e8:	e9 8a 09 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90

        case 'B':
          pt = _add((t->tm_mon < 0 || t->tm_mon > 11) ? "?" : _months[t->tm_mon], pt, ptlim);
   107ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107f0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   107f3:	85 c0                	test   eax,eax
   107f5:	78 1a                	js     10811 <_fmt+0x10a>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90 (discriminator 1)
   107f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107fa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   107fd:	83 f8 0b             	cmp    eax,0xb
   10800:	7f 0f                	jg     10811 <_fmt+0x10a>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90 (discriminator 3)
   10802:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10805:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10808:	8b 04 85 a0 04 12 00 	mov    eax,DWORD PTR [eax*4+0x1204a0]
   1080f:	eb 05                	jmp    10816 <_fmt+0x10f>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90 (discriminator 4)
   10811:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90 (discriminator 6)
   10816:	83 ec 04             	sub    esp,0x4
   10819:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1081c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1081f:	50                   	push   eax
   10820:	e8 a1 09 00 00       	call   111c6 <_add>
   10825:	83 c4 10             	add    esp,0x10
   10828:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:91 (discriminator 6)
          continue;
   1082b:	e9 47 09 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95

        case 'b':
        case 'h':
          pt = _add((t->tm_mon < 0 || t->tm_mon > 11) ? "?" : _months_abbrev[t->tm_mon], pt, ptlim);
   10830:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10833:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10836:	85 c0                	test   eax,eax
   10838:	78 1a                	js     10854 <_fmt+0x14d>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95 (discriminator 1)
   1083a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1083d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10840:	83 f8 0b             	cmp    eax,0xb
   10843:	7f 0f                	jg     10854 <_fmt+0x14d>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95 (discriminator 3)
   10845:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10848:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1084b:	8b 04 85 e0 04 12 00 	mov    eax,DWORD PTR [eax*4+0x1204e0]
   10852:	eb 05                	jmp    10859 <_fmt+0x152>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95 (discriminator 4)
   10854:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95 (discriminator 6)
   10859:	83 ec 04             	sub    esp,0x4
   1085c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1085f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10862:	50                   	push   eax
   10863:	e8 5e 09 00 00       	call   111c6 <_add>
   10868:	83 c4 10             	add    esp,0x10
   1086b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:96 (discriminator 6)
          continue;
   1086e:	e9 04 09 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:99

        case 'C':
          pt = _conv((t->tm_year + TM_YEAR_BASE) / 100, "%02d", pt, ptlim);
   10873:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10876:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   10879:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   1087f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10884:	89 c8                	mov    eax,ecx
   10886:	f7 ea                	imul   edx
   10888:	c1 fa 05             	sar    edx,0x5
   1088b:	89 c8                	mov    eax,ecx
   1088d:	c1 f8 1f             	sar    eax,0x1f
   10890:	29 c2                	sub    edx,eax
   10892:	89 d0                	mov    eax,edx
   10894:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10897:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1089a:	68 05 50 04 00       	push   0x45005
   1089f:	50                   	push   eax
   108a0:	e8 ef 08 00 00       	call   11194 <_conv>
   108a5:	83 c4 10             	add    esp,0x10
   108a8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:100
          continue;
   108ab:	e9 c7 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:103

        case 'c':
          pt = _fmt("%a %b %e %H:%M:%S %Y", t, pt, ptlim);
   108b0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   108b3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   108b6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   108b9:	68 0a 50 04 00       	push   0x4500a
   108be:	e8 44 fe ff ff       	call   10707 <_fmt>
   108c3:	83 c4 10             	add    esp,0x10
   108c6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:104
          continue;
   108c9:	e9 a9 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:107

        case 'D':
          pt = _fmt("%m/%d/%y", t, pt, ptlim);
   108ce:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   108d1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   108d4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   108d7:	68 1f 50 04 00       	push   0x4501f
   108dc:	e8 26 fe ff ff       	call   10707 <_fmt>
   108e1:	83 c4 10             	add    esp,0x10
   108e4:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:108
          continue;
   108e7:	e9 8b 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:111

        case 'd':
          pt = _conv(t->tm_mday, "%02d", pt, ptlim);
   108ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   108ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   108f2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   108f5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   108f8:	68 05 50 04 00       	push   0x45005
   108fd:	50                   	push   eax
   108fe:	e8 91 08 00 00       	call   11194 <_conv>
   10903:	83 c4 10             	add    esp,0x10
   10906:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:112
          continue;
   10909:	e9 69 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:115

        case 'e':
          pt = _conv(t->tm_mday, "%2d", pt, ptlim);
   1090e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10911:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   10914:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10917:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1091a:	68 28 50 04 00       	push   0x45028
   1091f:	50                   	push   eax
   10920:	e8 6f 08 00 00       	call   11194 <_conv>
   10925:	83 c4 10             	add    esp,0x10
   10928:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:116
          continue;
   1092b:	e9 47 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:119

        case 'F':
          pt = _fmt("%Y-%m-%d", t, pt, ptlim);
   10930:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10933:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10936:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10939:	68 2c 50 04 00       	push   0x4502c
   1093e:	e8 c4 fd ff ff       	call   10707 <_fmt>
   10943:	83 c4 10             	add    esp,0x10
   10946:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:120
          continue;
   10949:	e9 29 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:123

        case 'H':
          pt = _conv(t->tm_hour, "%02d", pt, ptlim);
   1094e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10951:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   10954:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10957:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1095a:	68 05 50 04 00       	push   0x45005
   1095f:	50                   	push   eax
   10960:	e8 2f 08 00 00       	call   11194 <_conv>
   10965:	83 c4 10             	add    esp,0x10
   10968:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:124
          continue;
   1096b:	e9 07 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:127

        case 'I':
          pt = _conv((t->tm_hour % 12) ? (t->tm_hour % 12) : 12, "%02d", pt, ptlim);
   10970:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10973:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   10976:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   1097b:	89 c8                	mov    eax,ecx
   1097d:	f7 ea                	imul   edx
   1097f:	d1 fa                	sar    edx,1
   10981:	89 c8                	mov    eax,ecx
   10983:	c1 f8 1f             	sar    eax,0x1f
   10986:	29 c2                	sub    edx,eax
   10988:	89 d0                	mov    eax,edx
   1098a:	01 c0                	add    eax,eax
   1098c:	01 d0                	add    eax,edx
   1098e:	c1 e0 02             	shl    eax,0x2
   10991:	29 c1                	sub    ecx,eax
   10993:	89 ca                	mov    edx,ecx
   10995:	85 d2                	test   edx,edx
   10997:	74 27                	je     109c0 <_fmt+0x2b9>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:127 (discriminator 1)
   10999:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1099c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   1099f:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   109a4:	89 c8                	mov    eax,ecx
   109a6:	f7 ea                	imul   edx
   109a8:	d1 fa                	sar    edx,1
   109aa:	89 c8                	mov    eax,ecx
   109ac:	c1 f8 1f             	sar    eax,0x1f
   109af:	29 c2                	sub    edx,eax
   109b1:	89 d0                	mov    eax,edx
   109b3:	01 c0                	add    eax,eax
   109b5:	01 d0                	add    eax,edx
   109b7:	c1 e0 02             	shl    eax,0x2
   109ba:	29 c1                	sub    ecx,eax
   109bc:	89 ca                	mov    edx,ecx
   109be:	eb 05                	jmp    109c5 <_fmt+0x2be>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:127 (discriminator 2)
   109c0:	ba 0c 00 00 00       	mov    edx,0xc
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:127 (discriminator 4)
   109c5:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   109c8:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   109cb:	68 05 50 04 00       	push   0x45005
   109d0:	52                   	push   edx
   109d1:	e8 be 07 00 00       	call   11194 <_conv>
   109d6:	83 c4 10             	add    esp,0x10
   109d9:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:128 (discriminator 4)
          continue;
   109dc:	e9 96 07 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:131

        case 'j':
          pt = _conv(t->tm_yday + 1, "%03d", pt, ptlim);
   109e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   109e4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   109e7:	83 c0 01             	add    eax,0x1
   109ea:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   109ed:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   109f0:	68 35 50 04 00       	push   0x45035
   109f5:	50                   	push   eax
   109f6:	e8 99 07 00 00       	call   11194 <_conv>
   109fb:	83 c4 10             	add    esp,0x10
   109fe:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:132
          continue;
   10a01:	e9 71 07 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:135

        case 'k':
          pt = _conv(t->tm_hour, "%2d", pt, ptlim);
   10a06:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10a09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   10a0c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10a0f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10a12:	68 28 50 04 00       	push   0x45028
   10a17:	50                   	push   eax
   10a18:	e8 77 07 00 00       	call   11194 <_conv>
   10a1d:	83 c4 10             	add    esp,0x10
   10a20:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:136
          continue;
   10a23:	e9 4f 07 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:139

        case 'l':
          pt = _conv((t->tm_hour % 12) ? (t->tm_hour % 12) : 12, "%2d", pt, ptlim);
   10a28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10a2b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   10a2e:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   10a33:	89 c8                	mov    eax,ecx
   10a35:	f7 ea                	imul   edx
   10a37:	d1 fa                	sar    edx,1
   10a39:	89 c8                	mov    eax,ecx
   10a3b:	c1 f8 1f             	sar    eax,0x1f
   10a3e:	29 c2                	sub    edx,eax
   10a40:	89 d0                	mov    eax,edx
   10a42:	01 c0                	add    eax,eax
   10a44:	01 d0                	add    eax,edx
   10a46:	c1 e0 02             	shl    eax,0x2
   10a49:	29 c1                	sub    ecx,eax
   10a4b:	89 ca                	mov    edx,ecx
   10a4d:	85 d2                	test   edx,edx
   10a4f:	74 27                	je     10a78 <_fmt+0x371>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:139 (discriminator 1)
   10a51:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10a54:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   10a57:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   10a5c:	89 c8                	mov    eax,ecx
   10a5e:	f7 ea                	imul   edx
   10a60:	d1 fa                	sar    edx,1
   10a62:	89 c8                	mov    eax,ecx
   10a64:	c1 f8 1f             	sar    eax,0x1f
   10a67:	29 c2                	sub    edx,eax
   10a69:	89 d0                	mov    eax,edx
   10a6b:	01 c0                	add    eax,eax
   10a6d:	01 d0                	add    eax,edx
   10a6f:	c1 e0 02             	shl    eax,0x2
   10a72:	29 c1                	sub    ecx,eax
   10a74:	89 ca                	mov    edx,ecx
   10a76:	eb 05                	jmp    10a7d <_fmt+0x376>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:139 (discriminator 2)
   10a78:	ba 0c 00 00 00       	mov    edx,0xc
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:139 (discriminator 4)
   10a7d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10a80:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10a83:	68 28 50 04 00       	push   0x45028
   10a88:	52                   	push   edx
   10a89:	e8 06 07 00 00       	call   11194 <_conv>
   10a8e:	83 c4 10             	add    esp,0x10
   10a91:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:140 (discriminator 4)
          continue;
   10a94:	e9 de 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:143

        case 'M':
          pt = _conv(t->tm_min, "%02d", pt, ptlim);
   10a99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10a9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   10a9f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10aa2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10aa5:	68 05 50 04 00       	push   0x45005
   10aaa:	50                   	push   eax
   10aab:	e8 e4 06 00 00       	call   11194 <_conv>
   10ab0:	83 c4 10             	add    esp,0x10
   10ab3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:144
          continue;
   10ab6:	e9 bc 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:148

        case 'm':
          //CLR 05/02/2016 - removed odd +1 after tm_mon
          pt = _conv(t->tm_mon, "%02d", pt, ptlim);
   10abb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10abe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10ac1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10ac4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10ac7:	68 05 50 04 00       	push   0x45005
   10acc:	50                   	push   eax
   10acd:	e8 c2 06 00 00       	call   11194 <_conv>
   10ad2:	83 c4 10             	add    esp,0x10
   10ad5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:149
          continue;
   10ad8:	e9 9a 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:152

        case 'n':
          pt = _add("\n", pt, ptlim);
   10add:	83 ec 04             	sub    esp,0x4
   10ae0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10ae3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10ae6:	68 3a 50 04 00       	push   0x4503a
   10aeb:	e8 d6 06 00 00       	call   111c6 <_add>
   10af0:	83 c4 10             	add    esp,0x10
   10af3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:153
          continue;
   10af6:	e9 7c 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:156

        case 'p':
          pt = _add((t->tm_hour >= 12) ? "pm" : "am", pt, ptlim);
   10afb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10afe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   10b01:	83 f8 0b             	cmp    eax,0xb
   10b04:	7e 07                	jle    10b0d <_fmt+0x406>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:156 (discriminator 1)
   10b06:	b8 3c 50 04 00       	mov    eax,0x4503c
   10b0b:	eb 05                	jmp    10b12 <_fmt+0x40b>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:156 (discriminator 2)
   10b0d:	b8 3f 50 04 00       	mov    eax,0x4503f
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:156 (discriminator 4)
   10b12:	83 ec 04             	sub    esp,0x4
   10b15:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b18:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b1b:	50                   	push   eax
   10b1c:	e8 a5 06 00 00       	call   111c6 <_add>
   10b21:	83 c4 10             	add    esp,0x10
   10b24:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:157 (discriminator 4)
          continue;
   10b27:	e9 4b 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:160

        case 'R':
          pt = _fmt("%H:%M", t, pt, ptlim);
   10b2c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b2f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b32:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10b35:	68 42 50 04 00       	push   0x45042
   10b3a:	e8 c8 fb ff ff       	call   10707 <_fmt>
   10b3f:	83 c4 10             	add    esp,0x10
   10b42:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:161
          continue;
   10b45:	e9 2d 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:164

        case 'r':
          pt = _fmt("%I:%M:%S %p", t, pt, ptlim);
   10b4a:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b4d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b50:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10b53:	68 48 50 04 00       	push   0x45048
   10b58:	e8 aa fb ff ff       	call   10707 <_fmt>
   10b5d:	83 c4 10             	add    esp,0x10
   10b60:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:165
          continue;
   10b63:	e9 0f 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:168

        case 'S':
          pt = _conv(t->tm_sec, "%02d", pt, ptlim);
   10b68:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10b6b:	8b 00                	mov    eax,DWORD PTR [eax]
   10b6d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b70:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b73:	68 05 50 04 00       	push   0x45005
   10b78:	50                   	push   eax
   10b79:	e8 16 06 00 00       	call   11194 <_conv>
   10b7e:	83 c4 10             	add    esp,0x10
   10b81:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:169
          continue;
   10b84:	e9 ee 05 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:176
        case 's': {
          struct tm  tm;
          char buf[32];
          time_t mkt;

          tm = *t;
   10b89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10b8c:	8b 10                	mov    edx,DWORD PTR [eax]
   10b8e:	89 55 a8             	mov    DWORD PTR [ebp-0x58],edx
   10b91:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   10b94:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
   10b97:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   10b9a:	89 55 b0             	mov    DWORD PTR [ebp-0x50],edx
   10b9d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   10ba0:	89 55 b4             	mov    DWORD PTR [ebp-0x4c],edx
   10ba3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   10ba6:	89 55 b8             	mov    DWORD PTR [ebp-0x48],edx
   10ba9:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   10bac:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
   10baf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   10bb2:	89 55 c0             	mov    DWORD PTR [ebp-0x40],edx
   10bb5:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   10bb8:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
   10bbb:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
   10bbe:	89 55 c8             	mov    DWORD PTR [ebp-0x38],edx
   10bc1:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
   10bc4:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
   10bc7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   10bca:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:177
          mkt = mktime(&tm);
   10bcd:	83 ec 0c             	sub    esp,0xc
   10bd0:	8d 45 a8             	lea    eax,[ebp-0x58]
   10bd3:	50                   	push   eax
   10bd4:	e8 9a 6e 01 00       	call   27a73 <mktime>
   10bd9:	83 c4 10             	add    esp,0x10
   10bdc:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:178
          sprintf(buf, "%lu", mkt);
   10bdf:	83 ec 04             	sub    esp,0x4
   10be2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   10be5:	68 54 50 04 00       	push   0x45054
   10bea:	8d 45 88             	lea    eax,[ebp-0x78]
   10bed:	50                   	push   eax
   10bee:	e8 18 65 01 00       	call   2710b <sprintf>
   10bf3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:179
          pt = _add(buf, pt, ptlim);
   10bf6:	83 ec 04             	sub    esp,0x4
   10bf9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10bfc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10bff:	8d 45 88             	lea    eax,[ebp-0x78]
   10c02:	50                   	push   eax
   10c03:	e8 be 05 00 00       	call   111c6 <_add>
   10c08:	83 c4 10             	add    esp,0x10
   10c0b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
   10c0e:	e9 64 05 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:184
          continue;
        }

        case 'T':
          pt = _fmt("%H:%M:%S", t, pt, ptlim);
   10c13:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10c16:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10c19:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10c1c:	68 58 50 04 00       	push   0x45058
   10c21:	e8 e1 fa ff ff       	call   10707 <_fmt>
   10c26:	83 c4 10             	add    esp,0x10
   10c29:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:185
          continue;
   10c2c:	e9 46 05 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:188

        case 't':
          pt = _add("\t", pt, ptlim);
   10c31:	83 ec 04             	sub    esp,0x4
   10c34:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10c37:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10c3a:	68 61 50 04 00       	push   0x45061
   10c3f:	e8 82 05 00 00       	call   111c6 <_add>
   10c44:	83 c4 10             	add    esp,0x10
   10c47:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:189
          continue;
   10c4a:	e9 28 05 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:192

        case 'U':
          pt = _conv((t->tm_yday + 7 - t->tm_wday) / 7, "%02d", pt, ptlim);
   10c4f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10c52:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   10c55:	8d 50 07             	lea    edx,[eax+0x7]
   10c58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10c5b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10c5e:	89 d1                	mov    ecx,edx
   10c60:	29 c1                	sub    ecx,eax
   10c62:	ba 93 24 49 92       	mov    edx,0x92492493
   10c67:	89 c8                	mov    eax,ecx
   10c69:	f7 ea                	imul   edx
   10c6b:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10c6e:	c1 f8 02             	sar    eax,0x2
   10c71:	89 c2                	mov    edx,eax
   10c73:	89 c8                	mov    eax,ecx
   10c75:	c1 f8 1f             	sar    eax,0x1f
   10c78:	29 c2                	sub    edx,eax
   10c7a:	89 d0                	mov    eax,edx
   10c7c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10c7f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10c82:	68 05 50 04 00       	push   0x45005
   10c87:	50                   	push   eax
   10c88:	e8 07 05 00 00       	call   11194 <_conv>
   10c8d:	83 c4 10             	add    esp,0x10
   10c90:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:193
          continue;
   10c93:	e9 df 04 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:196

        case 'u':
          pt = _conv((t->tm_wday == 0) ? 7 : t->tm_wday, "%d", pt, ptlim);
   10c98:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10c9b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10c9e:	85 c0                	test   eax,eax
   10ca0:	74 08                	je     10caa <_fmt+0x5a3>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:196 (discriminator 1)
   10ca2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10ca5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10ca8:	eb 05                	jmp    10caf <_fmt+0x5a8>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:196 (discriminator 2)
   10caa:	b8 07 00 00 00       	mov    eax,0x7
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:196 (discriminator 4)
   10caf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10cb2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10cb5:	68 63 50 04 00       	push   0x45063
   10cba:	50                   	push   eax
   10cbb:	e8 d4 04 00 00       	call   11194 <_conv>
   10cc0:	83 c4 10             	add    esp,0x10
   10cc3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:197 (discriminator 4)
          continue;
   10cc6:	e9 ac 04 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:207
          int  year;
          int  yday;
          int  wday;
          int  w;

          year = t->tm_year + TM_YEAR_BASE;
   10ccb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10cce:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   10cd1:	05 6c 07 00 00       	add    eax,0x76c
   10cd6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:208
          yday = t->tm_yday;
   10cd9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10cdc:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   10cdf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:209
          wday = t->tm_wday;
   10ce2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10ce5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10ce8:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215
          while (1) {
            int  len;
            int  bot;
            int  top;

            len = LEAPYEAR(year) ? DAYSPERLYEAR : DAYSPERNYEAR;
   10ceb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   10cee:	83 e0 03             	and    eax,0x3
   10cf1:	85 c0                	test   eax,eax
   10cf3:	75 50                	jne    10d45 <_fmt+0x63e>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 1)
   10cf5:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10cf8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10cfd:	89 c8                	mov    eax,ecx
   10cff:	f7 ea                	imul   edx
   10d01:	c1 fa 05             	sar    edx,0x5
   10d04:	89 c8                	mov    eax,ecx
   10d06:	c1 f8 1f             	sar    eax,0x1f
   10d09:	29 c2                	sub    edx,eax
   10d0b:	89 d0                	mov    eax,edx
   10d0d:	6b c0 64             	imul   eax,eax,0x64
   10d10:	29 c1                	sub    ecx,eax
   10d12:	89 c8                	mov    eax,ecx
   10d14:	85 c0                	test   eax,eax
   10d16:	75 26                	jne    10d3e <_fmt+0x637>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 4)
   10d18:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10d1b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10d20:	89 c8                	mov    eax,ecx
   10d22:	f7 ea                	imul   edx
   10d24:	c1 fa 07             	sar    edx,0x7
   10d27:	89 c8                	mov    eax,ecx
   10d29:	c1 f8 1f             	sar    eax,0x1f
   10d2c:	29 c2                	sub    edx,eax
   10d2e:	89 d0                	mov    eax,edx
   10d30:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   10d36:	29 c1                	sub    ecx,eax
   10d38:	89 c8                	mov    eax,ecx
   10d3a:	85 c0                	test   eax,eax
   10d3c:	75 07                	jne    10d45 <_fmt+0x63e>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 5)
   10d3e:	b8 6e 01 00 00       	mov    eax,0x16e
   10d43:	eb 05                	jmp    10d4a <_fmt+0x643>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 6)
   10d45:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 8)
   10d4a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:216 (discriminator 8)
            bot = ((yday + 11 - wday) % DAYSPERWEEK) - 3;
   10d4d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10d50:	83 c0 0b             	add    eax,0xb
   10d53:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
   10d56:	89 c1                	mov    ecx,eax
   10d58:	ba 93 24 49 92       	mov    edx,0x92492493
   10d5d:	89 c8                	mov    eax,ecx
   10d5f:	f7 ea                	imul   edx
   10d61:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10d64:	c1 f8 02             	sar    eax,0x2
   10d67:	89 c2                	mov    edx,eax
   10d69:	89 c8                	mov    eax,ecx
   10d6b:	c1 f8 1f             	sar    eax,0x1f
   10d6e:	29 c2                	sub    edx,eax
   10d70:	89 d0                	mov    eax,edx
   10d72:	89 c2                	mov    edx,eax
   10d74:	c1 e2 03             	shl    edx,0x3
   10d77:	29 c2                	sub    edx,eax
   10d79:	89 c8                	mov    eax,ecx
   10d7b:	29 d0                	sub    eax,edx
   10d7d:	83 e8 03             	sub    eax,0x3
   10d80:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:217 (discriminator 8)
            top = bot - (len % DAYSPERWEEK);
   10d83:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   10d86:	ba 93 24 49 92       	mov    edx,0x92492493
   10d8b:	89 c8                	mov    eax,ecx
   10d8d:	f7 ea                	imul   edx
   10d8f:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10d92:	c1 f8 02             	sar    eax,0x2
   10d95:	89 c2                	mov    edx,eax
   10d97:	89 c8                	mov    eax,ecx
   10d99:	c1 f8 1f             	sar    eax,0x1f
   10d9c:	29 c2                	sub    edx,eax
   10d9e:	89 d0                	mov    eax,edx
   10da0:	89 c2                	mov    edx,eax
   10da2:	c1 e2 03             	shl    edx,0x3
   10da5:	29 c2                	sub    edx,eax
   10da7:	89 c8                	mov    eax,ecx
   10da9:	29 d0                	sub    eax,edx
   10dab:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
   10dae:	29 c2                	sub    edx,eax
   10db0:	89 d0                	mov    eax,edx
   10db2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:218 (discriminator 8)
            if (top < -3) top += DAYSPERWEEK;
   10db5:	83 7d e8 fd          	cmp    DWORD PTR [ebp-0x18],0xfffffffd
   10db9:	7d 04                	jge    10dbf <_fmt+0x6b8>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:218 (discriminator 1)
   10dbb:	83 45 e8 07          	add    DWORD PTR [ebp-0x18],0x7
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:219
            top += len;
   10dbf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   10dc2:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:220
            if (yday >= top) {
   10dc5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10dc8:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   10dcb:	7c 10                	jl     10ddd <_fmt+0x6d6>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:221
              ++year;
   10dcd:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:222
              w = 1;
   10dd1:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:223
              break;
   10dd8:	e9 9d 00 00 00       	jmp    10e7a <_fmt+0x773>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:225
            }
            if (yday >= bot) {
   10ddd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10de0:	3b 45 d4             	cmp    eax,DWORD PTR [ebp-0x2c]
   10de3:	7c 2a                	jl     10e0f <_fmt+0x708>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:226
              w = 1 + ((yday - bot) / DAYSPERWEEK);
   10de5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10de8:	2b 45 d4             	sub    eax,DWORD PTR [ebp-0x2c]
   10deb:	89 c1                	mov    ecx,eax
   10ded:	ba 93 24 49 92       	mov    edx,0x92492493
   10df2:	89 c8                	mov    eax,ecx
   10df4:	f7 ea                	imul   edx
   10df6:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10df9:	c1 f8 02             	sar    eax,0x2
   10dfc:	89 c2                	mov    edx,eax
   10dfe:	89 c8                	mov    eax,ecx
   10e00:	c1 f8 1f             	sar    eax,0x1f
   10e03:	29 c2                	sub    edx,eax
   10e05:	89 d0                	mov    eax,edx
   10e07:	83 c0 01             	add    eax,0x1
   10e0a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:227
              break;
   10e0d:	eb 6b                	jmp    10e7a <_fmt+0x773>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:229
            }
            --year;
   10e0f:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230
            yday += LEAPYEAR(year) ? DAYSPERLYEAR : DAYSPERNYEAR;
   10e13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   10e16:	83 e0 03             	and    eax,0x3
   10e19:	85 c0                	test   eax,eax
   10e1b:	75 50                	jne    10e6d <_fmt+0x766>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 1)
   10e1d:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10e20:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10e25:	89 c8                	mov    eax,ecx
   10e27:	f7 ea                	imul   edx
   10e29:	c1 fa 05             	sar    edx,0x5
   10e2c:	89 c8                	mov    eax,ecx
   10e2e:	c1 f8 1f             	sar    eax,0x1f
   10e31:	29 c2                	sub    edx,eax
   10e33:	89 d0                	mov    eax,edx
   10e35:	6b c0 64             	imul   eax,eax,0x64
   10e38:	29 c1                	sub    ecx,eax
   10e3a:	89 c8                	mov    eax,ecx
   10e3c:	85 c0                	test   eax,eax
   10e3e:	75 26                	jne    10e66 <_fmt+0x75f>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 4)
   10e40:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10e43:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10e48:	89 c8                	mov    eax,ecx
   10e4a:	f7 ea                	imul   edx
   10e4c:	c1 fa 07             	sar    edx,0x7
   10e4f:	89 c8                	mov    eax,ecx
   10e51:	c1 f8 1f             	sar    eax,0x1f
   10e54:	29 c2                	sub    edx,eax
   10e56:	89 d0                	mov    eax,edx
   10e58:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   10e5e:	29 c1                	sub    ecx,eax
   10e60:	89 c8                	mov    eax,ecx
   10e62:	85 c0                	test   eax,eax
   10e64:	75 07                	jne    10e6d <_fmt+0x766>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 5)
   10e66:	b8 6e 01 00 00       	mov    eax,0x16e
   10e6b:	eb 05                	jmp    10e72 <_fmt+0x76b>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 6)
   10e6d:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 8)
   10e72:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:231 (discriminator 8)
          }
   10e75:	e9 71 fe ff ff       	jmp    10ceb <_fmt+0x5e4>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:232
          if (*format == 'V') {
   10e7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10e7d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10e80:	3c 56                	cmp    al,0x56
   10e82:	75 1e                	jne    10ea2 <_fmt+0x79b>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:233
            pt = _conv(w, "%02d", pt, ptlim);
   10e84:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10e87:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10e8a:	68 05 50 04 00       	push   0x45005
   10e8f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   10e92:	e8 fd 02 00 00       	call   11194 <_conv>
   10e97:	83 c4 10             	add    esp,0x10
   10e9a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:239
          } else if (*format == 'g') {
            pt = _conv(year % 100, "%02d", pt, ptlim);
          } else {
            pt = _conv(year, "%04d", pt, ptlim);
          }
          continue;
   10e9d:	e9 d5 02 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:234
            --year;
            yday += LEAPYEAR(year) ? DAYSPERLYEAR : DAYSPERNYEAR;
          }
          if (*format == 'V') {
            pt = _conv(w, "%02d", pt, ptlim);
          } else if (*format == 'g') {
   10ea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10ea5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10ea8:	3c 67                	cmp    al,0x67
   10eaa:	75 3b                	jne    10ee7 <_fmt+0x7e0>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:235
            pt = _conv(year % 100, "%02d", pt, ptlim);
   10eac:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10eaf:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10eb4:	89 c8                	mov    eax,ecx
   10eb6:	f7 ea                	imul   edx
   10eb8:	c1 fa 05             	sar    edx,0x5
   10ebb:	89 c8                	mov    eax,ecx
   10ebd:	c1 f8 1f             	sar    eax,0x1f
   10ec0:	29 c2                	sub    edx,eax
   10ec2:	89 d0                	mov    eax,edx
   10ec4:	6b c0 64             	imul   eax,eax,0x64
   10ec7:	29 c1                	sub    ecx,eax
   10ec9:	89 c8                	mov    eax,ecx
   10ecb:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10ece:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10ed1:	68 05 50 04 00       	push   0x45005
   10ed6:	50                   	push   eax
   10ed7:	e8 b8 02 00 00       	call   11194 <_conv>
   10edc:	83 c4 10             	add    esp,0x10
   10edf:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:239
          } else {
            pt = _conv(year, "%04d", pt, ptlim);
          }
          continue;
   10ee2:	e9 90 02 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:237
          if (*format == 'V') {
            pt = _conv(w, "%02d", pt, ptlim);
          } else if (*format == 'g') {
            pt = _conv(year % 100, "%02d", pt, ptlim);
          } else {
            pt = _conv(year, "%04d", pt, ptlim);
   10ee7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10eea:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10eed:	68 66 50 04 00       	push   0x45066
   10ef2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   10ef5:	e8 9a 02 00 00       	call   11194 <_conv>
   10efa:	83 c4 10             	add    esp,0x10
   10efd:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:239
          }
          continue;
   10f00:	e9 72 02 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:243
        }

        case 'v':
          pt = _fmt("%e-%b-%Y", t, pt, ptlim);
   10f05:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10f08:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10f0b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10f0e:	68 6b 50 04 00       	push   0x4506b
   10f13:	e8 ef f7 ff ff       	call   10707 <_fmt>
   10f18:	83 c4 10             	add    esp,0x10
   10f1b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:244
          continue;
   10f1e:	e9 54 02 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:247

        case 'W':
          pt = _conv((t->tm_yday + 7 - (t->tm_wday ? (t->tm_wday - 1) : 6)) / 7, "%02d", pt, ptlim);
   10f23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f26:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   10f29:	8d 50 07             	lea    edx,[eax+0x7]
   10f2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f2f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10f32:	85 c0                	test   eax,eax
   10f34:	74 0b                	je     10f41 <_fmt+0x83a>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:247 (discriminator 1)
   10f36:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f39:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10f3c:	83 e8 01             	sub    eax,0x1
   10f3f:	eb 05                	jmp    10f46 <_fmt+0x83f>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:247 (discriminator 2)
   10f41:	b8 06 00 00 00       	mov    eax,0x6
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:247 (discriminator 4)
   10f46:	89 d1                	mov    ecx,edx
   10f48:	29 c1                	sub    ecx,eax
   10f4a:	ba 93 24 49 92       	mov    edx,0x92492493
   10f4f:	89 c8                	mov    eax,ecx
   10f51:	f7 ea                	imul   edx
   10f53:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10f56:	c1 f8 02             	sar    eax,0x2
   10f59:	89 c2                	mov    edx,eax
   10f5b:	89 c8                	mov    eax,ecx
   10f5d:	c1 f8 1f             	sar    eax,0x1f
   10f60:	29 c2                	sub    edx,eax
   10f62:	89 d0                	mov    eax,edx
   10f64:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10f67:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10f6a:	68 05 50 04 00       	push   0x45005
   10f6f:	50                   	push   eax
   10f70:	e8 1f 02 00 00       	call   11194 <_conv>
   10f75:	83 c4 10             	add    esp,0x10
   10f78:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:248 (discriminator 4)
          continue;
   10f7b:	e9 f7 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:251

        case 'w':
          pt = _conv(t->tm_wday, "%d", pt, ptlim);
   10f80:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f83:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10f86:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10f89:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10f8c:	68 63 50 04 00       	push   0x45063
   10f91:	50                   	push   eax
   10f92:	e8 fd 01 00 00       	call   11194 <_conv>
   10f97:	83 c4 10             	add    esp,0x10
   10f9a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:252
          continue;
   10f9d:	e9 d5 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:255

        case 'X':
          pt = _fmt("%H:%M:%S", t, pt, ptlim);
   10fa2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10fa5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10fa8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10fab:	68 58 50 04 00       	push   0x45058
   10fb0:	e8 52 f7 ff ff       	call   10707 <_fmt>
   10fb5:	83 c4 10             	add    esp,0x10
   10fb8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:256
          continue;
   10fbb:	e9 b7 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:259

        case 'x':
          pt = _fmt("%m/%d/%y", t, pt, ptlim);
   10fc0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10fc3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10fc6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10fc9:	68 1f 50 04 00       	push   0x4501f
   10fce:	e8 34 f7 ff ff       	call   10707 <_fmt>
   10fd3:	83 c4 10             	add    esp,0x10
   10fd6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:260
          continue;
   10fd9:	e9 99 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:263

        case 'y':
          pt = _conv((t->tm_year + TM_YEAR_BASE) % 100, "%02d", pt, ptlim);
   10fde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10fe1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   10fe4:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   10fea:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10fef:	89 c8                	mov    eax,ecx
   10ff1:	f7 ea                	imul   edx
   10ff3:	c1 fa 05             	sar    edx,0x5
   10ff6:	89 c8                	mov    eax,ecx
   10ff8:	c1 f8 1f             	sar    eax,0x1f
   10ffb:	29 c2                	sub    edx,eax
   10ffd:	89 d0                	mov    eax,edx
   10fff:	6b c0 64             	imul   eax,eax,0x64
   11002:	29 c1                	sub    ecx,eax
   11004:	89 c8                	mov    eax,ecx
   11006:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   11009:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1100c:	68 05 50 04 00       	push   0x45005
   11011:	50                   	push   eax
   11012:	e8 7d 01 00 00       	call   11194 <_conv>
   11017:	83 c4 10             	add    esp,0x10
   1101a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:264
          continue;
   1101d:	e9 55 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:267

        case 'Y':
          pt = _conv(t->tm_year + TM_YEAR_BASE, "%04d", pt, ptlim);
   11022:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11025:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   11028:	05 6c 07 00 00       	add    eax,0x76c
   1102d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   11030:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11033:	68 66 50 04 00       	push   0x45066
   11038:	50                   	push   eax
   11039:	e8 56 01 00 00       	call   11194 <_conv>
   1103e:	83 c4 10             	add    esp,0x10
   11041:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:268
          continue;
   11044:	e9 2e 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:271

        case 'Z':
          pt = _add("?", pt, ptlim);
   11049:	83 ec 04             	sub    esp,0x4
   1104c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1104f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11052:	68 03 50 04 00       	push   0x45003
   11057:	e8 6a 01 00 00       	call   111c6 <_add>
   1105c:	83 c4 10             	add    esp,0x10
   1105f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:272
          continue;
   11062:	e9 10 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:276

        case 'z': {
          long absoff;
          if (kTimeZone >= 0) {
   11067:	a1 90 02 12 00       	mov    eax,ds:0x120290
   1106c:	85 c0                	test   eax,eax
   1106e:	78 23                	js     11093 <_fmt+0x98c>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:277
            absoff = kTimeZone;
   11070:	a1 90 02 12 00       	mov    eax,ds:0x120290
   11075:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:278
            pt = _add("+", pt, ptlim);
   11078:	83 ec 04             	sub    esp,0x4
   1107b:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1107e:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11081:	68 74 50 04 00       	push   0x45074
   11086:	e8 3b 01 00 00       	call   111c6 <_add>
   1108b:	83 c4 10             	add    esp,0x10
   1108e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
   11091:	eb 21                	jmp    110b4 <_fmt+0x9ad>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:280
          } else {
            absoff = kTimeZone;
   11093:	a1 90 02 12 00       	mov    eax,ds:0x120290
   11098:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:281
            pt = _add("-", pt, ptlim);
   1109b:	83 ec 04             	sub    esp,0x4
   1109e:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   110a1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   110a4:	68 76 50 04 00       	push   0x45076
   110a9:	e8 18 01 00 00       	call   111c6 <_add>
   110ae:	83 c4 10             	add    esp,0x10
   110b1:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:283
          }
          pt = _conv(absoff / 3600, "%02d", pt, ptlim);
   110b4:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
   110b7:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   110bc:	89 c8                	mov    eax,ecx
   110be:	f7 ea                	imul   edx
   110c0:	8d 04 0a             	lea    eax,[edx+ecx*1]
   110c3:	c1 f8 0b             	sar    eax,0xb
   110c6:	89 c2                	mov    edx,eax
   110c8:	89 c8                	mov    eax,ecx
   110ca:	c1 f8 1f             	sar    eax,0x1f
   110cd:	29 c2                	sub    edx,eax
   110cf:	89 d0                	mov    eax,edx
   110d1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   110d4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   110d7:	68 05 50 04 00       	push   0x45005
   110dc:	50                   	push   eax
   110dd:	e8 b2 00 00 00       	call   11194 <_conv>
   110e2:	83 c4 10             	add    esp,0x10
   110e5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:284
          pt = _conv((absoff % 3600) / 60, "%02d", pt, ptlim);
   110e8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
   110eb:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   110f0:	89 d8                	mov    eax,ebx
   110f2:	f7 ea                	imul   edx
   110f4:	8d 04 1a             	lea    eax,[edx+ebx*1]
   110f7:	c1 f8 0b             	sar    eax,0xb
   110fa:	89 c2                	mov    edx,eax
   110fc:	89 d8                	mov    eax,ebx
   110fe:	c1 f8 1f             	sar    eax,0x1f
   11101:	89 d1                	mov    ecx,edx
   11103:	29 c1                	sub    ecx,eax
   11105:	69 c1 10 0e 00 00    	imul   eax,ecx,0xe10
   1110b:	29 c3                	sub    ebx,eax
   1110d:	89 d9                	mov    ecx,ebx
   1110f:	ba 89 88 88 88       	mov    edx,0x88888889
   11114:	89 c8                	mov    eax,ecx
   11116:	f7 ea                	imul   edx
   11118:	8d 04 0a             	lea    eax,[edx+ecx*1]
   1111b:	c1 f8 05             	sar    eax,0x5
   1111e:	89 c2                	mov    edx,eax
   11120:	89 c8                	mov    eax,ecx
   11122:	c1 f8 1f             	sar    eax,0x1f
   11125:	29 c2                	sub    edx,eax
   11127:	89 d0                	mov    eax,edx
   11129:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1112c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1112f:	68 05 50 04 00       	push   0x45005
   11134:	50                   	push   eax
   11135:	e8 5a 00 00 00       	call   11194 <_conv>
   1113a:	83 c4 10             	add    esp,0x10
   1113d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:286

          continue;
   11140:	eb 35                	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:290
        }

        case '+':
          pt = _fmt("%a, %d %b %Y %H:%M:%S %z", t, pt, ptlim);
   11142:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   11145:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11148:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1114b:	68 78 50 04 00       	push   0x45078
   11150:	e8 b2 f5 ff ff       	call   10707 <_fmt>
   11155:	83 c4 10             	add    esp,0x10
   11158:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:291
          continue;
   1115b:	eb 1a                	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:295

        case '%':
        default:
          break;
   1115d:	90                   	nop
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:299
      }
    }

    if (pt == ptlim) break;
   1115e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11161:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
   11164:	74 25                	je     1118b <_fmt+0xa84>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:300
    *pt++ = *format;
   11166:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11169:	8d 50 01             	lea    edx,[eax+0x1]
   1116c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   1116f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   11172:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   11175:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:68
  *p = '\0';
  return p - s;
}

static HIGH_CODE_SECTION char *_fmt(const char *format, const struct tm *t, char *pt, const char *ptlim) {
  for ( ; *format; ++format) {
   11177:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:68 (discriminator 1)
   1117b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1117e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11181:	84 c0                	test   al,al
   11183:	0f 85 8a f5 ff ff    	jne    10713 <_fmt+0xc>
   11189:	eb 01                	jmp    1118c <_fmt+0xa85>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:299
        default:
          break;
      }
    }

    if (pt == ptlim) break;
   1118b:	90                   	nop
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:303
    *pt++ = *format;
  }

  return pt;
   1118c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:304
}
   1118f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   11192:	c9                   	leave  
   11193:	c3                   	ret    

00011194 <_conv>:
_conv():
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:306

static char *_conv(const int n, char *format, char *pt, const char *ptlim) {
   11194:	55                   	push   ebp
   11195:	89 e5                	mov    ebp,esp
   11197:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:309
  char  buf[32];

  sprintf(buf, format, n);
   1119a:	83 ec 04             	sub    esp,0x4
   1119d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   111a0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   111a3:	8d 45 d8             	lea    eax,[ebp-0x28]
   111a6:	50                   	push   eax
   111a7:	e8 5f 5f 01 00       	call   2710b <sprintf>
   111ac:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:310
  return _add(buf, pt, ptlim);
   111af:	83 ec 04             	sub    esp,0x4
   111b2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   111b5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   111b8:	8d 45 d8             	lea    eax,[ebp-0x28]
   111bb:	50                   	push   eax
   111bc:	e8 05 00 00 00       	call   111c6 <_add>
   111c1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:311
}
   111c4:	c9                   	leave  
   111c5:	c3                   	ret    

000111c6 <_add>:
_add():
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:313

static char *_add(const char *str, char *pt, const char *ptlim) {
   111c6:	55                   	push   ebp
   111c7:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:314
  while (pt < ptlim && (*pt = *str++) != '\0') ++pt;
   111c9:	eb 04                	jmp    111cf <_add+0x9>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:314 (discriminator 3)
   111cb:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:314 (discriminator 1)
   111cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   111d2:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   111d5:	73 1b                	jae    111f2 <_add+0x2c>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:314 (discriminator 2)
   111d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   111da:	8d 50 01             	lea    edx,[eax+0x1]
   111dd:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   111e0:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   111e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   111e6:	88 10                	mov    BYTE PTR [eax],dl
   111e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   111eb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   111ee:	84 c0                	test   al,al
   111f0:	75 d9                	jne    111cb <_add+0x5>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:315
  return pt;
   111f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:316
}
   111f5:	5d                   	pop    ebp
   111f6:	c3                   	ret    
   111f7:	90                   	nop

000111f8 <keyboardGetKeyFromBuffer>:
keyboardGetKeyFromBuffer():
/home/yogi/src/os//chrisOS/src/char/keyboard.c:17

//Get a key from the keyboard buffer
//Curr moves when a key is put into the buffer
//Base moves when a key is taken from the buffer
uint8_t keyboardGetKeyFromBuffer()
{
   111f8:	55                   	push   ebp
   111f9:	89 e5                	mov    ebp,esp
   111fb:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:18
    char lTemp=0;
   111fe:	c6 45 ff 00          	mov    BYTE PTR [ebp-0x1],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:20
    //printd(DEBUG_KEYBOARD,"\nkKeyboardBuffer=0x%08X, kKeyboardBufferBase=0x%08X, &kKeyboardBufferBase=0x%08X\n",kKeyboardBuffer, kKeyboardBufferBase,&kKeyboardBufferBase);
    if (kKeyboardBufferBase<=kKeyboardBuffer)
   11202:	8b 15 24 04 12 00    	mov    edx,DWORD PTR ds:0x120424
   11208:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   1120d:	39 c2                	cmp    edx,eax
   1120f:	77 16                	ja     11227 <keyboardGetKeyFromBuffer+0x2f>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:22
    {
        __asm__("cli\n");
   11211:	fa                   	cli    
/home/yogi/src/os//chrisOS/src/char/keyboard.c:23
        lTemp=*kKeyboardBufferBase++;
   11212:	a1 24 04 12 00       	mov    eax,ds:0x120424
   11217:	8d 50 01             	lea    edx,[eax+0x1]
   1121a:	89 15 24 04 12 00    	mov    DWORD PTR ds:0x120424,edx
   11220:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11223:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os//chrisOS/src/char/keyboard.c:24
        __asm__("sti\n");
   11226:	fb                   	sti    
/home/yogi/src/os//chrisOS/src/char/keyboard.c:26
    }
    if (kKeyboardBufferBase>kKeyboardBuffer)
   11227:	8b 15 24 04 12 00    	mov    edx,DWORD PTR ds:0x120424
   1122d:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   11232:	39 c2                	cmp    edx,eax
   11234:	76 16                	jbe    1124c <keyboardGetKeyFromBuffer+0x54>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:28
    {
        __asm__("cli\n");
   11236:	fa                   	cli    
/home/yogi/src/os//chrisOS/src/char/keyboard.c:29
        kKeyboardBufferBase=(char*)KEYBOARD_BUFFER_ADDRESS;
   11237:	c7 05 24 04 12 00 b0 	mov    DWORD PTR ds:0x120424,0x1524b0
   1123e:	24 15 00 
/home/yogi/src/os//chrisOS/src/char/keyboard.c:30
        kKeyboardBuffer=(char*)KEYBOARD_BUFFER_ADDRESS-1;
   11241:	c7 05 e0 03 12 00 af 	mov    DWORD PTR ds:0x1203e0,0x1524af
   11248:	24 15 00 
/home/yogi/src/os//chrisOS/src/char/keyboard.c:31
        __asm__("sti\n");
   1124b:	fb                   	sti    
/home/yogi/src/os//chrisOS/src/char/keyboard.c:33
    }
    return lTemp;
   1124c:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os//chrisOS/src/char/keyboard.c:34
}
   11250:	c9                   	leave  
   11251:	c3                   	ret    

00011252 <waitForKeyboardKey>:
waitForKeyboardKey():
/home/yogi/src/os//chrisOS/src/char/keyboard.c:37

char waitForKeyboardKey()
{
   11252:	55                   	push   ebp
   11253:	89 e5                	mov    ebp,esp
   11255:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/char/keyboard.c:38
    printd(DEBUG_KEYBOARD,"gKbd-W, %04X\t", kKeyboardBuffer);
   11258:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   1125d:	83 ec 04             	sub    esp,0x4
   11260:	50                   	push   eax
   11261:	68 80 52 04 00       	push   0x45280
   11266:	6a 10                	push   0x10
   11268:	e8 6a 5e 01 00       	call   270d7 <printd>
   1126d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:39
    char lTemp=0;
   11270:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:40
    printd(DEBUG_KEYBOARD,"kKeyboardBuffer=%04X\n", kKeyboardBuffer);
   11274:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   11279:	83 ec 04             	sub    esp,0x4
   1127c:	50                   	push   eax
   1127d:	68 8e 52 04 00       	push   0x4528e
   11282:	6a 10                	push   0x10
   11284:	e8 4e 5e 01 00       	call   270d7 <printd>
   11289:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:42

    while (kKeyboardBuffer==(char*)KEYBOARD_BUFFER_ADDRESS)
   1128c:	eb 26                	jmp    112b4 <waitForKeyboardKey+0x62>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:44
    {
        printd(DEBUG_KEYBOARD,"kKeyboardBuffer=%04X\n", kKeyboardBuffer);
   1128e:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   11293:	83 ec 04             	sub    esp,0x4
   11296:	50                   	push   eax
   11297:	68 8e 52 04 00       	push   0x4528e
   1129c:	6a 10                	push   0x10
   1129e:	e8 34 5e 01 00       	call   270d7 <printd>
   112a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:45
        __asm__("sti\n");
   112a6:	fb                   	sti    
/home/yogi/src/os//chrisOS/src/char/keyboard.c:46
        waitTicks(1);
   112a7:	83 ec 0c             	sub    esp,0xc
   112aa:	6a 01                	push   0x1
   112ac:	e8 2a 70 01 00       	call   282db <waitTicks>
   112b1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:42
{
    printd(DEBUG_KEYBOARD,"gKbd-W, %04X\t", kKeyboardBuffer);
    char lTemp=0;
    printd(DEBUG_KEYBOARD,"kKeyboardBuffer=%04X\n", kKeyboardBuffer);

    while (kKeyboardBuffer==(char*)KEYBOARD_BUFFER_ADDRESS)
   112b4:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   112b9:	3d b0 24 15 00       	cmp    eax,0x1524b0
   112be:	74 ce                	je     1128e <waitForKeyboardKey+0x3c>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:48
    {
        printd(DEBUG_KEYBOARD,"kKeyboardBuffer=%04X\n", kKeyboardBuffer);
        __asm__("sti\n");
        waitTicks(1);
    }
    lTemp=keyboardGetKeyFromBuffer();
   112c0:	e8 33 ff ff ff       	call   111f8 <keyboardGetKeyFromBuffer>
   112c5:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os//chrisOS/src/char/keyboard.c:49
    printd(DEBUG_KEYBOARD,"got a key %u!\n", lTemp);
   112c8:	0f be 45 f7          	movsx  eax,BYTE PTR [ebp-0x9]
   112cc:	83 ec 04             	sub    esp,0x4
   112cf:	50                   	push   eax
   112d0:	68 a4 52 04 00       	push   0x452a4
   112d5:	6a 10                	push   0x10
   112d7:	e8 fb 5d 01 00       	call   270d7 <printd>
   112dc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:50
    return lTemp;
   112df:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
/home/yogi/src/os//chrisOS/src/char/keyboard.c:51
}
   112e3:	c9                   	leave  
   112e4:	c3                   	ret    

000112e5 <getKeyboardKey>:
getKeyboardKey():
/home/yogi/src/os//chrisOS/src/char/keyboard.c:54

char getKeyboardKey()
{
   112e5:	55                   	push   ebp
   112e6:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/src/char/keyboard.c:55
        return keyboardGetKeyFromBuffer();
   112e8:	e8 0b ff ff ff       	call   111f8 <keyboardGetKeyFromBuffer>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:56
}
   112ed:	5d                   	pop    ebp
   112ee:	c3                   	ret    

000112ef <gets>:
gets():
/home/yogi/src/os//chrisOS/src/char/keyboard.c:58
void gets(char* buffer, int len)
{
   112ef:	55                   	push   ebp
   112f0:	89 e5                	mov    ebp,esp
   112f2:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/char/keyboard.c:59
    volatile char inchar=0;
   112f5:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:60
    int cnt=0;
   112f9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:61
    memset(buffer,0,len);
   11300:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11303:	83 ec 04             	sub    esp,0x4
   11306:	50                   	push   eax
   11307:	6a 00                	push   0x0
   11309:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1130c:	e8 1c 3d 01 00       	call   2502d <memset>
   11311:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:64
    while (1==1)
    {
        inchar=getKeyboardKey();
   11314:	e8 cc ff ff ff       	call   112e5 <getKeyboardKey>
   11319:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os//chrisOS/src/char/keyboard.c:65
        if (inchar=='\b' && cnt>0)
   1131c:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   11320:	3c 08                	cmp    al,0x8
   11322:	75 27                	jne    1134b <gets+0x5c>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:65 (discriminator 1)
   11324:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11328:	7e 21                	jle    1134b <gets+0x5c>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:67
        {
            buffer[cnt]=0;
   1132a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1132d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11330:	01 d0                	add    eax,edx
   11332:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:68
            cnt--;
   11335:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os//chrisOS/src/char/keyboard.c:69
            puts("\b");
   11339:	83 ec 0c             	sub    esp,0xc
   1133c:	68 b3 52 04 00       	push   0x452b3
   11341:	e8 c0 6c 00 00       	call   18006 <puts>
   11346:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:66
    memset(buffer,0,len);
    while (1==1)
    {
        inchar=getKeyboardKey();
        if (inchar=='\b' && cnt>0)
        {
   11349:	eb 63                	jmp    113ae <gets+0xbf>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:71
            buffer[cnt]=0;
            cnt--;
            puts("\b");
        }
        else if (inchar>0)
   1134b:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   1134f:	84 c0                	test   al,al
   11351:	7e c1                	jle    11314 <gets+0x25>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:73
        {
            if (inchar==0x0a)
   11353:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   11357:	3c 0a                	cmp    al,0xa
   11359:	75 1a                	jne    11375 <gets+0x86>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:75
            {
                printk("%c",inchar);
   1135b:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   1135f:	0f be c0             	movsx  eax,al
   11362:	83 ec 08             	sub    esp,0x8
   11365:	50                   	push   eax
   11366:	68 b5 52 04 00       	push   0x452b5
   1136b:	e8 47 5d 01 00       	call   270b7 <printk>
   11370:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:76
                return;
   11373:	eb 3e                	jmp    113b3 <gets+0xc4>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:78
            }
            if (cnt<len-2)
   11375:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11378:	83 e8 02             	sub    eax,0x2
   1137b:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1137e:	7e 94                	jle    11314 <gets+0x25>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:80
            {
                printk("%c",inchar);
   11380:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   11384:	0f be c0             	movsx  eax,al
   11387:	83 ec 08             	sub    esp,0x8
   1138a:	50                   	push   eax
   1138b:	68 b5 52 04 00       	push   0x452b5
   11390:	e8 22 5d 01 00       	call   270b7 <printk>
   11395:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:81
                buffer[cnt++]=inchar;
   11398:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1139b:	8d 50 01             	lea    edx,[eax+0x1]
   1139e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   113a1:	89 c2                	mov    edx,eax
   113a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   113a6:	01 c2                	add    edx,eax
   113a8:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   113ac:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os//chrisOS/src/char/keyboard.c:84
            }
        }
    }
   113ae:	e9 61 ff ff ff       	jmp    11314 <gets+0x25>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:85
}
   113b3:	c9                   	leave  
   113b4:	c3                   	ret    

000113b5 <getc>:
getc():
/home/yogi/src/os//chrisOS/src/char/keyboard.c:88

char getc()
{
   113b5:	55                   	push   ebp
   113b6:	89 e5                	mov    ebp,esp
   113b8:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:89
   int inchar=getKeyboardKey();
   113bb:	e8 25 ff ff ff       	call   112e5 <getKeyboardKey>
   113c0:	0f be c0             	movsx  eax,al
   113c3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os//chrisOS/src/char/keyboard.c:91
   
   while (inchar==0)
   113c6:	eb 16                	jmp    113de <getc+0x29>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:93
   {
       inchar=getKeyboardKey();
   113c8:	e8 18 ff ff ff       	call   112e5 <getKeyboardKey>
   113cd:	0f be c0             	movsx  eax,al
   113d0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os//chrisOS/src/char/keyboard.c:94
        inchar=getKeyboardKey();
   113d3:	e8 0d ff ff ff       	call   112e5 <getKeyboardKey>
   113d8:	0f be c0             	movsx  eax,al
   113db:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os//chrisOS/src/char/keyboard.c:91

char getc()
{
   int inchar=getKeyboardKey();
   
   while (inchar==0)
   113de:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   113e2:	74 e4                	je     113c8 <getc+0x13>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:96
   {
       inchar=getKeyboardKey();
        inchar=getKeyboardKey();
   }
   return inchar;
   113e4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os//chrisOS/src/char/keyboard.c:97
}
   113e7:	c9                   	leave  
   113e8:	c3                   	ret    
   113e9:	66 90                	xchg   ax,ax
   113eb:	90                   	nop

000113ec <kPagingGet4kPDEntryValue>:
kPagingGet4kPDEntryValue():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:19
extern uint32_t*  kKernelPageDir;
extern uint64_t kE820MemoryBytes;
extern uint32_t kDebugLevel;

uint32_t kPagingGet4kPDEntryValue(uint32_t address)
{
   113ec:	55                   	push   ebp
   113ed:	89 e5                	mov    ebp,esp
   113ef:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/init/kpaging.c:20
    address&=0xFFFFF000;
   113f2:	81 65 08 00 f0 ff ff 	and    DWORD PTR [ebp+0x8],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:21
    uintptr_t* lTemp=(uint32_t*)((KERNEL_PAGE_DIR_ADDRESS + (((address & 0xFFC00000) >> 22) << 2)));
   113f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   113fc:	c1 e8 16             	shr    eax,0x16
   113ff:	c1 e0 02             	shl    eax,0x2
   11402:	05 00 90 4a 00       	add    eax,0x4a9000
   11407:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:23
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   1140a:	a1 38 03 12 00       	mov    eax,ds:0x120338
   1140f:	83 e0 40             	and    eax,0x40
   11412:	85 c0                	test   eax,eax
   11414:	74 16                	je     1142c <kPagingGet4kPDEntryValue+0x40>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:24
            printk("pagingGet4kPDEntryValue: dirAddressPtr=0x%08x\n", *lTemp);
   11416:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11419:	8b 00                	mov    eax,DWORD PTR [eax]
   1141b:	83 ec 08             	sub    esp,0x8
   1141e:	50                   	push   eax
   1141f:	68 c0 53 04 00       	push   0x453c0
   11424:	e8 8e 5c 01 00       	call   270b7 <printk>
   11429:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:26
#endif
    return (uint32_t)*lTemp;
   1142c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1142f:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os//chrisOS/src/init/kpaging.c:27
}
   11431:	c9                   	leave  
   11432:	c3                   	ret    

00011433 <kPagingGet4kPDEntryAddress>:
kPagingGet4kPDEntryAddress():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:30

uint32_t kPagingGet4kPDEntryAddress(uint32_t address)
{
   11433:	55                   	push   ebp
   11434:	89 e5                	mov    ebp,esp
   11436:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/init/kpaging.c:31
    address&=0xFFFFF000;
   11439:	81 65 08 00 f0 ff ff 	and    DWORD PTR [ebp+0x8],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:32
    uintptr_t lTemp=((KERNEL_PAGE_DIR_ADDRESS  | (((address & 0xFFC00000) >> 22) << 2)));
   11440:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11443:	c1 e8 16             	shr    eax,0x16
   11446:	c1 e0 02             	shl    eax,0x2
   11449:	0d 00 90 4a 00       	or     eax,0x4a9000
   1144e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:34
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11451:	a1 38 03 12 00       	mov    eax,ds:0x120338
   11456:	83 e0 40             	and    eax,0x40
   11459:	85 c0                	test   eax,eax
   1145b:	74 13                	je     11470 <kPagingGet4kPDEntryAddress+0x3d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:35
            printk("dirEntryAddress=0x%08x\n", lTemp);
   1145d:	83 ec 08             	sub    esp,0x8
   11460:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11463:	68 ef 53 04 00       	push   0x453ef
   11468:	e8 4a 5c 01 00       	call   270b7 <printk>
   1146d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:37
#endif
    return (uint32_t)lTemp & 0xFFFFFFFF;
   11470:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os//chrisOS/src/init/kpaging.c:38
}
   11473:	c9                   	leave  
   11474:	c3                   	ret    

00011475 <kPagingGet4kPTEntryAddress>:
kPagingGet4kPTEntryAddress():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:41

uint32_t kPagingGet4kPTEntryAddress(uint32_t address)
{
   11475:	55                   	push   ebp
   11476:	89 e5                	mov    ebp,esp
   11478:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/init/kpaging.c:42
    address&=0xFFFFF000;
   1147b:	81 65 08 00 f0 ff ff 	and    DWORD PTR [ebp+0x8],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:43
    uintptr_t pDirPtr=kPagingGet4kPDEntryValue(address) & 0xFFFFF000;
   11482:	83 ec 0c             	sub    esp,0xc
   11485:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11488:	e8 5f ff ff ff       	call   113ec <kPagingGet4kPDEntryValue>
   1148d:	83 c4 10             	add    esp,0x10
   11490:	25 00 f0 ff ff       	and    eax,0xfffff000
   11495:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:44
    return ((address & 0x3FF000) >> 12) << 2 | pDirPtr;
   11498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1149b:	25 00 f0 3f 00       	and    eax,0x3ff000
   114a0:	c1 e8 0c             	shr    eax,0xc
   114a3:	c1 e0 02             	shl    eax,0x2
   114a6:	0b 45 f4             	or     eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os//chrisOS/src/init/kpaging.c:45
}
   114a9:	c9                   	leave  
   114aa:	c3                   	ret    

000114ab <kPagingGet4kPTEntryValue>:
kPagingGet4kPTEntryValue():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:48

uint32_t kPagingGet4kPTEntryValue(uint32_t address)
{
   114ab:	55                   	push   ebp
   114ac:	89 e5                	mov    ebp,esp
   114ae:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/init/kpaging.c:49
    address&=0xFFFFF000;
   114b1:	81 65 08 00 f0 ff ff 	and    DWORD PTR [ebp+0x8],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:50
    uint32_t* pTablePtr=(uint32_t*)kPagingGet4kPTEntryAddress(address);
   114b8:	83 ec 0c             	sub    esp,0xc
   114bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   114be:	e8 b2 ff ff ff       	call   11475 <kPagingGet4kPTEntryAddress>
   114c3:	83 c4 10             	add    esp,0x10
   114c6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:52
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   114c9:	a1 38 03 12 00       	mov    eax,ds:0x120338
   114ce:	83 e0 40             	and    eax,0x40
   114d1:	85 c0                	test   eax,eax
   114d3:	74 13                	je     114e8 <kPagingGet4kPTEntryValue+0x3d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:53
             printk("pagingGet4kPTEntryValue: pageEntryAddress=0x%08X\n", pTablePtr);
   114d5:	83 ec 08             	sub    esp,0x8
   114d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   114db:	68 08 54 04 00       	push   0x45408
   114e0:	e8 d2 5b 01 00       	call   270b7 <printk>
   114e5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:56
             //printf("pageEntryValue=0x%08X\n", *pTablePtr);
#endif
    return *pTablePtr;
   114e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   114eb:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os//chrisOS/src/init/kpaging.c:57
}
   114ed:	c9                   	leave  
   114ee:	c3                   	ret    

000114ef <kPagingSetPageReadOnlyFlag>:
kPagingSetPageReadOnlyFlag():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:60

void kPagingSetPageReadOnlyFlag(uintptr_t* ptEntry, bool readOnly)
{
   114ef:	55                   	push   ebp
   114f0:	89 e5                	mov    ebp,esp
   114f2:	83 ec 18             	sub    esp,0x18
   114f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   114f8:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:62
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   114fb:	a1 38 03 12 00       	mov    eax,ds:0x120338
   11500:	83 e0 40             	and    eax,0x40
   11503:	85 c0                	test   eax,eax
   11505:	74 19                	je     11520 <kPagingSetPageReadOnlyFlag+0x31>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:63
            printk("pagingMakePageReadOnly: 0x%08X - before/after: 0x%08X/", ptEntry, *ptEntry);
   11507:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1150a:	8b 00                	mov    eax,DWORD PTR [eax]
   1150c:	83 ec 04             	sub    esp,0x4
   1150f:	50                   	push   eax
   11510:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11513:	68 3c 54 04 00       	push   0x4543c
   11518:	e8 9a 5b 01 00       	call   270b7 <printk>
   1151d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:65
#endif
         if (readOnly)
   11520:	80 7d f4 00          	cmp    BYTE PTR [ebp-0xc],0x0
   11524:	74 11                	je     11537 <kPagingSetPageReadOnlyFlag+0x48>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:66
            *ptEntry&=0xFFFFFFFD;
   11526:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11529:	8b 00                	mov    eax,DWORD PTR [eax]
   1152b:	83 e0 fd             	and    eax,0xfffffffd
   1152e:	89 c2                	mov    edx,eax
   11530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11533:	89 10                	mov    DWORD PTR [eax],edx
   11535:	eb 0f                	jmp    11546 <kPagingSetPageReadOnlyFlag+0x57>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:68
         else
            *ptEntry|=2; 
   11537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1153a:	8b 00                	mov    eax,DWORD PTR [eax]
   1153c:	83 c8 02             	or     eax,0x2
   1153f:	89 c2                	mov    edx,eax
   11541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11544:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:69
    RELOAD_CR3
   11546:	0f 20 d8             	mov    eax,cr3
   11549:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:71
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   1154c:	a1 38 03 12 00       	mov    eax,ds:0x120338
   11551:	83 e0 40             	and    eax,0x40
   11554:	85 c0                	test   eax,eax
   11556:	74 16                	je     1156e <kPagingSetPageReadOnlyFlag+0x7f>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:72
            printk("0x%08X\n", *ptEntry);
   11558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1155b:	8b 00                	mov    eax,DWORD PTR [eax]
   1155d:	83 ec 08             	sub    esp,0x8
   11560:	50                   	push   eax
   11561:	68 73 54 04 00       	push   0x45473
   11566:	e8 4c 5b 01 00       	call   270b7 <printk>
   1156b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:74
#endif
}
   1156e:	90                   	nop
   1156f:	c9                   	leave  
   11570:	c3                   	ret    

00011571 <kPagingUpdatePTEPresentFlag>:
kPagingUpdatePTEPresentFlag():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:77

void kPagingUpdatePTEPresentFlag(uintptr_t* ptEntry, bool present)
{
   11571:	55                   	push   ebp
   11572:	89 e5                	mov    ebp,esp
   11574:	83 ec 18             	sub    esp,0x18
   11577:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1157a:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:78
         printd(DEBUG_PAGING,"pagingUpdatePTEPresentFlag: 0x%08X - before/after: 0x%08X/", ptEntry, *ptEntry);
   1157d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11580:	8b 00                	mov    eax,DWORD PTR [eax]
   11582:	50                   	push   eax
   11583:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11586:	68 7c 54 04 00       	push   0x4547c
   1158b:	6a 40                	push   0x40
   1158d:	e8 45 5b 01 00       	call   270d7 <printd>
   11592:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:79
         if (present)
   11595:	80 7d f4 00          	cmp    BYTE PTR [ebp-0xc],0x0
   11599:	74 11                	je     115ac <kPagingUpdatePTEPresentFlag+0x3b>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:80
             *ptEntry=*ptEntry | 1;
   1159b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1159e:	8b 00                	mov    eax,DWORD PTR [eax]
   115a0:	83 c8 01             	or     eax,0x1
   115a3:	89 c2                	mov    edx,eax
   115a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115a8:	89 10                	mov    DWORD PTR [eax],edx
   115aa:	eb 0f                	jmp    115bb <kPagingUpdatePTEPresentFlag+0x4a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:82
         else
             *ptEntry&=0xFFFFFFFE;
   115ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115af:	8b 00                	mov    eax,DWORD PTR [eax]
   115b1:	83 e0 fe             	and    eax,0xfffffffe
   115b4:	89 c2                	mov    edx,eax
   115b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115b9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:83
         __asm__("mov eax,cr3\nmov cr3,eax\n":::"eax");
   115bb:	0f 20 d8             	mov    eax,cr3
   115be:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:84
         printd(DEBUG_PAGING,"0x%08X\n", *ptEntry);
   115c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115c4:	8b 00                	mov    eax,DWORD PTR [eax]
   115c6:	83 ec 04             	sub    esp,0x4
   115c9:	50                   	push   eax
   115ca:	68 73 54 04 00       	push   0x45473
   115cf:	6a 40                	push   0x40
   115d1:	e8 01 5b 01 00       	call   270d7 <printd>
   115d6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:85
}
   115d9:	90                   	nop
   115da:	c9                   	leave  
   115db:	c3                   	ret    

000115dc <kSetVirtualRangeRO>:
kSetVirtualRangeRO():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:88

void kSetVirtualRangeRO(uint32_t startAddy, uint32_t endAddy, bool readOnly)
{
   115dc:	55                   	push   ebp
   115dd:	89 e5                	mov    ebp,esp
   115df:	83 ec 28             	sub    esp,0x28
   115e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   115e5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:91
    uintptr_t* startPTE;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   115e8:	a1 38 03 12 00       	mov    eax,ds:0x120338
   115ed:	83 e0 40             	and    eax,0x40
   115f0:	85 c0                	test   eax,eax
   115f2:	74 16                	je     1160a <kSetVirtualRangeRO+0x2e>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:92
           printk("kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
   115f4:	83 ec 04             	sub    esp,0x4
   115f7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   115fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   115fd:	68 b8 54 04 00       	push   0x454b8
   11602:	e8 b0 5a 01 00       	call   270b7 <printk>
   11607:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:94
#endif
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
   1160a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1160d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   11610:	eb 64                	jmp    11676 <kSetVirtualRangeRO+0x9a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:96
    {
        startPTE=(uintptr_t*)kPagingGet4kPTEntryAddress(cnt);
   11612:	83 ec 0c             	sub    esp,0xc
   11615:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11618:	e8 58 fe ff ff       	call   11475 <kPagingGet4kPTEntryAddress>
   1161d:	83 c4 10             	add    esp,0x10
   11620:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:98
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11623:	a1 38 03 12 00       	mov    eax,ds:0x120338
   11628:	83 e0 40             	and    eax,0x40
   1162b:	85 c0                	test   eax,eax
   1162d:	74 26                	je     11655 <kSetVirtualRangeRO+0x79>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:99
            printk("0x%08X (0x%08X) %s --> ", cnt, startPTE, readOnly?"ro":"rw");
   1162f:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   11633:	74 07                	je     1163c <kSetVirtualRangeRO+0x60>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:99 (discriminator 1)
   11635:	b8 e5 54 04 00       	mov    eax,0x454e5
   1163a:	eb 05                	jmp    11641 <kSetVirtualRangeRO+0x65>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:99 (discriminator 2)
   1163c:	b8 e8 54 04 00       	mov    eax,0x454e8
/home/yogi/src/os//chrisOS/src/init/kpaging.c:99 (discriminator 4)
   11641:	50                   	push   eax
   11642:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   11645:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11648:	68 eb 54 04 00       	push   0x454eb
   1164d:	e8 65 5a 01 00       	call   270b7 <printk>
   11652:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:101 (discriminator 2)
#endif
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
   11655:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
   11659:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1165c:	8d 48 04             	lea    ecx,[eax+0x4]
   1165f:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   11662:	83 ec 08             	sub    esp,0x8
   11665:	52                   	push   edx
   11666:	50                   	push   eax
   11667:	e8 83 fe ff ff       	call   114ef <kPagingSetPageReadOnlyFlag>
   1166c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:94 (discriminator 2)
    uintptr_t* startPTE;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
           printk("kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
#endif
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
   1166f:	81 45 f4 00 10 00 00 	add    DWORD PTR [ebp-0xc],0x1000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:94 (discriminator 1)
   11676:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11679:	83 c0 01             	add    eax,0x1
   1167c:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1167f:	73 91                	jae    11612 <kSetVirtualRangeRO+0x36>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:105
#endif
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
            
    }
        //for cnt=0;cnt<=8192;cnt+=4096
}
   11681:	90                   	nop
   11682:	c9                   	leave  
   11683:	c3                   	ret    

00011684 <kpagingUpdatePresentFlagA>:
kpagingUpdatePresentFlagA():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:109

//Absolute version, page passed is already virtual
void kpagingUpdatePresentFlagA(uint32_t address, bool present)
{
   11684:	55                   	push   ebp
   11685:	89 e5                	mov    ebp,esp
   11687:	83 ec 28             	sub    esp,0x28
   1168a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1168d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:111
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11690:	a1 38 03 12 00       	mov    eax,ds:0x120338
   11695:	83 e0 40             	and    eax,0x40
   11698:	85 c0                	test   eax,eax
   1169a:	74 26                	je     116c2 <kpagingUpdatePresentFlagA+0x3e>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:112
            printk("kpagingUpdatePresentFlagA: Make 0x%08X %s\n", address, present?"present":"not present");
   1169c:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   116a0:	74 07                	je     116a9 <kpagingUpdatePresentFlagA+0x25>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:112 (discriminator 1)
   116a2:	b8 03 55 04 00       	mov    eax,0x45503
   116a7:	eb 05                	jmp    116ae <kpagingUpdatePresentFlagA+0x2a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:112 (discriminator 2)
   116a9:	b8 0b 55 04 00       	mov    eax,0x4550b
/home/yogi/src/os//chrisOS/src/init/kpaging.c:112 (discriminator 4)
   116ae:	83 ec 04             	sub    esp,0x4
   116b1:	50                   	push   eax
   116b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   116b5:	68 18 55 04 00       	push   0x45518
   116ba:	e8 f8 59 01 00       	call   270b7 <printk>
   116bf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:114
#endif
        uintptr_t* pagePTE= (uintptr_t*)kPagingGet4kPTEntryAddress(address&0xFFFFF000);
   116c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   116c5:	25 00 f0 ff ff       	and    eax,0xfffff000
   116ca:	83 ec 0c             	sub    esp,0xc
   116cd:	50                   	push   eax
   116ce:	e8 a2 fd ff ff       	call   11475 <kPagingGet4kPTEntryAddress>
   116d3:	83 c4 10             	add    esp,0x10
   116d6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:116
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   116d9:	a1 38 03 12 00       	mov    eax,ds:0x120338
   116de:	83 e0 40             	and    eax,0x40
   116e1:	85 c0                	test   eax,eax
   116e3:	74 13                	je     116f8 <kpagingUpdatePresentFlagA+0x74>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:117
            printk("kpagingUpdatePresentFlagA: updating entry 0x%08X\n", pagePTE);
   116e5:	83 ec 08             	sub    esp,0x8
   116e8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   116eb:	68 44 55 04 00       	push   0x45544
   116f0:	e8 c2 59 01 00       	call   270b7 <printk>
   116f5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:119
#endif
        kPagingUpdatePTEPresentFlag(pagePTE, present);
   116f8:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   116fc:	83 ec 08             	sub    esp,0x8
   116ff:	50                   	push   eax
   11700:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11703:	e8 69 fe ff ff       	call   11571 <kPagingUpdatePTEPresentFlag>
   11708:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:120
}
   1170b:	90                   	nop
   1170c:	c9                   	leave  
   1170d:	c3                   	ret    

0001170e <kpagingUpdatePresentFlagV>:
kpagingUpdatePresentFlagV():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:123

void kpagingUpdatePresentFlagV(uint32_t address, bool present)
{
   1170e:	55                   	push   ebp
   1170f:	89 e5                	mov    ebp,esp
   11711:	83 ec 18             	sub    esp,0x18
   11714:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11717:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:124
    address+=KERNEL_PAGED_BASE_ADDRESS; 
   1171a:	81 6d 08 00 00 00 40 	sub    DWORD PTR [ebp+0x8],0x40000000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:125
    kpagingUpdatePresentFlagA(address, present);
   11721:	0f b6 45 f4          	movzx  eax,BYTE PTR [ebp-0xc]
   11725:	83 ec 08             	sub    esp,0x8
   11728:	50                   	push   eax
   11729:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1172c:	e8 53 ff ff ff       	call   11684 <kpagingUpdatePresentFlagA>
   11731:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:126
}
   11734:	90                   	nop
   11735:	c9                   	leave  
   11736:	c3                   	ret    

00011737 <kMapPage>:
kMapPage():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:129

void kMapPage(uintptr_t mapTo, uintptr_t mapFrom, uint8_t flags)
{
   11737:	55                   	push   ebp
   11738:	89 e5                	mov    ebp,esp
   1173a:	53                   	push   ebx
   1173b:	83 ec 24             	sub    esp,0x24
   1173e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11741:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:133
    uint32_t *ptr;
    uint32_t ptrVal;
    uint32_t *ptrT;
    ptr=(uint32_t*)kKernelPageDir;
   11744:	a1 a4 02 12 00       	mov    eax,ds:0x1202a4
   11749:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:134
    ptrVal=ptr[(mapTo>>22)];
   1174c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1174f:	c1 e8 16             	shr    eax,0x16
   11752:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11759:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1175c:	01 d0                	add    eax,edx
   1175e:	8b 00                	mov    eax,DWORD PTR [eax]
   11760:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:135
    if (ptrVal==0 && mapTo < kE820MemoryBytes)
   11763:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   11767:	0f 85 cb 00 00 00    	jne    11838 <kMapPage+0x101>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:135 (discriminator 1)
   1176d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   11770:	bb 00 00 00 00       	mov    ebx,0x0
   11775:	a1 48 00 12 00       	mov    eax,ds:0x120048
   1177a:	8b 15 4c 00 12 00    	mov    edx,DWORD PTR ds:0x12004c
   11780:	39 d3                	cmp    ebx,edx
   11782:	0f 87 b0 00 00 00    	ja     11838 <kMapPage+0x101>
   11788:	39 d3                	cmp    ebx,edx
   1178a:	72 08                	jb     11794 <kMapPage+0x5d>
   1178c:	39 c1                	cmp    ecx,eax
   1178e:	0f 83 a4 00 00 00    	jae    11838 <kMapPage+0x101>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:137
    {
        ptrT=(uint32_t*)0x20000000;
   11794:	c7 45 ec 00 00 00 20 	mov    DWORD PTR [ebp-0x14],0x20000000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:138
        ptr[(mapTo>>22)]=0x20000063;
   1179b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1179e:	c1 e8 16             	shr    eax,0x16
   117a1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   117a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   117ab:	01 d0                	add    eax,edx
   117ad:	c7 00 63 00 00 20    	mov    DWORD PTR [eax],0x20000063
/home/yogi/src/os//chrisOS/src/init/kpaging.c:139
        ptrT[(mapTo&0x003FFFFF/4096)]=mapFrom | flags;
   117b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   117b6:	25 ff 03 00 00       	and    eax,0x3ff
   117bb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   117c2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   117c5:	01 c2                	add    edx,eax
   117c7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   117cb:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
   117ce:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:141
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   117d0:	a1 38 03 12 00       	mov    eax,ds:0x120338
   117d5:	83 e0 40             	and    eax,0x40
   117d8:	85 c0                	test   eax,eax
   117da:	0f 84 41 01 00 00    	je     11921 <kMapPage+0x1ea>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:142
            printk("kMapPage: Mapped 0x%08X via dir=0x%08X, page=0x%08X, to 0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[(mapTo&0x003FFFFF/4096)],ptrT[(mapTo&0x003FFFFF/4096)]);
   117e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   117e3:	25 ff 03 00 00       	and    eax,0x3ff
   117e8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   117ef:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   117f2:	01 d0                	add    eax,edx
   117f4:	8b 00                	mov    eax,DWORD PTR [eax]
   117f6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   117f9:	81 e2 ff 03 00 00    	and    edx,0x3ff
   117ff:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
   11806:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   11809:	01 d1                	add    ecx,edx
   1180b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1180e:	c1 ea 16             	shr    edx,0x16
   11811:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
   11818:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1181b:	01 da                	add    edx,ebx
   1181d:	83 ec 0c             	sub    esp,0xc
   11820:	50                   	push   eax
   11821:	51                   	push   ecx
   11822:	52                   	push   edx
   11823:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11826:	68 78 55 04 00       	push   0x45578
   1182b:	e8 87 58 01 00       	call   270b7 <printk>
   11830:	83 c4 20             	add    esp,0x20
/home/yogi/src/os//chrisOS/src/init/kpaging.c:141
    {
        ptrT=(uint32_t*)0x20000000;
        ptr[(mapTo>>22)]=0x20000063;
        ptrT[(mapTo&0x003FFFFF/4096)]=mapFrom | flags;
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11833:	e9 e9 00 00 00       	jmp    11921 <kMapPage+0x1ea>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:148
#endif
    }
    else
    {
        //ptrVal right now points to the pdir entry
        ptr=(uint32_t*)kKernelPageDir;
   11838:	a1 a4 02 12 00       	mov    eax,ds:0x1202a4
   1183d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:149
        if (ptr[(mapTo>>22)]==0)
   11840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11843:	c1 e8 16             	shr    eax,0x16
   11846:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   1184d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11850:	01 d0                	add    eax,edx
   11852:	8b 00                	mov    eax,DWORD PTR [eax]
   11854:	85 c0                	test   eax,eax
   11856:	75 29                	jne    11881 <kMapPage+0x14a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:150
            ptr[mapTo>>22]=(KERNEL_PAGE_TABLE_BASE_ADDRESS + ((mapTo&0x003FFFFF)/4096)) | 0x63;
   11858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1185b:	c1 e8 16             	shr    eax,0x16
   1185e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11865:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11868:	01 d0                	add    eax,edx
   1186a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1186d:	81 e2 ff ff 3f 00    	and    edx,0x3fffff
   11873:	c1 ea 0c             	shr    edx,0xc
   11876:	81 c2 00 b0 4b 00    	add    edx,0x4bb000
   1187c:	83 ca 63             	or     edx,0x63
   1187f:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:151
        ptrVal=ptr[mapTo>>22];
   11881:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11884:	c1 e8 16             	shr    eax,0x16
   11887:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   1188e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11891:	01 d0                	add    eax,edx
   11893:	8b 00                	mov    eax,DWORD PTR [eax]
   11895:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:152
        ptrVal=(ptrVal&0xFFFFF000);
   11898:	81 65 f0 00 f0 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:153
        ptrT=(uint32_t*)ptrVal;
   1189f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   118a2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:155
        //Now ptrVal will point to offset within page table
        ptrVal=(mapTo&0x003FFFFF)/4096;
   118a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   118a8:	25 ff ff 3f 00       	and    eax,0x3fffff
   118ad:	c1 e8 0c             	shr    eax,0xc
   118b0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:156
        ptrT[ptrVal]=mapFrom | flags;
   118b3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   118b6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   118bd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   118c0:	01 c2                	add    edx,eax
   118c2:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   118c6:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
   118c9:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:160
//                printk("ptrT=%X(%X)\n",&ptrT[ptrVal],ptrT[ptrVal]);
//                STOPHERE2
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   118cb:	a1 38 03 12 00       	mov    eax,ds:0x120338
   118d0:	83 e0 40             	and    eax,0x40
   118d3:	85 c0                	test   eax,eax
   118d5:	74 4a                	je     11921 <kMapPage+0x1ea>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:161
            printk("2) Mapped 0x%08X via dir=0x%08X, page=0x%08X, to 0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[ptrVal],ptrT[ptrVal]);
   118d7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   118da:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   118e1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   118e4:	01 d0                	add    eax,edx
   118e6:	8b 00                	mov    eax,DWORD PTR [eax]
   118e8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   118eb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
   118f2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   118f5:	01 d1                	add    ecx,edx
   118f7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   118fa:	c1 ea 16             	shr    edx,0x16
   118fd:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
   11904:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   11907:	01 da                	add    edx,ebx
   11909:	83 ec 0c             	sub    esp,0xc
   1190c:	50                   	push   eax
   1190d:	51                   	push   ecx
   1190e:	52                   	push   edx
   1190f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11912:	68 b8 55 04 00       	push   0x455b8
   11917:	e8 9b 57 01 00       	call   270b7 <printk>
   1191c:	83 c4 20             	add    esp,0x20
/home/yogi/src/os//chrisOS/src/init/kpaging.c:165
#endif
    }
//    if (ptrT[(src&0x003FFFFF/1000)]==0)
}
   1191f:	eb 00                	jmp    11921 <kMapPage+0x1ea>
   11921:	90                   	nop
   11922:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   11925:	c9                   	leave  
   11926:	c3                   	ret    

00011927 <kIsPageMapped>:
kIsPageMapped():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:168

bool kIsPageMapped(uintptr_t Address)
{
   11927:	55                   	push   ebp
   11928:	89 e5                	mov    ebp,esp
   1192a:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os//chrisOS/src/init/kpaging.c:169
    if (!kPagingGet4kPTEntryValue(Address))
   1192d:	83 ec 0c             	sub    esp,0xc
   11930:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11933:	e8 73 fb ff ff       	call   114ab <kPagingGet4kPTEntryValue>
   11938:	83 c4 10             	add    esp,0x10
   1193b:	85 c0                	test   eax,eax
   1193d:	75 07                	jne    11946 <kIsPageMapped+0x1f>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:170
        return false;
   1193f:	b8 00 00 00 00       	mov    eax,0x0
   11944:	eb 05                	jmp    1194b <kIsPageMapped+0x24>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:171
    return true;
   11946:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os//chrisOS/src/init/kpaging.c:172
}
   1194b:	c9                   	leave  
   1194c:	c3                   	ret    

0001194d <kUnMapPage>:
kUnMapPage():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:175

void kUnMapPage(uintptr_t mapTo, uint8_t newFlags)
{
   1194d:	55                   	push   ebp
   1194e:	89 e5                	mov    ebp,esp
   11950:	53                   	push   ebx
   11951:	83 ec 24             	sub    esp,0x24
   11954:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11957:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:179
    uint32_t *ptr;
    uint32_t ptrVal;
    uint32_t *ptrT;
    ptr=(uint32_t*)kKernelPageDir;
   1195a:	a1 a4 02 12 00       	mov    eax,ds:0x1202a4
   1195f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:180
    ptrVal=ptr[(mapTo>>22)];
   11962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11965:	c1 e8 16             	shr    eax,0x16
   11968:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   1196f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11972:	01 d0                	add    eax,edx
   11974:	8b 00                	mov    eax,DWORD PTR [eax]
   11976:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:181
    if (ptrVal==0 && mapTo < kE820MemoryBytes)
   11979:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1197d:	0f 85 ad 00 00 00    	jne    11a30 <kUnMapPage+0xe3>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:181 (discriminator 1)
   11983:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   11986:	bb 00 00 00 00       	mov    ebx,0x0
   1198b:	a1 48 00 12 00       	mov    eax,ds:0x120048
   11990:	8b 15 4c 00 12 00    	mov    edx,DWORD PTR ds:0x12004c
   11996:	39 d3                	cmp    ebx,edx
   11998:	0f 87 92 00 00 00    	ja     11a30 <kUnMapPage+0xe3>
   1199e:	39 d3                	cmp    ebx,edx
   119a0:	72 08                	jb     119aa <kUnMapPage+0x5d>
   119a2:	39 c1                	cmp    ecx,eax
   119a4:	0f 83 86 00 00 00    	jae    11a30 <kUnMapPage+0xe3>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:183
    {
        ptrT=(uint32_t*)0x20000000;
   119aa:	c7 45 ec 00 00 00 20 	mov    DWORD PTR [ebp-0x14],0x20000000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:184
        ptr[(mapTo>>22)]=0x20000063;
   119b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   119b4:	c1 e8 16             	shr    eax,0x16
   119b7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   119be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   119c1:	01 d0                	add    eax,edx
   119c3:	c7 00 63 00 00 20    	mov    DWORD PTR [eax],0x20000063
/home/yogi/src/os//chrisOS/src/init/kpaging.c:185
        ptrT[(mapTo&0x003FFFFF/4096)]=0 | newFlags;
   119c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   119cc:	25 ff 03 00 00       	and    eax,0x3ff
   119d1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   119d8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   119db:	01 c2                	add    edx,eax
   119dd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   119e1:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:187
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   119e3:	a1 38 03 12 00       	mov    eax,ds:0x120338
   119e8:	83 e0 40             	and    eax,0x40
   119eb:	85 c0                	test   eax,eax
   119ed:	0f 84 cd 00 00 00    	je     11ac0 <kUnMapPage+0x173>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:188
            printk("kMapPage: Unmapped 0x%08X via dir=0x%08X, page=0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[(mapTo&0x003FFFFF/4096)]);
   119f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   119f6:	25 ff 03 00 00       	and    eax,0x3ff
   119fb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11a02:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11a05:	01 c2                	add    edx,eax
   11a07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a0a:	c1 e8 16             	shr    eax,0x16
   11a0d:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
   11a14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11a17:	01 c8                	add    eax,ecx
   11a19:	52                   	push   edx
   11a1a:	50                   	push   eax
   11a1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11a1e:	68 f4 55 04 00       	push   0x455f4
   11a23:	e8 8f 56 01 00       	call   270b7 <printk>
   11a28:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:187
    {
        ptrT=(uint32_t*)0x20000000;
        ptr[(mapTo>>22)]=0x20000063;
        ptrT[(mapTo&0x003FFFFF/4096)]=0 | newFlags;
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11a2b:	e9 90 00 00 00       	jmp    11ac0 <kUnMapPage+0x173>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:194
#endif
    }
    else
    {
        //ptrVal right now points to the pdir entry
        ptr=(uint32_t*)kKernelPageDir;
   11a30:	a1 a4 02 12 00       	mov    eax,ds:0x1202a4
   11a35:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:195
        ptrVal=ptr[mapTo>>22];
   11a38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a3b:	c1 e8 16             	shr    eax,0x16
   11a3e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11a45:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11a48:	01 d0                	add    eax,edx
   11a4a:	8b 00                	mov    eax,DWORD PTR [eax]
   11a4c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:196
        ptrVal=(ptrVal&0xFFFFF000);
   11a4f:	81 65 f0 00 f0 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:197
        ptrT=(uint32_t*)ptrVal;
   11a56:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11a59:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:199
        //Now ptrVal will point to offset within page table
        ptrVal=(mapTo&0x003FFFFF)/4096;
   11a5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a5f:	25 ff ff 3f 00       	and    eax,0x3fffff
   11a64:	c1 e8 0c             	shr    eax,0xc
   11a67:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:200
        ptrT[ptrVal]=0 | newFlags;
   11a6a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11a6d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11a74:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11a77:	01 c2                	add    edx,eax
   11a79:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   11a7d:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:204
//                printk("ptrT=%X(%X)\n",&ptrT[ptrVal],ptrT[ptrVal]);
//                STOPHERE2
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11a7f:	a1 38 03 12 00       	mov    eax,ds:0x120338
   11a84:	83 e0 40             	and    eax,0x40
   11a87:	85 c0                	test   eax,eax
   11a89:	74 35                	je     11ac0 <kUnMapPage+0x173>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:205
            printk("2) Unmapped 0x%08X via dir=0x%08X, page=0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[ptrVal]);
   11a8b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11a8e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11a95:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11a98:	01 c2                	add    edx,eax
   11a9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a9d:	c1 e8 16             	shr    eax,0x16
   11aa0:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
   11aa7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11aaa:	01 c8                	add    eax,ecx
   11aac:	52                   	push   edx
   11aad:	50                   	push   eax
   11aae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11ab1:	68 2c 56 04 00       	push   0x4562c
   11ab6:	e8 fc 55 01 00       	call   270b7 <printk>
   11abb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:209
#endif
    }
//    if (ptrT[(src&0x003FFFFF/1000)]==0)
}
   11abe:	eb 00                	jmp    11ac0 <kUnMapPage+0x173>
   11ac0:	90                   	nop
   11ac1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   11ac4:	c9                   	leave  
   11ac5:	c3                   	ret    

00011ac6 <kSetPhysicalRangeRO>:
kSetPhysicalRangeRO():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:212

void kSetPhysicalRangeRO(uint32_t startAddy, uint32_t endAddy, bool readOnly)
{
   11ac6:	55                   	push   ebp
   11ac7:	89 e5                	mov    ebp,esp
   11ac9:	83 ec 18             	sub    esp,0x18
   11acc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11acf:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:214
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11ad2:	a1 38 03 12 00       	mov    eax,ds:0x120338
   11ad7:	83 e0 40             	and    eax,0x40
   11ada:	85 c0                	test   eax,eax
   11adc:	74 2a                	je     11b08 <kSetPhysicalRangeRO+0x42>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:215
            printk("kMakePhysicalRangeRO: Make 0x%08X(0x%08X)-0x%08X(0x%08X) r/o\n", startAddy, startAddy&0xFffff000, endAddy, endAddy&0xFFFFF000);
   11ade:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11ae1:	25 00 f0 ff ff       	and    eax,0xfffff000
   11ae6:	89 c2                	mov    edx,eax
   11ae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11aeb:	25 00 f0 ff ff       	and    eax,0xfffff000
   11af0:	83 ec 0c             	sub    esp,0xc
   11af3:	52                   	push   edx
   11af4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   11af7:	50                   	push   eax
   11af8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11afb:	68 5c 56 04 00       	push   0x4565c
   11b00:	e8 b2 55 01 00       	call   270b7 <printk>
   11b05:	83 c4 20             	add    esp,0x20
/home/yogi/src/os//chrisOS/src/init/kpaging.c:217
#endif
    kSetVirtualRangeRO((startAddy + KERNEL_PAGED_BASE_ADDRESS) & 0xFFFFF000, (endAddy + KERNEL_PAGED_BASE_ADDRESS) & 0xFFFFF000, readOnly);
   11b08:	0f b6 45 f4          	movzx  eax,BYTE PTR [ebp-0xc]
   11b0c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   11b0f:	81 ea 00 00 00 40    	sub    edx,0x40000000
   11b15:	89 d1                	mov    ecx,edx
   11b17:	81 e1 00 f0 ff ff    	and    ecx,0xfffff000
   11b1d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   11b20:	81 ea 00 00 00 40    	sub    edx,0x40000000
   11b26:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
   11b2c:	83 ec 04             	sub    esp,0x4
   11b2f:	50                   	push   eax
   11b30:	51                   	push   ecx
   11b31:	52                   	push   edx
   11b32:	e8 a5 fa ff ff       	call   115dc <kSetVirtualRangeRO>
   11b37:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:218
}
   11b3a:	90                   	nop
   11b3b:	c9                   	leave  
   11b3c:	c3                   	ret    

00011b3d <mmKernelSetPageInUseFlag>:
mmKernelSetPageInUseFlag():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:221

void mmKernelSetPageInUseFlag(uintptr_t address, bool inUse)
{
   11b3d:	55                   	push   ebp
   11b3e:	89 e5                	mov    ebp,esp
   11b40:	83 ec 28             	sub    esp,0x28
   11b43:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11b46:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:224
    uintptr_t* ptEntry;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11b49:	a1 38 03 12 00       	mov    eax,ds:0x120338
   11b4e:	83 e0 40             	and    eax,0x40
   11b51:	85 c0                	test   eax,eax
   11b53:	74 25                	je     11b7a <mmKernelSetPageInUseFlag+0x3d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:225
           printd(DEBUG_PAGING, "mmKernelSetPageInUseFlag: Marking page with address 0x%08X as %s\n", address, inUse?"in use":"not in use");
   11b55:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   11b59:	74 07                	je     11b62 <mmKernelSetPageInUseFlag+0x25>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:225 (discriminator 1)
   11b5b:	b8 9a 56 04 00       	mov    eax,0x4569a
   11b60:	eb 05                	jmp    11b67 <mmKernelSetPageInUseFlag+0x2a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:225 (discriminator 2)
   11b62:	b8 a1 56 04 00       	mov    eax,0x456a1
/home/yogi/src/os//chrisOS/src/init/kpaging.c:225 (discriminator 4)
   11b67:	50                   	push   eax
   11b68:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11b6b:	68 ac 56 04 00       	push   0x456ac
   11b70:	6a 40                	push   0x40
   11b72:	e8 60 55 01 00       	call   270d7 <printd>
   11b77:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:227
#endif
        ptEntry=(uintptr_t*)kPagingGet4kPTEntryAddress(address);
   11b7a:	83 ec 0c             	sub    esp,0xc
   11b7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11b80:	e8 f0 f8 ff ff       	call   11475 <kPagingGet4kPTEntryAddress>
   11b85:	83 c4 10             	add    esp,0x10
   11b88:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:228
        printd(DEBUG_PAGING,"mmKernelSetPageInUseFlag: PTE=0x%08X, Before PTE value=0x%08X\n",ptEntry,*ptEntry);
   11b8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11b8e:	8b 00                	mov    eax,DWORD PTR [eax]
   11b90:	50                   	push   eax
   11b91:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11b94:	68 f0 56 04 00       	push   0x456f0
   11b99:	6a 40                	push   0x40
   11b9b:	e8 37 55 01 00       	call   270d7 <printd>
   11ba0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:229
        if (inUse)
   11ba3:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   11ba7:	74 11                	je     11bba <mmKernelSetPageInUseFlag+0x7d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:230
            *ptEntry|=PAGING_IN_USE_FLAG_MASK;
   11ba9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11bac:	8b 00                	mov    eax,DWORD PTR [eax]
   11bae:	80 cc 08             	or     ah,0x8
   11bb1:	89 c2                	mov    edx,eax
   11bb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11bb6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:233
        else
            *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
}
   11bb8:	eb 0f                	jmp    11bc9 <mmKernelSetPageInUseFlag+0x8c>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:232
        ptEntry=(uintptr_t*)kPagingGet4kPTEntryAddress(address);
        printd(DEBUG_PAGING,"mmKernelSetPageInUseFlag: PTE=0x%08X, Before PTE value=0x%08X\n",ptEntry,*ptEntry);
        if (inUse)
            *ptEntry|=PAGING_IN_USE_FLAG_MASK;
        else
            *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
   11bba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11bbd:	8b 00                	mov    eax,DWORD PTR [eax]
   11bbf:	80 e4 f7             	and    ah,0xf7
   11bc2:	89 c2                	mov    edx,eax
   11bc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11bc7:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:233
}
   11bc9:	90                   	nop
   11bca:	c9                   	leave  
   11bcb:	c3                   	ret    

00011bcc <mmKernelSetPageRangeInUseFlag>:
mmKernelSetPageRangeInUseFlag():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:236

void mmKernelSetPageRangeInUseFlag(uintptr_t startAddress, uintptr_t endAddress, int pageSize, bool inUse)
{
   11bcc:	55                   	push   ebp
   11bcd:	89 e5                	mov    ebp,esp
   11bcf:	83 ec 28             	sub    esp,0x28
   11bd2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   11bd5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:237
    for (uintptr_t cnt=startAddress;cnt<endAddress;cnt+=pageSize)
   11bd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11bdb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   11bde:	eb 19                	jmp    11bf9 <mmKernelSetPageRangeInUseFlag+0x2d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:238 (discriminator 3)
        mmKernelSetPageInUseFlag(cnt,inUse);
   11be0:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   11be4:	83 ec 08             	sub    esp,0x8
   11be7:	50                   	push   eax
   11be8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11beb:	e8 4d ff ff ff       	call   11b3d <mmKernelSetPageInUseFlag>
   11bf0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:237 (discriminator 3)
            *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
}

void mmKernelSetPageRangeInUseFlag(uintptr_t startAddress, uintptr_t endAddress, int pageSize, bool inUse)
{
    for (uintptr_t cnt=startAddress;cnt<endAddress;cnt+=pageSize)
   11bf3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11bf6:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:237 (discriminator 1)
   11bf9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11bfc:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   11bff:	72 df                	jb     11be0 <mmKernelSetPageRangeInUseFlag+0x14>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:239
        mmKernelSetPageInUseFlag(cnt,inUse);
}
   11c01:	90                   	nop
   11c02:	c9                   	leave  
   11c03:	c3                   	ret    

00011c04 <mmUnusePageRange>:
mmUnusePageRange():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:242

void mmUnusePageRange()
{
   11c04:	55                   	push   ebp
   11c05:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/src/init/kpaging.c:244
    
   11c07:	90                   	nop
   11c08:	5d                   	pop    ebp
   11c09:	c3                   	ret    
   11c0a:	66 90                	xchg   ax,ax

00011c0c <strncmp>:
strncmp():
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
   11c0c:	55                   	push   ebp
   11c0d:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
   11c0f:	eb 4b                	jmp    11c5c <strncmp+0x50>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
   11c11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11c14:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   11c17:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11c1a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11c1d:	38 c2                	cmp    dl,al
   11c1f:	74 1e                	je     11c3f <strncmp+0x33>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
   11c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11c24:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   11c27:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11c2a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11c2d:	38 c2                	cmp    dl,al
   11c2f:	73 07                	jae    11c38 <strncmp+0x2c>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:16 (discriminator 1)
   11c31:	b8 ff ff ff ff       	mov    eax,0xffffffff
   11c36:	eb 2f                	jmp    11c67 <strncmp+0x5b>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:16 (discriminator 2)
   11c38:	b8 01 00 00 00       	mov    eax,0x1
   11c3d:	eb 28                	jmp    11c67 <strncmp+0x5b>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
   11c3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11c42:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11c45:	84 c0                	test   al,al
   11c47:	75 07                	jne    11c50 <strncmp+0x44>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:18
	    return 0;
   11c49:	b8 00 00 00 00       	mov    eax,0x0
   11c4e:	eb 17                	jmp    11c67 <strncmp+0x5b>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
   11c50:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   11c54:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
   11c58:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:14 (discriminator 1)
   11c5c:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   11c60:	75 af                	jne    11c11 <strncmp+0x5>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
   11c62:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:20
}
   11c67:	5d                   	pop    ebp
   11c68:	c3                   	ret    
   11c69:	66 90                	xchg   ax,ax
   11c6b:	90                   	nop

00011c6c <strncpy>:
strncpy():
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char * strncpy(char *s1, const char *s2, size_t n)
{
   11c6c:	55                   	push   ebp
   11c6d:	89 e5                	mov    ebp,esp
   11c6f:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:15
    char *s = s1;
   11c72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11c75:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
   11c78:	eb 1b                	jmp    11c95 <strncpy+0x29>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
   11c7a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   11c7d:	8d 50 01             	lea    edx,[eax+0x1]
   11c80:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   11c83:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   11c86:	8d 4a 01             	lea    ecx,[edx+0x1]
   11c89:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   11c8c:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   11c8f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:18
	--n;
   11c91:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char * strncpy(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
   11c95:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   11c99:	74 1c                	je     11cb7 <strncpy+0x4b>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:16 (discriminator 1)
   11c9b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11c9e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11ca1:	84 c0                	test   al,al
   11ca3:	75 d5                	jne    11c7a <strncpy+0xe>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
   11ca5:	eb 10                	jmp    11cb7 <strncpy+0x4b>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
   11ca7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   11caa:	8d 50 01             	lea    edx,[eax+0x1]
   11cad:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   11cb0:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:22
	--n;
   11cb3:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
   11cb7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   11cbb:	75 ea                	jne    11ca7 <strncpy+0x3b>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    return s1;
   11cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:25
}
   11cc0:	c9                   	leave  
   11cc1:	c3                   	ret    
   11cc2:	66 90                	xchg   ax,ax

00011cc4 <dumpregs>:
dumpregs():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:22

.globl dumpregs
.type dumpregs, @function
dumpregs:
.code32
        mov exceptionAX, eax
   11cc4:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:23
        mov exceptionBX, ebx
   11cc9:	89 1d b4 01 12 00    	mov    DWORD PTR ds:0x1201b4,ebx
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:24
        mov exceptionCX, ecx
   11ccf:	89 0d b8 01 12 00    	mov    DWORD PTR ds:0x1201b8,ecx
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:25
        mov exceptionDX, edx
   11cd5:	89 15 bc 01 12 00    	mov    DWORD PTR ds:0x1201bc,edx
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:26
        mov exceptionSI, esi
   11cdb:	89 35 c0 01 12 00    	mov    DWORD PTR ds:0x1201c0,esi
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:27
        mov exceptionDI, edi
   11ce1:	89 3d c4 01 12 00    	mov    DWORD PTR ds:0x1201c4,edi
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:28
        mov exceptionBP, eax
   11ce7:	a3 c8 01 12 00       	mov    ds:0x1201c8,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:29
        mov eax, cr0
   11cec:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:30
        mov exceptionCR0, eax
   11cef:	a3 cc 01 12 00       	mov    ds:0x1201cc,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:31
        mov eax, cr3
   11cf4:	0f 20 d8             	mov    eax,cr3
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:32
        mov exceptionCR3, eax
   11cf7:	a3 d0 01 12 00       	mov    ds:0x1201d0,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:33
        mov eax, cr4
   11cfc:	0f 20 e0             	mov    eax,cr4
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:34
        mov exceptionCR4, eax
   11cff:	a3 d4 01 12 00       	mov    ds:0x1201d4,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:35
        mov eax, exceptionAX
   11d04:	a1 b0 01 12 00       	mov    eax,ds:0x1201b0
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:36
        ret 
   11d09:	c3                   	ret    

00011d0a <storeGDT>:
storeGDT():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:42

.global storeGDT
.type storeGDT, @function
storeGDT:
.code32
    mov eax,[esp+4]
   11d0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:43
    sgdt [eax]
   11d0e:	0f 01 00             	sgdtd  [eax]
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:44
    ret
   11d11:	c3                   	ret    
   11d12:	66 90                	xchg   ax,ax

00011d14 <selectHDNum>:
selectHDNum():
/home/yogi/src/os/chrisOS/src/bishell.c:475
    uintptr_t lAddress=strtoul(params[0],0,16);
    printk("\tPD address=0x%08X, \n\tPD value=0x%08X, \n\tPT address=0x%08X, \n\tPT value=0x%08X\n\tPhysical Address=0x%08X\n",kPagingGet4kPDEntryAddress(lAddress),kPagingGet4kPDEntryValue(lAddress),kPagingGet4kPTEntryAddress(lAddress),kPagingGet4kPTEntryValue(lAddress),(kPagingGet4kPTEntryValue(lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF));
}

void HIGH_CODE_SECTION selectHDNum (char* cmdline)
{
   11d14:	55                   	push   ebp
   11d15:	89 e5                	mov    ebp,esp
   11d17:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:477
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int lTemp=0;
   11d1d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:478
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   11d24:	83 ec 04             	sub    esp,0x4
   11d27:	68 00 14 00 00       	push   0x1400
   11d2c:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11d32:	50                   	push   eax
   11d33:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11d36:	e8 0f 07 00 00       	call   1244a <parseParamsShell>
   11d3b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:480

    lTemp =strtol(params[0],0,10);
   11d3e:	83 ec 04             	sub    esp,0x4
   11d41:	6a 0a                	push   0xa
   11d43:	6a 00                	push   0x0
   11d45:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11d4b:	50                   	push   eax
   11d4c:	e8 e7 56 01 00       	call   27438 <strtol>
   11d51:	83 c4 10             	add    esp,0x10
   11d54:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:482
 
    if (lTemp<0 || lTemp>kATADeviceInfoCount)
   11d57:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11d5b:	78 0a                	js     11d67 <selectHDNum+0x53>
/home/yogi/src/os/chrisOS/src/bishell.c:482 (discriminator 1)
   11d5d:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   11d62:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   11d65:	7e 1b                	jle    11d82 <selectHDNum+0x6e>
/home/yogi/src/os/chrisOS/src/bishell.c:483
        printk("Error, selected disk number (%u) is not valid.  It must be >=0 and <= %u\n",lTemp,kATADeviceInfoCount);
   11d67:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   11d6c:	83 ec 04             	sub    esp,0x4
   11d6f:	50                   	push   eax
   11d70:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11d73:	68 40 58 04 00       	push   0x45840
   11d78:	e8 3a 53 01 00       	call   270b7 <printk>
   11d7d:	83 c4 10             	add    esp,0x10
   11d80:	eb 08                	jmp    11d8a <selectHDNum+0x76>
/home/yogi/src/os/chrisOS/src/bishell.c:485
    else
        kSelectedDiskNum=lTemp;
   11d82:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11d85:	a3 08 04 12 00       	mov    ds:0x120408,eax
/home/yogi/src/os/chrisOS/src/bishell.c:486
    parseMBR(&kATADeviceInfo[kSelectedDiskNum],&mbr);
   11d8a:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   11d90:	a1 08 04 12 00       	mov    eax,ds:0x120408
   11d95:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   11d9b:	01 d0                	add    eax,edx
   11d9d:	83 ec 08             	sub    esp,0x8
   11da0:	68 40 5f 09 00       	push   0x95f40
   11da5:	50                   	push   eax
   11da6:	e8 d8 f6 00 00       	call   21483 <parseMBR>
   11dab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:487
    printk("Disk %u selected\n",kSelectedDiskNum);
   11dae:	a1 08 04 12 00       	mov    eax,ds:0x120408
   11db3:	83 ec 08             	sub    esp,0x8
   11db6:	50                   	push   eax
   11db7:	68 8a 58 04 00       	push   0x4588a
   11dbc:	e8 f6 52 01 00       	call   270b7 <printk>
   11dc1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:488
}
   11dc4:	90                   	nop
   11dc5:	c9                   	leave  
   11dc6:	c3                   	ret    

00011dc7 <selectPart>:
selectPart():
/home/yogi/src/os/chrisOS/src/bishell.c:517
    parseMBR(&kATADeviceInfo[driveNo],&mbr);
    printMBR(&mbr);
}

void HIGH_CODE_SECTION selectPart(char* cmdline)
{
   11dc7:	55                   	push   ebp
   11dc8:	89 e5                	mov    ebp,esp
   11dca:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:519
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int lTemp=-1;
   11dd0:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/bishell.c:520
    if (kSelectedDiskNum==-1)
   11dd7:	a1 08 04 12 00       	mov    eax,ds:0x120408
   11ddc:	83 f8 ff             	cmp    eax,0xffffffff
   11ddf:	75 10                	jne    11df1 <selectPart+0x2a>
/home/yogi/src/os/chrisOS/src/bishell.c:522
    {
        printk("You must select a disk with 'disk' before selecting a partition");
   11de1:	83 ec 0c             	sub    esp,0xc
   11de4:	68 9c 58 04 00       	push   0x4589c
   11de9:	e8 c9 52 01 00       	call   270b7 <printk>
   11dee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:524
    }
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   11df1:	83 ec 04             	sub    esp,0x4
   11df4:	68 00 14 00 00       	push   0x1400
   11df9:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11dff:	50                   	push   eax
   11e00:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11e03:	e8 42 06 00 00       	call   1244a <parseParamsShell>
   11e08:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:526

    lTemp =strtol(params[0],0,10);
   11e0b:	83 ec 04             	sub    esp,0x4
   11e0e:	6a 0a                	push   0xa
   11e10:	6a 00                	push   0x0
   11e12:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11e18:	50                   	push   eax
   11e19:	e8 1a 56 01 00       	call   27438 <strtol>
   11e1e:	83 c4 10             	add    esp,0x10
   11e21:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:528
    //printk("parameter 1=%u\n",lTemp);
    if (lTemp<0 || lTemp>mbr.partCount)
   11e24:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11e28:	78 0a                	js     11e34 <selectPart+0x6d>
/home/yogi/src/os/chrisOS/src/bishell.c:528 (discriminator 1)
   11e2a:	a1 40 63 09 00       	mov    eax,ds:0x96340
   11e2f:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   11e32:	7d 1b                	jge    11e4f <selectPart+0x88>
/home/yogi/src/os/chrisOS/src/bishell.c:530
    {
        printk("Error, selected partition number (%u) is not valid.  It must be >=1 and <=%u\n",lTemp,mbr.partCount);
   11e34:	a1 40 63 09 00       	mov    eax,ds:0x96340
   11e39:	83 ec 04             	sub    esp,0x4
   11e3c:	50                   	push   eax
   11e3d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11e40:	68 dc 58 04 00       	push   0x458dc
   11e45:	e8 6d 52 01 00       	call   270b7 <printk>
   11e4a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:531
        return;
   11e4d:	eb 7d                	jmp    11ecc <selectPart+0x105>
/home/yogi/src/os/chrisOS/src/bishell.c:533
    }
    if (mbr.parts[lTemp].partTotalSectors==0)
   11e4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11e52:	c1 e0 04             	shl    eax,0x4
   11e55:	05 40 5f 09 00       	add    eax,0x95f40
   11e5a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   11e5d:	85 c0                	test   eax,eax
   11e5f:	75 25                	jne    11e86 <selectPart+0xbf>
/home/yogi/src/os/chrisOS/src/bishell.c:535
    {
        printk("Error, selected partition (number %u) is not a valid partition as its total sector count is 0.",lTemp);
   11e61:	83 ec 08             	sub    esp,0x8
   11e64:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11e67:	68 2c 59 04 00       	push   0x4592c
   11e6c:	e8 46 52 01 00       	call   270b7 <printk>
   11e71:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:536
        printMBR(&mbr);   
   11e74:	83 ec 0c             	sub    esp,0xc
   11e77:	68 40 5f 09 00       	push   0x95f40
   11e7c:	e8 27 f5 00 00       	call   213a8 <printMBR>
   11e81:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:537
        return;
   11e84:	eb 46                	jmp    11ecc <selectPart+0x105>
/home/yogi/src/os/chrisOS/src/bishell.c:539
    }
    kSelectedPartNum = lTemp;
   11e86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11e89:	a3 0c 04 12 00       	mov    ds:0x12040c,eax
/home/yogi/src/os/chrisOS/src/bishell.c:540
    ahciSetCurrentPart(mbr.parts[lTemp]);
   11e8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11e91:	c1 e0 04             	shl    eax,0x4
   11e94:	05 40 5f 09 00       	add    eax,0x95f40
   11e99:	83 ec 10             	sub    esp,0x10
   11e9c:	89 e2                	mov    edx,esp
   11e9e:	8b 08                	mov    ecx,DWORD PTR [eax]
   11ea0:	89 0a                	mov    DWORD PTR [edx],ecx
   11ea2:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   11ea5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   11ea8:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   11eab:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   11eae:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   11eb1:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
   11eb4:	e8 b8 30 00 00       	call   14f71 <ahciSetCurrentPart>
   11eb9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:542
    //printk("Partition %u selected\n",kSelectedPartNum);
    attach("");
   11ebc:	83 ec 0c             	sub    esp,0xc
   11ebf:	68 8b 59 04 00       	push   0x4598b
   11ec4:	e8 1a 01 00 00       	call   11fe3 <attach>
   11ec9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:543
}
   11ecc:	c9                   	leave  
   11ecd:	c3                   	ret    

00011ece <listParts>:
listParts():
/home/yogi/src/os/chrisOS/src/bishell.c:491
    parseMBR(&kATADeviceInfo[kSelectedDiskNum],&mbr);
    printk("Disk %u selected\n",kSelectedDiskNum);
}

void HIGH_CODE_SECTION listParts(char* cmdline)
{
   11ece:	55                   	push   ebp
   11ecf:	89 e5                	mov    ebp,esp
   11ed1:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:493
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   11ed7:	83 ec 04             	sub    esp,0x4
   11eda:	68 00 14 00 00       	push   0x1400
   11edf:	8d 85 f0 eb ff ff    	lea    eax,[ebp-0x1410]
   11ee5:	50                   	push   eax
   11ee6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11ee9:	e8 5c 05 00 00       	call   1244a <parseParamsShell>
   11eee:	83 c4 10             	add    esp,0x10
   11ef1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:494
    int driveNo=-1;
   11ef4:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/bishell.c:496

    if (paramCount>0)
   11efb:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   11eff:	7e 1b                	jle    11f1c <listParts+0x4e>
/home/yogi/src/os/chrisOS/src/bishell.c:497
        driveNo=strtol(params[0],0,10);
   11f01:	83 ec 04             	sub    esp,0x4
   11f04:	6a 0a                	push   0xa
   11f06:	6a 00                	push   0x0
   11f08:	8d 85 f0 eb ff ff    	lea    eax,[ebp-0x1410]
   11f0e:	50                   	push   eax
   11f0f:	e8 24 55 01 00       	call   27438 <strtol>
   11f14:	83 c4 10             	add    esp,0x10
   11f17:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   11f1a:	eb 08                	jmp    11f24 <listParts+0x56>
/home/yogi/src/os/chrisOS/src/bishell.c:499
    else
        driveNo=kSelectedDiskNum;
   11f1c:	a1 08 04 12 00       	mov    eax,ds:0x120408
   11f21:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:500
    if (driveNo<0 || driveNo>kATADeviceInfoCount)
   11f24:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11f28:	78 0a                	js     11f34 <listParts+0x66>
/home/yogi/src/os/chrisOS/src/bishell.c:500 (discriminator 1)
   11f2a:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   11f2f:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   11f32:	7e 1e                	jle    11f52 <listParts+0x84>
/home/yogi/src/os/chrisOS/src/bishell.c:502
    {
        printk("Error, selected disk number (%u) is not valid.  It must be >=0 and <= %u\n",driveNo,kATADeviceInfoCount);
   11f34:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   11f39:	83 ec 04             	sub    esp,0x4
   11f3c:	50                   	push   eax
   11f3d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11f40:	68 40 58 04 00       	push   0x45840
   11f45:	e8 6d 51 01 00       	call   270b7 <printk>
   11f4a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:503
        return;
   11f4d:	e9 8f 00 00 00       	jmp    11fe1 <listParts+0x113>
/home/yogi/src/os/chrisOS/src/bishell.c:505
    }
    printk("Partitions for disk # %u\n",driveNo);
   11f52:	83 ec 08             	sub    esp,0x8
   11f55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11f58:	68 8c 59 04 00       	push   0x4598c
   11f5d:	e8 55 51 01 00       	call   270b7 <printk>
   11f62:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:506
    port=(HBA_PORT*)kATADeviceInfo[driveNo].ioPort;
   11f65:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   11f6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11f6e:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   11f74:	01 d0                	add    eax,edx
   11f76:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   11f7c:	a3 5c 63 09 00       	mov    ds:0x9635c,eax
/home/yogi/src/os/chrisOS/src/bishell.c:507
    if (kATADeviceInfo[driveNo].ATADeviceType != ATA_DEVICE_TYPE_SATA_HD)
   11f81:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   11f87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11f8a:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   11f90:	01 d0                	add    eax,edx
   11f92:	8b 80 52 02 00 00    	mov    eax,DWORD PTR [eax+0x252]
   11f98:	83 f8 02             	cmp    eax,0x2
   11f9b:	74 12                	je     11faf <listParts+0xe1>
/home/yogi/src/os/chrisOS/src/bishell.c:509
    {
        printk("Invalid device type.  Only SATA disks can be listed at the moment\n");
   11f9d:	83 ec 0c             	sub    esp,0xc
   11fa0:	68 a8 59 04 00       	push   0x459a8
   11fa5:	e8 0d 51 01 00       	call   270b7 <printk>
   11faa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:510
        return;
   11fad:	eb 32                	jmp    11fe1 <listParts+0x113>
/home/yogi/src/os/chrisOS/src/bishell.c:512
    }
    parseMBR(&kATADeviceInfo[driveNo],&mbr);
   11faf:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   11fb5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11fb8:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   11fbe:	01 d0                	add    eax,edx
   11fc0:	83 ec 08             	sub    esp,0x8
   11fc3:	68 40 5f 09 00       	push   0x95f40
   11fc8:	50                   	push   eax
   11fc9:	e8 b5 f4 00 00       	call   21483 <parseMBR>
   11fce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:513
    printMBR(&mbr);
   11fd1:	83 ec 0c             	sub    esp,0xc
   11fd4:	68 40 5f 09 00       	push   0x95f40
   11fd9:	e8 ca f3 00 00       	call   213a8 <printMBR>
   11fde:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:514
}
   11fe1:	c9                   	leave  
   11fe2:	c3                   	ret    

00011fe3 <attach>:
attach():
/home/yogi/src/os/chrisOS/src/bishell.c:546
    //printk("Partition %u selected\n",kSelectedPartNum);
    attach("");
}

void HIGH_CODE_SECTION attach(char* cmdline)
{
   11fe3:	55                   	push   ebp
   11fe4:	89 e5                	mov    ebp,esp
   11fe6:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:548
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   11fec:	83 ec 04             	sub    esp,0x4
   11fef:	68 00 14 00 00       	push   0x1400
   11ff4:	8d 85 f0 eb ff ff    	lea    eax,[ebp-0x1410]
   11ffa:	50                   	push   eax
   11ffb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11ffe:	e8 47 04 00 00       	call   1244a <parseParamsShell>
   12003:	83 c4 10             	add    esp,0x10
   12006:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:550

    if (kSelectedDiskNum < 0 || kSelectedPartNum < 0)
   12009:	a1 08 04 12 00       	mov    eax,ds:0x120408
   1200e:	85 c0                	test   eax,eax
   12010:	78 09                	js     1201b <attach+0x38>
/home/yogi/src/os/chrisOS/src/bishell.c:550 (discriminator 1)
   12012:	a1 0c 04 12 00       	mov    eax,ds:0x12040c
   12017:	85 c0                	test   eax,eax
   12019:	79 1d                	jns    12038 <attach+0x55>
/home/yogi/src/os/chrisOS/src/bishell.c:552
    {
        printk("Must first select a disk (%u) and a partition (%u) using 'selectpart'",kSelectedDiskNum,kSelectedPartNum);
   1201b:	8b 15 0c 04 12 00    	mov    edx,DWORD PTR ds:0x12040c
   12021:	a1 08 04 12 00       	mov    eax,ds:0x120408
   12026:	83 ec 04             	sub    esp,0x4
   12029:	52                   	push   edx
   1202a:	50                   	push   eax
   1202b:	68 ec 59 04 00       	push   0x459ec
   12030:	e8 82 50 01 00       	call   270b7 <printk>
   12035:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:554
    }
    strcpy(selectedDir,"/");
   12038:	83 ec 08             	sub    esp,0x8
   1203b:	68 32 5a 04 00       	push   0x45a32
   12040:	68 c0 b4 08 00       	push   0x8b4c0
   12045:	e8 ce 51 01 00       	call   27218 <strcpy>
   1204a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:555
    ahciSetCurrentDisk((HBA_PORT*)kATADeviceInfo[kSelectedDiskNum].ioPort);
   1204d:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   12053:	a1 08 04 12 00       	mov    eax,ds:0x120408
   12058:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   1205e:	01 d0                	add    eax,edx
   12060:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   12066:	83 ec 0c             	sub    esp,0xc
   12069:	50                   	push   eax
   1206a:	e8 f4 2e 00 00       	call   14f63 <ahciSetCurrentDisk>
   1206f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:556
    int lRetVal=fl_attach_media((fn_diskio_read)ahciBlockingRead28, (fn_diskio_write)ahciBlockingWrite28);
   12072:	83 ec 08             	sub    esp,0x8
   12075:	68 a2 52 01 00       	push   0x152a2
   1207a:	68 ce 4f 01 00       	push   0x14fce
   1207f:	e8 ac b2 00 00       	call   1d330 <fl_attach_media>
   12084:	83 c4 10             	add    esp,0x10
   12087:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:557
    if (lRetVal!=0)
   1208a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1208e:	74 1f                	je     120af <attach+0xcc>
/home/yogi/src/os/chrisOS/src/bishell.c:559
    {
        printk("Error attaching to disk %u, partition %u.  Error number %u",kSelectedDiskNum,kSelectedPartNum,lRetVal);
   12090:	8b 15 0c 04 12 00    	mov    edx,DWORD PTR ds:0x12040c
   12096:	a1 08 04 12 00       	mov    eax,ds:0x120408
   1209b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1209e:	52                   	push   edx
   1209f:	50                   	push   eax
   120a0:	68 34 5a 04 00       	push   0x45a34
   120a5:	e8 0d 50 01 00       	call   270b7 <printk>
   120aa:	83 c4 10             	add    esp,0x10
   120ad:	eb 1d                	jmp    120cc <attach+0xe9>
/home/yogi/src/os/chrisOS/src/bishell.c:562
        return;
    }
    printk("Attached to disk %u, partition %u.\n",kSelectedDiskNum,kSelectedPartNum);
   120af:	8b 15 0c 04 12 00    	mov    edx,DWORD PTR ds:0x12040c
   120b5:	a1 08 04 12 00       	mov    eax,ds:0x120408
   120ba:	83 ec 04             	sub    esp,0x4
   120bd:	52                   	push   edx
   120be:	50                   	push   eax
   120bf:	68 70 5a 04 00       	push   0x45a70
   120c4:	e8 ee 4f 01 00       	call   270b7 <printk>
   120c9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:565
    
    //fl_listdirectory(selectedDir);
}
   120cc:	c9                   	leave  
   120cd:	c3                   	ret    

000120ce <listDir>:
listDir():
/home/yogi/src/os/chrisOS/src/bishell.c:568

void HIGH_CODE_SECTION listDir(char* cmdline)
{
   120ce:	55                   	push   ebp
   120cf:	89 e5                	mov    ebp,esp
   120d1:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:570
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   120d7:	83 ec 04             	sub    esp,0x4
   120da:	68 00 14 00 00       	push   0x1400
   120df:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   120e5:	50                   	push   eax
   120e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   120e9:	e8 5c 03 00 00       	call   1244a <parseParamsShell>
   120ee:	83 c4 10             	add    esp,0x10
   120f1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:574
    
    //printk("Kernel Debug: Listing of directory %s + %s\n",params[0],params[1]);
    
    fl_listdirectory(params[0]);
   120f4:	83 ec 0c             	sub    esp,0xc
   120f7:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   120fd:	50                   	push   eax
   120fe:	e8 0d c1 00 00       	call   1e210 <fl_listdirectory>
   12103:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:575
}
   12106:	90                   	nop
   12107:	c9                   	leave  
   12108:	c3                   	ret    

00012109 <execProgram>:
execProgram():
/home/yogi/src/os/chrisOS/src/bishell.c:578

void HIGH_CODE_SECTION execProgram(char* cmdline)
{
   12109:	55                   	push   ebp
   1210a:	89 e5                	mov    ebp,esp
   1210c:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:580
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   12112:	83 ec 04             	sub    esp,0x4
   12115:	68 00 14 00 00       	push   0x1400
   1211a:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   12120:	50                   	push   eax
   12121:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12124:	e8 21 03 00 00       	call   1244a <parseParamsShell>
   12129:	83 c4 10             	add    esp,0x10
   1212c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:583

    
    strcpy(sExecutingProgram,params[0]+1);
   1212f:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   12135:	83 c0 01             	add    eax,0x1
   12138:	83 ec 08             	sub    esp,0x8
   1213b:	50                   	push   eax
   1213c:	68 40 b4 08 00       	push   0x8b440
   12141:	e8 d2 50 01 00       	call   27218 <strcpy>
   12146:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:586
    //printk("execProgram: param count = %u\n",paramCount);

    lTemp=buildargv(cmdline);
   12149:	83 ec 0c             	sub    esp,0xc
   1214c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1214f:	e8 40 04 00 00       	call   12594 <buildargv>
   12154:	83 c4 10             	add    esp,0x10
   12157:	a3 20 b4 08 00       	mov    ds:0x8b420,eax
/home/yogi/src/os/chrisOS/src/bishell.c:593

//    printk("listing parameters:\n");
//    for (int cnt=0;cnt<paramCount;cnt++)
//        printk("%u = '%s'\n",cnt,lTemp[cnt]);
   
    exec (params[0],paramCount,lTemp);
   1215c:	a1 20 b4 08 00       	mov    eax,ds:0x8b420
   12161:	83 ec 04             	sub    esp,0x4
   12164:	50                   	push   eax
   12165:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   12168:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   1216e:	50                   	push   eax
   1216f:	e8 89 49 01 00       	call   26afd <exec>
   12174:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:594
    strcpy(sExecutingProgram,sbiShellProgramName);
   12177:	83 ec 08             	sub    esp,0x8
   1217a:	68 c0 89 02 00       	push   0x289c0
   1217f:	68 40 b4 08 00       	push   0x8b440
   12184:	e8 8f 50 01 00       	call   27218 <strcpy>
   12189:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:595
}
   1218c:	90                   	nop
   1218d:	c9                   	leave  
   1218e:	c3                   	ret    

0001218f <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   1218f:	55                   	push   ebp
   12190:	89 e5                	mov    ebp,esp
   12192:	83 ec 08             	sub    esp,0x8
   12195:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12198:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1219b:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   1219f:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   121a2:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   121a6:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   121aa:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   121ab:	90                   	nop
   121ac:	c9                   	leave  
   121ad:	c3                   	ret    

000121ae <outw>:
outw():
/home/yogi/src/os/chrisOS/include/io.h:27

static __inline void outw(unsigned short __port, unsigned short __val)
{
   121ae:	55                   	push   ebp
   121af:	89 e5                	mov    ebp,esp
   121b1:	83 ec 08             	sub    esp,0x8
   121b4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   121b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   121ba:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   121be:	66 89 45 f8          	mov    WORD PTR [ebp-0x8],ax
/home/yogi/src/os/chrisOS/include/io.h:28
	__asm__ volatile ("outw %1, %0" : : "a" (__val), "dN" (__port));
   121c2:	0f b7 45 f8          	movzx  eax,WORD PTR [ebp-0x8]
   121c6:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   121ca:	66 ef                	out    dx,ax
/home/yogi/src/os/chrisOS/include/io.h:29
}
   121cc:	90                   	nop
   121cd:	c9                   	leave  
   121ce:	c3                   	ret    

000121cf <outl>:
outl():
/home/yogi/src/os/chrisOS/include/io.h:32

static __inline void outl(unsigned short __port, unsigned int __val)
{
   121cf:	55                   	push   ebp
   121d0:	89 e5                	mov    ebp,esp
   121d2:	83 ec 04             	sub    esp,0x4
   121d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   121d8:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/include/io.h:33
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
   121dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   121df:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   121e3:	ef                   	out    dx,eax
/home/yogi/src/os/chrisOS/include/io.h:34
}
   121e4:	90                   	nop
   121e5:	c9                   	leave  
   121e6:	c3                   	ret    

000121e7 <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37

static __inline unsigned char inb(unsigned short __port)
{
   121e7:	55                   	push   ebp
   121e8:	89 e5                	mov    ebp,esp
   121ea:	83 ec 14             	sub    esp,0x14
   121ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   121f0:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   121f4:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   121f8:	89 c2                	mov    edx,eax
   121fa:	ec                   	in     al,dx
   121fb:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   121fe:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   12202:	c9                   	leave  
   12203:	c3                   	ret    

00012204 <inw>:
inw():
/home/yogi/src/os/chrisOS/include/io.h:44

static __inline unsigned short inw(unsigned short __port)
{
   12204:	55                   	push   ebp
   12205:	89 e5                	mov    ebp,esp
   12207:	83 ec 14             	sub    esp,0x14
   1220a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1220d:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:46
	unsigned short __val;
	__asm__ volatile ("inw %0, %1" : "=a" (__val) : "dN" (__port));
   12211:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   12215:	89 c2                	mov    edx,eax
   12217:	66 ed                	in     ax,dx
   12219:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/include/io.h:47
	return __val;
   1221d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/src/os/chrisOS/include/io.h:48
}
   12221:	c9                   	leave  
   12222:	c3                   	ret    

00012223 <inl>:
inl():
/home/yogi/src/os/chrisOS/include/io.h:51

static __inline unsigned int inl(unsigned short __port)
{
   12223:	55                   	push   ebp
   12224:	89 e5                	mov    ebp,esp
   12226:	83 ec 14             	sub    esp,0x14
   12229:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1222c:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:53
	unsigned int __val;
	__asm__ volatile ("ind %0, %1" : "=a" (__val) : "dN" (__port));
   12230:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   12234:	89 c2                	mov    edx,eax
   12236:	ed                   	in     eax,dx
   12237:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/include/io.h:54
	return __val;
   1223a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/include/io.h:55
}
   1223d:	c9                   	leave  
   1223e:	c3                   	ret    

0001223f <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   1223f:	55                   	push   ebp
   12240:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   12242:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12245:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   1224c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1224f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   12252:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12255:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:51
}
   12257:	90                   	nop
   12258:	5d                   	pop    ebp
   12259:	c3                   	ret    

0001225a <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   1225a:	55                   	push   ebp
   1225b:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   1225d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12260:	8b 00                	mov    eax,DWORD PTR [eax]
   12262:	85 c0                	test   eax,eax
   12264:	75 0d                	jne    12273 <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   12266:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12269:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1226c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1226f:	89 10                	mov    DWORD PTR [eax],edx
   12271:	eb 0e                	jmp    12281 <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   12273:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12276:	8b 00                	mov    eax,DWORD PTR [eax]
   12278:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1227b:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   1227e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   12281:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12284:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   12287:	85 c0                	test   eax,eax
   12289:	75 0d                	jne    12298 <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   1228b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1228e:	8b 10                	mov    edx,DWORD PTR [eax]
   12290:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12293:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   12296:	eb 0d                	jmp    122a5 <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   12298:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1229b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1229e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   122a1:	8b 12                	mov    edx,DWORD PTR [edx]
   122a3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
}
   122a5:	90                   	nop
   122a6:	5d                   	pop    ebp
   122a7:	c3                   	ret    

000122a8 <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   122a8:	55                   	push   ebp
   122a9:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   122ab:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   122ae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   122b1:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   122b3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122b6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   122b9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   122bc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   122bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   122c5:	85 c0                	test   eax,eax
   122c7:	75 0b                	jne    122d4 <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   122c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   122cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   122cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   122d2:	eb 0b                	jmp    122df <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   122d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   122da:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   122dd:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   122df:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122e2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   122e5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:86
}
   122e8:	90                   	nop
   122e9:	5d                   	pop    ebp
   122ea:	c3                   	ret    

000122eb <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   122eb:	55                   	push   ebp
   122ec:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   122ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122f1:	8b 10                	mov    edx,DWORD PTR [eax]
   122f3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   122f6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   122f8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   122fb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   122fe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   12301:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12304:	8b 00                	mov    eax,DWORD PTR [eax]
   12306:	85 c0                	test   eax,eax
   12308:	75 0a                	jne    12314 <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   1230a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1230d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   12310:	89 10                	mov    DWORD PTR [eax],edx
   12312:	eb 0b                	jmp    1231f <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   12314:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12317:	8b 00                	mov    eax,DWORD PTR [eax]
   12319:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1231c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   1231f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12322:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   12325:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:103
}
   12327:	90                   	nop
   12328:	5d                   	pop    ebp
   12329:	c3                   	ret    

0001232a <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   1232a:	55                   	push   ebp
   1232b:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   1232d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12330:	8b 00                	mov    eax,DWORD PTR [eax]
   12332:	85 c0                	test   eax,eax
   12334:	75 26                	jne    1235c <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   12336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12339:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1233c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   1233e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12341:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   12344:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   12347:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1234a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   12350:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12353:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   1235a:	eb 14                	jmp    12370 <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   1235c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1235f:	8b 00                	mov    eax,DWORD PTR [eax]
   12361:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   12364:	50                   	push   eax
   12365:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12368:	e8 7e ff ff ff       	call   122eb <fat_list_insert_before>
   1236d:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
}
   12370:	90                   	nop
   12371:	c9                   	leave  
   12372:	c3                   	ret    

00012373 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   12373:	55                   	push   ebp
   12374:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   12376:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12379:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1237c:	85 c0                	test   eax,eax
   1237e:	75 10                	jne    12390 <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   12380:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   12383:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12386:	e8 9f ff ff ff       	call   1232a <fat_list_insert_first>
   1238b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   1238e:	eb 15                	jmp    123a5 <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   12390:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12393:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   12396:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   12399:	50                   	push   eax
   1239a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1239d:	e8 06 ff ff ff       	call   122a8 <fat_list_insert_after>
   123a2:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
}
   123a5:	90                   	nop
   123a6:	c9                   	leave  
   123a7:	c3                   	ret    

000123a8 <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   123a8:	55                   	push   ebp
   123a9:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   123ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   123ae:	8b 00                	mov    eax,DWORD PTR [eax]
   123b0:	85 c0                	test   eax,eax
   123b2:	0f 94 c0             	sete   al
   123b5:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:143
}
   123b8:	5d                   	pop    ebp
   123b9:	c3                   	ret    

000123ba <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   123ba:	55                   	push   ebp
   123bb:	89 e5                	mov    ebp,esp
   123bd:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   123c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   123c3:	8b 00                	mov    eax,DWORD PTR [eax]
   123c5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:154
    if (node)
   123c8:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   123cc:	74 0e                	je     123dc <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   123ce:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   123d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   123d4:	e8 81 fe ff ff       	call   1225a <fat_list_remove>
   123d9:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:157

    return node;
   123dc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:158
}
   123df:	c9                   	leave  
   123e0:	c3                   	ret    

000123e1 <findCommand>:
findCommand():
/home/yogi/src/os/chrisOS/src/bishell.c:37
char programParams[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
char** lTemp;


int HIGH_CODE_SECTION findCommand(char* command)
{
   123e1:	55                   	push   ebp
   123e2:	89 e5                	mov    ebp,esp
   123e4:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/bishell.c:41
    unsigned i;
    int ret;
    
    for(i = 0; i < NUMBER_OF_COMMANDS; i++)
   123e7:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   123ee:	eb 4d                	jmp    1243d <findCommand+0x5c>
/home/yogi/src/os/chrisOS/src/bishell.c:43
    {
        ret = strncmp(command, cmds[i].name,strlen(cmds[i].name));
   123f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   123f3:	c1 e0 04             	shl    eax,0x4
   123f6:	05 00 88 02 00       	add    eax,0x28800
   123fb:	8b 00                	mov    eax,DWORD PTR [eax]
   123fd:	83 ec 0c             	sub    esp,0xc
   12400:	50                   	push   eax
   12401:	e8 82 4e 01 00       	call   27288 <strlen>
   12406:	83 c4 10             	add    esp,0x10
   12409:	89 c2                	mov    edx,eax
   1240b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1240e:	c1 e0 04             	shl    eax,0x4
   12411:	05 00 88 02 00       	add    eax,0x28800
   12416:	8b 00                	mov    eax,DWORD PTR [eax]
   12418:	83 ec 04             	sub    esp,0x4
   1241b:	52                   	push   edx
   1241c:	50                   	push   eax
   1241d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12420:	e8 e7 f7 ff ff       	call   11c0c <strncmp>
   12425:	83 c4 10             	add    esp,0x10
   12428:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:45
        //printk("findCommand compared %s and %s for %u, returned %u\n", command, cmds[i].name, strlen(cmds[i].name), ret);
        if(ret==0)
   1242b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1242f:	75 08                	jne    12439 <findCommand+0x58>
/home/yogi/src/os/chrisOS/src/bishell.c:48
        {
            //printk("findCommand returning %u", i+1);
            return i+1;
   12431:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12434:	83 c0 01             	add    eax,0x1
   12437:	eb 0f                	jmp    12448 <findCommand+0x67>
/home/yogi/src/os/chrisOS/src/bishell.c:41 (discriminator 2)
int HIGH_CODE_SECTION findCommand(char* command)
{
    unsigned i;
    int ret;
    
    for(i = 0; i < NUMBER_OF_COMMANDS; i++)
   12439:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:41 (discriminator 1)
   1243d:	83 7d f4 1a          	cmp    DWORD PTR [ebp-0xc],0x1a
   12441:	76 ad                	jbe    123f0 <findCommand+0xf>
/home/yogi/src/os/chrisOS/src/bishell.c:52
            //printk("findCommand returning %u", i+1);
            return i+1;
        }
    }
    //printk("findCommand returning -1");
            return -1;
   12443:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/bishell.c:53
}
   12448:	c9                   	leave  
   12449:	c3                   	ret    

0001244a <parseParamsShell>:
parseParamsShell():
/home/yogi/src/os/chrisOS/src/bishell.c:56

int HIGH_CODE_SECTION parseParamsShell(char* cmdLine, char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH], int size)
    {
   1244a:	55                   	push   ebp
   1244b:	89 e5                	mov    ebp,esp
   1244d:	53                   	push   ebx
   1244e:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/bishell.c:57
    int x=0,y=0;
   12451:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   12458:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:58
    int lRetVal=0,parsedChars=0;
   1245f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   12466:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:60
    
    memset(params,0, size);
   1246d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   12470:	83 ec 04             	sub    esp,0x4
   12473:	50                   	push   eax
   12474:	6a 00                	push   0x0
   12476:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   12479:	e8 af 2b 01 00       	call   2502d <memset>
   1247e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:62
    //printk("commandLine=%s\n",cmdLine);
    for (unsigned cnt=0;cnt<strlen(cmdLine);cnt++)
   12481:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   12488:	e9 c9 00 00 00       	jmp    12556 <parseParamsShell+0x10c>
/home/yogi/src/os/chrisOS/src/bishell.c:65
    {
        //printk("c=%c\n", cmdLine[cnt]);
        if ( (cmdLine[cnt]==' ' || cmdLine[cnt]=='-') || cmdLine[cnt]==',')
   1248d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12490:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   12493:	01 d0                	add    eax,edx
   12495:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12498:	3c 20                	cmp    al,0x20
   1249a:	74 1e                	je     124ba <parseParamsShell+0x70>
/home/yogi/src/os/chrisOS/src/bishell.c:65 (discriminator 1)
   1249c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1249f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   124a2:	01 d0                	add    eax,edx
   124a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   124a7:	3c 2d                	cmp    al,0x2d
   124a9:	74 0f                	je     124ba <parseParamsShell+0x70>
/home/yogi/src/os/chrisOS/src/bishell.c:65 (discriminator 2)
   124ab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   124ae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   124b1:	01 d0                	add    eax,edx
   124b3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   124b6:	3c 2c                	cmp    al,0x2c
   124b8:	75 6f                	jne    12529 <parseParamsShell+0xdf>
/home/yogi/src/os/chrisOS/src/bishell.c:68
        {
            //printk("Found a delimiter (%c), incrementing y to %u, setting x to 0\n",cmdLine[cnt],y+1);
            if (cmdLine[cnt]=='-' || cmdLine[cnt]=='/')
   124ba:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   124bd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   124c0:	01 d0                	add    eax,edx
   124c2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   124c5:	3c 2d                	cmp    al,0x2d
   124c7:	74 0f                	je     124d8 <parseParamsShell+0x8e>
/home/yogi/src/os/chrisOS/src/bishell.c:68 (discriminator 1)
   124c9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   124cc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   124cf:	01 d0                	add    eax,edx
   124d1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   124d4:	3c 2f                	cmp    al,0x2f
   124d6:	75 25                	jne    124fd <parseParamsShell+0xb3>
/home/yogi/src/os/chrisOS/src/bishell.c:69
                params[y][x++]=cmdLine[cnt];
   124d8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   124db:	c1 e0 09             	shl    eax,0x9
   124de:	89 c2                	mov    edx,eax
   124e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   124e3:	8d 0c 02             	lea    ecx,[edx+eax*1]
   124e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   124e9:	8d 50 01             	lea    edx,[eax+0x1]
   124ec:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   124ef:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   124f2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   124f5:	01 da                	add    edx,ebx
   124f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   124fa:	88 14 01             	mov    BYTE PTR [ecx+eax*1],dl
/home/yogi/src/os/chrisOS/src/bishell.c:70
            params[y][x]='\0';
   124fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12500:	c1 e0 09             	shl    eax,0x9
   12503:	89 c2                	mov    edx,eax
   12505:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12508:	01 c2                	add    edx,eax
   1250a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1250d:	01 d0                	add    eax,edx
   1250f:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:71
            if (cnt>0)
   12512:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   12516:	74 36                	je     1254e <parseParamsShell+0x104>
/home/yogi/src/os/chrisOS/src/bishell.c:72
                {x=0;y++;lRetVal++;}
   12518:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1251f:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
   12523:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:71
        {
            //printk("Found a delimiter (%c), incrementing y to %u, setting x to 0\n",cmdLine[cnt],y+1);
            if (cmdLine[cnt]=='-' || cmdLine[cnt]=='/')
                params[y][x++]=cmdLine[cnt];
            params[y][x]='\0';
            if (cnt>0)
   12527:	eb 25                	jmp    1254e <parseParamsShell+0x104>
/home/yogi/src/os/chrisOS/src/bishell.c:77
                {x=0;y++;lRetVal++;}
        }
        else
        {
            //printk("Found a character to put at position %u,%u\n",y,x);
            params[y][x++]=cmdLine[cnt];
   12529:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1252c:	c1 e0 09             	shl    eax,0x9
   1252f:	89 c2                	mov    edx,eax
   12531:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12534:	8d 0c 02             	lea    ecx,[edx+eax*1]
   12537:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1253a:	8d 50 01             	lea    edx,[eax+0x1]
   1253d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   12540:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   12543:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   12546:	01 da                	add    edx,ebx
   12548:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1254b:	88 14 01             	mov    BYTE PTR [ecx+eax*1],dl
/home/yogi/src/os/chrisOS/src/bishell.c:79 (discriminator 2)
        }
        parsedChars++;
   1254e:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:62 (discriminator 2)
    int x=0,y=0;
    int lRetVal=0,parsedChars=0;
    
    memset(params,0, size);
    //printk("commandLine=%s\n",cmdLine);
    for (unsigned cnt=0;cnt<strlen(cmdLine);cnt++)
   12552:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:62 (discriminator 1)
   12556:	83 ec 0c             	sub    esp,0xc
   12559:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1255c:	e8 27 4d 01 00       	call   27288 <strlen>
   12561:	83 c4 10             	add    esp,0x10
   12564:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   12567:	0f 87 20 ff ff ff    	ja     1248d <parseParamsShell+0x43>
/home/yogi/src/os/chrisOS/src/bishell.c:81
            //printk("Found a character to put at position %u,%u\n",y,x);
            params[y][x++]=cmdLine[cnt];
        }
        parsedChars++;
    }
    if (parsedChars)
   1256d:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   12571:	74 19                	je     1258c <parseParamsShell+0x142>
/home/yogi/src/os/chrisOS/src/bishell.c:83
    {
        lRetVal++;
   12573:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:84
        params[y][x]='\0';
   12577:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1257a:	c1 e0 09             	shl    eax,0x9
   1257d:	89 c2                	mov    edx,eax
   1257f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12582:	01 c2                	add    edx,eax
   12584:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12587:	01 d0                	add    eax,edx
   12589:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:89
    }
    //printk("Returning %u parameters:\n", lRetVal);
    //for (int cnt=0;cnt<lRetVal;cnt++)
        //printk("\tParameter %u: '%s'\n", cnt, params[cnt]);
    return lRetVal;
   1258c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/chrisOS/src/bishell.c:90
}
   1258f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   12592:	c9                   	leave  
   12593:	c3                   	ret    

00012594 <buildargv>:
buildargv():
/home/yogi/src/os/chrisOS/src/bishell.c:94

/*parts from http://*/
char **buildargv (const char *input)
{
   12594:	55                   	push   ebp
   12595:	89 e5                	mov    ebp,esp
   12597:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/bishell.c:97
  char *arg;
  char *copybuf;
  int squote = 0;
   1259a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:98
  int dquote = 0;
   125a1:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:99
  int bsquote = 0;
   125a8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:100
  int argc = 0;
   125af:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:101
  int maxargc = 0;
   125b6:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:102
  char **argv = NULL;
   125bd:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:106
  char **nargv;
  //printk("buildargv: entering\n");
  
  if (input != NULL)
   125c4:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   125c8:	0f 84 17 02 00 00    	je     127e5 <buildargv+0x251>
/home/yogi/src/os/chrisOS/src/bishell.c:109
    {
      //printk("buildargv: command to parse (%u chars) is: '%s'\n",strlen (input) + 1,input);
      copybuf = (char *) mallocTemp (strlen (input) + 1);
   125ce:	83 ec 0c             	sub    esp,0xc
   125d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   125d4:	e8 af 4c 01 00       	call   27288 <strlen>
   125d9:	83 c4 10             	add    esp,0x10
   125dc:	83 c0 01             	add    eax,0x1
   125df:	83 ec 0c             	sub    esp,0xc
   125e2:	50                   	push   eax
   125e3:	e8 0e 34 01 00       	call   259f6 <mallocTemp>
   125e8:	83 c4 10             	add    esp,0x10
   125eb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:117
	 argv, even for null strings.  See NOTES above, test case below. */
      do
	{
	  /* Pick off argv[argc] */

	  if ((maxargc == 0) || (argc >= (maxargc - 1)))
   125ee:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
   125f2:	74 0b                	je     125ff <buildargv+0x6b>
/home/yogi/src/os/chrisOS/src/bishell.c:117 (discriminator 1)
   125f4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   125f7:	83 e8 01             	sub    eax,0x1
   125fa:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   125fd:	7f 3d                	jg     1263c <buildargv+0xa8>
/home/yogi/src/os/chrisOS/src/bishell.c:120
	    {
	      /* argv needs initialization, or expansion */
	      if (argv == NULL)
   125ff:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
   12603:	75 1c                	jne    12621 <buildargv+0x8d>
/home/yogi/src/os/chrisOS/src/bishell.c:122
		{
		  maxargc = INITIAL_MAXARGC;
   12605:	c7 45 dc 14 00 00 00 	mov    DWORD PTR [ebp-0x24],0x14
/home/yogi/src/os/chrisOS/src/bishell.c:123
		  nargv = (char **) mallocTemp (maxargc * sizeof (char *));
   1260c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1260f:	c1 e0 02             	shl    eax,0x2
   12612:	83 ec 0c             	sub    esp,0xc
   12615:	50                   	push   eax
   12616:	e8 db 33 01 00       	call   259f6 <mallocTemp>
   1261b:	83 c4 10             	add    esp,0x10
   1261e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:125
		}
	      argv = nargv;
   12621:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   12624:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/bishell.c:126
	      argv[argc] = NULL;
   12627:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1262a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   12631:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   12634:	01 d0                	add    eax,edx
   12636:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:129
	    }
	  /* Begin scanning arg */
	  arg = copybuf;
   1263c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1263f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:130
	  while (*input != EOS)
   12642:	e9 ec 00 00 00       	jmp    12733 <buildargv+0x19f>
/home/yogi/src/os/chrisOS/src/bishell.c:132
	    {
	      if ((*input)==' ' && !squote && !dquote && !bsquote)
   12647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1264a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1264d:	3c 20                	cmp    al,0x20
   1264f:	75 16                	jne    12667 <buildargv+0xd3>
/home/yogi/src/os/chrisOS/src/bishell.c:132 (discriminator 1)
   12651:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   12655:	75 10                	jne    12667 <buildargv+0xd3>
/home/yogi/src/os/chrisOS/src/bishell.c:132 (discriminator 2)
   12657:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1265b:	75 0a                	jne    12667 <buildargv+0xd3>
/home/yogi/src/os/chrisOS/src/bishell.c:132 (discriminator 3)
   1265d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   12661:	0f 84 da 00 00 00    	je     12741 <buildargv+0x1ad>
/home/yogi/src/os/chrisOS/src/bishell.c:138
		{
		  break;
		}
	      else
		{
		  if (bsquote)
   12667:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   1266b:	74 1d                	je     1268a <buildargv+0xf6>
/home/yogi/src/os/chrisOS/src/bishell.c:140
		    {
		      bsquote = 0;
   1266d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:141
		      *arg++ = *input;
   12674:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12677:	8d 50 01             	lea    edx,[eax+0x1]
   1267a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   1267d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12680:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   12683:	88 10                	mov    BYTE PTR [eax],dl
   12685:	e9 a5 00 00 00       	jmp    1272f <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:143
		    }
		  else if (*input == '\\')
   1268a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1268d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12690:	3c 5c                	cmp    al,0x5c
   12692:	75 0c                	jne    126a0 <buildargv+0x10c>
/home/yogi/src/os/chrisOS/src/bishell.c:145
		    {
		      bsquote = 1;
   12694:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
   1269b:	e9 8f 00 00 00       	jmp    1272f <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:147
		    }
		  else if (squote)
   126a0:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   126a4:	74 26                	je     126cc <buildargv+0x138>
/home/yogi/src/os/chrisOS/src/bishell.c:149
		    {
		      if (*input == '\'')
   126a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   126a9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   126ac:	3c 27                	cmp    al,0x27
   126ae:	75 09                	jne    126b9 <buildargv+0x125>
/home/yogi/src/os/chrisOS/src/bishell.c:151
			{
			  squote = 0;
   126b0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   126b7:	eb 76                	jmp    1272f <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:155
			}
		      else
			{
			  *arg++ = *input;
   126b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   126bc:	8d 50 01             	lea    edx,[eax+0x1]
   126bf:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   126c2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   126c5:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   126c8:	88 10                	mov    BYTE PTR [eax],dl
   126ca:	eb 63                	jmp    1272f <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:158
			}
		    }
		  else if (dquote)
   126cc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   126d0:	74 26                	je     126f8 <buildargv+0x164>
/home/yogi/src/os/chrisOS/src/bishell.c:160
		    {
		      if (*input == '"')
   126d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   126d5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   126d8:	3c 22                	cmp    al,0x22
   126da:	75 09                	jne    126e5 <buildargv+0x151>
/home/yogi/src/os/chrisOS/src/bishell.c:162
			{
			  dquote = 0;
   126dc:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   126e3:	eb 4a                	jmp    1272f <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:166
			}
		      else
			{
			  *arg++ = *input;
   126e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   126e8:	8d 50 01             	lea    edx,[eax+0x1]
   126eb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   126ee:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   126f1:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   126f4:	88 10                	mov    BYTE PTR [eax],dl
   126f6:	eb 37                	jmp    1272f <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:171
			}
		    }
		  else
		    {
		      if (*input == '\'')
   126f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   126fb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   126fe:	3c 27                	cmp    al,0x27
   12700:	75 09                	jne    1270b <buildargv+0x177>
/home/yogi/src/os/chrisOS/src/bishell.c:173
			{
			  squote = 1;
   12702:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
   12709:	eb 24                	jmp    1272f <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:175
			}
		      else if (*input == '"')
   1270b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1270e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12711:	3c 22                	cmp    al,0x22
   12713:	75 09                	jne    1271e <buildargv+0x18a>
/home/yogi/src/os/chrisOS/src/bishell.c:177
			{
			  dquote = 1;
   12715:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
   1271c:	eb 11                	jmp    1272f <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:181
			}
		      else
			{
			  *arg++ = *input;
   1271e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12721:	8d 50 01             	lea    edx,[eax+0x1]
   12724:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   12727:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1272a:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1272d:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/bishell.c:185
                          //printk("Incremented input to %u, char=%u,value='%c'\n",input,*input,*input);
			}
		    }
		  input++;
   1272f:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:130
	      argv = nargv;
	      argv[argc] = NULL;
	    }
	  /* Begin scanning arg */
	  arg = copybuf;
	  while (*input != EOS)
   12733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12736:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12739:	84 c0                	test   al,al
   1273b:	0f 85 06 ff ff ff    	jne    12647 <buildargv+0xb3>
/home/yogi/src/os/chrisOS/src/bishell.c:188
			}
		    }
		  input++;
		}
	    }
	  *arg = EOS;
   12741:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12744:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:190
          //printk("Found an EOS\n");
          if (copybuf[0]!='\0')
   12747:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1274a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1274d:	84 c0                	test   al,al
   1274f:	0f 84 82 00 00 00    	je     127d7 <buildargv+0x243>
/home/yogi/src/os/chrisOS/src/bishell.c:192
          {
            char* temp=mallocTemp(strlen(copybuf)+1);
   12755:	83 ec 0c             	sub    esp,0xc
   12758:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1275b:	e8 28 4b 01 00       	call   27288 <strlen>
   12760:	83 c4 10             	add    esp,0x10
   12763:	83 c0 01             	add    eax,0x1
   12766:	83 ec 0c             	sub    esp,0xc
   12769:	50                   	push   eax
   1276a:	e8 87 32 01 00       	call   259f6 <mallocTemp>
   1276f:	83 c4 10             	add    esp,0x10
   12772:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/chrisOS/src/bishell.c:195
            //printk("*malloc'd temp to 0x%08X for %u characters\n",temp,strlen(copybuf));
            //printk("Copied copybuf @ 0x%08X to temp @ 0x%08X\n",copybuf,temp);
            strcpy(temp,copybuf);
   12775:	83 ec 08             	sub    esp,0x8
   12778:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1277b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   1277e:	e8 95 4a 01 00       	call   27218 <strcpy>
   12783:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:196
            copybuf = (char *) mallocTemp (strlen (input) + 1);
   12786:	83 ec 0c             	sub    esp,0xc
   12789:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1278c:	e8 f7 4a 01 00       	call   27288 <strlen>
   12791:	83 c4 10             	add    esp,0x10
   12794:	83 c0 01             	add    eax,0x1
   12797:	83 ec 0c             	sub    esp,0xc
   1279a:	50                   	push   eax
   1279b:	e8 56 32 01 00       	call   259f6 <mallocTemp>
   127a0:	83 c4 10             	add    esp,0x10
   127a3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:197
            argv[argc] = temp;
   127a6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   127a9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   127b0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   127b3:	01 c2                	add    edx,eax
   127b5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   127b8:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/bishell.c:199
            //printk("set argv[%u] to 0x%08X\n",argc,temp);
            argc++;
   127ba:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:200
            argv[argc] = NULL;
   127be:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   127c1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   127c8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   127cb:	01 d0                	add    eax,edx
   127cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:201
            input++;
   127d3:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:204
          }
	}
      while (*input != EOS);
   127d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   127da:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   127dd:	84 c0                	test   al,al
   127df:	0f 85 09 fe ff ff    	jne    125ee <buildargv+0x5a>
/home/yogi/src/os/chrisOS/src/bishell.c:207
    }
  //printk("buildargv: exiting\n");
  return (argv);
   127e5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/chrisOS/src/bishell.c:208
}
   127e8:	c9                   	leave  
   127e9:	c3                   	ret    

000127ea <QueryBDF>:
QueryBDF():
/home/yogi/src/os/chrisOS/src/bishell.c:211

void HIGH_CODE_SECTION QueryBDF(char* cmdline)
{
   127ea:	55                   	push   ebp
   127eb:	89 e5                	mov    ebp,esp
   127ed:	56                   	push   esi
   127ee:	53                   	push   ebx
   127ef:	81 ec 00 14 00 00    	sub    esp,0x1400
/home/yogi/src/os/chrisOS/src/bishell.c:214
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];

    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   127f5:	83 ec 04             	sub    esp,0x4
   127f8:	68 00 14 00 00       	push   0x1400
   127fd:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   12803:	50                   	push   eax
   12804:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12807:	e8 3e fc ff ff       	call   1244a <parseParamsShell>
   1280c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:216
    //printk("Params: 0=%u, 1=%u, 2=%u",strtoul(params[0],0,16),strtoul(params[1],0,16),strtoul(params[2],0,16));
    pciQueryBDF(strtoul(params[0],0,16),strtoul(params[1],0,16),strtoul(params[2],0,16));
   1280f:	83 ec 04             	sub    esp,0x4
   12812:	6a 10                	push   0x10
   12814:	6a 00                	push   0x0
   12816:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   1281c:	05 00 04 00 00       	add    eax,0x400
   12821:	50                   	push   eax
   12822:	e8 89 4a 01 00       	call   272b0 <strtoul>
   12827:	83 c4 10             	add    esp,0x10
   1282a:	0f b6 f0             	movzx  esi,al
   1282d:	83 ec 04             	sub    esp,0x4
   12830:	6a 10                	push   0x10
   12832:	6a 00                	push   0x0
   12834:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   1283a:	05 00 02 00 00       	add    eax,0x200
   1283f:	50                   	push   eax
   12840:	e8 6b 4a 01 00       	call   272b0 <strtoul>
   12845:	83 c4 10             	add    esp,0x10
   12848:	0f b6 d8             	movzx  ebx,al
   1284b:	83 ec 04             	sub    esp,0x4
   1284e:	6a 10                	push   0x10
   12850:	6a 00                	push   0x0
   12852:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   12858:	50                   	push   eax
   12859:	e8 52 4a 01 00       	call   272b0 <strtoul>
   1285e:	83 c4 10             	add    esp,0x10
   12861:	0f b6 c0             	movzx  eax,al
   12864:	83 ec 04             	sub    esp,0x4
   12867:	56                   	push   esi
   12868:	53                   	push   ebx
   12869:	50                   	push   eax
   1286a:	e8 ee 3d 00 00       	call   1665d <pciQueryBDF>
   1286f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:217
}
   12872:	90                   	nop
   12873:	8d 65 f8             	lea    esp,[ebp-0x8]
   12876:	5b                   	pop    ebx
   12877:	5e                   	pop    esi
   12878:	5d                   	pop    ebp
   12879:	c3                   	ret    

0001287a <dumpP>:
dumpP():
/home/yogi/src/os/chrisOS/src/bishell.c:220

void HIGH_CODE_SECTION dumpP(char* cmdline)
{
   1287a:	55                   	push   ebp
   1287b:	89 e5                	mov    ebp,esp
   1287d:	81 ec 48 16 00 00    	sub    esp,0x1648
/home/yogi/src/os/chrisOS/src/bishell.c:222
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   12883:	83 ec 04             	sub    esp,0x4
   12886:	68 00 14 00 00       	push   0x1400
   1288b:	8d 85 b8 eb ff ff    	lea    eax,[ebp-0x1448]
   12891:	50                   	push   eax
   12892:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12895:	e8 b0 fb ff ff       	call   1244a <parseParamsShell>
   1289a:	83 c4 10             	add    esp,0x10
   1289d:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
/home/yogi/src/os/chrisOS/src/bishell.c:223
    int lCount=0;
   128a0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:224
    uint32_t lAddress=0;
   128a7:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:225
    char lCharType=' ', lCharSize=' ';
   128ae:	c6 45 ef 20          	mov    BYTE PTR [ebp-0x11],0x20
   128b2:	c6 45 ee 20          	mov    BYTE PTR [ebp-0x12],0x20
/home/yogi/src/os/chrisOS/src/bishell.c:226
    int lTemp=0;
   128b6:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:228
    char lTempS[MAX_PARAM_WIDTH];
    bool addrIsVirtual=false;
   128bd:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:232
//    for (int cnt=0;cnt<paramCount;cnt++)
//        printk("Param # %u is %s\n", cnt, params[cnt]);
    
    memset(lTempS,0,MAX_PARAM_WIDTH);
   128c1:	83 ec 04             	sub    esp,0x4
   128c4:	68 00 02 00 00       	push   0x200
   128c9:	6a 00                	push   0x0
   128cb:	8d 85 b8 e9 ff ff    	lea    eax,[ebp-0x1648]
   128d1:	50                   	push   eax
   128d2:	e8 56 27 01 00       	call   2502d <memset>
   128d7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:233
    for (int cnt=0;cnt<=paramCount;cnt++)
   128da:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   128e1:	e9 15 01 00 00       	jmp    129fb <dumpP+0x181>
/home/yogi/src/os/chrisOS/src/bishell.c:236
    {
        //printk("Processing parameter %u, value='%s'\n",cnt,params[cnt]);
        if (params[cnt][0]=='v')
   128e6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   128e9:	c1 e0 09             	shl    eax,0x9
   128ec:	8d 4d f8             	lea    ecx,[ebp-0x8]
   128ef:	01 c8                	add    eax,ecx
   128f1:	2d 40 14 00 00       	sub    eax,0x1440
   128f6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   128f9:	3c 76                	cmp    al,0x76
   128fb:	75 09                	jne    12906 <dumpP+0x8c>
/home/yogi/src/os/chrisOS/src/bishell.c:239
        {
            //printk("Address is virtual parameter found\n");
            addrIsVirtual=true;
   128fd:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
   12901:	e9 f1 00 00 00       	jmp    129f7 <dumpP+0x17d>
/home/yogi/src/os/chrisOS/src/bishell.c:241
        }
        else if (params[cnt][0]=='/')
   12906:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   12909:	c1 e0 09             	shl    eax,0x9
   1290c:	8d 4d f8             	lea    ecx,[ebp-0x8]
   1290f:	01 c8                	add    eax,ecx
   12911:	2d 40 14 00 00       	sub    eax,0x1440
   12916:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12919:	3c 2f                	cmp    al,0x2f
   1291b:	0f 85 af 00 00 00    	jne    129d0 <dumpP+0x156>
/home/yogi/src/os/chrisOS/src/bishell.c:243
        {
            lTemp=1;
   12921:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:244
            while (ISDIGIT(params[cnt][lTemp]))
   12928:	eb 29                	jmp    12953 <dumpP+0xd9>
/home/yogi/src/os/chrisOS/src/bishell.c:246
            {
                lTempS[lTemp-1]=params[cnt][lTemp];
   1292a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1292d:	8d 50 ff             	lea    edx,[eax-0x1]
   12930:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   12933:	c1 e0 09             	shl    eax,0x9
   12936:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12939:	01 c1                	add    ecx,eax
   1293b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1293e:	01 c8                	add    eax,ecx
   12940:	2d 40 14 00 00       	sub    eax,0x1440
   12945:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12948:	88 84 15 b8 e9 ff ff 	mov    BYTE PTR [ebp+edx*1-0x1648],al
/home/yogi/src/os/chrisOS/src/bishell.c:247
                lTemp++;
   1294f:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:244
            addrIsVirtual=true;
        }
        else if (params[cnt][0]=='/')
        {
            lTemp=1;
            while (ISDIGIT(params[cnt][lTemp]))
   12953:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   12956:	c1 e0 09             	shl    eax,0x9
   12959:	8d 4d f8             	lea    ecx,[ebp-0x8]
   1295c:	8d 14 01             	lea    edx,[ecx+eax*1]
   1295f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12962:	01 d0                	add    eax,edx
   12964:	2d 40 14 00 00       	sub    eax,0x1440
   12969:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1296c:	0f be c0             	movsx  eax,al
   1296f:	83 e8 30             	sub    eax,0x30
   12972:	83 f8 09             	cmp    eax,0x9
   12975:	76 b3                	jbe    1292a <dumpP+0xb0>
/home/yogi/src/os/chrisOS/src/bishell.c:249
            {
                lTempS[lTemp-1]=params[cnt][lTemp];
                lTemp++;
            }
            lCount=atoi(lTempS);
   12977:	83 ec 0c             	sub    esp,0xc
   1297a:	8d 85 b8 e9 ff ff    	lea    eax,[ebp-0x1648]
   12980:	50                   	push   eax
   12981:	e8 6f 25 01 00       	call   24ef5 <atoi>
   12986:	83 c4 10             	add    esp,0x10
   12989:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:250
            lCharSize=params[cnt][lTemp++];
   1298c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1298f:	8d 50 01             	lea    edx,[eax+0x1]
   12992:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   12995:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   12998:	c1 e2 09             	shl    edx,0x9
   1299b:	8d 4d f8             	lea    ecx,[ebp-0x8]
   1299e:	01 ca                	add    edx,ecx
   129a0:	01 d0                	add    eax,edx
   129a2:	2d 40 14 00 00       	sub    eax,0x1440
   129a7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   129aa:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
/home/yogi/src/os/chrisOS/src/bishell.c:251
            lCharType=params[cnt][lTemp++];
   129ad:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   129b0:	8d 50 01             	lea    edx,[eax+0x1]
   129b3:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   129b6:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   129b9:	c1 e2 09             	shl    edx,0x9
   129bc:	8d 4d f8             	lea    ecx,[ebp-0x8]
   129bf:	01 ca                	add    edx,ecx
   129c1:	01 d0                	add    eax,edx
   129c3:	2d 40 14 00 00       	sub    eax,0x1440
   129c8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   129cb:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
   129ce:	eb 27                	jmp    129f7 <dumpP+0x17d>
/home/yogi/src/os/chrisOS/src/bishell.c:253
        }
        else if (lAddress==0)
   129d0:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   129d4:	75 21                	jne    129f7 <dumpP+0x17d>
/home/yogi/src/os/chrisOS/src/bishell.c:255
        {
            lAddress=strtoul(params[cnt],0,16);
   129d6:	8d 85 b8 eb ff ff    	lea    eax,[ebp-0x1448]
   129dc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   129df:	c1 e2 09             	shl    edx,0x9
   129e2:	01 d0                	add    eax,edx
   129e4:	83 ec 04             	sub    esp,0x4
   129e7:	6a 10                	push   0x10
   129e9:	6a 00                	push   0x0
   129eb:	50                   	push   eax
   129ec:	e8 bf 48 01 00       	call   272b0 <strtoul>
   129f1:	83 c4 10             	add    esp,0x10
   129f4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:233 (discriminator 2)
    bool addrIsVirtual=false;
//    for (int cnt=0;cnt<paramCount;cnt++)
//        printk("Param # %u is %s\n", cnt, params[cnt]);
    
    memset(lTempS,0,MAX_PARAM_WIDTH);
    for (int cnt=0;cnt<=paramCount;cnt++)
   129f7:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:233 (discriminator 1)
   129fb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   129fe:	3b 45 c8             	cmp    eax,DWORD PTR [ebp-0x38]
   12a01:	0f 8e df fe ff ff    	jle    128e6 <dumpP+0x6c>
/home/yogi/src/os/chrisOS/src/bishell.c:264
//    {
//        printk("Converted 0x%08X to ",lAddress);
//        lAddress=__pa(lAddress);
//        printk("%0x%08X\n", lAddress);
//    }
    if (lCount>65535)
   12a07:	81 7d f4 ff ff 00 00 	cmp    DWORD PTR [ebp-0xc],0xffff
   12a0e:	7e 18                	jle    12a28 <dumpP+0x1ae>
/home/yogi/src/os/chrisOS/src/bishell.c:266
    {
        printk("Error: Count is too large (%u), max is 500, can't dump", lCount);
   12a10:	83 ec 08             	sub    esp,0x8
   12a13:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   12a16:	68 a4 5d 04 00       	push   0x45da4
   12a1b:	e8 97 46 01 00       	call   270b7 <printk>
   12a20:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:267
        return;
   12a23:	e9 88 04 00 00       	jmp    12eb0 <dumpP+0x636>
/home/yogi/src/os/chrisOS/src/bishell.c:269
    }
    if (lCharSize!='b' && lCharSize!='h' && lCharSize!='w' && lCharSize!='d')
   12a28:	80 7d ee 62          	cmp    BYTE PTR [ebp-0x12],0x62
   12a2c:	74 2c                	je     12a5a <dumpP+0x1e0>
/home/yogi/src/os/chrisOS/src/bishell.c:269 (discriminator 1)
   12a2e:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12a32:	74 26                	je     12a5a <dumpP+0x1e0>
/home/yogi/src/os/chrisOS/src/bishell.c:269 (discriminator 2)
   12a34:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12a38:	74 20                	je     12a5a <dumpP+0x1e0>
/home/yogi/src/os/chrisOS/src/bishell.c:269 (discriminator 3)
   12a3a:	80 7d ee 64          	cmp    BYTE PTR [ebp-0x12],0x64
   12a3e:	74 1a                	je     12a5a <dumpP+0x1e0>
/home/yogi/src/os/chrisOS/src/bishell.c:271
    {
        printk("Error: Character size (%c) must be in bhwd", lCharSize);
   12a40:	0f be 45 ee          	movsx  eax,BYTE PTR [ebp-0x12]
   12a44:	83 ec 08             	sub    esp,0x8
   12a47:	50                   	push   eax
   12a48:	68 dc 5d 04 00       	push   0x45ddc
   12a4d:	e8 65 46 01 00       	call   270b7 <printk>
   12a52:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:272
        return;
   12a55:	e9 56 04 00 00       	jmp    12eb0 <dumpP+0x636>
/home/yogi/src/os/chrisOS/src/bishell.c:274
    }
    if (lCharType!='x' && lCharType!='c' && lCharType!='e')
   12a5a:	80 7d ef 78          	cmp    BYTE PTR [ebp-0x11],0x78
   12a5e:	74 26                	je     12a86 <dumpP+0x20c>
/home/yogi/src/os/chrisOS/src/bishell.c:274 (discriminator 1)
   12a60:	80 7d ef 63          	cmp    BYTE PTR [ebp-0x11],0x63
   12a64:	74 20                	je     12a86 <dumpP+0x20c>
/home/yogi/src/os/chrisOS/src/bishell.c:274 (discriminator 2)
   12a66:	80 7d ef 65          	cmp    BYTE PTR [ebp-0x11],0x65
   12a6a:	74 1a                	je     12a86 <dumpP+0x20c>
/home/yogi/src/os/chrisOS/src/bishell.c:276
    {
        printk("Error: Character type (%c) must be in xce", lCharType);
   12a6c:	0f be 45 ef          	movsx  eax,BYTE PTR [ebp-0x11]
   12a70:	83 ec 08             	sub    esp,0x8
   12a73:	50                   	push   eax
   12a74:	68 08 5e 04 00       	push   0x45e08
   12a79:	e8 39 46 01 00       	call   270b7 <printk>
   12a7e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:277
        return;
   12a81:	e9 2a 04 00 00       	jmp    12eb0 <dumpP+0x636>
/home/yogi/src/os/chrisOS/src/bishell.c:284
/*    if ((lAddress>kE820MemoryBytes || lAddress+lCount>kE820MemoryBytes) && (!addrIsVirtual))
    {
        printk("Error: Requested address (0x%08X) or address+count (0x%08X) > memory size ()", lAddress, lAddress+lCount);
        return;
    }*/
    printk("dumpP: Dumping %u %c (%c) from 0x%08X%s\n", lCount, lCharSize , lCharType, lAddress, addrIsVirtual?"(v)":"");;
   12a86:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
   12a8a:	74 07                	je     12a93 <dumpP+0x219>
/home/yogi/src/os/chrisOS/src/bishell.c:284 (discriminator 1)
   12a8c:	b9 32 5e 04 00       	mov    ecx,0x45e32
   12a91:	eb 05                	jmp    12a98 <dumpP+0x21e>
/home/yogi/src/os/chrisOS/src/bishell.c:284 (discriminator 2)
   12a93:	b9 8b 59 04 00       	mov    ecx,0x4598b
/home/yogi/src/os/chrisOS/src/bishell.c:284 (discriminator 4)
   12a98:	0f be 55 ef          	movsx  edx,BYTE PTR [ebp-0x11]
   12a9c:	0f be 45 ee          	movsx  eax,BYTE PTR [ebp-0x12]
   12aa0:	83 ec 08             	sub    esp,0x8
   12aa3:	51                   	push   ecx
   12aa4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   12aa7:	52                   	push   edx
   12aa8:	50                   	push   eax
   12aa9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   12aac:	68 38 5e 04 00       	push   0x45e38
   12ab1:	e8 01 46 01 00       	call   270b7 <printk>
   12ab6:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/bishell.c:285 (discriminator 4)
    uint8_t* mem=(uint8_t*)lAddress;
   12ab9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12abc:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:286 (discriminator 4)
    uint16_t* memw=(uint16_t*)lAddress;
   12abf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12ac2:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
/home/yogi/src/os/chrisOS/src/bishell.c:287 (discriminator 4)
    uint32_t* memd=(uint32_t*)lAddress;
   12ac5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12ac8:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
/home/yogi/src/os/chrisOS/src/bishell.c:288 (discriminator 4)
    uint32_t* memq=(uint32_t*)lAddress;
   12acb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12ace:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
/home/yogi/src/os/chrisOS/src/bishell.c:289 (discriminator 4)
    int lineCount=0;
   12ad1:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:291 (discriminator 4)
    int lEntriesPerLine;
    if (lCharSize=='b')
   12ad8:	80 7d ee 62          	cmp    BYTE PTR [ebp-0x12],0x62
   12adc:	75 07                	jne    12ae5 <dumpP+0x26b>
/home/yogi/src/os/chrisOS/src/bishell.c:292
        lEntriesPerLine=15;
   12ade:	c7 45 d8 0f 00 00 00 	mov    DWORD PTR [ebp-0x28],0xf
/home/yogi/src/os/chrisOS/src/bishell.c:293
    if (lCharSize=='h')
   12ae5:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12ae9:	75 09                	jne    12af4 <dumpP+0x27a>
/home/yogi/src/os/chrisOS/src/bishell.c:294
        lEntriesPerLine=8;
   12aeb:	c7 45 d8 08 00 00 00 	mov    DWORD PTR [ebp-0x28],0x8
   12af2:	eb 16                	jmp    12b0a <dumpP+0x290>
/home/yogi/src/os/chrisOS/src/bishell.c:295
    else if (lCharSize=='w')
   12af4:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12af8:	75 09                	jne    12b03 <dumpP+0x289>
/home/yogi/src/os/chrisOS/src/bishell.c:296
        lEntriesPerLine=4;
   12afa:	c7 45 d8 04 00 00 00 	mov    DWORD PTR [ebp-0x28],0x4
   12b01:	eb 07                	jmp    12b0a <dumpP+0x290>
/home/yogi/src/os/chrisOS/src/bishell.c:298
    else
        lEntriesPerLine=3;
   12b03:	c7 45 d8 03 00 00 00 	mov    DWORD PTR [ebp-0x28],0x3
/home/yogi/src/os/chrisOS/src/bishell.c:299
    lTemp=0; //column
   12b0a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:300
    if (!addrIsVirtual)
   12b11:	0f b6 45 e7          	movzx  eax,BYTE PTR [ebp-0x19]
   12b15:	83 f0 01             	xor    eax,0x1
   12b18:	84 c0                	test   al,al
   12b1a:	74 17                	je     12b33 <dumpP+0x2b9>
/home/yogi/src/os/chrisOS/src/bishell.c:303
    {
        //NOTE: Have to include SS here, as code below uses ebp references which implies SS
        SWITCH_TO_NON_KERNEL_DATA_AND_STACK
   12b1c:	50                   	push   eax
   12b1d:	b8 18 00 00 00       	mov    eax,0x18
   12b22:	8e d8                	mov    ds,eax
   12b24:	8e c0                	mov    es,eax
   12b26:	8e e0                	mov    fs,eax
   12b28:	8e e8                	mov    gs,eax
   12b2a:	8e d0                	mov    ss,eax
   12b2c:	58                   	pop    eax
/home/yogi/src/os/chrisOS/src/bishell.c:304
        __asm__("cli\n");
   12b2d:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/bishell.c:305
        doNonPagingJump();
   12b2e:	e8 0b e8 fe ff       	call   133e <doNonPagingJump>
/home/yogi/src/os/chrisOS/src/bishell.c:308
        //printk("Switching to 0 based GDT entry for DS,ES,FS,GS,SS\n");
    }
    if (lCharSize=='b')
   12b33:	80 7d ee 62          	cmp    BYTE PTR [ebp-0x12],0x62
   12b37:	0f 85 f6 01 00 00    	jne    12d33 <dumpP+0x4b9>
/home/yogi/src/os/chrisOS/src/bishell.c:310
    {
        printk("%08X:\t", &mem[0]);
   12b3d:	83 ec 08             	sub    esp,0x8
   12b40:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
   12b43:	68 61 5e 04 00       	push   0x45e61
   12b48:	e8 6a 45 01 00       	call   270b7 <printk>
   12b4d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:311
        for (int cnt=0;cnt<lCount;cnt++)
   12b50:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
   12b57:	e9 c9 01 00 00       	jmp    12d25 <dumpP+0x4ab>
/home/yogi/src/os/chrisOS/src/bishell.c:313
        {
            if (lTemp==16)
   12b5c:	83 7d e8 10          	cmp    DWORD PTR [ebp-0x18],0x10
   12b60:	0f 85 81 01 00 00    	jne    12ce7 <dumpP+0x46d>
/home/yogi/src/os/chrisOS/src/bishell.c:315
            {
                puts("\t");
   12b66:	83 ec 0c             	sub    esp,0xc
   12b69:	68 68 5e 04 00       	push   0x45e68
   12b6e:	e8 93 54 00 00       	call   18006 <puts>
   12b73:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:316
                for (int cnt2=0;cnt2<16;cnt2++)
   12b76:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
   12b7d:	e9 05 01 00 00       	jmp    12c87 <dumpP+0x40d>
/home/yogi/src/os/chrisOS/src/bishell.c:318
                {
                    if (ISALPHA(lTempS[cnt2]) || ISDIGIT(lTempS[cnt2]) || (lTempS[cnt2]>=32&&lTempS[cnt2]<=47) || (lTempS[cnt2]>=123&&lTempS[cnt2]<=126) || (lTempS[cnt2]>=91&&lTempS[cnt2]<=96) || (lTempS[cnt2]>=58&&lTempS[cnt2]<=64) )
   12b82:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12b88:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12b8b:	01 d0                	add    eax,edx
   12b8d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12b90:	83 c8 20             	or     eax,0x20
   12b93:	0f be c0             	movsx  eax,al
   12b96:	83 e8 61             	sub    eax,0x61
   12b99:	83 f8 19             	cmp    eax,0x19
   12b9c:	0f 86 ad 00 00 00    	jbe    12c4f <dumpP+0x3d5>
/home/yogi/src/os/chrisOS/src/bishell.c:318 (discriminator 1)
   12ba2:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12ba8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12bab:	01 d0                	add    eax,edx
   12bad:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12bb0:	0f be c0             	movsx  eax,al
   12bb3:	83 e8 30             	sub    eax,0x30
   12bb6:	83 f8 09             	cmp    eax,0x9
   12bb9:	0f 86 90 00 00 00    	jbe    12c4f <dumpP+0x3d5>
/home/yogi/src/os/chrisOS/src/bishell.c:318 (discriminator 2)
   12bbf:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12bc5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12bc8:	01 d0                	add    eax,edx
   12bca:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12bcd:	3c 1f                	cmp    al,0x1f
   12bcf:	7e 12                	jle    12be3 <dumpP+0x369>
/home/yogi/src/os/chrisOS/src/bishell.c:318 (discriminator 3)
   12bd1:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12bd7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12bda:	01 d0                	add    eax,edx
   12bdc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12bdf:	3c 2f                	cmp    al,0x2f
   12be1:	7e 6c                	jle    12c4f <dumpP+0x3d5>
/home/yogi/src/os/chrisOS/src/bishell.c:318 (discriminator 5)
   12be3:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12be9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12bec:	01 d0                	add    eax,edx
   12bee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12bf1:	3c 7a                	cmp    al,0x7a
   12bf3:	7e 12                	jle    12c07 <dumpP+0x38d>
/home/yogi/src/os/chrisOS/src/bishell.c:318 (discriminator 6)
   12bf5:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12bfb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12bfe:	01 d0                	add    eax,edx
   12c00:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12c03:	3c 7f                	cmp    al,0x7f
   12c05:	75 48                	jne    12c4f <dumpP+0x3d5>
/home/yogi/src/os/chrisOS/src/bishell.c:318 (discriminator 8)
   12c07:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12c0d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12c10:	01 d0                	add    eax,edx
   12c12:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12c15:	3c 5a                	cmp    al,0x5a
   12c17:	7e 12                	jle    12c2b <dumpP+0x3b1>
/home/yogi/src/os/chrisOS/src/bishell.c:318 (discriminator 9)
   12c19:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12c1f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12c22:	01 d0                	add    eax,edx
   12c24:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12c27:	3c 60                	cmp    al,0x60
   12c29:	7e 24                	jle    12c4f <dumpP+0x3d5>
/home/yogi/src/os/chrisOS/src/bishell.c:318 (discriminator 11)
   12c2b:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12c31:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12c34:	01 d0                	add    eax,edx
   12c36:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12c39:	3c 39                	cmp    al,0x39
   12c3b:	7e 36                	jle    12c73 <dumpP+0x3f9>
/home/yogi/src/os/chrisOS/src/bishell.c:318 (discriminator 12)
   12c3d:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12c43:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12c46:	01 d0                	add    eax,edx
   12c48:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12c4b:	3c 40                	cmp    al,0x40
   12c4d:	7f 24                	jg     12c73 <dumpP+0x3f9>
/home/yogi/src/os/chrisOS/src/bishell.c:319
                        printk("%c",lTempS[cnt2]);
   12c4f:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12c55:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12c58:	01 d0                	add    eax,edx
   12c5a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12c5d:	0f be c0             	movsx  eax,al
   12c60:	83 ec 08             	sub    esp,0x8
   12c63:	50                   	push   eax
   12c64:	68 6a 5e 04 00       	push   0x45e6a
   12c69:	e8 49 44 01 00       	call   270b7 <printk>
   12c6e:	83 c4 10             	add    esp,0x10
   12c71:	eb 10                	jmp    12c83 <dumpP+0x409>
/home/yogi/src/os/chrisOS/src/bishell.c:321
                    else
                        puts(".");
   12c73:	83 ec 0c             	sub    esp,0xc
   12c76:	68 6d 5e 04 00       	push   0x45e6d
   12c7b:	e8 86 53 00 00       	call   18006 <puts>
   12c80:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:316 (discriminator 2)
        for (int cnt=0;cnt<lCount;cnt++)
        {
            if (lTemp==16)
            {
                puts("\t");
                for (int cnt2=0;cnt2<16;cnt2++)
   12c83:	83 45 d0 01          	add    DWORD PTR [ebp-0x30],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:316 (discriminator 1)
   12c87:	83 7d d0 0f          	cmp    DWORD PTR [ebp-0x30],0xf
   12c8b:	0f 8e f1 fe ff ff    	jle    12b82 <dumpP+0x308>
/home/yogi/src/os/chrisOS/src/bishell.c:323
                    if (ISALPHA(lTempS[cnt2]) || ISDIGIT(lTempS[cnt2]) || (lTempS[cnt2]>=32&&lTempS[cnt2]<=47) || (lTempS[cnt2]>=123&&lTempS[cnt2]<=126) || (lTempS[cnt2]>=91&&lTempS[cnt2]<=96) || (lTempS[cnt2]>=58&&lTempS[cnt2]<=64) )
                        printk("%c",lTempS[cnt2]);
                    else
                        puts(".");
                }
                puts("\n");
   12c91:	83 ec 0c             	sub    esp,0xc
   12c94:	68 6f 5e 04 00       	push   0x45e6f
   12c99:	e8 68 53 00 00       	call   18006 <puts>
   12c9e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:324
                if (++lineCount==SYS_VGA_HEIGHT-1)
   12ca1:	83 45 dc 01          	add    DWORD PTR [ebp-0x24],0x1
   12ca5:	83 7d dc 31          	cmp    DWORD PTR [ebp-0x24],0x31
   12ca9:	75 1c                	jne    12cc7 <dumpP+0x44d>
/home/yogi/src/os/chrisOS/src/bishell.c:326
                {
                    if (pauseDisplay(true))
   12cab:	83 ec 0c             	sub    esp,0xc
   12cae:	6a 01                	push   0x1
   12cb0:	e8 c1 2c 01 00       	call   25976 <pauseDisplay>
   12cb5:	83 c4 10             	add    esp,0x10
   12cb8:	84 c0                	test   al,al
   12cba:	0f 85 88 00 00 00    	jne    12d48 <dumpP+0x4ce>
/home/yogi/src/os/chrisOS/src/bishell.c:328
                        break;
                    lineCount=0;
   12cc0:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:330
                }
                printk("%08X:\t", &mem[cnt]);
   12cc7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
   12cca:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
   12ccd:	01 d0                	add    eax,edx
   12ccf:	83 ec 08             	sub    esp,0x8
   12cd2:	50                   	push   eax
   12cd3:	68 61 5e 04 00       	push   0x45e61
   12cd8:	e8 da 43 01 00       	call   270b7 <printk>
   12cdd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:331
                lTemp=0;
   12ce0:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:333 (discriminator 2)
            }
            printk("%02X ",mem[cnt]);
   12ce7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
   12cea:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
   12ced:	01 d0                	add    eax,edx
   12cef:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12cf2:	0f b6 c0             	movzx  eax,al
   12cf5:	83 ec 08             	sub    esp,0x8
   12cf8:	50                   	push   eax
   12cf9:	68 71 5e 04 00       	push   0x45e71
   12cfe:	e8 b4 43 01 00       	call   270b7 <printk>
   12d03:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:334 (discriminator 2)
            lTempS[lTemp++]=mem[cnt];
   12d06:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12d09:	8d 50 01             	lea    edx,[eax+0x1]
   12d0c:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   12d0f:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
   12d12:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
   12d15:	01 ca                	add    edx,ecx
   12d17:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   12d1a:	88 94 05 b8 e9 ff ff 	mov    BYTE PTR [ebp+eax*1-0x1648],dl
/home/yogi/src/os/chrisOS/src/bishell.c:311 (discriminator 2)
        //printk("Switching to 0 based GDT entry for DS,ES,FS,GS,SS\n");
    }
    if (lCharSize=='b')
    {
        printk("%08X:\t", &mem[0]);
        for (int cnt=0;cnt<lCount;cnt++)
   12d21:	83 45 d4 01          	add    DWORD PTR [ebp-0x2c],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:311 (discriminator 1)
   12d25:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   12d28:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   12d2b:	0f 8c 2b fe ff ff    	jl     12b5c <dumpP+0x2e2>
   12d31:	eb 16                	jmp    12d49 <dumpP+0x4cf>
/home/yogi/src/os/chrisOS/src/bishell.c:338
            printk("%02X ",mem[cnt]);
            lTempS[lTemp++]=mem[cnt];
        }
    }
    else
        printk("%08X:", &memw[0]);
   12d33:	83 ec 08             	sub    esp,0x8
   12d36:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
   12d39:	68 77 5e 04 00       	push   0x45e77
   12d3e:	e8 74 43 01 00       	call   270b7 <printk>
   12d43:	83 c4 10             	add    esp,0x10
   12d46:	eb 01                	jmp    12d49 <dumpP+0x4cf>
/home/yogi/src/os/chrisOS/src/bishell.c:327
                }
                puts("\n");
                if (++lineCount==SYS_VGA_HEIGHT-1)
                {
                    if (pauseDisplay(true))
                        break;
   12d48:	90                   	nop
/home/yogi/src/os/chrisOS/src/bishell.c:339
            lTempS[lTemp++]=mem[cnt];
        }
    }
    else
        printk("%08X:", &memw[0]);
        for (int cnt=0;cnt<lCount;cnt++)
   12d49:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
   12d50:	e9 0f 01 00 00       	jmp    12e64 <dumpP+0x5ea>
/home/yogi/src/os/chrisOS/src/bishell.c:341
        {
            if (lTemp==lEntriesPerLine)
   12d55:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12d58:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
   12d5b:	0f 85 a9 00 00 00    	jne    12e0a <dumpP+0x590>
/home/yogi/src/os/chrisOS/src/bishell.c:343
            {
                puts("\n");
   12d61:	83 ec 0c             	sub    esp,0xc
   12d64:	68 6f 5e 04 00       	push   0x45e6f
   12d69:	e8 98 52 00 00       	call   18006 <puts>
   12d6e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:344
                if (++lineCount==SYS_VGA_HEIGHT-1)
   12d71:	83 45 dc 01          	add    DWORD PTR [ebp-0x24],0x1
   12d75:	83 7d dc 31          	cmp    DWORD PTR [ebp-0x24],0x31
   12d79:	75 1c                	jne    12d97 <dumpP+0x51d>
/home/yogi/src/os/chrisOS/src/bishell.c:346
                {
                    if (pauseDisplay(true))
   12d7b:	83 ec 0c             	sub    esp,0xc
   12d7e:	6a 01                	push   0x1
   12d80:	e8 f1 2b 01 00       	call   25976 <pauseDisplay>
   12d85:	83 c4 10             	add    esp,0x10
   12d88:	84 c0                	test   al,al
   12d8a:	0f 85 e2 00 00 00    	jne    12e72 <dumpP+0x5f8>
/home/yogi/src/os/chrisOS/src/bishell.c:348
                        break;
                    lineCount=0;
   12d90:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:350
                }
                lTemp=0;
   12d97:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:351
                if (lCharSize=='h')
   12d9e:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12da2:	75 1e                	jne    12dc2 <dumpP+0x548>
/home/yogi/src/os/chrisOS/src/bishell.c:352
                    printk("%08X:", &memw[cnt]);
   12da4:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12da7:	8d 14 00             	lea    edx,[eax+eax*1]
   12daa:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
   12dad:	01 d0                	add    eax,edx
   12daf:	83 ec 08             	sub    esp,0x8
   12db2:	50                   	push   eax
   12db3:	68 77 5e 04 00       	push   0x45e77
   12db8:	e8 fa 42 01 00       	call   270b7 <printk>
   12dbd:	83 c4 10             	add    esp,0x10
   12dc0:	eb 48                	jmp    12e0a <dumpP+0x590>
/home/yogi/src/os/chrisOS/src/bishell.c:353
                else if (lCharSize=='w')
   12dc2:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12dc6:	75 22                	jne    12dea <dumpP+0x570>
/home/yogi/src/os/chrisOS/src/bishell.c:354
                    printk("%08X:", &memd[cnt]);
   12dc8:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12dcb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   12dd2:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
   12dd5:	01 d0                	add    eax,edx
   12dd7:	83 ec 08             	sub    esp,0x8
   12dda:	50                   	push   eax
   12ddb:	68 77 5e 04 00       	push   0x45e77
   12de0:	e8 d2 42 01 00       	call   270b7 <printk>
   12de5:	83 c4 10             	add    esp,0x10
   12de8:	eb 20                	jmp    12e0a <dumpP+0x590>
/home/yogi/src/os/chrisOS/src/bishell.c:356
                else
                    printk("%08X:", &memq[cnt]);
   12dea:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12ded:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   12df4:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
   12df7:	01 d0                	add    eax,edx
   12df9:	83 ec 08             	sub    esp,0x8
   12dfc:	50                   	push   eax
   12dfd:	68 77 5e 04 00       	push   0x45e77
   12e02:	e8 b0 42 01 00       	call   270b7 <printk>
   12e07:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:358
            }
            if (lCharSize=='h')
   12e0a:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12e0e:	75 24                	jne    12e34 <dumpP+0x5ba>
/home/yogi/src/os/chrisOS/src/bishell.c:359
                printk("%04X ",memw[cnt]);
   12e10:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12e13:	8d 14 00             	lea    edx,[eax+eax*1]
   12e16:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
   12e19:	01 d0                	add    eax,edx
   12e1b:	0f b7 00             	movzx  eax,WORD PTR [eax]
   12e1e:	0f b7 c0             	movzx  eax,ax
   12e21:	83 ec 08             	sub    esp,0x8
   12e24:	50                   	push   eax
   12e25:	68 7d 5e 04 00       	push   0x45e7d
   12e2a:	e8 88 42 01 00       	call   270b7 <printk>
   12e2f:	83 c4 10             	add    esp,0x10
   12e32:	eb 28                	jmp    12e5c <dumpP+0x5e2>
/home/yogi/src/os/chrisOS/src/bishell.c:360
            else if (lCharSize=='w')
   12e34:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12e38:	75 22                	jne    12e5c <dumpP+0x5e2>
/home/yogi/src/os/chrisOS/src/bishell.c:361
                printk("%08X ", memd[cnt]);
   12e3a:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12e3d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   12e44:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
   12e47:	01 d0                	add    eax,edx
   12e49:	8b 00                	mov    eax,DWORD PTR [eax]
   12e4b:	83 ec 08             	sub    esp,0x8
   12e4e:	50                   	push   eax
   12e4f:	68 83 5e 04 00       	push   0x45e83
   12e54:	e8 5e 42 01 00       	call   270b7 <printk>
   12e59:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:362 (discriminator 2)
            lTemp++;
   12e5c:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:339 (discriminator 2)
            lTempS[lTemp++]=mem[cnt];
        }
    }
    else
        printk("%08X:", &memw[0]);
        for (int cnt=0;cnt<lCount;cnt++)
   12e60:	83 45 cc 01          	add    DWORD PTR [ebp-0x34],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:339 (discriminator 1)
   12e64:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12e67:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   12e6a:	0f 8c e5 fe ff ff    	jl     12d55 <dumpP+0x4db>
   12e70:	eb 01                	jmp    12e73 <dumpP+0x5f9>
/home/yogi/src/os/chrisOS/src/bishell.c:347
            {
                puts("\n");
                if (++lineCount==SYS_VGA_HEIGHT-1)
                {
                    if (pauseDisplay(true))
                        break;
   12e72:	90                   	nop
/home/yogi/src/os/chrisOS/src/bishell.c:364
                printk("%04X ",memw[cnt]);
            else if (lCharSize=='w')
                printk("%08X ", memd[cnt]);
            lTemp++;
        }
    puts("\n");
   12e73:	83 ec 0c             	sub    esp,0xc
   12e76:	68 6f 5e 04 00       	push   0x45e6f
   12e7b:	e8 86 51 00 00       	call   18006 <puts>
   12e80:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:365
    if (!addrIsVirtual)
   12e83:	0f b6 45 e7          	movzx  eax,BYTE PTR [ebp-0x19]
   12e87:	83 f0 01             	xor    eax,0x1
   12e8a:	84 c0                	test   al,al
   12e8c:	74 22                	je     12eb0 <dumpP+0x636>
/home/yogi/src/os/chrisOS/src/bishell.c:367
    {
       __asm__("mov eax,cr0\n or eax,0x80000000\n mov cr0,eax\n");
   12e8e:	0f 20 c0             	mov    eax,cr0
   12e91:	0d 00 00 00 80       	or     eax,0x80000000
   12e96:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/src/bishell.c:368
       doPagingJump();
   12e99:	e8 89 e4 fe ff       	call   1327 <doPagingJump>
/home/yogi/src/os/chrisOS/src/bishell.c:369
        SWITCH_TO_KERNEL_DATA_AND_STACK
   12e9e:	50                   	push   eax
   12e9f:	b8 10 00 00 00       	mov    eax,0x10
   12ea4:	8e d8                	mov    ds,eax
   12ea6:	8e c0                	mov    es,eax
   12ea8:	8e e0                	mov    fs,eax
   12eaa:	8e e8                	mov    gs,eax
   12eac:	8e d0                	mov    ss,eax
   12eae:	58                   	pop    eax
/home/yogi/src/os/chrisOS/src/bishell.c:370
        __asm__("sti\n");
   12eaf:	fb                   	sti    
/home/yogi/src/os/chrisOS/src/bishell.c:372
    }
}
   12eb0:	c9                   	leave  
   12eb1:	c3                   	ret    

00012eb2 <dumpV>:
dumpV():
/home/yogi/src/os/chrisOS/src/bishell.c:375

void HIGH_CODE_SECTION dumpV(char* cmdline)
{
   12eb2:	55                   	push   ebp
   12eb3:	89 e5                	mov    ebp,esp
   12eb5:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/bishell.c:376
    strcat(cmdline," v");
   12eb8:	83 ec 08             	sub    esp,0x8
   12ebb:	68 89 5e 04 00       	push   0x45e89
   12ec0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12ec3:	e8 68 42 01 00       	call   27130 <strcat>
   12ec8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:377
    dumpP(cmdline);
   12ecb:	83 ec 0c             	sub    esp,0xc
   12ece:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12ed1:	e8 a4 f9 ff ff       	call   1287a <dumpP>
   12ed6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:378
}
   12ed9:	90                   	nop
   12eda:	c9                   	leave  
   12edb:	c3                   	ret    

00012edc <helpMe>:
helpMe():
/home/yogi/src/os/chrisOS/src/bishell.c:381

void HIGH_CODE_SECTION helpMe()
{
   12edc:	55                   	push   ebp
   12edd:	89 e5                	mov    ebp,esp
   12edf:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/bishell.c:382
    printk("Help:\n");
   12ee2:	83 ec 0c             	sub    esp,0xc
   12ee5:	68 8c 5e 04 00       	push   0x45e8c
   12eea:	e8 c8 41 01 00       	call   270b7 <printk>
   12eef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:383
    for (unsigned cnt=0;cnt<sizeof(cmds)/sizeof(command_table_t);cnt++)
   12ef2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   12ef9:	eb 30                	jmp    12f2b <helpMe+0x4f>
/home/yogi/src/os/chrisOS/src/bishell.c:384 (discriminator 3)
        printk("\t%s: %s\n", cmds[cnt].name, cmds[cnt].description);
   12efb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12efe:	c1 e0 04             	shl    eax,0x4
   12f01:	05 04 88 02 00       	add    eax,0x28804
   12f06:	8b 10                	mov    edx,DWORD PTR [eax]
   12f08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12f0b:	c1 e0 04             	shl    eax,0x4
   12f0e:	05 00 88 02 00       	add    eax,0x28800
   12f13:	8b 00                	mov    eax,DWORD PTR [eax]
   12f15:	83 ec 04             	sub    esp,0x4
   12f18:	52                   	push   edx
   12f19:	50                   	push   eax
   12f1a:	68 93 5e 04 00       	push   0x45e93
   12f1f:	e8 93 41 01 00       	call   270b7 <printk>
   12f24:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:383 (discriminator 3)
}

void HIGH_CODE_SECTION helpMe()
{
    printk("Help:\n");
    for (unsigned cnt=0;cnt<sizeof(cmds)/sizeof(command_table_t);cnt++)
   12f27:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:383 (discriminator 1)
   12f2b:	83 7d f4 1a          	cmp    DWORD PTR [ebp-0xc],0x1a
   12f2f:	76 ca                	jbe    12efb <helpMe+0x1f>
/home/yogi/src/os/chrisOS/src/bishell.c:385
        printk("\t%s: %s\n", cmds[cnt].name, cmds[cnt].description);
}
   12f31:	90                   	nop
   12f32:	c9                   	leave  
   12f33:	c3                   	ret    

00012f34 <inPortB>:
inPortB():
/home/yogi/src/os/chrisOS/src/bishell.c:388

void HIGH_CODE_SECTION inPortB(char* cmdline)
{
   12f34:	55                   	push   ebp
   12f35:	89 e5                	mov    ebp,esp
   12f37:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:390
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   12f3d:	83 ec 04             	sub    esp,0x4
   12f40:	68 00 14 00 00       	push   0x1400
   12f45:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   12f4b:	50                   	push   eax
   12f4c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12f4f:	e8 f6 f4 ff ff       	call   1244a <parseParamsShell>
   12f54:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:392
   
   uint8_t inVal=inb(strtoul(params[0],0,16));
   12f57:	83 ec 04             	sub    esp,0x4
   12f5a:	6a 10                	push   0x10
   12f5c:	6a 00                	push   0x0
   12f5e:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   12f64:	50                   	push   eax
   12f65:	e8 46 43 01 00       	call   272b0 <strtoul>
   12f6a:	83 c4 10             	add    esp,0x10
   12f6d:	0f b7 c0             	movzx  eax,ax
   12f70:	83 ec 0c             	sub    esp,0xc
   12f73:	50                   	push   eax
   12f74:	e8 6e f2 ff ff       	call   121e7 <inb>
   12f79:	83 c4 10             	add    esp,0x10
   12f7c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/bishell.c:393
   printk("0x%02X\n",inVal);
   12f7f:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   12f83:	83 ec 08             	sub    esp,0x8
   12f86:	50                   	push   eax
   12f87:	68 9c 5e 04 00       	push   0x45e9c
   12f8c:	e8 26 41 01 00       	call   270b7 <printk>
   12f91:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:394
}
   12f94:	90                   	nop
   12f95:	c9                   	leave  
   12f96:	c3                   	ret    

00012f97 <inPortW>:
inPortW():
/home/yogi/src/os/chrisOS/src/bishell.c:397

void HIGH_CODE_SECTION inPortW(char* cmdline)
{
   12f97:	55                   	push   ebp
   12f98:	89 e5                	mov    ebp,esp
   12f9a:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:399
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   12fa0:	83 ec 04             	sub    esp,0x4
   12fa3:	68 00 14 00 00       	push   0x1400
   12fa8:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   12fae:	50                   	push   eax
   12faf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12fb2:	e8 93 f4 ff ff       	call   1244a <parseParamsShell>
   12fb7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:401
   
   uint8_t inVal=inw(strtoul(params[0],0,16));
   12fba:	83 ec 04             	sub    esp,0x4
   12fbd:	6a 10                	push   0x10
   12fbf:	6a 00                	push   0x0
   12fc1:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   12fc7:	50                   	push   eax
   12fc8:	e8 e3 42 01 00       	call   272b0 <strtoul>
   12fcd:	83 c4 10             	add    esp,0x10
   12fd0:	0f b7 c0             	movzx  eax,ax
   12fd3:	83 ec 0c             	sub    esp,0xc
   12fd6:	50                   	push   eax
   12fd7:	e8 28 f2 ff ff       	call   12204 <inw>
   12fdc:	83 c4 10             	add    esp,0x10
   12fdf:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/bishell.c:402
   printk("0x%04X\n",inVal);
   12fe2:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   12fe6:	83 ec 08             	sub    esp,0x8
   12fe9:	50                   	push   eax
   12fea:	68 a4 5e 04 00       	push   0x45ea4
   12fef:	e8 c3 40 01 00       	call   270b7 <printk>
   12ff4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:403
}
   12ff7:	90                   	nop
   12ff8:	c9                   	leave  
   12ff9:	c3                   	ret    

00012ffa <inPortD>:
inPortD():
/home/yogi/src/os/chrisOS/src/bishell.c:406

void HIGH_CODE_SECTION inPortD(char* cmdline)
{
   12ffa:	55                   	push   ebp
   12ffb:	89 e5                	mov    ebp,esp
   12ffd:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:408
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13003:	83 ec 04             	sub    esp,0x4
   13006:	68 00 14 00 00       	push   0x1400
   1300b:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   13011:	50                   	push   eax
   13012:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13015:	e8 30 f4 ff ff       	call   1244a <parseParamsShell>
   1301a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:410
   
   uint8_t inVal=inl(strtoul(params[0],0,16));
   1301d:	83 ec 04             	sub    esp,0x4
   13020:	6a 10                	push   0x10
   13022:	6a 00                	push   0x0
   13024:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   1302a:	50                   	push   eax
   1302b:	e8 80 42 01 00       	call   272b0 <strtoul>
   13030:	83 c4 10             	add    esp,0x10
   13033:	0f b7 c0             	movzx  eax,ax
   13036:	83 ec 0c             	sub    esp,0xc
   13039:	50                   	push   eax
   1303a:	e8 e4 f1 ff ff       	call   12223 <inl>
   1303f:	83 c4 10             	add    esp,0x10
   13042:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/bishell.c:411
   printk("0x%08X\n",inVal);
   13045:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   13049:	83 ec 08             	sub    esp,0x8
   1304c:	50                   	push   eax
   1304d:	68 ac 5e 04 00       	push   0x45eac
   13052:	e8 60 40 01 00       	call   270b7 <printk>
   13057:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:412
}
   1305a:	90                   	nop
   1305b:	c9                   	leave  
   1305c:	c3                   	ret    

0001305d <outPortB>:
outPortB():
/home/yogi/src/os/chrisOS/src/bishell.c:415

void HIGH_CODE_SECTION outPortB(char* cmdline)
{
   1305d:	55                   	push   ebp
   1305e:	89 e5                	mov    ebp,esp
   13060:	53                   	push   ebx
   13061:	81 ec 04 14 00 00    	sub    esp,0x1404
/home/yogi/src/os/chrisOS/src/bishell.c:417
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13067:	83 ec 04             	sub    esp,0x4
   1306a:	68 00 14 00 00       	push   0x1400
   1306f:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   13075:	50                   	push   eax
   13076:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13079:	e8 cc f3 ff ff       	call   1244a <parseParamsShell>
   1307e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:419
   
   outb(strtoul(params[0],0,16),strtoul(params[1],0,16));
   13081:	83 ec 04             	sub    esp,0x4
   13084:	6a 10                	push   0x10
   13086:	6a 00                	push   0x0
   13088:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   1308e:	05 00 02 00 00       	add    eax,0x200
   13093:	50                   	push   eax
   13094:	e8 17 42 01 00       	call   272b0 <strtoul>
   13099:	83 c4 10             	add    esp,0x10
   1309c:	0f b6 d8             	movzx  ebx,al
   1309f:	83 ec 04             	sub    esp,0x4
   130a2:	6a 10                	push   0x10
   130a4:	6a 00                	push   0x0
   130a6:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   130ac:	50                   	push   eax
   130ad:	e8 fe 41 01 00       	call   272b0 <strtoul>
   130b2:	83 c4 10             	add    esp,0x10
   130b5:	0f b7 c0             	movzx  eax,ax
   130b8:	83 ec 08             	sub    esp,0x8
   130bb:	53                   	push   ebx
   130bc:	50                   	push   eax
   130bd:	e8 cd f0 ff ff       	call   1218f <outb>
   130c2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:420
}
   130c5:	90                   	nop
   130c6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   130c9:	c9                   	leave  
   130ca:	c3                   	ret    

000130cb <outPortW>:
outPortW():
/home/yogi/src/os/chrisOS/src/bishell.c:423

void HIGH_CODE_SECTION outPortW(char* cmdline)
{
   130cb:	55                   	push   ebp
   130cc:	89 e5                	mov    ebp,esp
   130ce:	53                   	push   ebx
   130cf:	81 ec 04 14 00 00    	sub    esp,0x1404
/home/yogi/src/os/chrisOS/src/bishell.c:425
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   130d5:	83 ec 04             	sub    esp,0x4
   130d8:	68 00 14 00 00       	push   0x1400
   130dd:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   130e3:	50                   	push   eax
   130e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   130e7:	e8 5e f3 ff ff       	call   1244a <parseParamsShell>
   130ec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:427
   
   outw(strtoul(params[0],0,16),strtoul(params[1],0,16));
   130ef:	83 ec 04             	sub    esp,0x4
   130f2:	6a 10                	push   0x10
   130f4:	6a 00                	push   0x0
   130f6:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   130fc:	05 00 02 00 00       	add    eax,0x200
   13101:	50                   	push   eax
   13102:	e8 a9 41 01 00       	call   272b0 <strtoul>
   13107:	83 c4 10             	add    esp,0x10
   1310a:	0f b7 d8             	movzx  ebx,ax
   1310d:	83 ec 04             	sub    esp,0x4
   13110:	6a 10                	push   0x10
   13112:	6a 00                	push   0x0
   13114:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   1311a:	50                   	push   eax
   1311b:	e8 90 41 01 00       	call   272b0 <strtoul>
   13120:	83 c4 10             	add    esp,0x10
   13123:	0f b7 c0             	movzx  eax,ax
   13126:	83 ec 08             	sub    esp,0x8
   13129:	53                   	push   ebx
   1312a:	50                   	push   eax
   1312b:	e8 7e f0 ff ff       	call   121ae <outw>
   13130:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:428
}
   13133:	90                   	nop
   13134:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   13137:	c9                   	leave  
   13138:	c3                   	ret    

00013139 <outPortD>:
outPortD():
/home/yogi/src/os/chrisOS/src/bishell.c:431

void HIGH_CODE_SECTION outPortD(char* cmdline)
{
   13139:	55                   	push   ebp
   1313a:	89 e5                	mov    ebp,esp
   1313c:	53                   	push   ebx
   1313d:	81 ec 04 14 00 00    	sub    esp,0x1404
/home/yogi/src/os/chrisOS/src/bishell.c:433
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13143:	83 ec 04             	sub    esp,0x4
   13146:	68 00 14 00 00       	push   0x1400
   1314b:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   13151:	50                   	push   eax
   13152:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13155:	e8 f0 f2 ff ff       	call   1244a <parseParamsShell>
   1315a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:435
   
   outl(strtoul(params[0],0,16),strtoul(params[1],0,16));
   1315d:	83 ec 04             	sub    esp,0x4
   13160:	6a 10                	push   0x10
   13162:	6a 00                	push   0x0
   13164:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   1316a:	05 00 02 00 00       	add    eax,0x200
   1316f:	50                   	push   eax
   13170:	e8 3b 41 01 00       	call   272b0 <strtoul>
   13175:	83 c4 10             	add    esp,0x10
   13178:	89 c3                	mov    ebx,eax
   1317a:	83 ec 04             	sub    esp,0x4
   1317d:	6a 10                	push   0x10
   1317f:	6a 00                	push   0x0
   13181:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   13187:	50                   	push   eax
   13188:	e8 23 41 01 00       	call   272b0 <strtoul>
   1318d:	83 c4 10             	add    esp,0x10
   13190:	0f b7 c0             	movzx  eax,ax
   13193:	83 ec 08             	sub    esp,0x8
   13196:	53                   	push   ebx
   13197:	50                   	push   eax
   13198:	e8 32 f0 ff ff       	call   121cf <outl>
   1319d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:436
}
   131a0:	90                   	nop
   131a1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   131a4:	c9                   	leave  
   131a5:	c3                   	ret    

000131a6 <writeBytes>:
writeBytes():
/home/yogi/src/os/chrisOS/src/bishell.c:439

void HIGH_CODE_SECTION writeBytes(char* cmdline)
{
   131a6:	55                   	push   ebp
   131a7:	89 e5                	mov    ebp,esp
   131a9:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:441
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   131af:	83 ec 04             	sub    esp,0x4
   131b2:	68 00 14 00 00       	push   0x1400
   131b7:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   131bd:	50                   	push   eax
   131be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   131c1:	e8 84 f2 ff ff       	call   1244a <parseParamsShell>
   131c6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:443

    uint8_t* bytes=(uint8_t*)strtoul(params[0],0,16);
   131c9:	83 ec 04             	sub    esp,0x4
   131cc:	6a 10                	push   0x10
   131ce:	6a 00                	push   0x0
   131d0:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   131d6:	50                   	push   eax
   131d7:	e8 d4 40 01 00       	call   272b0 <strtoul>
   131dc:	83 c4 10             	add    esp,0x10
   131df:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:444
    bytes[0]=strtoul(params[1],0,16);
   131e2:	83 ec 04             	sub    esp,0x4
   131e5:	6a 10                	push   0x10
   131e7:	6a 00                	push   0x0
   131e9:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   131ef:	05 00 02 00 00       	add    eax,0x200
   131f4:	50                   	push   eax
   131f5:	e8 b6 40 01 00       	call   272b0 <strtoul>
   131fa:	83 c4 10             	add    esp,0x10
   131fd:	89 c2                	mov    edx,eax
   131ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13202:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/bishell.c:445
}
   13204:	90                   	nop
   13205:	c9                   	leave  
   13206:	c3                   	ret    

00013207 <writeWords>:
writeWords():
/home/yogi/src/os/chrisOS/src/bishell.c:448

void HIGH_CODE_SECTION writeWords(char* cmdline)
{
   13207:	55                   	push   ebp
   13208:	89 e5                	mov    ebp,esp
   1320a:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:450
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13210:	83 ec 04             	sub    esp,0x4
   13213:	68 00 14 00 00       	push   0x1400
   13218:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   1321e:	50                   	push   eax
   1321f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13222:	e8 23 f2 ff ff       	call   1244a <parseParamsShell>
   13227:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:452

    uint16_t* words=(uint16_t*)strtoul(params[0],0,16);
   1322a:	83 ec 04             	sub    esp,0x4
   1322d:	6a 10                	push   0x10
   1322f:	6a 00                	push   0x0
   13231:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   13237:	50                   	push   eax
   13238:	e8 73 40 01 00       	call   272b0 <strtoul>
   1323d:	83 c4 10             	add    esp,0x10
   13240:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:453
    words[0]=strtoul(params[1],0,16);
   13243:	83 ec 04             	sub    esp,0x4
   13246:	6a 10                	push   0x10
   13248:	6a 00                	push   0x0
   1324a:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   13250:	05 00 02 00 00       	add    eax,0x200
   13255:	50                   	push   eax
   13256:	e8 55 40 01 00       	call   272b0 <strtoul>
   1325b:	83 c4 10             	add    esp,0x10
   1325e:	89 c2                	mov    edx,eax
   13260:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13263:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/bishell.c:454
}
   13266:	90                   	nop
   13267:	c9                   	leave  
   13268:	c3                   	ret    

00013269 <writeDWords>:
writeDWords():
/home/yogi/src/os/chrisOS/src/bishell.c:457

void HIGH_CODE_SECTION writeDWords(char* cmdline)
{
   13269:	55                   	push   ebp
   1326a:	89 e5                	mov    ebp,esp
   1326c:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:459
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13272:	83 ec 04             	sub    esp,0x4
   13275:	68 00 14 00 00       	push   0x1400
   1327a:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   13280:	50                   	push   eax
   13281:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13284:	e8 c1 f1 ff ff       	call   1244a <parseParamsShell>
   13289:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:461

    uint32_t* dwords=(uint32_t*)strtoul(params[0],0,16);
   1328c:	83 ec 04             	sub    esp,0x4
   1328f:	6a 10                	push   0x10
   13291:	6a 00                	push   0x0
   13293:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   13299:	50                   	push   eax
   1329a:	e8 11 40 01 00       	call   272b0 <strtoul>
   1329f:	83 c4 10             	add    esp,0x10
   132a2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:462
    dwords[0]=strtoul(params[1],0,16);
   132a5:	83 ec 04             	sub    esp,0x4
   132a8:	6a 10                	push   0x10
   132aa:	6a 00                	push   0x0
   132ac:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   132b2:	05 00 02 00 00       	add    eax,0x200
   132b7:	50                   	push   eax
   132b8:	e8 f3 3f 01 00       	call   272b0 <strtoul>
   132bd:	83 c4 10             	add    esp,0x10
   132c0:	89 c2                	mov    edx,eax
   132c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   132c5:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/bishell.c:463
}
   132c7:	90                   	nop
   132c8:	c9                   	leave  
   132c9:	c3                   	ret    

000132ca <showMapping>:
showMapping():
/home/yogi/src/os/chrisOS/src/bishell.c:466

void HIGH_CODE_SECTION showMapping(char* cmdline)
{
   132ca:	55                   	push   ebp
   132cb:	89 e5                	mov    ebp,esp
   132cd:	57                   	push   edi
   132ce:	56                   	push   esi
   132cf:	53                   	push   ebx
   132d0:	81 ec 2c 14 00 00    	sub    esp,0x142c
/home/yogi/src/os/chrisOS/src/bishell.c:468
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   132d6:	83 ec 04             	sub    esp,0x4
   132d9:	68 00 14 00 00       	push   0x1400
   132de:	8d 85 e4 eb ff ff    	lea    eax,[ebp-0x141c]
   132e4:	50                   	push   eax
   132e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   132e8:	e8 5d f1 ff ff       	call   1244a <parseParamsShell>
   132ed:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:470

    uintptr_t lAddress=strtoul(params[0],0,16);
   132f0:	83 ec 04             	sub    esp,0x4
   132f3:	6a 10                	push   0x10
   132f5:	6a 00                	push   0x0
   132f7:	8d 85 e4 eb ff ff    	lea    eax,[ebp-0x141c]
   132fd:	50                   	push   eax
   132fe:	e8 ad 3f 01 00       	call   272b0 <strtoul>
   13303:	83 c4 10             	add    esp,0x10
   13306:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:471
    printk("\tPD address=0x%08X, \n\tPD value=0x%08X, \n\tPT address=0x%08X, \n\tPT value=0x%08X\n\tPhysical Address=0x%08X\n",kPagingGet4kPDEntryAddress(lAddress),kPagingGet4kPDEntryValue(lAddress),kPagingGet4kPTEntryAddress(lAddress),kPagingGet4kPTEntryValue(lAddress),(kPagingGet4kPTEntryValue(lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF));
   13309:	83 ec 0c             	sub    esp,0xc
   1330c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1330f:	e8 97 e1 ff ff       	call   114ab <kPagingGet4kPTEntryValue>
   13314:	83 c4 10             	add    esp,0x10
   13317:	25 00 f0 ff ff       	and    eax,0xfffff000
   1331c:	89 c2                	mov    edx,eax
   1331e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   13321:	25 ff 0f 00 00       	and    eax,0xfff
   13326:	09 c2                	or     edx,eax
   13328:	89 d3                	mov    ebx,edx
   1332a:	83 ec 0c             	sub    esp,0xc
   1332d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   13330:	e8 76 e1 ff ff       	call   114ab <kPagingGet4kPTEntryValue>
   13335:	83 c4 10             	add    esp,0x10
   13338:	89 85 d4 eb ff ff    	mov    DWORD PTR [ebp-0x142c],eax
   1333e:	83 ec 0c             	sub    esp,0xc
   13341:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   13344:	e8 2c e1 ff ff       	call   11475 <kPagingGet4kPTEntryAddress>
   13349:	83 c4 10             	add    esp,0x10
   1334c:	89 c7                	mov    edi,eax
   1334e:	83 ec 0c             	sub    esp,0xc
   13351:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   13354:	e8 93 e0 ff ff       	call   113ec <kPagingGet4kPDEntryValue>
   13359:	83 c4 10             	add    esp,0x10
   1335c:	89 c6                	mov    esi,eax
   1335e:	83 ec 0c             	sub    esp,0xc
   13361:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   13364:	e8 ca e0 ff ff       	call   11433 <kPagingGet4kPDEntryAddress>
   13369:	83 c4 10             	add    esp,0x10
   1336c:	83 ec 08             	sub    esp,0x8
   1336f:	53                   	push   ebx
   13370:	ff b5 d4 eb ff ff    	push   DWORD PTR [ebp-0x142c]
   13376:	57                   	push   edi
   13377:	56                   	push   esi
   13378:	50                   	push   eax
   13379:	68 b4 5e 04 00       	push   0x45eb4
   1337e:	e8 34 3d 01 00       	call   270b7 <printk>
   13383:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/bishell.c:472
}
   13386:	90                   	nop
   13387:	8d 65 f4             	lea    esp,[ebp-0xc]
   1338a:	5b                   	pop    ebx
   1338b:	5e                   	pop    esi
   1338c:	5f                   	pop    edi
   1338d:	5d                   	pop    ebp
   1338e:	c3                   	ret    

0001338f <biShell>:
biShell():
/home/yogi/src/os/chrisOS/src/bishell.c:598
    exec (params[0],paramCount,lTemp);
    strcpy(sExecutingProgram,sbiShellProgramName);
}

void HIGH_CODE_SECTION biShell()
{
   1338f:	55                   	push   ebp
   13390:	89 e5                	mov    ebp,esp
   13392:	53                   	push   ebx
   13393:	81 ec f4 0a 00 00    	sub    esp,0xaf4
/home/yogi/src/os/chrisOS/src/bishell.c:600
    char lCommand[256];
    unsigned lCurrKey=0;
   13399:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:601
    int lCurrKeyCount=0;
   133a0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:603
    char commands[50][50];
    int commandsPtr=0;
   133a7:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:604
    int commandBuffPtr=0;
   133ae:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:605
    int commandWasFromThisBufferPtr=0;
   133b5:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:606
    bool stopCountingKeys=false;
   133bc:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:607
    strcpy(sExecutingProgram,sbiShellProgramName);
   133c0:	83 ec 08             	sub    esp,0x8
   133c3:	68 c0 89 02 00       	push   0x289c0
   133c8:	68 40 b4 08 00       	push   0x8b440
   133cd:	e8 46 3e 01 00       	call   27218 <strcpy>
   133d2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:608
    puts("\nWelcome to biShell ... hang a while!\n");
   133d5:	83 ec 0c             	sub    esp,0xc
   133d8:	68 1c 5f 04 00       	push   0x45f1c
   133dd:	e8 24 4c 00 00       	call   18006 <puts>
   133e2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:612
    while (1==1)
    {
getACommand:
        lCurrKey=0;
   133e5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:613
        lCurrKeyCount=0;
   133ec:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:614
        memset(lCommand,0,256);
   133f3:	83 ec 04             	sub    esp,0x4
   133f6:	68 00 01 00 00       	push   0x100
   133fb:	6a 00                	push   0x0
   133fd:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13403:	50                   	push   eax
   13404:	e8 24 1c 01 00       	call   2502d <memset>
   13409:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:615
        printk("%s> ",sExecutingProgram);
   1340c:	83 ec 08             	sub    esp,0x8
   1340f:	68 40 b4 08 00       	push   0x8b440
   13414:	68 43 5f 04 00       	push   0x45f43
   13419:	e8 99 3c 01 00       	call   270b7 <printk>
   1341e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:617
getAKey:
        lCurrKey=0;
   13421:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:618
        while(lCurrKey==0)
   13428:	eb 0d                	jmp    13437 <biShell+0xa8>
/home/yogi/src/os/chrisOS/src/bishell.c:620
        {
            __asm__("sti\nhlt\n");
   1342a:	fb                   	sti    
   1342b:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/bishell.c:621
            lCurrKey=getKeyboardKey();
   1342c:	e8 b4 de ff ff       	call   112e5 <getKeyboardKey>
   13431:	0f b6 c0             	movzx  eax,al
   13434:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:618
        lCurrKeyCount=0;
        memset(lCommand,0,256);
        printk("%s> ",sExecutingProgram);
getAKey:
        lCurrKey=0;
        while(lCurrKey==0)
   13437:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1343b:	74 ed                	je     1342a <biShell+0x9b>
/home/yogi/src/os/chrisOS/src/bishell.c:624
        {
            __asm__("sti\nhlt\n");
            lCurrKey=getKeyboardKey();
        }
        //printk("key='%08X'",lCurrKey);
        if(lCurrKey==0xc8) //up
   1343d:	81 7d f4 c8 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xc8
   13444:	0f 85 8f 00 00 00    	jne    134d9 <biShell+0x14a>
/home/yogi/src/os/chrisOS/src/bishell.c:626
        {
            if (commandBuffPtr>=0)
   1344a:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1344e:	78 d1                	js     13421 <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:628
            {
                int lTemp=cursorGetPosY();
   13450:	e8 22 4b 00 00       	call   17f77 <cursorGetPosY>
   13455:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/chrisOS/src/bishell.c:629
                strcpy(lCommand,commands[--commandBuffPtr]);
   13458:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
   1345c:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   13462:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13465:	6b c0 32             	imul   eax,eax,0x32
   13468:	01 d0                	add    eax,edx
   1346a:	83 ec 08             	sub    esp,0x8
   1346d:	50                   	push   eax
   1346e:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13474:	50                   	push   eax
   13475:	e8 9e 3d 01 00       	call   27218 <strcpy>
   1347a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:630
                commandWasFromThisBufferPtr=commandBuffPtr;
   1347d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13480:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:631
                cursorMoveTo(4,lTemp);
   13483:	83 ec 08             	sub    esp,0x8
   13486:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
   13489:	6a 04                	push   0x4
   1348b:	e8 47 4a 00 00       	call   17ed7 <cursorMoveTo>
   13490:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:632
                printk("%s                                                                                ",lCommand);
   13493:	83 ec 08             	sub    esp,0x8
   13496:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   1349c:	50                   	push   eax
   1349d:	68 48 5f 04 00       	push   0x45f48
   134a2:	e8 10 3c 01 00       	call   270b7 <printk>
   134a7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:633
                lCurrKeyCount=strlen(lCommand);
   134aa:	83 ec 0c             	sub    esp,0xc
   134ad:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   134b3:	50                   	push   eax
   134b4:	e8 cf 3d 01 00       	call   27288 <strlen>
   134b9:	83 c4 10             	add    esp,0x10
   134bc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:634
                cursorMoveTo(4+lCurrKeyCount,lTemp);
   134bf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   134c2:	83 c0 04             	add    eax,0x4
   134c5:	83 ec 08             	sub    esp,0x8
   134c8:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
   134cb:	50                   	push   eax
   134cc:	e8 06 4a 00 00       	call   17ed7 <cursorMoveTo>
   134d1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:635
                goto getAKey;
   134d4:	e9 48 ff ff ff       	jmp    13421 <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:640
            }
            else
                goto getAKey;
        }
        if (lCurrKey==0xD0)  //down
   134d9:	81 7d f4 d0 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xd0
   134e0:	0f 85 95 00 00 00    	jne    1357b <biShell+0x1ec>
/home/yogi/src/os/chrisOS/src/bishell.c:642
        {
            if (commandBuffPtr<=commandsPtr)
   134e6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   134e9:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   134ec:	0f 8f 2f ff ff ff    	jg     13421 <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:644
            {
                int lTemp=cursorGetPosY();
   134f2:	e8 80 4a 00 00       	call   17f77 <cursorGetPosY>
   134f7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/chrisOS/src/bishell.c:645
                strcpy(lCommand,commands[++commandBuffPtr]);
   134fa:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
   134fe:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   13504:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13507:	6b c0 32             	imul   eax,eax,0x32
   1350a:	01 d0                	add    eax,edx
   1350c:	83 ec 08             	sub    esp,0x8
   1350f:	50                   	push   eax
   13510:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13516:	50                   	push   eax
   13517:	e8 fc 3c 01 00       	call   27218 <strcpy>
   1351c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:646
                commandWasFromThisBufferPtr=commandBuffPtr;
   1351f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13522:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:647
                cursorMoveTo(4,lTemp);
   13525:	83 ec 08             	sub    esp,0x8
   13528:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   1352b:	6a 04                	push   0x4
   1352d:	e8 a5 49 00 00       	call   17ed7 <cursorMoveTo>
   13532:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:648
                printk("%s                                                                                ",lCommand);
   13535:	83 ec 08             	sub    esp,0x8
   13538:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   1353e:	50                   	push   eax
   1353f:	68 48 5f 04 00       	push   0x45f48
   13544:	e8 6e 3b 01 00       	call   270b7 <printk>
   13549:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:649
                lCurrKeyCount=strlen(lCommand);
   1354c:	83 ec 0c             	sub    esp,0xc
   1354f:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13555:	50                   	push   eax
   13556:	e8 2d 3d 01 00       	call   27288 <strlen>
   1355b:	83 c4 10             	add    esp,0x10
   1355e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:650
                cursorMoveTo(4+lCurrKeyCount,lTemp);
   13561:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13564:	83 c0 04             	add    eax,0x4
   13567:	83 ec 08             	sub    esp,0x8
   1356a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   1356d:	50                   	push   eax
   1356e:	e8 64 49 00 00       	call   17ed7 <cursorMoveTo>
   13573:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:651
                goto getAKey;
   13576:	e9 a6 fe ff ff       	jmp    13421 <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:657
            }
            else
                goto getAKey;
            
        }   
        if (lCurrKey==0xcb) //left
   1357b:	81 7d f4 cb 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xcb
   13582:	75 33                	jne    135b7 <biShell+0x228>
/home/yogi/src/os/chrisOS/src/bishell.c:659
        {
            if (cursorGetPosX()>4)
   13584:	e8 aa 49 00 00       	call   17f33 <cursorGetPosX>
   13589:	83 f8 04             	cmp    eax,0x4
   1358c:	0f 8e 8f fe ff ff    	jle    13421 <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:661
            {
                cursorMoveTo(cursorGetPosX()-1,cursorGetPosY());
   13592:	e8 e0 49 00 00       	call   17f77 <cursorGetPosY>
   13597:	89 c3                	mov    ebx,eax
   13599:	e8 95 49 00 00       	call   17f33 <cursorGetPosX>
   1359e:	83 e8 01             	sub    eax,0x1
   135a1:	83 ec 08             	sub    esp,0x8
   135a4:	53                   	push   ebx
   135a5:	50                   	push   eax
   135a6:	e8 2c 49 00 00       	call   17ed7 <cursorMoveTo>
   135ab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:662
                stopCountingKeys=true;
   135ae:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:664
            }
            goto getAKey;
   135b2:	e9 6a fe ff ff       	jmp    13421 <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:666
        }
        if (lCurrKey=='\b')
   135b7:	83 7d f4 08          	cmp    DWORD PTR [ebp-0xc],0x8
   135bb:	75 61                	jne    1361e <biShell+0x28f>
/home/yogi/src/os/chrisOS/src/bishell.c:668
        {
            if (lCurrKeyCount>=0)
   135bd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   135c1:	0f 88 5a fe ff ff    	js     13421 <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:670
            {
                int lTemp=cursorGetPosY();
   135c7:	e8 ab 49 00 00       	call   17f77 <cursorGetPosY>
   135cc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:672

                lCommand[lCurrKeyCount]=' ';
   135cf:	8d 95 cc fe ff ff    	lea    edx,[ebp-0x134]
   135d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   135d8:	01 d0                	add    eax,edx
   135da:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/chrisOS/src/bishell.c:673
                lCurrKeyCount--;
   135dd:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:674
                cursorMoveTo(cursorGetPosX()-1,lTemp);
   135e1:	e8 4d 49 00 00       	call   17f33 <cursorGetPosX>
   135e6:	83 e8 01             	sub    eax,0x1
   135e9:	83 ec 08             	sub    esp,0x8
   135ec:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   135ef:	50                   	push   eax
   135f0:	e8 e2 48 00 00       	call   17ed7 <cursorMoveTo>
   135f5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:675
                putc(' ');
   135f8:	83 ec 0c             	sub    esp,0xc
   135fb:	6a 20                	push   0x20
   135fd:	e8 34 4a 00 00       	call   18036 <putc>
   13602:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:676
                cursorMoveTo(cursorGetPosX()-1,lTemp);
   13605:	e8 29 49 00 00       	call   17f33 <cursorGetPosX>
   1360a:	83 e8 01             	sub    eax,0x1
   1360d:	83 ec 08             	sub    esp,0x8
   13610:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   13613:	50                   	push   eax
   13614:	e8 be 48 00 00       	call   17ed7 <cursorMoveTo>
   13619:	83 c4 10             	add    esp,0x10
   1361c:	eb 61                	jmp    1367f <biShell+0x2f0>
/home/yogi/src/os/chrisOS/src/bishell.c:681
            }
            else
                goto getAKey;
        }
        else if (lCurrKey==0xa)
   1361e:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   13622:	75 30                	jne    13654 <biShell+0x2c5>
/home/yogi/src/os/chrisOS/src/bishell.c:683
        {
            putc(lCurrKey);
   13624:	83 ec 0c             	sub    esp,0xc
   13627:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1362a:	e8 07 4a 00 00       	call   18036 <putc>
   1362f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:684
            lCommand[lCurrKeyCount++]='\0';
   13632:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13635:	8d 50 01             	lea    edx,[eax+0x1]
   13638:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1363b:	c6 84 05 cc fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x134],0x0
   13642:	00 
/home/yogi/src/os/chrisOS/src/bishell.c:685
            goto doneGettingKeys;
   13643:	90                   	nop
/home/yogi/src/os/chrisOS/src/bishell.c:698
        }
        stopCountingKeys=false;
        goto getAKey;
//        gets(lCommand,50);
doneGettingKeys:
        if (lCommand[0]==0x0)
   13644:	0f b6 85 cc fe ff ff 	movzx  eax,BYTE PTR [ebp-0x134]
   1364b:	84 c0                	test   al,al
   1364d:	75 39                	jne    13688 <biShell+0x2f9>
   1364f:	e9 91 fd ff ff       	jmp    133e5 <biShell+0x56>
/home/yogi/src/os/chrisOS/src/bishell.c:689
            lCommand[lCurrKeyCount++]='\0';
            goto doneGettingKeys;
        }
        else
        {
            lCommand[lCurrKeyCount++]=lCurrKey;
   13654:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13657:	8d 50 01             	lea    edx,[eax+0x1]
   1365a:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1365d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   13660:	88 94 05 cc fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x134],dl
/home/yogi/src/os/chrisOS/src/bishell.c:690
            if (stopCountingKeys)
   13667:	80 7d e3 00          	cmp    BYTE PTR [ebp-0x1d],0x0
   1366b:	74 04                	je     13671 <biShell+0x2e2>
/home/yogi/src/os/chrisOS/src/bishell.c:691
                    lCurrKeyCount--;
   1366d:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:692
            putc(lCurrKey);
   13671:	83 ec 0c             	sub    esp,0xc
   13674:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   13677:	e8 ba 49 00 00       	call   18036 <putc>
   1367c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:694
        }
        stopCountingKeys=false;
   1367f:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:695
        goto getAKey;
   13683:	e9 99 fd ff ff       	jmp    13421 <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:700
//        gets(lCommand,50);
doneGettingKeys:
        if (lCommand[0]==0x0)
            goto getACommand;
        int i = findCommand(lCommand);
   13688:	83 ec 0c             	sub    esp,0xc
   1368b:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13691:	50                   	push   eax
   13692:	e8 4a ed ff ff       	call   123e1 <findCommand>
   13697:	83 c4 10             	add    esp,0x10
   1369a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/bishell.c:702

        if(i>0)
   1369d:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
   136a1:	0f 8e f8 00 00 00    	jle    1379f <biShell+0x410>
/home/yogi/src/os/chrisOS/src/bishell.c:704
        {
            i--;
   136a7:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:706
            //printk("Executing command # %u (%s)\n", i, cmds[i].name);
            command_function = cmds[i].function;
   136ab:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   136ae:	c1 e0 04             	shl    eax,0x4
   136b1:	05 08 88 02 00       	add    eax,0x28808
   136b6:	8b 00                	mov    eax,DWORD PTR [eax]
   136b8:	a3 58 63 09 00       	mov    ds:0x96358,eax
/home/yogi/src/os/chrisOS/src/bishell.c:707
            command_function_p = cmds[i].function;
   136bd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   136c0:	c1 e0 04             	shl    eax,0x4
   136c3:	05 08 88 02 00       	add    eax,0x28808
   136c8:	8b 00                	mov    eax,DWORD PTR [eax]
   136ca:	a3 a4 b4 08 00       	mov    ds:0x8b4a4,eax
/home/yogi/src/os/chrisOS/src/bishell.c:708
            if (cmds[i].paramCount==0)
   136cf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   136d2:	c1 e0 04             	shl    eax,0x4
   136d5:	05 0c 88 02 00       	add    eax,0x2880c
   136da:	8b 00                	mov    eax,DWORD PTR [eax]
   136dc:	85 c0                	test   eax,eax
   136de:	75 09                	jne    136e9 <biShell+0x35a>
/home/yogi/src/os/chrisOS/src/bishell.c:709
                command_function();
   136e0:	a1 58 63 09 00       	mov    eax,ds:0x96358
   136e5:	ff d0                	call   eax
   136e7:	eb 33                	jmp    1371c <biShell+0x38d>
/home/yogi/src/os/chrisOS/src/bishell.c:712
            else
            {
                command_function_p(&lCommand[strlen(cmds[i].name)+1]);  
   136e9:	8b 1d a4 b4 08 00    	mov    ebx,DWORD PTR ds:0x8b4a4
   136ef:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   136f2:	c1 e0 04             	shl    eax,0x4
   136f5:	05 00 88 02 00       	add    eax,0x28800
   136fa:	8b 00                	mov    eax,DWORD PTR [eax]
   136fc:	83 ec 0c             	sub    esp,0xc
   136ff:	50                   	push   eax
   13700:	e8 83 3b 01 00       	call   27288 <strlen>
   13705:	83 c4 10             	add    esp,0x10
   13708:	8d 50 01             	lea    edx,[eax+0x1]
   1370b:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13711:	01 d0                	add    eax,edx
   13713:	83 ec 0c             	sub    esp,0xc
   13716:	50                   	push   eax
   13717:	ff d3                	call   ebx
   13719:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:714
            }
            if (commandWasFromThisBufferPtr)
   1371c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   13720:	74 4b                	je     1376d <biShell+0x3de>
/home/yogi/src/os/chrisOS/src/bishell.c:716
            {
                for (int cnt=commandWasFromThisBufferPtr;cnt<=commandsPtr;cnt++)
   13722:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   13725:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
   13728:	eb 30                	jmp    1375a <biShell+0x3cb>
/home/yogi/src/os/chrisOS/src/bishell.c:717 (discriminator 3)
                    strcpy(commands[cnt],commands[cnt+1]);
   1372a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1372d:	83 c0 01             	add    eax,0x1
   13730:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   13736:	6b c0 32             	imul   eax,eax,0x32
   13739:	01 c2                	add    edx,eax
   1373b:	8d 8d 08 f5 ff ff    	lea    ecx,[ebp-0xaf8]
   13741:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   13744:	6b c0 32             	imul   eax,eax,0x32
   13747:	01 c8                	add    eax,ecx
   13749:	83 ec 08             	sub    esp,0x8
   1374c:	52                   	push   edx
   1374d:	50                   	push   eax
   1374e:	e8 c5 3a 01 00       	call   27218 <strcpy>
   13753:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:716 (discriminator 3)
            {
                command_function_p(&lCommand[strlen(cmds[i].name)+1]);  
            }
            if (commandWasFromThisBufferPtr)
            {
                for (int cnt=commandWasFromThisBufferPtr;cnt<=commandsPtr;cnt++)
   13756:	83 45 dc 01          	add    DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:716 (discriminator 1)
   1375a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1375d:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   13760:	7e c8                	jle    1372a <biShell+0x39b>
/home/yogi/src/os/chrisOS/src/bishell.c:718
                    strcpy(commands[cnt],commands[cnt+1]);
                commandWasFromThisBufferPtr=0;
   13762:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:719
                commandsPtr--;
   13769:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:721
            }
            strcpy(commands[commandsPtr++],lCommand);
   1376d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13770:	8d 50 01             	lea    edx,[eax+0x1]
   13773:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   13776:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   1377c:	6b c0 32             	imul   eax,eax,0x32
   1377f:	01 c2                	add    edx,eax
   13781:	83 ec 08             	sub    esp,0x8
   13784:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   1378a:	50                   	push   eax
   1378b:	52                   	push   edx
   1378c:	e8 87 3a 01 00       	call   27218 <strcpy>
   13791:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:722
            commandBuffPtr=commandsPtr;
   13794:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13797:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   1379a:	e9 46 fc ff ff       	jmp    133e5 <biShell+0x56>
/home/yogi/src/os/chrisOS/src/bishell.c:726
        }
        else
        {
            printk("Invalid command '%s' ya dummy!\n",lCommand);
   1379f:	83 ec 08             	sub    esp,0x8
   137a2:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   137a8:	50                   	push   eax
   137a9:	68 9c 5f 04 00       	push   0x45f9c
   137ae:	e8 04 39 01 00       	call   270b7 <printk>
   137b3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:728
        }
    }
   137b6:	e9 2a fc ff ff       	jmp    133e5 <biShell+0x56>
   137bb:	90                   	nop

000137bc <AhciIssueCmd>:
AhciIssueCmd():
/home/yogi/src/os/chrisOS/src/block/ahci.c:38


// Check device type

int AhciIssueCmd(volatile HBA_PORT *port,int cmdslot) 
{
   137bc:	55                   	push   ebp
   137bd:	89 e5                	mov    ebp,esp
   137bf:	53                   	push   ebx
   137c0:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/block/ahci.c:40
    unsigned i;
    int delay = 0;
   137c3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:41
    int Status = true;
   137ca:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:43

    port->cmd.ST=0;
   137d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   137d4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   137d7:	83 e2 fe             	and    edx,0xfffffffe
   137da:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:45
    //make sure bit0 Start set to enable process cmd list
    if (!(port->cmd.ST)) {
   137dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   137e0:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   137e3:	83 e0 01             	and    eax,0x1
   137e6:	84 c0                	test   al,al
   137e8:	75 2d                	jne    13817 <AhciIssueCmd+0x5b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:46
        printd(DEBUG_AHCI, "AHCI: ahciIssueCmd - ST was cleared, setting FRE and STE\n");
   137ea:	83 ec 08             	sub    esp,0x8
   137ed:	68 c0 60 04 00       	push   0x460c0
   137f2:	68 00 20 00 00       	push   0x2000
   137f7:	e8 db 38 01 00       	call   270d7 <printd>
   137fc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:47
        port->cmd.FRE = 1;
   137ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13802:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13805:	83 ca 10             	or     edx,0x10
   13808:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:48
        port->cmd.ST = 1;
   1380b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1380e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13811:	83 ca 01             	or     edx,0x1
   13814:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:52
    }

    //if err status or busy, reset PxCMD.
    if ((port->pxis.TFES || port->pxis.HBFS || port->pxis.HBDS || port->pxis.IFS || port->pxis.INFS || port->pxis.OFS || port->pxis.IPMS) || (port->tfd.BSY || port->tfd.BSY)) {
   13817:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1381a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1381d:	c1 e8 1e             	shr    eax,0x1e
   13820:	83 e0 01             	and    eax,0x1
   13823:	84 c0                	test   al,al
   13825:	0f 85 84 00 00 00    	jne    138af <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 1)
   1382b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1382e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13831:	c1 e8 1d             	shr    eax,0x1d
   13834:	83 e0 01             	and    eax,0x1
   13837:	84 c0                	test   al,al
   13839:	75 74                	jne    138af <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 2)
   1383b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1383e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13841:	c1 e8 1c             	shr    eax,0x1c
   13844:	83 e0 01             	and    eax,0x1
   13847:	84 c0                	test   al,al
   13849:	75 64                	jne    138af <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 3)
   1384b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1384e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13851:	c1 e8 1b             	shr    eax,0x1b
   13854:	83 e0 01             	and    eax,0x1
   13857:	84 c0                	test   al,al
   13859:	75 54                	jne    138af <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 4)
   1385b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1385e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13861:	c1 e8 1a             	shr    eax,0x1a
   13864:	83 e0 01             	and    eax,0x1
   13867:	84 c0                	test   al,al
   13869:	75 44                	jne    138af <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 5)
   1386b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1386e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13871:	c1 e8 18             	shr    eax,0x18
   13874:	83 e0 01             	and    eax,0x1
   13877:	84 c0                	test   al,al
   13879:	75 34                	jne    138af <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 6)
   1387b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1387e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13881:	c1 e8 17             	shr    eax,0x17
   13884:	83 e0 01             	and    eax,0x1
   13887:	84 c0                	test   al,al
   13889:	75 24                	jne    138af <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 7)
   1388b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1388e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13891:	c1 e8 07             	shr    eax,0x7
   13894:	83 e0 01             	and    eax,0x1
   13897:	84 c0                	test   al,al
   13899:	75 14                	jne    138af <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 8)
   1389b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1389e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   138a1:	c1 e8 07             	shr    eax,0x7
   138a4:	83 e0 01             	and    eax,0x1
   138a7:	84 c0                	test   al,al
   138a9:	0f 84 8e 00 00 00    	je     1393d <AhciIssueCmd+0x181>
/home/yogi/src/os/chrisOS/src/block/ahci.c:53
        printd(DEBUG_AHCI, "AHCI: ahciIssueCmd - clearing error/busy\n");
   138af:	83 ec 08             	sub    esp,0x8
   138b2:	68 fc 60 04 00       	push   0x460fc
   138b7:	68 00 20 00 00       	push   0x2000
   138bc:	e8 16 38 01 00       	call   270d7 <printd>
   138c1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:54
        port->cmd.ST &= ~port->cmd.ST;
   138c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   138c7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   138ca:	83 e0 01             	and    eax,0x1
   138cd:	0f b6 c0             	movzx  eax,al
   138d0:	f7 d0                	not    eax
   138d2:	89 c2                	mov    edx,eax
   138d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   138d7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   138da:	83 e0 01             	and    eax,0x1
   138dd:	89 c1                	mov    ecx,eax
   138df:	89 d0                	mov    eax,edx
   138e1:	21 c8                	and    eax,ecx
   138e3:	83 e0 01             	and    eax,0x1
   138e6:	89 c2                	mov    edx,eax
   138e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   138eb:	0f b6 d2             	movzx  edx,dl
   138ee:	89 d1                	mov    ecx,edx
   138f0:	83 e1 01             	and    ecx,0x1
   138f3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   138f6:	83 e2 fe             	and    edx,0xfffffffe
   138f9:	09 ca                	or     edx,ecx
   138fb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:56
        //Start|Command List Override|FIS Receive Enable
        port->cmd.CLO=1;
   138fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13901:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13904:	83 ca 08             	or     edx,0x8
   13907:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:57
        while (port->cmd.CLO);
   1390a:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:57 (discriminator 1)
   1390b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1390e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   13911:	c1 e8 03             	shr    eax,0x3
   13914:	83 e0 01             	and    eax,0x1
   13917:	84 c0                	test   al,al
   13919:	75 f0                	jne    1390b <AhciIssueCmd+0x14f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:58
        port->cmd.ST = 1;
   1391b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1391e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13921:	83 ca 01             	or     edx,0x1
   13924:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:59
        port->cmd.FRE = 1;
   13927:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1392a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   1392d:	83 ca 10             	or     edx,0x10
   13930:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:60
        port->pxis.AsUlong = 0;
   13933:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13936:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:64
    }

    //issue cmd
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI before issuing command: 0x%08X\n", port->ci);
   1393d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13940:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   13943:	83 ec 04             	sub    esp,0x4
   13946:	50                   	push   eax
   13947:	68 28 61 04 00       	push   0x46128
   1394c:	68 00 20 00 00       	push   0x2000
   13951:	e8 81 37 01 00       	call   270d7 <printd>
   13956:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:65
    port->ci |= (1 << cmdslot);
   13959:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1395c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   1395f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   13962:	bb 01 00 00 00       	mov    ebx,0x1
   13967:	89 c1                	mov    ecx,eax
   13969:	d3 e3                	shl    ebx,cl
   1396b:	89 d8                	mov    eax,ebx
   1396d:	09 c2                	or     edx,eax
   1396f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13972:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:66
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI after issuing command: 0x%08X\n", port->ci);
   13975:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13978:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1397b:	83 ec 04             	sub    esp,0x4
   1397e:	50                   	push   eax
   1397f:	68 5c 61 04 00       	push   0x4615c
   13984:	68 00 20 00 00       	push   0x2000
   13989:	e8 49 37 01 00       	call   270d7 <printd>
   1398e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:69

    //wait cmd
    for (i = 0; i < 100; i++) {
   13991:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   13998:	eb 21                	jmp    139bb <AhciIssueCmd+0x1ff>
/home/yogi/src/os/chrisOS/src/block/ahci.c:70
        wait(50);
   1399a:	83 ec 0c             	sub    esp,0xc
   1399d:	6a 32                	push   0x32
   1399f:	e8 52 49 01 00       	call   282f6 <wait>
   139a4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:71
        if (!port->tfd.BSY)
   139a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   139aa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   139ad:	c1 e8 07             	shr    eax,0x7
   139b0:	83 e0 01             	and    eax,0x1
   139b3:	84 c0                	test   al,al
   139b5:	74 0c                	je     139c3 <AhciIssueCmd+0x207>
/home/yogi/src/os/chrisOS/src/block/ahci.c:69 (discriminator 2)
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI before issuing command: 0x%08X\n", port->ci);
    port->ci |= (1 << cmdslot);
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI after issuing command: 0x%08X\n", port->ci);

    //wait cmd
    for (i = 0; i < 100; i++) {
   139b7:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:69 (discriminator 1)
   139bb:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
   139bf:	76 d9                	jbe    1399a <AhciIssueCmd+0x1de>
   139c1:	eb 01                	jmp    139c4 <AhciIssueCmd+0x208>
/home/yogi/src/os/chrisOS/src/block/ahci.c:72
        wait(50);
        if (!port->tfd.BSY)
            break;
   139c3:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:76
    }

    // Wait for completion
    delay = 5000;
   139c4:	c7 45 f0 88 13 00 00 	mov    DWORD PTR [ebp-0x10],0x1388
/home/yogi/src/os/chrisOS/src/block/ahci.c:77
    while (delay > 0) {
   139cb:	eb 57                	jmp    13a24 <AhciIssueCmd+0x268>
/home/yogi/src/os/chrisOS/src/block/ahci.c:79

        if ((port->ci & (1 << cmdslot)) == 0)
   139cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   139d0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   139d3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   139d6:	bb 01 00 00 00       	mov    ebx,0x1
   139db:	89 c1                	mov    ecx,eax
   139dd:	d3 e3                	shl    ebx,cl
   139df:	89 d8                	mov    eax,ebx
   139e1:	21 d0                	and    eax,edx
   139e3:	85 c0                	test   eax,eax
   139e5:	74 45                	je     13a2c <AhciIssueCmd+0x270>
/home/yogi/src/os/chrisOS/src/block/ahci.c:83
            break;
        // In some longer duration reads, it may be helpful to spin on the DPS bit 
        // in the PxIS port field as well (1 << 5)
        if (port->pxis.TFES) // Task file error
   139e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   139ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   139ed:	c1 e8 1e             	shr    eax,0x1e
   139f0:	83 e0 01             	and    eax,0x1
   139f3:	84 c0                	test   al,al
   139f5:	74 1c                	je     13a13 <AhciIssueCmd+0x257>
/home/yogi/src/os/chrisOS/src/block/ahci.c:85
        {
            printd(DEBUG_AHCI, "AHCI: Read disk error\n");
   139f7:	83 ec 08             	sub    esp,0x8
   139fa:	68 8f 61 04 00       	push   0x4618f
   139ff:	68 00 20 00 00       	push   0x2000
   13a04:	e8 ce 36 01 00       	call   270d7 <printd>
   13a09:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:86
            return -1;
   13a0c:	b8 ff ff ff ff       	mov    eax,0xffffffff
   13a11:	eb 37                	jmp    13a4a <AhciIssueCmd+0x28e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:88
        }
        wait(20);
   13a13:	83 ec 0c             	sub    esp,0xc
   13a16:	6a 14                	push   0x14
   13a18:	e8 d9 48 01 00       	call   282f6 <wait>
   13a1d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:89
        delay -= 1;
   13a20:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:77
            break;
    }

    // Wait for completion
    delay = 5000;
    while (delay > 0) {
   13a24:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   13a28:	7f a3                	jg     139cd <AhciIssueCmd+0x211>
   13a2a:	eb 01                	jmp    13a2d <AhciIssueCmd+0x271>
/home/yogi/src/os/chrisOS/src/block/ahci.c:80

        if ((port->ci & (1 << cmdslot)) == 0)
            break;
   13a2c:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:92
        }
        wait(20);
        delay -= 1;
    }

    if (port->tfd.ERR || delay == 0)
   13a2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13a30:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13a33:	83 e0 01             	and    eax,0x1
   13a36:	84 c0                	test   al,al
   13a38:	75 06                	jne    13a40 <AhciIssueCmd+0x284>
/home/yogi/src/os/chrisOS/src/block/ahci.c:92 (discriminator 1)
   13a3a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   13a3e:	75 07                	jne    13a47 <AhciIssueCmd+0x28b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:93
        Status = -2;
   13a40:	c7 45 ec fe ff ff ff 	mov    DWORD PTR [ebp-0x14],0xfffffffe
/home/yogi/src/os/chrisOS/src/block/ahci.c:95

    return Status;
   13a47:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/chrisOS/src/block/ahci.c:96
}
   13a4a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   13a4d:	c9                   	leave  
   13a4e:	c3                   	ret    

00013a4f <check_type>:
check_type():
/home/yogi/src/os/chrisOS/src/block/ahci.c:98

int check_type(volatile HBA_PORT *port, uint32_t* sig) {
   13a4f:	55                   	push   ebp
   13a50:	89 e5                	mov    ebp,esp
   13a52:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:99
    uint32_t ssts = port->ssts;
   13a55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13a58:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13a5b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:100
    uint8_t ipm = (ssts >> 8) & 0x0F;
   13a5e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   13a61:	c1 e8 08             	shr    eax,0x8
   13a64:	83 e0 0f             	and    eax,0xf
   13a67:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/block/ahci.c:101
    uint8_t det = ssts & 0x0F;
   13a6a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   13a6d:	83 e0 0f             	and    eax,0xf
   13a70:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/chrisOS/src/block/ahci.c:103

    if (det != HBA_PORT_DET_PRESENT) // Check drive status
   13a73:	80 7d fa 03          	cmp    BYTE PTR [ebp-0x6],0x3
   13a77:	74 07                	je     13a80 <check_type+0x31>
/home/yogi/src/os/chrisOS/src/block/ahci.c:104
        return AHCI_DEV_NULL;
   13a79:	b8 00 00 00 00       	mov    eax,0x0
   13a7e:	eb 64                	jmp    13ae4 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:105
    if (ipm != HBA_PORT_IPM_ACTIVE)
   13a80:	80 7d fb 01          	cmp    BYTE PTR [ebp-0x5],0x1
   13a84:	74 07                	je     13a8d <check_type+0x3e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:106
        return AHCI_DEV_NULL;
   13a86:	b8 00 00 00 00       	mov    eax,0x0
   13a8b:	eb 57                	jmp    13ae4 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:108

    *sig = port->sig;
   13a8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13a90:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
   13a93:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   13a96:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:109
    switch (port->sig) {
   13a98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13a9b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   13a9e:	3d 01 01 3c c3       	cmp    eax,0xc33c0101
   13aa3:	74 25                	je     13aca <check_type+0x7b>
   13aa5:	3d 01 01 3c c3       	cmp    eax,0xc33c0101
   13aaa:	77 09                	ja     13ab5 <check_type+0x66>
   13aac:	3d 01 01 69 96       	cmp    eax,0x96690101
   13ab1:	74 1e                	je     13ad1 <check_type+0x82>
   13ab3:	eb 2a                	jmp    13adf <check_type+0x90>
   13ab5:	3d 00 00 14 eb       	cmp    eax,0xeb140000
   13aba:	74 1c                	je     13ad8 <check_type+0x89>
   13abc:	3d 01 01 14 eb       	cmp    eax,0xeb140101
   13ac1:	75 1c                	jne    13adf <check_type+0x90>
/home/yogi/src/os/chrisOS/src/block/ahci.c:111
        case SATA_SIG_ATAPI:
            return AHCI_DEV_SATAPI;
   13ac3:	b8 04 00 00 00       	mov    eax,0x4
   13ac8:	eb 1a                	jmp    13ae4 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:113
        case SATA_SIG_SEMB:
            return AHCI_DEV_SEMB;
   13aca:	b8 02 00 00 00       	mov    eax,0x2
   13acf:	eb 13                	jmp    13ae4 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:115
        case SATA_SIG_PM:
            return AHCI_DEV_PM;
   13ad1:	b8 03 00 00 00       	mov    eax,0x3
   13ad6:	eb 0c                	jmp    13ae4 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:117
        case SATA_SIG_ATAPI & 0xFFFF0000:
            return AHCI_DEV_SATAPI;
   13ad8:	b8 04 00 00 00       	mov    eax,0x4
   13add:	eb 05                	jmp    13ae4 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:119
        default:
            return AHCI_DEV_SATA;
   13adf:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:121
    }
}
   13ae4:	c9                   	leave  
   13ae5:	c3                   	ret    

00013ae6 <ahciEnablePortMultiplier>:
ahciEnablePortMultiplier():
/home/yogi/src/os/chrisOS/src/block/ahci.c:123

void ahciEnablePortMultiplier(volatile HBA_PORT* port) {
   13ae6:	55                   	push   ebp
   13ae7:	89 e5                	mov    ebp,esp
   13ae9:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/ahci.c:124
    HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
   13aec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13aef:	8b 00                	mov    eax,DWORD PTR [eax]
   13af1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:126

    port->cmd.ST = 0;
   13af4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13af7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13afa:	83 e2 fe             	and    edx,0xfffffffe
   13afd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:130

    //waitForPortIdle(port);

    printd(DEBUG_AHCI, "AHCI: EnablePortMultipler: port=0x%08X\n", port);
   13b00:	83 ec 04             	sub    esp,0x4
   13b03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13b06:	68 a8 61 04 00       	push   0x461a8
   13b0b:	68 00 20 00 00       	push   0x2000
   13b10:	e8 c2 35 01 00       	call   270d7 <printd>
   13b15:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:131
    int slot = find_cmdslot(port);
   13b18:	83 ec 0c             	sub    esp,0xc
   13b1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13b1e:	e8 6a 13 00 00       	call   14e8d <find_cmdslot>
   13b23:	83 c4 10             	add    esp,0x10
   13b26:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:132
    if (slot == -1)
   13b29:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   13b2d:	0f 84 94 02 00 00    	je     13dc7 <ahciEnablePortMultiplier+0x2e1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:134
        return;
    port->ie.AsUlong = 0; //xffffffff;
   13b33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13b36:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:135
    cmdheader += slot;
   13b3d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13b40:	c1 e0 05             	shl    eax,0x5
   13b43:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:136
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   13b46:	83 ec 04             	sub    esp,0x4
   13b49:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   13b4c:	68 d0 61 04 00       	push   0x461d0
   13b51:	68 00 20 00 00       	push   0x2000
   13b56:	e8 7c 35 01 00       	call   270d7 <printd>
   13b5b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:137
    cmdheader->prdtl = 1;
   13b5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13b61:	66 c7 40 02 01 00    	mov    WORD PTR [eax+0x2],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:138
    cmdheader->cfl = sizeof (FIS_REG_H2D) / sizeof (uint32_t);
   13b67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13b6a:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13b6d:	83 e2 e0             	and    edx,0xffffffe0
   13b70:	83 ca 05             	or     edx,0x5
   13b73:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:139
    cmdheader->w = 0;
   13b75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13b78:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13b7b:	83 e2 bf             	and    edx,0xffffffbf
   13b7e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:140
    cmdheader->c = 1; //required for reset
   13b80:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13b83:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13b87:	83 ca 04             	or     edx,0x4
   13b8a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:141
    cmdheader->p = 0;
   13b8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13b90:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13b93:	83 e2 7f             	and    edx,0x7f
   13b96:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:142
    cmdheader->r = 1; //srst field
   13b98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13b9b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13b9f:	83 ca 01             	or     edx,0x1
   13ba2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:144

    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   13ba5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13ba8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   13bab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:145
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   13bae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13bb1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   13bb4:	50                   	push   eax
   13bb5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   13bb8:	68 e8 61 04 00       	push   0x461e8
   13bbd:	68 00 20 00 00       	push   0x2000
   13bc2:	e8 10 35 01 00       	call   270d7 <printd>
   13bc7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:146
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
   13bca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13bcd:	c7 80 80 00 00 00 00 	mov    DWORD PTR [eax+0x80],0xa42000
   13bd4:	20 a4 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:147
    cmdtbl->prdt_entry[0].dbc = 0;
   13bd7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13bda:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [eax+0x8c]
   13be0:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   13be6:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:148
    cmdtbl->prdt_entry[0].i = 0;
   13bec:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13bef:	0f b6 90 8f 00 00 00 	movzx  edx,BYTE PTR [eax+0x8f]
   13bf6:	83 e2 7f             	and    edx,0x7f
   13bf9:	88 90 8f 00 00 00    	mov    BYTE PTR [eax+0x8f],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:150

    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   13bff:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13c02:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:151
    memset(cmdfis, 0, sizeof (FIS_REG_H2D));
   13c05:	83 ec 04             	sub    esp,0x4
   13c08:	6a 14                	push   0x14
   13c0a:	6a 00                	push   0x0
   13c0c:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   13c0f:	e8 19 14 01 00       	call   2502d <memset>
   13c14:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:152
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   13c17:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13c1a:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/src/os/chrisOS/src/block/ahci.c:153
    cmdfis->c = 0; // Control
   13c1d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13c20:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13c24:	83 e2 7f             	and    edx,0x7f
   13c27:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:154
    cmdfis->control |= (1 << 2); //reset bit
   13c2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13c2d:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   13c31:	83 c8 04             	or     eax,0x4
   13c34:	89 c2                	mov    edx,eax
   13c36:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13c39:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:155
    cmdfis->pmport = 0xf;
   13c3c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13c3f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13c43:	83 ca 0f             	or     edx,0xf
   13c46:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:156
    port->cmd.CLO = 1;
   13c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c4c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13c4f:	83 ca 08             	or     edx,0x8
   13c52:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:157
    while (port->cmd.CLO);
   13c55:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:157 (discriminator 1)
   13c56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c59:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   13c5c:	c1 e8 03             	shr    eax,0x3
   13c5f:	83 e0 01             	and    eax,0x1
   13c62:	84 c0                	test   al,al
   13c64:	75 f0                	jne    13c56 <ahciEnablePortMultiplier+0x170>
/home/yogi/src/os/chrisOS/src/block/ahci.c:158
    port->cmd.ST = 1;
   13c66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c69:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13c6c:	83 ca 01             	or     edx,0x1
   13c6f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:159
    port->ci |= slot;
   13c72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c75:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   13c78:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13c7b:	09 c2                	or     edx,eax
   13c7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c80:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:161

    slot = find_cmdslot(port);
   13c83:	83 ec 0c             	sub    esp,0xc
   13c86:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13c89:	e8 ff 11 00 00       	call   14e8d <find_cmdslot>
   13c8e:	83 c4 10             	add    esp,0x10
   13c91:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:162
    if (slot == -1)
   13c94:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   13c98:	0f 84 2c 01 00 00    	je     13dca <ahciEnablePortMultiplier+0x2e4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:164
        return;
    port->ie.AsUlong = 0; //xffffffff;
   13c9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13ca1:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:165
    cmdheader += slot;
   13ca8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13cab:	c1 e0 05             	shl    eax,0x5
   13cae:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:166
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   13cb1:	83 ec 04             	sub    esp,0x4
   13cb4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   13cb7:	68 d0 61 04 00       	push   0x461d0
   13cbc:	68 00 20 00 00       	push   0x2000
   13cc1:	e8 11 34 01 00       	call   270d7 <printd>
   13cc6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:167
    cmdheader->prdtl = 1;
   13cc9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13ccc:	66 c7 40 02 01 00    	mov    WORD PTR [eax+0x2],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:168
    cmdheader->cfl = sizeof (FIS_REG_H2D) / sizeof (uint32_t);
   13cd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13cd5:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13cd8:	83 e2 e0             	and    edx,0xffffffe0
   13cdb:	83 ca 05             	or     edx,0x5
   13cde:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:169
    cmdheader->w = 0;
   13ce0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13ce3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13ce6:	83 e2 bf             	and    edx,0xffffffbf
   13ce9:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:170
    cmdheader->c = 1; //required for reset
   13ceb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13cee:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13cf2:	83 ca 04             	or     edx,0x4
   13cf5:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:171
    cmdheader->p = 0;
   13cf8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13cfb:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13cfe:	83 e2 7f             	and    edx,0x7f
   13d01:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:172
    cmdheader->r = 0; //srst field
   13d03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13d06:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13d0a:	83 e2 fe             	and    edx,0xfffffffe
   13d0d:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:173
    cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   13d10:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13d13:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   13d16:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:174
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   13d19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13d1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   13d1f:	50                   	push   eax
   13d20:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   13d23:	68 e8 61 04 00       	push   0x461e8
   13d28:	68 00 20 00 00       	push   0x2000
   13d2d:	e8 a5 33 01 00       	call   270d7 <printd>
   13d32:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:175
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
   13d35:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13d38:	c7 80 80 00 00 00 00 	mov    DWORD PTR [eax+0x80],0xa42000
   13d3f:	20 a4 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:176
    cmdtbl->prdt_entry[0].dbc = 0;
   13d42:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13d45:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [eax+0x8c]
   13d4b:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   13d51:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:177
    cmdtbl->prdt_entry[0].i = 0;
   13d57:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13d5a:	0f b6 90 8f 00 00 00 	movzx  edx,BYTE PTR [eax+0x8f]
   13d61:	83 e2 7f             	and    edx,0x7f
   13d64:	88 90 8f 00 00 00    	mov    BYTE PTR [eax+0x8f],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:179

    cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   13d6a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13d6d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:180
    memset(cmdfis, 0, sizeof (FIS_REG_H2D));
   13d70:	83 ec 04             	sub    esp,0x4
   13d73:	6a 14                	push   0x14
   13d75:	6a 00                	push   0x0
   13d77:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   13d7a:	e8 ae 12 01 00       	call   2502d <memset>
   13d7f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:181
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   13d82:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13d85:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/src/os/chrisOS/src/block/ahci.c:182
    cmdfis->c = 0; // control
   13d88:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13d8b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13d8f:	83 e2 7f             	and    edx,0x7f
   13d92:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:183
    cmdfis->control &= ~(1 << 2); //reset bit
   13d95:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13d98:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   13d9c:	83 e0 fb             	and    eax,0xfffffffb
   13d9f:	89 c2                	mov    edx,eax
   13da1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13da4:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:184
    cmdfis->pmport = 0xf;
   13da7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13daa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13dae:	83 ca 0f             	or     edx,0xf
   13db1:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:185
    port->ci |= slot;
   13db4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13db7:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   13dba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13dbd:	09 c2                	or     edx,eax
   13dbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13dc2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
   13dc5:	eb 04                	jmp    13dcb <ahciEnablePortMultiplier+0x2e5>
/home/yogi/src/os/chrisOS/src/block/ahci.c:133
    //waitForPortIdle(port);

    printd(DEBUG_AHCI, "AHCI: EnablePortMultipler: port=0x%08X\n", port);
    int slot = find_cmdslot(port);
    if (slot == -1)
        return;
   13dc7:	90                   	nop
   13dc8:	eb 01                	jmp    13dcb <ahciEnablePortMultiplier+0x2e5>
/home/yogi/src/os/chrisOS/src/block/ahci.c:163
    port->cmd.ST = 1;
    port->ci |= slot;

    slot = find_cmdslot(port);
    if (slot == -1)
        return;
   13dca:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:186
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
    cmdfis->c = 0; // control
    cmdfis->control &= ~(1 << 2); //reset bit
    cmdfis->pmport = 0xf;
    port->ci |= slot;
}
   13dcb:	c9                   	leave  
   13dcc:	c3                   	ret    

00013dcd <ahciSpinupDrive>:
ahciSpinupDrive():
/home/yogi/src/os/chrisOS/src/block/ahci.c:188

bool ahciSpinupDrive(volatile HBA_PORT* port, int portno) {
   13dcd:	55                   	push   ebp
   13dce:	89 e5                	mov    ebp,esp
   13dd0:	56                   	push   esi
   13dd1:	53                   	push   ebx
   13dd2:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:189
    int waitMS = 0;
   13dd5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:190
    port->sctl.SPD = 1;
   13ddc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13ddf:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   13de2:	80 e2 0f             	and    dl,0xf
   13de5:	83 ca 10             	or     edx,0x10
   13de8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:199
    //stop_cmd(&abar->ports[i]);
    //port->cmd.PMA=1;
    //start_cmd(&abar->ports[i]);

    //Spin up the drive
    port->cmd.ST = 0;
   13deb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13dee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13df1:	83 e2 fe             	and    edx,0xfffffffe
   13df4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:201

    port->sctl.DET = 1;
   13df7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13dfa:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   13dfd:	83 e2 f0             	and    edx,0xfffffff0
   13e00:	83 ca 01             	or     edx,0x1
   13e03:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:202
    wait(100);
   13e06:	83 ec 0c             	sub    esp,0xc
   13e09:	6a 64                	push   0x64
   13e0b:	e8 e6 44 01 00       	call   282f6 <wait>
   13e10:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:203
    port->sctl.DET = 0;
   13e13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e16:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   13e19:	83 e2 f0             	and    edx,0xfffffff0
   13e1c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:206


    waitMS = 1000;
   13e1f:	c7 45 f4 e8 03 00 00 	mov    DWORD PTR [ebp-0xc],0x3e8
/home/yogi/src/os/chrisOS/src/block/ahci.c:208
    //wait for DET to be set to 1 or 3
    while (((port->ssts & 0xF) != 3) && ((port->ssts & 0xF) != 1) && (waitMS > 0)) {
   13e26:	eb 11                	jmp    13e39 <ahciSpinupDrive+0x6c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:209
        wait(10);
   13e28:	83 ec 0c             	sub    esp,0xc
   13e2b:	6a 0a                	push   0xa
   13e2d:	e8 c4 44 01 00       	call   282f6 <wait>
   13e32:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:210
        waitMS -= 10;
   13e35:	83 6d f4 0a          	sub    DWORD PTR [ebp-0xc],0xa
/home/yogi/src/os/chrisOS/src/block/ahci.c:208
    port->sctl.DET = 0;


    waitMS = 1000;
    //wait for DET to be set to 1 or 3
    while (((port->ssts & 0xF) != 3) && ((port->ssts & 0xF) != 1) && (waitMS > 0)) {
   13e39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e3c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13e3f:	83 e0 0f             	and    eax,0xf
   13e42:	83 f8 03             	cmp    eax,0x3
   13e45:	74 14                	je     13e5b <ahciSpinupDrive+0x8e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:208 (discriminator 1)
   13e47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e4a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13e4d:	83 e0 0f             	and    eax,0xf
   13e50:	83 f8 01             	cmp    eax,0x1
   13e53:	74 06                	je     13e5b <ahciSpinupDrive+0x8e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:208 (discriminator 2)
   13e55:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   13e59:	7f cd                	jg     13e28 <ahciSpinupDrive+0x5b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:212
        wait(10);
        waitMS -= 10;
    }
    if (waitMS == 0) {
   13e5b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   13e5f:	75 62                	jne    13ec3 <ahciSpinupDrive+0xf6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:213
        printd(DEBUG_AHCI, "AHCI: Error spinning up device,  DET not cleared (0x%08X)\n", port->ssts);
   13e61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e64:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13e67:	83 ec 04             	sub    esp,0x4
   13e6a:	50                   	push   eax
   13e6b:	68 0c 62 04 00       	push   0x4620c
   13e70:	68 00 20 00 00       	push   0x2000
   13e75:	e8 5d 32 01 00       	call   270d7 <printd>
   13e7a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:215
        //printd(DEBUG_AHCI,"****status=0x%08X, error=0x%08X, count=0x%08X\n",rfis->status,rfis->error,rfis->countl);
        printd(DEBUG_AHCI, "***tfd=0x%08X, ssts=0x%08X, serr=0x%08X, is=0x%08X\n", port->tfd, port->ssts, port->serr, port->pxis.AsUlong);
   13e7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e80:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   13e83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e86:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13e89:	83 ec 08             	sub    esp,0x8
   13e8c:	52                   	push   edx
   13e8d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   13e90:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
   13e93:	52                   	push   edx
   13e94:	50                   	push   eax
   13e95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e98:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13e9b:	50                   	push   eax
   13e9c:	68 48 62 04 00       	push   0x46248
   13ea1:	68 00 20 00 00       	push   0x2000
   13ea6:	e8 2c 32 01 00       	call   270d7 <printd>
   13eab:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:216
        printd(DEBUG_AHCI, "Attempting to continue ... \n");
   13eae:	83 ec 08             	sub    esp,0x8
   13eb1:	68 7c 62 04 00       	push   0x4627c
   13eb6:	68 00 20 00 00       	push   0x2000
   13ebb:	e8 17 32 01 00       	call   270d7 <printd>
   13ec0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:219
    }
    //This should clear PxSERR
    ahciABAR->pi |= 1 << portno;
   13ec3:	a1 54 04 12 00       	mov    eax,ds:0x120454
   13ec8:	8b 15 54 04 12 00    	mov    edx,DWORD PTR ds:0x120454
   13ece:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
   13ed1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   13ed4:	be 01 00 00 00       	mov    esi,0x1
   13ed9:	89 d1                	mov    ecx,edx
   13edb:	d3 e6                	shl    esi,cl
   13edd:	89 f2                	mov    edx,esi
   13edf:	09 da                	or     edx,ebx
   13ee1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:220
    printd(DEBUG_AHCI, "PxSERR=0x%08X\n", port->serr.AsUlong);
   13ee4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13ee7:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   13eea:	83 ec 04             	sub    esp,0x4
   13eed:	50                   	push   eax
   13eee:	68 99 62 04 00       	push   0x46299
   13ef3:	68 00 20 00 00       	push   0x2000
   13ef8:	e8 da 31 01 00       	call   270d7 <printd>
   13efd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:221
    waitMS = 1000;
   13f00:	c7 45 f4 e8 03 00 00 	mov    DWORD PTR [ebp-0xc],0x3e8
/home/yogi/src/os/chrisOS/src/block/ahci.c:223
    //Now wait for BSY(, DRQ and ERR to be cleared.
    while ((port->tfd.BSY || port->tfd.ERR) && waitMS > 0) {
   13f07:	eb 11                	jmp    13f1a <ahciSpinupDrive+0x14d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:224
        wait(10);
   13f09:	83 ec 0c             	sub    esp,0xc
   13f0c:	6a 0a                	push   0xa
   13f0e:	e8 e3 43 01 00       	call   282f6 <wait>
   13f13:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:225
        waitMS -= 10;
   13f16:	83 6d f4 0a          	sub    DWORD PTR [ebp-0xc],0xa
/home/yogi/src/os/chrisOS/src/block/ahci.c:223
    //This should clear PxSERR
    ahciABAR->pi |= 1 << portno;
    printd(DEBUG_AHCI, "PxSERR=0x%08X\n", port->serr.AsUlong);
    waitMS = 1000;
    //Now wait for BSY(, DRQ and ERR to be cleared.
    while ((port->tfd.BSY || port->tfd.ERR) && waitMS > 0) {
   13f1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13f1d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13f20:	c1 e8 07             	shr    eax,0x7
   13f23:	83 e0 01             	and    eax,0x1
   13f26:	84 c0                	test   al,al
   13f28:	75 0d                	jne    13f37 <ahciSpinupDrive+0x16a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:223 (discriminator 2)
   13f2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13f2d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13f30:	83 e0 01             	and    eax,0x1
   13f33:	84 c0                	test   al,al
   13f35:	74 06                	je     13f3d <ahciSpinupDrive+0x170>
/home/yogi/src/os/chrisOS/src/block/ahci.c:223 (discriminator 3)
   13f37:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   13f3b:	7f cc                	jg     13f09 <ahciSpinupDrive+0x13c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:227
        wait(10);
        waitMS -= 10;
    }
    if (waitMS == 0) {
   13f3d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   13f41:	75 62                	jne    13fa5 <ahciSpinupDrive+0x1d8>
/home/yogi/src/os/chrisOS/src/block/ahci.c:228
        printd(DEBUG_AHCI, "AHCI: Error spinning up device, BSY, DRQ OR ERR not cleared (0x%08X)\n", port->ssts);
   13f43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13f46:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13f49:	83 ec 04             	sub    esp,0x4
   13f4c:	50                   	push   eax
   13f4d:	68 a8 62 04 00       	push   0x462a8
   13f52:	68 00 20 00 00       	push   0x2000
   13f57:	e8 7b 31 01 00       	call   270d7 <printd>
   13f5c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:230
        //printd(DEBUG_AHCI,"****status=0x%08X, error=0x%08X, count=0x%08X\n",rfis->status,rfis->error,rfis->countl);
        printd(DEBUG_AHCI, "***tfd=0x%08X, ssts=0x%08X, serr=0x%08X, is=0x%08X\n", port->tfd, port->ssts, port->serr, port->pxis.AsUlong);
   13f5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13f62:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   13f65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13f68:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13f6b:	83 ec 08             	sub    esp,0x8
   13f6e:	52                   	push   edx
   13f6f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   13f72:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
   13f75:	52                   	push   edx
   13f76:	50                   	push   eax
   13f77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13f7a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13f7d:	50                   	push   eax
   13f7e:	68 48 62 04 00       	push   0x46248
   13f83:	68 00 20 00 00       	push   0x2000
   13f88:	e8 4a 31 01 00       	call   270d7 <printd>
   13f8d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:231
        printd(DEBUG_AHCI, "Attempting to continue ... \n");
   13f90:	83 ec 08             	sub    esp,0x8
   13f93:	68 7c 62 04 00       	push   0x4627c
   13f98:	68 00 20 00 00       	push   0x2000
   13f9d:	e8 35 31 01 00       	call   270d7 <printd>
   13fa2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:233
    }
    port->cmd.ST = 1;
   13fa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13fa8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13fab:	83 ca 01             	or     edx,0x1
   13fae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:234
    if (waitMS == 0)
   13fb1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   13fb5:	75 07                	jne    13fbe <ahciSpinupDrive+0x1f1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:235
        return false;
   13fb7:	b8 00 00 00 00       	mov    eax,0x0
   13fbc:	eb 05                	jmp    13fc3 <ahciSpinupDrive+0x1f6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:236
    return true;
   13fbe:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:237
}
   13fc3:	8d 65 f8             	lea    esp,[ebp-0x8]
   13fc6:	5b                   	pop    ebx
   13fc7:	5e                   	pop    esi
   13fc8:	5d                   	pop    ebp
   13fc9:	c3                   	ret    

00013fca <ahciProbePorts>:
ahciProbePorts():
/home/yogi/src/os/chrisOS/src/block/ahci.c:239

void ahciProbePorts(HBA_MEM *abar) {
   13fca:	55                   	push   ebp
   13fcb:	89 e5                	mov    ebp,esp
   13fcd:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/block/ahci.c:241
    // Search disk in impelemented ports
    uint32_t pi = abar->pi;
   13fd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13fd3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   13fd6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:242
    int i = 0;
   13fd9:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:243
    int rb = AHCI_PORT_BASE_REMAP_ADDRESS + (0x10000 * ahciHostCount); //probably only need 0xA000
   13fe0:	a1 24 8a 02 00       	mov    eax,ds:0x28a24
   13fe5:	c1 e0 10             	shl    eax,0x10
   13fe8:	05 00 20 90 00       	add    eax,0x902000
   13fed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:244
    if (pi > 0)
   13ff0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   13ff4:	0f 84 4f 02 00 00    	je     14249 <ahciProbePorts+0x27f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:245
        printd(DEBUG_AHCI, "AHCI: Probing ports via ABAR 0x%08X, value 0x%02X\n", abar, abar->pi);
   13ffa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13ffd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   14000:	50                   	push   eax
   14001:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14004:	68 f0 62 04 00       	push   0x462f0
   14009:	68 00 20 00 00       	push   0x2000
   1400e:	e8 c4 30 01 00       	call   270d7 <printd>
   14013:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:246
    while (i < 32) {
   14016:	e9 2e 02 00 00       	jmp    14249 <ahciProbePorts+0x27f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:247
        if (pi & 1) {
   1401b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1401e:	83 e0 01             	and    eax,0x1
   14021:	85 c0                	test   eax,eax
   14023:	0f 84 19 02 00 00    	je     14242 <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:248
        ahci_enable_port(abar,i);
   14029:	83 ec 08             	sub    esp,0x8
   1402c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1402f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14032:	e8 d0 1b 00 00       	call   15c07 <ahci_enable_port>
   14037:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:250
        //waitForPortIdle(&abar->ports[i]);
            uint32_t sig = 0;
   1403a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:252
            //Get the SATA device signature
            int dt = check_type(&abar->ports[i], &sig);
   14041:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14044:	83 c0 02             	add    eax,0x2
   14047:	c1 e0 07             	shl    eax,0x7
   1404a:	89 c2                	mov    edx,eax
   1404c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1404f:	01 c2                	add    edx,eax
   14051:	83 ec 08             	sub    esp,0x8
   14054:	8d 45 e4             	lea    eax,[ebp-0x1c]
   14057:	50                   	push   eax
   14058:	52                   	push   edx
   14059:	e8 f1 f9 ff ff       	call   13a4f <check_type>
   1405e:	83 c4 10             	add    esp,0x10
   14061:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:253
            printd(DEBUG_AHCI, "AHCI: Checking port %u (0x%08X), sig=%08X\n", i, &abar->ports[i], sig);
   14064:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14067:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1406a:	83 c2 02             	add    edx,0x2
   1406d:	89 d1                	mov    ecx,edx
   1406f:	c1 e1 07             	shl    ecx,0x7
   14072:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   14075:	01 ca                	add    edx,ecx
   14077:	83 ec 0c             	sub    esp,0xc
   1407a:	50                   	push   eax
   1407b:	52                   	push   edx
   1407c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1407f:	68 24 63 04 00       	push   0x46324
   14084:	68 00 20 00 00       	push   0x2000
   14089:	e8 49 30 01 00       	call   270d7 <printd>
   1408e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:255
            //Found a SATA disk
            if (dt == AHCI_DEV_SATA) {
   14091:	83 7d e8 01          	cmp    DWORD PTR [ebp-0x18],0x1
   14095:	0f 85 a3 00 00 00    	jne    1413e <ahciProbePorts+0x174>
/home/yogi/src/os/chrisOS/src/block/ahci.c:256
                printd(DEBUG_AHCI, "AHCI: SATA drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   1409b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1409e:	83 c0 02             	add    eax,0x2
   140a1:	c1 e0 07             	shl    eax,0x7
   140a4:	89 c2                	mov    edx,eax
   140a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   140a9:	01 d0                	add    eax,edx
   140ab:	50                   	push   eax
   140ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   140af:	68 50 63 04 00       	push   0x46350
   140b4:	68 00 20 00 00       	push   0x2000
   140b9:	e8 19 30 01 00       	call   270d7 <printd>
   140be:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:257
                printd(DEBUG_AHCI, "AHCI:\tCLB=0x%08X, fb=0x%08X\n", abar->ports[i].clb, abar->ports[i].fb);
   140c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   140c4:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   140c7:	83 c2 02             	add    edx,0x2
   140ca:	c1 e2 07             	shl    edx,0x7
   140cd:	01 d0                	add    eax,edx
   140cf:	83 c0 08             	add    eax,0x8
   140d2:	8b 10                	mov    edx,DWORD PTR [eax]
   140d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   140d7:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   140da:	83 c1 02             	add    ecx,0x2
   140dd:	c1 e1 07             	shl    ecx,0x7
   140e0:	01 c8                	add    eax,ecx
   140e2:	8b 00                	mov    eax,DWORD PTR [eax]
   140e4:	52                   	push   edx
   140e5:	50                   	push   eax
   140e6:	68 7c 63 04 00       	push   0x4637c
   140eb:	68 00 20 00 00       	push   0x2000
   140f0:	e8 e2 2f 01 00       	call   270d7 <printd>
   140f5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:258
                port_rebase(&abar->ports[i], i, rb);
   140f8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   140fb:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   140fe:	83 c2 02             	add    edx,0x2
   14101:	89 d1                	mov    ecx,edx
   14103:	c1 e1 07             	shl    ecx,0x7
   14106:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   14109:	01 ca                	add    edx,ecx
   1410b:	83 ec 04             	sub    esp,0x4
   1410e:	50                   	push   eax
   1410f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14112:	52                   	push   edx
   14113:	e8 5c 07 00 00       	call   14874 <port_rebase>
   14118:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:261
                	//det reset, disable slumber and Partial state
			//reset port, send COMRESET signal
                ahciIdentify(&abar->ports[i], AHCI_DEV_SATA);
   1411b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1411e:	83 c0 02             	add    eax,0x2
   14121:	c1 e0 07             	shl    eax,0x7
   14124:	89 c2                	mov    edx,eax
   14126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14129:	01 d0                	add    eax,edx
   1412b:	83 ec 08             	sub    esp,0x8
   1412e:	6a 01                	push   0x1
   14130:	50                   	push   eax
   14131:	e8 b6 09 00 00       	call   14aec <ahciIdentify>
   14136:	83 c4 10             	add    esp,0x10
   14139:	e9 04 01 00 00       	jmp    14242 <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:271
                    printk("AHCI: Successfully read sector 0 from device to 0x%08X\n",ahciReadBuff);
                    printk("AHCI: Read Buffer: %s\n",ahciReadBuff);
                    printk("sig=0x%08X\n",abar->ports[i].sig);
                }
                 */
            } else if (dt == AHCI_DEV_SATAPI) {
   1413e:	83 7d e8 04          	cmp    DWORD PTR [ebp-0x18],0x4
   14142:	0f 85 a0 00 00 00    	jne    141e8 <ahciProbePorts+0x21e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:272
                printd(DEBUG_AHCI, "AHCI:SATAPI drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   14148:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1414b:	83 c0 02             	add    eax,0x2
   1414e:	c1 e0 07             	shl    eax,0x7
   14151:	89 c2                	mov    edx,eax
   14153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14156:	01 d0                	add    eax,edx
   14158:	50                   	push   eax
   14159:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1415c:	68 9c 63 04 00       	push   0x4639c
   14161:	68 00 20 00 00       	push   0x2000
   14166:	e8 6c 2f 01 00       	call   270d7 <printd>
   1416b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:273
                printd(DEBUG_AHCI, "AHCI:\tCLB=0x%08X, fb=0x%08X\n", abar->ports[i].clb, abar->ports[i].fb);
   1416e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14171:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   14174:	83 c2 02             	add    edx,0x2
   14177:	c1 e2 07             	shl    edx,0x7
   1417a:	01 d0                	add    eax,edx
   1417c:	83 c0 08             	add    eax,0x8
   1417f:	8b 10                	mov    edx,DWORD PTR [eax]
   14181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14184:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   14187:	83 c1 02             	add    ecx,0x2
   1418a:	c1 e1 07             	shl    ecx,0x7
   1418d:	01 c8                	add    eax,ecx
   1418f:	8b 00                	mov    eax,DWORD PTR [eax]
   14191:	52                   	push   edx
   14192:	50                   	push   eax
   14193:	68 7c 63 04 00       	push   0x4637c
   14198:	68 00 20 00 00       	push   0x2000
   1419d:	e8 35 2f 01 00       	call   270d7 <printd>
   141a2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:274
                port_rebase(&abar->ports[i], i, rb);
   141a5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   141a8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   141ab:	83 c2 02             	add    edx,0x2
   141ae:	89 d1                	mov    ecx,edx
   141b0:	c1 e1 07             	shl    ecx,0x7
   141b3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   141b6:	01 ca                	add    edx,ecx
   141b8:	83 ec 04             	sub    esp,0x4
   141bb:	50                   	push   eax
   141bc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   141bf:	52                   	push   edx
   141c0:	e8 af 06 00 00       	call   14874 <port_rebase>
   141c5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:276
                //Run an ATA_IDENTIFY
                ahciIdentify(&abar->ports[i], AHCI_DEV_SATAPI);
   141c8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   141cb:	83 c0 02             	add    eax,0x2
   141ce:	c1 e0 07             	shl    eax,0x7
   141d1:	89 c2                	mov    edx,eax
   141d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   141d6:	01 d0                	add    eax,edx
   141d8:	83 ec 08             	sub    esp,0x8
   141db:	6a 04                	push   0x4
   141dd:	50                   	push   eax
   141de:	e8 09 09 00 00       	call   14aec <ahciIdentify>
   141e3:	83 c4 10             	add    esp,0x10
   141e6:	eb 5a                	jmp    14242 <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:277
            } else if (dt == AHCI_DEV_SEMB) {
   141e8:	83 7d e8 02          	cmp    DWORD PTR [ebp-0x18],0x2
   141ec:	75 28                	jne    14216 <ahciProbePorts+0x24c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:278
                printd(DEBUG_AHCI, "AHCI: SEMB drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   141ee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   141f1:	83 c0 02             	add    eax,0x2
   141f4:	c1 e0 07             	shl    eax,0x7
   141f7:	89 c2                	mov    edx,eax
   141f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   141fc:	01 d0                	add    eax,edx
   141fe:	50                   	push   eax
   141ff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14202:	68 cc 63 04 00       	push   0x463cc
   14207:	68 00 20 00 00       	push   0x2000
   1420c:	e8 c6 2e 01 00       	call   270d7 <printd>
   14211:	83 c4 10             	add    esp,0x10
   14214:	eb 2c                	jmp    14242 <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:280
                //port_rebase(abar->ports,i,rb+=0x10000);
            } else if (dt == AHCI_DEV_PM) {
   14216:	83 7d e8 03          	cmp    DWORD PTR [ebp-0x18],0x3
   1421a:	75 26                	jne    14242 <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:281
                printd(DEBUG_AHCI, "AHCI: PM drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   1421c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1421f:	83 c0 02             	add    eax,0x2
   14222:	c1 e0 07             	shl    eax,0x7
   14225:	89 c2                	mov    edx,eax
   14227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1422a:	01 d0                	add    eax,edx
   1422c:	50                   	push   eax
   1422d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14230:	68 f8 63 04 00       	push   0x463f8
   14235:	68 00 20 00 00       	push   0x2000
   1423a:	e8 98 2e 01 00       	call   270d7 <printd>
   1423f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:290
            //			{
            //				printk("No drive found at port %d\n", i);
            //			}
        }

        pi >>= 1;
   14242:	d1 6d f4             	shr    DWORD PTR [ebp-0xc],1
/home/yogi/src/os/chrisOS/src/block/ahci.c:291
        i++;
   14245:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:246
    uint32_t pi = abar->pi;
    int i = 0;
    int rb = AHCI_PORT_BASE_REMAP_ADDRESS + (0x10000 * ahciHostCount); //probably only need 0xA000
    if (pi > 0)
        printd(DEBUG_AHCI, "AHCI: Probing ports via ABAR 0x%08X, value 0x%02X\n", abar, abar->pi);
    while (i < 32) {
   14249:	83 7d f0 1f          	cmp    DWORD PTR [ebp-0x10],0x1f
   1424d:	0f 8e c8 fd ff ff    	jle    1401b <ahciProbePorts+0x51>
/home/yogi/src/os/chrisOS/src/block/ahci.c:293
        }

        pi >>= 1;
        i++;
    }
}
   14253:	90                   	nop
   14254:	c9                   	leave  
   14255:	c3                   	ret    

00014256 <printAHCICaps>:
printAHCICaps():
/home/yogi/src/os/chrisOS/src/block/ahci.c:295

void printAHCICaps() {
   14256:	55                   	push   ebp
   14257:	89 e5                	mov    ebp,esp
   14259:	57                   	push   edi
   1425a:	56                   	push   esi
   1425b:	53                   	push   ebx
   1425c:	81 ec 2c 02 00 00    	sub    esp,0x22c
/home/yogi/src/os/chrisOS/src/block/ahci.c:297
    //printk("ahciCaps=0x%08X, sizeof=%u\n",ahciCaps,sizeof(ahcicaps_t));
    terminal_clear();
   14262:	e8 5b 39 00 00       	call   17bc2 <terminal_clear>
/home/yogi/src/os/chrisOS/src/block/ahci.c:298
    printk("AHCI Caps:\n");
   14267:	83 ec 0c             	sub    esp,0xc
   1426a:	68 22 64 04 00       	push   0x46422
   1426f:	e8 43 2e 01 00       	call   270b7 <printk>
   14274:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:299
    printk("\tSupports 64-bit Addressing (S64A):\t\t\t\t%s\n", ahciCaps->S64A ? "Yes" : "No");
   14277:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   1427c:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   14280:	83 e0 80             	and    eax,0xffffff80
   14283:	84 c0                	test   al,al
   14285:	74 07                	je     1428e <printAHCICaps+0x38>
/home/yogi/src/os/chrisOS/src/block/ahci.c:299 (discriminator 1)
   14287:	b8 2e 64 04 00       	mov    eax,0x4642e
   1428c:	eb 05                	jmp    14293 <printAHCICaps+0x3d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:299 (discriminator 2)
   1428e:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/src/os/chrisOS/src/block/ahci.c:299 (discriminator 4)
   14293:	83 ec 08             	sub    esp,0x8
   14296:	50                   	push   eax
   14297:	68 38 64 04 00       	push   0x46438
   1429c:	e8 16 2e 01 00       	call   270b7 <printk>
   142a1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:300 (discriminator 4)
    printk("\tSupprorts Native Command Queueing (SNCQ):\t\t%s\n", ahciCaps->SNCQ ? "Yes" : "No");
   142a4:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   142a9:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   142ad:	83 e0 40             	and    eax,0x40
   142b0:	84 c0                	test   al,al
   142b2:	74 07                	je     142bb <printAHCICaps+0x65>
/home/yogi/src/os/chrisOS/src/block/ahci.c:300 (discriminator 1)
   142b4:	b8 2e 64 04 00       	mov    eax,0x4642e
   142b9:	eb 05                	jmp    142c0 <printAHCICaps+0x6a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:300 (discriminator 2)
   142bb:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/src/os/chrisOS/src/block/ahci.c:300 (discriminator 4)
   142c0:	83 ec 08             	sub    esp,0x8
   142c3:	50                   	push   eax
   142c4:	68 64 64 04 00       	push   0x46464
   142c9:	e8 e9 2d 01 00       	call   270b7 <printk>
   142ce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:301 (discriminator 4)
    printk("\tSupports SNotification Register (SSNTF):\t\t%s\n", ahciCaps->SSNTF ? "Yes" : "No");
   142d1:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   142d6:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   142da:	83 e0 20             	and    eax,0x20
   142dd:	84 c0                	test   al,al
   142df:	74 07                	je     142e8 <printAHCICaps+0x92>
/home/yogi/src/os/chrisOS/src/block/ahci.c:301 (discriminator 1)
   142e1:	b8 2e 64 04 00       	mov    eax,0x4642e
   142e6:	eb 05                	jmp    142ed <printAHCICaps+0x97>
/home/yogi/src/os/chrisOS/src/block/ahci.c:301 (discriminator 2)
   142e8:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/src/os/chrisOS/src/block/ahci.c:301 (discriminator 4)
   142ed:	83 ec 08             	sub    esp,0x8
   142f0:	50                   	push   eax
   142f1:	68 94 64 04 00       	push   0x46494
   142f6:	e8 bc 2d 01 00       	call   270b7 <printk>
   142fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:302 (discriminator 4)
    printk("\tSupports Mechanical Presence Switch (SMPS):\t\t%s\n", ahciCaps->SMPS ? "Yes" : "No");
   142fe:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   14303:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   14307:	83 e0 10             	and    eax,0x10
   1430a:	84 c0                	test   al,al
   1430c:	74 07                	je     14315 <printAHCICaps+0xbf>
/home/yogi/src/os/chrisOS/src/block/ahci.c:302 (discriminator 1)
   1430e:	b8 2e 64 04 00       	mov    eax,0x4642e
   14313:	eb 05                	jmp    1431a <printAHCICaps+0xc4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:302 (discriminator 2)
   14315:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/src/os/chrisOS/src/block/ahci.c:302 (discriminator 4)
   1431a:	83 ec 08             	sub    esp,0x8
   1431d:	50                   	push   eax
   1431e:	68 c4 64 04 00       	push   0x464c4
   14323:	e8 8f 2d 01 00       	call   270b7 <printk>
   14328:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:303 (discriminator 4)
    printk("\tSupports Staggered Spin-up (SSS):\t\t\t\t%s\n", ahciCaps->SSS ? "Yes" : "No");
   1432b:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   14330:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   14334:	83 e0 08             	and    eax,0x8
   14337:	84 c0                	test   al,al
   14339:	74 07                	je     14342 <printAHCICaps+0xec>
/home/yogi/src/os/chrisOS/src/block/ahci.c:303 (discriminator 1)
   1433b:	b8 2e 64 04 00       	mov    eax,0x4642e
   14340:	eb 05                	jmp    14347 <printAHCICaps+0xf1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:303 (discriminator 2)
   14342:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/src/os/chrisOS/src/block/ahci.c:303 (discriminator 4)
   14347:	83 ec 08             	sub    esp,0x8
   1434a:	50                   	push   eax
   1434b:	68 f8 64 04 00       	push   0x464f8
   14350:	e8 62 2d 01 00       	call   270b7 <printk>
   14355:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:304 (discriminator 4)
    printk("\tSupports Aggressive Link Power Management (SALP):\t%s\n", ahciCaps->SALP ? "Yes" : "No");
   14358:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   1435d:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   14361:	83 e0 04             	and    eax,0x4
   14364:	84 c0                	test   al,al
   14366:	74 07                	je     1436f <printAHCICaps+0x119>
/home/yogi/src/os/chrisOS/src/block/ahci.c:304 (discriminator 1)
   14368:	b8 2e 64 04 00       	mov    eax,0x4642e
   1436d:	eb 05                	jmp    14374 <printAHCICaps+0x11e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:304 (discriminator 2)
   1436f:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/src/os/chrisOS/src/block/ahci.c:304 (discriminator 4)
   14374:	83 ec 08             	sub    esp,0x8
   14377:	50                   	push   eax
   14378:	68 24 65 04 00       	push   0x46524
   1437d:	e8 35 2d 01 00       	call   270b7 <printk>
   14382:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:305 (discriminator 4)
    printk("\tSupports Active LED (SAL):\t\t\t\t\t%s\n", ahciCaps->SAL ? "Yes" : "No");
   14385:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   1438a:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1438e:	83 e0 02             	and    eax,0x2
   14391:	84 c0                	test   al,al
   14393:	74 07                	je     1439c <printAHCICaps+0x146>
/home/yogi/src/os/chrisOS/src/block/ahci.c:305 (discriminator 1)
   14395:	b8 2e 64 04 00       	mov    eax,0x4642e
   1439a:	eb 05                	jmp    143a1 <printAHCICaps+0x14b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:305 (discriminator 2)
   1439c:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/src/os/chrisOS/src/block/ahci.c:305 (discriminator 4)
   143a1:	83 ec 08             	sub    esp,0x8
   143a4:	50                   	push   eax
   143a5:	68 5c 65 04 00       	push   0x4655c
   143aa:	e8 08 2d 01 00       	call   270b7 <printk>
   143af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:306 (discriminator 4)
    printk("\tSupports Command List Override (SCLO):\t\t\t%s\n", ahciCaps->SCLO ? "Yes" : "No");
   143b2:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   143b7:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   143bb:	83 e0 01             	and    eax,0x1
   143be:	84 c0                	test   al,al
   143c0:	74 07                	je     143c9 <printAHCICaps+0x173>
/home/yogi/src/os/chrisOS/src/block/ahci.c:306 (discriminator 1)
   143c2:	b8 2e 64 04 00       	mov    eax,0x4642e
   143c7:	eb 05                	jmp    143ce <printAHCICaps+0x178>
/home/yogi/src/os/chrisOS/src/block/ahci.c:306 (discriminator 2)
   143c9:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/src/os/chrisOS/src/block/ahci.c:306 (discriminator 4)
   143ce:	83 ec 08             	sub    esp,0x8
   143d1:	50                   	push   eax
   143d2:	68 80 65 04 00       	push   0x46580
   143d7:	e8 db 2c 01 00       	call   270b7 <printk>
   143dc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 4)
    printk("\tInterface Speed Support (ISS):\t\t\t\t%s\n", ahciCaps->ISS == 1 ? "1.5 Gbps" : ahciCaps->ISS == 2 ? "3 Gbps" : ahciCaps->ISS == 3 ? "6 Gbps" : "Reserved");
   143df:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   143e4:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   143e8:	83 e0 f0             	and    eax,0xfffffff0
   143eb:	3c 10                	cmp    al,0x10
   143ed:	74 35                	je     14424 <printAHCICaps+0x1ce>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 1)
   143ef:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   143f4:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   143f8:	83 e0 f0             	and    eax,0xfffffff0
   143fb:	3c 20                	cmp    al,0x20
   143fd:	74 1e                	je     1441d <printAHCICaps+0x1c7>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 3)
   143ff:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   14404:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   14408:	83 e0 f0             	and    eax,0xfffffff0
   1440b:	3c 30                	cmp    al,0x30
   1440d:	75 07                	jne    14416 <printAHCICaps+0x1c0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 5)
   1440f:	b8 ae 65 04 00       	mov    eax,0x465ae
   14414:	eb 13                	jmp    14429 <printAHCICaps+0x1d3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 6)
   14416:	b8 b5 65 04 00       	mov    eax,0x465b5
   1441b:	eb 0c                	jmp    14429 <printAHCICaps+0x1d3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 4)
   1441d:	b8 be 65 04 00       	mov    eax,0x465be
   14422:	eb 05                	jmp    14429 <printAHCICaps+0x1d3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 2)
   14424:	b8 c5 65 04 00       	mov    eax,0x465c5
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 12)
   14429:	83 ec 08             	sub    esp,0x8
   1442c:	50                   	push   eax
   1442d:	68 d0 65 04 00       	push   0x465d0
   14432:	e8 80 2c 01 00       	call   270b7 <printk>
   14437:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:308 (discriminator 12)
    printk("\tSupports AHCI mode only (SAM):\t\t\t\t%s\n", ahciCaps->SAM ? "Yes" : "No");
   1443a:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   1443f:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   14443:	83 e0 04             	and    eax,0x4
   14446:	84 c0                	test   al,al
   14448:	74 07                	je     14451 <printAHCICaps+0x1fb>
/home/yogi/src/os/chrisOS/src/block/ahci.c:308 (discriminator 1)
   1444a:	b8 2e 64 04 00       	mov    eax,0x4642e
   1444f:	eb 05                	jmp    14456 <printAHCICaps+0x200>
/home/yogi/src/os/chrisOS/src/block/ahci.c:308 (discriminator 2)
   14451:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/src/os/chrisOS/src/block/ahci.c:308 (discriminator 4)
   14456:	83 ec 08             	sub    esp,0x8
   14459:	50                   	push   eax
   1445a:	68 f8 65 04 00       	push   0x465f8
   1445f:	e8 53 2c 01 00       	call   270b7 <printk>
   14464:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:309 (discriminator 4)
    printk("\tSupports Port Multiplier (SPM):\t\t\t\t%s\n", ahciCaps->SPM ? "Yes" : "No");
   14467:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   1446c:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   14470:	83 e0 02             	and    eax,0x2
   14473:	84 c0                	test   al,al
   14475:	74 07                	je     1447e <printAHCICaps+0x228>
/home/yogi/src/os/chrisOS/src/block/ahci.c:309 (discriminator 1)
   14477:	b8 2e 64 04 00       	mov    eax,0x4642e
   1447c:	eb 05                	jmp    14483 <printAHCICaps+0x22d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:309 (discriminator 2)
   1447e:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/src/os/chrisOS/src/block/ahci.c:309 (discriminator 4)
   14483:	83 ec 08             	sub    esp,0x8
   14486:	50                   	push   eax
   14487:	68 20 66 04 00       	push   0x46620
   1448c:	e8 26 2c 01 00       	call   270b7 <printk>
   14491:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:310 (discriminator 4)
    printk("\tFIS-based Switching Support (FBSS):\t\t\t%s\n", ahciCaps->FBSS ? "Yes" : "No");   
   14494:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   14499:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1449d:	83 e0 01             	and    eax,0x1
   144a0:	84 c0                	test   al,al
   144a2:	74 07                	je     144ab <printAHCICaps+0x255>
/home/yogi/src/os/chrisOS/src/block/ahci.c:310 (discriminator 1)
   144a4:	b8 2e 64 04 00       	mov    eax,0x4642e
   144a9:	eb 05                	jmp    144b0 <printAHCICaps+0x25a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:310 (discriminator 2)
   144ab:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/src/os/chrisOS/src/block/ahci.c:310 (discriminator 4)
   144b0:	83 ec 08             	sub    esp,0x8
   144b3:	50                   	push   eax
   144b4:	68 48 66 04 00       	push   0x46648
   144b9:	e8 f9 2b 01 00       	call   270b7 <printk>
   144be:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:311 (discriminator 4)
    printk("\tPIO Multiple DRQ Block (PMD):\t\t\t\t\t%s\n", ahciCaps->PMD ? "Yes" : "No");
   144c1:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   144c6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   144ca:	83 e0 80             	and    eax,0xffffff80
   144cd:	84 c0                	test   al,al
   144cf:	74 07                	je     144d8 <printAHCICaps+0x282>
/home/yogi/src/os/chrisOS/src/block/ahci.c:311 (discriminator 1)
   144d1:	b8 2e 64 04 00       	mov    eax,0x4642e
   144d6:	eb 05                	jmp    144dd <printAHCICaps+0x287>
/home/yogi/src/os/chrisOS/src/block/ahci.c:311 (discriminator 2)
   144d8:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/src/os/chrisOS/src/block/ahci.c:311 (discriminator 4)
   144dd:	83 ec 08             	sub    esp,0x8
   144e0:	50                   	push   eax
   144e1:	68 74 66 04 00       	push   0x46674
   144e6:	e8 cc 2b 01 00       	call   270b7 <printk>
   144eb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:312 (discriminator 4)
    printk("\tSlumber State Capable (SSC):\t\t\t\t\t%s\n", ahciCaps->SSC ? "Yes" : "No");
   144ee:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   144f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   144f7:	83 e0 40             	and    eax,0x40
   144fa:	84 c0                	test   al,al
   144fc:	74 07                	je     14505 <printAHCICaps+0x2af>
/home/yogi/src/os/chrisOS/src/block/ahci.c:312 (discriminator 1)
   144fe:	b8 2e 64 04 00       	mov    eax,0x4642e
   14503:	eb 05                	jmp    1450a <printAHCICaps+0x2b4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:312 (discriminator 2)
   14505:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/src/os/chrisOS/src/block/ahci.c:312 (discriminator 4)
   1450a:	83 ec 08             	sub    esp,0x8
   1450d:	50                   	push   eax
   1450e:	68 9c 66 04 00       	push   0x4669c
   14513:	e8 9f 2b 01 00       	call   270b7 <printk>
   14518:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:313 (discriminator 4)
    printk("\tPartial State Capable (PSC):\t\t\t\t\t%s\n", ahciCaps->PSC ? "Yes" : "No");
   1451b:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   14520:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   14524:	83 e0 20             	and    eax,0x20
   14527:	84 c0                	test   al,al
   14529:	74 07                	je     14532 <printAHCICaps+0x2dc>
/home/yogi/src/os/chrisOS/src/block/ahci.c:313 (discriminator 1)
   1452b:	b8 2e 64 04 00       	mov    eax,0x4642e
   14530:	eb 05                	jmp    14537 <printAHCICaps+0x2e1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:313 (discriminator 2)
   14532:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/src/os/chrisOS/src/block/ahci.c:313 (discriminator 4)
   14537:	83 ec 08             	sub    esp,0x8
   1453a:	50                   	push   eax
   1453b:	68 c4 66 04 00       	push   0x466c4
   14540:	e8 72 2b 01 00       	call   270b7 <printk>
   14545:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:314 (discriminator 4)
    printk("\tNumber of Command Slots (NSC):\t\t\t\t%u\n", ahciCaps->NCS);
   14548:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   1454d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   14551:	83 e0 1f             	and    eax,0x1f
   14554:	0f b6 c0             	movzx  eax,al
   14557:	83 ec 08             	sub    esp,0x8
   1455a:	50                   	push   eax
   1455b:	68 ec 66 04 00       	push   0x466ec
   14560:	e8 52 2b 01 00       	call   270b7 <printk>
   14565:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:315 (discriminator 4)
    printk("\tCommand Completion Coalescing Supported (CCCS):\t%s\n", ahciCaps->CCCS ? "Yes" : "No");
   14568:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   1456d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   14570:	83 e0 80             	and    eax,0xffffff80
   14573:	84 c0                	test   al,al
   14575:	74 07                	je     1457e <printAHCICaps+0x328>
/home/yogi/src/os/chrisOS/src/block/ahci.c:315 (discriminator 1)
   14577:	b8 2e 64 04 00       	mov    eax,0x4642e
   1457c:	eb 05                	jmp    14583 <printAHCICaps+0x32d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:315 (discriminator 2)
   1457e:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/src/os/chrisOS/src/block/ahci.c:315 (discriminator 4)
   14583:	83 ec 08             	sub    esp,0x8
   14586:	50                   	push   eax
   14587:	68 14 67 04 00       	push   0x46714
   1458c:	e8 26 2b 01 00       	call   270b7 <printk>
   14591:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:316 (discriminator 4)
    printk("\tEnclosure Management Supported (EMS):\t\t\t%s\n", ahciCaps->EMS ? "Yes" : "No");
   14594:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   14599:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1459c:	83 e0 40             	and    eax,0x40
   1459f:	84 c0                	test   al,al
   145a1:	74 07                	je     145aa <printAHCICaps+0x354>
/home/yogi/src/os/chrisOS/src/block/ahci.c:316 (discriminator 1)
   145a3:	b8 2e 64 04 00       	mov    eax,0x4642e
   145a8:	eb 05                	jmp    145af <printAHCICaps+0x359>
/home/yogi/src/os/chrisOS/src/block/ahci.c:316 (discriminator 2)
   145aa:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/src/os/chrisOS/src/block/ahci.c:316 (discriminator 4)
   145af:	83 ec 08             	sub    esp,0x8
   145b2:	50                   	push   eax
   145b3:	68 4c 67 04 00       	push   0x4674c
   145b8:	e8 fa 2a 01 00       	call   270b7 <printk>
   145bd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:317 (discriminator 4)
    printk("\tSupports External SATA (SXS):\t\t\t\t\t%s\n", ahciCaps->SXS ? "Yes" : "No");
   145c0:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   145c5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   145c8:	83 e0 20             	and    eax,0x20
   145cb:	84 c0                	test   al,al
   145cd:	74 07                	je     145d6 <printAHCICaps+0x380>
/home/yogi/src/os/chrisOS/src/block/ahci.c:317 (discriminator 1)
   145cf:	b8 2e 64 04 00       	mov    eax,0x4642e
   145d4:	eb 05                	jmp    145db <printAHCICaps+0x385>
/home/yogi/src/os/chrisOS/src/block/ahci.c:317 (discriminator 2)
   145d6:	b8 32 64 04 00       	mov    eax,0x46432
/home/yogi/src/os/chrisOS/src/block/ahci.c:317 (discriminator 4)
   145db:	83 ec 08             	sub    esp,0x8
   145de:	50                   	push   eax
   145df:	68 7c 67 04 00       	push   0x4677c
   145e4:	e8 ce 2a 01 00       	call   270b7 <printk>
   145e9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:318 (discriminator 4)
    printk("\tNumber of Ports (NP):\t\t\t\t\t\t%u\n", ahciCaps->NP);
   145ec:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   145f1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   145f4:	83 e0 1f             	and    eax,0x1f
   145f7:	0f b6 c0             	movzx  eax,al
   145fa:	83 ec 08             	sub    esp,0x8
   145fd:	50                   	push   eax
   145fe:	68 a4 67 04 00       	push   0x467a4
   14603:	e8 af 2a 01 00       	call   270b7 <printk>
   14608:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:321 (discriminator 4)
    //printk("Press a key for more ...");
    //waitForKeyboardKey();
    printk("AHCI: SATA Disks:\n");
   1460b:	83 ec 0c             	sub    esp,0xc
   1460e:	68 c4 67 04 00       	push   0x467c4
   14613:	e8 9f 2a 01 00       	call   270b7 <printk>
   14618:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:323 (discriminator 4)
    char p1[512];
    for (int cnt = 4; cnt < 10; cnt++)
   1461b:	c7 45 e4 04 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x4
   14622:	e9 3a 02 00 00       	jmp    14861 <printAHCICaps+0x60b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:324
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
   14627:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   1462d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14630:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14636:	01 d0                	add    eax,edx
   14638:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   1463f:	84 c0                	test   al,al
   14641:	0f 84 16 02 00 00    	je     1485d <printAHCICaps+0x607>
/home/yogi/src/os/chrisOS/src/block/ahci.c:325
            memset(p1, 0, 512);
   14647:	83 ec 04             	sub    esp,0x4
   1464a:	68 00 02 00 00       	push   0x200
   1464f:	6a 00                	push   0x0
   14651:	8d 85 d8 fd ff ff    	lea    eax,[ebp-0x228]
   14657:	50                   	push   eax
   14658:	e8 d0 09 01 00       	call   2502d <memset>
   1465d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:326
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
   14660:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14666:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14669:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   1466f:	01 d0                	add    eax,edx
   14671:	05 00 02 00 00       	add    eax,0x200
   14676:	83 ec 08             	sub    esp,0x8
   14679:	50                   	push   eax
   1467a:	8d 85 d8 fd ff ff    	lea    eax,[ebp-0x228]
   14680:	50                   	push   eax
   14681:	e8 92 2b 01 00       	call   27218 <strcpy>
   14686:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:327
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
   14689:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   1468f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14692:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14698:	01 d0                	add    eax,edx
   1469a:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   146a1:	3c 01                	cmp    al,0x1
   146a3:	75 08                	jne    146ad <printAHCICaps+0x457>
/home/yogi/src/os/chrisOS/src/block/ahci.c:327 (discriminator 1)
   146a5:	8d 85 d8 fd ff ff    	lea    eax,[ebp-0x228]
   146ab:	eb 05                	jmp    146b2 <printAHCICaps+0x45c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:327 (discriminator 2)
   146ad:	b8 d7 67 04 00       	mov    eax,0x467d7
/home/yogi/src/os/chrisOS/src/block/ahci.c:327 (discriminator 4)
   146b2:	83 ec 04             	sub    esp,0x4
   146b5:	50                   	push   eax
   146b6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   146b9:	68 dd 67 04 00       	push   0x467dd
   146be:	e8 f4 29 01 00       	call   270b7 <printk>
   146c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:335 (discriminator 4)
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
                    kATADeviceInfo[cnt].ABAR,
                    kATADeviceInfo[cnt].ioPort);
   146c6:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   146cc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   146cf:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   146d5:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   146d7:	8b b8 69 02 00 00    	mov    edi,DWORD PTR [eax+0x269]
/home/yogi/src/os/chrisOS/src/block/ahci.c:334 (discriminator 4)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
                    kATADeviceInfo[cnt].ABAR,
   146dd:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   146e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   146e6:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   146ec:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   146ee:	8b b0 6f 02 00 00    	mov    esi,DWORD PTR [eax+0x26f]
/home/yogi/src/os/chrisOS/src/block/ahci.c:333 (discriminator 4)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
   146f4:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   146fa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   146fd:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14703:	01 d0                	add    eax,edx
   14705:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   1470c:	84 c0                	test   al,al
   1470e:	74 0c                	je     1471c <printAHCICaps+0x4c6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 1)
   14710:	c7 85 d4 fd ff ff f2 	mov    DWORD PTR [ebp-0x22c],0x467f2
   14717:	67 04 00 
   1471a:	eb 0a                	jmp    14726 <printAHCICaps+0x4d0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 2)
   1471c:	c7 85 d4 fd ff ff f7 	mov    DWORD PTR [ebp-0x22c],0x467f7
   14723:	67 04 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:332 (discriminator 4)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
   14726:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   1472c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1472f:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14735:	01 d0                	add    eax,edx
   14737:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   1473e:	84 c0                	test   al,al
   14740:	74 0c                	je     1474e <printAHCICaps+0x4f8>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 5)
   14742:	c7 85 d0 fd ff ff f8 	mov    DWORD PTR [ebp-0x230],0x467f8
   14749:	67 04 00 
   1474c:	eb 0a                	jmp    14758 <printAHCICaps+0x502>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 6)
   1474e:	c7 85 d0 fd ff ff f7 	mov    DWORD PTR [ebp-0x230],0x467f7
   14755:	67 04 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:331 (discriminator 8)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
   14758:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   1475e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14761:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14767:	01 d0                	add    eax,edx
   14769:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 8)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   14770:	84 c0                	test   al,al
   14772:	74 0c                	je     14780 <printAHCICaps+0x52a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 9)
   14774:	c7 85 cc fd ff ff ff 	mov    DWORD PTR [ebp-0x234],0x467ff
   1477b:	67 04 00 
   1477e:	eb 0a                	jmp    1478a <printAHCICaps+0x534>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 10)
   14780:	c7 85 cc fd ff ff f7 	mov    DWORD PTR [ebp-0x234],0x467f7
   14787:	67 04 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:330
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
   1478a:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14790:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14793:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14799:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:328
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   1479b:	8b 98 5a 02 00 00    	mov    ebx,DWORD PTR [eax+0x25a]
/home/yogi/src/os/chrisOS/src/block/ahci.c:329
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
   147a1:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   147a7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   147aa:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   147b0:	01 d0                	add    eax,edx
   147b2:	8b 88 56 02 00 00    	mov    ecx,DWORD PTR [eax+0x256]
   147b8:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   147be:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   147c1:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   147c7:	01 d0                	add    eax,edx
   147c9:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   147cf:	0f af c1             	imul   eax,ecx
/home/yogi/src/os/chrisOS/src/block/ahci.c:328
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   147d2:	c1 e8 14             	shr    eax,0x14
   147d5:	57                   	push   edi
   147d6:	56                   	push   esi
   147d7:	ff b5 d4 fd ff ff    	push   DWORD PTR [ebp-0x22c]
   147dd:	ff b5 d0 fd ff ff    	push   DWORD PTR [ebp-0x230]
   147e3:	ff b5 cc fd ff ff    	push   DWORD PTR [ebp-0x234]
   147e9:	53                   	push   ebx
   147ea:	50                   	push   eax
   147eb:	68 04 68 04 00       	push   0x46804
   147f0:	e8 c2 28 01 00       	call   270b7 <printk>
   147f5:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:336
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
                    kATADeviceInfo[cnt].ABAR,
                    kATADeviceInfo[cnt].ioPort);
            volatile HBA_PORT* port = (HBA_PORT*) kATADeviceInfo[cnt].ioPort;
   147f8:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   147fe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14801:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14807:	01 d0                	add    eax,edx
   14809:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   1480f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:337
            HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
   14812:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   14815:	8b 00                	mov    eax,DWORD PTR [eax]
   14817:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:338
            HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   1481a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1481d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14820:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:339
            printk("\t\tCLB=0x%08X, FB=0x%08X\n",port->clb,port->fb);
   14823:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   14826:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14829:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1482c:	8b 00                	mov    eax,DWORD PTR [eax]
   1482e:	83 ec 04             	sub    esp,0x4
   14831:	52                   	push   edx
   14832:	50                   	push   eax
   14833:	68 36 68 04 00       	push   0x46836
   14838:	e8 7a 28 01 00       	call   270b7 <printk>
   1483d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:340
            printk("\t\tCMDHeader=0x%08X, CMDTable=0x%08X\n", port->clb, cmdheader->ctba);
   14840:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   14843:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14846:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   14849:	8b 00                	mov    eax,DWORD PTR [eax]
   1484b:	83 ec 04             	sub    esp,0x4
   1484e:	52                   	push   edx
   1484f:	50                   	push   eax
   14850:	68 50 68 04 00       	push   0x46850
   14855:	e8 5d 28 01 00       	call   270b7 <printk>
   1485a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:323 (discriminator 2)
    printk("\tNumber of Ports (NP):\t\t\t\t\t\t%u\n", ahciCaps->NP);
    //printk("Press a key for more ...");
    //waitForKeyboardKey();
    printk("AHCI: SATA Disks:\n");
    char p1[512];
    for (int cnt = 4; cnt < 10; cnt++)
   1485d:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:323 (discriminator 1)
   14861:	83 7d e4 09          	cmp    DWORD PTR [ebp-0x1c],0x9
   14865:	0f 8e bc fd ff ff    	jle    14627 <printAHCICaps+0x3d1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:342
            HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
            HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
            printk("\t\tCLB=0x%08X, FB=0x%08X\n",port->clb,port->fb);
            printk("\t\tCMDHeader=0x%08X, CMDTable=0x%08X\n", port->clb, cmdheader->ctba);
        }
}
   1486b:	90                   	nop
   1486c:	8d 65 f4             	lea    esp,[ebp-0xc]
   1486f:	5b                   	pop    ebx
   14870:	5e                   	pop    esi
   14871:	5f                   	pop    edi
   14872:	5d                   	pop    ebp
   14873:	c3                   	ret    

00014874 <port_rebase>:
port_rebase():
/home/yogi/src/os/chrisOS/src/block/ahci.c:344

void port_rebase(volatile HBA_PORT *port, int portno, uintptr_t remapBase) {
   14874:	55                   	push   ebp
   14875:	89 e5                	mov    ebp,esp
   14877:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/ahci.c:346
    //each command list is 1k (32k possible per port))
    printd(DEBUG_AHCI, "AHCI: Rebasing port %u (0x%08X) clb/fb from 0x%08X/0x%08X\n\t", portno, port, port->clb, port->fb);
   1487a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1487d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14880:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14883:	8b 00                	mov    eax,DWORD PTR [eax]
   14885:	83 ec 08             	sub    esp,0x8
   14888:	52                   	push   edx
   14889:	50                   	push   eax
   1488a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1488d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   14890:	68 78 68 04 00       	push   0x46878
   14895:	68 00 20 00 00       	push   0x2000
   1489a:	e8 38 28 01 00       	call   270d7 <printd>
   1489f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:347
    stop_cmd(port); // Stop command engine
   148a2:	83 ec 0c             	sub    esp,0xc
   148a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   148a8:	e8 eb 01 00 00       	call   14a98 <stop_cmd>
   148ad:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:353

    // Command list offset: 1K*portno
    // Command list entry size = 32
    // Command list entry maxim count = 32
    // Command list maxim size = 32*32 = 1K per port
    port->clbu = 0;
   148b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   148b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:354
    port->clb = (remapBase + (portno<<15) + 0x1000) & 0xFFFFF000;
   148ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   148bd:	c1 e0 0f             	shl    eax,0xf
   148c0:	89 c2                	mov    edx,eax
   148c2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   148c5:	01 d0                	add    eax,edx
   148c7:	05 00 10 00 00       	add    eax,0x1000
   148cc:	25 00 f0 ff ff       	and    eax,0xfffff000
   148d1:	89 c2                	mov    edx,eax
   148d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   148d6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:355
    memset((void*) (port->clb), 0, 1024);
   148d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   148db:	8b 00                	mov    eax,DWORD PTR [eax]
   148dd:	83 ec 04             	sub    esp,0x4
   148e0:	68 00 04 00 00       	push   0x400
   148e5:	6a 00                	push   0x0
   148e7:	50                   	push   eax
   148e8:	e8 40 07 01 00       	call   2502d <memset>
   148ed:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:356
    kMapPage(port->clb,port->clb,0x73); //make un-cached
   148f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   148f3:	8b 10                	mov    edx,DWORD PTR [eax]
   148f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   148f8:	8b 00                	mov    eax,DWORD PTR [eax]
   148fa:	83 ec 04             	sub    esp,0x4
   148fd:	6a 73                	push   0x73
   148ff:	52                   	push   edx
   14900:	50                   	push   eax
   14901:	e8 31 ce ff ff       	call   11737 <kMapPage>
   14906:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:361
    
    //each FIS is 256 bytes
    // FIS offset: 32K+256*portno
    // FIS entry size = 256 bytes per port
    port->fbu = 0;
   14909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1490c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:363
//    port->fb = (remapBase + (32 << 10) + (portno << 12) + 0x1000) & 0xFFFFF000;
    port->fb = (port->clb + 0x1000);
   14913:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14916:	8b 00                	mov    eax,DWORD PTR [eax]
   14918:	8d 90 00 10 00 00    	lea    edx,[eax+0x1000]
   1491e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14921:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:364
    memset((void*) (port->fb), 0, 256);
   14924:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14927:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1492a:	83 ec 04             	sub    esp,0x4
   1492d:	68 00 01 00 00       	push   0x100
   14932:	6a 00                	push   0x0
   14934:	50                   	push   eax
   14935:	e8 f3 06 01 00       	call   2502d <memset>
   1493a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:365
    kMapPage(port->fb,port->fb,0x73); //make un-cached
   1493d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14940:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14943:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14946:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14949:	83 ec 04             	sub    esp,0x4
   1494c:	6a 73                	push   0x73
   1494e:	52                   	push   edx
   1494f:	50                   	push   eax
   14950:	e8 e2 cd ff ff       	call   11737 <kMapPage>
   14955:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:370


    // Command table offset: 40K + 8K*portno
    // Command table size = 256*32 = 8K per port
    HBA_CMD_HEADER *cmdheader = (HBA_CMD_HEADER*) (port->clb);
   14958:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1495b:	8b 00                	mov    eax,DWORD PTR [eax]
   1495d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:371
    for (int i = 0; i < 32; i++) {
   14960:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   14967:	eb 79                	jmp    149e2 <port_rebase+0x16e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:372 (discriminator 3)
        cmdheader[i].prdtl = 8; // 8 prdt entries per command table
   14969:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1496c:	c1 e0 05             	shl    eax,0x5
   1496f:	89 c2                	mov    edx,eax
   14971:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14974:	01 d0                	add    eax,edx
   14976:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
/home/yogi/src/os/chrisOS/src/block/ahci.c:375 (discriminator 3)
        // 256 bytes per command table, 64+16+48+16*8
        // Command table offset: 40K + 8K*portno + cmdheader_index*256
        cmdheader[i].ctba = remapBase + (40 << 10) + (portno << 13) + (i << 8);
   1497c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1497f:	c1 e0 05             	shl    eax,0x5
   14982:	89 c2                	mov    edx,eax
   14984:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14987:	01 d0                	add    eax,edx
   14989:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1498c:	c1 e2 0d             	shl    edx,0xd
   1498f:	89 d1                	mov    ecx,edx
   14991:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   14994:	01 d1                	add    ecx,edx
   14996:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   14999:	c1 e2 08             	shl    edx,0x8
   1499c:	01 ca                	add    edx,ecx
   1499e:	81 c2 00 a0 00 00    	add    edx,0xa000
   149a4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:376 (discriminator 3)
        cmdheader[i].ctbau = 0;
   149a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   149aa:	c1 e0 05             	shl    eax,0x5
   149ad:	89 c2                	mov    edx,eax
   149af:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   149b2:	01 d0                	add    eax,edx
   149b4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:377 (discriminator 3)
        memset((void*) cmdheader[i].ctba, 0, 256);
   149bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   149be:	c1 e0 05             	shl    eax,0x5
   149c1:	89 c2                	mov    edx,eax
   149c3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   149c6:	01 d0                	add    eax,edx
   149c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   149cb:	83 ec 04             	sub    esp,0x4
   149ce:	68 00 01 00 00       	push   0x100
   149d3:	6a 00                	push   0x0
   149d5:	50                   	push   eax
   149d6:	e8 52 06 01 00       	call   2502d <memset>
   149db:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:371 (discriminator 3)


    // Command table offset: 40K + 8K*portno
    // Command table size = 256*32 = 8K per port
    HBA_CMD_HEADER *cmdheader = (HBA_CMD_HEADER*) (port->clb);
    for (int i = 0; i < 32; i++) {
   149de:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:371 (discriminator 1)
   149e2:	83 7d f4 1f          	cmp    DWORD PTR [ebp-0xc],0x1f
   149e6:	7e 81                	jle    14969 <port_rebase+0xf5>
/home/yogi/src/os/chrisOS/src/block/ahci.c:379
        // Command table offset: 40K + 8K*portno + cmdheader_index*256
        cmdheader[i].ctba = remapBase + (40 << 10) + (portno << 13) + (i << 8);
        cmdheader[i].ctbau = 0;
        memset((void*) cmdheader[i].ctba, 0, 256);
    }
    printd(DEBUG_AHCI, " to 0x%08X/0x%08X\n", port->clb, port->fb);
   149e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   149eb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   149ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   149f1:	8b 00                	mov    eax,DWORD PTR [eax]
   149f3:	52                   	push   edx
   149f4:	50                   	push   eax
   149f5:	68 b4 68 04 00       	push   0x468b4
   149fa:	68 00 20 00 00       	push   0x2000
   149ff:	e8 d3 26 01 00       	call   270d7 <printd>
   14a04:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:380
    start_cmd(port); // Start command engine
   14a07:	83 ec 0c             	sub    esp,0xc
   14a0a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14a0d:	e8 06 00 00 00       	call   14a18 <start_cmd>
   14a12:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:381
}
   14a15:	90                   	nop
   14a16:	c9                   	leave  
   14a17:	c3                   	ret    

00014a18 <start_cmd>:
start_cmd():
/home/yogi/src/os/chrisOS/src/block/ahci.c:385

// Start command engine

void start_cmd(volatile HBA_PORT *port) {
   14a18:	55                   	push   ebp
   14a19:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/block/ahci.c:387
    // Wait until CR (bit15) is cleared
    while (port->cmd.CR);
   14a1b:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:387 (discriminator 1)
   14a1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14a1f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14a22:	c1 e8 0f             	shr    eax,0xf
   14a25:	83 e0 01             	and    eax,0x1
   14a28:	84 c0                	test   al,al
   14a2a:	75 f0                	jne    14a1c <start_cmd+0x4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:390

    // Set FRE (bit4) and ST (bit0)
    port->cmd.FRE = 1;
   14a2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14a2f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14a32:	83 ca 10             	or     edx,0x10
   14a35:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:391
    port->cmd.ST = 1;
   14a38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14a3b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14a3e:	83 ca 01             	or     edx,0x1
   14a41:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:392
}
   14a44:	90                   	nop
   14a45:	5d                   	pop    ebp
   14a46:	c3                   	ret    

00014a47 <waitForPortIdle>:
waitForPortIdle():
/home/yogi/src/os/chrisOS/src/block/ahci.c:394

void waitForPortIdle(volatile HBA_PORT *port) {
   14a47:	55                   	push   ebp
   14a48:	89 e5                	mov    ebp,esp
   14a4a:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/block/ahci.c:395
    while (port->cmd.ST | port->cmd.CR | port->cmd.FRE | port->cmd.FR) {
   14a4d:	eb 0d                	jmp    14a5c <waitForPortIdle+0x15>
/home/yogi/src/os/chrisOS/src/block/ahci.c:396
        waitTicks(20);
   14a4f:	83 ec 0c             	sub    esp,0xc
   14a52:	6a 14                	push   0x14
   14a54:	e8 82 38 01 00       	call   282db <waitTicks>
   14a59:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:395
    port->cmd.FRE = 1;
    port->cmd.ST = 1;
}

void waitForPortIdle(volatile HBA_PORT *port) {
    while (port->cmd.ST | port->cmd.CR | port->cmd.FRE | port->cmd.FR) {
   14a5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14a5f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14a62:	83 e0 01             	and    eax,0x1
   14a65:	89 c2                	mov    edx,eax
   14a67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14a6a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14a6d:	c1 e8 0f             	shr    eax,0xf
   14a70:	83 e0 01             	and    eax,0x1
   14a73:	09 c2                	or     edx,eax
   14a75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14a78:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14a7b:	c1 e8 04             	shr    eax,0x4
   14a7e:	83 e0 01             	and    eax,0x1
   14a81:	09 c2                	or     edx,eax
   14a83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14a86:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14a89:	c1 e8 0e             	shr    eax,0xe
   14a8c:	83 e0 01             	and    eax,0x1
   14a8f:	09 d0                	or     eax,edx
   14a91:	84 c0                	test   al,al
   14a93:	75 ba                	jne    14a4f <waitForPortIdle+0x8>
/home/yogi/src/os/chrisOS/src/block/ahci.c:398
        waitTicks(20);
    }
}
   14a95:	90                   	nop
   14a96:	c9                   	leave  
   14a97:	c3                   	ret    

00014a98 <stop_cmd>:
stop_cmd():
/home/yogi/src/os/chrisOS/src/block/ahci.c:402

// Stop command engine

void stop_cmd(volatile volatile HBA_PORT *port) {
   14a98:	55                   	push   ebp
   14a99:	89 e5                	mov    ebp,esp
   14a9b:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/block/ahci.c:404
    // Clear ST (bit0)
    port->cmd.ST = 0;
   14a9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14aa1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14aa4:	83 e2 fe             	and    edx,0xfffffffe
   14aa7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:407
    // Wait until FR (bit14), CR (bit15) are cleared
    while (1) {
        if (!(port->cmd.FR))
   14aaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14aad:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14ab0:	c1 e8 0e             	shr    eax,0xe
   14ab3:	83 e0 01             	and    eax,0x1
   14ab6:	84 c0                	test   al,al
   14ab8:	74 1f                	je     14ad9 <stop_cmd+0x41>
/home/yogi/src/os/chrisOS/src/block/ahci.c:409
            break;
        if (!(port->cmd.CR))
   14aba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14abd:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14ac0:	c1 e8 0f             	shr    eax,0xf
   14ac3:	83 e0 01             	and    eax,0x1
   14ac6:	84 c0                	test   al,al
   14ac8:	74 12                	je     14adc <stop_cmd+0x44>
/home/yogi/src/os/chrisOS/src/block/ahci.c:411
            break;
        waitTicks(20);
   14aca:	83 ec 0c             	sub    esp,0xc
   14acd:	6a 14                	push   0x14
   14acf:	e8 07 38 01 00       	call   282db <waitTicks>
   14ad4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:412
    }
   14ad7:	eb d1                	jmp    14aaa <stop_cmd+0x12>
/home/yogi/src/os/chrisOS/src/block/ahci.c:408
    // Clear ST (bit0)
    port->cmd.ST = 0;
    // Wait until FR (bit14), CR (bit15) are cleared
    while (1) {
        if (!(port->cmd.FR))
            break;
   14ad9:	90                   	nop
   14ada:	eb 01                	jmp    14add <stop_cmd+0x45>
/home/yogi/src/os/chrisOS/src/block/ahci.c:410
        if (!(port->cmd.CR))
            break;
   14adc:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:415
        waitTicks(20);
    }

    // Clear FRE (bit4)
    port->cmd.FRE = 0;
   14add:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14ae0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14ae3:	83 e2 ef             	and    edx,0xffffffef
   14ae6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:416
}
   14ae9:	90                   	nop
   14aea:	c9                   	leave  
   14aeb:	c3                   	ret    

00014aec <ahciIdentify>:
ahciIdentify():
/home/yogi/src/os/chrisOS/src/block/ahci.c:418

void ahciIdentify(volatile HBA_PORT* port, int deviceType) {
   14aec:	55                   	push   ebp
   14aed:	89 e5                	mov    ebp,esp
   14aef:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/block/ahci.c:419
    printd(DEBUG_AHCI, "AHCI: ahciIdentify, port@0x%08X(%u), 0x%08X\n", port, kATADeviceInfoCount, &port->clb);
   14af2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   14af5:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14afa:	83 ec 0c             	sub    esp,0xc
   14afd:	52                   	push   edx
   14afe:	50                   	push   eax
   14aff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14b02:	68 c8 68 04 00       	push   0x468c8
   14b07:	68 00 20 00 00       	push   0x2000
   14b0c:	e8 c6 25 01 00       	call   270d7 <printd>
   14b11:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:420
    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) port->clb;
   14b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14b17:	8b 00                	mov    eax,DWORD PTR [eax]
   14b19:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:421
    int slot = find_cmdslot(port);
   14b1c:	83 ec 0c             	sub    esp,0xc
   14b1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14b22:	e8 66 03 00 00       	call   14e8d <find_cmdslot>
   14b27:	83 c4 10             	add    esp,0x10
   14b2a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:422
    if (slot == -1)
   14b2d:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   14b31:	0f 84 53 03 00 00    	je     14e8a <ahciIdentify+0x39e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:424
        return;
    port->ie.AsUlong = 0xFFFFFFFF;
   14b37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14b3a:	c7 40 14 ff ff ff ff 	mov    DWORD PTR [eax+0x14],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:425
    HBA_CMD_HEADER* cmdheader = cmdhdr + slot;
   14b41:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14b44:	c1 e0 05             	shl    eax,0x5
   14b47:	89 c2                	mov    edx,eax
   14b49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14b4c:	01 d0                	add    eax,edx
   14b4e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:426
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   14b51:	83 ec 04             	sub    esp,0x4
   14b54:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   14b57:	68 d0 61 04 00       	push   0x461d0
   14b5c:	68 00 20 00 00       	push   0x2000
   14b61:	e8 71 25 01 00       	call   270d7 <printd>
   14b66:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:427
    cmdheader->prdtl = 1;
   14b69:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14b6c:	66 c7 40 02 01 00    	mov    WORD PTR [eax+0x2],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:428
    cmdheader->cfl = 5; //sizeof (FIS_REG_H2D) / sizeof (uint32_t);
   14b72:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14b75:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14b78:	83 e2 e0             	and    edx,0xffffffe0
   14b7b:	83 ca 05             	or     edx,0x5
   14b7e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:429
    cmdheader->w = 0;
   14b80:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14b83:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14b86:	83 e2 bf             	and    edx,0xffffffbf
   14b89:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:430
    cmdheader->a = 0;
   14b8b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14b8e:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14b91:	83 e2 df             	and    edx,0xffffffdf
   14b94:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:431
    cmdheader->c = 0;
   14b96:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14b99:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   14b9d:	83 e2 fb             	and    edx,0xfffffffb
   14ba0:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:432
    cmdheader->p = 0;
   14ba3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14ba6:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14ba9:	83 e2 7f             	and    edx,0x7f
   14bac:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:433
    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   14bae:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14bb1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14bb4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:435
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
   14bb7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14bba:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
/home/yogi/src/os/chrisOS/src/block/ahci.c:434
    cmdheader->w = 0;
    cmdheader->a = 0;
    cmdheader->c = 0;
    cmdheader->p = 0;
    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
   14bbe:	0f b7 c0             	movzx  eax,ax
   14bc1:	83 c0 08             	add    eax,0x8
   14bc4:	c1 e0 04             	shl    eax,0x4
   14bc7:	83 ec 04             	sub    esp,0x4
   14bca:	50                   	push   eax
   14bcb:	6a 00                	push   0x0
   14bcd:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   14bd0:	e8 58 04 01 00       	call   2502d <memset>
   14bd5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:436
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   14bd8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14bdb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14bde:	50                   	push   eax
   14bdf:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   14be2:	68 e8 61 04 00       	push   0x461e8
   14be7:	68 00 20 00 00       	push   0x2000
   14bec:	e8 e6 24 01 00       	call   270d7 <printd>
   14bf1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:437
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
   14bf4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14bf7:	c7 80 80 00 00 00 00 	mov    DWORD PTR [eax+0x80],0xa42000
   14bfe:	20 a4 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:438
    cmdtbl->prdt_entry[0].dbc = 0x1ff;
   14c01:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14c04:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [eax+0x8c]
   14c0a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   14c10:	81 ca ff 01 00 00    	or     edx,0x1ff
   14c16:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:439
    cmdtbl->prdt_entry[0].i = 1;
   14c1c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14c1f:	0f b6 90 8f 00 00 00 	movzx  edx,BYTE PTR [eax+0x8f]
   14c26:	83 ca 80             	or     edx,0xffffff80
   14c29:	88 90 8f 00 00 00    	mov    BYTE PTR [eax+0x8f],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:441

    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   14c2f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14c32:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:442
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   14c35:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c38:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/src/os/chrisOS/src/block/ahci.c:443
    cmdfis->c = 1; // Command
   14c3b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c3e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   14c42:	83 ca 80             	or     edx,0xffffff80
   14c45:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:444
    if (deviceType == AHCI_DEV_SATAPI)
   14c48:	83 7d 0c 04          	cmp    DWORD PTR [ebp+0xc],0x4
   14c4c:	75 09                	jne    14c57 <ahciIdentify+0x16b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:445
        cmdfis->command = ATA_IDENTIFY_CDROM_COMMAND;
   14c4e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c51:	c6 40 02 a1          	mov    BYTE PTR [eax+0x2],0xa1
   14c55:	eb 07                	jmp    14c5e <ahciIdentify+0x172>
/home/yogi/src/os/chrisOS/src/block/ahci.c:447
    else
        cmdfis->command = ATA_IDENTIFY_COMMAND;
   14c57:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c5a:	c6 40 02 ec          	mov    BYTE PTR [eax+0x2],0xec
/home/yogi/src/os/chrisOS/src/block/ahci.c:448
    cmdfis->lba0 = 0;
   14c5e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c61:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:449
    cmdfis->lba1 = 0;
   14c65:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c68:	c6 40 05 00          	mov    BYTE PTR [eax+0x5],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:450
    cmdfis->lba2 = 0;
   14c6c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c6f:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:451
    cmdfis->lba3 = 0;
   14c73:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c76:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:452
    cmdfis->lba4 = 0;
   14c7a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c7d:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:453
    cmdfis->lba5 = 0;
   14c81:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c84:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:454
    cmdfis->lba5 = 0;
   14c88:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c8b:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:455
    cmdfis->pmport = 0;
   14c8f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c92:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   14c96:	83 e2 f0             	and    edx,0xfffffff0
   14c99:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:456
    cmdfis->device = 0;
   14c9c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14c9f:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:457
    cmdfis->countl = 1;
   14ca3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14ca6:	c6 40 0c 01          	mov    BYTE PTR [eax+0xc],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:458
    cmdfis->counth = 0;
   14caa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14cad:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:459
    int lCmdVal = AhciIssueCmd(port, slot);
   14cb1:	83 ec 08             	sub    esp,0x8
   14cb4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14cb7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14cba:	e8 fd ea ff ff       	call   137bc <AhciIssueCmd>
   14cbf:	83 c4 10             	add    esp,0x10
   14cc2:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:460
    if (!lCmdVal) {
   14cc5:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   14cc9:	75 18                	jne    14ce3 <ahciIdentify+0x1f7>
/home/yogi/src/os/chrisOS/src/block/ahci.c:461
        printk("AHCI: ***Error identifying device (%u)***\n",lCmdVal);
   14ccb:	83 ec 08             	sub    esp,0x8
   14cce:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   14cd1:	68 f8 68 04 00       	push   0x468f8
   14cd6:	e8 dc 23 01 00       	call   270b7 <printk>
   14cdb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:462
        return;
   14cde:	e9 a8 01 00 00       	jmp    14e8b <ahciIdentify+0x39f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:464
    }
    kATADeviceInfo[kATADeviceInfoCount].ATADeviceAvailable = true;
   14ce3:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14ce9:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14cee:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14cf4:	01 d0                	add    eax,edx
   14cf6:	c6 80 51 02 00 00 01 	mov    BYTE PTR [eax+0x251],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:465
    kATADeviceInfo[kATADeviceInfoCount].bus = SATA;
   14cfd:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14d03:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14d08:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14d0e:	01 d0                	add    eax,edx
   14d10:	c7 80 61 02 00 00 02 	mov    DWORD PTR [eax+0x261],0x2
   14d17:	00 00 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:466
    kATADeviceInfo[kATADeviceInfoCount].driveNo = kATADeviceInfoCount;
   14d1a:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14d20:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14d25:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14d2b:	01 d0                	add    eax,edx
   14d2d:	8b 15 c4 02 12 00    	mov    edx,DWORD PTR ds:0x1202c4
   14d33:	89 90 65 02 00 00    	mov    DWORD PTR [eax+0x265],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:467
    kATADeviceInfo[kATADeviceInfoCount].ioPort = (uintptr_t) port;
   14d39:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14d3f:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14d44:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14d4a:	01 c2                	add    edx,eax
   14d4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d4f:	89 82 69 02 00 00    	mov    DWORD PTR [edx+0x269],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:468
    kATADeviceInfo[kATADeviceInfoCount].irqNum = 0;
   14d55:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14d5b:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14d60:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14d66:	01 d0                	add    eax,edx
   14d68:	c6 80 6d 02 00 00 00 	mov    BYTE PTR [eax+0x26d],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:469
    kATADeviceInfo[kATADeviceInfoCount].driveHeadPortDesignation = 0x0;
   14d6f:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14d75:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14d7a:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14d80:	01 d0                	add    eax,edx
   14d82:	c6 80 6e 02 00 00 00 	mov    BYTE PTR [eax+0x26e],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:470
    kATADeviceInfo[kATADeviceInfoCount].queryATAData = false;
   14d89:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14d8f:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14d94:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14d9a:	01 d0                	add    eax,edx
   14d9c:	c6 80 50 02 00 00 00 	mov    BYTE PTR [eax+0x250],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:471
    if (deviceType == AHCI_DEV_SATAPI)
   14da3:	83 7d 0c 04          	cmp    DWORD PTR [ebp+0xc],0x4
   14da7:	75 1f                	jne    14dc8 <ahciIdentify+0x2dc>
/home/yogi/src/os/chrisOS/src/block/ahci.c:472
        kATADeviceInfo[kATADeviceInfoCount].ATADeviceType=ATA_DEVICE_TYPE_SATA_CD;
   14da9:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14daf:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14db4:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14dba:	01 d0                	add    eax,edx
   14dbc:	c7 80 52 02 00 00 03 	mov    DWORD PTR [eax+0x252],0x3
   14dc3:	00 00 00 
   14dc6:	eb 1d                	jmp    14de5 <ahciIdentify+0x2f9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:474
    else
        kATADeviceInfo[kATADeviceInfoCount].ATADeviceType=ATA_DEVICE_TYPE_SATA_HD;
   14dc8:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14dce:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14dd3:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14dd9:	01 d0                	add    eax,edx
   14ddb:	c7 80 52 02 00 00 02 	mov    DWORD PTR [eax+0x252],0x2
   14de2:	00 00 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:475
    kATADeviceInfo[kATADeviceInfoCount].ABAR=ahciABAR;
   14de5:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14deb:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14df0:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14df6:	01 c2                	add    edx,eax
   14df8:	a1 54 04 12 00       	mov    eax,ds:0x120454
   14dfd:	89 82 6f 02 00 00    	mov    DWORD PTR [edx+0x26f],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:476
    memcpy(kATADeviceInfo[kATADeviceInfoCount].ATAIdentifyData, (void*) AHCI_DISK_BUFFER_ADDRESS, 512);
   14e03:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14e09:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14e0e:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14e14:	01 d0                	add    eax,edx
   14e16:	83 ec 04             	sub    esp,0x4
   14e19:	68 00 02 00 00       	push   0x200
   14e1e:	68 00 20 a4 00       	push   0xa42000
   14e23:	50                   	push   eax
   14e24:	e8 f3 0b 01 00       	call   25a1c <memcpy>
   14e29:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:477
    ataIdentify(&kATADeviceInfo[kATADeviceInfoCount++]);
   14e2c:	8b 0d c0 02 12 00    	mov    ecx,DWORD PTR ds:0x1202c0
   14e32:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14e37:	8d 50 01             	lea    edx,[eax+0x1]
   14e3a:	89 15 c4 02 12 00    	mov    DWORD PTR ds:0x1202c4,edx
   14e40:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14e46:	01 c8                	add    eax,ecx
   14e48:	83 ec 0c             	sub    esp,0xc
   14e4b:	50                   	push   eax
   14e4c:	e8 6d d6 00 00       	call   224be <ataIdentify>
   14e51:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:478
    printd(DEBUG_AHCI, "AHCI: SATA device found, name=%s\n", kATADeviceInfo[kATADeviceInfoCount - 1].ATADeviceModel);
   14e54:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   14e59:	8b 15 c4 02 12 00    	mov    edx,DWORD PTR ds:0x1202c4
   14e5f:	69 d2 73 02 00 00    	imul   edx,edx,0x273
   14e65:	81 ea 73 02 00 00    	sub    edx,0x273
   14e6b:	01 d0                	add    eax,edx
   14e6d:	05 00 02 00 00       	add    eax,0x200
   14e72:	83 ec 04             	sub    esp,0x4
   14e75:	50                   	push   eax
   14e76:	68 24 69 04 00       	push   0x46924
   14e7b:	68 00 20 00 00       	push   0x2000
   14e80:	e8 52 22 01 00       	call   270d7 <printd>
   14e85:	83 c4 10             	add    esp,0x10
   14e88:	eb 01                	jmp    14e8b <ahciIdentify+0x39f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:423
void ahciIdentify(volatile HBA_PORT* port, int deviceType) {
    printd(DEBUG_AHCI, "AHCI: ahciIdentify, port@0x%08X(%u), 0x%08X\n", port, kATADeviceInfoCount, &port->clb);
    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) port->clb;
    int slot = find_cmdslot(port);
    if (slot == -1)
        return;
   14e8a:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:479
        kATADeviceInfo[kATADeviceInfoCount].ATADeviceType=ATA_DEVICE_TYPE_SATA_HD;
    kATADeviceInfo[kATADeviceInfoCount].ABAR=ahciABAR;
    memcpy(kATADeviceInfo[kATADeviceInfoCount].ATAIdentifyData, (void*) AHCI_DISK_BUFFER_ADDRESS, 512);
    ataIdentify(&kATADeviceInfo[kATADeviceInfoCount++]);
    printd(DEBUG_AHCI, "AHCI: SATA device found, name=%s\n", kATADeviceInfo[kATADeviceInfoCount - 1].ATADeviceModel);
}
   14e8b:	c9                   	leave  
   14e8c:	c3                   	ret    

00014e8d <find_cmdslot>:
find_cmdslot():
/home/yogi/src/os/chrisOS/src/block/ahci.c:482
// Find a free command list slot

int find_cmdslot(volatile HBA_PORT *port) {
   14e8d:	55                   	push   ebp
   14e8e:	89 e5                	mov    ebp,esp
   14e90:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/ahci.c:483
    printd(DEBUG_AHCI, "AHCI: find_cmdslot - finding a slot to use to execute a command\n");
   14e93:	83 ec 08             	sub    esp,0x8
   14e96:	68 48 69 04 00       	push   0x46948
   14e9b:	68 00 20 00 00       	push   0x2000
   14ea0:	e8 32 22 01 00       	call   270d7 <printd>
   14ea5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:487
    // An empty command slot has its respective bit cleared to �0� in both the PxCI and PxSACT registers.
    // If not set in SACT and CI, the slot is free // Checked
    
    uint32_t slots = (/*port->sact | */port->ci);
   14ea8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14eab:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   14eae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:488
    int num_of_slots = ahciABAR->cap.NCS;
   14eb1:	a1 54 04 12 00       	mov    eax,ds:0x120454
   14eb6:	8b 00                	mov    eax,DWORD PTR [eax]
   14eb8:	c1 e8 08             	shr    eax,0x8
   14ebb:	83 e0 1f             	and    eax,0x1f
   14ebe:	0f b6 c0             	movzx  eax,al
   14ec1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:489
    printd(DEBUG_AHCI,"ahciABAR = %08X, Total slots available: %d\n",ahciABAR, ahciABAR->cap.NCS);
   14ec4:	a1 54 04 12 00       	mov    eax,ds:0x120454
   14ec9:	8b 00                	mov    eax,DWORD PTR [eax]
   14ecb:	c1 e8 08             	shr    eax,0x8
   14ece:	83 e0 1f             	and    eax,0x1f
   14ed1:	0f b6 d0             	movzx  edx,al
   14ed4:	a1 54 04 12 00       	mov    eax,ds:0x120454
   14ed9:	52                   	push   edx
   14eda:	50                   	push   eax
   14edb:	68 8c 69 04 00       	push   0x4698c
   14ee0:	68 00 20 00 00       	push   0x2000
   14ee5:	e8 ed 21 01 00       	call   270d7 <printd>
   14eea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:491
    int i;
    for (i = 0; i < num_of_slots; i++) {
   14eed:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   14ef4:	eb 46                	jmp    14f3c <find_cmdslot+0xaf>
/home/yogi/src/os/chrisOS/src/block/ahci.c:493

        if ((slots & 1) == 0) {
   14ef6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14ef9:	83 e0 01             	and    eax,0x1
   14efc:	85 c0                	test   eax,eax
   14efe:	75 1d                	jne    14f1d <find_cmdslot+0x90>
/home/yogi/src/os/chrisOS/src/block/ahci.c:494
            printd(DEBUG_AHCI, "AHCI: [command slot is : %d]\n", i);
   14f00:	83 ec 04             	sub    esp,0x4
   14f03:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14f06:	68 b8 69 04 00       	push   0x469b8
   14f0b:	68 00 20 00 00       	push   0x2000
   14f10:	e8 c2 21 01 00       	call   270d7 <printd>
   14f15:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:495
            return i;
   14f18:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14f1b:	eb 44                	jmp    14f61 <find_cmdslot+0xd4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:498 (discriminator 2)

        }
        printd(DEBUG_AHCI, "Slot %u is busy (0x%08X)\n", i,slots);
   14f1d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   14f20:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14f23:	68 d6 69 04 00       	push   0x469d6
   14f28:	68 00 20 00 00       	push   0x2000
   14f2d:	e8 a5 21 01 00       	call   270d7 <printd>
   14f32:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:499 (discriminator 2)
        slots >>= 1;
   14f35:	d1 6d f4             	shr    DWORD PTR [ebp-0xc],1
/home/yogi/src/os/chrisOS/src/block/ahci.c:491 (discriminator 2)
    
    uint32_t slots = (/*port->sact | */port->ci);
    int num_of_slots = ahciABAR->cap.NCS;
    printd(DEBUG_AHCI,"ahciABAR = %08X, Total slots available: %d\n",ahciABAR, ahciABAR->cap.NCS);
    int i;
    for (i = 0; i < num_of_slots; i++) {
   14f38:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:491 (discriminator 1)
   14f3c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14f3f:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   14f42:	7c b2                	jl     14ef6 <find_cmdslot+0x69>
/home/yogi/src/os/chrisOS/src/block/ahci.c:501

        }
        printd(DEBUG_AHCI, "Slot %u is busy (0x%08X)\n", i,slots);
        slots >>= 1;
    }
    printd(DEBUG_AHCI, "AHCI: Cannot find free command list entry, count=%u, slots=0x%08X\n", num_of_slots, slots);
   14f44:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   14f47:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   14f4a:	68 f0 69 04 00       	push   0x469f0
   14f4f:	68 00 20 00 00       	push   0x2000
   14f54:	e8 7e 21 01 00       	call   270d7 <printd>
   14f59:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:502
    return -1;
   14f5c:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:503
}
   14f61:	c9                   	leave  
   14f62:	c3                   	ret    

00014f63 <ahciSetCurrentDisk>:
ahciSetCurrentDisk():
/home/yogi/src/os/chrisOS/src/block/ahci.c:508

#define ATA_DEV_BUSY 0x80
#define ATA_DEV_DRQ 0x08

void ahciSetCurrentDisk(volatile HBA_PORT* port) {
   14f63:	55                   	push   ebp
   14f64:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/block/ahci.c:509
    kAHCICurrentDisk = port;
   14f66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14f69:	a3 10 04 12 00       	mov    ds:0x120410,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:510
}
   14f6e:	90                   	nop
   14f6f:	5d                   	pop    ebp
   14f70:	c3                   	ret    

00014f71 <ahciSetCurrentPart>:
ahciSetCurrentPart():
/home/yogi/src/os/chrisOS/src/block/ahci.c:513

void ahciSetCurrentPart(partEntry_t part) 
{
   14f71:	55                   	push   ebp
   14f72:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/block/ahci.c:514
    kAHCICurrentPart = part;
   14f74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14f77:	a3 14 04 12 00       	mov    ds:0x120414,eax
   14f7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   14f7f:	a3 18 04 12 00       	mov    ds:0x120418,eax
   14f84:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   14f87:	a3 1c 04 12 00       	mov    ds:0x12041c,eax
   14f8c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   14f8f:	a3 20 04 12 00       	mov    ds:0x120420,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:515
}
   14f94:	90                   	nop
   14f95:	5d                   	pop    ebp
   14f96:	c3                   	ret    

00014f97 <ahciRead>:
ahciRead():
/home/yogi/src/os/chrisOS/src/block/ahci.c:517

int ahciRead(volatile HBA_PORT* port, int sector, uint8_t* buffer, int sector_count) {
   14f97:	55                   	push   ebp
   14f98:	89 e5                	mov    ebp,esp
   14f9a:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/block/ahci.c:518
    ahciSetCurrentDisk(port);
   14f9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14fa0:	e8 be ff ff ff       	call   14f63 <ahciSetCurrentDisk>
   14fa5:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/block/ahci.c:519
    if (ahciBlockingRead28(sector, buffer, sector_count))
   14fa8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   14fab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   14fae:	83 ec 04             	sub    esp,0x4
   14fb1:	52                   	push   edx
   14fb2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   14fb5:	50                   	push   eax
   14fb6:	e8 13 00 00 00       	call   14fce <ahciBlockingRead28>
   14fbb:	83 c4 10             	add    esp,0x10
   14fbe:	85 c0                	test   eax,eax
   14fc0:	74 05                	je     14fc7 <ahciRead+0x30>
/home/yogi/src/os/chrisOS/src/block/ahci.c:520
        return sector_count;
   14fc2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   14fc5:	eb 05                	jmp    14fcc <ahciRead+0x35>
/home/yogi/src/os/chrisOS/src/block/ahci.c:522
    else
        return 0;
   14fc7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:523
}
   14fcc:	c9                   	leave  
   14fcd:	c3                   	ret    

00014fce <ahciBlockingRead28>:
ahciBlockingRead28():
/home/yogi/src/os/chrisOS/src/block/ahci.c:526

///Read the current disk *partition* 
int ahciBlockingRead28(uint32_t sector, uint8_t *buffer, uint32_t sector_count) {
   14fce:	55                   	push   ebp
   14fcf:	89 e5                	mov    ebp,esp
   14fd1:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/block/ahci.c:527
    int prdCntr = 0;
   14fd4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:530

    //CLR 06/07/2016 - Must add partition start sector
    sector+=kAHCICurrentPart.partStartSector;
   14fdb:	a1 14 04 12 00       	mov    eax,ds:0x120414
   14fe0:	01 45 08             	add    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:532
    
    memset(buffer,0,sector_count*512);
   14fe3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   14fe6:	c1 e0 09             	shl    eax,0x9
   14fe9:	83 ec 04             	sub    esp,0x4
   14fec:	50                   	push   eax
   14fed:	6a 00                	push   0x0
   14fef:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   14ff2:	e8 36 00 01 00       	call   2502d <memset>
   14ff7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:534
    
    printd(DEBUG_AHCI, "AHCI: read on port=0x%08X,sector=0x%08X,buffer=0x%08X,sector_count=%u\n", kAHCICurrentDisk,sector,buffer,sector_count);
   14ffa:	a1 10 04 12 00       	mov    eax,ds:0x120410
   14fff:	83 ec 08             	sub    esp,0x8
   15002:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   15005:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   15008:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1500b:	50                   	push   eax
   1500c:	68 34 6a 04 00       	push   0x46a34
   15011:	68 00 20 00 00       	push   0x2000
   15016:	e8 bc 20 01 00       	call   270d7 <printd>
   1501b:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:536

    kAHCICurrentDisk->pxis.AsUlong = (uint32_t) - 1; // Clear pending interrupt bits
   1501e:	a1 10 04 12 00       	mov    eax,ds:0x120410
   15023:	c7 40 10 ff ff ff ff 	mov    DWORD PTR [eax+0x10],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:537
    int spin = 0; // Spin lock timeout counter
   1502a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:539

    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) kAHCICurrentDisk->clb;
   15031:	a1 10 04 12 00       	mov    eax,ds:0x120410
   15036:	8b 00                	mov    eax,DWORD PTR [eax]
   15038:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:540
    int slot = find_cmdslot(kAHCICurrentDisk);
   1503b:	a1 10 04 12 00       	mov    eax,ds:0x120410
   15040:	83 ec 0c             	sub    esp,0xc
   15043:	50                   	push   eax
   15044:	e8 44 fe ff ff       	call   14e8d <find_cmdslot>
   15049:	83 c4 10             	add    esp,0x10
   1504c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:541
    if (slot == -1)
   1504f:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   15053:	75 0a                	jne    1505f <ahciBlockingRead28+0x91>
/home/yogi/src/os/chrisOS/src/block/ahci.c:542
        return false;
   15055:	b8 00 00 00 00       	mov    eax,0x0
   1505a:	e9 41 02 00 00       	jmp    152a0 <ahciBlockingRead28+0x2d2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:543
    HBA_CMD_HEADER* cmdheader = cmdhdr + slot;
   1505f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   15062:	c1 e0 05             	shl    eax,0x5
   15065:	89 c2                	mov    edx,eax
   15067:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1506a:	01 d0                	add    eax,edx
   1506c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:544
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   1506f:	83 ec 04             	sub    esp,0x4
   15072:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   15075:	68 d0 61 04 00       	push   0x461d0
   1507a:	68 00 20 00 00       	push   0x2000
   1507f:	e8 53 20 01 00       	call   270d7 <printd>
   15084:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:545
    cmdheader->prdtl = (uint16_t) ((sector_count - 1) >> 4) + 1; // PRDT entries count
   15087:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1508a:	83 e8 01             	sub    eax,0x1
   1508d:	c1 e8 04             	shr    eax,0x4
   15090:	8d 50 01             	lea    edx,[eax+0x1]
   15093:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   15096:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/src/os/chrisOS/src/block/ahci.c:547

    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) (cmdheader->ctba);
   1509a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1509d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   150a0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:549
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
   150a3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   150a6:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
/home/yogi/src/os/chrisOS/src/block/ahci.c:548
    HBA_CMD_HEADER* cmdheader = cmdhdr + slot;
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
    cmdheader->prdtl = (uint16_t) ((sector_count - 1) >> 4) + 1; // PRDT entries count

    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) (cmdheader->ctba);
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
   150aa:	0f b7 c0             	movzx  eax,ax
   150ad:	83 c0 08             	add    eax,0x8
   150b0:	c1 e0 04             	shl    eax,0x4
   150b3:	83 ec 04             	sub    esp,0x4
   150b6:	50                   	push   eax
   150b7:	6a 00                	push   0x0
   150b9:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   150bc:	e8 6c ff 00 00       	call   2502d <memset>
   150c1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:550
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: read - cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   150c4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   150c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   150ca:	50                   	push   eax
   150cb:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   150ce:	68 7c 6a 04 00       	push   0x46a7c
   150d3:	68 00 20 00 00       	push   0x2000
   150d8:	e8 fa 1f 01 00       	call   270d7 <printd>
   150dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:553

    // 8K bytes (16 sectors) per PRDT
    for (int i = 0; i < cmdheader->prdtl - 1; i++) {
   150e0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   150e7:	eb 5b                	jmp    15144 <ahciBlockingRead28+0x176>
/home/yogi/src/os/chrisOS/src/block/ahci.c:554 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].dba = (uint32_t) buffer;
   150e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   150ec:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   150ef:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   150f2:	83 c1 08             	add    ecx,0x8
   150f5:	c1 e1 04             	shl    ecx,0x4
   150f8:	01 ca                	add    edx,ecx
   150fa:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:555 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].dbc = 8 * 1024; // 8K bytes
   150fc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   150ff:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   15102:	83 c2 08             	add    edx,0x8
   15105:	c1 e2 04             	shl    edx,0x4
   15108:	01 d0                	add    eax,edx
   1510a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1510d:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   15113:	80 ce 20             	or     dh,0x20
   15116:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:556 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].i = 1;
   15119:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1511c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1511f:	83 c2 08             	add    edx,0x8
   15122:	c1 e2 04             	shl    edx,0x4
   15125:	01 d0                	add    eax,edx
   15127:	0f b6 50 0f          	movzx  edx,BYTE PTR [eax+0xf]
   1512b:	83 ca 80             	or     edx,0xffffff80
   1512e:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:557 (discriminator 3)
        buffer += 4 * 1024; // 4K words
   15131:	81 45 0c 00 10 00 00 	add    DWORD PTR [ebp+0xc],0x1000
/home/yogi/src/os/chrisOS/src/block/ahci.c:558 (discriminator 3)
        sector_count -= 16; // 16 sectors
   15138:	83 6d 10 10          	sub    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:559 (discriminator 3)
        prdCntr++;
   1513c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:553 (discriminator 3)
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: read - cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);

    // 8K bytes (16 sectors) per PRDT
    for (int i = 0; i < cmdheader->prdtl - 1; i++) {
   15140:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:553 (discriminator 1)
   15144:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   15147:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1514b:	0f b7 c0             	movzx  eax,ax
   1514e:	83 e8 01             	sub    eax,0x1
   15151:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   15154:	7f 93                	jg     150e9 <ahciBlockingRead28+0x11b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:562
        buffer += 4 * 1024; // 4K words
        sector_count -= 16; // 16 sectors
        prdCntr++;
    }
    // Last entry
    cmdtbl->prdt_entry[prdCntr].dba = (uint32_t) buffer;
   15156:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15159:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   1515c:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1515f:	83 c1 08             	add    ecx,0x8
   15162:	c1 e1 04             	shl    ecx,0x4
   15165:	01 ca                	add    edx,ecx
   15167:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:563
    cmdtbl->prdt_entry[prdCntr].dbc = sector_count << 9; // 512 bytes per sector
   15169:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1516c:	c1 e0 09             	shl    eax,0x9
   1516f:	25 ff ff 3f 00       	and    eax,0x3fffff
   15174:	89 c1                	mov    ecx,eax
   15176:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   15179:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1517c:	83 c2 08             	add    edx,0x8
   1517f:	c1 e2 04             	shl    edx,0x4
   15182:	01 d0                	add    eax,edx
   15184:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
   1518a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1518d:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   15193:	09 ca                	or     edx,ecx
   15195:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:564
    cmdtbl->prdt_entry[prdCntr].i = 1;
   15198:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1519b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1519e:	83 c2 08             	add    edx,0x8
   151a1:	c1 e2 04             	shl    edx,0x4
   151a4:	01 d0                	add    eax,edx
   151a6:	0f b6 50 0f          	movzx  edx,BYTE PTR [eax+0xf]
   151aa:	83 ca 80             	or     edx,0xffffff80
   151ad:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:567

    // Setup command
    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   151b0:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   151b3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:569

    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   151b6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   151b9:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/src/os/chrisOS/src/block/ahci.c:570
    cmdfis->c = 1; // Command
   151bc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   151bf:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   151c3:	83 ca 80             	or     edx,0xffffff80
   151c6:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:571
    cmdfis->command = ATA_CMD_READ_DMA_EX;
   151c9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   151cc:	c6 40 02 25          	mov    BYTE PTR [eax+0x2],0x25
/home/yogi/src/os/chrisOS/src/block/ahci.c:572
    cmdfis->lba0 = (uint8_t) sector;
   151d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   151d3:	89 c2                	mov    edx,eax
   151d5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   151d8:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:573
    cmdfis->lba1 = (uint8_t) (sector >> 8);
   151db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   151de:	c1 e8 08             	shr    eax,0x8
   151e1:	89 c2                	mov    edx,eax
   151e3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   151e6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:574
    cmdfis->lba2 = (uint8_t) (sector >> 16);
   151e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   151ec:	c1 e8 10             	shr    eax,0x10
   151ef:	89 c2                	mov    edx,eax
   151f1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   151f4:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:575
    cmdfis->device = 1 << 6; // LBA mode
   151f7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   151fa:	c6 40 07 40          	mov    BYTE PTR [eax+0x7],0x40
/home/yogi/src/os/chrisOS/src/block/ahci.c:577

    cmdfis->lba3 = (uint8_t) (sector >> 24);
   151fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   15201:	c1 e8 18             	shr    eax,0x18
   15204:	89 c2                	mov    edx,eax
   15206:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15209:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:578
    cmdfis->lba4 = (uint8_t) 0;
   1520c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1520f:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:579
    cmdfis->lba5 = (uint8_t) 0;
   15213:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15216:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:581

    cmdfis->countl = LOBYTE((uint16_t) sector_count);
   1521a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1521d:	89 c2                	mov    edx,eax
   1521f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15222:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:582
    cmdfis->counth = HIBYTE((uint16_t) sector_count);
   15225:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   15228:	0f b7 c0             	movzx  eax,ax
   1522b:	c1 f8 08             	sar    eax,0x8
   1522e:	89 c2                	mov    edx,eax
   15230:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15233:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:584

    int lCMdVal = AhciIssueCmd(kAHCICurrentDisk, slot);
   15236:	a1 10 04 12 00       	mov    eax,ds:0x120410
   1523b:	83 ec 08             	sub    esp,0x8
   1523e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   15241:	50                   	push   eax
   15242:	e8 75 e5 ff ff       	call   137bc <AhciIssueCmd>
   15247:	83 c4 10             	add    esp,0x10
   1524a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:585
    if (!lCMdVal) {
   1524d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
   15251:	75 1c                	jne    1526f <ahciBlockingRead28+0x2a1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:586
        printd(DEBUG_AHCI, "AHCI: ***Error reading from disk***\n");
   15253:	83 ec 08             	sub    esp,0x8
   15256:	68 a8 6a 04 00       	push   0x46aa8
   1525b:	68 00 20 00 00       	push   0x2000
   15260:	e8 72 1e 01 00       	call   270d7 <printd>
   15265:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:587
        return -1;
   15268:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1526d:	eb 31                	jmp    152a0 <ahciBlockingRead28+0x2d2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:591
    }

    // Check again
    if (kAHCICurrentDisk->pxis.TFES) {
   1526f:	a1 10 04 12 00       	mov    eax,ds:0x120410
   15274:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   15277:	c1 e8 1e             	shr    eax,0x1e
   1527a:	83 e0 01             	and    eax,0x1
   1527d:	84 c0                	test   al,al
   1527f:	74 1c                	je     1529d <ahciBlockingRead28+0x2cf>
/home/yogi/src/os/chrisOS/src/block/ahci.c:592
        printd(DEBUG_AHCI, "AHCI: Read disk error\n");
   15281:	83 ec 08             	sub    esp,0x8
   15284:	68 8f 61 04 00       	push   0x4618f
   15289:	68 00 20 00 00       	push   0x2000
   1528e:	e8 44 1e 01 00       	call   270d7 <printd>
   15293:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:593
        return false;
   15296:	b8 00 00 00 00       	mov    eax,0x0
   1529b:	eb 03                	jmp    152a0 <ahciBlockingRead28+0x2d2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:596
    }

    return sector_count;
   1529d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
/home/yogi/src/os/chrisOS/src/block/ahci.c:597
}
   152a0:	c9                   	leave  
   152a1:	c3                   	ret    

000152a2 <ahciBlockingWrite28>:
ahciBlockingWrite28():
/home/yogi/src/os/chrisOS/src/block/ahci.c:599

int ahciBlockingWrite28(/*unsigned drive, */uint32_t sector, uint8_t *buffer, uint32_t sector_count) {
   152a2:	55                   	push   ebp
   152a3:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/block/ahci.c:600
    return 0;
   152a5:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:601
}
   152aa:	5d                   	pop    ebp
   152ab:	c3                   	ret    

000152ac <ahciInit>:
ahciInit():
/home/yogi/src/os/chrisOS/src/block/ahci.c:603

bool ahciInit() {
   152ac:	55                   	push   ebp
   152ad:	89 e5                	mov    ebp,esp
   152af:	56                   	push   esi
   152b0:	53                   	push   ebx
   152b1:	81 ec b0 00 00 00    	sub    esp,0xb0
/home/yogi/src/os/chrisOS/src/block/ahci.c:604
    kATADeviceInfoCount = 4;
   152b7:	c7 05 c4 02 12 00 04 	mov    DWORD PTR ds:0x1202c4,0x4
   152be:	00 00 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:605
    bool ahciDeviceFound = false;
   152c1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:608
    char buffer[150];

    memset(buffer, 0, 150);
   152c5:	83 ec 04             	sub    esp,0x4
   152c8:	68 96 00 00 00       	push   0x96
   152cd:	6a 00                	push   0x0
   152cf:	8d 85 56 ff ff ff    	lea    eax,[ebp-0xaa]
   152d5:	50                   	push   eax
   152d6:	e8 52 fd 00 00       	call   2502d <memset>
   152db:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:610

    if (!kPCIDeviceCount) {
   152de:	0f b6 05 ac 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ac
   152e5:	84 c0                	test   al,al
   152e7:	75 1f                	jne    15308 <ahciInit+0x5c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:611
        printd(DEBUG_AHCI, "AHCI: PCI not initialized, cannot initialize AHCI.");
   152e9:	83 ec 08             	sub    esp,0x8
   152ec:	68 d0 6a 04 00       	push   0x46ad0
   152f1:	68 00 20 00 00       	push   0x2000
   152f6:	e8 dc 1d 01 00       	call   270d7 <printd>
   152fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:612
        return false;
   152fe:	b8 00 00 00 00       	mov    eax,0x0
   15303:	e9 b1 04 00 00       	jmp    157b9 <ahciInit+0x50d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:615
    }

    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   15308:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   1530f:	e9 35 02 00 00       	jmp    15549 <ahciInit+0x29d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:616
        if (kPCIDeviceHeaders[cnt].class == 1 && kPCIDeviceHeaders[cnt].subClass == 6) 
   15314:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   1531a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1531d:	89 d0                	mov    eax,edx
   1531f:	c1 e0 02             	shl    eax,0x2
   15322:	01 d0                	add    eax,edx
   15324:	c1 e0 04             	shl    eax,0x4
   15327:	01 c8                	add    eax,ecx
   15329:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1532c:	83 f8 01             	cmp    eax,0x1
   1532f:	0f 85 10 02 00 00    	jne    15545 <ahciInit+0x299>
/home/yogi/src/os/chrisOS/src/block/ahci.c:616 (discriminator 1)
   15335:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   1533b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1533e:	89 d0                	mov    eax,edx
   15340:	c1 e0 02             	shl    eax,0x2
   15343:	01 d0                	add    eax,edx
   15345:	c1 e0 04             	shl    eax,0x4
   15348:	01 c8                	add    eax,ecx
   1534a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   1534d:	83 f8 06             	cmp    eax,0x6
   15350:	0f 85 ef 01 00 00    	jne    15545 <ahciInit+0x299>
/home/yogi/src/os/chrisOS/src/block/ahci.c:618
        {
            memcpy(&kPCISATADevice, &kPCIDeviceHeaders[cnt], sizeof (struct pci_device_t));
   15356:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   1535c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1535f:	89 d0                	mov    eax,edx
   15361:	c1 e0 02             	shl    eax,0x2
   15364:	01 d0                	add    eax,edx
   15366:	c1 e0 04             	shl    eax,0x4
   15369:	01 c8                	add    eax,ecx
   1536b:	83 ec 04             	sub    esp,0x4
   1536e:	6a 50                	push   0x50
   15370:	50                   	push   eax
   15371:	68 e0 02 12 00       	push   0x1202e0
   15376:	e8 a1 06 01 00       	call   25a1c <memcpy>
   1537b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:619
            ahciDeviceFound = true;
   1537e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:620
            printd(DEBUG_AHCI, "AHCI: Found AHCI controller (D) (%02X/%02X/%02X) '%s'\n", cnt, kPCIDeviceHeaders[cnt].class, kPCIDeviceHeaders[cnt].subClass, getDeviceNameP(&kPCISATADevice, buffer));
   15382:	83 ec 08             	sub    esp,0x8
   15385:	8d 85 56 ff ff ff    	lea    eax,[ebp-0xaa]
   1538b:	50                   	push   eax
   1538c:	68 e0 02 12 00       	push   0x1202e0
   15391:	e8 d8 14 00 00       	call   1686e <getDeviceNameP>
   15396:	83 c4 10             	add    esp,0x10
   15399:	89 c6                	mov    esi,eax
   1539b:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   153a1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   153a4:	89 d0                	mov    eax,edx
   153a6:	c1 e0 02             	shl    eax,0x2
   153a9:	01 d0                	add    eax,edx
   153ab:	c1 e0 04             	shl    eax,0x4
   153ae:	01 c8                	add    eax,ecx
   153b0:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
   153b3:	8b 1d b4 02 12 00    	mov    ebx,DWORD PTR ds:0x1202b4
   153b9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   153bc:	89 d0                	mov    eax,edx
   153be:	c1 e0 02             	shl    eax,0x2
   153c1:	01 d0                	add    eax,edx
   153c3:	c1 e0 04             	shl    eax,0x4
   153c6:	01 d8                	add    eax,ebx
   153c8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   153cb:	83 ec 08             	sub    esp,0x8
   153ce:	56                   	push   esi
   153cf:	51                   	push   ecx
   153d0:	50                   	push   eax
   153d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   153d4:	68 04 6b 04 00       	push   0x46b04
   153d9:	68 00 20 00 00       	push   0x2000
   153de:	e8 f4 1c 01 00       	call   270d7 <printd>
   153e3:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:621
            printd(DEBUG_AHCI, "ABAR is at: before/remapped - 0x%08X/", kPCISATADevice.baseAdd[5]);
   153e6:	a1 14 03 12 00       	mov    eax,ds:0x120314
   153eb:	83 ec 04             	sub    esp,0x4
   153ee:	50                   	push   eax
   153ef:	68 3c 6b 04 00       	push   0x46b3c
   153f4:	68 00 20 00 00       	push   0x2000
   153f9:	e8 d9 1c 01 00       	call   270d7 <printd>
   153fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:622
            ahciABAR = (HBA_MEM*) AHCI_ABAR_REMAPPED_ADDRESS + (0x10 * ahciHostCount);
   15401:	a1 24 8a 02 00       	mov    eax,ds:0x28a24
   15406:	c1 e0 0c             	shl    eax,0xc
   15409:	89 c2                	mov    edx,eax
   1540b:	c1 e2 04             	shl    edx,0x4
   1540e:	01 d0                	add    eax,edx
   15410:	05 00 20 8c 00       	add    eax,0x8c2000
   15415:	a3 54 04 12 00       	mov    ds:0x120454,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:623
                kMapPage((uintptr_t) ahciABAR, kPCISATADevice.baseAdd[5], 0x73); //0x63 + cache disabled
   1541a:	a1 14 03 12 00       	mov    eax,ds:0x120314
   1541f:	8b 15 54 04 12 00    	mov    edx,DWORD PTR ds:0x120454
   15425:	83 ec 04             	sub    esp,0x4
   15428:	6a 73                	push   0x73
   1542a:	50                   	push   eax
   1542b:	52                   	push   edx
   1542c:	e8 06 c3 ff ff       	call   11737 <kMapPage>
   15431:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:624
                kMapPage(kPCISATADevice.baseAdd[5],kPCISATADevice.baseAdd[5],0x73);
   15434:	8b 15 14 03 12 00    	mov    edx,DWORD PTR ds:0x120314
   1543a:	a1 14 03 12 00       	mov    eax,ds:0x120314
   1543f:	83 ec 04             	sub    esp,0x4
   15442:	6a 73                	push   0x73
   15444:	52                   	push   edx
   15445:	50                   	push   eax
   15446:	e8 ec c2 ff ff       	call   11737 <kMapPage>
   1544b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:625
            RELOAD_CR3
   1544e:	0f 20 d8             	mov    eax,cr3
   15451:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:626
            memcpy((void*) &ABARs[ahciHostCount++], (void*) ahciABAR, sizeof (HBA_MEM));
   15454:	8b 15 54 04 12 00    	mov    edx,DWORD PTR ds:0x120454
   1545a:	a1 24 8a 02 00       	mov    eax,ds:0x28a24
   1545f:	8d 48 01             	lea    ecx,[eax+0x1]
   15462:	89 0d 24 8a 02 00    	mov    DWORD PTR ds:0x28a24,ecx
   15468:	c1 e0 08             	shl    eax,0x8
   1546b:	89 c1                	mov    ecx,eax
   1546d:	c1 e1 04             	shl    ecx,0x4
   15470:	01 c8                	add    eax,ecx
   15472:	05 40 b5 08 00       	add    eax,0x8b540
   15477:	83 ec 04             	sub    esp,0x4
   1547a:	68 00 11 00 00       	push   0x1100
   1547f:	52                   	push   edx
   15480:	50                   	push   eax
   15481:	e8 96 05 01 00       	call   25a1c <memcpy>
   15486:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:627
            printd(DEBUG_AHCI, "0x%08X\n", ahciABAR);
   15489:	a1 54 04 12 00       	mov    eax,ds:0x120454
   1548e:	83 ec 04             	sub    esp,0x4
   15491:	50                   	push   eax
   15492:	68 62 6b 04 00       	push   0x46b62
   15497:	68 00 20 00 00       	push   0x2000
   1549c:	e8 36 1c 01 00       	call   270d7 <printd>
   154a1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:628
            memcpy(&ahciCaps[ahciCapsCount++], (void*) ahciABAR, sizeof (ahcicaps_t));
   154a4:	8b 15 54 04 12 00    	mov    edx,DWORD PTR ds:0x120454
   154aa:	8b 1d e8 03 12 00    	mov    ebx,DWORD PTR ds:0x1203e8
   154b0:	a1 ec 03 12 00       	mov    eax,ds:0x1203ec
   154b5:	8d 48 01             	lea    ecx,[eax+0x1]
   154b8:	89 0d ec 03 12 00    	mov    DWORD PTR ds:0x1203ec,ecx
   154be:	c1 e0 02             	shl    eax,0x2
   154c1:	01 d8                	add    eax,ebx
   154c3:	83 ec 04             	sub    esp,0x4
   154c6:	6a 04                	push   0x4
   154c8:	52                   	push   edx
   154c9:	50                   	push   eax
   154ca:	e8 4d 05 01 00       	call   25a1c <memcpy>
   154cf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:629
            if (!(ahciABAR->ghc.AE)) {
   154d2:	a1 54 04 12 00       	mov    eax,ds:0x120454
   154d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   154da:	c1 e8 1f             	shr    eax,0x1f
   154dd:	84 c0                	test   al,al
   154df:	75 26                	jne    15507 <ahciInit+0x25b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:630
                printd(DEBUG_AHCI,"switching to AHCI mode\n");
   154e1:	83 ec 08             	sub    esp,0x8
   154e4:	68 6a 6b 04 00       	push   0x46b6a
   154e9:	68 00 20 00 00       	push   0x2000
   154ee:	e8 e4 1b 01 00       	call   270d7 <printd>
   154f3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:631
                ahciABAR->ghc.AE=1;
   154f6:	a1 54 04 12 00       	mov    eax,ds:0x120454
   154fb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   154fe:	81 ca 00 00 00 80    	or     edx,0x80000000
   15504:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:633
            }
            ahciABAR->ghc.IE=1;
   15507:	a1 54 04 12 00       	mov    eax,ds:0x120454
   1550c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1550f:	83 ca 02             	or     edx,0x2
   15512:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:634
            if (ahciABAR->cap2 & 1) {
   15515:	a1 54 04 12 00       	mov    eax,ds:0x120454
   1551a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   1551d:	83 e0 01             	and    eax,0x1
   15520:	85 c0                	test   eax,eax
   15522:	74 10                	je     15534 <ahciInit+0x288>
/home/yogi/src/os/chrisOS/src/block/ahci.c:635
                panic("Write support for BIOS handoff!!!");
   15524:	83 ec 0c             	sub    esp,0xc
   15527:	68 84 6b 04 00       	push   0x46b84
   1552c:	e8 07 17 01 00       	call   26c38 <panic>
   15531:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:637
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
   15534:	a1 54 04 12 00       	mov    eax,ds:0x120454
   15539:	83 ec 0c             	sub    esp,0xc
   1553c:	50                   	push   eax
   1553d:	e8 88 ea ff ff       	call   13fca <ahciProbePorts>
   15542:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:615 (discriminator 2)
    if (!kPCIDeviceCount) {
        printd(DEBUG_AHCI, "AHCI: PCI not initialized, cannot initialize AHCI.");
        return false;
    }

    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   15545:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:615 (discriminator 1)
   15549:	0f b6 05 ac 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ac
   15550:	0f b6 c0             	movzx  eax,al
   15553:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   15556:	0f 8f b8 fd ff ff    	jg     15314 <ahciInit+0x68>
/home/yogi/src/os/chrisOS/src/block/ahci.c:639
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   1555c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   15563:	e9 12 02 00 00       	jmp    1577a <ahciInit+0x4ce>
/home/yogi/src/os/chrisOS/src/block/ahci.c:640
        if (kPCIDeviceFunctions[cnt].class == 1 && kPCIDeviceFunctions[cnt].subClass == 6) 
   15568:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   1556e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   15571:	89 d0                	mov    eax,edx
   15573:	c1 e0 02             	shl    eax,0x2
   15576:	01 d0                	add    eax,edx
   15578:	c1 e0 04             	shl    eax,0x4
   1557b:	01 c8                	add    eax,ecx
   1557d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   15580:	83 f8 01             	cmp    eax,0x1
   15583:	0f 85 ed 01 00 00    	jne    15776 <ahciInit+0x4ca>
/home/yogi/src/os/chrisOS/src/block/ahci.c:640 (discriminator 1)
   15589:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   1558f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   15592:	89 d0                	mov    eax,edx
   15594:	c1 e0 02             	shl    eax,0x2
   15597:	01 d0                	add    eax,edx
   15599:	c1 e0 04             	shl    eax,0x4
   1559c:	01 c8                	add    eax,ecx
   1559e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   155a1:	83 f8 06             	cmp    eax,0x6
   155a4:	0f 85 cc 01 00 00    	jne    15776 <ahciInit+0x4ca>
/home/yogi/src/os/chrisOS/src/block/ahci.c:642
        {
            memcpy(&kPCISATADevice, &kPCIDeviceFunctions[cnt], sizeof (struct pci_device_t));
   155aa:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   155b0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   155b3:	89 d0                	mov    eax,edx
   155b5:	c1 e0 02             	shl    eax,0x2
   155b8:	01 d0                	add    eax,edx
   155ba:	c1 e0 04             	shl    eax,0x4
   155bd:	01 c8                	add    eax,ecx
   155bf:	83 ec 04             	sub    esp,0x4
   155c2:	6a 50                	push   0x50
   155c4:	50                   	push   eax
   155c5:	68 e0 02 12 00       	push   0x1202e0
   155ca:	e8 4d 04 01 00       	call   25a1c <memcpy>
   155cf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:643
            ahciDeviceFound = true;
   155d2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:644
            printd(DEBUG_AHCI, "AHCI: Found AHCI controller (F) (%02X/%02X/%02X) '%s'\n", cnt, kPCIDeviceFunctions[cnt].class, kPCIDeviceFunctions[cnt].subClass, getDeviceNameP(&kPCISATADevice, buffer));
   155d6:	83 ec 08             	sub    esp,0x8
   155d9:	8d 85 56 ff ff ff    	lea    eax,[ebp-0xaa]
   155df:	50                   	push   eax
   155e0:	68 e0 02 12 00       	push   0x1202e0
   155e5:	e8 84 12 00 00       	call   1686e <getDeviceNameP>
   155ea:	83 c4 10             	add    esp,0x10
   155ed:	89 c6                	mov    esi,eax
   155ef:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   155f5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   155f8:	89 d0                	mov    eax,edx
   155fa:	c1 e0 02             	shl    eax,0x2
   155fd:	01 d0                	add    eax,edx
   155ff:	c1 e0 04             	shl    eax,0x4
   15602:	01 c8                	add    eax,ecx
   15604:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
   15607:	8b 1d bc 02 12 00    	mov    ebx,DWORD PTR ds:0x1202bc
   1560d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   15610:	89 d0                	mov    eax,edx
   15612:	c1 e0 02             	shl    eax,0x2
   15615:	01 d0                	add    eax,edx
   15617:	c1 e0 04             	shl    eax,0x4
   1561a:	01 d8                	add    eax,ebx
   1561c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1561f:	83 ec 08             	sub    esp,0x8
   15622:	56                   	push   esi
   15623:	51                   	push   ecx
   15624:	50                   	push   eax
   15625:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   15628:	68 a8 6b 04 00       	push   0x46ba8
   1562d:	68 00 20 00 00       	push   0x2000
   15632:	e8 a0 1a 01 00       	call   270d7 <printd>
   15637:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:645
            printd(DEBUG_AHCI, "ABAR is at: 0x%08X\n", kPCISATADevice.baseAdd[5]);
   1563a:	a1 14 03 12 00       	mov    eax,ds:0x120314
   1563f:	83 ec 04             	sub    esp,0x4
   15642:	50                   	push   eax
   15643:	68 df 6b 04 00       	push   0x46bdf
   15648:	68 00 20 00 00       	push   0x2000
   1564d:	e8 85 1a 01 00       	call   270d7 <printd>
   15652:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:646
            ahciABAR = (HBA_MEM*) AHCI_ABAR_REMAPPED_ADDRESS + (0x10 * ahciHostCount);
   15655:	a1 24 8a 02 00       	mov    eax,ds:0x28a24
   1565a:	c1 e0 0c             	shl    eax,0xc
   1565d:	89 c2                	mov    edx,eax
   1565f:	c1 e2 04             	shl    edx,0x4
   15662:	01 d0                	add    eax,edx
   15664:	05 00 20 8c 00       	add    eax,0x8c2000
   15669:	a3 54 04 12 00       	mov    ds:0x120454,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:647
            kMapPage((uintptr_t) ahciABAR, kPCISATADevice.baseAdd[5], 0x73); //0x63 + cache disabled
   1566e:	a1 14 03 12 00       	mov    eax,ds:0x120314
   15673:	8b 15 54 04 12 00    	mov    edx,DWORD PTR ds:0x120454
   15679:	83 ec 04             	sub    esp,0x4
   1567c:	6a 73                	push   0x73
   1567e:	50                   	push   eax
   1567f:	52                   	push   edx
   15680:	e8 b2 c0 ff ff       	call   11737 <kMapPage>
   15685:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:648
            RELOAD_CR3
   15688:	0f 20 d8             	mov    eax,cr3
   1568b:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:649
            memcpy((void*) &ABARs[ahciHostCount++], (void*) ahciABAR, sizeof (HBA_MEM));
   1568e:	8b 15 54 04 12 00    	mov    edx,DWORD PTR ds:0x120454
   15694:	a1 24 8a 02 00       	mov    eax,ds:0x28a24
   15699:	8d 48 01             	lea    ecx,[eax+0x1]
   1569c:	89 0d 24 8a 02 00    	mov    DWORD PTR ds:0x28a24,ecx
   156a2:	c1 e0 08             	shl    eax,0x8
   156a5:	89 c1                	mov    ecx,eax
   156a7:	c1 e1 04             	shl    ecx,0x4
   156aa:	01 c8                	add    eax,ecx
   156ac:	05 40 b5 08 00       	add    eax,0x8b540
   156b1:	83 ec 04             	sub    esp,0x4
   156b4:	68 00 11 00 00       	push   0x1100
   156b9:	52                   	push   edx
   156ba:	50                   	push   eax
   156bb:	e8 5c 03 01 00       	call   25a1c <memcpy>
   156c0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:650
            printd(DEBUG_AHCI, "Remapped ABAR is now at: 0x%08X\n", ahciABAR);
   156c3:	a1 54 04 12 00       	mov    eax,ds:0x120454
   156c8:	83 ec 04             	sub    esp,0x4
   156cb:	50                   	push   eax
   156cc:	68 f4 6b 04 00       	push   0x46bf4
   156d1:	68 00 20 00 00       	push   0x2000
   156d6:	e8 fc 19 01 00       	call   270d7 <printd>
   156db:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:651
            memcpy(&ahciCaps[ahciCapsCount], (void*) ahciABAR, sizeof (ahcicaps_t));
   156de:	a1 54 04 12 00       	mov    eax,ds:0x120454
   156e3:	8b 15 e8 03 12 00    	mov    edx,DWORD PTR ds:0x1203e8
   156e9:	8b 0d ec 03 12 00    	mov    ecx,DWORD PTR ds:0x1203ec
   156ef:	c1 e1 02             	shl    ecx,0x2
   156f2:	01 ca                	add    edx,ecx
   156f4:	83 ec 04             	sub    esp,0x4
   156f7:	6a 04                	push   0x4
   156f9:	50                   	push   eax
   156fa:	52                   	push   edx
   156fb:	e8 1c 03 01 00       	call   25a1c <memcpy>
   15700:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:652
            if (!(ahciABAR->ghc.AE)) {
   15703:	a1 54 04 12 00       	mov    eax,ds:0x120454
   15708:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1570b:	c1 e8 1f             	shr    eax,0x1f
   1570e:	84 c0                	test   al,al
   15710:	75 26                	jne    15738 <ahciInit+0x48c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:653
                printd(DEBUG_AHCI,"switching to AHCI mode\n");
   15712:	83 ec 08             	sub    esp,0x8
   15715:	68 6a 6b 04 00       	push   0x46b6a
   1571a:	68 00 20 00 00       	push   0x2000
   1571f:	e8 b3 19 01 00       	call   270d7 <printd>
   15724:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:654
                ahciABAR->ghc.AE=1;
   15727:	a1 54 04 12 00       	mov    eax,ds:0x120454
   1572c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1572f:	81 ca 00 00 00 80    	or     edx,0x80000000
   15735:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:656
            }
            ahciABAR->ghc.IE=1;
   15738:	a1 54 04 12 00       	mov    eax,ds:0x120454
   1573d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   15740:	83 ca 02             	or     edx,0x2
   15743:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:657
            if (ahciABAR->cap2 & 1) {
   15746:	a1 54 04 12 00       	mov    eax,ds:0x120454
   1574b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   1574e:	83 e0 01             	and    eax,0x1
   15751:	85 c0                	test   eax,eax
   15753:	74 10                	je     15765 <ahciInit+0x4b9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:658
                panic("Write support for BIOS handoff!!!");
   15755:	83 ec 0c             	sub    esp,0xc
   15758:	68 84 6b 04 00       	push   0x46b84
   1575d:	e8 d6 14 01 00       	call   26c38 <panic>
   15762:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:660
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
   15765:	a1 54 04 12 00       	mov    eax,ds:0x120454
   1576a:	83 ec 0c             	sub    esp,0xc
   1576d:	50                   	push   eax
   1576e:	e8 57 e8 ff ff       	call   13fca <ahciProbePorts>
   15773:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:639 (discriminator 2)
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   15776:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:639 (discriminator 1)
   1577a:	0f b6 05 ac 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ac
   15781:	0f b6 c0             	movzx  eax,al
   15784:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   15787:	0f 8f db fd ff ff    	jg     15568 <ahciInit+0x2bc>
/home/yogi/src/os/chrisOS/src/block/ahci.c:662
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    if (!ahciDeviceFound) {
   1578d:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   15791:	83 f0 01             	xor    eax,0x1
   15794:	84 c0                	test   al,al
   15796:	74 1c                	je     157b4 <ahciInit+0x508>
/home/yogi/src/os/chrisOS/src/block/ahci.c:663
        printd(DEBUG_AHCI, "AHCI: No AHCI devices found.");
   15798:	83 ec 08             	sub    esp,0x8
   1579b:	68 15 6c 04 00       	push   0x46c15
   157a0:	68 00 20 00 00       	push   0x2000
   157a5:	e8 2d 19 01 00       	call   270d7 <printd>
   157aa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:664
        return false;
   157ad:	b8 00 00 00 00       	mov    eax,0x0
   157b2:	eb 05                	jmp    157b9 <ahciInit+0x50d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:668
    }


    return true;
   157b4:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:669 (discriminator 1)
}
   157b9:	8d 65 f8             	lea    esp,[ebp-0x8]
   157bc:	5b                   	pop    ebx
   157bd:	5e                   	pop    esi
   157be:	5d                   	pop    ebp
   157bf:	c3                   	ret    

000157c0 <ahci_port_activate_device>:
ahci_port_activate_device():
/home/yogi/src/os/chrisOS/src/block/ahci.c:672

void ahci_port_activate_device(HBA_MEM* h, HBA_PORT* p)
{
   157c0:	55                   	push   ebp
   157c1:	89 e5                	mov    ebp,esp
   157c3:	53                   	push   ebx
   157c4:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/block/ahci.c:673
    printd(DEBUG_AHCI,"activate port %d @ 0x%08X:\n", p - h->ports,p);
   157c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   157ca:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   157cd:	81 c2 00 01 00 00    	add    edx,0x100
   157d3:	29 d0                	sub    eax,edx
   157d5:	c1 f8 07             	sar    eax,0x7
   157d8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   157db:	50                   	push   eax
   157dc:	68 32 6c 04 00       	push   0x46c32
   157e1:	68 00 20 00 00       	push   0x2000
   157e6:	e8 ec 18 01 00       	call   270d7 <printd>
   157eb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:675
    /* first check the presence flag */
    if ( (p->ssts & 0x7) == HBA_PORT_DET_NOT_PRESENT) { //check DET status
   157ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   157f1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   157f4:	83 e0 07             	and    eax,0x7
   157f7:	85 c0                	test   eax,eax
   157f9:	0f 85 38 02 00 00    	jne    15a37 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:676
                    printd(DEBUG_AHCI,"activate: DET_NOT_PRESENT\n");
   157ff:	83 ec 08             	sub    esp,0x8
   15802:	68 4e 6c 04 00       	push   0x46c4e
   15807:	68 00 20 00 00       	push   0x2000
   1580c:	e8 c6 18 01 00       	call   270d7 <printd>
   15811:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:678
                    /* nothing attached? */
                    if (p->cmd.CPD) { /* we rely on CPD */
   15814:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15817:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   1581a:	c1 e8 14             	shr    eax,0x14
   1581d:	83 e0 01             	and    eax,0x1
   15820:	84 c0                	test   al,al
   15822:	74 65                	je     15889 <ahci_port_activate_device+0xc9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:679
                                    if (!p->cmd.CPS) {
   15824:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15827:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   1582a:	c1 e8 10             	shr    eax,0x10
   1582d:	83 e0 01             	and    eax,0x1
   15830:	84 c0                	test   al,al
   15832:	75 1a                	jne    1584e <ahci_port_activate_device+0x8e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:680
                                                    printd(DEBUG_AHCI,"confirmed by CPD\n");
   15834:	83 ec 08             	sub    esp,0x8
   15837:	68 69 6c 04 00       	push   0x46c69
   1583c:	68 00 20 00 00       	push   0x2000
   15841:	e8 91 18 01 00       	call   270d7 <printd>
   15846:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:681
                                                    return;
   15849:	e9 b4 03 00 00       	jmp    15c02 <ahci_port_activate_device+0x442>
/home/yogi/src/os/chrisOS/src/block/ahci.c:684
                                    }
                                    /* there's something */
                                    if (!p->cmd.POD) {
   1584e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15851:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15854:	c1 e8 02             	shr    eax,0x2
   15857:	83 e0 01             	and    eax,0x1
   1585a:	84 c0                	test   al,al
   1585c:	75 19                	jne    15877 <ahci_port_activate_device+0xb7>
/home/yogi/src/os/chrisOS/src/block/ahci.c:685
                                                    p->cmd.POD = 1; /* power it */
   1585e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15861:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15864:	83 ca 04             	or     edx,0x4
   15867:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:686
                                                    wait(20);
   1586a:	83 ec 0c             	sub    esp,0xc
   1586d:	6a 14                	push   0x14
   1586f:	e8 82 2a 01 00       	call   282f6 <wait>
   15874:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:688
                                    }
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
   15877:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1587a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   1587d:	83 e0 07             	and    eax,0x7
   15880:	85 c0                	test   eax,eax
   15882:	74 05                	je     15889 <ahci_port_activate_device+0xc9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:689
                                                    goto next_step;
   15884:	e9 ae 01 00 00       	jmp    15a37 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:692
                    }
                    /* spin-up? */
                    if (!p->cmd.SUD) { /* always !1 if cap.sss == 0 */
   15889:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1588c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   1588f:	d1 e8                	shr    eax,1
   15891:	83 e0 01             	and    eax,0x1
   15894:	84 c0                	test   al,al
   15896:	0f 85 f7 00 00 00    	jne    15993 <ahci_port_activate_device+0x1d3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:693
                                    printd(DEBUG_AHCI,"not spun-up yet?\n");
   1589c:	83 ec 08             	sub    esp,0x8
   1589f:	68 7b 6c 04 00       	push   0x46c7b
   158a4:	68 00 20 00 00       	push   0x2000
   158a9:	e8 29 18 01 00       	call   270d7 <printd>
   158ae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:694
                                    if (p->serr.AsUlong & (1 << 26)) /* eXchange bit */
   158b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   158b4:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   158b7:	25 00 00 00 04       	and    eax,0x4000000
   158bc:	85 c0                	test   eax,eax
   158be:	74 13                	je     158d3 <ahci_port_activate_device+0x113>
/home/yogi/src/os/chrisOS/src/block/ahci.c:695
                                                    p->serr.AsUlong |= (1 << 26); /* RWC */
   158c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   158c3:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   158c6:	0d 00 00 00 04       	or     eax,0x4000000
   158cb:	89 c2                	mov    edx,eax
   158cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   158d0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:696
                                    if ((p->ssts & 0x7) != 0) { /* set to 0 prior sud */
   158d3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   158d6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   158d9:	83 e0 07             	and    eax,0x7
   158dc:	85 c0                	test   eax,eax
   158de:	74 19                	je     158f9 <ahci_port_activate_device+0x139>
/home/yogi/src/os/chrisOS/src/block/ahci.c:697
                                                    p->sctl.DET = 0;
   158e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   158e3:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   158e6:	83 e2 f0             	and    edx,0xfffffff0
   158e9:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:698
                                                    wait(20);
   158ec:	83 ec 0c             	sub    esp,0xc
   158ef:	6a 14                	push   0x14
   158f1:	e8 00 2a 01 00       	call   282f6 <wait>
   158f6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:700
                                    }
                                    p->cmd.SUD = 1;
   158f9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   158fc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   158ff:	83 ca 02             	or     edx,0x2
   15902:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:701
                                    waitTicks(5); /* wait 50 mus */
   15905:	83 ec 0c             	sub    esp,0xc
   15908:	6a 05                	push   0x5
   1590a:	e8 cc 29 01 00       	call   282db <waitTicks>
   1590f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:702
                                    if (p->serr.AsUlong & ((1 << 26) | (1 << 18))) { /* received sth. */
   15912:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15915:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15918:	25 00 00 04 04       	and    eax,0x4040000
   1591d:	85 c0                	test   eax,eax
   1591f:	74 05                	je     15926 <ahci_port_activate_device+0x166>
/home/yogi/src/os/chrisOS/src/block/ahci.c:704
                                                    /* COMRESET, COMWAKE */
                                                    goto next_step;
   15921:	e9 11 01 00 00       	jmp    15a37 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:707
                                    }
                                    /* send the reset */
                                    p->sctl.DET = 1;
   15926:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15929:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   1592c:	83 e2 f0             	and    edx,0xfffffff0
   1592f:	83 ca 01             	or     edx,0x1
   15932:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:708
                                    waitTicks(100);
   15935:	83 ec 0c             	sub    esp,0xc
   15938:	6a 64                	push   0x64
   1593a:	e8 9c 29 01 00       	call   282db <waitTicks>
   1593f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:709
                                    p->sctl.DET = 0;
   15942:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15945:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   15948:	83 e2 f0             	and    edx,0xfffffff0
   1594b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:710
                                    wait(20);
   1594e:	83 ec 0c             	sub    esp,0xc
   15951:	6a 14                	push   0x14
   15953:	e8 9e 29 01 00       	call   282f6 <wait>
   15958:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:711
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
   1595b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1595e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15961:	83 e0 07             	and    eax,0x7
   15964:	85 c0                	test   eax,eax
   15966:	74 05                	je     1596d <ahci_port_activate_device+0x1ad>
/home/yogi/src/os/chrisOS/src/block/ahci.c:712
                                                    goto next_step;
   15968:	e9 ca 00 00 00       	jmp    15a37 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:713
                                    p->cmd.SUD = 0; /* we're done enter listening mode */
   1596d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15970:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15973:	83 e2 fd             	and    edx,0xfffffffd
   15976:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:714
                                    printd(DEBUG_AHCI,"not present\n");
   15979:	83 ec 08             	sub    esp,0x8
   1597c:	68 8d 6c 04 00       	push   0x46c8d
   15981:	68 00 20 00 00       	push   0x2000
   15986:	e8 4c 17 01 00       	call   270d7 <printd>
   1598b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:715
                                    goto exit;
   1598e:	e9 47 02 00 00       	jmp    15bda <ahci_port_activate_device+0x41a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:718
                    }
                    /* just try ICC */
                    if (p->sctl.IPM != 1) {
   15993:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15996:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15999:	c1 e8 08             	shr    eax,0x8
   1599c:	83 e0 0f             	and    eax,0xf
   1599f:	3c 01                	cmp    al,0x1
   159a1:	0f 84 90 00 00 00    	je     15a37 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:719
                                    printd(DEBUG_AHCI,"IPM != ACTIVE\n");
   159a7:	83 ec 08             	sub    esp,0x8
   159aa:	68 9a 6c 04 00       	push   0x46c9a
   159af:	68 00 20 00 00       	push   0x2000
   159b4:	e8 1e 17 01 00       	call   270d7 <printd>
   159b9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:720
                                    int ct = 50;
   159bc:	c7 45 f4 32 00 00 00 	mov    DWORD PTR [ebp-0xc],0x32
/home/yogi/src/os/chrisOS/src/block/ahci.c:721
                                    while (p->cmd.ICC && ct--)
   159c3:	eb 0d                	jmp    159d2 <ahci_port_activate_device+0x212>
/home/yogi/src/os/chrisOS/src/block/ahci.c:722
                                                    waitTicks(1);
   159c5:	83 ec 0c             	sub    esp,0xc
   159c8:	6a 01                	push   0x1
   159ca:	e8 0c 29 01 00       	call   282db <waitTicks>
   159cf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:721
                    }
                    /* just try ICC */
                    if (p->sctl.IPM != 1) {
                                    printd(DEBUG_AHCI,"IPM != ACTIVE\n");
                                    int ct = 50;
                                    while (p->cmd.ICC && ct--)
   159d2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   159d5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   159d8:	c1 e8 1c             	shr    eax,0x1c
   159db:	84 c0                	test   al,al
   159dd:	74 0d                	je     159ec <ahci_port_activate_device+0x22c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:721 (discriminator 1)
   159df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   159e2:	8d 50 ff             	lea    edx,[eax-0x1]
   159e5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   159e8:	85 c0                	test   eax,eax
   159ea:	75 d9                	jne    159c5 <ahci_port_activate_device+0x205>
/home/yogi/src/os/chrisOS/src/block/ahci.c:723
                                                    waitTicks(1);
                                    p->cmd.ICC = 1;
   159ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   159ef:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   159f2:	81 e2 ff ff ff 0f    	and    edx,0xfffffff
   159f8:	81 ca 00 00 00 10    	or     edx,0x10000000
   159fe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:724
                                    wait(10);
   15a01:	83 ec 0c             	sub    esp,0xc
   15a04:	6a 0a                	push   0xa
   15a06:	e8 eb 28 01 00       	call   282f6 <wait>
   15a0b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:725
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
   15a0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15a11:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15a14:	83 e0 07             	and    eax,0x7
   15a17:	85 c0                	test   eax,eax
   15a19:	74 02                	je     15a1d <ahci_port_activate_device+0x25d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:726
                                                    goto next_step;
   15a1b:	eb 1a                	jmp    15a37 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:727
                                    printd(DEBUG_AHCI,"unable to set to active\n");
   15a1d:	83 ec 08             	sub    esp,0x8
   15a20:	68 a9 6c 04 00       	push   0x46ca9
   15a25:	68 00 20 00 00       	push   0x2000
   15a2a:	e8 a8 16 01 00       	call   270d7 <printd>
   15a2f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:728
                                    goto exit;
   15a32:	e9 a3 01 00 00       	jmp    15bda <ahci_port_activate_device+0x41a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:734
                    }
    }

    /* det != 1*/
next_step:
    if ((p->ssts & 0x7) == HBA_PORT_DET_PRESENT) {
   15a37:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15a3a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15a3d:	83 e0 07             	and    eax,0x7
   15a40:	83 f8 03             	cmp    eax,0x3
   15a43:	0f 85 41 01 00 00    	jne    15b8a <ahci_port_activate_device+0x3ca>
/home/yogi/src/os/chrisOS/src/block/ahci.c:736
                    /* almost done */
                    if (p->sctl.IPM != HBA_PORT_IPM_ACTIVE) {
   15a49:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15a4c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15a4f:	c1 e8 08             	shr    eax,0x8
   15a52:	83 e0 0f             	and    eax,0xf
   15a55:	3c 01                	cmp    al,0x1
   15a57:	0f 84 b8 00 00 00    	je     15b15 <ahci_port_activate_device+0x355>
/home/yogi/src/os/chrisOS/src/block/ahci.c:738
                                    int ct, wc;
                                    printd(DEBUG_AHCI,"Present but not active.\n");
   15a5d:	83 ec 08             	sub    esp,0x8
   15a60:	68 c2 6c 04 00       	push   0x46cc2
   15a65:	68 00 20 00 00       	push   0x2000
   15a6a:	e8 68 16 01 00       	call   270d7 <printd>
   15a6f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:740
activ:
                                    ct = 50, wc = 0;
   15a72:	c7 45 f0 32 00 00 00 	mov    DWORD PTR [ebp-0x10],0x32
   15a79:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:742
rewait:
                                    while (p->cmd.ICC && ct--) /* 500ms */
   15a80:	eb 0d                	jmp    15a8f <ahci_port_activate_device+0x2cf>
/home/yogi/src/os/chrisOS/src/block/ahci.c:743
                                                    waitTicks(1);
   15a82:	83 ec 0c             	sub    esp,0xc
   15a85:	6a 01                	push   0x1
   15a87:	e8 4f 28 01 00       	call   282db <waitTicks>
   15a8c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:742
                                    int ct, wc;
                                    printd(DEBUG_AHCI,"Present but not active.\n");
activ:
                                    ct = 50, wc = 0;
rewait:
                                    while (p->cmd.ICC && ct--) /* 500ms */
   15a8f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15a92:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15a95:	c1 e8 1c             	shr    eax,0x1c
   15a98:	84 c0                	test   al,al
   15a9a:	74 0d                	je     15aa9 <ahci_port_activate_device+0x2e9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:742 (discriminator 1)
   15a9c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15a9f:	8d 50 ff             	lea    edx,[eax-0x1]
   15aa2:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   15aa5:	85 c0                	test   eax,eax
   15aa7:	75 d9                	jne    15a82 <ahci_port_activate_device+0x2c2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:744
                                                    waitTicks(1);
                                    if (p->sctl.IPM != HBA_PORT_IPM_ACTIVE && !wc) {
   15aa9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15aac:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15aaf:	c1 e8 08             	shr    eax,0x8
   15ab2:	83 e0 0f             	and    eax,0xf
   15ab5:	3c 01                	cmp    al,0x1
   15ab7:	74 35                	je     15aee <ahci_port_activate_device+0x32e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:744 (discriminator 1)
   15ab9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   15abd:	75 2f                	jne    15aee <ahci_port_activate_device+0x32e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:745
                                                    p->cmd.ICC = 1;
   15abf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15ac2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15ac5:	81 e2 ff ff ff 0f    	and    edx,0xfffffff
   15acb:	81 ca 00 00 00 10    	or     edx,0x10000000
   15ad1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:746
                                                    waitTicks(1);
   15ad4:	83 ec 0c             	sub    esp,0xc
   15ad7:	6a 01                	push   0x1
   15ad9:	e8 fd 27 01 00       	call   282db <waitTicks>
   15ade:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:747
                                                    wc++; ct = 50;
   15ae1:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
   15ae5:	c7 45 f0 32 00 00 00 	mov    DWORD PTR [ebp-0x10],0x32
/home/yogi/src/os/chrisOS/src/block/ahci.c:748
                                                    goto rewait;
   15aec:	eb 92                	jmp    15a80 <ahci_port_activate_device+0x2c0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:750
                                    }
                                    if (wc) {
   15aee:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   15af2:	74 21                	je     15b15 <ahci_port_activate_device+0x355>
/home/yogi/src/os/chrisOS/src/block/ahci.c:752
                                                    /* reset */
                                                    p->sctl.DET = 1;
   15af4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15af7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   15afa:	83 e2 f0             	and    edx,0xfffffff0
   15afd:	83 ca 01             	or     edx,0x1
   15b00:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:753
                                                    waitTicks(100);
   15b03:	83 ec 0c             	sub    esp,0xc
   15b06:	6a 64                	push   0x64
   15b08:	e8 ce 27 01 00       	call   282db <waitTicks>
   15b0d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:754
                                                    goto next_step;
   15b10:	e9 22 ff ff ff       	jmp    15a37 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:758
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
   15b15:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b18:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   15b1b:	81 c2 00 01 00 00    	add    edx,0x100
   15b21:	29 d0                	sub    eax,edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:757
                                                    p->sctl.DET = 1;
                                                    waitTicks(100);
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
   15b23:	c1 f8 07             	sar    eax,0x7
   15b26:	83 ec 04             	sub    esp,0x4
   15b29:	50                   	push   eax
   15b2a:	68 dc 6c 04 00       	push   0x46cdc
   15b2f:	68 00 20 00 00       	push   0x2000
   15b34:	e8 9e 15 01 00       	call   270d7 <printd>
   15b39:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:760
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
   15b3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b3f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15b42:	c1 e8 08             	shr    eax,0x8
   15b45:	83 e0 0f             	and    eax,0xf
/home/yogi/src/os/chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
   15b48:	0f b6 c8             	movzx  ecx,al
/home/yogi/src/os/chrisOS/src/block/ahci.c:760
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
   15b4b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b4e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
/home/yogi/src/os/chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
   15b51:	83 e0 07             	and    eax,0x7
   15b54:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:760
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
   15b56:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b59:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15b5c:	83 e0 01             	and    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
   15b5f:	0f b6 d0             	movzx  edx,al
   15b62:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b65:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15b68:	83 ec 04             	sub    esp,0x4
   15b6b:	51                   	push   ecx
   15b6c:	53                   	push   ebx
   15b6d:	52                   	push   edx
   15b6e:	50                   	push   eax
   15b6f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b72:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15b75:	50                   	push   eax
   15b76:	68 06 6d 04 00       	push   0x46d06
   15b7b:	68 00 20 00 00       	push   0x2000
   15b80:	e8 52 15 01 00       	call   270d7 <printd>
   15b85:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:761
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
                    return;
   15b88:	eb 78                	jmp    15c02 <ahci_port_activate_device+0x442>
/home/yogi/src/os/chrisOS/src/block/ahci.c:762
    } else if ((p->ssts & 0x7) == 4/*?*/) {
   15b8a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b8d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15b90:	83 e0 07             	and    eax,0x7
   15b93:	83 f8 04             	cmp    eax,0x4
   15b96:	75 1a                	jne    15bb2 <ahci_port_activate_device+0x3f2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:764
                    /* just deactivated */
                    printd(DEBUG_AHCI,"PHY offline mode\n");
   15b98:	83 ec 08             	sub    esp,0x8
   15b9b:	68 1f 6d 04 00       	push   0x46d1f
   15ba0:	68 00 20 00 00       	push   0x2000
   15ba5:	e8 2d 15 01 00       	call   270d7 <printd>
   15baa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:765
                    goto activ;
   15bad:	e9 c0 fe ff ff       	jmp    15a72 <ahci_port_activate_device+0x2b2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:766
    } else if ((p->ssts & 0x7) == 5/*DET_PRESENT_NO_PHY*/) {
   15bb2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15bb5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15bb8:	83 e0 07             	and    eax,0x7
   15bbb:	83 f8 05             	cmp    eax,0x5
   15bbe:	75 1a                	jne    15bda <ahci_port_activate_device+0x41a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:767
                    printd(DEBUG_AHCI,"PRESENT_NO_PHY mode\n");
   15bc0:	83 ec 08             	sub    esp,0x8
   15bc3:	68 31 6d 04 00       	push   0x46d31
   15bc8:	68 00 20 00 00       	push   0x2000
   15bcd:	e8 05 15 01 00       	call   270d7 <printd>
   15bd2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:768
                    goto activ; /* try the same */
   15bd5:	e9 98 fe ff ff       	jmp    15a72 <ahci_port_activate_device+0x2b2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:772
    }
exit:
                    /* we're really done */
                    printd(DEBUG_AHCI,"Not present at port %d\n", p - h->ports);
   15bda:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15bdd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   15be0:	81 c2 00 01 00 00    	add    edx,0x100
   15be6:	29 d0                	sub    eax,edx
   15be8:	c1 f8 07             	sar    eax,0x7
   15beb:	83 ec 04             	sub    esp,0x4
   15bee:	50                   	push   eax
   15bef:	68 46 6d 04 00       	push   0x46d46
   15bf4:	68 00 20 00 00       	push   0x2000
   15bf9:	e8 d9 14 01 00       	call   270d7 <printd>
   15bfe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:773
                    return;
   15c01:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:774
}
   15c02:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   15c05:	c9                   	leave  
   15c06:	c3                   	ret    

00015c07 <ahci_enable_port>:
ahci_enable_port():
/home/yogi/src/os/chrisOS/src/block/ahci.c:777

void ahci_enable_port(HBA_MEM* ad, int pt)
{
   15c07:	55                   	push   ebp
   15c08:	89 e5                	mov    ebp,esp
   15c0a:	53                   	push   ebx
   15c0b:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/block/ahci.c:778
        HBA_PORT* p = &ad->ports[pt];
   15c0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15c11:	83 c0 02             	add    eax,0x2
   15c14:	c1 e0 07             	shl    eax,0x7
   15c17:	89 c2                	mov    edx,eax
   15c19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   15c1c:	01 d0                	add    eax,edx
   15c1e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:779
        int reset_ct = 0;
   15c21:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:782
 
        /* skip non-implemented ports */
        if (!(ad->pi & (1 << pt)))
   15c28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   15c2b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   15c2e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15c31:	bb 01 00 00 00       	mov    ebx,0x1
   15c36:	89 c1                	mov    ecx,eax
   15c38:	d3 e3                	shl    ebx,cl
   15c3a:	89 d8                	mov    eax,ebx
   15c3c:	21 d0                	and    eax,edx
   15c3e:	85 c0                	test   eax,eax
   15c40:	0f 84 0c 02 00 00    	je     15e52 <ahci_enable_port+0x24b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:787
                return;
 
Pos1:
        /* clear old data */
        p->serr.AsUlong = 0xffffffff; /* 10.1.2 -> 6. */
   15c46:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15c49:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:788
        p->pxis.AsUlong = 0xffffffff; /* clear all pending interrupts */
   15c50:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15c53:	c7 40 10 ff ff ff ff 	mov    DWORD PTR [eax+0x10],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:791
 
        /* first allow for the reception of FISes */
        p->cmd.FRE = 1;
   15c5a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15c5d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15c60:	83 ca 10             	or     edx,0x10
   15c63:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:792
        wait(20); /* wait for BSY to show up */
   15c66:	83 ec 0c             	sub    esp,0xc
   15c69:	6a 14                	push   0x14
   15c6b:	e8 86 26 01 00       	call   282f6 <wait>
   15c70:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:794
        while (1) {
                uint8_t sts = p->tfd.AsUchar;
   15c73:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15c76:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15c79:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/block/ahci.c:795
                if (sts & 1) {
   15c7c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   15c80:	83 e0 01             	and    eax,0x1
   15c83:	85 c0                	test   eax,eax
   15c85:	0f 84 da 00 00 00    	je     15d65 <ahci_enable_port+0x15e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:797
                        /* something went wrong! */
                        if (sts == 0x7f) /* no device */
   15c8b:	80 7d ef 7f          	cmp    BYTE PTR [ebp-0x11],0x7f
   15c8f:	0f 84 ef 00 00 00    	je     15d84 <ahci_enable_port+0x17d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:799
                                break;
                        else if (sts == 0x41 && p->tfd.ERR == 0x20) {
   15c95:	80 7d ef 41          	cmp    BYTE PTR [ebp-0x11],0x41
   15c99:	75 22                	jne    15cbd <ahci_enable_port+0xb6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:799 (discriminator 1)
   15c9b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15c9e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15ca1:	83 e0 01             	and    eax,0x1
   15ca4:	0f b6 c0             	movzx  eax,al
   15ca7:	83 f8 20             	cmp    eax,0x20
   15caa:	75 11                	jne    15cbd <ahci_enable_port+0xb6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:800
                                if (p->sig == SATA_SIG_ATAPI)
   15cac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15caf:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   15cb2:	3d 01 01 14 eb       	cmp    eax,0xeb140101
   15cb7:	0f 84 ca 00 00 00    	je     15d87 <ahci_enable_port+0x180>
/home/yogi/src/os/chrisOS/src/block/ahci.c:804
                                        break; /* no medium */
                        }
                        printk("port%d indicated task file error %x"
                                " while starting up.\n", pt, p->tfd.ERR);
   15cbd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15cc0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15cc3:	83 e0 01             	and    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:803
                                break;
                        else if (sts == 0x41 && p->tfd.ERR == 0x20) {
                                if (p->sig == SATA_SIG_ATAPI)
                                        break; /* no medium */
                        }
                        printk("port%d indicated task file error %x"
   15cc6:	0f b6 c0             	movzx  eax,al
   15cc9:	83 ec 04             	sub    esp,0x4
   15ccc:	50                   	push   eax
   15ccd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   15cd0:	68 60 6d 04 00       	push   0x46d60
   15cd5:	e8 dd 13 01 00       	call   270b7 <printk>
   15cda:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:805
                                " while starting up.\n", pt, p->tfd.ERR);
                        printd(DEBUG_AHCI,"AHCI: scr1: %x %x\n", p->serr.AsUlong, p->tfd.ERR);
   15cdd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15ce0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15ce3:	83 e0 01             	and    eax,0x1
   15ce6:	0f b6 d0             	movzx  edx,al
   15ce9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15cec:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15cef:	52                   	push   edx
   15cf0:	50                   	push   eax
   15cf1:	68 98 6d 04 00       	push   0x46d98
   15cf6:	68 00 20 00 00       	push   0x2000
   15cfb:	e8 d7 13 01 00       	call   270d7 <printd>
   15d00:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:806
                        printd(DEBUG_AHCI,"AHCI: tfd: %x %x\n", p->tfd.AsUchar, p->tfd.ERR);
   15d03:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15d06:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15d09:	83 e0 01             	and    eax,0x1
   15d0c:	0f b6 d0             	movzx  edx,al
   15d0f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15d12:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15d15:	52                   	push   edx
   15d16:	50                   	push   eax
   15d17:	68 ab 6d 04 00       	push   0x46dab
   15d1c:	68 00 20 00 00       	push   0x2000
   15d21:	e8 b1 13 01 00       	call   270d7 <printd>
   15d26:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:807
                        p->serr.AsUlong = 0xffffffff;
   15d29:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15d2c:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:808
                        if (!reset_ct++) {
   15d33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   15d36:	8d 50 01             	lea    edx,[eax+0x1]
   15d39:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   15d3c:	85 c0                	test   eax,eax
   15d3e:	75 16                	jne    15d56 <ahci_enable_port+0x14f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:809
                                ahci_port_activate_device(ad, p);
   15d40:	83 ec 08             	sub    esp,0x8
   15d43:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   15d46:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   15d49:	e8 72 fa ff ff       	call   157c0 <ahci_port_activate_device>
   15d4e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:810
                                goto Pos1;
   15d51:	e9 f0 fe ff ff       	jmp    15c46 <ahci_enable_port+0x3f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:811
                        } else if (reset_ct == 1) {
   15d56:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   15d5a:	0f 85 c7 00 00 00    	jne    15e27 <ahci_enable_port+0x220>
/home/yogi/src/os/chrisOS/src/block/ahci.c:813
                                /*ahci_reset_port(ad->ptr, p);*/
                                goto Pos1;
   15d60:	e9 e1 fe ff ff       	jmp    15c46 <ahci_enable_port+0x3f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:817
                        } else
                                goto defer;
                }
                if (!(sts & (0x80 | 0x8)))
   15d65:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   15d69:	25 88 00 00 00       	and    eax,0x88
   15d6e:	85 c0                	test   eax,eax
   15d70:	74 18                	je     15d8a <ahci_enable_port+0x183>
/home/yogi/src/os/chrisOS/src/block/ahci.c:819
                        break;
                wait(50);
   15d72:	83 ec 0c             	sub    esp,0xc
   15d75:	6a 32                	push   0x32
   15d77:	e8 7a 25 01 00       	call   282f6 <wait>
   15d7c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:820
        }
   15d7f:	e9 ef fe ff ff       	jmp    15c73 <ahci_enable_port+0x6c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:798
        while (1) {
                uint8_t sts = p->tfd.AsUchar;
                if (sts & 1) {
                        /* something went wrong! */
                        if (sts == 0x7f) /* no device */
                                break;
   15d84:	90                   	nop
   15d85:	eb 04                	jmp    15d8b <ahci_enable_port+0x184>
/home/yogi/src/os/chrisOS/src/block/ahci.c:801
                        else if (sts == 0x41 && p->tfd.ERR == 0x20) {
                                if (p->sig == SATA_SIG_ATAPI)
                                        break; /* no medium */
   15d87:	90                   	nop
   15d88:	eb 01                	jmp    15d8b <ahci_enable_port+0x184>
/home/yogi/src/os/chrisOS/src/block/ahci.c:818
                                goto Pos1;
                        } else
                                goto defer;
                }
                if (!(sts & (0x80 | 0x8)))
                        break;
   15d8a:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:823
                wait(50);
        }
 
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
   15d8b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15d8e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15d91:	83 e0 07             	and    eax,0x7
   15d94:	83 f8 03             	cmp    eax,0x3
   15d97:	74 11                	je     15daa <ahci_enable_port+0x1a3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:824
                ahci_port_activate_device(ad, p);
   15d99:	83 ec 08             	sub    esp,0x8
   15d9c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   15d9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   15da2:	e8 19 fa ff ff       	call   157c0 <ahci_port_activate_device>
   15da7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:825
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
   15daa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15dad:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15db0:	25 88 00 00 00       	and    eax,0x88
   15db5:	85 c0                	test   eax,eax
   15db7:	75 71                	jne    15e2a <ahci_enable_port+0x223>
/home/yogi/src/os/chrisOS/src/block/ahci.c:827
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
   15db9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15dbc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15dbf:	83 e0 07             	and    eax,0x7
   15dc2:	83 f8 03             	cmp    eax,0x3
   15dc5:	74 30                	je     15df7 <ahci_enable_port+0x1f0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:827 (discriminator 1)
   15dc7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15dca:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15dcd:	c1 e8 08             	shr    eax,0x8
   15dd0:	83 e0 0f             	and    eax,0xf
   15dd3:	3c 02                	cmp    al,0x2
   15dd5:	74 20                	je     15df7 <ahci_enable_port+0x1f0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:828 (discriminator 2)
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
   15dd7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15dda:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15ddd:	c1 e8 08             	shr    eax,0x8
   15de0:	83 e0 0f             	and    eax,0xf
/home/yogi/src/os/chrisOS/src/block/ahci.c:827 (discriminator 2)
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
                ahci_port_activate_device(ad, p);
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
   15de3:	3c 06                	cmp    al,0x6
   15de5:	74 10                	je     15df7 <ahci_enable_port+0x1f0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:828 (discriminator 3)
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
   15de7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15dea:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15ded:	c1 e8 08             	shr    eax,0x8
   15df0:	83 e0 0f             	and    eax,0xf
/home/yogi/src/os/chrisOS/src/block/ahci.c:827 (discriminator 3)
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
                ahci_port_activate_device(ad, p);
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
   15df3:	3c 08                	cmp    al,0x8
   15df5:	75 36                	jne    15e2d <ahci_enable_port+0x226>
/home/yogi/src/os/chrisOS/src/block/ahci.c:831
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
                goto defer;
        /* we're allowed so set it */
        p->cmd.ST = 1;
   15df7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15dfa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15dfd:	83 ca 01             	or     edx,0x1
   15e00:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:833
        /* Change in PhyRdy, CPS, TFS.err, PCS, DPS(I=1), UFS, HBFS, HBDS, IFS */
        p->ie.AsUlong = (1 << 22) | (1 << 6) | (1 << 31) | (1 << 30)
   15e03:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15e06:	c7 40 14 70 00 40 f8 	mov    DWORD PTR [eax+0x14],0xf8400070
/home/yogi/src/os/chrisOS/src/block/ahci.c:839
                | (1 << 5) | (1 << 4) | (1 << 29) | (1 << 28) | (1 << 27);
 
        ///* issue the IDENTIFY_(PACKET)_DEVICE command */
        //ahci_issue_command(ad, pt, 0, disk_cmd_identify, 0, 0, NULL, NULL /* wq_worker_ad*/);
 
        printd(DEBUG_AHCI,"AHCI: port %d is now processing commands\n", pt);
   15e0d:	83 ec 04             	sub    esp,0x4
   15e10:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   15e13:	68 c0 6d 04 00       	push   0x46dc0
   15e18:	68 00 20 00 00       	push   0x2000
   15e1d:	e8 b5 12 01 00       	call   270d7 <printd>
   15e22:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:840
        return;
   15e25:	eb 2c                	jmp    15e53 <ahci_enable_port+0x24c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:815
                                goto Pos1;
                        } else if (reset_ct == 1) {
                                /*ahci_reset_port(ad->ptr, p);*/
                                goto Pos1;
                        } else
                                goto defer;
   15e27:	90                   	nop
   15e28:	eb 04                	jmp    15e2e <ahci_enable_port+0x227>
/home/yogi/src/os/chrisOS/src/block/ahci.c:826
 
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
                ahci_port_activate_device(ad, p);
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
                goto defer; /* listen */
   15e2a:	90                   	nop
   15e2b:	eb 01                	jmp    15e2e <ahci_enable_port+0x227>
/home/yogi/src/os/chrisOS/src/block/ahci.c:829
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
                goto defer;
   15e2d:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:843
 
        printd(DEBUG_AHCI,"AHCI: port %d is now processing commands\n", pt);
        return;
 
defer: /* we're interested in status changes only */
        printd(DEBUG_AHCI,"AHCI: port %d set to listening mode\n", pt);
   15e2e:	83 ec 04             	sub    esp,0x4
   15e31:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   15e34:	68 ec 6d 04 00       	push   0x46dec
   15e39:	68 00 20 00 00       	push   0x2000
   15e3e:	e8 94 12 01 00       	call   270d7 <printd>
   15e43:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:844
        p->ie.AsUlong = (1 << 22) | (1 << 31) | (1 << 6); /* PhyRdy change, CPS, CCS */
   15e46:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15e49:	c7 40 14 40 00 40 80 	mov    DWORD PTR [eax+0x14],0x80400040
   15e50:	eb 01                	jmp    15e53 <ahci_enable_port+0x24c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:783
        HBA_PORT* p = &ad->ports[pt];
        int reset_ct = 0;
 
        /* skip non-implemented ports */
        if (!(ad->pi & (1 << pt)))
                return;
   15e52:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:845
        return;
 
defer: /* we're interested in status changes only */
        printd(DEBUG_AHCI,"AHCI: port %d set to listening mode\n", pt);
        p->ie.AsUlong = (1 << 22) | (1 << 31) | (1 << 6); /* PhyRdy change, CPS, CCS */
}
   15e53:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   15e56:	c9                   	leave  
   15e57:	c3                   	ret    

00015e58 <outl>:
outl():
/home/yogi/src/os/chrisOS/include/io.h:32
{
	__asm__ volatile ("outw %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline void outl(unsigned short __port, unsigned int __val)
{
   15e58:	55                   	push   ebp
   15e59:	89 e5                	mov    ebp,esp
   15e5b:	83 ec 04             	sub    esp,0x4
   15e5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   15e61:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/include/io.h:33
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
   15e65:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15e68:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   15e6c:	ef                   	out    dx,eax
/home/yogi/src/os/chrisOS/include/io.h:34
}
   15e6d:	90                   	nop
   15e6e:	c9                   	leave  
   15e6f:	c3                   	ret    

00015e70 <inl>:
inl():
/home/yogi/src/os/chrisOS/include/io.h:51
	__asm__ volatile ("inw %0, %1" : "=a" (__val) : "dN" (__port));
	return __val;
}

static __inline unsigned int inl(unsigned short __port)
{
   15e70:	55                   	push   ebp
   15e71:	89 e5                	mov    ebp,esp
   15e73:	83 ec 14             	sub    esp,0x14
   15e76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   15e79:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:53
	unsigned int __val;
	__asm__ volatile ("ind %0, %1" : "=a" (__val) : "dN" (__port));
   15e7d:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   15e81:	89 c2                	mov    edx,eax
   15e83:	ed                   	in     eax,dx
   15e84:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/include/io.h:54
	return __val;
   15e87:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/include/io.h:55
}
   15e8a:	c9                   	leave  
   15e8b:	c3                   	ret    

00015e8c <printPCIConfig>:
printPCIConfig():
/home/yogi/src/os/chrisOS/src/block/pci.c:26
extern struct pci_bridge_t* kPCIBridgeHeaders;
extern struct pci_device_t* kPCIDeviceFunctions;
extern uint32_t kDebugLevel;

void printPCIConfig()
{
   15e8c:	55                   	push   ebp
   15e8d:	89 e5                	mov    ebp,esp
   15e8f:	57                   	push   edi
   15e90:	56                   	push   esi
   15e91:	53                   	push   ebx
   15e92:	81 ec dc 00 00 00    	sub    esp,0xdc
/home/yogi/src/os/chrisOS/src/block/pci.c:28
    char buffer[150];
    int totalCnt=0;
   15e98:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:30
    
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
   15e9f:	0f b6 05 ac 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ac
   15ea6:	0f b6 d0             	movzx  edx,al
   15ea9:	0f b6 05 ad 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ad
   15eb0:	0f b6 c0             	movzx  eax,al
   15eb3:	01 d0                	add    eax,edx
   15eb5:	83 ec 08             	sub    esp,0x8
   15eb8:	50                   	push   eax
   15eb9:	68 b4 23 08 00       	push   0x823b4
   15ebe:	e8 f4 11 01 00       	call   270b7 <printk>
   15ec3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:31
    puts("Devices:\n");
   15ec6:	83 ec 0c             	sub    esp,0xc
   15ec9:	68 db 23 08 00       	push   0x823db
   15ece:	e8 33 21 00 00       	call   18006 <puts>
   15ed3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:32
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
   15ed6:	83 ec 0c             	sub    esp,0xc
   15ed9:	68 e8 23 08 00       	push   0x823e8
   15ede:	e8 d4 11 01 00       	call   270b7 <printk>
   15ee3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:33
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
   15ee6:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   15eed:	e9 ed 01 00 00       	jmp    160df <printPCIConfig+0x253>
/home/yogi/src/os/chrisOS/src/block/pci.c:37
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
                kPCIDeviceHeaders[cnt].subClass);
   15ef2:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   15ef8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15efb:	89 d0                	mov    eax,edx
   15efd:	c1 e0 02             	shl    eax,0x2
   15f00:	01 d0                	add    eax,edx
   15f02:	c1 e0 04             	shl    eax,0x4
   15f05:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   15f07:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   15f0a:	89 85 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   15f10:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   15f16:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15f19:	89 d0                	mov    eax,edx
   15f1b:	c1 e0 02             	shl    eax,0x2
   15f1e:	01 d0                	add    eax,edx
   15f20:	c1 e0 04             	shl    eax,0x4
   15f23:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   15f25:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
   15f28:	89 b5 30 ff ff ff    	mov    DWORD PTR [ebp-0xd0],esi
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   15f2e:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   15f34:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15f37:	89 d0                	mov    eax,edx
   15f39:	c1 e0 02             	shl    eax,0x2
   15f3c:	01 d0                	add    eax,edx
   15f3e:	c1 e0 04             	shl    eax,0x4
   15f41:	01 c8                	add    eax,ecx
   15f43:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   15f47:	0f b7 f8             	movzx  edi,ax
   15f4a:	89 bd 2c ff ff ff    	mov    DWORD PTR [ebp-0xd4],edi
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   15f50:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   15f56:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15f59:	89 d0                	mov    eax,edx
   15f5b:	c1 e0 02             	shl    eax,0x2
   15f5e:	01 d0                	add    eax,edx
   15f60:	c1 e0 04             	shl    eax,0x4
   15f63:	01 c8                	add    eax,ecx
   15f65:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   15f69:	0f b7 d8             	movzx  ebx,ax
   15f6c:	89 9d 28 ff ff ff    	mov    DWORD PTR [ebp-0xd8],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   15f72:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   15f78:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15f7b:	89 d0                	mov    eax,edx
   15f7d:	c1 e0 02             	shl    eax,0x2
   15f80:	01 d0                	add    eax,edx
   15f82:	c1 e0 04             	shl    eax,0x4
   15f85:	01 c8                	add    eax,ecx
   15f87:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   15f8b:	0f b6 c8             	movzx  ecx,al
   15f8e:	89 8d 24 ff ff ff    	mov    DWORD PTR [ebp-0xdc],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   15f94:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   15f9a:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15f9d:	89 d0                	mov    eax,edx
   15f9f:	c1 e0 02             	shl    eax,0x2
   15fa2:	01 d0                	add    eax,edx
   15fa4:	c1 e0 04             	shl    eax,0x4
   15fa7:	01 c8                	add    eax,ecx
   15fa9:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   15fad:	0f b6 f8             	movzx  edi,al
   15fb0:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   15fb6:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15fb9:	89 d0                	mov    eax,edx
   15fbb:	c1 e0 02             	shl    eax,0x2
   15fbe:	01 d0                	add    eax,edx
   15fc0:	c1 e0 04             	shl    eax,0x4
   15fc3:	01 c8                	add    eax,ecx
   15fc5:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   15fc9:	0f b6 f0             	movzx  esi,al
   15fcc:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   15fd2:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15fd5:	89 d0                	mov    eax,edx
   15fd7:	c1 e0 02             	shl    eax,0x2
   15fda:	01 d0                	add    eax,edx
   15fdc:	c1 e0 04             	shl    eax,0x4
   15fdf:	01 c8                	add    eax,ecx
   15fe1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   15fe5:	0f b6 d8             	movzx  ebx,al
   15fe8:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   15fee:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15ff1:	89 d0                	mov    eax,edx
   15ff3:	c1 e0 02             	shl    eax,0x2
   15ff6:	01 d0                	add    eax,edx
   15ff8:	c1 e0 04             	shl    eax,0x4
   15ffb:	01 c8                	add    eax,ecx
   15ffd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   16000:	0f b6 c0             	movzx  eax,al
   16003:	83 ec 08             	sub    esp,0x8
   16006:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   1600c:	ff b5 30 ff ff ff    	push   DWORD PTR [ebp-0xd0]
   16012:	ff b5 2c ff ff ff    	push   DWORD PTR [ebp-0xd4]
   16018:	ff b5 28 ff ff ff    	push   DWORD PTR [ebp-0xd8]
   1601e:	ff b5 24 ff ff ff    	push   DWORD PTR [ebp-0xdc]
   16024:	57                   	push   edi
   16025:	56                   	push   esi
   16026:	53                   	push   ebx
   16027:	50                   	push   eax
   16028:	68 24 24 08 00       	push   0x82424
   1602d:	e8 85 10 01 00       	call   270b7 <printk>
   16032:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:40
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
                kPCIDeviceHeaders[cnt].subClass);
        //getVendorLongName(kPCIDeviceHeaders[cnt].vendor, buffer);
        //printk("%s",buffer);
        getDeviceName(kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, buffer);
   16035:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   1603b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1603e:	89 d0                	mov    eax,edx
   16040:	c1 e0 02             	shl    eax,0x2
   16043:	01 d0                	add    eax,edx
   16045:	c1 e0 04             	shl    eax,0x4
   16048:	01 c8                	add    eax,ecx
   1604a:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   1604e:	0f b7 c8             	movzx  ecx,ax
   16051:	8b 1d b4 02 12 00    	mov    ebx,DWORD PTR ds:0x1202b4
   16057:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1605a:	89 d0                	mov    eax,edx
   1605c:	c1 e0 02             	shl    eax,0x2
   1605f:	01 d0                	add    eax,edx
   16061:	c1 e0 04             	shl    eax,0x4
   16064:	01 d8                	add    eax,ebx
   16066:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   1606a:	0f b7 c0             	movzx  eax,ax
   1606d:	83 ec 04             	sub    esp,0x4
   16070:	8d 95 42 ff ff ff    	lea    edx,[ebp-0xbe]
   16076:	52                   	push   edx
   16077:	51                   	push   ecx
   16078:	50                   	push   eax
   16079:	e8 63 07 00 00       	call   167e1 <getDeviceName>
   1607e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:41
        strleft(buffer,28);
   16081:	83 ec 08             	sub    esp,0x8
   16084:	6a 1c                	push   0x1c
   16086:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   1608c:	50                   	push   eax
   1608d:	e8 92 13 01 00       	call   27424 <strleft>
   16092:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:42
        printk("%s\n",buffer);
   16095:	83 ec 08             	sub    esp,0x8
   16098:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   1609e:	50                   	push   eax
   1609f:	68 58 24 08 00       	push   0x82458
   160a4:	e8 0e 10 01 00       	call   270b7 <printk>
   160a9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:43
        totalCnt++;
   160ac:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:44
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
   160b0:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   160b4:	7e 25                	jle    160db <printPCIConfig+0x24f>
/home/yogi/src/os/chrisOS/src/block/pci.c:44 (discriminator 1)
   160b6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   160b9:	8d 58 04             	lea    ebx,[eax+0x4]
   160bc:	e8 86 1e 00 00       	call   17f47 <cursorGetMaxY>
   160c1:	89 c1                	mov    ecx,eax
   160c3:	89 d8                	mov    eax,ebx
   160c5:	99                   	cdq    
   160c6:	f7 f9                	idiv   ecx
   160c8:	89 d0                	mov    eax,edx
   160ca:	85 c0                	test   eax,eax
   160cc:	75 0d                	jne    160db <printPCIConfig+0x24f>
/home/yogi/src/os/chrisOS/src/block/pci.c:45
            pauseDisplay(false);
   160ce:	83 ec 0c             	sub    esp,0xc
   160d1:	6a 00                	push   0x0
   160d3:	e8 9e f8 00 00       	call   25976 <pauseDisplay>
   160d8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:33 (discriminator 2)
    int totalCnt=0;
    
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
   160db:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:33 (discriminator 1)
   160df:	0f b6 05 ac 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ac
   160e6:	0f b6 c0             	movzx  eax,al
   160e9:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   160ec:	0f 8f 00 fe ff ff    	jg     15ef2 <printPCIConfig+0x66>
/home/yogi/src/os/chrisOS/src/block/pci.c:47
        printk("%s\n",buffer);
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }
    puts("Bridges:\n");
   160f2:	83 ec 0c             	sub    esp,0xc
   160f5:	68 5c 24 08 00       	push   0x8245c
   160fa:	e8 07 1f 00 00       	call   18006 <puts>
   160ff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:48
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
   16102:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   16109:	e9 ef 01 00 00       	jmp    162fd <printPCIConfig+0x471>
/home/yogi/src/os/chrisOS/src/block/pci.c:55
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   1610e:	a1 b8 02 12 00       	mov    eax,ds:0x1202b8
   16113:	0f b6 40 26          	movzx  eax,BYTE PTR [eax+0x26]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16117:	0f b6 c0             	movzx  eax,al
   1611a:	89 85 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:55
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   16120:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   16126:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16129:	6b c0 4e             	imul   eax,eax,0x4e
   1612c:	01 d0                	add    eax,edx
   1612e:	0f b6 40 27          	movzx  eax,BYTE PTR [eax+0x27]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16132:	0f b6 f0             	movzx  esi,al
   16135:	89 b5 30 ff ff ff    	mov    DWORD PTR [ebp-0xd0],esi
/home/yogi/src/os/chrisOS/src/block/pci.c:55
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   1613b:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   16141:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16144:	6b c0 4e             	imul   eax,eax,0x4e
   16147:	01 d0                	add    eax,edx
   16149:	0f b6 40 28          	movzx  eax,BYTE PTR [eax+0x28]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   1614d:	0f b6 f8             	movzx  edi,al
   16150:	89 bd 2c ff ff ff    	mov    DWORD PTR [ebp-0xd4],edi
/home/yogi/src/os/chrisOS/src/block/pci.c:54
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
   16156:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   1615c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1615f:	6b c0 4e             	imul   eax,eax,0x4e
   16162:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16164:	8b 58 0d             	mov    ebx,DWORD PTR [eax+0xd]
   16167:	89 9d 28 ff ff ff    	mov    DWORD PTR [ebp-0xd8],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:54
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
   1616d:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   16173:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16176:	6b c0 4e             	imul   eax,eax,0x4e
   16179:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   1617b:	8b 48 09             	mov    ecx,DWORD PTR [eax+0x9]
   1617e:	89 8d 24 ff ff ff    	mov    DWORD PTR [ebp-0xdc],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:53
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
   16184:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   1618a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1618d:	6b c0 4e             	imul   eax,eax,0x4e
   16190:	01 d0                	add    eax,edx
   16192:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16196:	0f b7 d0             	movzx  edx,ax
   16199:	89 95 20 ff ff ff    	mov    DWORD PTR [ebp-0xe0],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:53
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
   1619f:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   161a5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   161a8:	6b c0 4e             	imul   eax,eax,0x4e
   161ab:	01 d0                	add    eax,edx
   161ad:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   161b1:	0f b7 c0             	movzx  eax,ax
   161b4:	89 85 1c ff ff ff    	mov    DWORD PTR [ebp-0xe4],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:52
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
   161ba:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   161c0:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   161c3:	6b c0 4e             	imul   eax,eax,0x4e
   161c6:	01 d0                	add    eax,edx
   161c8:	0f b6 40 2b          	movzx  eax,BYTE PTR [eax+0x2b]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   161cc:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/block/pci.c:52
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
   161cf:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   161d5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   161d8:	6b c0 4e             	imul   eax,eax,0x4e
   161db:	01 d0                	add    eax,edx
   161dd:	0f b6 40 2a          	movzx  eax,BYTE PTR [eax+0x2a]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   161e1:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/block/pci.c:51
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
   161e4:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   161ea:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   161ed:	6b c0 4e             	imul   eax,eax,0x4e
   161f0:	01 d0                	add    eax,edx
   161f2:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   161f6:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:51
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
   161f9:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   161ff:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16202:	6b c0 4e             	imul   eax,eax,0x4e
   16205:	01 d0                	add    eax,edx
   16207:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   1620b:	0f b6 c8             	movzx  ecx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:51
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
   1620e:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   16214:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16217:	6b c0 4e             	imul   eax,eax,0x4e
   1621a:	01 d0                	add    eax,edx
   1621c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   1621f:	0f b6 c0             	movzx  eax,al
   16222:	83 ec 0c             	sub    esp,0xc
   16225:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   1622b:	ff b5 30 ff ff ff    	push   DWORD PTR [ebp-0xd0]
   16231:	ff b5 2c ff ff ff    	push   DWORD PTR [ebp-0xd4]
   16237:	ff b5 28 ff ff ff    	push   DWORD PTR [ebp-0xd8]
   1623d:	ff b5 24 ff ff ff    	push   DWORD PTR [ebp-0xdc]
   16243:	ff b5 20 ff ff ff    	push   DWORD PTR [ebp-0xe0]
   16249:	ff b5 1c ff ff ff    	push   DWORD PTR [ebp-0xe4]
   1624f:	57                   	push   edi
   16250:	56                   	push   esi
   16251:	53                   	push   ebx
   16252:	51                   	push   ecx
   16253:	50                   	push   eax
   16254:	68 68 24 08 00       	push   0x82468
   16259:	e8 59 0e 01 00       	call   270b7 <printk>
   1625e:	83 c4 40             	add    esp,0x40
/home/yogi/src/os/chrisOS/src/block/pci.c:60
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
        //getVendorLongName(kPCIDeviceHeaders[cnt].vendor, buffer);
        //strleft(buffer,10);
        //printk("%s",buffer);
//        strleft(buffer,20);
        getDeviceName(kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, buffer);
   16261:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   16267:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1626a:	6b c0 4e             	imul   eax,eax,0x4e
   1626d:	01 d0                	add    eax,edx
   1626f:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
   16273:	0f b7 d0             	movzx  edx,ax
   16276:	8b 0d b8 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b8
   1627c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1627f:	6b c0 4e             	imul   eax,eax,0x4e
   16282:	01 c8                	add    eax,ecx
   16284:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
   16288:	0f b7 c0             	movzx  eax,ax
   1628b:	83 ec 04             	sub    esp,0x4
   1628e:	8d 8d 42 ff ff ff    	lea    ecx,[ebp-0xbe]
   16294:	51                   	push   ecx
   16295:	52                   	push   edx
   16296:	50                   	push   eax
   16297:	e8 45 05 00 00       	call   167e1 <getDeviceName>
   1629c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:61
        strleft(buffer,28);
   1629f:	83 ec 08             	sub    esp,0x8
   162a2:	6a 1c                	push   0x1c
   162a4:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   162aa:	50                   	push   eax
   162ab:	e8 74 11 01 00       	call   27424 <strleft>
   162b0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:62
        printk("%s\n",buffer);
   162b3:	83 ec 08             	sub    esp,0x8
   162b6:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   162bc:	50                   	push   eax
   162bd:	68 58 24 08 00       	push   0x82458
   162c2:	e8 f0 0d 01 00       	call   270b7 <printk>
   162c7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:63
        totalCnt++;
   162ca:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:64
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
   162ce:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   162d2:	7e 25                	jle    162f9 <printPCIConfig+0x46d>
/home/yogi/src/os/chrisOS/src/block/pci.c:64 (discriminator 1)
   162d4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   162d7:	8d 58 04             	lea    ebx,[eax+0x4]
   162da:	e8 68 1c 00 00       	call   17f47 <cursorGetMaxY>
   162df:	89 c1                	mov    ecx,eax
   162e1:	89 d8                	mov    eax,ebx
   162e3:	99                   	cdq    
   162e4:	f7 f9                	idiv   ecx
   162e6:	89 d0                	mov    eax,edx
   162e8:	85 c0                	test   eax,eax
   162ea:	75 0d                	jne    162f9 <printPCIConfig+0x46d>
/home/yogi/src/os/chrisOS/src/block/pci.c:65
            pauseDisplay(false);
   162ec:	83 ec 0c             	sub    esp,0xc
   162ef:	6a 00                	push   0x0
   162f1:	e8 80 f6 00 00       	call   25976 <pauseDisplay>
   162f6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:48 (discriminator 2)
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
   162f9:	83 45 dc 01          	add    DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:48 (discriminator 1)
   162fd:	0f b6 05 ad 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ad
   16304:	0f b6 c0             	movzx  eax,al
   16307:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   1630a:	0f 8f fe fd ff ff    	jg     1610e <printPCIConfig+0x282>
/home/yogi/src/os/chrisOS/src/block/pci.c:67
        printk("%s\n",buffer);
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }   
    puts("Functions:\n");
   16310:	83 ec 0c             	sub    esp,0xc
   16313:	68 ac 24 08 00       	push   0x824ac
   16318:	e8 e9 1c 00 00       	call   18006 <puts>
   1631d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:68
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
   16320:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
   16327:	e9 ed 01 00 00       	jmp    16519 <printPCIConfig+0x68d>
/home/yogi/src/os/chrisOS/src/block/pci.c:74
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
                    kPCIDeviceFunctions[cnt].subClass);
   1632c:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   16332:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16335:	89 d0                	mov    eax,edx
   16337:	c1 e0 02             	shl    eax,0x2
   1633a:	01 d0                	add    eax,edx
   1633c:	c1 e0 04             	shl    eax,0x4
   1633f:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   16341:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   16344:	89 85 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   1634a:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   16350:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16353:	89 d0                	mov    eax,edx
   16355:	c1 e0 02             	shl    eax,0x2
   16358:	01 d0                	add    eax,edx
   1635a:	c1 e0 04             	shl    eax,0x4
   1635d:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   1635f:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
   16362:	89 b5 30 ff ff ff    	mov    DWORD PTR [ebp-0xd0],esi
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   16368:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   1636e:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16371:	89 d0                	mov    eax,edx
   16373:	c1 e0 02             	shl    eax,0x2
   16376:	01 d0                	add    eax,edx
   16378:	c1 e0 04             	shl    eax,0x4
   1637b:	01 c8                	add    eax,ecx
   1637d:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   16381:	0f b7 f8             	movzx  edi,ax
   16384:	89 bd 2c ff ff ff    	mov    DWORD PTR [ebp-0xd4],edi
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   1638a:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   16390:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16393:	89 d0                	mov    eax,edx
   16395:	c1 e0 02             	shl    eax,0x2
   16398:	01 d0                	add    eax,edx
   1639a:	c1 e0 04             	shl    eax,0x4
   1639d:	01 c8                	add    eax,ecx
   1639f:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   163a3:	0f b7 d8             	movzx  ebx,ax
   163a6:	89 9d 28 ff ff ff    	mov    DWORD PTR [ebp-0xd8],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   163ac:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   163b2:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   163b5:	89 d0                	mov    eax,edx
   163b7:	c1 e0 02             	shl    eax,0x2
   163ba:	01 d0                	add    eax,edx
   163bc:	c1 e0 04             	shl    eax,0x4
   163bf:	01 c8                	add    eax,ecx
   163c1:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   163c5:	0f b6 c8             	movzx  ecx,al
   163c8:	89 8d 24 ff ff ff    	mov    DWORD PTR [ebp-0xdc],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   163ce:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   163d4:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   163d7:	89 d0                	mov    eax,edx
   163d9:	c1 e0 02             	shl    eax,0x2
   163dc:	01 d0                	add    eax,edx
   163de:	c1 e0 04             	shl    eax,0x4
   163e1:	01 c8                	add    eax,ecx
   163e3:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   163e7:	0f b6 f8             	movzx  edi,al
   163ea:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   163f0:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   163f3:	89 d0                	mov    eax,edx
   163f5:	c1 e0 02             	shl    eax,0x2
   163f8:	01 d0                	add    eax,edx
   163fa:	c1 e0 04             	shl    eax,0x4
   163fd:	01 c8                	add    eax,ecx
   163ff:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   16403:	0f b6 f0             	movzx  esi,al
   16406:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   1640c:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   1640f:	89 d0                	mov    eax,edx
   16411:	c1 e0 02             	shl    eax,0x2
   16414:	01 d0                	add    eax,edx
   16416:	c1 e0 04             	shl    eax,0x4
   16419:	01 c8                	add    eax,ecx
   1641b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1641f:	0f b6 d8             	movzx  ebx,al
   16422:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   16428:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   1642b:	89 d0                	mov    eax,edx
   1642d:	c1 e0 02             	shl    eax,0x2
   16430:	01 d0                	add    eax,edx
   16432:	c1 e0 04             	shl    eax,0x4
   16435:	01 c8                	add    eax,ecx
   16437:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1643a:	0f b6 c0             	movzx  eax,al
   1643d:	83 ec 08             	sub    esp,0x8
   16440:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   16446:	ff b5 30 ff ff ff    	push   DWORD PTR [ebp-0xd0]
   1644c:	ff b5 2c ff ff ff    	push   DWORD PTR [ebp-0xd4]
   16452:	ff b5 28 ff ff ff    	push   DWORD PTR [ebp-0xd8]
   16458:	ff b5 24 ff ff ff    	push   DWORD PTR [ebp-0xdc]
   1645e:	57                   	push   edi
   1645f:	56                   	push   esi
   16460:	53                   	push   ebx
   16461:	50                   	push   eax
   16462:	68 24 24 08 00       	push   0x82424
   16467:	e8 4b 0c 01 00       	call   270b7 <printk>
   1646c:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:77
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
                    kPCIDeviceFunctions[cnt].subClass);
            //getVendorLongName(kPCIDeviceFunctions[cnt].vendor, buffer);
            //printk("%s",buffer);
            getDeviceName(kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, buffer);
   1646f:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   16475:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16478:	89 d0                	mov    eax,edx
   1647a:	c1 e0 02             	shl    eax,0x2
   1647d:	01 d0                	add    eax,edx
   1647f:	c1 e0 04             	shl    eax,0x4
   16482:	01 c8                	add    eax,ecx
   16484:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   16488:	0f b7 c8             	movzx  ecx,ax
   1648b:	8b 1d bc 02 12 00    	mov    ebx,DWORD PTR ds:0x1202bc
   16491:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16494:	89 d0                	mov    eax,edx
   16496:	c1 e0 02             	shl    eax,0x2
   16499:	01 d0                	add    eax,edx
   1649b:	c1 e0 04             	shl    eax,0x4
   1649e:	01 d8                	add    eax,ebx
   164a0:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   164a4:	0f b7 c0             	movzx  eax,ax
   164a7:	83 ec 04             	sub    esp,0x4
   164aa:	8d 95 42 ff ff ff    	lea    edx,[ebp-0xbe]
   164b0:	52                   	push   edx
   164b1:	51                   	push   ecx
   164b2:	50                   	push   eax
   164b3:	e8 29 03 00 00       	call   167e1 <getDeviceName>
   164b8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:78
            strleft(buffer,28);
   164bb:	83 ec 08             	sub    esp,0x8
   164be:	6a 1c                	push   0x1c
   164c0:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   164c6:	50                   	push   eax
   164c7:	e8 58 0f 01 00       	call   27424 <strleft>
   164cc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:79
            printk("%s\n",buffer);
   164cf:	83 ec 08             	sub    esp,0x8
   164d2:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   164d8:	50                   	push   eax
   164d9:	68 58 24 08 00       	push   0x82458
   164de:	e8 d4 0b 01 00       	call   270b7 <printk>
   164e3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:80
            totalCnt++;
   164e6:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:81
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
   164ea:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   164ee:	7e 25                	jle    16515 <printPCIConfig+0x689>
/home/yogi/src/os/chrisOS/src/block/pci.c:81 (discriminator 1)
   164f0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   164f3:	8d 58 04             	lea    ebx,[eax+0x4]
   164f6:	e8 4c 1a 00 00       	call   17f47 <cursorGetMaxY>
   164fb:	89 c1                	mov    ecx,eax
   164fd:	89 d8                	mov    eax,ebx
   164ff:	99                   	cdq    
   16500:	f7 f9                	idiv   ecx
   16502:	89 d0                	mov    eax,edx
   16504:	85 c0                	test   eax,eax
   16506:	75 0d                	jne    16515 <printPCIConfig+0x689>
/home/yogi/src/os/chrisOS/src/block/pci.c:82
            pauseDisplay(false);
   16508:	83 ec 0c             	sub    esp,0xc
   1650b:	6a 00                	push   0x0
   1650d:	e8 64 f4 00 00       	call   25976 <pauseDisplay>
   16512:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:68 (discriminator 2)
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }   
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
   16515:	83 45 d8 01          	add    DWORD PTR [ebp-0x28],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:68 (discriminator 1)
   16519:	0f b6 05 ae 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ae
   16520:	0f b6 c0             	movzx  eax,al
   16523:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
   16526:	0f 8f 00 fe ff ff    	jg     1632c <printPCIConfig+0x4a0>
/home/yogi/src/os/chrisOS/src/block/pci.c:85
            totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
        }
    }
}
   1652c:	90                   	nop
   1652d:	8d 65 f4             	lea    esp,[ebp-0xc]
   16530:	5b                   	pop    ebx
   16531:	5e                   	pop    esi
   16532:	5f                   	pop    edi
   16533:	5d                   	pop    ebp
   16534:	c3                   	ret    

00016535 <pciConfigReadWord>:
pciConfigReadWord():
/home/yogi/src/os/chrisOS/src/block/pci.c:90

//struct pci_device_id* pci_deviceList = (struct pci_device_id*)PCI_DEVICE_LIST_ADDRESS;
  uint16_t pciConfigReadWord (uint8_t bus, uint8_t slot,
                             uint8_t func, uint8_t offset)
 {
   16535:	55                   	push   ebp
   16536:	89 e5                	mov    ebp,esp
   16538:	53                   	push   ebx
   16539:	83 ec 30             	sub    esp,0x30
   1653c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1653f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   16542:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   16545:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   16548:	88 5d d8             	mov    BYTE PTR [ebp-0x28],bl
   1654b:	88 4d d4             	mov    BYTE PTR [ebp-0x2c],cl
   1654e:	88 55 d0             	mov    BYTE PTR [ebp-0x30],dl
   16551:	88 45 cc             	mov    BYTE PTR [ebp-0x34],al
/home/yogi/src/os/chrisOS/src/block/pci.c:92
    uint32_t address;
    uint32_t lbus  = (uint32_t)bus;
   16554:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
   16558:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:93
    uint32_t lslot = (uint32_t)slot;
   1655b:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   1655f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:94
    uint32_t lfunc = (uint32_t)func;
   16562:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
   16566:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:95
    uint16_t tmp = 0;
   16569:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:97
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   1656f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   16572:	c1 e0 10             	shl    eax,0x10
   16575:	89 c2                	mov    edx,eax
   16577:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1657a:	c1 e0 0b             	shl    eax,0xb
   1657d:	09 c2                	or     edx,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:98
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   1657f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16582:	c1 e0 08             	shl    eax,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:97
    uint32_t lbus  = (uint32_t)bus;
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint16_t tmp = 0;
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   16585:	09 c2                	or     edx,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:98
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   16587:	0f b6 45 cc          	movzx  eax,BYTE PTR [ebp-0x34]
   1658b:	25 fc 00 00 00       	and    eax,0xfc
   16590:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/block/pci.c:97
    uint32_t lbus  = (uint32_t)bus;
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint16_t tmp = 0;
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   16592:	0d 00 00 00 80       	or     eax,0x80000000
   16597:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:101
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
 
    /* write out the address */
    outl (0xCF8, address);
   1659a:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1659d:	68 f8 0c 00 00       	push   0xcf8
   165a2:	e8 b1 f8 ff ff       	call   15e58 <outl>
   165a7:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:104
    /* read in the data */
    /* (offset & 2) * 8) = 0 will choose the first word of the 32 bits register */
    tmp = (uint16_t)((inl (0xCFC) >> ((offset & 2) * 8)) & 0xffff);
   165aa:	68 fc 0c 00 00       	push   0xcfc
   165af:	e8 bc f8 ff ff       	call   15e70 <inl>
   165b4:	83 c4 04             	add    esp,0x4
   165b7:	89 c2                	mov    edx,eax
   165b9:	0f b6 45 cc          	movzx  eax,BYTE PTR [ebp-0x34]
   165bd:	83 e0 02             	and    eax,0x2
   165c0:	c1 e0 03             	shl    eax,0x3
   165c3:	89 c1                	mov    ecx,eax
   165c5:	d3 ea                	shr    edx,cl
   165c7:	89 d0                	mov    eax,edx
   165c9:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/src/os/chrisOS/src/block/pci.c:105
    return (tmp);
   165cd:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
/home/yogi/src/os/chrisOS/src/block/pci.c:106
 }
   165d1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   165d4:	c9                   	leave  
   165d5:	c3                   	ret    

000165d6 <pciConfigReadDWord>:
pciConfigReadDWord():
/home/yogi/src/os/chrisOS/src/block/pci.c:110

 uint32_t pciConfigReadDWord (uint8_t bus, uint8_t slot,
                             uint8_t func, uint8_t offset)
 {
   165d6:	55                   	push   ebp
   165d7:	89 e5                	mov    ebp,esp
   165d9:	53                   	push   ebx
   165da:	83 ec 30             	sub    esp,0x30
   165dd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   165e0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   165e3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   165e6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   165e9:	88 5d d8             	mov    BYTE PTR [ebp-0x28],bl
   165ec:	88 4d d4             	mov    BYTE PTR [ebp-0x2c],cl
   165ef:	88 55 d0             	mov    BYTE PTR [ebp-0x30],dl
   165f2:	88 45 cc             	mov    BYTE PTR [ebp-0x34],al
/home/yogi/src/os/chrisOS/src/block/pci.c:112
    uint32_t address;
    uint32_t lbus  = (uint32_t)bus;
   165f5:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
   165f9:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:113
    uint32_t lslot = (uint32_t)slot;
   165fc:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   16600:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:114
    uint32_t lfunc = (uint32_t)func;
   16603:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
   16607:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:118
    uint32_t num;
    
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   1660a:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1660d:	c1 e0 10             	shl    eax,0x10
   16610:	89 c2                	mov    edx,eax
   16612:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16615:	c1 e0 0b             	shl    eax,0xb
   16618:	09 c2                	or     edx,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:119
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   1661a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1661d:	c1 e0 08             	shl    eax,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:118
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint32_t num;
    
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   16620:	09 c2                	or     edx,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:119
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   16622:	0f b6 45 cc          	movzx  eax,BYTE PTR [ebp-0x34]
   16626:	25 fc 00 00 00       	and    eax,0xfc
   1662b:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/block/pci.c:118
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint32_t num;
    
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   1662d:	0d 00 00 00 80       	or     eax,0x80000000
   16632:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:122
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
 
    /* write out the address */
    outl (0xCF8, address);
   16635:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   16638:	68 f8 0c 00 00       	push   0xcf8
   1663d:	e8 16 f8 ff ff       	call   15e58 <outl>
   16642:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:125
    /* read in the data */
    /* (offset & 2) * 8) = 0 will choose the first word of the 32 bits register */
    num = inl (0xCFC);
   16645:	68 fc 0c 00 00       	push   0xcfc
   1664a:	e8 21 f8 ff ff       	call   15e70 <inl>
   1664f:	83 c4 04             	add    esp,0x4
   16652:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:127
    //return ((num >> 24)) | ((num & 0x0000FF000) << 8) | ((num & 0x00FF0000)>>8) | ((num << 24));
    return num;
   16655:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/chrisOS/src/block/pci.c:128
 }
   16658:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1665b:	c9                   	leave  
   1665c:	c3                   	ret    

0001665d <pciQueryBDF>:
pciQueryBDF():
/home/yogi/src/os/chrisOS/src/block/pci.c:131

 void pciQueryBDF(uint8_t bus, uint8_t device, uint8_t function)
 {
   1665d:	55                   	push   ebp
   1665e:	89 e5                	mov    ebp,esp
   16660:	81 ec b8 00 00 00    	sub    esp,0xb8
   16666:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   16669:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1666c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1666f:	88 8d 54 ff ff ff    	mov    BYTE PTR [ebp-0xac],cl
   16675:	88 95 50 ff ff ff    	mov    BYTE PTR [ebp-0xb0],dl
   1667b:	88 85 4c ff ff ff    	mov    BYTE PTR [ebp-0xb4],al
/home/yogi/src/os/chrisOS/src/block/pci.c:135
     struct pci_device_t header;
     struct pci_bridge_t bridge;

     printk("Retrieving info for PCI address %02X:%02X:%02X\n",bus,device,function);
   16681:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   16688:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   1668f:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   16696:	51                   	push   ecx
   16697:	52                   	push   edx
   16698:	50                   	push   eax
   16699:	68 b8 24 08 00       	push   0x824b8
   1669e:	e8 14 0a 01 00       	call   270b7 <printk>
   166a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:136
    if (!getDeviceHeader(&header, bus, device, function))
   166a6:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   166ad:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   166b4:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   166bb:	51                   	push   ecx
   166bc:	52                   	push   edx
   166bd:	50                   	push   eax
   166be:	8d 45 a8             	lea    eax,[ebp-0x58]
   166c1:	50                   	push   eax
   166c2:	e8 bd 02 00 00       	call   16984 <getDeviceHeader>
   166c7:	83 c4 10             	add    esp,0x10
   166ca:	83 f0 01             	xor    eax,0x1
   166cd:	84 c0                	test   al,al
   166cf:	74 15                	je     166e6 <pciQueryBDF+0x89>
/home/yogi/src/os/chrisOS/src/block/pci.c:138
    {
        printk("No device at that address\n");
   166d1:	83 ec 0c             	sub    esp,0xc
   166d4:	68 e8 24 08 00       	push   0x824e8
   166d9:	e8 d9 09 01 00       	call   270b7 <printk>
   166de:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:139
        return;
   166e1:	e9 83 00 00 00       	jmp    16769 <pciQueryBDF+0x10c>
/home/yogi/src/os/chrisOS/src/block/pci.c:141
    }
    if (header.vendor==0xFFFF)
   166e6:	0f b7 45 ae          	movzx  eax,WORD PTR [ebp-0x52]
   166ea:	66 83 f8 ff          	cmp    ax,0xffff
   166ee:	75 27                	jne    16717 <pciQueryBDF+0xba>
/home/yogi/src/os/chrisOS/src/block/pci.c:143
    {
        printk("Nothing found at %02X:%02X:%02X\n",bus,device,function);
   166f0:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   166f7:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   166fe:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   16705:	51                   	push   ecx
   16706:	52                   	push   edx
   16707:	50                   	push   eax
   16708:	68 04 25 08 00       	push   0x82504
   1670d:	e8 a5 09 01 00       	call   270b7 <printk>
   16712:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:144
        return;
   16715:	eb 52                	jmp    16769 <pciQueryBDF+0x10c>
/home/yogi/src/os/chrisOS/src/block/pci.c:146
    }
     if (header.class==0x06)
   16717:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
   1671a:	83 f8 06             	cmp    eax,0x6
   1671d:	75 3b                	jne    1675a <pciQueryBDF+0xfd>
/home/yogi/src/os/chrisOS/src/block/pci.c:148
     {
         getBridgeHeader(&bridge,bus,device,function);
   1671f:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   16726:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   1672d:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   16734:	51                   	push   ecx
   16735:	52                   	push   edx
   16736:	50                   	push   eax
   16737:	8d 85 5a ff ff ff    	lea    eax,[ebp-0xa6]
   1673d:	50                   	push   eax
   1673e:	e8 27 04 00 00       	call   16b6a <getBridgeHeader>
   16743:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:149
         printPCIBridgeHeader(&bridge);
   16746:	83 ec 0c             	sub    esp,0xc
   16749:	8d 85 5a ff ff ff    	lea    eax,[ebp-0xa6]
   1674f:	50                   	push   eax
   16750:	e8 5d 07 00 00       	call   16eb2 <printPCIBridgeHeader>
   16755:	83 c4 10             	add    esp,0x10
   16758:	eb 0f                	jmp    16769 <pciQueryBDF+0x10c>
/home/yogi/src/os/chrisOS/src/block/pci.c:152
     }
     else
         printPCIHeader(&header);
   1675a:	83 ec 0c             	sub    esp,0xc
   1675d:	8d 45 a8             	lea    eax,[ebp-0x58]
   16760:	50                   	push   eax
   16761:	e8 a1 09 00 00       	call   17107 <printPCIHeader>
   16766:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:153
 }
   16769:	c9                   	leave  
   1676a:	c3                   	ret    

0001676b <getVendorLongName>:
getVendorLongName():
/home/yogi/src/os/chrisOS/src/block/pci.c:162
    uint32_t subvendor, subdevice;  // Subsystem ID's or PCI_ANY_ID 
    uint32_t class, class_mask;     // (class,subclass,prog-if) triplet 
    unsigned long driver_data;      // Data private to the driver 
*/
void getVendorLongName(uint32_t vendorID, char* vendorLongName)
{
   1676b:	55                   	push   ebp
   1676c:	89 e5                	mov    ebp,esp
   1676e:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/pci.c:163
    for (unsigned cnt=0; cnt<PCI_VENTABLE_LEN;cnt++)
   16771:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   16778:	eb 49                	jmp    167c3 <getVendorLongName+0x58>
/home/yogi/src/os/chrisOS/src/block/pci.c:164
        if (PciVenTable[cnt].VenId == (uint16_t)vendorID)
   1677a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1677d:	89 d0                	mov    eax,edx
   1677f:	01 c0                	add    eax,eax
   16781:	01 d0                	add    eax,edx
   16783:	c1 e0 02             	shl    eax,0x2
   16786:	05 40 8a 02 00       	add    eax,0x28a40
   1678b:	0f b7 00             	movzx  eax,WORD PTR [eax]
   1678e:	0f b7 d0             	movzx  edx,ax
   16791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16794:	0f b7 c0             	movzx  eax,ax
   16797:	39 c2                	cmp    edx,eax
   16799:	75 24                	jne    167bf <getVendorLongName+0x54>
/home/yogi/src/os/chrisOS/src/block/pci.c:166
        {
            strcpy(vendorLongName, PciVenTable[cnt].VenFull);
   1679b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1679e:	89 d0                	mov    eax,edx
   167a0:	01 c0                	add    eax,eax
   167a2:	01 d0                	add    eax,edx
   167a4:	c1 e0 02             	shl    eax,0x2
   167a7:	05 48 8a 02 00       	add    eax,0x28a48
   167ac:	8b 00                	mov    eax,DWORD PTR [eax]
   167ae:	83 ec 08             	sub    esp,0x8
   167b1:	50                   	push   eax
   167b2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   167b5:	e8 5e 0a 01 00       	call   27218 <strcpy>
   167ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:167
            return;
   167bd:	eb 20                	jmp    167df <getVendorLongName+0x74>
/home/yogi/src/os/chrisOS/src/block/pci.c:163 (discriminator 2)
    uint32_t class, class_mask;     // (class,subclass,prog-if) triplet 
    unsigned long driver_data;      // Data private to the driver 
*/
void getVendorLongName(uint32_t vendorID, char* vendorLongName)
{
    for (unsigned cnt=0; cnt<PCI_VENTABLE_LEN;cnt++)
   167bf:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:163 (discriminator 1)
   167c3:	81 7d f4 20 06 00 00 	cmp    DWORD PTR [ebp-0xc],0x620
   167ca:	76 ae                	jbe    1677a <getVendorLongName+0xf>
/home/yogi/src/os/chrisOS/src/block/pci.c:169
        if (PciVenTable[cnt].VenId == (uint16_t)vendorID)
        {
            strcpy(vendorLongName, PciVenTable[cnt].VenFull);
            return;
        }
    strcpy(vendorLongName,"Not Found");
   167cc:	83 ec 08             	sub    esp,0x8
   167cf:	68 25 25 08 00       	push   0x82525
   167d4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   167d7:	e8 3c 0a 01 00       	call   27218 <strcpy>
   167dc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:170
}
   167df:	c9                   	leave  
   167e0:	c3                   	ret    

000167e1 <getDeviceName>:
getDeviceName():
/home/yogi/src/os/chrisOS/src/block/pci.c:173

void getDeviceName(uint32_t vendorID, uint32_t deviceID, char* deviceName)
{
   167e1:	55                   	push   ebp
   167e2:	89 e5                	mov    ebp,esp
   167e4:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/pci.c:174
    for (int cnt=0; cnt<7000;cnt++)
   167e7:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   167ee:	eb 60                	jmp    16850 <getDeviceName+0x6f>
/home/yogi/src/os/chrisOS/src/block/pci.c:175
        if (PciDevTable[cnt].VenId == vendorID && PciDevTable[cnt].DevId==deviceID)
   167f0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   167f3:	89 d0                	mov    eax,edx
   167f5:	01 c0                	add    eax,eax
   167f7:	01 d0                	add    eax,edx
   167f9:	c1 e0 02             	shl    eax,0x2
   167fc:	05 c0 da 02 00       	add    eax,0x2dac0
   16801:	0f b7 00             	movzx  eax,WORD PTR [eax]
   16804:	0f b7 c0             	movzx  eax,ax
   16807:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1680a:	75 40                	jne    1684c <getDeviceName+0x6b>
/home/yogi/src/os/chrisOS/src/block/pci.c:175 (discriminator 1)
   1680c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1680f:	89 d0                	mov    eax,edx
   16811:	01 c0                	add    eax,eax
   16813:	01 d0                	add    eax,edx
   16815:	c1 e0 02             	shl    eax,0x2
   16818:	05 c2 da 02 00       	add    eax,0x2dac2
   1681d:	0f b7 00             	movzx  eax,WORD PTR [eax]
   16820:	0f b7 c0             	movzx  eax,ax
   16823:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   16826:	75 24                	jne    1684c <getDeviceName+0x6b>
/home/yogi/src/os/chrisOS/src/block/pci.c:177
        {
            strcpy(deviceName, PciDevTable[cnt].ChipDesc);
   16828:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1682b:	89 d0                	mov    eax,edx
   1682d:	01 c0                	add    eax,eax
   1682f:	01 d0                	add    eax,edx
   16831:	c1 e0 02             	shl    eax,0x2
   16834:	05 c8 da 02 00       	add    eax,0x2dac8
   16839:	8b 00                	mov    eax,DWORD PTR [eax]
   1683b:	83 ec 08             	sub    esp,0x8
   1683e:	50                   	push   eax
   1683f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   16842:	e8 d1 09 01 00       	call   27218 <strcpy>
   16847:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:178
            return;
   1684a:	eb 20                	jmp    1686c <getDeviceName+0x8b>
/home/yogi/src/os/chrisOS/src/block/pci.c:174 (discriminator 2)
    strcpy(vendorLongName,"Not Found");
}

void getDeviceName(uint32_t vendorID, uint32_t deviceID, char* deviceName)
{
    for (int cnt=0; cnt<7000;cnt++)
   1684c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:174 (discriminator 1)
   16850:	81 7d f4 57 1b 00 00 	cmp    DWORD PTR [ebp-0xc],0x1b57
   16857:	7e 97                	jle    167f0 <getDeviceName+0xf>
/home/yogi/src/os/chrisOS/src/block/pci.c:180
        if (PciDevTable[cnt].VenId == vendorID && PciDevTable[cnt].DevId==deviceID)
        {
            strcpy(deviceName, PciDevTable[cnt].ChipDesc);
            return;
        }
    strcpy(deviceName,"Not Found");
   16859:	83 ec 08             	sub    esp,0x8
   1685c:	68 25 25 08 00       	push   0x82525
   16861:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   16864:	e8 af 09 01 00       	call   27218 <strcpy>
   16869:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:181
}
   1686c:	c9                   	leave  
   1686d:	c3                   	ret    

0001686e <getDeviceNameP>:
getDeviceNameP():
/home/yogi/src/os/chrisOS/src/block/pci.c:184

char* getDeviceNameP(struct pci_device_t* node, char* buffer)
{
   1686e:	55                   	push   ebp
   1686f:	89 e5                	mov    ebp,esp
   16871:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:185
    getDeviceName(node->vendor, node->device, buffer);
   16874:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16877:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   1687b:	0f b7 d0             	movzx  edx,ax
   1687e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16881:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   16885:	0f b7 c0             	movzx  eax,ax
   16888:	83 ec 04             	sub    esp,0x4
   1688b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1688e:	52                   	push   edx
   1688f:	50                   	push   eax
   16890:	e8 4c ff ff ff       	call   167e1 <getDeviceName>
   16895:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:186
    return buffer;
   16898:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/block/pci.c:187
}
   1689b:	c9                   	leave  
   1689c:	c3                   	ret    

0001689d <getClass>:
getClass():
/home/yogi/src/os/chrisOS/src/block/pci.c:190

void getClass(uint8_t class, uint8_t subClass, char BaseDesc[], char SubDesc[] , char ProgDesc[])
{
   1689d:	55                   	push   ebp
   1689e:	89 e5                	mov    ebp,esp
   168a0:	83 ec 28             	sub    esp,0x28
   168a3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   168a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   168a9:	88 55 e4             	mov    BYTE PTR [ebp-0x1c],dl
   168ac:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
/home/yogi/src/os/chrisOS/src/block/pci.c:192
    static char notFound[50] = "Not found\0";
    for (unsigned cnt=0;cnt<PCI_DEVTABLE_LEN;cnt++)
   168af:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   168b6:	e9 80 00 00 00       	jmp    1693b <getClass+0x9e>
/home/yogi/src/os/chrisOS/src/block/pci.c:194
    {
        if (PciClassCodeTable[cnt].BaseClass==class && PciClassCodeTable[cnt].SubClass==subClass /*&& PciClassCodeTable[cnt].ProgIf==prog*/ )
   168bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   168be:	c1 e0 04             	shl    eax,0x4
   168c1:	05 e0 d3 02 00       	add    eax,0x2d3e0
   168c6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   168c9:	3a 45 e4             	cmp    al,BYTE PTR [ebp-0x1c]
   168cc:	75 69                	jne    16937 <getClass+0x9a>
/home/yogi/src/os/chrisOS/src/block/pci.c:194 (discriminator 1)
   168ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   168d1:	c1 e0 04             	shl    eax,0x4
   168d4:	05 e1 d3 02 00       	add    eax,0x2d3e1
   168d9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   168dc:	3a 45 e0             	cmp    al,BYTE PTR [ebp-0x20]
   168df:	75 56                	jne    16937 <getClass+0x9a>
/home/yogi/src/os/chrisOS/src/block/pci.c:196
        {
            strcpy(BaseDesc,PciClassCodeTable[cnt].BaseDesc);
   168e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   168e4:	c1 e0 04             	shl    eax,0x4
   168e7:	05 e4 d3 02 00       	add    eax,0x2d3e4
   168ec:	8b 00                	mov    eax,DWORD PTR [eax]
   168ee:	83 ec 08             	sub    esp,0x8
   168f1:	50                   	push   eax
   168f2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   168f5:	e8 1e 09 01 00       	call   27218 <strcpy>
   168fa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:197
            strcpy(SubDesc,PciClassCodeTable[cnt].SubDesc);
   168fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16900:	c1 e0 04             	shl    eax,0x4
   16903:	05 e8 d3 02 00       	add    eax,0x2d3e8
   16908:	8b 00                	mov    eax,DWORD PTR [eax]
   1690a:	83 ec 08             	sub    esp,0x8
   1690d:	50                   	push   eax
   1690e:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   16911:	e8 02 09 01 00       	call   27218 <strcpy>
   16916:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:198
            strcpy(ProgDesc,PciClassCodeTable[cnt].ProgDesc);
   16919:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1691c:	c1 e0 04             	shl    eax,0x4
   1691f:	05 ec d3 02 00       	add    eax,0x2d3ec
   16924:	8b 00                	mov    eax,DWORD PTR [eax]
   16926:	83 ec 08             	sub    esp,0x8
   16929:	50                   	push   eax
   1692a:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   1692d:	e8 e6 08 01 00       	call   27218 <strcpy>
   16932:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:199
            return;
   16935:	eb 4b                	jmp    16982 <getClass+0xe5>
/home/yogi/src/os/chrisOS/src/block/pci.c:192 (discriminator 2)
}

void getClass(uint8_t class, uint8_t subClass, char BaseDesc[], char SubDesc[] , char ProgDesc[])
{
    static char notFound[50] = "Not found\0";
    for (unsigned cnt=0;cnt<PCI_DEVTABLE_LEN;cnt++)
   16937:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:192 (discriminator 1)
   1693b:	81 7d f4 28 1e 00 00 	cmp    DWORD PTR [ebp-0xc],0x1e28
   16942:	0f 86 73 ff ff ff    	jbe    168bb <getClass+0x1e>
/home/yogi/src/os/chrisOS/src/block/pci.c:202
            strcpy(SubDesc,PciClassCodeTable[cnt].SubDesc);
            strcpy(ProgDesc,PciClassCodeTable[cnt].ProgDesc);
            return;
        }
    }
    strcpy(BaseDesc,notFound);
   16948:	83 ec 08             	sub    esp,0x8
   1694b:	68 20 d9 02 00       	push   0x2d920
   16950:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   16953:	e8 c0 08 01 00       	call   27218 <strcpy>
   16958:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:203
    strcpy(SubDesc,notFound);
   1695b:	83 ec 08             	sub    esp,0x8
   1695e:	68 20 d9 02 00       	push   0x2d920
   16963:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   16966:	e8 ad 08 01 00       	call   27218 <strcpy>
   1696b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:204
    strcpy(ProgDesc,notFound);
   1696e:	83 ec 08             	sub    esp,0x8
   16971:	68 20 d9 02 00       	push   0x2d920
   16976:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   16979:	e8 9a 08 01 00       	call   27218 <strcpy>
   1697e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:205
    return;
   16981:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/pci.c:206
}
   16982:	c9                   	leave  
   16983:	c3                   	ret    

00016984 <getDeviceHeader>:
getDeviceHeader():
/home/yogi/src/os/chrisOS/src/block/pci.c:209

bool getDeviceHeader(struct pci_device_t* node, uint8_t bus, uint8_t slot, uint8_t func)
{
   16984:	55                   	push   ebp
   16985:	89 e5                	mov    ebp,esp
   16987:	53                   	push   ebx
   16988:	83 ec 24             	sub    esp,0x24
   1698b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   1698e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   16991:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   16994:	88 4d e4             	mov    BYTE PTR [ebp-0x1c],cl
   16997:	88 55 e0             	mov    BYTE PTR [ebp-0x20],dl
   1699a:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
/home/yogi/src/os/chrisOS/src/block/pci.c:212
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building device header for %u:%u:%u\n",bus,slot,func);
   1699d:	0f b6 4d dc          	movzx  ecx,BYTE PTR [ebp-0x24]
   169a1:	0f b6 55 e0          	movzx  edx,BYTE PTR [ebp-0x20]
   169a5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   169a9:	83 ec 0c             	sub    esp,0xc
   169ac:	51                   	push   ecx
   169ad:	52                   	push   edx
   169ae:	50                   	push   eax
   169af:	68 30 25 08 00       	push   0x82530
   169b4:	68 00 01 00 00       	push   0x100
   169b9:	e8 19 07 01 00       	call   270d7 <printd>
   169be:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:214
    //Get the entire header
    for (int cnt=0;cnt<16;cnt++)
   169c1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   169c8:	e9 6c 01 00 00       	jmp    16b39 <getDeviceHeader+0x1b5>
/home/yogi/src/os/chrisOS/src/block/pci.c:216
    {
        value=pciConfigReadDWord(bus, slot, func, cnt*4);
   169cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   169d0:	c1 e0 02             	shl    eax,0x2
   169d3:	0f b6 d8             	movzx  ebx,al
   169d6:	0f b6 4d dc          	movzx  ecx,BYTE PTR [ebp-0x24]
   169da:	0f b6 55 e0          	movzx  edx,BYTE PTR [ebp-0x20]
   169de:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   169e2:	53                   	push   ebx
   169e3:	51                   	push   ecx
   169e4:	52                   	push   edx
   169e5:	50                   	push   eax
   169e6:	e8 eb fb ff ff       	call   165d6 <pciConfigReadDWord>
   169eb:	83 c4 10             	add    esp,0x10
   169ee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:217
        if (value==0xFFFFFFFF)
   169f1:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   169f5:	75 0a                	jne    16a01 <getDeviceHeader+0x7d>
/home/yogi/src/os/chrisOS/src/block/pci.c:218
            return false;
   169f7:	b8 00 00 00 00       	mov    eax,0x0
   169fc:	e9 64 01 00 00       	jmp    16b65 <getDeviceHeader+0x1e1>
/home/yogi/src/os/chrisOS/src/block/pci.c:219
        switch(cnt)
   16a01:	83 7d f4 0f          	cmp    DWORD PTR [ebp-0xc],0xf
   16a05:	0f 87 2a 01 00 00    	ja     16b35 <getDeviceHeader+0x1b1>
   16a0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16a0e:	c1 e0 02             	shl    eax,0x2
   16a11:	05 58 25 08 00       	add    eax,0x82558
   16a16:	8b 00                	mov    eax,DWORD PTR [eax]
   16a18:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/block/pci.c:222
        {
            case 0:
                node->vendor=value;
   16a1a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16a1d:	89 c2                	mov    edx,eax
   16a1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16a22:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:223
                node->device=value >> 16;
   16a26:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16a29:	c1 e8 10             	shr    eax,0x10
   16a2c:	89 c2                	mov    edx,eax
   16a2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16a31:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:224
                break;
   16a35:	e9 fb 00 00 00       	jmp    16b35 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:226
            case 1:
                node->command=value&0xFFFF;
   16a3a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16a3d:	89 c2                	mov    edx,eax
   16a3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16a42:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:227
                node->status=value>>16&0xFFFF;
   16a46:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16a49:	c1 e8 10             	shr    eax,0x10
   16a4c:	89 c2                	mov    edx,eax
   16a4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16a51:	66 89 50 4a          	mov    WORD PTR [eax+0x4a],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:228
                break;
   16a55:	e9 db 00 00 00       	jmp    16b35 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:230
            case 2:
                node->class=value >> 24;
   16a5a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16a5d:	c1 e8 18             	shr    eax,0x18
   16a60:	89 c2                	mov    edx,eax
   16a62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16a65:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:231
                node->subClass=(value & 0x00FF0000) >> 16;
   16a68:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16a6b:	25 00 00 ff 00       	and    eax,0xff0000
   16a70:	c1 e8 10             	shr    eax,0x10
   16a73:	89 c2                	mov    edx,eax
   16a75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16a78:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:232
                node->prog=(value & 0x0000FF00) >> 8;
   16a7b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16a7e:	25 00 ff 00 00       	and    eax,0xff00
   16a83:	c1 e8 08             	shr    eax,0x8
   16a86:	89 c2                	mov    edx,eax
   16a88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16a8b:	88 50 18             	mov    BYTE PTR [eax+0x18],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:233
                break;
   16a8e:	e9 a2 00 00 00       	jmp    16b35 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:235
            case 3:
                node->headerType=(value >> 16) & 0x7f;
   16a93:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16a96:	c1 e8 10             	shr    eax,0x10
   16a99:	83 e0 7f             	and    eax,0x7f
   16a9c:	89 c2                	mov    edx,eax
   16a9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16aa1:	88 50 03             	mov    BYTE PTR [eax+0x3],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:236
                node->multiFunction=(value & 0x00800000)==0x00800000;
   16aa4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16aa7:	25 00 00 80 00       	and    eax,0x800000
   16aac:	85 c0                	test   eax,eax
   16aae:	0f 95 c2             	setne  dl
   16ab1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ab4:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:237
                node->cacheSize=value&0xFF;
   16ab7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16aba:	89 c2                	mov    edx,eax
   16abc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16abf:	88 50 41             	mov    BYTE PTR [eax+0x41],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:238
                node->latencyTimer=value>>8;
   16ac2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16ac5:	c1 e8 08             	shr    eax,0x8
   16ac8:	89 c2                	mov    edx,eax
   16aca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16acd:	88 50 40             	mov    BYTE PTR [eax+0x40],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:239
                break;
   16ad0:	eb 63                	jmp    16b35 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:241
            case 4: case 5: case 6: case 7: case 8: case 9:
                node->baseAdd[cnt+1-5]=value;
   16ad2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16ad5:	8d 50 fc             	lea    edx,[eax-0x4]
   16ad8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16adb:	8d 4a 08             	lea    ecx,[edx+0x8]
   16ade:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   16ae1:	89 14 88             	mov    DWORD PTR [eax+ecx*4],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:242
                break;
   16ae4:	eb 4f                	jmp    16b35 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:244
            case 11:
                node->subdevice=value >> 16;
   16ae6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16ae9:	c1 e8 10             	shr    eax,0x10
   16aec:	89 c2                	mov    edx,eax
   16aee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16af1:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:245
                node->subvendor=value & 0xFFFF;
   16af5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16af8:	89 c2                	mov    edx,eax
   16afa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16afd:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:246
                break;
   16b01:	eb 32                	jmp    16b35 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:248
            case 12:
                node->expROMAddress=value;
   16b03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b06:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   16b09:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:249
                break;
   16b0c:	eb 27                	jmp    16b35 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:251
            case 13:
                node->caps = value & 0xFF;
   16b0e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16b11:	89 c2                	mov    edx,eax
   16b13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b16:	88 50 3c             	mov    BYTE PTR [eax+0x3c],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:252
                break;
   16b19:	eb 1a                	jmp    16b35 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:254
            case 15:
                node->interrupt_line=value&0xFF;
   16b1b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16b1e:	89 c2                	mov    edx,eax
   16b20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b23:	88 50 3d             	mov    BYTE PTR [eax+0x3d],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:255
                node->interrupt_pin=(value >> 8)&0xFF;
   16b26:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16b29:	c1 e8 08             	shr    eax,0x8
   16b2c:	89 c2                	mov    edx,eax
   16b2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b31:	88 50 3e             	mov    BYTE PTR [eax+0x3e],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:256
                break;
   16b34:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/pci.c:214 (discriminator 2)
{
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building device header for %u:%u:%u\n",bus,slot,func);
    //Get the entire header
    for (int cnt=0;cnt<16;cnt++)
   16b35:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:214 (discriminator 1)
   16b39:	83 7d f4 0f          	cmp    DWORD PTR [ebp-0xc],0xf
   16b3d:	0f 8e 8a fe ff ff    	jle    169cd <getDeviceHeader+0x49>
/home/yogi/src/os/chrisOS/src/block/pci.c:259
                node->interrupt_line=value&0xFF;
                node->interrupt_pin=(value >> 8)&0xFF;
                break;
        }
    }
    node->busNo=bus;
   16b43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b46:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
   16b4a:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:260
    node->deviceNo=slot;
   16b4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b4f:	0f b6 55 e0          	movzx  edx,BYTE PTR [ebp-0x20]
   16b53:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:261
    node->funcNo=func;
   16b56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b59:	0f b6 55 dc          	movzx  edx,BYTE PTR [ebp-0x24]
   16b5d:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:262
    return true;
   16b60:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:263
}
   16b65:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   16b68:	c9                   	leave  
   16b69:	c3                   	ret    

00016b6a <getBridgeHeader>:
getBridgeHeader():
/home/yogi/src/os/chrisOS/src/block/pci.c:266

bool getBridgeHeader(struct pci_bridge_t* node, uint8_t bus, uint8_t slot, uint8_t func)
{
   16b6a:	55                   	push   ebp
   16b6b:	89 e5                	mov    ebp,esp
   16b6d:	57                   	push   edi
   16b6e:	56                   	push   esi
   16b6f:	53                   	push   ebx
   16b70:	83 ec 4c             	sub    esp,0x4c
   16b73:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   16b76:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   16b79:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   16b7c:	88 4d d4             	mov    BYTE PTR [ebp-0x2c],cl
   16b7f:	88 55 d0             	mov    BYTE PTR [ebp-0x30],dl
   16b82:	88 45 cc             	mov    BYTE PTR [ebp-0x34],al
/home/yogi/src/os/chrisOS/src/block/pci.c:269
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building bridge header for %u:%u:%u\n",bus,slot,func);
   16b85:	0f b6 4d cc          	movzx  ecx,BYTE PTR [ebp-0x34]
   16b89:	0f b6 55 d0          	movzx  edx,BYTE PTR [ebp-0x30]
   16b8d:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   16b91:	83 ec 0c             	sub    esp,0xc
   16b94:	51                   	push   ecx
   16b95:	52                   	push   edx
   16b96:	50                   	push   eax
   16b97:	68 98 25 08 00       	push   0x82598
   16b9c:	68 00 01 00 00       	push   0x100
   16ba1:	e8 31 05 01 00       	call   270d7 <printd>
   16ba6:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:271
    //Get the entire header
    for (int cnt=0;cnt<14;cnt++)
   16ba9:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   16bb0:	e9 c9 02 00 00       	jmp    16e7e <getBridgeHeader+0x314>
/home/yogi/src/os/chrisOS/src/block/pci.c:273
    {
        value=pciConfigReadDWord(bus, slot, func, cnt*4);
   16bb5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   16bb8:	c1 e0 02             	shl    eax,0x2
   16bbb:	0f b6 d8             	movzx  ebx,al
   16bbe:	0f b6 4d cc          	movzx  ecx,BYTE PTR [ebp-0x34]
   16bc2:	0f b6 55 d0          	movzx  edx,BYTE PTR [ebp-0x30]
   16bc6:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   16bca:	53                   	push   ebx
   16bcb:	51                   	push   ecx
   16bcc:	52                   	push   edx
   16bcd:	50                   	push   eax
   16bce:	e8 03 fa ff ff       	call   165d6 <pciConfigReadDWord>
   16bd3:	83 c4 10             	add    esp,0x10
   16bd6:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:274
        if (value==0xFFFFFFFF)
   16bd9:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
   16bdd:	75 0a                	jne    16be9 <getBridgeHeader+0x7f>
/home/yogi/src/os/chrisOS/src/block/pci.c:275
            return false;
   16bdf:	b8 00 00 00 00       	mov    eax,0x0
   16be4:	e9 c1 02 00 00       	jmp    16eaa <getBridgeHeader+0x340>
/home/yogi/src/os/chrisOS/src/block/pci.c:276
        switch(cnt)
   16be9:	83 7d e4 0f          	cmp    DWORD PTR [ebp-0x1c],0xf
   16bed:	0f 87 87 02 00 00    	ja     16e7a <getBridgeHeader+0x310>
   16bf3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   16bf6:	c1 e0 02             	shl    eax,0x2
   16bf9:	05 c0 25 08 00       	add    eax,0x825c0
   16bfe:	8b 00                	mov    eax,DWORD PTR [eax]
   16c00:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/block/pci.c:279
        {
            case 0:
                node->vendor=value;
   16c02:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16c05:	89 c2                	mov    edx,eax
   16c07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16c0a:	66 89 50 05          	mov    WORD PTR [eax+0x5],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:280
                node->device=value >> 16;
   16c0e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16c11:	c1 e8 10             	shr    eax,0x10
   16c14:	89 c2                	mov    edx,eax
   16c16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16c19:	66 89 50 07          	mov    WORD PTR [eax+0x7],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:281
                break;
   16c1d:	e9 58 02 00 00       	jmp    16e7a <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:283
            case 1:
                node->command=value&0xFFFF;
   16c22:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16c25:	89 c2                	mov    edx,eax
   16c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16c2a:	66 89 50 3a          	mov    WORD PTR [eax+0x3a],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:284
                node->status=value>>16&0xFFFF;
   16c2e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16c31:	c1 e8 10             	shr    eax,0x10
   16c34:	89 c2                	mov    edx,eax
   16c36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16c39:	66 89 50 38          	mov    WORD PTR [eax+0x38],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:285
                break;
   16c3d:	e9 38 02 00 00       	jmp    16e7a <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:287
            case 2:
                node->class=value >> 24;
   16c42:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16c45:	c1 e8 18             	shr    eax,0x18
   16c48:	89 c2                	mov    edx,eax
   16c4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16c4d:	89 50 09             	mov    DWORD PTR [eax+0x9],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:288
                node->subClass=(value & 0x00FF0000) >> 16;
   16c50:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16c53:	25 00 00 ff 00       	and    eax,0xff0000
   16c58:	c1 e8 10             	shr    eax,0x10
   16c5b:	89 c2                	mov    edx,eax
   16c5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16c60:	89 50 0d             	mov    DWORD PTR [eax+0xd],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:289
                node->prog=(value & 0x0000FF00) >> 8;
   16c63:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16c66:	25 00 ff 00 00       	and    eax,0xff00
   16c6b:	c1 e8 08             	shr    eax,0x8
   16c6e:	89 c2                	mov    edx,eax
   16c70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16c73:	88 50 11             	mov    BYTE PTR [eax+0x11],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:290
                break;
   16c76:	e9 ff 01 00 00       	jmp    16e7a <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:292
            case 3:
                node->headerType=(value >> 16) & 0x7f;
   16c7b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16c7e:	c1 e8 10             	shr    eax,0x10
   16c81:	83 e0 7f             	and    eax,0x7f
   16c84:	89 c2                	mov    edx,eax
   16c86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16c89:	88 50 03             	mov    BYTE PTR [eax+0x3],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:293
                node->multiFunction=(value & 0x00800000)==0x00800000;
   16c8c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16c8f:	25 00 00 80 00       	and    eax,0x800000
   16c94:	85 c0                	test   eax,eax
   16c96:	0f 95 c2             	setne  dl
   16c99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16c9c:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:294
                node->cacheSize=value&0xFF;
   16c9f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16ca2:	89 c2                	mov    edx,eax
   16ca4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ca7:	88 50 2e             	mov    BYTE PTR [eax+0x2e],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:295
                node->latencyTimer=value>>8;
   16caa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16cad:	c1 e8 08             	shr    eax,0x8
   16cb0:	89 c2                	mov    edx,eax
   16cb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16cb5:	88 50 2d             	mov    BYTE PTR [eax+0x2d],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:296
                break;
   16cb8:	e9 bd 01 00 00       	jmp    16e7a <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:298
            case 4: 
                node->baseAdd[0]=value;
   16cbd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   16cc0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16cc3:	89 42 12             	mov    DWORD PTR [edx+0x12],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:299
                break;
   16cc6:	e9 af 01 00 00       	jmp    16e7a <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:301
            case 5:
                node->baseAdd[1]=value;
   16ccb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   16cce:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16cd1:	89 42 16             	mov    DWORD PTR [edx+0x16],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:302
                break;
   16cd4:	e9 a1 01 00 00       	jmp    16e7a <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:304
            case 6:
                node->secLatencyTimer=(value>>24);
   16cd9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16cdc:	c1 e8 18             	shr    eax,0x18
   16cdf:	89 c2                	mov    edx,eax
   16ce1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ce4:	88 50 31             	mov    BYTE PTR [eax+0x31],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:305
                node->subordinateBusNum=(value>>16) & 0xFF;
   16ce7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16cea:	c1 e8 10             	shr    eax,0x10
   16ced:	89 c2                	mov    edx,eax
   16cef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16cf2:	88 50 28             	mov    BYTE PTR [eax+0x28],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:306
                node->secondaryBusNum=(value >> 8) & 0xFF;
   16cf5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16cf8:	c1 e8 08             	shr    eax,0x8
   16cfb:	89 c2                	mov    edx,eax
   16cfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d00:	88 50 26             	mov    BYTE PTR [eax+0x26],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:307
                node->primaryBusNum=value & 0xFF;
   16d03:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d06:	89 c2                	mov    edx,eax
   16d08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d0b:	88 50 27             	mov    BYTE PTR [eax+0x27],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:309
                //printk("pr:se:su %02X:%02X:%02X\n", node->primaryBusNum, node->secondaryBusNum, node->subordinateBusNum);
                break;
   16d0e:	e9 67 01 00 00       	jmp    16e7a <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:311
            case 7:
                node->secStatus=(value>>16);
   16d13:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d16:	c1 e8 10             	shr    eax,0x10
   16d19:	89 c2                	mov    edx,eax
   16d1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d1e:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:312
                node->ioLimit=(value>>8)&0xFF;
   16d22:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d25:	c1 e8 08             	shr    eax,0x8
   16d28:	0f b6 d0             	movzx  edx,al
   16d2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d2e:	89 50 1e             	mov    DWORD PTR [eax+0x1e],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:313
                node->ioBase=value&0xFF;
   16d31:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d34:	0f b6 d0             	movzx  edx,al
   16d37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d3a:	89 50 22             	mov    DWORD PTR [eax+0x22],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:314
                break;
   16d3d:	e9 38 01 00 00       	jmp    16e7a <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:316
            case 8:
                node->memoryLimit=value>>16;
   16d42:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d45:	c1 e8 10             	shr    eax,0x10
   16d48:	89 c2                	mov    edx,eax
   16d4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d4d:	66 89 50 36          	mov    WORD PTR [eax+0x36],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:317
                node->memoryBase=value;
   16d51:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d54:	89 c2                	mov    edx,eax
   16d56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d59:	66 89 50 34          	mov    WORD PTR [eax+0x34],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:318
                break;
   16d5d:	e9 18 01 00 00       	jmp    16e7a <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:320
            case 9:
                node->prefMemLimit=value>>16;
   16d62:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d65:	c1 e8 10             	shr    eax,0x10
   16d68:	ba 00 00 00 00       	mov    edx,0x0
   16d6d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   16d70:	89 41 3e             	mov    DWORD PTR [ecx+0x3e],eax
   16d73:	89 51 42             	mov    DWORD PTR [ecx+0x42],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:321
                node->prefMemBase=value&0xFFFF;
   16d76:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d79:	ba 00 00 00 00       	mov    edx,0x0
   16d7e:	0f b7 d8             	movzx  ebx,ax
   16d81:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
   16d84:	89 d0                	mov    eax,edx
   16d86:	83 e0 00             	and    eax,0x0
   16d89:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
   16d8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d8f:	8b 5d c0             	mov    ebx,DWORD PTR [ebp-0x40]
   16d92:	8b 75 c4             	mov    esi,DWORD PTR [ebp-0x3c]
   16d95:	89 58 46             	mov    DWORD PTR [eax+0x46],ebx
   16d98:	89 70 4a             	mov    DWORD PTR [eax+0x4a],esi
/home/yogi/src/os/chrisOS/src/block/pci.c:322
                break;
   16d9b:	e9 da 00 00 00       	jmp    16e7a <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:324
            case 10:
                node->prefMemLimit|=value<<16;
   16da0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16da3:	8b 48 3e             	mov    ecx,DWORD PTR [eax+0x3e]
   16da6:	8b 58 42             	mov    ebx,DWORD PTR [eax+0x42]
   16da9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16dac:	c1 e0 10             	shl    eax,0x10
   16daf:	ba 00 00 00 00       	mov    edx,0x0
   16db4:	89 cf                	mov    edi,ecx
   16db6:	09 c7                	or     edi,eax
   16db8:	89 7d b8             	mov    DWORD PTR [ebp-0x48],edi
   16dbb:	89 de                	mov    esi,ebx
   16dbd:	09 d6                	or     esi,edx
   16dbf:	89 75 bc             	mov    DWORD PTR [ebp-0x44],esi
   16dc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16dc5:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
   16dc8:	8b 5d bc             	mov    ebx,DWORD PTR [ebp-0x44]
   16dcb:	89 48 3e             	mov    DWORD PTR [eax+0x3e],ecx
   16dce:	89 58 42             	mov    DWORD PTR [eax+0x42],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:325
                break;
   16dd1:	e9 a4 00 00 00       	jmp    16e7a <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:327
            case 11:
                node->prefMemBase|=value<<16;
   16dd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16dd9:	8b 48 46             	mov    ecx,DWORD PTR [eax+0x46]
   16ddc:	8b 58 4a             	mov    ebx,DWORD PTR [eax+0x4a]
   16ddf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16de2:	c1 e0 10             	shl    eax,0x10
   16de5:	ba 00 00 00 00       	mov    edx,0x0
   16dea:	89 cf                	mov    edi,ecx
   16dec:	09 c7                	or     edi,eax
   16dee:	89 7d b0             	mov    DWORD PTR [ebp-0x50],edi
   16df1:	89 de                	mov    esi,ebx
   16df3:	09 d6                	or     esi,edx
   16df5:	89 75 b4             	mov    DWORD PTR [ebp-0x4c],esi
   16df8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16dfb:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
   16dfe:	8b 5d b4             	mov    ebx,DWORD PTR [ebp-0x4c]
   16e01:	89 48 46             	mov    DWORD PTR [eax+0x46],ecx
   16e04:	89 58 4a             	mov    DWORD PTR [eax+0x4a],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:328
                break;
   16e07:	eb 71                	jmp    16e7a <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:330
            case 12:
                node->ioLimit|=(value&0xFFFF0000)>>8;
   16e09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e0c:	8b 50 1e             	mov    edx,DWORD PTR [eax+0x1e]
   16e0f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16e12:	66 b8 00 00          	mov    ax,0x0
   16e16:	c1 e8 08             	shr    eax,0x8
   16e19:	09 c2                	or     edx,eax
   16e1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e1e:	89 50 1e             	mov    DWORD PTR [eax+0x1e],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:331
                node->ioBase|=value&0xFFFF<<8;
   16e21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e24:	8b 50 22             	mov    edx,DWORD PTR [eax+0x22]
   16e27:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16e2a:	25 00 ff ff 00       	and    eax,0xffff00
   16e2f:	09 c2                	or     edx,eax
   16e31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e34:	89 50 22             	mov    DWORD PTR [eax+0x22],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:332
                break;
   16e37:	eb 41                	jmp    16e7a <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:334
            case 13:
                node->caps = value & 0xFF;
   16e39:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16e3c:	89 c2                	mov    edx,eax
   16e3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e41:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:335
                break;
   16e44:	eb 34                	jmp    16e7a <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:337
            case 14:
                node->expROMAddress=value;
   16e46:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   16e49:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16e4c:	89 42 1a             	mov    DWORD PTR [edx+0x1a],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:338
                break;
   16e4f:	eb 29                	jmp    16e7a <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:340
            case 15:
                node->interrupt_line=value&0xFF;
   16e51:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16e54:	89 c2                	mov    edx,eax
   16e56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e59:	88 50 2a             	mov    BYTE PTR [eax+0x2a],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:341
                node->interrupt_pin=(value >> 8)&0xFF;
   16e5c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16e5f:	c1 e8 08             	shr    eax,0x8
   16e62:	89 c2                	mov    edx,eax
   16e64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e67:	88 50 2b             	mov    BYTE PTR [eax+0x2b],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:342
                node->bridgeControl=(value>>16)&0xFFFF;
   16e6a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16e6d:	c1 e8 10             	shr    eax,0x10
   16e70:	89 c2                	mov    edx,eax
   16e72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e75:	66 89 50 32          	mov    WORD PTR [eax+0x32],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:343
                break;
   16e79:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/pci.c:271 (discriminator 2)
{
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building bridge header for %u:%u:%u\n",bus,slot,func);
    //Get the entire header
    for (int cnt=0;cnt<14;cnt++)
   16e7a:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:271 (discriminator 1)
   16e7e:	83 7d e4 0d          	cmp    DWORD PTR [ebp-0x1c],0xd
   16e82:	0f 8e 2d fd ff ff    	jle    16bb5 <getBridgeHeader+0x4b>
/home/yogi/src/os/chrisOS/src/block/pci.c:347
                node->bridgeControl=(value>>16)&0xFFFF;
                break;

        }
    }
    node->busNo=bus;
   16e88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e8b:	0f b6 55 d4          	movzx  edx,BYTE PTR [ebp-0x2c]
   16e8f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:348
    node->deviceNo=slot;
   16e91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e94:	0f b6 55 d0          	movzx  edx,BYTE PTR [ebp-0x30]
   16e98:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:349
    node->funcNo=func;
   16e9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e9e:	0f b6 55 cc          	movzx  edx,BYTE PTR [ebp-0x34]
   16ea2:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:350
    return true;
   16ea5:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:351
}
   16eaa:	8d 65 f4             	lea    esp,[ebp-0xc]
   16ead:	5b                   	pop    ebx
   16eae:	5e                   	pop    esi
   16eaf:	5f                   	pop    edi
   16eb0:	5d                   	pop    ebp
   16eb1:	c3                   	ret    

00016eb2 <printPCIBridgeHeader>:
printPCIBridgeHeader():
/home/yogi/src/os/chrisOS/src/block/pci.c:353
void printPCIBridgeHeader(struct pci_bridge_t* node)
{          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
   16eb2:	55                   	push   ebp
   16eb3:	89 e5                	mov    ebp,esp
   16eb5:	57                   	push   edi
   16eb6:	56                   	push   esi
   16eb7:	53                   	push   ebx
   16eb8:	81 ec ac 06 00 00    	sub    esp,0x6ac
/home/yogi/src/os/chrisOS/src/block/pci.c:356
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
   16ebe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ec1:	8b 40 0d             	mov    eax,DWORD PTR [eax+0xd]
   16ec4:	0f b6 d0             	movzx  edx,al
   16ec7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16eca:	8b 40 09             	mov    eax,DWORD PTR [eax+0x9]
   16ecd:	0f b6 c0             	movzx  eax,al
   16ed0:	83 ec 0c             	sub    esp,0xc
   16ed3:	8d 8d 08 fa ff ff    	lea    ecx,[ebp-0x5f8]
   16ed9:	51                   	push   ecx
   16eda:	8d 8d fc fb ff ff    	lea    ecx,[ebp-0x404]
   16ee0:	51                   	push   ecx
   16ee1:	8d 8d f0 fd ff ff    	lea    ecx,[ebp-0x210]
   16ee7:	51                   	push   ecx
   16ee8:	52                   	push   edx
   16ee9:	50                   	push   eax
   16eea:	e8 ae f9 ff ff       	call   1689d <getClass>
   16eef:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:357
    printk("Bridge:\n");
   16ef2:	83 ec 0c             	sub    esp,0xc
   16ef5:	68 00 26 08 00       	push   0x82600
   16efa:	e8 b8 01 01 00       	call   270b7 <printk>
   16eff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:358
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
   16f02:	83 ec 0c             	sub    esp,0xc
   16f05:	68 e8 23 08 00       	push   0x823e8
   16f0a:	e8 a8 01 01 00       	call   270b7 <printk>
   16f0f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:364
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   16f12:	a1 b8 02 12 00       	mov    eax,ds:0x1202b8
   16f17:	0f b6 40 26          	movzx  eax,BYTE PTR [eax+0x26]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16f1b:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/block/pci.c:364
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   16f1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f21:	0f b6 40 27          	movzx  eax,BYTE PTR [eax+0x27]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16f25:	0f b6 c0             	movzx  eax,al
   16f28:	89 85 64 f9 ff ff    	mov    DWORD PTR [ebp-0x69c],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:364
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   16f2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f31:	0f b6 40 28          	movzx  eax,BYTE PTR [eax+0x28]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16f35:	0f b6 d8             	movzx  ebx,al
   16f38:	89 9d 60 f9 ff ff    	mov    DWORD PTR [ebp-0x6a0],ebx
   16f3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f41:	8b 70 0d             	mov    esi,DWORD PTR [eax+0xd]
   16f44:	89 b5 5c f9 ff ff    	mov    DWORD PTR [ebp-0x6a4],esi
   16f4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f4d:	8b 48 09             	mov    ecx,DWORD PTR [eax+0x9]
   16f50:	89 8d 58 f9 ff ff    	mov    DWORD PTR [ebp-0x6a8],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:362
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
   16f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f59:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16f5d:	0f b7 d0             	movzx  edx,ax
   16f60:	89 95 54 f9 ff ff    	mov    DWORD PTR [ebp-0x6ac],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:362
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
   16f66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f69:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16f6d:	0f b7 c0             	movzx  eax,ax
   16f70:	89 85 50 f9 ff ff    	mov    DWORD PTR [ebp-0x6b0],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:361
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
   16f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f79:	0f b6 40 2b          	movzx  eax,BYTE PTR [eax+0x2b]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16f7d:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/block/pci.c:361
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
   16f80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f83:	0f b6 40 2a          	movzx  eax,BYTE PTR [eax+0x2a]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16f87:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:360
            node->busNo, node->deviceNo, node->funcNo, 
   16f8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f8d:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16f91:	0f b6 c8             	movzx  ecx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:360
            node->busNo, node->deviceNo, node->funcNo, 
   16f94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f97:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16f9b:	0f b6 d0             	movzx  edx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:360
            node->busNo, node->deviceNo, node->funcNo, 
   16f9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16fa1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16fa4:	0f b6 c0             	movzx  eax,al
   16fa7:	83 ec 0c             	sub    esp,0xc
   16faa:	57                   	push   edi
   16fab:	ff b5 64 f9 ff ff    	push   DWORD PTR [ebp-0x69c]
   16fb1:	ff b5 60 f9 ff ff    	push   DWORD PTR [ebp-0x6a0]
   16fb7:	ff b5 5c f9 ff ff    	push   DWORD PTR [ebp-0x6a4]
   16fbd:	ff b5 58 f9 ff ff    	push   DWORD PTR [ebp-0x6a8]
   16fc3:	ff b5 54 f9 ff ff    	push   DWORD PTR [ebp-0x6ac]
   16fc9:	ff b5 50 f9 ff ff    	push   DWORD PTR [ebp-0x6b0]
   16fcf:	56                   	push   esi
   16fd0:	53                   	push   ebx
   16fd1:	51                   	push   ecx
   16fd2:	52                   	push   edx
   16fd3:	50                   	push   eax
   16fd4:	68 0c 26 08 00       	push   0x8260c
   16fd9:	e8 d9 00 01 00       	call   270b7 <printk>
   16fde:	83 c4 40             	add    esp,0x40
/home/yogi/src/os/chrisOS/src/block/pci.c:366
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);

    getVendorLongName(node->vendor, tempString);
   16fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16fe4:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
   16fe8:	0f b7 c0             	movzx  eax,ax
   16feb:	83 ec 08             	sub    esp,0x8
   16fee:	8d 95 72 f9 ff ff    	lea    edx,[ebp-0x68e]
   16ff4:	52                   	push   edx
   16ff5:	50                   	push   eax
   16ff6:	e8 70 f7 ff ff       	call   1676b <getVendorLongName>
   16ffb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:367
    printk("Vendor: %s\t",tempString);
   16ffe:	83 ec 08             	sub    esp,0x8
   17001:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   17007:	50                   	push   eax
   17008:	68 50 26 08 00       	push   0x82650
   1700d:	e8 a5 00 01 00       	call   270b7 <printk>
   17012:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:368
    getDeviceName(node->vendor, node->device, tempString);
   17015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17018:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
   1701c:	0f b7 d0             	movzx  edx,ax
   1701f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17022:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
   17026:	0f b7 c0             	movzx  eax,ax
   17029:	83 ec 04             	sub    esp,0x4
   1702c:	8d 8d 72 f9 ff ff    	lea    ecx,[ebp-0x68e]
   17032:	51                   	push   ecx
   17033:	52                   	push   edx
   17034:	50                   	push   eax
   17035:	e8 a7 f7 ff ff       	call   167e1 <getDeviceName>
   1703a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:369
    printk("Device: %s\n",tempString);
   1703d:	83 ec 08             	sub    esp,0x8
   17040:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   17046:	50                   	push   eax
   17047:	68 5c 26 08 00       	push   0x8265c
   1704c:	e8 66 00 01 00       	call   270b7 <printk>
   17051:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:370
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
   17054:	8d 85 08 fa ff ff    	lea    eax,[ebp-0x5f8]
   1705a:	50                   	push   eax
   1705b:	8d 85 fc fb ff ff    	lea    eax,[ebp-0x404]
   17061:	50                   	push   eax
   17062:	8d 85 f0 fd ff ff    	lea    eax,[ebp-0x210]
   17068:	50                   	push   eax
   17069:	68 68 26 08 00       	push   0x82668
   1706e:	e8 44 00 01 00       	call   270b7 <printk>
   17073:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:371
    printk("Base addresses:\n");
   17076:	83 ec 0c             	sub    esp,0xc
   17079:	68 89 26 08 00       	push   0x82689
   1707e:	e8 34 00 01 00       	call   270b7 <printk>
   17083:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:372
    for (int cnt=0;cnt<2;cnt++)
   17086:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   1708d:	eb 25                	jmp    170b4 <printPCIBridgeHeader+0x202>
/home/yogi/src/os/chrisOS/src/block/pci.c:373 (discriminator 3)
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
   1708f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17092:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   17095:	83 c2 04             	add    edx,0x4
   17098:	8b 44 90 02          	mov    eax,DWORD PTR [eax+edx*4+0x2]
   1709c:	83 ec 04             	sub    esp,0x4
   1709f:	50                   	push   eax
   170a0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   170a3:	68 9a 26 08 00       	push   0x8269a
   170a8:	e8 0a 00 01 00       	call   270b7 <printk>
   170ad:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:372 (discriminator 3)
    printk("Vendor: %s\t",tempString);
    getDeviceName(node->vendor, node->device, tempString);
    printk("Device: %s\n",tempString);
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
    printk("Base addresses:\n");
    for (int cnt=0;cnt<2;cnt++)
   170b0:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:372 (discriminator 1)
   170b4:	83 7d e4 01          	cmp    DWORD PTR [ebp-0x1c],0x1
   170b8:	7e d5                	jle    1708f <printPCIBridgeHeader+0x1dd>
/home/yogi/src/os/chrisOS/src/block/pci.c:374
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
    printk("IO Base: 0x%04X\tIO Limit: 0x%04X\n",node->ioBase,node->ioLimit);
   170ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170bd:	8b 50 1e             	mov    edx,DWORD PTR [eax+0x1e]
   170c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170c3:	8b 40 22             	mov    eax,DWORD PTR [eax+0x22]
   170c6:	83 ec 04             	sub    esp,0x4
   170c9:	52                   	push   edx
   170ca:	50                   	push   eax
   170cb:	68 ac 26 08 00       	push   0x826ac
   170d0:	e8 e2 ff 00 00       	call   270b7 <printk>
   170d5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:375
    printk("Command: 0x%04X, Status: 0x%04X\n",node->command,node->status);
   170d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170db:	0f b7 40 38          	movzx  eax,WORD PTR [eax+0x38]
   170df:	0f b7 d0             	movzx  edx,ax
   170e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170e5:	0f b7 40 3a          	movzx  eax,WORD PTR [eax+0x3a]
   170e9:	0f b7 c0             	movzx  eax,ax
   170ec:	83 ec 04             	sub    esp,0x4
   170ef:	52                   	push   edx
   170f0:	50                   	push   eax
   170f1:	68 d0 26 08 00       	push   0x826d0
   170f6:	e8 bc ff 00 00       	call   270b7 <printk>
   170fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:376
}   
   170fe:	90                   	nop
   170ff:	8d 65 f4             	lea    esp,[ebp-0xc]
   17102:	5b                   	pop    ebx
   17103:	5e                   	pop    esi
   17104:	5f                   	pop    edi
   17105:	5d                   	pop    ebp
   17106:	c3                   	ret    

00017107 <printPCIHeader>:
printPCIHeader():
/home/yogi/src/os/chrisOS/src/block/pci.c:379

void printPCIHeader(struct pci_device_t* node)
{
   17107:	55                   	push   ebp
   17108:	89 e5                	mov    ebp,esp
   1710a:	57                   	push   edi
   1710b:	56                   	push   esi
   1710c:	53                   	push   ebx
   1710d:	81 ec 9c 06 00 00    	sub    esp,0x69c
/home/yogi/src/os/chrisOS/src/block/pci.c:382
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
   17113:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17116:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   17119:	0f b6 d0             	movzx  edx,al
   1711c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1711f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   17122:	0f b6 c0             	movzx  eax,al
   17125:	83 ec 0c             	sub    esp,0xc
   17128:	8d 8d 08 fa ff ff    	lea    ecx,[ebp-0x5f8]
   1712e:	51                   	push   ecx
   1712f:	8d 8d fc fb ff ff    	lea    ecx,[ebp-0x404]
   17135:	51                   	push   ecx
   17136:	8d 8d f0 fd ff ff    	lea    ecx,[ebp-0x210]
   1713c:	51                   	push   ecx
   1713d:	52                   	push   edx
   1713e:	50                   	push   eax
   1713f:	e8 59 f7 ff ff       	call   1689d <getClass>
   17144:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:386
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
   17147:	83 ec 0c             	sub    esp,0xc
   1714a:	68 f1 26 08 00       	push   0x826f1
   1714f:	e8 63 ff 00 00       	call   270b7 <printk>
   17154:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:387
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
   17157:	83 ec 0c             	sub    esp,0xc
   1715a:	68 e8 23 08 00       	push   0x823e8
   1715f:	e8 53 ff 00 00       	call   270b7 <printk>
   17164:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:388
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   17167:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1716a:	8b 58 14             	mov    ebx,DWORD PTR [eax+0x14]
   1716d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17170:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
/home/yogi/src/os/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   17173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17176:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
/home/yogi/src/os/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   1717a:	0f b7 c0             	movzx  eax,ax
   1717d:	89 85 64 f9 ff ff    	mov    DWORD PTR [ebp-0x69c],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   17183:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17186:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   1718a:	0f b7 f8             	movzx  edi,ax
   1718d:	89 bd 60 f9 ff ff    	mov    DWORD PTR [ebp-0x6a0],edi
/home/yogi/src/os/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   17193:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17196:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
/home/yogi/src/os/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   1719a:	0f b6 c8             	movzx  ecx,al
   1719d:	89 8d 5c f9 ff ff    	mov    DWORD PTR [ebp-0x6a4],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   171a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171a6:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
/home/yogi/src/os/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   171aa:	0f b6 f8             	movzx  edi,al
   171ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171b0:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   171b4:	0f b6 c8             	movzx  ecx,al
   171b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171ba:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   171be:	0f b6 d0             	movzx  edx,al
   171c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171c4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   171c7:	0f b6 c0             	movzx  eax,al
   171ca:	83 ec 08             	sub    esp,0x8
   171cd:	53                   	push   ebx
   171ce:	56                   	push   esi
   171cf:	ff b5 64 f9 ff ff    	push   DWORD PTR [ebp-0x69c]
   171d5:	ff b5 60 f9 ff ff    	push   DWORD PTR [ebp-0x6a0]
   171db:	ff b5 5c f9 ff ff    	push   DWORD PTR [ebp-0x6a4]
   171e1:	57                   	push   edi
   171e2:	51                   	push   ecx
   171e3:	52                   	push   edx
   171e4:	50                   	push   eax
   171e5:	68 fc 26 08 00       	push   0x826fc
   171ea:	e8 c8 fe 00 00       	call   270b7 <printk>
   171ef:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:391
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
                node->subClass);
    getVendorLongName(node->vendor, tempString);
   171f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171f5:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   171f9:	0f b7 c0             	movzx  eax,ax
   171fc:	83 ec 08             	sub    esp,0x8
   171ff:	8d 95 72 f9 ff ff    	lea    edx,[ebp-0x68e]
   17205:	52                   	push   edx
   17206:	50                   	push   eax
   17207:	e8 5f f5 ff ff       	call   1676b <getVendorLongName>
   1720c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:392
    printk("Vendor: %s\t",tempString);
   1720f:	83 ec 08             	sub    esp,0x8
   17212:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   17218:	50                   	push   eax
   17219:	68 50 26 08 00       	push   0x82650
   1721e:	e8 94 fe 00 00       	call   270b7 <printk>
   17223:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:393
    getDeviceName(node->vendor, node->device, tempString);
   17226:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17229:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   1722d:	0f b7 d0             	movzx  edx,ax
   17230:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17233:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   17237:	0f b7 c0             	movzx  eax,ax
   1723a:	83 ec 04             	sub    esp,0x4
   1723d:	8d 8d 72 f9 ff ff    	lea    ecx,[ebp-0x68e]
   17243:	51                   	push   ecx
   17244:	52                   	push   edx
   17245:	50                   	push   eax
   17246:	e8 96 f5 ff ff       	call   167e1 <getDeviceName>
   1724b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:394
    printk("Device: %s\n",tempString);
   1724e:	83 ec 08             	sub    esp,0x8
   17251:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   17257:	50                   	push   eax
   17258:	68 5c 26 08 00       	push   0x8265c
   1725d:	e8 55 fe 00 00       	call   270b7 <printk>
   17262:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:395
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
   17265:	8d 85 08 fa ff ff    	lea    eax,[ebp-0x5f8]
   1726b:	50                   	push   eax
   1726c:	8d 85 fc fb ff ff    	lea    eax,[ebp-0x404]
   17272:	50                   	push   eax
   17273:	8d 85 f0 fd ff ff    	lea    eax,[ebp-0x210]
   17279:	50                   	push   eax
   1727a:	68 68 26 08 00       	push   0x82668
   1727f:	e8 33 fe 00 00       	call   270b7 <printk>
   17284:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:396
    printk("Base addresses:\n");
   17287:	83 ec 0c             	sub    esp,0xc
   1728a:	68 89 26 08 00       	push   0x82689
   1728f:	e8 23 fe 00 00       	call   270b7 <printk>
   17294:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:397
    for (int cnt=0;cnt<6;cnt++)
   17297:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   1729e:	eb 24                	jmp    172c4 <printPCIHeader+0x1bd>
/home/yogi/src/os/chrisOS/src/block/pci.c:398 (discriminator 3)
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
   172a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   172a3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   172a6:	83 c2 08             	add    edx,0x8
   172a9:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
   172ac:	83 ec 04             	sub    esp,0x4
   172af:	50                   	push   eax
   172b0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   172b3:	68 9a 26 08 00       	push   0x8269a
   172b8:	e8 fa fd 00 00       	call   270b7 <printk>
   172bd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:397 (discriminator 3)
    printk("Vendor: %s\t",tempString);
    getDeviceName(node->vendor, node->device, tempString);
    printk("Device: %s\n",tempString);
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
    printk("Base addresses:\n");
    for (int cnt=0;cnt<6;cnt++)
   172c0:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:397 (discriminator 1)
   172c4:	83 7d e4 05          	cmp    DWORD PTR [ebp-0x1c],0x5
   172c8:	7e d6                	jle    172a0 <printPCIHeader+0x199>
/home/yogi/src/os/chrisOS/src/block/pci.c:399
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
    printk("Subsystem: %04X\tSubsys Vendor: %04X\n",node->subdevice,node->subvendor);
   172ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   172cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
   172d1:	0f b7 d0             	movzx  edx,ax
   172d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   172d7:	0f b7 40 0c          	movzx  eax,WORD PTR [eax+0xc]
   172db:	0f b7 c0             	movzx  eax,ax
   172de:	83 ec 04             	sub    esp,0x4
   172e1:	52                   	push   edx
   172e2:	50                   	push   eax
   172e3:	68 34 27 08 00       	push   0x82734
   172e8:	e8 ca fd 00 00       	call   270b7 <printk>
   172ed:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:400
    printk("Command: 0x%04X, Status: 0x%04X\n",node->command,node->status);
   172f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   172f3:	0f b7 40 4a          	movzx  eax,WORD PTR [eax+0x4a]
   172f7:	0f b7 d0             	movzx  edx,ax
   172fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   172fd:	0f b7 40 4c          	movzx  eax,WORD PTR [eax+0x4c]
   17301:	0f b7 c0             	movzx  eax,ax
   17304:	83 ec 04             	sub    esp,0x4
   17307:	52                   	push   edx
   17308:	50                   	push   eax
   17309:	68 d0 26 08 00       	push   0x826d0
   1730e:	e8 a4 fd 00 00       	call   270b7 <printk>
   17313:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:401
    printk("Interrupt Pin/Line: 0x%04X/0x%04X\n",node->interrupt_pin,node->interrupt_line);
   17316:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17319:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
   1731d:	0f b6 d0             	movzx  edx,al
   17320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17323:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
   17327:	0f b6 c0             	movzx  eax,al
   1732a:	83 ec 04             	sub    esp,0x4
   1732d:	52                   	push   edx
   1732e:	50                   	push   eax
   1732f:	68 5c 27 08 00       	push   0x8275c
   17334:	e8 7e fd 00 00       	call   270b7 <printk>
   17339:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:402
}
   1733c:	90                   	nop
   1733d:	8d 65 f4             	lea    esp,[ebp-0xc]
   17340:	5b                   	pop    ebx
   17341:	5e                   	pop    esi
   17342:	5f                   	pop    edi
   17343:	5d                   	pop    ebp
   17344:	c3                   	ret    

00017345 <addFunction>:
addFunction():
/home/yogi/src/os/chrisOS/src/block/pci.c:404
void addFunction(struct pci_device_t* node)
{
   17345:	55                   	push   ebp
   17346:	89 e5                	mov    ebp,esp
   17348:	53                   	push   ebx
   17349:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOS/src/block/pci.c:405
    printd(DEBUG_PCI_DISCOVERY,"\t\t\t\tFound function: deviceID: %04X, vendorID: %04X, class: %04X, subclass %04X:%04X\n", node->device, node->vendor, node->class, node->subClass);
   1734c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1734f:	8b 58 14             	mov    ebx,DWORD PTR [eax+0x14]
   17352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17355:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   17358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1735b:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   1735f:	0f b7 d0             	movzx  edx,ax
   17362:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17365:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   17369:	0f b7 c0             	movzx  eax,ax
   1736c:	83 ec 08             	sub    esp,0x8
   1736f:	53                   	push   ebx
   17370:	51                   	push   ecx
   17371:	52                   	push   edx
   17372:	50                   	push   eax
   17373:	68 80 27 08 00       	push   0x82780
   17378:	68 00 01 00 00       	push   0x100
   1737d:	e8 55 fd 00 00       	call   270d7 <printd>
   17382:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:406
    memcpy(&kPCIDeviceFunctions[kPCIFunctionCount++],node,sizeof(struct pci_bridge_t));
   17385:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   1738b:	0f b6 05 ae 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ae
   17392:	8d 50 01             	lea    edx,[eax+0x1]
   17395:	88 15 ae 02 12 00    	mov    BYTE PTR ds:0x1202ae,dl
   1739b:	0f b6 d0             	movzx  edx,al
   1739e:	89 d0                	mov    eax,edx
   173a0:	c1 e0 02             	shl    eax,0x2
   173a3:	01 d0                	add    eax,edx
   173a5:	c1 e0 04             	shl    eax,0x4
   173a8:	01 c8                	add    eax,ecx
   173aa:	83 ec 04             	sub    esp,0x4
   173ad:	6a 4e                	push   0x4e
   173af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   173b2:	50                   	push   eax
   173b3:	e8 64 e6 00 00       	call   25a1c <memcpy>
   173b8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:407
    printd(DEBUG_PCI_DISCOVERY,"\t\t\t\tFunction entry created\n");
   173bb:	83 ec 08             	sub    esp,0x8
   173be:	68 d5 27 08 00       	push   0x827d5
   173c3:	68 00 01 00 00       	push   0x100
   173c8:	e8 0a fd 00 00       	call   270d7 <printd>
   173cd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:408
}
   173d0:	90                   	nop
   173d1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   173d4:	c9                   	leave  
   173d5:	c3                   	ret    

000173d6 <addBridge>:
addBridge():
/home/yogi/src/os/chrisOS/src/block/pci.c:410
void addBridge(struct pci_device_t* node, uint8_t bus, uint8_t device, uint8_t function)
{
   173d6:	55                   	push   ebp
   173d7:	89 e5                	mov    ebp,esp
   173d9:	57                   	push   edi
   173da:	56                   	push   esi
   173db:	53                   	push   ebx
   173dc:	81 ec cc 00 00 00    	sub    esp,0xcc
   173e2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   173e5:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   173e8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   173eb:	88 8d 44 ff ff ff    	mov    BYTE PTR [ebp-0xbc],cl
   173f1:	88 95 40 ff ff ff    	mov    BYTE PTR [ebp-0xc0],dl
   173f7:	88 85 3c ff ff ff    	mov    BYTE PTR [ebp-0xc4],al
/home/yogi/src/os/chrisOS/src/block/pci.c:414
    struct pci_device_t newNode;
    struct pci_bridge_t bridge;
    //int lastSubBridgeNum=0;
    getBridgeHeader(&bridge, bus, device, function);
   173fd:	0f b6 8d 3c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xc4]
   17404:	0f b6 95 40 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xc0]
   1740b:	0f b6 85 44 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xbc]
   17412:	51                   	push   ecx
   17413:	52                   	push   edx
   17414:	50                   	push   eax
   17415:	8d 85 4a ff ff ff    	lea    eax,[ebp-0xb6]
   1741b:	50                   	push   eax
   1741c:	e8 49 f7 ff ff       	call   16b6a <getBridgeHeader>
   17421:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:415
    if (bridge.vendor==0xFFFF)
   17424:	0f b7 85 4f ff ff ff 	movzx  eax,WORD PTR [ebp-0xb1]
   1742b:	66 83 f8 ff          	cmp    ax,0xffff
   1742f:	0f 84 0e 01 00 00    	je     17543 <addBridge+0x16d>
/home/yogi/src/os/chrisOS/src/block/pci.c:418
        return;
    //         bridge.busNo=bus;bridge.deviceNo=device;bridge.funcNo=function;
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tFound bridge on %02X:%02X:%02X,Cls#%02XpBus#%02X,sBus#%02X,suBus# %02X,MF=%u\n",bus, device, function, bridge.class, bridge.primaryBusNum, bridge.secondaryBusNum, bridge.subordinateBusNum, bridge.multiFunction);
   17435:	0f b6 85 4e ff ff ff 	movzx  eax,BYTE PTR [ebp-0xb2]
   1743c:	0f b6 d0             	movzx  edx,al
   1743f:	0f b6 85 72 ff ff ff 	movzx  eax,BYTE PTR [ebp-0x8e]
   17446:	0f b6 c0             	movzx  eax,al
   17449:	89 85 38 ff ff ff    	mov    DWORD PTR [ebp-0xc8],eax
   1744f:	0f b6 85 70 ff ff ff 	movzx  eax,BYTE PTR [ebp-0x90]
   17456:	0f b6 f0             	movzx  esi,al
   17459:	89 b5 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],esi
   1745f:	0f b6 85 71 ff ff ff 	movzx  eax,BYTE PTR [ebp-0x8f]
   17466:	0f b6 f8             	movzx  edi,al
   17469:	8b b5 53 ff ff ff    	mov    esi,DWORD PTR [ebp-0xad]
   1746f:	0f b6 9d 3c ff ff ff 	movzx  ebx,BYTE PTR [ebp-0xc4]
   17476:	0f b6 8d 40 ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xc0]
   1747d:	0f b6 85 44 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xbc]
   17484:	83 ec 08             	sub    esp,0x8
   17487:	52                   	push   edx
   17488:	ff b5 38 ff ff ff    	push   DWORD PTR [ebp-0xc8]
   1748e:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   17494:	57                   	push   edi
   17495:	56                   	push   esi
   17496:	53                   	push   ebx
   17497:	51                   	push   ecx
   17498:	50                   	push   eax
   17499:	68 f4 27 08 00       	push   0x827f4
   1749e:	68 00 01 00 00       	push   0x100
   174a3:	e8 2f fc 00 00       	call   270d7 <printd>
   174a8:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:419
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tdeviceID: %04X, vendorID: %04X, class: %04X, subclass %04X:%04X\n", bridge.device, bridge.vendor, bridge.class, bridge.subClass);
   174ab:	8b 9d 57 ff ff ff    	mov    ebx,DWORD PTR [ebp-0xa9]
   174b1:	8b 8d 53 ff ff ff    	mov    ecx,DWORD PTR [ebp-0xad]
   174b7:	0f b7 85 4f ff ff ff 	movzx  eax,WORD PTR [ebp-0xb1]
   174be:	0f b7 d0             	movzx  edx,ax
   174c1:	0f b7 85 51 ff ff ff 	movzx  eax,WORD PTR [ebp-0xaf]
   174c8:	0f b7 c0             	movzx  eax,ax
   174cb:	83 ec 08             	sub    esp,0x8
   174ce:	53                   	push   ebx
   174cf:	51                   	push   ecx
   174d0:	52                   	push   edx
   174d1:	50                   	push   eax
   174d2:	68 48 28 08 00       	push   0x82848
   174d7:	68 00 01 00 00       	push   0x100
   174dc:	e8 f6 fb 00 00       	call   270d7 <printd>
   174e1:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:420
    memcpy(&kPCIBridgeHeaders[kPCIBridgeCount++],&bridge,sizeof(struct pci_bridge_t));
   174e4:	8b 0d b8 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b8
   174ea:	0f b6 05 ad 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ad
   174f1:	8d 50 01             	lea    edx,[eax+0x1]
   174f4:	88 15 ad 02 12 00    	mov    BYTE PTR ds:0x1202ad,dl
   174fa:	0f b6 c0             	movzx  eax,al
   174fd:	6b c0 4e             	imul   eax,eax,0x4e
   17500:	8d 14 01             	lea    edx,[ecx+eax*1]
   17503:	83 ec 04             	sub    esp,0x4
   17506:	6a 4e                	push   0x4e
   17508:	8d 85 4a ff ff ff    	lea    eax,[ebp-0xb6]
   1750e:	50                   	push   eax
   1750f:	52                   	push   edx
   17510:	e8 07 e5 00 00       	call   25a1c <memcpy>
   17515:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:421
    memcpy(&newNode,node,sizeof(struct pci_device_t));
   17518:	83 ec 04             	sub    esp,0x4
   1751b:	6a 50                	push   0x50
   1751d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   17520:	8d 45 98             	lea    eax,[ebp-0x68]
   17523:	50                   	push   eax
   17524:	e8 f3 e4 00 00       	call   25a1c <memcpy>
   17529:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:422
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tbridge entry created\n");
   1752c:	83 ec 08             	sub    esp,0x8
   1752f:	68 8c 28 08 00       	push   0x8288c
   17534:	68 00 01 00 00       	push   0x100
   17539:	e8 99 fb 00 00       	call   270d7 <printd>
   1753e:	83 c4 10             	add    esp,0x10
   17541:	eb 01                	jmp    17544 <addBridge+0x16e>
/home/yogi/src/os/chrisOS/src/block/pci.c:416
    struct pci_device_t newNode;
    struct pci_bridge_t bridge;
    //int lastSubBridgeNum=0;
    getBridgeHeader(&bridge, bus, device, function);
    if (bridge.vendor==0xFFFF)
        return;
   17543:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/pci.c:438
//       checkBus(&newNode, bridge.secondaryBusNum);
//#ifndef DEBUG_NONE
//       printd(DEBUG_PCI_DISCOVERY,"Done checking bus %02X\n",bridge.secondaryBusNum);
//#endif
    }
}
   17544:	8d 65 f4             	lea    esp,[ebp-0xc]
   17547:	5b                   	pop    ebx
   17548:	5e                   	pop    esi
   17549:	5f                   	pop    edi
   1754a:	5d                   	pop    ebp
   1754b:	c3                   	ret    

0001754c <checkFunctions>:
checkFunctions():
/home/yogi/src/os/chrisOS/src/block/pci.c:440

void checkFunctions(uint8_t bus, uint8_t device) {
   1754c:	55                   	push   ebp
   1754d:	89 e5                	mov    ebp,esp
   1754f:	83 ec 78             	sub    esp,0x78
   17552:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17555:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17558:	88 55 94             	mov    BYTE PTR [ebp-0x6c],dl
   1755b:	88 45 90             	mov    BYTE PTR [ebp-0x70],al
/home/yogi/src/os/chrisOS/src/block/pci.c:443
    struct pci_device_t funcDevice;

    for (int function=0;function<8;function++)
   1755e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   17565:	eb 4e                	jmp    175b5 <checkFunctions+0x69>
/home/yogi/src/os/chrisOS/src/block/pci.c:445
    {
        getDeviceHeader(&funcDevice, bus, device, function);
   17567:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1756a:	0f b6 c8             	movzx  ecx,al
   1756d:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   17571:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   17575:	51                   	push   ecx
   17576:	52                   	push   edx
   17577:	50                   	push   eax
   17578:	8d 45 a4             	lea    eax,[ebp-0x5c]
   1757b:	50                   	push   eax
   1757c:	e8 03 f4 ff ff       	call   16984 <getDeviceHeader>
   17581:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:446
        if (funcDevice.vendor!=0xFFFF)
   17584:	0f b7 45 aa          	movzx  eax,WORD PTR [ebp-0x56]
   17588:	66 83 f8 ff          	cmp    ax,0xffff
   1758c:	74 23                	je     175b1 <checkFunctions+0x65>
/home/yogi/src/os/chrisOS/src/block/pci.c:448
        {
            funcDevice.busNo=bus;
   1758e:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   17592:	88 45 a4             	mov    BYTE PTR [ebp-0x5c],al
/home/yogi/src/os/chrisOS/src/block/pci.c:449
            funcDevice.deviceNo=device;
   17595:	0f b6 45 90          	movzx  eax,BYTE PTR [ebp-0x70]
   17599:	88 45 a5             	mov    BYTE PTR [ebp-0x5b],al
/home/yogi/src/os/chrisOS/src/block/pci.c:450
            funcDevice.funcNo=function;
   1759c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1759f:	88 45 a6             	mov    BYTE PTR [ebp-0x5a],al
/home/yogi/src/os/chrisOS/src/block/pci.c:451
            addFunction(&funcDevice);
   175a2:	83 ec 0c             	sub    esp,0xc
   175a5:	8d 45 a4             	lea    eax,[ebp-0x5c]
   175a8:	50                   	push   eax
   175a9:	e8 97 fd ff ff       	call   17345 <addFunction>
   175ae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:443 (discriminator 2)
}

void checkFunctions(uint8_t bus, uint8_t device) {
    struct pci_device_t funcDevice;

    for (int function=0;function<8;function++)
   175b1:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:443 (discriminator 1)
   175b5:	83 7d f4 07          	cmp    DWORD PTR [ebp-0xc],0x7
   175b9:	7e ac                	jle    17567 <checkFunctions+0x1b>
/home/yogi/src/os/chrisOS/src/block/pci.c:455
            funcDevice.funcNo=function;
            addFunction(&funcDevice);
        }
    }

 }
   175bb:	90                   	nop
   175bc:	c9                   	leave  
   175bd:	c3                   	ret    

000175be <addDevice>:
addDevice():
/home/yogi/src/os/chrisOS/src/block/pci.c:458

void addDevice(struct pci_device_t* node)
{
   175be:	55                   	push   ebp
   175bf:	89 e5                	mov    ebp,esp
   175c1:	57                   	push   edi
   175c2:	56                   	push   esi
   175c3:	53                   	push   ebx
   175c4:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/block/pci.c:460
#ifndef DEBUG_NONE
    printd(DEBUG_PCI_DISCOVERY,"\tFound device #%u on %02X:%02X:0, Ven# %04X Dev# %04X Cls# %02X MF=%u\n",kPCIDeviceCount, node->busNo, node->deviceNo, node->vendor, node->device, node->class, node->multiFunction);
   175c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175ca:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
   175ce:	0f b6 c0             	movzx  eax,al
   175d1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
   175d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175d7:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
   175da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175dd:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   175e1:	0f b7 f0             	movzx  esi,ax
   175e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175e7:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   175eb:	0f b7 d8             	movzx  ebx,ax
   175ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175f1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   175f5:	0f b6 c8             	movzx  ecx,al
   175f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175fb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   175fe:	0f b6 d0             	movzx  edx,al
   17601:	0f b6 05 ac 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ac
   17608:	0f b6 c0             	movzx  eax,al
   1760b:	83 ec 0c             	sub    esp,0xc
   1760e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   17611:	57                   	push   edi
   17612:	56                   	push   esi
   17613:	53                   	push   ebx
   17614:	51                   	push   ecx
   17615:	52                   	push   edx
   17616:	50                   	push   eax
   17617:	68 a8 28 08 00       	push   0x828a8
   1761c:	68 00 01 00 00       	push   0x100
   17621:	e8 b1 fa 00 00       	call   270d7 <printd>
   17626:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:462
#endif
    memcpy(&kPCIDeviceHeaders[kPCIDeviceCount++],node,sizeof(struct pci_device_t));
   17629:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   1762f:	0f b6 05 ac 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ac
   17636:	8d 50 01             	lea    edx,[eax+0x1]
   17639:	88 15 ac 02 12 00    	mov    BYTE PTR ds:0x1202ac,dl
   1763f:	0f b6 d0             	movzx  edx,al
   17642:	89 d0                	mov    eax,edx
   17644:	c1 e0 02             	shl    eax,0x2
   17647:	01 d0                	add    eax,edx
   17649:	c1 e0 04             	shl    eax,0x4
   1764c:	01 c8                	add    eax,ecx
   1764e:	83 ec 04             	sub    esp,0x4
   17651:	6a 50                	push   0x50
   17653:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   17656:	50                   	push   eax
   17657:	e8 c0 e3 00 00       	call   25a1c <memcpy>
   1765c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:463
    printd(DEBUG_PCI_DISCOVERY,"\tdevice entry created\n");
   1765f:	83 ec 08             	sub    esp,0x8
   17662:	68 ef 28 08 00       	push   0x828ef
   17667:	68 00 01 00 00       	push   0x100
   1766c:	e8 66 fa 00 00       	call   270d7 <printd>
   17671:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:464
}
   17674:	90                   	nop
   17675:	8d 65 f4             	lea    esp,[ebp-0xc]
   17678:	5b                   	pop    ebx
   17679:	5e                   	pop    esi
   1767a:	5f                   	pop    edi
   1767b:	5d                   	pop    ebp
   1767c:	c3                   	ret    

0001767d <checkDevice>:
checkDevice():
/home/yogi/src/os/chrisOS/src/block/pci.c:467

bool checkDevice(struct pci_device_t* node, uint8_t bus, uint8_t device)
{
   1767d:	55                   	push   ebp
   1767e:	89 e5                	mov    ebp,esp
   17680:	83 ec 78             	sub    esp,0x78
   17683:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   17686:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   17689:	88 55 94             	mov    BYTE PTR [ebp-0x6c],dl
   1768c:	88 45 90             	mov    BYTE PTR [ebp-0x70],al
/home/yogi/src/os/chrisOS/src/block/pci.c:468
    int func=0;
   1768f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:471
    struct pci_device_t newNode;

    memcpy(&newNode,node,sizeof(struct pci_device_t));
   17696:	83 ec 04             	sub    esp,0x4
   17699:	6a 50                	push   0x50
   1769b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1769e:	8d 45 a4             	lea    eax,[ebp-0x5c]
   176a1:	50                   	push   eax
   176a2:	e8 75 e3 00 00       	call   25a1c <memcpy>
   176a7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:472
    if (getDeviceHeader(&newNode, bus, device, 0))
   176aa:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   176ae:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   176b2:	6a 00                	push   0x0
   176b4:	52                   	push   edx
   176b5:	50                   	push   eax
   176b6:	8d 45 a4             	lea    eax,[ebp-0x5c]
   176b9:	50                   	push   eax
   176ba:	e8 c5 f2 ff ff       	call   16984 <getDeviceHeader>
   176bf:	83 c4 10             	add    esp,0x10
   176c2:	84 c0                	test   al,al
   176c4:	74 6c                	je     17732 <checkDevice+0xb5>
/home/yogi/src/os/chrisOS/src/block/pci.c:474
    {
        if (newNode.class!=6)
   176c6:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   176c9:	83 f8 06             	cmp    eax,0x6
   176cc:	74 11                	je     176df <checkDevice+0x62>
/home/yogi/src/os/chrisOS/src/block/pci.c:476
        {
            addDevice(&newNode);
   176ce:	83 ec 0c             	sub    esp,0xc
   176d1:	8d 45 a4             	lea    eax,[ebp-0x5c]
   176d4:	50                   	push   eax
   176d5:	e8 e4 fe ff ff       	call   175be <addDevice>
   176da:	83 c4 10             	add    esp,0x10
   176dd:	eb 1d                	jmp    176fc <checkDevice+0x7f>
/home/yogi/src/os/chrisOS/src/block/pci.c:480
        }
        else
        {
            addBridge(&newNode, bus, device,func);
   176df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   176e2:	0f b6 c8             	movzx  ecx,al
   176e5:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   176e9:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   176ed:	51                   	push   ecx
   176ee:	52                   	push   edx
   176ef:	50                   	push   eax
   176f0:	8d 45 a4             	lea    eax,[ebp-0x5c]
   176f3:	50                   	push   eax
   176f4:	e8 dd fc ff ff       	call   173d6 <addBridge>
   176f9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:483
        }
#ifndef DEBUG_NONE
        printd(DEBUG_PCI_DISCOVERY,"\tChecking functions\n",device);
   176fc:	0f b6 45 90          	movzx  eax,BYTE PTR [ebp-0x70]
   17700:	83 ec 04             	sub    esp,0x4
   17703:	50                   	push   eax
   17704:	68 06 29 08 00       	push   0x82906
   17709:	68 00 01 00 00       	push   0x100
   1770e:	e8 c4 f9 00 00       	call   270d7 <printd>
   17713:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:485
#endif
        checkFunctions(bus, device);
   17716:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   1771a:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   1771e:	83 ec 08             	sub    esp,0x8
   17721:	52                   	push   edx
   17722:	50                   	push   eax
   17723:	e8 24 fe ff ff       	call   1754c <checkFunctions>
   17728:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:486
        return true;
   1772b:	b8 01 00 00 00       	mov    eax,0x1
   17730:	eb 05                	jmp    17737 <checkDevice+0xba>
/home/yogi/src/os/chrisOS/src/block/pci.c:488
    }
    return false;
   17732:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:489 (discriminator 1)
}
   17737:	c9                   	leave  
   17738:	c3                   	ret    

00017739 <checkBus>:
checkBus():
/home/yogi/src/os/chrisOS/src/block/pci.c:491

void checkBus(struct pci_device_t* node, uint8_t bus) {
   17739:	55                   	push   ebp
   1773a:	89 e5                	mov    ebp,esp
   1773c:	83 ec 28             	sub    esp,0x28
   1773f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17742:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/block/pci.c:495
 uint8_t device;

#ifndef DEBUG_NONE
    printd(DEBUG_PCI_DISCOVERY,"\n");
   17745:	83 ec 08             	sub    esp,0x8
   17748:	68 1b 29 08 00       	push   0x8291b
   1774d:	68 00 01 00 00       	push   0x100
   17752:	e8 80 f9 00 00       	call   270d7 <printd>
   17757:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:496
    printd(DEBUG_PCI_DISCOVERY,"Checking bus %02X\n", bus);
   1775a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   1775e:	83 ec 04             	sub    esp,0x4
   17761:	50                   	push   eax
   17762:	68 1d 29 08 00       	push   0x8291d
   17767:	68 00 01 00 00       	push   0x100
   1776c:	e8 66 f9 00 00       	call   270d7 <printd>
   17771:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:500
#endif
//    printk("\n");
//    printk("Checking bus %02X\n", bus);
    for(device = 0; device < 32; device++) {
   17774:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   17778:	eb 22                	jmp    1779c <checkBus+0x63>
/home/yogi/src/os/chrisOS/src/block/pci.c:508 (discriminator 2)
        if ((kDebugLevel & DEBUG_PCI_DISCOVERY) == DEBUG_PCI_DISCOVERY)
        {
            //waitForKeyboardKey();
        }
#endif
        checkDevice(node, bus, device);
   1777a:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   1777e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   17782:	83 ec 04             	sub    esp,0x4
   17785:	52                   	push   edx
   17786:	50                   	push   eax
   17787:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1778a:	e8 ee fe ff ff       	call   1767d <checkDevice>
   1778f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:500 (discriminator 2)
    printd(DEBUG_PCI_DISCOVERY,"\n");
    printd(DEBUG_PCI_DISCOVERY,"Checking bus %02X\n", bus);
#endif
//    printk("\n");
//    printk("Checking bus %02X\n", bus);
    for(device = 0; device < 32; device++) {
   17792:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   17796:	83 c0 01             	add    eax,0x1
   17799:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/block/pci.c:500 (discriminator 1)
   1779c:	80 7d f7 1f          	cmp    BYTE PTR [ebp-0x9],0x1f
   177a0:	76 d8                	jbe    1777a <checkBus+0x41>
/home/yogi/src/os/chrisOS/src/block/pci.c:511
        }
#endif
        checkDevice(node, bus, device);
     }
 }
}
   177a2:	90                   	nop
   177a3:	c9                   	leave  
   177a4:	c3                   	ret    

000177a5 <pciInitialize>:
pciInitialize():
/home/yogi/src/os/chrisOS/src/block/pci.c:514
    
 void pciInitialize()
 {
   177a5:	55                   	push   ebp
   177a6:	89 e5                	mov    ebp,esp
   177a8:	81 ec b8 00 00 00    	sub    esp,0xb8
/home/yogi/src/os/chrisOS/src/block/pci.c:517
    //Iterate Busses/Slots
     struct pci_device_t device, funcDevice;
     uint16_t prevDev=0,prevBus=0;
   177ae:	66 c7 45 f6 00 00    	mov    WORD PTR [ebp-0xa],0x0
   177b4:	66 c7 45 f4 00 00    	mov    WORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:519

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
   177ba:	c6 05 af 02 12 00 00 	mov    BYTE PTR ds:0x1202af,0x0
   177c1:	0f b6 05 af 02 12 00 	movzx  eax,BYTE PTR ds:0x1202af
   177c8:	a2 ae 02 12 00       	mov    ds:0x1202ae,al
   177cd:	0f b6 05 ae 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ae
   177d4:	a2 ad 02 12 00       	mov    ds:0x1202ad,al
   177d9:	0f b6 05 ad 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ad
   177e0:	a2 ac 02 12 00       	mov    ds:0x1202ac,al
/home/yogi/src/os/chrisOS/src/block/pci.c:520
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
   177e5:	83 ec 08             	sub    esp,0x8
   177e8:	68 30 29 08 00       	push   0x82930
   177ed:	68 00 01 00 00       	push   0x100
   177f2:	e8 e0 f8 00 00       	call   270d7 <printd>
   177f7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:521
     for (currBus=0;currBus<50;currBus++)
   177fa:	c7 05 98 a4 09 00 00 	mov    DWORD PTR ds:0x9a498,0x0
   17801:	00 00 00 
   17804:	e9 cc 01 00 00       	jmp    179d5 <pciInitialize+0x230>
/home/yogi/src/os/chrisOS/src/block/pci.c:523
     {
         for (currSlot=0;currSlot<32;currSlot++)
   17809:	c7 05 9c a4 09 00 00 	mov    DWORD PTR ds:0x9a49c,0x0
   17810:	00 00 00 
   17813:	e9 a2 01 00 00       	jmp    179ba <pciInitialize+0x215>
/home/yogi/src/os/chrisOS/src/block/pci.c:526
         {
            //if device found print it
            currFunc=0;
   17818:	c7 05 a0 a4 09 00 00 	mov    DWORD PTR ds:0x9a4a0,0x0
   1781f:	00 00 00 
/home/yogi/src/os/chrisOS/src/block/pci.c:527
            prevDev=0;
   17822:	66 c7 45 f6 00 00    	mov    WORD PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:528
            printd(DEBUG_PCI_DISCOVERY,"Current bus=%u, slot=%u\n",currBus,currSlot);
   17828:	8b 15 9c a4 09 00    	mov    edx,DWORD PTR ds:0x9a49c
   1782e:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17833:	52                   	push   edx
   17834:	50                   	push   eax
   17835:	68 4e 29 08 00       	push   0x8294e
   1783a:	68 00 01 00 00       	push   0x100
   1783f:	e8 93 f8 00 00       	call   270d7 <printd>
   17844:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:529
            if (getDeviceHeader(&device, currBus, currSlot, currFunc)==true)
   17847:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   1784c:	0f b6 c8             	movzx  ecx,al
   1784f:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17854:	0f b6 d0             	movzx  edx,al
   17857:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   1785c:	0f b6 c0             	movzx  eax,al
   1785f:	51                   	push   ecx
   17860:	52                   	push   edx
   17861:	50                   	push   eax
   17862:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17865:	50                   	push   eax
   17866:	e8 19 f1 ff ff       	call   16984 <getDeviceHeader>
   1786b:	83 c4 10             	add    esp,0x10
   1786e:	84 c0                	test   al,al
   17870:	0f 84 37 01 00 00    	je     179ad <pciInitialize+0x208>
/home/yogi/src/os/chrisOS/src/block/pci.c:531
            {
                if (prevBus!=currBus)
   17876:	0f b7 55 f4          	movzx  edx,WORD PTR [ebp-0xc]
   1787a:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   1787f:	39 c2                	cmp    edx,eax
   17881:	74 18                	je     1789b <pciInitialize+0xf6>
/home/yogi/src/os/chrisOS/src/block/pci.c:533
                {
                    prevBus=currBus;
   17883:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17888:	66 89 45 f4          	mov    WORD PTR [ebp-0xc],ax
/home/yogi/src/os/chrisOS/src/block/pci.c:534
                    kPCIBusCount++;
   1788c:	0f b6 05 af 02 12 00 	movzx  eax,BYTE PTR ds:0x1202af
   17893:	83 c0 01             	add    eax,0x1
   17896:	a2 af 02 12 00       	mov    ds:0x1202af,al
/home/yogi/src/os/chrisOS/src/block/pci.c:537
                }
                //printPCIHeader(&device);
                if (device.class==0x06)
   1789b:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   1789e:	83 f8 06             	cmp    eax,0x6
   178a1:	75 29                	jne    178cc <pciInitialize+0x127>
/home/yogi/src/os/chrisOS/src/block/pci.c:539
                {
                    addBridge(&device, currBus, currSlot, currFunc);
   178a3:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   178a8:	0f b6 c8             	movzx  ecx,al
   178ab:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   178b0:	0f b6 d0             	movzx  edx,al
   178b3:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   178b8:	0f b6 c0             	movzx  eax,al
   178bb:	51                   	push   ecx
   178bc:	52                   	push   edx
   178bd:	50                   	push   eax
   178be:	8d 45 a4             	lea    eax,[ebp-0x5c]
   178c1:	50                   	push   eax
   178c2:	e8 0f fb ff ff       	call   173d6 <addBridge>
   178c7:	83 c4 10             	add    esp,0x10
   178ca:	eb 0f                	jmp    178db <pciInitialize+0x136>
/home/yogi/src/os/chrisOS/src/block/pci.c:542
                }
                else
                    addDevice(&device);
   178cc:	83 ec 0c             	sub    esp,0xc
   178cf:	8d 45 a4             	lea    eax,[ebp-0x5c]
   178d2:	50                   	push   eax
   178d3:	e8 e6 fc ff ff       	call   175be <addDevice>
   178d8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:544
  //if found device is multi-function, iterate all of the functions
                for (currFunc=0;currFunc<8;currFunc++)
   178db:	c7 05 a0 a4 09 00 00 	mov    DWORD PTR ds:0x9a4a0,0x0
   178e2:	00 00 00 
   178e5:	e9 b5 00 00 00       	jmp    1799f <pciInitialize+0x1fa>
/home/yogi/src/os/chrisOS/src/block/pci.c:547
                {
                    //printd(DEBUG_PCI_DISCOVERY,"Current function=%u\n",currFunc);
                    getDeviceHeader(&funcDevice, currBus, currSlot, currFunc);
   178ea:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   178ef:	0f b6 c8             	movzx  ecx,al
   178f2:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   178f7:	0f b6 d0             	movzx  edx,al
   178fa:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   178ff:	0f b6 c0             	movzx  eax,al
   17902:	51                   	push   ecx
   17903:	52                   	push   edx
   17904:	50                   	push   eax
   17905:	8d 85 54 ff ff ff    	lea    eax,[ebp-0xac]
   1790b:	50                   	push   eax
   1790c:	e8 73 f0 ff ff       	call   16984 <getDeviceHeader>
   17911:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:548
                    if (funcDevice.vendor!=0xFFFF)
   17914:	0f b7 85 5a ff ff ff 	movzx  eax,WORD PTR [ebp-0xa6]
   1791b:	66 83 f8 ff          	cmp    ax,0xffff
   1791f:	74 71                	je     17992 <pciInitialize+0x1ed>
/home/yogi/src/os/chrisOS/src/block/pci.c:549
                        if (funcDevice.device != device.device && funcDevice.device != prevDev)
   17921:	0f b7 95 5c ff ff ff 	movzx  edx,WORD PTR [ebp-0xa4]
   17928:	0f b7 45 ac          	movzx  eax,WORD PTR [ebp-0x54]
   1792c:	66 39 c2             	cmp    dx,ax
   1792f:	74 61                	je     17992 <pciInitialize+0x1ed>
/home/yogi/src/os/chrisOS/src/block/pci.c:549 (discriminator 1)
   17931:	0f b7 85 5c ff ff ff 	movzx  eax,WORD PTR [ebp-0xa4]
   17938:	66 3b 45 f6          	cmp    ax,WORD PTR [ebp-0xa]
   1793c:	74 54                	je     17992 <pciInitialize+0x1ed>
/home/yogi/src/os/chrisOS/src/block/pci.c:552
                        {
                            //printk("funcDevice=%X, device=%X, prevDev=%X\n",funcDevice.device, device.device, prevDev);
                            prevDev=funcDevice.device;
   1793e:	0f b7 85 5c ff ff ff 	movzx  eax,WORD PTR [ebp-0xa4]
   17945:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
/home/yogi/src/os/chrisOS/src/block/pci.c:553
                            if (funcDevice.class == 0x06)
   17949:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [ebp-0x9c]
   1794f:	83 f8 06             	cmp    eax,0x6
   17952:	75 2c                	jne    17980 <pciInitialize+0x1db>
/home/yogi/src/os/chrisOS/src/block/pci.c:554
                                addBridge(&funcDevice, currBus, currSlot, currFunc);
   17954:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17959:	0f b6 c8             	movzx  ecx,al
   1795c:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17961:	0f b6 d0             	movzx  edx,al
   17964:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17969:	0f b6 c0             	movzx  eax,al
   1796c:	51                   	push   ecx
   1796d:	52                   	push   edx
   1796e:	50                   	push   eax
   1796f:	8d 85 54 ff ff ff    	lea    eax,[ebp-0xac]
   17975:	50                   	push   eax
   17976:	e8 5b fa ff ff       	call   173d6 <addBridge>
   1797b:	83 c4 10             	add    esp,0x10
   1797e:	eb 12                	jmp    17992 <pciInitialize+0x1ed>
/home/yogi/src/os/chrisOS/src/block/pci.c:556
                            else
                                addFunction(&funcDevice);
   17980:	83 ec 0c             	sub    esp,0xc
   17983:	8d 85 54 ff ff ff    	lea    eax,[ebp-0xac]
   17989:	50                   	push   eax
   1798a:	e8 b6 f9 ff ff       	call   17345 <addFunction>
   1798f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:544 (discriminator 2)
                    addBridge(&device, currBus, currSlot, currFunc);
                }
                else
                    addDevice(&device);
  //if found device is multi-function, iterate all of the functions
                for (currFunc=0;currFunc<8;currFunc++)
   17992:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17997:	83 c0 01             	add    eax,0x1
   1799a:	a3 a0 a4 09 00       	mov    ds:0x9a4a0,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:544 (discriminator 1)
   1799f:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   179a4:	83 f8 07             	cmp    eax,0x7
   179a7:	0f 8e 3d ff ff ff    	jle    178ea <pciInitialize+0x145>
/home/yogi/src/os/chrisOS/src/block/pci.c:523 (discriminator 2)

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
     for (currBus=0;currBus<50;currBus++)
     {
         for (currSlot=0;currSlot<32;currSlot++)
   179ad:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   179b2:	83 c0 01             	add    eax,0x1
   179b5:	a3 9c a4 09 00       	mov    ds:0x9a49c,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:523 (discriminator 1)
   179ba:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   179bf:	83 f8 1f             	cmp    eax,0x1f
   179c2:	0f 8e 50 fe ff ff    	jle    17818 <pciInitialize+0x73>
/home/yogi/src/os/chrisOS/src/block/pci.c:521 (discriminator 2)
     struct pci_device_t device, funcDevice;
     uint16_t prevDev=0,prevBus=0;

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
     for (currBus=0;currBus<50;currBus++)
   179c8:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   179cd:	83 c0 01             	add    eax,0x1
   179d0:	a3 98 a4 09 00       	mov    ds:0x9a498,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:521 (discriminator 1)
   179d5:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   179da:	83 f8 31             	cmp    eax,0x31
   179dd:	0f 8e 26 fe ff ff    	jle    17809 <pciInitialize+0x64>
/home/yogi/src/os/chrisOS/src/block/pci.c:563
                    }
            }
 
        }
     }
   179e3:	90                   	nop
   179e4:	c9                   	leave  
   179e5:	c3                   	ret    
   179e6:	66 90                	xchg   ax,ax

000179e8 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   179e8:	55                   	push   ebp
   179e9:	89 e5                	mov    ebp,esp
   179eb:	83 ec 08             	sub    esp,0x8
   179ee:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   179f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   179f4:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   179f8:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   179fb:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   179ff:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   17a03:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   17a04:	90                   	nop
   17a05:	c9                   	leave  
   17a06:	c3                   	ret    

00017a07 <update_cursor>:
update_cursor():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:25
KERNEL_DATA_SECTION uint8_t savedPosY[10];
KERNEL_DATA_SECTION int8_t savedPosPointer=0;
KERNEL_DATA_SECTION uint8_t kTerminalHeight;

void update_cursor()
 {
   17a07:	55                   	push   ebp
   17a08:	89 e5                	mov    ebp,esp
   17a0a:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:26
    unsigned short position=(terminal_row*VGA_WIDTH) + terminal_column;
   17a0d:	a1 00 00 12 00       	mov    eax,ds:0x120000
   17a12:	89 c2                	mov    edx,eax
   17a14:	b8 50 00 00 00       	mov    eax,0x50
   17a19:	0f af c2             	imul   eax,edx
   17a1c:	8b 15 04 00 12 00    	mov    edx,DWORD PTR ds:0x120004
   17a22:	01 d0                	add    eax,edx
   17a24:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:29
 
    // cursor LOW port to vga INDEX register
    outb(0x3D4, 0x0F);
   17a28:	6a 0f                	push   0xf
   17a2a:	68 d4 03 00 00       	push   0x3d4
   17a2f:	e8 b4 ff ff ff       	call   179e8 <outb>
   17a34:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:30
    outb(0x3D5, (unsigned char)(position&0xFF));
   17a37:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   17a3b:	0f b6 c0             	movzx  eax,al
   17a3e:	50                   	push   eax
   17a3f:	68 d5 03 00 00       	push   0x3d5
   17a44:	e8 9f ff ff ff       	call   179e8 <outb>
   17a49:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:32
    // cursor HIGH port to vga INDEX register
    outb(0x3D4, 0x0E);
   17a4c:	6a 0e                	push   0xe
   17a4e:	68 d4 03 00 00       	push   0x3d4
   17a53:	e8 90 ff ff ff       	call   179e8 <outb>
   17a58:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:33
    outb(0x3D5, (unsigned char )((position>>8)&0xFF));
   17a5b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   17a5f:	66 c1 e8 08          	shr    ax,0x8
   17a63:	0f b6 c0             	movzx  eax,al
   17a66:	50                   	push   eax
   17a67:	68 d5 03 00 00       	push   0x3d5
   17a6c:	e8 77 ff ff ff       	call   179e8 <outb>
   17a71:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:35
    //Move the cursor in the bios data area
 }
   17a74:	90                   	nop
   17a75:	c9                   	leave  
   17a76:	c3                   	ret    

00017a77 <make_color>:
make_color():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:37

uint8_t make_color(enum vga_color fg, enum vga_color bg) {
   17a77:	55                   	push   ebp
   17a78:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:38
        return fg | bg << 4;
   17a7a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17a7d:	c1 e0 04             	shl    eax,0x4
   17a80:	89 c2                	mov    edx,eax
   17a82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17a85:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:39
}
   17a87:	5d                   	pop    ebp
   17a88:	c3                   	ret    

00017a89 <make_vgaentry>:
make_vgaentry():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:41

uint16_t make_vgaentry(char c, uint8_t color) {
   17a89:	55                   	push   ebp
   17a8a:	89 e5                	mov    ebp,esp
   17a8c:	83 ec 18             	sub    esp,0x18
   17a8f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17a92:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17a95:	88 55 ec             	mov    BYTE PTR [ebp-0x14],dl
   17a98:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:42
        uint16_t c16 = c;
   17a9b:	66 0f be 45 ec       	movsx  ax,BYTE PTR [ebp-0x14]
   17aa0:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:43
        uint16_t color16 = color;
   17aa4:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
   17aa8:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:44
        return c16 | color16 << 8;
   17aac:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   17ab0:	c1 e0 08             	shl    eax,0x8
   17ab3:	89 c2                	mov    edx,eax
   17ab5:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   17ab9:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:45
}
   17abb:	c9                   	leave  
   17abc:	c3                   	ret    

00017abd <terminal_setcolor>:
terminal_setcolor():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:48


void terminal_setcolor(uint8_t color) {
   17abd:	55                   	push   ebp
   17abe:	89 e5                	mov    ebp,esp
   17ac0:	83 ec 04             	sub    esp,0x4
   17ac3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17ac6:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:49
        terminal_color = color;
   17ac9:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   17acd:	a2 08 00 12 00       	mov    ds:0x120008,al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:50
}
   17ad2:	90                   	nop
   17ad3:	c9                   	leave  
   17ad4:	c3                   	ret    

00017ad5 <terminal_putentryat>:
terminal_putentryat():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:52

void terminal_putentryat(char c, uint8_t color, size_t x, size_t y) {
   17ad5:	55                   	push   ebp
   17ad6:	89 e5                	mov    ebp,esp
   17ad8:	53                   	push   ebx
   17ad9:	83 ec 18             	sub    esp,0x18
   17adc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17adf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17ae2:	88 55 e8             	mov    BYTE PTR [ebp-0x18],dl
   17ae5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:53
    const size_t index = y * VGA_WIDTH + x;
   17ae8:	b8 50 00 00 00       	mov    eax,0x50
   17aed:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
   17af1:	89 c2                	mov    edx,eax
   17af3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   17af6:	01 d0                	add    eax,edx
   17af8:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:54
        terminal_buffer[index] = make_vgaentry(c, color);
   17afb:	a1 0c 00 12 00       	mov    eax,ds:0x12000c
   17b00:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   17b03:	01 d2                	add    edx,edx
   17b05:	8d 1c 10             	lea    ebx,[eax+edx*1]
   17b08:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
   17b0c:	0f be 45 e8          	movsx  eax,BYTE PTR [ebp-0x18]
   17b10:	52                   	push   edx
   17b11:	50                   	push   eax
   17b12:	e8 72 ff ff ff       	call   17a89 <make_vgaentry>
   17b17:	83 c4 08             	add    esp,0x8
   17b1a:	66 89 03             	mov    WORD PTR [ebx],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:55
}
   17b1d:	90                   	nop
   17b1e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   17b21:	c9                   	leave  
   17b22:	c3                   	ret    

00017b23 <cursorSavePosition>:
cursorSavePosition():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:58

void cursorSavePosition()
{
   17b23:	55                   	push   ebp
   17b24:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:59
    if (savedPosPointer < 10)
   17b26:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17b2d:	3c 09                	cmp    al,0x9
   17b2f:	7f 3b                	jg     17b6c <cursorSavePosition+0x49>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:61
    {
        savedPosX[++savedPosPointer] = terminal_column;
   17b31:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17b38:	83 c0 01             	add    eax,0x1
   17b3b:	a2 26 00 12 00       	mov    ds:0x120026,al
   17b40:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17b47:	0f be c0             	movsx  eax,al
   17b4a:	8b 15 04 00 12 00    	mov    edx,DWORD PTR ds:0x120004
   17b50:	88 90 10 00 12 00    	mov    BYTE PTR [eax+0x120010],dl
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:62
        savedPosY[savedPosPointer] = terminal_row;
   17b56:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17b5d:	0f be c0             	movsx  eax,al
   17b60:	8b 15 00 00 12 00    	mov    edx,DWORD PTR ds:0x120000
   17b66:	88 90 1c 00 12 00    	mov    BYTE PTR [eax+0x12001c],dl
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:64
    }
}
   17b6c:	90                   	nop
   17b6d:	5d                   	pop    ebp
   17b6e:	c3                   	ret    

00017b6f <cursorRestorePosition>:
cursorRestorePosition():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:67

void cursorRestorePosition()
{
   17b6f:	55                   	push   ebp
   17b70:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:68
    if (savedPosPointer > 0)
   17b72:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17b79:	84 c0                	test   al,al
   17b7b:	7e 42                	jle    17bbf <cursorRestorePosition+0x50>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:70
    {
        terminal_column = savedPosX[savedPosPointer];
   17b7d:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17b84:	0f be c0             	movsx  eax,al
   17b87:	0f b6 80 10 00 12 00 	movzx  eax,BYTE PTR [eax+0x120010]
   17b8e:	0f b6 c0             	movzx  eax,al
   17b91:	a3 04 00 12 00       	mov    ds:0x120004,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:71
        terminal_row = savedPosY[savedPosPointer--];
   17b96:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17b9d:	89 c2                	mov    edx,eax
   17b9f:	83 ea 01             	sub    edx,0x1
   17ba2:	88 15 26 00 12 00    	mov    BYTE PTR ds:0x120026,dl
   17ba8:	0f be c0             	movsx  eax,al
   17bab:	0f b6 80 1c 00 12 00 	movzx  eax,BYTE PTR [eax+0x12001c]
   17bb2:	0f b6 c0             	movzx  eax,al
   17bb5:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:72
        update_cursor();
   17bba:	e8 48 fe ff ff       	call   17a07 <update_cursor>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:74
    }
}
   17bbf:	90                   	nop
   17bc0:	5d                   	pop    ebp
   17bc1:	c3                   	ret    

00017bc2 <terminal_clear>:
terminal_clear():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:77

void terminal_clear()
{
   17bc2:	55                   	push   ebp
   17bc3:	89 e5                	mov    ebp,esp
   17bc5:	53                   	push   ebx
   17bc6:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:79
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
   17bc9:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   17bd0:	eb 53                	jmp    17c25 <terminal_clear+0x63>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:80
                for (size_t x = 0; x < VGA_WIDTH; x++) {
   17bd2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   17bd9:	eb 3c                	jmp    17c17 <terminal_clear+0x55>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:81 (discriminator 3)
                        const size_t index = y * VGA_WIDTH + x;
   17bdb:	b8 50 00 00 00       	mov    eax,0x50
   17be0:	0f af 45 f8          	imul   eax,DWORD PTR [ebp-0x8]
   17be4:	89 c2                	mov    edx,eax
   17be6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   17be9:	01 d0                	add    eax,edx
   17beb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:82 (discriminator 3)
                        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
   17bee:	a1 0c 00 12 00       	mov    eax,ds:0x12000c
   17bf3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   17bf6:	01 d2                	add    edx,edx
   17bf8:	8d 1c 10             	lea    ebx,[eax+edx*1]
   17bfb:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
   17c02:	0f b6 c0             	movzx  eax,al
   17c05:	50                   	push   eax
   17c06:	6a 20                	push   0x20
   17c08:	e8 7c fe ff ff       	call   17a89 <make_vgaentry>
   17c0d:	83 c4 08             	add    esp,0x8
   17c10:	66 89 03             	mov    WORD PTR [ebx],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:80 (discriminator 3)

void terminal_clear()
{
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
                for (size_t x = 0; x < VGA_WIDTH; x++) {
   17c13:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:80 (discriminator 1)
   17c17:	b8 50 00 00 00       	mov    eax,0x50
   17c1c:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   17c1f:	72 ba                	jb     17bdb <terminal_clear+0x19>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:79 (discriminator 2)
}

void terminal_clear()
{
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
   17c21:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:79 (discriminator 1)
   17c25:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   17c2c:	0f b6 c0             	movzx  eax,al
   17c2f:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
   17c32:	77 9e                	ja     17bd2 <terminal_clear+0x10>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:85
                for (size_t x = 0; x < VGA_WIDTH; x++) {
                        const size_t index = y * VGA_WIDTH + x;
                        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
                }
        }
    terminal_column=0;
   17c34:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
   17c3b:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:86
    terminal_row=0;
   17c3e:	c7 05 00 00 12 00 00 	mov    DWORD PTR ds:0x120000,0x0
   17c45:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:87
    update_cursor();
   17c48:	e8 ba fd ff ff       	call   17a07 <update_cursor>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:88
}
   17c4d:	90                   	nop
   17c4e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   17c51:	c9                   	leave  
   17c52:	c3                   	ret    

00017c53 <terminal_clear_line>:
terminal_clear_line():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:91

void terminal_clear_line(unsigned lineNo)
{
   17c53:	55                   	push   ebp
   17c54:	89 e5                	mov    ebp,esp
   17c56:	53                   	push   ebx
   17c57:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:92
    if (lineNo>SYS_VGA_HEIGHT-1)
   17c5a:	83 7d 08 31          	cmp    DWORD PTR [ebp+0x8],0x31
   17c5e:	77 51                	ja     17cb1 <terminal_clear_line+0x5e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:94
        return;
    for (unsigned cnt=0;cnt<VGA_WIDTH;cnt++)
   17c60:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   17c67:	eb 3c                	jmp    17ca5 <terminal_clear_line+0x52>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:96 (discriminator 3)
    {
        const size_t index = lineNo * VGA_WIDTH + cnt;
   17c69:	b8 50 00 00 00       	mov    eax,0x50
   17c6e:	0f af 45 08          	imul   eax,DWORD PTR [ebp+0x8]
   17c72:	89 c2                	mov    edx,eax
   17c74:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   17c77:	01 d0                	add    eax,edx
   17c79:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:97 (discriminator 3)
        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
   17c7c:	a1 0c 00 12 00       	mov    eax,ds:0x12000c
   17c81:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   17c84:	01 d2                	add    edx,edx
   17c86:	8d 1c 10             	lea    ebx,[eax+edx*1]
   17c89:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
   17c90:	0f b6 c0             	movzx  eax,al
   17c93:	50                   	push   eax
   17c94:	6a 20                	push   0x20
   17c96:	e8 ee fd ff ff       	call   17a89 <make_vgaentry>
   17c9b:	83 c4 08             	add    esp,0x8
   17c9e:	66 89 03             	mov    WORD PTR [ebx],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:94 (discriminator 3)

void terminal_clear_line(unsigned lineNo)
{
    if (lineNo>SYS_VGA_HEIGHT-1)
        return;
    for (unsigned cnt=0;cnt<VGA_WIDTH;cnt++)
   17ca1:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:94 (discriminator 1)
   17ca5:	b8 50 00 00 00       	mov    eax,0x50
   17caa:	39 45 f8             	cmp    DWORD PTR [ebp-0x8],eax
   17cad:	72 ba                	jb     17c69 <terminal_clear_line+0x16>
   17caf:	eb 01                	jmp    17cb2 <terminal_clear_line+0x5f>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:93
}

void terminal_clear_line(unsigned lineNo)
{
    if (lineNo>SYS_VGA_HEIGHT-1)
        return;
   17cb1:	90                   	nop
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:99
    for (unsigned cnt=0;cnt<VGA_WIDTH;cnt++)
    {
        const size_t index = lineNo * VGA_WIDTH + cnt;
        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
    }
}
   17cb2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   17cb5:	c9                   	leave  
   17cb6:	c3                   	ret    

00017cb7 <terminal_copyline>:
terminal_copyline():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:102

void terminal_copyline(unsigned dstLine, unsigned srcLine)
{
   17cb7:	55                   	push   ebp
   17cb8:	89 e5                	mov    ebp,esp
   17cba:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:103
    unsigned rowBytes = VGA_WIDTH*2;
   17cbd:	b8 50 00 00 00       	mov    eax,0x50
   17cc2:	01 c0                	add    eax,eax
   17cc4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:104
    uintptr_t dest=(uintptr_t)TEXTMODE_MEMORY_START+(dstLine*rowBytes);
   17cc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17cca:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   17cce:	05 00 80 0b 00       	add    eax,0xb8000
   17cd3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:105
    uintptr_t src=(uintptr_t)TEXTMODE_MEMORY_START+(srcLine*rowBytes);
   17cd6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17cd9:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   17cdd:	05 00 80 0b 00       	add    eax,0xb8000
   17ce2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:107
    
    memcpy((void*)dest,(void*)src,rowBytes);
   17ce5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   17ce8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   17ceb:	83 ec 04             	sub    esp,0x4
   17cee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   17cf1:	52                   	push   edx
   17cf2:	50                   	push   eax
   17cf3:	e8 24 dd 00 00       	call   25a1c <memcpy>
   17cf8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:108
}
   17cfb:	90                   	nop
   17cfc:	c9                   	leave  
   17cfd:	c3                   	ret    

00017cfe <terminal_putchar>:
terminal_putchar():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:110

void terminal_putchar(char c) {
   17cfe:	55                   	push   ebp
   17cff:	89 e5                	mov    ebp,esp
   17d01:	53                   	push   ebx
   17d02:	83 ec 24             	sub    esp,0x24
   17d05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17d08:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:111
    if (c=='\n')
   17d0b:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
   17d0f:	75 1c                	jne    17d2d <terminal_putchar+0x2f>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:113
    {
            terminal_column = 0;
   17d11:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
   17d18:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:114
            terminal_row += 1;
   17d1b:	a1 00 00 12 00       	mov    eax,ds:0x120000
   17d20:	83 c0 01             	add    eax,0x1
   17d23:	a3 00 00 12 00       	mov    ds:0x120000,eax
   17d28:	e9 1f 01 00 00       	jmp    17e4c <terminal_putchar+0x14e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:116
    }
    else if (c=='\b')
   17d2d:	80 7d e4 08          	cmp    BYTE PTR [ebp-0x1c],0x8
   17d31:	75 58                	jne    17d8b <terminal_putchar+0x8d>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:118
    {
        if (terminal_column > 1)
   17d33:	a1 04 00 12 00       	mov    eax,ds:0x120004
   17d38:	83 f8 01             	cmp    eax,0x1
   17d3b:	76 0f                	jbe    17d4c <terminal_putchar+0x4e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:119
            terminal_column--;
   17d3d:	a1 04 00 12 00       	mov    eax,ds:0x120004
   17d42:	83 e8 01             	sub    eax,0x1
   17d45:	a3 04 00 12 00       	mov    ds:0x120004,eax
   17d4a:	eb 17                	jmp    17d63 <terminal_putchar+0x65>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:122
        else
        {
            terminal_row--;
   17d4c:	a1 00 00 12 00       	mov    eax,ds:0x120000
   17d51:	83 e8 01             	sub    eax,0x1
   17d54:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:123
            terminal_column=VGA_WIDTH;
   17d59:	b8 50 00 00 00       	mov    eax,0x50
   17d5e:	a3 04 00 12 00       	mov    ds:0x120004,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:125
        }
        terminal_putentryat(' ', terminal_color, terminal_column, terminal_row);
   17d63:	8b 0d 00 00 12 00    	mov    ecx,DWORD PTR ds:0x120000
   17d69:	8b 15 04 00 12 00    	mov    edx,DWORD PTR ds:0x120004
   17d6f:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
   17d76:	0f b6 c0             	movzx  eax,al
   17d79:	51                   	push   ecx
   17d7a:	52                   	push   edx
   17d7b:	50                   	push   eax
   17d7c:	6a 20                	push   0x20
   17d7e:	e8 52 fd ff ff       	call   17ad5 <terminal_putentryat>
   17d83:	83 c4 10             	add    esp,0x10
   17d86:	e9 c1 00 00 00       	jmp    17e4c <terminal_putchar+0x14e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:128
        
    }
    else if (c=='\t')
   17d8b:	80 7d e4 09          	cmp    BYTE PTR [ebp-0x1c],0x9
   17d8f:	75 59                	jne    17dea <terminal_putchar+0xec>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:130
    {
        uint32_t goTo= terminal_column + (SCREEN_SPACES_PER_TAB - (terminal_column % SCREEN_SPACES_PER_TAB));
   17d91:	8b 1d 04 00 12 00    	mov    ebx,DWORD PTR ds:0x120004
   17d97:	8b 0d 04 00 12 00    	mov    ecx,DWORD PTR ds:0x120004
   17d9d:	ba cd cc cc cc       	mov    edx,0xcccccccd
   17da2:	89 c8                	mov    eax,ecx
   17da4:	f7 e2                	mul    edx
   17da6:	c1 ea 02             	shr    edx,0x2
   17da9:	89 d0                	mov    eax,edx
   17dab:	c1 e0 02             	shl    eax,0x2
   17dae:	01 d0                	add    eax,edx
   17db0:	29 c1                	sub    ecx,eax
   17db2:	89 ca                	mov    edx,ecx
   17db4:	89 d8                	mov    eax,ebx
   17db6:	29 d0                	sub    eax,edx
   17db8:	83 c0 05             	add    eax,0x5
   17dbb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:131
        if (goTo==terminal_column)
   17dbe:	a1 04 00 12 00       	mov    eax,ds:0x120004
   17dc3:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   17dc6:	75 16                	jne    17dde <terminal_putchar+0xe0>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:132
            goTo=SCREEN_SPACES_PER_TAB;
   17dc8:	c7 45 f4 05 00 00 00 	mov    DWORD PTR [ebp-0xc],0x5
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:134
        
        while (terminal_column < goTo)
   17dcf:	eb 0d                	jmp    17dde <terminal_putchar+0xe0>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:135
            terminal_putchar(' ');;
   17dd1:	83 ec 0c             	sub    esp,0xc
   17dd4:	6a 20                	push   0x20
   17dd6:	e8 23 ff ff ff       	call   17cfe <terminal_putchar>
   17ddb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:134
    {
        uint32_t goTo= terminal_column + (SCREEN_SPACES_PER_TAB - (terminal_column % SCREEN_SPACES_PER_TAB));
        if (goTo==terminal_column)
            goTo=SCREEN_SPACES_PER_TAB;
        
        while (terminal_column < goTo)
   17dde:	a1 04 00 12 00       	mov    eax,ds:0x120004
   17de3:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   17de6:	72 e9                	jb     17dd1 <terminal_putchar+0xd3>
   17de8:	eb 62                	jmp    17e4c <terminal_putchar+0x14e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:141
    
    //6 - cnt=0 to (5-1) 4
    //8 - cnt= to (5-3) 2
    }
    //We're going to ignore carriage return since most systems don't use it.  Unfortunately the FAT library we are using does
    else if (c=='\r')
   17dea:	80 7d e4 0d          	cmp    BYTE PTR [ebp-0x1c],0xd
   17dee:	0f 84 b0 00 00 00    	je     17ea4 <terminal_putchar+0x1a6>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:146
        return;

        else
        {
                terminal_putentryat(c, terminal_color, terminal_column, terminal_row);
   17df4:	8b 1d 00 00 12 00    	mov    ebx,DWORD PTR ds:0x120000
   17dfa:	8b 0d 04 00 12 00    	mov    ecx,DWORD PTR ds:0x120004
   17e00:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
   17e07:	0f b6 d0             	movzx  edx,al
   17e0a:	0f be 45 e4          	movsx  eax,BYTE PTR [ebp-0x1c]
   17e0e:	53                   	push   ebx
   17e0f:	51                   	push   ecx
   17e10:	52                   	push   edx
   17e11:	50                   	push   eax
   17e12:	e8 be fc ff ff       	call   17ad5 <terminal_putentryat>
   17e17:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:147
                if (++terminal_column == VGA_WIDTH) {
   17e1a:	a1 04 00 12 00       	mov    eax,ds:0x120004
   17e1f:	83 c0 01             	add    eax,0x1
   17e22:	a3 04 00 12 00       	mov    ds:0x120004,eax
   17e27:	a1 04 00 12 00       	mov    eax,ds:0x120004
   17e2c:	ba 50 00 00 00       	mov    edx,0x50
   17e31:	39 d0                	cmp    eax,edx
   17e33:	75 17                	jne    17e4c <terminal_putchar+0x14e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:148
                        terminal_column = 0;
   17e35:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
   17e3c:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:149
                        terminal_row++;
   17e3f:	a1 00 00 12 00       	mov    eax,ds:0x120000
   17e44:	83 c0 01             	add    eax,0x1
   17e47:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:152
                }
        }
    if (terminal_row == kTerminalHeight)
   17e4c:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   17e53:	0f b6 d0             	movzx  edx,al
   17e56:	a1 00 00 12 00       	mov    eax,ds:0x120000
   17e5b:	39 c2                	cmp    edx,eax
   17e5d:	75 3e                	jne    17e9d <terminal_putchar+0x19f>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:154
    {
        for (unsigned row=0;row<kTerminalHeight;row++)
   17e5f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   17e66:	eb 19                	jmp    17e81 <terminal_putchar+0x183>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:155 (discriminator 3)
            terminal_copyline(row, row+1);
   17e68:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   17e6b:	83 c0 01             	add    eax,0x1
   17e6e:	83 ec 08             	sub    esp,0x8
   17e71:	50                   	push   eax
   17e72:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   17e75:	e8 3d fe ff ff       	call   17cb7 <terminal_copyline>
   17e7a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:154 (discriminator 3)
                        terminal_row++;
                }
        }
    if (terminal_row == kTerminalHeight)
    {
        for (unsigned row=0;row<kTerminalHeight;row++)
   17e7d:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:154 (discriminator 1)
   17e81:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   17e88:	0f b6 c0             	movzx  eax,al
   17e8b:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   17e8e:	77 d8                	ja     17e68 <terminal_putchar+0x16a>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:157
            terminal_copyline(row, row+1);
        //memcpy((void *)TEXTMODE_MEMORY_START, (void *)TEXTMODE_MEMORY_START+160, 160*25);
        terminal_row--;
   17e90:	a1 00 00 12 00       	mov    eax,ds:0x120000
   17e95:	83 e8 01             	sub    eax,0x1
   17e98:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:159
    }
    update_cursor();
   17e9d:	e8 65 fb ff ff       	call   17a07 <update_cursor>
   17ea2:	eb 01                	jmp    17ea5 <terminal_putchar+0x1a7>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:142
    //6 - cnt=0 to (5-1) 4
    //8 - cnt= to (5-3) 2
    }
    //We're going to ignore carriage return since most systems don't use it.  Unfortunately the FAT library we are using does
    else if (c=='\r')
        return;
   17ea4:	90                   	nop
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:160
            terminal_copyline(row, row+1);
        //memcpy((void *)TEXTMODE_MEMORY_START, (void *)TEXTMODE_MEMORY_START+160, 160*25);
        terminal_row--;
    }
    update_cursor();
}
   17ea5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   17ea8:	c9                   	leave  
   17ea9:	c3                   	ret    

00017eaa <cursorUpdateBiosCursor>:
cursorUpdateBiosCursor():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:163

void cursorUpdateBiosCursor()
{
   17eaa:	55                   	push   ebp
   17eab:	89 e5                	mov    ebp,esp
   17ead:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:164
    uint8_t* bda=(uint8_t*)0x450;
   17eb0:	c7 45 fc 50 04 00 00 	mov    DWORD PTR [ebp-0x4],0x450
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:165
    *bda=(uint8_t)(terminal_column & 0xFF);
   17eb7:	a1 04 00 12 00       	mov    eax,ds:0x120004
   17ebc:	89 c2                	mov    edx,eax
   17ebe:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   17ec1:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:166
    bda++;
   17ec3:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:167
    *bda=(uint8_t)((terminal_row+3) & 0xFF);
   17ec7:	a1 00 00 12 00       	mov    eax,ds:0x120000
   17ecc:	8d 50 03             	lea    edx,[eax+0x3]
   17ecf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   17ed2:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:168
}
   17ed4:	90                   	nop
   17ed5:	c9                   	leave  
   17ed6:	c3                   	ret    

00017ed7 <cursorMoveTo>:
cursorMoveTo():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:171

void cursorMoveTo(uint8_t x, uint8_t y)
{
   17ed7:	55                   	push   ebp
   17ed8:	89 e5                	mov    ebp,esp
   17eda:	83 ec 08             	sub    esp,0x8
   17edd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17ee0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17ee3:	88 55 fc             	mov    BYTE PTR [ebp-0x4],dl
   17ee6:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:172
    terminal_row = y;
   17ee9:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   17eed:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:173
    terminal_column = x;
   17ef2:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   17ef6:	a3 04 00 12 00       	mov    ds:0x120004,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:174
    update_cursor();
   17efb:	e8 07 fb ff ff       	call   17a07 <update_cursor>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:175
}
   17f00:	90                   	nop
   17f01:	c9                   	leave  
   17f02:	c3                   	ret    

00017f03 <cursorMoveToX>:
cursorMoveToX():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:178

void cursorMoveToX(uint8_t x)
{
   17f03:	55                   	push   ebp
   17f04:	89 e5                	mov    ebp,esp
   17f06:	83 ec 04             	sub    esp,0x4
   17f09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17f0c:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:179
    terminal_column = x;
   17f0f:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   17f13:	a3 04 00 12 00       	mov    ds:0x120004,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:180
}
   17f18:	90                   	nop
   17f19:	c9                   	leave  
   17f1a:	c3                   	ret    

00017f1b <cursorMoveToY>:
cursorMoveToY():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:183

void cursorMoveToY(uint8_t y)
{
   17f1b:	55                   	push   ebp
   17f1c:	89 e5                	mov    ebp,esp
   17f1e:	83 ec 04             	sub    esp,0x4
   17f21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17f24:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:184
    terminal_row = y;
   17f27:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   17f2b:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:185
}
   17f30:	90                   	nop
   17f31:	c9                   	leave  
   17f32:	c3                   	ret    

00017f33 <cursorGetPosX>:
cursorGetPosX():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:188

uint8_t cursorGetPosX()
{
   17f33:	55                   	push   ebp
   17f34:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:189
    return terminal_column;
   17f36:	a1 04 00 12 00       	mov    eax,ds:0x120004
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:190
}
   17f3b:	5d                   	pop    ebp
   17f3c:	c3                   	ret    

00017f3d <cursorGetMaxX>:
cursorGetMaxX():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:192
int cursorGetMaxX()
{
   17f3d:	55                   	push   ebp
   17f3e:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:193
    return VGA_WIDTH;
   17f40:	b8 50 00 00 00       	mov    eax,0x50
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:194
}
   17f45:	5d                   	pop    ebp
   17f46:	c3                   	ret    

00017f47 <cursorGetMaxY>:
cursorGetMaxY():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:197

int cursorGetMaxY()
{
   17f47:	55                   	push   ebp
   17f48:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:198
    return kTerminalHeight;
   17f4a:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   17f51:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:199
}
   17f54:	5d                   	pop    ebp
   17f55:	c3                   	ret    

00017f56 <displayGetMaxXY>:
displayGetMaxXY():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:202

void displayGetMaxXY(int* maxX, int* maxY)
{
   17f56:	55                   	push   ebp
   17f57:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:203
    *maxX=VGA_WIDTH;
   17f59:	b8 50 00 00 00       	mov    eax,0x50
   17f5e:	89 c2                	mov    edx,eax
   17f60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17f63:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:204
    *maxY=kTerminalHeight;
   17f65:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   17f6c:	0f b6 d0             	movzx  edx,al
   17f6f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17f72:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:205
    return;
   17f74:	90                   	nop
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:206
}
   17f75:	5d                   	pop    ebp
   17f76:	c3                   	ret    

00017f77 <cursorGetPosY>:
cursorGetPosY():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:209

uint8_t cursorGetPosY()
{
   17f77:	55                   	push   ebp
   17f78:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:210
    return terminal_row;
   17f7a:	a1 00 00 12 00       	mov    eax,ds:0x120000
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:211
}
   17f7f:	5d                   	pop    ebp
   17f80:	c3                   	ret    

00017f81 <kTermPrint>:
kTermPrint():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:213

void kTermPrint(const char* data) {
   17f81:	55                   	push   ebp
   17f82:	89 e5                	mov    ebp,esp
   17f84:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:214
        size_t datalen = strlen(data);
   17f87:	83 ec 0c             	sub    esp,0xc
   17f8a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   17f8d:	e8 f6 f2 00 00       	call   27288 <strlen>
   17f92:	83 c4 10             	add    esp,0x10
   17f95:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:215
        for (size_t i = 0; i < datalen; i++)
   17f98:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   17f9f:	eb 1e                	jmp    17fbf <kTermPrint+0x3e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:216 (discriminator 3)
                terminal_putchar(data[i]);
   17fa1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17fa4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   17fa7:	01 d0                	add    eax,edx
   17fa9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   17fac:	0f be c0             	movsx  eax,al
   17faf:	83 ec 0c             	sub    esp,0xc
   17fb2:	50                   	push   eax
   17fb3:	e8 46 fd ff ff       	call   17cfe <terminal_putchar>
   17fb8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:215 (discriminator 3)
    return terminal_row;
}

void kTermPrint(const char* data) {
        size_t datalen = strlen(data);
        for (size_t i = 0; i < datalen; i++)
   17fbb:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:215 (discriminator 1)
   17fbf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   17fc2:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   17fc5:	72 da                	jb     17fa1 <kTermPrint+0x20>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:217
                terminal_putchar(data[i]);
}
   17fc7:	90                   	nop
   17fc8:	c9                   	leave  
   17fc9:	c3                   	ret    

00017fca <kTermInit>:
kTermInit():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:220


void kTermInit() {
   17fca:	55                   	push   ebp
   17fcb:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:221
    kTerminalHeight=SYS_VGA_HEIGHT;
   17fcd:	c6 05 27 00 12 00 32 	mov    BYTE PTR ds:0x120027,0x32
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:222
    terminal_row = 0;
   17fd4:	c7 05 00 00 12 00 00 	mov    DWORD PTR ds:0x120000,0x0
   17fdb:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:223
    terminal_column = 0;
   17fde:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
   17fe5:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:224
    terminal_color = make_color(COLOR_LIGHT_BROWN, COLOR_BLACK);
   17fe8:	6a 00                	push   0x0
   17fea:	6a 0e                	push   0xe
   17fec:	e8 86 fa ff ff       	call   17a77 <make_color>
   17ff1:	83 c4 08             	add    esp,0x8
   17ff4:	a2 08 00 12 00       	mov    ds:0x120008,al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:225
    terminal_buffer = (uint16_t*) TEXTMODE_MEMORY_START;
   17ff9:	c7 05 0c 00 12 00 00 	mov    DWORD PTR ds:0x12000c,0xb8000
   18000:	80 0b 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:227
    //terminal_clear();
}
   18003:	90                   	nop
   18004:	c9                   	leave  
   18005:	c3                   	ret    

00018006 <puts>:
puts():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:230

void puts(char* in)
{
   18006:	55                   	push   ebp
   18007:	89 e5                	mov    ebp,esp
   18009:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:231
    while (*in>'\0')
   1800c:	eb 1b                	jmp    18029 <puts+0x23>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:233
    {
        terminal_putchar(*in++);
   1800e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18011:	8d 50 01             	lea    edx,[eax+0x1]
   18014:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   18017:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1801a:	0f be c0             	movsx  eax,al
   1801d:	83 ec 0c             	sub    esp,0xc
   18020:	50                   	push   eax
   18021:	e8 d8 fc ff ff       	call   17cfe <terminal_putchar>
   18026:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:231
    //terminal_clear();
}

void puts(char* in)
{
    while (*in>'\0')
   18029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1802c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1802f:	84 c0                	test   al,al
   18031:	7f db                	jg     1800e <puts+0x8>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:235
    {
        terminal_putchar(*in++);
    }
}
   18033:	90                   	nop
   18034:	c9                   	leave  
   18035:	c3                   	ret    

00018036 <putc>:
putc():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:238

void putc(char c)
{
   18036:	55                   	push   ebp
   18037:	89 e5                	mov    ebp,esp
   18039:	83 ec 18             	sub    esp,0x18
   1803c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1803f:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:239
    terminal_putchar(c);
   18042:	0f be 45 f4          	movsx  eax,BYTE PTR [ebp-0xc]
   18046:	83 ec 0c             	sub    esp,0xc
   18049:	50                   	push   eax
   1804a:	e8 af fc ff ff       	call   17cfe <terminal_putchar>
   1804f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:240
   18052:	90                   	nop
   18053:	c9                   	leave  
   18054:	c3                   	ret    
   18055:	66 90                	xchg   ax,ax
   18057:	90                   	nop

00018058 <doRSDPSearch>:
doRSDPSearch():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:8
#include "i386/bits/types.h"

extern uint32_t kDebugLevel;

uint32_t doRSDPSearch(int from, int count)
{
   18058:	55                   	push   ebp
   18059:	89 e5                	mov    ebp,esp
   1805b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:9
    uint8_t* fromPtr=(uint8_t*)from;
   1805e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18061:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:12
    
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   18064:	a1 38 03 12 00       	mov    eax,ds:0x120338
   18069:	25 00 04 00 00       	and    eax,0x400
   1806e:	85 c0                	test   eax,eax
   18070:	74 1c                	je     1808e <doRSDPSearch+0x36>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:13
            printk("doRSDPSearch: 0x%08X(0x%08X)-0x%08X\n", from, &fromPtr[0], from+count);
   18072:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18075:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18078:	01 d0                	add    eax,edx
   1807a:	50                   	push   eax
   1807b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1807e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   18081:	68 88 2a 08 00       	push   0x82a88
   18086:	e8 2c f0 00 00       	call   270b7 <printk>
   1808b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:15
#endif
    for (int cnt=0;cnt<count;cnt++)
   1808e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   18095:	e9 9f 00 00 00       	jmp    18139 <doRSDPSearch+0xe1>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16
        if (fromPtr[cnt]=='R' && fromPtr[cnt+1]=='S' && fromPtr[cnt+2]=='D' && fromPtr[cnt+3]==' ' && fromPtr[cnt+4]=='P' && fromPtr[cnt+5]=='T' && fromPtr[cnt+6]=='R' && fromPtr[cnt+7]==' ')
   1809a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1809d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   180a0:	01 d0                	add    eax,edx
   180a2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   180a5:	3c 52                	cmp    al,0x52
   180a7:	0f 85 88 00 00 00    	jne    18135 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 1)
   180ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   180b0:	8d 50 01             	lea    edx,[eax+0x1]
   180b3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   180b6:	01 d0                	add    eax,edx
   180b8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   180bb:	3c 53                	cmp    al,0x53
   180bd:	75 76                	jne    18135 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 2)
   180bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   180c2:	8d 50 02             	lea    edx,[eax+0x2]
   180c5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   180c8:	01 d0                	add    eax,edx
   180ca:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   180cd:	3c 44                	cmp    al,0x44
   180cf:	75 64                	jne    18135 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 3)
   180d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   180d4:	8d 50 03             	lea    edx,[eax+0x3]
   180d7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   180da:	01 d0                	add    eax,edx
   180dc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   180df:	3c 20                	cmp    al,0x20
   180e1:	75 52                	jne    18135 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 4)
   180e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   180e6:	8d 50 04             	lea    edx,[eax+0x4]
   180e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   180ec:	01 d0                	add    eax,edx
   180ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   180f1:	3c 50                	cmp    al,0x50
   180f3:	75 40                	jne    18135 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 5)
   180f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   180f8:	8d 50 05             	lea    edx,[eax+0x5]
   180fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   180fe:	01 d0                	add    eax,edx
   18100:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18103:	3c 54                	cmp    al,0x54
   18105:	75 2e                	jne    18135 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 6)
   18107:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1810a:	8d 50 06             	lea    edx,[eax+0x6]
   1810d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18110:	01 d0                	add    eax,edx
   18112:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18115:	3c 52                	cmp    al,0x52
   18117:	75 1c                	jne    18135 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 7)
   18119:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1811c:	8d 50 07             	lea    edx,[eax+0x7]
   1811f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18122:	01 d0                	add    eax,edx
   18124:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18127:	3c 20                	cmp    al,0x20
   18129:	75 0a                	jne    18135 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:18
        {
            return (uint32_t)&fromPtr[cnt];
   1812b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1812e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18131:	01 d0                	add    eax,edx
   18133:	eb 15                	jmp    1814a <doRSDPSearch+0xf2>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:15 (discriminator 2)
    
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
            printk("doRSDPSearch: 0x%08X(0x%08X)-0x%08X\n", from, &fromPtr[0], from+count);
#endif
    for (int cnt=0;cnt<count;cnt++)
   18135:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:15 (discriminator 1)
   18139:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1813c:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   1813f:	0f 8c 55 ff ff ff    	jl     1809a <doRSDPSearch+0x42>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:20
        if (fromPtr[cnt]=='R' && fromPtr[cnt+1]=='S' && fromPtr[cnt+2]=='D' && fromPtr[cnt+3]==' ' && fromPtr[cnt+4]=='P' && fromPtr[cnt+5]=='T' && fromPtr[cnt+6]=='R' && fromPtr[cnt+7]==' ')
        {
            return (uint32_t)&fromPtr[cnt];
        }
    return 0xFFFFFFFF;
   18145:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:21
}
   1814a:	c9                   	leave  
   1814b:	c3                   	ret    

0001814c <acpiFindTable>:
acpiFindTable():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:24

acpiFADT_t *acpiFindTable(void *RootSDT, char* tableSignature)
{
   1814c:	55                   	push   ebp
   1814d:	89 e5                	mov    ebp,esp
   1814f:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:25
    acpiRSDT_t* rsdt = (acpiRSDT_t*) RootSDT;
   18152:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18155:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:26
    int entries = ((rsdt->header.Length - sizeof(rsdt->header)) / 4)+10;
   18158:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1815b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1815e:	83 e8 24             	sub    eax,0x24
   18161:	c1 e8 02             	shr    eax,0x2
   18164:	83 c0 0a             	add    eax,0xa
   18167:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:28
 
    for (int i = 0; i < entries; i++)
   1816a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   18171:	eb 48                	jmp    181bb <acpiFindTable+0x6f>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:30
    {
        acpiRSDT_t *nextRSDT = (acpiRSDT_t*)rsdt->PointerToOtherSDT[i];
   18173:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18176:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   18179:	83 c2 08             	add    edx,0x8
   1817c:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
   18180:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:31
        printk("***tableSignature=%s, header sig=%s***\n", tableSignature, nextRSDT->header.Signature);
   18183:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18186:	83 ec 04             	sub    esp,0x4
   18189:	50                   	push   eax
   1818a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1818d:	68 b0 2a 08 00       	push   0x82ab0
   18192:	e8 20 ef 00 00       	call   270b7 <printk>
   18197:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:32
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
   1819a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1819d:	83 ec 04             	sub    esp,0x4
   181a0:	6a 04                	push   0x4
   181a2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   181a5:	50                   	push   eax
   181a6:	e8 61 9a ff ff       	call   11c0c <strncmp>
   181ab:	83 c4 10             	add    esp,0x10
   181ae:	85 c0                	test   eax,eax
   181b0:	75 05                	jne    181b7 <acpiFindTable+0x6b>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:33
            return (acpiFADT_t*)nextRSDT;
   181b2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   181b5:	eb 11                	jmp    181c8 <acpiFindTable+0x7c>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:28 (discriminator 2)
acpiFADT_t *acpiFindTable(void *RootSDT, char* tableSignature)
{
    acpiRSDT_t* rsdt = (acpiRSDT_t*) RootSDT;
    int entries = ((rsdt->header.Length - sizeof(rsdt->header)) / 4)+10;
 
    for (int i = 0; i < entries; i++)
   181b7:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:28 (discriminator 1)
   181bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   181be:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   181c1:	7c b0                	jl     18173 <acpiFindTable+0x27>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:37
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
            return (acpiFADT_t*)nextRSDT;
    }
 
    // No FACP found
    return NULL;
   181c3:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:38
}
   181c8:	c9                   	leave  
   181c9:	c3                   	ret    

000181ca <acpiFindTable2>:
acpiFindTable2():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:40
void *acpiFindTable2(void *RootSDT, char* tableSignature)
{
   181ca:	55                   	push   ebp
   181cb:	89 e5                	mov    ebp,esp
   181cd:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:41
    acpiRSDT_t *rsdt = (acpiRSDT_t*) RootSDT;
   181d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   181d3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:42
    int entries = (rsdt->header.Length - sizeof(rsdt->header)) / 4;
   181d6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   181d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   181dc:	83 e8 24             	sub    eax,0x24
   181df:	c1 e8 02             	shr    eax,0x2
   181e2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:44
 
    for (int i = 0; i < entries; i++)
   181e5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   181ec:	eb 48                	jmp    18236 <acpiFindTable2+0x6c>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:46
    {
        acpiRSDT_t *nextRSDT = (acpiRSDT_t *) rsdt->PointerToOtherSDT[i];
   181ee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   181f1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   181f4:	83 c2 08             	add    edx,0x8
   181f7:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
   181fb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:47
        printk("***tableSignature=%s, header sig=%s***\n", tableSignature, nextRSDT->header.Signature);
   181fe:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18201:	83 ec 04             	sub    esp,0x4
   18204:	50                   	push   eax
   18205:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   18208:	68 b0 2a 08 00       	push   0x82ab0
   1820d:	e8 a5 ee 00 00       	call   270b7 <printk>
   18212:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:48
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
   18215:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18218:	83 ec 04             	sub    esp,0x4
   1821b:	6a 04                	push   0x4
   1821d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   18220:	50                   	push   eax
   18221:	e8 e6 99 ff ff       	call   11c0c <strncmp>
   18226:	83 c4 10             	add    esp,0x10
   18229:	85 c0                	test   eax,eax
   1822b:	75 05                	jne    18232 <acpiFindTable2+0x68>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:49
            return (void *) nextRSDT;
   1822d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18230:	eb 11                	jmp    18243 <acpiFindTable2+0x79>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:44 (discriminator 2)
void *acpiFindTable2(void *RootSDT, char* tableSignature)
{
    acpiRSDT_t *rsdt = (acpiRSDT_t*) RootSDT;
    int entries = (rsdt->header.Length - sizeof(rsdt->header)) / 4;
 
    for (int i = 0; i < entries; i++)
   18232:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:44 (discriminator 1)
   18236:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18239:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   1823c:	7c b0                	jl     181ee <acpiFindTable2+0x24>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:53
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
            return (void *) nextRSDT;
    }
 
    // No FACP found
    return NULL;
   1823e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:54
}
   18243:	c9                   	leave  
   18244:	c3                   	ret    

00018245 <acpiFindTables>:
acpiFindTables():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:56
void acpiFindTables()
{
   18245:	55                   	push   ebp
   18246:	89 e5                	mov    ebp,esp
   18248:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:61
    acpiRSDPHeader_t* lRSDPTable;
    acpiRSDT_t* lRootSDP;
    acpiFADT_t* lFADTSDP;
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   1824b:	a1 38 03 12 00       	mov    eax,ds:0x120338
   18250:	25 00 04 00 00       	and    eax,0x400
   18255:	85 c0                	test   eax,eax
   18257:	74 10                	je     18269 <acpiFindTables+0x24>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:62
             printk("acpiFindTables: Looking for ACPI tables\n");
   18259:	83 ec 0c             	sub    esp,0xc
   1825c:	68 d8 2a 08 00       	push   0x82ad8
   18261:	e8 51 ee 00 00       	call   270b7 <printk>
   18266:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:64
#endif
             uint16_t* lEBDABIOSPtr=(uint16_t*)0x40e;
   18269:	c7 45 e8 0e 04 00 00 	mov    DWORD PTR [ebp-0x18],0x40e
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:65
    int32_t lRSDPPtr, lRSDPBaseAddress=0xFFFFFFFF;
   18270:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:68
    
    //Start by looking in the bios for the extended bios data area (EBDA) segment address, and search there
    if (lEBDABIOSPtr != 0)
   18277:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1827b:	74 2b                	je     182a8 <acpiFindTables+0x63>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:70
    {
        lRSDPPtr=*lEBDABIOSPtr*10;
   1827d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18280:	0f b7 00             	movzx  eax,WORD PTR [eax]
   18283:	0f b7 d0             	movzx  edx,ax
   18286:	89 d0                	mov    eax,edx
   18288:	c1 e0 02             	shl    eax,0x2
   1828b:	01 d0                	add    eax,edx
   1828d:	01 c0                	add    eax,eax
   1828f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:71
        lRSDPBaseAddress = doRSDPSearch(lRSDPPtr, 0xFFFF);
   18292:	83 ec 08             	sub    esp,0x8
   18295:	68 ff ff 00 00       	push   0xffff
   1829a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1829d:	e8 b6 fd ff ff       	call   18058 <doRSDPSearch>
   182a2:	83 c4 10             	add    esp,0x10
   182a5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:74
    }
    //If we didn't find the RSDP table there, look from 0xE0000->0xFFFFF
    if (lRSDPBaseAddress==0xFFFFFFFF)
   182a8:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
   182ac:	75 18                	jne    182c6 <acpiFindTables+0x81>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:76
    {
        lRSDPBaseAddress=doRSDPSearch(0xE0000, 0x1FFFF);
   182ae:	83 ec 08             	sub    esp,0x8
   182b1:	68 ff ff 01 00       	push   0x1ffff
   182b6:	68 00 00 0e 00       	push   0xe0000
   182bb:	e8 98 fd ff ff       	call   18058 <doRSDPSearch>
   182c0:	83 c4 10             	add    esp,0x10
   182c3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:78
    }
    if (lRSDPBaseAddress==-1)
   182c6:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
   182ca:	75 2a                	jne    182f6 <acpiFindTables+0xb1>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:81
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   182cc:	a1 38 03 12 00       	mov    eax,ds:0x120338
   182d1:	25 00 04 00 00       	and    eax,0x400
   182d6:	85 c0                	test   eax,eax
   182d8:	0f 84 51 01 00 00    	je     1842f <acpiFindTables+0x1ea>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:82
           printk(" table not found\n", lRSDPPtr);
   182de:	83 ec 08             	sub    esp,0x8
   182e1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   182e4:	68 01 2b 08 00       	push   0x82b01
   182e9:	e8 c9 ed 00 00       	call   270b7 <printk>
   182ee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:84
#endif
        return;
   182f1:	e9 39 01 00 00       	jmp    1842f <acpiFindTables+0x1ea>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:86
    }
    lRSDPTable=(acpiRSDPHeader_t*)lRSDPBaseAddress;
   182f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   182f9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:88
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   182fc:	a1 38 03 12 00       	mov    eax,ds:0x120338
   18301:	25 00 04 00 00       	and    eax,0x400
   18306:	85 c0                	test   eax,eax
   18308:	74 42                	je     1834c <acpiFindTables+0x107>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:90
    {
        printk(" table found at 0x%08X\n", lRSDPBaseAddress);
   1830a:	83 ec 08             	sub    esp,0x8
   1830d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   18310:	68 13 2b 08 00       	push   0x82b13
   18315:	e8 9d ed 00 00       	call   270b7 <printk>
   1831a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:91
        printk("ACPI version %s, RSPD OEM Id: %s\n", lRSDPTable->firstPart.Revision==0?"1.0":"2+", lRSDPTable->firstPart.OEMID);
   1831d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   18320:	8d 50 09             	lea    edx,[eax+0x9]
   18323:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   18326:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   1832a:	84 c0                	test   al,al
   1832c:	75 07                	jne    18335 <acpiFindTables+0xf0>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:91 (discriminator 1)
   1832e:	b8 2b 2b 08 00       	mov    eax,0x82b2b
   18333:	eb 05                	jmp    1833a <acpiFindTables+0xf5>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:91 (discriminator 2)
   18335:	b8 2f 2b 08 00       	mov    eax,0x82b2f
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:91 (discriminator 4)
   1833a:	83 ec 04             	sub    esp,0x4
   1833d:	52                   	push   edx
   1833e:	50                   	push   eax
   1833f:	68 34 2b 08 00       	push   0x82b34
   18344:	e8 6e ed 00 00       	call   270b7 <printk>
   18349:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:93
    }
    if (lRSDPTable->firstPart.Revision==0)
   1834c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1834f:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   18353:	84 c0                	test   al,al
   18355:	75 29                	jne    18380 <acpiFindTables+0x13b>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:95
    {
        lRootSDP=(acpiRSDT_t*)lRSDPTable->firstPart.RsdtAddress;
   18357:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1835a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1835d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:96
        printk("RSDP is at 0x%08X, OEM Id: %s, OSDT=0x%08X\n", lRootSDP, lRootSDP->header.OEMID, lRootSDP->PointerToOtherSDT);
   18360:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18363:	8d 50 24             	lea    edx,[eax+0x24]
   18366:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18369:	83 c0 0a             	add    eax,0xa
   1836c:	52                   	push   edx
   1836d:	50                   	push   eax
   1836e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   18371:	68 58 2b 08 00       	push   0x82b58
   18376:	e8 3c ed 00 00       	call   270b7 <printk>
   1837b:	83 c4 10             	add    esp,0x10
   1837e:	eb 2a                	jmp    183aa <acpiFindTables+0x165>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:100
    }
    else
    {
        lRootSDP=(acpiRSDT_t*)lRSDPTable->XsdtAddress;
   18380:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   18383:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   18386:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   18389:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:101
        printk("RSDP is at 0x%08X, OEM Id: %s, OSDT=0x%08X\n", lRootSDP, lRootSDP->header.OEMID, lRootSDP->PointerToOtherSDT);
   1838c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1838f:	8d 50 24             	lea    edx,[eax+0x24]
   18392:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18395:	83 c0 0a             	add    eax,0xa
   18398:	52                   	push   edx
   18399:	50                   	push   eax
   1839a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1839d:	68 58 2b 08 00       	push   0x82b58
   183a2:	e8 10 ed 00 00       	call   270b7 <printk>
   183a7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:103
    }
    lFADTSDP=acpiFindTable(lRootSDP,"FACP");
   183aa:	83 ec 08             	sub    esp,0x8
   183ad:	68 84 2b 08 00       	push   0x82b84
   183b2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   183b5:	e8 92 fd ff ff       	call   1814c <acpiFindTable>
   183ba:	83 c4 10             	add    esp,0x10
   183bd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:104
    if (lFADTSDP!=NULL)
   183c0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   183c4:	74 2e                	je     183f4 <acpiFindTables+0x1af>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:106
    {
        printk("FACP found at 0x%08X. resetReg=0x%08X\n", lFADTSDP, lFADTSDP->ResetReg);
   183c6:	83 ec 0c             	sub    esp,0xc
   183c9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   183cc:	83 ec 0c             	sub    esp,0xc
   183cf:	89 e2                	mov    edx,esp
   183d1:	8b 48 74             	mov    ecx,DWORD PTR [eax+0x74]
   183d4:	89 0a                	mov    DWORD PTR [edx],ecx
   183d6:	8b 48 78             	mov    ecx,DWORD PTR [eax+0x78]
   183d9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   183dc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
   183df:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
   183e2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   183e5:	68 8c 2b 08 00       	push   0x82b8c
   183ea:	e8 c8 ec 00 00       	call   270b7 <printk>
   183ef:	83 c4 20             	add    esp,0x20
   183f2:	eb 10                	jmp    18404 <acpiFindTables+0x1bf>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:110
    }
    else
    {
        printk("Failed to find FACP table, cannot continue ACPI discovery.\n");
   183f4:	83 ec 0c             	sub    esp,0xc
   183f7:	68 b4 2b 08 00       	push   0x82bb4
   183fc:	e8 b6 ec 00 00       	call   270b7 <printk>
   18401:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:112
    }
    uint32_t* ltemp=acpiFindTable(lFADTSDP,"DSDT");
   18404:	83 ec 08             	sub    esp,0x8
   18407:	68 f0 2b 08 00       	push   0x82bf0
   1840c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1840f:	e8 38 fd ff ff       	call   1814c <acpiFindTable>
   18414:	83 c4 10             	add    esp,0x10
   18417:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:113
    printk("lTemp=0x%08X\n", ltemp);
   1841a:	83 ec 08             	sub    esp,0x8
   1841d:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   18420:	68 f5 2b 08 00       	push   0x82bf5
   18425:	e8 8d ec 00 00       	call   270b7 <printk>
   1842a:	83 c4 10             	add    esp,0x10
   1842d:	eb 01                	jmp    18430 <acpiFindTables+0x1eb>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:84
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
           printk(" table not found\n", lRSDPPtr);
#endif
        return;
   1842f:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:118
    printk("lTemp=0x%08X\n", ltemp);
    
#endif
    
   
}
   18430:	c9                   	leave  
   18431:	c3                   	ret    

00018432 <acpiInitialize>:
acpiInitialize():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:122
    
   
void acpiInitialize()
{
   18432:	55                   	push   ebp
   18433:	89 e5                	mov    ebp,esp
   18435:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:123
    acpiFindTables();
   18438:	e8 08 fe ff ff       	call   18245 <acpiFindTables>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:125
    
}
   1843d:	90                   	nop
   1843e:	c9                   	leave  
   1843f:	c3                   	ret    

00018440 <__get_cpuid_max>:
__get_cpuid_max():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:179
   pointer is non-null, then first four bytes of the signature
   (as found in ebx register) are returned in location pointed by sig.  */

static __inline unsigned int
__get_cpuid_max (unsigned int __ext, unsigned int *__sig)
{
   18440:	55                   	push   ebp
   18441:	89 e5                	mov    ebp,esp
   18443:	53                   	push   ebx
   18444:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:185
  unsigned int __eax, __ebx, __ecx, __edx;

#ifndef __x86_64__
  /* See if we can use cpuid.  On AMD64 we always can.  */
#if __GNUC__ >= 3
  __asm__ ("pushf{l|d}\n\t"
   18447:	9c                   	pushf  
   18448:	9c                   	pushf  
   18449:	5a                   	pop    edx
   1844a:	89 d0                	mov    eax,edx
   1844c:	81 f2 00 00 20 00    	xor    edx,0x200000
   18452:	52                   	push   edx
   18453:	9d                   	popf   
   18454:	9c                   	pushf  
   18455:	5a                   	pop    edx
   18456:	9d                   	popf   
   18457:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   1845a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:214
	   "popfl\n\t"
	   : "=&r" (__eax), "=&r" (__ebx)
	   : "i" (0x00200000));
#endif

  if (!((__eax ^ __ebx) & 0x00200000))
   1845d:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   18460:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
   18463:	25 00 00 20 00       	and    eax,0x200000
   18468:	85 c0                	test   eax,eax
   1846a:	75 07                	jne    18473 <__get_cpuid_max+0x33>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:215
    return 0;
   1846c:	b8 00 00 00 00       	mov    eax,0x0
   18471:	eb 22                	jmp    18495 <__get_cpuid_max+0x55>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:219
#endif

  /* Host supports cpuid.  Return highest supported cpuid input value.  */
  __cpuid (__ext, __eax, __ebx, __ecx, __edx);
   18473:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18476:	0f a2                	cpuid  
   18478:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   1847b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
   1847e:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   18481:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:221

  if (__sig)
   18484:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   18488:	74 08                	je     18492 <__get_cpuid_max+0x52>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:222
    *__sig = __ebx;
   1848a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1848d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   18490:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:224

  return __eax;
   18492:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:225
}
   18495:	83 c4 10             	add    esp,0x10
   18498:	5b                   	pop    ebx
   18499:	5d                   	pop    ebp
   1849a:	c3                   	ret    

0001849b <__get_cpuid>:
__get_cpuid():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:236

static __inline int
__get_cpuid (unsigned int __level,
	     unsigned int *__eax, unsigned int *__ebx,
	     unsigned int *__ecx, unsigned int *__edx)
{
   1849b:	55                   	push   ebp
   1849c:	89 e5                	mov    ebp,esp
   1849e:	56                   	push   esi
   1849f:	53                   	push   ebx
   184a0:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:237
  unsigned int __ext = __level & 0x80000000;
   184a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   184a6:	25 00 00 00 80       	and    eax,0x80000000
   184ab:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:239

  if (__get_cpuid_max (__ext, 0) < __level)
   184ae:	6a 00                	push   0x0
   184b0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   184b3:	e8 88 ff ff ff       	call   18440 <__get_cpuid_max>
   184b8:	83 c4 08             	add    esp,0x8
   184bb:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   184be:	73 07                	jae    184c7 <__get_cpuid+0x2c>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:240
    return 0;
   184c0:	b8 00 00 00 00       	mov    eax,0x0
   184c5:	eb 1e                	jmp    184e5 <__get_cpuid+0x4a>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:242

  __cpuid (__level, *__eax, *__ebx, *__ecx, *__edx);
   184c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   184ca:	0f a2                	cpuid  
   184cc:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
   184cf:	89 06                	mov    DWORD PTR [esi],eax
   184d1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   184d4:	89 18                	mov    DWORD PTR [eax],ebx
   184d6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   184d9:	89 08                	mov    DWORD PTR [eax],ecx
   184db:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   184de:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:243
  return 1;
   184e0:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:244
}
   184e5:	8d 65 f8             	lea    esp,[ebp-0x8]
   184e8:	5b                   	pop    ebx
   184e9:	5e                   	pop    esi
   184ea:	5d                   	pop    ebp
   184eb:	c3                   	ret    

000184ec <rdtsc>:
rdtsc():
/home/yogi/src/os/chrisOS/include/utility.h:55
void reboot(bool waitFirst);
bool pauseDisplay(bool offerToQuit);
#if defined(__i386__)

static __inline__ unsigned long long rdtsc(void)
{
   184ec:	55                   	push   ebp
   184ed:	89 e5                	mov    ebp,esp
   184ef:	83 ec 10             	sub    esp,0x10
   184f2:	0f 31                	rdtsc  
/home/yogi/src/os/chrisOS/include/utility.h:57
    unsigned long long int x;
    __asm__ volatile (".byte 0x0f, 0x31" : "=A" (x));
   184f4:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   184f7:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/chrisOS/include/utility.h:58
    return x;
   184fa:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   184fd:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/include/utility.h:59
}
   18500:	c9                   	leave  
   18501:	c3                   	ret    

00018502 <apicCheckFor>:
apicCheckFor():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:12
 *  and if the local APIC hasn't been disabled in MSRs
 *  note that this requires CPUID to be supported.
 */

extern cpu_t kCPU[];
bool apicCheckFor() {
   18502:	55                   	push   ebp
   18503:	89 e5                	mov    ebp,esp
   18505:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:13
   uint32_t eax=0, edx=0, notused=0;
   18508:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1850f:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   18516:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:14
   __get_cpuid(1, &eax, &notused, &notused, &edx);
   1851d:	8d 45 f8             	lea    eax,[ebp-0x8]
   18520:	50                   	push   eax
   18521:	8d 45 f4             	lea    eax,[ebp-0xc]
   18524:	50                   	push   eax
   18525:	8d 45 f4             	lea    eax,[ebp-0xc]
   18528:	50                   	push   eax
   18529:	8d 45 fc             	lea    eax,[ebp-0x4]
   1852c:	50                   	push   eax
   1852d:	6a 01                	push   0x1
   1852f:	e8 67 ff ff ff       	call   1849b <__get_cpuid>
   18534:	83 c4 14             	add    esp,0x14
/home/yogi/src/os/chrisOS/src/cpu/apic.c:15
   return edx & CPUID_FLAG_APIC;
   18537:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1853a:	25 00 02 00 00       	and    eax,0x200
   1853f:	85 c0                	test   eax,eax
   18541:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOS/src/cpu/apic.c:16
}
   18544:	c9                   	leave  
   18545:	c3                   	ret    

00018546 <acpiGetAPICVersion>:
acpiGetAPICVersion():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:19

uint8_t acpiGetAPICVersion()
{
   18546:	55                   	push   ebp
   18547:	89 e5                	mov    ebp,esp
   18549:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/apic.c:20
    return apicReadRegister(APIC_REGISTER_VERSION);
   1854c:	83 ec 0c             	sub    esp,0xc
   1854f:	6a 30                	push   0x30
   18551:	e8 3f 00 00 00       	call   18595 <apicReadRegister>
   18556:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:21
}
   18559:	c9                   	leave  
   1855a:	c3                   	ret    

0001855b <apciGetAPICID>:
apciGetAPICID():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:24

uint8_t apciGetAPICID(unsigned whichAPIC)
{
   1855b:	55                   	push   ebp
   1855c:	89 e5                	mov    ebp,esp
   1855e:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/apic.c:25
    return apicReadRegister(APIC_REGISTER_APIC_ID_OFFSET);
   18561:	83 ec 0c             	sub    esp,0xc
   18564:	6a 20                	push   0x20
   18566:	e8 2a 00 00 00       	call   18595 <apicReadRegister>
   1856b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:26
}
   1856e:	c9                   	leave  
   1856f:	c3                   	ret    

00018570 <apicGetAPICBase>:
apicGetAPICBase():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:29

uint32_t apicGetAPICBase(void)
{
   18570:	55                   	push   ebp
   18571:	89 e5                	mov    ebp,esp
   18573:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:31
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   18576:	83 ec 04             	sub    esp,0x4
   18579:	8d 45 f0             	lea    eax,[ebp-0x10]
   1857c:	50                   	push   eax
   1857d:	8d 45 f4             	lea    eax,[ebp-0xc]
   18580:	50                   	push   eax
   18581:	6a 1b                	push   0x1b
   18583:	e8 cb 12 00 00       	call   19853 <rdmsr32>
   18588:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:33

   return (eax & 0xfffff000);
   1858b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1858e:	25 00 f0 ff ff       	and    eax,0xfffff000
/home/yogi/src/os/chrisOS/src/cpu/apic.c:34
}
   18593:	c9                   	leave  
   18594:	c3                   	ret    

00018595 <apicReadRegister>:
apicReadRegister():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:37

uint32_t apicReadRegister(uint32_t reg) 
{
   18595:	55                   	push   ebp
   18596:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/cpu/apic.c:38
    return *((volatile uint32_t *) (kCPU[0].registerBase + reg));
   18598:	8b 15 64 03 12 00    	mov    edx,DWORD PTR ds:0x120364
   1859e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   185a1:	01 d0                	add    eax,edx
   185a3:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/cpu/apic.c:39
}
   185a5:	5d                   	pop    ebp
   185a6:	c3                   	ret    

000185a7 <apicWriteRegister>:
apicWriteRegister():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:41

void apicWriteRegister(uint32_t reg, uint32_t value) {
   185a7:	55                   	push   ebp
   185a8:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/cpu/apic.c:42
    *((volatile uint32_t *) (kCPU[0].registerBase + reg)) = value;
   185aa:	8b 15 64 03 12 00    	mov    edx,DWORD PTR ds:0x120364
   185b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   185b3:	01 d0                	add    eax,edx
   185b5:	89 c2                	mov    edx,eax
   185b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   185ba:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/cpu/apic.c:43
}
   185bc:	90                   	nop
   185bd:	5d                   	pop    ebp
   185be:	c3                   	ret    

000185bf <apicSetAPICBase>:
apicSetAPICBase():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:46

/* Set the physical address for local APIC registers */
void apicSetAPICBase(uintptr_t apic) {
   185bf:	55                   	push   ebp
   185c0:	89 e5                	mov    ebp,esp
   185c2:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:47
   uint32_t edx = 0;
   185c5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:48
   uint32_t eax = (apic & 0xfffff100) | IA32_APIC_BASE_MSR_ENABLE;
   185cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   185cf:	25 00 f1 ff ff       	and    eax,0xfffff100
   185d4:	80 cc 08             	or     ah,0x8
   185d7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/apic.c:54
 
#ifdef __PHYSICAL_MEMORY_EXTENSION__
   edx = (apic >> 32) & 0x0f;
#endif
 
   wrmsr32(IA32_APIC_BASE_MSR, eax, edx);
   185da:	83 ec 04             	sub    esp,0x4
   185dd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   185e0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   185e3:	6a 1b                	push   0x1b
   185e5:	e8 bf 12 00 00       	call   198a9 <wrmsr32>
   185ea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:55
   kCPU[0].registerBase=apic;
   185ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   185f0:	a3 64 03 12 00       	mov    ds:0x120364,eax
/home/yogi/src/os/chrisOS/src/cpu/apic.c:56
}
   185f5:	90                   	nop
   185f6:	c9                   	leave  
   185f7:	c3                   	ret    

000185f8 <cpu_get_apic_base>:
cpu_get_apic_base():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:62
 
/**
 * Get the physical address of the APIC registers page
 * make sure you map it to virtual memory ;)
 */
uintptr_t cpu_get_apic_base() {
   185f8:	55                   	push   ebp
   185f9:	89 e5                	mov    ebp,esp
   185fb:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:64
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   185fe:	83 ec 04             	sub    esp,0x4
   18601:	8d 45 f0             	lea    eax,[ebp-0x10]
   18604:	50                   	push   eax
   18605:	8d 45 f4             	lea    eax,[ebp-0xc]
   18608:	50                   	push   eax
   18609:	6a 1b                	push   0x1b
   1860b:	e8 43 12 00 00       	call   19853 <rdmsr32>
   18610:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:69
 
#ifdef __PHYSICAL_MEMORY_EXTENSION__
   return (eax & 0xfffff000) | ((edx & 0x0f) << 32);
#else
   return (eax & 0xfffff000);
   18613:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18616:	25 00 f0 ff ff       	and    eax,0xfffff000
/home/yogi/src/os/chrisOS/src/cpu/apic.c:71
#endif
}
   1861b:	c9                   	leave  
   1861c:	c3                   	ret    

0001861d <apicIsEnabled>:
apicIsEnabled():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:73

bool apicIsEnabled() {
   1861d:	55                   	push   ebp
   1861e:	89 e5                	mov    ebp,esp
   18620:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:75
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   18623:	83 ec 04             	sub    esp,0x4
   18626:	8d 45 f0             	lea    eax,[ebp-0x10]
   18629:	50                   	push   eax
   1862a:	8d 45 f4             	lea    eax,[ebp-0xc]
   1862d:	50                   	push   eax
   1862e:	6a 1b                	push   0x1b
   18630:	e8 1e 12 00 00       	call   19853 <rdmsr32>
   18635:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:76
   return (eax & (1<<11)) == (1<11);
   18638:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:77
} 
   1863d:	c9                   	leave  
   1863e:	c3                   	ret    

0001863f <apicEnable>:
apicEnable():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:79

void apicEnable() {
   1863f:	55                   	push   ebp
   18640:	89 e5                	mov    ebp,esp
   18642:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:81
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   18645:	83 ec 04             	sub    esp,0x4
   18648:	8d 45 f0             	lea    eax,[ebp-0x10]
   1864b:	50                   	push   eax
   1864c:	8d 45 f4             	lea    eax,[ebp-0xc]
   1864f:	50                   	push   eax
   18650:	6a 1b                	push   0x1b
   18652:	e8 fc 11 00 00       	call   19853 <rdmsr32>
   18657:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:82
   eax |=IA32_APIC_BASE_MSR_ENABLE;
   1865a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1865d:	80 cc 08             	or     ah,0x8
   18660:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/apic.c:83
   wrmsr32(IA32_APIC_BASE_MSR, eax, edx);
   18663:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   18666:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18669:	83 ec 04             	sub    esp,0x4
   1866c:	52                   	push   edx
   1866d:	50                   	push   eax
   1866e:	6a 1b                	push   0x1b
   18670:	e8 34 12 00 00       	call   198a9 <wrmsr32>
   18675:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:84
} 
   18678:	90                   	nop
   18679:	c9                   	leave  
   1867a:	c3                   	ret    

0001867b <apicDisable>:
apicDisable():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:86

void apicDisable() {
   1867b:	55                   	push   ebp
   1867c:	89 e5                	mov    ebp,esp
   1867e:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:88
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   18681:	83 ec 04             	sub    esp,0x4
   18684:	8d 45 f0             	lea    eax,[ebp-0x10]
   18687:	50                   	push   eax
   18688:	8d 45 f4             	lea    eax,[ebp-0xc]
   1868b:	50                   	push   eax
   1868c:	6a 1b                	push   0x1b
   1868e:	e8 c0 11 00 00       	call   19853 <rdmsr32>
   18693:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:89
   eax&=!IA32_APIC_BASE_MSR_ENABLE;
   18696:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:90
   wrmsr32(IA32_APIC_BASE_MSR, eax, edx);
   1869d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   186a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   186a3:	83 ec 04             	sub    esp,0x4
   186a6:	52                   	push   edx
   186a7:	50                   	push   eax
   186a8:	6a 1b                	push   0x1b
   186aa:	e8 fa 11 00 00       	call   198a9 <wrmsr32>
   186af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:91
} 
   186b2:	90                   	nop
   186b3:	c9                   	leave  
   186b4:	c3                   	ret    

000186b5 <apicGetHZ>:
apicGetHZ():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:92
uint32_t apicGetHZ() {
   186b5:	55                   	push   ebp
   186b6:	89 e5                	mov    ebp,esp
   186b8:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:94

    int timerTimeout=500;
   186bb:	c7 45 f4 f4 01 00 00 	mov    DWORD PTR [ebp-0xc],0x1f4
/home/yogi/src/os/chrisOS/src/cpu/apic.c:106
    apicWriteRegister(APIC_REGISTER_LVT_TIMER, APIC_TIMER_INT_DISABLE);
*/

    // Prepare the PIT to sleep for 10ms (10000µs)

    apicEnable();
   186c2:	e8 78 ff ff ff       	call   1863f <apicEnable>
/home/yogi/src/os/chrisOS/src/cpu/apic.c:107
    apicWriteRegister(APIC_REGISTER_SPURIOUS, 39+APIC_SW_ENABLE);
   186c7:	83 ec 08             	sub    esp,0x8
   186ca:	68 27 01 00 00       	push   0x127
   186cf:	68 f0 00 00 00       	push   0xf0
   186d4:	e8 ce fe ff ff       	call   185a7 <apicWriteRegister>
   186d9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:109
    // Set APIC init counter to -1
    apicWriteRegister(APIC_REGISTER_LVT_TIMER, 32 | APIC_TIMER_MODE_ONESHOT );
   186dc:	83 ec 08             	sub    esp,0x8
   186df:	6a 20                	push   0x20
   186e1:	68 20 03 00 00       	push   0x320
   186e6:	e8 bc fe ff ff       	call   185a7 <apicWriteRegister>
   186eb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:111
    // Tell APIC timer to use divider 16
    apicWriteRegister(APIC_REGISTER_TIMER_DIV, 0x11);
   186ee:	83 ec 08             	sub    esp,0x8
   186f1:	6a 11                	push   0x11
   186f3:	68 e0 03 00 00       	push   0x3e0
   186f8:	e8 aa fe ff ff       	call   185a7 <apicWriteRegister>
   186fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:112
    apicWriteRegister(APIC_REGISTER_TIMER_INITIAL, 0xFFFFFFFF);
   18700:	83 ec 08             	sub    esp,0x8
   18703:	6a ff                	push   0xffffffff
   18705:	68 80 03 00 00       	push   0x380
   1870a:	e8 98 fe ff ff       	call   185a7 <apicWriteRegister>
   1870f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:115

    // Perform PIT-supported sleep
    wait(timerTimeout);
   18712:	83 ec 0c             	sub    esp,0xc
   18715:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   18718:	e8 d9 fb 00 00       	call   282f6 <wait>
   1871d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:117

    apicWriteRegister(APIC_REGISTER_LVT_TIMER, APIC_TIMER_INT_DISABLE);
   18720:	83 ec 08             	sub    esp,0x8
   18723:	68 00 00 01 00       	push   0x10000
   18728:	68 20 03 00 00       	push   0x320
   1872d:	e8 75 fe ff ff       	call   185a7 <apicWriteRegister>
   18732:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:119
    // Now we know how often the APIC timer has ticked in 10ms
    uint64_t ticksPer10ms = 0xFFFFFFFF - apicReadRegister(APIC_REGISTER_TIMER_CURRENT);
   18735:	83 ec 0c             	sub    esp,0xc
   18738:	68 90 03 00 00       	push   0x390
   1873d:	e8 53 fe ff ff       	call   18595 <apicReadRegister>
   18742:	83 c4 10             	add    esp,0x10
   18745:	f7 d0                	not    eax
   18747:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   1874a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:120
    ticksPer10ms=ticksPer10ms/(timerTimeout/10);
   18751:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   18754:	ba 67 66 66 66       	mov    edx,0x66666667
   18759:	89 c8                	mov    eax,ecx
   1875b:	f7 ea                	imul   edx
   1875d:	c1 fa 02             	sar    edx,0x2
   18760:	89 c8                	mov    eax,ecx
   18762:	c1 f8 1f             	sar    eax,0x1f
   18765:	29 c2                	sub    edx,eax
   18767:	89 d0                	mov    eax,edx
   18769:	99                   	cdq    
   1876a:	52                   	push   edx
   1876b:	50                   	push   eax
   1876c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1876f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   18772:	e8 c9 fc 00 00       	call   28440 <__udivdi3>
   18777:	83 c4 10             	add    esp,0x10
   1877a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   1877d:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/src/os/chrisOS/src/cpu/apic.c:124
    
    // Start timer as periodic on IRQ 0, divider 16, with the number of ticks we counted
//    apicWriteRegister(APIC_REGISTER_LVT_TIMER, 32  | APIC_TIMER_MODE_PERIODIC ); //clears the INT DISABLE pin
    apicWriteRegister(APIC_REGISTER_TIMER_DIV, 0x3);
   18780:	83 ec 08             	sub    esp,0x8
   18783:	6a 03                	push   0x3
   18785:	68 e0 03 00 00       	push   0x3e0
   1878a:	e8 18 fe ff ff       	call   185a7 <apicWriteRegister>
   1878f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:125
    apicWriteRegister(APIC_REGISTER_TIMER_INITIAL, ticksPer10ms);
   18792:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18795:	83 ec 08             	sub    esp,0x8
   18798:	50                   	push   eax
   18799:	68 80 03 00 00       	push   0x380
   1879e:	e8 04 fe ff ff       	call   185a7 <apicWriteRegister>
   187a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:126
    return ticksPer10ms;
   187a6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/chrisOS/src/cpu/apic.c:127
}
   187a9:	c9                   	leave  
   187aa:	c3                   	ret    

000187ab <tscGetTicksPerSecond>:
tscGetTicksPerSecond():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:130

int tscGetTicksPerSecond()
{
   187ab:	55                   	push   ebp
   187ac:	89 e5                	mov    ebp,esp
   187ae:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:131
    uint64_t ticksBefore=rdtsc();
   187b1:	e8 36 fd ff ff       	call   184ec <rdtsc>
   187b6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   187b9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/chrisOS/src/cpu/apic.c:132
    wait(1000);
   187bc:	83 ec 0c             	sub    esp,0xc
   187bf:	68 e8 03 00 00       	push   0x3e8
   187c4:	e8 2d fb 00 00       	call   282f6 <wait>
   187c9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:133
    return rdtsc()-ticksBefore;
   187cc:	e8 1b fd ff ff       	call   184ec <rdtsc>
   187d1:	89 c2                	mov    edx,eax
   187d3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   187d6:	29 c2                	sub    edx,eax
   187d8:	89 d0                	mov    eax,edx
/home/yogi/src/os/chrisOS/src/cpu/apic.c:134
   187da:	c9                   	leave  
   187db:	c3                   	ret    

000187dc <bitsSet>:
bitsSet():
/home/yogi/src/os/chrisOS/src/cpu/bits.c:5
#include <stdint.h>
#include <stdbool.h>

bool bitsSet(volatile uint32_t* array, uint32_t bit)
{
   187dc:	55                   	push   ebp
   187dd:	89 e5                	mov    ebp,esp
   187df:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/bits.c:6
    int lRetVal=0;
   187e2:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:7
    __asm__ volatile ("bts [%[array]],%[bit]\nmov eax,0\nsetc al\n" : [array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
   187e9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   187ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   187ef:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   187f2:	0f ab 02             	bts    DWORD PTR [edx],eax
   187f5:	b8 00 00 00 00       	mov    eax,0x0
   187fa:	0f 92 c0             	setb   al
   187fd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/cpu/bits.c:8
    return lRetVal;
   18800:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   18804:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOS/src/cpu/bits.c:9
}
   18807:	c9                   	leave  
   18808:	c3                   	ret    

00018809 <bitsReset>:
bitsReset():
/home/yogi/src/os/chrisOS/src/cpu/bits.c:11
bool bitsReset(volatile uint32_t* array, uint32_t bit)
{
   18809:	55                   	push   ebp
   1880a:	89 e5                	mov    ebp,esp
   1880c:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/bits.c:12
    int lRetVal=0;
   1880f:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:13
    __asm__ volatile ("btr [%[array]],%[bit]\nmov eax,0\nsetc al\n" : [array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
   18816:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18819:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1881c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   1881f:	0f b3 02             	btr    DWORD PTR [edx],eax
   18822:	b8 00 00 00 00       	mov    eax,0x0
   18827:	0f 92 c0             	setb   al
   1882a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/cpu/bits.c:14
    return lRetVal;
   1882d:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   18831:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOS/src/cpu/bits.c:15
}
   18834:	c9                   	leave  
   18835:	c3                   	ret    

00018836 <bitsTest>:
bitsTest():
/home/yogi/src/os/chrisOS/src/cpu/bits.c:17
bool bitsTest(volatile uint32_t* array, uint32_t bit)
{
   18836:	55                   	push   ebp
   18837:	89 e5                	mov    ebp,esp
   18839:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/bits.c:18
    int lRetVal=0;
   1883c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:19
    __asm__ volatile ("bt [%[array]],%[bit]\nmov eax,0\nsetc al\n" :[array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
   18843:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18846:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18849:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   1884c:	0f a3 02             	bt     DWORD PTR [edx],eax
   1884f:	b8 00 00 00 00       	mov    eax,0x0
   18854:	0f 92 c0             	setb   al
   18857:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/cpu/bits.c:20
    return lRetVal;
   1885a:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1885e:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOS/src/cpu/bits.c:21
}
   18861:	c9                   	leave  
   18862:	c3                   	ret    

00018863 <bitsScanF>:
bitsScanF():
/home/yogi/src/os/chrisOS/src/cpu/bits.c:24

int bitsScanF(volatile uint32_t* array)
{
   18863:	55                   	push   ebp
   18864:	89 e5                	mov    ebp,esp
   18866:	53                   	push   ebx
   18867:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/bits.c:25
    int lRetVal=0;
   1886a:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:26
    bool lErr=false;
   18871:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:27
    __asm__ volatile ("bsf %[ret],[%[array]]\nsetz cl\n" : [ret] "=b" (lRetVal), [lErr] "=c" (lErr) : [array] "m" (*array));
   18875:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18878:	0f bc 18             	bsf    ebx,DWORD PTR [eax]
   1887b:	0f 94 c1             	sete   cl
   1887e:	89 c8                	mov    eax,ecx
   18880:	89 da                	mov    edx,ebx
   18882:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   18885:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/cpu/bits.c:28
    if (lErr==false)
   18888:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1888c:	83 f0 01             	xor    eax,0x1
   1888f:	84 c0                	test   al,al
   18891:	74 05                	je     18898 <bitsScanF+0x35>
/home/yogi/src/os/chrisOS/src/cpu/bits.c:29
        return lRetVal;
   18893:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   18896:	eb 05                	jmp    1889d <bitsScanF+0x3a>
/home/yogi/src/os/chrisOS/src/cpu/bits.c:31
    else
        return -1;
   18898:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/cpu/bits.c:32
   1889d:	83 c4 10             	add    esp,0x10
   188a0:	5b                   	pop    ebx
   188a1:	5d                   	pop    ebp
   188a2:	c3                   	ret    
   188a3:	90                   	nop

000188a4 <gdtEntry>:
gdtEntry():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:12
extern struct KERNEL_DATA_SECTION GDT* bootGdt;
extern uint32_t* kGDTSlotAvailableInd;

//Create/modify entries in the protected mode GDT
void HIGH_CODE_SECTION gdtEntry(int entryNo, int base, int limit, char access, char flags,bool inUse)
{
   188a4:	55                   	push   ebp
   188a5:	89 e5                	mov    ebp,esp
   188a7:	83 ec 18             	sub    esp,0x18
   188aa:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
   188ad:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
   188b0:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
   188b3:	88 4d f4             	mov    BYTE PTR [ebp-0xc],cl
   188b6:	88 55 f0             	mov    BYTE PTR [ebp-0x10],dl
   188b9:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:13
    bootGdt[entryNo].base_low        = base & 0xFFFF;
   188bc:	a1 48 04 12 00       	mov    eax,ds:0x120448
   188c1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   188c4:	c1 e2 03             	shl    edx,0x3
   188c7:	01 d0                	add    eax,edx
   188c9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   188cc:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:14
    bootGdt[entryNo].base_middle     = base >> 16 & 0xFF;
   188d0:	a1 48 04 12 00       	mov    eax,ds:0x120448
   188d5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   188d8:	c1 e2 03             	shl    edx,0x3
   188db:	01 d0                	add    eax,edx
   188dd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   188e0:	c1 fa 10             	sar    edx,0x10
   188e3:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:15
    bootGdt[entryNo].base_high       = base >> 24 & 0xFF;
   188e6:	a1 48 04 12 00       	mov    eax,ds:0x120448
   188eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   188ee:	c1 e2 03             	shl    edx,0x3
   188f1:	01 d0                	add    eax,edx
   188f3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   188f6:	c1 ea 18             	shr    edx,0x18
   188f9:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:16
    bootGdt[entryNo].limit_low       = limit & 0xFFFF;
   188fc:	a1 48 04 12 00       	mov    eax,ds:0x120448
   18901:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18904:	c1 e2 03             	shl    edx,0x3
   18907:	01 d0                	add    eax,edx
   18909:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1890c:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:17
    bootGdt[entryNo].flags_and_limit = flags | (limit >> 16 & 0xF);
   1890f:	a1 48 04 12 00       	mov    eax,ds:0x120448
   18914:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18917:	c1 e2 03             	shl    edx,0x3
   1891a:	01 c2                	add    edx,eax
   1891c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1891f:	c1 f8 10             	sar    eax,0x10
   18922:	83 e0 0f             	and    eax,0xf
   18925:	0a 45 f0             	or     al,BYTE PTR [ebp-0x10]
   18928:	88 42 06             	mov    BYTE PTR [edx+0x6],al
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:18
    bootGdt[entryNo].access          = access | 0x10;
   1892b:	a1 48 04 12 00       	mov    eax,ds:0x120448
   18930:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18933:	c1 e2 03             	shl    edx,0x3
   18936:	01 d0                	add    eax,edx
   18938:	0f b6 55 f4          	movzx  edx,BYTE PTR [ebp-0xc]
   1893c:	83 ca 10             	or     edx,0x10
   1893f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:19
    if (inUse)
   18942:	80 7d ec 00          	cmp    BYTE PTR [ebp-0x14],0x0
   18946:	74 17                	je     1895f <gdtEntry+0xbb>
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:20
        bitsReset(kGDTSlotAvailableInd,entryNo);
   18948:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1894b:	a1 f0 03 12 00       	mov    eax,ds:0x1203f0
   18950:	83 ec 08             	sub    esp,0x8
   18953:	52                   	push   edx
   18954:	50                   	push   eax
   18955:	e8 af fe ff ff       	call   18809 <bitsReset>
   1895a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:23
    else
        bitsSet(kGDTSlotAvailableInd,entryNo);
}
   1895d:	eb 15                	jmp    18974 <gdtEntry+0xd0>
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:22
    bootGdt[entryNo].flags_and_limit = flags | (limit >> 16 & 0xF);
    bootGdt[entryNo].access          = access | 0x10;
    if (inUse)
        bitsReset(kGDTSlotAvailableInd,entryNo);
    else
        bitsSet(kGDTSlotAvailableInd,entryNo);
   1895f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18962:	a1 f0 03 12 00       	mov    eax,ds:0x1203f0
   18967:	83 ec 08             	sub    esp,0x8
   1896a:	52                   	push   edx
   1896b:	50                   	push   eax
   1896c:	e8 6b fe ff ff       	call   187dc <bitsSet>
   18971:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:23
}
   18974:	90                   	nop
   18975:	c9                   	leave  
   18976:	c3                   	ret    

00018977 <gdtEntryRM>:
gdtEntryRM():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:27

//Create entries in the real mode GDT table
void HIGH_CODE_SECTION gdtEntryRM(int entryNo, int base, int limit, char access, char flags)
{
   18977:	55                   	push   ebp
   18978:	89 e5                	mov    ebp,esp
   1897a:	83 ec 08             	sub    esp,0x8
   1897d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   18980:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   18983:	88 55 fc             	mov    BYTE PTR [ebp-0x4],dl
   18986:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:28
    rmGdt[entryNo].base_low        = base & 0xFFFF;
   18989:	a1 44 04 12 00       	mov    eax,ds:0x120444
   1898e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18991:	c1 e2 03             	shl    edx,0x3
   18994:	01 d0                	add    eax,edx
   18996:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18999:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:29
    rmGdt[entryNo].base_middle     = base >> 16 & 0xFF;
   1899d:	a1 44 04 12 00       	mov    eax,ds:0x120444
   189a2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   189a5:	c1 e2 03             	shl    edx,0x3
   189a8:	01 d0                	add    eax,edx
   189aa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   189ad:	c1 fa 10             	sar    edx,0x10
   189b0:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:30
    rmGdt[entryNo].base_high       = base >> 24 & 0xFF;
   189b3:	a1 44 04 12 00       	mov    eax,ds:0x120444
   189b8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   189bb:	c1 e2 03             	shl    edx,0x3
   189be:	01 d0                	add    eax,edx
   189c0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   189c3:	c1 ea 18             	shr    edx,0x18
   189c6:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:31
    rmGdt[entryNo].limit_low       = limit & 0xFFFF;
   189c9:	a1 44 04 12 00       	mov    eax,ds:0x120444
   189ce:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   189d1:	c1 e2 03             	shl    edx,0x3
   189d4:	01 d0                	add    eax,edx
   189d6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   189d9:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:32
    rmGdt[entryNo].flags_and_limit = flags | (limit >> 16 & 0xF);
   189dc:	a1 44 04 12 00       	mov    eax,ds:0x120444
   189e1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   189e4:	c1 e2 03             	shl    edx,0x3
   189e7:	01 c2                	add    edx,eax
   189e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   189ec:	c1 f8 10             	sar    eax,0x10
   189ef:	83 e0 0f             	and    eax,0xf
   189f2:	0a 45 f8             	or     al,BYTE PTR [ebp-0x8]
   189f5:	88 42 06             	mov    BYTE PTR [edx+0x6],al
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:33
    rmGdt[entryNo].access          = access | 0x10;
   189f8:	a1 44 04 12 00       	mov    eax,ds:0x120444
   189fd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18a00:	c1 e2 03             	shl    edx,0x3
   18a03:	01 d0                	add    eax,edx
   18a05:	0f b6 55 fc          	movzx  edx,BYTE PTR [ebp-0x4]
   18a09:	83 ca 10             	or     edx,0x10
   18a0c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:34
}
   18a0f:	90                   	nop
   18a10:	c9                   	leave  
   18a11:	c3                   	ret    
   18a12:	66 90                	xchg   ax,ax

00018a14 <identifyCPUFeatures>:
identifyCPUFeatures():
/home/yogi/src/os/chrisOS/src/cpu/identify_cpu_features.c:8

extern cpuid_features_t kCPUFeatures;


void identifyCPUFeatures(cpuid_features_t* cpuFeatures)
{
   18a14:	55                   	push   ebp
   18a15:	89 e5                	mov    ebp,esp
   18a17:	53                   	push   ebx
   18a18:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/identify_cpu_features.c:11
    uint32_t eax, ebx, ecx, edx;

    __cpuid(1, eax, ebx, cpuFeatures->cpuid_feature_bits_2.cpuid_feature_bits_ecx_reg, cpuFeatures->cpuid_feature_bits.cpuid_features_edx_reg);
   18a1b:	b8 01 00 00 00       	mov    eax,0x1
   18a20:	0f a2                	cpuid  
   18a22:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   18a25:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
   18a28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18a2b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
   18a2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18a31:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/identify_cpu_features.c:12
    __cpuid(7, eax, cpuFeatures->cpuid_extended_feature_bits_3.cpuid_extended_feature_bits_ebx_reg , ecx, edx);
   18a33:	b8 07 00 00 00       	mov    eax,0x7
   18a38:	0f a2                	cpuid  
   18a3a:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   18a3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18a40:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
   18a43:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   18a46:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/src/os/chrisOS/src/cpu/identify_cpu_features.c:13
}
   18a49:	90                   	nop
   18a4a:	83 c4 10             	add    esp,0x10
   18a4d:	5b                   	pop    ebx
   18a4e:	5d                   	pop    ebp
   18a4f:	c3                   	ret    

00018a50 <idt_set_gate>:
idt_set_gate():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:10
//extern void idt_load();//Defined in CPU.h

/* Use this function to set an entry in the IDT. Alot simpler
*  than twiddling with the GDT ;) */
void idt_set_gate(struct idt_entry *idt, unsigned short sel, uint32_t base, unsigned char flags)
{
   18a50:	55                   	push   ebp
   18a51:	89 e5                	mov    ebp,esp
   18a53:	83 ec 08             	sub    esp,0x8
   18a56:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18a59:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   18a5c:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   18a60:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/src/cpu/idt.c:11
  idt->base_lo = base & 0xFFFF;
   18a63:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18a66:	89 c2                	mov    edx,eax
   18a68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18a6b:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/cpu/idt.c:12
  idt->sel = sel;
   18a6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18a71:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   18a75:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/src/os/chrisOS/src/cpu/idt.c:13
  idt->flags = flags;
   18a79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18a7c:	0f b6 55 f8          	movzx  edx,BYTE PTR [ebp-0x8]
   18a80:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/src/os/chrisOS/src/cpu/idt.c:14
  idt->base_hi = (base >> 16) & 0xFFFF;}
   18a83:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18a86:	c1 e8 10             	shr    eax,0x10
   18a89:	89 c2                	mov    edx,eax
   18a8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18a8e:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
   18a92:	90                   	nop
   18a93:	c9                   	leave  
   18a94:	c3                   	ret    

00018a95 <idt_install>:
idt_install():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:18

/* Installs the IDT */
void idt_install(struct idt_ptr* idtp)
{
   18a95:	55                   	push   ebp
   18a96:	89 e5                	mov    ebp,esp
   18a98:	57                   	push   edi
   18a99:	56                   	push   esi
   18a9a:	53                   	push   ebx
   18a9b:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/cpu/idt.c:20
    /* Sets the special IDT pointer up, just like in 'gdt.c' */
    idtp->limit = (sizeof (struct idt_entry) * 256) - 1;
   18a9e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18aa1:	66 c7 01 ff 07       	mov    WORD PTR [ecx],0x7ff
/home/yogi/src/os/chrisOS/src/cpu/idt.c:21
    idtp->base = (int)IDT_TABLE_ADDRESS;
   18aa6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18aa9:	c7 41 02 00 30 15 00 	mov    DWORD PTR [ecx+0x2],0x153000
/home/yogi/src/os/chrisOS/src/cpu/idt.c:29
    //memset(&idt, 0, sizeof(struct idt_entry) * 256);

    /* Add any new ISRs to the IDT here using idt_set_gate */

    /* Points the processor's internal register to the new IDT */
    idt_load((uint64_t)((uint64_t)(idtp->limit)<<32 | idtp->base));
   18ab0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18ab3:	0f b7 31             	movzx  esi,WORD PTR [ecx]
   18ab6:	0f b7 ce             	movzx  ecx,si
   18ab9:	bb 00 00 00 00       	mov    ebx,0x0
   18abe:	89 cb                	mov    ebx,ecx
   18ac0:	b9 00 00 00 00       	mov    ecx,0x0
   18ac5:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
   18ac8:	8b 76 02             	mov    esi,DWORD PTR [esi+0x2]
   18acb:	bf 00 00 00 00       	mov    edi,0x0
   18ad0:	89 c8                	mov    eax,ecx
   18ad2:	09 f0                	or     eax,esi
   18ad4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
   18ad7:	89 d8                	mov    eax,ebx
   18ad9:	09 f8                	or     eax,edi
   18adb:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
   18ade:	83 ec 08             	sub    esp,0x8
   18ae1:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   18ae4:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   18ae7:	e8 72 86 fe ff       	call   115e <idt_load>
   18aec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:30
}
   18aef:	90                   	nop
   18af0:	8d 65 f4             	lea    esp,[ebp-0xc]
   18af3:	5b                   	pop    ebx
   18af4:	5e                   	pop    esi
   18af5:	5f                   	pop    edi
   18af6:	5d                   	pop    ebp
   18af7:	c3                   	ret    

00018af8 <idt_init>:
idt_init():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:33

void idt_init(struct idt_ptr* idtp, int remap_offset)
{
   18af8:	55                   	push   ebp
   18af9:	89 e5                	mov    ebp,esp
   18afb:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/idt.c:36
    //CLR 05/02/2016 - Left off here, ITD stuff isn't working, have an endless loop in cpuFunc.s idt_load
/* setting up the exception handlers and timer, keyboard ISRs */
    struct idt_entry* idtTable=(struct idt_entry*)IDT_TABLE_ADDRESS;
   18afe:	c7 45 f0 00 30 15 00 	mov    DWORD PTR [ebp-0x10],0x153000
/home/yogi/src/os/chrisOS/src/cpu/idt.c:37
    idt_set_gate (&idtTable[0], 0x08, (int)&_isr_00_wrapper, ACS_INT); //Move this out of the way of the exception handlers
   18b05:	b8 20 00 01 00       	mov    eax,0x10020
   18b0a:	68 8e 00 00 00       	push   0x8e
   18b0f:	50                   	push   eax
   18b10:	6a 08                	push   0x8
   18b12:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   18b15:	e8 36 ff ff ff       	call   18a50 <idt_set_gate>
   18b1a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:38
    idt_set_gate (&idtTable[0+remap_offset], 0x08, (int)&_irq0_handler, ACS_INT); //Move this out of the way of the exception handlers
   18b1d:	b9 92 05 01 00       	mov    ecx,0x10592
   18b22:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18b25:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18b2c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18b2f:	01 d0                	add    eax,edx
   18b31:	68 8e 00 00 00       	push   0x8e
   18b36:	51                   	push   ecx
   18b37:	6a 08                	push   0x8
   18b39:	50                   	push   eax
   18b3a:	e8 11 ff ff ff       	call   18a50 <idt_set_gate>
   18b3f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:39
    idt_set_gate (&idtTable[1+remap_offset], 0x08, (int)&_isr_01_wrapper, ACS_INT); //move this out of the way of the exception handlers
   18b42:	b9 d9 05 01 00       	mov    ecx,0x105d9
   18b47:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18b4a:	83 c0 01             	add    eax,0x1
   18b4d:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18b54:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18b57:	01 d0                	add    eax,edx
   18b59:	68 8e 00 00 00       	push   0x8e
   18b5e:	51                   	push   ecx
   18b5f:	6a 08                	push   0x8
   18b61:	50                   	push   eax
   18b62:	e8 e9 fe ff ff       	call   18a50 <idt_set_gate>
   18b67:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:40
    idt_set_gate (&idtTable[1], 0x08, (int)&_isr_31_wrapper, ACS_INT); //move this out of the way of the exception handlers
   18b6a:	ba af 04 01 00       	mov    edx,0x104af
   18b6f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18b72:	83 c0 08             	add    eax,0x8
   18b75:	68 8e 00 00 00       	push   0x8e
   18b7a:	52                   	push   edx
   18b7b:	6a 08                	push   0x8
   18b7d:	50                   	push   eax
   18b7e:	e8 cd fe ff ff       	call   18a50 <idt_set_gate>
   18b83:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:41
    idt_set_gate (&idtTable[2], 0x08, (int)&_isr_02_wrapper, ACS_INT);
   18b86:	ba 3c 00 01 00       	mov    edx,0x1003c
   18b8b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18b8e:	83 c0 10             	add    eax,0x10
   18b91:	68 8e 00 00 00       	push   0x8e
   18b96:	52                   	push   edx
   18b97:	6a 08                	push   0x8
   18b99:	50                   	push   eax
   18b9a:	e8 b1 fe ff ff       	call   18a50 <idt_set_gate>
   18b9f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:42
    idt_set_gate (&idtTable[3], 0x08, (int)&_isr_03_wrapper, ACS_INT);
   18ba2:	ba 58 00 01 00       	mov    edx,0x10058
   18ba7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18baa:	83 c0 18             	add    eax,0x18
   18bad:	68 8e 00 00 00       	push   0x8e
   18bb2:	52                   	push   edx
   18bb3:	6a 08                	push   0x8
   18bb5:	50                   	push   eax
   18bb6:	e8 95 fe ff ff       	call   18a50 <idt_set_gate>
   18bbb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:43
    idt_set_gate (&idtTable[4], 0x08, (int)&_isr_04_wrapper, ACS_INT);
   18bbe:	ba 68 00 01 00       	mov    edx,0x10068
   18bc3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18bc6:	83 c0 20             	add    eax,0x20
   18bc9:	68 8e 00 00 00       	push   0x8e
   18bce:	52                   	push   edx
   18bcf:	6a 08                	push   0x8
   18bd1:	50                   	push   eax
   18bd2:	e8 79 fe ff ff       	call   18a50 <idt_set_gate>
   18bd7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:44
    idt_set_gate (&idtTable[5], 0x08, (int)&_isr_05_wrapper, ACS_INT);
   18bda:	ba 84 00 01 00       	mov    edx,0x10084
   18bdf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18be2:	83 c0 28             	add    eax,0x28
   18be5:	68 8e 00 00 00       	push   0x8e
   18bea:	52                   	push   edx
   18beb:	6a 08                	push   0x8
   18bed:	50                   	push   eax
   18bee:	e8 5d fe ff ff       	call   18a50 <idt_set_gate>
   18bf3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:45
    idt_set_gate (&idtTable[0x6], 0x08, (int)&_isr_06_wrapper, ACS_INT);    //Invalid Opcode
   18bf6:	ba a0 00 01 00       	mov    edx,0x100a0
   18bfb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18bfe:	83 c0 30             	add    eax,0x30
   18c01:	68 8e 00 00 00       	push   0x8e
   18c06:	52                   	push   edx
   18c07:	6a 08                	push   0x8
   18c09:	50                   	push   eax
   18c0a:	e8 41 fe ff ff       	call   18a50 <idt_set_gate>
   18c0f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:46
    idt_set_gate (&idtTable[0x7], 0x08, (int)&_isr_07_wrapper, ACS_INT);
   18c12:	ba bc 00 01 00       	mov    edx,0x100bc
   18c17:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18c1a:	83 c0 38             	add    eax,0x38
   18c1d:	68 8e 00 00 00       	push   0x8e
   18c22:	52                   	push   edx
   18c23:	6a 08                	push   0x8
   18c25:	50                   	push   eax
   18c26:	e8 25 fe ff ff       	call   18a50 <idt_set_gate>
   18c2b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:47
    idt_set_gate (&idtTable[0x8], 0x08, (int)&_isr_08_wrapper, ACS_INT);   //Double Fault
   18c2e:	ba d8 00 01 00       	mov    edx,0x100d8
   18c33:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18c36:	83 c0 40             	add    eax,0x40
   18c39:	68 8e 00 00 00       	push   0x8e
   18c3e:	52                   	push   edx
   18c3f:	6a 08                	push   0x8
   18c41:	50                   	push   eax
   18c42:	e8 09 fe ff ff       	call   18a50 <idt_set_gate>
   18c47:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:48
    idt_set_gate (&idtTable[0x9], 0x08, (int)&_isr_09_wrapper, ACS_INT);
   18c4a:	ba 05 01 01 00       	mov    edx,0x10105
   18c4f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18c52:	83 c0 48             	add    eax,0x48
   18c55:	68 8e 00 00 00       	push   0x8e
   18c5a:	52                   	push   edx
   18c5b:	6a 08                	push   0x8
   18c5d:	50                   	push   eax
   18c5e:	e8 ed fd ff ff       	call   18a50 <idt_set_gate>
   18c63:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:49
    idt_set_gate (&idtTable[0xa], 0x08, (int)&_isr_10_wrapper, ACS_INT);
   18c66:	ba 1e 01 01 00       	mov    edx,0x1011e
   18c6b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18c6e:	83 c0 50             	add    eax,0x50
   18c71:	68 8e 00 00 00       	push   0x8e
   18c76:	52                   	push   edx
   18c77:	6a 08                	push   0x8
   18c79:	50                   	push   eax
   18c7a:	e8 d1 fd ff ff       	call   18a50 <idt_set_gate>
   18c7f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:50
    idt_set_gate (&idtTable[0xb], 0x08, (int)&_isr_11_wrapper, ACS_INT);
   18c82:	ba 37 01 01 00       	mov    edx,0x10137
   18c87:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18c8a:	83 c0 58             	add    eax,0x58
   18c8d:	68 8e 00 00 00       	push   0x8e
   18c92:	52                   	push   edx
   18c93:	6a 08                	push   0x8
   18c95:	50                   	push   eax
   18c96:	e8 b5 fd ff ff       	call   18a50 <idt_set_gate>
   18c9b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:51
    idt_set_gate (&idtTable[0xc], 0x08, (int)&_isr_12_wrapper, ACS_INT);
   18c9e:	ba 50 01 01 00       	mov    edx,0x10150
   18ca3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18ca6:	83 c0 60             	add    eax,0x60
   18ca9:	68 8e 00 00 00       	push   0x8e
   18cae:	52                   	push   edx
   18caf:	6a 08                	push   0x8
   18cb1:	50                   	push   eax
   18cb2:	e8 99 fd ff ff       	call   18a50 <idt_set_gate>
   18cb7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:52
    idt_set_gate (&idtTable[0xd/*+remap_offset*/], 0x08, (int)&_isr_13_wrapper, ACS_INT);
   18cba:	ba 69 01 01 00       	mov    edx,0x10169
   18cbf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18cc2:	83 c0 68             	add    eax,0x68
   18cc5:	68 8e 00 00 00       	push   0x8e
   18cca:	52                   	push   edx
   18ccb:	6a 08                	push   0x8
   18ccd:	50                   	push   eax
   18cce:	e8 7d fd ff ff       	call   18a50 <idt_set_gate>
   18cd3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:53
    idt_set_gate (&idtTable[0xe/*+remap_offset*/], 0x08, (int)&_isr_14_wrapper, ACS_INT);   //paging exception
   18cd6:	ba 83 01 01 00       	mov    edx,0x10183
   18cdb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18cde:	83 c0 70             	add    eax,0x70
   18ce1:	68 8e 00 00 00       	push   0x8e
   18ce6:	52                   	push   edx
   18ce7:	6a 08                	push   0x8
   18ce9:	50                   	push   eax
   18cea:	e8 61 fd ff ff       	call   18a50 <idt_set_gate>
   18cef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:54
    idt_set_gate (&idtTable[0xf], 0x08, (int)&_isr_15_wrapper, ACS_INT);
   18cf2:	ba ef 02 01 00       	mov    edx,0x102ef
   18cf7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18cfa:	83 c0 78             	add    eax,0x78
   18cfd:	68 8e 00 00 00       	push   0x8e
   18d02:	52                   	push   edx
   18d03:	6a 08                	push   0x8
   18d05:	50                   	push   eax
   18d06:	e8 45 fd ff ff       	call   18a50 <idt_set_gate>
   18d0b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:55
    idt_set_gate (&idtTable[0x10], 0x08, (int)&_isr_16_wrapper, ACS_INT);
   18d0e:	ba 0b 03 01 00       	mov    edx,0x1030b
   18d13:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18d16:	83 e8 80             	sub    eax,0xffffff80
   18d19:	68 8e 00 00 00       	push   0x8e
   18d1e:	52                   	push   edx
   18d1f:	6a 08                	push   0x8
   18d21:	50                   	push   eax
   18d22:	e8 29 fd ff ff       	call   18a50 <idt_set_gate>
   18d27:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:56
    idt_set_gate (&idtTable[0x11], 0x08, (int)&_isr_17_wrapper, ACS_INT);
   18d2a:	ba 27 03 01 00       	mov    edx,0x10327
   18d2f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18d32:	05 88 00 00 00       	add    eax,0x88
   18d37:	68 8e 00 00 00       	push   0x8e
   18d3c:	52                   	push   edx
   18d3d:	6a 08                	push   0x8
   18d3f:	50                   	push   eax
   18d40:	e8 0b fd ff ff       	call   18a50 <idt_set_gate>
   18d45:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:57
    idt_set_gate (&idtTable[0x12], 0x08, (int)&_isr_18_wrapper, ACS_INT);
   18d48:	ba 43 03 01 00       	mov    edx,0x10343
   18d4d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18d50:	05 90 00 00 00       	add    eax,0x90
   18d55:	68 8e 00 00 00       	push   0x8e
   18d5a:	52                   	push   edx
   18d5b:	6a 08                	push   0x8
   18d5d:	50                   	push   eax
   18d5e:	e8 ed fc ff ff       	call   18a50 <idt_set_gate>
   18d63:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:58
    idt_set_gate (&idtTable[0x13], 0x08, (int)&_isr_19_wrapper, ACS_INT);
   18d66:	ba 5f 03 01 00       	mov    edx,0x1035f
   18d6b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18d6e:	05 98 00 00 00       	add    eax,0x98
   18d73:	68 8e 00 00 00       	push   0x8e
   18d78:	52                   	push   edx
   18d79:	6a 08                	push   0x8
   18d7b:	50                   	push   eax
   18d7c:	e8 cf fc ff ff       	call   18a50 <idt_set_gate>
   18d81:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:59
    idt_set_gate (&idtTable[0x14+remap_offset], 0x08, (int)&_isr_20_wrapper, ACS_INT);   
   18d84:	b9 7b 03 01 00       	mov    ecx,0x1037b
   18d89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18d8c:	83 c0 14             	add    eax,0x14
   18d8f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18d96:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18d99:	01 d0                	add    eax,edx
   18d9b:	68 8e 00 00 00       	push   0x8e
   18da0:	51                   	push   ecx
   18da1:	6a 08                	push   0x8
   18da3:	50                   	push   eax
   18da4:	e8 a7 fc ff ff       	call   18a50 <idt_set_gate>
   18da9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:60
    idt_set_gate (&idtTable[0x15+remap_offset], 0x08, (int)&_isr_21_wrapper, ACS_INT);  //leave this alone because this is the initially remapped keyboard irq
   18dac:	b9 97 03 01 00       	mov    ecx,0x10397
   18db1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18db4:	83 c0 15             	add    eax,0x15
   18db7:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18dbe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18dc1:	01 d0                	add    eax,edx
   18dc3:	68 8e 00 00 00       	push   0x8e
   18dc8:	51                   	push   ecx
   18dc9:	6a 08                	push   0x8
   18dcb:	50                   	push   eax
   18dcc:	e8 7f fc ff ff       	call   18a50 <idt_set_gate>
   18dd1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:61
    idt_set_gate (&idtTable[0x16], 0x08, (int)&_isr_22_wrapper, ACS_INT);
   18dd4:	ba b3 03 01 00       	mov    edx,0x103b3
   18dd9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18ddc:	05 b0 00 00 00       	add    eax,0xb0
   18de1:	68 8e 00 00 00       	push   0x8e
   18de6:	52                   	push   edx
   18de7:	6a 08                	push   0x8
   18de9:	50                   	push   eax
   18dea:	e8 61 fc ff ff       	call   18a50 <idt_set_gate>
   18def:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:62
    idt_set_gate (&idtTable[0x17], 0x08, (int)&_isr_23_wrapper, ACS_INT);
   18df2:	ba cf 03 01 00       	mov    edx,0x103cf
   18df7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18dfa:	05 b8 00 00 00       	add    eax,0xb8
   18dff:	68 8e 00 00 00       	push   0x8e
   18e04:	52                   	push   edx
   18e05:	6a 08                	push   0x8
   18e07:	50                   	push   eax
   18e08:	e8 43 fc ff ff       	call   18a50 <idt_set_gate>
   18e0d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:63
    idt_set_gate (&idtTable[0x18], 0x08, (int)&_isr_24_wrapper, ACS_INT);
   18e10:	ba eb 03 01 00       	mov    edx,0x103eb
   18e15:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18e18:	05 c0 00 00 00       	add    eax,0xc0
   18e1d:	68 8e 00 00 00       	push   0x8e
   18e22:	52                   	push   edx
   18e23:	6a 08                	push   0x8
   18e25:	50                   	push   eax
   18e26:	e8 25 fc ff ff       	call   18a50 <idt_set_gate>
   18e2b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:64
    idt_set_gate (&idtTable[0x19], 0x08, (int)&_isr_25_wrapper, ACS_INT);
   18e2e:	ba 07 04 01 00       	mov    edx,0x10407
   18e33:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18e36:	05 c8 00 00 00       	add    eax,0xc8
   18e3b:	68 8e 00 00 00       	push   0x8e
   18e40:	52                   	push   edx
   18e41:	6a 08                	push   0x8
   18e43:	50                   	push   eax
   18e44:	e8 07 fc ff ff       	call   18a50 <idt_set_gate>
   18e49:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:65
    idt_set_gate (&idtTable[0x1a], 0x08, (int)&_isr_26_wrapper, ACS_INT);
   18e4c:	ba 23 04 01 00       	mov    edx,0x10423
   18e51:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18e54:	05 d0 00 00 00       	add    eax,0xd0
   18e59:	68 8e 00 00 00       	push   0x8e
   18e5e:	52                   	push   edx
   18e5f:	6a 08                	push   0x8
   18e61:	50                   	push   eax
   18e62:	e8 e9 fb ff ff       	call   18a50 <idt_set_gate>
   18e67:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:66
    idt_set_gate (&idtTable[0x1b], 0x08, (int)&_isr_27_wrapper, ACS_INT);
   18e6a:	ba 3f 04 01 00       	mov    edx,0x1043f
   18e6f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18e72:	05 d8 00 00 00       	add    eax,0xd8
   18e77:	68 8e 00 00 00       	push   0x8e
   18e7c:	52                   	push   edx
   18e7d:	6a 08                	push   0x8
   18e7f:	50                   	push   eax
   18e80:	e8 cb fb ff ff       	call   18a50 <idt_set_gate>
   18e85:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:67
    idt_set_gate (&idtTable[0x1c], 0x08, (int)&_isr_28_wrapper, ACS_INT);
   18e88:	ba 5b 04 01 00       	mov    edx,0x1045b
   18e8d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18e90:	05 e0 00 00 00       	add    eax,0xe0
   18e95:	68 8e 00 00 00       	push   0x8e
   18e9a:	52                   	push   edx
   18e9b:	6a 08                	push   0x8
   18e9d:	50                   	push   eax
   18e9e:	e8 ad fb ff ff       	call   18a50 <idt_set_gate>
   18ea3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:68
    idt_set_gate (&idtTable[0x1d], 0x08, (int)&_isr_29_wrapper, ACS_INT);
   18ea6:	ba 77 04 01 00       	mov    edx,0x10477
   18eab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18eae:	05 e8 00 00 00       	add    eax,0xe8
   18eb3:	68 8e 00 00 00       	push   0x8e
   18eb8:	52                   	push   edx
   18eb9:	6a 08                	push   0x8
   18ebb:	50                   	push   eax
   18ebc:	e8 8f fb ff ff       	call   18a50 <idt_set_gate>
   18ec1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:69
    idt_set_gate (&idtTable[0x1e], 0x08, (int)&_isr_30_wrapper, ACS_INT);
   18ec4:	ba 93 04 01 00       	mov    edx,0x10493
   18ec9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18ecc:	05 f0 00 00 00       	add    eax,0xf0
   18ed1:	68 8e 00 00 00       	push   0x8e
   18ed6:	52                   	push   edx
   18ed7:	6a 08                	push   0x8
   18ed9:	50                   	push   eax
   18eda:	e8 71 fb ff ff       	call   18a50 <idt_set_gate>
   18edf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:70
    idt_set_gate (&idtTable[0x1f], 0x08, (int)&_isr_31_wrapper, ACS_INT);
   18ee2:	ba af 04 01 00       	mov    edx,0x104af
   18ee7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18eea:	05 f8 00 00 00       	add    eax,0xf8
   18eef:	68 8e 00 00 00       	push   0x8e
   18ef4:	52                   	push   edx
   18ef5:	6a 08                	push   0x8
   18ef7:	50                   	push   eax
   18ef8:	e8 53 fb ff ff       	call   18a50 <idt_set_gate>
   18efd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:71
    idt_set_gate (&idtTable[0x20+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //
   18f00:	b9 76 05 01 00       	mov    ecx,0x10576
   18f05:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18f08:	83 c0 20             	add    eax,0x20
   18f0b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18f12:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18f15:	01 d0                	add    eax,edx
   18f17:	68 8e 00 00 00       	push   0x8e
   18f1c:	51                   	push   ecx
   18f1d:	6a 08                	push   0x8
   18f1f:	50                   	push   eax
   18f20:	e8 2b fb ff ff       	call   18a50 <idt_set_gate>
   18f25:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:72
    idt_set_gate (&idtTable[0x21+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //
   18f28:	b9 76 05 01 00       	mov    ecx,0x10576
   18f2d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18f30:	83 c0 21             	add    eax,0x21
   18f33:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18f3a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18f3d:	01 d0                	add    eax,edx
   18f3f:	68 8e 00 00 00       	push   0x8e
   18f44:	51                   	push   ecx
   18f45:	6a 08                	push   0x8
   18f47:	50                   	push   eax
   18f48:	e8 03 fb ff ff       	call   18a50 <idt_set_gate>
   18f4d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:74
    
    for (int cnt=0x22;cnt<0xff;cnt++)
   18f50:	c7 45 f4 22 00 00 00 	mov    DWORD PTR [ebp-0xc],0x22
   18f57:	eb 29                	jmp    18f82 <idt_init+0x48a>
/home/yogi/src/os/chrisOS/src/cpu/idt.c:75 (discriminator 3)
        idt_set_gate (&idtTable[cnt], 0x08, (int)&_isr_32_wrapper, ACS_INT);
   18f59:	b9 76 05 01 00       	mov    ecx,0x10576
   18f5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18f61:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18f68:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18f6b:	01 d0                	add    eax,edx
   18f6d:	68 8e 00 00 00       	push   0x8e
   18f72:	51                   	push   ecx
   18f73:	6a 08                	push   0x8
   18f75:	50                   	push   eax
   18f76:	e8 d5 fa ff ff       	call   18a50 <idt_set_gate>
   18f7b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:74 (discriminator 3)
    idt_set_gate (&idtTable[0x1e], 0x08, (int)&_isr_30_wrapper, ACS_INT);
    idt_set_gate (&idtTable[0x1f], 0x08, (int)&_isr_31_wrapper, ACS_INT);
    idt_set_gate (&idtTable[0x20+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //
    idt_set_gate (&idtTable[0x21+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //
    
    for (int cnt=0x22;cnt<0xff;cnt++)
   18f7e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/idt.c:74 (discriminator 1)
   18f82:	81 7d f4 fe 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xfe
   18f89:	7e ce                	jle    18f59 <idt_init+0x461>
/home/yogi/src/os/chrisOS/src/cpu/idt.c:76
        idt_set_gate (&idtTable[cnt], 0x08, (int)&_isr_32_wrapper, ACS_INT);
    idt_install(idtp);
   18f8b:	83 ec 0c             	sub    esp,0xc
   18f8e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   18f91:	e8 ff fa ff ff       	call   18a95 <idt_install>
   18f96:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:78

}
   18f99:	90                   	nop
   18f9a:	c9                   	leave  
   18f9b:	c3                   	ret    

00018f9c <idt_get_gate>:
idt_get_gate():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:82

//void idt_get_gate(struct idt_entry* idtTable, uint8_t idtIndex, unsigned short *sel, uint32_t *base, unsigned *char flags)
void idt_get_gate(struct idt_entry *idt, uint8_t idtIndex, unsigned short *sel, uint32_t *base, unsigned char *flags)
{
   18f9c:	55                   	push   ebp
   18f9d:	89 e5                	mov    ebp,esp
   18f9f:	83 ec 04             	sub    esp,0x4
   18fa2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18fa5:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/cpu/idt.c:83
    *sel = idt[idtIndex].sel;
   18fa8:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   18fac:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18fb6:	01 d0                	add    eax,edx
   18fb8:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
   18fbc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18fbf:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/cpu/idt.c:84
    *base = (idt[idtIndex].base_hi << 16) | idt[idtIndex].base_lo;
   18fc2:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   18fc6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18fd0:	01 d0                	add    eax,edx
   18fd2:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   18fd6:	0f b7 c0             	movzx  eax,ax
   18fd9:	c1 e0 10             	shl    eax,0x10
   18fdc:	89 c2                	mov    edx,eax
   18fde:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   18fe2:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
   18fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18fec:	01 c8                	add    eax,ecx
   18fee:	0f b7 00             	movzx  eax,WORD PTR [eax]
   18ff1:	0f b7 c0             	movzx  eax,ax
   18ff4:	09 d0                	or     eax,edx
   18ff6:	89 c2                	mov    edx,eax
   18ff8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   18ffb:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/idt.c:85
    *flags = idt[idtIndex].flags;
   18ffd:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   19001:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   19008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1900b:	01 d0                	add    eax,edx
   1900d:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
   19011:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   19014:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/cpu/idt.c:86
}
   19016:	90                   	nop
   19017:	c9                   	leave  
   19018:	c3                   	ret    

00019019 <idt_get_gate_address>:
idt_get_gate_address():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:89

uintptr_t idt_get_gate_address(int vector)
{
   19019:	55                   	push   ebp
   1901a:	89 e5                	mov    ebp,esp
   1901c:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:90
   struct idt_entry* idtTable=(struct idt_entry*)IDT_TABLE_ADDRESS;
   1901f:	c7 45 fc 00 30 15 00 	mov    DWORD PTR [ebp-0x4],0x153000
/home/yogi/src/os/chrisOS/src/cpu/idt.c:94
    unsigned short sel;
    uint32_t base;
    unsigned char flags;
    idt_get_gate(idtTable,vector,&sel,&base,&flags);
   19026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19029:	0f b6 c0             	movzx  eax,al
   1902c:	8d 55 f3             	lea    edx,[ebp-0xd]
   1902f:	52                   	push   edx
   19030:	8d 55 f4             	lea    edx,[ebp-0xc]
   19033:	52                   	push   edx
   19034:	8d 55 fa             	lea    edx,[ebp-0x6]
   19037:	52                   	push   edx
   19038:	50                   	push   eax
   19039:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   1903c:	e8 5b ff ff ff       	call   18f9c <idt_get_gate>
   19041:	83 c4 14             	add    esp,0x14
/home/yogi/src/os/chrisOS/src/cpu/idt.c:95
    return base;
   19044:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/cpu/idt.c:96
   19047:	c9                   	leave  
   19048:	c3                   	ret    
   19049:	66 90                	xchg   ax,ax
   1904b:	90                   	nop

0001904c <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   1904c:	55                   	push   ebp
   1904d:	89 e5                	mov    ebp,esp
   1904f:	83 ec 08             	sub    esp,0x8
   19052:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   19055:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19058:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   1905c:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   1905f:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   19063:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   19067:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   19068:	90                   	nop
   19069:	c9                   	leave  
   1906a:	c3                   	ret    

0001906b <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   1906b:	55                   	push   ebp
   1906c:	89 e5                	mov    ebp,esp
   1906e:	83 ec 14             	sub    esp,0x14
   19071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19074:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   19078:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   1907c:	89 c2                	mov    edx,eax
   1907e:	ec                   	in     al,dx
   1907f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   19082:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   19086:	c9                   	leave  
   19087:	c3                   	ret    

00019088 <irq0_handler>:
irq0_handler():
unsigned volatile char kKeyStatus[11];
extern struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf);
extern void kpagingUpdatePresentFlagA(uint32_t address, bool present);

void irq0_handler()
{
   19088:	55                   	push   ebp
   19089:	89 e5                	mov    ebp,esp
   1908b:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:46
#ifndef DEBUG_NONE
static char currTime[50];
static struct tm theDateTime;
#endif
        *kTicksSinceStart=*kTicksSinceStart+1;
   1908e:	a1 60 02 12 00       	mov    eax,ds:0x120260
   19093:	8b 15 60 02 12 00    	mov    edx,DWORD PTR ds:0x120260
   19099:	8b 12                	mov    edx,DWORD PTR [edx]
   1909b:	83 c2 01             	add    edx,0x1
   1909e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:47
        if (*kTicksSinceStart % kTicksPerSecond == 0)
   190a0:	a1 60 02 12 00       	mov    eax,ds:0x120260
   190a5:	8b 00                	mov    eax,DWORD PTR [eax]
   190a7:	8b 15 80 02 12 00    	mov    edx,DWORD PTR ds:0x120280
   190ad:	89 d1                	mov    ecx,edx
   190af:	ba 00 00 00 00       	mov    edx,0x0
   190b4:	f7 f1                	div    ecx
   190b6:	89 d0                	mov    eax,edx
   190b8:	85 c0                	test   eax,eax
   190ba:	75 0d                	jne    190c9 <irq0_handler+0x41>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:48
            kSystemCurrentTime++;
   190bc:	a1 8c 02 12 00       	mov    eax,ds:0x12028c
   190c1:	83 c0 01             	add    eax,0x1
   190c4:	a3 8c 02 12 00       	mov    ds:0x12028c,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:50
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_EXPANDED_TICK) == DEBUG_EXPANDED_TICK)
   190c9:	a1 38 03 12 00       	mov    eax,ds:0x120338
   190ce:	83 e0 04             	and    eax,0x4
   190d1:	85 c0                	test   eax,eax
   190d3:	0f 84 83 00 00 00    	je     1915c <irq0_handler+0xd4>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:52
        {
            cursorSavePosition();
   190d9:	e8 45 ea ff ff       	call   17b23 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:53
            gmtime_r((time_t*)&kSystemCurrentTime,&theDateTime);
   190de:	83 ec 08             	sub    esp,0x8
   190e1:	68 e0 a4 09 00       	push   0x9a4e0
   190e6:	68 8c 02 12 00       	push   0x12028c
   190eb:	e8 29 e6 00 00       	call   27719 <gmtime_r>
   190f0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:54
            strftime((char*)&currTime, 50, "%m/%d/%Y %H:%M:%S", &theDateTime);
   190f3:	68 e0 a4 09 00       	push   0x9a4e0
   190f8:	68 20 2d 08 00       	push   0x82d20
   190fd:	6a 32                	push   0x32
   190ff:	68 20 a5 09 00       	push   0x9a520
   19104:	e8 a7 75 ff ff       	call   106b0 <strftime>
   19109:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:55
            cursorMoveTo(0,24);
   1910c:	83 ec 08             	sub    esp,0x8
   1910f:	6a 18                	push   0x18
   19111:	6a 00                	push   0x0
   19113:	e8 bf ed ff ff       	call   17ed7 <cursorMoveTo>
   19118:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:56
            printk("The time is currently %s", &currTime);
   1911b:	83 ec 08             	sub    esp,0x8
   1911e:	68 20 a5 09 00       	push   0x9a520
   19123:	68 32 2d 08 00       	push   0x82d32
   19128:	e8 8a df 00 00       	call   270b7 <printk>
   1912d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:57
            cursorMoveTo(65,24);
   19130:	83 ec 08             	sub    esp,0x8
   19133:	6a 18                	push   0x18
   19135:	6a 41                	push   0x41
   19137:	e8 9b ed ff ff       	call   17ed7 <cursorMoveTo>
   1913c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:58
            printk("ticks=%d", *kTicksSinceStart);
   1913f:	a1 60 02 12 00       	mov    eax,ds:0x120260
   19144:	8b 00                	mov    eax,DWORD PTR [eax]
   19146:	83 ec 08             	sub    esp,0x8
   19149:	50                   	push   eax
   1914a:	68 4b 2d 08 00       	push   0x82d4b
   1914f:	e8 63 df 00 00       	call   270b7 <printk>
   19154:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:59
            cursorRestorePosition();
   19157:	e8 13 ea ff ff       	call   17b6f <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:63
        }
#endif
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_TICK) == DEBUG_TICK)
   1915c:	a1 38 03 12 00       	mov    eax,ds:0x120338
   19161:	83 e0 02             	and    eax,0x2
   19164:	85 c0                	test   eax,eax
   19166:	74 68                	je     191d0 <irq0_handler+0x148>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:65
        {
            cursorSavePosition();
   19168:	e8 b6 e9 ff ff       	call   17b23 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:66
            cursorMoveTo(55,SYS_VGA_HEIGHT-1);
   1916d:	83 ec 08             	sub    esp,0x8
   19170:	6a 31                	push   0x31
   19172:	6a 37                	push   0x37
   19174:	e8 5e ed ff ff       	call   17ed7 <cursorMoveTo>
   19179:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:69
            //printf("0x%04X:0x%08X 0x%08X",exceptionCS, exceptionEIP, exceptionFlags);
            //kTermMoveTo(65,0);
            printk("%u",*kTicksSinceStart);
   1917c:	a1 60 02 12 00       	mov    eax,ds:0x120260
   19181:	8b 00                	mov    eax,DWORD PTR [eax]
   19183:	83 ec 08             	sub    esp,0x8
   19186:	50                   	push   eax
   19187:	68 54 2d 08 00       	push   0x82d54
   1918c:	e8 26 df 00 00       	call   270b7 <printk>
   19191:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:70
            printk("-%c-%04X:%08X",(exceptionFlags & 0x200)==0x200?'I':'i',exceptionCS, exceptionEIP);
   19194:	8b 15 f8 01 12 00    	mov    edx,DWORD PTR ds:0x1201f8
   1919a:	a1 fc 01 12 00       	mov    eax,ds:0x1201fc
   1919f:	8b 0d f0 01 12 00    	mov    ecx,DWORD PTR ds:0x1201f0
   191a5:	81 e1 00 02 00 00    	and    ecx,0x200
   191ab:	85 c9                	test   ecx,ecx
   191ad:	74 07                	je     191b6 <irq0_handler+0x12e>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:70 (discriminator 1)
   191af:	b9 49 00 00 00       	mov    ecx,0x49
   191b4:	eb 05                	jmp    191bb <irq0_handler+0x133>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:70 (discriminator 2)
   191b6:	b9 69 00 00 00       	mov    ecx,0x69
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:70 (discriminator 4)
   191bb:	52                   	push   edx
   191bc:	50                   	push   eax
   191bd:	51                   	push   ecx
   191be:	68 57 2d 08 00       	push   0x82d57
   191c3:	e8 ef de 00 00       	call   270b7 <printk>
   191c8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:75 (discriminator 4)
            //gmtime_r((time_t*)&kSystemCurrentTime,&theDateTime);
            //strftime((char*)&currTime, 50, "%H:%M:%S", &theDateTime);
            //kTermMoveTo(65,0);
            //printf("%s",currTime);
            cursorRestorePosition();
   191cb:	e8 9f e9 ff ff       	call   17b6f <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:78
        }
#endif
}
   191d0:	90                   	nop
   191d1:	c9                   	leave  
   191d2:	c3                   	ret    

000191d3 <kbd_handler>:
kbd_handler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:81

void kbd_handler()
{
   191d3:	55                   	push   ebp
   191d4:	89 e5                	mov    ebp,esp
   191d6:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:82
    unsigned char lKeyControlVal=0;
   191d9:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:83
    unsigned char rawKey=0;
   191dd:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:84
    unsigned char translatedKeypress=0;
   191e1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:88
    static char currTime[50];
    static struct tm theDateTime;
   
    rawKey = inb(KEYB_DATA_PORT);
   191e5:	6a 60                	push   0x60
   191e7:	e8 7f fe ff ff       	call   1906b <inb>
   191ec:	83 c4 04             	add    esp,0x4
   191ef:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:89
    kKeyChar = rawKey;//& 0x80;
   191f2:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   191f6:	a2 c0 a4 09 00       	mov    ds:0x9a4c0,al
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:91

    __asm__("cli\n");
   191fb:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:93
    
    switch(rawKey)  
   191fc:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   19200:	3d 9d 00 00 00       	cmp    eax,0x9d
   19205:	74 53                	je     1925a <kbd_handler+0x87>
   19207:	3d 9d 00 00 00       	cmp    eax,0x9d
   1920c:	7f 11                	jg     1921f <kbd_handler+0x4c>
   1920e:	83 f8 2a             	cmp    eax,0x2a
   19211:	74 23                	je     19236 <kbd_handler+0x63>
   19213:	83 f8 38             	cmp    eax,0x38
   19216:	74 4e                	je     19266 <kbd_handler+0x93>
   19218:	83 f8 1d             	cmp    eax,0x1d
   1921b:	74 31                	je     1924e <kbd_handler+0x7b>
   1921d:	eb 75                	jmp    19294 <kbd_handler+0xc1>
   1921f:	3d b8 00 00 00       	cmp    eax,0xb8
   19224:	74 4c                	je     19272 <kbd_handler+0x9f>
   19226:	3d ba 00 00 00       	cmp    eax,0xba
   1922b:	74 51                	je     1927e <kbd_handler+0xab>
   1922d:	3d aa 00 00 00       	cmp    eax,0xaa
   19232:	74 0e                	je     19242 <kbd_handler+0x6f>
   19234:	eb 5e                	jmp    19294 <kbd_handler+0xc1>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:95
    {
        case KEY_SHIFT_DN: kKeyStatus[INDEX_SHIFT]=1;break;
   19236:	c6 05 64 65 09 00 01 	mov    BYTE PTR ds:0x96564,0x1
   1923d:	e9 10 03 00 00       	jmp    19552 <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:96
        case KEY_SHIFT_UP: kKeyStatus[INDEX_SHIFT]=0;break;
   19242:	c6 05 64 65 09 00 00 	mov    BYTE PTR ds:0x96564,0x0
   19249:	e9 04 03 00 00       	jmp    19552 <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:97
        case KEY_CTRL_DN: kKeyStatus[INDEX_CTRL]=1;break;
   1924e:	c6 05 65 65 09 00 01 	mov    BYTE PTR ds:0x96565,0x1
   19255:	e9 f8 02 00 00       	jmp    19552 <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:98
        case KEY_CTRL_UP: kKeyStatus[INDEX_CTRL]=0;break;
   1925a:	c6 05 65 65 09 00 00 	mov    BYTE PTR ds:0x96565,0x0
   19261:	e9 ec 02 00 00       	jmp    19552 <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:99
        case KEY_ALT_DN: kKeyStatus[INDEX_ALT]=1;break;
   19266:	c6 05 66 65 09 00 01 	mov    BYTE PTR ds:0x96566,0x1
   1926d:	e9 e0 02 00 00       	jmp    19552 <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:100
        case KEY_ALT_UP: kKeyStatus[INDEX_ALT]=0;break;
   19272:	c6 05 66 65 09 00 00 	mov    BYTE PTR ds:0x96566,0x0
   19279:	e9 d4 02 00 00       	jmp    19552 <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:101
        case KEY_CAPSLOCK_UP: kKeyStatus[INDEX_CAPSLOCK]=!kKeyStatus[INDEX_CAPSLOCK];break;
   1927e:	0f b6 05 67 65 09 00 	movzx  eax,BYTE PTR ds:0x96567
   19285:	84 c0                	test   al,al
   19287:	0f 94 c0             	sete   al
   1928a:	a2 67 65 09 00       	mov    ds:0x96567,al
   1928f:	e9 be 02 00 00       	jmp    19552 <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:109
//        case MAKE_UP: kKeyStatus[INDEX_UP]=0;break;
//        case MAKE_DOWN: kKeyStatus[INDEX_DOWN]=0;break;
       default:
//printk("%02X",rawKey);
           //changed from if rawkey & 0x80, so that keydown triggers the key being input
           if (rawKey==BREAK_RIGHT || rawKey==BREAK_LEFT || rawKey==BREAK_UP || rawKey==BREAK_DOWN)
   19294:	80 7d f5 cd          	cmp    BYTE PTR [ebp-0xb],0xcd
   19298:	74 12                	je     192ac <kbd_handler+0xd9>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:109 (discriminator 1)
   1929a:	80 7d f5 cb          	cmp    BYTE PTR [ebp-0xb],0xcb
   1929e:	74 0c                	je     192ac <kbd_handler+0xd9>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:109 (discriminator 2)
   192a0:	80 7d f5 c8          	cmp    BYTE PTR [ebp-0xb],0xc8
   192a4:	74 06                	je     192ac <kbd_handler+0xd9>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:109 (discriminator 3)
   192a6:	80 7d f5 d0          	cmp    BYTE PTR [ebp-0xb],0xd0
   192aa:	75 2f                	jne    192db <kbd_handler+0x108>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:110
               if (kKeyboardBuffer<(char*)KEYBOARD_BUFFER_ADDRESS+KEYBOARD_BUFFER_SIZE && !kKeyStatus[INDEX_ALT])
   192ac:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   192b1:	3d 2f 25 15 00       	cmp    eax,0x15252f
   192b6:	77 23                	ja     192db <kbd_handler+0x108>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:110 (discriminator 1)
   192b8:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   192bf:	84 c0                	test   al,al
   192c1:	75 18                	jne    192db <kbd_handler+0x108>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:113
               //CLR 01/10/2017: Increment the buffer pointer first
               {    
                   kKeyboardBuffer++;
   192c3:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   192c8:	83 c0 01             	add    eax,0x1
   192cb:	a3 e0 03 12 00       	mov    ds:0x1203e0,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:114
                   *kKeyboardBuffer=rawKey;
   192d0:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   192d5:	0f b6 55 f5          	movzx  edx,BYTE PTR [ebp-0xb]
   192d9:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:116
               }
           if (!(rawKey & 0x80))
   192db:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   192df:	84 c0                	test   al,al
   192e1:	0f 88 6a 02 00 00    	js     19551 <kbd_handler+0x37e>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:120
           {
                //rawKey &= 0x7f;
               //printk("%02X",rawKey); 48=up, 50=down
                 if (kKeyStatus[INDEX_SHIFT] || kKeyStatus[INDEX_CAPSLOCK])
   192e7:	0f b6 05 64 65 09 00 	movzx  eax,BYTE PTR ds:0x96564
   192ee:	84 c0                	test   al,al
   192f0:	75 0b                	jne    192fd <kbd_handler+0x12a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:120 (discriminator 1)
   192f2:	0f b6 05 67 65 09 00 	movzx  eax,BYTE PTR ds:0x96567
   192f9:	84 c0                	test   al,al
   192fb:	74 10                	je     1930d <kbd_handler+0x13a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:122
                 {
                     translatedKeypress=keyboard_map_up[rawKey];
   192fd:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   19301:	0f b6 80 a0 2c 08 00 	movzx  eax,BYTE PTR [eax+0x82ca0]
   19308:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
   1930b:	eb 0e                	jmp    1931b <kbd_handler+0x148>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:125
                 }
                 else
                     translatedKeypress=keyboard_map[rawKey];
   1930d:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   19311:	0f b6 80 20 2c 08 00 	movzx  eax,BYTE PTR [eax+0x82c20]
   19318:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:132
//                 if ((kDebugLevel & DEBUG_KEYBOARD) == DEBUG_KEYBOARD)
//                 {
//                      printf("%u, %u, %c\n",kKeyChar, rawKey, translatedKeypress);
//                 }
#endif
                if (kKeyStatus[INDEX_CTRL])
   1931b:	0f b6 05 65 65 09 00 	movzx  eax,BYTE PTR ds:0x96565
   19322:	84 c0                	test   al,al
   19324:	74 14                	je     1933a <kbd_handler+0x167>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:134
                {
                    printk("^");
   19326:	83 ec 0c             	sub    esp,0xc
   19329:	68 65 2d 08 00       	push   0x82d65
   1932e:	e8 84 dd 00 00       	call   270b7 <printk>
   19333:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:135
                    translatedKeypress-=32;
   19336:	80 6d f7 20          	sub    BYTE PTR [ebp-0x9],0x20
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:137
                }
            if (kKeyboardBuffer<(char*)KEYBOARD_BUFFER_ADDRESS+KEYBOARD_BUFFER_SIZE && !kKeyStatus[INDEX_ALT])
   1933a:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   1933f:	3d 2f 25 15 00       	cmp    eax,0x15252f
   19344:	77 78                	ja     193be <kbd_handler+0x1eb>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:137 (discriminator 1)
   19346:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   1934d:	84 c0                	test   al,al
   1934f:	75 6d                	jne    193be <kbd_handler+0x1eb>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:140
            {
                //CLR 01/10/2017: Increment the buffer pointer first
                {   kKeyboardBuffer++;
   19351:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   19356:	83 c0 01             	add    eax,0x1
   19359:	a3 e0 03 12 00       	mov    ds:0x1203e0,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:141
                    *kKeyboardBuffer=translatedKeypress;
   1935e:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   19363:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   19367:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:144
                }
#ifndef DEBUG_NONE
                 if ((kDebugLevel & DEBUG_KEYBOARD) == DEBUG_KEYBOARD)
   19369:	a1 38 03 12 00       	mov    eax,ds:0x120338
   1936e:	83 e0 10             	and    eax,0x10
   19371:	85 c0                	test   eax,eax
   19373:	74 1c                	je     19391 <kbd_handler+0x1be>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:145
                    printk("kbd_handler: %c-(%08X)\n",translatedKeypress, kKeyboardBuffer);
   19375:	8b 15 e0 03 12 00    	mov    edx,DWORD PTR ds:0x1203e0
   1937b:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1937f:	83 ec 04             	sub    esp,0x4
   19382:	52                   	push   edx
   19383:	50                   	push   eax
   19384:	68 67 2d 08 00       	push   0x82d67
   19389:	e8 29 dd 00 00       	call   270b7 <printk>
   1938e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:147
#endif
                cursorSavePosition();
   19391:	e8 8d e7 ff ff       	call   17b23 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:148
                cursorMoveTo(78,0);
   19396:	83 ec 08             	sub    esp,0x8
   19399:	6a 00                	push   0x0
   1939b:	6a 4e                	push   0x4e
   1939d:	e8 35 eb ff ff       	call   17ed7 <cursorMoveTo>
   193a2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:149
                printk("%c",'k');
   193a5:	83 ec 08             	sub    esp,0x8
   193a8:	6a 6b                	push   0x6b
   193aa:	68 7f 2d 08 00       	push   0x82d7f
   193af:	e8 03 dd 00 00       	call   270b7 <printk>
   193b4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:150
                cursorRestorePosition();
   193b7:	e8 b3 e7 ff ff       	call   17b6f <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:138
                {
                    printk("^");
                    translatedKeypress-=32;
                }
            if (kKeyboardBuffer<(char*)KEYBOARD_BUFFER_ADDRESS+KEYBOARD_BUFFER_SIZE && !kKeyStatus[INDEX_ALT])
            {
   193bc:	eb 4d                	jmp    1940b <kbd_handler+0x238>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:155
                cursorRestorePosition();
            }
            else
            {
#ifndef DEBUG_NONE
                if ((kDebugLevel & DEBUG_KEYBOARD) == DEBUG_KEYBOARD)
   193be:	a1 38 03 12 00       	mov    eax,ds:0x120338
   193c3:	83 e0 10             	and    eax,0x10
   193c6:	85 c0                	test   eax,eax
   193c8:	74 16                	je     193e0 <kbd_handler+0x20d>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:156
                      printk("noRoomForKey: %c\n",kKeyboardBuffer);
   193ca:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   193cf:	83 ec 08             	sub    esp,0x8
   193d2:	50                   	push   eax
   193d3:	68 82 2d 08 00       	push   0x82d82
   193d8:	e8 da dc 00 00       	call   270b7 <printk>
   193dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:158
#endif
                cursorSavePosition();
   193e0:	e8 3e e7 ff ff       	call   17b23 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:159
                cursorMoveTo(78,0);
   193e5:	83 ec 08             	sub    esp,0x8
   193e8:	6a 00                	push   0x0
   193ea:	6a 4e                	push   0x4e
   193ec:	e8 e6 ea ff ff       	call   17ed7 <cursorMoveTo>
   193f1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:160
                printk("%c",'K');
   193f4:	83 ec 08             	sub    esp,0x8
   193f7:	6a 4b                	push   0x4b
   193f9:	68 7f 2d 08 00       	push   0x82d7f
   193fe:	e8 b4 dc 00 00       	call   270b7 <printk>
   19403:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:161
                cursorRestorePosition();
   19406:	e8 64 e7 ff ff       	call   17b6f <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:164
            }
                 //Debug
                 if (kKeyStatus[INDEX_ALT] && translatedKeypress==0x6A)
   1940b:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   19412:	84 c0                	test   al,al
   19414:	74 07                	je     1941d <kbd_handler+0x24a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:164 (discriminator 1)
   19416:	80 7d f7 6a          	cmp    BYTE PTR [ebp-0x9],0x6a
   1941a:	75 01                	jne    1941d <kbd_handler+0x24a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:166
                 {
                     __asm("int 0x3");
   1941c:	cc                   	int3   
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:168
                 }
            if (kKeyStatus[INDEX_ALT] && kKeyStatus[INDEX_CTRL] && translatedKeypress==0xE0)
   1941d:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   19424:	84 c0                	test   al,al
   19426:	74 22                	je     1944a <kbd_handler+0x277>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:168 (discriminator 1)
   19428:	0f b6 05 65 65 09 00 	movzx  eax,BYTE PTR ds:0x96565
   1942f:	84 c0                	test   al,al
   19431:	74 17                	je     1944a <kbd_handler+0x277>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:168 (discriminator 2)
   19433:	80 7d f7 e0          	cmp    BYTE PTR [ebp-0x9],0xe0
   19437:	75 11                	jne    1944a <kbd_handler+0x277>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:170
            {
                translatedKeypress=0;
   19439:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:171
                reboot(false);
   1943d:	83 ec 0c             	sub    esp,0xc
   19440:	6a 00                	push   0x0
   19442:	e8 24 c2 00 00       	call   2566b <reboot>
   19447:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:173
            }
            if (kKeyStatus[INDEX_ALT])
   1944a:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   19451:	84 c0                	test   al,al
   19453:	0f 84 f8 00 00 00    	je     19551 <kbd_handler+0x37e>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:175
            {
                if (translatedKeypress=='c')
   19459:	80 7d f7 63          	cmp    BYTE PTR [ebp-0x9],0x63
   1945d:	75 4f                	jne    194ae <kbd_handler+0x2db>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:177
                {
                    printk("%u",*kTicksSinceStart);
   1945f:	a1 60 02 12 00       	mov    eax,ds:0x120260
   19464:	8b 00                	mov    eax,DWORD PTR [eax]
   19466:	83 ec 08             	sub    esp,0x8
   19469:	50                   	push   eax
   1946a:	68 54 2d 08 00       	push   0x82d54
   1946f:	e8 43 dc 00 00       	call   270b7 <printk>
   19474:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:178
                    printk("-%c-%04X:%08X",(exceptionFlags & 0x200)==0x200?'I':'i',exceptionCS, exceptionEIP);
   19477:	8b 15 f8 01 12 00    	mov    edx,DWORD PTR ds:0x1201f8
   1947d:	a1 fc 01 12 00       	mov    eax,ds:0x1201fc
   19482:	8b 0d f0 01 12 00    	mov    ecx,DWORD PTR ds:0x1201f0
   19488:	81 e1 00 02 00 00    	and    ecx,0x200
   1948e:	85 c9                	test   ecx,ecx
   19490:	74 07                	je     19499 <kbd_handler+0x2c6>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:178 (discriminator 1)
   19492:	b9 49 00 00 00       	mov    ecx,0x49
   19497:	eb 05                	jmp    1949e <kbd_handler+0x2cb>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:178 (discriminator 2)
   19499:	b9 69 00 00 00       	mov    ecx,0x69
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:178 (discriminator 4)
   1949e:	52                   	push   edx
   1949f:	50                   	push   eax
   194a0:	51                   	push   ecx
   194a1:	68 57 2d 08 00       	push   0x82d57
   194a6:	e8 0c dc 00 00       	call   270b7 <printk>
   194ab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:180
                }
                if (translatedKeypress=='b')
   194ae:	80 7d f7 62          	cmp    BYTE PTR [ebp-0x9],0x62
   194b2:	0f 85 83 00 00 00    	jne    1953b <kbd_handler+0x368>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:182
                {
                    cursorSavePosition();
   194b8:	e8 66 e6 ff ff       	call   17b23 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:183
                    gmtime_r((time_t*)&kSystemCurrentTime,&theDateTime);
   194bd:	83 ec 08             	sub    esp,0x8
   194c0:	68 60 a5 09 00       	push   0x9a560
   194c5:	68 8c 02 12 00       	push   0x12028c
   194ca:	e8 4a e2 00 00       	call   27719 <gmtime_r>
   194cf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:184
                    strftime((char*)&currTime, 50, "%m/%d/%Y %H:%M:%S", &theDateTime);
   194d2:	68 60 a5 09 00       	push   0x9a560
   194d7:	68 20 2d 08 00       	push   0x82d20
   194dc:	6a 32                	push   0x32
   194de:	68 a0 a5 09 00       	push   0x9a5a0
   194e3:	e8 c8 71 ff ff       	call   106b0 <strftime>
   194e8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:185
                    cursorMoveTo(0,SYS_VGA_HEIGHT-1);
   194eb:	83 ec 08             	sub    esp,0x8
   194ee:	6a 31                	push   0x31
   194f0:	6a 00                	push   0x0
   194f2:	e8 e0 e9 ff ff       	call   17ed7 <cursorMoveTo>
   194f7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:186
                    printk("The time is currently %s", &currTime);
   194fa:	83 ec 08             	sub    esp,0x8
   194fd:	68 a0 a5 09 00       	push   0x9a5a0
   19502:	68 32 2d 08 00       	push   0x82d32
   19507:	e8 ab db 00 00       	call   270b7 <printk>
   1950c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:187
                    cursorMoveTo(65,SYS_VGA_HEIGHT-1);
   1950f:	83 ec 08             	sub    esp,0x8
   19512:	6a 31                	push   0x31
   19514:	6a 41                	push   0x41
   19516:	e8 bc e9 ff ff       	call   17ed7 <cursorMoveTo>
   1951b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:188
                    printk("ticks=%d", *kTicksSinceStart);
   1951e:	a1 60 02 12 00       	mov    eax,ds:0x120260
   19523:	8b 00                	mov    eax,DWORD PTR [eax]
   19525:	83 ec 08             	sub    esp,0x8
   19528:	50                   	push   eax
   19529:	68 4b 2d 08 00       	push   0x82d4b
   1952e:	e8 84 db 00 00       	call   270b7 <printk>
   19533:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:189
                    cursorRestorePosition();
   19536:	e8 34 e6 ff ff       	call   17b6f <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:191
                }
                if (translatedKeypress=='d')
   1953b:	80 7d f7 64          	cmp    BYTE PTR [ebp-0x9],0x64
   1953f:	75 05                	jne    19546 <kbd_handler+0x373>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:193
                {
                    printDumpedRegs();
   19541:	e8 e7 bd 00 00       	call   2532d <printDumpedRegs>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:195
                }
                if (translatedKeypress=='e')
   19546:	80 7d f7 65          	cmp    BYTE PTR [ebp-0x9],0x65
   1954a:	75 05                	jne    19551 <kbd_handler+0x37e>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:197
                {
                    dumpKernelAddresses();
   1954c:	e8 96 c1 00 00       	call   256e7 <dumpKernelAddresses>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:201
                }
            }
        }
        break;
   19551:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:204
    }
        
    lKeyControlVal = inb(KEYB_CTRL_PORT);
   19552:	83 ec 0c             	sub    esp,0xc
   19555:	6a 61                	push   0x61
   19557:	e8 0f fb ff ff       	call   1906b <inb>
   1955c:	83 c4 10             	add    esp,0x10
   1955f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:205
    lKeyControlVal |= 0x82;
   19562:	80 4d f6 82          	or     BYTE PTR [ebp-0xa],0x82
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:206
    outb(KEYB_CTRL_PORT, lKeyControlVal);
   19566:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1956a:	83 ec 08             	sub    esp,0x8
   1956d:	50                   	push   eax
   1956e:	6a 61                	push   0x61
   19570:	e8 d7 fa ff ff       	call   1904c <outb>
   19575:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:207
    lKeyControlVal &= 0x7f;
   19578:	80 65 f6 7f          	and    BYTE PTR [ebp-0xa],0x7f
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:208
    outb(KEYB_CTRL_PORT, lKeyControlVal);
   1957c:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   19580:	83 ec 08             	sub    esp,0x8
   19583:	50                   	push   eax
   19584:	6a 61                	push   0x61
   19586:	e8 c1 fa ff ff       	call   1904c <outb>
   1958b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:209
    return;
   1958e:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:210
}
   1958f:	c9                   	leave  
   19590:	c3                   	ret    

00019591 <pagingExceptionHandler>:
pagingExceptionHandler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:213

void pagingExceptionHandler()
{
   19591:	55                   	push   ebp
   19592:	89 e5                	mov    ebp,esp
   19594:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:214
    uint32_t lPDEValue=0;
   19597:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:215
    uint32_t lPTEValue=0;
   1959e:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:216
    uint32_t lPDEAddress=0, lPTEAddress=0;
   195a5:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   195ac:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:217
    uint32_t lOldDebugLevel=0;
   195b3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:219

    if (exceptionNumber==0x0e)
   195ba:	0f b7 05 a4 01 12 00 	movzx  eax,WORD PTR ds:0x1201a4
   195c1:	66 83 f8 0e          	cmp    ax,0xe
   195c5:	75 14                	jne    195db <pagingExceptionHandler+0x4a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:221
        //Get the address of the page table entry for the exception
        lPTEAddress=kPagingGet4kPTEntryAddress(exceptionCR2);
   195c7:	a1 00 02 12 00       	mov    eax,ds:0x120200
   195cc:	83 ec 0c             	sub    esp,0xc
   195cf:	50                   	push   eax
   195d0:	e8 a0 7e ff ff       	call   11475 <kPagingGet4kPTEntryAddress>
   195d5:	83 c4 10             	add    esp,0x10
   195d8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:224

#ifndef DEBUG_NONE
    if (!kPagingInitDone)
   195db:	0f b6 05 a1 02 12 00 	movzx  eax,BYTE PTR ds:0x1202a1
   195e2:	83 f0 01             	xor    eax,0x1
   195e5:	84 c0                	test   al,al
   195e7:	74 12                	je     195fb <pagingExceptionHandler+0x6a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:226
    {
        lOldDebugLevel=kDebugLevel;
   195e9:	a1 38 03 12 00       	mov    eax,ds:0x120338
   195ee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:227
        kDebugLevel&=!DEBUG_EXCEPTIONS;
   195f1:	c7 05 38 03 12 00 00 	mov    DWORD PTR ds:0x120338,0x0
   195f8:	00 00 00 
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:229
    }
    if ((kDebugLevel & DEBUG_EXCEPTIONS) == DEBUG_EXCEPTIONS)
   195fb:	a1 38 03 12 00       	mov    eax,ds:0x120338
   19600:	25 00 10 00 00       	and    eax,0x1000
   19605:	85 c0                	test   eax,eax
   19607:	0f 84 99 00 00 00    	je     196a6 <pagingExceptionHandler+0x115>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:231
    {
        lPDEValue=kPagingGet4kPDEntryValue(exceptionCR2);
   1960d:	a1 00 02 12 00       	mov    eax,ds:0x120200
   19612:	83 ec 0c             	sub    esp,0xc
   19615:	50                   	push   eax
   19616:	e8 d1 7d ff ff       	call   113ec <kPagingGet4kPDEntryValue>
   1961b:	83 c4 10             	add    esp,0x10
   1961e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:232
        lPTEValue=kPagingGet4kPTEntryValue(exceptionCR2);
   19621:	a1 00 02 12 00       	mov    eax,ds:0x120200
   19626:	83 ec 0c             	sub    esp,0xc
   19629:	50                   	push   eax
   1962a:	e8 7c 7e ff ff       	call   114ab <kPagingGet4kPTEntryValue>
   1962f:	83 c4 10             	add    esp,0x10
   19632:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:233
        lPDEAddress=kPagingGet4kPDEntryAddress(exceptionCR2);
   19635:	a1 00 02 12 00       	mov    eax,ds:0x120200
   1963a:	83 ec 0c             	sub    esp,0xc
   1963d:	50                   	push   eax
   1963e:	e8 f0 7d ff ff       	call   11433 <kPagingGet4kPDEntryAddress>
   19643:	83 c4 10             	add    esp,0x10
   19646:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:234
        if (exceptionNumber==0x0e)
   19649:	0f b7 05 a4 01 12 00 	movzx  eax,WORD PTR ds:0x1201a4
   19650:	66 83 f8 0e          	cmp    ax,0xe
   19654:	75 16                	jne    1966c <pagingExceptionHandler+0xdb>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:235
          printk("\nPaging handler called for virtual address 0x%02X\n",exceptionCR2);
   19656:	a1 00 02 12 00       	mov    eax,ds:0x120200
   1965b:	83 ec 08             	sub    esp,0x8
   1965e:	50                   	push   eax
   1965f:	68 94 2d 08 00       	push   0x82d94
   19664:	e8 4e da 00 00       	call   270b7 <printk>
   19669:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:236
          printk("PDE@0x%08X=0x%08X, PTE@0x%08X=0x%08X\n", lPDEAddress, lPDEValue, lPTEAddress, lPTEValue);
   1966c:	83 ec 0c             	sub    esp,0xc
   1966f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   19672:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   19675:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   19678:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1967b:	68 c8 2d 08 00       	push   0x82dc8
   19680:	e8 32 da 00 00       	call   270b7 <printk>
   19685:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:237
          printDumpedRegs();
   19688:	e8 a0 bc 00 00       	call   2532d <printDumpedRegs>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:238
          printk("handler called %u times since system start\n",kPagingExceptionsSinceStart+1);
   1968d:	a1 78 02 12 00       	mov    eax,ds:0x120278
   19692:	83 c0 01             	add    eax,0x1
   19695:	83 ec 08             	sub    esp,0x8
   19698:	50                   	push   eax
   19699:	68 f0 2d 08 00       	push   0x82df0
   1969e:	e8 14 da 00 00       	call   270b7 <printk>
   196a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:241
    }
#endif
    if ((exceptionCR2&0xFFFFF000)==0xC0000000 && (!kPagingInitDone))
   196a6:	a1 00 02 12 00       	mov    eax,ds:0x120200
   196ab:	25 00 f0 ff ff       	and    eax,0xfffff000
   196b0:	3d 00 00 00 c0       	cmp    eax,0xc0000000
   196b5:	75 43                	jne    196fa <pagingExceptionHandler+0x169>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:241 (discriminator 1)
   196b7:	0f b6 05 a1 02 12 00 	movzx  eax,BYTE PTR ds:0x1202a1
   196be:	83 f0 01             	xor    eax,0x1
   196c1:	84 c0                	test   al,al
   196c3:	74 35                	je     196fa <pagingExceptionHandler+0x169>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:244
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_EXCEPTIONS) == DEBUG_EXCEPTIONS)
   196c5:	a1 38 03 12 00       	mov    eax,ds:0x120338
   196ca:	25 00 10 00 00       	and    eax,0x1000
   196cf:	85 c0                	test   eax,eax
   196d1:	74 16                	je     196e9 <pagingExceptionHandler+0x158>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:245
            printk("pagingExceptionHandler: Updating readonly flag for 0x%08X\n",exceptionCR2);
   196d3:	a1 00 02 12 00       	mov    eax,ds:0x120200
   196d8:	83 ec 08             	sub    esp,0x8
   196db:	50                   	push   eax
   196dc:	68 1c 2e 08 00       	push   0x82e1c
   196e1:	e8 d1 d9 00 00       	call   270b7 <printk>
   196e6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:247
#endif
        kPagingSetPageReadOnlyFlag((uintptr_t*)lPTEAddress, false);
   196e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   196ec:	83 ec 08             	sub    esp,0x8
   196ef:	6a 00                	push   0x0
   196f1:	50                   	push   eax
   196f2:	e8 f8 7d ff ff       	call   114ef <kPagingSetPageReadOnlyFlag>
   196f7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:250
    }
    
    kPagingExceptionsSinceStart++;
   196fa:	a1 78 02 12 00       	mov    eax,ds:0x120278
   196ff:	83 c0 01             	add    eax,0x1
   19702:	a3 78 02 12 00       	mov    ds:0x120278,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:257
//    if ((kDebugLevel & DEBUG_EXCEPTIONS) == DEBUG_EXCEPTIONS)
//    {
//        waitForKeyboardKey();
//    }
#endif
    __asm__("push eax\n mov eax,0\nmov cr2,eax\npop eax\n  #reset CR2 after paging exception handled");
   19707:	50                   	push   eax
   19708:	b8 00 00 00 00       	mov    eax,0x0
   1970d:	0f 22 d0             	mov    cr2,eax
   19710:	58                   	pop    eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:258
    if (lOldDebugLevel)
   19711:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   19715:	74 08                	je     1971f <pagingExceptionHandler+0x18e>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:259
        kDebugLevel=lOldDebugLevel;
   19717:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1971a:	a3 38 03 12 00       	mov    ds:0x120338,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:260
    if ((!kPagingInitDone) && exceptionCR2==0xC0000000)
   1971f:	0f b6 05 a1 02 12 00 	movzx  eax,BYTE PTR ds:0x1202a1
   19726:	83 f0 01             	xor    eax,0x1
   19729:	84 c0                	test   al,al
   1972b:	74 18                	je     19745 <pagingExceptionHandler+0x1b4>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:260 (discriminator 1)
   1972d:	a1 00 02 12 00       	mov    eax,ds:0x120200
   19732:	3d 00 00 00 c0       	cmp    eax,0xc0000000
   19737:	75 0c                	jne    19745 <pagingExceptionHandler+0x1b4>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:262
    {
        exceptionCR2=0;
   19739:	c7 05 00 02 12 00 00 	mov    DWORD PTR ds:0x120200,0x0
   19740:	00 00 00 
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:263
        return;
   19743:	eb 04                	jmp    19749 <pagingExceptionHandler+0x1b8>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:265
    }
    __asm__("sti\n");
   19745:	fb                   	sti    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:266 (discriminator 1)
    pagingExceptionStop: __asm__("hlt\n"); goto pagingExceptionStop;
   19746:	f4                   	hlt    
   19747:	eb fd                	jmp    19746 <pagingExceptionHandler+0x1b5>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:269
    __asm__("cli");
    __asm__("hlt");
}
   19749:	c9                   	leave  
   1974a:	c3                   	ret    

0001974b <defaultISRHandler>:
defaultISRHandler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:272

void defaultISRHandler()
{
   1974b:	55                   	push   ebp
   1974c:	89 e5                	mov    ebp,esp
   1974e:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:275
    //terminal_clear();
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_EXCEPTIONS) == DEBUG_EXCEPTIONS)
   19751:	a1 38 03 12 00       	mov    eax,ds:0x120338
   19756:	25 00 10 00 00       	and    eax,0x1000
   1975b:	85 c0                	test   eax,eax
   1975d:	74 3e                	je     1979d <defaultISRHandler+0x52>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:277
    {
        printk("Exception handler called for exception # 0x%02x\n\n", exceptionNumber);
   1975f:	0f b7 05 a4 01 12 00 	movzx  eax,WORD PTR ds:0x1201a4
   19766:	0f b7 c0             	movzx  eax,ax
   19769:	83 ec 08             	sub    esp,0x8
   1976c:	50                   	push   eax
   1976d:	68 58 2e 08 00       	push   0x82e58
   19772:	e8 40 d9 00 00       	call   270b7 <printk>
   19777:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:278
        printDumpedRegs();
   1977a:	e8 ae bb 00 00       	call   2532d <printDumpedRegs>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:279
        printd(DEBUG_EXCEPTIONS,"handler called %u times since system start\n",kPagingExceptionsSinceStart+1);
   1977f:	a1 78 02 12 00       	mov    eax,ds:0x120278
   19784:	83 c0 01             	add    eax,0x1
   19787:	83 ec 04             	sub    esp,0x4
   1978a:	50                   	push   eax
   1978b:	68 f0 2d 08 00       	push   0x82df0
   19790:	68 00 10 00 00       	push   0x1000
   19795:	e8 3d d9 00 00       	call   270d7 <printd>
   1979a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:293 (discriminator 1)

//    __asm__("mov eax,%0\nmov ebx,%1\n"::"r" (exceptionAX), "r" (exceptionEIP));
//    return;
    
defaultHandlerLoop:
    goto defaultHandlerLoop;
   1979d:	eb fe                	jmp    1979d <defaultISRHandler+0x52>

0001979f <doubleFaultHandler>:
doubleFaultHandler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:297
}

void doubleFaultHandler()
{
   1979f:	55                   	push   ebp
   197a0:	89 e5                	mov    ebp,esp
   197a2:	53                   	push   ebx
   197a3:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:298
    uint32_t esp = (uint32_t)exceptionSavedESP;
   197a6:	a1 ec 01 12 00       	mov    eax,ds:0x1201ec
   197ab:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:299
        terminal_clear();
   197ae:	e8 0f e4 ff ff       	call   17bc2 <terminal_clear>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:300
        printk("Double Fault for exception %02X, CS:EIP = %04X:%08x, error = %08X\n", exceptionNumber, exceptionCS, exceptionEIP, exceptionCR2);
   197b3:	8b 1d 00 02 12 00    	mov    ebx,DWORD PTR ds:0x120200
   197b9:	8b 0d f8 01 12 00    	mov    ecx,DWORD PTR ds:0x1201f8
   197bf:	8b 15 fc 01 12 00    	mov    edx,DWORD PTR ds:0x1201fc
   197c5:	0f b7 05 a4 01 12 00 	movzx  eax,WORD PTR ds:0x1201a4
   197cc:	0f b7 c0             	movzx  eax,ax
   197cf:	83 ec 0c             	sub    esp,0xc
   197d2:	53                   	push   ebx
   197d3:	51                   	push   ecx
   197d4:	52                   	push   edx
   197d5:	50                   	push   eax
   197d6:	68 8c 2e 08 00       	push   0x82e8c
   197db:	e8 d7 d8 00 00       	call   270b7 <printk>
   197e0:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:301
        printk ("Stack:\n");
   197e3:	83 ec 0c             	sub    esp,0xc
   197e6:	68 cf 2e 08 00       	push   0x82ecf
   197eb:	e8 c7 d8 00 00       	call   270b7 <printk>
   197f0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:302
        for (int cnt=0;cnt<10;cnt++)
   197f3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   197fa:	eb 2b                	jmp    19827 <doubleFaultHandler+0x88>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:304 (discriminator 3)
        {
            printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
   197fc:	a1 a8 01 12 00       	mov    eax,ds:0x1201a8
   19801:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   19804:	c1 e2 02             	shl    edx,0x2
   19807:	01 d0                	add    eax,edx
   19809:	8b 00                	mov    eax,DWORD PTR [eax]
   1980b:	83 ec 04             	sub    esp,0x4
   1980e:	50                   	push   eax
   1980f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   19812:	68 d7 2e 08 00       	push   0x82ed7
   19817:	e8 9b d8 00 00       	call   270b7 <printk>
   1981c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:305 (discriminator 3)
            esp+=4;
   1981f:	83 45 f4 04          	add    DWORD PTR [ebp-0xc],0x4
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:302 (discriminator 3)
{
    uint32_t esp = (uint32_t)exceptionSavedESP;
        terminal_clear();
        printk("Double Fault for exception %02X, CS:EIP = %04X:%08x, error = %08X\n", exceptionNumber, exceptionCS, exceptionEIP, exceptionCR2);
        printk ("Stack:\n");
        for (int cnt=0;cnt<10;cnt++)
   19823:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:302 (discriminator 1)
   19827:	83 7d f0 09          	cmp    DWORD PTR [ebp-0x10],0x9
   1982b:	7e cf                	jle    197fc <doubleFaultHandler+0x5d>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:307
        {
            printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
            esp+=4;
        }
    __asm__("cli");
   1982d:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:308
    __asm__("hlt");
   1982e:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:309
   1982f:	90                   	nop
   19830:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   19833:	c9                   	leave  
   19834:	c3                   	ret    
   19835:	66 90                	xchg   ax,ax
   19837:	90                   	nop

00019838 <rdmsr64>:
rdmsr64():
/home/yogi/src/os/chrisOS/src/cpu/msr.c:4
#include "i386/cpu.h"

uint64_t rdmsr64(unsigned index)
{
   19838:	55                   	push   ebp
   19839:	89 e5                	mov    ebp,esp
   1983b:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/msr.c:7
    unsigned long long ret;

    __asm__ ("rdmsr" : "=A"(ret) : "c"(index));
   1983e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19841:	89 c1                	mov    ecx,eax
   19843:	0f 32                	rdmsr  
   19845:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   19848:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/chrisOS/src/cpu/msr.c:8
    return ret;
   1984b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1984e:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/cpu/msr.c:9
}
   19851:	c9                   	leave  
   19852:	c3                   	ret    

00019853 <rdmsr32>:
rdmsr32():
/home/yogi/src/os/chrisOS/src/cpu/msr.c:12

void rdmsr32(unsigned index,uint32_t* loVal, uint32_t* hiVal)
{
   19853:	55                   	push   ebp
   19854:	89 e5                	mov    ebp,esp
   19856:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/msr.c:13
    unsigned long long lTemp = rdmsr64(index);
   19859:	83 ec 04             	sub    esp,0x4
   1985c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1985f:	e8 d4 ff ff ff       	call   19838 <rdmsr64>
   19864:	83 c4 08             	add    esp,0x8
   19867:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   1986a:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/chrisOS/src/cpu/msr.c:14
    *hiVal = lTemp >> 32;
   1986d:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   19870:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   19873:	89 d0                	mov    eax,edx
   19875:	31 d2                	xor    edx,edx
   19877:	89 c2                	mov    edx,eax
   19879:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1987c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/msr.c:15
    *loVal = lTemp & 0xFFFFFFFF;
   1987e:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   19881:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19884:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/msr.c:16
}
   19886:	90                   	nop
   19887:	c9                   	leave  
   19888:	c3                   	ret    

00019889 <wrmsr64>:
wrmsr64():
/home/yogi/src/os/chrisOS/src/cpu/msr.c:19

void wrmsr64(unsigned index, uint64_t val)
{
   19889:	55                   	push   ebp
   1988a:	89 e5                	mov    ebp,esp
   1988c:	83 ec 08             	sub    esp,0x8
   1988f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19892:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   19895:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   19898:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/cpu/msr.c:20
    __asm__ volatile ("wrmsr" : : "c"(index), "A"(val));
   1989b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   1989e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   198a1:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   198a4:	0f 30                	wrmsr  
/home/yogi/src/os/chrisOS/src/cpu/msr.c:21
}
   198a6:	90                   	nop
   198a7:	c9                   	leave  
   198a8:	c3                   	ret    

000198a9 <wrmsr32>:
wrmsr32():
/home/yogi/src/os/chrisOS/src/cpu/msr.c:24

void wrmsr32(unsigned index, uint32_t loVal, uint32_t hiVal)
{
   198a9:	55                   	push   ebp
   198aa:	89 e5                	mov    ebp,esp
   198ac:	57                   	push   edi
   198ad:	56                   	push   esi
   198ae:	53                   	push   ebx
   198af:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOS/src/cpu/msr.c:27
    //NOTE: hiVal=EDX, loVal=EAX
    //asm volatile ("wrmsr" : : "c"(index), "a"(eaxVal), "d" edxVal);
    wrmsr64(index, ((uint64_t)hiVal << 32) | loVal);
   198b2:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   198b5:	bb 00 00 00 00       	mov    ebx,0x0
   198ba:	89 cb                	mov    ebx,ecx
   198bc:	b9 00 00 00 00       	mov    ecx,0x0
   198c1:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
   198c4:	bf 00 00 00 00       	mov    edi,0x0
   198c9:	89 c8                	mov    eax,ecx
   198cb:	09 f0                	or     eax,esi
   198cd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   198d0:	89 d8                	mov    eax,ebx
   198d2:	09 f8                	or     eax,edi
   198d4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
   198d7:	83 ec 04             	sub    esp,0x4
   198da:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   198dd:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   198e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   198e3:	e8 a1 ff ff ff       	call   19889 <wrmsr64>
   198e8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/msr.c:29
    
}
   198eb:	90                   	nop
   198ec:	8d 65 f4             	lea    esp,[ebp-0xc]
   198ef:	5b                   	pop    ebx
   198f0:	5e                   	pop    esi
   198f1:	5f                   	pop    edi
   198f2:	5d                   	pop    ebp
   198f3:	c3                   	ret    

000198f4 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   198f4:	55                   	push   ebp
   198f5:	89 e5                	mov    ebp,esp
   198f7:	83 ec 08             	sub    esp,0x8
   198fa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   198fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19900:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   19904:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   19907:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   1990b:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   1990f:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   19910:	90                   	nop
   19911:	c9                   	leave  
   19912:	c3                   	ret    

00019913 <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   19913:	55                   	push   ebp
   19914:	89 e5                	mov    ebp,esp
   19916:	83 ec 14             	sub    esp,0x14
   19919:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1991c:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   19920:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   19924:	89 c2                	mov    edx,eax
   19926:	ec                   	in     al,dx
   19927:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   1992a:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   1992e:	c9                   	leave  
   1992f:	c3                   	ret    

00019930 <IRQ_set_mask>:
IRQ_set_mask():
/home/yogi/src/os/chrisOS/src/cpu/ports.c:4
#include "io.h"
#include "i386/bits/types.h"

void IRQ_set_mask(unsigned char IRQline) {
   19930:	55                   	push   ebp
   19931:	89 e5                	mov    ebp,esp
   19933:	53                   	push   ebx
   19934:	83 ec 14             	sub    esp,0x14
   19937:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1993a:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:8
    uint16_t port;
    uint8_t value;
 
    if(IRQline < 8) {
   1993d:	80 7d e8 07          	cmp    BYTE PTR [ebp-0x18],0x7
   19941:	77 08                	ja     1994b <IRQ_set_mask+0x1b>
/home/yogi/src/os/chrisOS/src/cpu/ports.c:9
        port = PIC1_DATA;
   19943:	66 c7 45 fa 21 00    	mov    WORD PTR [ebp-0x6],0x21
   19949:	eb 0a                	jmp    19955 <IRQ_set_mask+0x25>
/home/yogi/src/os/chrisOS/src/cpu/ports.c:11
    } else {
        port = PIC2_DATA;
   1994b:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
/home/yogi/src/os/chrisOS/src/cpu/ports.c:12
        IRQline -= 8;
   19951:	80 6d e8 08          	sub    BYTE PTR [ebp-0x18],0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:14
    }
    value = inb(port) | (1 << IRQline);
   19955:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   19959:	50                   	push   eax
   1995a:	e8 b4 ff ff ff       	call   19913 <inb>
   1995f:	83 c4 04             	add    esp,0x4
   19962:	89 c3                	mov    ebx,eax
   19964:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
   19968:	ba 01 00 00 00       	mov    edx,0x1
   1996d:	89 c1                	mov    ecx,eax
   1996f:	d3 e2                	shl    edx,cl
   19971:	89 d0                	mov    eax,edx
   19973:	09 d8                	or     eax,ebx
   19975:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:15
    outb(port, value);        
   19978:	0f b6 55 f9          	movzx  edx,BYTE PTR [ebp-0x7]
   1997c:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   19980:	52                   	push   edx
   19981:	50                   	push   eax
   19982:	e8 6d ff ff ff       	call   198f4 <outb>
   19987:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:16
}
   1998a:	90                   	nop
   1998b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1998e:	c9                   	leave  
   1998f:	c3                   	ret    

00019990 <IRQ_clear_mask>:
IRQ_clear_mask():
/home/yogi/src/os/chrisOS/src/cpu/ports.c:18
 
void IRQ_clear_mask(unsigned char IRQline) {
   19990:	55                   	push   ebp
   19991:	89 e5                	mov    ebp,esp
   19993:	53                   	push   ebx
   19994:	83 ec 14             	sub    esp,0x14
   19997:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1999a:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:22
    uint16_t port;
    uint8_t value;
 
    if(IRQline < 8) {
   1999d:	80 7d e8 07          	cmp    BYTE PTR [ebp-0x18],0x7
   199a1:	77 08                	ja     199ab <IRQ_clear_mask+0x1b>
/home/yogi/src/os/chrisOS/src/cpu/ports.c:23
        port = PIC1_DATA;
   199a3:	66 c7 45 fa 21 00    	mov    WORD PTR [ebp-0x6],0x21
   199a9:	eb 0a                	jmp    199b5 <IRQ_clear_mask+0x25>
/home/yogi/src/os/chrisOS/src/cpu/ports.c:25
    } else {
        port = PIC2_DATA;
   199ab:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
/home/yogi/src/os/chrisOS/src/cpu/ports.c:26
        IRQline -= 8;
   199b1:	80 6d e8 08          	sub    BYTE PTR [ebp-0x18],0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:28
    }
    value = inb(port) & ~(1 << IRQline);
   199b5:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   199b9:	50                   	push   eax
   199ba:	e8 54 ff ff ff       	call   19913 <inb>
   199bf:	83 c4 04             	add    esp,0x4
   199c2:	89 c2                	mov    edx,eax
   199c4:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
   199c8:	bb 01 00 00 00       	mov    ebx,0x1
   199cd:	89 c1                	mov    ecx,eax
   199cf:	d3 e3                	shl    ebx,cl
   199d1:	89 d8                	mov    eax,ebx
   199d3:	f7 d0                	not    eax
   199d5:	21 d0                	and    eax,edx
   199d7:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:29
    outb(port, value);        
   199da:	0f b6 55 f9          	movzx  edx,BYTE PTR [ebp-0x7]
   199de:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   199e2:	52                   	push   edx
   199e3:	50                   	push   eax
   199e4:	e8 0b ff ff ff       	call   198f4 <outb>
   199e9:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:30
}
   199ec:	90                   	nop
   199ed:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   199f0:	c9                   	leave  
   199f1:	c3                   	ret    

000199f2 <PIC_remap>:
PIC_remap():
/home/yogi/src/os/chrisOS/src/cpu/ports.c:54
	offset1 - vector offset for master PIC
		vectors on the master become offset1..offset1+7
	offset2 - same for slave PIC: offset2..offset2+7
*/
void PIC_remap(int offset1, int offset2)
{
   199f2:	55                   	push   ebp
   199f3:	89 e5                	mov    ebp,esp
   199f5:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/ports.c:57
	unsigned char a1, a2;
 
	a1 = inb(PIC1_DATA);                        // save masks
   199f8:	6a 21                	push   0x21
   199fa:	e8 14 ff ff ff       	call   19913 <inb>
   199ff:	83 c4 04             	add    esp,0x4
   19a02:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:58
	a2 = inb(PIC2_DATA);
   19a05:	68 a1 00 00 00       	push   0xa1
   19a0a:	e8 04 ff ff ff       	call   19913 <inb>
   19a0f:	83 c4 04             	add    esp,0x4
   19a12:	88 45 fe             	mov    BYTE PTR [ebp-0x2],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:60
 
	outb(PIC1_CMD, ICW1_INIT+ICW1_ICW4);  // starts the initialization sequence (in cascade mode)
   19a15:	6a 11                	push   0x11
   19a17:	6a 20                	push   0x20
   19a19:	e8 d6 fe ff ff       	call   198f4 <outb>
   19a1e:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:61
	__asm__("nop;");
   19a21:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:62
	outb(PIC2_CMD, ICW1_INIT+ICW1_ICW4);
   19a22:	6a 11                	push   0x11
   19a24:	68 a0 00 00 00       	push   0xa0
   19a29:	e8 c6 fe ff ff       	call   198f4 <outb>
   19a2e:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:63
	__asm__("nop;");
   19a31:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:64
	outb(PIC1_DATA, offset1);                 // ICW2: Master PIC vector offset
   19a32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19a35:	0f b6 c0             	movzx  eax,al
   19a38:	50                   	push   eax
   19a39:	6a 21                	push   0x21
   19a3b:	e8 b4 fe ff ff       	call   198f4 <outb>
   19a40:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:65
	__asm__("nop;");
   19a43:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:66
	outb(PIC2_DATA, offset2);                 // ICW2: Slave PIC vector offset
   19a44:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19a47:	0f b6 c0             	movzx  eax,al
   19a4a:	50                   	push   eax
   19a4b:	68 a1 00 00 00       	push   0xa1
   19a50:	e8 9f fe ff ff       	call   198f4 <outb>
   19a55:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:67
	__asm__("nop;");
   19a58:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:68
	outb(PIC1_DATA, 4);                       // ICW3: tell Master PIC that there is a slave PIC at IRQ2 (0000 0100)
   19a59:	6a 04                	push   0x4
   19a5b:	6a 21                	push   0x21
   19a5d:	e8 92 fe ff ff       	call   198f4 <outb>
   19a62:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:69
	__asm__("nop;");
   19a65:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:70
	outb(PIC2_DATA, 2);                       // ICW3: tell Slave PIC its cascade identity (0000 0010)
   19a66:	6a 02                	push   0x2
   19a68:	68 a1 00 00 00       	push   0xa1
   19a6d:	e8 82 fe ff ff       	call   198f4 <outb>
   19a72:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:71
	__asm__("nop;");
   19a75:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:73
 
	outb(PIC1_DATA, ICW4_8086);
   19a76:	6a 01                	push   0x1
   19a78:	6a 21                	push   0x21
   19a7a:	e8 75 fe ff ff       	call   198f4 <outb>
   19a7f:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:74
	__asm__("nop;");
   19a82:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:75
	outb(PIC2_DATA, ICW4_8086);
   19a83:	6a 01                	push   0x1
   19a85:	68 a1 00 00 00       	push   0xa1
   19a8a:	e8 65 fe ff ff       	call   198f4 <outb>
   19a8f:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:76
	__asm__("nop;");
   19a92:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:78
 
	outb(PIC1_DATA, a1);   // restore saved masks.
   19a93:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   19a97:	50                   	push   eax
   19a98:	6a 21                	push   0x21
   19a9a:	e8 55 fe ff ff       	call   198f4 <outb>
   19a9f:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:79
	outb(PIC2_DATA, a2);
   19aa2:	0f b6 45 fe          	movzx  eax,BYTE PTR [ebp-0x2]
   19aa6:	50                   	push   eax
   19aa7:	68 a1 00 00 00       	push   0xa1
   19aac:	e8 43 fe ff ff       	call   198f4 <outb>
   19ab1:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:80
   19ab4:	90                   	nop
   19ab5:	c9                   	leave  
   19ab6:	c3                   	ret    
   19ab7:	90                   	nop

00019ab8 <mpScanForConfig>:
mpScanForConfig():
/home/yogi/src/os/chrisOS/src/cpu/smp.c:19
extern uint32_t kDebugLevel;
extern mpConfig_t* kMPConfigTable;
extern uintptr_t* kIOAPICPtr;

bool HIGH_CODE_SECTION mpScanForConfig(int start, int length)
{
   19ab8:	55                   	push   ebp
   19ab9:	89 e5                	mov    ebp,esp
   19abb:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/smp.c:22
    struct mpf_intel* lMP;
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
   19abe:	a1 38 03 12 00       	mov    eax,ds:0x120338
   19ac3:	25 00 08 00 00       	and    eax,0x800
   19ac8:	85 c0                	test   eax,eax
   19aca:	74 1e                	je     19aea <mpScanForConfig+0x32>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:23
        printd(DEBUG_MP,"mpScanForConfig; 0x%08X-->0x%08X\n", start, start+length);
   19acc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   19acf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19ad2:	01 d0                	add    eax,edx
   19ad4:	50                   	push   eax
   19ad5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   19ad8:	68 00 30 08 00       	push   0x83000
   19add:	68 00 08 00 00       	push   0x800
   19ae2:	e8 f0 d5 00 00       	call   270d7 <printd>
   19ae7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:25
#endif
    for (int cnt=start;cnt<start+length;cnt++)
   19aea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19aed:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   19af0:	eb 33                	jmp    19b25 <mpScanForConfig+0x6d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:27
    {
        lMP=(struct mpf_intel*)cnt;
   19af2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   19af5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:28
        if(!strncmp(lMP->signature,"_MP_",4))
   19af8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19afb:	83 ec 04             	sub    esp,0x4
   19afe:	6a 04                	push   0x4
   19b00:	68 22 30 08 00       	push   0x83022
   19b05:	50                   	push   eax
   19b06:	e8 01 81 ff ff       	call   11c0c <strncmp>
   19b0b:	83 c4 10             	add    esp,0x10
   19b0e:	85 c0                	test   eax,eax
   19b10:	75 0f                	jne    19b21 <mpScanForConfig+0x69>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:30
        {
            mp=(struct mpf_intel*)cnt;
   19b12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   19b15:	a3 70 65 09 00       	mov    ds:0x96570,eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:31
            return true;
   19b1a:	b8 01 00 00 00       	mov    eax,0x1
   19b1f:	eb 16                	jmp    19b37 <mpScanForConfig+0x7f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:25 (discriminator 2)
    struct mpf_intel* lMP;
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
        printd(DEBUG_MP,"mpScanForConfig; 0x%08X-->0x%08X\n", start, start+length);
#endif
    for (int cnt=start;cnt<start+length;cnt++)
   19b21:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:25 (discriminator 1)
   19b25:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   19b28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19b2b:	01 d0                	add    eax,edx
   19b2d:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   19b30:	7f c0                	jg     19af2 <mpScanForConfig+0x3a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:34
        {
            mp=(struct mpf_intel*)cnt;
            return true;
        }
    }
    return false;
   19b32:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:35
}
   19b37:	c9                   	leave  
   19b38:	c3                   	ret    

00019b39 <mpFindTables>:
mpFindTables():
/home/yogi/src/os/chrisOS/src/cpu/smp.c:38

bool HIGH_CODE_SECTION  mpFindTables()
{
   19b39:	55                   	push   ebp
   19b3a:	89 e5                	mov    ebp,esp
   19b3c:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/smp.c:39
    uint16_t* lEBDAPtr=(uint16_t*)0x40e;
   19b3f:	c7 45 f0 0e 04 00 00 	mov    DWORD PTR [ebp-0x10],0x40e
/home/yogi/src/os/chrisOS/src/cpu/smp.c:42
    bool lResult;
    
    if (lEBDAPtr != 0)
   19b46:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   19b4a:	74 20                	je     19b6c <mpFindTables+0x33>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:43
        lResult=mpScanForConfig(*lEBDAPtr<<4, 0x400);
   19b4c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19b4f:	0f b7 00             	movzx  eax,WORD PTR [eax]
   19b52:	0f b7 c0             	movzx  eax,ax
   19b55:	c1 e0 04             	shl    eax,0x4
   19b58:	83 ec 08             	sub    esp,0x8
   19b5b:	68 00 04 00 00       	push   0x400
   19b60:	50                   	push   eax
   19b61:	e8 52 ff ff ff       	call   19ab8 <mpScanForConfig>
   19b66:	83 c4 10             	add    esp,0x10
   19b69:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:44
    if (!lResult)
   19b6c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   19b70:	83 f0 01             	xor    eax,0x1
   19b73:	84 c0                	test   al,al
   19b75:	74 62                	je     19bd9 <mpFindTables+0xa0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:45
        if (!mpScanForConfig(0x9fc00, 0x400))
   19b77:	83 ec 08             	sub    esp,0x8
   19b7a:	68 00 04 00 00       	push   0x400
   19b7f:	68 00 fc 09 00       	push   0x9fc00
   19b84:	e8 2f ff ff ff       	call   19ab8 <mpScanForConfig>
   19b89:	83 c4 10             	add    esp,0x10
   19b8c:	83 f0 01             	xor    eax,0x1
   19b8f:	84 c0                	test   al,al
   19b91:	74 46                	je     19bd9 <mpFindTables+0xa0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:46
            if (!mpScanForConfig(0xF0000, 0xFFFF))
   19b93:	83 ec 08             	sub    esp,0x8
   19b96:	68 ff ff 00 00       	push   0xffff
   19b9b:	68 00 00 0f 00       	push   0xf0000
   19ba0:	e8 13 ff ff ff       	call   19ab8 <mpScanForConfig>
   19ba5:	83 c4 10             	add    esp,0x10
   19ba8:	83 f0 01             	xor    eax,0x1
   19bab:	84 c0                	test   al,al
   19bad:	74 2a                	je     19bd9 <mpFindTables+0xa0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:49
            {
#ifndef DEBUG_NONE
                 if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
   19baf:	a1 38 03 12 00       	mov    eax,ds:0x120338
   19bb4:	25 00 08 00 00       	and    eax,0x800
   19bb9:	85 c0                	test   eax,eax
   19bbb:	74 15                	je     19bd2 <mpFindTables+0x99>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:50
                    printd(DEBUG_MP,"MP tables not found, MP not allowed, proceeding as single processor.\n");
   19bbd:	83 ec 08             	sub    esp,0x8
   19bc0:	68 28 30 08 00       	push   0x83028
   19bc5:	68 00 08 00 00       	push   0x800
   19bca:	e8 08 d5 00 00       	call   270d7 <printd>
   19bcf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:52
#endif
                return false;
   19bd2:	b8 00 00 00 00       	mov    eax,0x0
   19bd7:	eb 38                	jmp    19c11 <mpFindTables+0xd8>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:55
            }
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
   19bd9:	a1 38 03 12 00       	mov    eax,ds:0x120338
   19bde:	25 00 08 00 00       	and    eax,0x800
   19be3:	85 c0                	test   eax,eax
   19be5:	74 25                	je     19c0c <mpFindTables+0xd3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:56
        printd(DEBUG_MP,"MP tables found at 0x%08X, spec %c\n", mp, mp->specification);
   19be7:	a1 70 65 09 00       	mov    eax,ds:0x96570
   19bec:	0f b6 40 09          	movzx  eax,BYTE PTR [eax+0x9]
   19bf0:	0f b6 d0             	movzx  edx,al
   19bf3:	a1 70 65 09 00       	mov    eax,ds:0x96570
   19bf8:	52                   	push   edx
   19bf9:	50                   	push   eax
   19bfa:	68 70 30 08 00       	push   0x83070
   19bff:	68 00 08 00 00       	push   0x800
   19c04:	e8 ce d4 00 00       	call   270d7 <printd>
   19c09:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:58
#endif
    return true;
   19c0c:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:60
        
}
   19c11:	c9                   	leave  
   19c12:	c3                   	ret    

00019c13 <printMPTable>:
printMPTable():
/home/yogi/src/os/chrisOS/src/cpu/smp.c:63

void HIGH_CODE_SECTION printMPTable()
{
   19c13:	55                   	push   ebp
   19c14:	89 e5                	mov    ebp,esp
   19c16:	57                   	push   edi
   19c17:	56                   	push   esi
   19c18:	53                   	push   ebx
   19c19:	83 ec 2c             	sub    esp,0x2c
/home/yogi/src/os/chrisOS/src/cpu/smp.c:64
    mpConfig_t* mpptr=kMPConfigTable;
   19c1c:	a1 40 03 12 00       	mov    eax,ds:0x120340
   19c21:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:65
    int cnt=0;
   19c24:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:67
    
    while (mpptr->nextRecAddress!=0xFFFFFFFF)
   19c2b:	e9 d5 03 00 00       	jmp    1a005 <printMPTable+0x3f2>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:69
    {
        switch (mpptr->recType)
   19c30:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19c33:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   19c36:	83 f8 04             	cmp    eax,0x4
   19c39:	0f 87 d7 03 00 00    	ja     1a016 <printMPTable+0x403>
   19c3f:	8b 04 85 d8 31 08 00 	mov    eax,DWORD PTR [eax*4+0x831d8]
   19c46:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72
        {
            case CPU:
                printk("CPU: APICId=%u, Enabled=%s, %s\n", mpptr->cpu.apicid, (mpptr->cpu.cpuflag&0x1)?"yes":"no", (mpptr->cpu.cpuflag&0x2)?"BSP":"");
   19c48:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19c4b:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   19c4f:	0f b6 c0             	movzx  eax,al
   19c52:	83 e0 02             	and    eax,0x2
   19c55:	85 c0                	test   eax,eax
   19c57:	74 07                	je     19c60 <printMPTable+0x4d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 1)
   19c59:	b9 94 30 08 00       	mov    ecx,0x83094
   19c5e:	eb 05                	jmp    19c65 <printMPTable+0x52>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 2)
   19c60:	b9 98 30 08 00       	mov    ecx,0x83098
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 4)
   19c65:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19c68:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   19c6c:	0f b6 c0             	movzx  eax,al
   19c6f:	83 e0 01             	and    eax,0x1
   19c72:	85 c0                	test   eax,eax
   19c74:	74 07                	je     19c7d <printMPTable+0x6a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 5)
   19c76:	ba 99 30 08 00       	mov    edx,0x83099
   19c7b:	eb 05                	jmp    19c82 <printMPTable+0x6f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 6)
   19c7d:	ba 9d 30 08 00       	mov    edx,0x8309d
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 8)
   19c82:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19c85:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   19c89:	0f b6 c0             	movzx  eax,al
   19c8c:	51                   	push   ecx
   19c8d:	52                   	push   edx
   19c8e:	50                   	push   eax
   19c8f:	68 a0 30 08 00       	push   0x830a0
   19c94:	e8 1e d4 00 00       	call   270b7 <printk>
   19c99:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:73 (discriminator 8)
                break;
   19c9c:	e9 16 03 00 00       	jmp    19fb7 <printMPTable+0x3a4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:75
            case BUS:
                printk("BUS: ID=%u, BusType=%c%c%c%c%c%c, Type=%c\n", mpptr->bus.busid, mpptr->bus.bustype[0], mpptr->bus.bustype[1], mpptr->bus.bustype[2], mpptr->bus.bustype[3], mpptr->bus.bustype[4], mpptr->bus.bustype[5], mpptr->bus.type );
   19ca1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19ca4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   19ca7:	0f b6 c8             	movzx  ecx,al
   19caa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19cad:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
   19cb1:	0f b6 c0             	movzx  eax,al
   19cb4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
   19cb7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19cba:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
   19cbe:	0f b6 f0             	movzx  esi,al
   19cc1:	89 75 d0             	mov    DWORD PTR [ebp-0x30],esi
   19cc4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19cc7:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
   19ccb:	0f b6 f8             	movzx  edi,al
   19cce:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19cd1:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
   19cd5:	0f b6 f0             	movzx  esi,al
   19cd8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19cdb:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   19cdf:	0f b6 d8             	movzx  ebx,al
   19ce2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19ce5:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   19ce9:	0f b6 d0             	movzx  edx,al
   19cec:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19cef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   19cf3:	0f b6 c0             	movzx  eax,al
   19cf6:	83 ec 0c             	sub    esp,0xc
   19cf9:	51                   	push   ecx
   19cfa:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   19cfd:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   19d00:	57                   	push   edi
   19d01:	56                   	push   esi
   19d02:	53                   	push   ebx
   19d03:	52                   	push   edx
   19d04:	50                   	push   eax
   19d05:	68 c0 30 08 00       	push   0x830c0
   19d0a:	e8 a8 d3 00 00       	call   270b7 <printk>
   19d0f:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:76
                break;
   19d12:	e9 a0 02 00 00       	jmp    19fb7 <printMPTable+0x3a4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:78
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
   19d17:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d1a:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   19d1e:	0f b6 c0             	movzx  eax,al
   19d21:	83 e0 01             	and    eax,0x1
   19d24:	85 c0                	test   eax,eax
   19d26:	74 07                	je     19d2f <printMPTable+0x11c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:78 (discriminator 1)
   19d28:	b9 99 30 08 00       	mov    ecx,0x83099
   19d2d:	eb 05                	jmp    19d34 <printMPTable+0x121>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:78 (discriminator 2)
   19d2f:	b9 9d 30 08 00       	mov    ecx,0x8309d
/home/yogi/src/os/chrisOS/src/cpu/smp.c:78 (discriminator 4)
   19d34:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d37:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   19d3a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d3d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   19d41:	0f b6 c0             	movzx  eax,al
   19d44:	51                   	push   ecx
   19d45:	52                   	push   edx
   19d46:	50                   	push   eax
   19d47:	68 ec 30 08 00       	push   0x830ec
   19d4c:	e8 66 d3 00 00       	call   270b7 <printk>
   19d51:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:79 (discriminator 4)
                break;
   19d54:	e9 5e 02 00 00       	jmp    19fb7 <printMPTable+0x3a4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   19d59:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d5c:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19d60:	0f b6 c0             	movzx  eax,al
   19d63:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   19d66:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d69:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19d6d:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   19d70:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d73:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19d77:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   19d7a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d7d:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19d81:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:90
                            :mpptr->irqSrc.irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
   19d84:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d87:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19d8b:	0f b7 c0             	movzx  eax,ax
   19d8e:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19d91:	85 c0                	test   eax,eax
   19d93:	74 39                	je     19dce <printMPTable+0x1bb>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:91
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
   19d95:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d98:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19d9c:	0f b7 c0             	movzx  eax,ax
   19d9f:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
   19da2:	83 f8 04             	cmp    eax,0x4
   19da5:	74 20                	je     19dc7 <printMPTable+0x1b4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92 (discriminator 1)
   19da7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19daa:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19dae:	0f b7 c0             	movzx  eax,ax
   19db1:	83 e0 0c             	and    eax,0xc
   19db4:	83 f8 08             	cmp    eax,0x8
   19db7:	75 07                	jne    19dc0 <printMPTable+0x1ad>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92 (discriminator 3)
   19db9:	b9 18 31 08 00       	mov    ecx,0x83118
   19dbe:	eb 13                	jmp    19dd3 <printMPTable+0x1c0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92 (discriminator 4)
   19dc0:	b9 1a 31 08 00       	mov    ecx,0x8311a
   19dc5:	eb 0c                	jmp    19dd3 <printMPTable+0x1c0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92 (discriminator 2)
   19dc7:	b9 1c 31 08 00       	mov    ecx,0x8311c
   19dcc:	eb 05                	jmp    19dd3 <printMPTable+0x1c0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 1)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19dce:	b9 21 31 08 00       	mov    ecx,0x83121
/home/yogi/src/os/chrisOS/src/cpu/smp.c:87 (discriminator 3)
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
                            :mpptr->irqSrc.irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
   19dd3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19dd6:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19dda:	0f b7 c0             	movzx  eax,ax
   19ddd:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 3)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19de0:	85 c0                	test   eax,eax
   19de2:	74 39                	je     19e1d <printMPTable+0x20a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:88
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
                            :mpptr->irqSrc.irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
   19de4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19de7:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19deb:	0f b7 c0             	movzx  eax,ax
   19dee:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   19df1:	83 f8 01             	cmp    eax,0x1
   19df4:	74 20                	je     19e16 <printMPTable+0x203>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89 (discriminator 1)
   19df6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19df9:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19dfd:	0f b7 c0             	movzx  eax,ax
   19e00:	83 e0 03             	and    eax,0x3
   19e03:	83 f8 02             	cmp    eax,0x2
   19e06:	75 07                	jne    19e0f <printMPTable+0x1fc>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89 (discriminator 3)
   19e08:	ba 23 31 08 00       	mov    edx,0x83123
   19e0d:	eb 13                	jmp    19e22 <printMPTable+0x20f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89 (discriminator 4)
   19e0f:	ba 27 31 08 00       	mov    edx,0x83127
   19e14:	eb 0c                	jmp    19e22 <printMPTable+0x20f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89 (discriminator 2)
   19e16:	ba 2d 31 08 00       	mov    edx,0x8312d
   19e1b:	eb 05                	jmp    19e22 <printMPTable+0x20f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 4)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19e1d:	ba 30 31 08 00       	mov    edx,0x83130
/home/yogi/src/os/chrisOS/src/cpu/smp.c:82 (discriminator 6)
                        mpptr->irqSrc.irqtype==0?"INT"                      
   19e22:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19e25:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 6)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19e29:	84 c0                	test   al,al
   19e2b:	74 3d                	je     19e6a <printMPTable+0x257>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:83
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
   19e2d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19e30:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:84
                            :mpptr->irqSrc.irqtype==2?"SMI"
   19e34:	3c 01                	cmp    al,0x1
   19e36:	74 2b                	je     19e63 <printMPTable+0x250>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:84 (discriminator 1)
   19e38:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19e3b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:85 (discriminator 1)
                            :mpptr->irqSrc.irqtype==3?"Ext"
   19e3f:	3c 02                	cmp    al,0x2
   19e41:	74 19                	je     19e5c <printMPTable+0x249>
   19e43:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19e46:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:86 (discriminator 1)
                            :"unk",                                 //iType
   19e4a:	3c 03                	cmp    al,0x3
   19e4c:	75 07                	jne    19e55 <printMPTable+0x242>
   19e4e:	b8 33 31 08 00       	mov    eax,0x83133
   19e53:	eb 1a                	jmp    19e6f <printMPTable+0x25c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:86 (discriminator 2)
   19e55:	b8 37 31 08 00       	mov    eax,0x83137
   19e5a:	eb 13                	jmp    19e6f <printMPTable+0x25c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:85 (discriminator 2)
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
                            :mpptr->irqSrc.irqtype==3?"Ext"
   19e5c:	b8 3b 31 08 00       	mov    eax,0x8313b
   19e61:	eb 0c                	jmp    19e6f <printMPTable+0x25c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:84 (discriminator 2)
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
   19e63:	b8 3f 31 08 00       	mov    eax,0x8313f
   19e68:	eb 05                	jmp    19e6f <printMPTable+0x25c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 7)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19e6a:	b8 43 31 08 00       	mov    eax,0x83143
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 9)
   19e6f:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   19e72:	57                   	push   edi
   19e73:	56                   	push   esi
   19e74:	53                   	push   ebx
   19e75:	51                   	push   ecx
   19e76:	52                   	push   edx
   19e77:	50                   	push   eax
   19e78:	68 48 31 08 00       	push   0x83148
   19e7d:	e8 35 d2 00 00       	call   270b7 <printk>
   19e82:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:94 (discriminator 9)
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
   19e85:	e9 2d 01 00 00       	jmp    19fb7 <printMPTable+0x3a4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   19e8a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19e8d:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19e91:	0f b6 c0             	movzx  eax,al
   19e94:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   19e97:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19e9a:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19e9e:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   19ea1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19ea4:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19ea8:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   19eab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19eae:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19eb2:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:105
                            :mpptr->lintSrc.irqtype==3?"Ext"
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
   19eb5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19eb8:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19ebc:	0f b7 c0             	movzx  eax,ax
   19ebf:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19ec2:	85 c0                	test   eax,eax
   19ec4:	74 39                	je     19eff <printMPTable+0x2ec>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:106
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
   19ec6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19ec9:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19ecd:	0f b7 c0             	movzx  eax,ax
   19ed0:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
   19ed3:	83 f8 04             	cmp    eax,0x4
   19ed6:	74 20                	je     19ef8 <printMPTable+0x2e5>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107 (discriminator 1)
   19ed8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19edb:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19edf:	0f b7 c0             	movzx  eax,ax
   19ee2:	83 e0 0c             	and    eax,0xc
   19ee5:	83 f8 08             	cmp    eax,0x8
   19ee8:	75 07                	jne    19ef1 <printMPTable+0x2de>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107 (discriminator 3)
   19eea:	b9 18 31 08 00       	mov    ecx,0x83118
   19eef:	eb 13                	jmp    19f04 <printMPTable+0x2f1>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107 (discriminator 4)
   19ef1:	b9 1a 31 08 00       	mov    ecx,0x8311a
   19ef6:	eb 0c                	jmp    19f04 <printMPTable+0x2f1>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107 (discriminator 2)
   19ef8:	b9 1c 31 08 00       	mov    ecx,0x8311c
   19efd:	eb 05                	jmp    19f04 <printMPTable+0x2f1>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 1)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19eff:	b9 21 31 08 00       	mov    ecx,0x83121
/home/yogi/src/os/chrisOS/src/cpu/smp.c:102 (discriminator 3)
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
                            :mpptr->lintSrc.irqtype==3?"Ext"
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
   19f04:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f07:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19f0b:	0f b7 c0             	movzx  eax,ax
   19f0e:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 3)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19f11:	85 c0                	test   eax,eax
   19f13:	74 39                	je     19f4e <printMPTable+0x33b>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:103
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
                            :mpptr->lintSrc.irqtype==3?"Ext"
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
   19f15:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f18:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19f1c:	0f b7 c0             	movzx  eax,ax
   19f1f:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   19f22:	83 f8 01             	cmp    eax,0x1
   19f25:	74 20                	je     19f47 <printMPTable+0x334>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104 (discriminator 1)
   19f27:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f2a:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19f2e:	0f b7 c0             	movzx  eax,ax
   19f31:	83 e0 03             	and    eax,0x3
   19f34:	83 f8 02             	cmp    eax,0x2
   19f37:	75 07                	jne    19f40 <printMPTable+0x32d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104 (discriminator 3)
   19f39:	ba 23 31 08 00       	mov    edx,0x83123
   19f3e:	eb 13                	jmp    19f53 <printMPTable+0x340>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104 (discriminator 4)
   19f40:	ba 27 31 08 00       	mov    edx,0x83127
   19f45:	eb 0c                	jmp    19f53 <printMPTable+0x340>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104 (discriminator 2)
   19f47:	ba 2d 31 08 00       	mov    edx,0x8312d
   19f4c:	eb 05                	jmp    19f53 <printMPTable+0x340>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 4)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19f4e:	ba 30 31 08 00       	mov    edx,0x83130
/home/yogi/src/os/chrisOS/src/cpu/smp.c:97 (discriminator 6)
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
   19f53:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f56:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 6)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19f5a:	84 c0                	test   al,al
   19f5c:	74 3d                	je     19f9b <printMPTable+0x388>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:98
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
   19f5e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f61:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:99
                            :mpptr->lintSrc.irqtype==2?"SMI"
   19f65:	3c 01                	cmp    al,0x1
   19f67:	74 2b                	je     19f94 <printMPTable+0x381>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:99 (discriminator 1)
   19f69:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f6c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:100 (discriminator 1)
                            :mpptr->lintSrc.irqtype==3?"Ext"
   19f70:	3c 02                	cmp    al,0x2
   19f72:	74 19                	je     19f8d <printMPTable+0x37a>
   19f74:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f77:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:101 (discriminator 1)
                            :"unk", //iType
   19f7b:	3c 03                	cmp    al,0x3
   19f7d:	75 07                	jne    19f86 <printMPTable+0x373>
   19f7f:	b8 33 31 08 00       	mov    eax,0x83133
   19f84:	eb 1a                	jmp    19fa0 <printMPTable+0x38d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:101 (discriminator 2)
   19f86:	b8 37 31 08 00       	mov    eax,0x83137
   19f8b:	eb 13                	jmp    19fa0 <printMPTable+0x38d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:100 (discriminator 2)
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
                            :mpptr->lintSrc.irqtype==3?"Ext"
   19f8d:	b8 3b 31 08 00       	mov    eax,0x8313b
   19f92:	eb 0c                	jmp    19fa0 <printMPTable+0x38d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:99 (discriminator 2)
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
   19f94:	b8 3f 31 08 00       	mov    eax,0x8313f
   19f99:	eb 05                	jmp    19fa0 <printMPTable+0x38d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 7)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19f9b:	b8 43 31 08 00       	mov    eax,0x83143
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 9)
   19fa0:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   19fa3:	57                   	push   edi
   19fa4:	56                   	push   esi
   19fa5:	53                   	push   ebx
   19fa6:	51                   	push   ecx
   19fa7:	52                   	push   edx
   19fa8:	50                   	push   eax
   19fa9:	68 80 31 08 00       	push   0x83180
   19fae:	e8 04 d1 00 00       	call   270b7 <printk>
   19fb3:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:109 (discriminator 9)
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
                break;
   19fb6:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/smp.c:113
            default:
                return;
        }
        mpptr++;
   19fb7:	83 45 e4 20          	add    DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:114
        cnt++;
   19fbb:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:115
        if (cnt>0 && ((cnt+2)%cursorGetMaxY())==0)
   19fbf:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   19fc3:	7e 40                	jle    1a005 <printMPTable+0x3f2>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:115 (discriminator 1)
   19fc5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   19fc8:	8d 58 02             	lea    ebx,[eax+0x2]
   19fcb:	e8 77 df ff ff       	call   17f47 <cursorGetMaxY>
   19fd0:	89 c1                	mov    ecx,eax
   19fd2:	89 d8                	mov    eax,ebx
   19fd4:	99                   	cdq    
   19fd5:	f7 f9                	idiv   ecx
   19fd7:	89 d0                	mov    eax,edx
   19fd9:	85 c0                	test   eax,eax
   19fdb:	75 28                	jne    1a005 <printMPTable+0x3f2>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:117
        {
            puts("Paused, press a key to continue");
   19fdd:	83 ec 0c             	sub    esp,0xc
   19fe0:	68 b8 31 08 00       	push   0x831b8
   19fe5:	e8 1c e0 ff ff       	call   18006 <puts>
   19fea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:118
            waitForKeyboardKey();
   19fed:	e8 60 72 ff ff       	call   11252 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:119
            cursorMoveTo(0,cursorGetPosY());
   19ff2:	e8 80 df ff ff       	call   17f77 <cursorGetPosY>
   19ff7:	83 ec 08             	sub    esp,0x8
   19ffa:	50                   	push   eax
   19ffb:	6a 00                	push   0x0
   19ffd:	e8 d5 de ff ff       	call   17ed7 <cursorMoveTo>
   1a002:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:67
void HIGH_CODE_SECTION printMPTable()
{
    mpConfig_t* mpptr=kMPConfigTable;
    int cnt=0;
    
    while (mpptr->nextRecAddress!=0xFFFFFFFF)
   1a005:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a008:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   1a00b:	83 f8 ff             	cmp    eax,0xffffffff
   1a00e:	0f 85 1c fc ff ff    	jne    19c30 <printMPTable+0x1d>
   1a014:	eb 01                	jmp    1a017 <printMPTable+0x404>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:111
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
                break;
            default:
                return;
   1a016:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/smp.c:123
            waitForKeyboardKey();
            cursorMoveTo(0,cursorGetPosY());
        }

    }
}
   1a017:	8d 65 f4             	lea    esp,[ebp-0xc]
   1a01a:	5b                   	pop    ebx
   1a01b:	5e                   	pop    esi
   1a01c:	5f                   	pop    edi
   1a01d:	5d                   	pop    ebp
   1a01e:	c3                   	ret    

0001a01f <mpInit>:
mpInit():
/home/yogi/src/os/chrisOS/src/cpu/smp.c:126

unsigned HIGH_CODE_SECTION mpInit()
{
   1a01f:	55                   	push   ebp
   1a020:	89 e5                	mov    ebp,esp
   1a022:	57                   	push   edi
   1a023:	56                   	push   esi
   1a024:	53                   	push   ebx
   1a025:	83 ec 5c             	sub    esp,0x5c
/home/yogi/src/os/chrisOS/src/cpu/smp.c:129
    uint8_t* recPtr;
    char lTempString[15];
    memset(lTempString, 0, 15);
   1a028:	83 ec 04             	sub    esp,0x4
   1a02b:	6a 0f                	push   0xf
   1a02d:	6a 00                	push   0x0
   1a02f:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a032:	50                   	push   eax
   1a033:	e8 f5 af 00 00       	call   2502d <memset>
   1a038:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:130
    mpFindTables();
   1a03b:	e8 f9 fa ff ff       	call   19b39 <mpFindTables>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:131
    printd(DEBUG_MP,"MP table found @ 0x%08X, sig=%c%c%c%c, features=%u/%u/%u/%u/%u, length=%u\n", mp, mp->signature[0], mp->signature[1], mp->signature[2], mp->signature[3], mp->feature1, mp->feature2, mp->feature3, mp->feature4, mp->feature5, mp->length);
   1a040:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a045:	0f b6 40 08          	movzx  eax,BYTE PTR [eax+0x8]
   1a049:	0f b6 f0             	movzx  esi,al
   1a04c:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a051:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   1a055:	0f b6 f8             	movzx  edi,al
   1a058:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a05d:	0f b6 40 0e          	movzx  eax,BYTE PTR [eax+0xe]
   1a061:	0f b6 c0             	movzx  eax,al
   1a064:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
   1a067:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a06c:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
   1a070:	0f b6 d8             	movzx  ebx,al
   1a073:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
   1a076:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a07b:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
   1a07f:	0f b6 c8             	movzx  ecx,al
   1a082:	89 4d ac             	mov    DWORD PTR [ebp-0x54],ecx
   1a085:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a08a:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1a08e:	0f b6 d0             	movzx  edx,al
   1a091:	89 55 a8             	mov    DWORD PTR [ebp-0x58],edx
   1a094:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a099:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a09d:	0f be c0             	movsx  eax,al
   1a0a0:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
   1a0a3:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a0a8:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1a0ac:	0f be d8             	movsx  ebx,al
   1a0af:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a0b4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a0b8:	0f be c8             	movsx  ecx,al
   1a0bb:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a0c0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a0c3:	0f be d0             	movsx  edx,al
   1a0c6:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a0cb:	83 ec 0c             	sub    esp,0xc
   1a0ce:	56                   	push   esi
   1a0cf:	57                   	push   edi
   1a0d0:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1a0d3:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
   1a0d6:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
   1a0d9:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
   1a0dc:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
   1a0df:	53                   	push   ebx
   1a0e0:	51                   	push   ecx
   1a0e1:	52                   	push   edx
   1a0e2:	50                   	push   eax
   1a0e3:	68 ec 31 08 00       	push   0x831ec
   1a0e8:	68 00 08 00 00       	push   0x800
   1a0ed:	e8 e5 cf 00 00       	call   270d7 <printd>
   1a0f2:	83 c4 40             	add    esp,0x40
/home/yogi/src/os/chrisOS/src/cpu/smp.c:132
    if (mp->feature1!=0)
   1a0f5:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a0fa:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1a0fe:	84 c0                	test   al,al
   1a100:	74 27                	je     1a129 <mpInit+0x10a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:134
    {
        printk("NOTE: need to implement Intel MP default configurations (%u)",mp->feature1);
   1a102:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a107:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1a10b:	0f b6 c0             	movzx  eax,al
   1a10e:	83 ec 08             	sub    esp,0x8
   1a111:	50                   	push   eax
   1a112:	68 38 32 08 00       	push   0x83238
   1a117:	e8 9b cf 00 00       	call   270b7 <printk>
   1a11c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:135
        return false;
   1a11f:	b8 00 00 00 00       	mov    eax,0x0
   1a124:	e9 12 0a 00 00       	jmp    1ab3b <mpInit+0xb1c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:137
    }
    mc=(struct mpc_table*)mp->physptr;
   1a129:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a12e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1a131:	a3 6c 65 09 00       	mov    ds:0x9656c,eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:138
    printd(DEBUG_MP,"MC table found @ 0x%08X, sig=%c%c%c%c, length=%u, lapic=0x%08X, OEM tbl=0x%08X\n", mc, mc->signature[0], mc->signature[1], mc->signature[2], mc->signature[3], mc->length, mc->lapic, mc->oemptr);
   1a136:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a13b:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
   1a13e:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a143:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   1a146:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
   1a149:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a14e:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
   1a152:	0f b7 f0             	movzx  esi,ax
   1a155:	89 75 b0             	mov    DWORD PTR [ebp-0x50],esi
   1a158:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a15d:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a161:	0f be f8             	movsx  edi,al
   1a164:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a169:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1a16d:	0f be f0             	movsx  esi,al
   1a170:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a175:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a179:	0f be d8             	movsx  ebx,al
   1a17c:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a181:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a184:	0f be d0             	movsx  edx,al
   1a187:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a18c:	83 ec 08             	sub    esp,0x8
   1a18f:	51                   	push   ecx
   1a190:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1a193:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
   1a196:	57                   	push   edi
   1a197:	56                   	push   esi
   1a198:	53                   	push   ebx
   1a199:	52                   	push   edx
   1a19a:	50                   	push   eax
   1a19b:	68 78 32 08 00       	push   0x83278
   1a1a0:	68 00 08 00 00       	push   0x800
   1a1a5:	e8 2d cf 00 00       	call   270d7 <printd>
   1a1aa:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:139
    memcpy(lTempString, mc->oem,4);
   1a1ad:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a1b2:	83 c0 08             	add    eax,0x8
   1a1b5:	83 ec 04             	sub    esp,0x4
   1a1b8:	6a 04                	push   0x4
   1a1ba:	50                   	push   eax
   1a1bb:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a1be:	50                   	push   eax
   1a1bf:	e8 58 b8 00 00       	call   25a1c <memcpy>
   1a1c4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:140
    printd(DEBUG_MP,"\tMPC OEM '%s'", lTempString);
   1a1c7:	83 ec 04             	sub    esp,0x4
   1a1ca:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a1cd:	50                   	push   eax
   1a1ce:	68 c8 32 08 00       	push   0x832c8
   1a1d3:	68 00 08 00 00       	push   0x800
   1a1d8:	e8 fa ce 00 00       	call   270d7 <printd>
   1a1dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:141
    memset(lTempString, 0, 15);
   1a1e0:	83 ec 04             	sub    esp,0x4
   1a1e3:	6a 0f                	push   0xf
   1a1e5:	6a 00                	push   0x0
   1a1e7:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a1ea:	50                   	push   eax
   1a1eb:	e8 3d ae 00 00       	call   2502d <memset>
   1a1f0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:142
        memcpy(lTempString, mc->productid,12);
   1a1f3:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a1f8:	83 c0 10             	add    eax,0x10
   1a1fb:	83 ec 04             	sub    esp,0x4
   1a1fe:	6a 0c                	push   0xc
   1a200:	50                   	push   eax
   1a201:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a204:	50                   	push   eax
   1a205:	e8 12 b8 00 00       	call   25a1c <memcpy>
   1a20a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:143
    printd(DEBUG_MP,", product '%s': %s\n", lTempString);
   1a20d:	83 ec 04             	sub    esp,0x4
   1a210:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a213:	50                   	push   eax
   1a214:	68 d6 32 08 00       	push   0x832d6
   1a219:	68 00 08 00 00       	push   0x800
   1a21e:	e8 b4 ce 00 00       	call   270d7 <printd>
   1a223:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:144
    recPtr=(uint8_t*)mp->physptr+sizeof(struct mpc_table);
   1a226:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a22b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1a22e:	83 c0 2c             	add    eax,0x2c
   1a231:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:145
    printd(DEBUG_MP,"Parsing MC %u table entries at 0x%08X\n", mc->count, recPtr);
   1a234:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a239:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a23d:	0f b7 c0             	movzx  eax,ax
   1a240:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a243:	50                   	push   eax
   1a244:	68 ec 32 08 00       	push   0x832ec
   1a249:	68 00 08 00 00       	push   0x800
   1a24e:	e8 84 ce 00 00       	call   270d7 <printd>
   1a253:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:146
    for (int cnt=0;cnt< mc->count;cnt++)
   1a256:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   1a25d:	e9 6f 08 00 00       	jmp    1aad1 <mpInit+0xab2>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:148
    {
        switch((int)*(uint8_t*)recPtr)
   1a262:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a265:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a268:	0f b6 c0             	movzx  eax,al
   1a26b:	83 f8 04             	cmp    eax,0x4
   1a26e:	0f 87 04 08 00 00    	ja     1aa78 <mpInit+0xa59>
   1a274:	8b 04 85 58 34 08 00 	mov    eax,DWORD PTR [eax*4+0x83458]
   1a27b:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:152
        {
            case 0:
                //TODO: Add all this info to a kernel structure
                printd(DEBUG_MP,"\tCPU:  ");
   1a27d:	83 ec 08             	sub    esp,0x8
   1a280:	68 13 33 08 00       	push   0x83313
   1a285:	68 00 08 00 00       	push   0x800
   1a28a:	e8 48 ce 00 00       	call   270d7 <printd>
   1a28f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:153
                struct mpc_cpu* cpu=(struct mpc_cpu*)recPtr;
   1a292:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a295:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:154
                memcpy(kMPConfigTable[cnt].rec,recPtr,20);
   1a298:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a29d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a2a0:	c1 e2 05             	shl    edx,0x5
   1a2a3:	01 d0                	add    eax,edx
   1a2a5:	83 ec 04             	sub    esp,0x4
   1a2a8:	6a 14                	push   0x14
   1a2aa:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a2ad:	50                   	push   eax
   1a2ae:	e8 69 b7 00 00       	call   25a1c <memcpy>
   1a2b3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:155
                if (cnt==0)
   1a2b6:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a2ba:	75 16                	jne    1a2d2 <mpInit+0x2b3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:156
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a2bc:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a2c1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a2c4:	c1 e2 05             	shl    edx,0x5
   1a2c7:	01 d0                	add    eax,edx
   1a2c9:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a2d0:	eb 72                	jmp    1a344 <mpInit+0x325>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:157
                else if (cnt==mc->count-1)
   1a2d2:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a2d7:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a2db:	0f b7 c0             	movzx  eax,ax
   1a2de:	83 e8 01             	sub    eax,0x1
   1a2e1:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a2e4:	75 16                	jne    1a2fc <mpInit+0x2dd>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:158
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a2e6:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a2eb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a2ee:	c1 e2 05             	shl    edx,0x5
   1a2f1:	01 d0                	add    eax,edx
   1a2f3:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a2fa:	eb 48                	jmp    1a344 <mpInit+0x325>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:161
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a2fc:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a301:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a304:	c1 e2 05             	shl    edx,0x5
   1a307:	01 d0                	add    eax,edx
   1a309:	8b 15 40 03 12 00    	mov    edx,DWORD PTR ds:0x120340
   1a30f:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a312:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a318:	c1 e1 05             	shl    ecx,0x5
   1a31b:	01 ca                	add    edx,ecx
   1a31d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:162
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a320:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a325:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a328:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1a32e:	c1 e2 05             	shl    edx,0x5
   1a331:	01 d0                	add    eax,edx
   1a333:	8b 15 40 03 12 00    	mov    edx,DWORD PTR ds:0x120340
   1a339:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a33c:	c1 e1 05             	shl    ecx,0x5
   1a33f:	01 ca                	add    edx,ecx
   1a341:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:164
                }
                kMPConfigTable[cnt].recType=CPU;
   1a344:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a349:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a34c:	c1 e2 05             	shl    edx,0x5
   1a34f:	01 d0                	add    eax,edx
   1a351:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165
                printd(DEBUG_MP,"APICId=%u, Enabled=%s, %s\n", cpu->apicid, (cpu->cpuflag&0x1)?"yes":"no", (cpu->cpuflag&0x2)?"BSP":"");
   1a358:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1a35b:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a35f:	0f b6 c0             	movzx  eax,al
   1a362:	83 e0 02             	and    eax,0x2
   1a365:	85 c0                	test   eax,eax
   1a367:	74 07                	je     1a370 <mpInit+0x351>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 1)
   1a369:	b9 94 30 08 00       	mov    ecx,0x83094
   1a36e:	eb 05                	jmp    1a375 <mpInit+0x356>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 2)
   1a370:	b9 98 30 08 00       	mov    ecx,0x83098
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 4)
   1a375:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1a378:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a37c:	0f b6 c0             	movzx  eax,al
   1a37f:	83 e0 01             	and    eax,0x1
   1a382:	85 c0                	test   eax,eax
   1a384:	74 07                	je     1a38d <mpInit+0x36e>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 5)
   1a386:	ba 99 30 08 00       	mov    edx,0x83099
   1a38b:	eb 05                	jmp    1a392 <mpInit+0x373>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 6)
   1a38d:	ba 9d 30 08 00       	mov    edx,0x8309d
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 8)
   1a392:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1a395:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a399:	0f b6 c0             	movzx  eax,al
   1a39c:	83 ec 0c             	sub    esp,0xc
   1a39f:	51                   	push   ecx
   1a3a0:	52                   	push   edx
   1a3a1:	50                   	push   eax
   1a3a2:	68 1b 33 08 00       	push   0x8331b
   1a3a7:	68 00 08 00 00       	push   0x800
   1a3ac:	e8 26 cd 00 00       	call   270d7 <printd>
   1a3b1:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:166 (discriminator 8)
                recPtr+=20;
   1a3b4:	83 45 e4 14          	add    DWORD PTR [ebp-0x1c],0x14
/home/yogi/src/os/chrisOS/src/cpu/smp.c:167 (discriminator 8)
                break;
   1a3b8:	e9 df 06 00 00       	jmp    1aa9c <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:169
            case 1:
                printd(DEBUG_MP,"\tBus:  ");
   1a3bd:	83 ec 08             	sub    esp,0x8
   1a3c0:	68 36 33 08 00       	push   0x83336
   1a3c5:	68 00 08 00 00       	push   0x800
   1a3ca:	e8 08 cd 00 00       	call   270d7 <printd>
   1a3cf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:170
                struct mpc_bus* bus=(struct mpc_bus*)recPtr;
   1a3d2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a3d5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:171
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1a3d8:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a3dd:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a3e0:	c1 e2 05             	shl    edx,0x5
   1a3e3:	01 d0                	add    eax,edx
   1a3e5:	83 ec 04             	sub    esp,0x4
   1a3e8:	6a 08                	push   0x8
   1a3ea:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a3ed:	50                   	push   eax
   1a3ee:	e8 29 b6 00 00       	call   25a1c <memcpy>
   1a3f3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:172
                if (cnt==0)
   1a3f6:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a3fa:	75 16                	jne    1a412 <mpInit+0x3f3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:173
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a3fc:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a401:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a404:	c1 e2 05             	shl    edx,0x5
   1a407:	01 d0                	add    eax,edx
   1a409:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a410:	eb 72                	jmp    1a484 <mpInit+0x465>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:174
                else if (cnt==mc->count-1)
   1a412:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a417:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a41b:	0f b7 c0             	movzx  eax,ax
   1a41e:	83 e8 01             	sub    eax,0x1
   1a421:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a424:	75 16                	jne    1a43c <mpInit+0x41d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:175
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a426:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a42b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a42e:	c1 e2 05             	shl    edx,0x5
   1a431:	01 d0                	add    eax,edx
   1a433:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a43a:	eb 48                	jmp    1a484 <mpInit+0x465>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:178
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a43c:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a441:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a444:	c1 e2 05             	shl    edx,0x5
   1a447:	01 d0                	add    eax,edx
   1a449:	8b 15 40 03 12 00    	mov    edx,DWORD PTR ds:0x120340
   1a44f:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a452:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a458:	c1 e1 05             	shl    ecx,0x5
   1a45b:	01 ca                	add    edx,ecx
   1a45d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:179
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a460:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a465:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a468:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1a46e:	c1 e2 05             	shl    edx,0x5
   1a471:	01 d0                	add    eax,edx
   1a473:	8b 15 40 03 12 00    	mov    edx,DWORD PTR ds:0x120340
   1a479:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a47c:	c1 e1 05             	shl    ecx,0x5
   1a47f:	01 ca                	add    edx,ecx
   1a481:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:181
                }
                recPtr+=8;
   1a484:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:182
                kMPConfigTable[cnt].recType=BUS;
   1a488:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a48d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a490:	c1 e2 05             	shl    edx,0x5
   1a493:	01 d0                	add    eax,edx
   1a495:	c7 40 14 01 00 00 00 	mov    DWORD PTR [eax+0x14],0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:183
                printd(DEBUG_MP,"ID=%u, BusType=%c%c%c%c%c%c, Type=%c\n", bus->busid, bus->bustype[0], bus->bustype[1], bus->bustype[2], bus->bustype[3], bus->bustype[4], bus->bustype[5], bus->type );
   1a49c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a49f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a4a2:	0f b6 c8             	movzx  ecx,al
   1a4a5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a4a8:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
   1a4ac:	0f b6 c0             	movzx  eax,al
   1a4af:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
   1a4b2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a4b5:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
   1a4b9:	0f b6 f8             	movzx  edi,al
   1a4bc:	89 7d b0             	mov    DWORD PTR [ebp-0x50],edi
   1a4bf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a4c2:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
   1a4c6:	0f b6 f8             	movzx  edi,al
   1a4c9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a4cc:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
   1a4d0:	0f b6 f0             	movzx  esi,al
   1a4d3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a4d6:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a4da:	0f b6 d8             	movzx  ebx,al
   1a4dd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a4e0:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1a4e4:	0f b6 d0             	movzx  edx,al
   1a4e7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a4ea:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a4ee:	0f b6 c0             	movzx  eax,al
   1a4f1:	83 ec 08             	sub    esp,0x8
   1a4f4:	51                   	push   ecx
   1a4f5:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1a4f8:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
   1a4fb:	57                   	push   edi
   1a4fc:	56                   	push   esi
   1a4fd:	53                   	push   ebx
   1a4fe:	52                   	push   edx
   1a4ff:	50                   	push   eax
   1a500:	68 40 33 08 00       	push   0x83340
   1a505:	68 00 08 00 00       	push   0x800
   1a50a:	e8 c8 cb 00 00       	call   270d7 <printd>
   1a50f:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:184
                break;
   1a512:	e9 85 05 00 00       	jmp    1aa9c <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:186
            case 2:
                printd(DEBUG_MP,"\tAPIC: ");
   1a517:	83 ec 08             	sub    esp,0x8
   1a51a:	68 66 33 08 00       	push   0x83366
   1a51f:	68 00 08 00 00       	push   0x800
   1a524:	e8 ae cb 00 00       	call   270d7 <printd>
   1a529:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:187
                struct mpc_ioapic* apic=(struct mpc_ioapic*)recPtr;
   1a52c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a52f:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:188
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1a532:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a537:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a53a:	c1 e2 05             	shl    edx,0x5
   1a53d:	01 d0                	add    eax,edx
   1a53f:	83 ec 04             	sub    esp,0x4
   1a542:	6a 08                	push   0x8
   1a544:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a547:	50                   	push   eax
   1a548:	e8 cf b4 00 00       	call   25a1c <memcpy>
   1a54d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:189
                if (cnt==0)
   1a550:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a554:	75 16                	jne    1a56c <mpInit+0x54d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:190
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a556:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a55b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a55e:	c1 e2 05             	shl    edx,0x5
   1a561:	01 d0                	add    eax,edx
   1a563:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a56a:	eb 72                	jmp    1a5de <mpInit+0x5bf>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:191
                else if (cnt==mc->count-1)
   1a56c:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a571:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a575:	0f b7 c0             	movzx  eax,ax
   1a578:	83 e8 01             	sub    eax,0x1
   1a57b:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a57e:	75 16                	jne    1a596 <mpInit+0x577>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:192
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a580:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a585:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a588:	c1 e2 05             	shl    edx,0x5
   1a58b:	01 d0                	add    eax,edx
   1a58d:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a594:	eb 48                	jmp    1a5de <mpInit+0x5bf>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:195
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a596:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a59b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a59e:	c1 e2 05             	shl    edx,0x5
   1a5a1:	01 d0                	add    eax,edx
   1a5a3:	8b 15 40 03 12 00    	mov    edx,DWORD PTR ds:0x120340
   1a5a9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a5ac:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a5b2:	c1 e1 05             	shl    ecx,0x5
   1a5b5:	01 ca                	add    edx,ecx
   1a5b7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:196
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a5ba:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a5bf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a5c2:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1a5c8:	c1 e2 05             	shl    edx,0x5
   1a5cb:	01 d0                	add    eax,edx
   1a5cd:	8b 15 40 03 12 00    	mov    edx,DWORD PTR ds:0x120340
   1a5d3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a5d6:	c1 e1 05             	shl    ecx,0x5
   1a5d9:	01 ca                	add    edx,ecx
   1a5db:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:198
                }
                kMPConfigTable[cnt].recType=IOAPIC;
   1a5de:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a5e3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a5e6:	c1 e2 05             	shl    edx,0x5
   1a5e9:	01 d0                	add    eax,edx
   1a5eb:	c7 40 14 02 00 00 00 	mov    DWORD PTR [eax+0x14],0x2
/home/yogi/src/os/chrisOS/src/cpu/smp.c:199
                recPtr+=8;
   1a5f2:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:200
                printd(DEBUG_MP,"ID=%02X, Address=0x%08X, Enabled=%s\n",apic->apicid, apic->apicaddr, apic->flags&0x1?"yes":"no");
   1a5f6:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1a5f9:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a5fd:	0f b6 c0             	movzx  eax,al
   1a600:	83 e0 01             	and    eax,0x1
   1a603:	85 c0                	test   eax,eax
   1a605:	74 07                	je     1a60e <mpInit+0x5ef>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:200 (discriminator 1)
   1a607:	b9 99 30 08 00       	mov    ecx,0x83099
   1a60c:	eb 05                	jmp    1a613 <mpInit+0x5f4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:200 (discriminator 2)
   1a60e:	b9 9d 30 08 00       	mov    ecx,0x8309d
/home/yogi/src/os/chrisOS/src/cpu/smp.c:200 (discriminator 4)
   1a613:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1a616:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1a619:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1a61c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a620:	0f b6 c0             	movzx  eax,al
   1a623:	83 ec 0c             	sub    esp,0xc
   1a626:	51                   	push   ecx
   1a627:	52                   	push   edx
   1a628:	50                   	push   eax
   1a629:	68 70 33 08 00       	push   0x83370
   1a62e:	68 00 08 00 00       	push   0x800
   1a633:	e8 9f ca 00 00       	call   270d7 <printd>
   1a638:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:201 (discriminator 4)
                kIOAPICPtr=(uintptr_t*)apic->apicaddr;
   1a63b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1a63e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1a641:	a3 3c 03 12 00       	mov    ds:0x12033c,eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:202 (discriminator 4)
                break;
   1a646:	e9 51 04 00 00       	jmp    1aa9c <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:204
            case 3:
                printd(DEBUG_MP,"\tIRQ:  ");
   1a64b:	83 ec 08             	sub    esp,0x8
   1a64e:	68 95 33 08 00       	push   0x83395
   1a653:	68 00 08 00 00       	push   0x800
   1a658:	e8 7a ca 00 00       	call   270d7 <printd>
   1a65d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:205
                struct mpc_intsrc*intr=(struct mpc_intsrc*)recPtr;
   1a660:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a663:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:206
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1a666:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a66b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a66e:	c1 e2 05             	shl    edx,0x5
   1a671:	01 d0                	add    eax,edx
   1a673:	83 ec 04             	sub    esp,0x4
   1a676:	6a 08                	push   0x8
   1a678:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a67b:	50                   	push   eax
   1a67c:	e8 9b b3 00 00       	call   25a1c <memcpy>
   1a681:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:207
                if (cnt==0)
   1a684:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a688:	75 16                	jne    1a6a0 <mpInit+0x681>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:208
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a68a:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a68f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a692:	c1 e2 05             	shl    edx,0x5
   1a695:	01 d0                	add    eax,edx
   1a697:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a69e:	eb 72                	jmp    1a712 <mpInit+0x6f3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:209
                else if (cnt==mc->count-1)
   1a6a0:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a6a5:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a6a9:	0f b7 c0             	movzx  eax,ax
   1a6ac:	83 e8 01             	sub    eax,0x1
   1a6af:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a6b2:	75 16                	jne    1a6ca <mpInit+0x6ab>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:210
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a6b4:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a6b9:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a6bc:	c1 e2 05             	shl    edx,0x5
   1a6bf:	01 d0                	add    eax,edx
   1a6c1:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a6c8:	eb 48                	jmp    1a712 <mpInit+0x6f3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:213
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a6ca:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a6cf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a6d2:	c1 e2 05             	shl    edx,0x5
   1a6d5:	01 d0                	add    eax,edx
   1a6d7:	8b 15 40 03 12 00    	mov    edx,DWORD PTR ds:0x120340
   1a6dd:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a6e0:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a6e6:	c1 e1 05             	shl    ecx,0x5
   1a6e9:	01 ca                	add    edx,ecx
   1a6eb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:214
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a6ee:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a6f3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a6f6:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1a6fc:	c1 e2 05             	shl    edx,0x5
   1a6ff:	01 d0                	add    eax,edx
   1a701:	8b 15 40 03 12 00    	mov    edx,DWORD PTR ds:0x120340
   1a707:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a70a:	c1 e1 05             	shl    ecx,0x5
   1a70d:	01 ca                	add    edx,ecx
   1a70f:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:216
                }
                kMPConfigTable[cnt].recType = IOINTASS;
   1a712:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a717:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a71a:	c1 e2 05             	shl    edx,0x5
   1a71d:	01 d0                	add    eax,edx
   1a71f:	c7 40 14 03 00 00 00 	mov    DWORD PTR [eax+0x14],0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:217
                recPtr+=8;
   1a726:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1a72a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a72d:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a731:	0f b6 c0             	movzx  eax,al
   1a734:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1a737:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a73a:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a73e:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1a741:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a744:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a748:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1a74b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a74e:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a752:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:227
                            :intr->irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
   1a755:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a758:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a75c:	0f b7 c0             	movzx  eax,ax
   1a75f:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a762:	85 c0                	test   eax,eax
   1a764:	74 39                	je     1a79f <mpInit+0x780>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:228
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
   1a766:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a769:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a76d:	0f b7 c0             	movzx  eax,ax
   1a770:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
   1a773:	83 f8 04             	cmp    eax,0x4
   1a776:	74 20                	je     1a798 <mpInit+0x779>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229 (discriminator 1)
   1a778:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a77b:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a77f:	0f b7 c0             	movzx  eax,ax
   1a782:	83 e0 0c             	and    eax,0xc
   1a785:	83 f8 08             	cmp    eax,0x8
   1a788:	75 07                	jne    1a791 <mpInit+0x772>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229 (discriminator 3)
   1a78a:	b9 18 31 08 00       	mov    ecx,0x83118
   1a78f:	eb 13                	jmp    1a7a4 <mpInit+0x785>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229 (discriminator 4)
   1a791:	b9 1a 31 08 00       	mov    ecx,0x8311a
   1a796:	eb 0c                	jmp    1a7a4 <mpInit+0x785>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229 (discriminator 2)
   1a798:	b9 1c 31 08 00       	mov    ecx,0x8311c
   1a79d:	eb 05                	jmp    1a7a4 <mpInit+0x785>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 1)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a79f:	b9 21 31 08 00       	mov    ecx,0x83121
/home/yogi/src/os/chrisOS/src/cpu/smp.c:224 (discriminator 3)
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
                            :intr->irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
   1a7a4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a7a7:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a7ab:	0f b7 c0             	movzx  eax,ax
   1a7ae:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 3)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a7b1:	85 c0                	test   eax,eax
   1a7b3:	74 39                	je     1a7ee <mpInit+0x7cf>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:225
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
                            :intr->irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
                            :(intr->irqflag&0x3)==0x1?"AH"
   1a7b5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a7b8:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a7bc:	0f b7 c0             	movzx  eax,ax
   1a7bf:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   1a7c2:	83 f8 01             	cmp    eax,0x1
   1a7c5:	74 20                	je     1a7e7 <mpInit+0x7c8>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226 (discriminator 1)
   1a7c7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a7ca:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a7ce:	0f b7 c0             	movzx  eax,ax
   1a7d1:	83 e0 03             	and    eax,0x3
   1a7d4:	83 f8 02             	cmp    eax,0x2
   1a7d7:	75 07                	jne    1a7e0 <mpInit+0x7c1>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226 (discriminator 3)
   1a7d9:	ba 23 31 08 00       	mov    edx,0x83123
   1a7de:	eb 13                	jmp    1a7f3 <mpInit+0x7d4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226 (discriminator 4)
   1a7e0:	ba 27 31 08 00       	mov    edx,0x83127
   1a7e5:	eb 0c                	jmp    1a7f3 <mpInit+0x7d4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226 (discriminator 2)
   1a7e7:	ba 2d 31 08 00       	mov    edx,0x8312d
   1a7ec:	eb 05                	jmp    1a7f3 <mpInit+0x7d4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 4)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a7ee:	ba 30 31 08 00       	mov    edx,0x83130
/home/yogi/src/os/chrisOS/src/cpu/smp.c:219 (discriminator 6)
                        intr->irqtype==0?"INT"                      
   1a7f3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a7f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 6)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a7fa:	84 c0                	test   al,al
   1a7fc:	74 3d                	je     1a83b <mpInit+0x81c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:220
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
   1a7fe:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a801:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:221
                            :intr->irqtype==2?"SMI"
   1a805:	3c 01                	cmp    al,0x1
   1a807:	74 2b                	je     1a834 <mpInit+0x815>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:221 (discriminator 1)
   1a809:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a80c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:222 (discriminator 1)
                            :intr->irqtype==3?"Ext"
   1a810:	3c 02                	cmp    al,0x2
   1a812:	74 19                	je     1a82d <mpInit+0x80e>
   1a814:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a817:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:223 (discriminator 1)
                            :"unk",                                 //iType
   1a81b:	3c 03                	cmp    al,0x3
   1a81d:	75 07                	jne    1a826 <mpInit+0x807>
   1a81f:	b8 33 31 08 00       	mov    eax,0x83133
   1a824:	eb 1a                	jmp    1a840 <mpInit+0x821>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:223 (discriminator 2)
   1a826:	b8 37 31 08 00       	mov    eax,0x83137
   1a82b:	eb 13                	jmp    1a840 <mpInit+0x821>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:222 (discriminator 2)
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
                            :intr->irqtype==3?"Ext"
   1a82d:	b8 3b 31 08 00       	mov    eax,0x8313b
   1a832:	eb 0c                	jmp    1a840 <mpInit+0x821>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:221 (discriminator 2)
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
   1a834:	b8 3f 31 08 00       	mov    eax,0x8313f
   1a839:	eb 05                	jmp    1a840 <mpInit+0x821>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 7)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a83b:	b8 43 31 08 00       	mov    eax,0x83143
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 9)
   1a840:	83 ec 0c             	sub    esp,0xc
   1a843:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1a846:	57                   	push   edi
   1a847:	56                   	push   esi
   1a848:	53                   	push   ebx
   1a849:	51                   	push   ecx
   1a84a:	52                   	push   edx
   1a84b:	50                   	push   eax
   1a84c:	68 a0 33 08 00       	push   0x833a0
   1a851:	68 00 08 00 00       	push   0x800
   1a856:	e8 7c c8 00 00       	call   270d7 <printd>
   1a85b:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:231 (discriminator 9)
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
                break;
   1a85e:	e9 39 02 00 00       	jmp    1aa9c <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:233
            case 4:
                printd(DEBUG_MP,"\tLINT: ");
   1a863:	83 ec 08             	sub    esp,0x8
   1a866:	68 de 33 08 00       	push   0x833de
   1a86b:	68 00 08 00 00       	push   0x800
   1a870:	e8 62 c8 00 00       	call   270d7 <printd>
   1a875:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:234
                struct mpc_lintsrc* lint=(struct mpc_lintsrc*)recPtr;
   1a878:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a87b:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:235
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1a87e:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a883:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a886:	c1 e2 05             	shl    edx,0x5
   1a889:	01 d0                	add    eax,edx
   1a88b:	83 ec 04             	sub    esp,0x4
   1a88e:	6a 08                	push   0x8
   1a890:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a893:	50                   	push   eax
   1a894:	e8 83 b1 00 00       	call   25a1c <memcpy>
   1a899:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:236
                if (cnt==0)
   1a89c:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a8a0:	75 16                	jne    1a8b8 <mpInit+0x899>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:237
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a8a2:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a8a7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a8aa:	c1 e2 05             	shl    edx,0x5
   1a8ad:	01 d0                	add    eax,edx
   1a8af:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a8b6:	eb 72                	jmp    1a92a <mpInit+0x90b>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:238
                else if (cnt==mc->count-1)
   1a8b8:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a8bd:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a8c1:	0f b7 c0             	movzx  eax,ax
   1a8c4:	83 e8 01             	sub    eax,0x1
   1a8c7:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a8ca:	75 16                	jne    1a8e2 <mpInit+0x8c3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:239
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a8cc:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a8d1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a8d4:	c1 e2 05             	shl    edx,0x5
   1a8d7:	01 d0                	add    eax,edx
   1a8d9:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a8e0:	eb 48                	jmp    1a92a <mpInit+0x90b>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:242
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a8e2:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a8e7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a8ea:	c1 e2 05             	shl    edx,0x5
   1a8ed:	01 d0                	add    eax,edx
   1a8ef:	8b 15 40 03 12 00    	mov    edx,DWORD PTR ds:0x120340
   1a8f5:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a8f8:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a8fe:	c1 e1 05             	shl    ecx,0x5
   1a901:	01 ca                	add    edx,ecx
   1a903:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:243
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a906:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a90b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a90e:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1a914:	c1 e2 05             	shl    edx,0x5
   1a917:	01 d0                	add    eax,edx
   1a919:	8b 15 40 03 12 00    	mov    edx,DWORD PTR ds:0x120340
   1a91f:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a922:	c1 e1 05             	shl    ecx,0x5
   1a925:	01 ca                	add    edx,ecx
   1a927:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:245
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
   1a92a:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a92f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a932:	c1 e2 05             	shl    edx,0x5
   1a935:	01 d0                	add    eax,edx
   1a937:	c7 40 14 04 00 00 00 	mov    DWORD PTR [eax+0x14],0x4
/home/yogi/src/os/chrisOS/src/cpu/smp.c:246
                recPtr+=8;
   1a93e:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1a942:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a945:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1a949:	0f b6 c0             	movzx  eax,al
   1a94c:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1a94f:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a952:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1a956:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1a959:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a95c:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1a960:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1a963:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a966:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1a96a:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:256
                            :lint->irqtype==3?"Ext"
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
   1a96d:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a970:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a974:	0f b7 c0             	movzx  eax,ax
   1a977:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1a97a:	85 c0                	test   eax,eax
   1a97c:	74 39                	je     1a9b7 <mpInit+0x998>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:257
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
   1a97e:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a981:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a985:	0f b7 c0             	movzx  eax,ax
   1a988:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
   1a98b:	83 f8 04             	cmp    eax,0x4
   1a98e:	74 20                	je     1a9b0 <mpInit+0x991>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258 (discriminator 1)
   1a990:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a993:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a997:	0f b7 c0             	movzx  eax,ax
   1a99a:	83 e0 0c             	and    eax,0xc
   1a99d:	83 f8 08             	cmp    eax,0x8
   1a9a0:	75 07                	jne    1a9a9 <mpInit+0x98a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258 (discriminator 3)
   1a9a2:	b9 18 31 08 00       	mov    ecx,0x83118
   1a9a7:	eb 13                	jmp    1a9bc <mpInit+0x99d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258 (discriminator 4)
   1a9a9:	b9 1a 31 08 00       	mov    ecx,0x8311a
   1a9ae:	eb 0c                	jmp    1a9bc <mpInit+0x99d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258 (discriminator 2)
   1a9b0:	b9 1c 31 08 00       	mov    ecx,0x8311c
   1a9b5:	eb 05                	jmp    1a9bc <mpInit+0x99d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 1)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1a9b7:	b9 21 31 08 00       	mov    ecx,0x83121
/home/yogi/src/os/chrisOS/src/cpu/smp.c:253 (discriminator 3)
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
                            :lint->irqtype==3?"Ext"
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
   1a9bc:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a9bf:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a9c3:	0f b7 c0             	movzx  eax,ax
   1a9c6:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 3)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1a9c9:	85 c0                	test   eax,eax
   1a9cb:	74 39                	je     1aa06 <mpInit+0x9e7>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:254
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
                            :lint->irqtype==3?"Ext"
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
                            :(lint->irqflag&0x3)==0x1?"AH"
   1a9cd:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a9d0:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a9d4:	0f b7 c0             	movzx  eax,ax
   1a9d7:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   1a9da:	83 f8 01             	cmp    eax,0x1
   1a9dd:	74 20                	je     1a9ff <mpInit+0x9e0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255 (discriminator 1)
   1a9df:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a9e2:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a9e6:	0f b7 c0             	movzx  eax,ax
   1a9e9:	83 e0 03             	and    eax,0x3
   1a9ec:	83 f8 02             	cmp    eax,0x2
   1a9ef:	75 07                	jne    1a9f8 <mpInit+0x9d9>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255 (discriminator 3)
   1a9f1:	ba 23 31 08 00       	mov    edx,0x83123
   1a9f6:	eb 13                	jmp    1aa0b <mpInit+0x9ec>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255 (discriminator 4)
   1a9f8:	ba 27 31 08 00       	mov    edx,0x83127
   1a9fd:	eb 0c                	jmp    1aa0b <mpInit+0x9ec>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255 (discriminator 2)
   1a9ff:	ba 2d 31 08 00       	mov    edx,0x8312d
   1aa04:	eb 05                	jmp    1aa0b <mpInit+0x9ec>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 4)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1aa06:	ba 30 31 08 00       	mov    edx,0x83130
/home/yogi/src/os/chrisOS/src/cpu/smp.c:248 (discriminator 6)
                             lint->irqtype==0?"INT"                      //type
   1aa0b:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1aa0e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 6)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1aa12:	84 c0                	test   al,al
   1aa14:	74 3d                	je     1aa53 <mpInit+0xa34>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:249
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
   1aa16:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1aa19:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:250
                            :lint->irqtype==2?"SMI"
   1aa1d:	3c 01                	cmp    al,0x1
   1aa1f:	74 2b                	je     1aa4c <mpInit+0xa2d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:250 (discriminator 1)
   1aa21:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1aa24:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:251 (discriminator 1)
                            :lint->irqtype==3?"Ext"
   1aa28:	3c 02                	cmp    al,0x2
   1aa2a:	74 19                	je     1aa45 <mpInit+0xa26>
   1aa2c:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1aa2f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:252 (discriminator 1)
                            :"unk", //iType
   1aa33:	3c 03                	cmp    al,0x3
   1aa35:	75 07                	jne    1aa3e <mpInit+0xa1f>
   1aa37:	b8 33 31 08 00       	mov    eax,0x83133
   1aa3c:	eb 1a                	jmp    1aa58 <mpInit+0xa39>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:252 (discriminator 2)
   1aa3e:	b8 37 31 08 00       	mov    eax,0x83137
   1aa43:	eb 13                	jmp    1aa58 <mpInit+0xa39>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:251 (discriminator 2)
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
                            :lint->irqtype==3?"Ext"
   1aa45:	b8 3b 31 08 00       	mov    eax,0x8313b
   1aa4a:	eb 0c                	jmp    1aa58 <mpInit+0xa39>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:250 (discriminator 2)
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
   1aa4c:	b8 3f 31 08 00       	mov    eax,0x8313f
   1aa51:	eb 05                	jmp    1aa58 <mpInit+0xa39>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 7)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1aa53:	b8 43 31 08 00       	mov    eax,0x83143
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 9)
   1aa58:	83 ec 0c             	sub    esp,0xc
   1aa5b:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1aa5e:	57                   	push   edi
   1aa5f:	56                   	push   esi
   1aa60:	53                   	push   ebx
   1aa61:	51                   	push   ecx
   1aa62:	52                   	push   edx
   1aa63:	50                   	push   eax
   1aa64:	68 e8 33 08 00       	push   0x833e8
   1aa69:	68 00 08 00 00       	push   0x800
   1aa6e:	e8 64 c6 00 00       	call   270d7 <printd>
   1aa73:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:260 (discriminator 9)
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
                break;
   1aa76:	eb 24                	jmp    1aa9c <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:262
            default:
                printd(DEBUG_MP,"\tue %04X, ", (int)*(uint8_t*)recPtr);
   1aa78:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1aa7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1aa7e:	0f b6 c0             	movzx  eax,al
   1aa81:	83 ec 04             	sub    esp,0x4
   1aa84:	50                   	push   eax
   1aa85:	68 26 34 08 00       	push   0x83426
   1aa8a:	68 00 08 00 00       	push   0x800
   1aa8f:	e8 43 c6 00 00       	call   270d7 <printd>
   1aa94:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:263
                recPtr+=8;
   1aa97:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:264
                break;
   1aa9b:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/smp.c:266
        }
        if (cnt > 0 && cnt%250==0)
   1aa9c:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1aaa0:	7e 2b                	jle    1aacd <mpInit+0xaae>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:266 (discriminator 1)
   1aaa2:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1aaa5:	ba d3 4d 62 10       	mov    edx,0x10624dd3
   1aaaa:	89 c8                	mov    eax,ecx
   1aaac:	f7 ea                	imul   edx
   1aaae:	c1 fa 04             	sar    edx,0x4
   1aab1:	89 c8                	mov    eax,ecx
   1aab3:	c1 f8 1f             	sar    eax,0x1f
   1aab6:	29 c2                	sub    edx,eax
   1aab8:	89 d0                	mov    eax,edx
   1aaba:	69 c0 fa 00 00 00    	imul   eax,eax,0xfa
   1aac0:	29 c1                	sub    ecx,eax
   1aac2:	89 c8                	mov    eax,ecx
   1aac4:	85 c0                	test   eax,eax
   1aac6:	75 05                	jne    1aacd <mpInit+0xaae>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:267
            waitForKeyboardKey();
   1aac8:	e8 85 67 ff ff       	call   11252 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:146 (discriminator 2)
    memset(lTempString, 0, 15);
        memcpy(lTempString, mc->productid,12);
    printd(DEBUG_MP,", product '%s': %s\n", lTempString);
    recPtr=(uint8_t*)mp->physptr+sizeof(struct mpc_table);
    printd(DEBUG_MP,"Parsing MC %u table entries at 0x%08X\n", mc->count, recPtr);
    for (int cnt=0;cnt< mc->count;cnt++)
   1aacd:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:146 (discriminator 1)
   1aad1:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1aad6:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1aada:	0f b7 c0             	movzx  eax,ax
   1aadd:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1aae0:	0f 8f 7c f7 ff ff    	jg     1a262 <mpInit+0x243>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:269
                break;
        }
        if (cnt > 0 && cnt%250==0)
            waitForKeyboardKey();
    }
    printd(DEBUG_MP,"rec5 pp=%08X(%08X),np=%08X(%08X)\n", kMPConfigTable[5].prevRecAddress, &kMPConfigTable[4], kMPConfigTable[5].nextRecAddress, &kMPConfigTable[6]);
   1aae6:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1aaeb:	8d 98 c0 00 00 00    	lea    ebx,[eax+0xc0]
   1aaf1:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1aaf6:	05 a0 00 00 00       	add    eax,0xa0
   1aafb:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1aafe:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1ab03:	8d 88 80 00 00 00    	lea    ecx,[eax+0x80]
   1ab09:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1ab0e:	05 a0 00 00 00       	add    eax,0xa0
   1ab13:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   1ab16:	83 ec 08             	sub    esp,0x8
   1ab19:	53                   	push   ebx
   1ab1a:	52                   	push   edx
   1ab1b:	51                   	push   ecx
   1ab1c:	50                   	push   eax
   1ab1d:	68 34 34 08 00       	push   0x83434
   1ab22:	68 00 08 00 00       	push   0x800
   1ab27:	e8 ab c5 00 00       	call   270d7 <printd>
   1ab2c:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:270
    return mc->count;
   1ab2f:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1ab34:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1ab38:	0f b7 c0             	movzx  eax,ax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:271 (discriminator 1)
   1ab3b:	8d 65 f4             	lea    esp,[ebp-0xc]
   1ab3e:	5b                   	pop    ebx
   1ab3f:	5e                   	pop    esi
   1ab40:	5f                   	pop    edi
   1ab41:	5d                   	pop    ebp
   1ab42:	c3                   	ret    
   1ab43:	90                   	nop

0001ab44 <activateDebugger>:
activateDebugger():
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:19
extern uint8_t kTerminalHeight;
extern uint32_t exceptionCS;
extern uint32_t debugReturnFlags;

void activateDebugger()
{
   1ab44:	55                   	push   ebp
   1ab45:	89 e5                	mov    ebp,esp
   1ab47:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:20
    kDebuggerActive=!kDebuggerActive;
   1ab4a:	0f b6 05 d4 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d4
   1ab51:	0f b6 c0             	movzx  eax,al
   1ab54:	85 c0                	test   eax,eax
   1ab56:	0f 95 c0             	setne  al
   1ab59:	83 f0 01             	xor    eax,0x1
   1ab5c:	0f b6 c0             	movzx  eax,al
   1ab5f:	83 e0 01             	and    eax,0x1
   1ab62:	a2 d4 a5 09 00       	mov    ds:0x9a5d4,al
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:21
    if (kDebuggerActive)
   1ab67:	0f b6 05 d4 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d4
   1ab6e:	84 c0                	test   al,al
   1ab70:	0f 84 87 00 00 00    	je     1abfd <activateDebugger+0xb9>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:24
    {
        //Activate the debugger
        savedTermHeight=kTerminalHeight;
   1ab76:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   1ab7d:	a2 d5 a5 09 00       	mov    ds:0x9a5d5,al
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:25
        kTerminalHeight=20;
   1ab82:	c6 05 27 00 12 00 14 	mov    BYTE PTR ds:0x120027,0x14
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:26
        cursorSavePosition();
   1ab89:	e8 95 cf ff ff       	call   17b23 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:27
        cursorMoveTo(70,0);
   1ab8e:	83 ec 08             	sub    esp,0x8
   1ab91:	6a 00                	push   0x0
   1ab93:	6a 46                	push   0x46
   1ab95:	e8 3d d3 ff ff       	call   17ed7 <cursorMoveTo>
   1ab9a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:28
        printk("D");
   1ab9d:	83 ec 0c             	sub    esp,0xc
   1aba0:	68 80 35 08 00       	push   0x83580
   1aba5:	e8 0d c5 00 00       	call   270b7 <printk>
   1abaa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:29
        for (int cnt=21;cnt<savedTermHeight;cnt++)
   1abad:	c7 45 f4 15 00 00 00 	mov    DWORD PTR [ebp-0xc],0x15
   1abb4:	eb 12                	jmp    1abc8 <activateDebugger+0x84>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:30 (discriminator 3)
            terminal_clear_line(cnt);
   1abb6:	83 ec 0c             	sub    esp,0xc
   1abb9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1abbc:	e8 92 d0 ff ff       	call   17c53 <terminal_clear_line>
   1abc1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:29 (discriminator 3)
        savedTermHeight=kTerminalHeight;
        kTerminalHeight=20;
        cursorSavePosition();
        cursorMoveTo(70,0);
        printk("D");
        for (int cnt=21;cnt<savedTermHeight;cnt++)
   1abc4:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:29 (discriminator 1)
   1abc8:	0f b6 05 d5 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d5
   1abcf:	0f b6 c0             	movzx  eax,al
   1abd2:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1abd5:	7f df                	jg     1abb6 <activateDebugger+0x72>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:31
            terminal_clear_line(cnt);
        cursorMoveTo(0,21);
   1abd7:	83 ec 08             	sub    esp,0x8
   1abda:	6a 15                	push   0x15
   1abdc:	6a 00                	push   0x0
   1abde:	e8 f4 d2 ff ff       	call   17ed7 <cursorMoveTo>
   1abe3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:32
        printk("-------------------------------- DEBUG --------------------------------");
   1abe6:	83 ec 0c             	sub    esp,0xc
   1abe9:	68 84 35 08 00       	push   0x83584
   1abee:	e8 c4 c4 00 00       	call   270b7 <printk>
   1abf3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:33
        cursorRestorePosition();
   1abf6:	e8 74 cf ff ff       	call   17b6f <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:43
        cursorSavePosition();
        cursorMoveTo(70,0);
        printk(" ");
        cursorRestorePosition();
    }
}
   1abfb:	eb 35                	jmp    1ac32 <activateDebugger+0xee>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:37
        printk("-------------------------------- DEBUG --------------------------------");
        cursorRestorePosition();
    }
    else    //Deactivate the debugger
    {
        kTerminalHeight=savedTermHeight;
   1abfd:	0f b6 05 d5 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d5
   1ac04:	a2 27 00 12 00       	mov    ds:0x120027,al
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:38
        cursorSavePosition();
   1ac09:	e8 15 cf ff ff       	call   17b23 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:39
        cursorMoveTo(70,0);
   1ac0e:	83 ec 08             	sub    esp,0x8
   1ac11:	6a 00                	push   0x0
   1ac13:	6a 46                	push   0x46
   1ac15:	e8 bd d2 ff ff       	call   17ed7 <cursorMoveTo>
   1ac1a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:40
        printk(" ");
   1ac1d:	83 ec 0c             	sub    esp,0xc
   1ac20:	68 cc 35 08 00       	push   0x835cc
   1ac25:	e8 8d c4 00 00       	call   270b7 <printk>
   1ac2a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:41
        cursorRestorePosition();
   1ac2d:	e8 3d cf ff ff       	call   17b6f <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:43
    }
}
   1ac32:	90                   	nop
   1ac33:	c9                   	leave  
   1ac34:	c3                   	ret    

0001ac35 <debugStep>:
debugStep():
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:46

void debugStep()
{
   1ac35:	55                   	push   ebp
   1ac36:	89 e5                	mov    ebp,esp
   1ac38:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:47
    cursorSavePosition();
   1ac3b:	e8 e3 ce ff ff       	call   17b23 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:48
    cursorMoveTo(0,22);
   1ac40:	83 ec 08             	sub    esp,0x8
   1ac43:	6a 16                	push   0x16
   1ac45:	6a 00                	push   0x0
   1ac47:	e8 8b d2 ff ff       	call   17ed7 <cursorMoveTo>
   1ac4c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:49
    printDebugRegs();
   1ac4f:	e8 88 a8 00 00       	call   254dc <printDebugRegs>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:50
    cursorRestorePosition();
   1ac54:	e8 16 cf ff ff       	call   17b6f <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:51
    waitForKeyboardKey();
   1ac59:	e8 f4 65 ff ff       	call   11252 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:52
    return;
   1ac5e:	90                   	nop
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:53
}
   1ac5f:	c9                   	leave  
   1ac60:	c3                   	ret    
   1ac61:	66 90                	xchg   ax,ax
   1ac63:	90                   	nop

0001ac64 <fatfs_init>:
fatfs_init():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:44

//-----------------------------------------------------------------------------
// fatfs_init: Load FAT Parameters
//-----------------------------------------------------------------------------
int fatfs_init(struct fatfs *fs)
{
   1ac64:	55                   	push   ebp
   1ac65:	89 e5                	mov    ebp,esp
   1ac67:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:52
    uint32 FATSz;
    uint32 root_dir_sectors;
    uint32 total_sectors;
    uint32 data_sectors;
    uint32 count_of_clusters;
    uint8 valid_partition = 0;
   1ac6a:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:54

    fs->currentsector.address = FAT32_INVALID_CLUSTER;
   1ac6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ac71:	c7 80 44 02 00 00 ff 	mov    DWORD PTR [eax+0x244],0xffffffff
   1ac78:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:55
    fs->currentsector.dirty = 0;
   1ac7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ac7e:	c7 80 48 02 00 00 00 	mov    DWORD PTR [eax+0x248],0x0
   1ac85:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:57

    fs->next_free_cluster = 0; // Invalid
   1ac88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ac8b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:59

    fatfs_fat_init(fs);
   1ac92:	83 ec 0c             	sub    esp,0xc
   1ac95:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ac98:	e8 43 56 00 00       	call   202e0 <fatfs_fat_init>
   1ac9d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:62

    // Make sure we have a read function (write function is optional)
    if (!fs->disk_io.read_media)
   1aca0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aca3:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1aca6:	85 c0                	test   eax,eax
   1aca8:	75 0a                	jne    1acb4 <fatfs_init+0x50>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:63
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1acaa:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1acaf:	e9 46 05 00 00       	jmp    1b1fa <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:69

    // MBR: Sector 0 on the disk
    // NOTE: Some removeable media does not have this.

    // Load MBR (LBA 0) into the 512 byte buffer
    if (!fs->disk_io.read_media(0, fs->currentsector.sector, 1))
   1acb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1acb7:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1acba:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1acbd:	83 c2 44             	add    edx,0x44
   1acc0:	83 ec 04             	sub    esp,0x4
   1acc3:	6a 01                	push   0x1
   1acc5:	52                   	push   edx
   1acc6:	6a 00                	push   0x0
   1acc8:	ff d0                	call   eax
   1acca:	83 c4 10             	add    esp,0x10
   1accd:	85 c0                	test   eax,eax
   1accf:	75 0a                	jne    1acdb <fatfs_init+0x77>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:70
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1acd1:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1acd6:	e9 1f 05 00 00       	jmp    1b1fa <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:74

    // Make Sure 0x55 and 0xAA are at end of sector
    // (this should be the case regardless of the MBR or boot sector)
    if (fs->currentsector.sector[SIGNATURE_POSITION] != 0x55 || fs->currentsector.sector[SIGNATURE_POSITION+1] != 0xAA)
   1acdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1acde:	0f b6 80 42 02 00 00 	movzx  eax,BYTE PTR [eax+0x242]
   1ace5:	3c 55                	cmp    al,0x55
   1ace7:	75 0e                	jne    1acf7 <fatfs_init+0x93>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:74 (discriminator 1)
   1ace9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1acec:	0f b6 80 43 02 00 00 	movzx  eax,BYTE PTR [eax+0x243]
   1acf3:	3c aa                	cmp    al,0xaa
   1acf5:	74 0a                	je     1ad01 <fatfs_init+0x9d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:75
        return FAT_INIT_INVALID_SIGNATURE;
   1acf7:	b8 fd ff ff ff       	mov    eax,0xfffffffd
   1acfc:	e9 f9 04 00 00       	jmp    1b1fa <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:78

    // Now check again using the access function to prove endian conversion function
    if (GET_16BIT_WORD(fs->currentsector.sector, SIGNATURE_POSITION) != SIGNATURE_VALUE)
   1ad01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad04:	0f b6 80 43 02 00 00 	movzx  eax,BYTE PTR [eax+0x243]
   1ad0b:	0f b6 c0             	movzx  eax,al
   1ad0e:	c1 e0 08             	shl    eax,0x8
   1ad11:	89 c2                	mov    edx,eax
   1ad13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad16:	0f b6 80 42 02 00 00 	movzx  eax,BYTE PTR [eax+0x242]
   1ad1d:	0f b6 c0             	movzx  eax,al
   1ad20:	01 d0                	add    eax,edx
   1ad22:	3d 55 aa 00 00       	cmp    eax,0xaa55
   1ad27:	74 0a                	je     1ad33 <fatfs_init+0xcf>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:79
        return FAT_INIT_ENDIAN_ERROR;
   1ad29:	b8 fc ff ff ff       	mov    eax,0xfffffffc
   1ad2e:	e9 c7 04 00 00       	jmp    1b1fa <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:86
    // Verify packed structures
    if (sizeof(struct fat_dir_entry) != FAT_DIR_ENTRY_SIZE)
        return FAT_INIT_STRUCT_PACKING;

    // Check the partition type code
    switch(fs->currentsector.sector[PARTITION1_TYPECODE_LOCATION])
   1ad33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad36:	0f b6 80 06 02 00 00 	movzx  eax,BYTE PTR [eax+0x206]
   1ad3d:	0f b6 c0             	movzx  eax,al
   1ad40:	83 f8 0f             	cmp    eax,0xf
   1ad43:	77 15                	ja     1ad5a <fatfs_init+0xf6>
   1ad45:	8b 04 85 d0 35 08 00 	mov    eax,DWORD PTR [eax*4+0x835d0]
   1ad4c:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:94
        case 0x06:
        case 0x0C:
        case 0x0E:
        case 0x0F:
        case 0x05:
            valid_partition = 1;
   1ad4e:	c6 45 ef 01          	mov    BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:95
        break;
   1ad52:	eb 19                	jmp    1ad6d <fatfs_init+0x109>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:97
        case 0x00:
            valid_partition = 0;
   1ad54:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:98
            break;
   1ad58:	eb 13                	jmp    1ad6d <fatfs_init+0x109>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:100
        default:
            if (fs->currentsector.sector[PARTITION1_TYPECODE_LOCATION] <= 0x06)
   1ad5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad5d:	0f b6 80 06 02 00 00 	movzx  eax,BYTE PTR [eax+0x206]
   1ad64:	3c 06                	cmp    al,0x6
   1ad66:	77 04                	ja     1ad6c <fatfs_init+0x108>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:101
                valid_partition = 1;
   1ad68:	c6 45 ef 01          	mov    BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:102
        break;
   1ad6c:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:106
    }

    // Read LBA Begin for the file system
    if (valid_partition)
   1ad6d:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
   1ad71:	74 4d                	je     1adc0 <fatfs_init+0x15c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:107
        fs->lba_begin = GET_32BIT_WORD(fs->currentsector.sector, PARTITION1_LBA_BEGIN_LOCATION);
   1ad73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad76:	0f b6 80 0d 02 00 00 	movzx  eax,BYTE PTR [eax+0x20d]
   1ad7d:	0f b6 c0             	movzx  eax,al
   1ad80:	c1 e0 18             	shl    eax,0x18
   1ad83:	89 c2                	mov    edx,eax
   1ad85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad88:	0f b6 80 0c 02 00 00 	movzx  eax,BYTE PTR [eax+0x20c]
   1ad8f:	0f b6 c0             	movzx  eax,al
   1ad92:	c1 e0 10             	shl    eax,0x10
   1ad95:	01 c2                	add    edx,eax
   1ad97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad9a:	0f b6 80 0b 02 00 00 	movzx  eax,BYTE PTR [eax+0x20b]
   1ada1:	0f b6 c0             	movzx  eax,al
   1ada4:	c1 e0 08             	shl    eax,0x8
   1ada7:	01 c2                	add    edx,eax
   1ada9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1adac:	0f b6 80 0a 02 00 00 	movzx  eax,BYTE PTR [eax+0x20a]
   1adb3:	0f b6 c0             	movzx  eax,al
   1adb6:	01 c2                	add    edx,eax
   1adb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1adbb:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
   1adbe:	eb 0a                	jmp    1adca <fatfs_init+0x166>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:110
    // Else possibly MBR less disk
    else
        fs->lba_begin = 0;
   1adc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1adc3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:114

    // Load Volume 1 table into sector buffer
    // (We may already have this in the buffer if MBR less drive!)
    if (!fs->disk_io.read_media(fs->lba_begin, fs->currentsector.sector, 1))
   1adca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1adcd:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1add0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1add3:	8d 4a 44             	lea    ecx,[edx+0x44]
   1add6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1add9:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
   1addc:	83 ec 04             	sub    esp,0x4
   1addf:	6a 01                	push   0x1
   1ade1:	51                   	push   ecx
   1ade2:	52                   	push   edx
   1ade3:	ff d0                	call   eax
   1ade5:	83 c4 10             	add    esp,0x10
   1ade8:	85 c0                	test   eax,eax
   1adea:	75 0a                	jne    1adf6 <fatfs_init+0x192>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:115
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1adec:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1adf1:	e9 04 04 00 00       	jmp    1b1fa <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:118

    // Make sure there are 512 bytes per cluster
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE)
   1adf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1adf9:	0f b6 40 50          	movzx  eax,BYTE PTR [eax+0x50]
   1adfd:	0f b6 c0             	movzx  eax,al
   1ae00:	c1 e0 08             	shl    eax,0x8
   1ae03:	89 c2                	mov    edx,eax
   1ae05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae08:	0f b6 40 4f          	movzx  eax,BYTE PTR [eax+0x4f]
   1ae0c:	0f b6 c0             	movzx  eax,al
   1ae0f:	01 d0                	add    eax,edx
   1ae11:	3d 00 02 00 00       	cmp    eax,0x200
   1ae16:	74 0a                	je     1ae22 <fatfs_init+0x1be>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:119
        return FAT_INIT_INVALID_SECTOR_SIZE;
   1ae18:	b8 fe ff ff ff       	mov    eax,0xfffffffe
   1ae1d:	e9 d8 03 00 00       	jmp    1b1fa <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:122

    // Load Parameters of FAT partition
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
   1ae22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae25:	0f b6 50 51          	movzx  edx,BYTE PTR [eax+0x51]
   1ae29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae2c:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:123
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
   1ae2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae31:	0f b6 40 53          	movzx  eax,BYTE PTR [eax+0x53]
   1ae35:	0f b6 c0             	movzx  eax,al
   1ae38:	c1 e0 08             	shl    eax,0x8
   1ae3b:	89 c2                	mov    edx,eax
   1ae3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae40:	0f b6 40 52          	movzx  eax,BYTE PTR [eax+0x52]
   1ae44:	0f b6 c0             	movzx  eax,al
   1ae47:	01 d0                	add    eax,edx
   1ae49:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:124
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
   1ae4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae50:	0f b6 40 54          	movzx  eax,BYTE PTR [eax+0x54]
   1ae54:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:125
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);
   1ae57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae5a:	0f b6 40 56          	movzx  eax,BYTE PTR [eax+0x56]
   1ae5e:	0f b6 c0             	movzx  eax,al
   1ae61:	c1 e0 08             	shl    eax,0x8
   1ae64:	89 c2                	mov    edx,eax
   1ae66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae69:	0f b6 40 55          	movzx  eax,BYTE PTR [eax+0x55]
   1ae6d:	0f b6 c0             	movzx  eax,al
   1ae70:	01 c2                	add    edx,eax
   1ae72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae75:	66 89 50 28          	mov    WORD PTR [eax+0x28],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:127

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
   1ae79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae7c:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1ae80:	0f b6 c0             	movzx  eax,al
   1ae83:	c1 e0 08             	shl    eax,0x8
   1ae86:	89 c2                	mov    edx,eax
   1ae88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae8b:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1ae8f:	0f b6 c0             	movzx  eax,al
   1ae92:	01 d0                	add    eax,edx
   1ae94:	85 c0                	test   eax,eax
   1ae96:	74 25                	je     1aebd <fatfs_init+0x259>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:128
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
   1ae98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae9b:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1ae9f:	0f b6 c0             	movzx  eax,al
   1aea2:	c1 e0 08             	shl    eax,0x8
   1aea5:	89 c2                	mov    edx,eax
   1aea7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aeaa:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1aeae:	0f b6 c0             	movzx  eax,al
   1aeb1:	01 d0                	add    eax,edx
   1aeb3:	89 c2                	mov    edx,eax
   1aeb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aeb8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
   1aebb:	eb 3f                	jmp    1aefc <fatfs_init+0x298>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:130
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
   1aebd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aec0:	0f b6 40 6b          	movzx  eax,BYTE PTR [eax+0x6b]
   1aec4:	0f b6 c0             	movzx  eax,al
   1aec7:	c1 e0 18             	shl    eax,0x18
   1aeca:	89 c2                	mov    edx,eax
   1aecc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aecf:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
   1aed3:	0f b6 c0             	movzx  eax,al
   1aed6:	c1 e0 10             	shl    eax,0x10
   1aed9:	01 c2                	add    edx,eax
   1aedb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aede:	0f b6 40 69          	movzx  eax,BYTE PTR [eax+0x69]
   1aee2:	0f b6 c0             	movzx  eax,al
   1aee5:	c1 e0 08             	shl    eax,0x8
   1aee8:	01 c2                	add    edx,eax
   1aeea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aeed:	0f b6 40 68          	movzx  eax,BYTE PTR [eax+0x68]
   1aef1:	0f b6 c0             	movzx  eax,al
   1aef4:	01 c2                	add    edx,eax
   1aef6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aef9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:133

    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
   1aefc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aeff:	0f b6 40 73          	movzx  eax,BYTE PTR [eax+0x73]
   1af03:	0f b6 c0             	movzx  eax,al
   1af06:	c1 e0 18             	shl    eax,0x18
   1af09:	89 c2                	mov    edx,eax
   1af0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af0e:	0f b6 40 72          	movzx  eax,BYTE PTR [eax+0x72]
   1af12:	0f b6 c0             	movzx  eax,al
   1af15:	c1 e0 10             	shl    eax,0x10
   1af18:	01 c2                	add    edx,eax
   1af1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af1d:	0f b6 40 71          	movzx  eax,BYTE PTR [eax+0x71]
   1af21:	0f b6 c0             	movzx  eax,al
   1af24:	c1 e0 08             	shl    eax,0x8
   1af27:	01 c2                	add    edx,eax
   1af29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af2c:	0f b6 40 70          	movzx  eax,BYTE PTR [eax+0x70]
   1af30:	0f b6 c0             	movzx  eax,al
   1af33:	01 c2                	add    edx,eax
   1af35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af38:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:134
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
   1af3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af3e:	0f b6 40 75          	movzx  eax,BYTE PTR [eax+0x75]
   1af42:	0f b6 c0             	movzx  eax,al
   1af45:	c1 e0 08             	shl    eax,0x8
   1af48:	89 c2                	mov    edx,eax
   1af4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af4d:	0f b6 40 74          	movzx  eax,BYTE PTR [eax+0x74]
   1af51:	0f b6 c0             	movzx  eax,al
   1af54:	01 c2                	add    edx,eax
   1af56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af59:	66 89 50 18          	mov    WORD PTR [eax+0x18],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:137

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
   1af5d:	0f b7 55 ec          	movzx  edx,WORD PTR [ebp-0x14]
   1af61:	0f b6 4d eb          	movzx  ecx,BYTE PTR [ebp-0x15]
   1af65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af68:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1af6b:	0f af c1             	imul   eax,ecx
   1af6e:	01 c2                	add    edx,eax
   1af70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af73:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:138
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
   1af76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af79:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1af7d:	0f b7 c0             	movzx  eax,ax
   1af80:	c1 e0 05             	shl    eax,0x5
   1af83:	05 ff 01 00 00       	add    eax,0x1ff
   1af88:	8d 90 ff 01 00 00    	lea    edx,[eax+0x1ff]
   1af8e:	85 c0                	test   eax,eax
   1af90:	0f 48 c2             	cmovs  eax,edx
   1af93:	c1 f8 09             	sar    eax,0x9
   1af96:	89 c2                	mov    edx,eax
   1af98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af9b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:141

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;
   1af9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1afa1:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1afa4:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   1afa8:	01 c2                	add    edx,eax
   1afaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1afad:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:144

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);
   1afb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1afb3:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   1afb6:	0f b6 4d eb          	movzx  ecx,BYTE PTR [ebp-0x15]
   1afba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1afbd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1afc0:	0f af c1             	imul   eax,ecx
   1afc3:	01 c2                	add    edx,eax
   1afc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1afc8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:146

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
   1afcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1afce:	0f b6 80 43 02 00 00 	movzx  eax,BYTE PTR [eax+0x243]
   1afd5:	0f b6 c0             	movzx  eax,al
   1afd8:	c1 e0 08             	shl    eax,0x8
   1afdb:	89 c2                	mov    edx,eax
   1afdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1afe0:	0f b6 80 42 02 00 00 	movzx  eax,BYTE PTR [eax+0x242]
   1afe7:	0f b6 c0             	movzx  eax,al
   1afea:	01 d0                	add    eax,edx
   1afec:	3d 55 aa 00 00       	cmp    eax,0xaa55
   1aff1:	74 0a                	je     1affd <fatfs_init+0x399>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:147
        return FAT_INIT_INVALID_SIGNATURE;
   1aff3:	b8 fd ff ff ff       	mov    eax,0xfffffffd
   1aff8:	e9 fd 01 00 00       	jmp    1b1fa <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:150

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
   1affd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b000:	0f b6 40 56          	movzx  eax,BYTE PTR [eax+0x56]
   1b004:	0f b6 c0             	movzx  eax,al
   1b007:	c1 e0 08             	shl    eax,0x8
   1b00a:	89 c2                	mov    edx,eax
   1b00c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b00f:	0f b6 40 55          	movzx  eax,BYTE PTR [eax+0x55]
   1b013:	0f b6 c0             	movzx  eax,al
   1b016:	01 d0                	add    eax,edx
   1b018:	c1 e0 05             	shl    eax,0x5
   1b01b:	89 c2                	mov    edx,eax
   1b01d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b020:	0f b6 40 50          	movzx  eax,BYTE PTR [eax+0x50]
   1b024:	0f b6 c0             	movzx  eax,al
   1b027:	c1 e0 08             	shl    eax,0x8
   1b02a:	89 c1                	mov    ecx,eax
   1b02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b02f:	0f b6 40 4f          	movzx  eax,BYTE PTR [eax+0x4f]
   1b033:	0f b6 c0             	movzx  eax,al
   1b036:	01 c8                	add    eax,ecx
   1b038:	83 e8 01             	sub    eax,0x1
   1b03b:	01 c2                	add    edx,eax
   1b03d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b040:	0f b6 40 50          	movzx  eax,BYTE PTR [eax+0x50]
   1b044:	0f b6 c0             	movzx  eax,al
   1b047:	c1 e0 08             	shl    eax,0x8
   1b04a:	89 c1                	mov    ecx,eax
   1b04c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b04f:	0f b6 40 4f          	movzx  eax,BYTE PTR [eax+0x4f]
   1b053:	0f b6 c0             	movzx  eax,al
   1b056:	01 c1                	add    ecx,eax
   1b058:	89 d0                	mov    eax,edx
   1b05a:	99                   	cdq    
   1b05b:	f7 f9                	idiv   ecx
   1b05d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:152

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
   1b060:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b063:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1b067:	0f b6 c0             	movzx  eax,al
   1b06a:	c1 e0 08             	shl    eax,0x8
   1b06d:	89 c2                	mov    edx,eax
   1b06f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b072:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1b076:	0f b6 c0             	movzx  eax,al
   1b079:	01 d0                	add    eax,edx
   1b07b:	85 c0                	test   eax,eax
   1b07d:	74 20                	je     1b09f <fatfs_init+0x43b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:153
        FATSz = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
   1b07f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b082:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1b086:	0f b6 c0             	movzx  eax,al
   1b089:	c1 e0 08             	shl    eax,0x8
   1b08c:	89 c2                	mov    edx,eax
   1b08e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b091:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1b095:	0f b6 c0             	movzx  eax,al
   1b098:	01 d0                	add    eax,edx
   1b09a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1b09d:	eb 3c                	jmp    1b0db <fatfs_init+0x477>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:155
    else
        FATSz = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
   1b09f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0a2:	0f b6 40 6b          	movzx  eax,BYTE PTR [eax+0x6b]
   1b0a6:	0f b6 c0             	movzx  eax,al
   1b0a9:	c1 e0 18             	shl    eax,0x18
   1b0ac:	89 c2                	mov    edx,eax
   1b0ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0b1:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
   1b0b5:	0f b6 c0             	movzx  eax,al
   1b0b8:	c1 e0 10             	shl    eax,0x10
   1b0bb:	01 c2                	add    edx,eax
   1b0bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0c0:	0f b6 40 69          	movzx  eax,BYTE PTR [eax+0x69]
   1b0c4:	0f b6 c0             	movzx  eax,al
   1b0c7:	c1 e0 08             	shl    eax,0x8
   1b0ca:	01 c2                	add    edx,eax
   1b0cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0cf:	0f b6 40 68          	movzx  eax,BYTE PTR [eax+0x68]
   1b0d3:	0f b6 c0             	movzx  eax,al
   1b0d6:	01 d0                	add    eax,edx
   1b0d8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:157

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16) != 0)
   1b0db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0de:	0f b6 40 58          	movzx  eax,BYTE PTR [eax+0x58]
   1b0e2:	0f b6 c0             	movzx  eax,al
   1b0e5:	c1 e0 08             	shl    eax,0x8
   1b0e8:	89 c2                	mov    edx,eax
   1b0ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0ed:	0f b6 40 57          	movzx  eax,BYTE PTR [eax+0x57]
   1b0f1:	0f b6 c0             	movzx  eax,al
   1b0f4:	01 d0                	add    eax,edx
   1b0f6:	85 c0                	test   eax,eax
   1b0f8:	74 20                	je     1b11a <fatfs_init+0x4b6>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:158
        total_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16);
   1b0fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0fd:	0f b6 40 58          	movzx  eax,BYTE PTR [eax+0x58]
   1b101:	0f b6 c0             	movzx  eax,al
   1b104:	c1 e0 08             	shl    eax,0x8
   1b107:	89 c2                	mov    edx,eax
   1b109:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b10c:	0f b6 40 57          	movzx  eax,BYTE PTR [eax+0x57]
   1b110:	0f b6 c0             	movzx  eax,al
   1b113:	01 d0                	add    eax,edx
   1b115:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   1b118:	eb 3c                	jmp    1b156 <fatfs_init+0x4f2>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:160
    else
        total_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_TOTSEC32);
   1b11a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b11d:	0f b6 40 67          	movzx  eax,BYTE PTR [eax+0x67]
   1b121:	0f b6 c0             	movzx  eax,al
   1b124:	c1 e0 18             	shl    eax,0x18
   1b127:	89 c2                	mov    edx,eax
   1b129:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b12c:	0f b6 40 66          	movzx  eax,BYTE PTR [eax+0x66]
   1b130:	0f b6 c0             	movzx  eax,al
   1b133:	c1 e0 10             	shl    eax,0x10
   1b136:	01 c2                	add    edx,eax
   1b138:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b13b:	0f b6 40 65          	movzx  eax,BYTE PTR [eax+0x65]
   1b13f:	0f b6 c0             	movzx  eax,al
   1b142:	c1 e0 08             	shl    eax,0x8
   1b145:	01 c2                	add    edx,eax
   1b147:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b14a:	0f b6 40 64          	movzx  eax,BYTE PTR [eax+0x64]
   1b14e:	0f b6 c0             	movzx  eax,al
   1b151:	01 d0                	add    eax,edx
   1b153:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:162

    data_sectors = total_sectors - (GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT) + (fs->currentsector.sector[BPB_NUMFATS] * FATSz) + root_dir_sectors);
   1b156:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b159:	0f b6 40 53          	movzx  eax,BYTE PTR [eax+0x53]
   1b15d:	0f b6 c0             	movzx  eax,al
   1b160:	c1 e0 08             	shl    eax,0x8
   1b163:	89 c2                	mov    edx,eax
   1b165:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b168:	0f b6 40 52          	movzx  eax,BYTE PTR [eax+0x52]
   1b16c:	0f b6 c0             	movzx  eax,al
   1b16f:	01 d0                	add    eax,edx
   1b171:	89 c2                	mov    edx,eax
   1b173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b176:	0f b6 40 54          	movzx  eax,BYTE PTR [eax+0x54]
   1b17a:	0f b6 c0             	movzx  eax,al
   1b17d:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   1b181:	01 c2                	add    edx,eax
   1b183:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1b186:	01 c2                	add    edx,eax
   1b188:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1b18b:	29 d0                	sub    eax,edx
   1b18d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:165

    // Find out which version of FAT this is...
    if (fs->sectors_per_cluster != 0)
   1b190:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b193:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b196:	84 c0                	test   al,al
   1b198:	74 5b                	je     1b1f5 <fatfs_init+0x591>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:167
    {
        count_of_clusters = data_sectors / fs->sectors_per_cluster;
   1b19a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b19d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b1a0:	0f b6 c8             	movzx  ecx,al
   1b1a3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1b1a6:	ba 00 00 00 00       	mov    edx,0x0
   1b1ab:	f7 f1                	div    ecx
   1b1ad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:169

        if(count_of_clusters < 4085)
   1b1b0:	81 7d dc f4 0f 00 00 	cmp    DWORD PTR [ebp-0x24],0xff4
   1b1b7:	77 07                	ja     1b1c0 <fatfs_init+0x55c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:171
            // Volume is FAT12
            return FAT_INIT_WRONG_FILESYS_TYPE;
   1b1b9:	b8 fb ff ff ff       	mov    eax,0xfffffffb
   1b1be:	eb 3a                	jmp    1b1fa <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:172
        else if(count_of_clusters < 65525)
   1b1c0:	81 7d dc f4 ff 00 00 	cmp    DWORD PTR [ebp-0x24],0xfff4
   1b1c7:	77 1b                	ja     1b1e4 <fatfs_init+0x580>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:175
        {
            // Clear this FAT32 specific param
            fs->rootdir_first_cluster = 0;
   1b1c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1cc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:178

            // Volume is FAT16
            fs->fat_type = FAT_TYPE_16;
   1b1d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1d6:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:179
            return FAT_INIT_OK;
   1b1dd:	b8 00 00 00 00       	mov    eax,0x0
   1b1e2:	eb 16                	jmp    1b1fa <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:184
        }
        else
        {
            // Volume is FAT32
            fs->fat_type = FAT_TYPE_32;
   1b1e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1e7:	c7 40 30 01 00 00 00 	mov    DWORD PTR [eax+0x30],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:185
            return FAT_INIT_OK;
   1b1ee:	b8 00 00 00 00       	mov    eax,0x0
   1b1f3:	eb 05                	jmp    1b1fa <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:189
        }
    }
    else
        return FAT_INIT_WRONG_FILESYS_TYPE;
   1b1f5:	b8 fb ff ff ff       	mov    eax,0xfffffffb
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:190
}
   1b1fa:	c9                   	leave  
   1b1fb:	c3                   	ret    

0001b1fc <fatfs_lba_of_cluster>:
fatfs_lba_of_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:196
//-----------------------------------------------------------------------------
// fatfs_lba_of_cluster: This function converts a cluster number into a sector /
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
   1b1fc:	55                   	push   ebp
   1b1fd:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:197
    if (fs->fat_type == FAT_TYPE_16)
   1b1ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b202:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b205:	85 c0                	test   eax,eax
   1b207:	75 39                	jne    1b242 <fatfs_lba_of_cluster+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:198
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
   1b209:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b20c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1b20f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b212:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1b216:	0f b7 c0             	movzx  eax,ax
   1b219:	c1 e0 05             	shl    eax,0x5
   1b21c:	8d 88 ff 01 00 00    	lea    ecx,[eax+0x1ff]
   1b222:	85 c0                	test   eax,eax
   1b224:	0f 48 c1             	cmovs  eax,ecx
   1b227:	c1 f8 09             	sar    eax,0x9
   1b22a:	01 c2                	add    edx,eax
   1b22c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1b22f:	8d 48 fe             	lea    ecx,[eax-0x2]
   1b232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b235:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b238:	0f b6 c0             	movzx  eax,al
   1b23b:	0f af c1             	imul   eax,ecx
   1b23e:	01 d0                	add    eax,edx
   1b240:	eb 1a                	jmp    1b25c <fatfs_lba_of_cluster+0x60>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:200
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
   1b242:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b245:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1b248:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1b24b:	8d 48 fe             	lea    ecx,[eax-0x2]
   1b24e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b251:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b254:	0f b6 c0             	movzx  eax,al
   1b257:	0f af c1             	imul   eax,ecx
   1b25a:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:201
}
   1b25c:	5d                   	pop    ebp
   1b25d:	c3                   	ret    

0001b25e <fatfs_sector_read>:
fatfs_sector_read():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:206
//-----------------------------------------------------------------------------
// fatfs_sector_read:
//-----------------------------------------------------------------------------
int fatfs_sector_read(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
   1b25e:	55                   	push   ebp
   1b25f:	89 e5                	mov    ebp,esp
   1b261:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:207
    return fs->disk_io.read_media(lba, target, count);
   1b264:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b267:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b26a:	83 ec 04             	sub    esp,0x4
   1b26d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b270:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1b273:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b276:	ff d0                	call   eax
   1b278:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:208
}
   1b27b:	c9                   	leave  
   1b27c:	c3                   	ret    

0001b27d <fatfs_sector_write>:
fatfs_sector_write():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:213
//-----------------------------------------------------------------------------
// fatfs_sector_write:
//-----------------------------------------------------------------------------
int fatfs_sector_write(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
   1b27d:	55                   	push   ebp
   1b27e:	89 e5                	mov    ebp,esp
   1b280:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:214
    return fs->disk_io.write_media(lba, target, count);
   1b283:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b286:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b289:	83 ec 04             	sub    esp,0x4
   1b28c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b28f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1b292:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b295:	ff d0                	call   eax
   1b297:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:215
}
   1b29a:	c9                   	leave  
   1b29b:	c3                   	ret    

0001b29c <fatfs_sector_reader>:
fatfs_sector_reader():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:221
//-----------------------------------------------------------------------------
// fatfs_sector_reader: From the provided startcluster and sector offset
// Returns True if success, returns False if not (including if read out of range)
//-----------------------------------------------------------------------------
int fatfs_sector_reader(struct fatfs *fs, uint32 start_cluster, uint32 offset, uint8 *target)
{
   1b29c:	55                   	push   ebp
   1b29d:	89 e5                	mov    ebp,esp
   1b29f:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:222
    uint32 sector_to_read = 0;
   1b2a2:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:223
    uint32 cluster_to_read = 0;
   1b2a9:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:224
    uint32 cluster_chain = 0;
   1b2b0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:229
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
   1b2b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2ba:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b2bd:	85 c0                	test   eax,eax
   1b2bf:	75 36                	jne    1b2f7 <fatfs_sector_reader+0x5b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:229 (discriminator 1)
   1b2c1:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1b2c5:	75 30                	jne    1b2f7 <fatfs_sector_reader+0x5b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:231
    {
        if (offset < fs->rootdir_sectors)
   1b2c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1b2cd:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1b2d0:	76 1b                	jbe    1b2ed <fatfs_sector_reader+0x51>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:232
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
   1b2d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2d5:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1b2d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2db:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1b2de:	01 c2                	add    edx,eax
   1b2e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b2e3:	01 d0                	add    eax,edx
   1b2e5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:231
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
    {
        if (offset < fs->rootdir_sectors)
   1b2e8:	e9 8e 00 00 00       	jmp    1b37b <fatfs_sector_reader+0xdf>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:234
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
        else
            return 0;
   1b2ed:	b8 00 00 00 00       	mov    eax,0x0
   1b2f2:	e9 e4 00 00 00       	jmp    1b3db <fatfs_sector_reader+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:240
    }
    // FAT16/32 Other
    else
    {
        // Set start of cluster chain to initial value
        cluster_chain = start_cluster;
   1b2f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1b2fa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:243

        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
   1b2fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b300:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b303:	0f b6 c8             	movzx  ecx,al
   1b306:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b309:	ba 00 00 00 00       	mov    edx,0x0
   1b30e:	f7 f1                	div    ecx
   1b310:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:244
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);
   1b313:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b316:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b319:	0f b6 c0             	movzx  eax,al
   1b31c:	0f af 45 e4          	imul   eax,DWORD PTR [ebp-0x1c]
   1b320:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1b323:	29 c2                	sub    edx,eax
   1b325:	89 d0                	mov    eax,edx
   1b327:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:247

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
   1b32a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   1b331:	eb 18                	jmp    1b34b <fatfs_sector_reader+0xaf>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:248 (discriminator 3)
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
   1b333:	83 ec 08             	sub    esp,0x8
   1b336:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b339:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b33c:	e8 f9 52 00 00       	call   2063a <fatfs_find_next_cluster>
   1b341:	83 c4 10             	add    esp,0x10
   1b344:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:247 (discriminator 3)
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
   1b347:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:247 (discriminator 1)
   1b34b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1b34e:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   1b351:	72 e0                	jb     1b333 <fatfs_sector_reader+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:251
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);

        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER)
   1b353:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1b357:	75 07                	jne    1b360 <fatfs_sector_reader+0xc4>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:252
            return 0;
   1b359:	b8 00 00 00 00       	mov    eax,0x0
   1b35e:	eb 7b                	jmp    1b3db <fatfs_sector_reader+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:255

        // Calculate sector address
        lba = fatfs_lba_of_cluster(fs, cluster_chain)+sector_to_read;
   1b360:	83 ec 08             	sub    esp,0x8
   1b363:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b366:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b369:	e8 8e fe ff ff       	call   1b1fc <fatfs_lba_of_cluster>
   1b36e:	83 c4 10             	add    esp,0x10
   1b371:	89 c2                	mov    edx,eax
   1b373:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1b376:	01 d0                	add    eax,edx
   1b378:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:259
    }

    // User provided target array
    if (target)
   1b37b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b37f:	74 18                	je     1b399 <fatfs_sector_reader+0xfd>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:260
        return fs->disk_io.read_media(lba, target, 1);
   1b381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b384:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b387:	83 ec 04             	sub    esp,0x4
   1b38a:	6a 01                	push   0x1
   1b38c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b38f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1b392:	ff d0                	call   eax
   1b394:	83 c4 10             	add    esp,0x10
   1b397:	eb 42                	jmp    1b3db <fatfs_sector_reader+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:262
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
   1b399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b39c:	8b 80 44 02 00 00    	mov    eax,DWORD PTR [eax+0x244]
   1b3a2:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   1b3a5:	74 2f                	je     1b3d6 <fatfs_sector_reader+0x13a>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:264
    {
        fs->currentsector.address = lba;
   1b3a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3aa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1b3ad:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:265
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b3b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3b6:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b3b9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b3bc:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b3bf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b3c2:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b3c8:	83 ec 04             	sub    esp,0x4
   1b3cb:	6a 01                	push   0x1
   1b3cd:	51                   	push   ecx
   1b3ce:	52                   	push   edx
   1b3cf:	ff d0                	call   eax
   1b3d1:	83 c4 10             	add    esp,0x10
   1b3d4:	eb 05                	jmp    1b3db <fatfs_sector_reader+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:268
    }
    else
        return 1;
   1b3d6:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:269
}
   1b3db:	c9                   	leave  
   1b3dc:	c3                   	ret    

0001b3dd <fatfs_read_sector>:
fatfs_read_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:275
//-----------------------------------------------------------------------------
// fatfs_read_sector: Read from the provided cluster and sector offset
// Returns True if success, returns False if not
//-----------------------------------------------------------------------------
int fatfs_read_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
   1b3dd:	55                   	push   ebp
   1b3de:	89 e5                	mov    ebp,esp
   1b3e0:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:277
    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
   1b3e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3e6:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b3e9:	85 c0                	test   eax,eax
   1b3eb:	0f 85 83 00 00 00    	jne    1b474 <fatfs_read_sector+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:277 (discriminator 1)
   1b3f1:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1b3f5:	75 7d                	jne    1b474 <fatfs_read_sector+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:282
    {
        uint32 lba;

        // In FAT16, there are a limited amount of sectors in root dir!
        if (sector < fs->rootdir_sectors)
   1b3f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3fa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1b3fd:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1b400:	76 1e                	jbe    1b420 <fatfs_read_sector+0x43>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:283
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
   1b402:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b405:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1b408:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b40b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1b40e:	01 c2                	add    edx,eax
   1b410:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b413:	01 d0                	add    eax,edx
   1b415:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:288
        else
            return 0;

        // User target buffer passed in
        if (target)
   1b418:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b41c:	74 27                	je     1b445 <fatfs_read_sector+0x68>
   1b41e:	eb 0a                	jmp    1b42a <fatfs_read_sector+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:285

        // In FAT16, there are a limited amount of sectors in root dir!
        if (sector < fs->rootdir_sectors)
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
        else
            return 0;
   1b420:	b8 00 00 00 00       	mov    eax,0x0
   1b425:	e9 c5 00 00 00       	jmp    1b4ef <fatfs_read_sector+0x112>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:291

        // User target buffer passed in
        if (target)
        {
            // Read from disk
            return fs->disk_io.read_media(lba, target, 1);
   1b42a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b42d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b430:	83 ec 04             	sub    esp,0x4
   1b433:	6a 01                	push   0x1
   1b435:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b438:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b43b:	ff d0                	call   eax
   1b43d:	83 c4 10             	add    esp,0x10
   1b440:	e9 aa 00 00 00       	jmp    1b4ef <fatfs_read_sector+0x112>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:296
        }
        else
        {
            // Calculate read address
            fs->currentsector.address = lba;
   1b445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b448:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1b44b:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:299

            // Read from disk
            return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b451:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b454:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b457:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b45a:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b45d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b460:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b466:	83 ec 04             	sub    esp,0x4
   1b469:	6a 01                	push   0x1
   1b46b:	51                   	push   ecx
   1b46c:	52                   	push   edx
   1b46d:	ff d0                	call   eax
   1b46f:	83 c4 10             	add    esp,0x10
   1b472:	eb 7b                	jmp    1b4ef <fatfs_read_sector+0x112>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:306
    }
    // FAT16/32 Other
    else
    {
        // User target buffer passed in
        if (target)
   1b474:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b478:	74 33                	je     1b4ad <fatfs_read_sector+0xd0>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:309
        {
            // Calculate read address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;
   1b47a:	83 ec 08             	sub    esp,0x8
   1b47d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b480:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b483:	e8 74 fd ff ff       	call   1b1fc <fatfs_lba_of_cluster>
   1b488:	83 c4 10             	add    esp,0x10
   1b48b:	89 c2                	mov    edx,eax
   1b48d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b490:	01 d0                	add    eax,edx
   1b492:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:312

            // Read from disk
            return fs->disk_io.read_media(lba, target, 1);
   1b495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b498:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b49b:	83 ec 04             	sub    esp,0x4
   1b49e:	6a 01                	push   0x1
   1b4a0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b4a3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1b4a6:	ff d0                	call   eax
   1b4a8:	83 c4 10             	add    esp,0x10
   1b4ab:	eb 42                	jmp    1b4ef <fatfs_read_sector+0x112>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:317
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
   1b4ad:	83 ec 08             	sub    esp,0x8
   1b4b0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b4b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b4b6:	e8 41 fd ff ff       	call   1b1fc <fatfs_lba_of_cluster>
   1b4bb:	83 c4 10             	add    esp,0x10
   1b4be:	89 c2                	mov    edx,eax
   1b4c0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b4c3:	01 c2                	add    edx,eax
   1b4c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4c8:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:320

            // Read from disk
            return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b4ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4d1:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b4d4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b4d7:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b4da:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b4dd:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b4e3:	83 ec 04             	sub    esp,0x4
   1b4e6:	6a 01                	push   0x1
   1b4e8:	51                   	push   ecx
   1b4e9:	52                   	push   edx
   1b4ea:	ff d0                	call   eax
   1b4ec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:323
        }
    }
}
   1b4ef:	c9                   	leave  
   1b4f0:	c3                   	ret    

0001b4f1 <fatfs_write_sector>:
fatfs_write_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:330
// fatfs_write_sector: Write to the provided cluster and sector offset
// Returns True if success, returns False if not
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_write_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
   1b4f1:	55                   	push   ebp
   1b4f2:	89 e5                	mov    ebp,esp
   1b4f4:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:332
    // No write access?
    if (!fs->disk_io.write_media)
   1b4f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4fa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b4fd:	85 c0                	test   eax,eax
   1b4ff:	75 0a                	jne    1b50b <fatfs_write_sector+0x1a>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:333
        return 0;
   1b501:	b8 00 00 00 00       	mov    eax,0x0
   1b506:	e9 0c 01 00 00       	jmp    1b617 <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:336

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
   1b50b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b50e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b511:	85 c0                	test   eax,eax
   1b513:	0f 85 83 00 00 00    	jne    1b59c <fatfs_write_sector+0xab>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:336 (discriminator 1)
   1b519:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1b51d:	75 7d                	jne    1b59c <fatfs_write_sector+0xab>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:341
    {
        uint32 lba;

        // In FAT16 we cannot extend the root dir!
        if (sector < fs->rootdir_sectors)
   1b51f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b522:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1b525:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1b528:	76 1e                	jbe    1b548 <fatfs_write_sector+0x57>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:342
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
   1b52a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b52d:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1b530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b533:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1b536:	01 c2                	add    edx,eax
   1b538:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b53b:	01 d0                	add    eax,edx
   1b53d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:347
        else
            return 0;

        // User target buffer passed in
        if (target)
   1b540:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b544:	74 27                	je     1b56d <fatfs_write_sector+0x7c>
   1b546:	eb 0a                	jmp    1b552 <fatfs_write_sector+0x61>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:344

        // In FAT16 we cannot extend the root dir!
        if (sector < fs->rootdir_sectors)
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
        else
            return 0;
   1b548:	b8 00 00 00 00       	mov    eax,0x0
   1b54d:	e9 c5 00 00 00       	jmp    1b617 <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:350

        // User target buffer passed in
        if (target)
        {
            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
   1b552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b555:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b558:	83 ec 04             	sub    esp,0x4
   1b55b:	6a 01                	push   0x1
   1b55d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b560:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b563:	ff d0                	call   eax
   1b565:	83 c4 10             	add    esp,0x10
   1b568:	e9 aa 00 00 00       	jmp    1b617 <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:355
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = lba;
   1b56d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b570:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1b573:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:358

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b579:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b57c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b57f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b582:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b585:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b588:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b58e:	83 ec 04             	sub    esp,0x4
   1b591:	6a 01                	push   0x1
   1b593:	51                   	push   ecx
   1b594:	52                   	push   edx
   1b595:	ff d0                	call   eax
   1b597:	83 c4 10             	add    esp,0x10
   1b59a:	eb 7b                	jmp    1b617 <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:365
    }
    // FAT16/32 Other
    else
    {
        // User target buffer passed in
        if (target)
   1b59c:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b5a0:	74 33                	je     1b5d5 <fatfs_write_sector+0xe4>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:368
        {
            // Calculate write address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;
   1b5a2:	83 ec 08             	sub    esp,0x8
   1b5a5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b5a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b5ab:	e8 4c fc ff ff       	call   1b1fc <fatfs_lba_of_cluster>
   1b5b0:	83 c4 10             	add    esp,0x10
   1b5b3:	89 c2                	mov    edx,eax
   1b5b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b5b8:	01 d0                	add    eax,edx
   1b5ba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:371

            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
   1b5bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b5c3:	83 ec 04             	sub    esp,0x4
   1b5c6:	6a 01                	push   0x1
   1b5c8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b5cb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1b5ce:	ff d0                	call   eax
   1b5d0:	83 c4 10             	add    esp,0x10
   1b5d3:	eb 42                	jmp    1b617 <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:376
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
   1b5d5:	83 ec 08             	sub    esp,0x8
   1b5d8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b5db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b5de:	e8 19 fc ff ff       	call   1b1fc <fatfs_lba_of_cluster>
   1b5e3:	83 c4 10             	add    esp,0x10
   1b5e6:	89 c2                	mov    edx,eax
   1b5e8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b5eb:	01 c2                	add    edx,eax
   1b5ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5f0:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:379

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b5f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5f9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b5fc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b5ff:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b602:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b605:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b60b:	83 ec 04             	sub    esp,0x4
   1b60e:	6a 01                	push   0x1
   1b610:	51                   	push   ecx
   1b611:	52                   	push   edx
   1b612:	ff d0                	call   eax
   1b614:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:382
        }
    }
}
   1b617:	c9                   	leave  
   1b618:	c3                   	ret    

0001b619 <fatfs_show_details>:
fatfs_show_details():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:388
#endif
//-----------------------------------------------------------------------------
// fatfs_show_details: Show the details about the filesystem
//-----------------------------------------------------------------------------
void fatfs_show_details(struct fatfs *fs)
{
   1b619:	55                   	push   ebp
   1b61a:	89 e5                	mov    ebp,esp
   1b61c:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:389
    FAT_PRINTF(("FAT details:\r\n"));
   1b61f:	83 ec 0c             	sub    esp,0xc
   1b622:	68 10 36 08 00       	push   0x83610
   1b627:	e8 8b ba 00 00       	call   270b7 <printk>
   1b62c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:390
    FAT_PRINTF((" Type =%s", (fs->fat_type == FAT_TYPE_32) ? "FAT32": "FAT16"));
   1b62f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b632:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b635:	83 f8 01             	cmp    eax,0x1
   1b638:	75 07                	jne    1b641 <fatfs_show_details+0x28>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:390 (discriminator 1)
   1b63a:	b8 1f 36 08 00       	mov    eax,0x8361f
   1b63f:	eb 05                	jmp    1b646 <fatfs_show_details+0x2d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:390 (discriminator 2)
   1b641:	b8 25 36 08 00       	mov    eax,0x83625
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:390 (discriminator 4)
   1b646:	83 ec 08             	sub    esp,0x8
   1b649:	50                   	push   eax
   1b64a:	68 2b 36 08 00       	push   0x8362b
   1b64f:	e8 63 ba 00 00       	call   270b7 <printk>
   1b654:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:391 (discriminator 4)
    FAT_PRINTF((" Root Dir First Cluster = %x\r\n", fs->rootdir_first_cluster));
   1b657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b65a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1b65d:	83 ec 08             	sub    esp,0x8
   1b660:	50                   	push   eax
   1b661:	68 38 36 08 00       	push   0x83638
   1b666:	e8 4c ba 00 00       	call   270b7 <printk>
   1b66b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:392 (discriminator 4)
    FAT_PRINTF((" FAT Begin LBA = 0x%x\r\n",fs->fat_begin_lba));
   1b66e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b671:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   1b674:	83 ec 08             	sub    esp,0x8
   1b677:	50                   	push   eax
   1b678:	68 57 36 08 00       	push   0x83657
   1b67d:	e8 35 ba 00 00       	call   270b7 <printk>
   1b682:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:393 (discriminator 4)
    FAT_PRINTF((" Cluster Begin LBA = 0x%x\r\n",fs->cluster_begin_lba));
   1b685:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b688:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1b68b:	83 ec 08             	sub    esp,0x8
   1b68e:	50                   	push   eax
   1b68f:	68 6f 36 08 00       	push   0x8366f
   1b694:	e8 1e ba 00 00       	call   270b7 <printk>
   1b699:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:394 (discriminator 4)
    FAT_PRINTF((" Sectors Per Cluster = %d\r\n", fs->sectors_per_cluster));
   1b69c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b69f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b6a2:	0f b6 c0             	movzx  eax,al
   1b6a5:	83 ec 08             	sub    esp,0x8
   1b6a8:	50                   	push   eax
   1b6a9:	68 8b 36 08 00       	push   0x8368b
   1b6ae:	e8 04 ba 00 00       	call   270b7 <printk>
   1b6b3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:395 (discriminator 4)
}
   1b6b6:	90                   	nop
   1b6b7:	c9                   	leave  
   1b6b8:	c3                   	ret    

0001b6b9 <fatfs_get_root_cluster>:
fatfs_get_root_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:400
//-----------------------------------------------------------------------------
// fatfs_get_root_cluster: Get the root dir cluster
//-----------------------------------------------------------------------------
uint32 fatfs_get_root_cluster(struct fatfs *fs)
{
   1b6b9:	55                   	push   ebp
   1b6ba:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:402
    // NOTE: On FAT16 this will be 0 which has a special meaning...
    return fs->rootdir_first_cluster;
   1b6bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b6bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:403
}
   1b6c2:	5d                   	pop    ebp
   1b6c3:	c3                   	ret    

0001b6c4 <fatfs_get_file_entry>:
fatfs_get_file_entry():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:408
//-------------------------------------------------------------
// fatfs_get_file_entry: Find the file entry for a filename
//-------------------------------------------------------------
uint32 fatfs_get_file_entry(struct fatfs *fs, uint32 Cluster, char *name_to_find, struct fat_dir_entry *sfEntry)
{
   1b6c4:	55                   	push   ebp
   1b6c5:	89 e5                	mov    ebp,esp
   1b6c7:	81 ec 38 01 00 00    	sub    esp,0x138
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:409
    uint8 item=0;
   1b6cd:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:410
    uint16 recordoffset = 0;
   1b6d1:	66 c7 45 ea 00 00    	mov    WORD PTR [ebp-0x16],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:411
    uint8 i=0;
   1b6d7:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:412
    int x=0;
   1b6db:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:413
    char *long_filename = NULL;
   1b6e2:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:416
    char short_filename[13];
    struct lfn_cache lfn;
    int dotRequired = 0;
   1b6e9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:419
    struct fat_dir_entry *directoryEntry;

    fatfs_lfn_cache_init(&lfn, 1);
   1b6f0:	83 ec 08             	sub    esp,0x8
   1b6f3:	6a 01                	push   0x1
   1b6f5:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1b6fb:	50                   	push   eax
   1b6fc:	e8 8f 39 00 00       	call   1f090 <fatfs_lfn_cache_init>
   1b701:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:425

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1b704:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1b707:	8d 50 01             	lea    edx,[eax+0x1]
   1b70a:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1b70d:	6a 00                	push   0x0
   1b70f:	50                   	push   eax
   1b710:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b713:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b716:	e8 81 fb ff ff       	call   1b29c <fatfs_sector_reader>
   1b71b:	83 c4 10             	add    esp,0x10
   1b71e:	85 c0                	test   eax,eax
   1b720:	0f 84 13 02 00 00    	je     1b939 <fatfs_get_file_entry+0x275>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:428
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1b726:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1b72a:	e9 fb 01 00 00       	jmp    1b92a <fatfs_get_file_entry+0x266>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:431
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1b72f:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1b733:	c1 e0 05             	shl    eax,0x5
   1b736:	66 89 45 ea          	mov    WORD PTR [ebp-0x16],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:434

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1b73a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b73d:	8d 50 44             	lea    edx,[eax+0x44]
   1b740:	0f b7 45 ea          	movzx  eax,WORD PTR [ebp-0x16]
   1b744:	01 d0                	add    eax,edx
   1b746:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:438

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1b749:	83 ec 0c             	sub    esp,0xc
   1b74c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1b74f:	e8 56 3c 00 00       	call   1f3aa <fatfs_entry_lfn_text>
   1b754:	83 c4 10             	add    esp,0x10
   1b757:	85 c0                	test   eax,eax
   1b759:	74 24                	je     1b77f <fatfs_get_file_entry+0xbb>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:439
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
   1b75b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b75e:	8d 50 44             	lea    edx,[eax+0x44]
   1b761:	0f b7 45 ea          	movzx  eax,WORD PTR [ebp-0x16]
   1b765:	01 d0                	add    eax,edx
   1b767:	83 ec 08             	sub    esp,0x8
   1b76a:	50                   	push   eax
   1b76b:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1b771:	50                   	push   eax
   1b772:	e8 6f 39 00 00       	call   1f0e6 <fatfs_lfn_cache_entry>
   1b777:	83 c4 10             	add    esp,0x10
   1b77a:	e9 a1 01 00 00       	jmp    1b920 <fatfs_get_file_entry+0x25c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:442

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1b77f:	83 ec 0c             	sub    esp,0xc
   1b782:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1b785:	e8 43 3c 00 00       	call   1f3cd <fatfs_entry_lfn_invalid>
   1b78a:	83 c4 10             	add    esp,0x10
   1b78d:	85 c0                	test   eax,eax
   1b78f:	74 19                	je     1b7aa <fatfs_get_file_entry+0xe6>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:443
                    fatfs_lfn_cache_init(&lfn, 0);
   1b791:	83 ec 08             	sub    esp,0x8
   1b794:	6a 00                	push   0x0
   1b796:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1b79c:	50                   	push   eax
   1b79d:	e8 ee 38 00 00       	call   1f090 <fatfs_lfn_cache_init>
   1b7a2:	83 c4 10             	add    esp,0x10
   1b7a5:	e9 76 01 00 00       	jmp    1b920 <fatfs_get_file_entry+0x25c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:446

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
   1b7aa:	83 ec 08             	sub    esp,0x8
   1b7ad:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1b7b0:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1b7b6:	50                   	push   eax
   1b7b7:	e8 52 3c 00 00       	call   1f40e <fatfs_entry_lfn_exists>
   1b7bc:	83 c4 10             	add    esp,0x10
   1b7bf:	85 c0                	test   eax,eax
   1b7c1:	74 60                	je     1b823 <fatfs_get_file_entry+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:448
                {
                    long_filename = fatfs_lfn_cache_get(&lfn);
   1b7c3:	83 ec 0c             	sub    esp,0xc
   1b7c6:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1b7cc:	50                   	push   eax
   1b7cd:	e8 80 3b 00 00       	call   1f352 <fatfs_lfn_cache_get>
   1b7d2:	83 c4 10             	add    esp,0x10
   1b7d5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:451

                    // Compare names to see if they match
                    if (fatfs_compare_names(long_filename, name_to_find))
   1b7d8:	83 ec 08             	sub    esp,0x8
   1b7db:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1b7de:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1b7e1:	e8 5d 47 00 00       	call   1ff43 <fatfs_compare_names>
   1b7e6:	83 c4 10             	add    esp,0x10
   1b7e9:	85 c0                	test   eax,eax
   1b7eb:	74 1d                	je     1b80a <fatfs_get_file_entry+0x146>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:453
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
   1b7ed:	83 ec 04             	sub    esp,0x4
   1b7f0:	6a 20                	push   0x20
   1b7f2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1b7f5:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b7f8:	e8 1f a2 00 00       	call   25a1c <memcpy>
   1b7fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:454
                        return 1;
   1b800:	b8 01 00 00 00       	mov    eax,0x1
   1b805:	e9 35 01 00 00       	jmp    1b93f <fatfs_get_file_entry+0x27b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:457
                    }

                    fatfs_lfn_cache_init(&lfn, 0);
   1b80a:	83 ec 08             	sub    esp,0x8
   1b80d:	6a 00                	push   0x0
   1b80f:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1b815:	50                   	push   eax
   1b816:	e8 75 38 00 00       	call   1f090 <fatfs_lfn_cache_init>
   1b81b:	83 c4 10             	add    esp,0x10
   1b81e:	e9 fd 00 00 00       	jmp    1b920 <fatfs_get_file_entry+0x25c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:462
                }
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   1b823:	83 ec 0c             	sub    esp,0xc
   1b826:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1b829:	e8 3a 3c 00 00       	call   1f468 <fatfs_entry_sfn_only>
   1b82e:	83 c4 10             	add    esp,0x10
   1b831:	85 c0                	test   eax,eax
   1b833:	0f 84 e7 00 00 00    	je     1b920 <fatfs_get_file_entry+0x25c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:464
                {
                    memset(short_filename, 0, sizeof(short_filename));
   1b839:	83 ec 04             	sub    esp,0x4
   1b83c:	6a 0d                	push   0xd
   1b83e:	6a 00                	push   0x0
   1b840:	8d 45 d3             	lea    eax,[ebp-0x2d]
   1b843:	50                   	push   eax
   1b844:	e8 e4 97 00 00       	call   2502d <memset>
   1b849:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:467

                    // Copy name to string
                    for (i=0; i<8; i++)
   1b84c:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
   1b850:	eb 1d                	jmp    1b86f <fatfs_get_file_entry+0x1ab>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:468 (discriminator 3)
                        short_filename[i] = directoryEntry->Name[i];
   1b852:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1b856:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   1b85a:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1b85d:	0f b6 14 11          	movzx  edx,BYTE PTR [ecx+edx*1]
   1b861:	88 54 05 d3          	mov    BYTE PTR [ebp+eax*1-0x2d],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:467 (discriminator 3)
                if (fatfs_entry_sfn_only(directoryEntry) )
                {
                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++)
   1b865:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1b869:	83 c0 01             	add    eax,0x1
   1b86c:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:467 (discriminator 1)
   1b86f:	80 7d f6 07          	cmp    BYTE PTR [ebp-0xa],0x7
   1b873:	76 dd                	jbe    1b852 <fatfs_get_file_entry+0x18e>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:471
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
   1b875:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:472
                    for (i=8; i<11; i++)
   1b87c:	c6 45 f6 08          	mov    BYTE PTR [ebp-0xa],0x8
   1b880:	eb 36                	jmp    1b8b8 <fatfs_get_file_entry+0x1f4>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:474
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
   1b882:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1b886:	8d 48 01             	lea    ecx,[eax+0x1]
   1b889:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1b88d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1b890:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1b894:	88 44 0d d3          	mov    BYTE PTR [ebp+ecx*1-0x2d],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:475
                        if (directoryEntry->Name[i] != ' ')
   1b898:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1b89c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1b89f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1b8a3:	3c 20                	cmp    al,0x20
   1b8a5:	74 07                	je     1b8ae <fatfs_get_file_entry+0x1ea>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:476
                            dotRequired = 1;
   1b8a7:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:472 (discriminator 2)
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
   1b8ae:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1b8b2:	83 c0 01             	add    eax,0x1
   1b8b5:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:472 (discriminator 1)
   1b8b8:	80 7d f6 0a          	cmp    BYTE PTR [ebp-0xa],0xa
   1b8bc:	76 c4                	jbe    1b882 <fatfs_get_file_entry+0x1be>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:480
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
   1b8be:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   1b8c2:	74 14                	je     1b8d8 <fatfs_get_file_entry+0x214>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:483
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
   1b8c4:	0f b6 45 d3          	movzx  eax,BYTE PTR [ebp-0x2d]
   1b8c8:	3c 2e                	cmp    al,0x2e
   1b8ca:	74 06                	je     1b8d2 <fatfs_get_file_entry+0x20e>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:484
                            short_filename[8] = '.';
   1b8cc:	c6 45 db 2e          	mov    BYTE PTR [ebp-0x25],0x2e
   1b8d0:	eb 0a                	jmp    1b8dc <fatfs_get_file_entry+0x218>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:486
                        else
                            short_filename[8] = ' ';
   1b8d2:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
   1b8d6:	eb 04                	jmp    1b8dc <fatfs_get_file_entry+0x218>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:489
                    }
                    else
                        short_filename[8] = ' ';
   1b8d8:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:492

                    // Compare names to see if they match
                    if (fatfs_compare_names(short_filename, name_to_find))
   1b8dc:	83 ec 08             	sub    esp,0x8
   1b8df:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1b8e2:	8d 45 d3             	lea    eax,[ebp-0x2d]
   1b8e5:	50                   	push   eax
   1b8e6:	e8 58 46 00 00       	call   1ff43 <fatfs_compare_names>
   1b8eb:	83 c4 10             	add    esp,0x10
   1b8ee:	85 c0                	test   eax,eax
   1b8f0:	74 1a                	je     1b90c <fatfs_get_file_entry+0x248>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:494
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
   1b8f2:	83 ec 04             	sub    esp,0x4
   1b8f5:	6a 20                	push   0x20
   1b8f7:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1b8fa:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b8fd:	e8 1a a1 00 00       	call   25a1c <memcpy>
   1b902:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:495
                        return 1;
   1b905:	b8 01 00 00 00       	mov    eax,0x1
   1b90a:	eb 33                	jmp    1b93f <fatfs_get_file_entry+0x27b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:498
                    }

                    fatfs_lfn_cache_init(&lfn, 0);
   1b90c:	83 ec 08             	sub    esp,0x8
   1b90f:	6a 00                	push   0x0
   1b911:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1b917:	50                   	push   eax
   1b918:	e8 73 37 00 00       	call   1f090 <fatfs_lfn_cache_init>
   1b91d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:428 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1b920:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1b924:	83 c0 01             	add    eax,0x1
   1b927:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:428 (discriminator 1)
   1b92a:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1b92e:	0f 86 fb fd ff ff    	jbe    1b72f <fatfs_get_file_entry+0x6b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:504 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1b934:	e9 cb fd ff ff       	jmp    1b704 <fatfs_get_file_entry+0x40>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:503
                    fatfs_lfn_cache_init(&lfn, 0);
                }
            } // End of if
        }
        else
            break;
   1b939:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:506
    } // End of while loop

    return 0;
   1b93a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:507 (discriminator 2)
}
   1b93f:	c9                   	leave  
   1b940:	c3                   	ret    

0001b941 <fatfs_sfn_exists>:
fatfs_sfn_exists():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:514
// fatfs_sfn_exists: Check if a short filename exists.
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_sfn_exists(struct fatfs *fs, uint32 Cluster, char *shortname)
{
   1b941:	55                   	push   ebp
   1b942:	89 e5                	mov    ebp,esp
   1b944:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:515
    uint8 item=0;
   1b947:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:516
    uint16 recordoffset = 0;
   1b94b:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:517
    int x=0;
   1b951:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:524

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1b958:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1b95b:	8d 50 01             	lea    edx,[eax+0x1]
   1b95e:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1b961:	6a 00                	push   0x0
   1b963:	50                   	push   eax
   1b964:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b967:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b96a:	e8 2d f9 ff ff       	call   1b29c <fatfs_sector_reader>
   1b96f:	83 c4 10             	add    esp,0x10
   1b972:	85 c0                	test   eax,eax
   1b974:	0f 84 8a 00 00 00    	je     1ba04 <fatfs_sfn_exists+0xc3>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:527
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1b97a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1b97e:	eb 79                	jmp    1b9f9 <fatfs_sfn_exists+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:530
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1b980:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1b984:	c1 e0 05             	shl    eax,0x5
   1b987:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:533

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1b98b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b98e:	8d 50 44             	lea    edx,[eax+0x44]
   1b991:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1b995:	01 d0                	add    eax,edx
   1b997:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:537

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1b99a:	83 ec 0c             	sub    esp,0xc
   1b99d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1b9a0:	e8 05 3a 00 00       	call   1f3aa <fatfs_entry_lfn_text>
   1b9a5:	83 c4 10             	add    esp,0x10
   1b9a8:	85 c0                	test   eax,eax
   1b9aa:	75 43                	jne    1b9ef <fatfs_sfn_exists+0xae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:541
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1b9ac:	83 ec 0c             	sub    esp,0xc
   1b9af:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1b9b2:	e8 16 3a 00 00       	call   1f3cd <fatfs_entry_lfn_invalid>
   1b9b7:	83 c4 10             	add    esp,0x10
   1b9ba:	85 c0                	test   eax,eax
   1b9bc:	75 31                	jne    1b9ef <fatfs_sfn_exists+0xae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:546
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   1b9be:	83 ec 0c             	sub    esp,0xc
   1b9c1:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1b9c4:	e8 9f 3a 00 00       	call   1f468 <fatfs_entry_sfn_only>
   1b9c9:	83 c4 10             	add    esp,0x10
   1b9cc:	85 c0                	test   eax,eax
   1b9ce:	74 1f                	je     1b9ef <fatfs_sfn_exists+0xae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:548
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   1b9d0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1b9d3:	83 ec 04             	sub    esp,0x4
   1b9d6:	6a 0b                	push   0xb
   1b9d8:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1b9db:	50                   	push   eax
   1b9dc:	e8 2b 62 ff ff       	call   11c0c <strncmp>
   1b9e1:	83 c4 10             	add    esp,0x10
   1b9e4:	85 c0                	test   eax,eax
   1b9e6:	75 07                	jne    1b9ef <fatfs_sfn_exists+0xae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:549
                        return 1;
   1b9e8:	b8 01 00 00 00       	mov    eax,0x1
   1b9ed:	eb 1b                	jmp    1ba0a <fatfs_sfn_exists+0xc9>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:527 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1b9ef:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1b9f3:	83 c0 01             	add    eax,0x1
   1b9f6:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:527 (discriminator 1)
   1b9f9:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1b9fd:	76 81                	jbe    1b980 <fatfs_sfn_exists+0x3f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:555 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1b9ff:	e9 54 ff ff ff       	jmp    1b958 <fatfs_sfn_exists+0x17>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:554
                        return 1;
                }
            } // End of if
        }
        else
            break;
   1ba04:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:557
    } // End of while loop

    return 0;
   1ba05:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:558
}
   1ba0a:	c9                   	leave  
   1ba0b:	c3                   	ret    

0001ba0c <fatfs_update_timestamps>:
fatfs_update_timestamps():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:565
//-------------------------------------------------------------
// fatfs_update_timestamps: Update date/time details
//-------------------------------------------------------------
#if FATFS_INC_TIME_DATE_SUPPORT
int fatfs_update_timestamps(struct fat_dir_entry *directoryEntry, int create, int modify, int access)
{
   1ba0c:	55                   	push   ebp
   1ba0d:	89 e5                	mov    ebp,esp
   1ba0f:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:572
    struct tm * time_info;
    uint16 fat_time;
    uint16 fat_date;

    // Get system time
    time(&time_now);
   1ba12:	83 ec 0c             	sub    esp,0xc
   1ba15:	8d 45 ec             	lea    eax,[ebp-0x14]
   1ba18:	50                   	push   eax
   1ba19:	e8 e6 bc 00 00       	call   27704 <time>
   1ba1e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:575

    // Convert to local time
    time_info = localtime(&time_now);
   1ba21:	83 ec 0c             	sub    esp,0xc
   1ba24:	8d 45 ec             	lea    eax,[ebp-0x14]
   1ba27:	50                   	push   eax
   1ba28:	e8 f5 bf 00 00       	call   27a22 <localtime>
   1ba2d:	83 c4 10             	add    esp,0x10
   1ba30:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:578

    // Convert time to FAT format
    fat_time = fatfs_convert_to_fat_time(time_info->tm_hour, time_info->tm_min, time_info->tm_sec);
   1ba33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ba36:	8b 08                	mov    ecx,DWORD PTR [eax]
   1ba38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ba3b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1ba3e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ba41:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1ba44:	83 ec 04             	sub    esp,0x4
   1ba47:	51                   	push   ecx
   1ba48:	52                   	push   edx
   1ba49:	50                   	push   eax
   1ba4a:	e8 e9 40 00 00       	call   1fb38 <fatfs_convert_to_fat_time>
   1ba4f:	83 c4 10             	add    esp,0x10
   1ba52:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:581

    // Convert date to FAT format
    fat_date = fatfs_convert_to_fat_date(time_info->tm_mday, time_info->tm_mon + 1, time_info->tm_year + 1900);
   1ba56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ba59:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   1ba5c:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   1ba62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ba65:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1ba68:	8d 50 01             	lea    edx,[eax+0x1]
   1ba6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ba6e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1ba71:	83 ec 04             	sub    esp,0x4
   1ba74:	51                   	push   ecx
   1ba75:	52                   	push   edx
   1ba76:	50                   	push   eax
   1ba77:	e8 0e 41 00 00       	call   1fb8a <fatfs_convert_to_fat_date>
   1ba7c:	83 c4 10             	add    esp,0x10
   1ba7f:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:584

    // Update requested fields
    if (create)
   1ba83:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1ba87:	74 38                	je     1bac1 <fatfs_update_timestamps+0xb5>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:586
    {
        directoryEntry->CrtTime[1] = fat_time >> 8;
   1ba89:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1ba8d:	66 c1 e8 08          	shr    ax,0x8
   1ba91:	89 c2                	mov    edx,eax
   1ba93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ba96:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:587
        directoryEntry->CrtTime[0] = fat_time >> 0;
   1ba99:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1ba9d:	89 c2                	mov    edx,eax
   1ba9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1baa2:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:588
        directoryEntry->CrtDate[1] = fat_date >> 8;
   1baa5:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1baa9:	66 c1 e8 08          	shr    ax,0x8
   1baad:	89 c2                	mov    edx,eax
   1baaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bab2:	88 50 11             	mov    BYTE PTR [eax+0x11],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:589
        directoryEntry->CrtDate[0] = fat_date >> 0;
   1bab5:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bab9:	89 c2                	mov    edx,eax
   1babb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1babe:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:592
    }

    if (modify)
   1bac1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   1bac5:	74 38                	je     1baff <fatfs_update_timestamps+0xf3>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:594
    {
        directoryEntry->WrtTime[1] = fat_time >> 8;
   1bac7:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bacb:	66 c1 e8 08          	shr    ax,0x8
   1bacf:	89 c2                	mov    edx,eax
   1bad1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bad4:	88 50 17             	mov    BYTE PTR [eax+0x17],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:595
        directoryEntry->WrtTime[0] = fat_time >> 0;
   1bad7:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1badb:	89 c2                	mov    edx,eax
   1badd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bae0:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:596
        directoryEntry->WrtDate[1] = fat_date >> 8;
   1bae3:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bae7:	66 c1 e8 08          	shr    ax,0x8
   1baeb:	89 c2                	mov    edx,eax
   1baed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1baf0:	88 50 19             	mov    BYTE PTR [eax+0x19],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:597
        directoryEntry->WrtDate[0] = fat_date >> 0;
   1baf3:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1baf7:	89 c2                	mov    edx,eax
   1baf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bafc:	88 50 18             	mov    BYTE PTR [eax+0x18],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:600
    }

    if (access)
   1baff:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1bb03:	74 38                	je     1bb3d <fatfs_update_timestamps+0x131>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:602
    {
        directoryEntry->LstAccDate[1] = fat_time >> 8;
   1bb05:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bb09:	66 c1 e8 08          	shr    ax,0x8
   1bb0d:	89 c2                	mov    edx,eax
   1bb0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb12:	88 50 13             	mov    BYTE PTR [eax+0x13],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:603
        directoryEntry->LstAccDate[0] = fat_time >> 0;
   1bb15:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bb19:	89 c2                	mov    edx,eax
   1bb1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb1e:	88 50 12             	mov    BYTE PTR [eax+0x12],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:604
        directoryEntry->LstAccDate[1] = fat_date >> 8;
   1bb21:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bb25:	66 c1 e8 08          	shr    ax,0x8
   1bb29:	89 c2                	mov    edx,eax
   1bb2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb2e:	88 50 13             	mov    BYTE PTR [eax+0x13],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:605
        directoryEntry->LstAccDate[0] = fat_date >> 0;
   1bb31:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bb35:	89 c2                	mov    edx,eax
   1bb37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb3a:	88 50 12             	mov    BYTE PTR [eax+0x12],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:608
    }

    return 1;
   1bb3d:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:609
}
   1bb42:	c9                   	leave  
   1bb43:	c3                   	ret    

0001bb44 <fatfs_update_file_length>:
fatfs_update_file_length():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:617
// fatfs_update_file_length: Find a SFN entry and update it
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_update_file_length(struct fatfs *fs, uint32 Cluster, char *shortname, uint32 fileLength)
{
   1bb44:	55                   	push   ebp
   1bb45:	89 e5                	mov    ebp,esp
   1bb47:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:618
    uint8 item=0;
   1bb4a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:619
    uint16 recordoffset = 0;
   1bb4e:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:620
    int x=0;
   1bb54:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:624
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
   1bb5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb5e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1bb61:	85 c0                	test   eax,eax
   1bb63:	75 0a                	jne    1bb6f <fatfs_update_file_length+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:625
        return 0;
   1bb65:	b8 00 00 00 00       	mov    eax,0x0
   1bb6a:	e9 14 01 00 00       	jmp    1bc83 <fatfs_update_file_length+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:631

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1bb6f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1bb72:	8d 50 01             	lea    edx,[eax+0x1]
   1bb75:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1bb78:	6a 00                	push   0x0
   1bb7a:	50                   	push   eax
   1bb7b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1bb7e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1bb81:	e8 16 f7 ff ff       	call   1b29c <fatfs_sector_reader>
   1bb86:	83 c4 10             	add    esp,0x10
   1bb89:	85 c0                	test   eax,eax
   1bb8b:	0f 84 ec 00 00 00    	je     1bc7d <fatfs_update_file_length+0x139>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:634
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1bb91:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1bb95:	e9 d4 00 00 00       	jmp    1bc6e <fatfs_update_file_length+0x12a>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:637
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1bb9a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1bb9e:	c1 e0 05             	shl    eax,0x5
   1bba1:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:640

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1bba5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bba8:	8d 50 44             	lea    edx,[eax+0x44]
   1bbab:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1bbaf:	01 d0                	add    eax,edx
   1bbb1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:644

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1bbb4:	83 ec 0c             	sub    esp,0xc
   1bbb7:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bbba:	e8 eb 37 00 00       	call   1f3aa <fatfs_entry_lfn_text>
   1bbbf:	83 c4 10             	add    esp,0x10
   1bbc2:	85 c0                	test   eax,eax
   1bbc4:	0f 85 9a 00 00 00    	jne    1bc64 <fatfs_update_file_length+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:648
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1bbca:	83 ec 0c             	sub    esp,0xc
   1bbcd:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bbd0:	e8 f8 37 00 00       	call   1f3cd <fatfs_entry_lfn_invalid>
   1bbd5:	83 c4 10             	add    esp,0x10
   1bbd8:	85 c0                	test   eax,eax
   1bbda:	0f 85 84 00 00 00    	jne    1bc64 <fatfs_update_file_length+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:654
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   1bbe0:	83 ec 0c             	sub    esp,0xc
   1bbe3:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bbe6:	e8 7d 38 00 00       	call   1f468 <fatfs_entry_sfn_only>
   1bbeb:	83 c4 10             	add    esp,0x10
   1bbee:	85 c0                	test   eax,eax
   1bbf0:	74 72                	je     1bc64 <fatfs_update_file_length+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:656
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   1bbf2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1bbf5:	83 ec 04             	sub    esp,0x4
   1bbf8:	6a 0b                	push   0xb
   1bbfa:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1bbfd:	50                   	push   eax
   1bbfe:	e8 09 60 ff ff       	call   11c0c <strncmp>
   1bc03:	83 c4 10             	add    esp,0x10
   1bc06:	85 c0                	test   eax,eax
   1bc08:	75 5a                	jne    1bc64 <fatfs_update_file_length+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:658
                    {
                        directoryEntry->FileSize = FAT_HTONL(fileLength);
   1bc0a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1bc0d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   1bc10:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:662

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
   1bc13:	6a 01                	push   0x1
   1bc15:	6a 01                	push   0x1
   1bc17:	6a 00                	push   0x0
   1bc19:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bc1c:	e8 eb fd ff ff       	call   1ba0c <fatfs_update_timestamps>
   1bc21:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:666
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
   1bc24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bc27:	8d 50 44             	lea    edx,[eax+0x44]
   1bc2a:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1bc2e:	01 d0                	add    eax,edx
   1bc30:	83 ec 04             	sub    esp,0x4
   1bc33:	6a 20                	push   0x20
   1bc35:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bc38:	50                   	push   eax
   1bc39:	e8 de 9d 00 00       	call   25a1c <memcpy>
   1bc3e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:669

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1bc41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bc44:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1bc47:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1bc4a:	8d 4a 44             	lea    ecx,[edx+0x44]
   1bc4d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1bc50:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1bc56:	83 ec 04             	sub    esp,0x4
   1bc59:	6a 01                	push   0x1
   1bc5b:	51                   	push   ecx
   1bc5c:	52                   	push   edx
   1bc5d:	ff d0                	call   eax
   1bc5f:	83 c4 10             	add    esp,0x10
   1bc62:	eb 1f                	jmp    1bc83 <fatfs_update_file_length+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:634 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1bc64:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1bc68:	83 c0 01             	add    eax,0x1
   1bc6b:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:634 (discriminator 1)
   1bc6e:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1bc72:	0f 86 22 ff ff ff    	jbe    1bb9a <fatfs_update_file_length+0x56>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:676 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1bc78:	e9 f2 fe ff ff       	jmp    1bb6f <fatfs_update_file_length+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:675
                    }
                }
            } // End of if
        }
        else
            break;
   1bc7d:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:678
    } // End of while loop

    return 0;
   1bc7e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:679
}
   1bc83:	c9                   	leave  
   1bc84:	c3                   	ret    

0001bc85 <fatfs_mark_file_deleted>:
fatfs_mark_file_deleted():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:687
// fatfs_mark_file_deleted: Find a SFN entry and mark if as deleted
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_mark_file_deleted(struct fatfs *fs, uint32 Cluster, char *shortname)
{
   1bc85:	55                   	push   ebp
   1bc86:	89 e5                	mov    ebp,esp
   1bc88:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:688
    uint8 item=0;
   1bc8b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:689
    uint16 recordoffset = 0;
   1bc8f:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:690
    int x=0;
   1bc95:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:694
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
   1bc9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bc9f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1bca2:	85 c0                	test   eax,eax
   1bca4:	75 0a                	jne    1bcb0 <fatfs_mark_file_deleted+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:695
        return 0;
   1bca6:	b8 00 00 00 00       	mov    eax,0x0
   1bcab:	e9 11 01 00 00       	jmp    1bdc1 <fatfs_mark_file_deleted+0x13c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:701

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1bcb0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1bcb3:	8d 50 01             	lea    edx,[eax+0x1]
   1bcb6:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1bcb9:	6a 00                	push   0x0
   1bcbb:	50                   	push   eax
   1bcbc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1bcbf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1bcc2:	e8 d5 f5 ff ff       	call   1b29c <fatfs_sector_reader>
   1bcc7:	83 c4 10             	add    esp,0x10
   1bcca:	85 c0                	test   eax,eax
   1bccc:	0f 84 e9 00 00 00    	je     1bdbb <fatfs_mark_file_deleted+0x136>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:704
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1bcd2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1bcd6:	e9 d1 00 00 00       	jmp    1bdac <fatfs_mark_file_deleted+0x127>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:707
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1bcdb:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1bcdf:	c1 e0 05             	shl    eax,0x5
   1bce2:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:710

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1bce6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bce9:	8d 50 44             	lea    edx,[eax+0x44]
   1bcec:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1bcf0:	01 d0                	add    eax,edx
   1bcf2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:714

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1bcf5:	83 ec 0c             	sub    esp,0xc
   1bcf8:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bcfb:	e8 aa 36 00 00       	call   1f3aa <fatfs_entry_lfn_text>
   1bd00:	83 c4 10             	add    esp,0x10
   1bd03:	85 c0                	test   eax,eax
   1bd05:	0f 85 97 00 00 00    	jne    1bda2 <fatfs_mark_file_deleted+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:718
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1bd0b:	83 ec 0c             	sub    esp,0xc
   1bd0e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bd11:	e8 b7 36 00 00       	call   1f3cd <fatfs_entry_lfn_invalid>
   1bd16:	83 c4 10             	add    esp,0x10
   1bd19:	85 c0                	test   eax,eax
   1bd1b:	0f 85 81 00 00 00    	jne    1bda2 <fatfs_mark_file_deleted+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:724
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   1bd21:	83 ec 0c             	sub    esp,0xc
   1bd24:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bd27:	e8 3c 37 00 00       	call   1f468 <fatfs_entry_sfn_only>
   1bd2c:	83 c4 10             	add    esp,0x10
   1bd2f:	85 c0                	test   eax,eax
   1bd31:	74 6f                	je     1bda2 <fatfs_mark_file_deleted+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:726
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
   1bd33:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1bd36:	83 ec 04             	sub    esp,0x4
   1bd39:	6a 0b                	push   0xb
   1bd3b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1bd3e:	50                   	push   eax
   1bd3f:	e8 c8 5e ff ff       	call   11c0c <strncmp>
   1bd44:	83 c4 10             	add    esp,0x10
   1bd47:	85 c0                	test   eax,eax
   1bd49:	75 57                	jne    1bda2 <fatfs_mark_file_deleted+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:729
                    {
                        // Mark as deleted
                        directoryEntry->Name[0] = FILE_HEADER_DELETED;
   1bd4b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1bd4e:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:733

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
   1bd51:	6a 01                	push   0x1
   1bd53:	6a 01                	push   0x1
   1bd55:	6a 00                	push   0x0
   1bd57:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bd5a:	e8 ad fc ff ff       	call   1ba0c <fatfs_update_timestamps>
   1bd5f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:737
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
   1bd62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bd65:	8d 50 44             	lea    edx,[eax+0x44]
   1bd68:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1bd6c:	01 d0                	add    eax,edx
   1bd6e:	83 ec 04             	sub    esp,0x4
   1bd71:	6a 20                	push   0x20
   1bd73:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bd76:	50                   	push   eax
   1bd77:	e8 a0 9c 00 00       	call   25a1c <memcpy>
   1bd7c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:740

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1bd7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bd82:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1bd85:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1bd88:	8d 4a 44             	lea    ecx,[edx+0x44]
   1bd8b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1bd8e:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1bd94:	83 ec 04             	sub    esp,0x4
   1bd97:	6a 01                	push   0x1
   1bd99:	51                   	push   ecx
   1bd9a:	52                   	push   edx
   1bd9b:	ff d0                	call   eax
   1bd9d:	83 c4 10             	add    esp,0x10
   1bda0:	eb 1f                	jmp    1bdc1 <fatfs_mark_file_deleted+0x13c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:704 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1bda2:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1bda6:	83 c0 01             	add    eax,0x1
   1bda9:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:704 (discriminator 1)
   1bdac:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1bdb0:	0f 86 25 ff ff ff    	jbe    1bcdb <fatfs_mark_file_deleted+0x56>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:747 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1bdb6:	e9 f5 fe ff ff       	jmp    1bcb0 <fatfs_mark_file_deleted+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:746
                    }
                }
            } // End of if
        }
        else
            break;
   1bdbb:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:749
    } // End of while loop

    return 0;
   1bdbc:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:750
}
   1bdc1:	c9                   	leave  
   1bdc2:	c3                   	ret    

0001bdc3 <fatfs_list_directory_start>:
fatfs_list_directory_start():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:757
//-----------------------------------------------------------------------------
// fatfs_list_directory_start: Initialise a directory listing procedure
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fatfs_list_directory_start(struct fatfs *fs, struct fs_dir_list_status *dirls, uint32 StartCluster)
{
   1bdc3:	55                   	push   ebp
   1bdc4:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:758
    dirls->cluster = StartCluster;
   1bdc6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1bdc9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1bdcc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:759
    dirls->sector = 0;
   1bdcf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1bdd2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:760
    dirls->offset = 0;
   1bdd8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1bddb:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:761
}
   1bddf:	90                   	nop
   1bde0:	5d                   	pop    ebp
   1bde1:	c3                   	ret    

0001bde2 <fatfs_list_directory_next>:
fatfs_list_directory_next():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:769
// fatfs_list_directory_next: Get the next entry in the directory.
// Returns: 1 = found, 0 = end of listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fatfs_list_directory_next(struct fatfs *fs, struct fs_dir_list_status *dirls, struct fs_dir_ent *entry)
{
   1bde2:	55                   	push   ebp
   1bde3:	89 e5                	mov    ebp,esp
   1bde5:	81 ec 38 01 00 00    	sub    esp,0x138
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:773
    uint8 i,item;
    uint16 recordoffset;
    struct fat_dir_entry *directoryEntry;
    char *long_filename = NULL;
   1bdeb:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:776
    char short_filename[13];
    struct lfn_cache lfn;
    int dotRequired = 0;
   1bdf2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:777
    int result = 0;
   1bdf9:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:780

    // Initialise LFN cache first
    fatfs_lfn_cache_init(&lfn, 0);
   1be00:	83 ec 08             	sub    esp,0x8
   1be03:	6a 00                	push   0x0
   1be05:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1be0b:	50                   	push   eax
   1be0c:	e8 7f 32 00 00       	call   1f090 <fatfs_lfn_cache_init>
   1be11:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:785

    while (1)
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
   1be14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1be17:	8b 10                	mov    edx,DWORD PTR [eax]
   1be19:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1be1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1be1f:	6a 00                	push   0x0
   1be21:	52                   	push   edx
   1be22:	50                   	push   eax
   1be23:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1be26:	e8 71 f4 ff ff       	call   1b29c <fatfs_sector_reader>
   1be2b:	83 c4 10             	add    esp,0x10
   1be2e:	85 c0                	test   eax,eax
   1be30:	0f 84 56 04 00 00    	je     1c28c <fatfs_list_directory_next+0x4aa>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:788
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1be36:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1be39:	0f b6 40 08          	movzx  eax,BYTE PTR [eax+0x8]
   1be3d:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
   1be40:	e9 24 04 00 00       	jmp    1c269 <fatfs_list_directory_next+0x487>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:791
            {
                // Increase directory offset
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1be45:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1be49:	c1 e0 05             	shl    eax,0x5
   1be4c:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:794

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1be50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1be53:	8d 50 44             	lea    edx,[eax+0x44]
   1be56:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   1be5a:	01 d0                	add    eax,edx
   1be5c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:798

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if ( fatfs_entry_lfn_text(directoryEntry) )
   1be5f:	83 ec 0c             	sub    esp,0xc
   1be62:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1be65:	e8 40 35 00 00       	call   1f3aa <fatfs_entry_lfn_text>
   1be6a:	83 c4 10             	add    esp,0x10
   1be6d:	85 c0                	test   eax,eax
   1be6f:	74 24                	je     1be95 <fatfs_list_directory_next+0xb3>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:799
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
   1be71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1be74:	8d 50 44             	lea    edx,[eax+0x44]
   1be77:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   1be7b:	01 d0                	add    eax,edx
   1be7d:	83 ec 08             	sub    esp,0x8
   1be80:	50                   	push   eax
   1be81:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1be87:	50                   	push   eax
   1be88:	e8 59 32 00 00       	call   1f0e6 <fatfs_lfn_cache_entry>
   1be8d:	83 c4 10             	add    esp,0x10
   1be90:	e9 ca 03 00 00       	jmp    1c25f <fatfs_list_directory_next+0x47d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:802

                // If Invalid record found delete any long file name information collated
                else if ( fatfs_entry_lfn_invalid(directoryEntry) )
   1be95:	83 ec 0c             	sub    esp,0xc
   1be98:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1be9b:	e8 2d 35 00 00       	call   1f3cd <fatfs_entry_lfn_invalid>
   1bea0:	83 c4 10             	add    esp,0x10
   1bea3:	85 c0                	test   eax,eax
   1bea5:	74 19                	je     1bec0 <fatfs_list_directory_next+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:803
                    fatfs_lfn_cache_init(&lfn, 0);
   1bea7:	83 ec 08             	sub    esp,0x8
   1beaa:	6a 00                	push   0x0
   1beac:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1beb2:	50                   	push   eax
   1beb3:	e8 d8 31 00 00       	call   1f090 <fatfs_lfn_cache_init>
   1beb8:	83 c4 10             	add    esp,0x10
   1bebb:	e9 9f 03 00 00       	jmp    1c25f <fatfs_list_directory_next+0x47d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:806

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
   1bec0:	83 ec 08             	sub    esp,0x8
   1bec3:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1bec6:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1becc:	50                   	push   eax
   1becd:	e8 3c 35 00 00       	call   1f40e <fatfs_entry_lfn_exists>
   1bed2:	83 c4 10             	add    esp,0x10
   1bed5:	85 c0                	test   eax,eax
   1bed7:	0f 84 67 01 00 00    	je     1c044 <fatfs_list_directory_next+0x262>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:809
                {
                    // Get text
                    long_filename = fatfs_lfn_cache_get(&lfn);
   1bedd:	83 ec 0c             	sub    esp,0xc
   1bee0:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1bee6:	50                   	push   eax
   1bee7:	e8 66 34 00 00       	call   1f352 <fatfs_lfn_cache_get>
   1beec:	83 c4 10             	add    esp,0x10
   1beef:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:810
                    strncpy(entry->filename, long_filename, FATFS_MAX_LONG_FILENAME-1);
   1bef2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bef5:	83 ec 04             	sub    esp,0x4
   1bef8:	6a 7f                	push   0x7f
   1befa:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1befd:	50                   	push   eax
   1befe:	e8 69 5d ff ff       	call   11c6c <strncpy>
   1bf03:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:812

                    if (fatfs_entry_is_dir(directoryEntry))
   1bf06:	83 ec 0c             	sub    esp,0xc
   1bf09:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1bf0c:	e8 a3 35 00 00       	call   1f4b4 <fatfs_entry_is_dir>
   1bf11:	83 c4 10             	add    esp,0x10
   1bf14:	85 c0                	test   eax,eax
   1bf16:	74 0c                	je     1bf24 <fatfs_list_directory_next+0x142>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:813
                        entry->is_dir = 1;
   1bf18:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bf1b:	c6 80 80 00 00 00 01 	mov    BYTE PTR [eax+0x80],0x1
   1bf22:	eb 0a                	jmp    1bf2e <fatfs_list_directory_next+0x14c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:815
                    else
                        entry->is_dir = 0;
   1bf24:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bf27:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:819

#if FATFS_INC_TIME_DATE_SUPPORT
                    // Get time / dates
                    entry->create_time = ((uint16)directoryEntry->CrtTime[1] << 8) | directoryEntry->CrtTime[0];
   1bf2e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bf31:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   1bf35:	0f b6 c0             	movzx  eax,al
   1bf38:	c1 e0 08             	shl    eax,0x8
   1bf3b:	89 c2                	mov    edx,eax
   1bf3d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bf40:	0f b6 40 0e          	movzx  eax,BYTE PTR [eax+0xe]
   1bf44:	0f b6 c0             	movzx  eax,al
   1bf47:	09 d0                	or     eax,edx
   1bf49:	89 c2                	mov    edx,eax
   1bf4b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bf4e:	66 89 90 94 00 00 00 	mov    WORD PTR [eax+0x94],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:820
                    entry->create_date = ((uint16)directoryEntry->CrtDate[1] << 8) | directoryEntry->CrtDate[0];
   1bf55:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bf58:	0f b6 40 11          	movzx  eax,BYTE PTR [eax+0x11]
   1bf5c:	0f b6 c0             	movzx  eax,al
   1bf5f:	c1 e0 08             	shl    eax,0x8
   1bf62:	89 c2                	mov    edx,eax
   1bf64:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bf67:	0f b6 40 10          	movzx  eax,BYTE PTR [eax+0x10]
   1bf6b:	0f b6 c0             	movzx  eax,al
   1bf6e:	09 d0                	or     eax,edx
   1bf70:	89 c2                	mov    edx,eax
   1bf72:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bf75:	66 89 90 92 00 00 00 	mov    WORD PTR [eax+0x92],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:821
                    entry->access_date = ((uint16)directoryEntry->LstAccDate[1] << 8) | directoryEntry->LstAccDate[0];
   1bf7c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bf7f:	0f b6 40 13          	movzx  eax,BYTE PTR [eax+0x13]
   1bf83:	0f b6 c0             	movzx  eax,al
   1bf86:	c1 e0 08             	shl    eax,0x8
   1bf89:	89 c2                	mov    edx,eax
   1bf8b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bf8e:	0f b6 40 12          	movzx  eax,BYTE PTR [eax+0x12]
   1bf92:	0f b6 c0             	movzx  eax,al
   1bf95:	09 d0                	or     eax,edx
   1bf97:	89 c2                	mov    edx,eax
   1bf99:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bf9c:	66 89 90 8c 00 00 00 	mov    WORD PTR [eax+0x8c],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:822
                    entry->write_time  = ((uint16)directoryEntry->WrtTime[1] << 8) | directoryEntry->WrtTime[0];
   1bfa3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bfa6:	0f b6 40 17          	movzx  eax,BYTE PTR [eax+0x17]
   1bfaa:	0f b6 c0             	movzx  eax,al
   1bfad:	c1 e0 08             	shl    eax,0x8
   1bfb0:	89 c2                	mov    edx,eax
   1bfb2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bfb5:	0f b6 40 16          	movzx  eax,BYTE PTR [eax+0x16]
   1bfb9:	0f b6 c0             	movzx  eax,al
   1bfbc:	09 d0                	or     eax,edx
   1bfbe:	89 c2                	mov    edx,eax
   1bfc0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bfc3:	66 89 90 8e 00 00 00 	mov    WORD PTR [eax+0x8e],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:823
                    entry->write_date  = ((uint16)directoryEntry->WrtDate[1] << 8) | directoryEntry->WrtDate[0];
   1bfca:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bfcd:	0f b6 40 19          	movzx  eax,BYTE PTR [eax+0x19]
   1bfd1:	0f b6 c0             	movzx  eax,al
   1bfd4:	c1 e0 08             	shl    eax,0x8
   1bfd7:	89 c2                	mov    edx,eax
   1bfd9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bfdc:	0f b6 40 18          	movzx  eax,BYTE PTR [eax+0x18]
   1bfe0:	0f b6 c0             	movzx  eax,al
   1bfe3:	09 d0                	or     eax,edx
   1bfe5:	89 c2                	mov    edx,eax
   1bfe7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bfea:	66 89 90 90 00 00 00 	mov    WORD PTR [eax+0x90],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:826
#endif

                    entry->size = FAT_HTONL(directoryEntry->FileSize);
   1bff1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bff4:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1bff7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bffa:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:827
                    entry->cluster = (FAT_HTONS(directoryEntry->FstClusHI)<<16) | FAT_HTONS(directoryEntry->FstClusLO);
   1c000:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c003:	0f b7 40 14          	movzx  eax,WORD PTR [eax+0x14]
   1c007:	0f b7 c0             	movzx  eax,ax
   1c00a:	c1 e0 10             	shl    eax,0x10
   1c00d:	89 c2                	mov    edx,eax
   1c00f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c012:	0f b7 40 1a          	movzx  eax,WORD PTR [eax+0x1a]
   1c016:	0f b7 c0             	movzx  eax,ax
   1c019:	09 d0                	or     eax,edx
   1c01b:	89 c2                	mov    edx,eax
   1c01d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c020:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:830

                    // Next starting position
                    dirls->offset = item + 1;
   1c026:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1c02a:	8d 50 01             	lea    edx,[eax+0x1]
   1c02d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c030:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:831
                    result = 1;
   1c033:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:832
                    return 1;
   1c03a:	b8 01 00 00 00       	mov    eax,0x1
   1c03f:	e9 4c 02 00 00       	jmp    1c290 <fatfs_list_directory_next+0x4ae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:837
                }
                // Normal Entry, only 8.3 Text
                else
#endif
                if ( fatfs_entry_sfn_only(directoryEntry) )
   1c044:	83 ec 0c             	sub    esp,0xc
   1c047:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c04a:	e8 19 34 00 00       	call   1f468 <fatfs_entry_sfn_only>
   1c04f:	83 c4 10             	add    esp,0x10
   1c052:	85 c0                	test   eax,eax
   1c054:	0f 84 05 02 00 00    	je     1c25f <fatfs_list_directory_next+0x47d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:839
                {
                    fatfs_lfn_cache_init(&lfn, 0);
   1c05a:	83 ec 08             	sub    esp,0x8
   1c05d:	6a 00                	push   0x0
   1c05f:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1c065:	50                   	push   eax
   1c066:	e8 25 30 00 00       	call   1f090 <fatfs_lfn_cache_init>
   1c06b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:841

                    memset(short_filename, 0, sizeof(short_filename));
   1c06e:	83 ec 04             	sub    esp,0x4
   1c071:	6a 0d                	push   0xd
   1c073:	6a 00                	push   0x0
   1c075:	8d 45 d3             	lea    eax,[ebp-0x2d]
   1c078:	50                   	push   eax
   1c079:	e8 af 8f 00 00       	call   2502d <memset>
   1c07e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:844

                    // Copy name to string
                    for (i=0; i<8; i++)
   1c081:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1c085:	eb 1d                	jmp    1c0a4 <fatfs_list_directory_next+0x2c2>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:845 (discriminator 3)
                        short_filename[i] = directoryEntry->Name[i];
   1c087:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c08b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   1c08f:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1c092:	0f b6 14 11          	movzx  edx,BYTE PTR [ecx+edx*1]
   1c096:	88 54 05 d3          	mov    BYTE PTR [ebp+eax*1-0x2d],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:844 (discriminator 3)
                    fatfs_lfn_cache_init(&lfn, 0);

                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++)
   1c09a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c09e:	83 c0 01             	add    eax,0x1
   1c0a1:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:844 (discriminator 1)
   1c0a4:	80 7d f7 07          	cmp    BYTE PTR [ebp-0x9],0x7
   1c0a8:	76 dd                	jbe    1c087 <fatfs_list_directory_next+0x2a5>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:848
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
   1c0aa:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:849
                    for (i=8; i<11; i++)
   1c0b1:	c6 45 f7 08          	mov    BYTE PTR [ebp-0x9],0x8
   1c0b5:	eb 36                	jmp    1c0ed <fatfs_list_directory_next+0x30b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:851
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
   1c0b7:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c0bb:	8d 48 01             	lea    ecx,[eax+0x1]
   1c0be:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c0c2:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1c0c5:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1c0c9:	88 44 0d d3          	mov    BYTE PTR [ebp+ecx*1-0x2d],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:852
                        if (directoryEntry->Name[i] != ' ')
   1c0cd:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c0d1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1c0d4:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1c0d8:	3c 20                	cmp    al,0x20
   1c0da:	74 07                	je     1c0e3 <fatfs_list_directory_next+0x301>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:853
                            dotRequired = 1;
   1c0dc:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:849 (discriminator 2)
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
   1c0e3:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c0e7:	83 c0 01             	add    eax,0x1
   1c0ea:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:849 (discriminator 1)
   1c0ed:	80 7d f7 0a          	cmp    BYTE PTR [ebp-0x9],0xa
   1c0f1:	76 c4                	jbe    1c0b7 <fatfs_list_directory_next+0x2d5>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:857
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
   1c0f3:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1c0f7:	74 14                	je     1c10d <fatfs_list_directory_next+0x32b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:860
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
   1c0f9:	0f b6 45 d3          	movzx  eax,BYTE PTR [ebp-0x2d]
   1c0fd:	3c 2e                	cmp    al,0x2e
   1c0ff:	74 06                	je     1c107 <fatfs_list_directory_next+0x325>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:861
                            short_filename[8] = '.';
   1c101:	c6 45 db 2e          	mov    BYTE PTR [ebp-0x25],0x2e
   1c105:	eb 0a                	jmp    1c111 <fatfs_list_directory_next+0x32f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:863
                        else
                            short_filename[8] = ' ';
   1c107:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
   1c10b:	eb 04                	jmp    1c111 <fatfs_list_directory_next+0x32f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:866
                    }
                    else
                        short_filename[8] = ' ';
   1c10d:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:868

                    fatfs_get_sfn_display_name(entry->filename, short_filename);
   1c111:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c114:	83 ec 08             	sub    esp,0x8
   1c117:	8d 55 d3             	lea    edx,[ebp-0x2d]
   1c11a:	52                   	push   edx
   1c11b:	50                   	push   eax
   1c11c:	e8 d7 3f 00 00       	call   200f8 <fatfs_get_sfn_display_name>
   1c121:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:870

                    if (fatfs_entry_is_dir(directoryEntry))
   1c124:	83 ec 0c             	sub    esp,0xc
   1c127:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c12a:	e8 85 33 00 00       	call   1f4b4 <fatfs_entry_is_dir>
   1c12f:	83 c4 10             	add    esp,0x10
   1c132:	85 c0                	test   eax,eax
   1c134:	74 0c                	je     1c142 <fatfs_list_directory_next+0x360>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:871
                        entry->is_dir = 1;
   1c136:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c139:	c6 80 80 00 00 00 01 	mov    BYTE PTR [eax+0x80],0x1
   1c140:	eb 0a                	jmp    1c14c <fatfs_list_directory_next+0x36a>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:873
                    else
                        entry->is_dir = 0;
   1c142:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c145:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:877

#if FATFS_INC_TIME_DATE_SUPPORT
                    // Get time / dates
                    entry->create_time = ((uint16)directoryEntry->CrtTime[1] << 8) | directoryEntry->CrtTime[0];
   1c14c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c14f:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   1c153:	0f b6 c0             	movzx  eax,al
   1c156:	c1 e0 08             	shl    eax,0x8
   1c159:	89 c2                	mov    edx,eax
   1c15b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c15e:	0f b6 40 0e          	movzx  eax,BYTE PTR [eax+0xe]
   1c162:	0f b6 c0             	movzx  eax,al
   1c165:	09 d0                	or     eax,edx
   1c167:	89 c2                	mov    edx,eax
   1c169:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c16c:	66 89 90 94 00 00 00 	mov    WORD PTR [eax+0x94],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:878
                    entry->create_date = ((uint16)directoryEntry->CrtDate[1] << 8) | directoryEntry->CrtDate[0];
   1c173:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c176:	0f b6 40 11          	movzx  eax,BYTE PTR [eax+0x11]
   1c17a:	0f b6 c0             	movzx  eax,al
   1c17d:	c1 e0 08             	shl    eax,0x8
   1c180:	89 c2                	mov    edx,eax
   1c182:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c185:	0f b6 40 10          	movzx  eax,BYTE PTR [eax+0x10]
   1c189:	0f b6 c0             	movzx  eax,al
   1c18c:	09 d0                	or     eax,edx
   1c18e:	89 c2                	mov    edx,eax
   1c190:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c193:	66 89 90 92 00 00 00 	mov    WORD PTR [eax+0x92],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:879
                    entry->access_date = ((uint16)directoryEntry->LstAccDate[1] << 8) | directoryEntry->LstAccDate[0];
   1c19a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c19d:	0f b6 40 13          	movzx  eax,BYTE PTR [eax+0x13]
   1c1a1:	0f b6 c0             	movzx  eax,al
   1c1a4:	c1 e0 08             	shl    eax,0x8
   1c1a7:	89 c2                	mov    edx,eax
   1c1a9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c1ac:	0f b6 40 12          	movzx  eax,BYTE PTR [eax+0x12]
   1c1b0:	0f b6 c0             	movzx  eax,al
   1c1b3:	09 d0                	or     eax,edx
   1c1b5:	89 c2                	mov    edx,eax
   1c1b7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c1ba:	66 89 90 8c 00 00 00 	mov    WORD PTR [eax+0x8c],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:880
                    entry->write_time  = ((uint16)directoryEntry->WrtTime[1] << 8) | directoryEntry->WrtTime[0];
   1c1c1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c1c4:	0f b6 40 17          	movzx  eax,BYTE PTR [eax+0x17]
   1c1c8:	0f b6 c0             	movzx  eax,al
   1c1cb:	c1 e0 08             	shl    eax,0x8
   1c1ce:	89 c2                	mov    edx,eax
   1c1d0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c1d3:	0f b6 40 16          	movzx  eax,BYTE PTR [eax+0x16]
   1c1d7:	0f b6 c0             	movzx  eax,al
   1c1da:	09 d0                	or     eax,edx
   1c1dc:	89 c2                	mov    edx,eax
   1c1de:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c1e1:	66 89 90 8e 00 00 00 	mov    WORD PTR [eax+0x8e],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:881
                    entry->write_date  = ((uint16)directoryEntry->WrtDate[1] << 8) | directoryEntry->WrtDate[0];
   1c1e8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c1eb:	0f b6 40 19          	movzx  eax,BYTE PTR [eax+0x19]
   1c1ef:	0f b6 c0             	movzx  eax,al
   1c1f2:	c1 e0 08             	shl    eax,0x8
   1c1f5:	89 c2                	mov    edx,eax
   1c1f7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c1fa:	0f b6 40 18          	movzx  eax,BYTE PTR [eax+0x18]
   1c1fe:	0f b6 c0             	movzx  eax,al
   1c201:	09 d0                	or     eax,edx
   1c203:	89 c2                	mov    edx,eax
   1c205:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c208:	66 89 90 90 00 00 00 	mov    WORD PTR [eax+0x90],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:884
#endif

                    entry->size = FAT_HTONL(directoryEntry->FileSize);
   1c20f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c212:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1c215:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c218:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:885
                    entry->cluster = (FAT_HTONS(directoryEntry->FstClusHI)<<16) | FAT_HTONS(directoryEntry->FstClusLO);
   1c21e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c221:	0f b7 40 14          	movzx  eax,WORD PTR [eax+0x14]
   1c225:	0f b7 c0             	movzx  eax,ax
   1c228:	c1 e0 10             	shl    eax,0x10
   1c22b:	89 c2                	mov    edx,eax
   1c22d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c230:	0f b7 40 1a          	movzx  eax,WORD PTR [eax+0x1a]
   1c234:	0f b7 c0             	movzx  eax,ax
   1c237:	09 d0                	or     eax,edx
   1c239:	89 c2                	mov    edx,eax
   1c23b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c23e:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:888

                    // Next starting position
                    dirls->offset = item + 1;
   1c244:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1c248:	8d 50 01             	lea    edx,[eax+0x1]
   1c24b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c24e:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:889
                    result = 1;
   1c251:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:890
                    return 1;
   1c258:	b8 01 00 00 00       	mov    eax,0x1
   1c25d:	eb 31                	jmp    1c290 <fatfs_list_directory_next+0x4ae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:788 (discriminator 2)
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1c25f:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1c263:	83 c0 01             	add    eax,0x1
   1c266:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:788 (discriminator 1)
   1c269:	80 7d f6 0f          	cmp    BYTE PTR [ebp-0xa],0xf
   1c26d:	0f 86 d2 fb ff ff    	jbe    1be45 <fatfs_list_directory_next+0x63>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:895
                    return 1;
                }
            }// end of for

            // If reached end of the dir move onto next sector
            dirls->sector++;
   1c273:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c276:	8b 00                	mov    eax,DWORD PTR [eax]
   1c278:	8d 50 01             	lea    edx,[eax+0x1]
   1c27b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c27e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:896
            dirls->offset = 0;
   1c280:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c283:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:900
        }
        else
            break;
    }
   1c287:	e9 88 fb ff ff       	jmp    1be14 <fatfs_list_directory_next+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:899
            // If reached end of the dir move onto next sector
            dirls->sector++;
            dirls->offset = 0;
        }
        else
            break;
   1c28c:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:902
    }

    return result;
   1c28d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:903 (discriminator 1)
}
   1c290:	c9                   	leave  
   1c291:	c3                   	ret    
   1c292:	66 90                	xchg   ax,ax

0001c294 <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   1c294:	55                   	push   ebp
   1c295:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   1c297:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c29a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   1c2a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c2a4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c2a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c2aa:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:51
}
   1c2ac:	90                   	nop
   1c2ad:	5d                   	pop    ebp
   1c2ae:	c3                   	ret    

0001c2af <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   1c2af:	55                   	push   ebp
   1c2b0:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   1c2b2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c2b5:	8b 00                	mov    eax,DWORD PTR [eax]
   1c2b7:	85 c0                	test   eax,eax
   1c2b9:	75 0d                	jne    1c2c8 <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   1c2bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c2be:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c2c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c2c4:	89 10                	mov    DWORD PTR [eax],edx
   1c2c6:	eb 0e                	jmp    1c2d6 <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   1c2c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c2cb:	8b 00                	mov    eax,DWORD PTR [eax]
   1c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c2d0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   1c2d3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   1c2d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c2d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c2dc:	85 c0                	test   eax,eax
   1c2de:	75 0d                	jne    1c2ed <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   1c2e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c2e3:	8b 10                	mov    edx,DWORD PTR [eax]
   1c2e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c2e8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   1c2eb:	eb 0d                	jmp    1c2fa <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   1c2ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c2f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c2f3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c2f6:	8b 12                	mov    edx,DWORD PTR [edx]
   1c2f8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
}
   1c2fa:	90                   	nop
   1c2fb:	5d                   	pop    ebp
   1c2fc:	c3                   	ret    

0001c2fd <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1c2fd:	55                   	push   ebp
   1c2fe:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   1c300:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c303:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c306:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   1c308:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c30b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c30e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c311:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   1c314:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c317:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c31a:	85 c0                	test   eax,eax
   1c31c:	75 0b                	jne    1c329 <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   1c31e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c321:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c324:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   1c327:	eb 0b                	jmp    1c334 <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   1c329:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c32c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c32f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c332:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   1c334:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c337:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c33a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:86
}
   1c33d:	90                   	nop
   1c33e:	5d                   	pop    ebp
   1c33f:	c3                   	ret    

0001c340 <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1c340:	55                   	push   ebp
   1c341:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   1c343:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c346:	8b 10                	mov    edx,DWORD PTR [eax]
   1c348:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c34b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   1c34d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c353:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   1c356:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c359:	8b 00                	mov    eax,DWORD PTR [eax]
   1c35b:	85 c0                	test   eax,eax
   1c35d:	75 0a                	jne    1c369 <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   1c35f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c362:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c365:	89 10                	mov    DWORD PTR [eax],edx
   1c367:	eb 0b                	jmp    1c374 <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   1c369:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c36c:	8b 00                	mov    eax,DWORD PTR [eax]
   1c36e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c371:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   1c374:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c377:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c37a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:103
}
   1c37c:	90                   	nop
   1c37d:	5d                   	pop    ebp
   1c37e:	c3                   	ret    

0001c37f <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   1c37f:	55                   	push   ebp
   1c380:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   1c382:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c385:	8b 00                	mov    eax,DWORD PTR [eax]
   1c387:	85 c0                	test   eax,eax
   1c389:	75 26                	jne    1c3b1 <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   1c38b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c38e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c391:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   1c393:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c396:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c399:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   1c39c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c39f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   1c3a5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c3a8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   1c3af:	eb 14                	jmp    1c3c5 <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   1c3b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c3b4:	8b 00                	mov    eax,DWORD PTR [eax]
   1c3b6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c3b9:	50                   	push   eax
   1c3ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c3bd:	e8 7e ff ff ff       	call   1c340 <fat_list_insert_before>
   1c3c2:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
}
   1c3c5:	90                   	nop
   1c3c6:	c9                   	leave  
   1c3c7:	c3                   	ret    

0001c3c8 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   1c3c8:	55                   	push   ebp
   1c3c9:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   1c3cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c3ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c3d1:	85 c0                	test   eax,eax
   1c3d3:	75 10                	jne    1c3e5 <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   1c3d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c3d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c3db:	e8 9f ff ff ff       	call   1c37f <fat_list_insert_first>
   1c3e0:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   1c3e3:	eb 15                	jmp    1c3fa <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   1c3e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c3e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c3eb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c3ee:	50                   	push   eax
   1c3ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c3f2:	e8 06 ff ff ff       	call   1c2fd <fat_list_insert_after>
   1c3f7:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
}
   1c3fa:	90                   	nop
   1c3fb:	c9                   	leave  
   1c3fc:	c3                   	ret    

0001c3fd <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   1c3fd:	55                   	push   ebp
   1c3fe:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   1c400:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c403:	8b 00                	mov    eax,DWORD PTR [eax]
   1c405:	85 c0                	test   eax,eax
   1c407:	0f 94 c0             	sete   al
   1c40a:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:143
}
   1c40d:	5d                   	pop    ebp
   1c40e:	c3                   	ret    

0001c40f <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   1c40f:	55                   	push   ebp
   1c410:	89 e5                	mov    ebp,esp
   1c412:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   1c415:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c418:	8b 00                	mov    eax,DWORD PTR [eax]
   1c41a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:154
    if (node)
   1c41d:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1c421:	74 0e                	je     1c431 <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   1c423:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   1c426:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c429:	e8 81 fe ff ff       	call   1c2af <fat_list_remove>
   1c42e:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:157

    return node;
   1c431:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:158
}
   1c434:	c9                   	leave  
   1c435:	c3                   	ret    

0001c436 <fatfs_cache_init>:
fatfs_cache_init():
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:43

//-----------------------------------------------------------------------------
// fatfs_cache_init:
//-----------------------------------------------------------------------------
int fatfs_cache_init(struct fatfs *fs, FL_FILE *file)
{
   1c436:	55                   	push   ebp
   1c437:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:54
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
        file->cluster_cache_data[i] = 0;
    }
#endif

    return 1;
   1c439:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:55
}
   1c43e:	5d                   	pop    ebp
   1c43f:	c3                   	ret    

0001c440 <fatfs_cache_get_next_cluster>:
fatfs_cache_get_next_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:60
//-----------------------------------------------------------------------------
// fatfs_cache_get_next_cluster:
//-----------------------------------------------------------------------------
int fatfs_cache_get_next_cluster(struct fatfs *fs, FL_FILE *file, uint32 clusterIdx, uint32 *pNextCluster)
{
   1c440:	55                   	push   ebp
   1c441:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:71
        *pNextCluster = file->cluster_cache_data[slot];
        return 1;
    }
#endif

    return 0;
   1c443:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:72
}
   1c448:	5d                   	pop    ebp
   1c449:	c3                   	ret    

0001c44a <fatfs_cache_set_next_cluster>:
fatfs_cache_set_next_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:77
//-----------------------------------------------------------------------------
// fatfs_cache_set_next_cluster:
//-----------------------------------------------------------------------------
int fatfs_cache_set_next_cluster(struct fatfs *fs, FL_FILE *file, uint32 clusterIdx, uint32 nextCluster)
{
   1c44a:	55                   	push   ebp
   1c44b:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:90
        file->cluster_cache_idx[slot] = clusterIdx;
        file->cluster_cache_data[slot] = nextCluster;
    }
#endif

    return 1;
   1c44d:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:91
}
   1c452:	5d                   	pop    ebp
   1c453:	c3                   	ret    

0001c454 <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   1c454:	55                   	push   ebp
   1c455:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   1c457:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c45a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   1c461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c464:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c467:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c46a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:51
}
   1c46c:	90                   	nop
   1c46d:	5d                   	pop    ebp
   1c46e:	c3                   	ret    

0001c46f <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   1c46f:	55                   	push   ebp
   1c470:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   1c472:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c475:	8b 00                	mov    eax,DWORD PTR [eax]
   1c477:	85 c0                	test   eax,eax
   1c479:	75 0d                	jne    1c488 <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   1c47b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c47e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c481:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c484:	89 10                	mov    DWORD PTR [eax],edx
   1c486:	eb 0e                	jmp    1c496 <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   1c488:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c48b:	8b 00                	mov    eax,DWORD PTR [eax]
   1c48d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c490:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   1c493:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   1c496:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c499:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c49c:	85 c0                	test   eax,eax
   1c49e:	75 0d                	jne    1c4ad <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   1c4a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c4a3:	8b 10                	mov    edx,DWORD PTR [eax]
   1c4a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c4a8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   1c4ab:	eb 0d                	jmp    1c4ba <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   1c4ad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c4b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c4b3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c4b6:	8b 12                	mov    edx,DWORD PTR [edx]
   1c4b8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
}
   1c4ba:	90                   	nop
   1c4bb:	5d                   	pop    ebp
   1c4bc:	c3                   	ret    

0001c4bd <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1c4bd:	55                   	push   ebp
   1c4be:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   1c4c0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c4c3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c4c6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   1c4c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c4cb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c4ce:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c4d1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   1c4d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c4d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c4da:	85 c0                	test   eax,eax
   1c4dc:	75 0b                	jne    1c4e9 <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   1c4de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c4e1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c4e4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   1c4e7:	eb 0b                	jmp    1c4f4 <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   1c4e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c4ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c4ef:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c4f2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   1c4f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c4f7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c4fa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:86
}
   1c4fd:	90                   	nop
   1c4fe:	5d                   	pop    ebp
   1c4ff:	c3                   	ret    

0001c500 <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1c500:	55                   	push   ebp
   1c501:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   1c503:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c506:	8b 10                	mov    edx,DWORD PTR [eax]
   1c508:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c50b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   1c50d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c510:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c513:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   1c516:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c519:	8b 00                	mov    eax,DWORD PTR [eax]
   1c51b:	85 c0                	test   eax,eax
   1c51d:	75 0a                	jne    1c529 <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   1c51f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c522:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c525:	89 10                	mov    DWORD PTR [eax],edx
   1c527:	eb 0b                	jmp    1c534 <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   1c529:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c52c:	8b 00                	mov    eax,DWORD PTR [eax]
   1c52e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c531:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   1c534:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c537:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c53a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:103
}
   1c53c:	90                   	nop
   1c53d:	5d                   	pop    ebp
   1c53e:	c3                   	ret    

0001c53f <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   1c53f:	55                   	push   ebp
   1c540:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   1c542:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c545:	8b 00                	mov    eax,DWORD PTR [eax]
   1c547:	85 c0                	test   eax,eax
   1c549:	75 26                	jne    1c571 <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   1c54b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c54e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c551:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   1c553:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c556:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c559:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   1c55c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c55f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   1c565:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c568:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   1c56f:	eb 14                	jmp    1c585 <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   1c571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c574:	8b 00                	mov    eax,DWORD PTR [eax]
   1c576:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c579:	50                   	push   eax
   1c57a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c57d:	e8 7e ff ff ff       	call   1c500 <fat_list_insert_before>
   1c582:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
}
   1c585:	90                   	nop
   1c586:	c9                   	leave  
   1c587:	c3                   	ret    

0001c588 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   1c588:	55                   	push   ebp
   1c589:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   1c58b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c58e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c591:	85 c0                	test   eax,eax
   1c593:	75 10                	jne    1c5a5 <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   1c595:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c598:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c59b:	e8 9f ff ff ff       	call   1c53f <fat_list_insert_first>
   1c5a0:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   1c5a3:	eb 15                	jmp    1c5ba <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   1c5a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c5a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c5ab:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c5ae:	50                   	push   eax
   1c5af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c5b2:	e8 06 ff ff ff       	call   1c4bd <fat_list_insert_after>
   1c5b7:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
}
   1c5ba:	90                   	nop
   1c5bb:	c9                   	leave  
   1c5bc:	c3                   	ret    

0001c5bd <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   1c5bd:	55                   	push   ebp
   1c5be:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   1c5c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c5c3:	8b 00                	mov    eax,DWORD PTR [eax]
   1c5c5:	85 c0                	test   eax,eax
   1c5c7:	0f 94 c0             	sete   al
   1c5ca:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:143
}
   1c5cd:	5d                   	pop    ebp
   1c5ce:	c3                   	ret    

0001c5cf <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   1c5cf:	55                   	push   ebp
   1c5d0:	89 e5                	mov    ebp,esp
   1c5d2:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   1c5d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c5d8:	8b 00                	mov    eax,DWORD PTR [eax]
   1c5da:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:154
    if (node)
   1c5dd:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1c5e1:	74 0e                	je     1c5f1 <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   1c5e3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   1c5e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c5e9:	e8 81 fe ff ff       	call   1c46f <fat_list_remove>
   1c5ee:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:157

    return node;
   1c5f1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:158
}
   1c5f4:	c9                   	leave  
   1c5f5:	c3                   	ret    

0001c5f6 <_allocate_file>:
_allocate_file():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:72

//-----------------------------------------------------------------------------
// _allocate_file: Find a slot in the open files buffer for a new file
//-----------------------------------------------------------------------------
static FL_FILE* _allocate_file(void)
{
   1c5f6:	55                   	push   ebp
   1c5f7:	89 e5                	mov    ebp,esp
   1c5f9:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:74
    // Allocate free file
    struct fat_node *node = fat_list_pop_head(&_free_file_list);
   1c5fc:	68 10 eb 09 00       	push   0x9eb10
   1c601:	e8 c9 ff ff ff       	call   1c5cf <fat_list_pop_head>
   1c606:	83 c4 04             	add    esp,0x4
   1c609:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:77

    // Add to open list
    if (node)
   1c60c:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1c610:	74 10                	je     1c622 <_allocate_file+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:78
        fat_list_insert_last(&_open_file_list, node);
   1c612:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   1c615:	68 08 eb 09 00       	push   0x9eb08
   1c61a:	e8 69 ff ff ff       	call   1c588 <fat_list_insert_last>
   1c61f:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:80

    return fat_list_entry(node, FL_FILE, list_node);
   1c622:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1c626:	74 0a                	je     1c632 <_allocate_file+0x3c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:80 (discriminator 1)
   1c628:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1c62b:	2d 34 03 00 00       	sub    eax,0x334
   1c630:	eb 05                	jmp    1c637 <_allocate_file+0x41>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:80 (discriminator 2)
   1c632:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:81 (discriminator 5)
}
   1c637:	c9                   	leave  
   1c638:	c3                   	ret    

0001c639 <_check_file_open>:
_check_file_open():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:86
//-----------------------------------------------------------------------------
// _check_file_open: Returns true if the file is already open
//-----------------------------------------------------------------------------
static int _check_file_open(FL_FILE* file)
{
   1c639:	55                   	push   ebp
   1c63a:	89 e5                	mov    ebp,esp
   1c63c:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:90
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
   1c63f:	a1 08 eb 09 00       	mov    eax,ds:0x9eb08
   1c644:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1c647:	eb 6f                	jmp    1c6b8 <_check_file_open+0x7f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:92
    {
        FL_FILE* openFile = fat_list_entry(node, FL_FILE, list_node);
   1c649:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1c64d:	74 0a                	je     1c659 <_check_file_open+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:92 (discriminator 1)
   1c64f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1c652:	2d 34 03 00 00       	sub    eax,0x334
   1c657:	eb 05                	jmp    1c65e <_check_file_open+0x25>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:92 (discriminator 2)
   1c659:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:92 (discriminator 4)
   1c65e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:95 (discriminator 4)

        // If not the current file
        if (openFile != file)
   1c661:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1c664:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1c667:	74 46                	je     1c6af <_check_file_open+0x76>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:98
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
   1c669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c66c:	8d 50 14             	lea    edx,[eax+0x14]
   1c66f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1c672:	83 c0 14             	add    eax,0x14
   1c675:	83 ec 08             	sub    esp,0x8
   1c678:	52                   	push   edx
   1c679:	50                   	push   eax
   1c67a:	e8 c4 38 00 00       	call   1ff43 <fatfs_compare_names>
   1c67f:	83 c4 10             	add    esp,0x10
   1c682:	85 c0                	test   eax,eax
   1c684:	74 29                	je     1c6af <_check_file_open+0x76>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:98 (discriminator 1)
   1c686:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c689:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1c68f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1c692:	05 94 00 00 00       	add    eax,0x94
   1c697:	83 ec 08             	sub    esp,0x8
   1c69a:	52                   	push   edx
   1c69b:	50                   	push   eax
   1c69c:	e8 a2 38 00 00       	call   1ff43 <fatfs_compare_names>
   1c6a1:	83 c4 10             	add    esp,0x10
   1c6a4:	85 c0                	test   eax,eax
   1c6a6:	74 07                	je     1c6af <_check_file_open+0x76>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:99
                return 1;
   1c6a8:	b8 01 00 00 00       	mov    eax,0x1
   1c6ad:	eb 14                	jmp    1c6c3 <_check_file_open+0x8a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:90 (discriminator 2)
static int _check_file_open(FL_FILE* file)
{
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
   1c6af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1c6b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c6b5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:90 (discriminator 1)
   1c6b8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1c6bc:	75 8b                	jne    1c649 <_check_file_open+0x10>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:103
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
                return 1;
        }
    }

    return 0;
   1c6be:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:104
}
   1c6c3:	c9                   	leave  
   1c6c4:	c3                   	ret    

0001c6c5 <_free_file>:
_free_file():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:109
//-----------------------------------------------------------------------------
// _free_file: Free open file handle
//-----------------------------------------------------------------------------
static void _free_file(FL_FILE* file)
{
   1c6c5:	55                   	push   ebp
   1c6c6:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:111
    // Remove from open list
    fat_list_remove(&_open_file_list, &file->list_node);
   1c6c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c6cb:	05 34 03 00 00       	add    eax,0x334
   1c6d0:	50                   	push   eax
   1c6d1:	68 08 eb 09 00       	push   0x9eb08
   1c6d6:	e8 94 fd ff ff       	call   1c46f <fat_list_remove>
   1c6db:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:114

    // Add to free list
    fat_list_insert_last(&_free_file_list, &file->list_node);
   1c6de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c6e1:	05 34 03 00 00       	add    eax,0x334
   1c6e6:	50                   	push   eax
   1c6e7:	68 10 eb 09 00       	push   0x9eb10
   1c6ec:	e8 97 fe ff ff       	call   1c588 <fat_list_insert_last>
   1c6f1:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:115
}
   1c6f4:	90                   	nop
   1c6f5:	c9                   	leave  
   1c6f6:	c3                   	ret    

0001c6f7 <_open_directory>:
_open_directory():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:126
//-----------------------------------------------------------------------------
// _open_directory: Cycle through path string to find the start cluster
// address of the highest subdir.
//-----------------------------------------------------------------------------
static int _open_directory(char *path, uint32 *pathCluster)
{
   1c6f7:	55                   	push   ebp
   1c6f8:	89 e5                	mov    ebp,esp
   1c6fa:	81 ec b8 00 00 00    	sub    esp,0xb8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:134
    char currentfolder[FATFS_MAX_LONG_FILENAME];
    struct fat_dir_entry sfEntry;
    uint32 startcluster;

    // Set starting cluster to root cluster
    startcluster = fatfs_get_root_cluster(&_fs);
   1c700:	83 ec 0c             	sub    esp,0xc
   1c703:	68 a0 e6 09 00       	push   0x9e6a0
   1c708:	e8 ac ef ff ff       	call   1b6b9 <fatfs_get_root_cluster>
   1c70d:	83 c4 10             	add    esp,0x10
   1c710:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:137

    // Find number of levels
    levels = fatfs_total_path_levels(path);
   1c713:	83 ec 0c             	sub    esp,0xc
   1c716:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c719:	e8 c2 34 00 00       	call   1fbe0 <fatfs_total_path_levels>
   1c71e:	83 c4 10             	add    esp,0x10
   1c721:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:140

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   1c724:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1c72b:	e9 93 00 00 00       	jmp    1c7c3 <_open_directory+0xcc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:142
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
   1c730:	68 80 00 00 00       	push   0x80
   1c735:	8d 85 6c ff ff ff    	lea    eax,[ebp-0x94]
   1c73b:	50                   	push   eax
   1c73c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1c73f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c742:	e8 29 35 00 00       	call   1fc70 <fatfs_get_substring>
   1c747:	83 c4 10             	add    esp,0x10
   1c74a:	83 f8 ff             	cmp    eax,0xffffffff
   1c74d:	75 0a                	jne    1c759 <_open_directory+0x62>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:143
            return 0;
   1c74f:	b8 00 00 00 00       	mov    eax,0x0
   1c754:	e9 86 00 00 00       	jmp    1c7df <_open_directory+0xe8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:146

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   1c759:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
   1c75f:	50                   	push   eax
   1c760:	8d 85 6c ff ff ff    	lea    eax,[ebp-0x94]
   1c766:	50                   	push   eax
   1c767:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1c76a:	68 a0 e6 09 00       	push   0x9e6a0
   1c76f:	e8 50 ef ff ff       	call   1b6c4 <fatfs_get_file_entry>
   1c774:	83 c4 10             	add    esp,0x10
   1c777:	85 c0                	test   eax,eax
   1c779:	74 3d                	je     1c7b8 <_open_directory+0xc1>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:149
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
   1c77b:	83 ec 0c             	sub    esp,0xc
   1c77e:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
   1c784:	50                   	push   eax
   1c785:	e8 2a 2d 00 00       	call   1f4b4 <fatfs_entry_is_dir>
   1c78a:	83 c4 10             	add    esp,0x10
   1c78d:	85 c0                	test   eax,eax
   1c78f:	74 20                	je     1c7b1 <_open_directory+0xba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:150
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   1c791:	0f b7 85 60 ff ff ff 	movzx  eax,WORD PTR [ebp-0xa0]
   1c798:	0f b7 c0             	movzx  eax,ax
   1c79b:	c1 e0 10             	shl    eax,0x10
   1c79e:	89 c2                	mov    edx,eax
   1c7a0:	0f b7 85 66 ff ff ff 	movzx  eax,WORD PTR [ebp-0x9a]
   1c7a7:	0f b7 c0             	movzx  eax,ax
   1c7aa:	01 d0                	add    eax,edx
   1c7ac:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   1c7af:	eb 0e                	jmp    1c7bf <_open_directory+0xc8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:152
            else
                return 0;
   1c7b1:	b8 00 00 00 00       	mov    eax,0x0
   1c7b6:	eb 27                	jmp    1c7df <_open_directory+0xe8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:155
        }
        else
            return 0;
   1c7b8:	b8 00 00 00 00       	mov    eax,0x0
   1c7bd:	eb 20                	jmp    1c7df <_open_directory+0xe8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:140 (discriminator 2)

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   1c7bf:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:140 (discriminator 1)
   1c7c3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c7c6:	83 c0 01             	add    eax,0x1
   1c7c9:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1c7cc:	0f 8f 5e ff ff ff    	jg     1c730 <_open_directory+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:158
        }
        else
            return 0;
    }

    *pathCluster = startcluster;
   1c7d2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c7d5:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1c7d8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:159
    return 1;
   1c7da:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:160 (discriminator 1)
}
   1c7df:	c9                   	leave  
   1c7e0:	c3                   	ret    

0001c7e1 <_create_directory>:
_create_directory():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:166
//-----------------------------------------------------------------------------
// _create_directory: Cycle through path string and create the end directory
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static int _create_directory(char *path)
{
   1c7e1:	55                   	push   ebp
   1c7e2:	89 e5                	mov    ebp,esp
   1c7e4:	53                   	push   ebx
   1c7e5:	83 ec 44             	sub    esp,0x44
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:170
    FL_FILE* file;
    struct fat_dir_entry sfEntry;
    char shortFilename[FAT_SFN_SIZE_FULL];
    int tailNum = 0;
   1c7e8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:174
    int i;

    // Allocate a new file handle
    file = _allocate_file();
   1c7ef:	e8 02 fe ff ff       	call   1c5f6 <_allocate_file>
   1c7f4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:175
    if (!file)
   1c7f7:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   1c7fb:	75 0a                	jne    1c807 <_create_directory+0x26>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:176
        return 0;
   1c7fd:	b8 00 00 00 00       	mov    eax,0x0
   1c802:	e9 94 03 00 00       	jmp    1cb9b <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:179

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   1c807:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c80a:	83 c0 14             	add    eax,0x14
   1c80d:	83 ec 04             	sub    esp,0x4
   1c810:	68 80 00 00 00       	push   0x80
   1c815:	6a 00                	push   0x0
   1c817:	50                   	push   eax
   1c818:	e8 10 88 00 00       	call   2502d <memset>
   1c81d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:180
    memset(file->filename, '\0', sizeof(file->filename));
   1c820:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c823:	05 94 00 00 00       	add    eax,0x94
   1c828:	83 ec 04             	sub    esp,0x4
   1c82b:	68 80 00 00 00       	push   0x80
   1c830:	6a 00                	push   0x0
   1c832:	50                   	push   eax
   1c833:	e8 f5 87 00 00       	call   2502d <memset>
   1c838:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:183

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)path, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
   1c83b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c83e:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1c844:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c847:	83 c0 14             	add    eax,0x14
   1c84a:	83 ec 0c             	sub    esp,0xc
   1c84d:	68 80 00 00 00       	push   0x80
   1c852:	52                   	push   edx
   1c853:	68 80 00 00 00       	push   0x80
   1c858:	50                   	push   eax
   1c859:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c85c:	e8 14 35 00 00       	call   1fd75 <fatfs_split_path>
   1c861:	83 c4 20             	add    esp,0x20
   1c864:	83 f8 ff             	cmp    eax,0xffffffff
   1c867:	75 18                	jne    1c881 <_create_directory+0xa0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:185
    {
        _free_file(file);
   1c869:	83 ec 0c             	sub    esp,0xc
   1c86c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c86f:	e8 51 fe ff ff       	call   1c6c5 <_free_file>
   1c874:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:186
        return 0;
   1c877:	b8 00 00 00 00       	mov    eax,0x0
   1c87c:	e9 1a 03 00 00       	jmp    1cb9b <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:190
    }

    // Check if file already open
    if (_check_file_open(file))
   1c881:	83 ec 0c             	sub    esp,0xc
   1c884:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c887:	e8 ad fd ff ff       	call   1c639 <_check_file_open>
   1c88c:	83 c4 10             	add    esp,0x10
   1c88f:	85 c0                	test   eax,eax
   1c891:	74 18                	je     1c8ab <_create_directory+0xca>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:192
    {
        _free_file(file);
   1c893:	83 ec 0c             	sub    esp,0xc
   1c896:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c899:	e8 27 fe ff ff       	call   1c6c5 <_free_file>
   1c89e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:193
        return 0;
   1c8a1:	b8 00 00 00 00       	mov    eax,0x0
   1c8a6:	e9 f0 02 00 00       	jmp    1cb9b <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:197
    }

    // If file is in the root dir
    if (file->path[0] == 0)
   1c8ab:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c8ae:	0f b6 40 14          	movzx  eax,BYTE PTR [eax+0x14]
   1c8b2:	84 c0                	test   al,al
   1c8b4:	75 19                	jne    1c8cf <_create_directory+0xee>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:198
        file->parentcluster = fatfs_get_root_cluster(&_fs);
   1c8b6:	83 ec 0c             	sub    esp,0xc
   1c8b9:	68 a0 e6 09 00       	push   0x9e6a0
   1c8be:	e8 f6 ed ff ff       	call   1b6b9 <fatfs_get_root_cluster>
   1c8c3:	83 c4 10             	add    esp,0x10
   1c8c6:	89 c2                	mov    edx,eax
   1c8c8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c8cb:	89 10                	mov    DWORD PTR [eax],edx
   1c8cd:	eb 32                	jmp    1c901 <_create_directory+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:202
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
   1c8cf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c8d2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1c8d5:	83 c2 14             	add    edx,0x14
   1c8d8:	83 ec 08             	sub    esp,0x8
   1c8db:	50                   	push   eax
   1c8dc:	52                   	push   edx
   1c8dd:	e8 15 fe ff ff       	call   1c6f7 <_open_directory>
   1c8e2:	83 c4 10             	add    esp,0x10
   1c8e5:	85 c0                	test   eax,eax
   1c8e7:	75 18                	jne    1c901 <_create_directory+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:204
        {
            _free_file(file);
   1c8e9:	83 ec 0c             	sub    esp,0xc
   1c8ec:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c8ef:	e8 d1 fd ff ff       	call   1c6c5 <_free_file>
   1c8f4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:205
            return 0;
   1c8f7:	b8 00 00 00 00       	mov    eax,0x0
   1c8fc:	e9 9a 02 00 00       	jmp    1cb9b <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:210
        }
    }

    // Check if same filename exists in directory
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry) == 1)
   1c901:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c904:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1c90a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c90d:	8b 00                	mov    eax,DWORD PTR [eax]
   1c90f:	8d 55 cc             	lea    edx,[ebp-0x34]
   1c912:	52                   	push   edx
   1c913:	51                   	push   ecx
   1c914:	50                   	push   eax
   1c915:	68 a0 e6 09 00       	push   0x9e6a0
   1c91a:	e8 a5 ed ff ff       	call   1b6c4 <fatfs_get_file_entry>
   1c91f:	83 c4 10             	add    esp,0x10
   1c922:	83 f8 01             	cmp    eax,0x1
   1c925:	75 18                	jne    1c93f <_create_directory+0x15e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:212
    {
        _free_file(file);
   1c927:	83 ec 0c             	sub    esp,0xc
   1c92a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c92d:	e8 93 fd ff ff       	call   1c6c5 <_free_file>
   1c932:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:213
        return 0;
   1c935:	b8 00 00 00 00       	mov    eax,0x0
   1c93a:	e9 5c 02 00 00       	jmp    1cb9b <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:216
    }

    file->startcluster = 0;
   1c93f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c942:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:219

    // Create the file space for the folder (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
   1c949:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c94c:	83 c0 04             	add    eax,0x4
   1c94f:	6a 01                	push   0x1
   1c951:	50                   	push   eax
   1c952:	6a 01                	push   0x1
   1c954:	68 a0 e6 09 00       	push   0x9e6a0
   1c959:	e8 da 44 00 00       	call   20e38 <fatfs_allocate_free_space>
   1c95e:	83 c4 10             	add    esp,0x10
   1c961:	85 c0                	test   eax,eax
   1c963:	75 18                	jne    1c97d <_create_directory+0x19c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:221
    {
        _free_file(file);
   1c965:	83 ec 0c             	sub    esp,0xc
   1c968:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c96b:	e8 55 fd ff ff       	call   1c6c5 <_free_file>
   1c970:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:222
        return 0;
   1c973:	b8 00 00 00 00       	mov    eax,0x0
   1c978:	e9 1e 02 00 00       	jmp    1cb9b <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:226
    }

    // Erase new directory cluster
    memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
   1c97d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c980:	05 28 01 00 00       	add    eax,0x128
   1c985:	83 ec 04             	sub    esp,0x4
   1c988:	68 00 02 00 00       	push   0x200
   1c98d:	6a 00                	push   0x0
   1c98f:	50                   	push   eax
   1c990:	e8 98 86 00 00       	call   2502d <memset>
   1c995:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:227
    for (i=0;i<_fs.sectors_per_cluster;i++)
   1c998:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   1c99f:	eb 42                	jmp    1c9e3 <_create_directory+0x202>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:229
    {
        if (!fatfs_write_sector(&_fs, file->startcluster, i, file->file_data_sector))
   1c9a1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c9a4:	8d 88 28 01 00 00    	lea    ecx,[eax+0x128]
   1c9aa:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1c9ad:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c9b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c9b3:	51                   	push   ecx
   1c9b4:	52                   	push   edx
   1c9b5:	50                   	push   eax
   1c9b6:	68 a0 e6 09 00       	push   0x9e6a0
   1c9bb:	e8 31 eb ff ff       	call   1b4f1 <fatfs_write_sector>
   1c9c0:	83 c4 10             	add    esp,0x10
   1c9c3:	85 c0                	test   eax,eax
   1c9c5:	75 18                	jne    1c9df <_create_directory+0x1fe>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:231
        {
            _free_file(file);
   1c9c7:	83 ec 0c             	sub    esp,0xc
   1c9ca:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c9cd:	e8 f3 fc ff ff       	call   1c6c5 <_free_file>
   1c9d2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:232
            return 0;
   1c9d5:	b8 00 00 00 00       	mov    eax,0x0
   1c9da:	e9 bc 01 00 00       	jmp    1cb9b <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:227 (discriminator 2)
        return 0;
    }

    // Erase new directory cluster
    memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
    for (i=0;i<_fs.sectors_per_cluster;i++)
   1c9df:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:227 (discriminator 1)
   1c9e3:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1c9ea:	0f b6 c0             	movzx  eax,al
   1c9ed:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   1c9f0:	7f af                	jg     1c9a1 <_create_directory+0x1c0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:239
    }

#if FATFS_INC_LFN_SUPPORT

    // Generate a short filename & tail
    tailNum = 0;
   1c9f2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:243
    do
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);
   1c9f9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c9fc:	05 94 00 00 00       	add    eax,0x94
   1ca01:	83 ec 08             	sub    esp,0x8
   1ca04:	50                   	push   eax
   1ca05:	8d 45 c1             	lea    eax,[ebp-0x3f]
   1ca08:	50                   	push   eax
   1ca09:	e8 66 2d 00 00       	call   1f774 <fatfs_lfn_create_sfn>
   1ca0e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:246

        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
   1ca11:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1ca15:	74 1f                	je     1ca36 <_create_directory+0x255>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:247
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
   1ca17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ca1a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1ca1d:	81 c2 14 01 00 00    	add    edx,0x114
   1ca23:	83 ec 04             	sub    esp,0x4
   1ca26:	50                   	push   eax
   1ca27:	8d 45 c1             	lea    eax,[ebp-0x3f]
   1ca2a:	50                   	push   eax
   1ca2b:	52                   	push   edx
   1ca2c:	e8 c9 2f 00 00       	call   1f9fa <fatfs_lfn_generate_tail>
   1ca31:	83 c4 10             	add    esp,0x10
   1ca34:	eb 1b                	jmp    1ca51 <_create_directory+0x270>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:250
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
   1ca36:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ca39:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1ca3f:	83 ec 04             	sub    esp,0x4
   1ca42:	6a 0b                	push   0xb
   1ca44:	8d 45 c1             	lea    eax,[ebp-0x3f]
   1ca47:	50                   	push   eax
   1ca48:	52                   	push   edx
   1ca49:	e8 ce 8f 00 00       	call   25a1c <memcpy>
   1ca4e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:253

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
   1ca51:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ca54:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1ca5a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ca5d:	8b 00                	mov    eax,DWORD PTR [eax]
   1ca5f:	83 ec 04             	sub    esp,0x4
   1ca62:	52                   	push   edx
   1ca63:	50                   	push   eax
   1ca64:	68 a0 e6 09 00       	push   0x9e6a0
   1ca69:	e8 d3 ee ff ff       	call   1b941 <fatfs_sfn_exists>
   1ca6e:	83 c4 10             	add    esp,0x10
   1ca71:	85 c0                	test   eax,eax
   1ca73:	74 13                	je     1ca88 <_create_directory+0x2a7>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:256
            break;

        tailNum++;
   1ca75:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:258
    }
    while (tailNum < 9999);
   1ca79:	81 7d f4 0e 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270e
   1ca80:	0f 8e 73 ff ff ff    	jle    1c9f9 <_create_directory+0x218>
   1ca86:	eb 01                	jmp    1ca89 <_create_directory+0x2a8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:254
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
            break;
   1ca88:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:261
        tailNum++;
    }
    while (tailNum < 9999);

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
   1ca89:	81 7d f4 0f 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270f
   1ca90:	75 2f                	jne    1cac1 <_create_directory+0x2e0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:264
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1ca92:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ca95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1ca98:	83 ec 08             	sub    esp,0x8
   1ca9b:	50                   	push   eax
   1ca9c:	68 a0 e6 09 00       	push   0x9e6a0
   1caa1:	e8 d8 40 00 00       	call   20b7e <fatfs_free_cluster_chain>
   1caa6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:266

        _free_file(file);
   1caa9:	83 ec 0c             	sub    esp,0xc
   1caac:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1caaf:	e8 11 fc ff ff       	call   1c6c5 <_free_file>
   1cab4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:267
        return 0;
   1cab7:	b8 00 00 00 00       	mov    eax,0x0
   1cabc:	e9 da 00 00 00       	jmp    1cb9b <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:295
        return 0;
    }
#endif

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 1))
   1cac1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cac4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1cac7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1caca:	8d 98 14 01 00 00    	lea    ebx,[eax+0x114]
   1cad0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cad3:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1cad9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cadc:	8b 00                	mov    eax,DWORD PTR [eax]
   1cade:	83 ec 04             	sub    esp,0x4
   1cae1:	6a 01                	push   0x1
   1cae3:	6a 00                	push   0x0
   1cae5:	52                   	push   edx
   1cae6:	53                   	push   ebx
   1cae7:	51                   	push   ecx
   1cae8:	50                   	push   eax
   1cae9:	68 a0 e6 09 00       	push   0x9e6a0
   1caee:	e8 5d 46 00 00       	call   21150 <fatfs_add_file_entry>
   1caf3:	83 c4 20             	add    esp,0x20
   1caf6:	85 c0                	test   eax,eax
   1caf8:	75 2c                	jne    1cb26 <_create_directory+0x345>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:298
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1cafa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cafd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1cb00:	83 ec 08             	sub    esp,0x8
   1cb03:	50                   	push   eax
   1cb04:	68 a0 e6 09 00       	push   0x9e6a0
   1cb09:	e8 70 40 00 00       	call   20b7e <fatfs_free_cluster_chain>
   1cb0e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:300

        _free_file(file);
   1cb11:	83 ec 0c             	sub    esp,0xc
   1cb14:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cb17:	e8 a9 fb ff ff       	call   1c6c5 <_free_file>
   1cb1c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:301
        return 0;
   1cb1f:	b8 00 00 00 00       	mov    eax,0x0
   1cb24:	eb 75                	jmp    1cb9b <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:305
    }

    // General
    file->filelength = 0;
   1cb26:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb29:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:306
    file->bytenum = 0;
   1cb30:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb33:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:307
    file->file_data_address = 0xFFFFFFFF;
   1cb3a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb3d:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1cb44:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:308
    file->file_data_dirty = 0;
   1cb47:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb4a:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1cb51:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:309
    file->filelength_changed = 0;
   1cb54:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb57:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:312

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
   1cb5e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb61:	c7 80 20 01 00 00 ff 	mov    DWORD PTR [eax+0x120],0xffffffff
   1cb68:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:313
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
   1cb6b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb6e:	c7 80 24 01 00 00 ff 	mov    DWORD PTR [eax+0x124],0xffffffff
   1cb75:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:315

    fatfs_fat_purge(&_fs);
   1cb78:	83 ec 0c             	sub    esp,0xc
   1cb7b:	68 a0 e6 09 00       	push   0x9e6a0
   1cb80:	e8 5f 3a 00 00       	call   205e4 <fatfs_fat_purge>
   1cb85:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:317

    _free_file(file);
   1cb88:	83 ec 0c             	sub    esp,0xc
   1cb8b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cb8e:	e8 32 fb ff ff       	call   1c6c5 <_free_file>
   1cb93:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:318
    return 1;
   1cb96:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:319 (discriminator 1)
}
   1cb9b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1cb9e:	c9                   	leave  
   1cb9f:	c3                   	ret    

0001cba0 <_open_file>:
_open_file():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:325
#endif
//-----------------------------------------------------------------------------
// _open_file: Open a file for reading
//-----------------------------------------------------------------------------
static FL_FILE* _open_file(const char *path)
{
   1cba0:	55                   	push   ebp
   1cba1:	89 e5                	mov    ebp,esp
   1cba3:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:330
    FL_FILE* file;
    struct fat_dir_entry sfEntry;

    // Allocate a new file handle
    file = _allocate_file();
   1cba6:	e8 4b fa ff ff       	call   1c5f6 <_allocate_file>
   1cbab:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:331
    if (!file)
   1cbae:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1cbb2:	75 0a                	jne    1cbbe <_open_file+0x1e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:332
        return NULL;
   1cbb4:	b8 00 00 00 00       	mov    eax,0x0
   1cbb9:	e9 fc 01 00 00       	jmp    1cdba <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:335

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   1cbbe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cbc1:	83 c0 14             	add    eax,0x14
   1cbc4:	83 ec 04             	sub    esp,0x4
   1cbc7:	68 80 00 00 00       	push   0x80
   1cbcc:	6a 00                	push   0x0
   1cbce:	50                   	push   eax
   1cbcf:	e8 59 84 00 00       	call   2502d <memset>
   1cbd4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:336
    memset(file->filename, '\0', sizeof(file->filename));
   1cbd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cbda:	05 94 00 00 00       	add    eax,0x94
   1cbdf:	83 ec 04             	sub    esp,0x4
   1cbe2:	68 80 00 00 00       	push   0x80
   1cbe7:	6a 00                	push   0x0
   1cbe9:	50                   	push   eax
   1cbea:	e8 3e 84 00 00       	call   2502d <memset>
   1cbef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:339

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)path, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
   1cbf2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cbf5:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1cbfb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cbfe:	83 c0 14             	add    eax,0x14
   1cc01:	83 ec 0c             	sub    esp,0xc
   1cc04:	68 80 00 00 00       	push   0x80
   1cc09:	52                   	push   edx
   1cc0a:	68 80 00 00 00       	push   0x80
   1cc0f:	50                   	push   eax
   1cc10:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1cc13:	e8 5d 31 00 00       	call   1fd75 <fatfs_split_path>
   1cc18:	83 c4 20             	add    esp,0x20
   1cc1b:	83 f8 ff             	cmp    eax,0xffffffff
   1cc1e:	75 18                	jne    1cc38 <_open_file+0x98>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:341
    {
        _free_file(file);
   1cc20:	83 ec 0c             	sub    esp,0xc
   1cc23:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1cc26:	e8 9a fa ff ff       	call   1c6c5 <_free_file>
   1cc2b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:342
        return NULL;
   1cc2e:	b8 00 00 00 00       	mov    eax,0x0
   1cc33:	e9 82 01 00 00       	jmp    1cdba <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:346
    }

    // Check if file already open
    if (_check_file_open(file))
   1cc38:	83 ec 0c             	sub    esp,0xc
   1cc3b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1cc3e:	e8 f6 f9 ff ff       	call   1c639 <_check_file_open>
   1cc43:	83 c4 10             	add    esp,0x10
   1cc46:	85 c0                	test   eax,eax
   1cc48:	74 18                	je     1cc62 <_open_file+0xc2>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:348
    {
        _free_file(file);
   1cc4a:	83 ec 0c             	sub    esp,0xc
   1cc4d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1cc50:	e8 70 fa ff ff       	call   1c6c5 <_free_file>
   1cc55:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:349
        return NULL;
   1cc58:	b8 00 00 00 00       	mov    eax,0x0
   1cc5d:	e9 58 01 00 00       	jmp    1cdba <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:353
    }

    // If file is in the root dir
    if (file->path[0]==0)
   1cc62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cc65:	0f b6 40 14          	movzx  eax,BYTE PTR [eax+0x14]
   1cc69:	84 c0                	test   al,al
   1cc6b:	75 19                	jne    1cc86 <_open_file+0xe6>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:354
        file->parentcluster = fatfs_get_root_cluster(&_fs);
   1cc6d:	83 ec 0c             	sub    esp,0xc
   1cc70:	68 a0 e6 09 00       	push   0x9e6a0
   1cc75:	e8 3f ea ff ff       	call   1b6b9 <fatfs_get_root_cluster>
   1cc7a:	83 c4 10             	add    esp,0x10
   1cc7d:	89 c2                	mov    edx,eax
   1cc7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cc82:	89 10                	mov    DWORD PTR [eax],edx
   1cc84:	eb 32                	jmp    1ccb8 <_open_file+0x118>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:358
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
   1cc86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cc89:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1cc8c:	83 c2 14             	add    edx,0x14
   1cc8f:	83 ec 08             	sub    esp,0x8
   1cc92:	50                   	push   eax
   1cc93:	52                   	push   edx
   1cc94:	e8 5e fa ff ff       	call   1c6f7 <_open_directory>
   1cc99:	83 c4 10             	add    esp,0x10
   1cc9c:	85 c0                	test   eax,eax
   1cc9e:	75 18                	jne    1ccb8 <_open_file+0x118>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:360
        {
            _free_file(file);
   1cca0:	83 ec 0c             	sub    esp,0xc
   1cca3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1cca6:	e8 1a fa ff ff       	call   1c6c5 <_free_file>
   1ccab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:361
            return NULL;
   1ccae:	b8 00 00 00 00       	mov    eax,0x0
   1ccb3:	e9 02 01 00 00       	jmp    1cdba <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:366
        }
    }

    // Using dir cluster address search for filename
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry))
   1ccb8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ccbb:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1ccc1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ccc4:	8b 00                	mov    eax,DWORD PTR [eax]
   1ccc6:	8d 55 d4             	lea    edx,[ebp-0x2c]
   1ccc9:	52                   	push   edx
   1ccca:	51                   	push   ecx
   1cccb:	50                   	push   eax
   1cccc:	68 a0 e6 09 00       	push   0x9e6a0
   1ccd1:	e8 ee e9 ff ff       	call   1b6c4 <fatfs_get_file_entry>
   1ccd6:	83 c4 10             	add    esp,0x10
   1ccd9:	85 c0                	test   eax,eax
   1ccdb:	0f 84 c6 00 00 00    	je     1cda7 <_open_file+0x207>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:368
        // Make sure entry is file not dir!
        if (fatfs_entry_is_file(&sfEntry))
   1cce1:	83 ec 0c             	sub    esp,0xc
   1cce4:	8d 45 d4             	lea    eax,[ebp-0x2c]
   1cce7:	50                   	push   eax
   1cce8:	e8 e9 27 00 00       	call   1f4d6 <fatfs_entry_is_file>
   1cced:	83 c4 10             	add    esp,0x10
   1ccf0:	85 c0                	test   eax,eax
   1ccf2:	0f 84 af 00 00 00    	je     1cda7 <_open_file+0x207>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:371
        {
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
   1ccf8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ccfb:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1cd01:	83 ec 04             	sub    esp,0x4
   1cd04:	6a 0b                	push   0xb
   1cd06:	8d 45 d4             	lea    eax,[ebp-0x2c]
   1cd09:	50                   	push   eax
   1cd0a:	52                   	push   edx
   1cd0b:	e8 0c 8d 00 00       	call   25a1c <memcpy>
   1cd10:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:372
            file->filelength = FAT_HTONL(sfEntry.FileSize);
   1cd13:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1cd16:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cd19:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:373
            file->bytenum = 0;
   1cd1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cd1f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:374
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   1cd26:	0f b7 45 e8          	movzx  eax,WORD PTR [ebp-0x18]
   1cd2a:	0f b7 c0             	movzx  eax,ax
   1cd2d:	c1 e0 10             	shl    eax,0x10
   1cd30:	89 c2                	mov    edx,eax
   1cd32:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1cd36:	0f b7 c0             	movzx  eax,ax
   1cd39:	01 c2                	add    edx,eax
   1cd3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cd3e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:375
            file->file_data_address = 0xFFFFFFFF;
   1cd41:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cd44:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1cd4b:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:376
            file->file_data_dirty = 0;
   1cd4e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cd51:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1cd58:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:377
            file->filelength_changed = 0;
   1cd5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cd5e:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:380

            // Quick lookup for next link in the chain
            file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
   1cd65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cd68:	c7 80 20 01 00 00 ff 	mov    DWORD PTR [eax+0x120],0xffffffff
   1cd6f:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:381
            file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
   1cd72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cd75:	c7 80 24 01 00 00 ff 	mov    DWORD PTR [eax+0x124],0xffffffff
   1cd7c:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:383

            fatfs_cache_init(&_fs, file);
   1cd7f:	83 ec 08             	sub    esp,0x8
   1cd82:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1cd85:	68 a0 e6 09 00       	push   0x9e6a0
   1cd8a:	e8 a7 f6 ff ff       	call   1c436 <fatfs_cache_init>
   1cd8f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:385

            fatfs_fat_purge(&_fs);
   1cd92:	83 ec 0c             	sub    esp,0xc
   1cd95:	68 a0 e6 09 00       	push   0x9e6a0
   1cd9a:	e8 45 38 00 00       	call   205e4 <fatfs_fat_purge>
   1cd9f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:387

            return file;
   1cda2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cda5:	eb 13                	jmp    1cdba <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:390
        }

    _free_file(file);
   1cda7:	83 ec 0c             	sub    esp,0xc
   1cdaa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1cdad:	e8 13 f9 ff ff       	call   1c6c5 <_free_file>
   1cdb2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:391
    return NULL;
   1cdb5:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:392 (discriminator 1)
}
   1cdba:	c9                   	leave  
   1cdbb:	c3                   	ret    

0001cdbc <_create_file>:
_create_file():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:398
//-----------------------------------------------------------------------------
// _create_file: Create a new file
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static FL_FILE* _create_file(const char *filename)
{
   1cdbc:	55                   	push   ebp
   1cdbd:	89 e5                	mov    ebp,esp
   1cdbf:	53                   	push   ebx
   1cdc0:	83 ec 44             	sub    esp,0x44
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:402
    FL_FILE* file;
    struct fat_dir_entry sfEntry;
    char shortFilename[FAT_SFN_SIZE_FULL];
    int tailNum = 0;
   1cdc3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:405

    // No write access?
    if (!_fs.disk_io.write_media)
   1cdca:	a1 d8 e6 09 00       	mov    eax,ds:0x9e6d8
   1cdcf:	85 c0                	test   eax,eax
   1cdd1:	75 0a                	jne    1cddd <_create_file+0x21>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:406
        return NULL;
   1cdd3:	b8 00 00 00 00       	mov    eax,0x0
   1cdd8:	e9 3a 03 00 00       	jmp    1d117 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:409

    // Allocate a new file handle
    file = _allocate_file();
   1cddd:	e8 14 f8 ff ff       	call   1c5f6 <_allocate_file>
   1cde2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:410
    if (!file)
   1cde5:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1cde9:	75 0a                	jne    1cdf5 <_create_file+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:411
        return NULL;
   1cdeb:	b8 00 00 00 00       	mov    eax,0x0
   1cdf0:	e9 22 03 00 00       	jmp    1d117 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:414

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   1cdf5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cdf8:	83 c0 14             	add    eax,0x14
   1cdfb:	83 ec 04             	sub    esp,0x4
   1cdfe:	68 80 00 00 00       	push   0x80
   1ce03:	6a 00                	push   0x0
   1ce05:	50                   	push   eax
   1ce06:	e8 22 82 00 00       	call   2502d <memset>
   1ce0b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:415
    memset(file->filename, '\0', sizeof(file->filename));
   1ce0e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1ce11:	05 94 00 00 00       	add    eax,0x94
   1ce16:	83 ec 04             	sub    esp,0x4
   1ce19:	68 80 00 00 00       	push   0x80
   1ce1e:	6a 00                	push   0x0
   1ce20:	50                   	push   eax
   1ce21:	e8 07 82 00 00       	call   2502d <memset>
   1ce26:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:418

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)filename, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
   1ce29:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1ce2c:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1ce32:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1ce35:	83 c0 14             	add    eax,0x14
   1ce38:	83 ec 0c             	sub    esp,0xc
   1ce3b:	68 80 00 00 00       	push   0x80
   1ce40:	52                   	push   edx
   1ce41:	68 80 00 00 00       	push   0x80
   1ce46:	50                   	push   eax
   1ce47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ce4a:	e8 26 2f 00 00       	call   1fd75 <fatfs_split_path>
   1ce4f:	83 c4 20             	add    esp,0x20
   1ce52:	83 f8 ff             	cmp    eax,0xffffffff
   1ce55:	75 18                	jne    1ce6f <_create_file+0xb3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:420
    {
        _free_file(file);
   1ce57:	83 ec 0c             	sub    esp,0xc
   1ce5a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1ce5d:	e8 63 f8 ff ff       	call   1c6c5 <_free_file>
   1ce62:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:421
        return NULL;
   1ce65:	b8 00 00 00 00       	mov    eax,0x0
   1ce6a:	e9 a8 02 00 00       	jmp    1d117 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:425
    }

    // Check if file already open
    if (_check_file_open(file))
   1ce6f:	83 ec 0c             	sub    esp,0xc
   1ce72:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1ce75:	e8 bf f7 ff ff       	call   1c639 <_check_file_open>
   1ce7a:	83 c4 10             	add    esp,0x10
   1ce7d:	85 c0                	test   eax,eax
   1ce7f:	74 18                	je     1ce99 <_create_file+0xdd>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:427
    {
        _free_file(file);
   1ce81:	83 ec 0c             	sub    esp,0xc
   1ce84:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1ce87:	e8 39 f8 ff ff       	call   1c6c5 <_free_file>
   1ce8c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:428
        return NULL;
   1ce8f:	b8 00 00 00 00       	mov    eax,0x0
   1ce94:	e9 7e 02 00 00       	jmp    1d117 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:432
    }

    // If file is in the root dir
    if (file->path[0] == 0)
   1ce99:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1ce9c:	0f b6 40 14          	movzx  eax,BYTE PTR [eax+0x14]
   1cea0:	84 c0                	test   al,al
   1cea2:	75 19                	jne    1cebd <_create_file+0x101>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:433
        file->parentcluster = fatfs_get_root_cluster(&_fs);
   1cea4:	83 ec 0c             	sub    esp,0xc
   1cea7:	68 a0 e6 09 00       	push   0x9e6a0
   1ceac:	e8 08 e8 ff ff       	call   1b6b9 <fatfs_get_root_cluster>
   1ceb1:	83 c4 10             	add    esp,0x10
   1ceb4:	89 c2                	mov    edx,eax
   1ceb6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1ceb9:	89 10                	mov    DWORD PTR [eax],edx
   1cebb:	eb 32                	jmp    1ceef <_create_file+0x133>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:437
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
   1cebd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cec0:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1cec3:	83 c2 14             	add    edx,0x14
   1cec6:	83 ec 08             	sub    esp,0x8
   1cec9:	50                   	push   eax
   1ceca:	52                   	push   edx
   1cecb:	e8 27 f8 ff ff       	call   1c6f7 <_open_directory>
   1ced0:	83 c4 10             	add    esp,0x10
   1ced3:	85 c0                	test   eax,eax
   1ced5:	75 18                	jne    1ceef <_create_file+0x133>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:439
        {
            _free_file(file);
   1ced7:	83 ec 0c             	sub    esp,0xc
   1ceda:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1cedd:	e8 e3 f7 ff ff       	call   1c6c5 <_free_file>
   1cee2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:440
            return NULL;
   1cee5:	b8 00 00 00 00       	mov    eax,0x0
   1ceea:	e9 28 02 00 00       	jmp    1d117 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:445
        }
    }

    // Check if same filename exists in directory
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry) == 1)
   1ceef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cef2:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1cef8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cefb:	8b 00                	mov    eax,DWORD PTR [eax]
   1cefd:	8d 55 d0             	lea    edx,[ebp-0x30]
   1cf00:	52                   	push   edx
   1cf01:	51                   	push   ecx
   1cf02:	50                   	push   eax
   1cf03:	68 a0 e6 09 00       	push   0x9e6a0
   1cf08:	e8 b7 e7 ff ff       	call   1b6c4 <fatfs_get_file_entry>
   1cf0d:	83 c4 10             	add    esp,0x10
   1cf10:	83 f8 01             	cmp    eax,0x1
   1cf13:	75 18                	jne    1cf2d <_create_file+0x171>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:447
    {
        _free_file(file);
   1cf15:	83 ec 0c             	sub    esp,0xc
   1cf18:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1cf1b:	e8 a5 f7 ff ff       	call   1c6c5 <_free_file>
   1cf20:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:448
        return NULL;
   1cf23:	b8 00 00 00 00       	mov    eax,0x0
   1cf28:	e9 ea 01 00 00       	jmp    1d117 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:451
    }

    file->startcluster = 0;
   1cf2d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cf30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:454

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
   1cf37:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cf3a:	83 c0 04             	add    eax,0x4
   1cf3d:	6a 01                	push   0x1
   1cf3f:	50                   	push   eax
   1cf40:	6a 01                	push   0x1
   1cf42:	68 a0 e6 09 00       	push   0x9e6a0
   1cf47:	e8 ec 3e 00 00       	call   20e38 <fatfs_allocate_free_space>
   1cf4c:	83 c4 10             	add    esp,0x10
   1cf4f:	85 c0                	test   eax,eax
   1cf51:	75 18                	jne    1cf6b <_create_file+0x1af>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:456
    {
        _free_file(file);
   1cf53:	83 ec 0c             	sub    esp,0xc
   1cf56:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1cf59:	e8 67 f7 ff ff       	call   1c6c5 <_free_file>
   1cf5e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:457
        return NULL;
   1cf61:	b8 00 00 00 00       	mov    eax,0x0
   1cf66:	e9 ac 01 00 00       	jmp    1d117 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:462
    }

#if FATFS_INC_LFN_SUPPORT
    // Generate a short filename & tail
    tailNum = 0;
   1cf6b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:466
    do
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);
   1cf72:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cf75:	05 94 00 00 00       	add    eax,0x94
   1cf7a:	83 ec 08             	sub    esp,0x8
   1cf7d:	50                   	push   eax
   1cf7e:	8d 45 c5             	lea    eax,[ebp-0x3b]
   1cf81:	50                   	push   eax
   1cf82:	e8 ed 27 00 00       	call   1f774 <fatfs_lfn_create_sfn>
   1cf87:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:469

        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
   1cf8a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1cf8e:	74 1f                	je     1cfaf <_create_file+0x1f3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:470
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
   1cf90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cf93:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1cf96:	81 c2 14 01 00 00    	add    edx,0x114
   1cf9c:	83 ec 04             	sub    esp,0x4
   1cf9f:	50                   	push   eax
   1cfa0:	8d 45 c5             	lea    eax,[ebp-0x3b]
   1cfa3:	50                   	push   eax
   1cfa4:	52                   	push   edx
   1cfa5:	e8 50 2a 00 00       	call   1f9fa <fatfs_lfn_generate_tail>
   1cfaa:	83 c4 10             	add    esp,0x10
   1cfad:	eb 1b                	jmp    1cfca <_create_file+0x20e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:473
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
   1cfaf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cfb2:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1cfb8:	83 ec 04             	sub    esp,0x4
   1cfbb:	6a 0b                	push   0xb
   1cfbd:	8d 45 c5             	lea    eax,[ebp-0x3b]
   1cfc0:	50                   	push   eax
   1cfc1:	52                   	push   edx
   1cfc2:	e8 55 8a 00 00       	call   25a1c <memcpy>
   1cfc7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:476

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
   1cfca:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cfcd:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1cfd3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cfd6:	8b 00                	mov    eax,DWORD PTR [eax]
   1cfd8:	83 ec 04             	sub    esp,0x4
   1cfdb:	52                   	push   edx
   1cfdc:	50                   	push   eax
   1cfdd:	68 a0 e6 09 00       	push   0x9e6a0
   1cfe2:	e8 5a e9 ff ff       	call   1b941 <fatfs_sfn_exists>
   1cfe7:	83 c4 10             	add    esp,0x10
   1cfea:	85 c0                	test   eax,eax
   1cfec:	74 13                	je     1d001 <_create_file+0x245>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:479
            break;

        tailNum++;
   1cfee:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:481
    }
    while (tailNum < 9999);
   1cff2:	81 7d f4 0e 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270e
   1cff9:	0f 8e 73 ff ff ff    	jle    1cf72 <_create_file+0x1b6>
   1cfff:	eb 01                	jmp    1d002 <_create_file+0x246>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:477
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
            break;
   1d001:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:484
        tailNum++;
    }
    while (tailNum < 9999);

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
   1d002:	81 7d f4 0f 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270f
   1d009:	75 2f                	jne    1d03a <_create_file+0x27e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:487
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1d00b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d00e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d011:	83 ec 08             	sub    esp,0x8
   1d014:	50                   	push   eax
   1d015:	68 a0 e6 09 00       	push   0x9e6a0
   1d01a:	e8 5f 3b 00 00       	call   20b7e <fatfs_free_cluster_chain>
   1d01f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:489

        _free_file(file);
   1d022:	83 ec 0c             	sub    esp,0xc
   1d025:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d028:	e8 98 f6 ff ff       	call   1c6c5 <_free_file>
   1d02d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:490
        return NULL;
   1d030:	b8 00 00 00 00       	mov    eax,0x0
   1d035:	e9 dd 00 00 00       	jmp    1d117 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:518
        return NULL;
    }
#endif

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 0))
   1d03a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d03d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1d040:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d043:	8d 98 14 01 00 00    	lea    ebx,[eax+0x114]
   1d049:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d04c:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1d052:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d055:	8b 00                	mov    eax,DWORD PTR [eax]
   1d057:	83 ec 04             	sub    esp,0x4
   1d05a:	6a 00                	push   0x0
   1d05c:	6a 00                	push   0x0
   1d05e:	52                   	push   edx
   1d05f:	53                   	push   ebx
   1d060:	51                   	push   ecx
   1d061:	50                   	push   eax
   1d062:	68 a0 e6 09 00       	push   0x9e6a0
   1d067:	e8 e4 40 00 00       	call   21150 <fatfs_add_file_entry>
   1d06c:	83 c4 20             	add    esp,0x20
   1d06f:	85 c0                	test   eax,eax
   1d071:	75 2c                	jne    1d09f <_create_file+0x2e3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:521
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1d073:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d076:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d079:	83 ec 08             	sub    esp,0x8
   1d07c:	50                   	push   eax
   1d07d:	68 a0 e6 09 00       	push   0x9e6a0
   1d082:	e8 f7 3a 00 00       	call   20b7e <fatfs_free_cluster_chain>
   1d087:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:523

        _free_file(file);
   1d08a:	83 ec 0c             	sub    esp,0xc
   1d08d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d090:	e8 30 f6 ff ff       	call   1c6c5 <_free_file>
   1d095:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:524
        return NULL;
   1d098:	b8 00 00 00 00       	mov    eax,0x0
   1d09d:	eb 78                	jmp    1d117 <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:528
    }

    // General
    file->filelength = 0;
   1d09f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d0a2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:529
    file->bytenum = 0;
   1d0a9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d0ac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:530
    file->file_data_address = 0xFFFFFFFF;
   1d0b3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d0b6:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1d0bd:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:531
    file->file_data_dirty = 0;
   1d0c0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d0c3:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1d0ca:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:532
    file->filelength_changed = 0;
   1d0cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d0d0:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:535

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
   1d0d7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d0da:	c7 80 20 01 00 00 ff 	mov    DWORD PTR [eax+0x120],0xffffffff
   1d0e1:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:536
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
   1d0e4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d0e7:	c7 80 24 01 00 00 ff 	mov    DWORD PTR [eax+0x124],0xffffffff
   1d0ee:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:538

    fatfs_cache_init(&_fs, file);
   1d0f1:	83 ec 08             	sub    esp,0x8
   1d0f4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d0f7:	68 a0 e6 09 00       	push   0x9e6a0
   1d0fc:	e8 35 f3 ff ff       	call   1c436 <fatfs_cache_init>
   1d101:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:540

    fatfs_fat_purge(&_fs);
   1d104:	83 ec 0c             	sub    esp,0xc
   1d107:	68 a0 e6 09 00       	push   0x9e6a0
   1d10c:	e8 d3 34 00 00       	call   205e4 <fatfs_fat_purge>
   1d111:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:542

    return file;
   1d114:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:543 (discriminator 1)
}
   1d117:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1d11a:	c9                   	leave  
   1d11b:	c3                   	ret    

0001d11c <_read_sectors>:
_read_sectors():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:549
#endif
//-----------------------------------------------------------------------------
// _read_sectors: Read sector(s) from disk to file
//-----------------------------------------------------------------------------
static uint32 _read_sectors(FL_FILE* file, uint32 offset, uint8 *buffer, uint32 count)
{
   1d11c:	55                   	push   ebp
   1d11d:	89 e5                	mov    ebp,esp
   1d11f:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:550
    uint32 Sector = 0;
   1d122:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:551
    uint32 ClusterIdx = 0;
   1d129:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:552
    uint32 Cluster = 0;
   1d130:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:557
    uint32 i;
    uint32 lba;

    // Find cluster index within file & sector with cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   1d137:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d13e:	0f b6 c8             	movzx  ecx,al
   1d141:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d144:	ba 00 00 00 00       	mov    edx,0x0
   1d149:	f7 f1                	div    ecx
   1d14b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:558
    Sector = offset - (ClusterIdx * _fs.sectors_per_cluster);
   1d14e:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d155:	0f b6 c0             	movzx  eax,al
   1d158:	0f af 45 e8          	imul   eax,DWORD PTR [ebp-0x18]
   1d15c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1d15f:	29 c2                	sub    edx,eax
   1d161:	89 d0                	mov    eax,edx
   1d163:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:561

    // Limit number of sectors read to the number remaining in this cluster
    if ((Sector + count) > _fs.sectors_per_cluster)
   1d166:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1d169:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d16c:	01 c2                	add    edx,eax
   1d16e:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d175:	0f b6 c0             	movzx  eax,al
   1d178:	39 c2                	cmp    edx,eax
   1d17a:	76 10                	jbe    1d18c <_read_sectors+0x70>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:562
        count = _fs.sectors_per_cluster - Sector;
   1d17c:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d183:	0f b6 c0             	movzx  eax,al
   1d186:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1d189:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:565

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
   1d18c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d18f:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d195:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d198:	75 11                	jne    1d1ab <_read_sectors+0x8f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:566
        Cluster = file->last_fat_lookup.CurrentCluster;
   1d19a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d19d:	8b 80 24 01 00 00    	mov    eax,DWORD PTR [eax+0x124]
   1d1a3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d1a6:	e9 bb 00 00 00       	jmp    1d266 <_read_sectors+0x14a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:571
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
   1d1ab:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1d1af:	74 2b                	je     1d1dc <_read_sectors+0xc0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:571 (discriminator 1)
   1d1b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d1b4:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d1ba:	83 c0 01             	add    eax,0x1
   1d1bd:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d1c0:	75 1a                	jne    1d1dc <_read_sectors+0xc0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:573
        {
            i = file->last_fat_lookup.ClusterIdx;
   1d1c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d1c5:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d1cb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:574
            Cluster = file->last_fat_lookup.CurrentCluster;
   1d1ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d1d1:	8b 80 24 01 00 00    	mov    eax,DWORD PTR [eax+0x124]
   1d1d7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d1da:	eb 10                	jmp    1d1ec <_read_sectors+0xd0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:580
        }
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
   1d1dc:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:581
            Cluster = file->startcluster;
   1d1e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d1e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d1e9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:585
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1d1ec:	eb 52                	jmp    1d240 <_read_sectors+0x124>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:590
        {
            uint32 nextCluster;

            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))
   1d1ee:	8d 45 e0             	lea    eax,[ebp-0x20]
   1d1f1:	50                   	push   eax
   1d1f2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d1f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d1f8:	68 a0 e6 09 00       	push   0x9e6a0
   1d1fd:	e8 3e f2 ff ff       	call   1c440 <fatfs_cache_get_next_cluster>
   1d202:	83 c4 10             	add    esp,0x10
   1d205:	85 c0                	test   eax,eax
   1d207:	75 2d                	jne    1d236 <_read_sectors+0x11a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:593
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
   1d209:	83 ec 08             	sub    esp,0x8
   1d20c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d20f:	68 a0 e6 09 00       	push   0x9e6a0
   1d214:	e8 21 34 00 00       	call   2063a <fatfs_find_next_cluster>
   1d219:	83 c4 10             	add    esp,0x10
   1d21c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:596

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
   1d21f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1d222:	50                   	push   eax
   1d223:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d226:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d229:	68 a0 e6 09 00       	push   0x9e6a0
   1d22e:	e8 17 f2 ff ff       	call   1c44a <fatfs_cache_set_next_cluster>
   1d233:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:599
            }

            Cluster = nextCluster;
   1d236:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1d239:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:585
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1d23c:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:585 (discriminator 1)
   1d240:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d243:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d246:	72 a6                	jb     1d1ee <_read_sectors+0xd2>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:603

            Cluster = nextCluster;
        }

        // Record current cluster lookup details (if valid)
        if (Cluster != FAT32_LAST_CLUSTER)
   1d248:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1d24c:	74 18                	je     1d266 <_read_sectors+0x14a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:605
        {
            file->last_fat_lookup.CurrentCluster = Cluster;
   1d24e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d251:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1d254:	89 90 24 01 00 00    	mov    DWORD PTR [eax+0x124],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:606
            file->last_fat_lookup.ClusterIdx = ClusterIdx;
   1d25a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d25d:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1d260:	89 90 20 01 00 00    	mov    DWORD PTR [eax+0x120],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:611
        }
    }

    // If end of cluster chain then return false
    if (Cluster == FAT32_LAST_CLUSTER)
   1d266:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1d26a:	75 07                	jne    1d273 <_read_sectors+0x157>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:612
        return 0;
   1d26c:	b8 00 00 00 00       	mov    eax,0x0
   1d271:	eb 41                	jmp    1d2b4 <_read_sectors+0x198>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:615

    // Calculate sector address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + Sector;
   1d273:	83 ec 08             	sub    esp,0x8
   1d276:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d279:	68 a0 e6 09 00       	push   0x9e6a0
   1d27e:	e8 79 df ff ff       	call   1b1fc <fatfs_lba_of_cluster>
   1d283:	83 c4 10             	add    esp,0x10
   1d286:	89 c2                	mov    edx,eax
   1d288:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d28b:	01 d0                	add    eax,edx
   1d28d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:618

    // Read sector of file
    if (fatfs_sector_read(&_fs, lba, buffer, count))
   1d290:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1d293:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1d296:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1d299:	68 a0 e6 09 00       	push   0x9e6a0
   1d29e:	e8 bb df ff ff       	call   1b25e <fatfs_sector_read>
   1d2a3:	83 c4 10             	add    esp,0x10
   1d2a6:	85 c0                	test   eax,eax
   1d2a8:	74 05                	je     1d2af <_read_sectors+0x193>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:619
        return count;
   1d2aa:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d2ad:	eb 05                	jmp    1d2b4 <_read_sectors+0x198>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:621
    else
        return 0;
   1d2af:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:622
}
   1d2b4:	c9                   	leave  
   1d2b5:	c3                   	ret    

0001d2b6 <fl_init>:
fl_init():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:632

//-----------------------------------------------------------------------------
// fl_init: Initialise library
//-----------------------------------------------------------------------------
void __attribute__ ((constructor)) fl_init(void)
{
   1d2b6:	55                   	push   ebp
   1d2b7:	89 e5                	mov    ebp,esp
   1d2b9:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:638
    int i;

    //printk("fl_init: Entered\n");
    
    //printk("fl_init: About to initialize free file list\n");
    fat_list_init(&_free_file_list);
   1d2bc:	68 10 eb 09 00       	push   0x9eb10
   1d2c1:	e8 8e f1 ff ff       	call   1c454 <fat_list_init>
   1d2c6:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:641
    //printk("fl_init: Initialized free file list\n");
    //printk("fl_init: About to initialize open file list\n");
    fat_list_init(&_open_file_list);
   1d2c9:	68 08 eb 09 00       	push   0x9eb08
   1d2ce:	e8 81 f1 ff ff       	call   1c454 <fat_list_init>
   1d2d3:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:646
    //printk("fl_init: Initialized open file list\n");

    //printk("fl_init: Adding all objects to free list\n");
    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
   1d2d6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1d2dd:	eb 28                	jmp    1d307 <fl_init+0x51>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:647 (discriminator 3)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);
   1d2df:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1d2e2:	69 c0 3c 03 00 00    	imul   eax,eax,0x33c
   1d2e8:	05 30 03 00 00       	add    eax,0x330
   1d2ed:	05 e0 a5 09 00       	add    eax,0x9a5e0
   1d2f2:	83 c0 04             	add    eax,0x4
   1d2f5:	50                   	push   eax
   1d2f6:	68 10 eb 09 00       	push   0x9eb10
   1d2fb:	e8 88 f2 ff ff       	call   1c588 <fat_list_insert_last>
   1d300:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:646 (discriminator 3)
    fat_list_init(&_open_file_list);
    //printk("fl_init: Initialized open file list\n");

    //printk("fl_init: Adding all objects to free list\n");
    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
   1d303:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:646 (discriminator 1)
   1d307:	83 7d fc 13          	cmp    DWORD PTR [ebp-0x4],0x13
   1d30b:	7e d2                	jle    1d2df <fl_init+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:650
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    //printk("fl_init: Returning\n");
    _filelib_init = 1;
   1d30d:	c7 05 90 e6 09 00 01 	mov    DWORD PTR ds:0x9e690,0x1
   1d314:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:651
}
   1d317:	90                   	nop
   1d318:	c9                   	leave  
   1d319:	c3                   	ret    

0001d31a <fl_attach_locks>:
fl_attach_locks():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:656
//-----------------------------------------------------------------------------
// fl_attach_locks:
//-----------------------------------------------------------------------------
void fl_attach_locks(void (*lock)(void), void (*unlock)(void))
{
   1d31a:	55                   	push   ebp
   1d31b:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:657
    _fs.fl_lock = lock;
   1d31d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d320:	a3 dc e6 09 00       	mov    ds:0x9e6dc,eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:658
    _fs.fl_unlock = unlock;
   1d325:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d328:	a3 e0 e6 09 00       	mov    ds:0x9e6e0,eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:659
}
   1d32d:	90                   	nop
   1d32e:	5d                   	pop    ebp
   1d32f:	c3                   	ret    

0001d330 <fl_attach_media>:
fl_attach_media():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:664
//-----------------------------------------------------------------------------
// fl_attach_media:
//-----------------------------------------------------------------------------
int fl_attach_media(fn_diskio_read rd, fn_diskio_write wr)
{
   1d330:	55                   	push   ebp
   1d331:	89 e5                	mov    ebp,esp
   1d333:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:669
    int res;

    //printk("fl_attach_media: Entered\n");
    // If first call to library, initialise
    CHECK_FL_INIT();
   1d336:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1d33b:	85 c0                	test   eax,eax
   1d33d:	75 05                	jne    1d344 <fl_attach_media+0x14>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:669 (discriminator 1)
   1d33f:	e8 72 ff ff ff       	call   1d2b6 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:671
    //FAT_PRINTF(("fl_attach_media: CHEKC_FL_INIT returned\n")); //clr
    _fs.disk_io.read_media = rd;
   1d344:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d347:	a3 d4 e6 09 00       	mov    ds:0x9e6d4,eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:672
    _fs.disk_io.write_media = wr;
   1d34c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d34f:	a3 d8 e6 09 00       	mov    ds:0x9e6d8,eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:675

    // Initialise FAT parameters
    if ((res = fatfs_init(&_fs)) != FAT_INIT_OK)
   1d354:	83 ec 0c             	sub    esp,0xc
   1d357:	68 a0 e6 09 00       	push   0x9e6a0
   1d35c:	e8 03 d9 ff ff       	call   1ac64 <fatfs_init>
   1d361:	83 c4 10             	add    esp,0x10
   1d364:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d367:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1d36b:	74 18                	je     1d385 <fl_attach_media+0x55>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:677
    {
        FAT_PRINTF(("FAT_FS: Error could not load FAT details (%d)!\r\n", res));
   1d36d:	83 ec 08             	sub    esp,0x8
   1d370:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d373:	68 a8 36 08 00       	push   0x836a8
   1d378:	e8 3a 9d 00 00       	call   270b7 <printk>
   1d37d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:678
        return res;
   1d380:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d383:	eb 0f                	jmp    1d394 <fl_attach_media+0x64>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:682
    }

    //FAT_PRINTF(("fl_attach_media: returning valid=1\n")); //clr
    _filelib_valid = 1;
   1d385:	c7 05 94 e6 09 00 01 	mov    DWORD PTR ds:0x9e694,0x1
   1d38c:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:683
    return FAT_INIT_OK;
   1d38f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:684
}
   1d394:	c9                   	leave  
   1d395:	c3                   	ret    

0001d396 <fl_shutdown>:
fl_shutdown():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:689
//-----------------------------------------------------------------------------
// fl_shutdown: Call before shutting down system
//-----------------------------------------------------------------------------
 void __attribute__ ((destructor))fl_shutdown(void)
{
   1d396:	55                   	push   ebp
   1d397:	89 e5                	mov    ebp,esp
   1d399:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:691
    // If first call to library, initialise
    CHECK_FL_INIT();
   1d39c:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1d3a1:	85 c0                	test   eax,eax
   1d3a3:	75 05                	jne    1d3aa <fl_shutdown+0x14>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:691 (discriminator 1)
   1d3a5:	e8 0c ff ff ff       	call   1d2b6 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:693

    FL_LOCK(&_fs);
   1d3aa:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d3af:	85 c0                	test   eax,eax
   1d3b1:	74 07                	je     1d3ba <fl_shutdown+0x24>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:693 (discriminator 1)
   1d3b3:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d3b8:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:694
    fatfs_fat_purge(&_fs);
   1d3ba:	83 ec 0c             	sub    esp,0xc
   1d3bd:	68 a0 e6 09 00       	push   0x9e6a0
   1d3c2:	e8 1d 32 00 00       	call   205e4 <fatfs_fat_purge>
   1d3c7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:695
    FL_UNLOCK(&_fs);
   1d3ca:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d3cf:	85 c0                	test   eax,eax
   1d3d1:	74 07                	je     1d3da <fl_shutdown+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:695 (discriminator 1)
   1d3d3:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d3d8:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:696
}
   1d3da:	90                   	nop
   1d3db:	c9                   	leave  
   1d3dc:	c3                   	ret    

0001d3dd <fl_fopen>:
fl_fopen():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:701
//-----------------------------------------------------------------------------
// fopen: Open or Create a file for reading or writing
//-----------------------------------------------------------------------------
void* fl_fopen(const char *path, const char *mode)
{
   1d3dd:	55                   	push   ebp
   1d3de:	89 e5                	mov    ebp,esp
   1d3e0:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:704
    int i;
    FL_FILE* file;
    uint8 flags = 0;
   1d3e3:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:707

    // If first call to library, initialise
    CHECK_FL_INIT();
   1d3e7:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1d3ec:	85 c0                	test   eax,eax
   1d3ee:	75 05                	jne    1d3f5 <fl_fopen+0x18>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:707 (discriminator 1)
   1d3f0:	e8 c1 fe ff ff       	call   1d2b6 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:709

    if (!_filelib_valid)
   1d3f5:	a1 94 e6 09 00       	mov    eax,ds:0x9e694
   1d3fa:	85 c0                	test   eax,eax
   1d3fc:	75 0a                	jne    1d408 <fl_fopen+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:710
        return NULL;
   1d3fe:	b8 00 00 00 00       	mov    eax,0x0
   1d403:	e9 8c 01 00 00       	jmp    1d594 <fl_fopen+0x1b7>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:712

    if (!path || !mode)
   1d408:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1d40c:	74 06                	je     1d414 <fl_fopen+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:712 (discriminator 1)
   1d40e:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1d412:	75 0a                	jne    1d41e <fl_fopen+0x41>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:713
        return NULL;
   1d414:	b8 00 00 00 00       	mov    eax,0x0
   1d419:	e9 76 01 00 00       	jmp    1d594 <fl_fopen+0x1b7>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:733
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations
    //        will move it back to the end of file.
    //        The file is created if it does not exist.

    for (i=0;i<(int)strlen(mode);i++)
   1d41e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1d425:	e9 93 00 00 00       	jmp    1d4bd <fl_fopen+0xe0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:735
    {
        switch (mode[i])
   1d42a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1d42d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d430:	01 d0                	add    eax,edx
   1d432:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1d435:	0f be c0             	movsx  eax,al
   1d438:	83 e8 2b             	sub    eax,0x2b
   1d43b:	83 f8 4c             	cmp    eax,0x4c
   1d43e:	77 79                	ja     1d4b9 <fl_fopen+0xdc>
   1d440:	8b 04 85 dc 36 08 00 	mov    eax,DWORD PTR [eax*4+0x836dc]
   1d447:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:739
        {
        case 'r':
        case 'R':
            flags |= FILE_READ;
   1d449:	80 4d ef 01          	or     BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:740
            break;
   1d44d:	eb 6a                	jmp    1d4b9 <fl_fopen+0xdc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:743
        case 'w':
        case 'W':
            flags |= FILE_WRITE;
   1d44f:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:744
            flags |= FILE_ERASE;
   1d453:	80 4d ef 10          	or     BYTE PTR [ebp-0x11],0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:745
            flags |= FILE_CREATE;
   1d457:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:746
            break;
   1d45b:	eb 5c                	jmp    1d4b9 <fl_fopen+0xdc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:749
        case 'a':
        case 'A':
            flags |= FILE_WRITE;
   1d45d:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:750
            flags |= FILE_APPEND;
   1d461:	80 4d ef 04          	or     BYTE PTR [ebp-0x11],0x4
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:751
            flags |= FILE_CREATE;
   1d465:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:752
            break;
   1d469:	eb 4e                	jmp    1d4b9 <fl_fopen+0xdc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:754
        case '+':
            if (flags & FILE_READ)
   1d46b:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d46f:	83 e0 01             	and    eax,0x1
   1d472:	85 c0                	test   eax,eax
   1d474:	74 06                	je     1d47c <fl_fopen+0x9f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:755
                flags |= FILE_WRITE;
   1d476:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:769
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
            }
            break;
   1d47a:	eb 3c                	jmp    1d4b8 <fl_fopen+0xdb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:756
            flags |= FILE_CREATE;
            break;
        case '+':
            if (flags & FILE_READ)
                flags |= FILE_WRITE;
            else if (flags & FILE_WRITE)
   1d47c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d480:	83 e0 02             	and    eax,0x2
   1d483:	85 c0                	test   eax,eax
   1d485:	74 0e                	je     1d495 <fl_fopen+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:758
            {
                flags |= FILE_READ;
   1d487:	80 4d ef 01          	or     BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:759
                flags |= FILE_ERASE;
   1d48b:	80 4d ef 10          	or     BYTE PTR [ebp-0x11],0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:760
                flags |= FILE_CREATE;
   1d48f:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:769
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
            }
            break;
   1d493:	eb 23                	jmp    1d4b8 <fl_fopen+0xdb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:762
            {
                flags |= FILE_READ;
                flags |= FILE_ERASE;
                flags |= FILE_CREATE;
            }
            else if (flags & FILE_APPEND)
   1d495:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d499:	83 e0 04             	and    eax,0x4
   1d49c:	85 c0                	test   eax,eax
   1d49e:	74 18                	je     1d4b8 <fl_fopen+0xdb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:764
            {
                flags |= FILE_READ;
   1d4a0:	80 4d ef 01          	or     BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:765
                flags |= FILE_WRITE;
   1d4a4:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:766
                flags |= FILE_APPEND;
   1d4a8:	80 4d ef 04          	or     BYTE PTR [ebp-0x11],0x4
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:767
                flags |= FILE_CREATE;
   1d4ac:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:769
            }
            break;
   1d4b0:	eb 06                	jmp    1d4b8 <fl_fopen+0xdb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:772
        case 'b':
        case 'B':
            flags |= FILE_BINARY;
   1d4b2:	80 4d ef 08          	or     BYTE PTR [ebp-0x11],0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:773
            break;
   1d4b6:	eb 01                	jmp    1d4b9 <fl_fopen+0xdc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:769
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
            }
            break;
   1d4b8:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:733 (discriminator 2)
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations
    //        will move it back to the end of file.
    //        The file is created if it does not exist.

    for (i=0;i<(int)strlen(mode);i++)
   1d4b9:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:733 (discriminator 1)
   1d4bd:	83 ec 0c             	sub    esp,0xc
   1d4c0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1d4c3:	e8 c0 9d 00 00       	call   27288 <strlen>
   1d4c8:	83 c4 10             	add    esp,0x10
   1d4cb:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1d4ce:	0f 8f 56 ff ff ff    	jg     1d42a <fl_fopen+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:777
            flags |= FILE_BINARY;
            break;
        }
    }

    file = NULL;
   1d4d4:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:785
    // No write support!
    flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
#endif

    // No write access - remove write/modify flags
    if (!_fs.disk_io.write_media)
   1d4db:	a1 d8 e6 09 00       	mov    eax,ds:0x9e6d8
   1d4e0:	85 c0                	test   eax,eax
   1d4e2:	75 04                	jne    1d4e8 <fl_fopen+0x10b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:786
        flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
   1d4e4:	80 65 ef d9          	and    BYTE PTR [ebp-0x11],0xd9
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:788

    FL_LOCK(&_fs);
   1d4e8:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d4ed:	85 c0                	test   eax,eax
   1d4ef:	74 07                	je     1d4f8 <fl_fopen+0x11b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:788 (discriminator 1)
   1d4f1:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d4f6:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:791

    // Read
    if (flags & FILE_READ)
   1d4f8:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d4fc:	83 e0 01             	and    eax,0x1
   1d4ff:	85 c0                	test   eax,eax
   1d501:	74 11                	je     1d514 <fl_fopen+0x137>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:792
        file = _open_file(path);
   1d503:	83 ec 0c             	sub    esp,0xc
   1d506:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d509:	e8 92 f6 ff ff       	call   1cba0 <_open_file>
   1d50e:	83 c4 10             	add    esp,0x10
   1d511:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:796

    // Create New
#if FATFS_INC_WRITE_SUPPORT
    if (!file && (flags & FILE_CREATE))
   1d514:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1d518:	75 1c                	jne    1d536 <fl_fopen+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:796 (discriminator 1)
   1d51a:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d51e:	83 e0 20             	and    eax,0x20
   1d521:	85 c0                	test   eax,eax
   1d523:	74 11                	je     1d536 <fl_fopen+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:797
        file = _create_file(path);
   1d525:	83 ec 0c             	sub    esp,0xc
   1d528:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d52b:	e8 8c f8 ff ff       	call   1cdbc <_create_file>
   1d530:	83 c4 10             	add    esp,0x10
   1d533:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:801
#endif

    // Write Existing (and not open due to read or create)
    if (!(flags & FILE_READ))
   1d536:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d53a:	83 e0 01             	and    eax,0x1
   1d53d:	85 c0                	test   eax,eax
   1d53f:	75 2d                	jne    1d56e <fl_fopen+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:802
        if ((flags & FILE_CREATE) && !file)
   1d541:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d545:	83 e0 20             	and    eax,0x20
   1d548:	85 c0                	test   eax,eax
   1d54a:	74 22                	je     1d56e <fl_fopen+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:802 (discriminator 1)
   1d54c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1d550:	75 1c                	jne    1d56e <fl_fopen+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:803
            if (flags & (FILE_WRITE | FILE_APPEND))
   1d552:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d556:	83 e0 06             	and    eax,0x6
   1d559:	85 c0                	test   eax,eax
   1d55b:	74 11                	je     1d56e <fl_fopen+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:804
                file = _open_file(path);
   1d55d:	83 ec 0c             	sub    esp,0xc
   1d560:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d563:	e8 38 f6 ff ff       	call   1cba0 <_open_file>
   1d568:	83 c4 10             	add    esp,0x10
   1d56b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:806

    if (file)
   1d56e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1d572:	74 0d                	je     1d581 <fl_fopen+0x1a4>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:807
        file->flags = flags;
   1d574:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d577:	0f b6 55 ef          	movzx  edx,BYTE PTR [ebp-0x11]
   1d57b:	88 90 30 03 00 00    	mov    BYTE PTR [eax+0x330],dl
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:809

    FL_UNLOCK(&_fs);
   1d581:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d586:	85 c0                	test   eax,eax
   1d588:	74 07                	je     1d591 <fl_fopen+0x1b4>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:809 (discriminator 1)
   1d58a:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d58f:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:810
    return file;
   1d591:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:811
}
   1d594:	c9                   	leave  
   1d595:	c3                   	ret    

0001d596 <_write_sectors>:
_write_sectors():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:817
//-----------------------------------------------------------------------------
// _write_sectors: Write sector(s) to disk
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static uint32 _write_sectors(FL_FILE* file, uint32 offset, uint8 *buf, uint32 count)
{
   1d596:	55                   	push   ebp
   1d597:	89 e5                	mov    ebp,esp
   1d599:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:818
    uint32 SectorNumber = 0;
   1d59c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:819
    uint32 ClusterIdx = 0;
   1d5a3:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:820
    uint32 Cluster = 0;
   1d5aa:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:821
    uint32 LastCluster = FAT32_LAST_CLUSTER;
   1d5b1:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [ebp-0x24],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:824
    uint32 i;
    uint32 lba;
    uint32 TotalWriteCount = count;
   1d5b8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d5bb:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:827

    // Find values for Cluster index & sector within cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   1d5be:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d5c5:	0f b6 c8             	movzx  ecx,al
   1d5c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d5cb:	ba 00 00 00 00       	mov    edx,0x0
   1d5d0:	f7 f1                	div    ecx
   1d5d2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:828
    SectorNumber = offset - (ClusterIdx * _fs.sectors_per_cluster);
   1d5d5:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d5dc:	0f b6 c0             	movzx  eax,al
   1d5df:	0f af 45 e8          	imul   eax,DWORD PTR [ebp-0x18]
   1d5e3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1d5e6:	29 c2                	sub    edx,eax
   1d5e8:	89 d0                	mov    eax,edx
   1d5ea:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:831

    // Limit number of sectors written to the number remaining in this cluster
    if ((SectorNumber + count) > _fs.sectors_per_cluster)
   1d5ed:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1d5f0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d5f3:	01 c2                	add    edx,eax
   1d5f5:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d5fc:	0f b6 c0             	movzx  eax,al
   1d5ff:	39 c2                	cmp    edx,eax
   1d601:	76 10                	jbe    1d613 <_write_sectors+0x7d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:832
        count = _fs.sectors_per_cluster - SectorNumber;
   1d603:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d60a:	0f b6 c0             	movzx  eax,al
   1d60d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1d610:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:835

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
   1d613:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d616:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d61c:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d61f:	75 11                	jne    1d632 <_write_sectors+0x9c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:836
        Cluster = file->last_fat_lookup.CurrentCluster;
   1d621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d624:	8b 80 24 01 00 00    	mov    eax,DWORD PTR [eax+0x124]
   1d62a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d62d:	e9 13 01 00 00       	jmp    1d745 <_write_sectors+0x1af>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:841
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
   1d632:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1d636:	74 2b                	je     1d663 <_write_sectors+0xcd>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:841 (discriminator 1)
   1d638:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d63b:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d641:	83 c0 01             	add    eax,0x1
   1d644:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d647:	75 1a                	jne    1d663 <_write_sectors+0xcd>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:843
        {
            i = file->last_fat_lookup.ClusterIdx;
   1d649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d64c:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d652:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:844
            Cluster = file->last_fat_lookup.CurrentCluster;
   1d655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d658:	8b 80 24 01 00 00    	mov    eax,DWORD PTR [eax+0x124]
   1d65e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d661:	eb 10                	jmp    1d673 <_write_sectors+0xdd>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:850
        }
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
   1d663:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:851
            Cluster = file->startcluster;
   1d66a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d66d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d670:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:855
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1d673:	eb 5e                	jmp    1d6d3 <_write_sectors+0x13d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:860
        {
            uint32 nextCluster;

            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))
   1d675:	8d 45 d8             	lea    eax,[ebp-0x28]
   1d678:	50                   	push   eax
   1d679:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d67c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d67f:	68 a0 e6 09 00       	push   0x9e6a0
   1d684:	e8 b7 ed ff ff       	call   1c440 <fatfs_cache_get_next_cluster>
   1d689:	83 c4 10             	add    esp,0x10
   1d68c:	85 c0                	test   eax,eax
   1d68e:	75 2d                	jne    1d6bd <_write_sectors+0x127>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:863
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
   1d690:	83 ec 08             	sub    esp,0x8
   1d693:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d696:	68 a0 e6 09 00       	push   0x9e6a0
   1d69b:	e8 9a 2f 00 00       	call   2063a <fatfs_find_next_cluster>
   1d6a0:	83 c4 10             	add    esp,0x10
   1d6a3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:866

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
   1d6a6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1d6a9:	50                   	push   eax
   1d6aa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d6ad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d6b0:	68 a0 e6 09 00       	push   0x9e6a0
   1d6b5:	e8 90 ed ff ff       	call   1c44a <fatfs_cache_set_next_cluster>
   1d6ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:869
            }

            LastCluster = Cluster;
   1d6bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d6c0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:870
            Cluster = nextCluster;
   1d6c3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1d6c6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:873

            // Dont keep following a dead end
            if (Cluster == FAT32_LAST_CLUSTER)
   1d6c9:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1d6cd:	74 0e                	je     1d6dd <_write_sectors+0x147>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:855
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1d6cf:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:855 (discriminator 1)
   1d6d3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d6d6:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d6d9:	72 9a                	jb     1d675 <_write_sectors+0xdf>
   1d6db:	eb 01                	jmp    1d6de <_write_sectors+0x148>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:874
            LastCluster = Cluster;
            Cluster = nextCluster;

            // Dont keep following a dead end
            if (Cluster == FAT32_LAST_CLUSTER)
                break;
   1d6dd:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:878
        }

        // If we have reached the end of the chain, allocate more!
        if (Cluster == FAT32_LAST_CLUSTER)
   1d6de:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1d6e2:	75 49                	jne    1d72d <_write_sectors+0x197>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:881
        {
            // Add some more cluster(s) to the last good cluster chain
            if (!fatfs_add_free_space(&_fs, &LastCluster,  (TotalWriteCount + _fs.sectors_per_cluster -1) / _fs.sectors_per_cluster))
   1d6e4:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d6eb:	0f b6 d0             	movzx  edx,al
   1d6ee:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1d6f1:	01 d0                	add    eax,edx
   1d6f3:	83 e8 01             	sub    eax,0x1
   1d6f6:	0f b6 15 a0 e6 09 00 	movzx  edx,BYTE PTR ds:0x9e6a0
   1d6fd:	0f b6 ca             	movzx  ecx,dl
   1d700:	ba 00 00 00 00       	mov    edx,0x0
   1d705:	f7 f1                	div    ecx
   1d707:	83 ec 04             	sub    esp,0x4
   1d70a:	50                   	push   eax
   1d70b:	8d 45 dc             	lea    eax,[ebp-0x24]
   1d70e:	50                   	push   eax
   1d70f:	68 a0 e6 09 00       	push   0x9e6a0
   1d714:	e8 77 36 00 00       	call   20d90 <fatfs_add_free_space>
   1d719:	83 c4 10             	add    esp,0x10
   1d71c:	85 c0                	test   eax,eax
   1d71e:	75 07                	jne    1d727 <_write_sectors+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:882
                return 0;
   1d720:	b8 00 00 00 00       	mov    eax,0x0
   1d725:	eb 5f                	jmp    1d786 <_write_sectors+0x1f0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:884

            Cluster = LastCluster;
   1d727:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1d72a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:888
        }

        // Record current cluster lookup details
        file->last_fat_lookup.CurrentCluster = Cluster;
   1d72d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d730:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1d733:	89 90 24 01 00 00    	mov    DWORD PTR [eax+0x124],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:889
        file->last_fat_lookup.ClusterIdx = ClusterIdx;
   1d739:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d73c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1d73f:	89 90 20 01 00 00    	mov    DWORD PTR [eax+0x120],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:893
    }

    // Calculate write address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + SectorNumber;
   1d745:	83 ec 08             	sub    esp,0x8
   1d748:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d74b:	68 a0 e6 09 00       	push   0x9e6a0
   1d750:	e8 a7 da ff ff       	call   1b1fc <fatfs_lba_of_cluster>
   1d755:	83 c4 10             	add    esp,0x10
   1d758:	89 c2                	mov    edx,eax
   1d75a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d75d:	01 d0                	add    eax,edx
   1d75f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:895

    if (fatfs_sector_write(&_fs, lba, buf, count))
   1d762:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1d765:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1d768:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1d76b:	68 a0 e6 09 00       	push   0x9e6a0
   1d770:	e8 08 db ff ff       	call   1b27d <fatfs_sector_write>
   1d775:	83 c4 10             	add    esp,0x10
   1d778:	85 c0                	test   eax,eax
   1d77a:	74 05                	je     1d781 <_write_sectors+0x1eb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:896
        return count;
   1d77c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d77f:	eb 05                	jmp    1d786 <_write_sectors+0x1f0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:898
    else
        return 0;
   1d781:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:899 (discriminator 1)
}
   1d786:	c9                   	leave  
   1d787:	c3                   	ret    

0001d788 <fl_fflush>:
fl_fflush():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:905
#endif
//-----------------------------------------------------------------------------
// fl_fflush: Flush un-written data to the file
//-----------------------------------------------------------------------------
int fl_fflush(void *f)
{
   1d788:	55                   	push   ebp
   1d789:	89 e5                	mov    ebp,esp
   1d78b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:907
#if FATFS_INC_WRITE_SUPPORT
    FL_FILE *file = (FL_FILE *)f;
   1d78e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d791:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:910

    // If first call to library, initialise
    CHECK_FL_INIT();
   1d794:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1d799:	85 c0                	test   eax,eax
   1d79b:	75 05                	jne    1d7a2 <fl_fflush+0x1a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:910 (discriminator 1)
   1d79d:	e8 14 fb ff ff       	call   1d2b6 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:912

    if (file)
   1d7a2:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1d7a6:	74 5f                	je     1d807 <fl_fflush+0x7f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:914
    {
        FL_LOCK(&_fs);
   1d7a8:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d7ad:	85 c0                	test   eax,eax
   1d7af:	74 07                	je     1d7b8 <fl_fflush+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:914 (discriminator 1)
   1d7b1:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d7b6:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:917

        // If some write data still in buffer
        if (file->file_data_dirty)
   1d7b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d7bb:	8b 80 2c 03 00 00    	mov    eax,DWORD PTR [eax+0x32c]
   1d7c1:	85 c0                	test   eax,eax
   1d7c3:	74 32                	je     1d7f7 <fl_fflush+0x6f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:920
        {
            // Write back current sector before loading next
            if (_write_sectors(file, file->file_data_address, file->file_data_sector, 1))
   1d7c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d7c8:	8d 90 28 01 00 00    	lea    edx,[eax+0x128]
   1d7ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d7d1:	8b 80 28 03 00 00    	mov    eax,DWORD PTR [eax+0x328]
   1d7d7:	6a 01                	push   0x1
   1d7d9:	52                   	push   edx
   1d7da:	50                   	push   eax
   1d7db:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d7de:	e8 b3 fd ff ff       	call   1d596 <_write_sectors>
   1d7e3:	83 c4 10             	add    esp,0x10
   1d7e6:	85 c0                	test   eax,eax
   1d7e8:	74 0d                	je     1d7f7 <fl_fflush+0x6f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:921
                file->file_data_dirty = 0;
   1d7ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d7ed:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1d7f4:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:924
        }

        FL_UNLOCK(&_fs);
   1d7f7:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d7fc:	85 c0                	test   eax,eax
   1d7fe:	74 07                	je     1d807 <fl_fflush+0x7f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:924 (discriminator 1)
   1d800:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d805:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:927
    }
#endif
    return 0;
   1d807:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:928
}
   1d80c:	c9                   	leave  
   1d80d:	c3                   	ret    

0001d80e <fl_fclose>:
fl_fclose():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:933
//-----------------------------------------------------------------------------
// fl_fclose: Close an open file
//-----------------------------------------------------------------------------
void fl_fclose(void *f)
{
   1d80e:	55                   	push   ebp
   1d80f:	89 e5                	mov    ebp,esp
   1d811:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:934
    FL_FILE *file = (FL_FILE *)f;
   1d814:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d817:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:937

    // If first call to library, initialise
    CHECK_FL_INIT();
   1d81a:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1d81f:	85 c0                	test   eax,eax
   1d821:	75 05                	jne    1d828 <fl_fclose+0x1a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:937 (discriminator 1)
   1d823:	e8 8e fa ff ff       	call   1d2b6 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:939

    if (file)
   1d828:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1d82c:	0f 84 c6 00 00 00    	je     1d8f8 <fl_fclose+0xea>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:941
    {
        FL_LOCK(&_fs);
   1d832:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d837:	85 c0                	test   eax,eax
   1d839:	74 07                	je     1d842 <fl_fclose+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:941 (discriminator 1)
   1d83b:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d840:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:944

        // Flush un-written data to file
        fl_fflush(f);
   1d842:	83 ec 0c             	sub    esp,0xc
   1d845:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d848:	e8 3b ff ff ff       	call   1d788 <fl_fflush>
   1d84d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:947

        // File size changed?
        if (file->filelength_changed)
   1d850:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d853:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1d856:	85 c0                	test   eax,eax
   1d858:	74 2e                	je     1d888 <fl_fclose+0x7a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:951
        {
#if FATFS_INC_WRITE_SUPPORT
            // Update filesize in directory
            fatfs_update_file_length(&_fs, file->parentcluster, (char*)file->shortfilename, file->filelength);
   1d85a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d85d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1d860:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d863:	8d 88 14 01 00 00    	lea    ecx,[eax+0x114]
   1d869:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d86c:	8b 00                	mov    eax,DWORD PTR [eax]
   1d86e:	52                   	push   edx
   1d86f:	51                   	push   ecx
   1d870:	50                   	push   eax
   1d871:	68 a0 e6 09 00       	push   0x9e6a0
   1d876:	e8 c9 e2 ff ff       	call   1bb44 <fatfs_update_file_length>
   1d87b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:953
#endif
            file->filelength_changed = 0;
   1d87e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d881:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:956
        }

        file->bytenum = 0;
   1d888:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d88b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:957
        file->filelength = 0;
   1d892:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d895:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:958
        file->startcluster = 0;
   1d89c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d89f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:959
        file->file_data_address = 0xFFFFFFFF;
   1d8a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d8a9:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1d8b0:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:960
        file->file_data_dirty = 0;
   1d8b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d8b6:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1d8bd:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:961
        file->filelength_changed = 0;
   1d8c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d8c3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:964

        // Free file handle
        _free_file(file);
   1d8ca:	83 ec 0c             	sub    esp,0xc
   1d8cd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d8d0:	e8 f0 ed ff ff       	call   1c6c5 <_free_file>
   1d8d5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:966

        fatfs_fat_purge(&_fs);
   1d8d8:	83 ec 0c             	sub    esp,0xc
   1d8db:	68 a0 e6 09 00       	push   0x9e6a0
   1d8e0:	e8 ff 2c 00 00       	call   205e4 <fatfs_fat_purge>
   1d8e5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:968

        FL_UNLOCK(&_fs);
   1d8e8:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d8ed:	85 c0                	test   eax,eax
   1d8ef:	74 07                	je     1d8f8 <fl_fclose+0xea>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:968 (discriminator 1)
   1d8f1:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d8f6:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:970
    }
}
   1d8f8:	90                   	nop
   1d8f9:	c9                   	leave  
   1d8fa:	c3                   	ret    

0001d8fb <fl_fgetc>:
fl_fgetc():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:975
//-----------------------------------------------------------------------------
// fl_fgetc: Get a character in the stream
//-----------------------------------------------------------------------------
int fl_fgetc(void *f)
{
   1d8fb:	55                   	push   ebp
   1d8fc:	89 e5                	mov    ebp,esp
   1d8fe:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:977
    int res;
    uint8 data = 0;
   1d901:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:979

    res = fl_fread(&data, 1, 1, f);
   1d905:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d908:	6a 01                	push   0x1
   1d90a:	6a 01                	push   0x1
   1d90c:	8d 45 f3             	lea    eax,[ebp-0xd]
   1d90f:	50                   	push   eax
   1d910:	e8 95 00 00 00       	call   1d9aa <fl_fread>
   1d915:	83 c4 10             	add    esp,0x10
   1d918:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:980
    if (res == 1)
   1d91b:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   1d91f:	75 09                	jne    1d92a <fl_fgetc+0x2f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:981
        return (int)data;
   1d921:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   1d925:	0f b6 c0             	movzx  eax,al
   1d928:	eb 03                	jmp    1d92d <fl_fgetc+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:983
    else
        return res;
   1d92a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:984 (discriminator 1)
}
   1d92d:	c9                   	leave  
   1d92e:	c3                   	ret    

0001d92f <fl_fgets>:
fl_fgets():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:989
//-----------------------------------------------------------------------------
// fl_fgets: Get a string from a stream
//-----------------------------------------------------------------------------
char *fl_fgets(char *s, int n, void *f)
{
   1d92f:	55                   	push   ebp
   1d930:	89 e5                	mov    ebp,esp
   1d932:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:990
    int idx = 0;
   1d935:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:993

    // Space for null terminator?
    if (n > 0)
   1d93c:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1d940:	7e 56                	jle    1d998 <fl_fgets+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:996
    {
        // While space (+space for null terminator)
        while (idx < (n-1))
   1d942:	eb 32                	jmp    1d976 <fl_fgets+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:998
        {
            int ch = fl_fgetc(f);
   1d944:	83 ec 0c             	sub    esp,0xc
   1d947:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1d94a:	e8 ac ff ff ff       	call   1d8fb <fl_fgetc>
   1d94f:	83 c4 10             	add    esp,0x10
   1d952:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1001

            // EOF / Error?
            if (ch < 0)
   1d955:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1d959:	78 28                	js     1d983 <fl_fgets+0x54>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1005
                break;

            // Store character read from stream
            s[idx++] = (char)ch;
   1d95b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d95e:	8d 50 01             	lea    edx,[eax+0x1]
   1d961:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   1d964:	89 c2                	mov    edx,eax
   1d966:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d969:	01 d0                	add    eax,edx
   1d96b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1d96e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1008

            // End of line?
            if (ch == '\n')
   1d970:	83 7d f0 0a          	cmp    DWORD PTR [ebp-0x10],0xa
   1d974:	74 10                	je     1d986 <fl_fgets+0x57>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:996

    // Space for null terminator?
    if (n > 0)
    {
        // While space (+space for null terminator)
        while (idx < (n-1))
   1d976:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d979:	83 e8 01             	sub    eax,0x1
   1d97c:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1d97f:	7f c3                	jg     1d944 <fl_fgets+0x15>
   1d981:	eb 04                	jmp    1d987 <fl_fgets+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1002
        {
            int ch = fl_fgetc(f);

            // EOF / Error?
            if (ch < 0)
                break;
   1d983:	90                   	nop
   1d984:	eb 01                	jmp    1d987 <fl_fgets+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1009
            // Store character read from stream
            s[idx++] = (char)ch;

            // End of line?
            if (ch == '\n')
                break;
   1d986:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1012
        }

        if (idx > 0)
   1d987:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1d98b:	7e 0b                	jle    1d998 <fl_fgets+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1013
            s[idx] = '\0';
   1d98d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1d990:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d993:	01 d0                	add    eax,edx
   1d995:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1016
    }

    return (idx > 0) ? s : 0;
   1d998:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1d99c:	7e 05                	jle    1d9a3 <fl_fgets+0x74>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1016 (discriminator 1)
   1d99e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d9a1:	eb 05                	jmp    1d9a8 <fl_fgets+0x79>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1016 (discriminator 2)
   1d9a3:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1017 (discriminator 5)
}
   1d9a8:	c9                   	leave  
   1d9a9:	c3                   	ret    

0001d9aa <fl_fread>:
fl_fread():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1022
//-----------------------------------------------------------------------------
// fl_fread: Read a block of data from the file
//-----------------------------------------------------------------------------
int fl_fread(void * buffer, int size, int length, void *f )
{
   1d9aa:	55                   	push   ebp
   1d9ab:	89 e5                	mov    ebp,esp
   1d9ad:	53                   	push   ebx
   1d9ae:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1026
    uint32 sector;
    uint32 offset;
    int copyCount;
    int count = size * length;
   1d9b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d9b4:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
   1d9b8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1027
    int bytesRead = 0;
   1d9bb:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1029

    FL_FILE *file = (FL_FILE *)f;
   1d9c2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d9c5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1032

    // If first call to library, initialise
    CHECK_FL_INIT();
   1d9c8:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1d9cd:	85 c0                	test   eax,eax
   1d9cf:	75 05                	jne    1d9d6 <fl_fread+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1032 (discriminator 1)
   1d9d1:	e8 e0 f8 ff ff       	call   1d2b6 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1034

    if (buffer==NULL || file==NULL)
   1d9d6:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1d9da:	74 06                	je     1d9e2 <fl_fread+0x38>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1034 (discriminator 1)
   1d9dc:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1d9e0:	75 0a                	jne    1d9ec <fl_fread+0x42>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1035
        return -1;
   1d9e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1d9e7:	e9 d8 01 00 00       	jmp    1dbc4 <fl_fread+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1038

    // No read permissions
    if (!(file->flags & FILE_READ))
   1d9ec:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1d9ef:	0f b6 80 30 03 00 00 	movzx  eax,BYTE PTR [eax+0x330]
   1d9f6:	0f b6 c0             	movzx  eax,al
   1d9f9:	83 e0 01             	and    eax,0x1
   1d9fc:	85 c0                	test   eax,eax
   1d9fe:	75 0a                	jne    1da0a <fl_fread+0x60>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1039
        return -1;
   1da00:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1da05:	e9 ba 01 00 00       	jmp    1dbc4 <fl_fread+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1042

    // Nothing to be done
    if (!count)
   1da0a:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1da0e:	75 0a                	jne    1da1a <fl_fread+0x70>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1043
        return 0;
   1da10:	b8 00 00 00 00       	mov    eax,0x0
   1da15:	e9 aa 01 00 00       	jmp    1dbc4 <fl_fread+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1046

    // Check if read starts past end of file
    if (file->bytenum >= file->filelength)
   1da1a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1da1d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1da20:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1da23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1da26:	39 c2                	cmp    edx,eax
   1da28:	72 0a                	jb     1da34 <fl_fread+0x8a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1047
        return -1;
   1da2a:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1da2f:	e9 90 01 00 00       	jmp    1dbc4 <fl_fread+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1050

    // Limit to file size
    if ( (file->bytenum + count) > file->filelength )
   1da34:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1da37:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1da3a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1da3d:	01 c2                	add    edx,eax
   1da3f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1da42:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1da45:	39 c2                	cmp    edx,eax
   1da47:	76 13                	jbe    1da5c <fl_fread+0xb2>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1051
        count = file->filelength - file->bytenum;
   1da49:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1da4c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1da4f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1da52:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1da55:	29 c2                	sub    edx,eax
   1da57:	89 d0                	mov    eax,edx
   1da59:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1054

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;
   1da5c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1da5f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1da62:	c1 e8 09             	shr    eax,0x9
   1da65:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1057

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
   1da68:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1da6b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1da6e:	25 ff 01 00 00       	and    eax,0x1ff
   1da73:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1059

    while (bytesRead < count)
   1da76:	e9 34 01 00 00       	jmp    1dbaf <fl_fread+0x205>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1062
    {
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
   1da7b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1da7f:	75 63                	jne    1dae4 <fl_fread+0x13a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1062 (discriminator 1)
   1da81:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1da84:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1da87:	3d ff 01 00 00       	cmp    eax,0x1ff
   1da8c:	7e 56                	jle    1dae4 <fl_fread+0x13a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1065
        {
            // Read as many sectors as possible into target buffer
            uint32 sectorsRead = _read_sectors(file, sector, (uint8*)((uint8*)buffer + bytesRead), (count - bytesRead) / FAT_SECTOR_SIZE);
   1da8e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1da91:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1da94:	8d 90 ff 01 00 00    	lea    edx,[eax+0x1ff]
   1da9a:	85 c0                	test   eax,eax
   1da9c:	0f 48 c2             	cmovs  eax,edx
   1da9f:	c1 f8 09             	sar    eax,0x9
   1daa2:	89 c1                	mov    ecx,eax
   1daa4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   1daa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1daaa:	01 d0                	add    eax,edx
   1daac:	51                   	push   ecx
   1daad:	50                   	push   eax
   1daae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1dab1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1dab4:	e8 63 f6 ff ff       	call   1d11c <_read_sectors>
   1dab9:	83 c4 10             	add    esp,0x10
   1dabc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1066
            if (sectorsRead)
   1dabf:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
   1dac3:	0f 84 f4 00 00 00    	je     1dbbd <fl_fread+0x213>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1069
            {
                // We have upto one sector to copy
                copyCount = FAT_SECTOR_SIZE * sectorsRead;
   1dac9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1dacc:	c1 e0 09             	shl    eax,0x9
   1dacf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1072

                // Move onto next sector and reset copy offset
                sector+= sectorsRead;
   1dad2:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1dad5:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1073
                offset = 0;
   1dad8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1063

    while (bytesRead < count)
    {
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
        {
   1dadf:	e9 b4 00 00 00       	jmp    1db98 <fl_fread+0x1ee>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1081
                break;
        }
        else
        {
            // Do we need to re-read the sector?
            if (file->file_data_address != sector)
   1dae4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dae7:	8b 80 28 03 00 00    	mov    eax,DWORD PTR [eax+0x328]
   1daed:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1daf0:	74 55                	je     1db47 <fl_fread+0x19d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1084
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
   1daf2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1daf5:	8b 80 2c 03 00 00    	mov    eax,DWORD PTR [eax+0x32c]
   1dafb:	85 c0                	test   eax,eax
   1dafd:	74 0e                	je     1db0d <fl_fread+0x163>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1085
                    fl_fflush(file);
   1daff:	83 ec 0c             	sub    esp,0xc
   1db02:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1db05:	e8 7e fc ff ff       	call   1d788 <fl_fflush>
   1db0a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1088

                // Get LBA of sector offset within file
                if (!_read_sectors(file, sector, file->file_data_sector, 1))
   1db0d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1db10:	05 28 01 00 00       	add    eax,0x128
   1db15:	6a 01                	push   0x1
   1db17:	50                   	push   eax
   1db18:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1db1b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1db1e:	e8 f9 f5 ff ff       	call   1d11c <_read_sectors>
   1db23:	83 c4 10             	add    esp,0x10
   1db26:	85 c0                	test   eax,eax
   1db28:	0f 84 92 00 00 00    	je     1dbc0 <fl_fread+0x216>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1092
                    // Read failed - out of range (probably)
                    break;

                file->file_data_address = sector;
   1db2e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1db31:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1db34:	89 90 28 03 00 00    	mov    DWORD PTR [eax+0x328],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1093
                file->file_data_dirty = 0;
   1db3a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1db3d:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1db44:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1097
            }

            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
   1db47:	b8 00 02 00 00       	mov    eax,0x200
   1db4c:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
   1db4f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1100

            // Only require some of this sector?
            if (copyCount > (count - bytesRead))
   1db52:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1db55:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1db58:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   1db5b:	7d 09                	jge    1db66 <fl_fread+0x1bc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1101
                copyCount = (count - bytesRead);
   1db5d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1db60:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1db63:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1104

            // Copy to application buffer
            memcpy( (uint8*)((uint8*)buffer + bytesRead), (uint8*)(file->file_data_sector + offset), copyCount);
   1db66:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1db69:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1db6c:	8d 8a 28 01 00 00    	lea    ecx,[edx+0x128]
   1db72:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1db75:	01 d1                	add    ecx,edx
   1db77:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
   1db7a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1db7d:	01 da                	add    edx,ebx
   1db7f:	83 ec 04             	sub    esp,0x4
   1db82:	50                   	push   eax
   1db83:	51                   	push   ecx
   1db84:	52                   	push   edx
   1db85:	e8 92 7e 00 00       	call   25a1c <memcpy>
   1db8a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1107

            // Move onto next sector and reset copy offset
            sector++;
   1db8d:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1108
            offset = 0;
   1db91:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1112
        }

        // Increase total read count
        bytesRead += copyCount;
   1db98:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1db9b:	01 45 e4             	add    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1115

        // Increment file pointer
        file->bytenum += copyCount;
   1db9e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dba1:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dba4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1dba7:	01 c2                	add    edx,eax
   1dba9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dbac:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1059
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
   1dbaf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1dbb2:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1dbb5:	0f 8c c0 fe ff ff    	jl     1da7b <fl_fread+0xd1>
   1dbbb:	eb 04                	jmp    1dbc1 <fl_fread+0x217>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1076
                // Move onto next sector and reset copy offset
                sector+= sectorsRead;
                offset = 0;
            }
            else
                break;
   1dbbd:	90                   	nop
   1dbbe:	eb 01                	jmp    1dbc1 <fl_fread+0x217>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1090
                    fl_fflush(file);

                // Get LBA of sector offset within file
                if (!_read_sectors(file, sector, file->file_data_sector, 1))
                    // Read failed - out of range (probably)
                    break;
   1dbc0:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1118

        // Increment file pointer
        file->bytenum += copyCount;
    }

    return bytesRead;
   1dbc1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1119
}
   1dbc4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1dbc7:	c9                   	leave  
   1dbc8:	c3                   	ret    

0001dbc9 <fl_fseek>:
fl_fseek():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1124
//-----------------------------------------------------------------------------
// fl_fseek: Seek to a specific place in the file
//-----------------------------------------------------------------------------
int fl_fseek( void *f, long offset, int origin )
{
   1dbc9:	55                   	push   ebp
   1dbca:	89 e5                	mov    ebp,esp
   1dbcc:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1125
    FL_FILE *file = (FL_FILE *)f;
   1dbcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dbd2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1126
    int res = -1;
   1dbd5:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1129

    // If first call to library, initialise
    CHECK_FL_INIT();
   1dbdc:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1dbe1:	85 c0                	test   eax,eax
   1dbe3:	75 05                	jne    1dbea <fl_fseek+0x21>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1129 (discriminator 1)
   1dbe5:	e8 cc f6 ff ff       	call   1d2b6 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1131

    if (!file)
   1dbea:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1dbee:	75 0a                	jne    1dbfa <fl_fseek+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1132
        return -1;
   1dbf0:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1dbf5:	e9 1d 01 00 00       	jmp    1dd17 <fl_fseek+0x14e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1134

    if (origin == SEEK_END && offset != 0)
   1dbfa:	83 7d 10 02          	cmp    DWORD PTR [ebp+0x10],0x2
   1dbfe:	75 10                	jne    1dc10 <fl_fseek+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1134 (discriminator 1)
   1dc00:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1dc04:	74 0a                	je     1dc10 <fl_fseek+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1135
        return -1;
   1dc06:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1dc0b:	e9 07 01 00 00       	jmp    1dd17 <fl_fseek+0x14e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1137

    FL_LOCK(&_fs);
   1dc10:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1dc15:	85 c0                	test   eax,eax
   1dc17:	74 07                	je     1dc20 <fl_fseek+0x57>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1137 (discriminator 1)
   1dc19:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1dc1e:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1140

    // Invalidate file buffer
    file->file_data_address = 0xFFFFFFFF;
   1dc20:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc23:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1dc2a:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1141
    file->file_data_dirty = 0;
   1dc2d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc30:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1dc37:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1143

    if (origin == SEEK_SET)
   1dc3a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   1dc3e:	75 31                	jne    1dc71 <fl_fseek+0xa8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1145
    {
        file->bytenum = (uint32)offset;
   1dc40:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1dc43:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc46:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1147

        if (file->bytenum > file->filelength)
   1dc49:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc4c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dc4f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc52:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1dc55:	39 c2                	cmp    edx,eax
   1dc57:	76 0c                	jbe    1dc65 <fl_fseek+0x9c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1148
            file->bytenum = file->filelength;
   1dc59:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc5c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1dc5f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc62:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1150

        res = 0;
   1dc65:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1dc6c:	e9 93 00 00 00       	jmp    1dd04 <fl_fseek+0x13b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1152
    }
    else if (origin == SEEK_CUR)
   1dc71:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
   1dc75:	75 6b                	jne    1dce2 <fl_fseek+0x119>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1155
    {
        // Positive shift
        if (offset >= 0)
   1dc77:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1dc7b:	78 2f                	js     1dcac <fl_fseek+0xe3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1157
        {
            file->bytenum += offset;
   1dc7d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc80:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dc83:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1dc86:	01 c2                	add    edx,eax
   1dc88:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1159

            if (file->bytenum > file->filelength)
   1dc8e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc91:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dc94:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc97:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1dc9a:	39 c2                	cmp    edx,eax
   1dc9c:	76 3b                	jbe    1dcd9 <fl_fseek+0x110>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1160
                file->bytenum = file->filelength;
   1dc9e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dca1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1dca4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dca7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
   1dcaa:	eb 2d                	jmp    1dcd9 <fl_fseek+0x110>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1166
        }
        // Negative shift
        else
        {
            // Make shift positive
            offset = -offset;
   1dcac:	f7 5d 0c             	neg    DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1169

            // Limit to negative shift to start of file
            if ((uint32)offset > file->bytenum)
   1dcaf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dcb2:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dcb5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1dcb8:	39 c2                	cmp    edx,eax
   1dcba:	73 0c                	jae    1dcc8 <fl_fseek+0xff>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1170
                file->bytenum = 0;
   1dcbc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dcbf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
   1dcc6:	eb 11                	jmp    1dcd9 <fl_fseek+0x110>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1172
            else
                file->bytenum-= offset;
   1dcc8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dccb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dcce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1dcd1:	29 c2                	sub    edx,eax
   1dcd3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dcd6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1175
        }

        res = 0;
   1dcd9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1dce0:	eb 22                	jmp    1dd04 <fl_fseek+0x13b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1177
    }
    else if (origin == SEEK_END)
   1dce2:	83 7d 10 02          	cmp    DWORD PTR [ebp+0x10],0x2
   1dce6:	75 15                	jne    1dcfd <fl_fseek+0x134>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1179
    {
        file->bytenum = file->filelength;
   1dce8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dceb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1dcee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dcf1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1180
        res = 0;
   1dcf4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1dcfb:	eb 07                	jmp    1dd04 <fl_fseek+0x13b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1183
    }
    else
        res = -1;
   1dcfd:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1185

    FL_UNLOCK(&_fs);
   1dd04:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1dd09:	85 c0                	test   eax,eax
   1dd0b:	74 07                	je     1dd14 <fl_fseek+0x14b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1185 (discriminator 1)
   1dd0d:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1dd12:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1187

    return res;
   1dd14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1188
}
   1dd17:	c9                   	leave  
   1dd18:	c3                   	ret    

0001dd19 <fl_fgetpos>:
fl_fgetpos():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1193
//-----------------------------------------------------------------------------
// fl_fgetpos: Get the current file position
//-----------------------------------------------------------------------------
int fl_fgetpos(void *f , uint32 * position)
{
   1dd19:	55                   	push   ebp
   1dd1a:	89 e5                	mov    ebp,esp
   1dd1c:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1194
    FL_FILE *file = (FL_FILE *)f;
   1dd1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dd22:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1196

    if (!file)
   1dd25:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1dd29:	75 07                	jne    1dd32 <fl_fgetpos+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1197
        return -1;
   1dd2b:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1dd30:	eb 30                	jmp    1dd62 <fl_fgetpos+0x49>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1199

    FL_LOCK(&_fs);
   1dd32:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1dd37:	85 c0                	test   eax,eax
   1dd39:	74 07                	je     1dd42 <fl_fgetpos+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1199 (discriminator 1)
   1dd3b:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1dd40:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1202

    // Get position
    *position = file->bytenum;
   1dd42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dd45:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dd48:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1dd4b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1204

    FL_UNLOCK(&_fs);
   1dd4d:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1dd52:	85 c0                	test   eax,eax
   1dd54:	74 07                	je     1dd5d <fl_fgetpos+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1204 (discriminator 1)
   1dd56:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1dd5b:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1206

    return 0;
   1dd5d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1207
}
   1dd62:	c9                   	leave  
   1dd63:	c3                   	ret    

0001dd64 <fl_ftell>:
fl_ftell():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1212
//-----------------------------------------------------------------------------
// fl_ftell: Get the current file position
//-----------------------------------------------------------------------------
long fl_ftell(void *f)
{
   1dd64:	55                   	push   ebp
   1dd65:	89 e5                	mov    ebp,esp
   1dd67:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1213
    uint32 pos = 0;
   1dd6a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1215

    fl_fgetpos(f, &pos);
   1dd71:	83 ec 08             	sub    esp,0x8
   1dd74:	8d 45 f4             	lea    eax,[ebp-0xc]
   1dd77:	50                   	push   eax
   1dd78:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1dd7b:	e8 99 ff ff ff       	call   1dd19 <fl_fgetpos>
   1dd80:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1217

    return (long)pos;
   1dd83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1218
}
   1dd86:	c9                   	leave  
   1dd87:	c3                   	ret    

0001dd88 <fl_feof>:
fl_feof():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1223
//-----------------------------------------------------------------------------
// fl_feof: Is the file pointer at the end of the stream?
//-----------------------------------------------------------------------------
int fl_feof(void *f)
{
   1dd88:	55                   	push   ebp
   1dd89:	89 e5                	mov    ebp,esp
   1dd8b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1224
    FL_FILE *file = (FL_FILE *)f;
   1dd8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dd91:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1227
    int res;

    if (!file)
   1dd94:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1dd98:	75 07                	jne    1dda1 <fl_feof+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1228
        return -1;
   1dd9a:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1dd9f:	eb 43                	jmp    1dde4 <fl_feof+0x5c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1230

    FL_LOCK(&_fs);
   1dda1:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1dda6:	85 c0                	test   eax,eax
   1dda8:	74 07                	je     1ddb1 <fl_feof+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1230 (discriminator 1)
   1ddaa:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1ddaf:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1232

    if (file->bytenum == file->filelength)
   1ddb1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1ddb4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1ddb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1ddba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1ddbd:	39 c2                	cmp    edx,eax
   1ddbf:	75 09                	jne    1ddca <fl_feof+0x42>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1233
        res = EOF;
   1ddc1:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
   1ddc8:	eb 07                	jmp    1ddd1 <fl_feof+0x49>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1235
    else
        res = 0;
   1ddca:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1237

    FL_UNLOCK(&_fs);
   1ddd1:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1ddd6:	85 c0                	test   eax,eax
   1ddd8:	74 07                	je     1dde1 <fl_feof+0x59>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1237 (discriminator 1)
   1ddda:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1dddf:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1239

    return res;
   1dde1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1240
}
   1dde4:	c9                   	leave  
   1dde5:	c3                   	ret    

0001dde6 <fl_fputc>:
fl_fputc():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1246
//-----------------------------------------------------------------------------
// fl_fputc: Write a character to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fputc(int c, void *f)
{
   1dde6:	55                   	push   ebp
   1dde7:	89 e5                	mov    ebp,esp
   1dde9:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1247
    uint8 data = (uint8)c;
   1ddec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ddef:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1250
    int res;

    res = fl_fwrite(&data, 1, 1, f);
   1ddf2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1ddf5:	6a 01                	push   0x1
   1ddf7:	6a 01                	push   0x1
   1ddf9:	8d 45 f3             	lea    eax,[ebp-0xd]
   1ddfc:	50                   	push   eax
   1ddfd:	e8 16 00 00 00       	call   1de18 <fl_fwrite>
   1de02:	83 c4 10             	add    esp,0x10
   1de05:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1251
    if (res == 1)
   1de08:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   1de0c:	75 05                	jne    1de13 <fl_fputc+0x2d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1252
        return c;
   1de0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1de11:	eb 03                	jmp    1de16 <fl_fputc+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1254
    else
        return res;
   1de13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1255 (discriminator 1)
}
   1de16:	c9                   	leave  
   1de17:	c3                   	ret    

0001de18 <fl_fwrite>:
fl_fwrite():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1262
//-----------------------------------------------------------------------------
// fl_fwrite: Write a block of data to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fwrite(const void * data, int size, int count, void *f )
{
   1de18:	55                   	push   ebp
   1de19:	89 e5                	mov    ebp,esp
   1de1b:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1263
    FL_FILE *file = (FL_FILE *)f;
   1de1e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1de21:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1266
    uint32 sector;
    uint32 offset;
    uint32 length = (size*count);
   1de24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1de27:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
   1de2b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1267
    uint8 *buffer = (uint8 *)data;
   1de2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1de31:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1268
    uint32 bytesWritten = 0;
   1de34:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1272
    uint32 copyCount;

    // If first call to library, initialise
    CHECK_FL_INIT();
   1de3b:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1de40:	85 c0                	test   eax,eax
   1de42:	75 05                	jne    1de49 <fl_fwrite+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1272 (discriminator 1)
   1de44:	e8 6d f4 ff ff       	call   1d2b6 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1274

    if (!file)
   1de49:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   1de4d:	75 0a                	jne    1de59 <fl_fwrite+0x41>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1275
        return -1;
   1de4f:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1de54:	e9 8a 02 00 00       	jmp    1e0e3 <fl_fwrite+0x2cb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1277

    FL_LOCK(&_fs);
   1de59:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1de5e:	85 c0                	test   eax,eax
   1de60:	74 07                	je     1de69 <fl_fwrite+0x51>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1277 (discriminator 1)
   1de62:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1de67:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1280

    // No write permissions
    if (!(file->flags & FILE_WRITE))
   1de69:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1de6c:	0f b6 80 30 03 00 00 	movzx  eax,BYTE PTR [eax+0x330]
   1de73:	0f b6 c0             	movzx  eax,al
   1de76:	83 e0 02             	and    eax,0x2
   1de79:	85 c0                	test   eax,eax
   1de7b:	75 1a                	jne    1de97 <fl_fwrite+0x7f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1282
    {
        FL_UNLOCK(&_fs);
   1de7d:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1de82:	85 c0                	test   eax,eax
   1de84:	74 07                	je     1de8d <fl_fwrite+0x75>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1282 (discriminator 1)
   1de86:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1de8b:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1283
        return -1;
   1de8d:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1de92:	e9 4c 02 00 00       	jmp    1e0e3 <fl_fwrite+0x2cb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1287
    }

    // Append writes to end of file
    if (file->flags & FILE_APPEND)
   1de97:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1de9a:	0f b6 80 30 03 00 00 	movzx  eax,BYTE PTR [eax+0x330]
   1dea1:	0f b6 c0             	movzx  eax,al
   1dea4:	83 e0 04             	and    eax,0x4
   1dea7:	85 c0                	test   eax,eax
   1dea9:	74 0c                	je     1deb7 <fl_fwrite+0x9f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1288
        file->bytenum = file->filelength;
   1deab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1deae:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1deb1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1deb4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1292
    // Else write to current position

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;
   1deb7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1deba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1debd:	c1 e8 09             	shr    eax,0x9
   1dec0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1295

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
   1dec3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1dec6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1dec9:	25 ff 01 00 00       	and    eax,0x1ff
   1dece:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1297

    while (bytesWritten < length)
   1ded1:	e9 b7 01 00 00       	jmp    1e08d <fl_fwrite+0x275>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1300
    {
        // Whole sector or more to be written?
        if ((offset == 0) && ((length - bytesWritten) >= FAT_SECTOR_SIZE))
   1ded6:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1deda:	0f 85 b6 00 00 00    	jne    1df96 <fl_fwrite+0x17e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1300 (discriminator 1)
   1dee0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dee3:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1dee6:	3d ff 01 00 00       	cmp    eax,0x1ff
   1deeb:	0f 86 a5 00 00 00    	jbe    1df96 <fl_fwrite+0x17e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1305
        {
            uint32 sectorsWrote;

            // Buffered sector, flush back to disk
            if (file->file_data_address != 0xFFFFFFFF)
   1def1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1def4:	8b 80 28 03 00 00    	mov    eax,DWORD PTR [eax+0x328]
   1defa:	83 f8 ff             	cmp    eax,0xffffffff
   1defd:	74 35                	je     1df34 <fl_fwrite+0x11c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1308
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
   1deff:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1df02:	8b 80 2c 03 00 00    	mov    eax,DWORD PTR [eax+0x32c]
   1df08:	85 c0                	test   eax,eax
   1df0a:	74 0e                	je     1df1a <fl_fwrite+0x102>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1309
                    fl_fflush(file);
   1df0c:	83 ec 0c             	sub    esp,0xc
   1df0f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1df12:	e8 71 f8 ff ff       	call   1d788 <fl_fflush>
   1df17:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1311

                file->file_data_address = 0xFFFFFFFF;
   1df1a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1df1d:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1df24:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1312
                file->file_data_dirty = 0;
   1df27:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1df2a:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1df31:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1316
            }

            // Write as many sectors as possible
            sectorsWrote = _write_sectors(file, sector, (uint8*)(buffer + bytesWritten), (length - bytesWritten) / FAT_SECTOR_SIZE);
   1df34:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1df37:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1df3a:	c1 e8 09             	shr    eax,0x9
   1df3d:	89 c2                	mov    edx,eax
   1df3f:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
   1df42:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1df45:	01 c8                	add    eax,ecx
   1df47:	52                   	push   edx
   1df48:	50                   	push   eax
   1df49:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1df4c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1df4f:	e8 42 f6 ff ff       	call   1d596 <_write_sectors>
   1df54:	83 c4 10             	add    esp,0x10
   1df57:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1317
            copyCount = FAT_SECTOR_SIZE * sectorsWrote;
   1df5a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1df5d:	c1 e0 09             	shl    eax,0x9
   1df60:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1320

            // Increase total read count
            bytesWritten += copyCount;
   1df63:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1df66:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1323

            // Increment file pointer
            file->bytenum += copyCount;
   1df69:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1df6c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1df6f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1df72:	01 c2                	add    edx,eax
   1df74:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1df77:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1326

            // Move onto next sector and reset copy offset
            sector+= sectorsWrote;
   1df7a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1df7d:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1327
            offset = 0;
   1df80:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1329

            if (!sectorsWrote)
   1df87:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
   1df8b:	0f 84 0a 01 00 00    	je     1e09b <fl_fwrite+0x283>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1301

    while (bytesWritten < length)
    {
        // Whole sector or more to be written?
        if ((offset == 0) && ((length - bytesWritten) >= FAT_SECTOR_SIZE))
        {
   1df91:	e9 f7 00 00 00       	jmp    1e08d <fl_fwrite+0x275>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1335
                break;
        }
        else
        {
            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
   1df96:	b8 00 02 00 00       	mov    eax,0x200
   1df9b:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
   1df9e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1338

            // Only require some of this sector?
            if (copyCount > (length - bytesWritten))
   1dfa1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dfa4:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1dfa7:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1dfaa:	73 09                	jae    1dfb5 <fl_fwrite+0x19d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1339
                copyCount = (length - bytesWritten);
   1dfac:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dfaf:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1dfb2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1342

            // Do we need to read a new sector?
            if (file->file_data_address != sector)
   1dfb5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1dfb8:	8b 80 28 03 00 00    	mov    eax,DWORD PTR [eax+0x328]
   1dfbe:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1dfc1:	74 75                	je     1e038 <fl_fwrite+0x220>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1345
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
   1dfc3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1dfc6:	8b 80 2c 03 00 00    	mov    eax,DWORD PTR [eax+0x32c]
   1dfcc:	85 c0                	test   eax,eax
   1dfce:	74 0e                	je     1dfde <fl_fwrite+0x1c6>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1346
                    fl_fflush(file);
   1dfd0:	83 ec 0c             	sub    esp,0xc
   1dfd3:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1dfd6:	e8 ad f7 ff ff       	call   1d788 <fl_fflush>
   1dfdb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1349

                // If we plan to overwrite the whole sector, we don't need to read it first!
                if (copyCount != FAT_SECTOR_SIZE)
   1dfde:	81 7d e8 00 02 00 00 	cmp    DWORD PTR [ebp-0x18],0x200
   1dfe5:	74 38                	je     1e01f <fl_fwrite+0x207>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1356
                    // NOTE: This does not have succeed; if last sector of file
                    // reached, no valid data will be read in, but write will
                    // allocate some more space for new data.

                    // Get LBA of sector offset within file
                    if (!_read_sectors(file, sector, file->file_data_sector, 1))
   1dfe7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1dfea:	05 28 01 00 00       	add    eax,0x128
   1dfef:	6a 01                	push   0x1
   1dff1:	50                   	push   eax
   1dff2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1dff5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1dff8:	e8 1f f1 ff ff       	call   1d11c <_read_sectors>
   1dffd:	83 c4 10             	add    esp,0x10
   1e000:	85 c0                	test   eax,eax
   1e002:	75 1b                	jne    1e01f <fl_fwrite+0x207>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1357
                        memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
   1e004:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e007:	05 28 01 00 00       	add    eax,0x128
   1e00c:	83 ec 04             	sub    esp,0x4
   1e00f:	68 00 02 00 00       	push   0x200
   1e014:	6a 00                	push   0x0
   1e016:	50                   	push   eax
   1e017:	e8 11 70 00 00       	call   2502d <memset>
   1e01c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1360
                }

                file->file_data_address = sector;
   1e01f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e022:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1e025:	89 90 28 03 00 00    	mov    DWORD PTR [eax+0x328],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1361
                file->file_data_dirty = 0;
   1e02b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e02e:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1e035:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1365
            }

            // Copy from application buffer into sector buffer
            memcpy((uint8*)(file->file_data_sector + offset), (uint8*)(buffer + bytesWritten), copyCount);
   1e038:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   1e03b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e03e:	01 c2                	add    edx,eax
   1e040:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e043:	8d 88 28 01 00 00    	lea    ecx,[eax+0x128]
   1e049:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e04c:	01 c8                	add    eax,ecx
   1e04e:	83 ec 04             	sub    esp,0x4
   1e051:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1e054:	52                   	push   edx
   1e055:	50                   	push   eax
   1e056:	e8 c1 79 00 00       	call   25a1c <memcpy>
   1e05b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1368

            // Mark buffer as dirty
            file->file_data_dirty = 1;
   1e05e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e061:	c7 80 2c 03 00 00 01 	mov    DWORD PTR [eax+0x32c],0x1
   1e068:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1371

            // Increase total read count
            bytesWritten += copyCount;
   1e06b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e06e:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1374

            // Increment file pointer
            file->bytenum += copyCount;
   1e071:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e074:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e077:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e07a:	01 c2                	add    edx,eax
   1e07c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e07f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1377

            // Move onto next sector and reset copy offset
            sector++;
   1e082:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1378
            offset = 0;
   1e086:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1297
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesWritten < length)
   1e08d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e090:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1e093:	0f 82 3d fe ff ff    	jb     1ded6 <fl_fwrite+0xbe>
   1e099:	eb 01                	jmp    1e09c <fl_fwrite+0x284>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1330
            // Move onto next sector and reset copy offset
            sector+= sectorsWrote;
            offset = 0;

            if (!sectorsWrote)
                break;
   1e09b:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1383
            offset = 0;
        }
    }

    // Write increased extent of the file?
    if (file->bytenum > file->filelength)
   1e09c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e09f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e0a2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e0a5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1e0a8:	39 c2                	cmp    edx,eax
   1e0aa:	76 16                	jbe    1e0c2 <fl_fwrite+0x2aa>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1386
    {
        // Increase file size to new point
        file->filelength = file->bytenum;
   1e0ac:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e0af:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e0b2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e0b5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1390

        // We are changing the file length and this
        // will need to be writen back at some point
        file->filelength_changed = 1;
   1e0b8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e0bb:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1396
    }

#if FATFS_INC_TIME_DATE_SUPPORT
    // If time & date support is enabled, always force directory entry to be
    // written in-order to update file modify / access time & date.
    file->filelength_changed = 1;
   1e0c2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e0c5:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1399
#endif

    FL_UNLOCK(&_fs);
   1e0cc:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e0d1:	85 c0                	test   eax,eax
   1e0d3:	74 07                	je     1e0dc <fl_fwrite+0x2c4>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1399 (discriminator 1)
   1e0d5:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e0da:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1401

    return (size*count);
   1e0dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e0df:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1402
}
   1e0e3:	c9                   	leave  
   1e0e4:	c3                   	ret    

0001e0e5 <fl_fputs>:
fl_fputs():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1409
//-----------------------------------------------------------------------------
// fl_fputs: Write a character string to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fputs(const char * str, void *f)
{
   1e0e5:	55                   	push   ebp
   1e0e6:	89 e5                	mov    ebp,esp
   1e0e8:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1410
    int len = (int)strlen(str);
   1e0eb:	83 ec 0c             	sub    esp,0xc
   1e0ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e0f1:	e8 92 91 00 00       	call   27288 <strlen>
   1e0f6:	83 c4 10             	add    esp,0x10
   1e0f9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1411
    int res = fl_fwrite(str, 1, len, f);
   1e0fc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e0ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1e102:	6a 01                	push   0x1
   1e104:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e107:	e8 0c fd ff ff       	call   1de18 <fl_fwrite>
   1e10c:	83 c4 10             	add    esp,0x10
   1e10f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1413

    if (res == len)
   1e112:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e115:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1e118:	75 05                	jne    1e11f <fl_fputs+0x3a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1414
        return len;
   1e11a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1e11d:	eb 03                	jmp    1e122 <fl_fputs+0x3d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1416
    else
        return res;
   1e11f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1417
}
   1e122:	c9                   	leave  
   1e123:	c3                   	ret    

0001e124 <fl_remove>:
fl_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1424
//-----------------------------------------------------------------------------
// fl_remove: Remove a file from the filesystem
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_remove( const char * filename )
{
   1e124:	55                   	push   ebp
   1e125:	89 e5                	mov    ebp,esp
   1e127:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1426
    FL_FILE* file;
    int res = -1;
   1e12a:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1428

    FL_LOCK(&_fs);
   1e131:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e136:	85 c0                	test   eax,eax
   1e138:	74 07                	je     1e141 <fl_remove+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1428 (discriminator 1)
   1e13a:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e13f:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1431

    // Use read_file as this will check if the file is already open!
    file = fl_fopen((char*)filename, "r");
   1e141:	83 ec 08             	sub    esp,0x8
   1e144:	68 10 38 08 00       	push   0x83810
   1e149:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e14c:	e8 8c f2 ff ff       	call   1d3dd <fl_fopen>
   1e151:	83 c4 10             	add    esp,0x10
   1e154:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1432
    if (file)
   1e157:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1e15b:	74 54                	je     1e1b1 <fl_remove+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1435
    {
        // Delete allocated space
        if (fatfs_free_cluster_chain(&_fs, file->startcluster))
   1e15d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1e163:	83 ec 08             	sub    esp,0x8
   1e166:	50                   	push   eax
   1e167:	68 a0 e6 09 00       	push   0x9e6a0
   1e16c:	e8 0d 2a 00 00       	call   20b7e <fatfs_free_cluster_chain>
   1e171:	83 c4 10             	add    esp,0x10
   1e174:	85 c0                	test   eax,eax
   1e176:	74 39                	je     1e1b1 <fl_remove+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1438
        {
            // Remove directory entries
            if (fatfs_mark_file_deleted(&_fs, file->parentcluster, (char*)file->shortfilename))
   1e178:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e17b:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1e181:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e184:	8b 00                	mov    eax,DWORD PTR [eax]
   1e186:	83 ec 04             	sub    esp,0x4
   1e189:	52                   	push   edx
   1e18a:	50                   	push   eax
   1e18b:	68 a0 e6 09 00       	push   0x9e6a0
   1e190:	e8 f0 da ff ff       	call   1bc85 <fatfs_mark_file_deleted>
   1e195:	83 c4 10             	add    esp,0x10
   1e198:	85 c0                	test   eax,eax
   1e19a:	74 15                	je     1e1b1 <fl_remove+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1442
            {
                // Close the file handle (this should not write anything to the file
                // as we have not changed the file since opening it!)
                fl_fclose(file);
   1e19c:	83 ec 0c             	sub    esp,0xc
   1e19f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1e1a2:	e8 67 f6 ff ff       	call   1d80e <fl_fclose>
   1e1a7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1444

                res = 0;
   1e1aa:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1449
            }
        }
    }

    FL_UNLOCK(&_fs);
   1e1b1:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e1b6:	85 c0                	test   eax,eax
   1e1b8:	74 07                	je     1e1c1 <fl_remove+0x9d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1449 (discriminator 1)
   1e1ba:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e1bf:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1451

    return res;
   1e1c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1452
}
   1e1c4:	c9                   	leave  
   1e1c5:	c3                   	ret    

0001e1c6 <fl_createdirectory>:
fl_createdirectory():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1459
//-----------------------------------------------------------------------------
// fl_createdirectory: Create a directory based on a path
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_createdirectory(const char *path)
{
   1e1c6:	55                   	push   ebp
   1e1c7:	89 e5                	mov    ebp,esp
   1e1c9:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1463
    int res;

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e1cc:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1e1d1:	85 c0                	test   eax,eax
   1e1d3:	75 05                	jne    1e1da <fl_createdirectory+0x14>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1463 (discriminator 1)
   1e1d5:	e8 dc f0 ff ff       	call   1d2b6 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1465

    FL_LOCK(&_fs);
   1e1da:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e1df:	85 c0                	test   eax,eax
   1e1e1:	74 07                	je     1e1ea <fl_createdirectory+0x24>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1465 (discriminator 1)
   1e1e3:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e1e8:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1466
    res =_create_directory((char*)path);
   1e1ea:	83 ec 0c             	sub    esp,0xc
   1e1ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e1f0:	e8 ec e5 ff ff       	call   1c7e1 <_create_directory>
   1e1f5:	83 c4 10             	add    esp,0x10
   1e1f8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1467
    FL_UNLOCK(&_fs);
   1e1fb:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e200:	85 c0                	test   eax,eax
   1e202:	74 07                	je     1e20b <fl_createdirectory+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1467 (discriminator 1)
   1e204:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e209:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1469

    return res;
   1e20b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1470
}
   1e20e:	c9                   	leave  
   1e20f:	c3                   	ret    

0001e210 <fl_listdirectory>:
fl_listdirectory():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1477
//-----------------------------------------------------------------------------
// fl_listdirectory: List a directory based on a path
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fl_listdirectory(const char *path)
{
   1e210:	55                   	push   ebp
   1e211:	89 e5                	mov    ebp,esp
   1e213:	56                   	push   esi
   1e214:	53                   	push   ebx
   1e215:	81 ec c0 00 00 00    	sub    esp,0xc0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1481
    FL_DIR dirstat;

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e21b:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1e220:	85 c0                	test   eax,eax
   1e222:	75 05                	jne    1e229 <fl_listdirectory+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1481 (discriminator 1)
   1e224:	e8 8d f0 ff ff       	call   1d2b6 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1483

    FAT_PRINTF(("\r\nDirectory %s\r\n", path));
   1e229:	83 ec 08             	sub    esp,0x8
   1e22c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e22f:	68 12 38 08 00       	push   0x83812
   1e234:	e8 7e 8e 00 00       	call   270b7 <printk>
   1e239:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1484
        FL_LOCK(&_fs);
   1e23c:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e241:	85 c0                	test   eax,eax
   1e243:	74 07                	je     1e24c <fl_listdirectory+0x3c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1484 (discriminator 1)
   1e245:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e24a:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1487


        if (fl_opendir(path, &dirstat))
   1e24c:	83 ec 08             	sub    esp,0x8
   1e24f:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e252:	50                   	push   eax
   1e253:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e256:	e8 ed 00 00 00       	call   1e348 <fl_opendir>
   1e25b:	83 c4 10             	add    esp,0x10
   1e25e:	85 c0                	test   eax,eax
   1e260:	0f 84 ca 00 00 00    	je     1e330 <fl_listdirectory+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1491
    {
        struct fs_dir_ent dirent;

        while (fl_readdir(&dirstat, &dirent) == 0)
   1e266:	e9 98 00 00 00       	jmp    1e303 <fl_listdirectory+0xf3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1495
        {
#if FATFS_INC_TIME_DATE_SUPPORT
            int d,m,y,h,mn,s;
            fatfs_convert_from_fat_time(dirent.write_time, &h,&m,&s);
   1e26b:	0f b7 45 ca          	movzx  eax,WORD PTR [ebp-0x36]
   1e26f:	0f b7 c0             	movzx  eax,ax
   1e272:	8d 55 d4             	lea    edx,[ebp-0x2c]
   1e275:	52                   	push   edx
   1e276:	8d 55 e4             	lea    edx,[ebp-0x1c]
   1e279:	52                   	push   edx
   1e27a:	8d 55 dc             	lea    edx,[ebp-0x24]
   1e27d:	52                   	push   edx
   1e27e:	50                   	push   eax
   1e27f:	e8 07 18 00 00       	call   1fa8b <fatfs_convert_from_fat_time>
   1e284:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1496
            fatfs_convert_from_fat_date(dirent.write_date, &d,&mn,&y);
   1e287:	0f b7 45 cc          	movzx  eax,WORD PTR [ebp-0x34]
   1e28b:	0f b7 c0             	movzx  eax,ax
   1e28e:	8d 55 e0             	lea    edx,[ebp-0x20]
   1e291:	52                   	push   edx
   1e292:	8d 55 d8             	lea    edx,[ebp-0x28]
   1e295:	52                   	push   edx
   1e296:	8d 55 e8             	lea    edx,[ebp-0x18]
   1e299:	52                   	push   edx
   1e29a:	50                   	push   eax
   1e29b:	e8 40 18 00 00       	call   1fae0 <fatfs_convert_from_fat_date>
   1e2a0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1497
            FAT_PRINTF(("%02d/%02d/%04d  %02d:%02d      ", mn,d,y,h,m));
   1e2a3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
   1e2a6:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
   1e2a9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1e2ac:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1e2af:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1e2b2:	83 ec 08             	sub    esp,0x8
   1e2b5:	56                   	push   esi
   1e2b6:	53                   	push   ebx
   1e2b7:	51                   	push   ecx
   1e2b8:	52                   	push   edx
   1e2b9:	50                   	push   eax
   1e2ba:	68 24 38 08 00       	push   0x83824
   1e2bf:	e8 f3 8d 00 00       	call   270b7 <printk>
   1e2c4:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1500
#endif

            if (dirent.is_dir)
   1e2c7:	0f b6 45 bc          	movzx  eax,BYTE PTR [ebp-0x44]
   1e2cb:	84 c0                	test   al,al
   1e2cd:	74 19                	je     1e2e8 <fl_listdirectory+0xd8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1502
            {
                FAT_PRINTF(("%s <DIR>\r\n", dirent.filename));
   1e2cf:	83 ec 08             	sub    esp,0x8
   1e2d2:	8d 85 3c ff ff ff    	lea    eax,[ebp-0xc4]
   1e2d8:	50                   	push   eax
   1e2d9:	68 44 38 08 00       	push   0x83844
   1e2de:	e8 d4 8d 00 00       	call   270b7 <printk>
   1e2e3:	83 c4 10             	add    esp,0x10
   1e2e6:	eb 1b                	jmp    1e303 <fl_listdirectory+0xf3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1506
            }
            else
            {
                FAT_PRINTF(("%s [%d bytes]\r\n", dirent.filename, dirent.size));
   1e2e8:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
   1e2eb:	83 ec 04             	sub    esp,0x4
   1e2ee:	50                   	push   eax
   1e2ef:	8d 85 3c ff ff ff    	lea    eax,[ebp-0xc4]
   1e2f5:	50                   	push   eax
   1e2f6:	68 4f 38 08 00       	push   0x8384f
   1e2fb:	e8 b7 8d 00 00       	call   270b7 <printk>
   1e300:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1491

        if (fl_opendir(path, &dirstat))
    {
        struct fs_dir_ent dirent;

        while (fl_readdir(&dirstat, &dirent) == 0)
   1e303:	83 ec 08             	sub    esp,0x8
   1e306:	8d 85 3c ff ff ff    	lea    eax,[ebp-0xc4]
   1e30c:	50                   	push   eax
   1e30d:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e310:	50                   	push   eax
   1e311:	e8 e9 00 00 00       	call   1e3ff <fl_readdir>
   1e316:	83 c4 10             	add    esp,0x10
   1e319:	85 c0                	test   eax,eax
   1e31b:	0f 84 4a ff ff ff    	je     1e26b <fl_listdirectory+0x5b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1510
            {
                FAT_PRINTF(("%s [%d bytes]\r\n", dirent.filename, dirent.size));
            }
        }

        fl_closedir(&dirstat);
   1e321:	83 ec 0c             	sub    esp,0xc
   1e324:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e327:	50                   	push   eax
   1e328:	e8 3a 01 00 00       	call   1e467 <fl_closedir>
   1e32d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1513
    }

    FL_UNLOCK(&_fs);
   1e330:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e335:	85 c0                	test   eax,eax
   1e337:	74 07                	je     1e340 <fl_listdirectory+0x130>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1513 (discriminator 1)
   1e339:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e33e:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1514
}
   1e340:	90                   	nop
   1e341:	8d 65 f8             	lea    esp,[ebp-0x8]
   1e344:	5b                   	pop    ebx
   1e345:	5e                   	pop    esi
   1e346:	5d                   	pop    ebp
   1e347:	c3                   	ret    

0001e348 <fl_opendir>:
fl_opendir():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1521
//-----------------------------------------------------------------------------
// fl_opendir: Opens a directory for listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
FL_DIR* fl_opendir(const char* path, FL_DIR *dir)
{
   1e348:	55                   	push   ebp
   1e349:	89 e5                	mov    ebp,esp
   1e34b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1523
    int levels;
    int res = 1;
   1e34e:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1524
    uint32 cluster = FAT32_INVALID_CLUSTER;
   1e355:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1527

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e35c:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1e361:	85 c0                	test   eax,eax
   1e363:	75 05                	jne    1e36a <fl_opendir+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1527 (discriminator 1)
   1e365:	e8 4c ef ff ff       	call   1d2b6 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1529

    FL_LOCK(&_fs);
   1e36a:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e36f:	85 c0                	test   eax,eax
   1e371:	74 07                	je     1e37a <fl_opendir+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1529 (discriminator 1)
   1e373:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e378:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1531

    levels = fatfs_total_path_levels((char*)path) + 1;
   1e37a:	83 ec 0c             	sub    esp,0xc
   1e37d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e380:	e8 5b 18 00 00       	call   1fbe0 <fatfs_total_path_levels>
   1e385:	83 c4 10             	add    esp,0x10
   1e388:	83 c0 01             	add    eax,0x1
   1e38b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1534

    // If path is in the root dir
    if (levels == 0)
   1e38e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1e392:	75 15                	jne    1e3a9 <fl_opendir+0x61>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1535
        cluster = fatfs_get_root_cluster(&_fs);
   1e394:	83 ec 0c             	sub    esp,0xc
   1e397:	68 a0 e6 09 00       	push   0x9e6a0
   1e39c:	e8 18 d3 ff ff       	call   1b6b9 <fatfs_get_root_cluster>
   1e3a1:	83 c4 10             	add    esp,0x10
   1e3a4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
   1e3a7:	eb 15                	jmp    1e3be <fl_opendir+0x76>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1538
    // Find parent directory start cluster
    else
        res = _open_directory((char*)path, &cluster);
   1e3a9:	83 ec 08             	sub    esp,0x8
   1e3ac:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e3af:	50                   	push   eax
   1e3b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e3b3:	e8 3f e3 ff ff       	call   1c6f7 <_open_directory>
   1e3b8:	83 c4 10             	add    esp,0x10
   1e3bb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1540

    if (res)
   1e3be:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1e3c2:	74 17                	je     1e3db <fl_opendir+0x93>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1541
        fatfs_list_directory_start(&_fs, dir, cluster);
   1e3c4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e3c7:	83 ec 04             	sub    esp,0x4
   1e3ca:	50                   	push   eax
   1e3cb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e3ce:	68 a0 e6 09 00       	push   0x9e6a0
   1e3d3:	e8 eb d9 ff ff       	call   1bdc3 <fatfs_list_directory_start>
   1e3d8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1543

    FL_UNLOCK(&_fs);
   1e3db:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e3e0:	85 c0                	test   eax,eax
   1e3e2:	74 07                	je     1e3eb <fl_opendir+0xa3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1543 (discriminator 1)
   1e3e4:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e3e9:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1545

    return cluster != FAT32_INVALID_CLUSTER ? dir : 0;
   1e3eb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e3ee:	83 f8 ff             	cmp    eax,0xffffffff
   1e3f1:	74 05                	je     1e3f8 <fl_opendir+0xb0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1545 (discriminator 1)
   1e3f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e3f6:	eb 05                	jmp    1e3fd <fl_opendir+0xb5>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1545 (discriminator 2)
   1e3f8:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1546
}
   1e3fd:	c9                   	leave  
   1e3fe:	c3                   	ret    

0001e3ff <fl_readdir>:
fl_readdir():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1553
//-----------------------------------------------------------------------------
// fl_readdir: Get next item in directory
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_readdir(FL_DIR *dirls, fl_dirent *entry)
{
   1e3ff:	55                   	push   ebp
   1e400:	89 e5                	mov    ebp,esp
   1e402:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1554
    int res = 0;
   1e405:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1557

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e40c:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1e411:	85 c0                	test   eax,eax
   1e413:	75 05                	jne    1e41a <fl_readdir+0x1b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1557 (discriminator 1)
   1e415:	e8 9c ee ff ff       	call   1d2b6 <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1559

    FL_LOCK(&_fs);
   1e41a:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e41f:	85 c0                	test   eax,eax
   1e421:	74 07                	je     1e42a <fl_readdir+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1559 (discriminator 1)
   1e423:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e428:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1561

    res = fatfs_list_directory_next(&_fs, dirls, entry);
   1e42a:	83 ec 04             	sub    esp,0x4
   1e42d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e430:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e433:	68 a0 e6 09 00       	push   0x9e6a0
   1e438:	e8 a5 d9 ff ff       	call   1bde2 <fatfs_list_directory_next>
   1e43d:	83 c4 10             	add    esp,0x10
   1e440:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1563

    FL_UNLOCK(&_fs);
   1e443:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e448:	85 c0                	test   eax,eax
   1e44a:	74 07                	je     1e453 <fl_readdir+0x54>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1563 (discriminator 1)
   1e44c:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e451:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1565

    return res ? 0 : -1;
   1e453:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1e457:	74 07                	je     1e460 <fl_readdir+0x61>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1565 (discriminator 1)
   1e459:	b8 00 00 00 00       	mov    eax,0x0
   1e45e:	eb 05                	jmp    1e465 <fl_readdir+0x66>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1565 (discriminator 2)
   1e460:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1566 (discriminator 5)
}
   1e465:	c9                   	leave  
   1e466:	c3                   	ret    

0001e467 <fl_closedir>:
fl_closedir():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1573
//-----------------------------------------------------------------------------
// fl_closedir: Close directory after listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_closedir(FL_DIR* dir)
{
   1e467:	55                   	push   ebp
   1e468:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1575
    // Not used
    return 0;
   1e46a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1576
}
   1e46f:	5d                   	pop    ebp
   1e470:	c3                   	ret    

0001e471 <fl_is_dir>:
fl_is_dir():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1583
//-----------------------------------------------------------------------------
// fl_is_dir: Is this a directory?
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_is_dir(const char *path)
{
   1e471:	55                   	push   ebp
   1e472:	89 e5                	mov    ebp,esp
   1e474:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1584
    int res = 0;
   1e477:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1587
    FL_DIR dir;

    if (fl_opendir(path, &dir))
   1e47e:	83 ec 08             	sub    esp,0x8
   1e481:	8d 45 e8             	lea    eax,[ebp-0x18]
   1e484:	50                   	push   eax
   1e485:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e488:	e8 bb fe ff ff       	call   1e348 <fl_opendir>
   1e48d:	83 c4 10             	add    esp,0x10
   1e490:	85 c0                	test   eax,eax
   1e492:	74 16                	je     1e4aa <fl_is_dir+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1589
    {
        res = 1;
   1e494:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1590
        fl_closedir(&dir);
   1e49b:	83 ec 0c             	sub    esp,0xc
   1e49e:	8d 45 e8             	lea    eax,[ebp-0x18]
   1e4a1:	50                   	push   eax
   1e4a2:	e8 c0 ff ff ff       	call   1e467 <fl_closedir>
   1e4a7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1593
    }

    return res;
   1e4aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1594
}
   1e4ad:	c9                   	leave  
   1e4ae:	c3                   	ret    

0001e4af <fl_format>:
fl_format():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1601
//-----------------------------------------------------------------------------
// fl_format: Format a partition with either FAT16 or FAT32 based on size
//-----------------------------------------------------------------------------
#if FATFS_INC_FORMAT_SUPPORT
int fl_format(uint32 volume_sectors, const char *name)
{
   1e4af:	55                   	push   ebp
   1e4b0:	89 e5                	mov    ebp,esp
   1e4b2:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1602
    return fatfs_format(&_fs, volume_sectors, name);
   1e4b5:	83 ec 04             	sub    esp,0x4
   1e4b8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e4bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e4be:	68 a0 e6 09 00       	push   0x9e6a0
   1e4c3:	e8 8a 0b 00 00       	call   1f052 <fatfs_format>
   1e4c8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1603
}
   1e4cb:	c9                   	leave  
   1e4cc:	c3                   	ret    
   1e4cd:	66 90                	xchg   ax,ax
   1e4cf:	90                   	nop

0001e4d0 <fatfs_calc_cluster_size>:
fatfs_calc_cluster_size():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:78

//-----------------------------------------------------------------------------
// fatfs_calc_cluster_size: Calculate what cluster size should be used
//-----------------------------------------------------------------------------
static uint8 fatfs_calc_cluster_size(uint32 sectors, int is_fat32)
{
   1e4d0:	55                   	push   ebp
   1e4d1:	89 e5                	mov    ebp,esp
   1e4d3:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:81
    int i;

    if (!is_fat32)
   1e4d6:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1e4da:	75 3a                	jne    1e516 <fatfs_calc_cluster_size+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:83
    {
        for (i=0; _cluster_size_table16[i].sectors_per_cluster != 0;i++)
   1e4dc:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1e4e3:	eb 20                	jmp    1e505 <fatfs_calc_cluster_size+0x35>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:84
            if (sectors <= _cluster_size_table16[i].sectors)
   1e4e5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e4e8:	8b 04 c5 60 d9 02 00 	mov    eax,DWORD PTR [eax*8+0x2d960]
   1e4ef:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1e4f2:	72 0d                	jb     1e501 <fatfs_calc_cluster_size+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:85
                return _cluster_size_table16[i].sectors_per_cluster;
   1e4f4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e4f7:	0f b6 04 c5 64 d9 02 	movzx  eax,BYTE PTR [eax*8+0x2d964]
   1e4fe:	00 
   1e4ff:	eb 52                	jmp    1e553 <fatfs_calc_cluster_size+0x83>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:83 (discriminator 2)
{
    int i;

    if (!is_fat32)
    {
        for (i=0; _cluster_size_table16[i].sectors_per_cluster != 0;i++)
   1e501:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:83 (discriminator 1)
   1e505:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e508:	0f b6 04 c5 64 d9 02 	movzx  eax,BYTE PTR [eax*8+0x2d964]
   1e50f:	00 
   1e510:	84 c0                	test   al,al
   1e512:	75 d1                	jne    1e4e5 <fatfs_calc_cluster_size+0x15>
   1e514:	eb 38                	jmp    1e54e <fatfs_calc_cluster_size+0x7e>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:89
            if (sectors <= _cluster_size_table16[i].sectors)
                return _cluster_size_table16[i].sectors_per_cluster;
    }
    else
    {
        for (i=0; _cluster_size_table32[i].sectors_per_cluster != 0;i++)
   1e516:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1e51d:	eb 20                	jmp    1e53f <fatfs_calc_cluster_size+0x6f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:90
            if (sectors <= _cluster_size_table32[i].sectors)
   1e51f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e522:	8b 04 c5 a0 d9 02 00 	mov    eax,DWORD PTR [eax*8+0x2d9a0]
   1e529:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1e52c:	72 0d                	jb     1e53b <fatfs_calc_cluster_size+0x6b>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:91
                return _cluster_size_table32[i].sectors_per_cluster;
   1e52e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e531:	0f b6 04 c5 a4 d9 02 	movzx  eax,BYTE PTR [eax*8+0x2d9a4]
   1e538:	00 
   1e539:	eb 18                	jmp    1e553 <fatfs_calc_cluster_size+0x83>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:89 (discriminator 2)
            if (sectors <= _cluster_size_table16[i].sectors)
                return _cluster_size_table16[i].sectors_per_cluster;
    }
    else
    {
        for (i=0; _cluster_size_table32[i].sectors_per_cluster != 0;i++)
   1e53b:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:89 (discriminator 1)
   1e53f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e542:	0f b6 04 c5 a4 d9 02 	movzx  eax,BYTE PTR [eax*8+0x2d9a4]
   1e549:	00 
   1e54a:	84 c0                	test   al,al
   1e54c:	75 d1                	jne    1e51f <fatfs_calc_cluster_size+0x4f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:94
            if (sectors <= _cluster_size_table32[i].sectors)
                return _cluster_size_table32[i].sectors_per_cluster;
    }

    return 0;
   1e54e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:95
}
   1e553:	c9                   	leave  
   1e554:	c3                   	ret    

0001e555 <fatfs_erase_sectors>:
fatfs_erase_sectors():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:100
//-----------------------------------------------------------------------------
// fatfs_erase_sectors: Erase a number of sectors
//-----------------------------------------------------------------------------
static int fatfs_erase_sectors(struct fatfs *fs, uint32 lba, int count)
{
   1e555:	55                   	push   ebp
   1e556:	89 e5                	mov    ebp,esp
   1e558:	53                   	push   ebx
   1e559:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:104
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1e55c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e55f:	83 c0 44             	add    eax,0x44
   1e562:	83 ec 04             	sub    esp,0x4
   1e565:	68 00 02 00 00       	push   0x200
   1e56a:	6a 00                	push   0x0
   1e56c:	50                   	push   eax
   1e56d:	e8 bb 6a 00 00       	call   2502d <memset>
   1e572:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:106

    for (i=0;i<count;i++)
   1e575:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1e57c:	eb 2f                	jmp    1e5ad <fatfs_erase_sectors+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:107
        if (!fs->disk_io.write_media(lba + i, fs->currentsector.sector, 1))
   1e57e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e581:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1e584:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1e587:	8d 4a 44             	lea    ecx,[edx+0x44]
   1e58a:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
   1e58d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1e590:	01 da                	add    edx,ebx
   1e592:	83 ec 04             	sub    esp,0x4
   1e595:	6a 01                	push   0x1
   1e597:	51                   	push   ecx
   1e598:	52                   	push   edx
   1e599:	ff d0                	call   eax
   1e59b:	83 c4 10             	add    esp,0x10
   1e59e:	85 c0                	test   eax,eax
   1e5a0:	75 07                	jne    1e5a9 <fatfs_erase_sectors+0x54>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:108
            return 0;
   1e5a2:	b8 00 00 00 00       	mov    eax,0x0
   1e5a7:	eb 11                	jmp    1e5ba <fatfs_erase_sectors+0x65>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:106 (discriminator 2)
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    for (i=0;i<count;i++)
   1e5a9:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:106 (discriminator 1)
   1e5ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1e5b0:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1e5b3:	7c c9                	jl     1e57e <fatfs_erase_sectors+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:110
        if (!fs->disk_io.write_media(lba + i, fs->currentsector.sector, 1))
            return 0;

    return 1;
   1e5b5:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:111
}
   1e5ba:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1e5bd:	c9                   	leave  
   1e5be:	c3                   	ret    

0001e5bf <fatfs_create_boot_sector>:
fatfs_create_boot_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:116
//-----------------------------------------------------------------------------
// fatfs_create_boot_sector: Create the boot sector
//-----------------------------------------------------------------------------
static int fatfs_create_boot_sector(struct fatfs *fs, uint32 boot_sector_lba, uint32 vol_sectors, const char *name, int is_fat32)
{
   1e5bf:	55                   	push   ebp
   1e5c0:	89 e5                	mov    ebp,esp
   1e5c2:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:121
    uint32 total_clusters;
    int i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1e5c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e5c8:	83 c0 44             	add    eax,0x44
   1e5cb:	83 ec 04             	sub    esp,0x4
   1e5ce:	68 00 02 00 00       	push   0x200
   1e5d3:	6a 00                	push   0x0
   1e5d5:	50                   	push   eax
   1e5d6:	e8 52 6a 00 00       	call   2502d <memset>
   1e5db:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:124

    // OEM Name & Jump Code
    fs->currentsector.sector[0] = 0xEB;
   1e5de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e5e1:	c6 40 44 eb          	mov    BYTE PTR [eax+0x44],0xeb
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:125
    fs->currentsector.sector[1] = 0x3C;
   1e5e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e5e8:	c6 40 45 3c          	mov    BYTE PTR [eax+0x45],0x3c
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:126
    fs->currentsector.sector[2] = 0x90;
   1e5ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e5ef:	c6 40 46 90          	mov    BYTE PTR [eax+0x46],0x90
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:127
    fs->currentsector.sector[3] = 0x4D;
   1e5f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e5f6:	c6 40 47 4d          	mov    BYTE PTR [eax+0x47],0x4d
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:128
    fs->currentsector.sector[4] = 0x53;
   1e5fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e5fd:	c6 40 48 53          	mov    BYTE PTR [eax+0x48],0x53
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:129
    fs->currentsector.sector[5] = 0x44;
   1e601:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e604:	c6 40 49 44          	mov    BYTE PTR [eax+0x49],0x44
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:130
    fs->currentsector.sector[6] = 0x4F;
   1e608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e60b:	c6 40 4a 4f          	mov    BYTE PTR [eax+0x4a],0x4f
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:131
    fs->currentsector.sector[7] = 0x53;
   1e60f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e612:	c6 40 4b 53          	mov    BYTE PTR [eax+0x4b],0x53
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:132
    fs->currentsector.sector[8] = 0x35;
   1e616:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e619:	c6 40 4c 35          	mov    BYTE PTR [eax+0x4c],0x35
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:133
    fs->currentsector.sector[9] = 0x2E;
   1e61d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e620:	c6 40 4d 2e          	mov    BYTE PTR [eax+0x4d],0x2e
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:134
    fs->currentsector.sector[10] = 0x30;
   1e624:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e627:	c6 40 4e 30          	mov    BYTE PTR [eax+0x4e],0x30
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:137

    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
   1e62b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e62e:	c6 40 4f 00          	mov    BYTE PTR [eax+0x4f],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:138
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;
   1e632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e635:	c6 40 50 02          	mov    BYTE PTR [eax+0x50],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:141

    // Get sectors per cluster size for the disk
    fs->sectors_per_cluster = fatfs_calc_cluster_size(vol_sectors, is_fat32);
   1e639:	83 ec 08             	sub    esp,0x8
   1e63c:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   1e63f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1e642:	e8 89 fe ff ff       	call   1e4d0 <fatfs_calc_cluster_size>
   1e647:	83 c4 10             	add    esp,0x10
   1e64a:	89 c2                	mov    edx,eax
   1e64c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e64f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:142
    if (!fs->sectors_per_cluster)
   1e651:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e654:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1e657:	84 c0                	test   al,al
   1e659:	75 0a                	jne    1e665 <fatfs_create_boot_sector+0xa6>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:143
        return 0; // Invalid disk size
   1e65b:	b8 00 00 00 00       	mov    eax,0x0
   1e660:	e9 dc 04 00 00       	jmp    1eb41 <fatfs_create_boot_sector+0x582>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:146

    // Sectors per cluster
    fs->currentsector.sector[13] = fs->sectors_per_cluster;
   1e665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e668:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   1e66b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e66e:	88 50 51             	mov    BYTE PTR [eax+0x51],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:149

    // Reserved Sectors
    if (!is_fat32)
   1e671:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1e675:	75 0b                	jne    1e682 <fatfs_create_boot_sector+0xc3>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:150
        fs->reserved_sectors = 8;
   1e677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e67a:	66 c7 40 2a 08 00    	mov    WORD PTR [eax+0x2a],0x8
   1e680:	eb 09                	jmp    1e68b <fatfs_create_boot_sector+0xcc>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:152
    else
        fs->reserved_sectors = 32;
   1e682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e685:	66 c7 40 2a 20 00    	mov    WORD PTR [eax+0x2a],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:153
    fs->currentsector.sector[14] = (fs->reserved_sectors >> 0) & 0xFF;
   1e68b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e68e:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1e692:	89 c2                	mov    edx,eax
   1e694:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e697:	88 50 52             	mov    BYTE PTR [eax+0x52],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:154
    fs->currentsector.sector[15] = (fs->reserved_sectors >> 8) & 0xFF;
   1e69a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e69d:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1e6a1:	66 c1 e8 08          	shr    ax,0x8
   1e6a5:	89 c2                	mov    edx,eax
   1e6a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6aa:	88 50 53             	mov    BYTE PTR [eax+0x53],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:157

    // Number of FATS
    fs->num_of_fats = 2;
   1e6ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6b0:	c6 40 2c 02          	mov    BYTE PTR [eax+0x2c],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:158
    fs->currentsector.sector[16] = fs->num_of_fats;
   1e6b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6b7:	0f b6 50 2c          	movzx  edx,BYTE PTR [eax+0x2c]
   1e6bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6be:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:161

    // Max entries in root dir (FAT16 only)
    if (!is_fat32)
   1e6c1:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1e6c5:	75 2d                	jne    1e6f4 <fatfs_create_boot_sector+0x135>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:163
    {
        fs->root_entry_count = 512;
   1e6c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6ca:	66 c7 40 28 00 02    	mov    WORD PTR [eax+0x28],0x200
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:164
        fs->currentsector.sector[17] = (fs->root_entry_count >> 0) & 0xFF;
   1e6d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6d3:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1e6d7:	89 c2                	mov    edx,eax
   1e6d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6dc:	88 50 55             	mov    BYTE PTR [eax+0x55],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:165
        fs->currentsector.sector[18] = (fs->root_entry_count >> 8) & 0xFF;
   1e6df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6e2:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1e6e6:	66 c1 e8 08          	shr    ax,0x8
   1e6ea:	89 c2                	mov    edx,eax
   1e6ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6ef:	88 50 56             	mov    BYTE PTR [eax+0x56],dl
   1e6f2:	eb 17                	jmp    1e70b <fatfs_create_boot_sector+0x14c>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:169
    }
    else
    {
        fs->root_entry_count = 0;
   1e6f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6f7:	66 c7 40 28 00 00    	mov    WORD PTR [eax+0x28],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:170
        fs->currentsector.sector[17] = 0;
   1e6fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e700:	c6 40 55 00          	mov    BYTE PTR [eax+0x55],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:171
        fs->currentsector.sector[18] = 0;
   1e704:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e707:	c6 40 56 00          	mov    BYTE PTR [eax+0x56],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:175
    }

    // [FAT16] Total sectors (use FAT32 count instead)
    fs->currentsector.sector[19] = 0x00;
   1e70b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e70e:	c6 40 57 00          	mov    BYTE PTR [eax+0x57],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:176
    fs->currentsector.sector[20] = 0x00;
   1e712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e715:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:179

    // Media type
    fs->currentsector.sector[21] = 0xF8;
   1e719:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e71c:	c6 40 59 f8          	mov    BYTE PTR [eax+0x59],0xf8
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:183


    // FAT16 BS Details
    if (!is_fat32)
   1e720:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1e724:	0f 85 8c 01 00 00    	jne    1e8b6 <fatfs_create_boot_sector+0x2f7>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:186
    {
        // Count of sectors used by the FAT table (FAT16 only)
        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
   1e72a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e72d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1e730:	0f b6 c8             	movzx  ecx,al
   1e733:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e736:	ba 00 00 00 00       	mov    edx,0x0
   1e73b:	f7 f1                	div    ecx
   1e73d:	83 c0 01             	add    eax,0x1
   1e740:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:187
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/2)) + 1;
   1e743:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e746:	c1 e8 08             	shr    eax,0x8
   1e749:	8d 50 01             	lea    edx,[eax+0x1]
   1e74c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e74f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:188
        fs->currentsector.sector[22] = (uint8)((fs->fat_sectors >> 0) & 0xFF);
   1e752:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e755:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1e758:	89 c2                	mov    edx,eax
   1e75a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e75d:	88 50 5a             	mov    BYTE PTR [eax+0x5a],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:189
        fs->currentsector.sector[23] = (uint8)((fs->fat_sectors >> 8) & 0xFF);
   1e760:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e763:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1e766:	c1 e8 08             	shr    eax,0x8
   1e769:	89 c2                	mov    edx,eax
   1e76b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e76e:	88 50 5b             	mov    BYTE PTR [eax+0x5b],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:192

        // Sectors per track
        fs->currentsector.sector[24] = 0x00;
   1e771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e774:	c6 40 5c 00          	mov    BYTE PTR [eax+0x5c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:193
        fs->currentsector.sector[25] = 0x00;
   1e778:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e77b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:196

        // Heads
        fs->currentsector.sector[26] = 0x00;
   1e77f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e782:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:197
        fs->currentsector.sector[27] = 0x00;
   1e786:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e789:	c6 40 5f 00          	mov    BYTE PTR [eax+0x5f],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:200

        // Hidden sectors
        fs->currentsector.sector[28] = 0x20;
   1e78d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e790:	c6 40 60 20          	mov    BYTE PTR [eax+0x60],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:201
        fs->currentsector.sector[29] = 0x00;
   1e794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e797:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:202
        fs->currentsector.sector[30] = 0x00;
   1e79b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e79e:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:203
        fs->currentsector.sector[31] = 0x00;
   1e7a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7a5:	c6 40 63 00          	mov    BYTE PTR [eax+0x63],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:206

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
   1e7a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e7ac:	89 c2                	mov    edx,eax
   1e7ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7b1:	88 50 64             	mov    BYTE PTR [eax+0x64],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:207
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
   1e7b4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e7b7:	c1 e8 08             	shr    eax,0x8
   1e7ba:	89 c2                	mov    edx,eax
   1e7bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7bf:	88 50 65             	mov    BYTE PTR [eax+0x65],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:208
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
   1e7c2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e7c5:	c1 e8 10             	shr    eax,0x10
   1e7c8:	89 c2                	mov    edx,eax
   1e7ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7cd:	88 50 66             	mov    BYTE PTR [eax+0x66],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:209
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);
   1e7d0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e7d3:	c1 e8 18             	shr    eax,0x18
   1e7d6:	89 c2                	mov    edx,eax
   1e7d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7db:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:212

        // Drive number
        fs->currentsector.sector[36] = 0x00;
   1e7de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7e1:	c6 40 68 00          	mov    BYTE PTR [eax+0x68],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:215

        // Reserved
        fs->currentsector.sector[37] = 0x00;
   1e7e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7e8:	c6 40 69 00          	mov    BYTE PTR [eax+0x69],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:218

        // Boot signature
        fs->currentsector.sector[38] = 0x29;
   1e7ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7ef:	c6 40 6a 29          	mov    BYTE PTR [eax+0x6a],0x29
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:221

        // Volume ID
        fs->currentsector.sector[39] = 0x12;
   1e7f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7f6:	c6 40 6b 12          	mov    BYTE PTR [eax+0x6b],0x12
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:222
        fs->currentsector.sector[40] = 0x34;
   1e7fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7fd:	c6 40 6c 34          	mov    BYTE PTR [eax+0x6c],0x34
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:223
        fs->currentsector.sector[41] = 0x56;
   1e801:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e804:	c6 40 6d 56          	mov    BYTE PTR [eax+0x6d],0x56
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:224
        fs->currentsector.sector[42] = 0x78;
   1e808:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e80b:	c6 40 6e 78          	mov    BYTE PTR [eax+0x6e],0x78
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:227

        // Volume name
        for (i=0;i<11;i++)
   1e80f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1e816:	eb 41                	jmp    1e859 <fatfs_create_boot_sector+0x29a>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:229
        {
            if (i < (int)strlen(name))
   1e818:	83 ec 0c             	sub    esp,0xc
   1e81b:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1e81e:	e8 65 8a 00 00       	call   27288 <strlen>
   1e823:	83 c4 10             	add    esp,0x10
   1e826:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1e829:	7e 1c                	jle    1e847 <fatfs_create_boot_sector+0x288>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:230
                fs->currentsector.sector[i+43] = name[i];
   1e82b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1e82e:	8d 50 2b             	lea    edx,[eax+0x2b]
   1e831:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1e834:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1e837:	01 c8                	add    eax,ecx
   1e839:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1e83c:	89 c1                	mov    ecx,eax
   1e83e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e841:	88 4c 10 44          	mov    BYTE PTR [eax+edx*1+0x44],cl
   1e845:	eb 0e                	jmp    1e855 <fatfs_create_boot_sector+0x296>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:232
            else
                fs->currentsector.sector[i+43] = ' ';
   1e847:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1e84a:	8d 50 2b             	lea    edx,[eax+0x2b]
   1e84d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e850:	c6 44 10 44 20       	mov    BYTE PTR [eax+edx*1+0x44],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:227 (discriminator 2)
        fs->currentsector.sector[40] = 0x34;
        fs->currentsector.sector[41] = 0x56;
        fs->currentsector.sector[42] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
   1e855:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:227 (discriminator 1)
   1e859:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   1e85d:	7e b9                	jle    1e818 <fatfs_create_boot_sector+0x259>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:236
            else
                fs->currentsector.sector[i+43] = ' ';
        }

        // File sys type
        fs->currentsector.sector[54] = 'F';
   1e85f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e862:	c6 40 7a 46          	mov    BYTE PTR [eax+0x7a],0x46
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:237
        fs->currentsector.sector[55] = 'A';
   1e866:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e869:	c6 40 7b 41          	mov    BYTE PTR [eax+0x7b],0x41
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:238
        fs->currentsector.sector[56] = 'T';
   1e86d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e870:	c6 40 7c 54          	mov    BYTE PTR [eax+0x7c],0x54
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:239
        fs->currentsector.sector[57] = '1';
   1e874:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e877:	c6 40 7d 31          	mov    BYTE PTR [eax+0x7d],0x31
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:240
        fs->currentsector.sector[58] = '6';
   1e87b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e87e:	c6 40 7e 36          	mov    BYTE PTR [eax+0x7e],0x36
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:241
        fs->currentsector.sector[59] = ' ';
   1e882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e885:	c6 40 7f 20          	mov    BYTE PTR [eax+0x7f],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:242
        fs->currentsector.sector[60] = ' ';
   1e889:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e88c:	c6 80 80 00 00 00 20 	mov    BYTE PTR [eax+0x80],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:243
        fs->currentsector.sector[61] = ' ';
   1e893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e896:	c6 80 81 00 00 00 20 	mov    BYTE PTR [eax+0x81],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:246

        // Signature
        fs->currentsector.sector[510] = 0x55;
   1e89d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8a0:	c6 80 42 02 00 00 55 	mov    BYTE PTR [eax+0x242],0x55
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:247
        fs->currentsector.sector[511] = 0xAA;
   1e8a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8aa:	c6 80 43 02 00 00 aa 	mov    BYTE PTR [eax+0x243],0xaa
   1e8b1:	e9 61 02 00 00       	jmp    1eb17 <fatfs_create_boot_sector+0x558>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:253
    }
    // FAT32 BS Details
    else
    {
        // Count of sectors used by the FAT table (FAT16 only)
        fs->currentsector.sector[22] = 0;
   1e8b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8b9:	c6 40 5a 00          	mov    BYTE PTR [eax+0x5a],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:254
        fs->currentsector.sector[23] = 0;
   1e8bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8c0:	c6 40 5b 00          	mov    BYTE PTR [eax+0x5b],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:257

        // Sectors per track (default)
        fs->currentsector.sector[24] = 0x3F;
   1e8c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8c7:	c6 40 5c 3f          	mov    BYTE PTR [eax+0x5c],0x3f
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:258
        fs->currentsector.sector[25] = 0x00;
   1e8cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8ce:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:261

        // Heads (default)
        fs->currentsector.sector[26] = 0xFF;
   1e8d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8d5:	c6 40 5e ff          	mov    BYTE PTR [eax+0x5e],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:262
        fs->currentsector.sector[27] = 0x00;
   1e8d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8dc:	c6 40 5f 00          	mov    BYTE PTR [eax+0x5f],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:265

        // Hidden sectors
        fs->currentsector.sector[28] = 0x00;
   1e8e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8e3:	c6 40 60 00          	mov    BYTE PTR [eax+0x60],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:266
        fs->currentsector.sector[29] = 0x00;
   1e8e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8ea:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:267
        fs->currentsector.sector[30] = 0x00;
   1e8ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8f1:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:268
        fs->currentsector.sector[31] = 0x00;
   1e8f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8f8:	c6 40 63 00          	mov    BYTE PTR [eax+0x63],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:271

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
   1e8fc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e8ff:	89 c2                	mov    edx,eax
   1e901:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e904:	88 50 64             	mov    BYTE PTR [eax+0x64],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:272
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
   1e907:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e90a:	c1 e8 08             	shr    eax,0x8
   1e90d:	89 c2                	mov    edx,eax
   1e90f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e912:	88 50 65             	mov    BYTE PTR [eax+0x65],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:273
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
   1e915:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e918:	c1 e8 10             	shr    eax,0x10
   1e91b:	89 c2                	mov    edx,eax
   1e91d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e920:	88 50 66             	mov    BYTE PTR [eax+0x66],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:274
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);
   1e923:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e926:	c1 e8 18             	shr    eax,0x18
   1e929:	89 c2                	mov    edx,eax
   1e92b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e92e:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:276

        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
   1e931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e934:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1e937:	0f b6 c8             	movzx  ecx,al
   1e93a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e93d:	ba 00 00 00 00       	mov    edx,0x0
   1e942:	f7 f1                	div    ecx
   1e944:	83 c0 01             	add    eax,0x1
   1e947:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:277
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/4)) + 1;
   1e94a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e94d:	c1 e8 07             	shr    eax,0x7
   1e950:	8d 50 01             	lea    edx,[eax+0x1]
   1e953:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e956:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:280

        // BPB_FATSz32
        fs->currentsector.sector[36] = (uint8)((fs->fat_sectors>>0)&0xFF);
   1e959:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e95c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1e95f:	89 c2                	mov    edx,eax
   1e961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e964:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:281
        fs->currentsector.sector[37] = (uint8)((fs->fat_sectors>>8)&0xFF);
   1e967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e96a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1e96d:	c1 e8 08             	shr    eax,0x8
   1e970:	89 c2                	mov    edx,eax
   1e972:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e975:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:282
        fs->currentsector.sector[38] = (uint8)((fs->fat_sectors>>16)&0xFF);
   1e978:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e97b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1e97e:	c1 e8 10             	shr    eax,0x10
   1e981:	89 c2                	mov    edx,eax
   1e983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e986:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:283
        fs->currentsector.sector[39] = (uint8)((fs->fat_sectors>>24)&0xFF);
   1e989:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e98c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1e98f:	c1 e8 18             	shr    eax,0x18
   1e992:	89 c2                	mov    edx,eax
   1e994:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e997:	88 50 6b             	mov    BYTE PTR [eax+0x6b],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:286

        // BPB_ExtFlags
        fs->currentsector.sector[40] = 0;
   1e99a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e99d:	c6 40 6c 00          	mov    BYTE PTR [eax+0x6c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:287
        fs->currentsector.sector[41] = 0;
   1e9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9a4:	c6 40 6d 00          	mov    BYTE PTR [eax+0x6d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:290

        // BPB_FSVer
        fs->currentsector.sector[42] = 0;
   1e9a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9ab:	c6 40 6e 00          	mov    BYTE PTR [eax+0x6e],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:291
        fs->currentsector.sector[43] = 0;
   1e9af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9b2:	c6 40 6f 00          	mov    BYTE PTR [eax+0x6f],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:294

        // BPB_RootClus
        fs->currentsector.sector[44] = (uint8)((fs->rootdir_first_cluster>>0)&0xFF);
   1e9b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9b9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1e9bc:	89 c2                	mov    edx,eax
   1e9be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9c1:	88 50 70             	mov    BYTE PTR [eax+0x70],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:295
        fs->currentsector.sector[45] = (uint8)((fs->rootdir_first_cluster>>8)&0xFF);
   1e9c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1e9ca:	c1 e8 08             	shr    eax,0x8
   1e9cd:	89 c2                	mov    edx,eax
   1e9cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9d2:	88 50 71             	mov    BYTE PTR [eax+0x71],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:296
        fs->currentsector.sector[46] = (uint8)((fs->rootdir_first_cluster>>16)&0xFF);
   1e9d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1e9db:	c1 e8 10             	shr    eax,0x10
   1e9de:	89 c2                	mov    edx,eax
   1e9e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9e3:	88 50 72             	mov    BYTE PTR [eax+0x72],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:297
        fs->currentsector.sector[47] = (uint8)((fs->rootdir_first_cluster>>24)&0xFF);
   1e9e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9e9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1e9ec:	c1 e8 18             	shr    eax,0x18
   1e9ef:	89 c2                	mov    edx,eax
   1e9f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9f4:	88 50 73             	mov    BYTE PTR [eax+0x73],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:300

        // BPB_FSInfo
        fs->currentsector.sector[48] = (uint8)((fs->fs_info_sector>>0)&0xFF);
   1e9f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9fa:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   1e9fe:	89 c2                	mov    edx,eax
   1ea00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea03:	88 50 74             	mov    BYTE PTR [eax+0x74],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:301
        fs->currentsector.sector[49] = (uint8)((fs->fs_info_sector>>8)&0xFF);
   1ea06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea09:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   1ea0d:	66 c1 e8 08          	shr    ax,0x8
   1ea11:	89 c2                	mov    edx,eax
   1ea13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea16:	88 50 75             	mov    BYTE PTR [eax+0x75],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:304

        // BPB_BkBootSec
        fs->currentsector.sector[50] = 6;
   1ea19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea1c:	c6 40 76 06          	mov    BYTE PTR [eax+0x76],0x6
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:305
        fs->currentsector.sector[51] = 0;
   1ea20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea23:	c6 40 77 00          	mov    BYTE PTR [eax+0x77],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:308

        // Drive number
        fs->currentsector.sector[64] = 0x00;
   1ea27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea2a:	c6 80 84 00 00 00 00 	mov    BYTE PTR [eax+0x84],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:311

        // Boot signature
        fs->currentsector.sector[66] = 0x29;
   1ea31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea34:	c6 80 86 00 00 00 29 	mov    BYTE PTR [eax+0x86],0x29
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:314

        // Volume ID
        fs->currentsector.sector[67] = 0x12;
   1ea3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea3e:	c6 80 87 00 00 00 12 	mov    BYTE PTR [eax+0x87],0x12
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:315
        fs->currentsector.sector[68] = 0x34;
   1ea45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea48:	c6 80 88 00 00 00 34 	mov    BYTE PTR [eax+0x88],0x34
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:316
        fs->currentsector.sector[69] = 0x56;
   1ea4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea52:	c6 80 89 00 00 00 56 	mov    BYTE PTR [eax+0x89],0x56
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:317
        fs->currentsector.sector[70] = 0x78;
   1ea59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea5c:	c6 80 8a 00 00 00 78 	mov    BYTE PTR [eax+0x8a],0x78
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:320

        // Volume name
        for (i=0;i<11;i++)
   1ea63:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1ea6a:	eb 41                	jmp    1eaad <fatfs_create_boot_sector+0x4ee>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:322
        {
            if (i < (int)strlen(name))
   1ea6c:	83 ec 0c             	sub    esp,0xc
   1ea6f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1ea72:	e8 11 88 00 00       	call   27288 <strlen>
   1ea77:	83 c4 10             	add    esp,0x10
   1ea7a:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1ea7d:	7e 1c                	jle    1ea9b <fatfs_create_boot_sector+0x4dc>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:323
                fs->currentsector.sector[i+71] = name[i];
   1ea7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ea82:	8d 50 47             	lea    edx,[eax+0x47]
   1ea85:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1ea88:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1ea8b:	01 c8                	add    eax,ecx
   1ea8d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ea90:	89 c1                	mov    ecx,eax
   1ea92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea95:	88 4c 10 44          	mov    BYTE PTR [eax+edx*1+0x44],cl
   1ea99:	eb 0e                	jmp    1eaa9 <fatfs_create_boot_sector+0x4ea>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:325
            else
                fs->currentsector.sector[i+71] = ' ';
   1ea9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ea9e:	8d 50 47             	lea    edx,[eax+0x47]
   1eaa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eaa4:	c6 44 10 44 20       	mov    BYTE PTR [eax+edx*1+0x44],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:320 (discriminator 2)
        fs->currentsector.sector[68] = 0x34;
        fs->currentsector.sector[69] = 0x56;
        fs->currentsector.sector[70] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
   1eaa9:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:320 (discriminator 1)
   1eaad:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   1eab1:	7e b9                	jle    1ea6c <fatfs_create_boot_sector+0x4ad>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:329
            else
                fs->currentsector.sector[i+71] = ' ';
        }

        // File sys type
        fs->currentsector.sector[82] = 'F';
   1eab3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eab6:	c6 80 96 00 00 00 46 	mov    BYTE PTR [eax+0x96],0x46
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:330
        fs->currentsector.sector[83] = 'A';
   1eabd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eac0:	c6 80 97 00 00 00 41 	mov    BYTE PTR [eax+0x97],0x41
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:331
        fs->currentsector.sector[84] = 'T';
   1eac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eaca:	c6 80 98 00 00 00 54 	mov    BYTE PTR [eax+0x98],0x54
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:332
        fs->currentsector.sector[85] = '3';
   1ead1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ead4:	c6 80 99 00 00 00 33 	mov    BYTE PTR [eax+0x99],0x33
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:333
        fs->currentsector.sector[86] = '2';
   1eadb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eade:	c6 80 9a 00 00 00 32 	mov    BYTE PTR [eax+0x9a],0x32
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:334
        fs->currentsector.sector[87] = ' ';
   1eae5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eae8:	c6 80 9b 00 00 00 20 	mov    BYTE PTR [eax+0x9b],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:335
        fs->currentsector.sector[88] = ' ';
   1eaef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eaf2:	c6 80 9c 00 00 00 20 	mov    BYTE PTR [eax+0x9c],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:336
        fs->currentsector.sector[89] = ' ';
   1eaf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eafc:	c6 80 9d 00 00 00 20 	mov    BYTE PTR [eax+0x9d],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:339

        // Signature
        fs->currentsector.sector[510] = 0x55;
   1eb03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb06:	c6 80 42 02 00 00 55 	mov    BYTE PTR [eax+0x242],0x55
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:340
        fs->currentsector.sector[511] = 0xAA;
   1eb0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb10:	c6 80 43 02 00 00 aa 	mov    BYTE PTR [eax+0x243],0xaa
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:343
    }

    if (fs->disk_io.write_media(boot_sector_lba, fs->currentsector.sector, 1))
   1eb17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb1a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1eb1d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1eb20:	83 c2 44             	add    edx,0x44
   1eb23:	83 ec 04             	sub    esp,0x4
   1eb26:	6a 01                	push   0x1
   1eb28:	52                   	push   edx
   1eb29:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1eb2c:	ff d0                	call   eax
   1eb2e:	83 c4 10             	add    esp,0x10
   1eb31:	85 c0                	test   eax,eax
   1eb33:	74 07                	je     1eb3c <fatfs_create_boot_sector+0x57d>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:344
        return 1;
   1eb35:	b8 01 00 00 00       	mov    eax,0x1
   1eb3a:	eb 05                	jmp    1eb41 <fatfs_create_boot_sector+0x582>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:346
    else
        return 0;
   1eb3c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:347
}
   1eb41:	c9                   	leave  
   1eb42:	c3                   	ret    

0001eb43 <fatfs_create_fsinfo_sector>:
fatfs_create_fsinfo_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:352
//-----------------------------------------------------------------------------
// fatfs_create_fsinfo_sector: Create the FSInfo sector (FAT32)
//-----------------------------------------------------------------------------
static int fatfs_create_fsinfo_sector(struct fatfs *fs, uint32 sector_lba)
{
   1eb43:	55                   	push   ebp
   1eb44:	89 e5                	mov    ebp,esp
   1eb46:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:354
    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1eb49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb4c:	83 c0 44             	add    eax,0x44
   1eb4f:	83 ec 04             	sub    esp,0x4
   1eb52:	68 00 02 00 00       	push   0x200
   1eb57:	6a 00                	push   0x0
   1eb59:	50                   	push   eax
   1eb5a:	e8 ce 64 00 00       	call   2502d <memset>
   1eb5f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:357

    // FSI_LeadSig
    fs->currentsector.sector[0] = 0x52;
   1eb62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb65:	c6 40 44 52          	mov    BYTE PTR [eax+0x44],0x52
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:358
    fs->currentsector.sector[1] = 0x52;
   1eb69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb6c:	c6 40 45 52          	mov    BYTE PTR [eax+0x45],0x52
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:359
    fs->currentsector.sector[2] = 0x61;
   1eb70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb73:	c6 40 46 61          	mov    BYTE PTR [eax+0x46],0x61
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:360
    fs->currentsector.sector[3] = 0x41;
   1eb77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb7a:	c6 40 47 41          	mov    BYTE PTR [eax+0x47],0x41
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:363

    // FSI_StrucSig
    fs->currentsector.sector[484] = 0x72;
   1eb7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb81:	c6 80 28 02 00 00 72 	mov    BYTE PTR [eax+0x228],0x72
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:364
    fs->currentsector.sector[485] = 0x72;
   1eb88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb8b:	c6 80 29 02 00 00 72 	mov    BYTE PTR [eax+0x229],0x72
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:365
    fs->currentsector.sector[486] = 0x41;
   1eb92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb95:	c6 80 2a 02 00 00 41 	mov    BYTE PTR [eax+0x22a],0x41
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:366
    fs->currentsector.sector[487] = 0x61;
   1eb9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb9f:	c6 80 2b 02 00 00 61 	mov    BYTE PTR [eax+0x22b],0x61
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:369

    // FSI_Free_Count
    fs->currentsector.sector[488] = 0xFF;
   1eba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eba9:	c6 80 2c 02 00 00 ff 	mov    BYTE PTR [eax+0x22c],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:370
    fs->currentsector.sector[489] = 0xFF;
   1ebb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebb3:	c6 80 2d 02 00 00 ff 	mov    BYTE PTR [eax+0x22d],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:371
    fs->currentsector.sector[490] = 0xFF;
   1ebba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebbd:	c6 80 2e 02 00 00 ff 	mov    BYTE PTR [eax+0x22e],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:372
    fs->currentsector.sector[491] = 0xFF;
   1ebc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebc7:	c6 80 2f 02 00 00 ff 	mov    BYTE PTR [eax+0x22f],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:375

    // FSI_Nxt_Free
    fs->currentsector.sector[492] = 0xFF;
   1ebce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebd1:	c6 80 30 02 00 00 ff 	mov    BYTE PTR [eax+0x230],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:376
    fs->currentsector.sector[493] = 0xFF;
   1ebd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebdb:	c6 80 31 02 00 00 ff 	mov    BYTE PTR [eax+0x231],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:377
    fs->currentsector.sector[494] = 0xFF;
   1ebe2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebe5:	c6 80 32 02 00 00 ff 	mov    BYTE PTR [eax+0x232],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:378
    fs->currentsector.sector[495] = 0xFF;
   1ebec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebef:	c6 80 33 02 00 00 ff 	mov    BYTE PTR [eax+0x233],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:381

    // Signature
    fs->currentsector.sector[510] = 0x55;
   1ebf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebf9:	c6 80 42 02 00 00 55 	mov    BYTE PTR [eax+0x242],0x55
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:382
    fs->currentsector.sector[511] = 0xAA;
   1ec00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec03:	c6 80 43 02 00 00 aa 	mov    BYTE PTR [eax+0x243],0xaa
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:384

    if (fs->disk_io.write_media(sector_lba, fs->currentsector.sector, 1))
   1ec0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec0d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1ec10:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ec13:	83 c2 44             	add    edx,0x44
   1ec16:	83 ec 04             	sub    esp,0x4
   1ec19:	6a 01                	push   0x1
   1ec1b:	52                   	push   edx
   1ec1c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1ec1f:	ff d0                	call   eax
   1ec21:	83 c4 10             	add    esp,0x10
   1ec24:	85 c0                	test   eax,eax
   1ec26:	74 07                	je     1ec2f <fatfs_create_fsinfo_sector+0xec>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:385
        return 1;
   1ec28:	b8 01 00 00 00       	mov    eax,0x1
   1ec2d:	eb 05                	jmp    1ec34 <fatfs_create_fsinfo_sector+0xf1>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:387
    else
        return 0;
   1ec2f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:388
}
   1ec34:	c9                   	leave  
   1ec35:	c3                   	ret    

0001ec36 <fatfs_erase_fat>:
fatfs_erase_fat():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:393
//-----------------------------------------------------------------------------
// fatfs_erase_fat: Erase FAT table using fs details in fs struct
//-----------------------------------------------------------------------------
static int fatfs_erase_fat(struct fatfs *fs, int is_fat32)
{
   1ec36:	55                   	push   ebp
   1ec37:	89 e5                	mov    ebp,esp
   1ec39:	53                   	push   ebx
   1ec3a:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:397
    uint32 i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1ec3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec40:	83 c0 44             	add    eax,0x44
   1ec43:	83 ec 04             	sub    esp,0x4
   1ec46:	68 00 02 00 00       	push   0x200
   1ec4b:	6a 00                	push   0x0
   1ec4d:	50                   	push   eax
   1ec4e:	e8 da 63 00 00       	call   2502d <memset>
   1ec53:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:400

    // Initialise default allocate / reserved clusters
    if (!is_fat32)
   1ec56:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1ec5a:	75 1e                	jne    1ec7a <fatfs_erase_fat+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:402
    {
        SET_16BIT_WORD(fs->currentsector.sector, 0, 0xFFF8);
   1ec5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec5f:	c6 40 44 f8          	mov    BYTE PTR [eax+0x44],0xf8
   1ec63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec66:	c6 40 45 ff          	mov    BYTE PTR [eax+0x45],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:403
        SET_16BIT_WORD(fs->currentsector.sector, 2, 0xFFFF);
   1ec6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec6d:	c6 40 46 ff          	mov    BYTE PTR [eax+0x46],0xff
   1ec71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec74:	c6 40 47 ff          	mov    BYTE PTR [eax+0x47],0xff
   1ec78:	eb 54                	jmp    1ecce <fatfs_erase_fat+0x98>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:407
    }
    else
    {
        SET_32BIT_WORD(fs->currentsector.sector, 0, 0x0FFFFFF8);
   1ec7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec7d:	c6 40 44 f8          	mov    BYTE PTR [eax+0x44],0xf8
   1ec81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec84:	c6 40 45 ff          	mov    BYTE PTR [eax+0x45],0xff
   1ec88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec8b:	c6 40 46 ff          	mov    BYTE PTR [eax+0x46],0xff
   1ec8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec92:	c6 40 47 0f          	mov    BYTE PTR [eax+0x47],0xf
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:408
        SET_32BIT_WORD(fs->currentsector.sector, 4, 0xFFFFFFFF);
   1ec96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec99:	c6 40 48 ff          	mov    BYTE PTR [eax+0x48],0xff
   1ec9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eca0:	c6 40 49 ff          	mov    BYTE PTR [eax+0x49],0xff
   1eca4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eca7:	c6 40 4a ff          	mov    BYTE PTR [eax+0x4a],0xff
   1ecab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecae:	c6 40 4b ff          	mov    BYTE PTR [eax+0x4b],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:409
        SET_32BIT_WORD(fs->currentsector.sector, 8, 0x0FFFFFFF);
   1ecb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecb5:	c6 40 4c ff          	mov    BYTE PTR [eax+0x4c],0xff
   1ecb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecbc:	c6 40 4d ff          	mov    BYTE PTR [eax+0x4d],0xff
   1ecc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecc3:	c6 40 4e ff          	mov    BYTE PTR [eax+0x4e],0xff
   1ecc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecca:	c6 40 4f 0f          	mov    BYTE PTR [eax+0x4f],0xf
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:412
    }

    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
   1ecce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecd1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1ecd4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ecd7:	8d 4a 44             	lea    ecx,[edx+0x44]
   1ecda:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ecdd:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
   1ece0:	83 ec 04             	sub    esp,0x4
   1ece3:	6a 01                	push   0x1
   1ece5:	51                   	push   ecx
   1ece6:	52                   	push   edx
   1ece7:	ff d0                	call   eax
   1ece9:	83 c4 10             	add    esp,0x10
   1ecec:	85 c0                	test   eax,eax
   1ecee:	75 07                	jne    1ecf7 <fatfs_erase_fat+0xc1>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:413
        return 0;
   1ecf0:	b8 00 00 00 00       	mov    eax,0x0
   1ecf5:	eb 71                	jmp    1ed68 <fatfs_erase_fat+0x132>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:416

    // Zero remaining FAT sectors
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1ecf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecfa:	83 c0 44             	add    eax,0x44
   1ecfd:	83 ec 04             	sub    esp,0x4
   1ed00:	68 00 02 00 00       	push   0x200
   1ed05:	6a 00                	push   0x0
   1ed07:	50                   	push   eax
   1ed08:	e8 20 63 00 00       	call   2502d <memset>
   1ed0d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:417
    for (i=1;i<fs->fat_sectors*fs->num_of_fats;i++)
   1ed10:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
   1ed17:	eb 32                	jmp    1ed4b <fatfs_erase_fat+0x115>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:418
        if (!fs->disk_io.write_media(fs->fat_begin_lba + i, fs->currentsector.sector, 1))
   1ed19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed1c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1ed1f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ed22:	8d 4a 44             	lea    ecx,[edx+0x44]
   1ed25:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ed28:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
   1ed2b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1ed2e:	01 da                	add    edx,ebx
   1ed30:	83 ec 04             	sub    esp,0x4
   1ed33:	6a 01                	push   0x1
   1ed35:	51                   	push   ecx
   1ed36:	52                   	push   edx
   1ed37:	ff d0                	call   eax
   1ed39:	83 c4 10             	add    esp,0x10
   1ed3c:	85 c0                	test   eax,eax
   1ed3e:	75 07                	jne    1ed47 <fatfs_erase_fat+0x111>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:419
            return 0;
   1ed40:	b8 00 00 00 00       	mov    eax,0x0
   1ed45:	eb 21                	jmp    1ed68 <fatfs_erase_fat+0x132>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:417 (discriminator 2)
    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
        return 0;

    // Zero remaining FAT sectors
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
    for (i=1;i<fs->fat_sectors*fs->num_of_fats;i++)
   1ed47:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:417 (discriminator 1)
   1ed4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed4e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
   1ed51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed54:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1ed58:	0f b6 c0             	movzx  eax,al
   1ed5b:	0f af c2             	imul   eax,edx
   1ed5e:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1ed61:	77 b6                	ja     1ed19 <fatfs_erase_fat+0xe3>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:421
        if (!fs->disk_io.write_media(fs->fat_begin_lba + i, fs->currentsector.sector, 1))
            return 0;

    return 1;
   1ed63:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:422
}
   1ed68:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1ed6b:	c9                   	leave  
   1ed6c:	c3                   	ret    

0001ed6d <fatfs_format_fat16>:
fatfs_format_fat16():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:427
//-----------------------------------------------------------------------------
// fatfs_format_fat16: Format a FAT16 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat16(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   1ed6d:	55                   	push   ebp
   1ed6e:	89 e5                	mov    ebp,esp
   1ed70:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:428
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
   1ed73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed76:	c7 80 44 02 00 00 ff 	mov    DWORD PTR [eax+0x244],0xffffffff
   1ed7d:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:429
    fs->currentsector.dirty = 0;
   1ed80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed83:	c7 80 48 02 00 00 00 	mov    DWORD PTR [eax+0x248],0x0
   1ed8a:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:431

    fs->next_free_cluster = 0; // Invalid
   1ed8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed90:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:433

    fatfs_fat_init(fs);
   1ed97:	83 ec 0c             	sub    esp,0xc
   1ed9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ed9d:	e8 3e 15 00 00       	call   202e0 <fatfs_fat_init>
   1eda2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:436

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
   1eda5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eda8:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1edab:	85 c0                	test   eax,eax
   1edad:	74 0a                	je     1edb9 <fatfs_format_fat16+0x4c>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:436 (discriminator 1)
   1edaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edb2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1edb5:	85 c0                	test   eax,eax
   1edb7:	75 0a                	jne    1edc3 <fatfs_format_fat16+0x56>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:437
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1edb9:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1edbe:	e9 29 01 00 00       	jmp    1eeec <fatfs_format_fat16+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:440

    // Volume is FAT16
    fs->fat_type = FAT_TYPE_16;
   1edc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edc6:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:443

    // Not valid for FAT16
    fs->fs_info_sector = 0;
   1edcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edd0:	66 c7 40 18 00 00    	mov    WORD PTR [eax+0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:444
    fs->rootdir_first_cluster = 0;
   1edd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edd9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:448

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
   1ede0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ede3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:449
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 0))
   1edea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eded:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   1edf0:	83 ec 0c             	sub    esp,0xc
   1edf3:	6a 00                	push   0x0
   1edf5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1edf8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1edfb:	50                   	push   eax
   1edfc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1edff:	e8 bb f7 ff ff       	call   1e5bf <fatfs_create_boot_sector>
   1ee04:	83 c4 20             	add    esp,0x20
   1ee07:	85 c0                	test   eax,eax
   1ee09:	75 0a                	jne    1ee15 <fatfs_format_fat16+0xa8>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:450
        return 0;
   1ee0b:	b8 00 00 00 00       	mov    eax,0x0
   1ee10:	e9 d7 00 00 00       	jmp    1eeec <fatfs_format_fat16+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:453

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = fs->reserved_sectors + (fs->num_of_fats * fs->fat_sectors);
   1ee15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee18:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1ee1c:	0f b7 d0             	movzx  edx,ax
   1ee1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee22:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1ee26:	0f b6 c8             	movzx  ecx,al
   1ee29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee2c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1ee2f:	0f af c1             	imul   eax,ecx
   1ee32:	01 c2                	add    edx,eax
   1ee34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee37:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:454
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
   1ee3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee3d:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1ee41:	0f b7 c0             	movzx  eax,ax
   1ee44:	c1 e0 05             	shl    eax,0x5
   1ee47:	05 ff 01 00 00       	add    eax,0x1ff
   1ee4c:	8d 90 ff 01 00 00    	lea    edx,[eax+0x1ff]
   1ee52:	85 c0                	test   eax,eax
   1ee54:	0f 48 c2             	cmovs  eax,edx
   1ee57:	c1 f8 09             	sar    eax,0x9
   1ee5a:	89 c2                	mov    edx,eax
   1ee5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee5f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:457

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
   1ee62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee65:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1ee68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee6b:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1ee6f:	0f b7 c0             	movzx  eax,ax
   1ee72:	01 c2                	add    edx,eax
   1ee74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee77:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:460

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);
   1ee7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee7d:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   1ee80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee83:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1ee87:	0f b6 c8             	movzx  ecx,al
   1ee8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee8d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1ee90:	0f af c1             	imul   eax,ecx
   1ee93:	01 c2                	add    edx,eax
   1ee95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee98:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:463

    // Initialise FAT sectors
    if (!fatfs_erase_fat(fs, 0))
   1ee9b:	83 ec 08             	sub    esp,0x8
   1ee9e:	6a 00                	push   0x0
   1eea0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1eea3:	e8 8e fd ff ff       	call   1ec36 <fatfs_erase_fat>
   1eea8:	83 c4 10             	add    esp,0x10
   1eeab:	85 c0                	test   eax,eax
   1eead:	75 07                	jne    1eeb6 <fatfs_format_fat16+0x149>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:464
        return 0;
   1eeaf:	b8 00 00 00 00       	mov    eax,0x0
   1eeb4:	eb 36                	jmp    1eeec <fatfs_format_fat16+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:467

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fs->lba_begin + fs->rootdir_first_sector, fs->rootdir_sectors))
   1eeb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eeb9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1eebc:	89 c1                	mov    ecx,eax
   1eebe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eec1:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1eec4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eec7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1eeca:	01 d0                	add    eax,edx
   1eecc:	83 ec 04             	sub    esp,0x4
   1eecf:	51                   	push   ecx
   1eed0:	50                   	push   eax
   1eed1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1eed4:	e8 7c f6 ff ff       	call   1e555 <fatfs_erase_sectors>
   1eed9:	83 c4 10             	add    esp,0x10
   1eedc:	85 c0                	test   eax,eax
   1eede:	75 07                	jne    1eee7 <fatfs_format_fat16+0x17a>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:468
        return 0;
   1eee0:	b8 00 00 00 00       	mov    eax,0x0
   1eee5:	eb 05                	jmp    1eeec <fatfs_format_fat16+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:470

    return 1;
   1eee7:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:471
}
   1eeec:	c9                   	leave  
   1eeed:	c3                   	ret    

0001eeee <fatfs_format_fat32>:
fatfs_format_fat32():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:476
//-----------------------------------------------------------------------------
// fatfs_format_fat32: Format a FAT32 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat32(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   1eeee:	55                   	push   ebp
   1eeef:	89 e5                	mov    ebp,esp
   1eef1:	53                   	push   ebx
   1eef2:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:477
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
   1eef5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eef8:	c7 80 44 02 00 00 ff 	mov    DWORD PTR [eax+0x244],0xffffffff
   1eeff:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:478
    fs->currentsector.dirty = 0;
   1ef02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef05:	c7 80 48 02 00 00 00 	mov    DWORD PTR [eax+0x248],0x0
   1ef0c:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:480

    fs->next_free_cluster = 0; // Invalid
   1ef0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef12:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:482

    fatfs_fat_init(fs);
   1ef19:	83 ec 0c             	sub    esp,0xc
   1ef1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ef1f:	e8 bc 13 00 00       	call   202e0 <fatfs_fat_init>
   1ef24:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:485

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
   1ef27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef2a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1ef2d:	85 c0                	test   eax,eax
   1ef2f:	74 0a                	je     1ef3b <fatfs_format_fat32+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:485 (discriminator 1)
   1ef31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef34:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1ef37:	85 c0                	test   eax,eax
   1ef39:	75 0a                	jne    1ef45 <fatfs_format_fat32+0x57>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:486
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1ef3b:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1ef40:	e9 08 01 00 00       	jmp    1f04d <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:489

    // Volume is FAT32
    fs->fat_type = FAT_TYPE_32;
   1ef45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef48:	c7 40 30 01 00 00 00 	mov    DWORD PTR [eax+0x30],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:492

    // Basic defaults for normal FAT32 partitions
    fs->fs_info_sector = 1;
   1ef4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef52:	66 c7 40 18 01 00    	mov    WORD PTR [eax+0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:493
    fs->rootdir_first_cluster = 2;
   1ef58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef5b:	c7 40 08 02 00 00 00 	mov    DWORD PTR [eax+0x8],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:497

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
   1ef62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef65:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:498
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 1))
   1ef6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef6f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   1ef72:	83 ec 0c             	sub    esp,0xc
   1ef75:	6a 01                	push   0x1
   1ef77:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1ef7a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1ef7d:	50                   	push   eax
   1ef7e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ef81:	e8 39 f6 ff ff       	call   1e5bf <fatfs_create_boot_sector>
   1ef86:	83 c4 20             	add    esp,0x20
   1ef89:	85 c0                	test   eax,eax
   1ef8b:	75 0a                	jne    1ef97 <fatfs_format_fat32+0xa9>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:499
        return 0;
   1ef8d:	b8 00 00 00 00       	mov    eax,0x0
   1ef92:	e9 b6 00 00 00       	jmp    1f04d <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:502

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
   1ef97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef9a:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1ef9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efa0:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1efa4:	0f b7 c0             	movzx  eax,ax
   1efa7:	01 c2                	add    edx,eax
   1efa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efac:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:505

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);
   1efaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efb2:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   1efb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efb8:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1efbc:	0f b6 c8             	movzx  ecx,al
   1efbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efc2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1efc5:	0f af c1             	imul   eax,ecx
   1efc8:	01 c2                	add    edx,eax
   1efca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efcd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:508

    // Initialise FSInfo sector
    if (!fatfs_create_fsinfo_sector(fs, fs->fs_info_sector))
   1efd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efd3:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   1efd7:	0f b7 c0             	movzx  eax,ax
   1efda:	83 ec 08             	sub    esp,0x8
   1efdd:	50                   	push   eax
   1efde:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1efe1:	e8 5d fb ff ff       	call   1eb43 <fatfs_create_fsinfo_sector>
   1efe6:	83 c4 10             	add    esp,0x10
   1efe9:	85 c0                	test   eax,eax
   1efeb:	75 07                	jne    1eff4 <fatfs_format_fat32+0x106>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:509
        return 0;
   1efed:	b8 00 00 00 00       	mov    eax,0x0
   1eff2:	eb 59                	jmp    1f04d <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:512

    // Initialise FAT sectors
    if (!fatfs_erase_fat(fs, 1))
   1eff4:	83 ec 08             	sub    esp,0x8
   1eff7:	6a 01                	push   0x1
   1eff9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1effc:	e8 35 fc ff ff       	call   1ec36 <fatfs_erase_fat>
   1f001:	83 c4 10             	add    esp,0x10
   1f004:	85 c0                	test   eax,eax
   1f006:	75 07                	jne    1f00f <fatfs_format_fat32+0x121>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:513
        return 0;
   1f008:	b8 00 00 00 00       	mov    eax,0x0
   1f00d:	eb 3e                	jmp    1f04d <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:516

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fatfs_lba_of_cluster(fs, fs->rootdir_first_cluster), fs->sectors_per_cluster))
   1f00f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f012:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f015:	0f b6 d8             	movzx  ebx,al
   1f018:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f01b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1f01e:	83 ec 08             	sub    esp,0x8
   1f021:	50                   	push   eax
   1f022:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f025:	e8 d2 c1 ff ff       	call   1b1fc <fatfs_lba_of_cluster>
   1f02a:	83 c4 10             	add    esp,0x10
   1f02d:	83 ec 04             	sub    esp,0x4
   1f030:	53                   	push   ebx
   1f031:	50                   	push   eax
   1f032:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f035:	e8 1b f5 ff ff       	call   1e555 <fatfs_erase_sectors>
   1f03a:	83 c4 10             	add    esp,0x10
   1f03d:	85 c0                	test   eax,eax
   1f03f:	75 07                	jne    1f048 <fatfs_format_fat32+0x15a>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:517
        return 0;
   1f041:	b8 00 00 00 00       	mov    eax,0x0
   1f046:	eb 05                	jmp    1f04d <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:519

    return 1;
   1f048:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:520
}
   1f04d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1f050:	c9                   	leave  
   1f051:	c3                   	ret    

0001f052 <fatfs_format>:
fatfs_format():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:525
//-----------------------------------------------------------------------------
// fatfs_format: Format a partition with either FAT16 or FAT32 based on size
//-----------------------------------------------------------------------------
int fatfs_format(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   1f052:	55                   	push   ebp
   1f053:	89 e5                	mov    ebp,esp
   1f055:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:527
    // 2GB - 32K limit for safe behaviour for FAT16
    if (volume_sectors <= 4194304)
   1f058:	81 7d 0c 00 00 40 00 	cmp    DWORD PTR [ebp+0xc],0x400000
   1f05f:	77 16                	ja     1f077 <fatfs_format+0x25>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:528
        return fatfs_format_fat16(fs, volume_sectors, name);
   1f061:	83 ec 04             	sub    esp,0x4
   1f064:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1f067:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f06a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f06d:	e8 fb fc ff ff       	call   1ed6d <fatfs_format_fat16>
   1f072:	83 c4 10             	add    esp,0x10
   1f075:	eb 14                	jmp    1f08b <fatfs_format+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:530
    else
        return fatfs_format_fat32(fs, volume_sectors, name);
   1f077:	83 ec 04             	sub    esp,0x4
   1f07a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1f07d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f080:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f083:	e8 66 fe ff ff       	call   1eeee <fatfs_format_fat32>
   1f088:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:531
}
   1f08b:	c9                   	leave  
   1f08c:	c3                   	ret    
   1f08d:	66 90                	xchg   ax,ax
   1f08f:	90                   	nop

0001f090 <fatfs_lfn_cache_init>:
fatfs_lfn_cache_init():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:40

//-----------------------------------------------------------------------------
// fatfs_lfn_cache_init: Clear long file name cache
//-----------------------------------------------------------------------------
void fatfs_lfn_cache_init(struct lfn_cache *lfn, int wipeTable)
{
   1f090:	55                   	push   ebp
   1f091:	89 e5                	mov    ebp,esp
   1f093:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:41
    int i = 0;
   1f096:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:43

    lfn->no_of_strings = 0;
   1f09d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0a0:	c6 80 05 01 00 00 00 	mov    BYTE PTR [eax+0x105],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:48

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
   1f0a7:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1f0ab:	74 36                	je     1f0e3 <fatfs_lfn_cache_init+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:49
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
   1f0ad:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1f0b4:	eb 27                	jmp    1f0dd <fatfs_lfn_cache_init+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:50 (discriminator 3)
            memset(lfn->String[i], 0x00, MAX_LFN_ENTRY_LENGTH);
   1f0b6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f0b9:	89 d0                	mov    eax,edx
   1f0bb:	01 c0                	add    eax,eax
   1f0bd:	01 d0                	add    eax,edx
   1f0bf:	c1 e0 02             	shl    eax,0x2
   1f0c2:	01 d0                	add    eax,edx
   1f0c4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f0c7:	01 d0                	add    eax,edx
   1f0c9:	83 ec 04             	sub    esp,0x4
   1f0cc:	6a 0d                	push   0xd
   1f0ce:	6a 00                	push   0x0
   1f0d0:	50                   	push   eax
   1f0d1:	e8 57 5f 00 00       	call   2502d <memset>
   1f0d6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:49 (discriminator 3)

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
   1f0d9:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:49 (discriminator 1)
   1f0dd:	83 7d f4 13          	cmp    DWORD PTR [ebp-0xc],0x13
   1f0e1:	7e d3                	jle    1f0b6 <fatfs_lfn_cache_init+0x26>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:52
            memset(lfn->String[i], 0x00, MAX_LFN_ENTRY_LENGTH);
#endif
}
   1f0e3:	90                   	nop
   1f0e4:	c9                   	leave  
   1f0e5:	c3                   	ret    

0001f0e6 <fatfs_lfn_cache_entry>:
fatfs_lfn_cache_entry():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:59
// fatfs_lfn_cache_entry - Function extracts long file name text from sector
// at a specific offset
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_lfn_cache_entry(struct lfn_cache *lfn, uint8 *entryBuffer)
{
   1f0e6:	55                   	push   ebp
   1f0e7:	89 e5                	mov    ebp,esp
   1f0e9:	53                   	push   ebx
   1f0ea:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:61
    uint8 LFNIndex, i;
    LFNIndex = entryBuffer[0] & 0x1F;
   1f0ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f0f0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f0f3:	83 e0 1f             	and    eax,0x1f
   1f0f6:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:64

    // Limit file name to cache size!
    if (LFNIndex > MAX_LONGFILENAME_ENTRIES)
   1f0f9:	80 7d fa 14          	cmp    BYTE PTR [ebp-0x6],0x14
   1f0fd:	0f 87 45 02 00 00    	ja     1f348 <fatfs_lfn_cache_entry+0x262>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:68
        return ;

    // This is an error condition
    if (LFNIndex == 0)
   1f103:	80 7d fa 00          	cmp    BYTE PTR [ebp-0x6],0x0
   1f107:	0f 84 3e 02 00 00    	je     1f34b <fatfs_lfn_cache_entry+0x265>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:71
        return ;

    if (lfn->no_of_strings == 0)
   1f10d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f110:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f117:	84 c0                	test   al,al
   1f119:	75 0d                	jne    1f128 <fatfs_lfn_cache_entry+0x42>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:72
        lfn->no_of_strings = LFNIndex;
   1f11b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f11e:	0f b6 55 fa          	movzx  edx,BYTE PTR [ebp-0x6]
   1f122:	88 90 05 01 00 00    	mov    BYTE PTR [eax+0x105],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:74

    lfn->String[LFNIndex-1][0] = entryBuffer[1];
   1f128:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f12c:	8d 50 ff             	lea    edx,[eax-0x1]
   1f12f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f132:	0f b6 48 01          	movzx  ecx,BYTE PTR [eax+0x1]
   1f136:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f139:	89 d0                	mov    eax,edx
   1f13b:	01 c0                	add    eax,eax
   1f13d:	01 d0                	add    eax,edx
   1f13f:	c1 e0 02             	shl    eax,0x2
   1f142:	01 d0                	add    eax,edx
   1f144:	01 d8                	add    eax,ebx
   1f146:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:75
    lfn->String[LFNIndex-1][1] = entryBuffer[3];
   1f148:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f14c:	8d 50 ff             	lea    edx,[eax-0x1]
   1f14f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f152:	0f b6 48 03          	movzx  ecx,BYTE PTR [eax+0x3]
   1f156:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f159:	89 d0                	mov    eax,edx
   1f15b:	01 c0                	add    eax,eax
   1f15d:	01 d0                	add    eax,edx
   1f15f:	c1 e0 02             	shl    eax,0x2
   1f162:	01 d0                	add    eax,edx
   1f164:	01 d8                	add    eax,ebx
   1f166:	83 c0 01             	add    eax,0x1
   1f169:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:76
    lfn->String[LFNIndex-1][2] = entryBuffer[5];
   1f16b:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f16f:	8d 50 ff             	lea    edx,[eax-0x1]
   1f172:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f175:	0f b6 48 05          	movzx  ecx,BYTE PTR [eax+0x5]
   1f179:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f17c:	89 d0                	mov    eax,edx
   1f17e:	01 c0                	add    eax,eax
   1f180:	01 d0                	add    eax,edx
   1f182:	c1 e0 02             	shl    eax,0x2
   1f185:	01 d0                	add    eax,edx
   1f187:	01 d8                	add    eax,ebx
   1f189:	83 c0 02             	add    eax,0x2
   1f18c:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:77
    lfn->String[LFNIndex-1][3] = entryBuffer[7];
   1f18e:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f192:	8d 50 ff             	lea    edx,[eax-0x1]
   1f195:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f198:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
   1f19c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f19f:	89 d0                	mov    eax,edx
   1f1a1:	01 c0                	add    eax,eax
   1f1a3:	01 d0                	add    eax,edx
   1f1a5:	c1 e0 02             	shl    eax,0x2
   1f1a8:	01 d0                	add    eax,edx
   1f1aa:	01 d8                	add    eax,ebx
   1f1ac:	83 c0 03             	add    eax,0x3
   1f1af:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:78
    lfn->String[LFNIndex-1][4] = entryBuffer[9];
   1f1b1:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f1b5:	8d 50 ff             	lea    edx,[eax-0x1]
   1f1b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f1bb:	0f b6 48 09          	movzx  ecx,BYTE PTR [eax+0x9]
   1f1bf:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f1c2:	89 d0                	mov    eax,edx
   1f1c4:	01 c0                	add    eax,eax
   1f1c6:	01 d0                	add    eax,edx
   1f1c8:	c1 e0 02             	shl    eax,0x2
   1f1cb:	01 d0                	add    eax,edx
   1f1cd:	01 d8                	add    eax,ebx
   1f1cf:	83 c0 04             	add    eax,0x4
   1f1d2:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:79
    lfn->String[LFNIndex-1][5] = entryBuffer[0x0E];
   1f1d4:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f1d8:	8d 50 ff             	lea    edx,[eax-0x1]
   1f1db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f1de:	0f b6 48 0e          	movzx  ecx,BYTE PTR [eax+0xe]
   1f1e2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f1e5:	89 d0                	mov    eax,edx
   1f1e7:	01 c0                	add    eax,eax
   1f1e9:	01 d0                	add    eax,edx
   1f1eb:	c1 e0 02             	shl    eax,0x2
   1f1ee:	01 d0                	add    eax,edx
   1f1f0:	01 d8                	add    eax,ebx
   1f1f2:	83 c0 05             	add    eax,0x5
   1f1f5:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:80
    lfn->String[LFNIndex-1][6] = entryBuffer[0x10];
   1f1f7:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f1fb:	8d 50 ff             	lea    edx,[eax-0x1]
   1f1fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f201:	0f b6 48 10          	movzx  ecx,BYTE PTR [eax+0x10]
   1f205:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f208:	89 d0                	mov    eax,edx
   1f20a:	01 c0                	add    eax,eax
   1f20c:	01 d0                	add    eax,edx
   1f20e:	c1 e0 02             	shl    eax,0x2
   1f211:	01 d0                	add    eax,edx
   1f213:	01 d8                	add    eax,ebx
   1f215:	83 c0 06             	add    eax,0x6
   1f218:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:81
    lfn->String[LFNIndex-1][7] = entryBuffer[0x12];
   1f21a:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f21e:	8d 50 ff             	lea    edx,[eax-0x1]
   1f221:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f224:	0f b6 48 12          	movzx  ecx,BYTE PTR [eax+0x12]
   1f228:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f22b:	89 d0                	mov    eax,edx
   1f22d:	01 c0                	add    eax,eax
   1f22f:	01 d0                	add    eax,edx
   1f231:	c1 e0 02             	shl    eax,0x2
   1f234:	01 d0                	add    eax,edx
   1f236:	01 d8                	add    eax,ebx
   1f238:	83 c0 07             	add    eax,0x7
   1f23b:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:82
    lfn->String[LFNIndex-1][8] = entryBuffer[0x14];
   1f23d:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f241:	8d 50 ff             	lea    edx,[eax-0x1]
   1f244:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f247:	0f b6 48 14          	movzx  ecx,BYTE PTR [eax+0x14]
   1f24b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f24e:	89 d0                	mov    eax,edx
   1f250:	01 c0                	add    eax,eax
   1f252:	01 d0                	add    eax,edx
   1f254:	c1 e0 02             	shl    eax,0x2
   1f257:	01 d0                	add    eax,edx
   1f259:	01 d8                	add    eax,ebx
   1f25b:	83 c0 08             	add    eax,0x8
   1f25e:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:83
    lfn->String[LFNIndex-1][9] = entryBuffer[0x16];
   1f260:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f264:	8d 50 ff             	lea    edx,[eax-0x1]
   1f267:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f26a:	0f b6 48 16          	movzx  ecx,BYTE PTR [eax+0x16]
   1f26e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f271:	89 d0                	mov    eax,edx
   1f273:	01 c0                	add    eax,eax
   1f275:	01 d0                	add    eax,edx
   1f277:	c1 e0 02             	shl    eax,0x2
   1f27a:	01 d0                	add    eax,edx
   1f27c:	01 d8                	add    eax,ebx
   1f27e:	83 c0 09             	add    eax,0x9
   1f281:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:84
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
   1f283:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f287:	8d 50 ff             	lea    edx,[eax-0x1]
   1f28a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f28d:	0f b6 48 18          	movzx  ecx,BYTE PTR [eax+0x18]
   1f291:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f294:	89 d0                	mov    eax,edx
   1f296:	01 c0                	add    eax,eax
   1f298:	01 d0                	add    eax,edx
   1f29a:	c1 e0 02             	shl    eax,0x2
   1f29d:	01 d0                	add    eax,edx
   1f29f:	01 d8                	add    eax,ebx
   1f2a1:	83 c0 0a             	add    eax,0xa
   1f2a4:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:85
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
   1f2a6:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f2aa:	8d 50 ff             	lea    edx,[eax-0x1]
   1f2ad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f2b0:	0f b6 48 1c          	movzx  ecx,BYTE PTR [eax+0x1c]
   1f2b4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f2b7:	89 d0                	mov    eax,edx
   1f2b9:	01 c0                	add    eax,eax
   1f2bb:	01 d0                	add    eax,edx
   1f2bd:	c1 e0 02             	shl    eax,0x2
   1f2c0:	01 d0                	add    eax,edx
   1f2c2:	01 d8                	add    eax,ebx
   1f2c4:	83 c0 0b             	add    eax,0xb
   1f2c7:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:86
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];
   1f2c9:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f2cd:	8d 50 ff             	lea    edx,[eax-0x1]
   1f2d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f2d3:	0f b6 48 1e          	movzx  ecx,BYTE PTR [eax+0x1e]
   1f2d7:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f2da:	89 d0                	mov    eax,edx
   1f2dc:	01 c0                	add    eax,eax
   1f2de:	01 d0                	add    eax,edx
   1f2e0:	c1 e0 02             	shl    eax,0x2
   1f2e3:	01 d0                	add    eax,edx
   1f2e5:	01 d8                	add    eax,ebx
   1f2e7:	83 c0 0c             	add    eax,0xc
   1f2ea:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:88

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
   1f2ec:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
   1f2f0:	eb 4e                	jmp    1f340 <fatfs_lfn_cache_entry+0x25a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:89
        if (lfn->String[LFNIndex-1][i]==0xFF)
   1f2f2:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f2f6:	8d 50 ff             	lea    edx,[eax-0x1]
   1f2f9:	0f b6 4d fb          	movzx  ecx,BYTE PTR [ebp-0x5]
   1f2fd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f300:	89 d0                	mov    eax,edx
   1f302:	01 c0                	add    eax,eax
   1f304:	01 d0                	add    eax,edx
   1f306:	c1 e0 02             	shl    eax,0x2
   1f309:	01 d0                	add    eax,edx
   1f30b:	01 d8                	add    eax,ebx
   1f30d:	01 c8                	add    eax,ecx
   1f30f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f312:	3c ff                	cmp    al,0xff
   1f314:	75 20                	jne    1f336 <fatfs_lfn_cache_entry+0x250>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:90
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
   1f316:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f31a:	8d 50 ff             	lea    edx,[eax-0x1]
   1f31d:	0f b6 4d fb          	movzx  ecx,BYTE PTR [ebp-0x5]
   1f321:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f324:	89 d0                	mov    eax,edx
   1f326:	01 c0                	add    eax,eax
   1f328:	01 d0                	add    eax,edx
   1f32a:	c1 e0 02             	shl    eax,0x2
   1f32d:	01 d0                	add    eax,edx
   1f32f:	01 d8                	add    eax,ebx
   1f331:	01 c8                	add    eax,ecx
   1f333:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:88 (discriminator 2)
    lfn->String[LFNIndex-1][9] = entryBuffer[0x16];
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
   1f336:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   1f33a:	83 c0 01             	add    eax,0x1
   1f33d:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:88 (discriminator 1)
   1f340:	80 7d fb 0c          	cmp    BYTE PTR [ebp-0x5],0xc
   1f344:	76 ac                	jbe    1f2f2 <fatfs_lfn_cache_entry+0x20c>
   1f346:	eb 04                	jmp    1f34c <fatfs_lfn_cache_entry+0x266>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:65
    uint8 LFNIndex, i;
    LFNIndex = entryBuffer[0] & 0x1F;

    // Limit file name to cache size!
    if (LFNIndex > MAX_LONGFILENAME_ENTRIES)
        return ;
   1f348:	90                   	nop
   1f349:	eb 01                	jmp    1f34c <fatfs_lfn_cache_entry+0x266>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:69

    // This is an error condition
    if (LFNIndex == 0)
        return ;
   1f34b:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:91
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF)
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
}
   1f34c:	83 c4 10             	add    esp,0x10
   1f34f:	5b                   	pop    ebx
   1f350:	5d                   	pop    ebp
   1f351:	c3                   	ret    

0001f352 <fatfs_lfn_cache_get>:
fatfs_lfn_cache_get():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:98
//-----------------------------------------------------------------------------
// fatfs_lfn_cache_get: Get a reference to the long filename
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
char* fatfs_lfn_cache_get(struct lfn_cache *lfn)
{
   1f352:	55                   	push   ebp
   1f353:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:100
    // Null terminate long filename
    if (lfn->no_of_strings == MAX_LONGFILENAME_ENTRIES)
   1f355:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f358:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f35f:	3c 14                	cmp    al,0x14
   1f361:	75 0c                	jne    1f36f <fatfs_lfn_cache_get+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:101
        lfn->Null = '\0';
   1f363:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f366:	c6 80 04 01 00 00 00 	mov    BYTE PTR [eax+0x104],0x0
   1f36d:	eb 36                	jmp    1f3a5 <fatfs_lfn_cache_get+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:102
    else if (lfn->no_of_strings)
   1f36f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f372:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f379:	84 c0                	test   al,al
   1f37b:	74 22                	je     1f39f <fatfs_lfn_cache_get+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:103
        lfn->String[lfn->no_of_strings][0] = '\0';
   1f37d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f380:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f387:	0f b6 d0             	movzx  edx,al
   1f38a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   1f38d:	89 d0                	mov    eax,edx
   1f38f:	01 c0                	add    eax,eax
   1f391:	01 d0                	add    eax,edx
   1f393:	c1 e0 02             	shl    eax,0x2
   1f396:	01 d0                	add    eax,edx
   1f398:	01 c8                	add    eax,ecx
   1f39a:	c6 00 00             	mov    BYTE PTR [eax],0x0
   1f39d:	eb 06                	jmp    1f3a5 <fatfs_lfn_cache_get+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:105
    else
        lfn->String[0][0] = '\0';
   1f39f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3a2:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:107

    return (char*)&lfn->String[0][0];
   1f3a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:108
}
   1f3a8:	5d                   	pop    ebp
   1f3a9:	c3                   	ret    

0001f3aa <fatfs_entry_lfn_text>:
fatfs_entry_lfn_text():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:115
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_text: If LFN text entry found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_text(struct fat_dir_entry *entry)
{
   1f3aa:	55                   	push   ebp
   1f3ab:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:116
    if ((entry->Attr & FILE_ATTR_LFN_TEXT) == FILE_ATTR_LFN_TEXT)
   1f3ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3b0:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f3b4:	0f b6 c0             	movzx  eax,al
   1f3b7:	83 e0 0f             	and    eax,0xf
   1f3ba:	83 f8 0f             	cmp    eax,0xf
   1f3bd:	75 07                	jne    1f3c6 <fatfs_entry_lfn_text+0x1c>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:117
        return 1;
   1f3bf:	b8 01 00 00 00       	mov    eax,0x1
   1f3c4:	eb 05                	jmp    1f3cb <fatfs_entry_lfn_text+0x21>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:119
    else
        return 0;
   1f3c6:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:120
}
   1f3cb:	5d                   	pop    ebp
   1f3cc:	c3                   	ret    

0001f3cd <fatfs_entry_lfn_invalid>:
fatfs_entry_lfn_invalid():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:127
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_invalid: If SFN found not relating to LFN
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
   1f3cd:	55                   	push   ebp
   1f3ce:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:128
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
   1f3d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3d3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f3d6:	84 c0                	test   al,al
   1f3d8:	74 26                	je     1f400 <fatfs_entry_lfn_invalid+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:129 (discriminator 1)
         (entry->Name[0]==FILE_HEADER_DELETED)||
   1f3da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3dd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:128 (discriminator 1)
// fatfs_entry_lfn_invalid: If SFN found not relating to LFN
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
   1f3e0:	3c e5                	cmp    al,0xe5
   1f3e2:	74 1c                	je     1f400 <fatfs_entry_lfn_invalid+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:130
         (entry->Name[0]==FILE_HEADER_DELETED)||
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
   1f3e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3e7:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:129
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
         (entry->Name[0]==FILE_HEADER_DELETED)||
   1f3eb:	3c 08                	cmp    al,0x8
   1f3ed:	74 11                	je     1f400 <fatfs_entry_lfn_invalid+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:131
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
         (entry->Attr & FILE_ATTR_SYSHID) )
   1f3ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3f2:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f3f6:	0f b6 c0             	movzx  eax,al
   1f3f9:	83 e0 06             	and    eax,0x6
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:130
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
         (entry->Name[0]==FILE_HEADER_DELETED)||
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
   1f3fc:	85 c0                	test   eax,eax
   1f3fe:	74 07                	je     1f407 <fatfs_entry_lfn_invalid+0x3a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:132
         (entry->Attr & FILE_ATTR_SYSHID) )
        return 1;
   1f400:	b8 01 00 00 00       	mov    eax,0x1
   1f405:	eb 05                	jmp    1f40c <fatfs_entry_lfn_invalid+0x3f>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:134
    else
        return 0;
   1f407:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:135
}
   1f40c:	5d                   	pop    ebp
   1f40d:	c3                   	ret    

0001f40e <fatfs_entry_lfn_exists>:
fatfs_entry_lfn_exists():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:142
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_exists: If LFN exists and correlation SFN found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
   1f40e:	55                   	push   ebp
   1f40f:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:143
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f411:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f414:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f418:	3c 0f                	cmp    al,0xf
   1f41a:	74 45                	je     1f461 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:144 (discriminator 1)
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1f41c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f41f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:143 (discriminator 1)
// fatfs_entry_lfn_exists: If LFN exists and correlation SFN found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f422:	84 c0                	test   al,al
   1f424:	74 3b                	je     1f461 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:145
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1f426:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f429:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:144
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1f42c:	3c e5                	cmp    al,0xe5
   1f42e:	74 31                	je     1f461 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:146
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1f430:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f433:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:145
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1f437:	3c 08                	cmp    al,0x8
   1f439:	74 26                	je     1f461 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:147
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
   1f43b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f43e:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f442:	0f b6 c0             	movzx  eax,al
   1f445:	83 e0 06             	and    eax,0x6
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:146
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1f448:	85 c0                	test   eax,eax
   1f44a:	75 15                	jne    1f461 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:148
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
         (lfn->no_of_strings) )
   1f44c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f44f:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:147
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
   1f456:	84 c0                	test   al,al
   1f458:	74 07                	je     1f461 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:149
         (lfn->no_of_strings) )
        return 1;
   1f45a:	b8 01 00 00 00       	mov    eax,0x1
   1f45f:	eb 05                	jmp    1f466 <fatfs_entry_lfn_exists+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:151
    else
        return 0;
   1f461:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:152
}
   1f466:	5d                   	pop    ebp
   1f467:	c3                   	ret    

0001f468 <fatfs_entry_sfn_only>:
fatfs_entry_sfn_only():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:158
#endif
//-----------------------------------------------------------------------------
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
   1f468:	55                   	push   ebp
   1f469:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:159
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f46b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f46e:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f472:	3c 0f                	cmp    al,0xf
   1f474:	74 37                	je     1f4ad <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:160 (discriminator 1)
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1f476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f479:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:159 (discriminator 1)
//-----------------------------------------------------------------------------
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f47c:	84 c0                	test   al,al
   1f47e:	74 2d                	je     1f4ad <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:161
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1f480:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f483:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:160
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1f486:	3c e5                	cmp    al,0xe5
   1f488:	74 23                	je     1f4ad <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:162
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1f48a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f48d:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:161
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1f491:	3c 08                	cmp    al,0x8
   1f493:	74 18                	je     1f4ad <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:163
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) )
   1f495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f498:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f49c:	0f b6 c0             	movzx  eax,al
   1f49f:	83 e0 06             	and    eax,0x6
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:162
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1f4a2:	85 c0                	test   eax,eax
   1f4a4:	75 07                	jne    1f4ad <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:164
         (!(entry->Attr&FILE_ATTR_SYSHID)) )
        return 1;
   1f4a6:	b8 01 00 00 00       	mov    eax,0x1
   1f4ab:	eb 05                	jmp    1f4b2 <fatfs_entry_sfn_only+0x4a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:166
    else
        return 0;
   1f4ad:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:167
}
   1f4b2:	5d                   	pop    ebp
   1f4b3:	c3                   	ret    

0001f4b4 <fatfs_entry_is_dir>:
fatfs_entry_is_dir():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:173
// TODO: FILE_ATTR_SYSHID ?!?!??!
//-----------------------------------------------------------------------------
// fatfs_entry_is_dir: Returns 1 if a directory
//-----------------------------------------------------------------------------
int fatfs_entry_is_dir(struct fat_dir_entry *entry)
{
   1f4b4:	55                   	push   ebp
   1f4b5:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:174
    if (entry->Attr & FILE_TYPE_DIR)
   1f4b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4ba:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f4be:	0f b6 c0             	movzx  eax,al
   1f4c1:	83 e0 10             	and    eax,0x10
   1f4c4:	85 c0                	test   eax,eax
   1f4c6:	74 07                	je     1f4cf <fatfs_entry_is_dir+0x1b>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:175
        return 1;
   1f4c8:	b8 01 00 00 00       	mov    eax,0x1
   1f4cd:	eb 05                	jmp    1f4d4 <fatfs_entry_is_dir+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:177
    else
        return 0;
   1f4cf:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:178
}
   1f4d4:	5d                   	pop    ebp
   1f4d5:	c3                   	ret    

0001f4d6 <fatfs_entry_is_file>:
fatfs_entry_is_file():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:183
//-----------------------------------------------------------------------------
// fatfs_entry_is_file: Returns 1 is a file entry
//-----------------------------------------------------------------------------
int fatfs_entry_is_file(struct fat_dir_entry *entry)
{
   1f4d6:	55                   	push   ebp
   1f4d7:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:184
    if (entry->Attr & FILE_TYPE_FILE)
   1f4d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4dc:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f4e0:	0f b6 c0             	movzx  eax,al
   1f4e3:	83 e0 20             	and    eax,0x20
   1f4e6:	85 c0                	test   eax,eax
   1f4e8:	74 07                	je     1f4f1 <fatfs_entry_is_file+0x1b>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:185
        return 1;
   1f4ea:	b8 01 00 00 00       	mov    eax,0x1
   1f4ef:	eb 05                	jmp    1f4f6 <fatfs_entry_is_file+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:187
    else
        return 0;
   1f4f1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:188
}
   1f4f6:	5d                   	pop    ebp
   1f4f7:	c3                   	ret    

0001f4f8 <fatfs_lfn_entries_required>:
fatfs_lfn_entries_required():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:194
//-----------------------------------------------------------------------------
// fatfs_lfn_entries_required: Calculate number of 13 characters entries
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_lfn_entries_required(char *filename)
{
   1f4f8:	55                   	push   ebp
   1f4f9:	89 e5                	mov    ebp,esp
   1f4fb:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:195
    int length = (int)strlen(filename);
   1f4fe:	83 ec 0c             	sub    esp,0xc
   1f501:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f504:	e8 7f 7d 00 00       	call   27288 <strlen>
   1f509:	83 c4 10             	add    esp,0x10
   1f50c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:197

    if (length)
   1f50f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1f513:	74 1d                	je     1f532 <fatfs_lfn_entries_required+0x3a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:198
        return (length + MAX_LFN_ENTRY_LENGTH - 1) / MAX_LFN_ENTRY_LENGTH;
   1f515:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f518:	8d 48 0c             	lea    ecx,[eax+0xc]
   1f51b:	ba 4f ec c4 4e       	mov    edx,0x4ec4ec4f
   1f520:	89 c8                	mov    eax,ecx
   1f522:	f7 ea                	imul   edx
   1f524:	c1 fa 02             	sar    edx,0x2
   1f527:	89 c8                	mov    eax,ecx
   1f529:	c1 f8 1f             	sar    eax,0x1f
   1f52c:	29 c2                	sub    edx,eax
   1f52e:	89 d0                	mov    eax,edx
   1f530:	eb 05                	jmp    1f537 <fatfs_lfn_entries_required+0x3f>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:200
    else
        return 0;
   1f532:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:201
}
   1f537:	c9                   	leave  
   1f538:	c3                   	ret    

0001f539 <fatfs_filename_to_lfn>:
fatfs_filename_to_lfn():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:208
//-----------------------------------------------------------------------------
// fatfs_filename_to_lfn:
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk)
{
   1f539:	55                   	push   ebp
   1f53a:	89 e5                	mov    ebp,esp
   1f53c:	83 ec 68             	sub    esp,0x68
   1f53f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f542:	88 45 a4             	mov    BYTE PTR [ebp-0x5c],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:210
    int i;
    int nameIndexes[MAX_LFN_ENTRY_LENGTH] = {1,3,5,7,9,0x0E,0x10,0x12,0x14,0x16,0x18,0x1C,0x1E};
   1f545:	c7 45 b4 01 00 00 00 	mov    DWORD PTR [ebp-0x4c],0x1
   1f54c:	c7 45 b8 03 00 00 00 	mov    DWORD PTR [ebp-0x48],0x3
   1f553:	c7 45 bc 05 00 00 00 	mov    DWORD PTR [ebp-0x44],0x5
   1f55a:	c7 45 c0 07 00 00 00 	mov    DWORD PTR [ebp-0x40],0x7
   1f561:	c7 45 c4 09 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x9
   1f568:	c7 45 c8 0e 00 00 00 	mov    DWORD PTR [ebp-0x38],0xe
   1f56f:	c7 45 cc 10 00 00 00 	mov    DWORD PTR [ebp-0x34],0x10
   1f576:	c7 45 d0 12 00 00 00 	mov    DWORD PTR [ebp-0x30],0x12
   1f57d:	c7 45 d4 14 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x14
   1f584:	c7 45 d8 16 00 00 00 	mov    DWORD PTR [ebp-0x28],0x16
   1f58b:	c7 45 dc 18 00 00 00 	mov    DWORD PTR [ebp-0x24],0x18
   1f592:	c7 45 e0 1c 00 00 00 	mov    DWORD PTR [ebp-0x20],0x1c
   1f599:	c7 45 e4 1e 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1e
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:213

    // 13 characters entries
    int length = (int)strlen(filename);
   1f5a0:	83 ec 0c             	sub    esp,0xc
   1f5a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f5a6:	e8 dd 7c 00 00       	call   27288 <strlen>
   1f5ab:	83 c4 10             	add    esp,0x10
   1f5ae:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:214
    int entriesRequired = fatfs_lfn_entries_required(filename);
   1f5b1:	83 ec 0c             	sub    esp,0xc
   1f5b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f5b7:	e8 3c ff ff ff       	call   1f4f8 <fatfs_lfn_entries_required>
   1f5bc:	83 c4 10             	add    esp,0x10
   1f5bf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:217

    // Filename offset
    int start = entry * MAX_LFN_ENTRY_LENGTH;
   1f5c2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1f5c5:	89 d0                	mov    eax,edx
   1f5c7:	01 c0                	add    eax,eax
   1f5c9:	01 d0                	add    eax,edx
   1f5cb:	c1 e0 02             	shl    eax,0x2
   1f5ce:	01 d0                	add    eax,edx
   1f5d0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:220

    // Initialise to zeros
    memset(buffer, 0x00, FAT_DIR_ENTRY_SIZE);
   1f5d3:	83 ec 04             	sub    esp,0x4
   1f5d6:	6a 20                	push   0x20
   1f5d8:	6a 00                	push   0x0
   1f5da:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f5dd:	e8 4b 5a 00 00       	call   2502d <memset>
   1f5e2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:223

    // LFN entry number
    buffer[0] = (uint8)(((entriesRequired-1)==entry)?(0x40|(entry+1)):(entry+1));
   1f5e5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1f5e8:	83 e8 01             	sub    eax,0x1
   1f5eb:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1f5ee:	75 0d                	jne    1f5fd <fatfs_filename_to_lfn+0xc4>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:223 (discriminator 1)
   1f5f0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1f5f3:	83 c0 01             	add    eax,0x1
   1f5f6:	83 c8 40             	or     eax,0x40
   1f5f9:	89 c2                	mov    edx,eax
   1f5fb:	eb 06                	jmp    1f603 <fatfs_filename_to_lfn+0xca>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:223 (discriminator 2)
   1f5fd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1f600:	8d 50 01             	lea    edx,[eax+0x1]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:223 (discriminator 4)
   1f603:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f606:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:226 (discriminator 4)

    // LFN flag
    buffer[11] = 0x0F;
   1f608:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f60b:	83 c0 0b             	add    eax,0xb
   1f60e:	c6 00 0f             	mov    BYTE PTR [eax],0xf
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:229 (discriminator 4)

    // Checksum of short filename
    buffer[13] = sfnChk;
   1f611:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f614:	8d 50 0d             	lea    edx,[eax+0xd]
   1f617:	0f b6 45 a4          	movzx  eax,BYTE PTR [ebp-0x5c]
   1f61b:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:232 (discriminator 4)

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
   1f61d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1f624:	eb 78                	jmp    1f69e <fatfs_filename_to_lfn+0x165>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:234
    {
        if ( (start+i) < length )
   1f626:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1f629:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f62c:	01 d0                	add    eax,edx
   1f62e:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   1f631:	7d 24                	jge    1f657 <fatfs_filename_to_lfn+0x11e>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:235
            buffer[nameIndexes[i]] = filename[start+i];
   1f633:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f636:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1f63a:	89 c2                	mov    edx,eax
   1f63c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f63f:	01 d0                	add    eax,edx
   1f641:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
   1f644:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f647:	01 ca                	add    edx,ecx
   1f649:	89 d1                	mov    ecx,edx
   1f64b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f64e:	01 ca                	add    edx,ecx
   1f650:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1f653:	88 10                	mov    BYTE PTR [eax],dl
   1f655:	eb 43                	jmp    1f69a <fatfs_filename_to_lfn+0x161>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:236
        else if ( (start+i) == length )
   1f657:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1f65a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f65d:	01 d0                	add    eax,edx
   1f65f:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   1f662:	75 13                	jne    1f677 <fatfs_filename_to_lfn+0x13e>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:237
            buffer[nameIndexes[i]] = 0x00;
   1f664:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f667:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1f66b:	89 c2                	mov    edx,eax
   1f66d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f670:	01 d0                	add    eax,edx
   1f672:	c6 00 00             	mov    BYTE PTR [eax],0x0
   1f675:	eb 23                	jmp    1f69a <fatfs_filename_to_lfn+0x161>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:240
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   1f677:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f67a:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1f67e:	89 c2                	mov    edx,eax
   1f680:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f683:	01 d0                	add    eax,edx
   1f685:	c6 00 ff             	mov    BYTE PTR [eax],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:241
            buffer[nameIndexes[i]+1] = 0xFF;
   1f688:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f68b:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1f68f:	8d 50 01             	lea    edx,[eax+0x1]
   1f692:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f695:	01 d0                	add    eax,edx
   1f697:	c6 00 ff             	mov    BYTE PTR [eax],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:232 (discriminator 2)

    // Checksum of short filename
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
   1f69a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:232 (discriminator 1)
   1f69e:	83 7d f4 0c          	cmp    DWORD PTR [ebp-0xc],0xc
   1f6a2:	7e 82                	jle    1f626 <fatfs_filename_to_lfn+0xed>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:244
        {
            buffer[nameIndexes[i]] = 0xFF;
            buffer[nameIndexes[i]+1] = 0xFF;
        }
    }
}
   1f6a4:	90                   	nop
   1f6a5:	c9                   	leave  
   1f6a6:	c3                   	ret    

0001f6a7 <fatfs_sfn_create_entry>:
fatfs_sfn_create_entry():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:251
//-----------------------------------------------------------------------------
// fatfs_sfn_create_entry: Create the short filename directory entry
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
{
   1f6a7:	55                   	push   ebp
   1f6a8:	89 e5                	mov    ebp,esp
   1f6aa:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:255
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
   1f6ad:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1f6b4:	eb 1b                	jmp    1f6d1 <fatfs_sfn_create_entry+0x2a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:256 (discriminator 3)
        entry->Name[i] = shortfilename[i];
   1f6b6:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1f6b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f6bc:	01 d0                	add    eax,edx
   1f6be:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f6c1:	89 c1                	mov    ecx,eax
   1f6c3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   1f6c6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1f6c9:	01 d0                	add    eax,edx
   1f6cb:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:255 (discriminator 3)
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
{
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
   1f6cd:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:255 (discriminator 1)
   1f6d1:	83 7d fc 0a          	cmp    DWORD PTR [ebp-0x4],0xa
   1f6d5:	7e df                	jle    1f6b6 <fatfs_sfn_create_entry+0xf>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:259
        entry->Name[i] = shortfilename[i];

    // Unless we have a RTC we might as well set these to 1980
    entry->CrtTimeTenth = 0x00;
   1f6d7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f6da:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:260
    entry->CrtTime[1] = entry->CrtTime[0] = 0x00;
   1f6de:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f6e1:	c6 40 0e 00          	mov    BYTE PTR [eax+0xe],0x0
   1f6e5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f6e8:	0f b6 50 0e          	movzx  edx,BYTE PTR [eax+0xe]
   1f6ec:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f6ef:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:261
    entry->CrtDate[1] = 0x00;
   1f6f2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f6f5:	c6 40 11 00          	mov    BYTE PTR [eax+0x11],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:262
    entry->CrtDate[0] = 0x20;
   1f6f9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f6fc:	c6 40 10 20          	mov    BYTE PTR [eax+0x10],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:263
    entry->LstAccDate[1] = 0x00;
   1f700:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f703:	c6 40 13 00          	mov    BYTE PTR [eax+0x13],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:264
    entry->LstAccDate[0] = 0x20;
   1f707:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f70a:	c6 40 12 20          	mov    BYTE PTR [eax+0x12],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:265
    entry->WrtTime[1] = entry->WrtTime[0] = 0x00;
   1f70e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f711:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
   1f715:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f718:	0f b6 50 16          	movzx  edx,BYTE PTR [eax+0x16]
   1f71c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f71f:	88 50 17             	mov    BYTE PTR [eax+0x17],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:266
    entry->WrtDate[1] = 0x00;
   1f722:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f725:	c6 40 19 00          	mov    BYTE PTR [eax+0x19],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:267
    entry->WrtDate[0] = 0x20;
   1f729:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f72c:	c6 40 18 20          	mov    BYTE PTR [eax+0x18],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:269

    if (!dir)
   1f730:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1f734:	75 09                	jne    1f73f <fatfs_sfn_create_entry+0x98>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:270
        entry->Attr = FILE_TYPE_FILE;
   1f736:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f739:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
   1f73d:	eb 07                	jmp    1f746 <fatfs_sfn_create_entry+0x9f>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:272
    else
        entry->Attr = FILE_TYPE_DIR;
   1f73f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f742:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:274

    entry->NTRes = 0x00;
   1f746:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f749:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:276

    entry->FstClusHI = FAT_HTONS((uint16)((startCluster>>16) & 0xFFFF));
   1f74d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1f750:	c1 e8 10             	shr    eax,0x10
   1f753:	89 c2                	mov    edx,eax
   1f755:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f758:	66 89 50 14          	mov    WORD PTR [eax+0x14],dx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:277
    entry->FstClusLO = FAT_HTONS((uint16)((startCluster>>0) & 0xFFFF));
   1f75c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1f75f:	89 c2                	mov    edx,eax
   1f761:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f764:	66 89 50 1a          	mov    WORD PTR [eax+0x1a],dx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:278
    entry->FileSize = FAT_HTONL(size);
   1f768:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f76b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1f76e:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:279
}
   1f771:	90                   	nop
   1f772:	c9                   	leave  
   1f773:	c3                   	ret    

0001f774 <fatfs_lfn_create_sfn>:
fatfs_lfn_create_sfn():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:286
//-----------------------------------------------------------------------------
// fatfs_lfn_create_sfn: Create a padded SFN
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_create_sfn(char *sfn_output, char *filename)
{
   1f774:	55                   	push   ebp
   1f775:	89 e5                	mov    ebp,esp
   1f777:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:288
    int i;
    int dotPos = -1;
   1f77a:	c7 45 f0 ff ff ff ff 	mov    DWORD PTR [ebp-0x10],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:291
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
   1f781:	83 ec 0c             	sub    esp,0xc
   1f784:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f787:	e8 fc 7a 00 00       	call   27288 <strlen>
   1f78c:	83 c4 10             	add    esp,0x10
   1f78f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:294

    // Invalid to start with .
    if (filename[0]=='.')
   1f792:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f795:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f798:	3c 2e                	cmp    al,0x2e
   1f79a:	75 0a                	jne    1f7a6 <fatfs_lfn_create_sfn+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:295
        return 0;
   1f79c:	b8 00 00 00 00       	mov    eax,0x0
   1f7a1:	e9 a5 01 00 00       	jmp    1f94b <fatfs_lfn_create_sfn+0x1d7>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:297

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
   1f7a6:	83 ec 04             	sub    esp,0x4
   1f7a9:	6a 0b                	push   0xb
   1f7ab:	6a 20                	push   0x20
   1f7ad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f7b0:	e8 78 58 00 00       	call   2502d <memset>
   1f7b5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:298
    memset(ext, ' ', 3);
   1f7b8:	83 ec 04             	sub    esp,0x4
   1f7bb:	6a 03                	push   0x3
   1f7bd:	6a 20                	push   0x20
   1f7bf:	8d 45 e5             	lea    eax,[ebp-0x1b]
   1f7c2:	50                   	push   eax
   1f7c3:	e8 65 58 00 00       	call   2502d <memset>
   1f7c8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:301

    // Find dot seperator
    for (i = 0; i< len; i++)
   1f7cb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1f7d2:	eb 19                	jmp    1f7ed <fatfs_lfn_create_sfn+0x79>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:303
    {
        if (filename[i]=='.')
   1f7d4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f7d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f7da:	01 d0                	add    eax,edx
   1f7dc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f7df:	3c 2e                	cmp    al,0x2e
   1f7e1:	75 06                	jne    1f7e9 <fatfs_lfn_create_sfn+0x75>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:304
            dotPos = i;
   1f7e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f7e6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:301 (discriminator 2)

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
    memset(ext, ' ', 3);

    // Find dot seperator
    for (i = 0; i< len; i++)
   1f7e9:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:301 (discriminator 1)
   1f7ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f7f0:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1f7f3:	7c df                	jl     1f7d4 <fatfs_lfn_create_sfn+0x60>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:308
        if (filename[i]=='.')
            dotPos = i;
    }

    // Extract extensions
    if (dotPos!=-1)
   1f7f5:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   1f7f9:	74 44                	je     1f83f <fatfs_lfn_create_sfn+0xcb>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:311
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
   1f7fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1f7fe:	83 c0 01             	add    eax,0x1
   1f801:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1f804:	eb 28                	jmp    1f82e <fatfs_lfn_create_sfn+0xba>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:312
            if (i<len)
   1f806:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f809:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1f80c:	7d 1c                	jge    1f82a <fatfs_lfn_create_sfn+0xb6>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:313
                ext[i-(dotPos+1)] = filename[i];
   1f80e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1f811:	8d 50 01             	lea    edx,[eax+0x1]
   1f814:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f817:	29 d0                	sub    eax,edx
   1f819:	89 c2                	mov    edx,eax
   1f81b:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1f81e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f821:	01 c8                	add    eax,ecx
   1f823:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f826:	88 44 15 e5          	mov    BYTE PTR [ebp+edx*1-0x1b],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:311 (discriminator 2)

    // Extract extensions
    if (dotPos!=-1)
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
   1f82a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:311 (discriminator 1)
   1f82e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1f831:	83 c0 04             	add    eax,0x4
   1f834:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1f837:	7f cd                	jg     1f806 <fatfs_lfn_create_sfn+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:316
            if (i<len)
                ext[i-(dotPos+1)] = filename[i];

        // Shorten the length to the dot position
        len = dotPos;
   1f839:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1f83c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:320
    }

    // Add filename part
    pos = 0;
   1f83f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:321
    for (i=0;i<len;i++)
   1f846:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1f84d:	e9 85 00 00 00       	jmp    1f8d7 <fatfs_lfn_create_sfn+0x163>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:323
    {
        if ( (filename[i]!=' ') && (filename[i]!='.') )
   1f852:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f855:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f858:	01 d0                	add    eax,edx
   1f85a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f85d:	3c 20                	cmp    al,0x20
   1f85f:	74 6c                	je     1f8cd <fatfs_lfn_create_sfn+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:323 (discriminator 1)
   1f861:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f864:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f867:	01 d0                	add    eax,edx
   1f869:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f86c:	3c 2e                	cmp    al,0x2e
   1f86e:	74 5d                	je     1f8cd <fatfs_lfn_create_sfn+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:325
        {
            if (filename[i] >= 'a' && filename[i] <= 'z')
   1f870:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f873:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f876:	01 d0                	add    eax,edx
   1f878:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f87b:	3c 60                	cmp    al,0x60
   1f87d:	7e 31                	jle    1f8b0 <fatfs_lfn_create_sfn+0x13c>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:325 (discriminator 1)
   1f87f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f882:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f885:	01 d0                	add    eax,edx
   1f887:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f88a:	3c 7a                	cmp    al,0x7a
   1f88c:	7f 22                	jg     1f8b0 <fatfs_lfn_create_sfn+0x13c>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:326
                sfn_output[pos++] = filename[i] - 'a' + 'A';
   1f88e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1f891:	8d 50 01             	lea    edx,[eax+0x1]
   1f894:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   1f897:	89 c2                	mov    edx,eax
   1f899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f89c:	01 d0                	add    eax,edx
   1f89e:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1f8a1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1f8a4:	01 ca                	add    edx,ecx
   1f8a6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1f8a9:	83 ea 20             	sub    edx,0x20
   1f8ac:	88 10                	mov    BYTE PTR [eax],dl
   1f8ae:	eb 1d                	jmp    1f8cd <fatfs_lfn_create_sfn+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:328
            else
                sfn_output[pos++] = filename[i];
   1f8b0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1f8b3:	8d 50 01             	lea    edx,[eax+0x1]
   1f8b6:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   1f8b9:	89 c2                	mov    edx,eax
   1f8bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f8be:	01 c2                	add    edx,eax
   1f8c0:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1f8c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f8c6:	01 c8                	add    eax,ecx
   1f8c8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f8cb:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:332
        }

        // Fill upto 8 characters
        if (pos==FAT_SFN_SIZE_PARTIAL)
   1f8cd:	83 7d ec 08          	cmp    DWORD PTR [ebp-0x14],0x8
   1f8d1:	74 12                	je     1f8e5 <fatfs_lfn_create_sfn+0x171>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:321 (discriminator 2)
        len = dotPos;
    }

    // Add filename part
    pos = 0;
    for (i=0;i<len;i++)
   1f8d3:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:321 (discriminator 1)
   1f8d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f8da:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1f8dd:	0f 8c 6f ff ff ff    	jl     1f852 <fatfs_lfn_create_sfn+0xde>
   1f8e3:	eb 01                	jmp    1f8e6 <fatfs_lfn_create_sfn+0x172>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:333
                sfn_output[pos++] = filename[i];
        }

        // Fill upto 8 characters
        if (pos==FAT_SFN_SIZE_PARTIAL)
            break;
   1f8e5:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:337
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
   1f8e6:	c7 45 f4 08 00 00 00 	mov    DWORD PTR [ebp-0xc],0x8
   1f8ed:	eb 51                	jmp    1f940 <fatfs_lfn_create_sfn+0x1cc>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:339
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
   1f8ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f8f2:	83 e8 08             	sub    eax,0x8
   1f8f5:	0f b6 44 05 e5       	movzx  eax,BYTE PTR [ebp+eax*1-0x1b]
   1f8fa:	3c 60                	cmp    al,0x60
   1f8fc:	7e 29                	jle    1f927 <fatfs_lfn_create_sfn+0x1b3>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:339 (discriminator 1)
   1f8fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f901:	83 e8 08             	sub    eax,0x8
   1f904:	0f b6 44 05 e5       	movzx  eax,BYTE PTR [ebp+eax*1-0x1b]
   1f909:	3c 7a                	cmp    al,0x7a
   1f90b:	7f 1a                	jg     1f927 <fatfs_lfn_create_sfn+0x1b3>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:340
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
   1f90d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f913:	01 d0                	add    eax,edx
   1f915:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f918:	83 ea 08             	sub    edx,0x8
   1f91b:	0f b6 54 15 e5       	movzx  edx,BYTE PTR [ebp+edx*1-0x1b]
   1f920:	83 ea 20             	sub    edx,0x20
   1f923:	88 10                	mov    BYTE PTR [eax],dl
   1f925:	eb 15                	jmp    1f93c <fatfs_lfn_create_sfn+0x1c8>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:342
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
   1f927:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f92a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f92d:	01 c2                	add    edx,eax
   1f92f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f932:	83 e8 08             	sub    eax,0x8
   1f935:	0f b6 44 05 e5       	movzx  eax,BYTE PTR [ebp+eax*1-0x1b]
   1f93a:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:337 (discriminator 2)
        if (pos==FAT_SFN_SIZE_PARTIAL)
            break;
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
   1f93c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:337 (discriminator 1)
   1f940:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   1f944:	7e a9                	jle    1f8ef <fatfs_lfn_create_sfn+0x17b>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:345
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
    }

    return 1;
   1f946:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:346 (discriminator 1)
}
   1f94b:	c9                   	leave  
   1f94c:	c3                   	ret    

0001f94d <fatfs_itoa>:
fatfs_itoa():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:351
//-----------------------------------------------------------------------------
// fatfs_itoa:
//-----------------------------------------------------------------------------
static void fatfs_itoa(uint32 num, char *s)
{
   1f94d:	55                   	push   ebp
   1f94e:	89 e5                	mov    ebp,esp
   1f950:	53                   	push   ebx
   1f951:	83 ec 30             	sub    esp,0x30
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:354
    char* cp;
    char outbuf[12];
    const char digits[] = "0123456789ABCDEF";
   1f954:	c7 45 db 30 31 32 33 	mov    DWORD PTR [ebp-0x25],0x33323130
   1f95b:	c7 45 df 34 35 36 37 	mov    DWORD PTR [ebp-0x21],0x37363534
   1f962:	c7 45 e3 38 39 41 42 	mov    DWORD PTR [ebp-0x1d],0x42413938
   1f969:	c7 45 e7 43 44 45 46 	mov    DWORD PTR [ebp-0x19],0x46454443
   1f970:	c6 45 eb 00          	mov    BYTE PTR [ebp-0x15],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:357

    // Build string backwards
    cp = outbuf;
   1f974:	8d 45 ec             	lea    eax,[ebp-0x14]
   1f977:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:360 (discriminator 1)
    do
    {
        *cp++ = digits[(int)(num % 10)];
   1f97a:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   1f97d:	8d 41 01             	lea    eax,[ecx+0x1]
   1f980:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   1f983:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f986:	ba cd cc cc cc       	mov    edx,0xcccccccd
   1f98b:	89 d8                	mov    eax,ebx
   1f98d:	f7 e2                	mul    edx
   1f98f:	c1 ea 03             	shr    edx,0x3
   1f992:	89 d0                	mov    eax,edx
   1f994:	c1 e0 02             	shl    eax,0x2
   1f997:	01 d0                	add    eax,edx
   1f999:	01 c0                	add    eax,eax
   1f99b:	29 c3                	sub    ebx,eax
   1f99d:	89 da                	mov    edx,ebx
   1f99f:	89 d0                	mov    eax,edx
   1f9a1:	0f b6 44 05 db       	movzx  eax,BYTE PTR [ebp+eax*1-0x25]
   1f9a6:	88 01                	mov    BYTE PTR [ecx],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:362 (discriminator 1)
    }
    while ((num /= 10) > 0);
   1f9a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f9ab:	ba cd cc cc cc       	mov    edx,0xcccccccd
   1f9b0:	f7 e2                	mul    edx
   1f9b2:	89 d0                	mov    eax,edx
   1f9b4:	c1 e8 03             	shr    eax,0x3
   1f9b7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
   1f9ba:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1f9be:	75 ba                	jne    1f97a <fatfs_itoa+0x2d>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:364

    *cp-- = 0;
   1f9c0:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1f9c3:	8d 50 ff             	lea    edx,[eax-0x1]
   1f9c6:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   1f9c9:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:367

    // Copy in forwards
    while (cp >= outbuf)
   1f9cc:	eb 17                	jmp    1f9e5 <fatfs_itoa+0x98>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:368
        *s++ = *cp--;
   1f9ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f9d1:	8d 50 01             	lea    edx,[eax+0x1]
   1f9d4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
   1f9d7:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   1f9da:	8d 4a ff             	lea    ecx,[edx-0x1]
   1f9dd:	89 4d f8             	mov    DWORD PTR [ebp-0x8],ecx
   1f9e0:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1f9e3:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:367
    while ((num /= 10) > 0);

    *cp-- = 0;

    // Copy in forwards
    while (cp >= outbuf)
   1f9e5:	8d 45 ec             	lea    eax,[ebp-0x14]
   1f9e8:	39 45 f8             	cmp    DWORD PTR [ebp-0x8],eax
   1f9eb:	73 e1                	jae    1f9ce <fatfs_itoa+0x81>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:370
        *s++ = *cp--;

    *s = 0;
   1f9ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f9f0:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:371
}
   1f9f3:	90                   	nop
   1f9f4:	83 c4 30             	add    esp,0x30
   1f9f7:	5b                   	pop    ebx
   1f9f8:	5d                   	pop    ebp
   1f9f9:	c3                   	ret    

0001f9fa <fatfs_lfn_generate_tail>:
fatfs_lfn_generate_tail():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:381
// sfn_output = Output short filename with tail
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_generate_tail(char *sfn_output, char *sfn_input, uint32 tailNum)
{
   1f9fa:	55                   	push   ebp
   1f9fb:	89 e5                	mov    ebp,esp
   1f9fd:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:385
    int tail_chars;
    char tail_str[12];

    if (tailNum > 99999)
   1fa00:	81 7d 10 9f 86 01 00 	cmp    DWORD PTR [ebp+0x10],0x1869f
   1fa07:	76 07                	jbe    1fa10 <fatfs_lfn_generate_tail+0x16>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:386
        return 0;
   1fa09:	b8 00 00 00 00       	mov    eax,0x0
   1fa0e:	eb 79                	jmp    1fa89 <fatfs_lfn_generate_tail+0x8f>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:389

    // Convert to number
    memset(tail_str, 0x00, sizeof(tail_str));
   1fa10:	83 ec 04             	sub    esp,0x4
   1fa13:	6a 0c                	push   0xc
   1fa15:	6a 00                	push   0x0
   1fa17:	8d 45 e8             	lea    eax,[ebp-0x18]
   1fa1a:	50                   	push   eax
   1fa1b:	e8 0d 56 00 00       	call   2502d <memset>
   1fa20:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:390
    tail_str[0] = '~';
   1fa23:	c6 45 e8 7e          	mov    BYTE PTR [ebp-0x18],0x7e
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:391
    fatfs_itoa(tailNum, tail_str+1);
   1fa27:	8d 45 e8             	lea    eax,[ebp-0x18]
   1fa2a:	83 c0 01             	add    eax,0x1
   1fa2d:	83 ec 08             	sub    esp,0x8
   1fa30:	50                   	push   eax
   1fa31:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1fa34:	e8 14 ff ff ff       	call   1f94d <fatfs_itoa>
   1fa39:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:394

    // Copy in base filename
    memcpy(sfn_output, sfn_input, FAT_SFN_SIZE_FULL);
   1fa3c:	83 ec 04             	sub    esp,0x4
   1fa3f:	6a 0b                	push   0xb
   1fa41:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1fa44:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fa47:	e8 d0 5f 00 00       	call   25a1c <memcpy>
   1fa4c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:397

    // Overwrite with tail
    tail_chars = (int)strlen(tail_str);
   1fa4f:	83 ec 0c             	sub    esp,0xc
   1fa52:	8d 45 e8             	lea    eax,[ebp-0x18]
   1fa55:	50                   	push   eax
   1fa56:	e8 2d 78 00 00       	call   27288 <strlen>
   1fa5b:	83 c4 10             	add    esp,0x10
   1fa5e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:398
    memcpy(sfn_output+(FAT_SFN_SIZE_PARTIAL-tail_chars), tail_str, tail_chars);
   1fa61:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fa64:	ba 08 00 00 00       	mov    edx,0x8
   1fa69:	2b 55 f4             	sub    edx,DWORD PTR [ebp-0xc]
   1fa6c:	89 d1                	mov    ecx,edx
   1fa6e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1fa71:	01 ca                	add    edx,ecx
   1fa73:	83 ec 04             	sub    esp,0x4
   1fa76:	50                   	push   eax
   1fa77:	8d 45 e8             	lea    eax,[ebp-0x18]
   1fa7a:	50                   	push   eax
   1fa7b:	52                   	push   edx
   1fa7c:	e8 9b 5f 00 00       	call   25a1c <memcpy>
   1fa81:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:400

    return 1;
   1fa84:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:401 (discriminator 1)
}
   1fa89:	c9                   	leave  
   1fa8a:	c3                   	ret    

0001fa8b <fatfs_convert_from_fat_time>:
fatfs_convert_from_fat_time():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:409
//-----------------------------------------------------------------------------
// fatfs_convert_from_fat_time: Convert FAT time to h/m/s
//-----------------------------------------------------------------------------
#if FATFS_INC_TIME_DATE_SUPPORT
void fatfs_convert_from_fat_time(uint16 fat_time, int *hours, int *minutes, int *seconds)
{
   1fa8b:	55                   	push   ebp
   1fa8c:	89 e5                	mov    ebp,esp
   1fa8e:	83 ec 04             	sub    esp,0x4
   1fa91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fa94:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:410
    *hours = (fat_time >> FAT_TIME_HOURS_SHIFT) & FAT_TIME_HOURS_MASK;
   1fa98:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1fa9c:	66 c1 e8 0b          	shr    ax,0xb
   1faa0:	0f b7 c0             	movzx  eax,ax
   1faa3:	83 e0 1f             	and    eax,0x1f
   1faa6:	89 c2                	mov    edx,eax
   1faa8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1faab:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:411
    *minutes = (fat_time >> FAT_TIME_MINUTES_SHIFT) & FAT_TIME_MINUTES_MASK;
   1faad:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1fab1:	66 c1 e8 05          	shr    ax,0x5
   1fab5:	0f b7 c0             	movzx  eax,ax
   1fab8:	83 e0 3f             	and    eax,0x3f
   1fabb:	89 c2                	mov    edx,eax
   1fabd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fac0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:412
    *seconds = (fat_time >> FAT_TIME_SECONDS_SHIFT) & FAT_TIME_SECONDS_MASK;
   1fac2:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1fac6:	83 e0 1f             	and    eax,0x1f
   1fac9:	89 c2                	mov    edx,eax
   1facb:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1face:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:413
    *seconds = *seconds * FAT_TIME_SECONDS_SCALE;
   1fad0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fad3:	8b 00                	mov    eax,DWORD PTR [eax]
   1fad5:	8d 14 00             	lea    edx,[eax+eax*1]
   1fad8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fadb:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:414
}
   1fadd:	90                   	nop
   1fade:	c9                   	leave  
   1fadf:	c3                   	ret    

0001fae0 <fatfs_convert_from_fat_date>:
fatfs_convert_from_fat_date():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:419
//-----------------------------------------------------------------------------
// fatfs_convert_from_fat_date: Convert FAT date to d/m/y
//-----------------------------------------------------------------------------
void fatfs_convert_from_fat_date(uint16 fat_date, int *day, int *month, int *year)
{
   1fae0:	55                   	push   ebp
   1fae1:	89 e5                	mov    ebp,esp
   1fae3:	83 ec 04             	sub    esp,0x4
   1fae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fae9:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:420
    *day = (fat_date >> FAT_DATE_DAY_SHIFT) & FAT_DATE_DAY_MASK;
   1faed:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1faf1:	83 e0 1f             	and    eax,0x1f
   1faf4:	89 c2                	mov    edx,eax
   1faf6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1faf9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:421
    *month = (fat_date >> FAT_DATE_MONTH_SHIFT) & FAT_DATE_MONTH_MASK;
   1fafb:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1faff:	66 c1 e8 05          	shr    ax,0x5
   1fb03:	0f b7 c0             	movzx  eax,ax
   1fb06:	83 e0 0f             	and    eax,0xf
   1fb09:	89 c2                	mov    edx,eax
   1fb0b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fb0e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:422
    *year = (fat_date >> FAT_DATE_YEAR_SHIFT) & FAT_DATE_YEAR_MASK;
   1fb10:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1fb14:	66 c1 e8 09          	shr    ax,0x9
   1fb18:	0f b7 c0             	movzx  eax,ax
   1fb1b:	83 e0 7f             	and    eax,0x7f
   1fb1e:	89 c2                	mov    edx,eax
   1fb20:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fb23:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:423
    *year = *year + FAT_DATE_YEAR_OFFSET;
   1fb25:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fb28:	8b 00                	mov    eax,DWORD PTR [eax]
   1fb2a:	8d 90 bc 07 00 00    	lea    edx,[eax+0x7bc]
   1fb30:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fb33:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:424
}
   1fb35:	90                   	nop
   1fb36:	c9                   	leave  
   1fb37:	c3                   	ret    

0001fb38 <fatfs_convert_to_fat_time>:
fatfs_convert_to_fat_time():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:429
//-----------------------------------------------------------------------------
// fatfs_convert_to_fat_time: Convert h/m/s to FAT time
//-----------------------------------------------------------------------------
uint16 fatfs_convert_to_fat_time(int hours, int minutes, int seconds)
{
   1fb38:	55                   	push   ebp
   1fb39:	89 e5                	mov    ebp,esp
   1fb3b:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:430
    uint16 fat_time = 0;
   1fb3e:	66 c7 45 fe 00 00    	mov    WORD PTR [ebp-0x2],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:433

    // Most FAT times are to a resolution of 2 seconds
    seconds /= FAT_TIME_SECONDS_SCALE;
   1fb44:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fb47:	89 c2                	mov    edx,eax
   1fb49:	c1 ea 1f             	shr    edx,0x1f
   1fb4c:	01 d0                	add    eax,edx
   1fb4e:	d1 f8                	sar    eax,1
   1fb50:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:435

    fat_time = (hours & FAT_TIME_HOURS_MASK) << FAT_TIME_HOURS_SHIFT;
   1fb53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fb56:	c1 e0 0b             	shl    eax,0xb
   1fb59:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:436
    fat_time|= (minutes & FAT_TIME_MINUTES_MASK) << FAT_TIME_MINUTES_SHIFT;
   1fb5d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fb60:	83 e0 3f             	and    eax,0x3f
   1fb63:	c1 e0 05             	shl    eax,0x5
   1fb66:	89 c2                	mov    edx,eax
   1fb68:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   1fb6c:	09 d0                	or     eax,edx
   1fb6e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:437
    fat_time|= (seconds & FAT_TIME_SECONDS_MASK) << FAT_TIME_SECONDS_SHIFT;
   1fb72:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fb75:	83 e0 1f             	and    eax,0x1f
   1fb78:	89 c2                	mov    edx,eax
   1fb7a:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   1fb7e:	09 d0                	or     eax,edx
   1fb80:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:439

    return fat_time;
   1fb84:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:440
}
   1fb88:	c9                   	leave  
   1fb89:	c3                   	ret    

0001fb8a <fatfs_convert_to_fat_date>:
fatfs_convert_to_fat_date():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:445
//-----------------------------------------------------------------------------
// fatfs_convert_to_fat_date: Convert d/m/y to FAT date
//-----------------------------------------------------------------------------
uint16 fatfs_convert_to_fat_date(int day, int month, int year)
{
   1fb8a:	55                   	push   ebp
   1fb8b:	89 e5                	mov    ebp,esp
   1fb8d:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:446
    uint16 fat_date = 0;
   1fb90:	66 c7 45 fe 00 00    	mov    WORD PTR [ebp-0x2],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:449

    // FAT dates are relative to 1980
    if (year >= FAT_DATE_YEAR_OFFSET)
   1fb96:	81 7d 10 bb 07 00 00 	cmp    DWORD PTR [ebp+0x10],0x7bb
   1fb9d:	7e 07                	jle    1fba6 <fatfs_convert_to_fat_date+0x1c>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:450
        year -= FAT_DATE_YEAR_OFFSET;
   1fb9f:	81 6d 10 bc 07 00 00 	sub    DWORD PTR [ebp+0x10],0x7bc
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:452

    fat_date = (day & FAT_DATE_DAY_MASK) << FAT_DATE_DAY_SHIFT;
   1fba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fba9:	83 e0 1f             	and    eax,0x1f
   1fbac:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:453
    fat_date|= (month & FAT_DATE_MONTH_MASK) << FAT_DATE_MONTH_SHIFT;
   1fbb0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fbb3:	83 e0 0f             	and    eax,0xf
   1fbb6:	c1 e0 05             	shl    eax,0x5
   1fbb9:	89 c2                	mov    edx,eax
   1fbbb:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   1fbbf:	09 d0                	or     eax,edx
   1fbc1:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:454
    fat_date|= (year & FAT_DATE_YEAR_MASK) << FAT_DATE_YEAR_SHIFT;
   1fbc5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fbc8:	c1 e0 09             	shl    eax,0x9
   1fbcb:	89 c2                	mov    edx,eax
   1fbcd:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   1fbd1:	09 d0                	or     eax,edx
   1fbd3:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:456

    return fat_date;
   1fbd7:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:457
}
   1fbdb:	c9                   	leave  
   1fbdc:	c3                   	ret    
   1fbdd:	66 90                	xchg   ax,ax
   1fbdf:	90                   	nop

0001fbe0 <fatfs_total_path_levels>:
fatfs_total_path_levels():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:45
//        c:\folder\file.zip
//        /dev/etc/samba.conf
// Returns: -1 = Error, 0 or more = Ok
//-----------------------------------------------------------------------------
int fatfs_total_path_levels(char *path)
{
   1fbe0:	55                   	push   ebp
   1fbe1:	89 e5                	mov    ebp,esp
   1fbe3:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:46
    int levels = 0;
   1fbe6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:49
    char expectedchar;

    if (!path)
   1fbed:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1fbf1:	75 07                	jne    1fbfa <fatfs_total_path_levels+0x1a>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:50
        return -1;
   1fbf3:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1fbf8:	eb 74                	jmp    1fc6e <fatfs_total_path_levels+0x8e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:55

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
   1fbfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fbfd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fc00:	3c 2f                	cmp    al,0x2f
   1fc02:	75 0a                	jne    1fc0e <fatfs_total_path_levels+0x2e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:57
    {
        expectedchar = '/';
   1fc04:	c6 45 fb 2f          	mov    BYTE PTR [ebp-0x5],0x2f
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:58
        path++;
   1fc08:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   1fc0c:	eb 50                	jmp    1fc5e <fatfs_total_path_levels+0x7e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:60
    }
    else if (path[1] == ':' || path[2] == '\\')
   1fc0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fc11:	83 c0 01             	add    eax,0x1
   1fc14:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fc17:	3c 3a                	cmp    al,0x3a
   1fc19:	74 0d                	je     1fc28 <fatfs_total_path_levels+0x48>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:60 (discriminator 1)
   1fc1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fc1e:	83 c0 02             	add    eax,0x2
   1fc21:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fc24:	3c 5c                	cmp    al,0x5c
   1fc26:	75 0a                	jne    1fc32 <fatfs_total_path_levels+0x52>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:62
    {
        expectedchar = '\\';
   1fc28:	c6 45 fb 5c          	mov    BYTE PTR [ebp-0x5],0x5c
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:63
        path += 3;
   1fc2c:	83 45 08 03          	add    DWORD PTR [ebp+0x8],0x3
   1fc30:	eb 07                	jmp    1fc39 <fatfs_total_path_levels+0x59>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:66
    }
    else
        return -1;
   1fc32:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1fc37:	eb 35                	jmp    1fc6e <fatfs_total_path_levels+0x8e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:69

    // Count levels in path string
    while (*path)
   1fc39:	eb 23                	jmp    1fc5e <fatfs_total_path_levels+0x7e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:75
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
   1fc3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fc3e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fc41:	3a 45 fb             	cmp    al,BYTE PTR [ebp-0x5]
   1fc44:	75 06                	jne    1fc4c <fatfs_total_path_levels+0x6c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:75 (discriminator 1)
   1fc46:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   1fc4a:	eb 0e                	jmp    1fc5a <fatfs_total_path_levels+0x7a>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:76
            path++;
   1fc4c:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:72

    // Count levels in path string
    while (*path)
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
   1fc50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fc53:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fc56:	84 c0                	test   al,al
   1fc58:	75 e1                	jne    1fc3b <fatfs_total_path_levels+0x5b>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:80
            if (*path == expectedchar) { path++; break; }
            path++;
        }

        // Increase number of subdirs founds
        levels++;
   1fc5a:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:69
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
   1fc5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fc61:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fc64:	84 c0                	test   al,al
   1fc66:	75 e8                	jne    1fc50 <fatfs_total_path_levels+0x70>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:84
        // Increase number of subdirs founds
        levels++;
    }

    // Subtract the file itself
    return levels-1;
   1fc68:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1fc6b:	83 e8 01             	sub    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:85
}
   1fc6e:	c9                   	leave  
   1fc6f:	c3                   	ret    

0001fc70 <fatfs_get_substring>:
fatfs_get_substring():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:93
// (or file) at the specified level.
// E.g. C:\folder\file.zip : Level 0 = C:\folder, Level 1 = file.zip
// Returns: -1 = Error, 0 = Ok
//-----------------------------------------------------------------------------
int fatfs_get_substring(char *path, int levelreq, char *output, int max_len)
{
   1fc70:	55                   	push   ebp
   1fc71:	89 e5                	mov    ebp,esp
   1fc73:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:95
    int i;
    int pathlen=0;
   1fc76:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:96
    int levels=0;
   1fc7d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:97
    int copypnt=0;
   1fc84:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:100
    char expectedchar;

    if (!path || max_len <= 0)
   1fc8b:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1fc8f:	74 06                	je     1fc97 <fatfs_get_substring+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:100 (discriminator 1)
   1fc91:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1fc95:	7f 0a                	jg     1fca1 <fatfs_get_substring+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:101
        return -1;
   1fc97:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1fc9c:	e9 d2 00 00 00       	jmp    1fd73 <fatfs_get_substring+0x103>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:106

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
   1fca1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fca4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fca7:	3c 2f                	cmp    al,0x2f
   1fca9:	75 0a                	jne    1fcb5 <fatfs_get_substring+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:108
    {
        expectedchar = '/';
   1fcab:	c6 45 eb 2f          	mov    BYTE PTR [ebp-0x15],0x2f
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:109
        path++;
   1fcaf:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   1fcb3:	eb 2e                	jmp    1fce3 <fatfs_get_substring+0x73>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:111
    }
    else if (path[1] == ':' || path[2] == '\\')
   1fcb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fcb8:	83 c0 01             	add    eax,0x1
   1fcbb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fcbe:	3c 3a                	cmp    al,0x3a
   1fcc0:	74 0d                	je     1fccf <fatfs_get_substring+0x5f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:111 (discriminator 1)
   1fcc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fcc5:	83 c0 02             	add    eax,0x2
   1fcc8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fccb:	3c 5c                	cmp    al,0x5c
   1fccd:	75 0a                	jne    1fcd9 <fatfs_get_substring+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:113
    {
        expectedchar = '\\';
   1fccf:	c6 45 eb 5c          	mov    BYTE PTR [ebp-0x15],0x5c
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:114
        path += 3;
   1fcd3:	83 45 08 03          	add    DWORD PTR [ebp+0x8],0x3
   1fcd7:	eb 0a                	jmp    1fce3 <fatfs_get_substring+0x73>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:117
    }
    else
        return -1;
   1fcd9:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1fcde:	e9 90 00 00 00       	jmp    1fd73 <fatfs_get_substring+0x103>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:120

    // Get string length of path
    pathlen = (int)strlen (path);
   1fce3:	83 ec 0c             	sub    esp,0xc
   1fce6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fce9:	e8 9a 75 00 00       	call   27288 <strlen>
   1fcee:	83 c4 10             	add    esp,0x10
   1fcf1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:123

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
   1fcf4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1fcfb:	eb 4d                	jmp    1fd4a <fatfs_get_substring+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:126
    {
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;
   1fcfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fd00:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fd03:	3a 45 eb             	cmp    al,BYTE PTR [ebp-0x15]
   1fd06:	75 04                	jne    1fd0c <fatfs_get_substring+0x9c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:126 (discriminator 1)
   1fd08:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:129

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1)))
   1fd0c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1fd0f:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   1fd12:	75 2e                	jne    1fd42 <fatfs_get_substring+0xd2>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:129 (discriminator 1)
   1fd14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fd17:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fd1a:	3a 45 eb             	cmp    al,BYTE PTR [ebp-0x15]
   1fd1d:	74 23                	je     1fd42 <fatfs_get_substring+0xd2>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:129 (discriminator 2)
   1fd1f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fd22:	83 e8 01             	sub    eax,0x1
   1fd25:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   1fd28:	7e 18                	jle    1fd42 <fatfs_get_substring+0xd2>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:130
            output[copypnt++] = *path;
   1fd2a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1fd2d:	8d 50 01             	lea    edx,[eax+0x1]
   1fd30:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   1fd33:	89 c2                	mov    edx,eax
   1fd35:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fd38:	01 c2                	add    edx,eax
   1fd3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fd3d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fd40:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:133 (discriminator 2)

        // Increment through path string
        path++;
   1fd42:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:123 (discriminator 2)

    // Get string length of path
    pathlen = (int)strlen (path);

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
   1fd46:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:123 (discriminator 1)
   1fd4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fd4d:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   1fd50:	7c ab                	jl     1fcfd <fatfs_get_substring+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:137
        // Increment through path string
        path++;
    }

    // Null Terminate
    output[copypnt] = '\0';
   1fd52:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1fd55:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fd58:	01 d0                	add    eax,edx
   1fd5a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:140

    // If a string was copied return 0 else return 1
    if (output[0] != '\0')
   1fd5d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fd60:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fd63:	84 c0                	test   al,al
   1fd65:	74 07                	je     1fd6e <fatfs_get_substring+0xfe>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:141
        return 0;    // OK
   1fd67:	b8 00 00 00 00       	mov    eax,0x0
   1fd6c:	eb 05                	jmp    1fd73 <fatfs_get_substring+0x103>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:143
    else
        return -1;    // Error
   1fd6e:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:144
}
   1fd73:	c9                   	leave  
   1fd74:	c3                   	ret    

0001fd75 <fatfs_split_path>:
fatfs_split_path():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:152
// Returned is the path string and file Name string
// E.g. C:\folder\file.zip -> path = C:\folder  filename = file.zip
// E.g. C:\file.zip -> path = [blank]  filename = file.zip
//-----------------------------------------------------------------------------
int fatfs_split_path(char *full_path, char *path, int max_path, char *filename, int max_filename)
{
   1fd75:	55                   	push   ebp
   1fd76:	89 e5                	mov    ebp,esp
   1fd78:	53                   	push   ebx
   1fd79:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:156
    int strindex;

    // Count the levels to the filepath
    int levels = fatfs_total_path_levels(full_path);
   1fd7c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fd7f:	e8 5c fe ff ff       	call   1fbe0 <fatfs_total_path_levels>
   1fd84:	83 c4 04             	add    esp,0x4
   1fd87:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:157
    if (levels == -1)
   1fd8a:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   1fd8e:	75 0a                	jne    1fd9a <fatfs_split_path+0x25>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:158
        return -1;
   1fd90:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1fd95:	e9 88 00 00 00       	jmp    1fe22 <fatfs_split_path+0xad>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:161

    // Get filename part of string
    if (fatfs_get_substring(full_path, levels, filename, max_filename) != 0)
   1fd9a:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   1fd9d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1fda0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1fda3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fda6:	e8 c5 fe ff ff       	call   1fc70 <fatfs_get_substring>
   1fdab:	83 c4 10             	add    esp,0x10
   1fdae:	85 c0                	test   eax,eax
   1fdb0:	74 07                	je     1fdb9 <fatfs_split_path+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:162
        return -1;
   1fdb2:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1fdb7:	eb 69                	jmp    1fe22 <fatfs_split_path+0xad>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:165

    // If root file
    if (levels == 0)
   1fdb9:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1fdbd:	75 08                	jne    1fdc7 <fatfs_split_path+0x52>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:166
        path[0] = '\0';
   1fdbf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fdc2:	c6 00 00             	mov    BYTE PTR [eax],0x0
   1fdc5:	eb 56                	jmp    1fe1d <fatfs_split_path+0xa8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:169
    else
    {
        strindex = (int)strlen(full_path) - (int)strlen(filename);
   1fdc7:	83 ec 0c             	sub    esp,0xc
   1fdca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fdcd:	e8 b6 74 00 00       	call   27288 <strlen>
   1fdd2:	83 c4 10             	add    esp,0x10
   1fdd5:	89 c3                	mov    ebx,eax
   1fdd7:	83 ec 0c             	sub    esp,0xc
   1fdda:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1fddd:	e8 a6 74 00 00       	call   27288 <strlen>
   1fde2:	83 c4 10             	add    esp,0x10
   1fde5:	29 c3                	sub    ebx,eax
   1fde7:	89 d8                	mov    eax,ebx
   1fde9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:170
        if (strindex > max_path)
   1fdec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fdef:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1fdf2:	7e 06                	jle    1fdfa <fatfs_split_path+0x85>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:171
            strindex = max_path;
   1fdf4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fdf7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:173

        memcpy(path, full_path, strindex);
   1fdfa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fdfd:	83 ec 04             	sub    esp,0x4
   1fe00:	50                   	push   eax
   1fe01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fe04:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1fe07:	e8 10 5c 00 00       	call   25a1c <memcpy>
   1fe0c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:174
        path[strindex-1] = '\0';
   1fe0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fe12:	8d 50 ff             	lea    edx,[eax-0x1]
   1fe15:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fe18:	01 d0                	add    eax,edx
   1fe1a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:177
    }

    return 0;
   1fe1d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:178
}
   1fe22:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1fe25:	c9                   	leave  
   1fe26:	c3                   	ret    

0001fe27 <FileString_StrCmpNoCase>:
FileString_StrCmpNoCase():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:183
//-----------------------------------------------------------------------------
// FileString_StrCmpNoCase: Compare two strings case with case sensitivity
//-----------------------------------------------------------------------------
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
   1fe27:	55                   	push   ebp
   1fe28:	89 e5                	mov    ebp,esp
   1fe2a:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:187
    int diff;
    char a,b;

    while (n--)
   1fe2d:	eb 74                	jmp    1fea3 <FileString_StrCmpNoCase+0x7c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:189
    {
        a = *s1;
   1fe2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fe32:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fe35:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:190
        b = *s2;
   1fe38:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fe3b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fe3e:	88 45 fe             	mov    BYTE PTR [ebp-0x2],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:193

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
   1fe41:	80 7d ff 40          	cmp    BYTE PTR [ebp-0x1],0x40
   1fe45:	7e 10                	jle    1fe57 <FileString_StrCmpNoCase+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:193 (discriminator 1)
   1fe47:	80 7d ff 5a          	cmp    BYTE PTR [ebp-0x1],0x5a
   1fe4b:	7f 0a                	jg     1fe57 <FileString_StrCmpNoCase+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:194
            a+= 32;
   1fe4d:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   1fe51:	83 c0 20             	add    eax,0x20
   1fe54:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:195
        if ((b>='A') && (b<='Z'))
   1fe57:	80 7d fe 40          	cmp    BYTE PTR [ebp-0x2],0x40
   1fe5b:	7e 10                	jle    1fe6d <FileString_StrCmpNoCase+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:195 (discriminator 1)
   1fe5d:	80 7d fe 5a          	cmp    BYTE PTR [ebp-0x2],0x5a
   1fe61:	7f 0a                	jg     1fe6d <FileString_StrCmpNoCase+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:196
            b+= 32;
   1fe63:	0f b6 45 fe          	movzx  eax,BYTE PTR [ebp-0x2]
   1fe67:	83 c0 20             	add    eax,0x20
   1fe6a:	88 45 fe             	mov    BYTE PTR [ebp-0x2],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:198

        diff = a - b;
   1fe6d:	0f be 55 ff          	movsx  edx,BYTE PTR [ebp-0x1]
   1fe71:	0f be 45 fe          	movsx  eax,BYTE PTR [ebp-0x2]
   1fe75:	29 c2                	sub    edx,eax
   1fe77:	89 d0                	mov    eax,edx
   1fe79:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:201

        // If different
        if (diff)
   1fe7c:	83 7d f8 00          	cmp    DWORD PTR [ebp-0x8],0x0
   1fe80:	74 05                	je     1fe87 <FileString_StrCmpNoCase+0x60>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:202
            return diff;
   1fe82:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1fe85:	eb 32                	jmp    1feb9 <FileString_StrCmpNoCase+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:205

        // If run out of strings
        if ( (*s1 == 0) || (*s2 == 0) )
   1fe87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fe8a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fe8d:	84 c0                	test   al,al
   1fe8f:	74 23                	je     1feb4 <FileString_StrCmpNoCase+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:205 (discriminator 1)
   1fe91:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fe94:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fe97:	84 c0                	test   al,al
   1fe99:	74 19                	je     1feb4 <FileString_StrCmpNoCase+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:208
            break;

        s1++;
   1fe9b:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:209
        s2++;
   1fe9f:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:187
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
   1fea3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fea6:	8d 50 ff             	lea    edx,[eax-0x1]
   1fea9:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   1feac:	85 c0                	test   eax,eax
   1feae:	0f 85 7b ff ff ff    	jne    1fe2f <FileString_StrCmpNoCase+0x8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:211
            break;

        s1++;
        s2++;
    }
    return 0;
   1feb4:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:212
}
   1feb9:	c9                   	leave  
   1feba:	c3                   	ret    

0001febb <FileString_GetExtension>:
FileString_GetExtension():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:218
//-----------------------------------------------------------------------------
// FileString_GetExtension: Get index to extension within filename
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_GetExtension(char *str)
{
   1febb:	55                   	push   ebp
   1febc:	89 e5                	mov    ebp,esp
   1febe:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:219
    int dotPos = -1;
   1fec1:	c7 45 fc ff ff ff ff 	mov    DWORD PTR [ebp-0x4],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:220
    char *strSrc = str;
   1fec8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fecb:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:223

    // Find last '.' in string (if at all)
    while (*strSrc)
   1fece:	eb 1b                	jmp    1feeb <FileString_GetExtension+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:225
    {
        if (*strSrc=='.')
   1fed0:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1fed3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fed6:	3c 2e                	cmp    al,0x2e
   1fed8:	75 0d                	jne    1fee7 <FileString_GetExtension+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:226
            dotPos = (int)(strSrc-str);
   1feda:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   1fedd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fee0:	29 c2                	sub    edx,eax
   1fee2:	89 d0                	mov    eax,edx
   1fee4:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:228

        strSrc++;
   1fee7:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:223
{
    int dotPos = -1;
    char *strSrc = str;

    // Find last '.' in string (if at all)
    while (*strSrc)
   1feeb:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1feee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fef1:	84 c0                	test   al,al
   1fef3:	75 db                	jne    1fed0 <FileString_GetExtension+0x15>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:231
            dotPos = (int)(strSrc-str);

        strSrc++;
    }

    return dotPos;
   1fef5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:232
}
   1fef8:	c9                   	leave  
   1fef9:	c3                   	ret    

0001fefa <FileString_TrimLength>:
FileString_TrimLength():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:238
//-----------------------------------------------------------------------------
// FileString_TrimLength: Get length of string excluding trailing spaces
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
   1fefa:	55                   	push   ebp
   1fefb:	89 e5                	mov    ebp,esp
   1fefd:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:239
    int length = strLen;
   1ff00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ff03:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:240
    char *strSrc = str+strLen-1;
   1ff06:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ff09:	8d 50 ff             	lea    edx,[eax-0x1]
   1ff0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ff0f:	01 d0                	add    eax,edx
   1ff11:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:243

    // Find last non white space
    while (strLen != 0)
   1ff14:	eb 1f                	jmp    1ff35 <FileString_TrimLength+0x3b>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:245
    {
        if (*strSrc == ' ')
   1ff16:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1ff19:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ff1c:	3c 20                	cmp    al,0x20
   1ff1e:	75 1d                	jne    1ff3d <FileString_TrimLength+0x43>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:246
            length = (int)(strSrc - str);
   1ff20:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   1ff23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ff26:	29 c2                	sub    edx,eax
   1ff28:	89 d0                	mov    eax,edx
   1ff2a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:250
        else
            break;

        strSrc--;
   1ff2d:	83 6d f8 01          	sub    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:251
        strLen--;
   1ff31:	83 6d 0c 01          	sub    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:243
{
    int length = strLen;
    char *strSrc = str+strLen-1;

    // Find last non white space
    while (strLen != 0)
   1ff35:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1ff39:	75 db                	jne    1ff16 <FileString_TrimLength+0x1c>
   1ff3b:	eb 01                	jmp    1ff3e <FileString_TrimLength+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:248
    {
        if (*strSrc == ' ')
            length = (int)(strSrc - str);
        else
            break;
   1ff3d:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:254

        strSrc--;
        strLen--;
    }

    return length;
   1ff3e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:255
}
   1ff41:	c9                   	leave  
   1ff42:	c3                   	ret    

0001ff43 <fatfs_compare_names>:
fatfs_compare_names():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:261
//-----------------------------------------------------------------------------
// fatfs_compare_names: Compare two filenames (without copying or changing origonals)
// Returns 1 if match, 0 if not
//-----------------------------------------------------------------------------
int fatfs_compare_names(char* strA, char* strB)
{
   1ff43:	55                   	push   ebp
   1ff44:	89 e5                	mov    ebp,esp
   1ff46:	53                   	push   ebx
   1ff47:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:262
    char *ext1 = NULL;
   1ff4a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:263
    char *ext2 = NULL;
   1ff51:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:268
    int ext1Pos, ext2Pos;
    int file1Len, file2Len;

    // Get both files extension
    ext1Pos = FileString_GetExtension(strA);
   1ff58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ff5b:	e8 5b ff ff ff       	call   1febb <FileString_GetExtension>
   1ff60:	83 c4 04             	add    esp,0x4
   1ff63:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:269
    ext2Pos = FileString_GetExtension(strB);
   1ff66:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1ff69:	e8 4d ff ff ff       	call   1febb <FileString_GetExtension>
   1ff6e:	83 c4 04             	add    esp,0x4
   1ff71:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:274

    // NOTE: Extension position can be different for matching
    // filename if trailing space are present before it!
    // Check that if one has an extension, so does the other
    if ((ext1Pos==-1) && (ext2Pos!=-1))
   1ff74:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   1ff78:	75 10                	jne    1ff8a <fatfs_compare_names+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:274 (discriminator 1)
   1ff7a:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
   1ff7e:	74 0a                	je     1ff8a <fatfs_compare_names+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:275
        return 0;
   1ff80:	b8 00 00 00 00       	mov    eax,0x0
   1ff85:	e9 21 01 00 00       	jmp    200ab <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:276
    if ((ext2Pos==-1) && (ext1Pos!=-1))
   1ff8a:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
   1ff8e:	75 10                	jne    1ffa0 <fatfs_compare_names+0x5d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:276 (discriminator 1)
   1ff90:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   1ff94:	74 0a                	je     1ffa0 <fatfs_compare_names+0x5d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:277
        return 0;
   1ff96:	b8 00 00 00 00       	mov    eax,0x0
   1ff9b:	e9 0b 01 00 00       	jmp    200ab <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:280

    // If they both have extensions, compare them
    if (ext1Pos!=-1)
   1ffa0:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   1ffa4:	0f 84 84 00 00 00    	je     2002e <fatfs_compare_names+0xeb>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:283
    {
        // Set pointer to start of extension
        ext1 = strA+ext1Pos+1;
   1ffaa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1ffad:	8d 50 01             	lea    edx,[eax+0x1]
   1ffb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ffb3:	01 d0                	add    eax,edx
   1ffb5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:284
        ext2 = strB+ext2Pos+1;
   1ffb8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1ffbb:	8d 50 01             	lea    edx,[eax+0x1]
   1ffbe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ffc1:	01 d0                	add    eax,edx
   1ffc3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:287

        // Verify that the file extension lengths match!
        if (strlen(ext1) != strlen(ext2))
   1ffc6:	83 ec 0c             	sub    esp,0xc
   1ffc9:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1ffcc:	e8 b7 72 00 00       	call   27288 <strlen>
   1ffd1:	83 c4 10             	add    esp,0x10
   1ffd4:	89 c3                	mov    ebx,eax
   1ffd6:	83 ec 0c             	sub    esp,0xc
   1ffd9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1ffdc:	e8 a7 72 00 00       	call   27288 <strlen>
   1ffe1:	83 c4 10             	add    esp,0x10
   1ffe4:	39 c3                	cmp    ebx,eax
   1ffe6:	74 0a                	je     1fff2 <fatfs_compare_names+0xaf>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:288
            return 0;
   1ffe8:	b8 00 00 00 00       	mov    eax,0x0
   1ffed:	e9 b9 00 00 00       	jmp    200ab <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:291

        // If they dont match
        if (FileString_StrCmpNoCase(ext1, ext2, (int)strlen(ext1))!=0)
   1fff2:	83 ec 0c             	sub    esp,0xc
   1fff5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1fff8:	e8 8b 72 00 00       	call   27288 <strlen>
   1fffd:	83 c4 10             	add    esp,0x10
   20000:	83 ec 04             	sub    esp,0x4
   20003:	50                   	push   eax
   20004:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   20007:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   2000a:	e8 18 fe ff ff       	call   1fe27 <FileString_StrCmpNoCase>
   2000f:	83 c4 10             	add    esp,0x10
   20012:	85 c0                	test   eax,eax
   20014:	74 0a                	je     20020 <fatfs_compare_names+0xdd>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:292
            return 0;
   20016:	b8 00 00 00 00       	mov    eax,0x0
   2001b:	e9 8b 00 00 00       	jmp    200ab <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:295

        // Filelength is upto extensions
        file1Len = ext1Pos;
   20020:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   20023:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:296
        file2Len = ext2Pos;
   20026:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   20029:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   2002c:	eb 22                	jmp    20050 <fatfs_compare_names+0x10d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:302
    }
    // No extensions
    else
    {
        // Filelength is actual filelength
        file1Len = (int)strlen(strA);
   2002e:	83 ec 0c             	sub    esp,0xc
   20031:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20034:	e8 4f 72 00 00       	call   27288 <strlen>
   20039:	83 c4 10             	add    esp,0x10
   2003c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:303
        file2Len = (int)strlen(strB);
   2003f:	83 ec 0c             	sub    esp,0xc
   20042:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   20045:	e8 3e 72 00 00       	call   27288 <strlen>
   2004a:	83 c4 10             	add    esp,0x10
   2004d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:307
    }

    // Find length without trailing spaces (before ext)
    file1Len = FileString_TrimLength(strA, file1Len);
   20050:	83 ec 08             	sub    esp,0x8
   20053:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   20056:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20059:	e8 9c fe ff ff       	call   1fefa <FileString_TrimLength>
   2005e:	83 c4 10             	add    esp,0x10
   20061:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:308
    file2Len = FileString_TrimLength(strB, file2Len);
   20064:	83 ec 08             	sub    esp,0x8
   20067:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   2006a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2006d:	e8 88 fe ff ff       	call   1fefa <FileString_TrimLength>
   20072:	83 c4 10             	add    esp,0x10
   20075:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:311

    // Check the file lengths match
    if (file1Len!=file2Len)
   20078:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2007b:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   2007e:	74 07                	je     20087 <fatfs_compare_names+0x144>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:312
        return 0;
   20080:	b8 00 00 00 00       	mov    eax,0x0
   20085:	eb 24                	jmp    200ab <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:315

    // Compare main part of filenames
    if (FileString_StrCmpNoCase(strA, strB, file1Len)!=0)
   20087:	83 ec 04             	sub    esp,0x4
   2008a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2008d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   20090:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20093:	e8 8f fd ff ff       	call   1fe27 <FileString_StrCmpNoCase>
   20098:	83 c4 10             	add    esp,0x10
   2009b:	85 c0                	test   eax,eax
   2009d:	74 07                	je     200a6 <fatfs_compare_names+0x163>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:316
        return 0;
   2009f:	b8 00 00 00 00       	mov    eax,0x0
   200a4:	eb 05                	jmp    200ab <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:318
    else
        return 1;
   200a6:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:319
}
   200ab:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   200ae:	c9                   	leave  
   200af:	c3                   	ret    

000200b0 <fatfs_string_ends_with_slash>:
fatfs_string_ends_with_slash():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:324
//-----------------------------------------------------------------------------
// fatfs_string_ends_with_slash: Does the string end with a slash (\ or /)
//-----------------------------------------------------------------------------
int fatfs_string_ends_with_slash(char *path)
{
   200b0:	55                   	push   ebp
   200b1:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:325
    if (path)
   200b3:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   200b7:	74 38                	je     200f1 <fatfs_string_ends_with_slash+0x41>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:327
    {
        while (*path)
   200b9:	eb 2c                	jmp    200e7 <fatfs_string_ends_with_slash+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:330
        {
            // Last character?
            if (!(*(path+1)))
   200bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   200be:	83 c0 01             	add    eax,0x1
   200c1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   200c4:	84 c0                	test   al,al
   200c6:	75 1b                	jne    200e3 <fatfs_string_ends_with_slash+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:332
            {
                if (*path == '\\' || *path == '/')
   200c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   200cb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   200ce:	3c 5c                	cmp    al,0x5c
   200d0:	74 0a                	je     200dc <fatfs_string_ends_with_slash+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:332 (discriminator 1)
   200d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   200d5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   200d8:	3c 2f                	cmp    al,0x2f
   200da:	75 07                	jne    200e3 <fatfs_string_ends_with_slash+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:333
                    return 1;
   200dc:	b8 01 00 00 00       	mov    eax,0x1
   200e1:	eb 13                	jmp    200f6 <fatfs_string_ends_with_slash+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:336
            }

            path++;
   200e3:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:327
//-----------------------------------------------------------------------------
int fatfs_string_ends_with_slash(char *path)
{
    if (path)
    {
        while (*path)
   200e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   200ea:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   200ed:	84 c0                	test   al,al
   200ef:	75 ca                	jne    200bb <fatfs_string_ends_with_slash+0xb>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:340

            path++;
        }
    }

    return 0;
   200f1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:341
}
   200f6:	5d                   	pop    ebp
   200f7:	c3                   	ret    

000200f8 <fatfs_get_sfn_display_name>:
fatfs_get_sfn_display_name():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:346
//-----------------------------------------------------------------------------
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
   200f8:	55                   	push   ebp
   200f9:	89 e5                	mov    ebp,esp
   200fb:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:347
    int len = 0;
   200fe:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:348
    while (*in && len <= 11)
   20105:	eb 40                	jmp    20147 <fatfs_get_sfn_display_name+0x4f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:350
    {
        char a = *in++;
   20107:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2010a:	8d 50 01             	lea    edx,[eax+0x1]
   2010d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
   20110:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20113:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:352

        if (a == ' ')
   20116:	80 7d fb 20          	cmp    BYTE PTR [ebp-0x5],0x20
   2011a:	75 02                	jne    2011e <fatfs_get_sfn_display_name+0x26>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:353
            continue;
   2011c:	eb 29                	jmp    20147 <fatfs_get_sfn_display_name+0x4f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:355
        // Make lower case if uppercase
        else if ((a>='A') && (a<='Z'))
   2011e:	80 7d fb 40          	cmp    BYTE PTR [ebp-0x5],0x40
   20122:	7e 10                	jle    20134 <fatfs_get_sfn_display_name+0x3c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:355 (discriminator 1)
   20124:	80 7d fb 5a          	cmp    BYTE PTR [ebp-0x5],0x5a
   20128:	7f 0a                	jg     20134 <fatfs_get_sfn_display_name+0x3c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:356
            a+= 32;
   2012a:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   2012e:	83 c0 20             	add    eax,0x20
   20131:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:358

        *out++ = a;
   20134:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20137:	8d 50 01             	lea    edx,[eax+0x1]
   2013a:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   2013d:	0f b6 55 fb          	movzx  edx,BYTE PTR [ebp-0x5]
   20141:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:359
        len++;
   20143:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:348
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
    int len = 0;
    while (*in && len <= 11)
   20147:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2014a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2014d:	84 c0                	test   al,al
   2014f:	74 06                	je     20157 <fatfs_get_sfn_display_name+0x5f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:348 (discriminator 1)
   20151:	83 7d fc 0b          	cmp    DWORD PTR [ebp-0x4],0xb
   20155:	7e b0                	jle    20107 <fatfs_get_sfn_display_name+0xf>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:362

        *out++ = a;
        len++;
    }

    *out = '\0';
   20157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2015a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:363
    return 1;
   2015d:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:364
}
   20162:	c9                   	leave  
   20163:	c3                   	ret    

00020164 <fatfs_get_extension>:
fatfs_get_extension():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:371
// fatfs_get_extension: Get extension of filename passed in 'filename'.
// Returned extension is always lower case.
// Returns: 1 if ok, 0 if not.
//-----------------------------------------------------------------------------
int fatfs_get_extension(char* filename, char* out, int maxlen)
{
   20164:	55                   	push   ebp
   20165:	89 e5                	mov    ebp,esp
   20167:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:372
    int len = 0;
   2016a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:375

    // Get files extension offset
    int ext_pos = FileString_GetExtension(filename);
   20171:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20174:	e8 42 fd ff ff       	call   1febb <FileString_GetExtension>
   20179:	83 c4 04             	add    esp,0x4
   2017c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:377

    if (ext_pos > 0 && out && maxlen)
   2017f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20183:	7e 71                	jle    201f6 <fatfs_get_extension+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:377 (discriminator 1)
   20185:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   20189:	74 6b                	je     201f6 <fatfs_get_extension+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:377 (discriminator 2)
   2018b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   2018f:	74 65                	je     201f6 <fatfs_get_extension+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:379
    {
        filename += ext_pos + 1;
   20191:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20194:	83 c0 01             	add    eax,0x1
   20197:	01 45 08             	add    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:381

        while (*filename && len < (maxlen-1))
   2019a:	eb 38                	jmp    201d4 <fatfs_get_extension+0x70>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:383
        {
            char a = *filename++;
   2019c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2019f:	8d 50 01             	lea    edx,[eax+0x1]
   201a2:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   201a5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   201a8:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:386

            // Make lowercase if uppercase
            if ((a>='A') && (a<='Z'))
   201ab:	80 7d fb 40          	cmp    BYTE PTR [ebp-0x5],0x40
   201af:	7e 10                	jle    201c1 <fatfs_get_extension+0x5d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:386 (discriminator 1)
   201b1:	80 7d fb 5a          	cmp    BYTE PTR [ebp-0x5],0x5a
   201b5:	7f 0a                	jg     201c1 <fatfs_get_extension+0x5d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:387
                a+= 32;
   201b7:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   201bb:	83 c0 20             	add    eax,0x20
   201be:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:389

            *out++ = a;
   201c1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   201c4:	8d 50 01             	lea    edx,[eax+0x1]
   201c7:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
   201ca:	0f b6 55 fb          	movzx  edx,BYTE PTR [ebp-0x5]
   201ce:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:390
            len++;
   201d0:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:381

    if (ext_pos > 0 && out && maxlen)
    {
        filename += ext_pos + 1;

        while (*filename && len < (maxlen-1))
   201d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   201d7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   201da:	84 c0                	test   al,al
   201dc:	74 0b                	je     201e9 <fatfs_get_extension+0x85>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:381 (discriminator 1)
   201de:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   201e1:	83 e8 01             	sub    eax,0x1
   201e4:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   201e7:	7f b3                	jg     2019c <fatfs_get_extension+0x38>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:393

            *out++ = a;
            len++;
        }

        *out = '\0';
   201e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   201ec:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:394
        return 1;
   201ef:	b8 01 00 00 00       	mov    eax,0x1
   201f4:	eb 05                	jmp    201fb <fatfs_get_extension+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:397
    }

    return 0;
   201f6:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:398
}
   201fb:	c9                   	leave  
   201fc:	c3                   	ret    

000201fd <fatfs_create_path_string>:
fatfs_create_path_string():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:404
//-----------------------------------------------------------------------------
// fatfs_create_path_string: Append path & filename to create file path string.
// Returns: 1 if ok, 0 if not.
//-----------------------------------------------------------------------------
int fatfs_create_path_string(char* path, char *filename, char* out, int maxlen)
{
   201fd:	55                   	push   ebp
   201fe:	89 e5                	mov    ebp,esp
   20200:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:405
    int len = 0;
   20203:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:406
    char last = 0;
   2020a:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:407
    char seperator = '/';
   2020e:	c6 45 fa 2f          	mov    BYTE PTR [ebp-0x6],0x2f
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:409

    if (path && filename && out && maxlen > 0)
   20212:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   20216:	0f 84 bb 00 00 00    	je     202d7 <fatfs_create_path_string+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:409 (discriminator 1)
   2021c:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   20220:	0f 84 b1 00 00 00    	je     202d7 <fatfs_create_path_string+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:409 (discriminator 2)
   20226:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   2022a:	0f 84 a7 00 00 00    	je     202d7 <fatfs_create_path_string+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:409 (discriminator 3)
   20230:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   20234:	0f 8e 9d 00 00 00    	jle    202d7 <fatfs_create_path_string+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:411
    {
        while (*path && len < (maxlen-2))
   2023a:	eb 2c                	jmp    20268 <fatfs_create_path_string+0x6b>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:413
        {
            last = *path++;
   2023c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2023f:	8d 50 01             	lea    edx,[eax+0x1]
   20242:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   20245:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20248:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:414
            if (last == '\\')
   2024b:	80 7d fb 5c          	cmp    BYTE PTR [ebp-0x5],0x5c
   2024f:	75 04                	jne    20255 <fatfs_create_path_string+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:415
                seperator = '\\';
   20251:	c6 45 fa 5c          	mov    BYTE PTR [ebp-0x6],0x5c
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:416
            *out++ = last;
   20255:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20258:	8d 50 01             	lea    edx,[eax+0x1]
   2025b:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   2025e:	0f b6 55 fb          	movzx  edx,BYTE PTR [ebp-0x5]
   20262:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:417
            len++;
   20264:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:411
    char last = 0;
    char seperator = '/';

    if (path && filename && out && maxlen > 0)
    {
        while (*path && len < (maxlen-2))
   20268:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2026b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2026e:	84 c0                	test   al,al
   20270:	74 0b                	je     2027d <fatfs_create_path_string+0x80>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:411 (discriminator 1)
   20272:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   20275:	83 e8 02             	sub    eax,0x2
   20278:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   2027b:	7f bf                	jg     2023c <fatfs_create_path_string+0x3f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:421
            *out++ = last;
            len++;
        }

        // Add a seperator if trailing one not found
        if (last != '\\' && last != '/')
   2027d:	80 7d fb 5c          	cmp    BYTE PTR [ebp-0x5],0x5c
   20281:	74 32                	je     202b5 <fatfs_create_path_string+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:421 (discriminator 1)
   20283:	80 7d fb 2f          	cmp    BYTE PTR [ebp-0x5],0x2f
   20287:	74 2c                	je     202b5 <fatfs_create_path_string+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:422
            *out++ = seperator;
   20289:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2028c:	8d 50 01             	lea    edx,[eax+0x1]
   2028f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   20292:	0f b6 55 fa          	movzx  edx,BYTE PTR [ebp-0x6]
   20296:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:424

        while (*filename && len < (maxlen-1))
   20298:	eb 1b                	jmp    202b5 <fatfs_create_path_string+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:426
        {
            *out++ = *filename++;
   2029a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2029d:	8d 50 01             	lea    edx,[eax+0x1]
   202a0:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   202a3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   202a6:	8d 4a 01             	lea    ecx,[edx+0x1]
   202a9:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   202ac:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   202af:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:427
            len++;
   202b1:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:424

        // Add a seperator if trailing one not found
        if (last != '\\' && last != '/')
            *out++ = seperator;

        while (*filename && len < (maxlen-1))
   202b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   202b8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   202bb:	84 c0                	test   al,al
   202bd:	74 0b                	je     202ca <fatfs_create_path_string+0xcd>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:424 (discriminator 1)
   202bf:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   202c2:	83 e8 01             	sub    eax,0x1
   202c5:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   202c8:	7f d0                	jg     2029a <fatfs_create_path_string+0x9d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:430
        {
            *out++ = *filename++;
            len++;
        }

        *out = '\0';
   202ca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   202cd:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:432

        return 1;
   202d0:	b8 01 00 00 00       	mov    eax,0x1
   202d5:	eb 05                	jmp    202dc <fatfs_create_path_string+0xdf>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:435
    }

    return 0;
   202d7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:436
}
   202dc:	c9                   	leave  
   202dd:	c3                   	ret    
   202de:	66 90                	xchg   ax,ax

000202e0 <fatfs_fat_init>:
fatfs_fat_init():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:61

//-----------------------------------------------------------------------------
// fatfs_fat_init:
//-----------------------------------------------------------------------------
void fatfs_fat_init(struct fatfs *fs)
{
   202e0:	55                   	push   ebp
   202e1:	89 e5                	mov    ebp,esp
   202e3:	53                   	push   ebx
   202e4:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:65
    int i;

    // FAT buffer chain head
    fs->fat_buffer_head = NULL;
   202e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   202ea:	c7 80 54 02 00 00 00 	mov    DWORD PTR [eax+0x254],0x0
   202f1:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:67

    for (i=0;i<FAT_BUFFERS;i++)
   202f4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   202fb:	e9 cf 00 00 00       	jmp    203cf <fatfs_fat_init+0xef>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:70 (discriminator 3)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   20300:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   20303:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20306:	c1 e0 04             	shl    eax,0x4
   20309:	89 c1                	mov    ecx,eax
   2030b:	c1 e1 05             	shl    ecx,0x5
   2030e:	01 c8                	add    eax,ecx
   20310:	01 d0                	add    eax,edx
   20312:	05 58 04 00 00       	add    eax,0x458
   20317:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:71 (discriminator 3)
        fs->fat_buffers[i].dirty = 0;
   2031d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   20320:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20323:	c1 e0 04             	shl    eax,0x4
   20326:	89 c1                	mov    ecx,eax
   20328:	c1 e1 05             	shl    ecx,0x5
   2032b:	01 c8                	add    eax,ecx
   2032d:	01 d0                	add    eax,edx
   2032f:	05 5c 04 00 00       	add    eax,0x45c
   20334:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:72 (discriminator 3)
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   2033a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2033d:	c1 e0 04             	shl    eax,0x4
   20340:	89 c2                	mov    edx,eax
   20342:	c1 e2 05             	shl    edx,0x5
   20345:	01 d0                	add    eax,edx
   20347:	8d 90 50 02 00 00    	lea    edx,[eax+0x250]
   2034d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20350:	01 d0                	add    eax,edx
   20352:	83 c0 08             	add    eax,0x8
   20355:	83 ec 04             	sub    esp,0x4
   20358:	68 00 02 00 00       	push   0x200
   2035d:	6a 00                	push   0x0
   2035f:	50                   	push   eax
   20360:	e8 c8 4c 00 00       	call   2502d <memset>
   20365:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:73 (discriminator 3)
        fs->fat_buffers[i].ptr = NULL;
   20368:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2036b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2036e:	c1 e0 04             	shl    eax,0x4
   20371:	89 c1                	mov    ecx,eax
   20373:	c1 e1 05             	shl    ecx,0x5
   20376:	01 c8                	add    eax,ecx
   20378:	01 d0                	add    eax,edx
   2037a:	05 60 04 00 00       	add    eax,0x460
   2037f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:76 (discriminator 3)

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   20385:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20388:	8b 90 54 02 00 00    	mov    edx,DWORD PTR [eax+0x254]
   2038e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   20391:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20394:	c1 e0 04             	shl    eax,0x4
   20397:	89 c3                	mov    ebx,eax
   20399:	c1 e3 05             	shl    ebx,0x5
   2039c:	01 d8                	add    eax,ebx
   2039e:	01 c8                	add    eax,ecx
   203a0:	05 64 04 00 00       	add    eax,0x464
   203a5:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:77 (discriminator 3)
        fs->fat_buffer_head = &fs->fat_buffers[i];
   203a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   203aa:	c1 e0 04             	shl    eax,0x4
   203ad:	89 c2                	mov    edx,eax
   203af:	c1 e2 05             	shl    edx,0x5
   203b2:	01 d0                	add    eax,edx
   203b4:	8d 90 50 02 00 00    	lea    edx,[eax+0x250]
   203ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   203bd:	01 d0                	add    eax,edx
   203bf:	8d 50 08             	lea    edx,[eax+0x8]
   203c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   203c5:	89 90 54 02 00 00    	mov    DWORD PTR [eax+0x254],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:67 (discriminator 3)
    int i;

    // FAT buffer chain head
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
   203cb:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:67 (discriminator 1)
   203cf:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   203d3:	0f 8e 27 ff ff ff    	jle    20300 <fatfs_fat_init+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:79

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
    }
}
   203d9:	90                   	nop
   203da:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   203dd:	c9                   	leave  
   203de:	c3                   	ret    

000203df <fatfs_fat_writeback>:
fatfs_fat_writeback():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:84
//-----------------------------------------------------------------------------
// fatfs_fat_writeback: Writeback 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
static int fatfs_fat_writeback(struct fatfs *fs, struct fat_buffer *pcur)
{
   203df:	55                   	push   ebp
   203e0:	89 e5                	mov    ebp,esp
   203e2:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:85
    if (pcur)
   203e5:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   203e9:	0f 84 9b 00 00 00    	je     2048a <fatfs_fat_writeback+0xab>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:88
    {
        // Writeback sector if changed
        if (pcur->dirty)
   203ef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   203f2:	8b 80 04 02 00 00    	mov    eax,DWORD PTR [eax+0x204]
   203f8:	85 c0                	test   eax,eax
   203fa:	0f 84 83 00 00 00    	je     20483 <fatfs_fat_writeback+0xa4>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:90
        {
            if (fs->disk_io.write_media)
   20400:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20403:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   20406:	85 c0                	test   eax,eax
   20408:	74 6c                	je     20476 <fatfs_fat_writeback+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:92
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
   2040a:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:93
                uint32 offset = pcur->address - fs->fat_begin_lba;
   20411:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20414:	8b 90 00 02 00 00    	mov    edx,DWORD PTR [eax+0x200]
   2041a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2041d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   20420:	29 c2                	sub    edx,eax
   20422:	89 d0                	mov    eax,edx
   20424:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:96

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
   20427:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2042a:	8d 50 01             	lea    edx,[eax+0x1]
   2042d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20430:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   20433:	39 c2                	cmp    edx,eax
   20435:	77 09                	ja     20440 <fatfs_fat_writeback+0x61>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:97
                    sectors = FAT_BUFFER_SECTORS;
   20437:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
   2043e:	eb 0c                	jmp    2044c <fatfs_fat_writeback+0x6d>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:99
                else
                    sectors = fs->fat_sectors - offset;
   20440:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20443:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   20446:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
   20449:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:101

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
   2044c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2044f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   20452:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   20455:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20458:	8b 92 00 02 00 00    	mov    edx,DWORD PTR [edx+0x200]
   2045e:	83 ec 04             	sub    esp,0x4
   20461:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   20464:	51                   	push   ecx
   20465:	52                   	push   edx
   20466:	ff d0                	call   eax
   20468:	83 c4 10             	add    esp,0x10
   2046b:	85 c0                	test   eax,eax
   2046d:	75 07                	jne    20476 <fatfs_fat_writeback+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:102
                    return 0;
   2046f:	b8 00 00 00 00       	mov    eax,0x0
   20474:	eb 19                	jmp    2048f <fatfs_fat_writeback+0xb0>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:105
            }

            pcur->dirty = 0;
   20476:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20479:	c7 80 04 02 00 00 00 	mov    DWORD PTR [eax+0x204],0x0
   20480:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:108
        }

        return 1;
   20483:	b8 01 00 00 00       	mov    eax,0x1
   20488:	eb 05                	jmp    2048f <fatfs_fat_writeback+0xb0>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:111
    }
    else
        return 0;
   2048a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:112
}
   2048f:	c9                   	leave  
   20490:	c3                   	ret    

00020491 <fatfs_fat_read_sector>:
fatfs_fat_read_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:117
//-----------------------------------------------------------------------------
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
   20491:	55                   	push   ebp
   20492:	89 e5                	mov    ebp,esp
   20494:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:118
    struct fat_buffer *last = NULL;
   20497:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:119
    struct fat_buffer *pcur = fs->fat_buffer_head;
   2049e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   204a1:	8b 80 54 02 00 00    	mov    eax,DWORD PTR [eax+0x254]
   204a7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:122

    // Itterate through sector buffer list
    while (pcur)
   204aa:	eb 60                	jmp    2050c <fatfs_fat_read_sector+0x7b>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:125
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
   204ac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   204af:	8b 80 00 02 00 00    	mov    eax,DWORD PTR [eax+0x200]
   204b5:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   204b8:	77 11                	ja     204cb <fatfs_fat_read_sector+0x3a>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:125 (discriminator 1)
   204ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   204bd:	8b 80 00 02 00 00    	mov    eax,DWORD PTR [eax+0x200]
   204c3:	83 c0 01             	add    eax,0x1
   204c6:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   204c9:	77 49                	ja     20514 <fatfs_fat_read_sector+0x83>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:129
            break;

        // End of list?
        if (pcur->next == NULL)
   204cb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   204ce:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
   204d4:	85 c0                	test   eax,eax
   204d6:	75 22                	jne    204fa <fatfs_fat_read_sector+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:132
        {
            // Remove buffer from list
            if (last)
   204d8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   204dc:	74 0f                	je     204ed <fatfs_fat_read_sector+0x5c>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:133
                last->next = NULL;
   204de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   204e1:	c7 80 0c 02 00 00 00 	mov    DWORD PTR [eax+0x20c],0x0
   204e8:	00 00 00 
   204eb:	eb 0d                	jmp    204fa <fatfs_fat_read_sector+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:136
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
   204ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   204f0:	c7 80 54 02 00 00 00 	mov    DWORD PTR [eax+0x254],0x0
   204f7:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:139
        }

        last = pcur;
   204fa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   204fd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:140
        pcur = pcur->next;
   20500:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20503:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
   20509:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:122
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
   2050c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20510:	75 9a                	jne    204ac <fatfs_fat_read_sector+0x1b>
   20512:	eb 01                	jmp    20515 <fatfs_fat_read_sector+0x84>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:126
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
            break;
   20514:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:144
        last = pcur;
        pcur = pcur->next;
    }

    // We found the sector already in FAT buffer chain
    if (pcur)
   20515:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20519:	74 29                	je     20544 <fatfs_fat_read_sector+0xb3>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:146
    {
        pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * FAT_SECTOR_SIZE));
   2051b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2051e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20521:	8b 80 00 02 00 00    	mov    eax,DWORD PTR [eax+0x200]
   20527:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   2052a:	29 c1                	sub    ecx,eax
   2052c:	89 c8                	mov    eax,ecx
   2052e:	c1 e0 09             	shl    eax,0x9
   20531:	01 c2                	add    edx,eax
   20533:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20536:	89 90 08 02 00 00    	mov    DWORD PTR [eax+0x208],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:147
        return pcur;
   2053c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2053f:	e9 9e 00 00 00       	jmp    205e2 <fatfs_fat_read_sector+0x151>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:151
    }

    // Else, we removed the last item from the list
    pcur = last;
   20544:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20547:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:154

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
   2054a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2054d:	8b 90 54 02 00 00    	mov    edx,DWORD PTR [eax+0x254]
   20553:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20556:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:155
    fs->fat_buffer_head = pcur;
   2055c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2055f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20562:	89 90 54 02 00 00    	mov    DWORD PTR [eax+0x254],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:158

    // Writeback sector if changed
    if (pcur->dirty)
   20568:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2056b:	8b 80 04 02 00 00    	mov    eax,DWORD PTR [eax+0x204]
   20571:	85 c0                	test   eax,eax
   20573:	74 1c                	je     20591 <fatfs_fat_read_sector+0x100>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:159
        if (!fatfs_fat_writeback(fs, pcur))
   20575:	83 ec 08             	sub    esp,0x8
   20578:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   2057b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2057e:	e8 5c fe ff ff       	call   203df <fatfs_fat_writeback>
   20583:	83 c4 10             	add    esp,0x10
   20586:	85 c0                	test   eax,eax
   20588:	75 07                	jne    20591 <fatfs_fat_read_sector+0x100>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:160
            return 0;
   2058a:	b8 00 00 00 00       	mov    eax,0x0
   2058f:	eb 51                	jmp    205e2 <fatfs_fat_read_sector+0x151>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:163

    // Address is now new sector
    pcur->address = sector;
   20591:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20594:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20597:	89 90 00 02 00 00    	mov    DWORD PTR [eax+0x200],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:166

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
   2059d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   205a0:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   205a3:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   205a6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   205a9:	8b 92 00 02 00 00    	mov    edx,DWORD PTR [edx+0x200]
   205af:	83 ec 04             	sub    esp,0x4
   205b2:	6a 01                	push   0x1
   205b4:	51                   	push   ecx
   205b5:	52                   	push   edx
   205b6:	ff d0                	call   eax
   205b8:	83 c4 10             	add    esp,0x10
   205bb:	85 c0                	test   eax,eax
   205bd:	75 14                	jne    205d3 <fatfs_fat_read_sector+0x142>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:169
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
   205bf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   205c2:	c7 80 00 02 00 00 ff 	mov    DWORD PTR [eax+0x200],0xffffffff
   205c9:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:170
        return NULL;
   205cc:	b8 00 00 00 00       	mov    eax,0x0
   205d1:	eb 0f                	jmp    205e2 <fatfs_fat_read_sector+0x151>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:173
    }

    pcur->ptr = pcur->sector;
   205d3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   205d6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   205d9:	89 90 08 02 00 00    	mov    DWORD PTR [eax+0x208],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:174
    return pcur;
   205df:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:175
}
   205e2:	c9                   	leave  
   205e3:	c3                   	ret    

000205e4 <fatfs_fat_purge>:
fatfs_fat_purge():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:180
//-----------------------------------------------------------------------------
// fatfs_fat_purge: Purge 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
int fatfs_fat_purge(struct fatfs *fs)
{
   205e4:	55                   	push   ebp
   205e5:	89 e5                	mov    ebp,esp
   205e7:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:181
    struct fat_buffer *pcur = fs->fat_buffer_head;
   205ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   205ed:	8b 80 54 02 00 00    	mov    eax,DWORD PTR [eax+0x254]
   205f3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:184

    // Itterate through sector buffer list
    while (pcur)
   205f6:	eb 35                	jmp    2062d <fatfs_fat_purge+0x49>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:187
    {
        // Writeback sector if changed
        if (pcur->dirty)
   205f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   205fb:	8b 80 04 02 00 00    	mov    eax,DWORD PTR [eax+0x204]
   20601:	85 c0                	test   eax,eax
   20603:	74 1c                	je     20621 <fatfs_fat_purge+0x3d>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:188
            if (!fatfs_fat_writeback(fs, pcur))
   20605:	83 ec 08             	sub    esp,0x8
   20608:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2060b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2060e:	e8 cc fd ff ff       	call   203df <fatfs_fat_writeback>
   20613:	83 c4 10             	add    esp,0x10
   20616:	85 c0                	test   eax,eax
   20618:	75 07                	jne    20621 <fatfs_fat_purge+0x3d>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:189
                return 0;
   2061a:	b8 00 00 00 00       	mov    eax,0x0
   2061f:	eb 17                	jmp    20638 <fatfs_fat_purge+0x54>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:191

        pcur = pcur->next;
   20621:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20624:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
   2062a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:184
int fatfs_fat_purge(struct fatfs *fs)
{
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
   2062d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20631:	75 c5                	jne    205f8 <fatfs_fat_purge+0x14>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:194
                return 0;

        pcur = pcur->next;
    }

    return 1;
   20633:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:195
}
   20638:	c9                   	leave  
   20639:	c3                   	ret    

0002063a <fatfs_find_next_cluster>:
fatfs_find_next_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:206
//-----------------------------------------------------------------------------
// fatfs_find_next_cluster: Return cluster number of next cluster in chain by
// reading FAT table and traversing it. Return 0xffffffff for end of chain.
//-----------------------------------------------------------------------------
uint32 fatfs_find_next_cluster(struct fatfs *fs, uint32 current_cluster)
{
   2063a:	55                   	push   ebp
   2063b:	89 e5                	mov    ebp,esp
   2063d:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:212
    uint32 fat_sector_offset, position;
    uint32 nextcluster;
    struct fat_buffer *pbuf;

    // Why is '..' labelled with cluster 0 when it should be 2 ??
    if (current_cluster == 0)
   20640:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   20644:	75 07                	jne    2064d <fatfs_find_next_cluster+0x13>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:213
        current_cluster = 2;
   20646:	c7 45 0c 02 00 00 00 	mov    DWORD PTR [ebp+0xc],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:216

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
   2064d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20650:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20653:	85 c0                	test   eax,eax
   20655:	75 0b                	jne    20662 <fatfs_find_next_cluster+0x28>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:217
        fat_sector_offset = current_cluster / 256;
   20657:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2065a:	c1 e8 08             	shr    eax,0x8
   2065d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   20660:	eb 09                	jmp    2066b <fatfs_find_next_cluster+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:219
    else
        fat_sector_offset = current_cluster / 128;
   20662:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20665:	c1 e8 07             	shr    eax,0x7
   20668:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:222

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   2066b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2066e:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   20671:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20674:	01 d0                	add    eax,edx
   20676:	83 ec 08             	sub    esp,0x8
   20679:	50                   	push   eax
   2067a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2067d:	e8 0f fe ff ff       	call   20491 <fatfs_fat_read_sector>
   20682:	83 c4 10             	add    esp,0x10
   20685:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:223
    if (!pbuf)
   20688:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   2068c:	75 0a                	jne    20698 <fatfs_find_next_cluster+0x5e>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:224
        return (FAT32_LAST_CLUSTER);
   2068e:	b8 ff ff ff ff       	mov    eax,0xffffffff
   20693:	e9 2a 01 00 00       	jmp    207c2 <fatfs_find_next_cluster+0x188>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:226

    if (fs->fat_type == FAT_TYPE_16)
   20698:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2069b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   2069e:	85 c0                	test   eax,eax
   206a0:	75 71                	jne    20713 <fatfs_find_next_cluster+0xd9>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:229
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (current_cluster - (fat_sector_offset * 256)) * 2;
   206a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   206a5:	c1 e0 08             	shl    eax,0x8
   206a8:	89 c2                	mov    edx,eax
   206aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   206ad:	29 d0                	sub    eax,edx
   206af:	01 c0                	add    eax,eax
   206b1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:232

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
   206b4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   206b7:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   206bd:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   206c0:	0f b7 d2             	movzx  edx,dx
   206c3:	83 c2 01             	add    edx,0x1
   206c6:	01 d0                	add    eax,edx
   206c8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   206cb:	0f b6 c0             	movzx  eax,al
   206ce:	c1 e0 08             	shl    eax,0x8
   206d1:	89 c1                	mov    ecx,eax
   206d3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   206d6:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   206dc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   206df:	0f b7 c0             	movzx  eax,ax
   206e2:	01 d0                	add    eax,edx
   206e4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   206e7:	0f b6 c0             	movzx  eax,al
   206ea:	01 c8                	add    eax,ecx
   206ec:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:235

        // If end of chain found
        if (nextcluster >= 0xFFF8 && nextcluster <= 0xFFFF)
   206ef:	81 7d f0 f7 ff 00 00 	cmp    DWORD PTR [ebp-0x10],0xfff7
   206f6:	0f 86 c3 00 00 00    	jbe    207bf <fatfs_find_next_cluster+0x185>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:235 (discriminator 1)
   206fc:	81 7d f0 ff ff 00 00 	cmp    DWORD PTR [ebp-0x10],0xffff
   20703:	0f 87 b6 00 00 00    	ja     207bf <fatfs_find_next_cluster+0x185>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:236
            return (FAT32_LAST_CLUSTER);
   20709:	b8 ff ff ff ff       	mov    eax,0xffffffff
   2070e:	e9 af 00 00 00       	jmp    207c2 <fatfs_find_next_cluster+0x188>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:241
    }
    else
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (current_cluster - (fat_sector_offset * 128)) * 4;
   20713:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20716:	c1 e0 07             	shl    eax,0x7
   20719:	89 c2                	mov    edx,eax
   2071b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2071e:	29 d0                	sub    eax,edx
   20720:	c1 e0 02             	shl    eax,0x2
   20723:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:244

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);
   20726:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20729:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   2072f:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   20732:	0f b7 d2             	movzx  edx,dx
   20735:	83 c2 03             	add    edx,0x3
   20738:	01 d0                	add    eax,edx
   2073a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2073d:	0f b6 c0             	movzx  eax,al
   20740:	c1 e0 18             	shl    eax,0x18
   20743:	89 c1                	mov    ecx,eax
   20745:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20748:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   2074e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   20751:	0f b7 d2             	movzx  edx,dx
   20754:	83 c2 02             	add    edx,0x2
   20757:	01 d0                	add    eax,edx
   20759:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2075c:	0f b6 c0             	movzx  eax,al
   2075f:	c1 e0 10             	shl    eax,0x10
   20762:	01 c1                	add    ecx,eax
   20764:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20767:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   2076d:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   20770:	0f b7 d2             	movzx  edx,dx
   20773:	83 c2 01             	add    edx,0x1
   20776:	01 d0                	add    eax,edx
   20778:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2077b:	0f b6 c0             	movzx  eax,al
   2077e:	c1 e0 08             	shl    eax,0x8
   20781:	01 c1                	add    ecx,eax
   20783:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20786:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   2078c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2078f:	0f b7 c0             	movzx  eax,ax
   20792:	01 d0                	add    eax,edx
   20794:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20797:	0f b6 c0             	movzx  eax,al
   2079a:	01 c8                	add    eax,ecx
   2079c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:247

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;
   2079f:	81 65 f0 ff ff ff 0f 	and    DWORD PTR [ebp-0x10],0xfffffff
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:250

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF)
   207a6:	81 7d f0 f7 ff ff 0f 	cmp    DWORD PTR [ebp-0x10],0xffffff7
   207ad:	76 10                	jbe    207bf <fatfs_find_next_cluster+0x185>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:250 (discriminator 1)
   207af:	81 7d f0 ff ff ff 0f 	cmp    DWORD PTR [ebp-0x10],0xfffffff
   207b6:	77 07                	ja     207bf <fatfs_find_next_cluster+0x185>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:251
            return (FAT32_LAST_CLUSTER);
   207b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
   207bd:	eb 03                	jmp    207c2 <fatfs_find_next_cluster+0x188>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:255
    }

    // Else return next cluster
    return (nextcluster);
   207bf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:256
}
   207c2:	c9                   	leave  
   207c3:	c3                   	ret    

000207c4 <fatfs_set_fs_info_next_free_cluster>:
fatfs_set_fs_info_next_free_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:261
//-----------------------------------------------------------------------------
// fatfs_set_fs_info_next_free_cluster: Write the next free cluster to the FSINFO table
//-----------------------------------------------------------------------------
void fatfs_set_fs_info_next_free_cluster(struct fatfs *fs, uint32 newValue)
{
   207c4:	55                   	push   ebp
   207c5:	89 e5                	mov    ebp,esp
   207c7:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:262
    if (fs->fat_type == FAT_TYPE_16)
   207ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   207cd:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   207d0:	85 c0                	test   eax,eax
   207d2:	0f 84 de 00 00 00    	je     208b6 <fatfs_set_fs_info_next_free_cluster+0xf2>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:267
        ;
    else
    {
        // Load sector to change it
        struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
   207d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   207db:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   207de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   207e1:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   207e5:	0f b7 c0             	movzx  eax,ax
   207e8:	01 d0                	add    eax,edx
   207ea:	83 ec 08             	sub    esp,0x8
   207ed:	50                   	push   eax
   207ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   207f1:	e8 9b fc ff ff       	call   20491 <fatfs_fat_read_sector>
   207f6:	83 c4 10             	add    esp,0x10
   207f9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:268
        if (!pbuf)
   207fc:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20800:	0f 84 af 00 00 00    	je     208b5 <fatfs_set_fs_info_next_free_cluster+0xf1>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:272
            return ;

        // Change
        FAT32_SET_32BIT_WORD(pbuf, 492, newValue);
   20806:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20809:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   2080f:	05 ec 01 00 00       	add    eax,0x1ec
   20814:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20817:	88 10                	mov    BYTE PTR [eax],dl
   20819:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2081c:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20822:	05 ed 01 00 00       	add    eax,0x1ed
   20827:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   2082a:	c1 ea 08             	shr    edx,0x8
   2082d:	88 10                	mov    BYTE PTR [eax],dl
   2082f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20832:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20838:	05 ee 01 00 00       	add    eax,0x1ee
   2083d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20840:	c1 ea 10             	shr    edx,0x10
   20843:	88 10                	mov    BYTE PTR [eax],dl
   20845:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20848:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   2084e:	05 ef 01 00 00       	add    eax,0x1ef
   20853:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20856:	c1 ea 18             	shr    edx,0x18
   20859:	88 10                	mov    BYTE PTR [eax],dl
   2085b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2085e:	c7 80 04 02 00 00 01 	mov    DWORD PTR [eax+0x204],0x1
   20865:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:273
        fs->next_free_cluster = newValue;
   20868:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2086b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   2086e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:276

        // Write back FSINFO sector to disk
        if (fs->disk_io.write_media)
   20871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20874:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   20877:	85 c0                	test   eax,eax
   20879:	74 1e                	je     20899 <fatfs_set_fs_info_next_free_cluster+0xd5>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:277
            fs->disk_io.write_media(pbuf->address, pbuf->sector, 1);
   2087b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2087e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   20881:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   20884:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   20887:	8b 92 00 02 00 00    	mov    edx,DWORD PTR [edx+0x200]
   2088d:	83 ec 04             	sub    esp,0x4
   20890:	6a 01                	push   0x1
   20892:	51                   	push   ecx
   20893:	52                   	push   edx
   20894:	ff d0                	call   eax
   20896:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:280

        // Invalidate cache entry
        pbuf->address = FAT32_INVALID_CLUSTER;
   20899:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2089c:	c7 80 00 02 00 00 ff 	mov    DWORD PTR [eax+0x200],0xffffffff
   208a3:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:281
        pbuf->dirty = 0;
   208a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   208a9:	c7 80 04 02 00 00 00 	mov    DWORD PTR [eax+0x204],0x0
   208b0:	00 00 00 
   208b3:	eb 01                	jmp    208b6 <fatfs_set_fs_info_next_free_cluster+0xf2>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:269
    else
    {
        // Load sector to change it
        struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
        if (!pbuf)
            return ;
   208b5:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:283

        // Invalidate cache entry
        pbuf->address = FAT32_INVALID_CLUSTER;
        pbuf->dirty = 0;
    }
}
   208b6:	c9                   	leave  
   208b7:	c3                   	ret    

000208b8 <fatfs_find_blank_cluster>:
fatfs_find_blank_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:289
//-----------------------------------------------------------------------------
// fatfs_find_blank_cluster: Find a free cluster entry by reading the FAT
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_find_blank_cluster(struct fatfs *fs, uint32 start_cluster, uint32 *free_cluster)
{
   208b8:	55                   	push   ebp
   208b9:	89 e5                	mov    ebp,esp
   208bb:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:292
    uint32 fat_sector_offset, position;
    uint32 nextcluster;
    uint32 current_cluster = start_cluster;
   208be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   208c1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:298
    struct fat_buffer *pbuf;

    do
    {
        // Find which sector of FAT table to read
        if (fs->fat_type == FAT_TYPE_16)
   208c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   208c7:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   208ca:	85 c0                	test   eax,eax
   208cc:	75 0b                	jne    208d9 <fatfs_find_blank_cluster+0x21>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:299
            fat_sector_offset = current_cluster / 256;
   208ce:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   208d1:	c1 e8 08             	shr    eax,0x8
   208d4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   208d7:	eb 09                	jmp    208e2 <fatfs_find_blank_cluster+0x2a>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:301
        else
            fat_sector_offset = current_cluster / 128;
   208d9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   208dc:	c1 e8 07             	shr    eax,0x7
   208df:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:303

        if ( fat_sector_offset < fs->fat_sectors)
   208e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   208e5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   208e8:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   208eb:	0f 86 28 01 00 00    	jbe    20a19 <fatfs_find_blank_cluster+0x161>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:306
        {
            // Read FAT sector into buffer
            pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   208f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   208f4:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   208f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   208fa:	01 d0                	add    eax,edx
   208fc:	83 ec 08             	sub    esp,0x8
   208ff:	50                   	push   eax
   20900:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20903:	e8 89 fb ff ff       	call   20491 <fatfs_fat_read_sector>
   20908:	83 c4 10             	add    esp,0x10
   2090b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:307
            if (!pbuf)
   2090e:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   20912:	75 0a                	jne    2091e <fatfs_find_blank_cluster+0x66>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:308
                return 0;
   20914:	b8 00 00 00 00       	mov    eax,0x0
   20919:	e9 19 01 00 00       	jmp    20a37 <fatfs_find_blank_cluster+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:310

            if (fs->fat_type == FAT_TYPE_16)
   2091e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20921:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20924:	85 c0                	test   eax,eax
   20926:	75 52                	jne    2097a <fatfs_find_blank_cluster+0xc2>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:313
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 256)) * 2;
   20928:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2092b:	c1 e0 08             	shl    eax,0x8
   2092e:	89 c2                	mov    edx,eax
   20930:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20933:	29 d0                	sub    eax,edx
   20935:	01 c0                	add    eax,eax
   20937:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:316

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
   2093a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2093d:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20943:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   20946:	0f b7 d2             	movzx  edx,dx
   20949:	83 c2 01             	add    edx,0x1
   2094c:	01 d0                	add    eax,edx
   2094e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20951:	0f b6 c0             	movzx  eax,al
   20954:	c1 e0 08             	shl    eax,0x8
   20957:	89 c1                	mov    ecx,eax
   20959:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2095c:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20962:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   20965:	0f b7 c0             	movzx  eax,ax
   20968:	01 d0                	add    eax,edx
   2096a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2096d:	0f b6 c0             	movzx  eax,al
   20970:	01 c8                	add    eax,ecx
   20972:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   20975:	e9 93 00 00 00       	jmp    20a0d <fatfs_find_blank_cluster+0x155>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:321
            }
            else
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 128)) * 4;
   2097a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2097d:	c1 e0 07             	shl    eax,0x7
   20980:	89 c2                	mov    edx,eax
   20982:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20985:	29 d0                	sub    eax,edx
   20987:	c1 e0 02             	shl    eax,0x2
   2098a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:324

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);
   2098d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20990:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20996:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   20999:	0f b7 d2             	movzx  edx,dx
   2099c:	83 c2 03             	add    edx,0x3
   2099f:	01 d0                	add    eax,edx
   209a1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   209a4:	0f b6 c0             	movzx  eax,al
   209a7:	c1 e0 18             	shl    eax,0x18
   209aa:	89 c1                	mov    ecx,eax
   209ac:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   209af:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   209b5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   209b8:	0f b7 d2             	movzx  edx,dx
   209bb:	83 c2 02             	add    edx,0x2
   209be:	01 d0                	add    eax,edx
   209c0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   209c3:	0f b6 c0             	movzx  eax,al
   209c6:	c1 e0 10             	shl    eax,0x10
   209c9:	01 c1                	add    ecx,eax
   209cb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   209ce:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   209d4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   209d7:	0f b7 d2             	movzx  edx,dx
   209da:	83 c2 01             	add    edx,0x1
   209dd:	01 d0                	add    eax,edx
   209df:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   209e2:	0f b6 c0             	movzx  eax,al
   209e5:	c1 e0 08             	shl    eax,0x8
   209e8:	01 c1                	add    ecx,eax
   209ea:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   209ed:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   209f3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   209f6:	0f b7 c0             	movzx  eax,ax
   209f9:	01 d0                	add    eax,edx
   209fb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   209fe:	0f b6 c0             	movzx  eax,al
   20a01:	01 c8                	add    eax,ecx
   20a03:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:327

                // Mask out MS 4 bits (its 28bit addressing)
                nextcluster = nextcluster & 0x0FFFFFFF;
   20a06:	81 65 f0 ff ff ff 0f 	and    DWORD PTR [ebp-0x10],0xfffffff
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:330
            }

            if (nextcluster !=0 )
   20a0d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20a11:	74 0d                	je     20a20 <fatfs_find_blank_cluster+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:331
                current_cluster++;
   20a13:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
   20a17:	eb 07                	jmp    20a20 <fatfs_find_blank_cluster+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:335
        }
        else
            // Otherwise, run out of FAT sectors to check...
            return 0;
   20a19:	b8 00 00 00 00       	mov    eax,0x0
   20a1e:	eb 17                	jmp    20a37 <fatfs_find_blank_cluster+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:337
    }
    while (nextcluster != 0x0);
   20a20:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20a24:	0f 85 9a fe ff ff    	jne    208c4 <fatfs_find_blank_cluster+0xc>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:340

    // Found blank entry
    *free_cluster = current_cluster;
   20a2a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20a2d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20a30:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:341
    return 1;
   20a32:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:342
}
   20a37:	c9                   	leave  
   20a38:	c3                   	ret    

00020a39 <fatfs_fat_set_cluster>:
fatfs_fat_set_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:350
// fatfs_fat_set_cluster: Set a cluster link in the chain. NOTE: Immediate
// write (slow).
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_fat_set_cluster(struct fatfs *fs, uint32 cluster, uint32 next_cluster)
{
   20a39:	55                   	push   ebp
   20a3a:	89 e5                	mov    ebp,esp
   20a3c:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:355
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
   20a3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20a42:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20a45:	85 c0                	test   eax,eax
   20a47:	75 0b                	jne    20a54 <fatfs_fat_set_cluster+0x1b>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:356
        fat_sector_offset = cluster / 256;
   20a49:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20a4c:	c1 e8 08             	shr    eax,0x8
   20a4f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   20a52:	eb 09                	jmp    20a5d <fatfs_fat_set_cluster+0x24>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:358
    else
        fat_sector_offset = cluster / 128;
   20a54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20a57:	c1 e8 07             	shr    eax,0x7
   20a5a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:361

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   20a5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20a60:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   20a63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20a66:	01 d0                	add    eax,edx
   20a68:	83 ec 08             	sub    esp,0x8
   20a6b:	50                   	push   eax
   20a6c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20a6f:	e8 1d fa ff ff       	call   20491 <fatfs_fat_read_sector>
   20a74:	83 c4 10             	add    esp,0x10
   20a77:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:362
    if (!pbuf)
   20a7a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20a7e:	75 0a                	jne    20a8a <fatfs_fat_set_cluster+0x51>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:363
        return 0;
   20a80:	b8 00 00 00 00       	mov    eax,0x0
   20a85:	e9 f2 00 00 00       	jmp    20b7c <fatfs_fat_set_cluster+0x143>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:365

    if (fs->fat_type == FAT_TYPE_16)
   20a8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20a8d:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20a90:	85 c0                	test   eax,eax
   20a92:	75 59                	jne    20aed <fatfs_fat_set_cluster+0xb4>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:368
    {
        // Find 16 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 256)) * 2;
   20a94:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20a97:	c1 e0 08             	shl    eax,0x8
   20a9a:	89 c2                	mov    edx,eax
   20a9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20a9f:	29 d0                	sub    eax,edx
   20aa1:	01 c0                	add    eax,eax
   20aa3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:371

        // Write Next Clusters value to Sector Buffer
        FAT16_SET_16BIT_WORD(pbuf, (uint16)position, ((uint16)next_cluster));
   20aa6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20aa9:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20aaf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20ab2:	0f b7 c0             	movzx  eax,ax
   20ab5:	01 d0                	add    eax,edx
   20ab7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20aba:	88 10                	mov    BYTE PTR [eax],dl
   20abc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20abf:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20ac5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20ac8:	0f b7 d2             	movzx  edx,dx
   20acb:	83 c2 01             	add    edx,0x1
   20ace:	01 d0                	add    eax,edx
   20ad0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20ad3:	0f b7 d2             	movzx  edx,dx
   20ad6:	c1 fa 08             	sar    edx,0x8
   20ad9:	88 10                	mov    BYTE PTR [eax],dl
   20adb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20ade:	c7 80 04 02 00 00 01 	mov    DWORD PTR [eax+0x204],0x1
   20ae5:	00 00 00 
   20ae8:	e9 8a 00 00 00       	jmp    20b77 <fatfs_fat_set_cluster+0x13e>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:376
    }
    else
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 128)) * 4;
   20aed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20af0:	c1 e0 07             	shl    eax,0x7
   20af3:	89 c2                	mov    edx,eax
   20af5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20af8:	29 d0                	sub    eax,edx
   20afa:	c1 e0 02             	shl    eax,0x2
   20afd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:379

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);
   20b00:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20b03:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20b09:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20b0c:	0f b7 c0             	movzx  eax,ax
   20b0f:	01 d0                	add    eax,edx
   20b11:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20b14:	88 10                	mov    BYTE PTR [eax],dl
   20b16:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20b19:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20b1f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20b22:	0f b7 d2             	movzx  edx,dx
   20b25:	83 c2 01             	add    edx,0x1
   20b28:	01 d0                	add    eax,edx
   20b2a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20b2d:	c1 ea 08             	shr    edx,0x8
   20b30:	88 10                	mov    BYTE PTR [eax],dl
   20b32:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20b35:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20b3b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20b3e:	0f b7 d2             	movzx  edx,dx
   20b41:	83 c2 02             	add    edx,0x2
   20b44:	01 d0                	add    eax,edx
   20b46:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20b49:	c1 ea 10             	shr    edx,0x10
   20b4c:	88 10                	mov    BYTE PTR [eax],dl
   20b4e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20b51:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20b57:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20b5a:	0f b7 d2             	movzx  edx,dx
   20b5d:	83 c2 03             	add    edx,0x3
   20b60:	01 d0                	add    eax,edx
   20b62:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20b65:	c1 ea 18             	shr    edx,0x18
   20b68:	88 10                	mov    BYTE PTR [eax],dl
   20b6a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20b6d:	c7 80 04 02 00 00 01 	mov    DWORD PTR [eax+0x204],0x1
   20b74:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:382
    }

    return 1;
   20b77:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:383
}
   20b7c:	c9                   	leave  
   20b7d:	c3                   	ret    

00020b7e <fatfs_free_cluster_chain>:
fatfs_free_cluster_chain():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:390
//-----------------------------------------------------------------------------
// fatfs_free_cluster_chain: Follow a chain marking each element as free
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_free_cluster_chain(struct fatfs *fs, uint32 start_cluster)
{
   20b7e:	55                   	push   ebp
   20b7f:	89 e5                	mov    ebp,esp
   20b81:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:392
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;
   20b84:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20b87:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:395

    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
   20b8a:	eb 2d                	jmp    20bb9 <fatfs_free_cluster_chain+0x3b>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:397
    {
        last_cluster = next_cluster;
   20b8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20b8f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:400

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
   20b92:	83 ec 08             	sub    esp,0x8
   20b95:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   20b98:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20b9b:	e8 9a fa ff ff       	call   2063a <fatfs_find_next_cluster>
   20ba0:	83 c4 10             	add    esp,0x10
   20ba3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:403

        // Clear last link
        fatfs_fat_set_cluster(fs, last_cluster, 0x00000000);
   20ba6:	83 ec 04             	sub    esp,0x4
   20ba9:	6a 00                	push   0x0
   20bab:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   20bae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20bb1:	e8 83 fe ff ff       	call   20a39 <fatfs_fat_set_cluster>
   20bb6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:395
{
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;

    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
   20bb9:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   20bbd:	74 06                	je     20bc5 <fatfs_free_cluster_chain+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:395 (discriminator 1)
   20bbf:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20bc3:	75 c7                	jne    20b8c <fatfs_free_cluster_chain+0xe>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:406

        // Clear last link
        fatfs_fat_set_cluster(fs, last_cluster, 0x00000000);
    }

    return 1;
   20bc5:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:407
}
   20bca:	c9                   	leave  
   20bcb:	c3                   	ret    

00020bcc <fatfs_fat_add_cluster_to_chain>:
fatfs_fat_add_cluster_to_chain():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:415
// fatfs_fat_add_cluster_to_chain: Follow a chain marking and then add a new entry
// to the current tail.
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_fat_add_cluster_to_chain(struct fatfs *fs, uint32 start_cluster, uint32 newEntry)
{
   20bcc:	55                   	push   ebp
   20bcd:	89 e5                	mov    ebp,esp
   20bcf:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:416
    uint32 last_cluster = FAT32_LAST_CLUSTER;
   20bd2:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:417
    uint32 next_cluster = start_cluster;
   20bd9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20bdc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:419

    if (start_cluster == FAT32_LAST_CLUSTER)
   20bdf:	83 7d 0c ff          	cmp    DWORD PTR [ebp+0xc],0xffffffff
   20be3:	75 2e                	jne    20c13 <fatfs_fat_add_cluster_to_chain+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:420
        return 0;
   20be5:	b8 00 00 00 00       	mov    eax,0x0
   20bea:	eb 59                	jmp    20c45 <fatfs_fat_add_cluster_to_chain+0x79>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:425

    // Loop until end of chain
    while ( next_cluster != FAT32_LAST_CLUSTER )
    {
        last_cluster = next_cluster;
   20bec:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20bef:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:428

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
   20bf2:	83 ec 08             	sub    esp,0x8
   20bf5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   20bf8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20bfb:	e8 3a fa ff ff       	call   2063a <fatfs_find_next_cluster>
   20c00:	83 c4 10             	add    esp,0x10
   20c03:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:429
        if (!next_cluster)
   20c06:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20c0a:	75 07                	jne    20c13 <fatfs_fat_add_cluster_to_chain+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:430
            return 0;
   20c0c:	b8 00 00 00 00       	mov    eax,0x0
   20c11:	eb 32                	jmp    20c45 <fatfs_fat_add_cluster_to_chain+0x79>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:423

    if (start_cluster == FAT32_LAST_CLUSTER)
        return 0;

    // Loop until end of chain
    while ( next_cluster != FAT32_LAST_CLUSTER )
   20c13:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   20c17:	75 d3                	jne    20bec <fatfs_fat_add_cluster_to_chain+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:434
        if (!next_cluster)
            return 0;
    }

    // Add link in for new cluster
    fatfs_fat_set_cluster(fs, last_cluster, newEntry);
   20c19:	83 ec 04             	sub    esp,0x4
   20c1c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   20c1f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   20c22:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20c25:	e8 0f fe ff ff       	call   20a39 <fatfs_fat_set_cluster>
   20c2a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:437

    // Mark new cluster as end of chain
    fatfs_fat_set_cluster(fs, newEntry, FAT32_LAST_CLUSTER);
   20c2d:	83 ec 04             	sub    esp,0x4
   20c30:	6a ff                	push   0xffffffff
   20c32:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   20c35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20c38:	e8 fc fd ff ff       	call   20a39 <fatfs_fat_set_cluster>
   20c3d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:439

    return 1;
   20c40:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:440
}
   20c45:	c9                   	leave  
   20c46:	c3                   	ret    

00020c47 <fatfs_count_free_clusters>:
fatfs_count_free_clusters():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:446
#endif
//-----------------------------------------------------------------------------
// fatfs_count_free_clusters:
//-----------------------------------------------------------------------------
uint32 fatfs_count_free_clusters(struct fatfs *fs)
{
   20c47:	55                   	push   ebp
   20c48:	89 e5                	mov    ebp,esp
   20c4a:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:448
    uint32 i,j;
    uint32 count = 0;
   20c4d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:451
    struct fat_buffer *pbuf;

    for (i = 0; i < fs->fat_sectors; i++)
   20c54:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   20c5b:	e9 19 01 00 00       	jmp    20d79 <fatfs_count_free_clusters+0x132>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:454
    {
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
   20c60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20c63:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   20c66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20c69:	01 d0                	add    eax,edx
   20c6b:	83 ec 08             	sub    esp,0x8
   20c6e:	50                   	push   eax
   20c6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20c72:	e8 1a f8 ff ff       	call   20491 <fatfs_fat_read_sector>
   20c77:	83 c4 10             	add    esp,0x10
   20c7a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:455
        if (!pbuf)
   20c7d:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   20c81:	0f 84 03 01 00 00    	je     20d8a <fatfs_count_free_clusters+0x143>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:458
            break;

        for (j = 0; j < FAT_SECTOR_SIZE; )
   20c87:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   20c8e:	e9 d5 00 00 00       	jmp    20d68 <fatfs_count_free_clusters+0x121>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:460
        {
            if (fs->fat_type == FAT_TYPE_16)
   20c93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20c96:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20c99:	85 c0                	test   eax,eax
   20c9b:	75 49                	jne    20ce6 <fatfs_count_free_clusters+0x9f>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:462
            {
                if (FAT16_GET_16BIT_WORD(pbuf, (uint16)j) == 0)
   20c9d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20ca0:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20ca6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20ca9:	0f b7 d2             	movzx  edx,dx
   20cac:	83 c2 01             	add    edx,0x1
   20caf:	01 d0                	add    eax,edx
   20cb1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20cb4:	0f b6 c0             	movzx  eax,al
   20cb7:	c1 e0 08             	shl    eax,0x8
   20cba:	89 c1                	mov    ecx,eax
   20cbc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20cbf:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20cc5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20cc8:	0f b7 c0             	movzx  eax,ax
   20ccb:	01 d0                	add    eax,edx
   20ccd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20cd0:	0f b6 c0             	movzx  eax,al
   20cd3:	01 c8                	add    eax,ecx
   20cd5:	85 c0                	test   eax,eax
   20cd7:	75 04                	jne    20cdd <fatfs_count_free_clusters+0x96>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:463
                    count++;
   20cd9:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:465

                j += 2;
   20cdd:	83 45 f0 02          	add    DWORD PTR [ebp-0x10],0x2
   20ce1:	e9 82 00 00 00       	jmp    20d68 <fatfs_count_free_clusters+0x121>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:469
            }
            else
            {
                if (FAT32_GET_32BIT_WORD(pbuf, (uint16)j) == 0)
   20ce6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20ce9:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20cef:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20cf2:	0f b7 d2             	movzx  edx,dx
   20cf5:	83 c2 03             	add    edx,0x3
   20cf8:	01 d0                	add    eax,edx
   20cfa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20cfd:	0f b6 c0             	movzx  eax,al
   20d00:	c1 e0 18             	shl    eax,0x18
   20d03:	89 c1                	mov    ecx,eax
   20d05:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20d08:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20d0e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20d11:	0f b7 d2             	movzx  edx,dx
   20d14:	83 c2 02             	add    edx,0x2
   20d17:	01 d0                	add    eax,edx
   20d19:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20d1c:	0f b6 c0             	movzx  eax,al
   20d1f:	c1 e0 10             	shl    eax,0x10
   20d22:	01 c1                	add    ecx,eax
   20d24:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20d27:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20d2d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20d30:	0f b7 d2             	movzx  edx,dx
   20d33:	83 c2 01             	add    edx,0x1
   20d36:	01 d0                	add    eax,edx
   20d38:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20d3b:	0f b6 c0             	movzx  eax,al
   20d3e:	c1 e0 08             	shl    eax,0x8
   20d41:	01 c1                	add    ecx,eax
   20d43:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20d46:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20d4c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20d4f:	0f b7 c0             	movzx  eax,ax
   20d52:	01 d0                	add    eax,edx
   20d54:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20d57:	0f b6 c0             	movzx  eax,al
   20d5a:	01 c8                	add    eax,ecx
   20d5c:	85 c0                	test   eax,eax
   20d5e:	75 04                	jne    20d64 <fatfs_count_free_clusters+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:470
                    count++;
   20d60:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:472

                j += 4;
   20d64:	83 45 f0 04          	add    DWORD PTR [ebp-0x10],0x4
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:458 (discriminator 1)
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
        if (!pbuf)
            break;

        for (j = 0; j < FAT_SECTOR_SIZE; )
   20d68:	81 7d f0 ff 01 00 00 	cmp    DWORD PTR [ebp-0x10],0x1ff
   20d6f:	0f 86 1e ff ff ff    	jbe    20c93 <fatfs_count_free_clusters+0x4c>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:451 (discriminator 2)
{
    uint32 i,j;
    uint32 count = 0;
    struct fat_buffer *pbuf;

    for (i = 0; i < fs->fat_sectors; i++)
   20d75:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:451 (discriminator 1)
   20d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20d7c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   20d7f:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   20d82:	0f 87 d8 fe ff ff    	ja     20c60 <fatfs_count_free_clusters+0x19>
   20d88:	eb 01                	jmp    20d8b <fatfs_count_free_clusters+0x144>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:456
    {
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
        if (!pbuf)
            break;
   20d8a:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:477
                j += 4;
            }
        }
    }

    return count;
   20d8b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:478
}
   20d8e:	c9                   	leave  
   20d8f:	c3                   	ret    

00020d90 <fatfs_add_free_space>:
fatfs_add_free_space():
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:46
//-----------------------------------------------------------------------------
// fatfs_add_free_space: Allocate another cluster of free space to the end
// of a files cluster chain.
//-----------------------------------------------------------------------------
int fatfs_add_free_space(struct fatfs *fs, uint32 *startCluster, uint32 clusters)
{
   20d90:	55                   	push   ebp
   20d91:	89 e5                	mov    ebp,esp
   20d93:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:49
    uint32 i;
    uint32 nextcluster;
    uint32 start = *startCluster;
   20d96:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20d99:	8b 00                	mov    eax,DWORD PTR [eax]
   20d9b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:52

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
   20d9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20da1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   20da4:	83 f8 ff             	cmp    eax,0xffffffff
   20da7:	74 10                	je     20db9 <fatfs_add_free_space+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:53
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);
   20da9:	83 ec 08             	sub    esp,0x8
   20dac:	6a ff                	push   0xffffffff
   20dae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20db1:	e8 0e fa ff ff       	call   207c4 <fatfs_set_fs_info_next_free_cluster>
   20db6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:55

    for (i=0;i<clusters;i++)
   20db9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   20dc0:	eb 67                	jmp    20e29 <fatfs_add_free_space+0x99>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:58
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
   20dc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20dc5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   20dc8:	83 ec 04             	sub    esp,0x4
   20dcb:	8d 55 ec             	lea    edx,[ebp-0x14]
   20dce:	52                   	push   edx
   20dcf:	50                   	push   eax
   20dd0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20dd3:	e8 e0 fa ff ff       	call   208b8 <fatfs_find_blank_cluster>
   20dd8:	83 c4 10             	add    esp,0x10
   20ddb:	85 c0                	test   eax,eax
   20ddd:	74 3f                	je     20e1e <fatfs_add_free_space+0x8e>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:61
        {
            // Point last to this
            fatfs_fat_set_cluster(fs, start, nextcluster);
   20ddf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20de2:	83 ec 04             	sub    esp,0x4
   20de5:	50                   	push   eax
   20de6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   20de9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20dec:	e8 48 fc ff ff       	call   20a39 <fatfs_fat_set_cluster>
   20df1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:64

            // Point this to end of file
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
   20df4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20df7:	83 ec 04             	sub    esp,0x4
   20dfa:	6a ff                	push   0xffffffff
   20dfc:	50                   	push   eax
   20dfd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20e00:	e8 34 fc ff ff       	call   20a39 <fatfs_fat_set_cluster>
   20e05:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:67

            // Adjust argument reference
            start = nextcluster;
   20e08:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20e0b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:68
            if (i == 0)
   20e0e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20e12:	75 11                	jne    20e25 <fatfs_add_free_space+0x95>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:69
                *startCluster = nextcluster;
   20e14:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20e17:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20e1a:	89 10                	mov    DWORD PTR [eax],edx
   20e1c:	eb 07                	jmp    20e25 <fatfs_add_free_space+0x95>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:72
        }
        else
            return 0;
   20e1e:	b8 00 00 00 00       	mov    eax,0x0
   20e23:	eb 11                	jmp    20e36 <fatfs_add_free_space+0xa6>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:55 (discriminator 2)

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);

    for (i=0;i<clusters;i++)
   20e25:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:55 (discriminator 1)
   20e29:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20e2c:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   20e2f:	72 91                	jb     20dc2 <fatfs_add_free_space+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:75
        }
        else
            return 0;
    }

    return 1;
   20e31:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:76 (discriminator 1)
}
   20e36:	c9                   	leave  
   20e37:	c3                   	ret    

00020e38 <fatfs_allocate_free_space>:
fatfs_allocate_free_space():
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:83
// fatfs_allocate_free_space: Add an ammount of free space to a file either from
// 'startCluster' if newFile = false, or allocating a new start to the chain if
// newFile = true.
//-----------------------------------------------------------------------------
int fatfs_allocate_free_space(struct fatfs *fs, int newFile, uint32 *startCluster, uint32 size)
{
   20e38:	55                   	push   ebp
   20e39:	89 e5                	mov    ebp,esp
   20e3b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:88
    uint32 clusterSize;
    uint32 clusterCount;
    uint32 nextcluster;

    if (size==0)
   20e3e:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   20e42:	75 0a                	jne    20e4e <fatfs_allocate_free_space+0x16>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:89
        return 0;
   20e44:	b8 00 00 00 00       	mov    eax,0x0
   20e49:	e9 c8 00 00 00       	jmp    20f16 <fatfs_allocate_free_space+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:92

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
   20e4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20e51:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   20e54:	83 f8 ff             	cmp    eax,0xffffffff
   20e57:	74 10                	je     20e69 <fatfs_allocate_free_space+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:93
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);
   20e59:	83 ec 08             	sub    esp,0x8
   20e5c:	6a ff                	push   0xffffffff
   20e5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20e61:	e8 5e f9 ff ff       	call   207c4 <fatfs_set_fs_info_next_free_cluster>
   20e66:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:96

    // Work out size and clusters
    clusterSize = fs->sectors_per_cluster * FAT_SECTOR_SIZE;
   20e69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20e6c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20e6f:	0f b6 c0             	movzx  eax,al
   20e72:	c1 e0 09             	shl    eax,0x9
   20e75:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:97
    clusterCount = (size / clusterSize);
   20e78:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   20e7b:	ba 00 00 00 00       	mov    edx,0x0
   20e80:	f7 75 f0             	div    DWORD PTR [ebp-0x10]
   20e83:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:100

    // If any left over
    if (size-(clusterSize*clusterCount))
   20e86:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20e89:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   20e8d:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
   20e90:	74 04                	je     20e96 <fatfs_allocate_free_space+0x5e>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:101
        clusterCount++;
   20e92:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:104

    // Allocated first link in the chain if a new file
    if (newFile)
   20e96:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   20e9a:	74 4d                	je     20ee9 <fatfs_allocate_free_space+0xb1>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:106
    {
        if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
   20e9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20e9f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   20ea2:	83 ec 04             	sub    esp,0x4
   20ea5:	8d 55 ec             	lea    edx,[ebp-0x14]
   20ea8:	52                   	push   edx
   20ea9:	50                   	push   eax
   20eaa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20ead:	e8 06 fa ff ff       	call   208b8 <fatfs_find_blank_cluster>
   20eb2:	83 c4 10             	add    esp,0x10
   20eb5:	85 c0                	test   eax,eax
   20eb7:	75 07                	jne    20ec0 <fatfs_allocate_free_space+0x88>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:107
            return 0;
   20eb9:	b8 00 00 00 00       	mov    eax,0x0
   20ebe:	eb 56                	jmp    20f16 <fatfs_allocate_free_space+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:110

        // If this is all that is needed then all done
        if (clusterCount==1)
   20ec0:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   20ec4:	75 2b                	jne    20ef1 <fatfs_allocate_free_space+0xb9>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:112
        {
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
   20ec6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20ec9:	83 ec 04             	sub    esp,0x4
   20ecc:	6a ff                	push   0xffffffff
   20ece:	50                   	push   eax
   20ecf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20ed2:	e8 62 fb ff ff       	call   20a39 <fatfs_fat_set_cluster>
   20ed7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:113
            *startCluster = nextcluster;
   20eda:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20edd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20ee0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:114
            return 1;
   20ee2:	b8 01 00 00 00       	mov    eax,0x1
   20ee7:	eb 2d                	jmp    20f16 <fatfs_allocate_free_space+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:119
        }
    }
    // Allocate from end of current chain (startCluster is end of chain)
    else
        nextcluster = *startCluster;
   20ee9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20eec:	8b 00                	mov    eax,DWORD PTR [eax]
   20eee:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:121

    if (!fatfs_add_free_space(fs, &nextcluster, clusterCount))
   20ef1:	83 ec 04             	sub    esp,0x4
   20ef4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   20ef7:	8d 45 ec             	lea    eax,[ebp-0x14]
   20efa:	50                   	push   eax
   20efb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20efe:	e8 8d fe ff ff       	call   20d90 <fatfs_add_free_space>
   20f03:	83 c4 10             	add    esp,0x10
   20f06:	85 c0                	test   eax,eax
   20f08:	75 07                	jne    20f11 <fatfs_allocate_free_space+0xd9>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:122
            return 0;
   20f0a:	b8 00 00 00 00       	mov    eax,0x0
   20f0f:	eb 05                	jmp    20f16 <fatfs_allocate_free_space+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:124

    return 1;
   20f11:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:125 (discriminator 1)
}
   20f16:	c9                   	leave  
   20f17:	c3                   	ret    

00020f18 <fatfs_find_free_dir_offset>:
fatfs_find_free_dir_offset():
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:131
//-----------------------------------------------------------------------------
// fatfs_find_free_dir_offset: Find a free space in the directory for a new entry
// which takes up 'entryCount' blocks (or allocate some more)
//-----------------------------------------------------------------------------
static int fatfs_find_free_dir_offset(struct fatfs *fs, uint32 dirCluster, int entryCount, uint32 *pSector, uint8 *pOffset)
{
   20f18:	55                   	push   ebp
   20f19:	89 e5                	mov    ebp,esp
   20f1b:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:133
    struct fat_dir_entry *directoryEntry;
    uint8 item=0;
   20f1e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:134
    uint16 recordoffset = 0;
   20f22:	66 c7 45 e6 00 00    	mov    WORD PTR [ebp-0x1a],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:135
    uint8 i=0;
   20f28:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:136
    int x=0;
   20f2c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:137
    int possible_spaces = 0;
   20f33:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:138
    int start_recorded = 0;
   20f3a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:141

    // No entries required?
    if (entryCount == 0)
   20f41:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   20f45:	75 0a                	jne    20f51 <fatfs_find_free_dir_offset+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:142
        return 0;
   20f47:	b8 00 00 00 00       	mov    eax,0x0
   20f4c:	e9 fd 01 00 00       	jmp    2114e <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:148

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   20f51:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20f54:	8d 50 01             	lea    edx,[eax+0x1]
   20f57:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   20f5a:	6a 00                	push   0x0
   20f5c:	50                   	push   eax
   20f5d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   20f60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20f63:	e8 34 a3 ff ff       	call   1b29c <fatfs_sector_reader>
   20f68:	83 c4 10             	add    esp,0x10
   20f6b:	85 c0                	test   eax,eax
   20f6d:	0f 84 1a 01 00 00    	je     2108d <fatfs_find_free_dir_offset+0x175>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:151
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   20f73:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   20f77:	e9 02 01 00 00       	jmp    2107e <fatfs_find_free_dir_offset+0x166>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:154
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   20f7c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   20f80:	c1 e0 05             	shl    eax,0x5
   20f83:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:157

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   20f87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20f8a:	8d 50 44             	lea    edx,[eax+0x44]
   20f8d:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   20f91:	01 d0                	add    eax,edx
   20f93:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:160

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   20f96:	83 ec 0c             	sub    esp,0xc
   20f99:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   20f9c:	e8 09 e4 ff ff       	call   1f3aa <fatfs_entry_lfn_text>
   20fa1:	83 c4 10             	add    esp,0x10
   20fa4:	85 c0                	test   eax,eax
   20fa6:	74 2c                	je     20fd4 <fatfs_find_free_dir_offset+0xbc>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:163
                {
                    // First entry?
                    if (possible_spaces == 0)
   20fa8:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   20fac:	75 1d                	jne    20fcb <fatfs_find_free_dir_offset+0xb3>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:166
                    {
                        // Store start
                        *pSector = x-1;
   20fae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20fb1:	83 e8 01             	sub    eax,0x1
   20fb4:	89 c2                	mov    edx,eax
   20fb6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   20fb9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:167
                        *pOffset = item;
   20fbb:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   20fbe:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   20fc2:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:168
                        start_recorded = 1;
   20fc4:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:173
                    }

                    // Increment the count in-case the file turns
                    // out to be deleted...
                    possible_spaces++;
   20fcb:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
   20fcf:	e9 a0 00 00 00       	jmp    21074 <fatfs_find_free_dir_offset+0x15c>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:179
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   20fd4:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   20fd8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   20fdb:	0f b6 44 02 44       	movzx  eax,BYTE PTR [edx+eax*1+0x44]
   20fe0:	3c e5                	cmp    al,0xe5
   20fe2:	75 39                	jne    2101d <fatfs_find_free_dir_offset+0x105>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:182
                    {
                        // First entry?
                        if (possible_spaces == 0)
   20fe4:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   20fe8:	75 1d                	jne    21007 <fatfs_find_free_dir_offset+0xef>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:185
                        {
                            // Store start
                            *pSector = x-1;
   20fea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20fed:	83 e8 01             	sub    eax,0x1
   20ff0:	89 c2                	mov    edx,eax
   20ff2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   20ff5:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:186
                            *pOffset = item;
   20ff7:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   20ffa:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   20ffe:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:187
                            start_recorded = 1;
   21000:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:190
                        }

                        possible_spaces++;
   21007:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:193

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   2100b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2100e:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   21011:	7c 61                	jl     21074 <fatfs_find_free_dir_offset+0x15c>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:194
                            return 1;
   21013:	b8 01 00 00 00       	mov    eax,0x1
   21018:	e9 31 01 00 00       	jmp    2114e <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:199

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   2101d:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   21021:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   21024:	0f b6 44 02 44       	movzx  eax,BYTE PTR [edx+eax*1+0x44]
   21029:	84 c0                	test   al,al
   2102b:	75 39                	jne    21066 <fatfs_find_free_dir_offset+0x14e>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:202
                    {
                        // First entry?
                        if (possible_spaces == 0)
   2102d:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   21031:	75 1d                	jne    21050 <fatfs_find_free_dir_offset+0x138>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:205
                        {
                            // Store start
                            *pSector = x-1;
   21033:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21036:	83 e8 01             	sub    eax,0x1
   21039:	89 c2                	mov    edx,eax
   2103b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   2103e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:206
                            *pOffset = item;
   21040:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   21043:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   21047:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:207
                            start_recorded = 1;
   21049:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:211
                        }

                        // Increment the blank entries count
                        possible_spaces++;
   21050:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:214

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   21054:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   21057:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   2105a:	7c 18                	jl     21074 <fatfs_find_free_dir_offset+0x15c>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:215
                            return 1;
   2105c:	b8 01 00 00 00       	mov    eax,0x1
   21061:	e9 e8 00 00 00       	jmp    2114e <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:221
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   21066:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:222
                        start_recorded = 0;
   2106d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:151 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   21074:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   21078:	83 c0 01             	add    eax,0x1
   2107b:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:151 (discriminator 1)
   2107e:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   21082:	0f 86 f4 fe ff ff    	jbe    20f7c <fatfs_find_free_dir_offset+0x64>
   21088:	e9 c4 fe ff ff       	jmp    20f51 <fatfs_find_free_dir_offset+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:233
        else
        {
            uint32 newCluster;

            // Get a new cluster for directory
            if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &newCluster))
   2108d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21090:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   21093:	83 ec 04             	sub    esp,0x4
   21096:	8d 55 dc             	lea    edx,[ebp-0x24]
   21099:	52                   	push   edx
   2109a:	50                   	push   eax
   2109b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2109e:	e8 15 f8 ff ff       	call   208b8 <fatfs_find_blank_cluster>
   210a3:	83 c4 10             	add    esp,0x10
   210a6:	85 c0                	test   eax,eax
   210a8:	75 0a                	jne    210b4 <fatfs_find_free_dir_offset+0x19c>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:234
                return 0;
   210aa:	b8 00 00 00 00       	mov    eax,0x0
   210af:	e9 9a 00 00 00       	jmp    2114e <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:237

            // Add cluster to end of directory tree
            if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
   210b4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   210b7:	83 ec 04             	sub    esp,0x4
   210ba:	50                   	push   eax
   210bb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   210be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   210c1:	e8 06 fb ff ff       	call   20bcc <fatfs_fat_add_cluster_to_chain>
   210c6:	83 c4 10             	add    esp,0x10
   210c9:	85 c0                	test   eax,eax
   210cb:	75 07                	jne    210d4 <fatfs_find_free_dir_offset+0x1bc>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:238
                return 0;
   210cd:	b8 00 00 00 00       	mov    eax,0x0
   210d2:	eb 7a                	jmp    2114e <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:241

            // Erase new directory cluster
            memset(fs->currentsector.sector, 0x00, FAT_SECTOR_SIZE);
   210d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   210d7:	83 c0 44             	add    eax,0x44
   210da:	83 ec 04             	sub    esp,0x4
   210dd:	68 00 02 00 00       	push   0x200
   210e2:	6a 00                	push   0x0
   210e4:	50                   	push   eax
   210e5:	e8 43 3f 00 00       	call   2502d <memset>
   210ea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:242
            for (i=0;i<fs->sectors_per_cluster;i++)
   210ed:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
   210f1:	eb 2b                	jmp    2111e <fatfs_find_free_dir_offset+0x206>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:244
            {
                if (!fatfs_write_sector(fs, newCluster, i, 0))
   210f3:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   210f7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   210fa:	6a 00                	push   0x0
   210fc:	52                   	push   edx
   210fd:	50                   	push   eax
   210fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21101:	e8 eb a3 ff ff       	call   1b4f1 <fatfs_write_sector>
   21106:	83 c4 10             	add    esp,0x10
   21109:	85 c0                	test   eax,eax
   2110b:	75 07                	jne    21114 <fatfs_find_free_dir_offset+0x1fc>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:245
                    return 0;
   2110d:	b8 00 00 00 00       	mov    eax,0x0
   21112:	eb 3a                	jmp    2114e <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:242 (discriminator 2)
            if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
                return 0;

            // Erase new directory cluster
            memset(fs->currentsector.sector, 0x00, FAT_SECTOR_SIZE);
            for (i=0;i<fs->sectors_per_cluster;i++)
   21114:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   21118:	83 c0 01             	add    eax,0x1
   2111b:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:242 (discriminator 1)
   2111e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21121:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   21124:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
   21127:	77 ca                	ja     210f3 <fatfs_find_free_dir_offset+0x1db>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:249
                if (!fatfs_write_sector(fs, newCluster, i, 0))
                    return 0;
            }

            // If non of the name fitted on previous sectors
            if (!start_recorded)
   21129:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   2112d:	75 1a                	jne    21149 <fatfs_find_free_dir_offset+0x231>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:252
            {
                // Store start
                *pSector = (x-1);
   2112f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21132:	83 e8 01             	sub    eax,0x1
   21135:	89 c2                	mov    edx,eax
   21137:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   2113a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:253
                *pOffset = 0;
   2113c:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   2113f:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:254
                start_recorded = 1;
   21142:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:257
            }

            return 1;
   21149:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:262 (discriminator 2)
        }
    } // End of while loop

    return 0;
}
   2114e:	c9                   	leave  
   2114f:	c3                   	ret    

00021150 <fatfs_add_file_entry>:
fatfs_add_file_entry():
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:267
//-----------------------------------------------------------------------------
// fatfs_add_file_entry: Add a directory entry to a location found by FindFreeOffset
//-----------------------------------------------------------------------------
int fatfs_add_file_entry(struct fatfs *fs, uint32 dirCluster, char *filename, char *shortfilename, uint32 startCluster, uint32 size, int dir)
{
   21150:	55                   	push   ebp
   21151:	89 e5                	mov    ebp,esp
   21153:	83 ec 58             	sub    esp,0x58
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:268
    uint8 item=0;
   21156:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:269
    uint16 recordoffset = 0;
   2115a:	66 c7 45 da 00 00    	mov    WORD PTR [ebp-0x26],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:270
    uint8 i=0;
   21160:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:271
    uint32 x=0;
   21164:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:274
    int entryCount;
    struct fat_dir_entry shortEntry;
    int dirtySector = 0;
   2116b:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:276

    uint32 dirSector = 0;
   21172:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [ebp-0x4c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:277
    uint8 dirOffset = 0;
   21179:	c6 45 b3 00          	mov    BYTE PTR [ebp-0x4d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:278
    int foundEnd = 0;
   2117d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:284

    uint8 checksum;
    uint8 *pSname;

    // No write access?
    if (!fs->disk_io.write_media)
   21184:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21187:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   2118a:	85 c0                	test   eax,eax
   2118c:	75 0a                	jne    21198 <fatfs_add_file_entry+0x48>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:285
        return 0;
   2118e:	b8 00 00 00 00       	mov    eax,0x0
   21193:	e9 0c 02 00 00       	jmp    213a4 <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:290

#if FATFS_INC_LFN_SUPPORT
    // How many LFN entries are required?
    // NOTE: We always request one LFN even if it would fit in a SFN!
    entryCount = fatfs_lfn_entries_required(filename);
   21198:	83 ec 0c             	sub    esp,0xc
   2119b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   2119e:	e8 55 e3 ff ff       	call   1f4f8 <fatfs_lfn_entries_required>
   211a3:	83 c4 10             	add    esp,0x10
   211a6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:291
    if (!entryCount)
   211a9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   211ad:	75 0a                	jne    211b9 <fatfs_add_file_entry+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:292
        return 0;
   211af:	b8 00 00 00 00       	mov    eax,0x0
   211b4:	e9 eb 01 00 00       	jmp    213a4 <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:299
    entryCount = 0;
#endif

    // Find space in the directory for this filename (or allocate some more)
    // NOTE: We need to find space for at least the LFN + SFN (or just the SFN if LFNs not supported).
    if (!fatfs_find_free_dir_offset(fs, dirCluster, entryCount + 1, &dirSector, &dirOffset))
   211b9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   211bc:	8d 50 01             	lea    edx,[eax+0x1]
   211bf:	83 ec 0c             	sub    esp,0xc
   211c2:	8d 45 b3             	lea    eax,[ebp-0x4d]
   211c5:	50                   	push   eax
   211c6:	8d 45 b4             	lea    eax,[ebp-0x4c]
   211c9:	50                   	push   eax
   211ca:	52                   	push   edx
   211cb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   211ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   211d1:	e8 42 fd ff ff       	call   20f18 <fatfs_find_free_dir_offset>
   211d6:	83 c4 20             	add    esp,0x20
   211d9:	85 c0                	test   eax,eax
   211db:	75 0a                	jne    211e7 <fatfs_add_file_entry+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:300
        return 0;
   211dd:	b8 00 00 00 00       	mov    eax,0x0
   211e2:	e9 bd 01 00 00       	jmp    213a4 <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:303

    // Generate checksum of short filename
    pSname = (uint8*)shortfilename;
   211e7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   211ea:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:304
    checksum = 0;
   211ed:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305
    for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;
   211f1:	c6 45 f6 0b          	mov    BYTE PTR [ebp-0xa],0xb
   211f5:	eb 3b                	jmp    21232 <fatfs_add_file_entry+0xe2>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 7)
   211f7:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
   211fb:	83 e0 01             	and    eax,0x1
   211fe:	85 c0                	test   eax,eax
   21200:	74 07                	je     21209 <fatfs_add_file_entry+0xb9>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 2)
   21202:	ba 80 ff ff ff       	mov    edx,0xffffff80
   21207:	eb 05                	jmp    2120e <fatfs_add_file_entry+0xbe>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 3)
   21209:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 5)
   2120e:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
   21212:	d0 e8                	shr    al,1
   21214:	8d 0c 02             	lea    ecx,[edx+eax*1]
   21217:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   2121a:	8d 50 01             	lea    edx,[eax+0x1]
   2121d:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
   21220:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   21223:	01 c8                	add    eax,ecx
   21225:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
   21228:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   2122c:	83 e8 01             	sub    eax,0x1
   2122f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 6)
   21232:	80 7d f6 00          	cmp    BYTE PTR [ebp-0xa],0x0
   21236:	75 bf                	jne    211f7 <fatfs_add_file_entry+0xa7>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:308

    // Start from current sector where space was found!
    x = dirSector;
   21238:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   2123b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:314

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   2123e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21241:	8d 50 01             	lea    edx,[eax+0x1]
   21244:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   21247:	6a 00                	push   0x0
   21249:	50                   	push   eax
   2124a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2124d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21250:	e8 47 a0 ff ff       	call   1b29c <fatfs_sector_reader>
   21255:	83 c4 10             	add    esp,0x10
   21258:	85 c0                	test   eax,eax
   2125a:	0f 84 3f 01 00 00    	je     2139f <fatfs_add_file_entry+0x24f>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:317
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   21260:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   21264:	e9 ea 00 00 00       	jmp    21353 <fatfs_add_file_entry+0x203>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:320
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   21269:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   2126d:	c1 e0 05             	shl    eax,0x5
   21270:	66 89 45 da          	mov    WORD PTR [ebp-0x26],ax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:323

                // If the start position for the entry has been found
                if (foundEnd==0)
   21274:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   21278:	75 1d                	jne    21297 <fatfs_add_file_entry+0x147>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:324
                    if ( (dirSector==(x-1)) && (dirOffset==item) )
   2127a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2127d:	8d 50 ff             	lea    edx,[eax-0x1]
   21280:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   21283:	39 c2                	cmp    edx,eax
   21285:	75 10                	jne    21297 <fatfs_add_file_entry+0x147>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:324 (discriminator 1)
   21287:	0f b6 45 b3          	movzx  eax,BYTE PTR [ebp-0x4d]
   2128b:	3a 45 f7             	cmp    al,BYTE PTR [ebp-0x9]
   2128e:	75 07                	jne    21297 <fatfs_add_file_entry+0x147>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:325
                        foundEnd = 1;
   21290:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:328

                // Start adding filename
                if (foundEnd)
   21297:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   2129b:	0f 84 a8 00 00 00    	je     21349 <fatfs_add_file_entry+0x1f9>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:330
                {
                    if (entryCount==0)
   212a1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   212a5:	75 74                	jne    2131b <fatfs_add_file_entry+0x1cb>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:333
                    {
                        // Short filename
                        fatfs_sfn_create_entry(shortfilename, size, startCluster, &shortEntry, dir);
   212a7:	83 ec 0c             	sub    esp,0xc
   212aa:	ff 75 20             	push   DWORD PTR [ebp+0x20]
   212ad:	8d 45 ba             	lea    eax,[ebp-0x46]
   212b0:	50                   	push   eax
   212b1:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   212b4:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
   212b7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   212ba:	e8 e8 e3 ff ff       	call   1f6a7 <fatfs_sfn_create_entry>
   212bf:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:337

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update create, access & modify time & date
                        fatfs_update_timestamps(&shortEntry, 1, 1, 1);
   212c2:	6a 01                	push   0x1
   212c4:	6a 01                	push   0x1
   212c6:	6a 01                	push   0x1
   212c8:	8d 45 ba             	lea    eax,[ebp-0x46]
   212cb:	50                   	push   eax
   212cc:	e8 3b a7 ff ff       	call   1ba0c <fatfs_update_timestamps>
   212d1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:340
#endif

                        memcpy(&fs->currentsector.sector[recordoffset], &shortEntry, sizeof(shortEntry));
   212d4:	0f b7 45 da          	movzx  eax,WORD PTR [ebp-0x26]
   212d8:	8d 50 40             	lea    edx,[eax+0x40]
   212db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   212de:	01 d0                	add    eax,edx
   212e0:	8d 50 04             	lea    edx,[eax+0x4]
   212e3:	83 ec 04             	sub    esp,0x4
   212e6:	6a 20                	push   0x20
   212e8:	8d 45 ba             	lea    eax,[ebp-0x46]
   212eb:	50                   	push   eax
   212ec:	52                   	push   edx
   212ed:	e8 2a 47 00 00       	call   25a1c <memcpy>
   212f2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:343

                        // Writeback
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   212f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   212f8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   212fb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   212fe:	8d 4a 44             	lea    ecx,[edx+0x44]
   21301:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   21304:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   2130a:	83 ec 04             	sub    esp,0x4
   2130d:	6a 01                	push   0x1
   2130f:	51                   	push   ecx
   21310:	52                   	push   edx
   21311:	ff d0                	call   eax
   21313:	83 c4 10             	add    esp,0x10
   21316:	e9 89 00 00 00       	jmp    213a4 <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:348
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
   2131b:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:351

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   2131f:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
   21323:	0f b7 55 da          	movzx  edx,WORD PTR [ebp-0x26]
   21327:	8d 4a 40             	lea    ecx,[edx+0x40]
   2132a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2132d:	01 ca                	add    edx,ecx
   2132f:	83 c2 04             	add    edx,0x4
   21332:	50                   	push   eax
   21333:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   21336:	52                   	push   edx
   21337:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   2133a:	e8 fa e1 ff ff       	call   1f539 <fatfs_filename_to_lfn>
   2133f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:352
                        dirtySector = 1;
   21342:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:317 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   21349:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   2134d:	83 c0 01             	add    eax,0x1
   21350:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:317 (discriminator 1)
   21353:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   21357:	0f 86 0c ff ff ff    	jbe    21269 <fatfs_add_file_entry+0x119>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:359
#endif
                }
            } // End of if

            // Write back to disk before loading another sector
            if (dirtySector)
   2135d:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   21361:	0f 84 d7 fe ff ff    	je     2123e <fatfs_add_file_entry+0xee>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:361
            {
                if (!fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1))
   21367:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2136a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   2136d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   21370:	8d 4a 44             	lea    ecx,[edx+0x44]
   21373:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   21376:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   2137c:	83 ec 04             	sub    esp,0x4
   2137f:	6a 01                	push   0x1
   21381:	51                   	push   ecx
   21382:	52                   	push   edx
   21383:	ff d0                	call   eax
   21385:	83 c4 10             	add    esp,0x10
   21388:	85 c0                	test   eax,eax
   2138a:	75 07                	jne    21393 <fatfs_add_file_entry+0x243>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:362
                    return 0;
   2138c:	b8 00 00 00 00       	mov    eax,0x0
   21391:	eb 11                	jmp    213a4 <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:364

                dirtySector = 0;
   21393:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   2139a:	e9 9f fe ff ff       	jmp    2123e <fatfs_add_file_entry+0xee>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:368
            }
        }
        else
            return 0;
   2139f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:372 (discriminator 2)
    } // End of while loop

    return 0;
}
   213a4:	c9                   	leave  
   213a5:	c3                   	ret    
   213a6:	66 90                	xchg   ax,ax

000213a8 <printMBR>:
printMBR():
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:13
uint8_t partBuffer[512*20]; //10240
gptHeader_t* gptHdr;
gptPartEntry_t* gptPart;

void printMBR(struct mbr_t* mbr)
{
   213a8:	55                   	push   ebp
   213a9:	89 e5                	mov    ebp,esp
   213ab:	57                   	push   edi
   213ac:	56                   	push   esi
   213ad:	53                   	push   ebx
   213ae:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:14
    printk("Part#\tStart\tEnd\t\tTotal\t\tPartType\tBoot\n");
   213b1:	83 ec 0c             	sub    esp,0xc
   213b4:	68 60 38 08 00       	push   0x83860
   213b9:	e8 f9 5c 00 00       	call   270b7 <printk>
   213be:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:15
    for (int cnt=0;cnt<mbr->partCount;cnt++)
   213c1:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   213c8:	e9 8b 00 00 00       	jmp    21458 <printMBR+0xb0>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:17
    {
        if (mbr->parts[cnt].partStartSector>0)
   213cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   213d0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   213d3:	c1 e2 04             	shl    edx,0x4
   213d6:	01 d0                	add    eax,edx
   213d8:	8b 00                	mov    eax,DWORD PTR [eax]
   213da:	85 c0                	test   eax,eax
   213dc:	74 76                	je     21454 <printMBR+0xac>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:18
            printk("%u\t\t%u\t\t%u\t%u\t\t%u\t\t%s\n",cnt,mbr->parts[cnt].partStartSector, mbr->parts[cnt].partEndSector, mbr->parts[cnt].partTotalSectors,mbr->parts[cnt].systemID,mbr->parts[cnt].bootable?"Y":"N");
   213de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   213e1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   213e4:	c1 e2 04             	shl    edx,0x4
   213e7:	01 d0                	add    eax,edx
   213e9:	83 c0 0c             	add    eax,0xc
   213ec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   213ef:	84 c0                	test   al,al
   213f1:	74 07                	je     213fa <printMBR+0x52>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:18 (discriminator 1)
   213f3:	bf 87 38 08 00       	mov    edi,0x83887
   213f8:	eb 05                	jmp    213ff <printMBR+0x57>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:18 (discriminator 2)
   213fa:	bf 89 38 08 00       	mov    edi,0x83889
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:18 (discriminator 4)
   213ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21402:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   21405:	c1 e2 04             	shl    edx,0x4
   21408:	01 d0                	add    eax,edx
   2140a:	83 c0 0d             	add    eax,0xd
   2140d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   21410:	0f b6 d8             	movzx  ebx,al
   21413:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21416:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   21419:	c1 e2 04             	shl    edx,0x4
   2141c:	01 d0                	add    eax,edx
   2141e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   21421:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21424:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   21427:	c1 e2 04             	shl    edx,0x4
   2142a:	01 d0                	add    eax,edx
   2142c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   2142f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21432:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
   21435:	c1 e6 04             	shl    esi,0x4
   21438:	01 f0                	add    eax,esi
   2143a:	8b 00                	mov    eax,DWORD PTR [eax]
   2143c:	83 ec 04             	sub    esp,0x4
   2143f:	57                   	push   edi
   21440:	53                   	push   ebx
   21441:	51                   	push   ecx
   21442:	52                   	push   edx
   21443:	50                   	push   eax
   21444:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   21447:	68 8b 38 08 00       	push   0x8388b
   2144c:	e8 66 5c 00 00       	call   270b7 <printk>
   21451:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:15 (discriminator 2)
gptPartEntry_t* gptPart;

void printMBR(struct mbr_t* mbr)
{
    printk("Part#\tStart\tEnd\t\tTotal\t\tPartType\tBoot\n");
    for (int cnt=0;cnt<mbr->partCount;cnt++)
   21454:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:15 (discriminator 1)
   21458:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2145b:	8b 80 00 04 00 00    	mov    eax,DWORD PTR [eax+0x400]
   21461:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   21464:	0f 8f 63 ff ff ff    	jg     213cd <printMBR+0x25>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:20
    {
        if (mbr->parts[cnt].partStartSector>0)
            printk("%u\t\t%u\t\t%u\t%u\t\t%u\t\t%s\n",cnt,mbr->parts[cnt].partStartSector, mbr->parts[cnt].partEndSector, mbr->parts[cnt].partTotalSectors,mbr->parts[cnt].systemID,mbr->parts[cnt].bootable?"Y":"N");
    }
    printk("\n");
   2146a:	83 ec 0c             	sub    esp,0xc
   2146d:	68 a2 38 08 00       	push   0x838a2
   21472:	e8 40 5c 00 00       	call   270b7 <printk>
   21477:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:21
}
   2147a:	90                   	nop
   2147b:	8d 65 f4             	lea    esp,[ebp-0xc]
   2147e:	5b                   	pop    ebx
   2147f:	5e                   	pop    esi
   21480:	5f                   	pop    edi
   21481:	5d                   	pop    ebp
   21482:	c3                   	ret    

00021483 <parseMBR>:
parseMBR():
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:24
    
bool parseMBR(struct ataDeviceInfo_t* devInfo, struct mbr_t* mbr)
{
   21483:	55                   	push   ebp
   21484:	89 e5                	mov    ebp,esp
   21486:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:25
    HBA_PORT* port=(HBA_PORT*)devInfo->ioPort;
   21489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2148c:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21492:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:27
    
    memset(mbr,0,sizeof(struct mbr_t));
   21495:	83 ec 04             	sub    esp,0x4
   21498:	68 17 04 00 00       	push   0x417
   2149d:	6a 00                	push   0x0
   2149f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   214a2:	e8 86 3b 00 00       	call   2502d <memset>
   214a7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:28
    mbr->parts[0].partStartSector=0;
   214aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   214ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:29
    printd(DEBUG_HARDDRIVE,"devInfo->ABAR=0x%08X\n",devInfo->ABAR);
   214b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   214b6:	8b 80 6f 02 00 00    	mov    eax,DWORD PTR [eax+0x26f]
   214bc:	83 ec 04             	sub    esp,0x4
   214bf:	50                   	push   eax
   214c0:	68 a4 38 08 00       	push   0x838a4
   214c5:	6a 08                	push   0x8
   214c7:	e8 0b 5c 00 00       	call   270d7 <printd>
   214cc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:30
    if (devInfo->ABAR)
   214cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   214d2:	8b 80 6f 02 00 00    	mov    eax,DWORD PTR [eax+0x26f]
   214d8:	85 c0                	test   eax,eax
   214da:	74 66                	je     21542 <parseMBR+0xbf>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:32
    {
        printd(DEBUG_HARDDRIVE,"Disk is SATA\n");
   214dc:	83 ec 08             	sub    esp,0x8
   214df:	68 ba 38 08 00       	push   0x838ba
   214e4:	6a 08                	push   0x8
   214e6:	e8 ec 5b 00 00       	call   270d7 <printd>
   214eb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:33
        ahciSetCurrentDisk(port);
   214ee:	83 ec 0c             	sub    esp,0xc
   214f1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   214f4:	e8 6a 3a ff ff       	call   14f63 <ahciSetCurrentDisk>
   214f9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:34
        bool lResult=ahciRead(port,0,mbrBuffer,1);
   214fc:	6a 01                	push   0x1
   214fe:	68 a0 8d 09 00       	push   0x98da0
   21503:	6a 00                	push   0x0
   21505:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   21508:	e8 8a 3a ff ff       	call   14f97 <ahciRead>
   2150d:	83 c4 10             	add    esp,0x10
   21510:	85 c0                	test   eax,eax
   21512:	0f 95 c0             	setne  al
   21515:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:35
        if (!lResult)
   21518:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   2151c:	83 f0 01             	xor    eax,0x1
   2151f:	84 c0                	test   al,al
   21521:	74 75                	je     21598 <parseMBR+0x115>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:37
        {
            printk("Could not read ATA MBR (0x%08X)", lResult);
   21523:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   21527:	83 ec 08             	sub    esp,0x8
   2152a:	50                   	push   eax
   2152b:	68 c8 38 08 00       	push   0x838c8
   21530:	e8 82 5b 00 00       	call   270b7 <printk>
   21535:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:38
            return false;
   21538:	b8 00 00 00 00       	mov    eax,0x0
   2153d:	e9 98 03 00 00       	jmp    218da <parseMBR+0x457>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:43
        }
    }
    else
    {
        printd(DEBUG_HARDDRIVE,"Disk is ATA\n");
   21542:	83 ec 08             	sub    esp,0x8
   21545:	68 e8 38 08 00       	push   0x838e8
   2154a:	6a 08                	push   0x8
   2154c:	e8 86 5b 00 00       	call   270d7 <printd>
   21551:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:44
        int lResult=ataReadDisk(devInfo, mbr->parts, 0, mbrBuffer, 1);
   21554:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21557:	83 ec 0c             	sub    esp,0xc
   2155a:	6a 01                	push   0x1
   2155c:	68 a0 8d 09 00       	push   0x98da0
   21561:	6a 00                	push   0x0
   21563:	50                   	push   eax
   21564:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21567:	e8 ff 14 00 00       	call   22a6b <ataReadDisk>
   2156c:	83 c4 20             	add    esp,0x20
   2156f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:45
        if (lResult!=512)
   21572:	81 7d ec 00 02 00 00 	cmp    DWORD PTR [ebp-0x14],0x200
   21579:	74 1d                	je     21598 <parseMBR+0x115>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:47
        {
            printk("Could not read ATA MBR (0x%08X)", lResult);
   2157b:	83 ec 08             	sub    esp,0x8
   2157e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   21581:	68 c8 38 08 00       	push   0x838c8
   21586:	e8 2c 5b 00 00       	call   270b7 <printk>
   2158b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:48
            return false;
   2158e:	b8 00 00 00 00       	mov    eax,0x0
   21593:	e9 42 03 00 00       	jmp    218da <parseMBR+0x457>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:51
        }
    }
    memcpy(mbr->diskID, &mbrBuffer[0x1b4], 10);
   21598:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2159b:	05 04 04 00 00       	add    eax,0x404
   215a0:	83 ec 04             	sub    esp,0x4
   215a3:	6a 0a                	push   0xa
   215a5:	68 54 8f 09 00       	push   0x98f54
   215aa:	50                   	push   eax
   215ab:	e8 6c 44 00 00       	call   25a1c <memcpy>
   215b0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52
    mbr->validBootSector=mbrBuffer[0x1FE]==0x55 && mbrBuffer[0x1FF]==0xAA;
   215b3:	0f b6 05 9e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9e
   215ba:	3c 55                	cmp    al,0x55
   215bc:	75 12                	jne    215d0 <parseMBR+0x14d>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52 (discriminator 1)
   215be:	0f b6 05 9f 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9f
   215c5:	3c aa                	cmp    al,0xaa
   215c7:	75 07                	jne    215d0 <parseMBR+0x14d>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52 (discriminator 3)
   215c9:	b8 01 00 00 00       	mov    eax,0x1
   215ce:	eb 05                	jmp    215d5 <parseMBR+0x152>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52 (discriminator 4)
   215d0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52 (discriminator 6)
   215d5:	83 e0 01             	and    eax,0x1
   215d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   215db:	88 82 0e 04 00 00    	mov    BYTE PTR [edx+0x40e],al
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:53 (discriminator 6)
    mbr->parts[0].bootable = mbrBuffer[MBR_PART1_OFFSET+0]==0x80;
   215e1:	0f b6 05 5e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f5e
   215e8:	3c 80                	cmp    al,0x80
   215ea:	0f 94 c2             	sete   dl
   215ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   215f0:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:54 (discriminator 6)
    mbr->parts[0].systemID = mbrBuffer[MBR_PART1_OFFSET+4];
   215f3:	0f b6 15 62 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f62
   215fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   215fd:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:55 (discriminator 6)
    mbr->parts[0].partStartSector = mbrBuffer[MBR_PART1_OFFSET+8] | (mbrBuffer[MBR_PART1_OFFSET+9]<<8) | (mbrBuffer[MBR_PART1_OFFSET+10]<<16) | (mbrBuffer[MBR_PART1_OFFSET+11]<<24);
   21600:	0f b6 05 66 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f66
   21607:	0f b6 c0             	movzx  eax,al
   2160a:	0f b6 15 67 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f67
   21611:	0f b6 d2             	movzx  edx,dl
   21614:	c1 e2 08             	shl    edx,0x8
   21617:	09 c2                	or     edx,eax
   21619:	0f b6 05 68 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f68
   21620:	0f b6 c0             	movzx  eax,al
   21623:	c1 e0 10             	shl    eax,0x10
   21626:	09 c2                	or     edx,eax
   21628:	0f b6 05 69 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f69
   2162f:	0f b6 c0             	movzx  eax,al
   21632:	c1 e0 18             	shl    eax,0x18
   21635:	09 d0                	or     eax,edx
   21637:	89 c2                	mov    edx,eax
   21639:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2163c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:56 (discriminator 6)
    mbr->parts[0].partTotalSectors = mbrBuffer[MBR_PART1_OFFSET+12] | (mbrBuffer[MBR_PART1_OFFSET+13]<<8) | (mbrBuffer[MBR_PART1_OFFSET+14]<<16) | (mbrBuffer[MBR_PART1_OFFSET+15]<<24);
   2163e:	0f b6 05 6a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6a
   21645:	0f b6 c0             	movzx  eax,al
   21648:	0f b6 15 6b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f6b
   2164f:	0f b6 d2             	movzx  edx,dl
   21652:	c1 e2 08             	shl    edx,0x8
   21655:	09 c2                	or     edx,eax
   21657:	0f b6 05 6c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6c
   2165e:	0f b6 c0             	movzx  eax,al
   21661:	c1 e0 10             	shl    eax,0x10
   21664:	09 c2                	or     edx,eax
   21666:	0f b6 05 6d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6d
   2166d:	0f b6 c0             	movzx  eax,al
   21670:	c1 e0 18             	shl    eax,0x18
   21673:	09 d0                	or     eax,edx
   21675:	89 c2                	mov    edx,eax
   21677:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2167a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:57 (discriminator 6)
    mbr->parts[0].partEndSector = mbr->parts[0].partStartSector + mbr->parts[0].partTotalSectors;
   2167d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21680:	8b 10                	mov    edx,DWORD PTR [eax]
   21682:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21685:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   21688:	01 c2                	add    edx,eax
   2168a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2168d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:59 (discriminator 6)

    mbr->parts[1].bootable = mbrBuffer[MBR_PART2_OFFSET+0]==0x80;
   21690:	0f b6 05 6e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6e
   21697:	3c 80                	cmp    al,0x80
   21699:	0f 94 c2             	sete   dl
   2169c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2169f:	88 50 1c             	mov    BYTE PTR [eax+0x1c],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:60 (discriminator 6)
    mbr->parts[1].systemID = mbrBuffer[MBR_PART2_OFFSET+4];
   216a2:	0f b6 15 72 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f72
   216a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   216ac:	88 50 1d             	mov    BYTE PTR [eax+0x1d],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:61 (discriminator 6)
    mbr->parts[1].partStartSector = mbrBuffer[MBR_PART2_OFFSET+8] | (mbrBuffer[MBR_PART2_OFFSET+9]<<8) | (mbrBuffer[MBR_PART2_OFFSET+10]<<16) | (mbrBuffer[MBR_PART2_OFFSET+11]<<24);
   216af:	0f b6 05 76 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f76
   216b6:	0f b6 c0             	movzx  eax,al
   216b9:	0f b6 15 77 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f77
   216c0:	0f b6 d2             	movzx  edx,dl
   216c3:	c1 e2 08             	shl    edx,0x8
   216c6:	09 c2                	or     edx,eax
   216c8:	0f b6 05 78 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f78
   216cf:	0f b6 c0             	movzx  eax,al
   216d2:	c1 e0 10             	shl    eax,0x10
   216d5:	09 c2                	or     edx,eax
   216d7:	0f b6 05 79 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f79
   216de:	0f b6 c0             	movzx  eax,al
   216e1:	c1 e0 18             	shl    eax,0x18
   216e4:	09 d0                	or     eax,edx
   216e6:	89 c2                	mov    edx,eax
   216e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   216eb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:62 (discriminator 6)
    mbr->parts[1].partTotalSectors = mbrBuffer[MBR_PART2_OFFSET+12] | (mbrBuffer[MBR_PART2_OFFSET+13]<<8) | (mbrBuffer[MBR_PART2_OFFSET+14]<<16) | (mbrBuffer[MBR_PART2_OFFSET+15]<<24);
   216ee:	0f b6 05 7a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7a
   216f5:	0f b6 c0             	movzx  eax,al
   216f8:	0f b6 15 7b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f7b
   216ff:	0f b6 d2             	movzx  edx,dl
   21702:	c1 e2 08             	shl    edx,0x8
   21705:	09 c2                	or     edx,eax
   21707:	0f b6 05 7c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7c
   2170e:	0f b6 c0             	movzx  eax,al
   21711:	c1 e0 10             	shl    eax,0x10
   21714:	09 c2                	or     edx,eax
   21716:	0f b6 05 7d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7d
   2171d:	0f b6 c0             	movzx  eax,al
   21720:	c1 e0 18             	shl    eax,0x18
   21723:	09 d0                	or     eax,edx
   21725:	89 c2                	mov    edx,eax
   21727:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2172a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:63 (discriminator 6)
    mbr->parts[1].partEndSector = mbr->parts[1].partStartSector + mbr->parts[1].partTotalSectors;
   2172d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21730:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   21733:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21736:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   21739:	01 c2                	add    edx,eax
   2173b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2173e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:65 (discriminator 6)

    mbr->parts[2].bootable = mbrBuffer[MBR_PART3_OFFSET+0]==0x80;
   21741:	0f b6 05 7e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7e
   21748:	3c 80                	cmp    al,0x80
   2174a:	0f 94 c2             	sete   dl
   2174d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21750:	88 50 2c             	mov    BYTE PTR [eax+0x2c],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:66 (discriminator 6)
    mbr->parts[2].systemID = mbrBuffer[MBR_PART3_OFFSET+4];
   21753:	0f b6 15 82 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f82
   2175a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2175d:	88 50 2d             	mov    BYTE PTR [eax+0x2d],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:67 (discriminator 6)
    mbr->parts[2].partStartSector = mbrBuffer[MBR_PART3_OFFSET+8] | (mbrBuffer[MBR_PART3_OFFSET+9]<<8) | (mbrBuffer[MBR_PART3_OFFSET+10]<<16) | (mbrBuffer[MBR_PART3_OFFSET+11]<<24);
   21760:	0f b6 05 86 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f86
   21767:	0f b6 c0             	movzx  eax,al
   2176a:	0f b6 15 87 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f87
   21771:	0f b6 d2             	movzx  edx,dl
   21774:	c1 e2 08             	shl    edx,0x8
   21777:	09 c2                	or     edx,eax
   21779:	0f b6 05 88 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f88
   21780:	0f b6 c0             	movzx  eax,al
   21783:	c1 e0 10             	shl    eax,0x10
   21786:	09 c2                	or     edx,eax
   21788:	0f b6 05 89 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f89
   2178f:	0f b6 c0             	movzx  eax,al
   21792:	c1 e0 18             	shl    eax,0x18
   21795:	09 d0                	or     eax,edx
   21797:	89 c2                	mov    edx,eax
   21799:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2179c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:68 (discriminator 6)
    mbr->parts[2].partTotalSectors = mbrBuffer[MBR_PART3_OFFSET+12] | (mbrBuffer[MBR_PART3_OFFSET+13]<<8) | (mbrBuffer[MBR_PART3_OFFSET+14]<<16) | (mbrBuffer[MBR_PART3_OFFSET+15]<<24);
   2179f:	0f b6 05 8a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8a
   217a6:	0f b6 c0             	movzx  eax,al
   217a9:	0f b6 15 8b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f8b
   217b0:	0f b6 d2             	movzx  edx,dl
   217b3:	c1 e2 08             	shl    edx,0x8
   217b6:	09 c2                	or     edx,eax
   217b8:	0f b6 05 8c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8c
   217bf:	0f b6 c0             	movzx  eax,al
   217c2:	c1 e0 10             	shl    eax,0x10
   217c5:	09 c2                	or     edx,eax
   217c7:	0f b6 05 8d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8d
   217ce:	0f b6 c0             	movzx  eax,al
   217d1:	c1 e0 18             	shl    eax,0x18
   217d4:	09 d0                	or     eax,edx
   217d6:	89 c2                	mov    edx,eax
   217d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   217db:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:69 (discriminator 6)
    mbr->parts[2].partEndSector = mbr->parts[2].partStartSector + mbr->parts[2].partTotalSectors;
   217de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   217e1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
   217e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   217e7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   217ea:	01 c2                	add    edx,eax
   217ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   217ef:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:71 (discriminator 6)

    mbr->parts[3].bootable = mbrBuffer[MBR_PART4_OFFSET+0]==0x80;
   217f2:	0f b6 05 8e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8e
   217f9:	3c 80                	cmp    al,0x80
   217fb:	0f 94 c2             	sete   dl
   217fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21801:	88 50 3c             	mov    BYTE PTR [eax+0x3c],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:72 (discriminator 6)
    mbr->parts[3].systemID = mbrBuffer[MBR_PART4_OFFSET+4];
   21804:	0f b6 15 92 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f92
   2180b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2180e:	88 50 3d             	mov    BYTE PTR [eax+0x3d],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:73 (discriminator 6)
    mbr->parts[3].partStartSector = mbrBuffer[MBR_PART4_OFFSET+8] | (mbrBuffer[MBR_PART4_OFFSET+9]<<8) | (mbrBuffer[MBR_PART4_OFFSET+10]<<16) | (mbrBuffer[MBR_PART4_OFFSET+11]<<24);
   21811:	0f b6 05 96 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f96
   21818:	0f b6 c0             	movzx  eax,al
   2181b:	0f b6 15 97 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f97
   21822:	0f b6 d2             	movzx  edx,dl
   21825:	c1 e2 08             	shl    edx,0x8
   21828:	09 c2                	or     edx,eax
   2182a:	0f b6 05 98 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f98
   21831:	0f b6 c0             	movzx  eax,al
   21834:	c1 e0 10             	shl    eax,0x10
   21837:	09 c2                	or     edx,eax
   21839:	0f b6 05 99 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f99
   21840:	0f b6 c0             	movzx  eax,al
   21843:	c1 e0 18             	shl    eax,0x18
   21846:	09 d0                	or     eax,edx
   21848:	89 c2                	mov    edx,eax
   2184a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2184d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:74 (discriminator 6)
    mbr->parts[3].partTotalSectors = mbrBuffer[MBR_PART4_OFFSET+12] | (mbrBuffer[MBR_PART4_OFFSET+13]<<8) | (mbrBuffer[MBR_PART4_OFFSET+14]<<16) | (mbrBuffer[MBR_PART4_OFFSET+15]<<24);
   21850:	0f b6 05 9a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9a
   21857:	0f b6 c0             	movzx  eax,al
   2185a:	0f b6 15 9b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f9b
   21861:	0f b6 d2             	movzx  edx,dl
   21864:	c1 e2 08             	shl    edx,0x8
   21867:	09 c2                	or     edx,eax
   21869:	0f b6 05 9c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9c
   21870:	0f b6 c0             	movzx  eax,al
   21873:	c1 e0 10             	shl    eax,0x10
   21876:	09 c2                	or     edx,eax
   21878:	0f b6 05 9d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9d
   2187f:	0f b6 c0             	movzx  eax,al
   21882:	c1 e0 18             	shl    eax,0x18
   21885:	09 d0                	or     eax,edx
   21887:	89 c2                	mov    edx,eax
   21889:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2188c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:75 (discriminator 6)
    mbr->parts[3].partEndSector = mbr->parts[3].partStartSector + mbr->parts[3].partTotalSectors;
   2188f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21892:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
   21895:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21898:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   2189b:	01 c2                	add    edx,eax
   2189d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   218a0:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:76 (discriminator 6)
    mbr->partCount=4;
   218a3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   218a6:	c7 80 00 04 00 00 04 	mov    DWORD PTR [eax+0x400],0x4
   218ad:	00 00 00 
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:77 (discriminator 6)
    if (mbr->parts[0].systemID=0xEE)
   218b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   218b3:	c6 40 0d ee          	mov    BYTE PTR [eax+0xd],0xee
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:79 (discriminator 6)
    {
        printd(DEBUG_HARDDRIVE,"Found GPT partition table\n");
   218b7:	83 ec 08             	sub    esp,0x8
   218ba:	68 f5 38 08 00       	push   0x838f5
   218bf:	6a 08                	push   0x8
   218c1:	e8 11 58 00 00       	call   270d7 <printd>
   218c6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:80 (discriminator 6)
        return parseGPT(port, mbr);
   218c9:	83 ec 08             	sub    esp,0x8
   218cc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   218cf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   218d2:	e8 05 00 00 00       	call   218dc <parseGPT>
   218d7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:83
    }
    return true;
}
   218da:	c9                   	leave  
   218db:	c3                   	ret    

000218dc <parseGPT>:
parseGPT():
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:86

bool parseGPT(HBA_PORT* port, struct mbr_t* mbr)
{
   218dc:	55                   	push   ebp
   218dd:	89 e5                	mov    ebp,esp
   218df:	53                   	push   ebx
   218e0:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:87
int readLen=0;
   218e3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:89

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
   218ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   218ed:	8b 00                	mov    eax,DWORD PTR [eax]
   218ef:	6a 01                	push   0x1
   218f1:	68 a0 8d 09 00       	push   0x98da0
   218f6:	50                   	push   eax
   218f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   218fa:	e8 98 36 ff ff       	call   14f97 <ahciRead>
   218ff:	83 c4 10             	add    esp,0x10
   21902:	85 c0                	test   eax,eax
   21904:	0f 95 c0             	setne  al
   21907:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:90
    gptHdr=mbrBuffer;
   2190a:	c7 05 84 8d 09 00 a0 	mov    DWORD PTR ds:0x98d84,0x98da0
   21911:	8d 09 00 
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:96

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
            gptHdr->partEntrySize,
            gptHdr->lastUsableLBAL);
   21914:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   21919:	8b 58 30             	mov    ebx,DWORD PTR [eax+0x30]
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:95
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
            gptHdr->partEntrySize,
   2191c:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   21921:	8b 48 54             	mov    ecx,DWORD PTR [eax+0x54]
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:94
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
   21924:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   21929:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:93
            gptHdr->partEntryLBAL,
   2192c:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   21931:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
   21934:	83 ec 08             	sub    esp,0x8
   21937:	53                   	push   ebx
   21938:	51                   	push   ecx
   21939:	52                   	push   edx
   2193a:	50                   	push   eax
   2193b:	68 10 39 08 00       	push   0x83910
   21940:	6a 08                	push   0x8
   21942:	e8 90 57 00 00       	call   270d7 <printd>
   21947:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:97
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
            gptHdr->partEntrySize,
            gptHdr->lastUsableLBAL);
    readLen=((gptHdr->partEntryCount*gptHdr->partEntrySize)/512)+1;
   2194a:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   2194f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
   21952:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   21957:	8b 40 54             	mov    eax,DWORD PTR [eax+0x54]
   2195a:	0f af c2             	imul   eax,edx
   2195d:	c1 e8 09             	shr    eax,0x9
   21960:	83 c0 01             	add    eax,0x1
   21963:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:99
    
    printd(DEBUG_HARDDRIVE,"Reading GPT partition table @ lba %u for %u sectors\n",gptHdr->partEntryLBAL,readLen);
   21966:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   2196b:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
   2196e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   21971:	50                   	push   eax
   21972:	68 5c 39 08 00       	push   0x8395c
   21977:	6a 08                	push   0x8
   21979:	e8 59 57 00 00       	call   270d7 <printd>
   2197e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:100
    lResult=ahciRead(port,gptHdr->partEntryLBAL,partBuffer,10);
   21981:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   21986:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
   21989:	6a 0a                	push   0xa
   2198b:	68 80 65 09 00       	push   0x96580
   21990:	50                   	push   eax
   21991:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21994:	e8 fe 35 ff ff       	call   14f97 <ahciRead>
   21999:	83 c4 10             	add    esp,0x10
   2199c:	85 c0                	test   eax,eax
   2199e:	0f 95 c0             	setne  al
   219a1:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:102
    
    gptPart=partBuffer;
   219a4:	c7 05 80 8d 09 00 80 	mov    DWORD PTR ds:0x98d80,0x96580
   219ab:	65 09 00 
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:103
    mbr->partCount=0;
   219ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   219b1:	c7 80 00 04 00 00 00 	mov    DWORD PTR [eax+0x400],0x0
   219b8:	00 00 00 
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:104
    for (int cnt=0;cnt<20;cnt++)
   219bb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   219c2:	e9 b6 00 00 00       	jmp    21a7d <parseGPT+0x1a1>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:106
    {
        printd(DEBUG_HARDDRIVE,"Part %u, first=%u\n",cnt,gptPart[cnt].partFirstLBAL);
   219c7:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   219cc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   219cf:	c1 e2 07             	shl    edx,0x7
   219d2:	01 d0                	add    eax,edx
   219d4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   219d7:	50                   	push   eax
   219d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   219db:	68 91 39 08 00       	push   0x83991
   219e0:	6a 08                	push   0x8
   219e2:	e8 f0 56 00 00       	call   270d7 <printd>
   219e7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:107
        if (gptPart[cnt].partFirstLBAL>0)
   219ea:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   219ef:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   219f2:	c1 e2 07             	shl    edx,0x7
   219f5:	01 d0                	add    eax,edx
   219f7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   219fa:	85 c0                	test   eax,eax
   219fc:	74 7b                	je     21a79 <parseGPT+0x19d>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:109
        {
            mbr->parts[cnt].partStartSector=gptPart[cnt].partFirstLBAL;
   219fe:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   21a03:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21a06:	c1 e2 07             	shl    edx,0x7
   21a09:	01 d0                	add    eax,edx
   21a0b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   21a0e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   21a11:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21a14:	c1 e1 04             	shl    ecx,0x4
   21a17:	01 ca                	add    edx,ecx
   21a19:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:110
            mbr->parts[cnt].partEndSector=gptPart[cnt].partLastLBAL;
   21a1b:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   21a20:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21a23:	c1 e2 07             	shl    edx,0x7
   21a26:	01 d0                	add    eax,edx
   21a28:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   21a2b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   21a2e:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21a31:	c1 e1 04             	shl    ecx,0x4
   21a34:	01 ca                	add    edx,ecx
   21a36:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:111
            mbr->parts[cnt].partTotalSectors=mbr->parts[cnt].partEndSector-mbr->parts[cnt].partStartSector;
   21a39:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21a3c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21a3f:	c1 e2 04             	shl    edx,0x4
   21a42:	01 d0                	add    eax,edx
   21a44:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   21a47:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21a4a:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21a4d:	c1 e1 04             	shl    ecx,0x4
   21a50:	01 c8                	add    eax,ecx
   21a52:	8b 00                	mov    eax,DWORD PTR [eax]
   21a54:	29 c2                	sub    edx,eax
   21a56:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21a59:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21a5c:	c1 e1 04             	shl    ecx,0x4
   21a5f:	01 c8                	add    eax,ecx
   21a61:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:113
            //mbr->parts[cnt].systemID
            mbr->partCount++;
   21a64:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21a67:	8b 80 00 04 00 00    	mov    eax,DWORD PTR [eax+0x400]
   21a6d:	8d 50 01             	lea    edx,[eax+0x1]
   21a70:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21a73:	89 90 00 04 00 00    	mov    DWORD PTR [eax+0x400],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:104 (discriminator 2)
    printd(DEBUG_HARDDRIVE,"Reading GPT partition table @ lba %u for %u sectors\n",gptHdr->partEntryLBAL,readLen);
    lResult=ahciRead(port,gptHdr->partEntryLBAL,partBuffer,10);
    
    gptPart=partBuffer;
    mbr->partCount=0;
    for (int cnt=0;cnt<20;cnt++)
   21a79:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:104 (discriminator 1)
   21a7d:	83 7d f4 13          	cmp    DWORD PTR [ebp-0xc],0x13
   21a81:	0f 8e 40 ff ff ff    	jle    219c7 <parseGPT+0xeb>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:118
            mbr->partCount++;
        }
    }


    return true;
   21a87:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:120
        
}
   21a8c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   21a8f:	c9                   	leave  
   21a90:	c3                   	ret    
   21a91:	66 90                	xchg   ax,ax
   21a93:	90                   	nop

00021a94 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   21a94:	55                   	push   ebp
   21a95:	89 e5                	mov    ebp,esp
   21a97:	83 ec 08             	sub    esp,0x8
   21a9a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   21a9d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21aa0:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   21aa4:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   21aa7:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   21aab:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   21aaf:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   21ab0:	90                   	nop
   21ab1:	c9                   	leave  
   21ab2:	c3                   	ret    

00021ab3 <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   21ab3:	55                   	push   ebp
   21ab4:	89 e5                	mov    ebp,esp
   21ab6:	83 ec 14             	sub    esp,0x14
   21ab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21abc:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   21ac0:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   21ac4:	89 c2                	mov    edx,eax
   21ac6:	ec                   	in     al,dx
   21ac7:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   21aca:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   21ace:	c9                   	leave  
   21acf:	c3                   	ret    

00021ad0 <inw>:
inw():
/home/yogi/src/os/chrisOS/include/io.h:44

static __inline unsigned short inw(unsigned short __port)
{
   21ad0:	55                   	push   ebp
   21ad1:	89 e5                	mov    ebp,esp
   21ad3:	83 ec 14             	sub    esp,0x14
   21ad6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21ad9:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:46
	unsigned short __val;
	__asm__ volatile ("inw %0, %1" : "=a" (__val) : "dN" (__port));
   21add:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   21ae1:	89 c2                	mov    edx,eax
   21ae3:	66 ed                	in     ax,dx
   21ae5:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/include/io.h:47
	return __val;
   21ae9:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/src/os/chrisOS/include/io.h:48
}
   21aed:	c9                   	leave  
   21aee:	c3                   	ret    

00021aef <insw>:
insw():
/home/yogi/src/os/chrisOS/include/io.h:86
		      : "+D" (__buf), "+c" (__n)
		      : "d" (__port));
}

static __inline void insw(unsigned short __port, void *__buf, unsigned long __n)
{
   21aef:	55                   	push   ebp
   21af0:	89 e5                	mov    ebp,esp
   21af2:	57                   	push   edi
   21af3:	53                   	push   ebx
   21af4:	83 ec 04             	sub    esp,0x4
   21af7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21afa:	66 89 45 f4          	mov    WORD PTR [ebp-0xc],ax
/home/yogi/src/os/chrisOS/include/io.h:87
	__asm__ volatile ("cld; rep; insw"
   21afe:	0f b7 55 f4          	movzx  edx,WORD PTR [ebp-0xc]
   21b02:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   21b05:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   21b08:	89 cb                	mov    ebx,ecx
   21b0a:	89 df                	mov    edi,ebx
   21b0c:	89 c1                	mov    ecx,eax
   21b0e:	fc                   	cld    
   21b0f:	f3 66 6d             	rep ins WORD PTR es:[edi],dx
   21b12:	89 c8                	mov    eax,ecx
   21b14:	89 fb                	mov    ebx,edi
   21b16:	89 5d 0c             	mov    DWORD PTR [ebp+0xc],ebx
   21b19:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/include/io.h:90
		      : "+D" (__buf), "+c" (__n)
		      : "d" (__port));
}
   21b1c:	90                   	nop
   21b1d:	83 c4 04             	add    esp,0x4
   21b20:	5b                   	pop    ebx
   21b21:	5f                   	pop    edi
   21b22:	5d                   	pop    ebp
   21b23:	c3                   	ret    

00021b24 <ataWaitForDRQ>:
ataWaitForDRQ():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:22
float ticks=0;
struct ataDeviceInfo_t* atablockingReadDev;

//Returns non-zero value IF TIMEOUT
uint8_t __attribute__((noinline)) ataWaitForDRQ(struct ataDeviceInfo_t* devInfo, bool toBeSet, int forHowManyMS)
{
   21b24:	55                   	push   ebp
   21b25:	89 e5                	mov    ebp,esp
   21b27:	83 ec 14             	sub    esp,0x14
   21b2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21b2d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:23
    int ticks = forHowManyMS*kTicksPerMS;
   21b30:	a1 84 02 12 00       	mov    eax,ds:0x120284
   21b35:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   21b38:	0f af c2             	imul   eax,edx
   21b3b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:24
    uint8_t inValue=0;
   21b3e:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:25
    while (ticks > 0)
   21b42:	eb 57                	jmp    21b9b <ataWaitForDRQ+0x77>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:27
    {
        STI
   21b44:	fb                   	sti    
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:29
        //waitTicks(1);
        __asm__("sti\nhlt\n");
   21b45:	fb                   	sti    
   21b46:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:30
        inValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
   21b47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21b4a:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21b50:	83 c0 07             	add    eax,0x7
   21b53:	0f b7 c0             	movzx  eax,ax
   21b56:	50                   	push   eax
   21b57:	e8 57 ff ff ff       	call   21ab3 <inb>
   21b5c:	83 c4 04             	add    esp,0x4
   21b5f:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:31
        if (toBeSet && (inValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ)
   21b62:	80 7d ec 00          	cmp    BYTE PTR [ebp-0x14],0x0
   21b66:	74 12                	je     21b7a <ataWaitForDRQ+0x56>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:31 (discriminator 1)
   21b68:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   21b6c:	83 e0 08             	and    eax,0x8
   21b6f:	85 c0                	test   eax,eax
   21b71:	74 07                	je     21b7a <ataWaitForDRQ+0x56>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:32
                return 0;
   21b73:	b8 00 00 00 00       	mov    eax,0x0
   21b78:	eb 5e                	jmp    21bd8 <ataWaitForDRQ+0xb4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:33
        else if ((!toBeSet && (inValue & ATA_STATUS_DRQ) != ATA_STATUS_DRQ))
   21b7a:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
   21b7e:	83 f0 01             	xor    eax,0x1
   21b81:	84 c0                	test   al,al
   21b83:	74 12                	je     21b97 <ataWaitForDRQ+0x73>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:33 (discriminator 1)
   21b85:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   21b89:	83 e0 08             	and    eax,0x8
   21b8c:	85 c0                	test   eax,eax
   21b8e:	75 07                	jne    21b97 <ataWaitForDRQ+0x73>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:34
                return 0;
   21b90:	b8 00 00 00 00       	mov    eax,0x0
   21b95:	eb 41                	jmp    21bd8 <ataWaitForDRQ+0xb4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:35
        ticks--;
   21b97:	83 6d fc 01          	sub    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:25
//Returns non-zero value IF TIMEOUT
uint8_t __attribute__((noinline)) ataWaitForDRQ(struct ataDeviceInfo_t* devInfo, bool toBeSet, int forHowManyMS)
{
    int ticks = forHowManyMS*kTicksPerMS;
    uint8_t inValue=0;
    while (ticks > 0)
   21b9b:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   21b9f:	7f a3                	jg     21b44 <ataWaitForDRQ+0x20>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:37
                return 0;
        else if ((!toBeSet && (inValue & ATA_STATUS_DRQ) != ATA_STATUS_DRQ))
                return 0;
        ticks--;
    }
    hdError=inb(devInfo->ioPort+ATA_PORT_ERROR);
   21ba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21ba4:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21baa:	83 c0 01             	add    eax,0x1
   21bad:	0f b7 c0             	movzx  eax,ax
   21bb0:	50                   	push   eax
   21bb1:	e8 fd fe ff ff       	call   21ab3 <inb>
   21bb6:	83 c4 04             	add    esp,0x4
   21bb9:	0f b6 c0             	movzx  eax,al
   21bbc:	a3 1c eb 09 00       	mov    ds:0x9eb1c,eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:38
    if ((hdError & 0x4)==0x4)
   21bc1:	a1 1c eb 09 00       	mov    eax,ds:0x9eb1c
   21bc6:	83 e0 04             	and    eax,0x4
   21bc9:	85 c0                	test   eax,eax
   21bcb:	74 07                	je     21bd4 <ataWaitForDRQ+0xb0>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:39
        return 0;
   21bcd:	b8 00 00 00 00       	mov    eax,0x0
   21bd2:	eb 04                	jmp    21bd8 <ataWaitForDRQ+0xb4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:40
    return inValue;
   21bd4:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:41
}
   21bd8:	c9                   	leave  
   21bd9:	c3                   	ret    

00021bda <ataWaitForIdle>:
ataWaitForIdle():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:44

uint8_t ataWaitForIdle(struct ataDeviceInfo_t* devInfo)
{
   21bda:	55                   	push   ebp
   21bdb:	89 e5                	mov    ebp,esp
   21bdd:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:45
    ticks = 0;
   21be0:	d9 ee                	fldz   
   21be2:	d9 1d 28 eb 09 00    	fstp   DWORD PTR ds:0x9eb28
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:46
    uint8_t lValue=0;
   21be8:	c6 45 ff 00          	mov    BYTE PTR [ebp-0x1],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:48
    //printk("aaWaitForIdle: ticks(%u@0x%08X)=ATA_STANDARD_WAIT_MS(%d)*kTicksPerMS((%d@0x%08X))\n", ticks, &ticks, (ATA_STANDARD_WAIT_MS), kTicksPerMS, &kTicksPerMS);
    lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
   21bec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21bef:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21bf5:	83 c0 07             	add    eax,0x7
   21bf8:	0f b7 c0             	movzx  eax,ax
   21bfb:	50                   	push   eax
   21bfc:	e8 b2 fe ff ff       	call   21ab3 <inb>
   21c01:	83 c4 04             	add    esp,0x4
   21c04:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:49
    if ((lValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ && ticks)
   21c07:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   21c0b:	83 e0 08             	and    eax,0x8
   21c0e:	85 c0                	test   eax,eax
   21c10:	74 76                	je     21c88 <ataWaitForIdle+0xae>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:49 (discriminator 1)
   21c12:	d9 05 28 eb 09 00    	fld    DWORD PTR ds:0x9eb28
   21c18:	d9 ee                	fldz   
   21c1a:	df e9                	fucomip st,st(1)
   21c1c:	7a 0a                	jp     21c28 <ataWaitForIdle+0x4e>
   21c1e:	d9 ee                	fldz   
   21c20:	df e9                	fucomip st,st(1)
   21c22:	dd d8                	fstp   st(0)
   21c24:	74 19                	je     21c3f <ataWaitForIdle+0x65>
   21c26:	eb 02                	jmp    21c2a <ataWaitForIdle+0x50>
   21c28:	dd d8                	fstp   st(0)
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:50
        inw(devInfo->ioPort+ATA_PORT_DATA);
   21c2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21c2d:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21c33:	0f b7 c0             	movzx  eax,ax
   21c36:	50                   	push   eax
   21c37:	e8 94 fe ff ff       	call   21ad0 <inw>
   21c3c:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:51
    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   21c3f:	eb 47                	jmp    21c88 <ataWaitForIdle+0xae>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:53
    {
        __asm__("sti\nhlt\n");
   21c41:	fb                   	sti    
   21c42:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:54
        lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
   21c43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21c46:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21c4c:	83 c0 07             	add    eax,0x7
   21c4f:	0f b7 c0             	movzx  eax,ax
   21c52:	50                   	push   eax
   21c53:	e8 5b fe ff ff       	call   21ab3 <inb>
   21c58:	83 c4 04             	add    esp,0x4
   21c5b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:56
            //If both BUSY and DRQ are zero, then, the command is probably complete. 
        if ((lValue & (ATA_STATUS_DRQ | ATA_STATUS_BUSY)) == 0 )
   21c5e:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   21c62:	25 88 00 00 00       	and    eax,0x88
   21c67:	85 c0                	test   eax,eax
   21c69:	75 07                	jne    21c72 <ataWaitForIdle+0x98>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:57
                    return 0;
   21c6b:	b8 00 00 00 00       	mov    eax,0x0
   21c70:	eb 73                	jmp    21ce5 <ataWaitForIdle+0x10b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:58
        ticks++;
   21c72:	d9 05 28 eb 09 00    	fld    DWORD PTR ds:0x9eb28
   21c78:	d9 e8                	fld1   
   21c7a:	de c1                	faddp  st(1),st
   21c7c:	d9 5d ec             	fstp   DWORD PTR [ebp-0x14]
   21c7f:	d9 45 ec             	fld    DWORD PTR [ebp-0x14]
   21c82:	d9 1d 28 eb 09 00    	fstp   DWORD PTR ds:0x9eb28
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:51
    uint8_t lValue=0;
    //printk("aaWaitForIdle: ticks(%u@0x%08X)=ATA_STANDARD_WAIT_MS(%d)*kTicksPerMS((%d@0x%08X))\n", ticks, &ticks, (ATA_STANDARD_WAIT_MS), kTicksPerMS, &kTicksPerMS);
    lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
    if ((lValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ && ticks)
        inw(devInfo->ioPort+ATA_PORT_DATA);
    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   21c88:	d9 05 28 eb 09 00    	fld    DWORD PTR ds:0x9eb28
   21c8e:	d9 c0                	fld    st(0)
   21c90:	d9 e8                	fld1   
   21c92:	de c1                	faddp  st(1),st
   21c94:	d9 5d ec             	fstp   DWORD PTR [ebp-0x14]
   21c97:	d9 45 ec             	fld    DWORD PTR [ebp-0x14]
   21c9a:	d9 1d 28 eb 09 00    	fstp   DWORD PTR ds:0x9eb28
   21ca0:	8b 15 84 02 12 00    	mov    edx,DWORD PTR ds:0x120284
   21ca6:	89 d0                	mov    eax,edx
   21ca8:	c1 e0 02             	shl    eax,0x2
   21cab:	01 d0                	add    eax,edx
   21cad:	01 c0                	add    eax,eax
   21caf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   21cb2:	db 45 e8             	fild   DWORD PTR [ebp-0x18]
   21cb5:	d9 5d ec             	fstp   DWORD PTR [ebp-0x14]
   21cb8:	d9 45 ec             	fld    DWORD PTR [ebp-0x14]
   21cbb:	df e9                	fucomip st,st(1)
   21cbd:	dd d8                	fstp   st(0)
   21cbf:	73 80                	jae    21c41 <ataWaitForIdle+0x67>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:60
            //If both BUSY and DRQ are zero, then, the command is probably complete. 
        if ((lValue & (ATA_STATUS_DRQ | ATA_STATUS_BUSY)) == 0 )
                    return 0;
        ticks++;
    }
    hdError=inb(devInfo->ioPort+ATA_PORT_ERROR);
   21cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21cc4:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21cca:	83 c0 01             	add    eax,0x1
   21ccd:	0f b7 c0             	movzx  eax,ax
   21cd0:	50                   	push   eax
   21cd1:	e8 dd fd ff ff       	call   21ab3 <inb>
   21cd6:	83 c4 04             	add    esp,0x4
   21cd9:	0f b6 c0             	movzx  eax,al
   21cdc:	a3 1c eb 09 00       	mov    ds:0x9eb1c,eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:61
    return lValue;
   21ce1:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:62
}
   21ce5:	c9                   	leave  
   21ce6:	c3                   	ret    

00021ce7 <ataControllerIsReady>:
ataControllerIsReady():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:66


uint8_t ataControllerIsReady(struct ataDeviceInfo_t* devInfo)
{
   21ce7:	55                   	push   ebp
   21ce8:	89 e5                	mov    ebp,esp
   21cea:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:67
    int ticks = 0;
   21ced:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:69
    
    int lStatus=0;
   21cf4:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:70
    uint8_t err=0;
   21cfb:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:72

    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   21cff:	eb 4a                	jmp    21d4b <ataControllerIsReady+0x64>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:74
    {
        lStatus=inb(devInfo->ioPort+ATA_PORT_STATUS);
   21d01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21d04:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21d0a:	83 c0 07             	add    eax,0x7
   21d0d:	0f b7 c0             	movzx  eax,ax
   21d10:	50                   	push   eax
   21d11:	e8 9d fd ff ff       	call   21ab3 <inb>
   21d16:	83 c4 04             	add    esp,0x4
   21d19:	0f b6 c0             	movzx  eax,al
   21d1c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:75
        wait(1);
   21d1f:	83 ec 0c             	sub    esp,0xc
   21d22:	6a 01                	push   0x1
   21d24:	e8 cd 65 00 00       	call   282f6 <wait>
   21d29:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:76
        ticks++;
   21d2c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:77
	lStatus &= (ATA_STATUS_BUSY | ATA_STATUS_READY| ATA_STATUS_SEEK);
   21d30:	81 65 f0 d0 00 00 00 	and    DWORD PTR [ebp-0x10],0xd0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:78
        if (lStatus & ATA_STATUS_READY )
   21d37:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21d3a:	83 e0 40             	and    eax,0x40
   21d3d:	85 c0                	test   eax,eax
   21d3f:	74 0a                	je     21d4b <ataControllerIsReady+0x64>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:79
                return true;
   21d41:	b8 01 00 00 00       	mov    eax,0x1
   21d46:	e9 9c 00 00 00       	jmp    21de7 <ataControllerIsReady+0x100>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:72
    int ticks = 0;
    
    int lStatus=0;
    uint8_t err=0;

    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   21d4b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21d4e:	8d 42 01             	lea    eax,[edx+0x1]
   21d51:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   21d54:	8b 0d 84 02 12 00    	mov    ecx,DWORD PTR ds:0x120284
   21d5a:	89 c8                	mov    eax,ecx
   21d5c:	c1 e0 02             	shl    eax,0x2
   21d5f:	01 c8                	add    eax,ecx
   21d61:	01 c0                	add    eax,eax
   21d63:	39 c2                	cmp    edx,eax
   21d65:	7e 9a                	jle    21d01 <ataControllerIsReady+0x1a>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:82
	lStatus &= (ATA_STATUS_BUSY | ATA_STATUS_READY| ATA_STATUS_SEEK);
        if (lStatus & ATA_STATUS_READY )
                return true;
    }

    if (lStatus==ATA_STATUS_ERROR || lStatus==ATA_STATUS_BUSY)
   21d67:	83 7d f0 01          	cmp    DWORD PTR [ebp-0x10],0x1
   21d6b:	74 09                	je     21d76 <ataControllerIsReady+0x8f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:82 (discriminator 1)
   21d6d:	81 7d f0 80 00 00 00 	cmp    DWORD PTR [ebp-0x10],0x80
   21d74:	75 36                	jne    21dac <ataControllerIsReady+0xc5>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:84
    {
         err=inb(0x1f1);
   21d76:	83 ec 0c             	sub    esp,0xc
   21d79:	68 f1 01 00 00       	push   0x1f1
   21d7e:	e8 30 fd ff ff       	call   21ab3 <inb>
   21d83:	83 c4 10             	add    esp,0x10
   21d86:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:86
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   21d89:	a1 38 03 12 00       	mov    eax,ds:0x120338
   21d8e:	83 e0 08             	and    eax,0x8
   21d91:	85 c0                	test   eax,eax
   21d93:	74 17                	je     21dac <ataControllerIsReady+0xc5>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:87
            printd(DEBUG_HARDDRIVE,"ataControllerIsReady: DRQ wait failed, lStatus=%02X, err=%02X\n",lStatus,err);
   21d95:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   21d99:	50                   	push   eax
   21d9a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   21d9d:	68 c0 3a 08 00       	push   0x83ac0
   21da2:	6a 08                	push   0x8
   21da4:	e8 2e 53 00 00       	call   270d7 <printd>
   21da9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:90
#endif
    }
    if ( (lStatus & ATA_STATUS_READY)==0 && err==4)
   21dac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21daf:	83 e0 40             	and    eax,0x40
   21db2:	85 c0                	test   eax,eax
   21db4:	75 0d                	jne    21dc3 <ataControllerIsReady+0xdc>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:90 (discriminator 1)
   21db6:	80 7d ef 04          	cmp    BYTE PTR [ebp-0x11],0x4
   21dba:	75 07                	jne    21dc3 <ataControllerIsReady+0xdc>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:91
        lStatus=ATA_STATUS_READY;
   21dbc:	c7 45 f0 40 00 00 00 	mov    DWORD PTR [ebp-0x10],0x40
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:93
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   21dc3:	a1 38 03 12 00       	mov    eax,ds:0x120338
   21dc8:	83 e0 08             	and    eax,0x8
   21dcb:	85 c0                	test   eax,eax
   21dcd:	74 13                	je     21de2 <ataControllerIsReady+0xfb>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:94
            printk("ataControllerIsReady: returning %02X\n",lStatus);
   21dcf:	83 ec 08             	sub    esp,0x8
   21dd2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   21dd5:	68 00 3b 08 00       	push   0x83b00
   21dda:	e8 d8 52 00 00       	call   270b7 <printk>
   21ddf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:96
#endif
    return true;
   21de2:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:97
}
   21de7:	c9                   	leave  
   21de8:	c3                   	ret    

00021de9 <ataStatusIsOk>:
ataStatusIsOk():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:100

static bool ataStatusIsOk(struct ataDeviceInfo_t* devInfo)
{
   21de9:	55                   	push   ebp
   21dea:	89 e5                	mov    ebp,esp
   21dec:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:101
	unsigned char status = inb(devInfo->ioPort+ATA_PORT_STATUS);
   21def:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21df2:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21df8:	83 c0 07             	add    eax,0x7
   21dfb:	0f b7 c0             	movzx  eax,ax
   21dfe:	50                   	push   eax
   21dff:	e8 af fc ff ff       	call   21ab3 <inb>
   21e04:	83 c4 04             	add    esp,0x4
   21e07:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:103

	if (status & ATA_STATUS_BUSY)
   21e0a:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   21e0e:	84 c0                	test   al,al
   21e10:	79 07                	jns    21e19 <ataStatusIsOk+0x30>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:104
		return false;
   21e12:	b8 00 00 00 00       	mov    eax,0x0
   21e17:	eb 3b                	jmp    21e54 <ataStatusIsOk+0x6b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:105
	if (status & ATA_STATUS_WRITE_ERROR)
   21e19:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   21e1d:	83 e0 20             	and    eax,0x20
   21e20:	85 c0                	test   eax,eax
   21e22:	74 07                	je     21e2b <ataStatusIsOk+0x42>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:106
		return true;
   21e24:	b8 01 00 00 00       	mov    eax,0x1
   21e29:	eb 29                	jmp    21e54 <ataStatusIsOk+0x6b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:107
	if (!(status & ATA_STATUS_READY))
   21e2b:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   21e2f:	83 e0 40             	and    eax,0x40
   21e32:	85 c0                	test   eax,eax
   21e34:	75 07                	jne    21e3d <ataStatusIsOk+0x54>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:108
		return true;
   21e36:	b8 01 00 00 00       	mov    eax,0x1
   21e3b:	eb 17                	jmp    21e54 <ataStatusIsOk+0x6b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:109
	if (!(status & ATA_STATUS_SEEK))
   21e3d:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   21e41:	83 e0 10             	and    eax,0x10
   21e44:	85 c0                	test   eax,eax
   21e46:	75 07                	jne    21e4f <ataStatusIsOk+0x66>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:110
		return true;
   21e48:	b8 01 00 00 00       	mov    eax,0x1
   21e4d:	eb 05                	jmp    21e54 <ataStatusIsOk+0x6b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:111
	return 1;
   21e4f:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:112
}
   21e54:	c9                   	leave  
   21e55:	c3                   	ret    

00021e56 <ataSelectDrive>:
ataSelectDrive():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:115

bool ataSelectDrive(struct ataDeviceInfo_t* devInfo, uint8_t head)
{
   21e56:	55                   	push   ebp
   21e57:	89 e5                	mov    ebp,esp
   21e59:	83 ec 28             	sub    esp,0x28
   21e5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21e5f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:116
    ataWaitForIdle(devInfo);
   21e62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21e65:	e8 70 fd ff ff       	call   21bda <ataWaitForIdle>
   21e6a:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:117
    outb(devInfo->ioPort+ATA_DRIVE_SELECT, devInfo->driveHeadPortDesignation | (head& 0xF) ); 
   21e6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21e70:	0f b6 80 6e 02 00 00 	movzx  eax,BYTE PTR [eax+0x26e]
   21e77:	89 c2                	mov    edx,eax
   21e79:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   21e7d:	83 e0 0f             	and    eax,0xf
   21e80:	09 d0                	or     eax,edx
   21e82:	0f b6 d0             	movzx  edx,al
   21e85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21e88:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21e8e:	83 c0 06             	add    eax,0x6
   21e91:	0f b7 c0             	movzx  eax,ax
   21e94:	52                   	push   edx
   21e95:	50                   	push   eax
   21e96:	e8 f9 fb ff ff       	call   21a94 <outb>
   21e9b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:119
    //printk("Sending 0x%02X", drive==master?ATA_DRIVE_MASTER:ATA_DRIVE_SLAVE | (head& 0xF));
    if (!ataStatusIsOk(devInfo))
   21e9e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21ea1:	e8 43 ff ff ff       	call   21de9 <ataStatusIsOk>
   21ea6:	83 c4 04             	add    esp,0x4
   21ea9:	83 f0 01             	xor    eax,0x1
   21eac:	84 c0                	test   al,al
   21eae:	74 6e                	je     21f1e <ataSelectDrive+0xc8>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:122
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   21eb0:	a1 38 03 12 00       	mov    eax,ds:0x120338
   21eb5:	83 e0 08             	and    eax,0x8
   21eb8:	85 c0                	test   eax,eax
   21eba:	74 3d                	je     21ef9 <ataSelectDrive+0xa3>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:123
            printk("ataSelectDrive: Failed to select drive %u, bus %u, status=0x%02X is not ok\n", devInfo->driveNo, devInfo->bus, inb(devInfo->ioPort+ATA_PORT_STATUS));
   21ebc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21ebf:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21ec5:	83 c0 07             	add    eax,0x7
   21ec8:	0f b7 c0             	movzx  eax,ax
   21ecb:	50                   	push   eax
   21ecc:	e8 e2 fb ff ff       	call   21ab3 <inb>
   21ed1:	83 c4 04             	add    esp,0x4
   21ed4:	0f b6 c8             	movzx  ecx,al
   21ed7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21eda:	8b 90 61 02 00 00    	mov    edx,DWORD PTR [eax+0x261]
   21ee0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21ee3:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   21ee9:	51                   	push   ecx
   21eea:	52                   	push   edx
   21eeb:	50                   	push   eax
   21eec:	68 28 3b 08 00       	push   0x83b28
   21ef1:	e8 c1 51 00 00       	call   270b7 <printk>
   21ef6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:125
#endif
            return inb(devInfo->ioPort+ATA_PORT_STATUS);
   21ef9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21efc:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21f02:	83 c0 07             	add    eax,0x7
   21f05:	0f b7 c0             	movzx  eax,ax
   21f08:	83 ec 0c             	sub    esp,0xc
   21f0b:	50                   	push   eax
   21f0c:	e8 a2 fb ff ff       	call   21ab3 <inb>
   21f11:	83 c4 10             	add    esp,0x10
   21f14:	84 c0                	test   al,al
   21f16:	0f 95 c0             	setne  al
   21f19:	e9 96 00 00 00       	jmp    21fb4 <ataSelectDrive+0x15e>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:128
    }
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   21f1e:	a1 38 03 12 00       	mov    eax,ds:0x120338
   21f23:	83 e0 08             	and    eax,0x8
   21f26:	85 c0                	test   eax,eax
   21f28:	0f 84 81 00 00 00    	je     21faf <ataSelectDrive+0x159>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:130
    {
        wait(10);
   21f2e:	83 ec 0c             	sub    esp,0xc
   21f31:	6a 0a                	push   0xa
   21f33:	e8 be 63 00 00       	call   282f6 <wait>
   21f38:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:131
        unsigned lDrive=inb(devInfo->ioPort+ATA_DRIVE_SELECT);
   21f3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21f3e:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21f44:	83 c0 06             	add    eax,0x6
   21f47:	0f b7 c0             	movzx  eax,ax
   21f4a:	83 ec 0c             	sub    esp,0xc
   21f4d:	50                   	push   eax
   21f4e:	e8 60 fb ff ff       	call   21ab3 <inb>
   21f53:	83 c4 10             	add    esp,0x10
   21f56:	0f b6 c0             	movzx  eax,al
   21f59:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:132
            printk("ataSelectDrive: Drive selected: %s (%u, 0x%02X), err=0x%02X\n", (lDrive & (1<<4)) == 1<<4?"Slave":"Master", devInfo->driveNo, lDrive, inb(devInfo->ioPort+ATA_PORT_ERROR));
   21f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21f5f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21f65:	83 c0 01             	add    eax,0x1
   21f68:	0f b7 c0             	movzx  eax,ax
   21f6b:	83 ec 0c             	sub    esp,0xc
   21f6e:	50                   	push   eax
   21f6f:	e8 3f fb ff ff       	call   21ab3 <inb>
   21f74:	83 c4 10             	add    esp,0x10
   21f77:	0f b6 d0             	movzx  edx,al
   21f7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21f7d:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   21f83:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21f86:	83 e1 10             	and    ecx,0x10
   21f89:	85 c9                	test   ecx,ecx
   21f8b:	74 07                	je     21f94 <ataSelectDrive+0x13e>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:132 (discriminator 1)
   21f8d:	b9 74 3b 08 00       	mov    ecx,0x83b74
   21f92:	eb 05                	jmp    21f99 <ataSelectDrive+0x143>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:132 (discriminator 2)
   21f94:	b9 7a 3b 08 00       	mov    ecx,0x83b7a
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:132 (discriminator 4)
   21f99:	83 ec 0c             	sub    esp,0xc
   21f9c:	52                   	push   edx
   21f9d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   21fa0:	50                   	push   eax
   21fa1:	51                   	push   ecx
   21fa2:	68 84 3b 08 00       	push   0x83b84
   21fa7:	e8 0b 51 00 00       	call   270b7 <printk>
   21fac:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:136
    }
#endif
        
    return 0;
   21faf:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:137
}
   21fb4:	c9                   	leave  
   21fb5:	c3                   	ret    

00021fb6 <ataResetController>:
ataResetController():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:161
	outb(++port, 0xA0 |(drive<<4)|head);
	outb(++port, cmd);
}
*/
static void ataResetController(struct ataDeviceInfo_t* devInfo)
{
   21fb6:	55                   	push   ebp
   21fb7:	89 e5                	mov    ebp,esp
   21fb9:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:162
        outb(devInfo->ioPort+ATA_PORT_COMMAND, 4);
   21fbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21fbf:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21fc5:	83 c0 07             	add    eax,0x7
   21fc8:	0f b7 c0             	movzx  eax,ax
   21fcb:	6a 04                	push   0x4
   21fcd:	50                   	push   eax
   21fce:	e8 c1 fa ff ff       	call   21a94 <outb>
   21fd3:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:163
        waitTicks(kTicksPerSecond/10);
   21fd6:	8b 0d 80 02 12 00    	mov    ecx,DWORD PTR ds:0x120280
   21fdc:	ba 67 66 66 66       	mov    edx,0x66666667
   21fe1:	89 c8                	mov    eax,ecx
   21fe3:	f7 ea                	imul   edx
   21fe5:	c1 fa 02             	sar    edx,0x2
   21fe8:	89 c8                	mov    eax,ecx
   21fea:	c1 f8 1f             	sar    eax,0x1f
   21fed:	29 c2                	sub    edx,eax
   21fef:	89 d0                	mov    eax,edx
   21ff1:	83 ec 0c             	sub    esp,0xc
   21ff4:	50                   	push   eax
   21ff5:	e8 e1 62 00 00       	call   282db <waitTicks>
   21ffa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:164
        outb(devInfo->ioPort+ATA_PORT_CONTROL, 1<<2);
   21ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22000:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22006:	66 05 f6 03          	add    ax,0x3f6
   2200a:	0f b7 c0             	movzx  eax,ax
   2200d:	83 ec 08             	sub    esp,0x8
   22010:	6a 04                	push   0x4
   22012:	50                   	push   eax
   22013:	e8 7c fa ff ff       	call   21a94 <outb>
   22018:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:165
        wait(10);
   2201b:	83 ec 0c             	sub    esp,0xc
   2201e:	6a 0a                	push   0xa
   22020:	e8 d1 62 00 00       	call   282f6 <wait>
   22025:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:166
        outb(devInfo->ioPort+ATA_PORT_CONTROL, 0);
   22028:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2202b:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22031:	66 05 f6 03          	add    ax,0x3f6
   22035:	0f b7 c0             	movzx  eax,ax
   22038:	83 ec 08             	sub    esp,0x8
   2203b:	6a 00                	push   0x0
   2203d:	50                   	push   eax
   2203e:	e8 51 fa ff ff       	call   21a94 <outb>
   22043:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:167
        if (!ataControllerIsReady(devInfo))
   22046:	83 ec 0c             	sub    esp,0xc
   22049:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2204c:	e8 96 fc ff ff       	call   21ce7 <ataControllerIsReady>
   22051:	83 c4 10             	add    esp,0x10
   22054:	84 c0                	test   al,al
   22056:	75 1c                	jne    22074 <ataResetController+0xbe>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:169
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22058:	a1 38 03 12 00       	mov    eax,ds:0x120338
   2205d:	83 e0 08             	and    eax,0x8
   22060:	85 c0                	test   eax,eax
   22062:	74 10                	je     22074 <ataResetController+0xbe>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:170
            printk("HD-controller still busy\n");
   22064:	83 ec 0c             	sub    esp,0xc
   22067:	68 c1 3b 08 00       	push   0x83bc1
   2206c:	e8 46 50 00 00       	call   270b7 <printk>
   22071:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:172
#endif
        if ((hdError = inb(devInfo->ioPort+ATA_PORT_ERROR)) != 0 && (hdError = inb(devInfo->ioPort+ATA_PORT_ERROR)) != 4)
   22074:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22077:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2207d:	83 c0 01             	add    eax,0x1
   22080:	0f b7 c0             	movzx  eax,ax
   22083:	83 ec 0c             	sub    esp,0xc
   22086:	50                   	push   eax
   22087:	e8 27 fa ff ff       	call   21ab3 <inb>
   2208c:	83 c4 10             	add    esp,0x10
   2208f:	0f b6 c0             	movzx  eax,al
   22092:	a3 1c eb 09 00       	mov    ds:0x9eb1c,eax
   22097:	a1 1c eb 09 00       	mov    eax,ds:0x9eb1c
   2209c:	85 c0                	test   eax,eax
   2209e:	74 5d                	je     220fd <ataResetController+0x147>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:172 (discriminator 1)
   220a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   220a3:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   220a9:	83 c0 01             	add    eax,0x1
   220ac:	0f b7 c0             	movzx  eax,ax
   220af:	83 ec 0c             	sub    esp,0xc
   220b2:	50                   	push   eax
   220b3:	e8 fb f9 ff ff       	call   21ab3 <inb>
   220b8:	83 c4 10             	add    esp,0x10
   220bb:	0f b6 c0             	movzx  eax,al
   220be:	a3 1c eb 09 00       	mov    ds:0x9eb1c,eax
   220c3:	a1 1c eb 09 00       	mov    eax,ds:0x9eb1c
   220c8:	83 f8 04             	cmp    eax,0x4
   220cb:	74 30                	je     220fd <ataResetController+0x147>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:173
            printk("Controller reset failed on %s bus: %02x\n",devInfo->bus==0?"Primary":"Secondary", hdError);
   220cd:	a1 1c eb 09 00       	mov    eax,ds:0x9eb1c
   220d2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   220d5:	8b 92 61 02 00 00    	mov    edx,DWORD PTR [edx+0x261]
   220db:	85 d2                	test   edx,edx
   220dd:	75 07                	jne    220e6 <ataResetController+0x130>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:173 (discriminator 1)
   220df:	ba db 3b 08 00       	mov    edx,0x83bdb
   220e4:	eb 05                	jmp    220eb <ataResetController+0x135>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:173 (discriminator 2)
   220e6:	ba e3 3b 08 00       	mov    edx,0x83be3
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:173 (discriminator 4)
   220eb:	83 ec 04             	sub    esp,0x4
   220ee:	50                   	push   eax
   220ef:	52                   	push   edx
   220f0:	68 f0 3b 08 00       	push   0x83bf0
   220f5:	e8 bd 4f 00 00       	call   270b7 <printk>
   220fa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:175
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   220fd:	a1 38 03 12 00       	mov    eax,ds:0x120338
   22102:	83 e0 08             	and    eax,0x8
   22105:	85 c0                	test   eax,eax
   22107:	74 10                	je     22119 <ataResetController+0x163>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:176
            printk("ataResetController: controller is ready\n");
   22109:	83 ec 0c             	sub    esp,0xc
   2210c:	68 1c 3c 08 00       	push   0x83c1c
   22111:	e8 a1 4f 00 00       	call   270b7 <printk>
   22116:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:178
#endif
}
   22119:	90                   	nop
   2211a:	c9                   	leave  
   2211b:	c3                   	ret    

0002211c <ataInit>:
ataInit():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:180
int ataInit(struct ataDeviceInfo_t* devInfo)
{
   2211c:	55                   	push   ebp
   2211d:	89 e5                	mov    ebp,esp
   2211f:	53                   	push   ebx
   22120:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:181
    ataResetController(devInfo);
   22123:	83 ec 0c             	sub    esp,0xc
   22126:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   22129:	e8 88 fe ff ff       	call   21fb6 <ataResetController>
   2212e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:182
    int cStatus=0, ticks=0;
   22131:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   22138:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:183
    ataSelectDrive(devInfo,0);
   2213f:	83 ec 08             	sub    esp,0x8
   22142:	6a 00                	push   0x0
   22144:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   22147:	e8 0a fd ff ff       	call   21e56 <ataSelectDrive>
   2214c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:184
    outb(devInfo->ioPort+ATA_PORT_SECTORCOUNT, 0x55);
   2214f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22152:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22158:	83 c0 02             	add    eax,0x2
   2215b:	0f b7 c0             	movzx  eax,ax
   2215e:	83 ec 08             	sub    esp,0x8
   22161:	6a 55                	push   0x55
   22163:	50                   	push   eax
   22164:	e8 2b f9 ff ff       	call   21a94 <outb>
   22169:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:185
    outb(devInfo->ioPort+ATA_PORT_SECTOR_NUMBER, 0xAA);
   2216c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2216f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22175:	83 c0 03             	add    eax,0x3
   22178:	0f b7 c0             	movzx  eax,ax
   2217b:	83 ec 08             	sub    esp,0x8
   2217e:	68 aa 00 00 00       	push   0xaa
   22183:	50                   	push   eax
   22184:	e8 0b f9 ff ff       	call   21a94 <outb>
   22189:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:186
    outb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW,0x55);
   2218c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2218f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22195:	83 c0 04             	add    eax,0x4
   22198:	0f b7 c0             	movzx  eax,ax
   2219b:	83 ec 08             	sub    esp,0x8
   2219e:	6a 55                	push   0x55
   221a0:	50                   	push   eax
   221a1:	e8 ee f8 ff ff       	call   21a94 <outb>
   221a6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:187
    outb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH,0xAA);
   221a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   221ac:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   221b2:	83 c0 05             	add    eax,0x5
   221b5:	0f b7 c0             	movzx  eax,ax
   221b8:	83 ec 08             	sub    esp,0x8
   221bb:	68 aa 00 00 00       	push   0xaa
   221c0:	50                   	push   eax
   221c1:	e8 ce f8 ff ff       	call   21a94 <outb>
   221c6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:188
    outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
   221c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   221cc:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   221d2:	83 c0 07             	add    eax,0x7
   221d5:	0f b7 c0             	movzx  eax,ax
   221d8:	83 ec 08             	sub    esp,0x8
   221db:	68 ec 00 00 00       	push   0xec
   221e0:	50                   	push   eax
   221e1:	e8 ae f8 ff ff       	call   21a94 <outb>
   221e6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:189
    wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
   221e9:	8b 15 84 02 12 00    	mov    edx,DWORD PTR ds:0x120284
   221ef:	89 d0                	mov    eax,edx
   221f1:	c1 e0 02             	shl    eax,0x2
   221f4:	01 d0                	add    eax,edx
   221f6:	01 c0                	add    eax,eax
   221f8:	83 ec 0c             	sub    esp,0xc
   221fb:	50                   	push   eax
   221fc:	e8 f5 60 00 00       	call   282f6 <wait>
   22201:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:190
    cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
   22204:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22207:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2220d:	83 c0 07             	add    eax,0x7
   22210:	0f b7 c0             	movzx  eax,ax
   22213:	83 ec 0c             	sub    esp,0xc
   22216:	50                   	push   eax
   22217:	e8 97 f8 ff ff       	call   21ab3 <inb>
   2221c:	83 c4 10             	add    esp,0x10
   2221f:	0f b6 c0             	movzx  eax,al
   22222:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:191
    if (cStatus==0)
   22225:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   22229:	75 33                	jne    2225e <ataInit+0x142>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:194
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   2222b:	a1 38 03 12 00       	mov    eax,ds:0x120338
   22230:	83 e0 08             	and    eax,0x8
   22233:	85 c0                	test   eax,eax
   22235:	74 1d                	je     22254 <ataInit+0x138>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:195
            printk("Drive %02X, not ready(%02X)\n",devInfo->driveNo, cStatus);
   22237:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2223a:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   22240:	83 ec 04             	sub    esp,0x4
   22243:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22246:	50                   	push   eax
   22247:	68 45 3c 08 00       	push   0x83c45
   2224c:	e8 66 4e 00 00       	call   270b7 <printk>
   22251:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:197
#endif
        return false;
   22254:	b8 00 00 00 00       	mov    eax,0x0
   22259:	e9 f3 01 00 00       	jmp    22451 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:199
    }
    if ((cStatus & 1) == 1)
   2225e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   22261:	83 e0 01             	and    eax,0x1
   22264:	85 c0                	test   eax,eax
   22266:	0f 84 bb 00 00 00    	je     22327 <ataInit+0x20b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:201
    {
        int err = inb(devInfo->ioPort+ATA_PORT_ERROR);
   2226c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2226f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22275:	83 c0 01             	add    eax,0x1
   22278:	0f b7 c0             	movzx  eax,ax
   2227b:	83 ec 0c             	sub    esp,0xc
   2227e:	50                   	push   eax
   2227f:	e8 2f f8 ff ff       	call   21ab3 <inb>
   22284:	83 c4 10             	add    esp,0x10
   22287:	0f b6 c0             	movzx  eax,al
   2228a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:203
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   2228d:	a1 38 03 12 00       	mov    eax,ds:0x120338
   22292:	83 e0 08             	and    eax,0x8
   22295:	85 c0                	test   eax,eax
   22297:	74 1d                	je     222b6 <ataInit+0x19a>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:204
            printk("drive %02X, cStatus=%02X, errreg=%02X\n",devInfo->driveNo, cStatus,err);
   22299:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2229c:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   222a2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   222a5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   222a8:	50                   	push   eax
   222a9:	68 64 3c 08 00       	push   0x83c64
   222ae:	e8 04 4e 00 00       	call   270b7 <printk>
   222b3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:206
#endif
        if (err!=4)
   222b6:	83 7d ec 04          	cmp    DWORD PTR [ebp-0x14],0x4
   222ba:	74 0a                	je     222c6 <ataInit+0x1aa>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:207
            return false;
   222bc:	b8 00 00 00 00       	mov    eax,0x0
   222c1:	e9 8b 01 00 00       	jmp    22451 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:208
        useCDROMIdentify = true;
   222c6:	c6 05 18 eb 09 00 01 	mov    BYTE PTR ds:0x9eb18,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:209
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
   222cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   222d0:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   222d6:	83 c0 07             	add    eax,0x7
   222d9:	0f b7 c0             	movzx  eax,ax
   222dc:	83 ec 0c             	sub    esp,0xc
   222df:	50                   	push   eax
   222e0:	e8 ce f7 ff ff       	call   21ab3 <inb>
   222e5:	83 c4 10             	add    esp,0x10
   222e8:	0f b6 c0             	movzx  eax,al
   222eb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:210
        if (cStatus==0)
   222ee:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   222f2:	75 33                	jne    22327 <ataInit+0x20b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:213
        {
#ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   222f4:	a1 38 03 12 00       	mov    eax,ds:0x120338
   222f9:	83 e0 08             	and    eax,0x8
   222fc:	85 c0                	test   eax,eax
   222fe:	74 1d                	je     2231d <ataInit+0x201>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:214
                printk("Drive %02X, not ready(%02X)\n",devInfo->driveNo, cStatus);
   22300:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22303:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   22309:	83 ec 04             	sub    esp,0x4
   2230c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2230f:	50                   	push   eax
   22310:	68 45 3c 08 00       	push   0x83c45
   22315:	e8 9d 4d 00 00       	call   270b7 <printk>
   2231a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:216
#endif
            return false;
   2231d:	b8 00 00 00 00       	mov    eax,0x0
   22322:	e9 2a 01 00 00       	jmp    22451 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:219
        }
    }
    ticks=ATA_STANDARD_WAIT_MS*kTicksPerMS;
   22327:	8b 15 84 02 12 00    	mov    edx,DWORD PTR ds:0x120284
   2232d:	89 d0                	mov    eax,edx
   2232f:	c1 e0 02             	shl    eax,0x2
   22332:	01 d0                	add    eax,edx
   22334:	01 c0                	add    eax,eax
   22336:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:220
    while ((cStatus & ATA_STATUS_BUSY) == ATA_STATUS_BUSY && (ticks>0))
   22339:	eb 32                	jmp    2236d <ataInit+0x251>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:222
    {
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
   2233b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2233e:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22344:	83 c0 07             	add    eax,0x7
   22347:	0f b7 c0             	movzx  eax,ax
   2234a:	83 ec 0c             	sub    esp,0xc
   2234d:	50                   	push   eax
   2234e:	e8 60 f7 ff ff       	call   21ab3 <inb>
   22353:	83 c4 10             	add    esp,0x10
   22356:	0f b6 c0             	movzx  eax,al
   22359:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:223
        wait(1);
   2235c:	83 ec 0c             	sub    esp,0xc
   2235f:	6a 01                	push   0x1
   22361:	e8 90 5f 00 00       	call   282f6 <wait>
   22366:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:224
        ticks--;
   22369:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:220
#endif
            return false;
        }
    }
    ticks=ATA_STANDARD_WAIT_MS*kTicksPerMS;
    while ((cStatus & ATA_STATUS_BUSY) == ATA_STATUS_BUSY && (ticks>0))
   2236d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   22370:	25 80 00 00 00       	and    eax,0x80
   22375:	85 c0                	test   eax,eax
   22377:	74 06                	je     2237f <ataInit+0x263>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:220 (discriminator 1)
   22379:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   2237d:	7f bc                	jg     2233b <ataInit+0x21f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:226
    {
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
        wait(1);
        ticks--;
    }
    if (!ataControllerIsReady(devInfo))
   2237f:	83 ec 0c             	sub    esp,0xc
   22382:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   22385:	e8 5d f9 ff ff       	call   21ce7 <ataControllerIsReady>
   2238a:	83 c4 10             	add    esp,0x10
   2238d:	84 c0                	test   al,al
   2238f:	75 0a                	jne    2239b <ataInit+0x27f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:227
        return false;
   22391:	b8 00 00 00 00       	mov    eax,0x0
   22396:	e9 b6 00 00 00       	jmp    22451 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:228
    if (inb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW)!=0x55 || inb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH)!=0xaa)
   2239b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2239e:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   223a4:	83 c0 04             	add    eax,0x4
   223a7:	0f b7 c0             	movzx  eax,ax
   223aa:	83 ec 0c             	sub    esp,0xc
   223ad:	50                   	push   eax
   223ae:	e8 00 f7 ff ff       	call   21ab3 <inb>
   223b3:	83 c4 10             	add    esp,0x10
   223b6:	3c 55                	cmp    al,0x55
   223b8:	75 1f                	jne    223d9 <ataInit+0x2bd>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:228 (discriminator 1)
   223ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   223bd:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   223c3:	83 c0 05             	add    eax,0x5
   223c6:	0f b7 c0             	movzx  eax,ax
   223c9:	83 ec 0c             	sub    esp,0xc
   223cc:	50                   	push   eax
   223cd:	e8 e1 f6 ff ff       	call   21ab3 <inb>
   223d2:	83 c4 10             	add    esp,0x10
   223d5:	3c aa                	cmp    al,0xaa
   223d7:	74 73                	je     2244c <ataInit+0x330>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:231
    {
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   223d9:	a1 38 03 12 00       	mov    eax,ds:0x120338
   223de:	83 e0 08             	and    eax,0x8
   223e1:	85 c0                	test   eax,eax
   223e3:	74 4e                	je     22433 <ataInit+0x317>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:232
        printk("Cylinder port non-zero (%X,%X), device is non-ATA\n",inb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW), inb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH));
   223e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   223e8:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   223ee:	83 c0 05             	add    eax,0x5
   223f1:	0f b7 c0             	movzx  eax,ax
   223f4:	83 ec 0c             	sub    esp,0xc
   223f7:	50                   	push   eax
   223f8:	e8 b6 f6 ff ff       	call   21ab3 <inb>
   223fd:	83 c4 10             	add    esp,0x10
   22400:	0f b6 d8             	movzx  ebx,al
   22403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22406:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2240c:	83 c0 04             	add    eax,0x4
   2240f:	0f b7 c0             	movzx  eax,ax
   22412:	83 ec 0c             	sub    esp,0xc
   22415:	50                   	push   eax
   22416:	e8 98 f6 ff ff       	call   21ab3 <inb>
   2241b:	83 c4 10             	add    esp,0x10
   2241e:	0f b6 c0             	movzx  eax,al
   22421:	83 ec 04             	sub    esp,0x4
   22424:	53                   	push   ebx
   22425:	50                   	push   eax
   22426:	68 8c 3c 08 00       	push   0x83c8c
   2242b:	e8 87 4c 00 00       	call   270b7 <printk>
   22430:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:234
#endif
        if (useCDROMIdentify)
   22433:	0f b6 05 18 eb 09 00 	movzx  eax,BYTE PTR ds:0x9eb18
   2243a:	84 c0                	test   al,al
   2243c:	74 07                	je     22445 <ataInit+0x329>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:235
            return true;
   2243e:	b8 01 00 00 00       	mov    eax,0x1
   22443:	eb 0c                	jmp    22451 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:237
        else
            return false;
   22445:	b8 00 00 00 00       	mov    eax,0x0
   2244a:	eb 05                	jmp    22451 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:239
    }
    return true;
   2244c:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:240
}
   22451:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   22454:	c9                   	leave  
   22455:	c3                   	ret    

00022456 <ataGetModelFromIdentify>:
ataGetModelFromIdentify():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:243

void ataGetModelFromIdentify(struct ataDeviceInfo_t* devInfo)
{
   22456:	55                   	push   ebp
   22457:	89 e5                	mov    ebp,esp
   22459:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:244
    uint16_t* ident=devInfo->ATAIdentifyData+27;
   2245c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2245f:	83 c0 36             	add    eax,0x36
   22462:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:245
    for (int cnt=0;cnt<40;cnt+=2)
   22465:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   2246c:	eb 3d                	jmp    224ab <ataGetModelFromIdentify+0x55>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:247 (discriminator 3)
    {
        devInfo->ATADeviceModel[cnt]=(*ident >> 8) & 0xFF;
   2246e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   22471:	0f b7 00             	movzx  eax,WORD PTR [eax]
   22474:	66 c1 e8 08          	shr    ax,0x8
   22478:	89 c1                	mov    ecx,eax
   2247a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2247d:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   22480:	01 d0                	add    eax,edx
   22482:	05 00 02 00 00       	add    eax,0x200
   22487:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:248 (discriminator 3)
        devInfo->ATADeviceModel[cnt+1]=(*ident++) & 0xFF;
   22489:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   2248c:	8d 48 01             	lea    ecx,[eax+0x1]
   2248f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   22492:	8d 50 02             	lea    edx,[eax+0x2]
   22495:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   22498:	0f b7 00             	movzx  eax,WORD PTR [eax]
   2249b:	89 c2                	mov    edx,eax
   2249d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   224a0:	88 94 08 00 02 00 00 	mov    BYTE PTR [eax+ecx*1+0x200],dl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:245 (discriminator 3)
}

void ataGetModelFromIdentify(struct ataDeviceInfo_t* devInfo)
{
    uint16_t* ident=devInfo->ATAIdentifyData+27;
    for (int cnt=0;cnt<40;cnt+=2)
   224a7:	83 45 f8 02          	add    DWORD PTR [ebp-0x8],0x2
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:245 (discriminator 1)
   224ab:	83 7d f8 27          	cmp    DWORD PTR [ebp-0x8],0x27
   224af:	7e bd                	jle    2246e <ataGetModelFromIdentify+0x18>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:250
    {
        devInfo->ATADeviceModel[cnt]=(*ident >> 8) & 0xFF;
        devInfo->ATADeviceModel[cnt+1]=(*ident++) & 0xFF;
    }
    devInfo->ATADeviceModel[79]='\0';
   224b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   224b4:	c6 80 4f 02 00 00 00 	mov    BYTE PTR [eax+0x24f],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:251
}
   224bb:	90                   	nop
   224bc:	c9                   	leave  
   224bd:	c3                   	ret    

000224be <ataIdentify>:
ataIdentify():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:254

int ataIdentify(struct ataDeviceInfo_t* devInfo)
{
   224be:	55                   	push   ebp
   224bf:	89 e5                	mov    ebp,esp
   224c1:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:256
    //For ATA devices, read the identity data.  For SATA, we've already read it into ATAIdentityData
    if (devInfo->queryATAData)
   224c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   224c7:	0f b6 80 50 02 00 00 	movzx  eax,BYTE PTR [eax+0x250]
   224ce:	84 c0                	test   al,al
   224d0:	0f 84 9c 00 00 00    	je     22572 <ataIdentify+0xb4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:258
    {
        if (useCDROMIdentify)
   224d6:	0f b6 05 18 eb 09 00 	movzx  eax,BYTE PTR ds:0x9eb18
   224dd:	84 c0                	test   al,al
   224df:	74 1f                	je     22500 <ataIdentify+0x42>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:259
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_CDROM_COMMAND);
   224e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   224e4:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   224ea:	83 c0 07             	add    eax,0x7
   224ed:	0f b7 c0             	movzx  eax,ax
   224f0:	68 a1 00 00 00       	push   0xa1
   224f5:	50                   	push   eax
   224f6:	e8 99 f5 ff ff       	call   21a94 <outb>
   224fb:	83 c4 08             	add    esp,0x8
   224fe:	eb 1d                	jmp    2251d <ataIdentify+0x5f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:261
        else
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
   22500:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22503:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22509:	83 c0 07             	add    eax,0x7
   2250c:	0f b7 c0             	movzx  eax,ax
   2250f:	68 ec 00 00 00       	push   0xec
   22514:	50                   	push   eax
   22515:	e8 7a f5 ff ff       	call   21a94 <outb>
   2251a:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:262
        wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
   2251d:	8b 15 84 02 12 00    	mov    edx,DWORD PTR ds:0x120284
   22523:	89 d0                	mov    eax,edx
   22525:	c1 e0 02             	shl    eax,0x2
   22528:	01 d0                	add    eax,edx
   2252a:	01 c0                	add    eax,eax
   2252c:	83 ec 0c             	sub    esp,0xc
   2252f:	50                   	push   eax
   22530:	e8 c1 5d 00 00       	call   282f6 <wait>
   22535:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:263
        for (int readCount=0;readCount<=255;readCount++)
   22538:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   2253f:	eb 28                	jmp    22569 <ataIdentify+0xab>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:265 (discriminator 3)
        {
            devInfo->ATAIdentifyData[readCount]=inw(devInfo->ioPort+ATA_PORT_DATA);
   22541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22544:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2254a:	0f b7 c0             	movzx  eax,ax
   2254d:	83 ec 0c             	sub    esp,0xc
   22550:	50                   	push   eax
   22551:	e8 7a f5 ff ff       	call   21ad0 <inw>
   22556:	83 c4 10             	add    esp,0x10
   22559:	89 c1                	mov    ecx,eax
   2255b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2255e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   22561:	66 89 0c 50          	mov    WORD PTR [eax+edx*2],cx
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:263 (discriminator 3)
        if (useCDROMIdentify)
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_CDROM_COMMAND);
        else
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
        wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
        for (int readCount=0;readCount<=255;readCount++)
   22565:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:263 (discriminator 1)
   22569:	81 7d f4 ff 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xff
   22570:	7e cf                	jle    22541 <ataIdentify+0x83>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:268
        {
            devInfo->ATAIdentifyData[readCount]=inw(devInfo->ioPort+ATA_PORT_DATA);
        }
    }
    ataGetModelFromIdentify(devInfo);
   22572:	83 ec 0c             	sub    esp,0xc
   22575:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   22578:	e8 d9 fe ff ff       	call   22456 <ataGetModelFromIdentify>
   2257d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:269
    devInfo->totalSectorCount = devInfo->ATAIdentifyData[60] | (devInfo->ATAIdentifyData[61]<<16);
   22580:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22583:	0f b7 40 78          	movzx  eax,WORD PTR [eax+0x78]
   22587:	0f b7 d0             	movzx  edx,ax
   2258a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2258d:	0f b7 40 7a          	movzx  eax,WORD PTR [eax+0x7a]
   22591:	0f b7 c0             	movzx  eax,ax
   22594:	c1 e0 10             	shl    eax,0x10
   22597:	09 d0                	or     eax,edx
   22599:	89 c2                	mov    edx,eax
   2259b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2259e:	89 90 56 02 00 00    	mov    DWORD PTR [eax+0x256],edx
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:270
    devInfo->sectorSize = (devInfo->ATAIdentifyData[106] & 1<<12)==1<<12
   225a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   225a7:	0f b7 80 d4 00 00 00 	movzx  eax,WORD PTR [eax+0xd4]
   225ae:	0f b7 c0             	movzx  eax,ax
   225b1:	25 00 10 00 00       	and    eax,0x1000
   225b6:	85 c0                	test   eax,eax
   225b8:	74 20                	je     225da <ataIdentify+0x11c>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:271 (discriminator 1)
            ?devInfo->ATAIdentifyData[117] | (devInfo->ATAIdentifyData[18]<<16)
   225ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   225bd:	0f b7 80 ea 00 00 00 	movzx  eax,WORD PTR [eax+0xea]
   225c4:	0f b7 d0             	movzx  edx,ax
   225c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   225ca:	0f b7 40 24          	movzx  eax,WORD PTR [eax+0x24]
   225ce:	0f b7 c0             	movzx  eax,ax
   225d1:	c1 e0 10             	shl    eax,0x10
   225d4:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:270 (discriminator 1)
            devInfo->ATAIdentifyData[readCount]=inw(devInfo->ioPort+ATA_PORT_DATA);
        }
    }
    ataGetModelFromIdentify(devInfo);
    devInfo->totalSectorCount = devInfo->ATAIdentifyData[60] | (devInfo->ATAIdentifyData[61]<<16);
    devInfo->sectorSize = (devInfo->ATAIdentifyData[106] & 1<<12)==1<<12
   225d6:	89 c2                	mov    edx,eax
   225d8:	eb 05                	jmp    225df <ataIdentify+0x121>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:270 (discriminator 2)
   225da:	ba 00 02 00 00       	mov    edx,0x200
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:270 (discriminator 4)
   225df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   225e2:	89 90 5a 02 00 00    	mov    DWORD PTR [eax+0x25a],edx
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:273 (discriminator 4)
            ?devInfo->ATAIdentifyData[117] | (devInfo->ATAIdentifyData[18]<<16)
            :512;
    devInfo->dmaSupported=devInfo->ATAIdentifyData[49]>>8 & 0x1;
   225e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   225eb:	0f b7 40 62          	movzx  eax,WORD PTR [eax+0x62]
   225ef:	66 c1 e8 08          	shr    ax,0x8
   225f3:	0f b7 c0             	movzx  eax,ax
   225f6:	83 e0 01             	and    eax,0x1
   225f9:	85 c0                	test   eax,eax
   225fb:	0f 95 c2             	setne  dl
   225fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22601:	88 90 60 02 00 00    	mov    BYTE PTR [eax+0x260],dl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:274 (discriminator 4)
    devInfo->lbaSupported=devInfo->ATAIdentifyData[49]>>9 & 0x1;
   22607:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2260a:	0f b7 40 62          	movzx  eax,WORD PTR [eax+0x62]
   2260e:	66 c1 e8 09          	shr    ax,0x9
   22612:	0f b7 c0             	movzx  eax,ax
   22615:	83 e0 01             	and    eax,0x1
   22618:	85 c0                	test   eax,eax
   2261a:	0f 95 c2             	setne  dl
   2261d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22620:	88 90 5e 02 00 00    	mov    BYTE PTR [eax+0x25e],dl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:275 (discriminator 4)
    devInfo->lba48Supported=devInfo->ATAIdentifyData[83]>>10 & 0x1;
   22626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22629:	0f b7 80 a6 00 00 00 	movzx  eax,WORD PTR [eax+0xa6]
   22630:	66 c1 e8 0a          	shr    ax,0xa
   22634:	0f b7 c0             	movzx  eax,ax
   22637:	83 e0 01             	and    eax,0x1
   2263a:	85 c0                	test   eax,eax
   2263c:	0f 95 c2             	setne  dl
   2263f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22642:	88 90 5f 02 00 00    	mov    BYTE PTR [eax+0x25f],dl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:278 (discriminator 4)
    
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22648:	a1 38 03 12 00       	mov    eax,ds:0x120338
   2264d:	83 e0 08             	and    eax,0x8
   22650:	85 c0                	test   eax,eax
   22652:	74 24                	je     22678 <ataIdentify+0x1ba>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:279
        printk("drive %d, model=%s\n",devInfo->driveNo, devInfo->ATADeviceModel);
   22654:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22657:	8d 90 00 02 00 00    	lea    edx,[eax+0x200]
   2265d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22660:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   22666:	83 ec 04             	sub    esp,0x4
   22669:	52                   	push   edx
   2266a:	50                   	push   eax
   2266b:	68 bf 3c 08 00       	push   0x83cbf
   22670:	e8 42 4a 00 00       	call   270b7 <printk>
   22675:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:281
#endif
    return 1;
   22678:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:282
}
   2267d:	c9                   	leave  
   2267e:	c3                   	ret    

0002267f <ataScanForHarddrives>:
ataScanForHarddrives():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:285

int ataScanForHarddrives()
{
   2267f:	55                   	push   ebp
   22680:	89 e5                	mov    ebp,esp
   22682:	53                   	push   ebx
   22683:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:286
    kATADeviceInfo[0].bus=ATAPrimary;
   22686:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   2268b:	c7 80 61 02 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
   22692:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:287
    kATADeviceInfo[0].driveNo=0;
   22695:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   2269a:	c7 80 65 02 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
   226a1:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:288
    kATADeviceInfo[0].ioPort=0x1F0;
   226a4:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   226a9:	c7 80 69 02 00 00 f0 	mov    DWORD PTR [eax+0x269],0x1f0
   226b0:	01 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:289
    kATADeviceInfo[0].irqNum=0x14;
   226b3:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   226b8:	c6 80 6d 02 00 00 14 	mov    BYTE PTR [eax+0x26d],0x14
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:290
    kATADeviceInfo[0].driveHeadPortDesignation=0xA0;
   226bf:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   226c4:	c6 80 6e 02 00 00 a0 	mov    BYTE PTR [eax+0x26e],0xa0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:291
    kATADeviceInfo[0].queryATAData=true;
   226cb:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   226d0:	c6 80 50 02 00 00 01 	mov    BYTE PTR [eax+0x250],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:292
    kATADeviceInfo[0].ATADeviceAvailable=ataInit(&kATADeviceInfo[0]);
   226d7:	8b 1d c0 02 12 00    	mov    ebx,DWORD PTR ds:0x1202c0
   226dd:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   226e2:	83 ec 0c             	sub    esp,0xc
   226e5:	50                   	push   eax
   226e6:	e8 31 fa ff ff       	call   2211c <ataInit>
   226eb:	83 c4 10             	add    esp,0x10
   226ee:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:293
    if (kATADeviceInfo[0].ATADeviceAvailable)
   226f4:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   226f9:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   22700:	84 c0                	test   al,al
   22702:	74 3c                	je     22740 <ataScanForHarddrives+0xc1>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:295
    {
        ataIdentify(&kATADeviceInfo[0]);
   22704:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22709:	83 ec 0c             	sub    esp,0xc
   2270c:	50                   	push   eax
   2270d:	e8 ac fd ff ff       	call   224be <ataIdentify>
   22712:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:296
        if (useCDROMIdentify)
   22715:	0f b6 05 18 eb 09 00 	movzx  eax,BYTE PTR ds:0x9eb18
   2271c:	84 c0                	test   al,al
   2271e:	74 11                	je     22731 <ataScanForHarddrives+0xb2>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:297
            kATADeviceInfo[0].ATADeviceType=ATA_DEVICE_TYPE_CD;
   22720:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22725:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   2272c:	00 00 00 
   2272f:	eb 0f                	jmp    22740 <ataScanForHarddrives+0xc1>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:299
        else
            kATADeviceInfo[0].ATADeviceType=ATA_DEVICE_TYPE_HD;
   22731:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22736:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   2273d:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:301
    }
    useCDROMIdentify=false;
   22740:	c6 05 18 eb 09 00 00 	mov    BYTE PTR ds:0x9eb18,0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:303

    kATADeviceInfo[1].bus=ATAPrimary;
   22747:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   2274c:	05 73 02 00 00       	add    eax,0x273
   22751:	c7 80 61 02 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
   22758:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:304
    kATADeviceInfo[1].driveNo=1;
   2275b:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22760:	05 73 02 00 00       	add    eax,0x273
   22765:	c7 80 65 02 00 00 01 	mov    DWORD PTR [eax+0x265],0x1
   2276c:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:305
    kATADeviceInfo[1].ioPort=0x1F0;
   2276f:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22774:	05 73 02 00 00       	add    eax,0x273
   22779:	c7 80 69 02 00 00 f0 	mov    DWORD PTR [eax+0x269],0x1f0
   22780:	01 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:306
    kATADeviceInfo[1].irqNum=0x14;
   22783:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22788:	05 73 02 00 00       	add    eax,0x273
   2278d:	c6 80 6d 02 00 00 14 	mov    BYTE PTR [eax+0x26d],0x14
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:307
    kATADeviceInfo[1].driveHeadPortDesignation=0xB0;
   22794:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22799:	05 73 02 00 00       	add    eax,0x273
   2279e:	c6 80 6e 02 00 00 b0 	mov    BYTE PTR [eax+0x26e],0xb0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:308
    kATADeviceInfo[1].queryATAData=true;
   227a5:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   227aa:	05 73 02 00 00       	add    eax,0x273
   227af:	c6 80 50 02 00 00 01 	mov    BYTE PTR [eax+0x250],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:309
    kATADeviceInfo[1].ATADeviceAvailable=ataInit(&kATADeviceInfo[1]);
   227b6:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   227bb:	8d 98 73 02 00 00    	lea    ebx,[eax+0x273]
   227c1:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   227c6:	05 73 02 00 00       	add    eax,0x273
   227cb:	83 ec 0c             	sub    esp,0xc
   227ce:	50                   	push   eax
   227cf:	e8 48 f9 ff ff       	call   2211c <ataInit>
   227d4:	83 c4 10             	add    esp,0x10
   227d7:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:310
    if (kATADeviceInfo[1].ATADeviceAvailable)
   227dd:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   227e2:	05 73 02 00 00       	add    eax,0x273
   227e7:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   227ee:	84 c0                	test   al,al
   227f0:	74 4b                	je     2283d <ataScanForHarddrives+0x1be>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:312
    {
        ataIdentify(&kATADeviceInfo[1]);
   227f2:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   227f7:	05 73 02 00 00       	add    eax,0x273
   227fc:	83 ec 0c             	sub    esp,0xc
   227ff:	50                   	push   eax
   22800:	e8 b9 fc ff ff       	call   224be <ataIdentify>
   22805:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:313
        if (useCDROMIdentify)
   22808:	0f b6 05 18 eb 09 00 	movzx  eax,BYTE PTR ds:0x9eb18
   2280f:	84 c0                	test   al,al
   22811:	74 16                	je     22829 <ataScanForHarddrives+0x1aa>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:314
            kATADeviceInfo[1].ATADeviceType=ATA_DEVICE_TYPE_CD;
   22813:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22818:	05 73 02 00 00       	add    eax,0x273
   2281d:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   22824:	00 00 00 
   22827:	eb 14                	jmp    2283d <ataScanForHarddrives+0x1be>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:316
        else
            kATADeviceInfo[1].ATADeviceType=ATA_DEVICE_TYPE_HD;
   22829:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   2282e:	05 73 02 00 00       	add    eax,0x273
   22833:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   2283a:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:318
    }
    kATADeviceInfo[2].bus=ATASecondary;
   2283d:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22842:	05 e6 04 00 00       	add    eax,0x4e6
   22847:	c7 80 61 02 00 00 01 	mov    DWORD PTR [eax+0x261],0x1
   2284e:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:319
    kATADeviceInfo[2].driveNo=2;
   22851:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22856:	05 e6 04 00 00       	add    eax,0x4e6
   2285b:	c7 80 65 02 00 00 02 	mov    DWORD PTR [eax+0x265],0x2
   22862:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:320
    kATADeviceInfo[2].ioPort=0x170;
   22865:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   2286a:	05 e6 04 00 00       	add    eax,0x4e6
   2286f:	c7 80 69 02 00 00 70 	mov    DWORD PTR [eax+0x269],0x170
   22876:	01 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:321
    kATADeviceInfo[2].irqNum=0x15;
   22879:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   2287e:	05 e6 04 00 00       	add    eax,0x4e6
   22883:	c6 80 6d 02 00 00 15 	mov    BYTE PTR [eax+0x26d],0x15
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:322
    kATADeviceInfo[2].driveHeadPortDesignation=0xA0;
   2288a:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   2288f:	05 e6 04 00 00       	add    eax,0x4e6
   22894:	c6 80 6e 02 00 00 a0 	mov    BYTE PTR [eax+0x26e],0xa0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:323
    kATADeviceInfo[2].queryATAData=false;
   2289b:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   228a0:	05 e6 04 00 00       	add    eax,0x4e6
   228a5:	c6 80 50 02 00 00 00 	mov    BYTE PTR [eax+0x250],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:324
    kATADeviceInfo[2].ATADeviceAvailable=ataInit(&kATADeviceInfo[2]);
   228ac:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   228b1:	8d 98 e6 04 00 00    	lea    ebx,[eax+0x4e6]
   228b7:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   228bc:	05 e6 04 00 00       	add    eax,0x4e6
   228c1:	83 ec 0c             	sub    esp,0xc
   228c4:	50                   	push   eax
   228c5:	e8 52 f8 ff ff       	call   2211c <ataInit>
   228ca:	83 c4 10             	add    esp,0x10
   228cd:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:325
    if (kATADeviceInfo[2].ATADeviceAvailable)
   228d3:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   228d8:	05 e6 04 00 00       	add    eax,0x4e6
   228dd:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   228e4:	84 c0                	test   al,al
   228e6:	74 4b                	je     22933 <ataScanForHarddrives+0x2b4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:327
    {
        ataIdentify(&kATADeviceInfo[2]);
   228e8:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   228ed:	05 e6 04 00 00       	add    eax,0x4e6
   228f2:	83 ec 0c             	sub    esp,0xc
   228f5:	50                   	push   eax
   228f6:	e8 c3 fb ff ff       	call   224be <ataIdentify>
   228fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:328
        if (useCDROMIdentify)
   228fe:	0f b6 05 18 eb 09 00 	movzx  eax,BYTE PTR ds:0x9eb18
   22905:	84 c0                	test   al,al
   22907:	74 16                	je     2291f <ataScanForHarddrives+0x2a0>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:329
            kATADeviceInfo[2].ATADeviceType=ATA_DEVICE_TYPE_CD;
   22909:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   2290e:	05 e6 04 00 00       	add    eax,0x4e6
   22913:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   2291a:	00 00 00 
   2291d:	eb 14                	jmp    22933 <ataScanForHarddrives+0x2b4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:331
        else
            kATADeviceInfo[2].ATADeviceType=ATA_DEVICE_TYPE_HD;
   2291f:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22924:	05 e6 04 00 00       	add    eax,0x4e6
   22929:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   22930:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:334
    }

    kATADeviceInfo[3].bus=ATASecondary;
   22933:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22938:	05 59 07 00 00       	add    eax,0x759
   2293d:	c7 80 61 02 00 00 01 	mov    DWORD PTR [eax+0x261],0x1
   22944:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:335
    kATADeviceInfo[3].driveNo=3;
   22947:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   2294c:	05 59 07 00 00       	add    eax,0x759
   22951:	c7 80 65 02 00 00 03 	mov    DWORD PTR [eax+0x265],0x3
   22958:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:336
    kATADeviceInfo[3].ioPort=0x170;
   2295b:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22960:	05 59 07 00 00       	add    eax,0x759
   22965:	c7 80 69 02 00 00 70 	mov    DWORD PTR [eax+0x269],0x170
   2296c:	01 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:337
    kATADeviceInfo[3].irqNum=0x15;
   2296f:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22974:	05 59 07 00 00       	add    eax,0x759
   22979:	c6 80 6d 02 00 00 15 	mov    BYTE PTR [eax+0x26d],0x15
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:338
    kATADeviceInfo[3].driveHeadPortDesignation=0xB0;
   22980:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22985:	05 59 07 00 00       	add    eax,0x759
   2298a:	c6 80 6e 02 00 00 b0 	mov    BYTE PTR [eax+0x26e],0xb0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:339
    kATADeviceInfo[3].queryATAData=true;
   22991:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22996:	05 59 07 00 00       	add    eax,0x759
   2299b:	c6 80 50 02 00 00 01 	mov    BYTE PTR [eax+0x250],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:340
    kATADeviceInfo[3].ATADeviceAvailable=ataInit(&kATADeviceInfo[3]);
   229a2:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   229a7:	8d 98 59 07 00 00    	lea    ebx,[eax+0x759]
   229ad:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   229b2:	05 59 07 00 00       	add    eax,0x759
   229b7:	83 ec 0c             	sub    esp,0xc
   229ba:	50                   	push   eax
   229bb:	e8 5c f7 ff ff       	call   2211c <ataInit>
   229c0:	83 c4 10             	add    esp,0x10
   229c3:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:341
    if (kATADeviceInfo[3].ATADeviceAvailable)
   229c9:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   229ce:	05 59 07 00 00       	add    eax,0x759
   229d3:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   229da:	84 c0                	test   al,al
   229dc:	74 4b                	je     22a29 <ataScanForHarddrives+0x3aa>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:343
    {
        ataIdentify(&kATADeviceInfo[3]);
   229de:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   229e3:	05 59 07 00 00       	add    eax,0x759
   229e8:	83 ec 0c             	sub    esp,0xc
   229eb:	50                   	push   eax
   229ec:	e8 cd fa ff ff       	call   224be <ataIdentify>
   229f1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:344
        if (useCDROMIdentify)
   229f4:	0f b6 05 18 eb 09 00 	movzx  eax,BYTE PTR ds:0x9eb18
   229fb:	84 c0                	test   al,al
   229fd:	74 16                	je     22a15 <ataScanForHarddrives+0x396>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:345
            kATADeviceInfo[3].ATADeviceType=ATA_DEVICE_TYPE_CD;
   229ff:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22a04:	05 59 07 00 00       	add    eax,0x759
   22a09:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   22a10:	00 00 00 
   22a13:	eb 14                	jmp    22a29 <ataScanForHarddrives+0x3aa>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:347
        else
            kATADeviceInfo[3].ATADeviceType=ATA_DEVICE_TYPE_HD;
   22a15:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22a1a:	05 59 07 00 00       	add    eax,0x759
   22a1f:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   22a26:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:351
    }

#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22a29:	a1 38 03 12 00       	mov    eax,ds:0x120338
   22a2e:	83 e0 08             	and    eax,0x8
   22a31:	85 c0                	test   eax,eax
   22a33:	74 2c                	je     22a61 <ataScanForHarddrives+0x3e2>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:352
        printk("INIT: Disk1=%s  Disk2=%s\n", kATADeviceInfo[0].ATADeviceModel, kATADeviceInfo[1].ATADeviceModel);
   22a35:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22a3a:	05 73 02 00 00       	add    eax,0x273
   22a3f:	8d 90 00 02 00 00    	lea    edx,[eax+0x200]
   22a45:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22a4a:	05 00 02 00 00       	add    eax,0x200
   22a4f:	83 ec 04             	sub    esp,0x4
   22a52:	52                   	push   edx
   22a53:	50                   	push   eax
   22a54:	68 d3 3c 08 00       	push   0x83cd3
   22a59:	e8 59 46 00 00       	call   270b7 <printk>
   22a5e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:354
#endif
            return 0;
   22a61:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:355
}
   22a66:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   22a69:	c9                   	leave  
   22a6a:	c3                   	ret    

00022a6b <ataReadDisk>:
ataReadDisk():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:357
int ataReadDisk(struct ataDeviceInfo_t* devInfo, uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
   22a6b:	55                   	push   ebp
   22a6c:	89 e5                	mov    ebp,esp
   22a6e:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:358
    atablockingReadDev = devInfo;
   22a71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22a74:	a3 a0 8f 09 00       	mov    ds:0x98fa0,eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:359
    if (sector_count==0)    //this function can be called with a sector_count of 0 in order to set partOffset
   22a79:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   22a7d:	75 07                	jne    22a86 <ataReadDisk+0x1b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:360
        return -1;
   22a7f:	b8 ff ff ff ff       	mov    eax,0xffffffff
   22a84:	eb 14                	jmp    22a9a <ataReadDisk+0x2f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:361
    return ataBlockingRead28(sector, buffer, sector_count);
   22a86:	83 ec 04             	sub    esp,0x4
   22a89:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   22a8c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   22a8f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   22a92:	e8 05 00 00 00       	call   22a9c <ataBlockingRead28>
   22a97:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:362
}
   22a9a:	c9                   	leave  
   22a9b:	c3                   	ret    

00022a9c <ataBlockingRead28>:
ataBlockingRead28():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:365

int ataBlockingRead28(uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
   22a9c:	55                   	push   ebp
   22a9d:	89 e5                	mov    ebp,esp
   22a9f:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:367
    //For now if the FAT library calls this, we assume we've already read the same partition most recently
    int lResult=0;
   22aa2:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:368
    uint8_t* bufp=buffer;
   22aa9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   22aac:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:369
    uint32_t lSectorsLeft=sector_count;
   22aaf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   22ab2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:370
    uint32_t lSector=sector+partOffset; //this represents the start of the partition
   22ab5:	a1 20 eb 09 00       	mov    eax,ds:0x9eb20
   22aba:	89 c2                	mov    edx,eax
   22abc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22abf:	01 d0                	add    eax,edx
   22ac1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:373

#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22ac4:	a1 38 03 12 00       	mov    eax,ds:0x120338
   22ac9:	83 e0 08             	and    eax,0x8
   22acc:	85 c0                	test   eax,eax
   22ace:	74 1b                	je     22aeb <ataBlockingRead28+0x4f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:375
        {
            printk("ataBlockingRead28: sec: 0x%08X, buf 0x%08X, cnt 0x%08X\n", lSector, bufp, sector_count);
   22ad0:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   22ad3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22ad6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   22ad9:	68 f0 3c 08 00       	push   0x83cf0
   22ade:	e8 d4 45 00 00       	call   270b7 <printk>
   22ae3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:376
            waitForKeyboardKey();
   22ae6:	e8 67 e7 fe ff       	call   11252 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:379
        }
#endif
    lResult=ataWaitForIdle(atablockingReadDev);
   22aeb:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22af0:	83 ec 0c             	sub    esp,0xc
   22af3:	50                   	push   eax
   22af4:	e8 e1 f0 ff ff       	call   21bda <ataWaitForIdle>
   22af9:	83 c4 10             	add    esp,0x10
   22afc:	0f b6 c0             	movzx  eax,al
   22aff:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:380
    if (lResult)
   22b02:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   22b06:	74 13                	je     22b1b <ataBlockingRead28+0x7f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:381
        panic("ataBlockingRead28: Timeout waiting for DRQ and BSY to be clear (0x%02X)", lResult);
   22b08:	83 ec 08             	sub    esp,0x8
   22b0b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   22b0e:	68 28 3d 08 00       	push   0x83d28
   22b13:	e8 20 41 00 00       	call   26c38 <panic>
   22b18:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:386
        //Select the drive we want
        //NOTE: Drive selected prior to calling this function
        //ataSelectDrive(drive,0);
        //Magic bit (6) to set LBA mode and top 4 bits of LBA28 sector # go in bottom 4
    outb(atablockingReadDev->ioPort+ATA_DRIVE_SELECT, inb(atablockingReadDev->ioPort+ATA_DRIVE_SELECT) | (1 << 6) | ((lSector >> 24) & 0x0F));
   22b1b:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22b20:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22b26:	83 c0 06             	add    eax,0x6
   22b29:	0f b7 c0             	movzx  eax,ax
   22b2c:	83 ec 0c             	sub    esp,0xc
   22b2f:	50                   	push   eax
   22b30:	e8 7e ef ff ff       	call   21ab3 <inb>
   22b35:	83 c4 10             	add    esp,0x10
   22b38:	89 c2                	mov    edx,eax
   22b3a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   22b3d:	c1 e8 18             	shr    eax,0x18
   22b40:	83 e0 0f             	and    eax,0xf
   22b43:	09 d0                	or     eax,edx
   22b45:	83 c8 40             	or     eax,0x40
   22b48:	0f b6 d0             	movzx  edx,al
   22b4b:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22b50:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22b56:	83 c0 06             	add    eax,0x6
   22b59:	0f b7 c0             	movzx  eax,ax
   22b5c:	83 ec 08             	sub    esp,0x8
   22b5f:	52                   	push   edx
   22b60:	50                   	push   eax
   22b61:	e8 2e ef ff ff       	call   21a94 <outb>
   22b66:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:389

    //Send the sector count (8 bit))
    outb(atablockingReadDev->ioPort+ATA_PORT_SECTORCOUNT, sector_count);
   22b69:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   22b6c:	0f b6 d0             	movzx  edx,al
   22b6f:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22b74:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22b7a:	83 c0 02             	add    eax,0x2
   22b7d:	0f b7 c0             	movzx  eax,ax
   22b80:	83 ec 08             	sub    esp,0x8
   22b83:	52                   	push   edx
   22b84:	50                   	push   eax
   22b85:	e8 0a ef ff ff       	call   21a94 <outb>
   22b8a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:392

    //Send the LBA sector number in the next 3 fields + high bit in the 
    outb(atablockingReadDev->ioPort+ATA_PORT_SECTOR_NUMBER, (lSector) & 0xFF);
   22b8d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   22b90:	0f b6 d0             	movzx  edx,al
   22b93:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22b98:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22b9e:	83 c0 03             	add    eax,0x3
   22ba1:	0f b7 c0             	movzx  eax,ax
   22ba4:	83 ec 08             	sub    esp,0x8
   22ba7:	52                   	push   edx
   22ba8:	50                   	push   eax
   22ba9:	e8 e6 ee ff ff       	call   21a94 <outb>
   22bae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:393
    outb(atablockingReadDev->ioPort+ATA_PORT_CYLINDER_LOW, (lSector >> 8) & 0xFF);
   22bb1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   22bb4:	c1 e8 08             	shr    eax,0x8
   22bb7:	0f b6 d0             	movzx  edx,al
   22bba:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22bbf:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22bc5:	83 c0 04             	add    eax,0x4
   22bc8:	0f b7 c0             	movzx  eax,ax
   22bcb:	83 ec 08             	sub    esp,0x8
   22bce:	52                   	push   edx
   22bcf:	50                   	push   eax
   22bd0:	e8 bf ee ff ff       	call   21a94 <outb>
   22bd5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:394
    outb(atablockingReadDev->ioPort+ATA_PORT_CYLINDER_HIGH, (lSector >> 16) & 0xFF);
   22bd8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   22bdb:	c1 e8 10             	shr    eax,0x10
   22bde:	0f b6 d0             	movzx  edx,al
   22be1:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22be6:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22bec:	83 c0 05             	add    eax,0x5
   22bef:	0f b7 c0             	movzx  eax,ax
   22bf2:	83 ec 08             	sub    esp,0x8
   22bf5:	52                   	push   edx
   22bf6:	50                   	push   eax
   22bf7:	e8 98 ee ff ff       	call   21a94 <outb>
   22bfc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:395
    outb(atablockingReadDev->ioPort+ATA_PORT_COMMAND, ATA_COMMAND_READ_SECTOR);
   22bff:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22c04:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22c0a:	83 c0 07             	add    eax,0x7
   22c0d:	0f b7 c0             	movzx  eax,ax
   22c10:	83 ec 08             	sub    esp,0x8
   22c13:	6a 20                	push   0x20
   22c15:	50                   	push   eax
   22c16:	e8 79 ee ff ff       	call   21a94 <outb>
   22c1b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:396
    lResult=ataWaitForDRQ(atablockingReadDev, true, ATA_STANDARD_WAIT_MS*kTicksPerMS);
   22c1e:	8b 15 84 02 12 00    	mov    edx,DWORD PTR ds:0x120284
   22c24:	89 d0                	mov    eax,edx
   22c26:	c1 e0 02             	shl    eax,0x2
   22c29:	01 d0                	add    eax,edx
   22c2b:	01 c0                	add    eax,eax
   22c2d:	89 c2                	mov    edx,eax
   22c2f:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22c34:	83 ec 04             	sub    esp,0x4
   22c37:	52                   	push   edx
   22c38:	6a 01                	push   0x1
   22c3a:	50                   	push   eax
   22c3b:	e8 e4 ee ff ff       	call   21b24 <ataWaitForDRQ>
   22c40:	83 c4 10             	add    esp,0x10
   22c43:	0f b6 c0             	movzx  eax,al
   22c46:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:397
    if (lResult)
   22c49:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   22c4d:	0f 84 35 01 00 00    	je     22d88 <ataBlockingRead28+0x2ec>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:398
        panic("ataBlockingRead28: Timeout waiting for DRQ to be set Stts=0x%02X, Err=0x%02X", lResult, hdError);
   22c53:	a1 1c eb 09 00       	mov    eax,ds:0x9eb1c
   22c58:	83 ec 04             	sub    esp,0x4
   22c5b:	50                   	push   eax
   22c5c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   22c5f:	68 70 3d 08 00       	push   0x83d70
   22c64:	e8 cf 3f 00 00       	call   26c38 <panic>
   22c69:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:399
    while (lSectorsLeft)
   22c6c:	e9 17 01 00 00       	jmp    22d88 <ataBlockingRead28+0x2ec>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:401
    {
        insw(atablockingReadDev->ioPort+ATA_PORT_DATA, bufp, 256);
   22c71:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22c76:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22c7c:	0f b7 c0             	movzx  eax,ax
   22c7f:	83 ec 04             	sub    esp,0x4
   22c82:	68 00 01 00 00       	push   0x100
   22c87:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22c8a:	50                   	push   eax
   22c8b:	e8 5f ee ff ff       	call   21aef <insw>
   22c90:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:403
        #ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22c93:	a1 38 03 12 00       	mov    eax,ds:0x120338
   22c98:	83 e0 08             	and    eax,0x8
   22c9b:	85 c0                	test   eax,eax
   22c9d:	74 52                	je     22cf1 <ataBlockingRead28+0x255>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:405
            {
                printk("ataBlockingRead28: Debugging: ");
   22c9f:	83 ec 0c             	sub    esp,0xc
   22ca2:	68 c0 3d 08 00       	push   0x83dc0
   22ca7:	e8 0b 44 00 00       	call   270b7 <printk>
   22cac:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:406
                for (int cnt2=0;cnt2<20;cnt2++)
   22caf:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   22cb6:	eb 23                	jmp    22cdb <ataBlockingRead28+0x23f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:407 (discriminator 3)
                    printk("%02X ", bufp[cnt2]);
   22cb8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   22cbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   22cbe:	01 d0                	add    eax,edx
   22cc0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   22cc3:	0f b6 c0             	movzx  eax,al
   22cc6:	83 ec 08             	sub    esp,0x8
   22cc9:	50                   	push   eax
   22cca:	68 df 3d 08 00       	push   0x83ddf
   22ccf:	e8 e3 43 00 00       	call   270b7 <printk>
   22cd4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:406 (discriminator 3)
        insw(atablockingReadDev->ioPort+ATA_PORT_DATA, bufp, 256);
        #ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            {
                printk("ataBlockingRead28: Debugging: ");
                for (int cnt2=0;cnt2<20;cnt2++)
   22cd7:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:406 (discriminator 1)
   22cdb:	83 7d e8 13          	cmp    DWORD PTR [ebp-0x18],0x13
   22cdf:	7e d7                	jle    22cb8 <ataBlockingRead28+0x21c>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:408
                    printk("%02X ", bufp[cnt2]);
                printk("\n");
   22ce1:	83 ec 0c             	sub    esp,0xc
   22ce4:	68 e5 3d 08 00       	push   0x83de5
   22ce9:	e8 c9 43 00 00       	call   270b7 <printk>
   22cee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:411
            }
        #endif
        if (--lSectorsLeft>0) //zero based vs 1 based
   22cf1:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
   22cf5:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   22cf9:	0f 84 89 00 00 00    	je     22d88 <ataBlockingRead28+0x2ec>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:413
        {
            wait(50);
   22cff:	83 ec 0c             	sub    esp,0xc
   22d02:	6a 32                	push   0x32
   22d04:	e8 ed 55 00 00       	call   282f6 <wait>
   22d09:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:414
            lResult=ataWaitForDRQ(atablockingReadDev, true, ATA_STANDARD_WAIT_MS*kTicksPerMS);
   22d0c:	8b 15 84 02 12 00    	mov    edx,DWORD PTR ds:0x120284
   22d12:	89 d0                	mov    eax,edx
   22d14:	c1 e0 02             	shl    eax,0x2
   22d17:	01 d0                	add    eax,edx
   22d19:	01 c0                	add    eax,eax
   22d1b:	89 c2                	mov    edx,eax
   22d1d:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22d22:	83 ec 04             	sub    esp,0x4
   22d25:	52                   	push   edx
   22d26:	6a 01                	push   0x1
   22d28:	50                   	push   eax
   22d29:	e8 f6 ed ff ff       	call   21b24 <ataWaitForDRQ>
   22d2e:	83 c4 10             	add    esp,0x10
   22d31:	0f b6 c0             	movzx  eax,al
   22d34:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:415
            bufp+=512;
   22d37:	81 45 f4 00 02 00 00 	add    DWORD PTR [ebp-0xc],0x200
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:416
            lSector++;
   22d3e:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:417
            if (lResult)
   22d42:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   22d46:	74 19                	je     22d61 <ataBlockingRead28+0x2c5>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:418
                panic("ataBlockingRead28: Timeout in read loop, waiting for DRQ to be set Stts=0x%02X, Err=0x%02X", lResult, hdError);
   22d48:	a1 1c eb 09 00       	mov    eax,ds:0x9eb1c
   22d4d:	83 ec 04             	sub    esp,0x4
   22d50:	50                   	push   eax
   22d51:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   22d54:	68 e8 3d 08 00       	push   0x83de8
   22d59:	e8 da 3e 00 00       	call   26c38 <panic>
   22d5e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:420
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22d61:	a1 38 03 12 00       	mov    eax,ds:0x120338
   22d66:	83 e0 08             	and    eax,0x8
   22d69:	85 c0                	test   eax,eax
   22d6b:	74 1b                	je     22d88 <ataBlockingRead28+0x2ec>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:422
        {
            printk("ataBlockingRead28: sec=0x%08X, buf=0x%08X, rep=0x%08X    \n", lSector, bufp, lSectorsLeft);
   22d6d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   22d70:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22d73:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   22d76:	68 44 3e 08 00       	push   0x83e44
   22d7b:	e8 37 43 00 00       	call   270b7 <printk>
   22d80:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:423
            waitForKeyboardKey();
   22d83:	e8 ca e4 fe ff       	call   11252 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:399
    outb(atablockingReadDev->ioPort+ATA_PORT_CYLINDER_HIGH, (lSector >> 16) & 0xFF);
    outb(atablockingReadDev->ioPort+ATA_PORT_COMMAND, ATA_COMMAND_READ_SECTOR);
    lResult=ataWaitForDRQ(atablockingReadDev, true, ATA_STANDARD_WAIT_MS*kTicksPerMS);
    if (lResult)
        panic("ataBlockingRead28: Timeout waiting for DRQ to be set Stts=0x%02X, Err=0x%02X", lResult, hdError);
    while (lSectorsLeft)
   22d88:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   22d8c:	0f 85 df fe ff ff    	jne    22c71 <ataBlockingRead28+0x1d5>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:428
            waitForKeyboardKey();
        }
#endif
        }
    }
    return 512*sector_count;
   22d92:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   22d95:	c1 e0 09             	shl    eax,0x9
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:429
}
   22d98:	c9                   	leave  
   22d99:	c3                   	ret    

00022d9a <ataBlockingWrite28>:
ataBlockingWrite28():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:432

int ataBlockingWrite28(/*unsigned drive, */uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
   22d9a:	55                   	push   ebp
   22d9b:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:468
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            printk("ataBlockingWrite28: Finished sending data\n");
#endif
    return 512;
*/}
   22d9d:	90                   	nop
   22d9e:	5d                   	pop    ebp
   22d9f:	c3                   	ret    

00022da0 <__get_cpuid_max>:
__get_cpuid_max():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:179
   pointer is non-null, then first four bytes of the signature
   (as found in ebx register) are returned in location pointed by sig.  */

static __inline unsigned int
__get_cpuid_max (unsigned int __ext, unsigned int *__sig)
{
   22da0:	55                   	push   ebp
   22da1:	89 e5                	mov    ebp,esp
   22da3:	53                   	push   ebx
   22da4:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:185
  unsigned int __eax, __ebx, __ecx, __edx;

#ifndef __x86_64__
  /* See if we can use cpuid.  On AMD64 we always can.  */
#if __GNUC__ >= 3
  __asm__ ("pushf{l|d}\n\t"
   22da7:	9c                   	pushf  
   22da8:	9c                   	pushf  
   22da9:	5a                   	pop    edx
   22daa:	89 d0                	mov    eax,edx
   22dac:	81 f2 00 00 20 00    	xor    edx,0x200000
   22db2:	52                   	push   edx
   22db3:	9d                   	popf   
   22db4:	9c                   	pushf  
   22db5:	5a                   	pop    edx
   22db6:	9d                   	popf   
   22db7:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   22dba:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:214
	   "popfl\n\t"
	   : "=&r" (__eax), "=&r" (__ebx)
	   : "i" (0x00200000));
#endif

  if (!((__eax ^ __ebx) & 0x00200000))
   22dbd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   22dc0:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
   22dc3:	25 00 00 20 00       	and    eax,0x200000
   22dc8:	85 c0                	test   eax,eax
   22dca:	75 07                	jne    22dd3 <__get_cpuid_max+0x33>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:215
    return 0;
   22dcc:	b8 00 00 00 00       	mov    eax,0x0
   22dd1:	eb 22                	jmp    22df5 <__get_cpuid_max+0x55>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:219
#endif

  /* Host supports cpuid.  Return highest supported cpuid input value.  */
  __cpuid (__ext, __eax, __ebx, __ecx, __edx);
   22dd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22dd6:	0f a2                	cpuid  
   22dd8:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   22ddb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
   22dde:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   22de1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:221

  if (__sig)
   22de4:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   22de8:	74 08                	je     22df2 <__get_cpuid_max+0x52>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:222
    *__sig = __ebx;
   22dea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   22ded:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   22df0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:224

  return __eax;
   22df2:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:225
}
   22df5:	83 c4 10             	add    esp,0x10
   22df8:	5b                   	pop    ebx
   22df9:	5d                   	pop    ebp
   22dfa:	c3                   	ret    

00022dfb <__get_cpuid>:
__get_cpuid():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:236

static __inline int
__get_cpuid (unsigned int __level,
	     unsigned int *__eax, unsigned int *__ebx,
	     unsigned int *__ecx, unsigned int *__edx)
{
   22dfb:	55                   	push   ebp
   22dfc:	89 e5                	mov    ebp,esp
   22dfe:	56                   	push   esi
   22dff:	53                   	push   ebx
   22e00:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:237
  unsigned int __ext = __level & 0x80000000;
   22e03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22e06:	25 00 00 00 80       	and    eax,0x80000000
   22e0b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:239

  if (__get_cpuid_max (__ext, 0) < __level)
   22e0e:	6a 00                	push   0x0
   22e10:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22e13:	e8 88 ff ff ff       	call   22da0 <__get_cpuid_max>
   22e18:	83 c4 08             	add    esp,0x8
   22e1b:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   22e1e:	73 07                	jae    22e27 <__get_cpuid+0x2c>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:240
    return 0;
   22e20:	b8 00 00 00 00       	mov    eax,0x0
   22e25:	eb 1e                	jmp    22e45 <__get_cpuid+0x4a>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:242

  __cpuid (__level, *__eax, *__ebx, *__ecx, *__edx);
   22e27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22e2a:	0f a2                	cpuid  
   22e2c:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
   22e2f:	89 06                	mov    DWORD PTR [esi],eax
   22e31:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   22e34:	89 18                	mov    DWORD PTR [eax],ebx
   22e36:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   22e39:	89 08                	mov    DWORD PTR [eax],ecx
   22e3b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   22e3e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:243
  return 1;
   22e40:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:244
}
   22e45:	8d 65 f8             	lea    esp,[ebp-0x8]
   22e48:	5b                   	pop    ebx
   22e49:	5e                   	pop    esi
   22e4a:	5d                   	pop    ebp
   22e4b:	c3                   	ret    

00022e4c <detect_cpu>:
detect_cpu():
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:45
void printregs(int eax, int ebx, int ecx, int edx);
extern struct cpuinfo_t kcpuInfo;


/* Simply call this function detect_cpu(); */
int HIGH_CODE_SECTION detect_cpu(void) { /* or main() if your trying to port this as an independant application */
   22e4c:	55                   	push   ebp
   22e4d:	89 e5                	mov    ebp,esp
   22e4f:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:47
	unsigned int ebx, unused;
        __get_cpuid(0, &unused, &ebx, &unused, &unused);
   22e52:	8d 45 f0             	lea    eax,[ebp-0x10]
   22e55:	50                   	push   eax
   22e56:	8d 45 f0             	lea    eax,[ebp-0x10]
   22e59:	50                   	push   eax
   22e5a:	8d 45 f4             	lea    eax,[ebp-0xc]
   22e5d:	50                   	push   eax
   22e5e:	8d 45 f0             	lea    eax,[ebp-0x10]
   22e61:	50                   	push   eax
   22e62:	6a 00                	push   0x0
   22e64:	e8 92 ff ff ff       	call   22dfb <__get_cpuid>
   22e69:	83 c4 14             	add    esp,0x14
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:48
	switch(ebx) {
   22e6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   22e6f:	3d 41 75 74 68       	cmp    eax,0x68747541
   22e74:	74 0e                	je     22e84 <detect_cpu+0x38>
   22e76:	3d 47 65 6e 75       	cmp    eax,0x756e6547
   22e7b:	75 0e                	jne    22e8b <detect_cpu+0x3f>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:50
		case 0x756e6547: /* Intel Magic Code */
		do_intel();
   22e7d:	e8 2a 00 00 00       	call   22eac <do_intel>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:51
		break;
   22e82:	eb 21                	jmp    22ea5 <detect_cpu+0x59>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:53
		case 0x68747541: /* AMD Magic Code */
		do_amd();
   22e84:	e8 27 06 00 00       	call   234b0 <do_amd>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:54
		break;
   22e89:	eb 1a                	jmp    22ea5 <detect_cpu+0x59>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:56
		default:
		printk("Unknown x86 CPU Detected\n");
   22e8b:	83 ec 0c             	sub    esp,0xc
   22e8e:	68 80 3e 08 00       	push   0x83e80
   22e93:	e8 1f 42 00 00       	call   270b7 <printk>
   22e98:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:57
                __asm__("pushf\n pop eax\n and eax,0xFFDFFFFF\n push eax\n popf\n");
   22e9b:	9c                   	pushf  
   22e9c:	58                   	pop    eax
   22e9d:	25 ff ff df ff       	and    eax,0xffdfffff
   22ea2:	50                   	push   eax
   22ea3:	9d                   	popf   
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:58
		break;
   22ea4:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:60
	}
	return 0;
   22ea5:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:61
}
   22eaa:	c9                   	leave  
   22eab:	c3                   	ret    

00022eac <do_intel>:
do_intel():
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:120
	"Reserved", 
	"Reserved"
};

/* Intel-specific information */
int HIGH_CODE_SECTION do_intel(void) {
   22eac:	55                   	push   ebp
   22ead:	89 e5                	mov    ebp,esp
   22eaf:	53                   	push   ebx
   22eb0:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:121
	unsigned int eax=0, ebx=0, ecx=0, edx=0, max_eax=0, signature, unused;
   22eb3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   22eba:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   22ec1:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   22ec8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   22ecf:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:122
	sprintf(kcpuInfo.vendor,"Intel");
   22ed6:	83 ec 08             	sub    esp,0x8
   22ed9:	68 d7 40 08 00       	push   0x840d7
   22ede:	68 78 00 12 00       	push   0x120078
   22ee3:	e8 23 42 00 00       	call   2710b <sprintf>
   22ee8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:123
        __get_cpuid(1, &eax, &ebx, &unused, &unused);
   22eeb:	83 ec 0c             	sub    esp,0xc
   22eee:	8d 45 dc             	lea    eax,[ebp-0x24]
   22ef1:	50                   	push   eax
   22ef2:	8d 45 dc             	lea    eax,[ebp-0x24]
   22ef5:	50                   	push   eax
   22ef6:	8d 45 ec             	lea    eax,[ebp-0x14]
   22ef9:	50                   	push   eax
   22efa:	8d 45 f0             	lea    eax,[ebp-0x10]
   22efd:	50                   	push   eax
   22efe:	6a 01                	push   0x1
   22f00:	e8 f6 fe ff ff       	call   22dfb <__get_cpuid>
   22f05:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:124
	kcpuInfo.model = (eax >> 4) & 0xf;
   22f08:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   22f0b:	c1 e8 04             	shr    eax,0x4
   22f0e:	83 e0 0f             	and    eax,0xf
   22f11:	a3 64 00 12 00       	mov    ds:0x120064,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:125
	kcpuInfo.family = (eax >> 8) & 0xf;
   22f16:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   22f19:	c1 e8 08             	shr    eax,0x8
   22f1c:	83 e0 0f             	and    eax,0xf
   22f1f:	a3 60 00 12 00       	mov    ds:0x120060,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:126
	kcpuInfo.type = (eax >> 12) & 0x3;
   22f24:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   22f27:	c1 e8 0c             	shr    eax,0xc
   22f2a:	83 e0 03             	and    eax,0x3
   22f2d:	a3 6c 00 12 00       	mov    ds:0x12006c,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:127
	kcpuInfo.brand = ebx & 0xff;
   22f32:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   22f35:	0f b6 c0             	movzx  eax,al
   22f38:	a3 70 00 12 00       	mov    ds:0x120070,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:128
	kcpuInfo.stepping = eax & 0xf;
   22f3d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   22f40:	83 e0 0f             	and    eax,0xf
   22f43:	a3 68 00 12 00       	mov    ds:0x120068,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:129
	signature = eax;
   22f48:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   22f4b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:130
	switch(kcpuInfo.type) {
   22f4e:	a1 6c 00 12 00       	mov    eax,ds:0x12006c
   22f53:	83 f8 01             	cmp    eax,0x1
   22f56:	74 2e                	je     22f86 <do_intel+0xda>
   22f58:	83 f8 01             	cmp    eax,0x1
   22f5b:	7f 06                	jg     22f63 <do_intel+0xb7>
   22f5d:	85 c0                	test   eax,eax
   22f5f:	74 0e                	je     22f6f <do_intel+0xc3>
   22f61:	eb 67                	jmp    22fca <do_intel+0x11e>
   22f63:	83 f8 02             	cmp    eax,0x2
   22f66:	74 35                	je     22f9d <do_intel+0xf1>
   22f68:	83 f8 03             	cmp    eax,0x3
   22f6b:	74 47                	je     22fb4 <do_intel+0x108>
   22f6d:	eb 5b                	jmp    22fca <do_intel+0x11e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:132
		case 0:
		sprintf(kcpuInfo.type_name,"Original OEM");
   22f6f:	83 ec 08             	sub    esp,0x8
   22f72:	68 dd 40 08 00       	push   0x840dd
   22f77:	68 0e 01 12 00       	push   0x12010e
   22f7c:	e8 8a 41 00 00       	call   2710b <sprintf>
   22f81:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:133
		break;
   22f84:	eb 44                	jmp    22fca <do_intel+0x11e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:135
		case 1:
		sprintf(kcpuInfo.type_name,"Overdrive");
   22f86:	83 ec 08             	sub    esp,0x8
   22f89:	68 ea 40 08 00       	push   0x840ea
   22f8e:	68 0e 01 12 00       	push   0x12010e
   22f93:	e8 73 41 00 00       	call   2710b <sprintf>
   22f98:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:136
		break;
   22f9b:	eb 2d                	jmp    22fca <do_intel+0x11e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:138
		case 2:
		sprintf(kcpuInfo.type_name,"Dual-capable");
   22f9d:	83 ec 08             	sub    esp,0x8
   22fa0:	68 f4 40 08 00       	push   0x840f4
   22fa5:	68 0e 01 12 00       	push   0x12010e
   22faa:	e8 5c 41 00 00       	call   2710b <sprintf>
   22faf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:139
		break;
   22fb2:	eb 16                	jmp    22fca <do_intel+0x11e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:141
		case 3:
		sprintf(kcpuInfo.type_name,"Reserved");
   22fb4:	83 ec 08             	sub    esp,0x8
   22fb7:	68 1e 3f 08 00       	push   0x83f1e
   22fbc:	68 0e 01 12 00       	push   0x12010e
   22fc1:	e8 45 41 00 00       	call   2710b <sprintf>
   22fc6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:142
		break;
   22fc9:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:144
	}
	switch(kcpuInfo.family) {
   22fca:	a1 60 00 12 00       	mov    eax,ds:0x120060
   22fcf:	83 e8 03             	sub    eax,0x3
   22fd2:	83 f8 0c             	cmp    eax,0xc
   22fd5:	77 7a                	ja     23051 <do_intel+0x1a5>
   22fd7:	8b 04 85 2c 42 08 00 	mov    eax,DWORD PTR [eax*4+0x8422c]
   22fde:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:146
		case 3:
		sprintf(kcpuInfo.family_name,"i386");
   22fe0:	83 ec 08             	sub    esp,0x8
   22fe3:	68 01 41 08 00       	push   0x84101
   22fe8:	68 40 01 12 00       	push   0x120140
   22fed:	e8 19 41 00 00       	call   2710b <sprintf>
   22ff2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:147
		break;
   22ff5:	eb 5a                	jmp    23051 <do_intel+0x1a5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:149
		case 4:
		sprintf(kcpuInfo.family_name,"i486");
   22ff7:	83 ec 08             	sub    esp,0x8
   22ffa:	68 06 41 08 00       	push   0x84106
   22fff:	68 40 01 12 00       	push   0x120140
   23004:	e8 02 41 00 00       	call   2710b <sprintf>
   23009:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:150
		break;
   2300c:	eb 43                	jmp    23051 <do_intel+0x1a5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:152
		case 5:
		sprintf(kcpuInfo.family_name,"Pentium");
   2300e:	83 ec 08             	sub    esp,0x8
   23011:	68 0b 41 08 00       	push   0x8410b
   23016:	68 40 01 12 00       	push   0x120140
   2301b:	e8 eb 40 00 00       	call   2710b <sprintf>
   23020:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:153
		break;
   23023:	eb 2c                	jmp    23051 <do_intel+0x1a5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:155
		case 6:
		sprintf(kcpuInfo.family_name,"Pentium Pro");
   23025:	83 ec 08             	sub    esp,0x8
   23028:	68 13 41 08 00       	push   0x84113
   2302d:	68 40 01 12 00       	push   0x120140
   23032:	e8 d4 40 00 00       	call   2710b <sprintf>
   23037:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:156
		break;
   2303a:	eb 15                	jmp    23051 <do_intel+0x1a5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:158
		case 15:
		sprintf(kcpuInfo.family_name,"Pentium 4");
   2303c:	83 ec 08             	sub    esp,0x8
   2303f:	68 1f 41 08 00       	push   0x8411f
   23044:	68 40 01 12 00       	push   0x120140
   23049:	e8 bd 40 00 00       	call   2710b <sprintf>
   2304e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:160
	}
	if(kcpuInfo.family == 15) {
   23051:	a1 60 00 12 00       	mov    eax,ds:0x120060
   23056:	83 f8 0f             	cmp    eax,0xf
   23059:	75 0e                	jne    23069 <do_intel+0x1bd>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:161
		kcpuInfo.extended_family = (eax >> 20) & 0xff;
   2305b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2305e:	c1 e8 14             	shr    eax,0x14
   23061:	0f b6 c0             	movzx  eax,al
   23064:	a3 74 00 12 00       	mov    ds:0x120074,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:163
	}
	switch(kcpuInfo.family) {
   23069:	a1 60 00 12 00       	mov    eax,ds:0x120060
   2306e:	83 e8 03             	sub    eax,0x3
   23071:	83 f8 0c             	cmp    eax,0xc
   23074:	0f 87 f6 01 00 00    	ja     23270 <do_intel+0x3c4>
   2307a:	8b 04 85 60 42 08 00 	mov    eax,DWORD PTR [eax*4+0x84260]
   23081:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:167
		case 3:
		break;
		case 4:
		switch(kcpuInfo.model) {
   23083:	a1 64 00 12 00       	mov    eax,ds:0x120064
   23088:	83 f8 08             	cmp    eax,0x8
   2308b:	0f 87 db 01 00 00    	ja     2326c <do_intel+0x3c0>
   23091:	8b 04 85 94 42 08 00 	mov    eax,DWORD PTR [eax*4+0x84294]
   23098:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:170
			case 0:
			case 1:
			sprintf(kcpuInfo.model_name,"DX");
   2309a:	83 ec 08             	sub    esp,0x8
   2309d:	68 29 41 08 00       	push   0x84129
   230a2:	68 aa 00 12 00       	push   0x1200aa
   230a7:	e8 5f 40 00 00       	call   2710b <sprintf>
   230ac:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:171
			break;
   230af:	e9 89 00 00 00       	jmp    2313d <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:173
			case 2:
			sprintf(kcpuInfo.model_name,"SX");
   230b4:	83 ec 08             	sub    esp,0x8
   230b7:	68 2c 41 08 00       	push   0x8412c
   230bc:	68 aa 00 12 00       	push   0x1200aa
   230c1:	e8 45 40 00 00       	call   2710b <sprintf>
   230c6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:174
			break;
   230c9:	eb 72                	jmp    2313d <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:176
			case 3:
			sprintf(kcpuInfo.model_name,"487/DX2");
   230cb:	83 ec 08             	sub    esp,0x8
   230ce:	68 2f 41 08 00       	push   0x8412f
   230d3:	68 aa 00 12 00       	push   0x1200aa
   230d8:	e8 2e 40 00 00       	call   2710b <sprintf>
   230dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:177
			break;
   230e0:	eb 5b                	jmp    2313d <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:179
			case 4:
			sprintf(kcpuInfo.model_name,"SL");
   230e2:	83 ec 08             	sub    esp,0x8
   230e5:	68 37 41 08 00       	push   0x84137
   230ea:	68 aa 00 12 00       	push   0x1200aa
   230ef:	e8 17 40 00 00       	call   2710b <sprintf>
   230f4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:180
			break;
   230f7:	eb 44                	jmp    2313d <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:182
			case 5:
			sprintf(kcpuInfo.model_name,"SX2");
   230f9:	83 ec 08             	sub    esp,0x8
   230fc:	68 3a 41 08 00       	push   0x8413a
   23101:	68 aa 00 12 00       	push   0x1200aa
   23106:	e8 00 40 00 00       	call   2710b <sprintf>
   2310b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:183
			break;
   2310e:	eb 2d                	jmp    2313d <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:185
			case 7:
			sprintf(kcpuInfo.model_name,"Write-back enhanced DX2");
   23110:	83 ec 08             	sub    esp,0x8
   23113:	68 3e 41 08 00       	push   0x8413e
   23118:	68 aa 00 12 00       	push   0x1200aa
   2311d:	e8 e9 3f 00 00       	call   2710b <sprintf>
   23122:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:186
			break;
   23125:	eb 16                	jmp    2313d <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:188
			case 8:
			sprintf(kcpuInfo.model_name,"DX4");
   23127:	83 ec 08             	sub    esp,0x8
   2312a:	68 56 41 08 00       	push   0x84156
   2312f:	68 aa 00 12 00       	push   0x1200aa
   23134:	e8 d2 3f 00 00       	call   2710b <sprintf>
   23139:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:189
			break;
   2313c:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:191
		}
		break;
   2313d:	e9 2a 01 00 00       	jmp    2326c <do_intel+0x3c0>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:193
		case 5:
		switch(kcpuInfo.model) {
   23142:	a1 64 00 12 00       	mov    eax,ds:0x120064
   23147:	83 f8 02             	cmp    eax,0x2
   2314a:	74 35                	je     23181 <do_intel+0x2d5>
   2314c:	83 f8 02             	cmp    eax,0x2
   2314f:	7f 0a                	jg     2315b <do_intel+0x2af>
   23151:	83 f8 01             	cmp    eax,0x1
   23154:	74 14                	je     2316a <do_intel+0x2be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:207
			break;
			case 4:
			sprintf(kcpuInfo.model_name,"MMX");
			break;
		}
		break;
   23156:	e9 15 01 00 00       	jmp    23270 <do_intel+0x3c4>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:193
			sprintf(kcpuInfo.model_name,"DX4");
			break;
		}
		break;
		case 5:
		switch(kcpuInfo.model) {
   2315b:	83 f8 03             	cmp    eax,0x3
   2315e:	74 38                	je     23198 <do_intel+0x2ec>
   23160:	83 f8 04             	cmp    eax,0x4
   23163:	74 4a                	je     231af <do_intel+0x303>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:207
			break;
			case 4:
			sprintf(kcpuInfo.model_name,"MMX");
			break;
		}
		break;
   23165:	e9 06 01 00 00       	jmp    23270 <do_intel+0x3c4>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:195
		}
		break;
		case 5:
		switch(kcpuInfo.model) {
			case 1:
			sprintf(kcpuInfo.model_name,"60/66");
   2316a:	83 ec 08             	sub    esp,0x8
   2316d:	68 5a 41 08 00       	push   0x8415a
   23172:	68 aa 00 12 00       	push   0x1200aa
   23177:	e8 8f 3f 00 00       	call   2710b <sprintf>
   2317c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:196
			break;
   2317f:	eb 44                	jmp    231c5 <do_intel+0x319>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:198
			case 2:
			sprintf(kcpuInfo.model_name,"75-200");
   23181:	83 ec 08             	sub    esp,0x8
   23184:	68 60 41 08 00       	push   0x84160
   23189:	68 aa 00 12 00       	push   0x1200aa
   2318e:	e8 78 3f 00 00       	call   2710b <sprintf>
   23193:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:199
			break;
   23196:	eb 2d                	jmp    231c5 <do_intel+0x319>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:201
			case 3:
			sprintf(kcpuInfo.model_name,"for 486 system");
   23198:	83 ec 08             	sub    esp,0x8
   2319b:	68 67 41 08 00       	push   0x84167
   231a0:	68 aa 00 12 00       	push   0x1200aa
   231a5:	e8 61 3f 00 00       	call   2710b <sprintf>
   231aa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:202
			break;
   231ad:	eb 16                	jmp    231c5 <do_intel+0x319>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:204
			case 4:
			sprintf(kcpuInfo.model_name,"MMX");
   231af:	83 ec 08             	sub    esp,0x8
   231b2:	68 76 41 08 00       	push   0x84176
   231b7:	68 aa 00 12 00       	push   0x1200aa
   231bc:	e8 4a 3f 00 00       	call   2710b <sprintf>
   231c1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:205
			break;
   231c4:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:207
		}
		break;
   231c5:	e9 a6 00 00 00       	jmp    23270 <do_intel+0x3c4>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:209
		case 6:
		switch(kcpuInfo.model) {
   231ca:	a1 64 00 12 00       	mov    eax,ds:0x120064
   231cf:	83 f8 08             	cmp    eax,0x8
   231d2:	0f 87 97 00 00 00    	ja     2326f <do_intel+0x3c3>
   231d8:	8b 04 85 b8 42 08 00 	mov    eax,DWORD PTR [eax*4+0x842b8]
   231df:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:211
			case 1:
			sprintf(kcpuInfo.model_name,"Pentium Pro");
   231e1:	83 ec 08             	sub    esp,0x8
   231e4:	68 13 41 08 00       	push   0x84113
   231e9:	68 aa 00 12 00       	push   0x1200aa
   231ee:	e8 18 3f 00 00       	call   2710b <sprintf>
   231f3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:212
			break;
   231f6:	eb 72                	jmp    2326a <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:214
			case 3:
			sprintf(kcpuInfo.model_name,"Pentium II Model 3");
   231f8:	83 ec 08             	sub    esp,0x8
   231fb:	68 7a 41 08 00       	push   0x8417a
   23200:	68 aa 00 12 00       	push   0x1200aa
   23205:	e8 01 3f 00 00       	call   2710b <sprintf>
   2320a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:215
			break;
   2320d:	eb 5b                	jmp    2326a <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:217
			case 5:
			sprintf(kcpuInfo.model_name,"Pentium II Model 5/Xeon/Celeron");
   2320f:	83 ec 08             	sub    esp,0x8
   23212:	68 90 41 08 00       	push   0x84190
   23217:	68 aa 00 12 00       	push   0x1200aa
   2321c:	e8 ea 3e 00 00       	call   2710b <sprintf>
   23221:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:218
			break;
   23224:	eb 44                	jmp    2326a <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:220
			case 6:
			sprintf(kcpuInfo.model_name,"Celeron");
   23226:	83 ec 08             	sub    esp,0x8
   23229:	68 b0 41 08 00       	push   0x841b0
   2322e:	68 aa 00 12 00       	push   0x1200aa
   23233:	e8 d3 3e 00 00       	call   2710b <sprintf>
   23238:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:221
			break;
   2323b:	eb 2d                	jmp    2326a <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:223
			case 7:
			sprintf(kcpuInfo.model_name,"Pentium III/Pentium III Xeon - external L2 cache");
   2323d:	83 ec 08             	sub    esp,0x8
   23240:	68 b8 41 08 00       	push   0x841b8
   23245:	68 aa 00 12 00       	push   0x1200aa
   2324a:	e8 bc 3e 00 00       	call   2710b <sprintf>
   2324f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:224
			break;
   23252:	eb 16                	jmp    2326a <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:226
			case 8:
			sprintf(kcpuInfo.model_name,"Pentium III/Pentium III Xeon - internal L2 cache");
   23254:	83 ec 08             	sub    esp,0x8
   23257:	68 ec 41 08 00       	push   0x841ec
   2325c:	68 aa 00 12 00       	push   0x1200aa
   23261:	e8 a5 3e 00 00       	call   2710b <sprintf>
   23266:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:227
			break;
   23269:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:229
		}
		break;
   2326a:	eb 03                	jmp    2326f <do_intel+0x3c3>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:191
			break;
			case 8:
			sprintf(kcpuInfo.model_name,"DX4");
			break;
		}
		break;
   2326c:	90                   	nop
   2326d:	eb 01                	jmp    23270 <do_intel+0x3c4>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:229
			break;
			case 8:
			sprintf(kcpuInfo.model_name,"Pentium III/Pentium III Xeon - internal L2 cache");
			break;
		}
		break;
   2326f:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:233
		case 15:
		break;
	}
	__get_cpuid(0x80000000, &max_eax, &unused, &unused, &unused);
   23270:	83 ec 0c             	sub    esp,0xc
   23273:	8d 45 dc             	lea    eax,[ebp-0x24]
   23276:	50                   	push   eax
   23277:	8d 45 dc             	lea    eax,[ebp-0x24]
   2327a:	50                   	push   eax
   2327b:	8d 45 dc             	lea    eax,[ebp-0x24]
   2327e:	50                   	push   eax
   2327f:	8d 45 e0             	lea    eax,[ebp-0x20]
   23282:	50                   	push   eax
   23283:	68 00 00 00 80       	push   0x80000000
   23288:	e8 6e fb ff ff       	call   22dfb <__get_cpuid>
   2328d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:239
	/* Quok said: If the max extended eax value is high enough to support the processor brand string
	(values 0x80000002 to 0x80000004), then we'll use that information to return the brand information. 
	Otherwise, we'll refer back to the brand tables above for backwards compatibility with older processors. 
	According to the Sept. 2006 Intel Arch Software Developer's Guide, if extended eax values are supported, 
	then all 3 values for the processor brand string are supported, but we'll test just to make sure and be safe. */
	if(max_eax >= 0x80000004) {
   23290:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23293:	3d 03 00 00 80       	cmp    eax,0x80000003
   23298:	0f 86 e1 00 00 00    	jbe    2337f <do_intel+0x4d3>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:240
		if(max_eax >= 0x80000002) {
   2329e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   232a1:	3d 01 00 00 80       	cmp    eax,0x80000001
   232a6:	76 3e                	jbe    232e6 <do_intel+0x43a>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:241
			__get_cpuid(0x80000002, &eax, &ebx, &ecx, &edx);
   232a8:	83 ec 0c             	sub    esp,0xc
   232ab:	8d 45 e4             	lea    eax,[ebp-0x1c]
   232ae:	50                   	push   eax
   232af:	8d 45 e8             	lea    eax,[ebp-0x18]
   232b2:	50                   	push   eax
   232b3:	8d 45 ec             	lea    eax,[ebp-0x14]
   232b6:	50                   	push   eax
   232b7:	8d 45 f0             	lea    eax,[ebp-0x10]
   232ba:	50                   	push   eax
   232bb:	68 02 00 00 80       	push   0x80000002
   232c0:	e8 36 fb ff ff       	call   22dfb <__get_cpuid>
   232c5:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:242
			printregs(eax, ebx, ecx, edx);
   232c8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   232cb:	89 c3                	mov    ebx,eax
   232cd:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   232d0:	89 c1                	mov    ecx,eax
   232d2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   232d5:	89 c2                	mov    edx,eax
   232d7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   232da:	53                   	push   ebx
   232db:	51                   	push   ecx
   232dc:	52                   	push   edx
   232dd:	50                   	push   eax
   232de:	e8 28 01 00 00       	call   2340b <printregs>
   232e3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:244
		}
		if(max_eax >= 0x80000003) {
   232e6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   232e9:	3d 02 00 00 80       	cmp    eax,0x80000002
   232ee:	76 3e                	jbe    2332e <do_intel+0x482>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:245
			__get_cpuid(0x80000003, &eax, &ebx, &ecx, &edx);
   232f0:	83 ec 0c             	sub    esp,0xc
   232f3:	8d 45 e4             	lea    eax,[ebp-0x1c]
   232f6:	50                   	push   eax
   232f7:	8d 45 e8             	lea    eax,[ebp-0x18]
   232fa:	50                   	push   eax
   232fb:	8d 45 ec             	lea    eax,[ebp-0x14]
   232fe:	50                   	push   eax
   232ff:	8d 45 f0             	lea    eax,[ebp-0x10]
   23302:	50                   	push   eax
   23303:	68 03 00 00 80       	push   0x80000003
   23308:	e8 ee fa ff ff       	call   22dfb <__get_cpuid>
   2330d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:246
			printregs(eax, ebx, ecx, edx);
   23310:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   23313:	89 c3                	mov    ebx,eax
   23315:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   23318:	89 c1                	mov    ecx,eax
   2331a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2331d:	89 c2                	mov    edx,eax
   2331f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23322:	53                   	push   ebx
   23323:	51                   	push   ecx
   23324:	52                   	push   edx
   23325:	50                   	push   eax
   23326:	e8 e0 00 00 00       	call   2340b <printregs>
   2332b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:248
		}
		if(max_eax >= 0x80000004) {
   2332e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23331:	3d 03 00 00 80       	cmp    eax,0x80000003
   23336:	0f 86 c5 00 00 00    	jbe    23401 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:249
			__get_cpuid(0x80000004, &eax, &ebx, &ecx, &edx);
   2333c:	83 ec 0c             	sub    esp,0xc
   2333f:	8d 45 e4             	lea    eax,[ebp-0x1c]
   23342:	50                   	push   eax
   23343:	8d 45 e8             	lea    eax,[ebp-0x18]
   23346:	50                   	push   eax
   23347:	8d 45 ec             	lea    eax,[ebp-0x14]
   2334a:	50                   	push   eax
   2334b:	8d 45 f0             	lea    eax,[ebp-0x10]
   2334e:	50                   	push   eax
   2334f:	68 04 00 00 80       	push   0x80000004
   23354:	e8 a2 fa ff ff       	call   22dfb <__get_cpuid>
   23359:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:250
			printregs(eax, ebx, ecx, edx);
   2335c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   2335f:	89 c3                	mov    ebx,eax
   23361:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   23364:	89 c1                	mov    ecx,eax
   23366:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23369:	89 c2                	mov    edx,eax
   2336b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2336e:	53                   	push   ebx
   2336f:	51                   	push   ecx
   23370:	52                   	push   edx
   23371:	50                   	push   eax
   23372:	e8 94 00 00 00       	call   2340b <printregs>
   23377:	83 c4 10             	add    esp,0x10
   2337a:	e9 82 00 00 00       	jmp    23401 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:252
		}
	} else if(kcpuInfo.brand > 0) {
   2337f:	a1 70 00 12 00       	mov    eax,ds:0x120070
   23384:	85 c0                	test   eax,eax
   23386:	7e 79                	jle    23401 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:253
		if(kcpuInfo.brand < 0x18) {
   23388:	a1 70 00 12 00       	mov    eax,ds:0x120070
   2338d:	83 f8 17             	cmp    eax,0x17
   23390:	7f 5a                	jg     233ec <do_intel+0x540>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:254
			if(signature == 0x000006B1 || signature == 0x00000F13) {
   23392:	81 7d f4 b1 06 00 00 	cmp    DWORD PTR [ebp-0xc],0x6b1
   23399:	74 09                	je     233a4 <do_intel+0x4f8>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:254 (discriminator 1)
   2339b:	81 7d f4 13 0f 00 00 	cmp    DWORD PTR [ebp-0xc],0xf13
   233a2:	75 24                	jne    233c8 <do_intel+0x51c>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:255
				sprintf(kcpuInfo.brand_name,"%s\n", Intel_Other[kcpuInfo.brand]);
   233a4:	a1 70 00 12 00       	mov    eax,ds:0x120070
   233a9:	8b 04 85 40 da 02 00 	mov    eax,DWORD PTR [eax*4+0x2da40]
   233b0:	83 ec 04             	sub    esp,0x4
   233b3:	50                   	push   eax
   233b4:	68 1d 42 08 00       	push   0x8421d
   233b9:	68 72 01 12 00       	push   0x120172
   233be:	e8 48 3d 00 00       	call   2710b <sprintf>
   233c3:	83 c4 10             	add    esp,0x10
   233c6:	eb 39                	jmp    23401 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:257
			} else {
				sprintf(kcpuInfo.brand_name, "%s\n", Intel[kcpuInfo.brand]);
   233c8:	a1 70 00 12 00       	mov    eax,ds:0x120070
   233cd:	8b 04 85 e0 d9 02 00 	mov    eax,DWORD PTR [eax*4+0x2d9e0]
   233d4:	83 ec 04             	sub    esp,0x4
   233d7:	50                   	push   eax
   233d8:	68 1d 42 08 00       	push   0x8421d
   233dd:	68 72 01 12 00       	push   0x120172
   233e2:	e8 24 3d 00 00       	call   2710b <sprintf>
   233e7:	83 c4 10             	add    esp,0x10
   233ea:	eb 15                	jmp    23401 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:260
			}
		} else {
			sprintf(kcpuInfo.brand_name, "Reserved\n");
   233ec:	83 ec 08             	sub    esp,0x8
   233ef:	68 21 42 08 00       	push   0x84221
   233f4:	68 72 01 12 00       	push   0x120172
   233f9:	e8 0d 3d 00 00       	call   2710b <sprintf>
   233fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:263
		}
	}
	return 0;
   23401:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:264
}
   23406:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   23409:	c9                   	leave  
   2340a:	c3                   	ret    

0002340b <printregs>:
printregs():
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:267

/* Print Registers */
void HIGH_CODE_SECTION printregs(int eax, int ebx, int ecx, int edx) {
   2340b:	55                   	push   ebp
   2340c:	89 e5                	mov    ebp,esp
   2340e:	53                   	push   ebx
   2340f:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:270
	int j;
	char string[17];
	string[16] = '\0';
   23412:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:271
	for(j = 0; j < 4; j++) {
   23416:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   2341d:	eb 6a                	jmp    23489 <printregs+0x7e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:272 (discriminator 3)
		string[j] = eax >> (8 * j);
   2341f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   23422:	c1 e0 03             	shl    eax,0x3
   23425:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   23428:	89 c1                	mov    ecx,eax
   2342a:	d3 fa                	sar    edx,cl
   2342c:	89 d0                	mov    eax,edx
   2342e:	89 c1                	mov    ecx,eax
   23430:	8d 55 e3             	lea    edx,[ebp-0x1d]
   23433:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   23436:	01 d0                	add    eax,edx
   23438:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:273 (discriminator 3)
		string[j + 4] = ebx >> (8 * j);
   2343a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2343d:	83 c0 04             	add    eax,0x4
   23440:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23443:	c1 e2 03             	shl    edx,0x3
   23446:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
   23449:	89 d1                	mov    ecx,edx
   2344b:	d3 fb                	sar    ebx,cl
   2344d:	89 da                	mov    edx,ebx
   2344f:	88 54 05 e3          	mov    BYTE PTR [ebp+eax*1-0x1d],dl
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:274 (discriminator 3)
		string[j + 8] = ecx >> (8 * j);
   23453:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   23456:	83 c0 08             	add    eax,0x8
   23459:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   2345c:	c1 e2 03             	shl    edx,0x3
   2345f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
   23462:	89 d1                	mov    ecx,edx
   23464:	d3 fb                	sar    ebx,cl
   23466:	89 da                	mov    edx,ebx
   23468:	88 54 05 e3          	mov    BYTE PTR [ebp+eax*1-0x1d],dl
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:275 (discriminator 3)
		string[j + 12] = edx >> (8 * j);
   2346c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2346f:	83 c0 0c             	add    eax,0xc
   23472:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23475:	c1 e2 03             	shl    edx,0x3
   23478:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
   2347b:	89 d1                	mov    ecx,edx
   2347d:	d3 fb                	sar    ebx,cl
   2347f:	89 da                	mov    edx,ebx
   23481:	88 54 05 e3          	mov    BYTE PTR [ebp+eax*1-0x1d],dl
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:271 (discriminator 3)
/* Print Registers */
void HIGH_CODE_SECTION printregs(int eax, int ebx, int ecx, int edx) {
	int j;
	char string[17];
	string[16] = '\0';
	for(j = 0; j < 4; j++) {
   23485:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:271 (discriminator 1)
   23489:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
   2348d:	7e 90                	jle    2341f <printregs+0x14>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:277
		string[j] = eax >> (8 * j);
		string[j + 4] = ebx >> (8 * j);
		string[j + 8] = ecx >> (8 * j);
		string[j + 12] = edx >> (8 * j);
	}
	sprintf(kcpuInfo.brand_name, "%s%s", kcpuInfo.brand_name, string);
   2348f:	8d 45 e3             	lea    eax,[ebp-0x1d]
   23492:	50                   	push   eax
   23493:	68 72 01 12 00       	push   0x120172
   23498:	68 dc 42 08 00       	push   0x842dc
   2349d:	68 72 01 12 00       	push   0x120172
   234a2:	e8 64 3c 00 00       	call   2710b <sprintf>
   234a7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:278
}
   234aa:	90                   	nop
   234ab:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   234ae:	c9                   	leave  
   234af:	c3                   	ret    

000234b0 <do_amd>:
do_amd():
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:281

/* AMD-specific information */
int HIGH_CODE_SECTION do_amd(void) {
   234b0:	55                   	push   ebp
   234b1:	89 e5                	mov    ebp,esp
   234b3:	53                   	push   ebx
   234b4:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:283
	//printf("AMD Specific Features:\n");
	unsigned int extended=0, eax=0, ebx=0, ecx=0, edx=0, unused=0;
   234b7:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   234be:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   234c5:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   234cc:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   234d3:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   234da:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:284
	__get_cpuid(1, &eax, &unused, &unused, &unused);
   234e1:	8d 45 dc             	lea    eax,[ebp-0x24]
   234e4:	50                   	push   eax
   234e5:	8d 45 dc             	lea    eax,[ebp-0x24]
   234e8:	50                   	push   eax
   234e9:	8d 45 dc             	lea    eax,[ebp-0x24]
   234ec:	50                   	push   eax
   234ed:	8d 45 ec             	lea    eax,[ebp-0x14]
   234f0:	50                   	push   eax
   234f1:	6a 01                	push   0x1
   234f3:	e8 03 f9 ff ff       	call   22dfb <__get_cpuid>
   234f8:	83 c4 14             	add    esp,0x14
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:285
	kcpuInfo.model = (eax >> 4) & 0xf;
   234fb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   234fe:	c1 e8 04             	shr    eax,0x4
   23501:	83 e0 0f             	and    eax,0xf
   23504:	a3 64 00 12 00       	mov    ds:0x120064,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:286
	kcpuInfo.family = (eax >> 8) & 0xf;
   23509:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2350c:	c1 e8 08             	shr    eax,0x8
   2350f:	83 e0 0f             	and    eax,0xf
   23512:	a3 60 00 12 00       	mov    ds:0x120060,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:287
	kcpuInfo.stepping = eax & 0xf;
   23517:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2351a:	83 e0 0f             	and    eax,0xf
   2351d:	a3 68 00 12 00       	mov    ds:0x120068,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:289
	//reserved = eax >> 12;
	sprintf(kcpuInfo.vendor, "AMD");
   23522:	83 ec 08             	sub    esp,0x8
   23525:	68 e1 42 08 00       	push   0x842e1
   2352a:	68 78 00 12 00       	push   0x120078
   2352f:	e8 d7 3b 00 00       	call   2710b <sprintf>
   23534:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:290
	switch(kcpuInfo.family) 
   23537:	a1 60 00 12 00       	mov    eax,ds:0x120060
   2353c:	83 f8 05             	cmp    eax,0x5
   2353f:	74 46                	je     23587 <do_amd+0xd7>
   23541:	83 f8 05             	cmp    eax,0x5
   23544:	7f 0a                	jg     23550 <do_amd+0xa0>
   23546:	83 f8 04             	cmp    eax,0x4
   23549:	74 1c                	je     23567 <do_amd+0xb7>
   2354b:	e9 a1 01 00 00       	jmp    236f1 <do_amd+0x241>
   23550:	83 f8 06             	cmp    eax,0x6
   23553:	0f 84 ad 00 00 00    	je     23606 <do_amd+0x156>
   23559:	83 f8 0f             	cmp    eax,0xf
   2355c:	0f 84 37 01 00 00    	je     23699 <do_amd+0x1e9>
   23562:	e9 8a 01 00 00       	jmp    236f1 <do_amd+0x241>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:293
        {
		case 4:
		sprintf(kcpuInfo.model_name, "486 Model %d", kcpuInfo.model);
   23567:	a1 64 00 12 00       	mov    eax,ds:0x120064
   2356c:	83 ec 04             	sub    esp,0x4
   2356f:	50                   	push   eax
   23570:	68 e5 42 08 00       	push   0x842e5
   23575:	68 aa 00 12 00       	push   0x1200aa
   2357a:	e8 8c 3b 00 00       	call   2710b <sprintf>
   2357f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:294
		break;
   23582:	e9 6a 01 00 00       	jmp    236f1 <do_amd+0x241>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:296
		case 5:
		switch(kcpuInfo.model) {
   23587:	a1 64 00 12 00       	mov    eax,ds:0x120064
   2358c:	83 f8 09             	cmp    eax,0x9
   2358f:	77 54                	ja     235e5 <do_amd+0x135>
   23591:	8b 04 85 3c 44 08 00 	mov    eax,DWORD PTR [eax*4+0x8443c]
   23598:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:304
			case 2:
			case 3:
			case 6:
			case 7:
			
                            sprintf(kcpuInfo.model_name, "K6 Model %d", kcpuInfo.model);
   2359a:	a1 64 00 12 00       	mov    eax,ds:0x120064
   2359f:	83 ec 04             	sub    esp,0x4
   235a2:	50                   	push   eax
   235a3:	68 f2 42 08 00       	push   0x842f2
   235a8:	68 aa 00 12 00       	push   0x1200aa
   235ad:	e8 59 3b 00 00       	call   2710b <sprintf>
   235b2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:305
			break;
   235b5:	eb 4a                	jmp    23601 <do_amd+0x151>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:307
			case 8:
			sprintf(kcpuInfo.model_name, "K6-2 Model 8");
   235b7:	83 ec 08             	sub    esp,0x8
   235ba:	68 fe 42 08 00       	push   0x842fe
   235bf:	68 aa 00 12 00       	push   0x1200aa
   235c4:	e8 42 3b 00 00       	call   2710b <sprintf>
   235c9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:308
			break;
   235cc:	eb 33                	jmp    23601 <do_amd+0x151>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:310
			case 9:
			sprintf(kcpuInfo.model_name, "K6-III Model 9");
   235ce:	83 ec 08             	sub    esp,0x8
   235d1:	68 0b 43 08 00       	push   0x8430b
   235d6:	68 aa 00 12 00       	push   0x1200aa
   235db:	e8 2b 3b 00 00       	call   2710b <sprintf>
   235e0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:311
			break;
   235e3:	eb 1c                	jmp    23601 <do_amd+0x151>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:313
			default:
			sprintf(kcpuInfo.model_name, "K5/K6 Model %d", kcpuInfo.model);
   235e5:	a1 64 00 12 00       	mov    eax,ds:0x120064
   235ea:	83 ec 04             	sub    esp,0x4
   235ed:	50                   	push   eax
   235ee:	68 1a 43 08 00       	push   0x8431a
   235f3:	68 aa 00 12 00       	push   0x1200aa
   235f8:	e8 0e 3b 00 00       	call   2710b <sprintf>
   235fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:314
			break;
   23600:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:316
		}
		break;
   23601:	e9 eb 00 00 00       	jmp    236f1 <do_amd+0x241>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:318
		case 6:
		switch(kcpuInfo.model) {
   23606:	a1 64 00 12 00       	mov    eax,ds:0x120064
   2360b:	83 f8 07             	cmp    eax,0x7
   2360e:	77 6b                	ja     2367b <do_amd+0x1cb>
   23610:	8b 04 85 64 44 08 00 	mov    eax,DWORD PTR [eax*4+0x84464]
   23617:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:322
			case 1:
			case 2:
			case 4:
			sprintf(kcpuInfo.model_name, "Athlon Model %d", kcpuInfo.model);
   23619:	a1 64 00 12 00       	mov    eax,ds:0x120064
   2361e:	83 ec 04             	sub    esp,0x4
   23621:	50                   	push   eax
   23622:	68 29 43 08 00       	push   0x84329
   23627:	68 aa 00 12 00       	push   0x1200aa
   2362c:	e8 da 3a 00 00       	call   2710b <sprintf>
   23631:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:323
			break;
   23634:	eb 61                	jmp    23697 <do_amd+0x1e7>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:325
			case 3:
			sprintf(kcpuInfo.model_name, "Duron Model 3");
   23636:	83 ec 08             	sub    esp,0x8
   23639:	68 39 43 08 00       	push   0x84339
   2363e:	68 aa 00 12 00       	push   0x1200aa
   23643:	e8 c3 3a 00 00       	call   2710b <sprintf>
   23648:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:326
			break;
   2364b:	eb 4a                	jmp    23697 <do_amd+0x1e7>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:328
			case 6:
			sprintf(kcpuInfo.model_name, "Athlon MP/Mobile Athlon Model 6");
   2364d:	83 ec 08             	sub    esp,0x8
   23650:	68 48 43 08 00       	push   0x84348
   23655:	68 aa 00 12 00       	push   0x1200aa
   2365a:	e8 ac 3a 00 00       	call   2710b <sprintf>
   2365f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:329
			break;
   23662:	eb 33                	jmp    23697 <do_amd+0x1e7>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:331
			case 7:
			sprintf(kcpuInfo.model_name, "Mobile Duron Model 7");
   23664:	83 ec 08             	sub    esp,0x8
   23667:	68 68 43 08 00       	push   0x84368
   2366c:	68 aa 00 12 00       	push   0x1200aa
   23671:	e8 95 3a 00 00       	call   2710b <sprintf>
   23676:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:332
			break;
   23679:	eb 1c                	jmp    23697 <do_amd+0x1e7>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:334
			default:
			sprintf(kcpuInfo.model_name, "Duron/Athlon Model %d", kcpuInfo.model);
   2367b:	a1 64 00 12 00       	mov    eax,ds:0x120064
   23680:	83 ec 04             	sub    esp,0x4
   23683:	50                   	push   eax
   23684:	68 7d 43 08 00       	push   0x8437d
   23689:	68 aa 00 12 00       	push   0x1200aa
   2368e:	e8 78 3a 00 00       	call   2710b <sprintf>
   23693:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:335
			break;
   23696:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:337
		}
		break;
   23697:	eb 58                	jmp    236f1 <do_amd+0x241>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:339
                case 15:
                    switch(kcpuInfo.model)
   23699:	a1 64 00 12 00       	mov    eax,ds:0x120064
   2369e:	83 f8 1e             	cmp    eax,0x1e
   236a1:	77 4d                	ja     236f0 <do_amd+0x240>
   236a3:	8b 04 85 84 44 08 00 	mov    eax,DWORD PTR [eax*4+0x84484]
   236aa:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:343
                    {
                        case 1:
                        case 2:
                            sprintf(kcpuInfo.model_name, "FX Series/Opertron (Piledriver)");
   236ac:	83 ec 08             	sub    esp,0x8
   236af:	68 94 43 08 00       	push   0x84394
   236b4:	68 aa 00 12 00       	push   0x1200aa
   236b9:	e8 4d 3a 00 00       	call   2710b <sprintf>
   236be:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:344
                            break;
   236c1:	eb 2d                	jmp    236f0 <do_amd+0x240>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:347
                        case 10:
                        case 13:
                            sprintf(kcpuInfo.model_name, "A/R-Series/Athlon/Semperon/Firepro (Piledriver)");
   236c3:	83 ec 08             	sub    esp,0x8
   236c6:	68 b4 43 08 00       	push   0x843b4
   236cb:	68 aa 00 12 00       	push   0x1200aa
   236d0:	e8 36 3a 00 00       	call   2710b <sprintf>
   236d5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:348
                            break;
   236d8:	eb 16                	jmp    236f0 <do_amd+0x240>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:350
                        case 30:
                            sprintf(kcpuInfo.model_name, "Elite A-Series/R-Series/Opertron (SteamRoller)");
   236da:	83 ec 08             	sub    esp,0x8
   236dd:	68 e4 43 08 00       	push   0x843e4
   236e2:	68 aa 00 12 00       	push   0x1200aa
   236e7:	e8 1f 3a 00 00       	call   2710b <sprintf>
   236ec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:351
                            break;
   236ef:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:353
                    }
                    break;
   236f0:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:355
	}
	__get_cpuid(0x80000000, &extended, &unused, &unused, &unused);
   236f1:	83 ec 0c             	sub    esp,0xc
   236f4:	8d 45 dc             	lea    eax,[ebp-0x24]
   236f7:	50                   	push   eax
   236f8:	8d 45 dc             	lea    eax,[ebp-0x24]
   236fb:	50                   	push   eax
   236fc:	8d 45 dc             	lea    eax,[ebp-0x24]
   236ff:	50                   	push   eax
   23700:	8d 45 f0             	lea    eax,[ebp-0x10]
   23703:	50                   	push   eax
   23704:	68 00 00 00 80       	push   0x80000000
   23709:	e8 ed f6 ff ff       	call   22dfb <__get_cpuid>
   2370e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:356
	if(extended == 0) {
   23711:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23714:	85 c0                	test   eax,eax
   23716:	75 0a                	jne    23722 <do_amd+0x272>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:357
		return 0;
   23718:	b8 00 00 00 00       	mov    eax,0x0
   2371d:	e9 a5 00 00 00       	jmp    237c7 <do_amd+0x317>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:359
	}
	if(extended >= 0x80000002) {
   23722:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23725:	3d 01 00 00 80       	cmp    eax,0x80000001
   2372a:	76 52                	jbe    2377e <do_amd+0x2ce>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:361
		unsigned int j;
		for(j = 0x80000002; j <= 0x80000004; j++) {
   2372c:	c7 45 f4 02 00 00 80 	mov    DWORD PTR [ebp-0xc],0x80000002
   23733:	eb 40                	jmp    23775 <do_amd+0x2c5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:362 (discriminator 3)
			__get_cpuid(j, &eax, &ebx, &ecx, &edx);
   23735:	83 ec 0c             	sub    esp,0xc
   23738:	8d 45 e0             	lea    eax,[ebp-0x20]
   2373b:	50                   	push   eax
   2373c:	8d 45 e4             	lea    eax,[ebp-0x1c]
   2373f:	50                   	push   eax
   23740:	8d 45 e8             	lea    eax,[ebp-0x18]
   23743:	50                   	push   eax
   23744:	8d 45 ec             	lea    eax,[ebp-0x14]
   23747:	50                   	push   eax
   23748:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2374b:	e8 ab f6 ff ff       	call   22dfb <__get_cpuid>
   23750:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:363 (discriminator 3)
			printregs(eax, ebx, ecx, edx);
   23753:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23756:	89 c3                	mov    ebx,eax
   23758:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   2375b:	89 c1                	mov    ecx,eax
   2375d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   23760:	89 c2                	mov    edx,eax
   23762:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23765:	53                   	push   ebx
   23766:	51                   	push   ecx
   23767:	52                   	push   edx
   23768:	50                   	push   eax
   23769:	e8 9d fc ff ff       	call   2340b <printregs>
   2376e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:361 (discriminator 3)
	if(extended == 0) {
		return 0;
	}
	if(extended >= 0x80000002) {
		unsigned int j;
		for(j = 0x80000002; j <= 0x80000004; j++) {
   23771:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:361 (discriminator 1)
   23775:	81 7d f4 04 00 00 80 	cmp    DWORD PTR [ebp-0xc],0x80000004
   2377c:	76 b7                	jbe    23735 <do_amd+0x285>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:366
			__get_cpuid(j, &eax, &ebx, &ecx, &edx);
			printregs(eax, ebx, ecx, edx);
		}
	}
	if(extended >= 0x80000007) {
   2377e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23781:	3d 06 00 00 80       	cmp    eax,0x80000006
   23786:	76 3a                	jbe    237c2 <do_amd+0x312>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:367
		__get_cpuid(0x80000007, &unused, &unused, &unused, &edx);
   23788:	83 ec 0c             	sub    esp,0xc
   2378b:	8d 45 e0             	lea    eax,[ebp-0x20]
   2378e:	50                   	push   eax
   2378f:	8d 45 dc             	lea    eax,[ebp-0x24]
   23792:	50                   	push   eax
   23793:	8d 45 dc             	lea    eax,[ebp-0x24]
   23796:	50                   	push   eax
   23797:	8d 45 dc             	lea    eax,[ebp-0x24]
   2379a:	50                   	push   eax
   2379b:	68 07 00 00 80       	push   0x80000007
   237a0:	e8 56 f6 ff ff       	call   22dfb <__get_cpuid>
   237a5:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:368
		if(edx & 1) {
   237a8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   237ab:	83 e0 01             	and    eax,0x1
   237ae:	85 c0                	test   eax,eax
   237b0:	74 10                	je     237c2 <do_amd+0x312>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:369
			printk("Temperature Sensing Diode Detected!\n");
   237b2:	83 ec 0c             	sub    esp,0xc
   237b5:	68 14 44 08 00       	push   0x84414
   237ba:	e8 f8 38 00 00       	call   270b7 <printk>
   237bf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:372
		}
	}
	return 0;
   237c2:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:373 (discriminator 1)
}
   237c7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   237ca:	c9                   	leave  
   237cb:	c3                   	ret    

000237cc <print_e820_entry>:
print_e820_entry():
/home/yogi/src/os/chrisOS/src/init/e820.c:10

extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
   237cc:	55                   	push   ebp
   237cd:	89 e5                	mov    ebp,esp
   237cf:	53                   	push   ebx
   237d0:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOS/src/init/e820.c:13
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
                                            buffer.Type==1?"Usable":buffer.Type==2?"Rsvd(2)":buffer.Type==3?"Rclm":buffer.Type==4?"NVS":"Rsvd");
   237d3:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
/home/yogi/src/os/chrisOS/src/init/e820.c:11
extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
   237d6:	83 f8 01             	cmp    eax,0x1
   237d9:	74 34                	je     2380f <print_e820_entry+0x43>
/home/yogi/src/os/chrisOS/src/init/e820.c:13
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
                                            buffer.Type==1?"Usable":buffer.Type==2?"Rsvd(2)":buffer.Type==3?"Rclm":buffer.Type==4?"NVS":"Rsvd");
   237db:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   237de:	83 f8 02             	cmp    eax,0x2
   237e1:	74 25                	je     23808 <print_e820_entry+0x3c>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 1)
   237e3:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   237e6:	83 f8 03             	cmp    eax,0x3
   237e9:	74 16                	je     23801 <print_e820_entry+0x35>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 3)
   237eb:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   237ee:	83 f8 04             	cmp    eax,0x4
   237f1:	75 07                	jne    237fa <print_e820_entry+0x2e>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 5)
   237f3:	b8 00 46 08 00       	mov    eax,0x84600
   237f8:	eb 1a                	jmp    23814 <print_e820_entry+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 6)
   237fa:	b8 04 46 08 00       	mov    eax,0x84604
   237ff:	eb 13                	jmp    23814 <print_e820_entry+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 4)
   23801:	b8 09 46 08 00       	mov    eax,0x84609
   23806:	eb 0c                	jmp    23814 <print_e820_entry+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 2)
   23808:	b8 0e 46 08 00       	mov    eax,0x8460e
   2380d:	eb 05                	jmp    23814 <print_e820_entry+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:11 (discriminator 1)
extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
   2380f:	b8 16 46 08 00       	mov    eax,0x84616
/home/yogi/src/os/chrisOS/src/init/e820.c:11 (discriminator 3)
   23814:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
/home/yogi/src/os/chrisOS/src/init/e820.c:12 (discriminator 3)
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
   23817:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   2381a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   2381d:	01 da                	add    edx,ebx
/home/yogi/src/os/chrisOS/src/init/e820.c:11 (discriminator 3)
extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
   2381f:	8d 5a ff             	lea    ebx,[edx-0x1]
   23822:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   23825:	83 ec 0c             	sub    esp,0xc
   23828:	50                   	push   eax
   23829:	51                   	push   ecx
   2382a:	53                   	push   ebx
   2382b:	52                   	push   edx
   2382c:	68 1d 46 08 00       	push   0x8461d
   23831:	e8 81 38 00 00       	call   270b7 <printk>
   23836:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/e820.c:14 (discriminator 3)
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
                                            buffer.Type==1?"Usable":buffer.Type==2?"Rsvd(2)":buffer.Type==3?"Rclm":buffer.Type==4?"NVS":"Rsvd");
}
   23839:	90                   	nop
   2383a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   2383d:	c9                   	leave  
   2383e:	c3                   	ret    

0002383f <printE820Map>:
printE820Map():
/home/yogi/src/os/chrisOS/src/init/e820.c:17

void printE820Map()
{
   2383f:	55                   	push   ebp
   23840:	89 e5                	mov    ebp,esp
   23842:	53                   	push   ebx
   23843:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/init/e820.c:18
    SMAP_entry* buffer=smap_table;
   23846:	a1 40 00 12 00       	mov    eax,ds:0x120040
   2384b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/e820.c:19
    int entryCount=kE820RecordCount;
   2384e:	0f b7 05 50 00 12 00 	movzx  eax,WORD PTR ds:0x120050
   23855:	98                   	cwde   
   23856:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/e820.c:20
    print_e820_map(smap_table, kE820RecordCount);
   23859:	0f b7 05 50 00 12 00 	movzx  eax,WORD PTR ds:0x120050
   23860:	0f bf d0             	movsx  edx,ax
   23863:	a1 40 00 12 00       	mov    eax,ds:0x120040
   23868:	83 ec 08             	sub    esp,0x8
   2386b:	52                   	push   edx
   2386c:	50                   	push   eax
   2386d:	e8 b4 00 00 00       	call   23926 <print_e820_map>
   23872:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/e820.c:21
        for (int cnt=0;cnt<entryCount;cnt++)
   23875:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   2387c:	e9 93 00 00 00       	jmp    23914 <printE820Map+0xd5>
/home/yogi/src/os/chrisOS/src/init/e820.c:23
        {
        print_e820_entry(buffer[cnt]);
   23881:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23884:	89 d0                	mov    eax,edx
   23886:	01 c0                	add    eax,eax
   23888:	01 d0                	add    eax,edx
   2388a:	c1 e0 03             	shl    eax,0x3
   2388d:	89 c2                	mov    edx,eax
   2388f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23892:	01 d0                	add    eax,edx
   23894:	83 ec 08             	sub    esp,0x8
   23897:	83 ec 18             	sub    esp,0x18
   2389a:	89 e2                	mov    edx,esp
   2389c:	8b 08                	mov    ecx,DWORD PTR [eax]
   2389e:	89 0a                	mov    DWORD PTR [edx],ecx
   238a0:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   238a3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   238a6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   238a9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   238ac:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
   238af:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
   238b2:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   238b5:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
   238b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   238bb:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
   238be:	e8 09 ff ff ff       	call   237cc <print_e820_entry>
   238c3:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/e820.c:24
        cnt++;
   238c6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/e820.c:25
        if (cnt>0 && ((cnt+2)%cursorGetMaxY())==0)
   238ca:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   238ce:	7e 40                	jle    23910 <printE820Map+0xd1>
/home/yogi/src/os/chrisOS/src/init/e820.c:25 (discriminator 1)
   238d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   238d3:	8d 58 02             	lea    ebx,[eax+0x2]
   238d6:	e8 6c 46 ff ff       	call   17f47 <cursorGetMaxY>
   238db:	89 c1                	mov    ecx,eax
   238dd:	89 d8                	mov    eax,ebx
   238df:	99                   	cdq    
   238e0:	f7 f9                	idiv   ecx
   238e2:	89 d0                	mov    eax,edx
   238e4:	85 c0                	test   eax,eax
   238e6:	75 28                	jne    23910 <printE820Map+0xd1>
/home/yogi/src/os/chrisOS/src/init/e820.c:27
        {
            puts("Paused, press a key to continue");
   238e8:	83 ec 0c             	sub    esp,0xc
   238eb:	68 3c 46 08 00       	push   0x8463c
   238f0:	e8 11 47 ff ff       	call   18006 <puts>
   238f5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/e820.c:28
            waitForKeyboardKey();
   238f8:	e8 55 d9 fe ff       	call   11252 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/init/e820.c:29
            cursorMoveTo(0,cursorGetPosY());
   238fd:	e8 75 46 ff ff       	call   17f77 <cursorGetPosY>
   23902:	83 ec 08             	sub    esp,0x8
   23905:	50                   	push   eax
   23906:	6a 00                	push   0x0
   23908:	e8 ca 45 ff ff       	call   17ed7 <cursorMoveTo>
   2390d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/e820.c:21 (discriminator 2)
void printE820Map()
{
    SMAP_entry* buffer=smap_table;
    int entryCount=kE820RecordCount;
    print_e820_map(smap_table, kE820RecordCount);
        for (int cnt=0;cnt<entryCount;cnt++)
   23910:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/e820.c:21 (discriminator 1)
   23914:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   23917:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   2391a:	0f 8c 61 ff ff ff    	jl     23881 <printE820Map+0x42>
/home/yogi/src/os/chrisOS/src/init/e820.c:32
            puts("Paused, press a key to continue");
            waitForKeyboardKey();
            cursorMoveTo(0,cursorGetPosY());
        }
        }
}
   23920:	90                   	nop
   23921:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   23924:	c9                   	leave  
   23925:	c3                   	ret    

00023926 <print_e820_map>:
print_e820_map():
/home/yogi/src/os/chrisOS/src/init/e820.c:35

void print_e820_map(SMAP_entry* buffer, int entryCount)
{
   23926:	55                   	push   ebp
   23927:	89 e5                	mov    ebp,esp
   23929:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/e820.c:36
    bool printOnlyUsable=entryCount>10?true:false;
   2392c:	83 7d 0c 0a          	cmp    DWORD PTR [ebp+0xc],0xa
   23930:	0f 9f c0             	setg   al
   23933:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/chrisOS/src/init/e820.c:38
    
        for (int cnt=0;cnt<entryCount;cnt++)
   23936:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   2393d:	e9 bc 00 00 00       	jmp    239fe <print_e820_map+0xd8>
/home/yogi/src/os/chrisOS/src/init/e820.c:40
        {
            if ((!printOnlyUsable) || (printOnlyUsable && buffer[cnt].Type==1))
   23942:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   23946:	83 f0 01             	xor    eax,0x1
   23949:	84 c0                	test   al,al
   2394b:	75 21                	jne    2396e <print_e820_map+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:40 (discriminator 1)
   2394d:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
   23951:	74 62                	je     239b5 <print_e820_map+0x8f>
/home/yogi/src/os/chrisOS/src/init/e820.c:40 (discriminator 2)
   23953:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23956:	89 d0                	mov    eax,edx
   23958:	01 c0                	add    eax,eax
   2395a:	01 d0                	add    eax,edx
   2395c:	c1 e0 03             	shl    eax,0x3
   2395f:	89 c2                	mov    edx,eax
   23961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23964:	01 d0                	add    eax,edx
   23966:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   23969:	83 f8 01             	cmp    eax,0x1
   2396c:	75 47                	jne    239b5 <print_e820_map+0x8f>
/home/yogi/src/os/chrisOS/src/init/e820.c:41
                print_e820_entry(buffer[cnt]);
   2396e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23971:	89 d0                	mov    eax,edx
   23973:	01 c0                	add    eax,eax
   23975:	01 d0                	add    eax,edx
   23977:	c1 e0 03             	shl    eax,0x3
   2397a:	89 c2                	mov    edx,eax
   2397c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2397f:	01 d0                	add    eax,edx
   23981:	83 ec 08             	sub    esp,0x8
   23984:	83 ec 18             	sub    esp,0x18
   23987:	89 e2                	mov    edx,esp
   23989:	8b 08                	mov    ecx,DWORD PTR [eax]
   2398b:	89 0a                	mov    DWORD PTR [edx],ecx
   2398d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   23990:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   23993:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   23996:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   23999:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
   2399c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
   2399f:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   239a2:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
   239a5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   239a8:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
   239ab:	e8 1c fe ff ff       	call   237cc <print_e820_entry>
   239b0:	83 c4 20             	add    esp,0x20
   239b3:	eb 45                	jmp    239fa <print_e820_map+0xd4>
/home/yogi/src/os/chrisOS/src/init/e820.c:43
            else
                print_e820_entry(buffer[cnt]);
   239b5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   239b8:	89 d0                	mov    eax,edx
   239ba:	01 c0                	add    eax,eax
   239bc:	01 d0                	add    eax,edx
   239be:	c1 e0 03             	shl    eax,0x3
   239c1:	89 c2                	mov    edx,eax
   239c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   239c6:	01 d0                	add    eax,edx
   239c8:	83 ec 08             	sub    esp,0x8
   239cb:	83 ec 18             	sub    esp,0x18
   239ce:	89 e2                	mov    edx,esp
   239d0:	8b 08                	mov    ecx,DWORD PTR [eax]
   239d2:	89 0a                	mov    DWORD PTR [edx],ecx
   239d4:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   239d7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   239da:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   239dd:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   239e0:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
   239e3:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
   239e6:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   239e9:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
   239ec:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   239ef:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
   239f2:	e8 d5 fd ff ff       	call   237cc <print_e820_entry>
   239f7:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/e820.c:38 (discriminator 2)

void print_e820_map(SMAP_entry* buffer, int entryCount)
{
    bool printOnlyUsable=entryCount>10?true:false;
    
        for (int cnt=0;cnt<entryCount;cnt++)
   239fa:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/e820.c:38 (discriminator 1)
   239fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   23a01:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   23a04:	0f 8c 38 ff ff ff    	jl     23942 <print_e820_map+0x1c>
/home/yogi/src/os/chrisOS/src/init/e820.c:45
            if ((!printOnlyUsable) || (printOnlyUsable && buffer[cnt].Type==1))
                print_e820_entry(buffer[cnt]);
            else
                print_e820_entry(buffer[cnt]);
        }
}
   23a0a:	90                   	nop
   23a0b:	c9                   	leave  
   23a0c:	c3                   	ret    

00023a0d <sum_e820_usable_memory>:
sum_e820_usable_memory():
/home/yogi/src/os/chrisOS/src/init/e820.c:48

uint64_t sum_e820_usable_memory(SMAP_entry* buffer, int entryCount)
{
   23a0d:	55                   	push   ebp
   23a0e:	89 e5                	mov    ebp,esp
   23a10:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/e820.c:49
    qword lRetVal = 0;
   23a13:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/init/e820.c:51
    
    for (int cnt=0;cnt<entryCount;cnt++)
   23a1a:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   23a21:	eb 38                	jmp    23a5b <sum_e820_usable_memory+0x4e>
/home/yogi/src/os/chrisOS/src/init/e820.c:53
    {
        if (buffer[cnt].Type==1)    
   23a23:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   23a26:	89 d0                	mov    eax,edx
   23a28:	01 c0                	add    eax,eax
   23a2a:	01 d0                	add    eax,edx
   23a2c:	c1 e0 03             	shl    eax,0x3
   23a2f:	89 c2                	mov    edx,eax
   23a31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23a34:	01 d0                	add    eax,edx
   23a36:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   23a39:	83 f8 01             	cmp    eax,0x1
   23a3c:	75 19                	jne    23a57 <sum_e820_usable_memory+0x4a>
/home/yogi/src/os/chrisOS/src/init/e820.c:54
            lRetVal += buffer[cnt].LengthL;
   23a3e:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   23a41:	89 d0                	mov    eax,edx
   23a43:	01 c0                	add    eax,eax
   23a45:	01 d0                	add    eax,edx
   23a47:	c1 e0 03             	shl    eax,0x3
   23a4a:	89 c2                	mov    edx,eax
   23a4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23a4f:	01 d0                	add    eax,edx
   23a51:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   23a54:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/e820.c:51 (discriminator 2)

uint64_t sum_e820_usable_memory(SMAP_entry* buffer, int entryCount)
{
    qword lRetVal = 0;
    
    for (int cnt=0;cnt<entryCount;cnt++)
   23a57:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/init/e820.c:51 (discriminator 1)
   23a5b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   23a5e:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   23a61:	7c c0                	jl     23a23 <sum_e820_usable_memory+0x16>
/home/yogi/src/os/chrisOS/src/init/e820.c:56
    {
        if (buffer[cnt].Type==1)    
            lRetVal += buffer[cnt].LengthL;
    }
    return lRetVal;
   23a63:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   23a66:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/init/e820.c:57
   23a6b:	c9                   	leave  
   23a6c:	c3                   	ret    
   23a6d:	66 90                	xchg   ax,ax
   23a6f:	90                   	nop

00023a70 <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   23a70:	55                   	push   ebp
   23a71:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   23a73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23a76:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   23a7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23a80:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   23a83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23a86:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:51
}
   23a88:	90                   	nop
   23a89:	5d                   	pop    ebp
   23a8a:	c3                   	ret    

00023a8b <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   23a8b:	55                   	push   ebp
   23a8c:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   23a8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23a91:	8b 00                	mov    eax,DWORD PTR [eax]
   23a93:	85 c0                	test   eax,eax
   23a95:	75 0d                	jne    23aa4 <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:61
        list->head = node->next;
   23a97:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23a9a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   23a9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23aa0:	89 10                	mov    DWORD PTR [eax],edx
   23aa2:	eb 0e                	jmp    23ab2 <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:63
    else
        node->previous->next = node->next;
   23aa4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23aa7:	8b 00                	mov    eax,DWORD PTR [eax]
   23aa9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23aac:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   23aaf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:65

    if(!node->next)
   23ab2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23ab5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23ab8:	85 c0                	test   eax,eax
   23aba:	75 0d                	jne    23ac9 <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:66
        list->tail = node->previous;
   23abc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23abf:	8b 10                	mov    edx,DWORD PTR [eax]
   23ac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23ac4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   23ac7:	eb 0d                	jmp    23ad6 <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   23ac9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23acc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23acf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23ad2:	8b 12                	mov    edx,DWORD PTR [edx]
   23ad4:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:69
}
   23ad6:	90                   	nop
   23ad7:	5d                   	pop    ebp
   23ad8:	c3                   	ret    

00023ad9 <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   23ad9:	55                   	push   ebp
   23ada:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   23adc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   23adf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23ae2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:80
    new_node->next = node->next;
   23ae4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23ae7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   23aea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   23aed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:81
    if (!node->next)
   23af0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23af3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23af6:	85 c0                	test   eax,eax
   23af8:	75 0b                	jne    23b05 <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:82
        list->tail = new_node;
   23afa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23afd:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23b00:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   23b03:	eb 0b                	jmp    23b10 <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:84
    else
        node->next->previous = new_node;
   23b05:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23b0b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23b0e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:85
    node->next = new_node;
   23b10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b13:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23b16:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:86
}
   23b19:	90                   	nop
   23b1a:	5d                   	pop    ebp
   23b1b:	c3                   	ret    

00023b1c <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   23b1c:	55                   	push   ebp
   23b1d:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   23b1f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b22:	8b 10                	mov    edx,DWORD PTR [eax]
   23b24:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   23b27:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:97
    new_node->next = node;
   23b29:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   23b2c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23b2f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:98
    if (!node->previous)
   23b32:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b35:	8b 00                	mov    eax,DWORD PTR [eax]
   23b37:	85 c0                	test   eax,eax
   23b39:	75 0a                	jne    23b45 <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:99
        list->head = new_node;
   23b3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23b3e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23b41:	89 10                	mov    DWORD PTR [eax],edx
   23b43:	eb 0b                	jmp    23b50 <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:101
    else
        node->previous->next = new_node;
   23b45:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b48:	8b 00                	mov    eax,DWORD PTR [eax]
   23b4a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23b4d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:102
    node->previous = new_node;
   23b50:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b53:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23b56:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:103
}
   23b58:	90                   	nop
   23b59:	5d                   	pop    ebp
   23b5a:	c3                   	ret    

00023b5b <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   23b5b:	55                   	push   ebp
   23b5c:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   23b5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23b61:	8b 00                	mov    eax,DWORD PTR [eax]
   23b63:	85 c0                	test   eax,eax
   23b65:	75 26                	jne    23b8d <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:114
    {
        list->head = node;
   23b67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23b6a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23b6d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:115
        list->tail = node;
   23b6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23b72:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23b75:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:116
        node->previous = 0;
   23b78:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b7b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:117
        node->next = 0;
   23b81:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b84:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   23b8b:	eb 14                	jmp    23ba1 <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   23b8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23b90:	8b 00                	mov    eax,DWORD PTR [eax]
   23b92:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   23b95:	50                   	push   eax
   23b96:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   23b99:	e8 7e ff ff ff       	call   23b1c <fat_list_insert_before>
   23b9e:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:121
}
   23ba1:	90                   	nop
   23ba2:	c9                   	leave  
   23ba3:	c3                   	ret    

00023ba4 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   23ba4:	55                   	push   ebp
   23ba5:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   23ba7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23baa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23bad:	85 c0                	test   eax,eax
   23baf:	75 10                	jne    23bc1 <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:131
        fat_list_insert_first(list, node);
   23bb1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   23bb4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   23bb7:	e8 9f ff ff ff       	call   23b5b <fat_list_insert_first>
   23bbc:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   23bbf:	eb 15                	jmp    23bd6 <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   23bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23bc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23bc7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   23bca:	50                   	push   eax
   23bcb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   23bce:	e8 06 ff ff ff       	call   23ad9 <fat_list_insert_after>
   23bd3:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:134
}
   23bd6:	90                   	nop
   23bd7:	c9                   	leave  
   23bd8:	c3                   	ret    

00023bd9 <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   23bd9:	55                   	push   ebp
   23bda:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   23bdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23bdf:	8b 00                	mov    eax,DWORD PTR [eax]
   23be1:	85 c0                	test   eax,eax
   23be3:	0f 94 c0             	sete   al
   23be6:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:143
}
   23be9:	5d                   	pop    ebp
   23bea:	c3                   	ret    

00023beb <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   23beb:	55                   	push   ebp
   23bec:	89 e5                	mov    ebp,esp
   23bee:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   23bf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23bf4:	8b 00                	mov    eax,DWORD PTR [eax]
   23bf6:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:154
    if (node)
   23bf9:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   23bfd:	74 0e                	je     23c0d <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:155
        fat_list_remove(list, node);
   23bff:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   23c02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   23c05:	e8 81 fe ff ff       	call   23a8b <fat_list_remove>
   23c0a:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:157

    return node;
   23c0d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:158
}
   23c10:	c9                   	leave  
   23c11:	c3                   	ret    

00023c12 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   23c12:	55                   	push   ebp
   23c13:	89 e5                	mov    ebp,esp
   23c15:	83 ec 08             	sub    esp,0x8
   23c18:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   23c1b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23c1e:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   23c22:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   23c25:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   23c29:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   23c2d:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   23c2e:	90                   	nop
   23c2f:	c9                   	leave  
   23c30:	c3                   	ret    

00023c31 <gdt_init>:
gdt_init():
/home/yogi/src/os/chrisOS/src/init/init.c:82
 3 (0x18) - data @ 0x0          <-- Non-kernel data (DS/ES/FS/GS/SS): Will always be 0x0
 4 (0x20) - code @ 0xC0000000   <-- will belong to the kernel proper
 5 (0x28) - code @ 0x0          <-- Non-kernel code (CS): Will always be 0x0
 */
void HIGH_CODE_SECTION gdt_init()
{
   23c31:	55                   	push   ebp
   23c32:	89 e5                	mov    ebp,esp
   23c34:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/init.c:83
    gdtEntry(1, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,
   23c37:	83 ec 08             	sub    esp,0x8
   23c3a:	6a 01                	push   0x1
   23c3c:	6a c0                	push   0xffffffc0
   23c3e:	6a 88                	push   0xffffff88
   23c40:	68 ff ff 0f 00       	push   0xfffff
   23c45:	6a 00                	push   0x0
   23c47:	6a 01                	push   0x1
   23c49:	e8 56 4c ff ff       	call   188a4 <gdtEntry>
   23c4e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:85
              GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(2, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE,
   23c51:	83 ec 08             	sub    esp,0x8
   23c54:	6a 01                	push   0x1
   23c56:	6a c0                	push   0xffffffc0
   23c58:	6a 82                	push   0xffffff82
   23c5a:	68 ff ff 0f 00       	push   0xfffff
   23c5f:	6a 00                	push   0x0
   23c61:	6a 02                	push   0x2
   23c63:	e8 3c 4c ff ff       	call   188a4 <gdtEntry>
   23c68:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:87
              GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(3, 0, 0xFFFFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE,      //this will stay at base 0x0, never 0xc0000000
   23c6b:	83 ec 08             	sub    esp,0x8
   23c6e:	6a 01                	push   0x1
   23c70:	6a c0                	push   0xffffffc0
   23c72:	6a 82                	push   0xffffff82
   23c74:	6a ff                	push   0xffffffff
   23c76:	6a 00                	push   0x0
   23c78:	6a 03                	push   0x3
   23c7a:	e8 25 4c ff ff       	call   188a4 <gdtEntry>
   23c7f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:89
          GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(4, KERNEL_PAGED_BASE_ADDRESS , 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,
   23c82:	83 ec 08             	sub    esp,0x8
   23c85:	6a 01                	push   0x1
   23c87:	6a c0                	push   0xffffffc0
   23c89:	6a 88                	push   0xffffff88
   23c8b:	68 ff ff 0f 00       	push   0xfffff
   23c90:	68 00 00 00 c0       	push   0xc0000000
   23c95:	6a 04                	push   0x4
   23c97:	e8 08 4c ff ff       	call   188a4 <gdtEntry>
   23c9c:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:91
              GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(5, 0x0 , 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,       //this will always stay at base 0x0, never 0xC0000000
   23c9f:	83 ec 08             	sub    esp,0x8
   23ca2:	6a 01                	push   0x1
   23ca4:	6a c0                	push   0xffffffc0
   23ca6:	6a 88                	push   0xffffff88
   23ca8:	68 ff ff 0f 00       	push   0xfffff
   23cad:	6a 00                	push   0x0
   23caf:	6a 05                	push   0x5
   23cb1:	e8 ee 4b ff ff       	call   188a4 <gdtEntry>
   23cb6:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:94
              GDT_GRANULAR | GDT_32BIT,true);
    
    gdtEntryRM(1, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,
   23cb9:	83 ec 0c             	sub    esp,0xc
   23cbc:	68 80 00 00 00       	push   0x80
   23cc1:	68 88 00 00 00       	push   0x88
   23cc6:	68 ff ff 0f 00       	push   0xfffff
   23ccb:	6a 00                	push   0x0
   23ccd:	6a 01                	push   0x1
   23ccf:	e8 a3 4c ff ff       	call   18977 <gdtEntryRM>
   23cd4:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:96
              GDT_GRANULAR | GDT_16BIT);
    gdtEntryRM(2, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE,
   23cd7:	83 ec 0c             	sub    esp,0xc
   23cda:	68 80 00 00 00       	push   0x80
   23cdf:	68 82 00 00 00       	push   0x82
   23ce4:	68 ff ff 0f 00       	push   0xfffff
   23ce9:	6a 00                	push   0x0
   23ceb:	6a 02                	push   0x2
   23ced:	e8 85 4c ff ff       	call   18977 <gdtEntryRM>
   23cf2:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:98
              GDT_GRANULAR | GDT_16BIT);
    gdtEntryRM(3, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_WRITABLE,
   23cf5:	83 ec 0c             	sub    esp,0xc
   23cf8:	68 c0 00 00 00       	push   0xc0
   23cfd:	68 8a 00 00 00       	push   0x8a
   23d02:	68 ff ff 0f 00       	push   0xfffff
   23d07:	6a 00                	push   0x0
   23d09:	6a 03                	push   0x3
   23d0b:	e8 67 4c ff ff       	call   18977 <gdtEntryRM>
   23d10:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:101
              GDT_GRANULAR | GDT_32BIT);

    kernelGDT.limit = (sizeof(struct GDT) * GDT_ENTRIES) - 1;
   23d13:	66 c7 05 4c 04 12 00 	mov    WORD PTR ds:0x12044c,0x31f
   23d1a:	1f 03 
/home/yogi/src/os/chrisOS/src/init/init.c:102
    kernelGDT.base = (unsigned int)INIT_GDT_TABLE_ADDRESS;
   23d1c:	c7 05 4e 04 12 00 00 	mov    DWORD PTR ds:0x12044e,0x154000
   23d23:	40 15 00 
/home/yogi/src/os/chrisOS/src/init/init.c:103
    rmGdtp.limit = sizeof(struct GDT) * GDT_ENTRIES - 1;
   23d26:	66 c7 05 3c 04 12 00 	mov    WORD PTR ds:0x12043c,0x31f
   23d2d:	1f 03 
/home/yogi/src/os/chrisOS/src/init/init.c:104
    rmGdtp.base = (unsigned int)rmGdt;
   23d2f:	a1 44 04 12 00       	mov    eax,ds:0x120444
   23d34:	a3 3e 04 12 00       	mov    ds:0x12043e,eax
/home/yogi/src/os/chrisOS/src/init/init.c:105
    printk("gdtp=0x%08X, base=0x%08X, limit=%u\n",&kernelGDT,kernelGDT.base,kernelGDT.limit);
   23d39:	0f b7 05 4c 04 12 00 	movzx  eax,WORD PTR ds:0x12044c
   23d40:	0f b7 d0             	movzx  edx,ax
   23d43:	a1 4e 04 12 00       	mov    eax,ds:0x12044e
   23d48:	52                   	push   edx
   23d49:	50                   	push   eax
   23d4a:	68 4c 04 12 00       	push   0x12044c
   23d4f:	68 40 48 08 00       	push   0x84840
   23d54:	e8 5e 33 00 00       	call   270b7 <printk>
   23d59:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:106
    set_gdt(&kernelGDT);
   23d5c:	83 ec 0c             	sub    esp,0xc
   23d5f:	68 4c 04 12 00       	push   0x12044c
   23d64:	e8 d4 d3 fd ff       	call   113d <set_gdt>
   23d69:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:107
    printk("gdtp=0x%08X, base=0x%08X, limit=%u\n",&kernelGDT,kernelGDT.base,kernelGDT.limit);
   23d6c:	0f b7 05 4c 04 12 00 	movzx  eax,WORD PTR ds:0x12044c
   23d73:	0f b7 d0             	movzx  edx,ax
   23d76:	a1 4e 04 12 00       	mov    eax,ds:0x12044e
   23d7b:	52                   	push   edx
   23d7c:	50                   	push   eax
   23d7d:	68 4c 04 12 00       	push   0x12044c
   23d82:	68 40 48 08 00       	push   0x84840
   23d87:	e8 2b 33 00 00       	call   270b7 <printk>
   23d8c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:108
}
   23d8f:	90                   	nop
   23d90:	c9                   	leave  
   23d91:	c3                   	ret    

00023d92 <quietHardware>:
quietHardware():
/home/yogi/src/os/chrisOS/src/init/init.c:111

void HIGH_CODE_SECTION quietHardware()
{
   23d92:	55                   	push   ebp
   23d93:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/init.c:112
    outb(0xa1, 0x7f);
   23d95:	6a 7f                	push   0x7f
   23d97:	68 a1 00 00 00       	push   0xa1
   23d9c:	e8 71 fe ff ff       	call   23c12 <outb>
   23da1:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/init.c:113
    outb(0x21, 0xff);
   23da4:	68 ff 00 00 00       	push   0xff
   23da9:	6a 21                	push   0x21
   23dab:	e8 62 fe ff ff       	call   23c12 <outb>
   23db0:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/init.c:114
}
   23db3:	90                   	nop
   23db4:	c9                   	leave  
   23db5:	c3                   	ret    

00023db6 <doHDSetup>:
doHDSetup():
/home/yogi/src/os/chrisOS/src/init/init.c:117

void doHDSetup()
{
   23db6:	55                   	push   ebp
   23db7:	89 e5                	mov    ebp,esp
   23db9:	57                   	push   edi
   23dba:	56                   	push   esi
   23dbb:	53                   	push   ebx
   23dbc:	81 ec 2c 08 00 00    	sub    esp,0x82c
/home/yogi/src/os/chrisOS/src/init/init.c:118
    printk("ATA: Scanning for hard drives on primary bus ...\n");
   23dc2:	83 ec 0c             	sub    esp,0xc
   23dc5:	68 64 48 08 00       	push   0x84864
   23dca:	e8 e8 32 00 00       	call   270b7 <printk>
   23dcf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:119
    ataScanForHarddrives();
   23dd2:	e8 a8 e8 ff ff       	call   2267f <ataScanForHarddrives>
/home/yogi/src/os/chrisOS/src/init/init.c:121
    char* p1[512];
    memset(p1,0,512);
   23dd7:	83 ec 04             	sub    esp,0x4
   23dda:	68 00 02 00 00       	push   0x200
   23ddf:	6a 00                	push   0x0
   23de1:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   23de7:	50                   	push   eax
   23de8:	e8 40 12 00 00       	call   2502d <memset>
   23ded:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:123
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
   23df0:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23df5:	05 00 02 00 00       	add    eax,0x200
   23dfa:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:124
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   23e00:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23e05:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   23e0c:	3c 01                	cmp    al,0x1
   23e0e:	75 14                	jne    23e24 <doHDSetup+0x6e>
/home/yogi/src/os/chrisOS/src/init/init.c:124 (discriminator 1)
   23e10:	83 ec 0c             	sub    esp,0xc
   23e13:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   23e19:	50                   	push   eax
   23e1a:	e8 ad 37 00 00       	call   275cc <strtrim>
   23e1f:	83 c4 10             	add    esp,0x10
   23e22:	eb 05                	jmp    23e29 <doHDSetup+0x73>
/home/yogi/src/os/chrisOS/src/init/init.c:124 (discriminator 2)
   23e24:	b8 96 48 08 00       	mov    eax,0x84896
/home/yogi/src/os/chrisOS/src/init/init.c:124 (discriminator 4)
   23e29:	83 ec 08             	sub    esp,0x8
   23e2c:	50                   	push   eax
   23e2d:	68 9c 48 08 00       	push   0x8489c
   23e32:	e8 80 32 00 00       	call   270b7 <printk>
   23e37:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:125 (discriminator 4)
    if (kATADeviceInfo[0].ATADeviceAvailable)
   23e3a:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23e3f:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   23e46:	84 c0                	test   al,al
   23e48:	0f 84 92 00 00 00    	je     23ee0 <doHDSetup+0x12a>
/home/yogi/src/os/chrisOS/src/init/init.c:131
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
                kATADeviceInfo[0].lba48Supported?",LBA48":"",
                kATADeviceInfo[0].dmaSupported?",DMA":"");
   23e4e:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23e53:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:127
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   23e5a:	84 c0                	test   al,al
   23e5c:	74 07                	je     23e65 <doHDSetup+0xaf>
/home/yogi/src/os/chrisOS/src/init/init.c:127 (discriminator 1)
   23e5e:	bf ad 48 08 00       	mov    edi,0x848ad
   23e63:	eb 05                	jmp    23e6a <doHDSetup+0xb4>
/home/yogi/src/os/chrisOS/src/init/init.c:127 (discriminator 2)
   23e65:	bf b2 48 08 00       	mov    edi,0x848b2
/home/yogi/src/os/chrisOS/src/init/init.c:130 (discriminator 4)
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
                kATADeviceInfo[0].lba48Supported?",LBA48":"",
   23e6a:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23e6f:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:127 (discriminator 4)
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   23e76:	84 c0                	test   al,al
   23e78:	74 07                	je     23e81 <doHDSetup+0xcb>
/home/yogi/src/os/chrisOS/src/init/init.c:127 (discriminator 5)
   23e7a:	be b3 48 08 00       	mov    esi,0x848b3
   23e7f:	eb 05                	jmp    23e86 <doHDSetup+0xd0>
/home/yogi/src/os/chrisOS/src/init/init.c:127 (discriminator 6)
   23e81:	be b2 48 08 00       	mov    esi,0x848b2
/home/yogi/src/os/chrisOS/src/init/init.c:129 (discriminator 8)
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
   23e86:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23e8b:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:127 (discriminator 8)
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   23e92:	84 c0                	test   al,al
   23e94:	74 07                	je     23e9d <doHDSetup+0xe7>
/home/yogi/src/os/chrisOS/src/init/init.c:127 (discriminator 9)
   23e96:	bb ba 48 08 00       	mov    ebx,0x848ba
   23e9b:	eb 05                	jmp    23ea2 <doHDSetup+0xec>
/home/yogi/src/os/chrisOS/src/init/init.c:127 (discriminator 10)
   23e9d:	bb b2 48 08 00       	mov    ebx,0x848b2
/home/yogi/src/os/chrisOS/src/init/init.c:128 (discriminator 12)
                kATADeviceInfo[0].sectorSize,
   23ea2:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
/home/yogi/src/os/chrisOS/src/init/init.c:127 (discriminator 12)
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   23ea7:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   23ead:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   23eb3:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   23eb9:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   23ebf:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   23ec5:	0f af d1             	imul   edx,ecx
   23ec8:	c1 ea 14             	shr    edx,0x14
   23ecb:	83 ec 08             	sub    esp,0x8
   23ece:	57                   	push   edi
   23ecf:	56                   	push   esi
   23ed0:	53                   	push   ebx
   23ed1:	50                   	push   eax
   23ed2:	52                   	push   edx
   23ed3:	68 bf 48 08 00       	push   0x848bf
   23ed8:	e8 da 31 00 00       	call   270b7 <printk>
   23edd:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:133
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
                kATADeviceInfo[0].lba48Supported?",LBA48":"",
                kATADeviceInfo[0].dmaSupported?",DMA":"");
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
   23ee0:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23ee5:	05 73 02 00 00       	add    eax,0x273
   23eea:	05 00 02 00 00       	add    eax,0x200
   23eef:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:134
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   23ef5:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23efa:	05 73 02 00 00       	add    eax,0x273
   23eff:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   23f06:	3c 01                	cmp    al,0x1
   23f08:	75 14                	jne    23f1e <doHDSetup+0x168>
/home/yogi/src/os/chrisOS/src/init/init.c:134 (discriminator 1)
   23f0a:	83 ec 0c             	sub    esp,0xc
   23f0d:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   23f13:	50                   	push   eax
   23f14:	e8 b3 36 00 00       	call   275cc <strtrim>
   23f19:	83 c4 10             	add    esp,0x10
   23f1c:	eb 05                	jmp    23f23 <doHDSetup+0x16d>
/home/yogi/src/os/chrisOS/src/init/init.c:134 (discriminator 2)
   23f1e:	b8 96 48 08 00       	mov    eax,0x84896
/home/yogi/src/os/chrisOS/src/init/init.c:134 (discriminator 4)
   23f23:	83 ec 08             	sub    esp,0x8
   23f26:	50                   	push   eax
   23f27:	68 d4 48 08 00       	push   0x848d4
   23f2c:	e8 86 31 00 00       	call   270b7 <printk>
   23f31:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:135 (discriminator 4)
    if (kATADeviceInfo[1].ATADeviceAvailable)
   23f34:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23f39:	05 73 02 00 00       	add    eax,0x273
   23f3e:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   23f45:	84 c0                	test   al,al
   23f47:	0f 84 b2 00 00 00    	je     23fff <doHDSetup+0x249>
/home/yogi/src/os/chrisOS/src/init/init.c:141
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
                kATADeviceInfo[1].lba48Supported?",LBA48":"",
                kATADeviceInfo[1].dmaSupported?",DMA":"");
   23f4d:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23f52:	05 73 02 00 00       	add    eax,0x273
   23f57:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:137
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   23f5e:	84 c0                	test   al,al
   23f60:	74 07                	je     23f69 <doHDSetup+0x1b3>
/home/yogi/src/os/chrisOS/src/init/init.c:137 (discriminator 1)
   23f62:	bf ad 48 08 00       	mov    edi,0x848ad
   23f67:	eb 05                	jmp    23f6e <doHDSetup+0x1b8>
/home/yogi/src/os/chrisOS/src/init/init.c:137 (discriminator 2)
   23f69:	bf b2 48 08 00       	mov    edi,0x848b2
/home/yogi/src/os/chrisOS/src/init/init.c:140 (discriminator 4)
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
                kATADeviceInfo[1].lba48Supported?",LBA48":"",
   23f6e:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23f73:	05 73 02 00 00       	add    eax,0x273
   23f78:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:137 (discriminator 4)
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   23f7f:	84 c0                	test   al,al
   23f81:	74 07                	je     23f8a <doHDSetup+0x1d4>
/home/yogi/src/os/chrisOS/src/init/init.c:137 (discriminator 5)
   23f83:	be b3 48 08 00       	mov    esi,0x848b3
   23f88:	eb 05                	jmp    23f8f <doHDSetup+0x1d9>
/home/yogi/src/os/chrisOS/src/init/init.c:137 (discriminator 6)
   23f8a:	be b2 48 08 00       	mov    esi,0x848b2
/home/yogi/src/os/chrisOS/src/init/init.c:139 (discriminator 8)
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
   23f8f:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23f94:	05 73 02 00 00       	add    eax,0x273
   23f99:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:137 (discriminator 8)
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   23fa0:	84 c0                	test   al,al
   23fa2:	74 07                	je     23fab <doHDSetup+0x1f5>
/home/yogi/src/os/chrisOS/src/init/init.c:137 (discriminator 9)
   23fa4:	bb ba 48 08 00       	mov    ebx,0x848ba
   23fa9:	eb 05                	jmp    23fb0 <doHDSetup+0x1fa>
/home/yogi/src/os/chrisOS/src/init/init.c:137 (discriminator 10)
   23fab:	bb b2 48 08 00       	mov    ebx,0x848b2
/home/yogi/src/os/chrisOS/src/init/init.c:138 (discriminator 12)
                kATADeviceInfo[1].sectorSize,
   23fb0:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23fb5:	05 73 02 00 00       	add    eax,0x273
/home/yogi/src/os/chrisOS/src/init/init.c:137 (discriminator 12)
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   23fba:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   23fc0:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   23fc6:	81 c2 73 02 00 00    	add    edx,0x273
   23fcc:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   23fd2:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   23fd8:	81 c2 73 02 00 00    	add    edx,0x273
   23fde:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   23fe4:	0f af d1             	imul   edx,ecx
   23fe7:	c1 ea 14             	shr    edx,0x14
   23fea:	83 ec 08             	sub    esp,0x8
   23fed:	57                   	push   edi
   23fee:	56                   	push   esi
   23fef:	53                   	push   ebx
   23ff0:	50                   	push   eax
   23ff1:	52                   	push   edx
   23ff2:	68 e5 48 08 00       	push   0x848e5
   23ff7:	e8 bb 30 00 00       	call   270b7 <printk>
   23ffc:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:143
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
                kATADeviceInfo[1].lba48Supported?",LBA48":"",
                kATADeviceInfo[1].dmaSupported?",DMA":"");
    }
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
   23fff:	83 ec 0c             	sub    esp,0xc
   24002:	68 fc 48 08 00       	push   0x848fc
   24007:	e8 ab 30 00 00       	call   270b7 <printk>
   2400c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:144
    *p1=kATADeviceInfo[2].ATADeviceModel;
   2400f:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   24014:	05 e6 04 00 00       	add    eax,0x4e6
   24019:	05 00 02 00 00       	add    eax,0x200
   2401e:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:145
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   24024:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   24029:	05 e6 04 00 00       	add    eax,0x4e6
   2402e:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   24035:	3c 01                	cmp    al,0x1
   24037:	75 14                	jne    2404d <doHDSetup+0x297>
/home/yogi/src/os/chrisOS/src/init/init.c:145 (discriminator 1)
   24039:	83 ec 0c             	sub    esp,0xc
   2403c:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   24042:	50                   	push   eax
   24043:	e8 84 35 00 00       	call   275cc <strtrim>
   24048:	83 c4 10             	add    esp,0x10
   2404b:	eb 05                	jmp    24052 <doHDSetup+0x29c>
/home/yogi/src/os/chrisOS/src/init/init.c:145 (discriminator 2)
   2404d:	b8 96 48 08 00       	mov    eax,0x84896
/home/yogi/src/os/chrisOS/src/init/init.c:145 (discriminator 4)
   24052:	83 ec 08             	sub    esp,0x8
   24055:	50                   	push   eax
   24056:	68 9c 48 08 00       	push   0x8489c
   2405b:	e8 57 30 00 00       	call   270b7 <printk>
   24060:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:146 (discriminator 4)
    if (kATADeviceInfo[2].ATADeviceAvailable)
   24063:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   24068:	05 e6 04 00 00       	add    eax,0x4e6
   2406d:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   24074:	84 c0                	test   al,al
   24076:	0f 84 b2 00 00 00    	je     2412e <doHDSetup+0x378>
/home/yogi/src/os/chrisOS/src/init/init.c:152
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
                kATADeviceInfo[2].lba48Supported?",LBA48":"",
                kATADeviceInfo[2].dmaSupported?",DMA":"");
   2407c:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   24081:	05 e6 04 00 00       	add    eax,0x4e6
   24086:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:148
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   2408d:	84 c0                	test   al,al
   2408f:	74 07                	je     24098 <doHDSetup+0x2e2>
/home/yogi/src/os/chrisOS/src/init/init.c:148 (discriminator 1)
   24091:	bf ad 48 08 00       	mov    edi,0x848ad
   24096:	eb 05                	jmp    2409d <doHDSetup+0x2e7>
/home/yogi/src/os/chrisOS/src/init/init.c:148 (discriminator 2)
   24098:	bf b2 48 08 00       	mov    edi,0x848b2
/home/yogi/src/os/chrisOS/src/init/init.c:151 (discriminator 4)
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
                kATADeviceInfo[2].lba48Supported?",LBA48":"",
   2409d:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   240a2:	05 e6 04 00 00       	add    eax,0x4e6
   240a7:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:148 (discriminator 4)
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   240ae:	84 c0                	test   al,al
   240b0:	74 07                	je     240b9 <doHDSetup+0x303>
/home/yogi/src/os/chrisOS/src/init/init.c:148 (discriminator 5)
   240b2:	be b3 48 08 00       	mov    esi,0x848b3
   240b7:	eb 05                	jmp    240be <doHDSetup+0x308>
/home/yogi/src/os/chrisOS/src/init/init.c:148 (discriminator 6)
   240b9:	be b2 48 08 00       	mov    esi,0x848b2
/home/yogi/src/os/chrisOS/src/init/init.c:150 (discriminator 8)
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
   240be:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   240c3:	05 e6 04 00 00       	add    eax,0x4e6
   240c8:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:148 (discriminator 8)
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   240cf:	84 c0                	test   al,al
   240d1:	74 07                	je     240da <doHDSetup+0x324>
/home/yogi/src/os/chrisOS/src/init/init.c:148 (discriminator 9)
   240d3:	bb ba 48 08 00       	mov    ebx,0x848ba
   240d8:	eb 05                	jmp    240df <doHDSetup+0x329>
/home/yogi/src/os/chrisOS/src/init/init.c:148 (discriminator 10)
   240da:	bb b2 48 08 00       	mov    ebx,0x848b2
/home/yogi/src/os/chrisOS/src/init/init.c:149 (discriminator 12)
                kATADeviceInfo[2].sectorSize,
   240df:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   240e4:	05 e6 04 00 00       	add    eax,0x4e6
/home/yogi/src/os/chrisOS/src/init/init.c:148 (discriminator 12)
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   240e9:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   240ef:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   240f5:	81 c2 e6 04 00 00    	add    edx,0x4e6
   240fb:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   24101:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   24107:	81 c2 e6 04 00 00    	add    edx,0x4e6
   2410d:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   24113:	0f af d1             	imul   edx,ecx
   24116:	c1 ea 14             	shr    edx,0x14
   24119:	83 ec 08             	sub    esp,0x8
   2411c:	57                   	push   edi
   2411d:	56                   	push   esi
   2411e:	53                   	push   ebx
   2411f:	50                   	push   eax
   24120:	52                   	push   edx
   24121:	68 bf 48 08 00       	push   0x848bf
   24126:	e8 8c 2f 00 00       	call   270b7 <printk>
   2412b:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:154
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
                kATADeviceInfo[2].lba48Supported?",LBA48":"",
                kATADeviceInfo[2].dmaSupported?",DMA":"");
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
   2412e:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   24133:	05 59 07 00 00       	add    eax,0x759
   24138:	05 00 02 00 00       	add    eax,0x200
   2413d:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:155
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   24143:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   24148:	05 59 07 00 00       	add    eax,0x759
   2414d:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   24154:	3c 01                	cmp    al,0x1
   24156:	75 14                	jne    2416c <doHDSetup+0x3b6>
/home/yogi/src/os/chrisOS/src/init/init.c:155 (discriminator 1)
   24158:	83 ec 0c             	sub    esp,0xc
   2415b:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   24161:	50                   	push   eax
   24162:	e8 65 34 00 00       	call   275cc <strtrim>
   24167:	83 c4 10             	add    esp,0x10
   2416a:	eb 05                	jmp    24171 <doHDSetup+0x3bb>
/home/yogi/src/os/chrisOS/src/init/init.c:155 (discriminator 2)
   2416c:	b8 96 48 08 00       	mov    eax,0x84896
/home/yogi/src/os/chrisOS/src/init/init.c:155 (discriminator 4)
   24171:	83 ec 08             	sub    esp,0x8
   24174:	50                   	push   eax
   24175:	68 d4 48 08 00       	push   0x848d4
   2417a:	e8 38 2f 00 00       	call   270b7 <printk>
   2417f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:156 (discriminator 4)
    if (kATADeviceInfo[3].ATADeviceAvailable)
   24182:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   24187:	05 59 07 00 00       	add    eax,0x759
   2418c:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   24193:	84 c0                	test   al,al
   24195:	0f 84 b2 00 00 00    	je     2424d <doHDSetup+0x497>
/home/yogi/src/os/chrisOS/src/init/init.c:162
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
                kATADeviceInfo[3].lba48Supported?",LBA48":"",
                kATADeviceInfo[3].dmaSupported?",DMA":"");
   2419b:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   241a0:	05 59 07 00 00       	add    eax,0x759
   241a5:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:158
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   241ac:	84 c0                	test   al,al
   241ae:	74 07                	je     241b7 <doHDSetup+0x401>
/home/yogi/src/os/chrisOS/src/init/init.c:158 (discriminator 1)
   241b0:	bf ad 48 08 00       	mov    edi,0x848ad
   241b5:	eb 05                	jmp    241bc <doHDSetup+0x406>
/home/yogi/src/os/chrisOS/src/init/init.c:158 (discriminator 2)
   241b7:	bf b2 48 08 00       	mov    edi,0x848b2
/home/yogi/src/os/chrisOS/src/init/init.c:161 (discriminator 4)
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
                kATADeviceInfo[3].lba48Supported?",LBA48":"",
   241bc:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   241c1:	05 59 07 00 00       	add    eax,0x759
   241c6:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:158 (discriminator 4)
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   241cd:	84 c0                	test   al,al
   241cf:	74 07                	je     241d8 <doHDSetup+0x422>
/home/yogi/src/os/chrisOS/src/init/init.c:158 (discriminator 5)
   241d1:	be b3 48 08 00       	mov    esi,0x848b3
   241d6:	eb 05                	jmp    241dd <doHDSetup+0x427>
/home/yogi/src/os/chrisOS/src/init/init.c:158 (discriminator 6)
   241d8:	be b2 48 08 00       	mov    esi,0x848b2
/home/yogi/src/os/chrisOS/src/init/init.c:160 (discriminator 8)
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
   241dd:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   241e2:	05 59 07 00 00       	add    eax,0x759
   241e7:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:158 (discriminator 8)
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   241ee:	84 c0                	test   al,al
   241f0:	74 07                	je     241f9 <doHDSetup+0x443>
/home/yogi/src/os/chrisOS/src/init/init.c:158 (discriminator 9)
   241f2:	bb ba 48 08 00       	mov    ebx,0x848ba
   241f7:	eb 05                	jmp    241fe <doHDSetup+0x448>
/home/yogi/src/os/chrisOS/src/init/init.c:158 (discriminator 10)
   241f9:	bb b2 48 08 00       	mov    ebx,0x848b2
/home/yogi/src/os/chrisOS/src/init/init.c:159 (discriminator 12)
                kATADeviceInfo[3].sectorSize,
   241fe:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   24203:	05 59 07 00 00       	add    eax,0x759
/home/yogi/src/os/chrisOS/src/init/init.c:158 (discriminator 12)
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   24208:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   2420e:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   24214:	81 c2 59 07 00 00    	add    edx,0x759
   2421a:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   24220:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   24226:	81 c2 59 07 00 00    	add    edx,0x759
   2422c:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   24232:	0f af d1             	imul   edx,ecx
   24235:	c1 ea 14             	shr    edx,0x14
   24238:	83 ec 08             	sub    esp,0x8
   2423b:	57                   	push   edi
   2423c:	56                   	push   esi
   2423d:	53                   	push   ebx
   2423e:	50                   	push   eax
   2423f:	52                   	push   edx
   24240:	68 e5 48 08 00       	push   0x848e5
   24245:	e8 6d 2e 00 00       	call   270b7 <printk>
   2424a:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:164
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
                kATADeviceInfo[3].lba48Supported?",LBA48":"",
                kATADeviceInfo[3].dmaSupported?",DMA":"");
    }
    if (ParamExists(kBootParams,"noahci",kBootParamCount))
   2424d:	a1 c8 8f 09 00       	mov    eax,ds:0x98fc8
   24252:	83 ec 04             	sub    esp,0x4
   24255:	50                   	push   eax
   24256:	68 30 49 08 00       	push   0x84930
   2425b:	68 e0 8f 09 00       	push   0x98fe0
   24260:	e8 e0 01 00 00       	call   24445 <ParamExists>
   24265:	83 c4 10             	add    esp,0x10
   24268:	84 c0                	test   al,al
   2426a:	74 15                	je     24281 <doHDSetup+0x4cb>
/home/yogi/src/os/chrisOS/src/init/init.c:165
        printk("AHCI: No scanning per parameter 'noahci'\n");
   2426c:	83 ec 0c             	sub    esp,0xc
   2426f:	68 38 49 08 00       	push   0x84938
   24274:	e8 3e 2e 00 00       	call   270b7 <printk>
   24279:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:185
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
                        kATADeviceInfo[cnt].dmaSupported?",DMA":"");
            }
    }
}
   2427c:	e9 bb 01 00 00       	jmp    2443c <doHDSetup+0x686>
/home/yogi/src/os/chrisOS/src/init/init.c:168
    }
    if (ParamExists(kBootParams,"noahci",kBootParamCount))
        printk("AHCI: No scanning per parameter 'noahci'\n");
    else
    {
        printk("AHCI: Initializing ...\n");
   24281:	83 ec 0c             	sub    esp,0xc
   24284:	68 62 49 08 00       	push   0x84962
   24289:	e8 29 2e 00 00       	call   270b7 <printk>
   2428e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:169
        ahciInit();
   24291:	e8 16 10 ff ff       	call   152ac <ahciInit>
/home/yogi/src/os/chrisOS/src/init/init.c:170
        printk(" done\n");
   24296:	83 ec 0c             	sub    esp,0xc
   24299:	68 7a 49 08 00       	push   0x8497a
   2429e:	e8 14 2e 00 00       	call   270b7 <printk>
   242a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:171
        printk("AHCI: SATA Disks:\n");
   242a6:	83 ec 0c             	sub    esp,0xc
   242a9:	68 81 49 08 00       	push   0x84981
   242ae:	e8 04 2e 00 00       	call   270b7 <printk>
   242b3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:172
        for (int cnt=4;cnt<10;cnt++)
   242b6:	c7 45 e4 04 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x4
   242bd:	e9 70 01 00 00       	jmp    24432 <doHDSetup+0x67c>
/home/yogi/src/os/chrisOS/src/init/init.c:173
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
   242c2:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   242c8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   242cb:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   242d1:	01 d0                	add    eax,edx
   242d3:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   242da:	84 c0                	test   al,al
   242dc:	0f 84 4c 01 00 00    	je     2442e <doHDSetup+0x678>
/home/yogi/src/os/chrisOS/src/init/init.c:175
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
   242e2:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   242e8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   242eb:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   242f1:	01 d0                	add    eax,edx
   242f3:	05 00 02 00 00       	add    eax,0x200
   242f8:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:176
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   242fe:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   24304:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24307:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   2430d:	01 d0                	add    eax,edx
   2430f:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   24316:	3c 01                	cmp    al,0x1
   24318:	75 14                	jne    2432e <doHDSetup+0x578>
/home/yogi/src/os/chrisOS/src/init/init.c:176 (discriminator 1)
   2431a:	83 ec 0c             	sub    esp,0xc
   2431d:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   24323:	50                   	push   eax
   24324:	e8 a3 32 00 00       	call   275cc <strtrim>
   24329:	83 c4 10             	add    esp,0x10
   2432c:	eb 05                	jmp    24333 <doHDSetup+0x57d>
/home/yogi/src/os/chrisOS/src/init/init.c:176 (discriminator 2)
   2432e:	b8 96 48 08 00       	mov    eax,0x84896
/home/yogi/src/os/chrisOS/src/init/init.c:176 (discriminator 4)
   24333:	83 ec 04             	sub    esp,0x4
   24336:	50                   	push   eax
   24337:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   2433a:	68 94 49 08 00       	push   0x84994
   2433f:	e8 73 2d 00 00       	call   270b7 <printk>
   24344:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:182 (discriminator 4)
                printk("\t%uMB (%ubps %s%s%s)\n", 
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
                        kATADeviceInfo[cnt].dmaSupported?",DMA":"");
   24347:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   2434d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24350:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24356:	01 d0                	add    eax,edx
   24358:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:177 (discriminator 4)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   2435f:	84 c0                	test   al,al
   24361:	74 0c                	je     2436f <doHDSetup+0x5b9>
/home/yogi/src/os/chrisOS/src/init/init.c:177 (discriminator 1)
   24363:	c7 85 d4 f7 ff ff ad 	mov    DWORD PTR [ebp-0x82c],0x848ad
   2436a:	48 08 00 
   2436d:	eb 0a                	jmp    24379 <doHDSetup+0x5c3>
/home/yogi/src/os/chrisOS/src/init/init.c:177 (discriminator 2)
   2436f:	c7 85 d4 f7 ff ff b2 	mov    DWORD PTR [ebp-0x82c],0x848b2
   24376:	48 08 00 
/home/yogi/src/os/chrisOS/src/init/init.c:181 (discriminator 4)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
   24379:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   2437f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24382:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24388:	01 d0                	add    eax,edx
   2438a:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:177 (discriminator 4)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   24391:	84 c0                	test   al,al
   24393:	74 07                	je     2439c <doHDSetup+0x5e6>
/home/yogi/src/os/chrisOS/src/init/init.c:177 (discriminator 5)
   24395:	bf b3 48 08 00       	mov    edi,0x848b3
   2439a:	eb 05                	jmp    243a1 <doHDSetup+0x5eb>
/home/yogi/src/os/chrisOS/src/init/init.c:177 (discriminator 6)
   2439c:	bf b2 48 08 00       	mov    edi,0x848b2
/home/yogi/src/os/chrisOS/src/init/init.c:180 (discriminator 8)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
   243a1:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   243a7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   243aa:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   243b0:	01 d0                	add    eax,edx
   243b2:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:177 (discriminator 8)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   243b9:	84 c0                	test   al,al
   243bb:	74 07                	je     243c4 <doHDSetup+0x60e>
/home/yogi/src/os/chrisOS/src/init/init.c:177 (discriminator 9)
   243bd:	be ba 48 08 00       	mov    esi,0x848ba
   243c2:	eb 05                	jmp    243c9 <doHDSetup+0x613>
/home/yogi/src/os/chrisOS/src/init/init.c:177 (discriminator 10)
   243c4:	be b2 48 08 00       	mov    esi,0x848b2
/home/yogi/src/os/chrisOS/src/init/init.c:179 (discriminator 12)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
   243c9:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   243cf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   243d2:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   243d8:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/init/init.c:177 (discriminator 12)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   243da:	8b 88 5a 02 00 00    	mov    ecx,DWORD PTR [eax+0x25a]
/home/yogi/src/os/chrisOS/src/init/init.c:178 (discriminator 12)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
   243e0:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   243e6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   243e9:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   243ef:	01 d0                	add    eax,edx
   243f1:	8b 90 56 02 00 00    	mov    edx,DWORD PTR [eax+0x256]
   243f7:	8b 1d c0 02 12 00    	mov    ebx,DWORD PTR ds:0x1202c0
   243fd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24400:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24406:	01 d8                	add    eax,ebx
   24408:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   2440e:	0f af c2             	imul   eax,edx
/home/yogi/src/os/chrisOS/src/init/init.c:177 (discriminator 12)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   24411:	c1 e8 14             	shr    eax,0x14
   24414:	83 ec 08             	sub    esp,0x8
   24417:	ff b5 d4 f7 ff ff    	push   DWORD PTR [ebp-0x82c]
   2441d:	57                   	push   edi
   2441e:	56                   	push   esi
   2441f:	51                   	push   ecx
   24420:	50                   	push   eax
   24421:	68 e5 48 08 00       	push   0x848e5
   24426:	e8 8c 2c 00 00       	call   270b7 <printk>
   2442b:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:172 (discriminator 2)
    {
        printk("AHCI: Initializing ...\n");
        ahciInit();
        printk(" done\n");
        printk("AHCI: SATA Disks:\n");
        for (int cnt=4;cnt<10;cnt++)
   2442e:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/init/init.c:172 (discriminator 1)
   24432:	83 7d e4 09          	cmp    DWORD PTR [ebp-0x1c],0x9
   24436:	0f 8e 86 fe ff ff    	jle    242c2 <doHDSetup+0x50c>
/home/yogi/src/os/chrisOS/src/init/init.c:185
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
                        kATADeviceInfo[cnt].dmaSupported?",DMA":"");
            }
    }
}
   2443c:	90                   	nop
   2443d:	8d 65 f4             	lea    esp,[ebp-0xc]
   24440:	5b                   	pop    ebx
   24441:	5e                   	pop    esi
   24442:	5f                   	pop    edi
   24443:	5d                   	pop    ebp
   24444:	c3                   	ret    

00024445 <ParamExists>:
ParamExists():
/home/yogi/src/os/chrisOS/src/init/init.c:188

bool HIGH_CODE_SECTION ParamExists(char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH], char* cmdToFind, int paramCount)
{
   24445:	55                   	push   ebp
   24446:	89 e5                	mov    ebp,esp
   24448:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/init.c:189
    for (int cnt=0;cnt<paramCount+1;cnt++)
   2444b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   24452:	eb 2b                	jmp    2447f <ParamExists+0x3a>
/home/yogi/src/os/chrisOS/src/init/init.c:190
        if (!strcmp(params[cnt],cmdToFind))
   24454:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   24457:	c1 e0 09             	shl    eax,0x9
   2445a:	89 c2                	mov    edx,eax
   2445c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2445f:	01 d0                	add    eax,edx
   24461:	83 ec 08             	sub    esp,0x8
   24464:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   24467:	50                   	push   eax
   24468:	e8 57 2d 00 00       	call   271c4 <strcmp>
   2446d:	83 c4 10             	add    esp,0x10
   24470:	85 c0                	test   eax,eax
   24472:	75 07                	jne    2447b <ParamExists+0x36>
/home/yogi/src/os/chrisOS/src/init/init.c:191
            return true;
   24474:	b8 01 00 00 00       	mov    eax,0x1
   24479:	eb 14                	jmp    2448f <ParamExists+0x4a>
/home/yogi/src/os/chrisOS/src/init/init.c:189 (discriminator 2)
    }
}

bool HIGH_CODE_SECTION ParamExists(char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH], char* cmdToFind, int paramCount)
{
    for (int cnt=0;cnt<paramCount+1;cnt++)
   2447b:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/init.c:189 (discriminator 1)
   2447f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   24482:	83 c0 01             	add    eax,0x1
   24485:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   24488:	7f ca                	jg     24454 <ParamExists+0xf>
/home/yogi/src/os/chrisOS/src/init/init.c:192
        if (!strcmp(params[cnt],cmdToFind))
            return true;
    return false;
   2448a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/init.c:193
}
   2448f:	c9                   	leave  
   24490:	c3                   	ret    

00024491 <kernel_main>:
kernel_main():
/home/yogi/src/os/chrisOS/src/init/init.c:195

void HIGH_CODE_SECTION kernel_main(/*multiboot_info_t* mbd, unsigned int magic*/) {
   24491:	55                   	push   ebp
   24492:	89 e5                	mov    ebp,esp
   24494:	56                   	push   esi
   24495:	53                   	push   ebx
   24496:	81 ec d0 00 00 00    	sub    esp,0xd0
/home/yogi/src/os/chrisOS/src/init/init.c:201
    
char currTime[150];
struct tm theDateTime;
    //Zero out all of the memory we will be using as rebooting a computer doesn't necessarily clear memory
    //memset(0x200000,0,0x1000000);
    kTicksPerSecond=TICKS_PER_SECOND;
   2449c:	c7 05 80 02 12 00 64 	mov    DWORD PTR ds:0x120280,0x64
   244a3:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/init.c:202
    kTermInit();
   244a6:	e8 1f 3b ff ff       	call   17fca <kTermInit>
/home/yogi/src/os/chrisOS/src/init/init.c:203
    kInitDone=false;
   244ab:	c6 05 a0 02 12 00 00 	mov    BYTE PTR ds:0x1202a0,0x0
/home/yogi/src/os/chrisOS/src/init/init.c:204
    kPagingInitDone=false;
   244b2:	c6 05 a1 02 12 00 00 	mov    BYTE PTR ds:0x1202a1,0x0
/home/yogi/src/os/chrisOS/src/init/init.c:205
    kTicksPerMS=1000/kTicksPerSecond;
   244b9:	8b 35 80 02 12 00    	mov    esi,DWORD PTR ds:0x120280
   244bf:	b8 e8 03 00 00       	mov    eax,0x3e8
   244c4:	99                   	cdq    
   244c5:	f7 fe                	idiv   esi
   244c7:	a3 84 02 12 00       	mov    ds:0x120284,eax
/home/yogi/src/os/chrisOS/src/init/init.c:206
    kDebugStartsNow=false;
   244cc:	c6 05 b0 02 12 00 00 	mov    BYTE PTR ds:0x1202b0,0x0
/home/yogi/src/os/chrisOS/src/init/init.c:207
    memset(kATADeviceInfo,0x0,sizeof(struct ataDeviceInfo_t)*20);
   244d3:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   244d8:	83 ec 04             	sub    esp,0x4
   244db:	68 fc 30 00 00       	push   0x30fc
   244e0:	6a 00                	push   0x0
   244e2:	50                   	push   eax
   244e3:	e8 45 0b 00 00       	call   2502d <memset>
   244e8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:208
    memset(kGDTSlotAvailableInd,0xFF,GDT_TABLE_SIZE);
   244eb:	a1 f0 03 12 00       	mov    eax,ds:0x1203f0
   244f0:	83 ec 04             	sub    esp,0x4
   244f3:	68 00 08 00 00       	push   0x800
   244f8:	68 ff 00 00 00       	push   0xff
   244fd:	50                   	push   eax
   244fe:	e8 2a 0b 00 00       	call   2502d <memset>
   24503:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:209
    memset(kTaskSlotAvailableInd,0xFF,TASK_TABLE_SIZE);
   24506:	a1 f4 03 12 00       	mov    eax,ds:0x1203f4
   2450b:	83 ec 04             	sub    esp,0x4
   2450e:	68 00 00 19 00       	push   0x190000
   24513:	68 ff 00 00 00       	push   0xff
   24518:	50                   	push   eax
   24519:	e8 0f 0b 00 00       	call   2502d <memset>
   2451e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:211

    __asm__("mov esp,0xff00\n" /*\
   24521:	bc 00 ff 00 00       	mov    esp,0xff00
/home/yogi/src/os/chrisOS/src/init/init.c:214
            "mov eax,0\nmov dr6,eax":::"eax"*/);
    /* Initialize terminal interface */
    *kTicksSinceStart=0;
   24526:	a1 60 02 12 00       	mov    eax,ds:0x120260
   2452b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/init.c:215
    identify_data_sizes(&kDataSizes);
   24531:	83 ec 0c             	sub    esp,0xc
   24534:	68 54 02 12 00       	push   0x120254
   24539:	e8 bd 0a 00 00       	call   24ffb <identify_data_sizes>
   2453e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:216
    terminal_clear();
   24541:	e8 7c 36 ff ff       	call   17bc2 <terminal_clear>
/home/yogi/src/os/chrisOS/src/init/init.c:217
    printk("Booting ...\n");
   24546:	83 ec 0c             	sub    esp,0xc
   24549:	68 a9 49 08 00       	push   0x849a9
   2454e:	e8 64 2b 00 00       	call   270b7 <printk>
   24553:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:218
    gdt_init();
   24556:	e8 d6 f6 ff ff       	call   23c31 <gdt_init>
/home/yogi/src/os/chrisOS/src/init/init.c:220

    quietHardware();
   2455b:	e8 32 f8 ff ff       	call   23d92 <quietHardware>
/home/yogi/src/os/chrisOS/src/init/init.c:221
    int lLowMemKB = getInt12Memory();
   24560:	e8 08 cb fd ff       	call   106d <getInt12Memory>
   24565:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/init.c:222
    kE820Status = isE820Available(); //
   24568:	e8 bb ca fd ff       	call   1028 <isE820Available>
   2456d:	a3 44 00 12 00       	mov    ds:0x120044,eax
/home/yogi/src/os/chrisOS/src/init/init.c:223
    if (kE820Status==0x534d4150)
   24572:	a1 44 00 12 00       	mov    eax,ds:0x120044
   24577:	3d 50 41 4d 53       	cmp    eax,0x534d4150
   2457c:	75 0b                	jne    24589 <kernel_main+0xf8>
/home/yogi/src/os/chrisOS/src/init/init.c:224
        kE820RecordCount = getE820Memory_asm();
   2457e:	e8 b5 cc fd ff       	call   1238 <getE820Memory_asm>
   24583:	66 a3 50 00 12 00    	mov    ds:0x120050,ax
/home/yogi/src/os/chrisOS/src/init/init.c:226
    //Move the SMAP table from low memory up to where we want it
    memcpy(smap_table, lowSmapTablePtr, kE820RecordCount*24);
   24589:	0f b7 05 50 00 12 00 	movzx  eax,WORD PTR ds:0x120050
   24590:	0f bf d0             	movsx  edx,ax
   24593:	89 d0                	mov    eax,edx
   24595:	01 c0                	add    eax,eax
   24597:	01 d0                	add    eax,edx
   24599:	c1 e0 03             	shl    eax,0x3
   2459c:	89 c1                	mov    ecx,eax
   2459e:	8b 15 5f 13 00 00    	mov    edx,DWORD PTR ds:0x135f
   245a4:	a1 40 00 12 00       	mov    eax,ds:0x120040
   245a9:	83 ec 04             	sub    esp,0x4
   245ac:	51                   	push   ecx
   245ad:	52                   	push   edx
   245ae:	50                   	push   eax
   245af:	e8 68 14 00 00       	call   25a1c <memcpy>
   245b4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:227
    idt_init(&kInitialIDTReg, PIC_REMAP_OFFSET);
   245b7:	83 ec 08             	sub    esp,0x8
   245ba:	6a 20                	push   0x20
   245bc:	68 e0 a3 09 00       	push   0x9a3e0
   245c1:	e8 32 45 ff ff       	call   18af8 <idt_init>
   245c6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:228
    init_PIT(kTicksPerSecond);
   245c9:	a1 80 02 12 00       	mov    eax,ds:0x120280
   245ce:	83 ec 0c             	sub    esp,0xc
   245d1:	50                   	push   eax
   245d2:	e8 b6 cb fd ff       	call   118d <init_PIT>
   245d7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:230
    //Remap the exception vectors (0x0-0x1f)
    PIC_remap(0x00+PIC_REMAP_OFFSET, 0x8+PIC_REMAP_OFFSET);
   245da:	83 ec 08             	sub    esp,0x8
   245dd:	6a 28                	push   0x28
   245df:	6a 20                	push   0x20
   245e1:	e8 0c 54 ff ff       	call   199f2 <PIC_remap>
   245e6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:231
    IRQ_clear_mask(0);
   245e9:	83 ec 0c             	sub    esp,0xc
   245ec:	6a 00                	push   0x0
   245ee:	e8 9d 53 ff ff       	call   19990 <IRQ_clear_mask>
   245f3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:232
    IRQ_clear_mask(1);
   245f6:	83 ec 0c             	sub    esp,0xc
   245f9:	6a 01                	push   0x1
   245fb:	e8 90 53 ff ff       	call   19990 <IRQ_clear_mask>
   24600:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:233
    initSystemDate();
   24603:	e8 7c 0b 00 00       	call   25184 <initSystemDate>
/home/yogi/src/os/chrisOS/src/init/init.c:234
    gmtime_r(&kSystemStartTime,&theDateTime);
   24608:	83 ec 08             	sub    esp,0x8
   2460b:	8d 85 30 ff ff ff    	lea    eax,[ebp-0xd0]
   24611:	50                   	push   eax
   24612:	68 88 02 12 00       	push   0x120288
   24617:	e8 fd 30 00 00       	call   27719 <gmtime_r>
   2461c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:235
    printk("Boot: ");
   2461f:	83 ec 0c             	sub    esp,0xc
   24622:	68 b6 49 08 00       	push   0x849b6
   24627:	e8 8b 2a 00 00       	call   270b7 <printk>
   2462c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:236
    gets(kBootCmd,150);
   2462f:	83 ec 08             	sub    esp,0x8
   24632:	68 96 00 00 00       	push   0x96
   24637:	68 00 a4 09 00       	push   0x9a400
   2463c:	e8 ae cc fe ff       	call   112ef <gets>
   24641:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:237
    kBootParamCount=parseParamsShell(kBootCmd, kBootParams, MAX_PARAM_COUNT*MAX_PARAM_WIDTH);
   24644:	83 ec 04             	sub    esp,0x4
   24647:	68 00 14 00 00       	push   0x1400
   2464c:	68 e0 8f 09 00       	push   0x98fe0
   24651:	68 00 a4 09 00       	push   0x9a400
   24656:	e8 ef dd fe ff       	call   1244a <parseParamsShell>
   2465b:	83 c4 10             	add    esp,0x10
   2465e:	a3 c8 8f 09 00       	mov    ds:0x98fc8,eax
/home/yogi/src/os/chrisOS/src/init/init.c:238
    strftime((char*)&currTime, 50, "%H:%M:%S on %m/%d/%y", &theDateTime);
   24663:	8d 85 30 ff ff ff    	lea    eax,[ebp-0xd0]
   24669:	50                   	push   eax
   2466a:	68 bd 49 08 00       	push   0x849bd
   2466f:	6a 32                	push   0x32
   24671:	8d 85 5e ff ff ff    	lea    eax,[ebp-0xa2]
   24677:	50                   	push   eax
   24678:	e8 33 c0 fe ff       	call   106b0 <strftime>
   2467d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:240
    //wait(50);
    printk("chrisOS %s booting @%s",  COMPLETE_VERSION, &currTime);
   24680:	83 ec 04             	sub    esp,0x4
   24683:	8d 85 5e ff ff ff    	lea    eax,[ebp-0xa2]
   24689:	50                   	push   eax
   2468a:	68 d2 49 08 00       	push   0x849d2
   2468f:	68 e6 49 08 00       	push   0x849e6
   24694:	e8 1e 2a 00 00       	call   270b7 <printk>
   24699:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:242
#ifndef DEBUG_NONE
    if (kDebugLevel > 0)
   2469c:	a1 38 03 12 00       	mov    eax,ds:0x120338
   246a1:	85 c0                	test   eax,eax
   246a3:	74 16                	je     246bb <kernel_main+0x22a>
/home/yogi/src/os/chrisOS/src/init/init.c:243
        printk ("(debug=%X)", kDebugLevel);
   246a5:	a1 38 03 12 00       	mov    eax,ds:0x120338
   246aa:	83 ec 08             	sub    esp,0x8
   246ad:	50                   	push   eax
   246ae:	68 fd 49 08 00       	push   0x849fd
   246b3:	e8 ff 29 00 00       	call   270b7 <printk>
   246b8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:245
#endif
    printk("\n");
   246bb:	83 ec 0c             	sub    esp,0xc
   246be:	68 08 4a 08 00       	push   0x84a08
   246c3:	e8 ef 29 00 00       	call   270b7 <printk>
   246c8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:246
    if (kE820Status==0x534d4150)
   246cb:	a1 44 00 12 00       	mov    eax,ds:0x120044
   246d0:	3d 50 41 4d 53       	cmp    eax,0x534d4150
   246d5:	75 4f                	jne    24726 <kernel_main+0x295>
/home/yogi/src/os/chrisOS/src/init/init.c:248
    {
        printk("E820: available (%08X), translating ...", kE820Status);
   246d7:	a1 44 00 12 00       	mov    eax,ds:0x120044
   246dc:	83 ec 08             	sub    esp,0x8
   246df:	50                   	push   eax
   246e0:	68 0c 4a 08 00       	push   0x84a0c
   246e5:	e8 cd 29 00 00       	call   270b7 <printk>
   246ea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:249
        kE820MemoryBytes = sum_e820_usable_memory(smap_table,kE820RecordCount);
   246ed:	0f b7 05 50 00 12 00 	movzx  eax,WORD PTR ds:0x120050
   246f4:	0f bf d0             	movsx  edx,ax
   246f7:	a1 40 00 12 00       	mov    eax,ds:0x120040
   246fc:	83 ec 08             	sub    esp,0x8
   246ff:	52                   	push   edx
   24700:	50                   	push   eax
   24701:	e8 07 f3 ff ff       	call   23a0d <sum_e820_usable_memory>
   24706:	83 c4 10             	add    esp,0x10
   24709:	a3 48 00 12 00       	mov    ds:0x120048,eax
   2470e:	89 15 4c 00 12 00    	mov    DWORD PTR ds:0x12004c,edx
/home/yogi/src/os/chrisOS/src/init/init.c:250
        printk("done\n");
   24714:	83 ec 0c             	sub    esp,0xc
   24717:	68 34 4a 08 00       	push   0x84a34
   2471c:	e8 96 29 00 00       	call   270b7 <printk>
   24721:	83 c4 10             	add    esp,0x10
   24724:	eb 16                	jmp    2473c <kernel_main+0x2ab>
/home/yogi/src/os/chrisOS/src/init/init.c:254
        //print_e820_map(smap_table, kE820RecordCount);
    }
    else
        printk("E820: not available (%08X ... looking for alternatives.\n", kE820Status);
   24726:	a1 44 00 12 00       	mov    eax,ds:0x120044
   2472b:	83 ec 08             	sub    esp,0x8
   2472e:	50                   	push   eax
   2472f:	68 3c 4a 08 00       	push   0x84a3c
   24734:	e8 7e 29 00 00       	call   270b7 <printk>
   24739:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:256

    printk("E820: Usable memory: Low=%6d (INT12), Total=%10d (E820)\n",lLowMemKB * 1024, kE820MemoryBytes);
   2473c:	a1 48 00 12 00       	mov    eax,ds:0x120048
   24741:	8b 15 4c 00 12 00    	mov    edx,DWORD PTR ds:0x12004c
   24747:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   2474a:	c1 e1 0a             	shl    ecx,0xa
   2474d:	52                   	push   edx
   2474e:	50                   	push   eax
   2474f:	51                   	push   ecx
   24750:	68 78 4a 08 00       	push   0x84a78
   24755:	e8 5d 29 00 00       	call   270b7 <printk>
   2475a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:257
    if (kE820MemoryBytes < MINIMUM_USABLE_MEMORY)
   2475d:	a1 48 00 12 00       	mov    eax,ds:0x120048
   24762:	8b 15 4c 00 12 00    	mov    edx,DWORD PTR ds:0x12004c
   24768:	83 fa 00             	cmp    edx,0x0
   2476b:	77 3d                	ja     247aa <kernel_main+0x319>
   2476d:	83 fa 00             	cmp    edx,0x0
   24770:	72 07                	jb     24779 <kernel_main+0x2e8>
   24772:	3d ff ff ff 0f       	cmp    eax,0xfffffff
   24777:	77 31                	ja     247aa <kernel_main+0x319>
/home/yogi/src/os/chrisOS/src/init/init.c:259
    {
        printk("\n\nE820: Either the available memory is less than the minimum required of %d MB\nor memory capacity cannot be determined\n.", MINIMUM_USABLE_MEMORY / 1024 / 1024);
   24779:	83 ec 08             	sub    esp,0x8
   2477c:	68 00 01 00 00       	push   0x100
   24781:	68 b4 4a 08 00       	push   0x84ab4
   24786:	e8 2c 29 00 00       	call   270b7 <printk>
   2478b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:260
        printk("3820: Ignore? ");
   2478e:	83 ec 0c             	sub    esp,0xc
   24791:	68 2d 4b 08 00       	push   0x84b2d
   24796:	e8 1c 29 00 00       	call   270b7 <printk>
   2479b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:262
        
        while (getKeyboardKey()!='y')
   2479e:	eb 01                	jmp    247a1 <kernel_main+0x310>
/home/yogi/src/os/chrisOS/src/init/init.c:263
        {__asm("hlt\n");}
   247a0:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/init/init.c:262
    if (kE820MemoryBytes < MINIMUM_USABLE_MEMORY)
    {
        printk("\n\nE820: Either the available memory is less than the minimum required of %d MB\nor memory capacity cannot be determined\n.", MINIMUM_USABLE_MEMORY / 1024 / 1024);
        printk("3820: Ignore? ");
        
        while (getKeyboardKey()!='y')
   247a1:	e8 3f cb fe ff       	call   112e5 <getKeyboardKey>
   247a6:	3c 79                	cmp    al,0x79
   247a8:	75 f6                	jne    247a0 <kernel_main+0x30f>
/home/yogi/src/os/chrisOS/src/init/init.c:265
        {__asm("hlt\n");}
    }
    __asm__ ("mov eax,%0\n push eax\n pop esp\n"::"r" (STACK_BASE_ADDRESS):"eax");
   247aa:	ba e0 ff 99 00       	mov    edx,0x99ffe0
   247af:	89 d0                	mov    eax,edx
   247b1:	50                   	push   eax
   247b2:	5c                   	pop    esp
/home/yogi/src/os/chrisOS/src/init/init.c:266
    detect_cpu();
   247b3:	e8 94 e6 ff ff       	call   22e4c <detect_cpu>
/home/yogi/src/os/chrisOS/src/init/init.c:267
    printk("CPU: Detected CPU: %s\n", kcpuInfo.brand_name);
   247b8:	83 ec 08             	sub    esp,0x8
   247bb:	68 72 01 12 00       	push   0x120172
   247c0:	68 3c 4b 08 00       	push   0x84b3c
   247c5:	e8 ed 28 00 00       	call   270b7 <printk>
   247ca:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:268
    identifyCPUFeatures(&kCPUFeatures);
   247cd:	83 ec 0c             	sub    esp,0xc
   247d0:	68 44 03 12 00       	push   0x120344
   247d5:	e8 3a 42 ff ff       	call   18a14 <identifyCPUFeatures>
   247da:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:269
    if (apicCheckFor())
   247dd:	e8 20 3d ff ff       	call   18502 <apicCheckFor>
   247e2:	84 c0                	test   al,al
   247e4:	0f 84 ad 00 00 00    	je     24897 <kernel_main+0x406>
/home/yogi/src/os/chrisOS/src/init/init.c:271
    {
        kCPU[0].apicID=apciGetAPICID(0);
   247ea:	83 ec 0c             	sub    esp,0xc
   247ed:	6a 00                	push   0x0
   247ef:	e8 67 3d ff ff       	call   1855b <apciGetAPICID>
   247f4:	83 c4 10             	add    esp,0x10
   247f7:	0f b6 c0             	movzx  eax,al
   247fa:	a3 60 03 12 00       	mov    ds:0x120360,eax
/home/yogi/src/os/chrisOS/src/init/init.c:272
        kCPU[0].registerBase=apicGetAPICBase();
   247ff:	e8 6c 3d ff ff       	call   18570 <apicGetAPICBase>
   24804:	a3 64 03 12 00       	mov    ds:0x120364,eax
/home/yogi/src/os/chrisOS/src/init/init.c:273
        kCPU[0].ticksPerSecond=apicGetHZ();
   24809:	e8 a7 3e ff ff       	call   186b5 <apicGetHZ>
   2480e:	ba 00 00 00 00       	mov    edx,0x0
   24813:	a3 68 03 12 00       	mov    ds:0x120368,eax
   24818:	89 15 6c 03 12 00    	mov    DWORD PTR ds:0x12036c,edx
/home/yogi/src/os/chrisOS/src/init/init.c:275
        //IRQ_set_mask(0);
        printk("APIC: %s APIC %u Found, address %08X, initializing ... ", acpiGetAPICVersion()==0?"Discrete":"Integrated", kCPU[0].apicID, kCPU[0].registerBase);
   2481e:	8b 35 64 03 12 00    	mov    esi,DWORD PTR ds:0x120364
   24824:	8b 1d 60 03 12 00    	mov    ebx,DWORD PTR ds:0x120360
   2482a:	e8 17 3d ff ff       	call   18546 <acpiGetAPICVersion>
   2482f:	84 c0                	test   al,al
   24831:	75 07                	jne    2483a <kernel_main+0x3a9>
/home/yogi/src/os/chrisOS/src/init/init.c:275 (discriminator 1)
   24833:	b8 53 4b 08 00       	mov    eax,0x84b53
   24838:	eb 05                	jmp    2483f <kernel_main+0x3ae>
/home/yogi/src/os/chrisOS/src/init/init.c:275 (discriminator 2)
   2483a:	b8 5c 4b 08 00       	mov    eax,0x84b5c
/home/yogi/src/os/chrisOS/src/init/init.c:275 (discriminator 4)
   2483f:	56                   	push   esi
   24840:	53                   	push   ebx
   24841:	50                   	push   eax
   24842:	68 68 4b 08 00       	push   0x84b68
   24847:	e8 6b 28 00 00       	call   270b7 <printk>
   2484c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:276 (discriminator 4)
        if (apicIsEnabled())
   2484f:	e8 c9 3d ff ff       	call   1861d <apicIsEnabled>
   24854:	84 c0                	test   al,al
   24856:	74 10                	je     24868 <kernel_main+0x3d7>
/home/yogi/src/os/chrisOS/src/init/init.c:277
            printk("enabled ... ");
   24858:	83 ec 0c             	sub    esp,0xc
   2485b:	68 a0 4b 08 00       	push   0x84ba0
   24860:	e8 52 28 00 00       	call   270b7 <printk>
   24865:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:278
        printk("done\n");
   24868:	83 ec 0c             	sub    esp,0xc
   2486b:	68 34 4a 08 00       	push   0x84a34
   24870:	e8 42 28 00 00       	call   270b7 <printk>
   24875:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:279
        printk("APIC: Timer running at %u hz.\n",kCPU[0].ticksPerSecond);
   24878:	a1 68 03 12 00       	mov    eax,ds:0x120368
   2487d:	8b 15 6c 03 12 00    	mov    edx,DWORD PTR ds:0x12036c
   24883:	83 ec 04             	sub    esp,0x4
   24886:	52                   	push   edx
   24887:	50                   	push   eax
   24888:	68 b0 4b 08 00       	push   0x84bb0
   2488d:	e8 25 28 00 00       	call   270b7 <printk>
   24892:	83 c4 10             	add    esp,0x10
   24895:	eb 10                	jmp    248a7 <kernel_main+0x416>
/home/yogi/src/os/chrisOS/src/init/init.c:282
    }
    else
        printk("APIC: not found\n");
   24897:	83 ec 0c             	sub    esp,0xc
   2489a:	68 cf 4b 08 00       	push   0x84bcf
   2489f:	e8 13 28 00 00       	call   270b7 <printk>
   248a4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:283
    printk("TSC: ticks per 10 = %u\n", tscGetTicksPerSecond());
   248a7:	e8 ff 3e ff ff       	call   187ab <tscGetTicksPerSecond>
   248ac:	83 ec 08             	sub    esp,0x8
   248af:	50                   	push   eax
   248b0:	68 e0 4b 08 00       	push   0x84be0
   248b5:	e8 fd 27 00 00       	call   270b7 <printk>
   248ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:285
#ifndef DISABLE_PAGING
    kCPU[0].registerBase=apicGetAPICBase();
   248bd:	e8 ae 3c ff ff       	call   18570 <apicGetAPICBase>
   248c2:	a3 64 03 12 00       	mov    ds:0x120364,eax
/home/yogi/src/os/chrisOS/src/init/init.c:286
    printk("PAGING: enabling 4k paging\n");
   248c7:	83 ec 0c             	sub    esp,0xc
   248ca:	68 f8 4b 08 00       	push   0x84bf8
   248cf:	e8 e3 27 00 00       	call   270b7 <printk>
   248d4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:287
    initializeKernelPaging();
   248d7:	e8 74 02 00 00       	call   24b50 <initializeKernelPaging>
/home/yogi/src/os/chrisOS/src/init/init.c:288
    printk("PAGING: remapping APIC from 0x%08X to 0x%08X\n", kCPU[0].registerBase, kAPICRegisterRemapAddress);
   248dc:	8b 15 30 03 12 00    	mov    edx,DWORD PTR ds:0x120330
   248e2:	a1 64 03 12 00       	mov    eax,ds:0x120364
   248e7:	83 ec 04             	sub    esp,0x4
   248ea:	52                   	push   edx
   248eb:	50                   	push   eax
   248ec:	68 14 4c 08 00       	push   0x84c14
   248f1:	e8 c1 27 00 00       	call   270b7 <printk>
   248f6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:290
    //map APIC address 0xFEE00000 to 0x825000
    kMapPage(kAPICRegisterRemapAddress, kCPU[0].registerBase,0x13);  //0x63 + cache disabled
   248f9:	8b 15 64 03 12 00    	mov    edx,DWORD PTR ds:0x120364
   248ff:	a1 30 03 12 00       	mov    eax,ds:0x120330
   24904:	83 ec 04             	sub    esp,0x4
   24907:	6a 13                	push   0x13
   24909:	52                   	push   edx
   2490a:	50                   	push   eax
   2490b:	e8 27 ce fe ff       	call   11737 <kMapPage>
   24910:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:291
    printk("PAGING: Kernel paged base: 0x%08X\n",KERNEL_PAGED_BASE_ADDRESS);
   24913:	83 ec 08             	sub    esp,0x8
   24916:	68 00 00 00 c0       	push   0xc0000000
   2491b:	68 44 4c 08 00       	push   0x84c44
   24920:	e8 92 27 00 00       	call   270b7 <printk>
   24925:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:292
    printk("PAGING: Making page @ 0x00000000 read only\n");
   24928:	83 ec 0c             	sub    esp,0xc
   2492b:	68 68 4c 08 00       	push   0x84c68
   24930:	e8 82 27 00 00       	call   270b7 <printk>
   24935:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:293
    kSetPhysicalRangeRO(0x0,0xFFF,true);
   24938:	83 ec 04             	sub    esp,0x4
   2493b:	6a 01                	push   0x1
   2493d:	68 ff 0f 00 00       	push   0xfff
   24942:	6a 00                	push   0x0
   24944:	e8 7d d1 fe ff       	call   11ac6 <kSetPhysicalRangeRO>
   24949:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:294
    printk("PAGING: Testing whether CPU honors WP flag ... ");
   2494c:	83 ec 0c             	sub    esp,0xc
   2494f:	68 94 4c 08 00       	push   0x84c94
   24954:	e8 5e 27 00 00       	call   270b7 <printk>
   24959:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:295
  __asm__("cli\n");
   2495c:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/init/init.c:296
  __asm__("mov %0,[0x0]\n":"=r" (kOriginalAddressZeroValue));
   2495d:	a1 00 00 00 00       	mov    eax,ds:0x0
   24962:	a3 e4 03 12 00       	mov    ds:0x1203e4,eax
/home/yogi/src/os/chrisOS/src/init/init.c:297
  __asm__("mov eax,0xdeadbeef\n mov [0x0],eax\n");    //purposely read address 0 which we made "read only"
   24967:	b8 ef be ad de       	mov    eax,0xdeadbeef
   2496c:	a3 00 00 00 00       	mov    ds:0x0,eax
/home/yogi/src/os/chrisOS/src/init/init.c:298
    printk("works\n");
   24971:	83 ec 0c             	sub    esp,0xc
   24974:	68 c4 4c 08 00       	push   0x84cc4
   24979:	e8 39 27 00 00       	call   270b7 <printk>
   2497e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:299
    kSetPhysicalRangeRO(0x0,0xFFF,true);
   24981:	83 ec 04             	sub    esp,0x4
   24984:	6a 01                	push   0x1
   24986:	68 ff 0f 00 00       	push   0xfff
   2498b:	6a 00                	push   0x0
   2498d:	e8 34 d1 fe ff       	call   11ac6 <kSetPhysicalRangeRO>
   24992:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:300
    kPagingInitDone=true;
   24995:	c6 05 a1 02 12 00 01 	mov    BYTE PTR ds:0x1202a1,0x1
/home/yogi/src/os/chrisOS/src/init/init.c:302
#endif
    printk("CLOCK: tick frequency is %uhz\n",kTicksPerSecond);
   2499c:	a1 80 02 12 00       	mov    eax,ds:0x120280
   249a1:	83 ec 08             	sub    esp,0x8
   249a4:	50                   	push   eax
   249a5:	68 cc 4c 08 00       	push   0x84ccc
   249aa:	e8 08 27 00 00       	call   270b7 <printk>
   249af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:303
    printk("CLOCK: testing ... "); wait(100); printk("works\n");
   249b2:	83 ec 0c             	sub    esp,0xc
   249b5:	68 eb 4c 08 00       	push   0x84ceb
   249ba:	e8 f8 26 00 00       	call   270b7 <printk>
   249bf:	83 c4 10             	add    esp,0x10
   249c2:	83 ec 0c             	sub    esp,0xc
   249c5:	6a 64                	push   0x64
   249c7:	e8 2a 39 00 00       	call   282f6 <wait>
   249cc:	83 c4 10             	add    esp,0x10
   249cf:	83 ec 0c             	sub    esp,0xc
   249d2:	68 c4 4c 08 00       	push   0x84cc4
   249d7:	e8 db 26 00 00       	call   270b7 <printk>
   249dc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:306

#ifdef __SMP__
    if (ParamExists(kBootParams,"nosmp",kBootParamCount))
   249df:	a1 c8 8f 09 00       	mov    eax,ds:0x98fc8
   249e4:	83 ec 04             	sub    esp,0x4
   249e7:	50                   	push   eax
   249e8:	68 ff 4c 08 00       	push   0x84cff
   249ed:	68 e0 8f 09 00       	push   0x98fe0
   249f2:	e8 4e fa ff ff       	call   24445 <ParamExists>
   249f7:	83 c4 10             	add    esp,0x10
   249fa:	84 c0                	test   al,al
   249fc:	74 12                	je     24a10 <kernel_main+0x57f>
/home/yogi/src/os/chrisOS/src/init/init.c:307
        printk("SMP: No AP processor startup per 'nosmp' parameter\n");
   249fe:	83 ec 0c             	sub    esp,0xc
   24a01:	68 08 4d 08 00       	push   0x84d08
   24a06:	e8 ac 26 00 00       	call   270b7 <printk>
   24a0b:	83 c4 10             	add    esp,0x10
   24a0e:	eb 77                	jmp    24a87 <kernel_main+0x5f6>
/home/yogi/src/os/chrisOS/src/init/init.c:310
    else
    {
        printk("SMP: Initializing, ");
   24a10:	83 ec 0c             	sub    esp,0xc
   24a13:	68 3c 4d 08 00       	push   0x84d3c
   24a18:	e8 9a 26 00 00       	call   270b7 <printk>
   24a1d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:311
        printk("%u MP records parsed\n",mpInit());
   24a20:	e8 fa 55 ff ff       	call   1a01f <mpInit>
   24a25:	83 ec 08             	sub    esp,0x8
   24a28:	50                   	push   eax
   24a29:	68 50 4d 08 00       	push   0x84d50
   24a2e:	e8 84 26 00 00       	call   270b7 <printk>
   24a33:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:313
        //cursorUpdateBiosCursor();
        printk("SMP: Starting up AP processors\n");
   24a36:	83 ec 0c             	sub    esp,0xc
   24a39:	68 68 4d 08 00       	push   0x84d68
   24a3e:	e8 74 26 00 00       	call   270b7 <printk>
   24a43:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:314
        AP_startup();
   24a46:	e8 6b cb fd ff       	call   15b6 <AP_startup>
/home/yogi/src/os/chrisOS/src/init/init.c:315
        wait(500);
   24a4b:	83 ec 0c             	sub    esp,0xc
   24a4e:	68 f4 01 00 00       	push   0x1f4
   24a53:	e8 9e 38 00 00       	call   282f6 <wait>
   24a58:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:316
        printk("SMP: CPUs 2 thru %u (of %u total) started... done\n",smpBootCPUsStarted+1, smpBootCPUCount+1);
   24a5b:	0f b6 05 9a 15 00 00 	movzx  eax,BYTE PTR ds:0x159a
   24a62:	0f b6 c0             	movzx  eax,al
   24a65:	8d 50 01             	lea    edx,[eax+0x1]
   24a68:	0f b6 05 9c 15 00 00 	movzx  eax,BYTE PTR ds:0x159c
   24a6f:	0f b6 c0             	movzx  eax,al
   24a72:	83 c0 01             	add    eax,0x1
   24a75:	83 ec 04             	sub    esp,0x4
   24a78:	52                   	push   edx
   24a79:	50                   	push   eax
   24a7a:	68 88 4d 08 00       	push   0x84d88
   24a7f:	e8 33 26 00 00       	call   270b7 <printk>
   24a84:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:321
        //if (kIOAPICPtr)
        //    kMapPage(CPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS, (uintptr_t)kIOAPICPtr, 0x13);
    }
#endif
    if (ParamExists(kBootParams,"nopci",kBootParamCount))
   24a87:	a1 c8 8f 09 00       	mov    eax,ds:0x98fc8
   24a8c:	83 ec 04             	sub    esp,0x4
   24a8f:	50                   	push   eax
   24a90:	68 bb 4d 08 00       	push   0x84dbb
   24a95:	68 e0 8f 09 00       	push   0x98fe0
   24a9a:	e8 a6 f9 ff ff       	call   24445 <ParamExists>
   24a9f:	83 c4 10             	add    esp,0x10
   24aa2:	84 c0                	test   al,al
   24aa4:	74 12                	je     24ab8 <kernel_main+0x627>
/home/yogi/src/os/chrisOS/src/init/init.c:322
        printk("PCI: No scanning per parameter 'nopci'\n");
   24aa6:	83 ec 0c             	sub    esp,0xc
   24aa9:	68 c4 4d 08 00       	push   0x84dc4
   24aae:	e8 04 26 00 00       	call   270b7 <printk>
   24ab3:	83 c4 10             	add    esp,0x10
   24ab6:	eb 6e                	jmp    24b26 <kernel_main+0x695>
/home/yogi/src/os/chrisOS/src/init/init.c:325
    else
    {
        printk("PCI: initializing ...");
   24ab8:	83 ec 0c             	sub    esp,0xc
   24abb:	68 ec 4d 08 00       	push   0x84dec
   24ac0:	e8 f2 25 00 00       	call   270b7 <printk>
   24ac5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:326
        pciInitialize();
   24ac8:	e8 d8 2c ff ff       	call   177a5 <pciInitialize>
/home/yogi/src/os/chrisOS/src/init/init.c:327
        printk(" found %u %s, %u devices (%u bridges)\n",kPCIBusCount, kPCIBusCount<=1?"bus":"busses", kPCIDeviceCount, kPCIBridgeCount);
   24acd:	0f b6 05 ad 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ad
   24ad4:	0f b6 c8             	movzx  ecx,al
   24ad7:	0f b6 05 ac 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ac
   24ade:	0f b6 d0             	movzx  edx,al
   24ae1:	0f b6 05 af 02 12 00 	movzx  eax,BYTE PTR ds:0x1202af
   24ae8:	3c 01                	cmp    al,0x1
   24aea:	77 07                	ja     24af3 <kernel_main+0x662>
/home/yogi/src/os/chrisOS/src/init/init.c:327 (discriminator 1)
   24aec:	bb 02 4e 08 00       	mov    ebx,0x84e02
   24af1:	eb 05                	jmp    24af8 <kernel_main+0x667>
/home/yogi/src/os/chrisOS/src/init/init.c:327 (discriminator 2)
   24af3:	bb 06 4e 08 00       	mov    ebx,0x84e06
/home/yogi/src/os/chrisOS/src/init/init.c:327 (discriminator 4)
   24af8:	0f b6 05 af 02 12 00 	movzx  eax,BYTE PTR ds:0x1202af
   24aff:	0f b6 c0             	movzx  eax,al
   24b02:	83 ec 0c             	sub    esp,0xc
   24b05:	51                   	push   ecx
   24b06:	52                   	push   edx
   24b07:	53                   	push   ebx
   24b08:	50                   	push   eax
   24b09:	68 10 4e 08 00       	push   0x84e10
   24b0e:	e8 a4 25 00 00       	call   270b7 <printk>
   24b13:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:328 (discriminator 4)
        printk("PCI: initialization complete ...\n");
   24b16:	83 ec 0c             	sub    esp,0xc
   24b19:	68 38 4e 08 00       	push   0x84e38
   24b1e:	e8 94 25 00 00       	call   270b7 <printk>
   24b23:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:330
    }
    doHDSetup();
   24b26:	e8 8b f2 ff ff       	call   23db6 <doHDSetup>
/home/yogi/src/os/chrisOS/src/init/init.c:331
kInitDone = true;
   24b2b:	c6 05 a0 02 12 00 01 	mov    BYTE PTR ds:0x1202a0,0x1
/home/yogi/src/os/chrisOS/src/init/init.c:332
    goto overStuff; /*******************************************/
   24b32:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/init.c:384 (discriminator 1)
        //kpagingUpdatePresentFlagA(0x0,false);
//    __asm__("mov eax,0xdeadbead\n mov [0x0100],eax\n");    //purposely read address 0 which we made "read only"
        
//        terminal_clear();
MAINLOOPv:
        __asm__("nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n");
   24b33:	90                   	nop
   24b34:	90                   	nop
   24b35:	90                   	nop
   24b36:	90                   	nop
   24b37:	90                   	nop
   24b38:	90                   	nop
   24b39:	90                   	nop
   24b3a:	90                   	nop
   24b3b:	90                   	nop
   24b3c:	90                   	nop
   24b3d:	90                   	nop
   24b3e:	90                   	nop
   24b3f:	90                   	nop
   24b40:	90                   	nop
   24b41:	90                   	nop
   24b42:	90                   	nop
   24b43:	90                   	nop
   24b44:	90                   	nop
   24b45:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/init.c:388 (discriminator 1)
//    char a[255];
//    gets(a,255);
//    if (!strncmp(a,"debug",5))
        biShell();
   24b46:	e8 44 e8 fe ff       	call   1338f <biShell>
/home/yogi/src/os/chrisOS/src/init/init.c:392 (discriminator 1)
//    if (a>0)
//        printk("%c",a);
//    __asm__("hlt\n");
    goto MAINLOOPv;
   24b4b:	eb e6                	jmp    24b33 <kernel_main+0x6a2>
   24b4d:	66 90                	xchg   ax,ax
   24b4f:	90                   	nop

00024b50 <initializeKernelPaging>:
initializeKernelPaging():
/home/yogi/src/os/chrisOS/src/init/initPaging.c:13
extern struct idt_entry kInitialIDT[0x30];
extern struct idt_ptr kInitialIDTReg;
extern struct gdt_ptr kernelGDT;

void initializeKernelPaging()
{
   24b50:	55                   	push   ebp
   24b51:	89 e5                	mov    ebp,esp
   24b53:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/init/initPaging.c:18
        uint32_t *ptr;
        uint32_t *ptrT;
        uint32_t *ptr2;
        uint32_t *kKernelPageTables;
        uint16_t tempEntries = (0xFFFFFFFF/0x400000)+1;  //Map entire 4GB memory space 
   24b56:	66 c7 45 e6 00 04    	mov    WORD PTR [ebp-0x1a],0x400
/home/yogi/src/os/chrisOS/src/init/initPaging.c:21

       
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Entering setupKernelPaging module\n");
   24b5c:	83 ec 08             	sub    esp,0x8
   24b5f:	68 5c 4e 08 00       	push   0x84e5c
   24b64:	6a 20                	push   0x20
   24b66:	e8 6c 25 00 00       	call   270d7 <printd>
   24b6b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:22
        ptr=(uint32_t*)kKernelPageDir;
   24b6e:	a1 a4 02 12 00       	mov    eax,ds:0x1202a4
   24b73:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/init/initPaging.c:23
        ptrT=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
   24b76:	c7 45 f4 00 b0 4b 00 	mov    DWORD PTR [ebp-0xc],0x4bb000
/home/yogi/src/os/chrisOS/src/init/initPaging.c:24
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Page directory at 0x%08X, table at 0x%08x\n", ptr, ptrT);
   24b7d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   24b80:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   24b83:	68 90 4e 08 00       	push   0x84e90
   24b88:	6a 20                	push   0x20
   24b8a:	e8 48 25 00 00       	call   270d7 <printd>
   24b8f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:25
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: (0x%04X page directory entries)\n", tempEntries);
   24b92:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   24b96:	83 ec 04             	sub    esp,0x4
   24b99:	50                   	push   eax
   24b9a:	68 cc 4e 08 00       	push   0x84ecc
   24b9f:	6a 20                	push   0x20
   24ba1:	e8 31 25 00 00       	call   270d7 <printd>
   24ba6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:26
        for (uint32_t cnt=0;cnt < tempEntries; cnt++)
   24ba9:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   24bb0:	eb 65                	jmp    24c17 <initializeKernelPaging+0xc7>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:28
        {
                ptr[cnt] = (KERNEL_PAGE_TABLE_BASE_ADDRESS + (cnt*4096)) | 0x3;
   24bb2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   24bb5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   24bbc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   24bbf:	01 d0                	add    eax,edx
   24bc1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   24bc4:	81 c2 bb 04 00 00    	add    edx,0x4bb
   24bca:	c1 e2 0c             	shl    edx,0xc
   24bcd:	83 ca 03             	or     edx,0x3
   24bd0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/initPaging.c:30
                //Create a guest page table for each Page Directory
                for (int cnt2=0;cnt2<1024;cnt2++)
   24bd2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   24bd9:	eb 28                	jmp    24c03 <initializeKernelPaging+0xb3>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:32 (discriminator 3)
                {
                    ptrT[cnt2] = ((0x400000 * cnt)  + ((cnt2) << 12)) | 0x3;
   24bdb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   24bde:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   24be5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   24be8:	01 d0                	add    eax,edx
   24bea:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   24bed:	89 d1                	mov    ecx,edx
   24bef:	c1 e1 16             	shl    ecx,0x16
   24bf2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   24bf5:	c1 e2 0c             	shl    edx,0xc
   24bf8:	01 ca                	add    edx,ecx
   24bfa:	83 ca 03             	or     edx,0x3
   24bfd:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/initPaging.c:30 (discriminator 3)
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: (0x%04X page directory entries)\n", tempEntries);
        for (uint32_t cnt=0;cnt < tempEntries; cnt++)
        {
                ptr[cnt] = (KERNEL_PAGE_TABLE_BASE_ADDRESS + (cnt*4096)) | 0x3;
                //Create a guest page table for each Page Directory
                for (int cnt2=0;cnt2<1024;cnt2++)
   24bff:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/init/initPaging.c:30 (discriminator 1)
   24c03:	81 7d ec ff 03 00 00 	cmp    DWORD PTR [ebp-0x14],0x3ff
   24c0a:	7e cf                	jle    24bdb <initializeKernelPaging+0x8b>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:34 (discriminator 2)
                {
                    ptrT[cnt2] = ((0x400000 * cnt)  + ((cnt2) << 12)) | 0x3;
                }
                ptrT += 0x400;
   24c0c:	81 45 f4 00 10 00 00 	add    DWORD PTR [ebp-0xc],0x1000
/home/yogi/src/os/chrisOS/src/init/initPaging.c:26 (discriminator 2)
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Entering setupKernelPaging module\n");
        ptr=(uint32_t*)kKernelPageDir;
        ptrT=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Page directory at 0x%08X, table at 0x%08x\n", ptr, ptrT);
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: (0x%04X page directory entries)\n", tempEntries);
        for (uint32_t cnt=0;cnt < tempEntries; cnt++)
   24c13:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/initPaging.c:26 (discriminator 1)
   24c17:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   24c1b:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   24c1e:	77 92                	ja     24bb2 <initializeKernelPaging+0x62>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:36
                {
                    ptrT[cnt2] = ((0x400000 * cnt)  + ((cnt2) << 12)) | 0x3;
                }
                ptrT += 0x400;
        }
        uint32_t pageDirEntrySize = 0x400000;
   24c20:	c7 45 dc 00 00 40 00 	mov    DWORD PTR [ebp-0x24],0x400000
/home/yogi/src/os/chrisOS/src/init/initPaging.c:37
        ptr2=(void*)KERNEL_PAGE_DIR_ADDRESS + (KERNEL_PAGED_BASE_ADDRESS / 0x400000)*4; //(((uint32_t)KERNEL_PAGED_BASE_ADDRESS / (uint32_t)0x400000) * 4);
   24c27:	c7 45 d8 00 9c 4a 00 	mov    DWORD PTR [ebp-0x28],0x4a9c00
/home/yogi/src/os/chrisOS/src/init/initPaging.c:38
        kKernelPageTables=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
   24c2e:	c7 45 d4 00 b0 4b 00 	mov    DWORD PTR [ebp-0x2c],0x4bb000
/home/yogi/src/os/chrisOS/src/init/initPaging.c:40
        //Initialize Kernel Page Directory
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Kernel page dir at 0x%08X, table at 0x%08x\n", ptr2, kKernelPageTables);
   24c35:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   24c38:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
   24c3b:	68 fc 4e 08 00       	push   0x84efc
   24c40:	6a 20                	push   0x20
   24c42:	e8 90 24 00 00       	call   270d7 <printd>
   24c47:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:41
        uint32_t pageDirEntryCount= 0x40;   //Map C0000000-CFFFFFFF=00000000-0FFFFFFF 
   24c4a:	c7 45 d0 40 00 00 00 	mov    DWORD PTR [ebp-0x30],0x40
/home/yogi/src/os/chrisOS/src/init/initPaging.c:42
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: 0x%08X entries\n", pageDirEntryCount);
   24c51:	83 ec 04             	sub    esp,0x4
   24c54:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   24c57:	68 38 4f 08 00       	push   0x84f38
   24c5c:	6a 20                	push   0x20
   24c5e:	e8 74 24 00 00       	call   270d7 <printd>
   24c63:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:43
        for (uint32_t cnt=0;cnt <= pageDirEntryCount; cnt++)
   24c66:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   24c6d:	eb 24                	jmp    24c93 <initializeKernelPaging+0x143>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:45 (discriminator 3)
        {
                ptr2[cnt] = (KERNEL_PAGE_TABLE_BASE_ADDRESS + (cnt*4096)) | 0x3;
   24c6f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   24c72:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   24c79:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   24c7c:	01 d0                	add    eax,edx
   24c7e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   24c81:	81 c2 bb 04 00 00    	add    edx,0x4bb
   24c87:	c1 e2 0c             	shl    edx,0xc
   24c8a:	83 ca 03             	or     edx,0x3
   24c8d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/initPaging.c:43 (discriminator 3)
        kKernelPageTables=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
        //Initialize Kernel Page Directory
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Kernel page dir at 0x%08X, table at 0x%08x\n", ptr2, kKernelPageTables);
        uint32_t pageDirEntryCount= 0x40;   //Map C0000000-CFFFFFFF=00000000-0FFFFFFF 
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: 0x%08X entries\n", pageDirEntryCount);
        for (uint32_t cnt=0;cnt <= pageDirEntryCount; cnt++)
   24c8f:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/init/initPaging.c:43 (discriminator 1)
   24c93:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   24c96:	3b 45 d0             	cmp    eax,DWORD PTR [ebp-0x30]
   24c99:	76 d4                	jbe    24c6f <initializeKernelPaging+0x11f>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:47
        {
                ptr2[cnt] = (KERNEL_PAGE_TABLE_BASE_ADDRESS + (cnt*4096)) | 0x3;
        }
        __asm__("mov cr3,%0\n":: "a" (KERNEL_PAGE_DIR_ADDRESS));
   24c9b:	b8 00 90 4a 00       	mov    eax,0x4a9000
   24ca0:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOS/src/init/initPaging.c:48
       __asm__("mov eax,cr0\n or eax,0x80000000\n mov cr0,eax\n");
   24ca3:	0f 20 c0             	mov    eax,cr0
   24ca6:	0d 00 00 00 80       	or     eax,0x80000000
   24cab:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/src/init/initPaging.c:57
/*BEFORE:
 0 - blank
 1 (0x08) - code @ 0x0
 2 (0x10) - data @ 0x0
*/
       gdtEntry(1, KERNEL_PAGED_BASE_ADDRESS, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,
   24cae:	83 ec 08             	sub    esp,0x8
   24cb1:	6a 01                	push   0x1
   24cb3:	6a c0                	push   0xffffffc0
   24cb5:	6a 88                	push   0xffffff88
   24cb7:	68 ff ff 0f 00       	push   0xfffff
   24cbc:	68 00 00 00 c0       	push   0xc0000000
   24cc1:	6a 01                	push   0x1
   24cc3:	e8 dc 3b ff ff       	call   188a4 <gdtEntry>
   24cc8:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/initPaging.c:59
                  GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(2, KERNEL_PAGED_BASE_ADDRESS, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE,
   24ccb:	83 ec 08             	sub    esp,0x8
   24cce:	6a 01                	push   0x1
   24cd0:	6a c0                	push   0xffffffc0
   24cd2:	6a 82                	push   0xffffff82
   24cd4:	68 ff ff 0f 00       	push   0xfffff
   24cd9:	68 00 00 00 c0       	push   0xc0000000
   24cde:	6a 02                	push   0x2
   24ce0:	e8 bf 3b ff ff       	call   188a4 <gdtEntry>
   24ce5:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/initPaging.c:67
 0 - blank
 1 (0x08) - code @ 0xC0000000
 2 (0x10) - data @ 0xC0000000
*/

        kernelGDT.limit = sizeof(struct GDT) * GDT_ENTRIES - 1;
   24ce8:	66 c7 05 4c 04 12 00 	mov    WORD PTR ds:0x12044c,0x31f
   24cef:	1f 03 
/home/yogi/src/os/chrisOS/src/init/initPaging.c:68
        kernelGDT.base = (unsigned int)INIT_GDT_TABLE_ADDRESS;
   24cf1:	c7 05 4e 04 12 00 00 	mov    DWORD PTR ds:0x12044e,0x154000
   24cf8:	40 15 00 
/home/yogi/src/os/chrisOS/src/init/initPaging.c:69
        set_gdt(&kernelGDT);
   24cfb:	83 ec 0c             	sub    esp,0xc
   24cfe:	68 4c 04 12 00       	push   0x12044c
   24d03:	e8 35 c4 fd ff       	call   113d <set_gdt>
   24d08:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:70
        idt_init(&kInitialIDTReg, PIC_REMAP_OFFSET);
   24d0b:	83 ec 08             	sub    esp,0x8
   24d0e:	6a 20                	push   0x20
   24d10:	68 e0 a3 09 00       	push   0x9a3e0
   24d15:	e8 de 3d ff ff       	call   18af8 <idt_init>
   24d1a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:71
        doPagingJump();
   24d1d:	e8 05 c6 fd ff       	call   1327 <doPagingJump>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:75

    
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING_CONFIG) == DEBUG_PAGING_CONFIG)
   24d22:	a1 38 03 12 00       	mov    eax,ds:0x120338
   24d27:	83 e0 20             	and    eax,0x20
   24d2a:	85 c0                	test   eax,eax
   24d2c:	74 15                	je     24d43 <initializeKernelPaging+0x1f3>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:76
            printk("Clearing up temporary low page entries at 0x%08X\n", KERNEL_TEMP_LOW_PAGE_TABLE_BASE_ADDRESS);
   24d2e:	83 ec 08             	sub    esp,0x8
   24d31:	68 00 00 09 05       	push   0x5090000
   24d36:	68 58 4f 08 00       	push   0x84f58
   24d3b:	e8 77 23 00 00       	call   270b7 <printk>
   24d40:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:80
#endif
        //Now that we've fixed our IDT, lets restart interrupts!
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING_CONFIG) == DEBUG_PAGING_CONFIG)
   24d43:	a1 38 03 12 00       	mov    eax,ds:0x120338
   24d48:	83 e0 20             	and    eax,0x20
   24d4b:	85 c0                	test   eax,eax
   24d4d:	74 10                	je     24d5f <initializeKernelPaging+0x20f>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:81
            printk("Exiting setupKernelPaging module\n");
   24d4f:	83 ec 0c             	sub    esp,0xc
   24d52:	68 8c 4f 08 00       	push   0x84f8c
   24d57:	e8 5b 23 00 00       	call   270b7 <printk>
   24d5c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:83
#endif
}
   24d5f:	90                   	nop
   24d60:	c9                   	leave  
   24d61:	c3                   	ret    
   24d62:	66 90                	xchg   ax,ax

00024d64 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   24d64:	55                   	push   ebp
   24d65:	89 e5                	mov    ebp,esp
   24d67:	83 ec 08             	sub    esp,0x8
   24d6a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   24d6d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24d70:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   24d74:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   24d77:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   24d7b:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   24d7f:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   24d80:	90                   	nop
   24d81:	c9                   	leave  
   24d82:	c3                   	ret    

00024d83 <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   24d83:	55                   	push   ebp
   24d84:	89 e5                	mov    ebp,esp
   24d86:	83 ec 14             	sub    esp,0x14
   24d89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24d8c:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   24d90:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   24d94:	89 c2                	mov    edx,eax
   24d96:	ec                   	in     al,dx
   24d97:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   24d9a:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   24d9e:	c9                   	leave  
   24d9f:	c3                   	ret    

00024da0 <reverse>:
reverse():
/home/yogi/src/os/chrisOS/src/init/utility.c:29
//#include <string.h>

/* reverse:  reverse string s in place */
extern int strlen(char*);
 void reverse(char s[])
 {
   24da0:	55                   	push   ebp
   24da1:	89 e5                	mov    ebp,esp
   24da3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/utility.c:33
     int i, j;
     char c;

     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
   24da6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   24dad:	83 ec 0c             	sub    esp,0xc
   24db0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   24db3:	e8 d0 24 00 00       	call   27288 <strlen>
   24db8:	83 c4 10             	add    esp,0x10
   24dbb:	83 e8 01             	sub    eax,0x1
   24dbe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   24dc1:	eb 39                	jmp    24dfc <reverse+0x5c>
/home/yogi/src/os/chrisOS/src/init/utility.c:34 (discriminator 3)
         c = s[i];
   24dc3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   24dc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24dc9:	01 d0                	add    eax,edx
   24dcb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   24dce:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/init/utility.c:35 (discriminator 3)
         s[i] = s[j];
   24dd1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   24dd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24dd7:	01 c2                	add    edx,eax
   24dd9:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   24ddc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24ddf:	01 c8                	add    eax,ecx
   24de1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   24de4:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/init/utility.c:36 (discriminator 3)
         s[j] = c;
   24de6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   24de9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24dec:	01 c2                	add    edx,eax
   24dee:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   24df2:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/init/utility.c:33 (discriminator 3)
 void reverse(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
   24df4:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
   24df8:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:33 (discriminator 1)
   24dfc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   24dff:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   24e02:	7c bf                	jl     24dc3 <reverse+0x23>
/home/yogi/src/os/chrisOS/src/init/utility.c:38
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
   24e04:	90                   	nop
   24e05:	c9                   	leave  
   24e06:	c3                   	ret    

00024e07 <itoa>:
itoa():
/home/yogi/src/os/chrisOS/src/init/utility.c:40
 void itoa(int n, char s[])
 {
   24e07:	55                   	push   ebp
   24e08:	89 e5                	mov    ebp,esp
   24e0a:	53                   	push   ebx
   24e0b:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/init/utility.c:43
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
   24e0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24e11:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   24e14:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   24e18:	79 03                	jns    24e1d <itoa+0x16>
/home/yogi/src/os/chrisOS/src/init/utility.c:44
         n = -n;          /* make n positive */
   24e1a:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/init/utility.c:45
     i = 0;
   24e1d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:47 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
   24e24:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   24e27:	8d 50 01             	lea    edx,[eax+0x1]
   24e2a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   24e2d:	89 c2                	mov    edx,eax
   24e2f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24e32:	8d 1c 02             	lea    ebx,[edx+eax*1]
   24e35:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   24e38:	ba 67 66 66 66       	mov    edx,0x66666667
   24e3d:	89 c8                	mov    eax,ecx
   24e3f:	f7 ea                	imul   edx
   24e41:	c1 fa 02             	sar    edx,0x2
   24e44:	89 c8                	mov    eax,ecx
   24e46:	c1 f8 1f             	sar    eax,0x1f
   24e49:	29 c2                	sub    edx,eax
   24e4b:	89 d0                	mov    eax,edx
   24e4d:	c1 e0 02             	shl    eax,0x2
   24e50:	01 d0                	add    eax,edx
   24e52:	01 c0                	add    eax,eax
   24e54:	29 c1                	sub    ecx,eax
   24e56:	89 ca                	mov    edx,ecx
   24e58:	89 d0                	mov    eax,edx
   24e5a:	83 c0 30             	add    eax,0x30
   24e5d:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/chrisOS/src/init/utility.c:48 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
   24e5f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   24e62:	ba 67 66 66 66       	mov    edx,0x66666667
   24e67:	89 c8                	mov    eax,ecx
   24e69:	f7 ea                	imul   edx
   24e6b:	c1 fa 02             	sar    edx,0x2
   24e6e:	89 c8                	mov    eax,ecx
   24e70:	c1 f8 1f             	sar    eax,0x1f
   24e73:	29 c2                	sub    edx,eax
   24e75:	89 d0                	mov    eax,edx
   24e77:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
   24e7a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   24e7e:	7f a4                	jg     24e24 <itoa+0x1d>
/home/yogi/src/os/chrisOS/src/init/utility.c:49
     if (sign < 0)
   24e80:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   24e84:	79 13                	jns    24e99 <itoa+0x92>
/home/yogi/src/os/chrisOS/src/init/utility.c:50
         s[i++] = '-';
   24e86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   24e89:	8d 50 01             	lea    edx,[eax+0x1]
   24e8c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   24e8f:	89 c2                	mov    edx,eax
   24e91:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24e94:	01 d0                	add    eax,edx
   24e96:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/chrisOS/src/init/utility.c:51
     s[i] = '\0';
   24e99:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   24e9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24e9f:	01 d0                	add    eax,edx
   24ea1:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:52
     reverse(s);
   24ea4:	83 ec 0c             	sub    esp,0xc
   24ea7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   24eaa:	e8 f1 fe ff ff       	call   24da0 <reverse>
   24eaf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:53
 }
   24eb2:	90                   	nop
   24eb3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   24eb6:	c9                   	leave  
   24eb7:	c3                   	ret    

00024eb8 <itox>:
itox():
/home/yogi/src/os/chrisOS/src/init/utility.c:55
void itox(unsigned int i, char *s)
{
   24eb8:	55                   	push   ebp
   24eb9:	89 e5                	mov    ebp,esp
   24ebb:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:58
    unsigned char n;

    s += 4;
   24ebe:	83 45 0c 04          	add    DWORD PTR [ebp+0xc],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:59
    *s = '\0';
   24ec2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:61

    for (n = 8; n != 0; --n) {
   24ec8:	c6 45 ff 08          	mov    BYTE PTR [ebp-0x1],0x8
   24ecc:	eb 1e                	jmp    24eec <itox+0x34>
/home/yogi/src/os/chrisOS/src/init/utility.c:62 (discriminator 3)
        *--s = "0123456789ABCDEF"[i & 0x0F];
   24ece:	83 6d 0c 01          	sub    DWORD PTR [ebp+0xc],0x1
   24ed2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24ed5:	83 e0 0f             	and    eax,0xf
   24ed8:	0f b6 90 c0 50 08 00 	movzx  edx,BYTE PTR [eax+0x850c0]
   24edf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24ee2:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:63 (discriminator 3)
        i >>= 4;
   24ee4:	c1 6d 08 04          	shr    DWORD PTR [ebp+0x8],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:61 (discriminator 3)
    unsigned char n;

    s += 4;
    *s = '\0';

    for (n = 8; n != 0; --n) {
   24ee8:	80 6d ff 01          	sub    BYTE PTR [ebp-0x1],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:61 (discriminator 1)
   24eec:	80 7d ff 00          	cmp    BYTE PTR [ebp-0x1],0x0
   24ef0:	75 dc                	jne    24ece <itox+0x16>
/home/yogi/src/os/chrisOS/src/init/utility.c:65
        *--s = "0123456789ABCDEF"[i & 0x0F];
        i >>= 4;
    }
}
   24ef2:	90                   	nop
   24ef3:	c9                   	leave  
   24ef4:	c3                   	ret    

00024ef5 <atoi>:
atoi():
/home/yogi/src/os/chrisOS/src/init/utility.c:68
// A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
int atoi(char *str)
{
   24ef5:	55                   	push   ebp
   24ef6:	89 e5                	mov    ebp,esp
   24ef8:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:69
    int res = 0; // Initialize result
   24efb:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:73
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
   24f02:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   24f09:	eb 28                	jmp    24f33 <atoi+0x3e>
/home/yogi/src/os/chrisOS/src/init/utility.c:74 (discriminator 3)
        res = res*10 + str[i] - '0';
   24f0b:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   24f0e:	89 d0                	mov    eax,edx
   24f10:	c1 e0 02             	shl    eax,0x2
   24f13:	01 d0                	add    eax,edx
   24f15:	01 c0                	add    eax,eax
   24f17:	89 c1                	mov    ecx,eax
   24f19:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   24f1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24f1f:	01 d0                	add    eax,edx
   24f21:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   24f24:	0f be c0             	movsx  eax,al
   24f27:	01 c8                	add    eax,ecx
   24f29:	83 e8 30             	sub    eax,0x30
   24f2c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:73 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
   24f2f:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:73 (discriminator 1)
   24f33:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   24f36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24f39:	01 d0                	add    eax,edx
   24f3b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   24f3e:	84 c0                	test   al,al
   24f40:	75 c9                	jne    24f0b <atoi+0x16>
/home/yogi/src/os/chrisOS/src/init/utility.c:77
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
   24f42:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/init/utility.c:78
}
   24f45:	c9                   	leave  
   24f46:	c3                   	ret    

00024f47 <convert>:
convert():
/home/yogi/src/os/chrisOS/src/init/utility.c:81

int convert(int s)
{
   24f47:	55                   	push   ebp
   24f48:	89 e5                	mov    ebp,esp
   24f4a:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:83
  int c;
  char hex[] = {'A', 'B', 'C', 'D', 'E', 'F'};
   24f4d:	c6 45 f6 41          	mov    BYTE PTR [ebp-0xa],0x41
   24f51:	c6 45 f7 42          	mov    BYTE PTR [ebp-0x9],0x42
   24f55:	c6 45 f8 43          	mov    BYTE PTR [ebp-0x8],0x43
   24f59:	c6 45 f9 44          	mov    BYTE PTR [ebp-0x7],0x44
   24f5d:	c6 45 fa 45          	mov    BYTE PTR [ebp-0x6],0x45
   24f61:	c6 45 fb 46          	mov    BYTE PTR [ebp-0x5],0x46
/home/yogi/src/os/chrisOS/src/init/utility.c:84
  c = (s >= 0 && s < 9) ? s + '0' : hex[s - 10];
   24f65:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   24f69:	78 0e                	js     24f79 <convert+0x32>
/home/yogi/src/os/chrisOS/src/init/utility.c:84 (discriminator 1)
   24f6b:	83 7d 08 08          	cmp    DWORD PTR [ebp+0x8],0x8
   24f6f:	7f 08                	jg     24f79 <convert+0x32>
/home/yogi/src/os/chrisOS/src/init/utility.c:84 (discriminator 3)
   24f71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24f74:	83 c0 30             	add    eax,0x30
   24f77:	eb 0e                	jmp    24f87 <convert+0x40>
/home/yogi/src/os/chrisOS/src/init/utility.c:84 (discriminator 4)
   24f79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24f7c:	83 e8 0a             	sub    eax,0xa
   24f7f:	0f b6 44 05 f6       	movzx  eax,BYTE PTR [ebp+eax*1-0xa]
   24f84:	0f be c0             	movsx  eax,al
/home/yogi/src/os/chrisOS/src/init/utility.c:84 (discriminator 6)
   24f87:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:85 (discriminator 6)
  return c;
   24f8a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/init/utility.c:86 (discriminator 6)
}
   24f8d:	c9                   	leave  
   24f8e:	c3                   	ret    

00024f8f <itoha>:
itoha():
/home/yogi/src/os/chrisOS/src/init/utility.c:89

void itoha(unsigned int n, char *buf)
{
   24f8f:	55                   	push   ebp
   24f90:	89 e5                	mov    ebp,esp
   24f92:	53                   	push   ebx
   24f93:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:90
  int i = 0, j =0;
   24f96:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   24f9d:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:91
  j=7;
   24fa4:	c7 45 f8 07 00 00 00 	mov    DWORD PTR [ebp-0x8],0x7
/home/yogi/src/os/chrisOS/src/init/utility.c:92
  while(n != 0)
   24fab:	eb 37                	jmp    24fe4 <itoha+0x55>
/home/yogi/src/os/chrisOS/src/init/utility.c:94
  {
    i = n % 16;
   24fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24fb0:	83 e0 0f             	and    eax,0xf
   24fb3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:95
      buf[j--] = convert(i);
   24fb6:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   24fb9:	8d 50 ff             	lea    edx,[eax-0x1]
   24fbc:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   24fbf:	89 c2                	mov    edx,eax
   24fc1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24fc4:	8d 1c 02             	lea    ebx,[edx+eax*1]
   24fc7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   24fca:	e8 78 ff ff ff       	call   24f47 <convert>
   24fcf:	83 c4 04             	add    esp,0x4
   24fd2:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/chrisOS/src/init/utility.c:96
      n = (n - i) / 16;
   24fd4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   24fd7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   24fda:	29 c2                	sub    edx,eax
   24fdc:	89 d0                	mov    eax,edx
   24fde:	c1 e8 04             	shr    eax,0x4
   24fe1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:92

void itoha(unsigned int n, char *buf)
{
  int i = 0, j =0;
  j=7;
  while(n != 0)
   24fe4:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   24fe8:	75 c3                	jne    24fad <itoha+0x1e>
/home/yogi/src/os/chrisOS/src/init/utility.c:98
  {
    i = n % 16;
      buf[j--] = convert(i);
      n = (n - i) / 16;
  }
  buf[j] = '\0';
   24fea:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   24fed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24ff0:	01 d0                	add    eax,edx
   24ff2:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:99
}
   24ff5:	90                   	nop
   24ff6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   24ff9:	c9                   	leave  
   24ffa:	c3                   	ret    

00024ffb <identify_data_sizes>:
identify_data_sizes():
/home/yogi/src/os/chrisOS/src/init/utility.c:102

void identify_data_sizes(sizeof_t* sizes)
{
   24ffb:	55                   	push   ebp
   24ffc:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/utility.c:103
    sizes->shortSize = sizeof(short);
   24ffe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25001:	66 c7 00 02 00       	mov    WORD PTR [eax],0x2
/home/yogi/src/os/chrisOS/src/init/utility.c:104
    sizes->intSize = sizeof(int);
   25006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25009:	66 c7 40 02 04 00    	mov    WORD PTR [eax+0x2],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:105
    sizes->longSize = sizeof(long);
   2500f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25012:	66 c7 40 04 04 00    	mov    WORD PTR [eax+0x4],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:106
    sizes->longLongSize = sizeof(long long);
   25018:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2501b:	66 c7 40 06 08 00    	mov    WORD PTR [eax+0x6],0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:107
    sizes->longLongIntSize = sizeof(long long int);
   25021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25024:	66 c7 40 08 08 00    	mov    WORD PTR [eax+0x8],0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:108
}
   2502a:	90                   	nop
   2502b:	5d                   	pop    ebp
   2502c:	c3                   	ret    

0002502d <memset>:
memset():
/home/yogi/src/os/chrisOS/src/init/utility.c:111

void *memset(void *d1, int val, size_t len)
{
   2502d:	55                   	push   ebp
   2502e:	89 e5                	mov    ebp,esp
   25030:	83 ec 20             	sub    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:112
    uint8_t *d = d1;
   25033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25036:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:113
    uint16_t*e = d1;
   25039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2503c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:114
    uint16_t eVal=(val << 16) | (val << 8) | val;
   2503f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25042:	c1 e0 10             	shl    eax,0x10
   25045:	89 c2                	mov    edx,eax
   25047:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2504a:	c1 e0 08             	shl    eax,0x8
   2504d:	09 c2                	or     edx,eax
   2504f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25052:	09 d0                	or     eax,edx
   25054:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
/home/yogi/src/os/chrisOS/src/init/utility.c:115
    uint32_t*f = d1;
   25058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2505b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:116
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
   2505e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25061:	c1 e0 18             	shl    eax,0x18
   25064:	89 c2                	mov    edx,eax
   25066:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25069:	c1 e0 10             	shl    eax,0x10
   2506c:	09 c2                	or     edx,eax
   2506e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25071:	c1 e0 08             	shl    eax,0x8
   25074:	09 d0                	or     eax,edx
   25076:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
   25079:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:118
    
    if ((len%4)==0)
   2507c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2507f:	83 e0 03             	and    eax,0x3
   25082:	85 c0                	test   eax,eax
   25084:	75 1c                	jne    250a2 <memset+0x75>
/home/yogi/src/os/chrisOS/src/init/utility.c:119
    while (len-=4) {
   25086:	eb 0e                	jmp    25096 <memset+0x69>
/home/yogi/src/os/chrisOS/src/init/utility.c:120
        *d++ = fVal;
   25088:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   2508b:	8d 50 01             	lea    edx,[eax+0x1]
   2508e:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   25091:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   25094:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:119
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
   25096:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
   2509a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   2509e:	75 e8                	jne    25088 <memset+0x5b>
   250a0:	eb 42                	jmp    250e4 <memset+0xb7>
/home/yogi/src/os/chrisOS/src/init/utility.c:122
        *d++ = fVal;
    }
    else if (((len%2)==0))
   250a2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   250a5:	83 e0 01             	and    eax,0x1
   250a8:	85 c0                	test   eax,eax
   250aa:	75 2b                	jne    250d7 <memset+0xaa>
/home/yogi/src/os/chrisOS/src/init/utility.c:123
    while (len-=2) {
   250ac:	eb 0f                	jmp    250bd <memset+0x90>
/home/yogi/src/os/chrisOS/src/init/utility.c:124
        *d++ = eVal;
   250ae:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   250b1:	8d 50 01             	lea    edx,[eax+0x1]
   250b4:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   250b7:	0f b7 55 f6          	movzx  edx,WORD PTR [ebp-0xa]
   250bb:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:123
    if ((len%4)==0)
    while (len-=4) {
        *d++ = fVal;
    }
    else if (((len%2)==0))
    while (len-=2) {
   250bd:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
   250c1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   250c5:	75 e7                	jne    250ae <memset+0x81>
   250c7:	eb 1b                	jmp    250e4 <memset+0xb7>
/home/yogi/src/os/chrisOS/src/init/utility.c:128
        *d++ = eVal;
    }
    else
    while (len--) {
        *d++ = val;
   250c9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   250cc:	8d 50 01             	lea    edx,[eax+0x1]
   250cf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   250d2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   250d5:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:127
    else if (((len%2)==0))
    while (len-=2) {
        *d++ = eVal;
    }
    else
    while (len--) {
   250d7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   250da:	8d 50 ff             	lea    edx,[eax-0x1]
   250dd:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   250e0:	85 c0                	test   eax,eax
   250e2:	75 e5                	jne    250c9 <memset+0x9c>
/home/yogi/src/os/chrisOS/src/init/utility.c:130
        *d++ = val;
    }
    return d1;
   250e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/init/utility.c:131
}
   250e7:	c9                   	leave  
   250e8:	c3                   	ret    

000250e9 <bcdToDec>:
bcdToDec():
/home/yogi/src/os/chrisOS/src/init/utility.c:134

uint8_t bcdToDec(uint8_t val)
{
   250e9:	55                   	push   ebp
   250ea:	89 e5                	mov    ebp,esp
   250ec:	83 ec 04             	sub    esp,0x4
   250ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   250f2:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/init/utility.c:135
  return ( (val/16*10) + (val%16) );
   250f5:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   250f9:	c0 e8 04             	shr    al,0x4
   250fc:	89 c2                	mov    edx,eax
   250fe:	89 d0                	mov    eax,edx
   25100:	c1 e0 02             	shl    eax,0x2
   25103:	01 d0                	add    eax,edx
   25105:	01 c0                	add    eax,eax
   25107:	89 c2                	mov    edx,eax
   25109:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   2510d:	83 e0 0f             	and    eax,0xf
   25110:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/init/utility.c:136
}
   25112:	c9                   	leave  
   25113:	c3                   	ret    

00025114 <decToBcd>:
decToBcd():
/home/yogi/src/os/chrisOS/src/init/utility.c:139

uint8_t decToBcd(uint8_t val)
{
   25114:	55                   	push   ebp
   25115:	89 e5                	mov    ebp,esp
   25117:	53                   	push   ebx
   25118:	83 ec 04             	sub    esp,0x4
   2511b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2511e:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/src/init/utility.c:140
  return ( (val/10*16) + (val%10) );
   25121:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   25125:	0f b6 d0             	movzx  edx,al
   25128:	89 d0                	mov    eax,edx
   2512a:	c1 e0 02             	shl    eax,0x2
   2512d:	01 d0                	add    eax,edx
   2512f:	c1 e0 03             	shl    eax,0x3
   25132:	01 d0                	add    eax,edx
   25134:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   2513b:	01 d0                	add    eax,edx
   2513d:	66 c1 e8 08          	shr    ax,0x8
   25141:	c0 e8 03             	shr    al,0x3
   25144:	c1 e0 04             	shl    eax,0x4
   25147:	89 c3                	mov    ebx,eax
   25149:	0f b6 4d f8          	movzx  ecx,BYTE PTR [ebp-0x8]
   2514d:	0f b6 d1             	movzx  edx,cl
   25150:	89 d0                	mov    eax,edx
   25152:	c1 e0 02             	shl    eax,0x2
   25155:	01 d0                	add    eax,edx
   25157:	c1 e0 03             	shl    eax,0x3
   2515a:	01 d0                	add    eax,edx
   2515c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   25163:	01 d0                	add    eax,edx
   25165:	66 c1 e8 08          	shr    ax,0x8
   25169:	89 c2                	mov    edx,eax
   2516b:	c0 ea 03             	shr    dl,0x3
   2516e:	89 d0                	mov    eax,edx
   25170:	c1 e0 02             	shl    eax,0x2
   25173:	01 d0                	add    eax,edx
   25175:	01 c0                	add    eax,eax
   25177:	29 c1                	sub    ecx,eax
   25179:	89 ca                	mov    edx,ecx
   2517b:	8d 04 13             	lea    eax,[ebx+edx*1]
/home/yogi/src/os/chrisOS/src/init/utility.c:141
}
   2517e:	83 c4 04             	add    esp,0x4
   25181:	5b                   	pop    ebx
   25182:	5d                   	pop    ebp
   25183:	c3                   	ret    

00025184 <initSystemDate>:
initSystemDate():
/home/yogi/src/os/chrisOS/src/init/utility.c:143
void initSystemDate()
{
   25184:	55                   	push   ebp
   25185:	89 e5                	mov    ebp,esp
   25187:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/init/utility.c:146
    struct tm tmbuf;

    outb(0x70, 0x00);
   2518a:	6a 00                	push   0x0
   2518c:	6a 70                	push   0x70
   2518e:	e8 d1 fb ff ff       	call   24d64 <outb>
   25193:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:147
    tmbuf.tm_sec = bcdToDec(inb(0x71));
   25196:	6a 71                	push   0x71
   25198:	e8 e6 fb ff ff       	call   24d83 <inb>
   2519d:	83 c4 04             	add    esp,0x4
   251a0:	0f b6 c0             	movzx  eax,al
   251a3:	50                   	push   eax
   251a4:	e8 40 ff ff ff       	call   250e9 <bcdToDec>
   251a9:	83 c4 04             	add    esp,0x4
   251ac:	0f b6 c0             	movzx  eax,al
   251af:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:148
    outb(0x70, 0x02);
   251b2:	6a 02                	push   0x2
   251b4:	6a 70                	push   0x70
   251b6:	e8 a9 fb ff ff       	call   24d64 <outb>
   251bb:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:149
    tmbuf.tm_min = bcdToDec(inb(0x71));
   251be:	6a 71                	push   0x71
   251c0:	e8 be fb ff ff       	call   24d83 <inb>
   251c5:	83 c4 04             	add    esp,0x4
   251c8:	0f b6 c0             	movzx  eax,al
   251cb:	50                   	push   eax
   251cc:	e8 18 ff ff ff       	call   250e9 <bcdToDec>
   251d1:	83 c4 04             	add    esp,0x4
   251d4:	0f b6 c0             	movzx  eax,al
   251d7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:150
    outb(0x70, 0x04);
   251da:	6a 04                	push   0x4
   251dc:	6a 70                	push   0x70
   251de:	e8 81 fb ff ff       	call   24d64 <outb>
   251e3:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:151
    tmbuf.tm_hour = bcdToDec(inb(0x71));
   251e6:	6a 71                	push   0x71
   251e8:	e8 96 fb ff ff       	call   24d83 <inb>
   251ed:	83 c4 04             	add    esp,0x4
   251f0:	0f b6 c0             	movzx  eax,al
   251f3:	50                   	push   eax
   251f4:	e8 f0 fe ff ff       	call   250e9 <bcdToDec>
   251f9:	83 c4 04             	add    esp,0x4
   251fc:	0f b6 c0             	movzx  eax,al
   251ff:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:152
    outb(0x70, 0x07);
   25202:	6a 07                	push   0x7
   25204:	6a 70                	push   0x70
   25206:	e8 59 fb ff ff       	call   24d64 <outb>
   2520b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:153
    tmbuf.tm_mday = bcdToDec(inb(0x71));
   2520e:	6a 71                	push   0x71
   25210:	e8 6e fb ff ff       	call   24d83 <inb>
   25215:	83 c4 04             	add    esp,0x4
   25218:	0f b6 c0             	movzx  eax,al
   2521b:	50                   	push   eax
   2521c:	e8 c8 fe ff ff       	call   250e9 <bcdToDec>
   25221:	83 c4 04             	add    esp,0x4
   25224:	0f b6 c0             	movzx  eax,al
   25227:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:154
    outb(0x70, 0x08);
   2522a:	6a 08                	push   0x8
   2522c:	6a 70                	push   0x70
   2522e:	e8 31 fb ff ff       	call   24d64 <outb>
   25233:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:155
    tmbuf.tm_mon = bcdToDec(inb(0x71));
   25236:	6a 71                	push   0x71
   25238:	e8 46 fb ff ff       	call   24d83 <inb>
   2523d:	83 c4 04             	add    esp,0x4
   25240:	0f b6 c0             	movzx  eax,al
   25243:	50                   	push   eax
   25244:	e8 a0 fe ff ff       	call   250e9 <bcdToDec>
   25249:	83 c4 04             	add    esp,0x4
   2524c:	0f b6 c0             	movzx  eax,al
   2524f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:156
    outb(0x70, 0x09);
   25252:	6a 09                	push   0x9
   25254:	6a 70                	push   0x70
   25256:	e8 09 fb ff ff       	call   24d64 <outb>
   2525b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:157
    tmbuf.tm_year = bcdToDec(inb(0x71));
   2525e:	6a 71                	push   0x71
   25260:	e8 1e fb ff ff       	call   24d83 <inb>
   25265:	83 c4 04             	add    esp,0x4
   25268:	0f b6 c0             	movzx  eax,al
   2526b:	50                   	push   eax
   2526c:	e8 78 fe ff ff       	call   250e9 <bcdToDec>
   25271:	83 c4 04             	add    esp,0x4
   25274:	0f b6 c0             	movzx  eax,al
   25277:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:158
    tmbuf.tm_isdst = -1;
   2527a:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/chrisOS/src/init/utility.c:159
    tmbuf.tm_year += 2000;
   25281:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   25284:	05 d0 07 00 00       	add    eax,0x7d0
   25289:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:160
    tmbuf.tm_year = tmbuf.tm_year - 1900;
   2528c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   2528f:	2d 6c 07 00 00       	sub    eax,0x76c
   25294:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:161
    kSystemStartTime = mktime(&tmbuf);
   25297:	83 ec 0c             	sub    esp,0xc
   2529a:	8d 45 cc             	lea    eax,[ebp-0x34]
   2529d:	50                   	push   eax
   2529e:	e8 d0 27 00 00       	call   27a73 <mktime>
   252a3:	83 c4 10             	add    esp,0x10
   252a6:	a3 88 02 12 00       	mov    ds:0x120288,eax
/home/yogi/src/os/chrisOS/src/init/utility.c:162
    kSystemCurrentTime = kSystemStartTime;
   252ab:	a1 88 02 12 00       	mov    eax,ds:0x120288
   252b0:	a3 8c 02 12 00       	mov    ds:0x12028c,eax
/home/yogi/src/os/chrisOS/src/init/utility.c:164
//printf("System Date = %d/%d/%d %d:%d:%d\n", tmbuf.tm_mon, tmbuf.tm_mday, tmbuf.tm_year, tmbuf.tm_hour, tmbuf.tm_min, tmbuf.tm_sec, tmbuf.tm_hour, tmbuf.tm_min, tmbuf.tm_sec);
}
   252b5:	90                   	nop
   252b6:	c9                   	leave  
   252b7:	c3                   	ret    

000252b8 <strtoupper>:
strtoupper():
/home/yogi/src/os/chrisOS/src/init/utility.c:166
char * strtoupper(char* pointerToString)
{
   252b8:	55                   	push   ebp
   252b9:	89 e5                	mov    ebp,esp
   252bb:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/utility.c:167
    uint8_t start=0, length=strlen(pointerToString);
   252be:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   252c2:	83 ec 0c             	sub    esp,0xc
   252c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   252c8:	e8 bb 1f 00 00       	call   27288 <strlen>
   252cd:	83 c4 10             	add    esp,0x10
   252d0:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/init/utility.c:168
    char* myPtr=pointerToString;
   252d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   252d6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:171
    
        // Trim.Start:
        while (start<length)
   252d9:	eb 44                	jmp    2531f <strtoupper+0x67>
/home/yogi/src/os/chrisOS/src/init/utility.c:173
        {
            if (myPtr[start]>='a' && myPtr[start]<='z')
   252db:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   252df:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   252e2:	01 d0                	add    eax,edx
   252e4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   252e7:	3c 60                	cmp    al,0x60
   252e9:	7e 2a                	jle    25315 <strtoupper+0x5d>
/home/yogi/src/os/chrisOS/src/init/utility.c:173 (discriminator 1)
   252eb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   252ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   252f2:	01 d0                	add    eax,edx
   252f4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   252f7:	3c 7a                	cmp    al,0x7a
   252f9:	7f 1a                	jg     25315 <strtoupper+0x5d>
/home/yogi/src/os/chrisOS/src/init/utility.c:174
                myPtr[start]-=32;
   252fb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   252ff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25302:	01 d0                	add    eax,edx
   25304:	0f b6 4d f7          	movzx  ecx,BYTE PTR [ebp-0x9]
   25308:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2530b:	01 ca                	add    edx,ecx
   2530d:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   25310:	83 ea 20             	sub    edx,0x20
   25313:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:175
            start++;
   25315:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   25319:	83 c0 01             	add    eax,0x1
   2531c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/init/utility.c:171
{
    uint8_t start=0, length=strlen(pointerToString);
    char* myPtr=pointerToString;
    
        // Trim.Start:
        while (start<length)
   2531f:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   25323:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
   25326:	72 b3                	jb     252db <strtoupper+0x23>
/home/yogi/src/os/chrisOS/src/init/utility.c:178
            if (myPtr[start]>='a' && myPtr[start]<='z')
                myPtr[start]-=32;
            start++;
        }

    return pointerToString;
   25328:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/init/utility.c:179
}
   2532b:	c9                   	leave  
   2532c:	c3                   	ret    

0002532d <printDumpedRegs>:
printDumpedRegs():
/home/yogi/src/os/chrisOS/src/init/utility.c:182

void printDumpedRegs()
{
   2532d:	55                   	push   ebp
   2532e:	89 e5                	mov    ebp,esp
   25330:	56                   	push   esi
   25331:	53                   	push   ebx
   25332:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:183
    uint32_t esp = exceptionSavedESP;
   25335:	a1 ec 01 12 00       	mov    eax,ds:0x1201ec
   2533a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:187
    uint8_t* lCSIPPtr;

    
    lCSIPPtr=(uint8_t*)(exceptionEIP);
   2533d:	a1 f8 01 12 00       	mov    eax,ds:0x1201f8
   25342:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:188
    printk("EAX=%08X\tEBX=%08X\tECX=%08X\tEDX=%08X\tEFL=%08X\n", exceptionAX, exceptionBX, exceptionCX, exceptionDX,exceptionFlags);
   25345:	8b 35 f0 01 12 00    	mov    esi,DWORD PTR ds:0x1201f0
   2534b:	8b 1d bc 01 12 00    	mov    ebx,DWORD PTR ds:0x1201bc
   25351:	8b 0d b8 01 12 00    	mov    ecx,DWORD PTR ds:0x1201b8
   25357:	8b 15 b4 01 12 00    	mov    edx,DWORD PTR ds:0x1201b4
   2535d:	a1 b0 01 12 00       	mov    eax,ds:0x1201b0
   25362:	83 ec 08             	sub    esp,0x8
   25365:	56                   	push   esi
   25366:	53                   	push   ebx
   25367:	51                   	push   ecx
   25368:	52                   	push   edx
   25369:	50                   	push   eax
   2536a:	68 d4 50 08 00       	push   0x850d4
   2536f:	e8 43 1d 00 00       	call   270b7 <printk>
   25374:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:189
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", exceptionBP, exceptionSI, exceptionDI, exceptionSavedESP);
   25377:	8b 1d ec 01 12 00    	mov    ebx,DWORD PTR ds:0x1201ec
   2537d:	8b 0d c4 01 12 00    	mov    ecx,DWORD PTR ds:0x1201c4
   25383:	8b 15 c0 01 12 00    	mov    edx,DWORD PTR ds:0x1201c0
   25389:	a1 c8 01 12 00       	mov    eax,ds:0x1201c8
   2538e:	83 ec 0c             	sub    esp,0xc
   25391:	53                   	push   ebx
   25392:	51                   	push   ecx
   25393:	52                   	push   edx
   25394:	50                   	push   eax
   25395:	68 04 51 08 00       	push   0x85104
   2539a:	e8 18 1d 00 00       	call   270b7 <printk>
   2539f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:190
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\tCR4=%08X\n", exceptionCR0, exceptionCR2, exceptionCR3, exceptionCR4);
   253a2:	8b 1d d4 01 12 00    	mov    ebx,DWORD PTR ds:0x1201d4
   253a8:	8b 0d d0 01 12 00    	mov    ecx,DWORD PTR ds:0x1201d0
   253ae:	8b 15 00 02 12 00    	mov    edx,DWORD PTR ds:0x120200
   253b4:	a1 cc 01 12 00       	mov    eax,ds:0x1201cc
   253b9:	83 ec 0c             	sub    esp,0xc
   253bc:	53                   	push   ebx
   253bd:	51                   	push   ecx
   253be:	52                   	push   edx
   253bf:	50                   	push   eax
   253c0:	68 2c 51 08 00       	push   0x8512c
   253c5:	e8 ed 1c 00 00       	call   270b7 <printk>
   253ca:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:191
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", exceptionDS, exceptionES, exceptionGS, exceptionFS);
   253cd:	8b 1d e0 01 12 00    	mov    ebx,DWORD PTR ds:0x1201e0
   253d3:	8b 0d e4 01 12 00    	mov    ecx,DWORD PTR ds:0x1201e4
   253d9:	8b 15 dc 01 12 00    	mov    edx,DWORD PTR ds:0x1201dc
   253df:	a1 d8 01 12 00       	mov    eax,ds:0x1201d8
   253e4:	83 ec 0c             	sub    esp,0xc
   253e7:	53                   	push   ebx
   253e8:	51                   	push   ecx
   253e9:	52                   	push   edx
   253ea:	50                   	push   eax
   253eb:	68 54 51 08 00       	push   0x85154
   253f0:	e8 c2 1c 00 00       	call   270b7 <printk>
   253f5:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:192
    printk("GDT=%08X\n",kernelGDT.base);
   253f8:	a1 4e 04 12 00       	mov    eax,ds:0x12044e
   253fd:	83 ec 08             	sub    esp,0x8
   25400:	50                   	push   eax
   25401:	68 79 51 08 00       	push   0x85179
   25406:	e8 ac 1c 00 00       	call   270b7 <printk>
   2540b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:193
    printk("CS:EIP = %04X:%08X, error code=%08X\n", exceptionCS, exceptionEIP, exceptionErrorCode);
   2540e:	8b 0d f4 01 12 00    	mov    ecx,DWORD PTR ds:0x1201f4
   25414:	8b 15 f8 01 12 00    	mov    edx,DWORD PTR ds:0x1201f8
   2541a:	a1 fc 01 12 00       	mov    eax,ds:0x1201fc
   2541f:	51                   	push   ecx
   25420:	52                   	push   edx
   25421:	50                   	push   eax
   25422:	68 84 51 08 00       	push   0x85184
   25427:	e8 8b 1c 00 00       	call   270b7 <printk>
   2542c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:194
          printk("Bytes at CS:EIP: ");
   2542f:	83 ec 0c             	sub    esp,0xc
   25432:	68 a9 51 08 00       	push   0x851a9
   25437:	e8 7b 1c 00 00       	call   270b7 <printk>
   2543c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:195
          for (int cnt=0;cnt<19;cnt++)
   2543f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   25446:	eb 23                	jmp    2546b <printDumpedRegs+0x13e>
/home/yogi/src/os/chrisOS/src/init/utility.c:196 (discriminator 3)
              printk("%02X ", lCSIPPtr[cnt]);
   25448:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2544b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2544e:	01 d0                	add    eax,edx
   25450:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   25453:	0f b6 c0             	movzx  eax,al
   25456:	83 ec 08             	sub    esp,0x8
   25459:	50                   	push   eax
   2545a:	68 bb 51 08 00       	push   0x851bb
   2545f:	e8 53 1c 00 00       	call   270b7 <printk>
   25464:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:195 (discriminator 3)
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\tCR4=%08X\n", exceptionCR0, exceptionCR2, exceptionCR3, exceptionCR4);
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", exceptionDS, exceptionES, exceptionGS, exceptionFS);
    printk("GDT=%08X\n",kernelGDT.base);
    printk("CS:EIP = %04X:%08X, error code=%08X\n", exceptionCS, exceptionEIP, exceptionErrorCode);
          printk("Bytes at CS:EIP: ");
          for (int cnt=0;cnt<19;cnt++)
   25467:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:195 (discriminator 1)
   2546b:	83 7d f0 12          	cmp    DWORD PTR [ebp-0x10],0x12
   2546f:	7e d7                	jle    25448 <printDumpedRegs+0x11b>
/home/yogi/src/os/chrisOS/src/init/utility.c:197
              printk("%02X ", lCSIPPtr[cnt]);
          printk("\n");
   25471:	83 ec 0c             	sub    esp,0xc
   25474:	68 c1 51 08 00       	push   0x851c1
   25479:	e8 39 1c 00 00       	call   270b7 <printk>
   2547e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:198
          printk ("Stack @ 0x%08x:0x%08X:\n",exceptionSS, esp);
   25481:	a1 e8 01 12 00       	mov    eax,ds:0x1201e8
   25486:	83 ec 04             	sub    esp,0x4
   25489:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2548c:	50                   	push   eax
   2548d:	68 c3 51 08 00       	push   0x851c3
   25492:	e8 20 1c 00 00       	call   270b7 <printk>
   25497:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:199
          for (int cnt=0;cnt<10;cnt++)
   2549a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   254a1:	eb 2b                	jmp    254ce <printDumpedRegs+0x1a1>
/home/yogi/src/os/chrisOS/src/init/utility.c:201 (discriminator 3)
          {
              printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
   254a3:	a1 a8 01 12 00       	mov    eax,ds:0x1201a8
   254a8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   254ab:	c1 e2 02             	shl    edx,0x2
   254ae:	01 d0                	add    eax,edx
   254b0:	8b 00                	mov    eax,DWORD PTR [eax]
   254b2:	83 ec 04             	sub    esp,0x4
   254b5:	50                   	push   eax
   254b6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   254b9:	68 db 51 08 00       	push   0x851db
   254be:	e8 f4 1b 00 00       	call   270b7 <printk>
   254c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:202 (discriminator 3)
              esp+=4;
   254c6:	83 45 f4 04          	add    DWORD PTR [ebp-0xc],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:199 (discriminator 3)
          printk("Bytes at CS:EIP: ");
          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
          printk("\n");
          printk ("Stack @ 0x%08x:0x%08X:\n",exceptionSS, esp);
          for (int cnt=0;cnt<10;cnt++)
   254ca:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:199 (discriminator 1)
   254ce:	83 7d ec 09          	cmp    DWORD PTR [ebp-0x14],0x9
   254d2:	7e cf                	jle    254a3 <printDumpedRegs+0x176>
/home/yogi/src/os/chrisOS/src/init/utility.c:206
              printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
              esp+=4;
          }


}
   254d4:	90                   	nop
   254d5:	8d 65 f8             	lea    esp,[ebp-0x8]
   254d8:	5b                   	pop    ebx
   254d9:	5e                   	pop    esi
   254da:	5d                   	pop    ebp
   254db:	c3                   	ret    

000254dc <printDebugRegs>:
printDebugRegs():
/home/yogi/src/os/chrisOS/src/init/utility.c:209

void printDebugRegs()
{
   254dc:	55                   	push   ebp
   254dd:	89 e5                	mov    ebp,esp
   254df:	56                   	push   esi
   254e0:	53                   	push   ebx
   254e1:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:210
    uint32_t esp = debugSavedESP;
   254e4:	a1 40 02 12 00       	mov    eax,ds:0x120240
   254e9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:213
    uint8_t* lCSIPPtr;

    lCSIPPtr=(uint8_t*)(debugEIP);
   254ec:	a1 50 02 12 00       	mov    eax,ds:0x120250
   254f1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:214
    printk("EAX=%08X\tEBX=%08X\tECX=%08X\tEDX=%08X\tEFL=%08X\n", debugAX, debugBX, debugCX, debugDX,debugFlags);
   254f4:	8b 35 44 02 12 00    	mov    esi,DWORD PTR ds:0x120244
   254fa:	8b 1d 10 02 12 00    	mov    ebx,DWORD PTR ds:0x120210
   25500:	8b 0d 0c 02 12 00    	mov    ecx,DWORD PTR ds:0x12020c
   25506:	8b 15 08 02 12 00    	mov    edx,DWORD PTR ds:0x120208
   2550c:	a1 04 02 12 00       	mov    eax,ds:0x120204
   25511:	83 ec 08             	sub    esp,0x8
   25514:	56                   	push   esi
   25515:	53                   	push   ebx
   25516:	51                   	push   ecx
   25517:	52                   	push   edx
   25518:	50                   	push   eax
   25519:	68 d4 50 08 00       	push   0x850d4
   2551e:	e8 94 1b 00 00       	call   270b7 <printk>
   25523:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:215
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", debugBP, debugSI, debugDI, debugSavedESP);
   25526:	8b 1d 40 02 12 00    	mov    ebx,DWORD PTR ds:0x120240
   2552c:	8b 0d 18 02 12 00    	mov    ecx,DWORD PTR ds:0x120218
   25532:	8b 15 14 02 12 00    	mov    edx,DWORD PTR ds:0x120214
   25538:	a1 1c 02 12 00       	mov    eax,ds:0x12021c
   2553d:	83 ec 0c             	sub    esp,0xc
   25540:	53                   	push   ebx
   25541:	51                   	push   ecx
   25542:	52                   	push   edx
   25543:	50                   	push   eax
   25544:	68 04 51 08 00       	push   0x85104
   25549:	e8 69 1b 00 00       	call   270b7 <printk>
   2554e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:216
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\n", debugCR0, debugCR3, debugCR4);
   25551:	8b 0d 28 02 12 00    	mov    ecx,DWORD PTR ds:0x120228
   25557:	8b 15 24 02 12 00    	mov    edx,DWORD PTR ds:0x120224
   2555d:	a1 20 02 12 00       	mov    eax,ds:0x120220
   25562:	51                   	push   ecx
   25563:	52                   	push   edx
   25564:	50                   	push   eax
   25565:	68 ed 51 08 00       	push   0x851ed
   2556a:	e8 48 1b 00 00       	call   270b7 <printk>
   2556f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:217
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", debugDS, debugES, debugGS, debugFS);
   25572:	8b 1d 34 02 12 00    	mov    ebx,DWORD PTR ds:0x120234
   25578:	8b 0d 38 02 12 00    	mov    ecx,DWORD PTR ds:0x120238
   2557e:	8b 15 30 02 12 00    	mov    edx,DWORD PTR ds:0x120230
   25584:	a1 2c 02 12 00       	mov    eax,ds:0x12022c
   25589:	83 ec 0c             	sub    esp,0xc
   2558c:	53                   	push   ebx
   2558d:	51                   	push   ecx
   2558e:	52                   	push   edx
   2558f:	50                   	push   eax
   25590:	68 54 51 08 00       	push   0x85154
   25595:	e8 1d 1b 00 00       	call   270b7 <printk>
   2559a:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:218
    printk("CS:EIP = %04X:%08X, error code=%08X\n", debugCS, debugEIP, debugErrorCode);
   2559d:	8b 0d 48 02 12 00    	mov    ecx,DWORD PTR ds:0x120248
   255a3:	8b 15 50 02 12 00    	mov    edx,DWORD PTR ds:0x120250
   255a9:	a1 4c 02 12 00       	mov    eax,ds:0x12024c
   255ae:	51                   	push   ecx
   255af:	52                   	push   edx
   255b0:	50                   	push   eax
   255b1:	68 84 51 08 00       	push   0x85184
   255b6:	e8 fc 1a 00 00       	call   270b7 <printk>
   255bb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:219
          printk("Bytes at CS:EIP: ");
   255be:	83 ec 0c             	sub    esp,0xc
   255c1:	68 a9 51 08 00       	push   0x851a9
   255c6:	e8 ec 1a 00 00       	call   270b7 <printk>
   255cb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:220
          for (int cnt=0;cnt<19;cnt++)
   255ce:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   255d5:	eb 23                	jmp    255fa <printDebugRegs+0x11e>
/home/yogi/src/os/chrisOS/src/init/utility.c:221 (discriminator 3)
              printk("%02X ", lCSIPPtr[cnt]);
   255d7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   255da:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   255dd:	01 d0                	add    eax,edx
   255df:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   255e2:	0f b6 c0             	movzx  eax,al
   255e5:	83 ec 08             	sub    esp,0x8
   255e8:	50                   	push   eax
   255e9:	68 bb 51 08 00       	push   0x851bb
   255ee:	e8 c4 1a 00 00       	call   270b7 <printk>
   255f3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:220 (discriminator 3)
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", debugBP, debugSI, debugDI, debugSavedESP);
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\n", debugCR0, debugCR3, debugCR4);
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", debugDS, debugES, debugGS, debugFS);
    printk("CS:EIP = %04X:%08X, error code=%08X\n", debugCS, debugEIP, debugErrorCode);
          printk("Bytes at CS:EIP: ");
          for (int cnt=0;cnt<19;cnt++)
   255f6:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:220 (discriminator 1)
   255fa:	83 7d f0 12          	cmp    DWORD PTR [ebp-0x10],0x12
   255fe:	7e d7                	jle    255d7 <printDebugRegs+0xfb>
/home/yogi/src/os/chrisOS/src/init/utility.c:222
              printk("%02X ", lCSIPPtr[cnt]);
          printk("\n");
   25600:	83 ec 0c             	sub    esp,0xc
   25603:	68 c1 51 08 00       	push   0x851c1
   25608:	e8 aa 1a 00 00       	call   270b7 <printk>
   2560d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:223
          printk ("Stack @ 0x%08x:0x%08X:\n",debugSS, esp);
   25610:	a1 3c 02 12 00       	mov    eax,ds:0x12023c
   25615:	83 ec 04             	sub    esp,0x4
   25618:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2561b:	50                   	push   eax
   2561c:	68 c3 51 08 00       	push   0x851c3
   25621:	e8 91 1a 00 00       	call   270b7 <printk>
   25626:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:224
          for (int cnt=0;cnt<10;cnt++)
   25629:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   25630:	eb 2b                	jmp    2565d <printDebugRegs+0x181>
/home/yogi/src/os/chrisOS/src/init/utility.c:226 (discriminator 3)
          {
              printk("\t0x%08X%: 0x%08X\n",esp, debugSavedStack[cnt]);
   25632:	a1 ac 01 12 00       	mov    eax,ds:0x1201ac
   25637:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   2563a:	c1 e2 02             	shl    edx,0x2
   2563d:	01 d0                	add    eax,edx
   2563f:	8b 00                	mov    eax,DWORD PTR [eax]
   25641:	83 ec 04             	sub    esp,0x4
   25644:	50                   	push   eax
   25645:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   25648:	68 db 51 08 00       	push   0x851db
   2564d:	e8 65 1a 00 00       	call   270b7 <printk>
   25652:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:227 (discriminator 3)
              esp+=4;
   25655:	83 45 f4 04          	add    DWORD PTR [ebp-0xc],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:224 (discriminator 3)
          printk("Bytes at CS:EIP: ");
          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
          printk("\n");
          printk ("Stack @ 0x%08x:0x%08X:\n",debugSS, esp);
          for (int cnt=0;cnt<10;cnt++)
   25659:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:224 (discriminator 1)
   2565d:	83 7d ec 09          	cmp    DWORD PTR [ebp-0x14],0x9
   25661:	7e cf                	jle    25632 <printDebugRegs+0x156>
/home/yogi/src/os/chrisOS/src/init/utility.c:231
              printk("\t0x%08X%: 0x%08X\n",esp, debugSavedStack[cnt]);
              esp+=4;
          }


}
   25663:	90                   	nop
   25664:	8d 65 f8             	lea    esp,[ebp-0x8]
   25667:	5b                   	pop    ebx
   25668:	5e                   	pop    esi
   25669:	5d                   	pop    ebp
   2566a:	c3                   	ret    

0002566b <reboot>:
reboot():
/home/yogi/src/os/chrisOS/src/init/utility.c:239
/* keyboard interface IO port: data and control
   READ:   status port
   WRITE:  control register */
 
void reboot(bool waitFirst)
{
   2566b:	55                   	push   ebp
   2566c:	89 e5                	mov    ebp,esp
   2566e:	83 ec 28             	sub    esp,0x28
   25671:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25674:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/init/utility.c:242
    uint8_t temp;
 
    if (waitFirst)
   25677:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   2567b:	74 21                	je     2569e <reboot+0x33>
/home/yogi/src/os/chrisOS/src/init/utility.c:244
    {
        puts("Rebooting ... ");
   2567d:	83 ec 0c             	sub    esp,0xc
   25680:	68 09 52 08 00       	push   0x85209
   25685:	e8 7c 29 ff ff       	call   18006 <puts>
   2568a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:245
        __asm__("sti\n");
   2568d:	fb                   	sti    
/home/yogi/src/os/chrisOS/src/init/utility.c:246
        wait(3000);
   2568e:	83 ec 0c             	sub    esp,0xc
   25691:	68 b8 0b 00 00       	push   0xbb8
   25696:	e8 5b 2c 00 00       	call   282f6 <wait>
   2569b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:248
    }
    __asm__ volatile ("cli"); /* disable all interrupts */
   2569e:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/init/utility.c:253
 
    /* Clear all keyboard buffers (output and command buffers) */
    do
    {
        temp = inb(KBRD_INTRFC); /* empty user data */
   2569f:	83 ec 0c             	sub    esp,0xc
   256a2:	6a 64                	push   0x64
   256a4:	e8 da f6 ff ff       	call   24d83 <inb>
   256a9:	83 c4 10             	add    esp,0x10
   256ac:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/init/utility.c:254
        if (check_flag(temp, KBRD_BIT_KDATA) != 0)
   256af:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   256b3:	83 e0 01             	and    eax,0x1
   256b6:	85 c0                	test   eax,eax
   256b8:	74 0d                	je     256c7 <reboot+0x5c>
/home/yogi/src/os/chrisOS/src/init/utility.c:255
            inb(KBRD_IO); /* empty keyboard data */
   256ba:	83 ec 0c             	sub    esp,0xc
   256bd:	6a 60                	push   0x60
   256bf:	e8 bf f6 ff ff       	call   24d83 <inb>
   256c4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:256
    } while (check_flag(temp, KBRD_BIT_UDATA) != 0);
   256c7:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   256cb:	83 e0 02             	and    eax,0x2
   256ce:	85 c0                	test   eax,eax
   256d0:	75 cd                	jne    2569f <reboot+0x34>
/home/yogi/src/os/chrisOS/src/init/utility.c:258
 
    outb(KBRD_INTRFC, KBRD_RESET); /* pulse CPU reset line */
   256d2:	83 ec 08             	sub    esp,0x8
   256d5:	68 fe 00 00 00       	push   0xfe
   256da:	6a 64                	push   0x64
   256dc:	e8 83 f6 ff ff       	call   24d64 <outb>
   256e1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:260 (discriminator 1)
loop:
    __asm__ volatile ("hlt"); /* if that didn't work, halt the CPU */
   256e4:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/init/utility.c:261 (discriminator 1)
    goto loop; /* if a NMI is received, halt again */
   256e5:	eb fd                	jmp    256e4 <reboot+0x79>

000256e7 <dumpKernelAddresses>:
dumpKernelAddresses():
/home/yogi/src/os/chrisOS/src/init/utility.c:265
}

void dumpKernelAddresses()
{
   256e7:	55                   	push   ebp
   256e8:	89 e5                	mov    ebp,esp
   256ea:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:266
printk("Kernel Variable List:\n");
   256ed:	83 ec 0c             	sub    esp,0xc
   256f0:	68 18 52 08 00       	push   0x85218
   256f5:	e8 bd 19 00 00       	call   270b7 <printk>
   256fa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:267
printk("\tKERNEL_OBJECT_BASE_ADDRESS=0x%08x\n",KERNEL_OBJECT_BASE_ADDRESS);
   256fd:	83 ec 08             	sub    esp,0x8
   25700:	68 00 00 15 00       	push   0x150000
   25705:	68 30 52 08 00       	push   0x85230
   2570a:	e8 a8 19 00 00       	call   270b7 <printk>
   2570f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:268
printk("\tE820_TABLE_ADDRESS=0x%08x (0x%08X)\n",E820_TABLE_ADDRESS);
   25712:	83 ec 08             	sub    esp,0x8
   25715:	68 00 00 15 00       	push   0x150000
   2571a:	68 54 52 08 00       	push   0x85254
   2571f:	e8 93 19 00 00       	call   270b7 <printk>
   25724:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:269
printk("\tMP_CONFIG_TABLE_ADDRESS=0x%08x\n",MP_CONFIG_TABLE_ADDRESS);
   25727:	83 ec 08             	sub    esp,0x8
   2572a:	68 b0 04 15 00       	push   0x1504b0
   2572f:	68 7c 52 08 00       	push   0x8527c
   25734:	e8 7e 19 00 00       	call   270b7 <printk>
   25739:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:270
printk("\tKEYBOARD_BUFFER_ADDRESS=0x%08x\n",KEYBOARD_BUFFER_ADDRESS);
   2573c:	83 ec 08             	sub    esp,0x8
   2573f:	68 b0 24 15 00       	push   0x1524b0
   25744:	68 a0 52 08 00       	push   0x852a0
   25749:	e8 69 19 00 00       	call   270b7 <printk>
   2574e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:271
printk("\tIDT_TABLE_ADDRESS=0x%08x\n",IDT_TABLE_ADDRESS);
   25751:	83 ec 08             	sub    esp,0x8
   25754:	68 00 30 15 00       	push   0x153000
   25759:	68 c1 52 08 00       	push   0x852c1
   2575e:	e8 54 19 00 00       	call   270b7 <printk>
   25763:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:272
printk("\tINIT_GDT_TABLE_ADDRESS=0x%08x\n",INIT_GDT_TABLE_ADDRESS);
   25766:	83 ec 08             	sub    esp,0x8
   25769:	68 00 40 15 00       	push   0x154000
   2576e:	68 dc 52 08 00       	push   0x852dc
   25773:	e8 3f 19 00 00       	call   270b7 <printk>
   25778:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:273
printk("\tTASK_TABLE_ADDRESS=0x%08x\n",TASK_TABLE_ADDRESS);
   2577b:	83 ec 08             	sub    esp,0x8
   2577e:	68 00 50 15 00       	push   0x155000
   25783:	68 fc 52 08 00       	push   0x852fc
   25788:	e8 2a 19 00 00       	call   270b7 <printk>
   2578d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:274
printk("\tTSS_TABLE_ADDRESS=0x%08x\n",TSS_TABLE_ADDRESS);
   25790:	83 ec 08             	sub    esp,0x8
   25793:	68 00 60 2e 00       	push   0x2e6000
   25798:	68 18 53 08 00       	push   0x85318
   2579d:	e8 15 19 00 00       	call   270b7 <printk>
   257a2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:275
printk("\tATA_MBR_ARRAY_ADDRESS=0x%08x\n",ATA_MBR_ARRAY_ADDRESS);
   257a5:	83 ec 08             	sub    esp,0x8
   257a8:	68 00 60 48 00       	push   0x486000
   257ad:	68 34 53 08 00       	push   0x85334
   257b2:	e8 00 19 00 00       	call   270b7 <printk>
   257b7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:276
printk("\tPCI_DEVICE_LIST_ADDRESS=0x%08x\n",PCI_DEVICE_LIST_ADDRESS);
   257ba:	83 ec 08             	sub    esp,0x8
   257bd:	68 00 70 48 00       	push   0x487000
   257c2:	68 54 53 08 00       	push   0x85354
   257c7:	e8 eb 18 00 00       	call   270b7 <printk>
   257cc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:277
printk("\tPCI_BRIDGE_LIST_ADDRESS=0x%08x\n",PCI_BRIDGE_LIST_ADDRESS);
   257cf:	83 ec 08             	sub    esp,0x8
   257d2:	68 00 70 49 00       	push   0x497000
   257d7:	68 78 53 08 00       	push   0x85378
   257dc:	e8 d6 18 00 00       	call   270b7 <printk>
   257e1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:278
printk("\tPCI_FUNCTION_LIST_ADDRESS=0x%08x\n",PCI_FUNCTION_LIST_ADDRESS);
   257e4:	83 ec 08             	sub    esp,0x8
   257e7:	68 00 70 4a 00       	push   0x4a7000
   257ec:	68 9c 53 08 00       	push   0x8539c
   257f1:	e8 c1 18 00 00       	call   270b7 <printk>
   257f6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:279
printk("\tGDT_PMODE_16BIT_TABLE_ADDRESS=0x%08x\n",GDT_PMODE_16BIT_TABLE_ADDRESS);
   257f9:	83 ec 08             	sub    esp,0x8
   257fc:	68 00 80 4a 00       	push   0x4a8000
   25801:	68 c0 53 08 00       	push   0x853c0
   25806:	e8 ac 18 00 00       	call   270b7 <printk>
   2580b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:280
printk("\tKERNEL_PAGE_DIR_ADDRESS=0x%08x\n",KERNEL_PAGE_DIR_ADDRESS);
   2580e:	83 ec 08             	sub    esp,0x8
   25811:	68 00 90 4a 00       	push   0x4a9000
   25816:	68 e8 53 08 00       	push   0x853e8
   2581b:	e8 97 18 00 00       	call   270b7 <printk>
   25820:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:281
printk("\tKERNEL_PAGE_TABLE_BASE_ADDRESS=0x%08x\n",KERNEL_PAGE_TABLE_BASE_ADDRESS);
   25823:	83 ec 08             	sub    esp,0x8
   25826:	68 00 b0 4b 00       	push   0x4bb000
   2582b:	68 0c 54 08 00       	push   0x8540c
   25830:	e8 82 18 00 00       	call   270b7 <printk>
   25835:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:282
printk("\tSAVED_STACK_FOR_EXCEPTIONS_ADDRESS=0x%08x\n",SAVED_STACK_FOR_EXCEPTIONS_ADDRESS);
   25838:	83 ec 08             	sub    esp,0x8
   2583b:	68 00 c0 8b 00       	push   0x8bc000
   25840:	68 34 54 08 00       	push   0x85434
   25845:	e8 6d 18 00 00       	call   270b7 <printk>
   2584a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:283
printk("\tSAVED_STACK_FOR_DEBUGGING_ADDRESS=0x%08x\n",SAVED_STACK_FOR_DEBUGGING_ADDRESS);
   2584d:	83 ec 08             	sub    esp,0x8
   25850:	68 00 e0 8b 00       	push   0x8be000
   25855:	68 60 54 08 00       	push   0x85460
   2585a:	e8 58 18 00 00       	call   270b7 <printk>
   2585f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:284
printk("\tCPU_APIC_REGISTER_REMAP_BASE_ADDRESS=0x%08x\n",CPU_APIC_REGISTER_REMAP_BASE_ADDRESS);
   25862:	83 ec 08             	sub    esp,0x8
   25865:	68 00 00 8c 00       	push   0x8c0000
   2586a:	68 8c 54 08 00       	push   0x8548c
   2586f:	e8 43 18 00 00       	call   270b7 <printk>
   25874:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:285
printk("\tCPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS=0x%08x\n",CPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS);
   25877:	83 ec 08             	sub    esp,0x8
   2587a:	68 00 10 8c 00       	push   0x8c1000
   2587f:	68 bc 54 08 00       	push   0x854bc
   25884:	e8 2e 18 00 00       	call   270b7 <printk>
   25889:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:286
printk("\tKERNEL_TICKS_SINCE_START_VARIABLE_ADDRESS=0x%08x\n",KERNEL_TICKS_SINCE_START_VARIABLE_ADDRESS);
   2588c:	83 ec 08             	sub    esp,0x8
   2588f:	68 04 10 8c 00       	push   0x8c1004
   25894:	68 ec 54 08 00       	push   0x854ec
   25899:	e8 19 18 00 00       	call   270b7 <printk>
   2589e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:287
printk("\tAHCI_ABAR_REMAPPED_ADDRESS=0x%08x\n",AHCI_ABAR_REMAPPED_ADDRESS);
   258a1:	83 ec 08             	sub    esp,0x8
   258a4:	68 00 20 8c 00       	push   0x8c2000
   258a9:	68 20 55 08 00       	push   0x85520
   258ae:	e8 04 18 00 00       	call   270b7 <printk>
   258b3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:288
printk("\tAHCI_PORT_BASE_REMAP_ADDRESS=0x%08x\n",AHCI_PORT_BASE_REMAP_ADDRESS);
   258b6:	83 ec 08             	sub    esp,0x8
   258b9:	68 00 20 90 00       	push   0x902000
   258be:	68 44 55 08 00       	push   0x85544
   258c3:	e8 ef 17 00 00       	call   270b7 <printk>
   258c8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:289
printk("\tAHCI_DISK_BUFFER_ADDRESS=0x%08x\n",AHCI_DISK_BUFFER_ADDRESS);
   258cb:	83 ec 08             	sub    esp,0x8
   258ce:	68 00 20 a4 00       	push   0xa42000
   258d3:	68 6c 55 08 00       	push   0x8556c
   258d8:	e8 da 17 00 00       	call   270b7 <printk>
   258dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:290
printk("\tATA_DEVICE_INFO_ADDRESS=0x%08x\n",ATA_DEVICE_INFO_ADDRESS);
   258e0:	83 ec 08             	sub    esp,0x8
   258e3:	68 00 20 b8 00       	push   0xb82000
   258e8:	68 90 55 08 00       	push   0x85590
   258ed:	e8 c5 17 00 00       	call   270b7 <printk>
   258f2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:291
printk("\tAHCI_CAPS_ADDRESS=0x%08x\n",AHCI_CAPS_ADDRESS);
   258f5:	83 ec 08             	sub    esp,0x8
   258f8:	68 20 6e b8 00       	push   0xb86e20
   258fd:	68 b1 55 08 00       	push   0x855b1
   25902:	e8 b0 17 00 00       	call   270b7 <printk>
   25907:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:292
printk("\tTSS_AVAILABLE_ADDRESS=0x%08x\n",TASK_AVAILABLE_ADDRESS);
   2590a:	83 ec 08             	sub    esp,0x8
   2590d:	68 40 bc b8 00       	push   0xb8bc40
   25912:	68 cc 55 08 00       	push   0x855cc
   25917:	e8 9b 17 00 00       	call   270b7 <printk>
   2591c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:293
printk("\tGDT_AVAILABLE_ADDRESS=0x%08x\n",GDT_AVAILABLE_ADDRESS);
   2591f:	83 ec 08             	sub    esp,0x8
   25922:	68 40 c4 b8 00       	push   0xb8c440
   25927:	68 ec 55 08 00       	push   0x855ec
   2592c:	e8 86 17 00 00       	call   270b7 <printk>
   25931:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:294
printk("\tEXEC_FILE_LOAD_INFO=0x%08x\n",EXEC_FILE_LOAD_INFO);
   25934:	83 ec 08             	sub    esp,0x8
   25937:	68 40 cc b8 00       	push   0xb8cc40
   2593c:	68 0b 56 08 00       	push   0x8560b
   25941:	e8 71 17 00 00       	call   270b7 <printk>
   25946:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:295
printk("\tAHCI_ABAR_ADDRESS=0x%08x\n",AHCI_ABAR_ADDRESS);
   25949:	83 ec 08             	sub    esp,0x8
   2594c:	68 e0 52 ba 00       	push   0xba52e0
   25951:	68 28 56 08 00       	push   0x85628
   25956:	e8 5c 17 00 00       	call   270b7 <printk>
   2595b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:296
printk("\tEND_OF_KERNEL_OBJECTS_ADDRESS=0x%08x\n",END_OF_KERNEL_OBJECTS_ADDRESS);
   2595e:	83 ec 08             	sub    esp,0x8
   25961:	68 e0 52 ca 00       	push   0xca52e0
   25966:	68 44 56 08 00       	push   0x85644
   2596b:	e8 47 17 00 00       	call   270b7 <printk>
   25970:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:297
}
   25973:	90                   	nop
   25974:	c9                   	leave  
   25975:	c3                   	ret    

00025976 <pauseDisplay>:
pauseDisplay():
/home/yogi/src/os/chrisOS/src/init/utility.c:300

bool pauseDisplay(bool offerToQuit)
{
   25976:	55                   	push   ebp
   25977:	89 e5                	mov    ebp,esp
   25979:	83 ec 28             	sub    esp,0x28
   2597c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2597f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/init/utility.c:301
    if (offerToQuit)
   25982:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   25986:	74 12                	je     2599a <pauseDisplay+0x24>
/home/yogi/src/os/chrisOS/src/init/utility.c:302
        printk("Press q to quit, any other key to continue ...");
   25988:	83 ec 0c             	sub    esp,0xc
   2598b:	68 6c 56 08 00       	push   0x8566c
   25990:	e8 22 17 00 00       	call   270b7 <printk>
   25995:	83 c4 10             	add    esp,0x10
   25998:	eb 10                	jmp    259aa <pauseDisplay+0x34>
/home/yogi/src/os/chrisOS/src/init/utility.c:304
    else
        printk("Press a key to continue ... ");
   2599a:	83 ec 0c             	sub    esp,0xc
   2599d:	68 9b 56 08 00       	push   0x8569b
   259a2:	e8 10 17 00 00       	call   270b7 <printk>
   259a7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:305
    char lPressedKey=waitForKeyboardKey();
   259aa:	e8 a3 b8 fe ff       	call   11252 <waitForKeyboardKey>
   259af:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/init/utility.c:306
    cursorMoveToX(0);
   259b2:	83 ec 0c             	sub    esp,0xc
   259b5:	6a 00                	push   0x0
   259b7:	e8 47 25 ff ff       	call   17f03 <cursorMoveToX>
   259bc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:307
    printk("                                           ");
   259bf:	83 ec 0c             	sub    esp,0xc
   259c2:	68 b8 56 08 00       	push   0x856b8
   259c7:	e8 eb 16 00 00       	call   270b7 <printk>
   259cc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:308
    cursorMoveToX(0);
   259cf:	83 ec 0c             	sub    esp,0xc
   259d2:	6a 00                	push   0x0
   259d4:	e8 2a 25 ff ff       	call   17f03 <cursorMoveToX>
   259d9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:309
    if (lPressedKey=='q' && offerToQuit)
   259dc:	80 7d f7 71          	cmp    BYTE PTR [ebp-0x9],0x71
   259e0:	75 0d                	jne    259ef <pauseDisplay+0x79>
/home/yogi/src/os/chrisOS/src/init/utility.c:309 (discriminator 1)
   259e2:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   259e6:	74 07                	je     259ef <pauseDisplay+0x79>
/home/yogi/src/os/chrisOS/src/init/utility.c:310
        return true;
   259e8:	b8 01 00 00 00       	mov    eax,0x1
   259ed:	eb 05                	jmp    259f4 <pauseDisplay+0x7e>
/home/yogi/src/os/chrisOS/src/init/utility.c:311
    return false;
   259ef:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:312
}
   259f4:	c9                   	leave  
   259f5:	c3                   	ret    

000259f6 <mallocTemp>:
mallocTemp():
/home/yogi/src/os/chrisOS/src/init/utility.c:316

int memPtr=0xe00000;
uintptr_t* mallocTemp(int size)
{
   259f6:	55                   	push   ebp
   259f7:	89 e5                	mov    ebp,esp
   259f9:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:317
    uintptr_t lRetVal = memPtr;
   259fc:	a1 a0 da 02 00       	mov    eax,ds:0x2daa0
   25a01:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:318
    memPtr+=size;
   25a04:	8b 15 a0 da 02 00    	mov    edx,DWORD PTR ds:0x2daa0
   25a0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25a0d:	01 d0                	add    eax,edx
   25a0f:	a3 a0 da 02 00       	mov    ds:0x2daa0,eax
/home/yogi/src/os/chrisOS/src/init/utility.c:319
    return (uintptr_t*)lRetVal;
   25a14:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/init/utility.c:320
   25a17:	c9                   	leave  
   25a18:	c3                   	ret    
   25a19:	66 90                	xchg   ax,ax
   25a1b:	90                   	nop

00025a1c <memcpy>:
memcpy():
/home/yogi/src/os/chrisOS/src/memcpy.c:12
 */
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time
void * memcpy(void *dest, const void *src, size_t n)
{
   25a1c:	55                   	push   ebp
   25a1d:	89 e5                	mov    ebp,esp
   25a1f:	83 ec 20             	sub    esp,0x20
/home/yogi/src/os/chrisOS/src/memcpy.c:15
    bool dw,dd;
    
    dd=n%4==0;
   25a22:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25a25:	83 e0 03             	and    eax,0x3
   25a28:	85 c0                	test   eax,eax
   25a2a:	0f 94 c0             	sete   al
   25a2d:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/chrisOS/src/memcpy.c:16
    dw=n%2==0;
   25a30:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25a33:	83 e0 01             	and    eax,0x1
   25a36:	85 c0                	test   eax,eax
   25a38:	0f 94 c0             	sete   al
   25a3b:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/chrisOS/src/memcpy.c:17
    if (dd)
   25a3e:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
   25a42:	74 7d                	je     25ac1 <memcpy+0xa5>
/home/yogi/src/os/chrisOS/src/memcpy.c:19
    {
        n /=4;
   25a44:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25a47:	c1 e8 02             	shr    eax,0x2
   25a4a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:20
        const uint32_t *f = src;
   25a4d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25a50:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:21
        uint32_t *t = dest;
   25a53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25a56:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:23

        if (f < t) {
   25a59:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   25a5c:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
   25a5f:	73 4b                	jae    25aac <memcpy+0x90>
/home/yogi/src/os/chrisOS/src/memcpy.c:24
                f += n;
   25a61:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25a64:	c1 e0 02             	shl    eax,0x2
   25a67:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:25
                t += n;
   25a6a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25a6d:	c1 e0 02             	shl    eax,0x2
   25a70:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:26
                while ( (n)-- > 0)
   25a73:	eb 12                	jmp    25a87 <memcpy+0x6b>
/home/yogi/src/os/chrisOS/src/memcpy.c:27
                        *--t = *--f;
   25a75:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
   25a79:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
   25a7d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   25a80:	8b 10                	mov    edx,DWORD PTR [eax]
   25a82:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   25a85:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/memcpy.c:26
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
   25a87:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25a8a:	8d 50 ff             	lea    edx,[eax-0x1]
   25a8d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25a90:	85 c0                	test   eax,eax
   25a92:	75 e1                	jne    25a75 <memcpy+0x59>
   25a94:	eb 23                	jmp    25ab9 <memcpy+0x9d>
/home/yogi/src/os/chrisOS/src/memcpy.c:30
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
   25a96:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   25a99:	8d 50 04             	lea    edx,[eax+0x4]
   25a9c:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   25a9f:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   25aa2:	8d 4a 04             	lea    ecx,[edx+0x4]
   25aa5:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
   25aa8:	8b 12                	mov    edx,DWORD PTR [edx]
   25aaa:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/memcpy.c:29
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
   25aac:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25aaf:	8d 50 ff             	lea    edx,[eax-0x1]
   25ab2:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25ab5:	85 c0                	test   eax,eax
   25ab7:	75 dd                	jne    25a96 <memcpy+0x7a>
/home/yogi/src/os/chrisOS/src/memcpy.c:31
                        *t++ = *f++;
        return dest;
   25ab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25abc:	e9 ea 00 00 00       	jmp    25bab <memcpy+0x18f>
/home/yogi/src/os/chrisOS/src/memcpy.c:33
    }
    else if (dw)
   25ac1:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
   25ac5:	74 79                	je     25b40 <memcpy+0x124>
/home/yogi/src/os/chrisOS/src/memcpy.c:35
    {
        n /=2;
   25ac7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25aca:	d1 e8                	shr    eax,1
   25acc:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:36
        const uint32_t *f = src;
   25acf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25ad2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:37
        uint32_t *t = dest;
   25ad5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25ad8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:39

        if (f < t) {
   25adb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25ade:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   25ae1:	73 4b                	jae    25b2e <memcpy+0x112>
/home/yogi/src/os/chrisOS/src/memcpy.c:40
                f += n;
   25ae3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25ae6:	c1 e0 02             	shl    eax,0x2
   25ae9:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:41
                t += n;
   25aec:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25aef:	c1 e0 02             	shl    eax,0x2
   25af2:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:42
                while ( (n)-- > 0)
   25af5:	eb 12                	jmp    25b09 <memcpy+0xed>
/home/yogi/src/os/chrisOS/src/memcpy.c:43
                        *--t = *--f;
   25af7:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
   25afb:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
   25aff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25b02:	8b 10                	mov    edx,DWORD PTR [eax]
   25b04:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25b07:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/memcpy.c:42
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
   25b09:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25b0c:	8d 50 ff             	lea    edx,[eax-0x1]
   25b0f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25b12:	85 c0                	test   eax,eax
   25b14:	75 e1                	jne    25af7 <memcpy+0xdb>
   25b16:	eb 23                	jmp    25b3b <memcpy+0x11f>
/home/yogi/src/os/chrisOS/src/memcpy.c:46
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
   25b18:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25b1b:	8d 50 04             	lea    edx,[eax+0x4]
   25b1e:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   25b21:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   25b24:	8d 4a 04             	lea    ecx,[edx+0x4]
   25b27:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
   25b2a:	8b 12                	mov    edx,DWORD PTR [edx]
   25b2c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/memcpy.c:45
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
   25b2e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25b31:	8d 50 ff             	lea    edx,[eax-0x1]
   25b34:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25b37:	85 c0                	test   eax,eax
   25b39:	75 dd                	jne    25b18 <memcpy+0xfc>
/home/yogi/src/os/chrisOS/src/memcpy.c:47
                        *t++ = *f++;
        return dest;
   25b3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25b3e:	eb 6b                	jmp    25bab <memcpy+0x18f>
/home/yogi/src/os/chrisOS/src/memcpy.c:51
    }
    else
    {
        const char *f = src;
   25b40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25b43:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:52
        char *t = dest;
   25b46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25b49:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:54

        if (f < t) {
   25b4c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   25b4f:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   25b52:	73 47                	jae    25b9b <memcpy+0x17f>
/home/yogi/src/os/chrisOS/src/memcpy.c:55
                f += n;
   25b54:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25b57:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:56
                t += n;
   25b5a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25b5d:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:57
                while (n-- > 0)
   25b60:	eb 13                	jmp    25b75 <memcpy+0x159>
/home/yogi/src/os/chrisOS/src/memcpy.c:58
                        *--t = *--f;
   25b62:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
   25b66:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
   25b6a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   25b6d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   25b70:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   25b73:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/memcpy.c:57
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
   25b75:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25b78:	8d 50 ff             	lea    edx,[eax-0x1]
   25b7b:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25b7e:	85 c0                	test   eax,eax
   25b80:	75 e0                	jne    25b62 <memcpy+0x146>
   25b82:	eb 24                	jmp    25ba8 <memcpy+0x18c>
/home/yogi/src/os/chrisOS/src/memcpy.c:61
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
   25b84:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   25b87:	8d 50 01             	lea    edx,[eax+0x1]
   25b8a:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   25b8d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   25b90:	8d 4a 01             	lea    ecx,[edx+0x1]
   25b93:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
   25b96:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   25b99:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/memcpy.c:60
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
   25b9b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25b9e:	8d 50 ff             	lea    edx,[eax-0x1]
   25ba1:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25ba4:	85 c0                	test   eax,eax
   25ba6:	75 dc                	jne    25b84 <memcpy+0x168>
/home/yogi/src/os/chrisOS/src/memcpy.c:62
                        *t++ = *f++;
        return dest;
   25ba8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/memcpy.c:64
    }
   25bab:	c9                   	leave  
   25bac:	c3                   	ret    
   25bad:	66 90                	xchg   ax,ax
   25baf:	90                   	nop

00025bb0 <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   25bb0:	55                   	push   ebp
   25bb1:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   25bb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25bb6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   25bbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25bc0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   25bc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25bc6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:51
}
   25bc8:	90                   	nop
   25bc9:	5d                   	pop    ebp
   25bca:	c3                   	ret    

00025bcb <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   25bcb:	55                   	push   ebp
   25bcc:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   25bce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25bd1:	8b 00                	mov    eax,DWORD PTR [eax]
   25bd3:	85 c0                	test   eax,eax
   25bd5:	75 0d                	jne    25be4 <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   25bd7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25bda:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   25bdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25be0:	89 10                	mov    DWORD PTR [eax],edx
   25be2:	eb 0e                	jmp    25bf2 <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   25be4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25be7:	8b 00                	mov    eax,DWORD PTR [eax]
   25be9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   25bec:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   25bef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   25bf2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25bf5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25bf8:	85 c0                	test   eax,eax
   25bfa:	75 0d                	jne    25c09 <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   25bfc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25bff:	8b 10                	mov    edx,DWORD PTR [eax]
   25c01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25c04:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   25c07:	eb 0d                	jmp    25c16 <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   25c09:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25c0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25c0f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   25c12:	8b 12                	mov    edx,DWORD PTR [edx]
   25c14:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
}
   25c16:	90                   	nop
   25c17:	5d                   	pop    ebp
   25c18:	c3                   	ret    

00025c19 <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   25c19:	55                   	push   ebp
   25c1a:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   25c1c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25c1f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   25c22:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   25c24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25c27:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   25c2a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25c2d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   25c30:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25c33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25c36:	85 c0                	test   eax,eax
   25c38:	75 0b                	jne    25c45 <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   25c3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25c3d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   25c40:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   25c43:	eb 0b                	jmp    25c50 <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   25c45:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25c48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25c4b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   25c4e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   25c50:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25c53:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   25c56:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:86
}
   25c59:	90                   	nop
   25c5a:	5d                   	pop    ebp
   25c5b:	c3                   	ret    

00025c5c <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   25c5c:	55                   	push   ebp
   25c5d:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   25c5f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25c62:	8b 10                	mov    edx,DWORD PTR [eax]
   25c64:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25c67:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   25c69:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25c6c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   25c6f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   25c72:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25c75:	8b 00                	mov    eax,DWORD PTR [eax]
   25c77:	85 c0                	test   eax,eax
   25c79:	75 0a                	jne    25c85 <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   25c7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25c7e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   25c81:	89 10                	mov    DWORD PTR [eax],edx
   25c83:	eb 0b                	jmp    25c90 <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   25c85:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25c88:	8b 00                	mov    eax,DWORD PTR [eax]
   25c8a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   25c8d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   25c90:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25c93:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   25c96:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:103
}
   25c98:	90                   	nop
   25c99:	5d                   	pop    ebp
   25c9a:	c3                   	ret    

00025c9b <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   25c9b:	55                   	push   ebp
   25c9c:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   25c9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25ca1:	8b 00                	mov    eax,DWORD PTR [eax]
   25ca3:	85 c0                	test   eax,eax
   25ca5:	75 26                	jne    25ccd <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   25ca7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25caa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   25cad:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   25caf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25cb2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   25cb5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   25cb8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25cbb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   25cc1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25cc4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   25ccb:	eb 14                	jmp    25ce1 <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   25ccd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25cd0:	8b 00                	mov    eax,DWORD PTR [eax]
   25cd2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   25cd5:	50                   	push   eax
   25cd6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   25cd9:	e8 7e ff ff ff       	call   25c5c <fat_list_insert_before>
   25cde:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
}
   25ce1:	90                   	nop
   25ce2:	c9                   	leave  
   25ce3:	c3                   	ret    

00025ce4 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   25ce4:	55                   	push   ebp
   25ce5:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   25ce7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25cea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25ced:	85 c0                	test   eax,eax
   25cef:	75 10                	jne    25d01 <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   25cf1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   25cf4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   25cf7:	e8 9f ff ff ff       	call   25c9b <fat_list_insert_first>
   25cfc:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   25cff:	eb 15                	jmp    25d16 <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   25d01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25d04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25d07:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   25d0a:	50                   	push   eax
   25d0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   25d0e:	e8 06 ff ff ff       	call   25c19 <fat_list_insert_after>
   25d13:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
}
   25d16:	90                   	nop
   25d17:	c9                   	leave  
   25d18:	c3                   	ret    

00025d19 <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   25d19:	55                   	push   ebp
   25d1a:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   25d1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25d1f:	8b 00                	mov    eax,DWORD PTR [eax]
   25d21:	85 c0                	test   eax,eax
   25d23:	0f 94 c0             	sete   al
   25d26:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:143
}
   25d29:	5d                   	pop    ebp
   25d2a:	c3                   	ret    

00025d2b <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   25d2b:	55                   	push   ebp
   25d2c:	89 e5                	mov    ebp,esp
   25d2e:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   25d31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25d34:	8b 00                	mov    eax,DWORD PTR [eax]
   25d36:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:154
    if (node)
   25d39:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   25d3d:	74 0e                	je     25d4d <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   25d3f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   25d42:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   25d45:	e8 81 fe ff ff       	call   25bcb <fat_list_remove>
   25d4a:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:157

    return node;
   25d4d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:158
}
   25d50:	c9                   	leave  
   25d51:	c3                   	ret    

00025d52 <processELFDynamicSection>:
processELFDynamicSection():
/home/yogi/src/os/chrisOS/src/newloader.c:19
uint32_t libLoadOffset=LIBRARY_BASE_LOAD_ADDRESS;
extern int kExecLoadCount;
extern elfInfo_t* KERNEL_DATA_SECTION kExecLoadInfo;

void processELFDynamicSection(elfInfo_t* elfInfo)
{
   25d52:	55                   	push   ebp
   25d53:	89 e5                	mov    ebp,esp
   25d55:	57                   	push   edi
   25d56:	53                   	push   ebx
   25d57:	83 c4 80             	add    esp,0xffffff80
/home/yogi/src/os/chrisOS/src/newloader.c:20
    Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;
   25d5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25d5d:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   25d63:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/newloader.c:23

    //Next process the rest of the dynamic section entries
    elfInfo->dynamicInfo.neededCount=0;
   25d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25d69:	c7 80 a0 18 00 00 00 	mov    DWORD PTR [eax+0x18a0],0x0
   25d70:	00 00 00 
/home/yogi/src/os/chrisOS/src/newloader.c:24
    for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   25d73:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   25d7a:	e9 61 04 00 00       	jmp    261e0 <processELFDynamicSection+0x48e>
/home/yogi/src/os/chrisOS/src/newloader.c:26
    {
        switch (dyn[cnt].d_tag)
   25d7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25d82:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   25d89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25d8c:	01 d0                	add    eax,edx
   25d8e:	8b 00                	mov    eax,DWORD PTR [eax]
   25d90:	83 f8 1e             	cmp    eax,0x1e
   25d93:	0f 87 3f 04 00 00    	ja     261d8 <processELFDynamicSection+0x486>
   25d99:	8b 04 85 1c 59 08 00 	mov    eax,DWORD PTR [eax*4+0x8591c]
   25da0:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/newloader.c:30
        {
            //DT_NEEDED is a library which we need to load
            case DT_NEEDED:
                printk("ELF at: 0x%08X, copy to: 0x%08X, neededCount=0x%08X\n",elfInfo, elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount],elfInfo->dynamicInfo.neededCount);
   25da2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25da5:	8b 80 a0 18 00 00    	mov    eax,DWORD PTR [eax+0x18a0]
   25dab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   25dae:	8b 92 a0 18 00 00    	mov    edx,DWORD PTR [edx+0x18a0]
   25db4:	c1 e2 08             	shl    edx,0x8
   25db7:	8d 8a 50 0e 00 00    	lea    ecx,[edx+0xe50]
   25dbd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   25dc0:	01 ca                	add    edx,ecx
   25dc2:	83 c2 04             	add    edx,0x4
   25dc5:	50                   	push   eax
   25dc6:	52                   	push   edx
   25dc7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   25dca:	68 00 58 08 00       	push   0x85800
   25dcf:	e8 e3 12 00 00       	call   270b7 <printk>
   25dd4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:31
                strcpy(elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount++],(char*)(elfInfo->dynamicInfo.strTableAddress+dyn[cnt].d_un.d_ptr));
   25dd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25dda:	8b 90 b8 18 00 00    	mov    edx,DWORD PTR [eax+0x18b8]
   25de0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25de3:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
   25dea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25ded:	01 c8                	add    eax,ecx
   25def:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25df2:	01 d0                	add    eax,edx
   25df4:	89 c3                	mov    ebx,eax
   25df6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25df9:	8b 80 a0 18 00 00    	mov    eax,DWORD PTR [eax+0x18a0]
   25dff:	8d 48 01             	lea    ecx,[eax+0x1]
   25e02:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   25e05:	89 8a a0 18 00 00    	mov    DWORD PTR [edx+0x18a0],ecx
   25e0b:	c1 e0 08             	shl    eax,0x8
   25e0e:	8d 90 50 0e 00 00    	lea    edx,[eax+0xe50]
   25e14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25e17:	01 d0                	add    eax,edx
   25e19:	83 c0 04             	add    eax,0x4
   25e1c:	83 ec 08             	sub    esp,0x8
   25e1f:	53                   	push   ebx
   25e20:	50                   	push   eax
   25e21:	e8 f2 13 00 00       	call   27218 <strcpy>
   25e26:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:32
                char fileName[100]="/";
   25e29:	c7 45 84 2f 00 00 00 	mov    DWORD PTR [ebp-0x7c],0x2f
   25e30:	8d 55 88             	lea    edx,[ebp-0x78]
   25e33:	b8 00 00 00 00       	mov    eax,0x0
   25e38:	b9 18 00 00 00       	mov    ecx,0x18
   25e3d:	89 d7                	mov    edi,edx
   25e3f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
/home/yogi/src/os/chrisOS/src/newloader.c:33
                strcat(fileName,elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount-1]);
   25e41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25e44:	8b 80 a0 18 00 00    	mov    eax,DWORD PTR [eax+0x18a0]
   25e4a:	83 e8 01             	sub    eax,0x1
   25e4d:	c1 e0 08             	shl    eax,0x8
   25e50:	8d 90 50 0e 00 00    	lea    edx,[eax+0xe50]
   25e56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25e59:	01 d0                	add    eax,edx
   25e5b:	83 c0 04             	add    eax,0x4
   25e5e:	83 ec 08             	sub    esp,0x8
   25e61:	50                   	push   eax
   25e62:	8d 45 84             	lea    eax,[ebp-0x7c]
   25e65:	50                   	push   eax
   25e66:	e8 c5 12 00 00       	call   27130 <strcat>
   25e6b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:34
                printd(DEBUG_ELF_LOADER,"Found NEEDED, library name='%s', orig name='%s'\n",fileName,elfInfo->dynamicInfo.strTableAddress+dyn[cnt].d_un.d_ptr);
   25e6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25e71:	8b 90 b8 18 00 00    	mov    edx,DWORD PTR [eax+0x18b8]
   25e77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25e7a:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
   25e81:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25e84:	01 c8                	add    eax,ecx
   25e86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25e89:	01 d0                	add    eax,edx
   25e8b:	50                   	push   eax
   25e8c:	8d 45 84             	lea    eax,[ebp-0x7c]
   25e8f:	50                   	push   eax
   25e90:	68 38 58 08 00       	push   0x85838
   25e95:	68 00 02 00 00       	push   0x200
   25e9a:	e8 38 12 00 00       	call   270d7 <printd>
   25e9f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:35
                if (kDebugLevel&DEBUG_ELF_LOADER)
   25ea2:	a1 38 03 12 00       	mov    eax,ds:0x120338
   25ea7:	25 00 02 00 00       	and    eax,0x200
   25eac:	85 c0                	test   eax,eax
   25eae:	74 1e                	je     25ece <processELFDynamicSection+0x17c>
/home/yogi/src/os/chrisOS/src/newloader.c:37
                {
                    printd(DEBUG_ELF_LOADER,"loadElf: Calling loadElf again to load '%s' ... press a key to continue\n",&fileName);
   25eb0:	83 ec 04             	sub    esp,0x4
   25eb3:	8d 45 84             	lea    eax,[ebp-0x7c]
   25eb6:	50                   	push   eax
   25eb7:	68 6c 58 08 00       	push   0x8586c
   25ebc:	68 00 02 00 00       	push   0x200
   25ec1:	e8 11 12 00 00       	call   270d7 <printd>
   25ec6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:38
                    waitForKeyboardKey();
   25ec9:	e8 84 b3 fe ff       	call   11252 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/newloader.c:40
                }
                void* fPtr=fopen(fileName, "r");
   25ece:	83 ec 08             	sub    esp,0x8
   25ed1:	68 b5 58 08 00       	push   0x858b5
   25ed6:	8d 45 84             	lea    eax,[ebp-0x7c]
   25ed9:	50                   	push   eax
   25eda:	e8 fe 74 ff ff       	call   1d3dd <fl_fopen>
   25edf:	83 c4 10             	add    esp,0x10
   25ee2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/newloader.c:41
                if (fPtr==0)
   25ee5:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   25ee9:	75 23                	jne    25f0e <processELFDynamicSection+0x1bc>
/home/yogi/src/os/chrisOS/src/newloader.c:43
                {
                    printk("Error opening file '%s', cannot exec\n",fileName);
   25eeb:	83 ec 08             	sub    esp,0x8
   25eee:	8d 45 84             	lea    eax,[ebp-0x7c]
   25ef1:	50                   	push   eax
   25ef2:	68 b8 58 08 00       	push   0x858b8
   25ef7:	e8 bb 11 00 00       	call   270b7 <printk>
   25efc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:44
                    elfInfo->loadCompleted=false;
   25eff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25f02:	c6 80 d4 18 00 00 00 	mov    BYTE PTR [eax+0x18d4],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:45
                    return;
   25f09:	e9 e4 02 00 00       	jmp    261f2 <processELFDynamicSection+0x4a0>
/home/yogi/src/os/chrisOS/src/newloader.c:47
                }   
                elfInfo->dynamicInfo.neededExecLoadNum[elfInfo->dynamicInfo.neededPtr++]=kExecLoadCount;
   25f0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25f11:	8b 80 54 18 00 00    	mov    eax,DWORD PTR [eax+0x1854]
   25f17:	8d 48 01             	lea    ecx,[eax+0x1]
   25f1a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   25f1d:	89 8a 54 18 00 00    	mov    DWORD PTR [edx+0x1854],ecx
   25f23:	8b 0d 04 04 12 00    	mov    ecx,DWORD PTR ds:0x120404
   25f29:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   25f2c:	05 14 06 00 00       	add    eax,0x614
   25f31:	89 4c 82 08          	mov    DWORD PTR [edx+eax*4+0x8],ecx
/home/yogi/src/os/chrisOS/src/newloader.c:48
                elfInfo_t* elfLibPtr=&kExecLoadInfo[kExecLoadCount++];
   25f35:	8b 0d 00 04 12 00    	mov    ecx,DWORD PTR ds:0x120400
   25f3b:	a1 04 04 12 00       	mov    eax,ds:0x120404
   25f40:	8d 50 01             	lea    edx,[eax+0x1]
   25f43:	89 15 04 04 12 00    	mov    DWORD PTR ds:0x120404,edx
   25f49:	69 c0 d8 18 00 00    	imul   eax,eax,0x18d8
   25f4f:	01 c8                	add    eax,ecx
   25f51:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/newloader.c:49
                loadElf(fPtr,elfLibPtr,true);
   25f54:	83 ec 04             	sub    esp,0x4
   25f57:	6a 01                	push   0x1
   25f59:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   25f5c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   25f5f:	e8 62 08 00 00       	call   267c6 <loadElf>
   25f64:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:50
                fclose(fPtr);
   25f67:	83 ec 0c             	sub    esp,0xc
   25f6a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   25f6d:	e8 9c 78 ff ff       	call   1d80e <fl_fclose>
   25f72:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:51
                if (!elfLibPtr->loadCompleted)
   25f75:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   25f78:	0f b6 80 d4 18 00 00 	movzx  eax,BYTE PTR [eax+0x18d4]
   25f7f:	83 f0 01             	xor    eax,0x1
   25f82:	84 c0                	test   al,al
   25f84:	0f 84 51 02 00 00    	je     261db <processELFDynamicSection+0x489>
/home/yogi/src/os/chrisOS/src/newloader.c:53
                {
                    printd(DEBUG_ELF_LOADER,"EXEC: processELFDynamicSection ... loading library failed.");
   25f8a:	83 ec 08             	sub    esp,0x8
   25f8d:	68 e0 58 08 00       	push   0x858e0
   25f92:	68 00 02 00 00       	push   0x200
   25f97:	e8 3b 11 00 00       	call   270d7 <printd>
   25f9c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:54
                    elfInfo->loadCompleted=false;
   25f9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25fa2:	c6 80 d4 18 00 00 00 	mov    BYTE PTR [eax+0x18d4],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:55
                    return;
   25fa9:	90                   	nop
   25faa:	e9 43 02 00 00       	jmp    261f2 <processELFDynamicSection+0x4a0>
/home/yogi/src/os/chrisOS/src/newloader.c:59
                }
                break;
            case DT_PLTRELSZ:
                elfInfo->dynamicInfo.pltGOTTableTableSize=dyn[cnt].d_un.d_val;
   25faf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25fb2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   25fb9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25fbc:	01 d0                	add    eax,edx
   25fbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25fc1:	89 c2                	mov    edx,eax
   25fc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25fc6:	89 90 98 18 00 00    	mov    DWORD PTR [eax+0x1898],edx
/home/yogi/src/os/chrisOS/src/newloader.c:60
                break;
   25fcc:	e9 0b 02 00 00       	jmp    261dc <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:62
            case DT_PLTGOT:
                elfInfo->dynamicInfo.pltGOTTableAddress=dyn[cnt].d_un.d_ptr;
   25fd1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25fd4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   25fdb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25fde:	01 d0                	add    eax,edx
   25fe0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   25fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25fe6:	89 90 b0 18 00 00    	mov    DWORD PTR [eax+0x18b0],edx
/home/yogi/src/os/chrisOS/src/newloader.c:63
                break;
   25fec:	e9 eb 01 00 00       	jmp    261dc <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:65
            case DT_HASH:
                elfInfo->dynamicInfo.hashTableAddress=dyn[cnt].d_un.d_ptr;
   25ff1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25ff4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   25ffb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25ffe:	01 d0                	add    eax,edx
   26000:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26006:	89 90 b4 18 00 00    	mov    DWORD PTR [eax+0x18b4],edx
/home/yogi/src/os/chrisOS/src/newloader.c:66
                break;
   2600c:	e9 cb 01 00 00       	jmp    261dc <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:74
                break;
            case DT_SYMTAB:
                //Already found it above
                break;
            case DT_RELA:
                elfInfo->dynamicInfo.relATableAddress=dyn[cnt].d_un.d_ptr;
   26011:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26014:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   2601b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2601e:	01 d0                	add    eax,edx
   26020:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26023:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26026:	89 90 c0 18 00 00    	mov    DWORD PTR [eax+0x18c0],edx
/home/yogi/src/os/chrisOS/src/newloader.c:75
                break;
   2602c:	e9 ab 01 00 00       	jmp    261dc <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:77
            case DT_RELASZ:
                elfInfo->dynamicInfo.relATableSize=dyn[cnt].d_un.d_val;
   26031:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26034:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   2603b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2603e:	01 d0                	add    eax,edx
   26040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   26043:	89 c2                	mov    edx,eax
   26045:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26048:	89 90 84 18 00 00    	mov    DWORD PTR [eax+0x1884],edx
/home/yogi/src/os/chrisOS/src/newloader.c:78
                break;
   2604e:	e9 89 01 00 00       	jmp    261dc <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:80
            case DT_RELAENT:
                elfInfo->dynamicInfo.relAEntrySize=dyn[cnt].d_un.d_val;
   26053:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26056:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   2605d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26060:	01 d0                	add    eax,edx
   26062:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   26065:	89 c2                	mov    edx,eax
   26067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2606a:	89 90 88 18 00 00    	mov    DWORD PTR [eax+0x1888],edx
/home/yogi/src/os/chrisOS/src/newloader.c:81
                break;
   26070:	e9 67 01 00 00       	jmp    261dc <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:83
            case DT_STRSZ:
                elfInfo->dynamicInfo.strTableSize=dyn[cnt].d_un.d_val;
   26075:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   2607f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26082:	01 d0                	add    eax,edx
   26084:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   26087:	89 c2                	mov    edx,eax
   26089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2608c:	89 90 8c 18 00 00    	mov    DWORD PTR [eax+0x188c],edx
/home/yogi/src/os/chrisOS/src/newloader.c:84
                break;
   26092:	e9 45 01 00 00       	jmp    261dc <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:86
            case DT_SYMENT:
                elfInfo->dynamicInfo.symEntrySize=dyn[cnt].d_un.d_val;
   26097:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2609a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   260a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   260a4:	01 d0                	add    eax,edx
   260a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   260a9:	89 c2                	mov    edx,eax
   260ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   260ae:	89 90 90 18 00 00    	mov    DWORD PTR [eax+0x1890],edx
/home/yogi/src/os/chrisOS/src/newloader.c:87
                break;
   260b4:	e9 23 01 00 00       	jmp    261dc <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:89
            case DT_INIT:
                elfInfo->dynamicInfo.initFunctionAddress=dyn[cnt].d_un.d_ptr;
   260b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   260bc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   260c3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   260c6:	01 d0                	add    eax,edx
   260c8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   260cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   260ce:	89 90 c4 18 00 00    	mov    DWORD PTR [eax+0x18c4],edx
/home/yogi/src/os/chrisOS/src/newloader.c:90
                elfInfo->dynamicInfo.initFunctionAddress+=libLoadOffset;
   260d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   260d7:	8b 90 c4 18 00 00    	mov    edx,DWORD PTR [eax+0x18c4]
   260dd:	a1 a4 da 02 00       	mov    eax,ds:0x2daa4
   260e2:	01 c2                	add    edx,eax
   260e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   260e7:	89 90 c4 18 00 00    	mov    DWORD PTR [eax+0x18c4],edx
/home/yogi/src/os/chrisOS/src/newloader.c:91
                break;
   260ed:	e9 ea 00 00 00       	jmp    261dc <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:93
            case DT_FINI:
                elfInfo->dynamicInfo.termFunctionAddress=dyn[cnt].d_un.d_ptr;
   260f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   260f5:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   260fc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   260ff:	01 d0                	add    eax,edx
   26101:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26107:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:94
                elfInfo->dynamicInfo.termFunctionAddress+=libLoadOffset;
   2610d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26110:	8b 90 c8 18 00 00    	mov    edx,DWORD PTR [eax+0x18c8]
   26116:	a1 a4 da 02 00       	mov    eax,ds:0x2daa4
   2611b:	01 c2                	add    edx,eax
   2611d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26120:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:95
                break;
   26126:	e9 b1 00 00 00       	jmp    261dc <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:105
                //Can't find the relocation section this way, using section headers
                //elfInfo->dynamicInfo.relTableAddress=dyn[cnt].d_un.d_ptr;
                //printk("%s: Found DT_REL, address=0x%08X (0x%08X)\n",isLibrary?"library":"executable",dyn[cnt].d_un.d_ptr,elfInfo->dynamicInfo.relTableAddress);
                break;
            case DT_RELSZ:
                elfInfo->dynamicInfo.relTableSize=dyn[cnt].d_un.d_val;
   2612b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2612e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26135:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26138:	01 d0                	add    eax,edx
   2613a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2613d:	89 c2                	mov    edx,eax
   2613f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26142:	89 90 94 18 00 00    	mov    DWORD PTR [eax+0x1894],edx
/home/yogi/src/os/chrisOS/src/newloader.c:106
                break;
   26148:	e9 8f 00 00 00       	jmp    261dc <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:108
            case DT_RELENT:
                elfInfo->dynamicInfo.relEntrySize=dyn[cnt].d_un.d_val;
   2614d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26150:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26157:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2615a:	01 d0                	add    eax,edx
   2615c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2615f:	89 c2                	mov    edx,eax
   26161:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26164:	89 90 9c 18 00 00    	mov    DWORD PTR [eax+0x189c],edx
/home/yogi/src/os/chrisOS/src/newloader.c:109
                break;
   2616a:	eb 70                	jmp    261dc <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:121
            case DT_JMPREL:
                break;
            case DT_BIND_NOW:
                break;
            case DT_INIT_ARRAY:
                elfInfo->dynamicInfo.initFunctionAddress=dyn[cnt].d_un.d_ptr;
   2616c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2616f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26176:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26179:	01 d0                	add    eax,edx
   2617b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   2617e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26181:	89 90 c4 18 00 00    	mov    DWORD PTR [eax+0x18c4],edx
/home/yogi/src/os/chrisOS/src/newloader.c:122
                elfInfo->dynamicInfo.initFunctionAddress+=libLoadOffset;
   26187:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2618a:	8b 90 c4 18 00 00    	mov    edx,DWORD PTR [eax+0x18c4]
   26190:	a1 a4 da 02 00       	mov    eax,ds:0x2daa4
   26195:	01 c2                	add    edx,eax
   26197:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2619a:	89 90 c4 18 00 00    	mov    DWORD PTR [eax+0x18c4],edx
/home/yogi/src/os/chrisOS/src/newloader.c:123
                break;
   261a0:	eb 3a                	jmp    261dc <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:125
            case DT_FINI_ARRAY:
                elfInfo->dynamicInfo.termFunctionAddress=dyn[cnt].d_un.d_ptr;
   261a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   261a5:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   261ac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   261af:	01 d0                	add    eax,edx
   261b1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   261b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   261b7:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:126
                elfInfo->dynamicInfo.termFunctionAddress+=libLoadOffset;
   261bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   261c0:	8b 90 c8 18 00 00    	mov    edx,DWORD PTR [eax+0x18c8]
   261c6:	a1 a4 da 02 00       	mov    eax,ds:0x2daa4
   261cb:	01 c2                	add    edx,eax
   261cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   261d0:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:127
                break;
   261d6:	eb 04                	jmp    261dc <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:135
            case DT_FINI_ARRAYSZ:
                break;
            case DT_FLAGS:
                break;
            default:
                break;
   261d8:	90                   	nop
   261d9:	eb 01                	jmp    261dc <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:57
                {
                    printd(DEBUG_ELF_LOADER,"EXEC: processELFDynamicSection ... loading library failed.");
                    elfInfo->loadCompleted=false;
                    return;
                }
                break;
   261db:	90                   	nop
/home/yogi/src/os/chrisOS/src/newloader.c:24
{
    Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;

    //Next process the rest of the dynamic section entries
    elfInfo->dynamicInfo.neededCount=0;
    for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   261dc:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:24 (discriminator 1)
   261e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   261e3:	8b 80 4c 0e 00 00    	mov    eax,DWORD PTR [eax+0xe4c]
   261e9:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   261ec:	0f 8f 8d fb ff ff    	jg     25d7f <processELFDynamicSection+0x2d>
/home/yogi/src/os/chrisOS/src/newloader.c:139
            default:
                break;
        }
    }

}
   261f2:	8d 65 f8             	lea    esp,[ebp-0x8]
   261f5:	5b                   	pop    ebx
   261f6:	5f                   	pop    edi
   261f7:	5d                   	pop    ebp
   261f8:	c3                   	ret    

000261f9 <loadSections>:
loadSections():
/home/yogi/src/os/chrisOS/src/newloader.c:142

void loadSections(void* file,elfInfo_t* elfInfo, bool isLibrary)
{
   261f9:	55                   	push   ebp
   261fa:	89 e5                	mov    ebp,esp
   261fc:	53                   	push   ebx
   261fd:	83 ec 24             	sub    esp,0x24
   26200:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26203:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/newloader.c:146
    uint8_t* loadAddress;

    //Go to the beginning of the file and get the elf header
    fl_fseek(file, 0, SEEK_SET);
   26206:	83 ec 04             	sub    esp,0x4
   26209:	6a 00                	push   0x0
   2620b:	6a 00                	push   0x0
   2620d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26210:	e8 b4 79 ff ff       	call   1dbc9 <fl_fseek>
   26215:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:147
    fl_fread(&elfInfo->hdr, sizeof(elfInfo->hdr),1,file);
   26218:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2621b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2621e:	6a 01                	push   0x1
   26220:	6a 34                	push   0x34
   26222:	50                   	push   eax
   26223:	e8 82 77 ff ff       	call   1d9aa <fl_fread>
   26228:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:148
    if (elfInfo->hdr.e_ident[0] != 0x7F) 
   2622b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2622e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26231:	3c 7f                	cmp    al,0x7f
   26233:	74 66                	je     2629b <loadSections+0xa2>
/home/yogi/src/os/chrisOS/src/newloader.c:149
        if (elfInfo->hdr.e_ident[1] != 'E') 
   26235:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26238:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   2623c:	3c 45                	cmp    al,0x45
   2623e:	74 5b                	je     2629b <loadSections+0xa2>
/home/yogi/src/os/chrisOS/src/newloader.c:150
            if (elfInfo->hdr.e_ident[1] != 'L') 
   26240:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26243:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   26247:	3c 4c                	cmp    al,0x4c
   26249:	74 50                	je     2629b <loadSections+0xa2>
/home/yogi/src/os/chrisOS/src/newloader.c:151
                if (elfInfo->hdr.e_ident[2] != 'F')
   2624b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2624e:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   26252:	3c 46                	cmp    al,0x46
   26254:	74 45                	je     2629b <loadSections+0xa2>
/home/yogi/src/os/chrisOS/src/newloader.c:153
                {
                    printd(DEBUG_ELF_LOADER,"Invalid ELF magic '%c' '%c' '%c', cannot load", elfInfo->hdr.e_ident[1], elfInfo->hdr.e_ident[2], elfInfo->hdr.e_ident[3]);
   26256:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26259:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   2625d:	0f b6 c8             	movzx  ecx,al
   26260:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26263:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   26267:	0f b6 d0             	movzx  edx,al
   2626a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2626d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   26271:	0f b6 c0             	movzx  eax,al
   26274:	83 ec 0c             	sub    esp,0xc
   26277:	51                   	push   ecx
   26278:	52                   	push   edx
   26279:	50                   	push   eax
   2627a:	68 98 59 08 00       	push   0x85998
   2627f:	68 00 02 00 00       	push   0x200
   26284:	e8 4e 0e 00 00       	call   270d7 <printd>
   26289:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:154
                    elfInfo->loadCompleted=false;
   2628c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2628f:	c6 80 d4 18 00 00 00 	mov    BYTE PTR [eax+0x18d4],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:155
                    return;
   26296:	e9 26 05 00 00       	jmp    267c1 <loadSections+0x5c8>
/home/yogi/src/os/chrisOS/src/newloader.c:159
                }
    
    //Make sure the file is viable
    if (elfInfo->hdr.e_type!=ET_EXEC && elfInfo->hdr.e_type!=ET_DYN)
   2629b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2629e:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   262a2:	66 83 f8 02          	cmp    ax,0x2
   262a6:	74 3c                	je     262e4 <loadSections+0xeb>
/home/yogi/src/os/chrisOS/src/newloader.c:159 (discriminator 1)
   262a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   262ab:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   262af:	66 83 f8 03          	cmp    ax,0x3
   262b3:	74 2f                	je     262e4 <loadSections+0xeb>
/home/yogi/src/os/chrisOS/src/newloader.c:161
    {
        printd(DEBUG_ELF_LOADER,"Wrong ELF type 0x%04X, cannot load\n", elfInfo->hdr.e_type);
   262b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   262b8:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   262bc:	0f b7 c0             	movzx  eax,ax
   262bf:	83 ec 04             	sub    esp,0x4
   262c2:	50                   	push   eax
   262c3:	68 c8 59 08 00       	push   0x859c8
   262c8:	68 00 02 00 00       	push   0x200
   262cd:	e8 05 0e 00 00       	call   270d7 <printd>
   262d2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:162
        elfInfo->loadCompleted=false;
   262d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   262d8:	c6 80 d4 18 00 00 00 	mov    BYTE PTR [eax+0x18d4],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:163
        return;
   262df:	e9 dd 04 00 00       	jmp    267c1 <loadSections+0x5c8>
/home/yogi/src/os/chrisOS/src/newloader.c:165
    }
    if (elfInfo->hdr.e_machine!=EM_386)
   262e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   262e7:	0f b7 40 12          	movzx  eax,WORD PTR [eax+0x12]
   262eb:	66 83 f8 03          	cmp    ax,0x3
   262ef:	74 2f                	je     26320 <loadSections+0x127>
/home/yogi/src/os/chrisOS/src/newloader.c:167
    {
        printd(DEBUG_ELF_LOADER,"Wrong ELF architecture 0x%04X, cannot load\n", elfInfo->hdr.e_type);
   262f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   262f4:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   262f8:	0f b7 c0             	movzx  eax,ax
   262fb:	83 ec 04             	sub    esp,0x4
   262fe:	50                   	push   eax
   262ff:	68 ec 59 08 00       	push   0x859ec
   26304:	68 00 02 00 00       	push   0x200
   26309:	e8 c9 0d 00 00       	call   270d7 <printd>
   2630e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:168
        elfInfo->loadCompleted=false;
   26311:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26314:	c6 80 d4 18 00 00 00 	mov    BYTE PTR [eax+0x18d4],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:169
        return;
   2631b:	e9 a1 04 00 00       	jmp    267c1 <loadSections+0x5c8>
/home/yogi/src/os/chrisOS/src/newloader.c:173
    }
    
    //Get the section header table
    printd(DEBUG_ELF_LOADER,"section header record count= %u\n", elfInfo->hdr.e_shnum);
   26320:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26323:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
   26327:	0f b7 c0             	movzx  eax,ax
   2632a:	83 ec 04             	sub    esp,0x4
   2632d:	50                   	push   eax
   2632e:	68 18 5a 08 00       	push   0x85a18
   26333:	68 00 02 00 00       	push   0x200
   26338:	e8 9a 0d 00 00       	call   270d7 <printd>
   2633d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:174
    printd(DEBUG_ELF_LOADER,"e_shentsize=%u, oursize=%u\n", elfInfo->hdr.e_shentsize, sizeof(Elf32_Shdr) );
   26340:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26343:	0f b7 40 2e          	movzx  eax,WORD PTR [eax+0x2e]
   26347:	0f b7 c0             	movzx  eax,ax
   2634a:	6a 28                	push   0x28
   2634c:	50                   	push   eax
   2634d:	68 39 5a 08 00       	push   0x85a39
   26352:	68 00 02 00 00       	push   0x200
   26357:	e8 7b 0d 00 00       	call   270d7 <printd>
   2635c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:175
    fl_fseek(file, elfInfo->hdr.e_shoff,SEEK_SET);
   2635f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26362:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   26365:	83 ec 04             	sub    esp,0x4
   26368:	6a 00                	push   0x0
   2636a:	50                   	push   eax
   2636b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2636e:	e8 56 78 ff ff       	call   1dbc9 <fl_fseek>
   26373:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:176
    printd(DEBUG_ELF_LOADER,"reading SHOFF\n",elfInfo->hdr.e_shoff);
   26376:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26379:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   2637c:	83 ec 04             	sub    esp,0x4
   2637f:	50                   	push   eax
   26380:	68 55 5a 08 00       	push   0x85a55
   26385:	68 00 02 00 00       	push   0x200
   2638a:	e8 48 0d 00 00       	call   270d7 <printd>
   2638f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:177
    fl_fread(elfInfo->secHdrTable, sizeof(Elf32_Shdr),elfInfo->hdr.e_shnum,file);
   26392:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26395:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
   26399:	0f b7 c0             	movzx  eax,ax
   2639c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   2639f:	83 c2 34             	add    edx,0x34
   263a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   263a5:	50                   	push   eax
   263a6:	6a 28                	push   0x28
   263a8:	52                   	push   edx
   263a9:	e8 fc 75 ff ff       	call   1d9aa <fl_fread>
   263ae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:180
    
    //Get the program header table
    printd(DEBUG_ELF_LOADER,"seeking to 0x%08X ...",elfInfo->hdr.e_phoff);
   263b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   263b4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   263b7:	83 ec 04             	sub    esp,0x4
   263ba:	50                   	push   eax
   263bb:	68 64 5a 08 00       	push   0x85a64
   263c0:	68 00 02 00 00       	push   0x200
   263c5:	e8 0d 0d 00 00       	call   270d7 <printd>
   263ca:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:181
    printd(DEBUG_ELF_LOADER,"reading PHOFF\n",elfInfo->hdr.e_phoff);
   263cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   263d0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   263d3:	83 ec 04             	sub    esp,0x4
   263d6:	50                   	push   eax
   263d7:	68 7a 5a 08 00       	push   0x85a7a
   263dc:	68 00 02 00 00       	push   0x200
   263e1:	e8 f1 0c 00 00       	call   270d7 <printd>
   263e6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:182
    fl_fseek(file, elfInfo->hdr.e_phoff, SEEK_SET);
   263e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   263ec:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   263ef:	83 ec 04             	sub    esp,0x4
   263f2:	6a 00                	push   0x0
   263f4:	50                   	push   eax
   263f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   263f8:	e8 cc 77 ff ff       	call   1dbc9 <fl_fseek>
   263fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:183
    fl_fread(elfInfo->pgmHdrTable, sizeof(Elf32_Phdr),elfInfo->hdr.e_phnum,file);
   26400:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26403:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
   26407:	0f b7 c0             	movzx  eax,ax
   2640a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   2640d:	81 c2 04 08 00 00    	add    edx,0x804
   26413:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26416:	50                   	push   eax
   26417:	6a 20                	push   0x20
   26419:	52                   	push   edx
   2641a:	e8 8b 75 ff ff       	call   1d9aa <fl_fread>
   2641f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:186
    
    //Process the program header table and load all of the sections in the file into memory
    for (int cnt=0;cnt<elfInfo->hdr.e_phnum;cnt++)
   26422:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   26429:	e9 6b 03 00 00       	jmp    26799 <loadSections+0x5a0>
/home/yogi/src/os/chrisOS/src/newloader.c:188
    {
        loadAddress = (uint8_t*)elfInfo->pgmHdrTable[cnt].p_vaddr;
   2642e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26431:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26434:	83 c2 40             	add    edx,0x40
   26437:	c1 e2 05             	shl    edx,0x5
   2643a:	01 d0                	add    eax,edx
   2643c:	83 c0 0c             	add    eax,0xc
   2643f:	8b 00                	mov    eax,DWORD PTR [eax]
   26441:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/newloader.c:189
        if (isLibrary)
   26444:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   26448:	74 1e                	je     26468 <loadSections+0x26f>
/home/yogi/src/os/chrisOS/src/newloader.c:191
        {
            loadAddress+=libLoadOffset;
   2644a:	a1 a4 da 02 00       	mov    eax,ds:0x2daa4
   2644f:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/newloader.c:192
            elfInfo->pgmHdrTable[cnt].p_vaddr=loadAddress;
   26452:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26455:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   26458:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   2645b:	83 c1 40             	add    ecx,0x40
   2645e:	c1 e1 05             	shl    ecx,0x5
   26461:	01 ca                	add    edx,ecx
   26463:	83 c2 0c             	add    edx,0xc
   26466:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/newloader.c:195
        }

        if (elfInfo->pgmHdrTable[cnt].p_vaddr==KERNEL_DATA_LOAD_ADDRESS)
   26468:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2646b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2646e:	83 c2 40             	add    edx,0x40
   26471:	c1 e2 05             	shl    edx,0x5
   26474:	01 d0                	add    eax,edx
   26476:	83 c0 0c             	add    eax,0xc
   26479:	8b 10                	mov    edx,DWORD PTR [eax]
   2647b:	0f b6 05 00 00 12 00 	movzx  eax,BYTE PTR ds:0x120000
   26482:	0f be c0             	movsx  eax,al
   26485:	39 c2                	cmp    edx,eax
   26487:	75 1d                	jne    264a6 <loadSections+0x2ad>
/home/yogi/src/os/chrisOS/src/newloader.c:197
        {
            printd(DEBUG_ELF_LOADER,"Section %u load address is kernel data base address (0x%08X), skipping load\n",cnt,loadAddress);
   26489:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2648c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   2648f:	68 8c 5a 08 00       	push   0x85a8c
   26494:	68 00 02 00 00       	push   0x200
   26499:	e8 39 0c 00 00       	call   270d7 <printd>
   2649e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:198
            continue;
   264a1:	e9 ef 02 00 00       	jmp    26795 <loadSections+0x59c>
/home/yogi/src/os/chrisOS/src/newloader.c:200
        }
        else if (elfInfo->pgmHdrTable[cnt].p_offset==elfInfo->hdr.e_phoff)
   264a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   264a9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   264ac:	83 c2 40             	add    edx,0x40
   264af:	c1 e2 05             	shl    edx,0x5
   264b2:	01 d0                	add    eax,edx
   264b4:	83 c0 08             	add    eax,0x8
   264b7:	8b 10                	mov    edx,DWORD PTR [eax]
   264b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   264bc:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   264bf:	39 c2                	cmp    edx,eax
   264c1:	75 2e                	jne    264f1 <loadSections+0x2f8>
/home/yogi/src/os/chrisOS/src/newloader.c:202
        {
            printd(DEBUG_ELF_LOADER,"Section %u file offset is program header address (0x%08X),skipping load\n",cnt,elfInfo->pgmHdrTable[cnt].p_offset);
   264c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   264c6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   264c9:	83 c2 40             	add    edx,0x40
   264cc:	c1 e2 05             	shl    edx,0x5
   264cf:	01 d0                	add    eax,edx
   264d1:	83 c0 08             	add    eax,0x8
   264d4:	8b 00                	mov    eax,DWORD PTR [eax]
   264d6:	50                   	push   eax
   264d7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   264da:	68 dc 5a 08 00       	push   0x85adc
   264df:	68 00 02 00 00       	push   0x200
   264e4:	e8 ee 0b 00 00       	call   270d7 <printd>
   264e9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:203
            continue;
   264ec:	e9 a4 02 00 00       	jmp    26795 <loadSections+0x59c>
/home/yogi/src/os/chrisOS/src/newloader.c:205
        }
        if (loadAddress!=0 && elfInfo->libLoadAddress==0 && (elfInfo->hdr.e_type!=ET_REL && elfInfo->hdr.e_type!=ET_DYN))
   264f1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   264f5:	74 4b                	je     26542 <loadSections+0x349>
/home/yogi/src/os/chrisOS/src/newloader.c:205 (discriminator 1)
   264f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   264fa:	8b 80 d0 18 00 00    	mov    eax,DWORD PTR [eax+0x18d0]
   26500:	85 c0                	test   eax,eax
   26502:	75 3e                	jne    26542 <loadSections+0x349>
/home/yogi/src/os/chrisOS/src/newloader.c:205 (discriminator 2)
   26504:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26507:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   2650b:	66 83 f8 01          	cmp    ax,0x1
   2650f:	74 31                	je     26542 <loadSections+0x349>
/home/yogi/src/os/chrisOS/src/newloader.c:205 (discriminator 3)
   26511:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26514:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   26518:	66 83 f8 03          	cmp    ax,0x3
   2651c:	74 24                	je     26542 <loadSections+0x349>
/home/yogi/src/os/chrisOS/src/newloader.c:207
        {
            elfInfo->libLoadAddress=(uintptr_t)loadAddress;
   2651e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   26521:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26524:	89 90 d0 18 00 00    	mov    DWORD PTR [eax+0x18d0],edx
/home/yogi/src/os/chrisOS/src/newloader.c:208
            printd(DEBUG_ELF_LOADER,"Setting main load address to 0x%08X\n",loadAddress);
   2652a:	83 ec 04             	sub    esp,0x4
   2652d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26530:	68 28 5b 08 00       	push   0x85b28
   26535:	68 00 02 00 00       	push   0x200
   2653a:	e8 98 0b 00 00       	call   270d7 <printd>
   2653f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:212
            
        }
        //printd(DEBUG_ELF_LOADER,"Next load address is 0x%08X\n",elfInfo->pgmHdrTable[cnt].p_vaddr);
        if (elfInfo->pgmHdrTable[cnt].p_filesz>0)
   26542:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26545:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26548:	c1 e2 05             	shl    edx,0x5
   2654b:	01 d0                	add    eax,edx
   2654d:	05 14 08 00 00       	add    eax,0x814
   26552:	8b 00                	mov    eax,DWORD PTR [eax]
   26554:	85 c0                	test   eax,eax
   26556:	0f 84 9f 01 00 00    	je     266fb <loadSections+0x502>
/home/yogi/src/os/chrisOS/src/newloader.c:214
        {
            printd(DEBUG_ELF_LOADER,"seeking to 0x%08X ...",elfInfo->pgmHdrTable[cnt].p_offset);
   2655c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2655f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26562:	83 c2 40             	add    edx,0x40
   26565:	c1 e2 05             	shl    edx,0x5
   26568:	01 d0                	add    eax,edx
   2656a:	83 c0 08             	add    eax,0x8
   2656d:	8b 00                	mov    eax,DWORD PTR [eax]
   2656f:	83 ec 04             	sub    esp,0x4
   26572:	50                   	push   eax
   26573:	68 64 5a 08 00       	push   0x85a64
   26578:	68 00 02 00 00       	push   0x200
   2657d:	e8 55 0b 00 00       	call   270d7 <printd>
   26582:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:215
            fl_fseek(file, elfInfo->pgmHdrTable[cnt].p_offset, SEEK_SET);
   26585:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26588:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2658b:	83 c2 40             	add    edx,0x40
   2658e:	c1 e2 05             	shl    edx,0x5
   26591:	01 d0                	add    eax,edx
   26593:	83 c0 08             	add    eax,0x8
   26596:	8b 00                	mov    eax,DWORD PTR [eax]
   26598:	83 ec 04             	sub    esp,0x4
   2659b:	6a 00                	push   0x0
   2659d:	50                   	push   eax
   2659e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   265a1:	e8 23 76 ff ff       	call   1dbc9 <fl_fseek>
   265a6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:216
            printd(DEBUG_ELF_LOADER,"reading %u bytes to 0x%08X\n",elfInfo->pgmHdrTable[cnt].p_memsz,loadAddress);
   265a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   265ac:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   265af:	c1 e2 05             	shl    edx,0x5
   265b2:	01 d0                	add    eax,edx
   265b4:	05 18 08 00 00       	add    eax,0x818
   265b9:	8b 00                	mov    eax,DWORD PTR [eax]
   265bb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   265be:	50                   	push   eax
   265bf:	68 4d 5b 08 00       	push   0x85b4d
   265c4:	68 00 02 00 00       	push   0x200
   265c9:	e8 09 0b 00 00       	call   270d7 <printd>
   265ce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:217
            fl_fread(loadAddress, 1, elfInfo->pgmHdrTable[cnt].p_memsz, file);
   265d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   265d4:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   265d7:	c1 e2 05             	shl    edx,0x5
   265da:	01 d0                	add    eax,edx
   265dc:	05 18 08 00 00       	add    eax,0x818
   265e1:	8b 00                	mov    eax,DWORD PTR [eax]
   265e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   265e6:	50                   	push   eax
   265e7:	6a 01                	push   0x1
   265e9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   265ec:	e8 b9 73 ff ff       	call   1d9aa <fl_fread>
   265f1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:218
            printd(DEBUG_ELF_LOADER,"Section %u loaded 0x%08X bytes at 0x%08X\n", cnt, elfInfo->pgmHdrTable[cnt].p_memsz, loadAddress);
   265f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   265f7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   265fa:	c1 e2 05             	shl    edx,0x5
   265fd:	01 d0                	add    eax,edx
   265ff:	05 18 08 00 00       	add    eax,0x818
   26604:	8b 00                	mov    eax,DWORD PTR [eax]
   26606:	83 ec 0c             	sub    esp,0xc
   26609:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2660c:	50                   	push   eax
   2660d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26610:	68 6c 5b 08 00       	push   0x85b6c
   26615:	68 00 02 00 00       	push   0x200
   2661a:	e8 b8 0a 00 00       	call   270d7 <printd>
   2661f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:219
            if (elfInfo->pgmHdrTable[cnt].p_filesz<elfInfo->pgmHdrTable[cnt].p_memsz)
   26622:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26625:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26628:	c1 e2 05             	shl    edx,0x5
   2662b:	01 d0                	add    eax,edx
   2662d:	05 14 08 00 00       	add    eax,0x814
   26632:	8b 10                	mov    edx,DWORD PTR [eax]
   26634:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26637:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   2663a:	c1 e1 05             	shl    ecx,0x5
   2663d:	01 c8                	add    eax,ecx
   2663f:	05 18 08 00 00       	add    eax,0x818
   26644:	8b 00                	mov    eax,DWORD PTR [eax]
   26646:	39 c2                	cmp    edx,eax
   26648:	0f 83 47 01 00 00    	jae    26795 <loadSections+0x59c>
/home/yogi/src/os/chrisOS/src/newloader.c:221
            {
                printd(DEBUG_ELF_LOADER,"Section %u has uninitialized data, zeroed 0x%08X bytes at 0x%08X\n", cnt, elfInfo->pgmHdrTable[cnt].p_memsz-elfInfo->pgmHdrTable[cnt].p_filesz, loadAddress+elfInfo->pgmHdrTable[cnt].p_filesz);
   2664e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26651:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26654:	c1 e2 05             	shl    edx,0x5
   26657:	01 d0                	add    eax,edx
   26659:	05 14 08 00 00       	add    eax,0x814
   2665e:	8b 10                	mov    edx,DWORD PTR [eax]
   26660:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26663:	01 c2                	add    edx,eax
   26665:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26668:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   2666b:	c1 e1 05             	shl    ecx,0x5
   2666e:	01 c8                	add    eax,ecx
   26670:	05 18 08 00 00       	add    eax,0x818
   26675:	8b 08                	mov    ecx,DWORD PTR [eax]
   26677:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2667a:	8b 5d f0             	mov    ebx,DWORD PTR [ebp-0x10]
   2667d:	c1 e3 05             	shl    ebx,0x5
   26680:	01 d8                	add    eax,ebx
   26682:	05 14 08 00 00       	add    eax,0x814
   26687:	8b 00                	mov    eax,DWORD PTR [eax]
   26689:	29 c1                	sub    ecx,eax
   2668b:	89 c8                	mov    eax,ecx
   2668d:	83 ec 0c             	sub    esp,0xc
   26690:	52                   	push   edx
   26691:	50                   	push   eax
   26692:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26695:	68 98 5b 08 00       	push   0x85b98
   2669a:	68 00 02 00 00       	push   0x200
   2669f:	e8 33 0a 00 00       	call   270d7 <printd>
   266a4:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:222
                memset(loadAddress+elfInfo->pgmHdrTable[cnt].p_filesz+1,0,elfInfo->pgmHdrTable[cnt].p_memsz-elfInfo->pgmHdrTable[cnt].p_filesz);
   266a7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   266aa:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   266ad:	c1 e2 05             	shl    edx,0x5
   266b0:	01 d0                	add    eax,edx
   266b2:	05 18 08 00 00       	add    eax,0x818
   266b7:	8b 10                	mov    edx,DWORD PTR [eax]
   266b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   266bc:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   266bf:	c1 e1 05             	shl    ecx,0x5
   266c2:	01 c8                	add    eax,ecx
   266c4:	05 14 08 00 00       	add    eax,0x814
   266c9:	8b 00                	mov    eax,DWORD PTR [eax]
   266cb:	29 c2                	sub    edx,eax
   266cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   266d0:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   266d3:	c1 e1 05             	shl    ecx,0x5
   266d6:	01 c8                	add    eax,ecx
   266d8:	05 14 08 00 00       	add    eax,0x814
   266dd:	8b 00                	mov    eax,DWORD PTR [eax]
   266df:	8d 48 01             	lea    ecx,[eax+0x1]
   266e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   266e5:	01 c8                	add    eax,ecx
   266e7:	83 ec 04             	sub    esp,0x4
   266ea:	52                   	push   edx
   266eb:	6a 00                	push   0x0
   266ed:	50                   	push   eax
   266ee:	e8 3a e9 ff ff       	call   2502d <memset>
   266f3:	83 c4 10             	add    esp,0x10
   266f6:	e9 9a 00 00 00       	jmp    26795 <loadSections+0x59c>
/home/yogi/src/os/chrisOS/src/newloader.c:225
            }
        }
        else if (elfInfo->pgmHdrTable[cnt].p_memsz>0)
   266fb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   266fe:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26701:	c1 e2 05             	shl    edx,0x5
   26704:	01 d0                	add    eax,edx
   26706:	05 18 08 00 00       	add    eax,0x818
   2670b:	8b 00                	mov    eax,DWORD PTR [eax]
   2670d:	85 c0                	test   eax,eax
   2670f:	74 30                	je     26741 <loadSections+0x548>
/home/yogi/src/os/chrisOS/src/newloader.c:227
        {
            printd(DEBUG_ELF_LOADER,"Section %u not loadable, zeroed 0x%08X bytes at 0x%08X\n",cnt, elfInfo->pgmHdrTable[cnt].p_memsz, loadAddress);
   26711:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26714:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26717:	c1 e2 05             	shl    edx,0x5
   2671a:	01 d0                	add    eax,edx
   2671c:	05 18 08 00 00       	add    eax,0x818
   26721:	8b 00                	mov    eax,DWORD PTR [eax]
   26723:	83 ec 0c             	sub    esp,0xc
   26726:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26729:	50                   	push   eax
   2672a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   2672d:	68 dc 5b 08 00       	push   0x85bdc
   26732:	68 00 02 00 00       	push   0x200
   26737:	e8 9b 09 00 00       	call   270d7 <printd>
   2673c:	83 c4 20             	add    esp,0x20
   2673f:	eb 54                	jmp    26795 <loadSections+0x59c>
/home/yogi/src/os/chrisOS/src/newloader.c:231
        }
#ifndef DEBUG_NONE
        else
            if ((kDebugLevel & DEBUG_ELF_LOADER) == DEBUG_ELF_LOADER)
   26741:	a1 38 03 12 00       	mov    eax,ds:0x120338
   26746:	25 00 02 00 00       	and    eax,0x200
   2674b:	85 c0                	test   eax,eax
   2674d:	74 46                	je     26795 <loadSections+0x59c>
/home/yogi/src/os/chrisOS/src/newloader.c:232
                printd(DEBUG_ELF_LOADER,"Section %u, file/mem sizes=0x%X/0x%X, not loading\n", cnt, elfInfo->pgmHdrTable[cnt].p_filesz>0,elfInfo->pgmHdrTable[cnt].p_memsz);
   2674f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26752:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26755:	c1 e2 05             	shl    edx,0x5
   26758:	01 d0                	add    eax,edx
   2675a:	05 18 08 00 00       	add    eax,0x818
   2675f:	8b 10                	mov    edx,DWORD PTR [eax]
   26761:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26764:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   26767:	c1 e1 05             	shl    ecx,0x5
   2676a:	01 c8                	add    eax,ecx
   2676c:	05 14 08 00 00       	add    eax,0x814
   26771:	8b 00                	mov    eax,DWORD PTR [eax]
   26773:	85 c0                	test   eax,eax
   26775:	0f 95 c0             	setne  al
   26778:	0f b6 c0             	movzx  eax,al
   2677b:	83 ec 0c             	sub    esp,0xc
   2677e:	52                   	push   edx
   2677f:	50                   	push   eax
   26780:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26783:	68 14 5c 08 00       	push   0x85c14
   26788:	68 00 02 00 00       	push   0x200
   2678d:	e8 45 09 00 00       	call   270d7 <printd>
   26792:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:186 (discriminator 2)
    printd(DEBUG_ELF_LOADER,"reading PHOFF\n",elfInfo->hdr.e_phoff);
    fl_fseek(file, elfInfo->hdr.e_phoff, SEEK_SET);
    fl_fread(elfInfo->pgmHdrTable, sizeof(Elf32_Phdr),elfInfo->hdr.e_phnum,file);
    
    //Process the program header table and load all of the sections in the file into memory
    for (int cnt=0;cnt<elfInfo->hdr.e_phnum;cnt++)
   26795:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:186 (discriminator 1)
   26799:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2679c:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
   267a0:	0f b7 c0             	movzx  eax,ax
   267a3:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   267a6:	0f 8f 82 fc ff ff    	jg     2642e <loadSections+0x235>
/home/yogi/src/os/chrisOS/src/newloader.c:237
                printd(DEBUG_ELF_LOADER,"Section %u, file/mem sizes=0x%X/0x%X, not loading\n", cnt, elfInfo->pgmHdrTable[cnt].p_filesz>0,elfInfo->pgmHdrTable[cnt].p_memsz);
#endif

    }
    //Done processing the program header table
    printd(DEBUG_ELF_LOADER,"LoadElf: done loading file\n");
   267ac:	83 ec 08             	sub    esp,0x8
   267af:	68 47 5c 08 00       	push   0x85c47
   267b4:	68 00 02 00 00       	push   0x200
   267b9:	e8 19 09 00 00       	call   270d7 <printd>
   267be:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:239
    
}
   267c1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   267c4:	c9                   	leave  
   267c5:	c3                   	ret    

000267c6 <loadElf>:
loadElf():
/home/yogi/src/os/chrisOS/src/newloader.c:242

void loadElf(void* file,elfInfo_t* elfInfo, bool isLibrary)
{
   267c6:	55                   	push   ebp
   267c7:	89 e5                	mov    ebp,esp
   267c9:	57                   	push   edi
   267ca:	56                   	push   esi
   267cb:	53                   	push   ebx
   267cc:	83 ec 2c             	sub    esp,0x2c
   267cf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   267d2:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
/home/yogi/src/os/chrisOS/src/newloader.c:243
    char* sectStringTable=(char*)0x1900000;  //TODO: Fix this!!!
   267d5:	c7 45 dc 00 00 90 01 	mov    DWORD PTR [ebp-0x24],0x1900000
/home/yogi/src/os/chrisOS/src/newloader.c:246

    //Initialize the structs we will be using
    memset(elfInfo,0,sizeof(elfInfo_t));
   267dc:	83 ec 04             	sub    esp,0x4
   267df:	68 d8 18 00 00       	push   0x18d8
   267e4:	6a 00                	push   0x0
   267e6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   267e9:	e8 3f e8 ff ff       	call   2502d <memset>
   267ee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:247
    memset(&elfInfo->dynamicInfo,0,sizeof(elfDynamic_t));
   267f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   267f4:	05 54 0e 00 00       	add    eax,0xe54
   267f9:	83 ec 04             	sub    esp,0x4
   267fc:	68 7c 0a 00 00       	push   0xa7c
   26801:	6a 00                	push   0x0
   26803:	50                   	push   eax
   26804:	e8 24 e8 ff ff       	call   2502d <memset>
   26809:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:249

    elfInfo->loadCompleted=true;
   2680c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2680f:	c6 80 d4 18 00 00 01 	mov    BYTE PTR [eax+0x18d4],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:251
    //Load all of the sections in the file to memory
    loadSections(file,elfInfo,isLibrary);
   26816:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   2681a:	83 ec 04             	sub    esp,0x4
   2681d:	50                   	push   eax
   2681e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   26821:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26824:	e8 d0 f9 ff ff       	call   261f9 <loadSections>
   26829:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:255
    

    //List the sections (debugging)
    if (kDebugLevel&DEBUG_ELF_LOADER)
   2682c:	a1 38 03 12 00       	mov    eax,ds:0x120338
   26831:	25 00 02 00 00       	and    eax,0x200
   26836:	85 c0                	test   eax,eax
   26838:	0f 84 12 01 00 00    	je     26950 <loadElf+0x18a>
/home/yogi/src/os/chrisOS/src/newloader.c:257
    {
        printd(DEBUG_ELF_LOADER,"Table\t     MemAddr\t\tFileAddr\t\tSize\ttype\n");
   2683e:	83 ec 08             	sub    esp,0x8
   26841:	68 64 5c 08 00       	push   0x85c64
   26846:	68 00 02 00 00       	push   0x200
   2684b:	e8 87 08 00 00       	call   270d7 <printd>
   26850:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:258
        for (int cnt=0;cnt<elfInfo->hdr.e_shentsize;cnt++)
   26853:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   2685a:	e9 c4 00 00 00       	jmp    26923 <loadElf+0x15d>
/home/yogi/src/os/chrisOS/src/newloader.c:260
        {
            if ((uint8_t*)*(sectStringTable+elfInfo->secHdrTable[cnt].sh_name)>0)
   2685f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   26862:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   26865:	89 d0                	mov    eax,edx
   26867:	c1 e0 02             	shl    eax,0x2
   2686a:	01 d0                	add    eax,edx
   2686c:	c1 e0 03             	shl    eax,0x3
   2686f:	01 c8                	add    eax,ecx
   26871:	83 c0 34             	add    eax,0x34
   26874:	8b 10                	mov    edx,DWORD PTR [eax]
   26876:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   26879:	01 d0                	add    eax,edx
   2687b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2687e:	0f be c0             	movsx  eax,al
   26881:	85 c0                	test   eax,eax
   26883:	0f 84 96 00 00 00    	je     2691f <loadElf+0x159>
/home/yogi/src/os/chrisOS/src/newloader.c:261
                printd(DEBUG_ELF_LOADER,"%-10s\t0x%08X\t0x%08X\t0x%08X\t0x%08X\n",
   26889:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   2688c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   2688f:	89 d0                	mov    eax,edx
   26891:	c1 e0 02             	shl    eax,0x2
   26894:	01 d0                	add    eax,edx
   26896:	c1 e0 03             	shl    eax,0x3
   26899:	01 c8                	add    eax,ecx
   2689b:	83 c0 38             	add    eax,0x38
   2689e:	8b 38                	mov    edi,DWORD PTR [eax]
   268a0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   268a3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   268a6:	89 d0                	mov    eax,edx
   268a8:	c1 e0 02             	shl    eax,0x2
   268ab:	01 d0                	add    eax,edx
   268ad:	c1 e0 03             	shl    eax,0x3
   268b0:	01 c8                	add    eax,ecx
   268b2:	83 c0 48             	add    eax,0x48
   268b5:	8b 30                	mov    esi,DWORD PTR [eax]
   268b7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   268ba:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   268bd:	89 d0                	mov    eax,edx
   268bf:	c1 e0 02             	shl    eax,0x2
   268c2:	01 d0                	add    eax,edx
   268c4:	c1 e0 03             	shl    eax,0x3
   268c7:	01 c8                	add    eax,ecx
   268c9:	83 c0 44             	add    eax,0x44
   268cc:	8b 18                	mov    ebx,DWORD PTR [eax]
   268ce:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   268d1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   268d4:	89 d0                	mov    eax,edx
   268d6:	c1 e0 02             	shl    eax,0x2
   268d9:	01 d0                	add    eax,edx
   268db:	c1 e0 03             	shl    eax,0x3
   268de:	01 c8                	add    eax,ecx
   268e0:	83 c0 40             	add    eax,0x40
   268e3:	8b 08                	mov    ecx,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/newloader.c:262
                        sectStringTable+elfInfo->secHdrTable[cnt].sh_name,
   268e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   268e8:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
   268eb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   268ee:	89 d0                	mov    eax,edx
   268f0:	c1 e0 02             	shl    eax,0x2
   268f3:	01 d0                	add    eax,edx
   268f5:	c1 e0 03             	shl    eax,0x3
   268f8:	03 45 d0             	add    eax,DWORD PTR [ebp-0x30]
   268fb:	83 c0 34             	add    eax,0x34
   268fe:	8b 10                	mov    edx,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/newloader.c:261
    {
        printd(DEBUG_ELF_LOADER,"Table\t     MemAddr\t\tFileAddr\t\tSize\ttype\n");
        for (int cnt=0;cnt<elfInfo->hdr.e_shentsize;cnt++)
        {
            if ((uint8_t*)*(sectStringTable+elfInfo->secHdrTable[cnt].sh_name)>0)
                printd(DEBUG_ELF_LOADER,"%-10s\t0x%08X\t0x%08X\t0x%08X\t0x%08X\n",
   26900:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   26903:	01 d0                	add    eax,edx
   26905:	83 ec 04             	sub    esp,0x4
   26908:	57                   	push   edi
   26909:	56                   	push   esi
   2690a:	53                   	push   ebx
   2690b:	51                   	push   ecx
   2690c:	50                   	push   eax
   2690d:	68 90 5c 08 00       	push   0x85c90
   26912:	68 00 02 00 00       	push   0x200
   26917:	e8 bb 07 00 00       	call   270d7 <printd>
   2691c:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:258 (discriminator 2)

    //List the sections (debugging)
    if (kDebugLevel&DEBUG_ELF_LOADER)
    {
        printd(DEBUG_ELF_LOADER,"Table\t     MemAddr\t\tFileAddr\t\tSize\ttype\n");
        for (int cnt=0;cnt<elfInfo->hdr.e_shentsize;cnt++)
   2691f:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:258 (discriminator 1)
   26923:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26926:	0f b7 40 2e          	movzx  eax,WORD PTR [eax+0x2e]
   2692a:	0f b7 c0             	movzx  eax,ax
   2692d:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   26930:	0f 8f 29 ff ff ff    	jg     2685f <loadElf+0x99>
/home/yogi/src/os/chrisOS/src/newloader.c:268
                        elfInfo->secHdrTable[cnt].sh_addr,
                        elfInfo->secHdrTable[cnt].sh_offset,
                        elfInfo->secHdrTable[cnt].sh_size, 
                        elfInfo->secHdrTable[cnt].sh_type);
        }
        printd(DEBUG_ELF_LOADER,"End of section table... press a key to continue\n");
   26936:	83 ec 08             	sub    esp,0x8
   26939:	68 b4 5c 08 00       	push   0x85cb4
   2693e:	68 00 02 00 00       	push   0x200
   26943:	e8 8f 07 00 00       	call   270d7 <printd>
   26948:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:269
        waitForKeyboardKey();
   2694b:	e8 02 a9 fe ff       	call   11252 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/newloader.c:273
    }
    
    //Find the symbol and string tables in the dynamic section
    if (elfInfo->dynamicSectionAddress>0)
   26950:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26953:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   26959:	85 c0                	test   eax,eax
   2695b:	0f 84 94 01 00 00    	je     26af5 <loadElf+0x32f>
/home/yogi/src/os/chrisOS/src/newloader.c:275
    {
        printd(DEBUG_ELF_LOADER,"Processing dynamic sect, section address=0x%08X, count=%u\n",elfInfo->dynamicSectionAddress,elfInfo->dynamicRecordCount);
   26961:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26964:	8b 90 4c 0e 00 00    	mov    edx,DWORD PTR [eax+0xe4c]
   2696a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2696d:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   26973:	52                   	push   edx
   26974:	50                   	push   eax
   26975:	68 e8 5c 08 00       	push   0x85ce8
   2697a:	68 00 02 00 00       	push   0x200
   2697f:	e8 53 07 00 00       	call   270d7 <printd>
   26984:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:276
        Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;
   26987:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2698a:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   26990:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/newloader.c:279

        //First iterate the section to find the string & symbol tables
        for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   26993:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   2699a:	e9 e4 00 00 00       	jmp    26a83 <loadElf+0x2bd>
/home/yogi/src/os/chrisOS/src/newloader.c:281
        {
            if (dyn[cnt].d_tag==DT_STRTAB)
   2699f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   269a2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   269a9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   269ac:	01 d0                	add    eax,edx
   269ae:	8b 00                	mov    eax,DWORD PTR [eax]
   269b0:	83 f8 05             	cmp    eax,0x5
   269b3:	75 5b                	jne    26a10 <loadElf+0x24a>
/home/yogi/src/os/chrisOS/src/newloader.c:283
            {
                elfInfo->dynamicInfo.strTableAddress=dyn[cnt].d_un.d_ptr;
   269b5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   269b8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   269bf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   269c2:	01 d0                	add    eax,edx
   269c4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   269c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   269ca:	89 90 b8 18 00 00    	mov    DWORD PTR [eax+0x18b8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:284
                if (isLibrary)
   269d0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
   269d4:	74 19                	je     269ef <loadElf+0x229>
/home/yogi/src/os/chrisOS/src/newloader.c:285
                    elfInfo->dynamicInfo.strTableAddress+=libLoadOffset;
   269d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   269d9:	8b 90 b8 18 00 00    	mov    edx,DWORD PTR [eax+0x18b8]
   269df:	a1 a4 da 02 00       	mov    eax,ds:0x2daa4
   269e4:	01 c2                	add    edx,eax
   269e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   269e9:	89 90 b8 18 00 00    	mov    DWORD PTR [eax+0x18b8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:286
                printd(DEBUG_ELF_LOADER,"Found dynamic string table address 0x%08X\n",elfInfo->dynamicInfo.strTableAddress);
   269ef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   269f2:	8b 80 b8 18 00 00    	mov    eax,DWORD PTR [eax+0x18b8]
   269f8:	83 ec 04             	sub    esp,0x4
   269fb:	50                   	push   eax
   269fc:	68 24 5d 08 00       	push   0x85d24
   26a01:	68 00 02 00 00       	push   0x200
   26a06:	e8 cc 06 00 00       	call   270d7 <printd>
   26a0b:	83 c4 10             	add    esp,0x10
   26a0e:	eb 6f                	jmp    26a7f <loadElf+0x2b9>
/home/yogi/src/os/chrisOS/src/newloader.c:288
            }
            else if (dyn[cnt].d_tag==DT_SYMTAB)
   26a10:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   26a13:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26a1a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   26a1d:	01 d0                	add    eax,edx
   26a1f:	8b 00                	mov    eax,DWORD PTR [eax]
   26a21:	83 f8 06             	cmp    eax,0x6
   26a24:	75 59                	jne    26a7f <loadElf+0x2b9>
/home/yogi/src/os/chrisOS/src/newloader.c:290
            {
                elfInfo->dynamicInfo.symTableAddress=dyn[cnt].d_un.d_ptr;
   26a26:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   26a29:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26a30:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   26a33:	01 d0                	add    eax,edx
   26a35:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26a38:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a3b:	89 90 bc 18 00 00    	mov    DWORD PTR [eax+0x18bc],edx
/home/yogi/src/os/chrisOS/src/newloader.c:291
                if (isLibrary)
   26a41:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
   26a45:	74 19                	je     26a60 <loadElf+0x29a>
/home/yogi/src/os/chrisOS/src/newloader.c:292
                    elfInfo->dynamicInfo.symTableAddress+=libLoadOffset;
   26a47:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a4a:	8b 90 bc 18 00 00    	mov    edx,DWORD PTR [eax+0x18bc]
   26a50:	a1 a4 da 02 00       	mov    eax,ds:0x2daa4
   26a55:	01 c2                	add    edx,eax
   26a57:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a5a:	89 90 bc 18 00 00    	mov    DWORD PTR [eax+0x18bc],edx
/home/yogi/src/os/chrisOS/src/newloader.c:293
                printd(DEBUG_ELF_LOADER,"Found dynamic symbol table address 0x%08X\n",elfInfo->dynamicInfo.symTableAddress);
   26a60:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a63:	8b 80 bc 18 00 00    	mov    eax,DWORD PTR [eax+0x18bc]
   26a69:	83 ec 04             	sub    esp,0x4
   26a6c:	50                   	push   eax
   26a6d:	68 50 5d 08 00       	push   0x85d50
   26a72:	68 00 02 00 00       	push   0x200
   26a77:	e8 5b 06 00 00       	call   270d7 <printd>
   26a7c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:279 (discriminator 2)
    {
        printd(DEBUG_ELF_LOADER,"Processing dynamic sect, section address=0x%08X, count=%u\n",elfInfo->dynamicSectionAddress,elfInfo->dynamicRecordCount);
        Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;

        //First iterate the section to find the string & symbol tables
        for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   26a7f:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:279 (discriminator 1)
   26a83:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a86:	8b 80 4c 0e 00 00    	mov    eax,DWORD PTR [eax+0xe4c]
   26a8c:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   26a8f:	0f 8f 0a ff ff ff    	jg     2699f <loadElf+0x1d9>
/home/yogi/src/os/chrisOS/src/newloader.c:296
                if (isLibrary)
                    elfInfo->dynamicInfo.symTableAddress+=libLoadOffset;
                printd(DEBUG_ELF_LOADER,"Found dynamic symbol table address 0x%08X\n",elfInfo->dynamicInfo.symTableAddress);
            }
        }
        if (!elfInfo->dynamicInfo.strTableAddress)
   26a95:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a98:	8b 80 b8 18 00 00    	mov    eax,DWORD PTR [eax+0x18b8]
   26a9e:	85 c0                	test   eax,eax
   26aa0:	75 1c                	jne    26abe <loadElf+0x2f8>
/home/yogi/src/os/chrisOS/src/newloader.c:298
        {
            printk("EXEC: Dynamic loading, unable to find dynamic string table address, cannot execute.\n");
   26aa2:	83 ec 0c             	sub    esp,0xc
   26aa5:	68 7c 5d 08 00       	push   0x85d7c
   26aaa:	e8 08 06 00 00       	call   270b7 <printk>
   26aaf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:299
            elfInfo->loadCompleted=false;
   26ab2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ab5:	c6 80 d4 18 00 00 00 	mov    BYTE PTR [eax+0x18d4],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:300
            return;
   26abc:	eb 37                	jmp    26af5 <loadElf+0x32f>
/home/yogi/src/os/chrisOS/src/newloader.c:302
        }
        else if (!elfInfo->dynamicInfo.symTableAddress)
   26abe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ac1:	8b 80 bc 18 00 00    	mov    eax,DWORD PTR [eax+0x18bc]
   26ac7:	85 c0                	test   eax,eax
   26ac9:	75 1c                	jne    26ae7 <loadElf+0x321>
/home/yogi/src/os/chrisOS/src/newloader.c:304
        {
            printk("EXEC: Dynamic loading, unable to find dynamic symbol table address, cannot execute.\n");
   26acb:	83 ec 0c             	sub    esp,0xc
   26ace:	68 d4 5d 08 00       	push   0x85dd4
   26ad3:	e8 df 05 00 00       	call   270b7 <printk>
   26ad8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:305
            elfInfo->loadCompleted=false;
   26adb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ade:	c6 80 d4 18 00 00 00 	mov    BYTE PTR [eax+0x18d4],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:306
            return;
   26ae5:	eb 0e                	jmp    26af5 <loadElf+0x32f>
/home/yogi/src/os/chrisOS/src/newloader.c:309
        }

     processELFDynamicSection(elfInfo);   
   26ae7:	83 ec 0c             	sub    esp,0xc
   26aea:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   26aed:	e8 60 f2 ff ff       	call   25d52 <processELFDynamicSection>
   26af2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:312
    
    }
}
   26af5:	8d 65 f4             	lea    esp,[ebp-0xc]
   26af8:	5b                   	pop    ebx
   26af9:	5e                   	pop    esi
   26afa:	5f                   	pop    edi
   26afb:	5d                   	pop    ebp
   26afc:	c3                   	ret    

00026afd <exec>:
exec():
/home/yogi/src/os/chrisOS/src/newloader.c:315

int exec(char* fileName,int argc,char** argv)
{
   26afd:	55                   	push   ebp
   26afe:	89 e5                	mov    ebp,esp
   26b00:	53                   	push   ebx
   26b01:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/newloader.c:316
    int lRetVal=-1;
   26b04:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/newloader.c:320
    register int *eax __asm__("eax");
    
    //Open the executable
    void* fPtr=fopen(fileName, "r");
   26b0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26b0e:	83 ec 08             	sub    esp,0x8
   26b11:	68 b5 58 08 00       	push   0x858b5
   26b16:	50                   	push   eax
   26b17:	e8 c1 68 ff ff       	call   1d3dd <fl_fopen>
   26b1c:	83 c4 10             	add    esp,0x10
   26b1f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/newloader.c:321
    if (fPtr==0)
   26b22:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   26b26:	75 21                	jne    26b49 <exec+0x4c>
/home/yogi/src/os/chrisOS/src/newloader.c:323
    {
        printk("Error opening file '%s' (0x%08X), cannot exec\n",fileName,fPtr);
   26b28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26b2b:	83 ec 04             	sub    esp,0x4
   26b2e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26b31:	50                   	push   eax
   26b32:	68 2c 5e 08 00       	push   0x85e2c
   26b37:	e8 7b 05 00 00       	call   270b7 <printk>
   26b3c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:324
        return -1;
   26b3f:	b8 ff ff ff ff       	mov    eax,0xffffffff
   26b44:	e9 ea 00 00 00       	jmp    26c33 <exec+0x136>
/home/yogi/src/os/chrisOS/src/newloader.c:328
    } 
    
    //Get a slot in the load info
    elfInfo_t* elf=&kExecLoadInfo[kExecLoadCount++];
   26b49:	8b 0d 00 04 12 00    	mov    ecx,DWORD PTR ds:0x120400
   26b4f:	a1 04 04 12 00       	mov    eax,ds:0x120404
   26b54:	8d 50 01             	lea    edx,[eax+0x1]
   26b57:	89 15 04 04 12 00    	mov    DWORD PTR ds:0x120404,edx
   26b5d:	69 c0 d8 18 00 00    	imul   eax,eax,0x18d8
   26b63:	01 c8                	add    eax,ecx
   26b65:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/newloader.c:331
    
    //Load the executable
    loadElf(fPtr,elf,false);
   26b68:	83 ec 04             	sub    esp,0x4
   26b6b:	6a 00                	push   0x0
   26b6d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   26b70:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26b73:	e8 4e fc ff ff       	call   267c6 <loadElf>
   26b78:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:332
    printd(DEBUG_ELF_LOADER,"exec: back from loading ELF file, result=%s\n",elf->loadCompleted?"Success":"Failure");;
   26b7b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   26b7e:	0f b6 80 d4 18 00 00 	movzx  eax,BYTE PTR [eax+0x18d4]
   26b85:	84 c0                	test   al,al
   26b87:	74 07                	je     26b90 <exec+0x93>
/home/yogi/src/os/chrisOS/src/newloader.c:332 (discriminator 1)
   26b89:	b8 5b 5e 08 00       	mov    eax,0x85e5b
   26b8e:	eb 05                	jmp    26b95 <exec+0x98>
/home/yogi/src/os/chrisOS/src/newloader.c:332 (discriminator 2)
   26b90:	b8 63 5e 08 00       	mov    eax,0x85e63
/home/yogi/src/os/chrisOS/src/newloader.c:332 (discriminator 4)
   26b95:	83 ec 04             	sub    esp,0x4
   26b98:	50                   	push   eax
   26b99:	68 6c 5e 08 00       	push   0x85e6c
   26b9e:	68 00 02 00 00       	push   0x200
   26ba3:	e8 2f 05 00 00       	call   270d7 <printd>
   26ba8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:333 (discriminator 4)
    fclose(fPtr);
   26bab:	83 ec 0c             	sub    esp,0xc
   26bae:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26bb1:	e8 58 6c ff ff       	call   1d80e <fl_fclose>
   26bb6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:336 (discriminator 4)
    
    //If loaded successfully then execute
    if (elf->loadCompleted)
   26bb9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   26bbc:	0f b6 80 d4 18 00 00 	movzx  eax,BYTE PTR [eax+0x18d4]
   26bc3:	84 c0                	test   al,al
   26bc5:	74 69                	je     26c30 <exec+0x133>
/home/yogi/src/os/chrisOS/src/newloader.c:338
    {
        printd(DEBUG_ELF_LOADER,"exec: Executing %s at 0x%08X, return address is =0x%08X\n", fileName, elf->hdr.e_entry, __builtin_return_address(0));
   26bc7:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
   26bca:	89 c1                	mov    ecx,eax
   26bcc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   26bcf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   26bd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26bd5:	83 ec 0c             	sub    esp,0xc
   26bd8:	51                   	push   ecx
   26bd9:	52                   	push   edx
   26bda:	50                   	push   eax
   26bdb:	68 9c 5e 08 00       	push   0x85e9c
   26be0:	68 00 02 00 00       	push   0x200
   26be5:	e8 ed 04 00 00       	call   270d7 <printd>
   26bea:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:339
        __asm__("push ebx\npush ecx\n"::[argvp] "b" (argv), [argcv] "c" (argc));
   26bed:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   26bf0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   26bf3:	89 d3                	mov    ebx,edx
   26bf5:	53                   	push   ebx
   26bf6:	51                   	push   ecx
/home/yogi/src/os/chrisOS/src/newloader.c:340
        __asm__("mov edx,%[pgmptr]\n"::[pgmptr] "d" (elf->hdr.e_entry));
   26bf7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   26bfa:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
   26bfd:	89 d2                	mov    edx,edx
/home/yogi/src/os/chrisOS/src/newloader.c:341
        __asm__("call edx\n"::[pgmptr] "d" (elf->hdr.e_entry));
   26bff:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   26c02:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
   26c05:	ff d2                	call   edx
/home/yogi/src/os/chrisOS/src/newloader.c:342
        lRetVal=(uint32_t)eax;
   26c07:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/newloader.c:343
        printd(DEBUG_ELF_LOADER,"exec: Back from executing %s, return value is 0x%08X, 0x%08X, __bra=0x%08X\n", fileName, lRetVal, &fileName, __builtin_return_address(0));
   26c0a:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
   26c0d:	89 c2                	mov    edx,eax
   26c0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26c12:	83 ec 08             	sub    esp,0x8
   26c15:	52                   	push   edx
   26c16:	8d 55 08             	lea    edx,[ebp+0x8]
   26c19:	52                   	push   edx
   26c1a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26c1d:	50                   	push   eax
   26c1e:	68 d8 5e 08 00       	push   0x85ed8
   26c23:	68 00 02 00 00       	push   0x200
   26c28:	e8 aa 04 00 00       	call   270d7 <printd>
   26c2d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:345
    }
    return lRetVal;
   26c30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/newloader.c:346
}
   26c33:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   26c36:	c9                   	leave  
   26c37:	c3                   	ret    

00026c38 <panic>:
panic():
/home/yogi/src/os/chrisOS/src/panic.c:8
#include <stdarg.h>
#include <time.h>
#include "printf.h"

void __attribute__((noinline))panic(const char *format, ...)
{
   26c38:	55                   	push   ebp
   26c39:	89 e5                	mov    ebp,esp
   26c3b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/panic.c:10
    va_list args;
    va_start( args, format );
   26c3e:	8d 45 0c             	lea    eax,[ebp+0xc]
   26c41:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/panic.c:11
    printk("\n>>>panic at instruction prior to address 0x%08X<<<\n", __builtin_return_address(0));
   26c44:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
   26c47:	83 ec 08             	sub    esp,0x8
   26c4a:	50                   	push   eax
   26c4b:	68 24 5f 08 00       	push   0x85f24
   26c50:	e8 62 04 00 00       	call   270b7 <printk>
   26c55:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/panic.c:12
    printk("  >>>");
   26c58:	83 ec 0c             	sub    esp,0xc
   26c5b:	68 59 5f 08 00       	push   0x85f59
   26c60:	e8 52 04 00 00       	call   270b7 <printk>
   26c65:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/panic.c:13
    printk_valist( format,args);
   26c68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26c6b:	83 ec 08             	sub    esp,0x8
   26c6e:	50                   	push   eax
   26c6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26c72:	e8 25 04 00 00       	call   2709c <printk_valist>
   26c77:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/panic.c:15 (discriminator 1)
    panicLoop: 
    __asm__("cli\nhlt\n");
   26c7a:	fa                   	cli    
   26c7b:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/panic.c:16 (discriminator 1)
    goto panicLoop;
   26c7c:	eb fc                	jmp    26c7a <panic+0x42>
   26c7e:	66 90                	xchg   ax,ax

00026c80 <printchar>:
printchar():
/home/yogi/src/os/chrisOS/src/printf.c:41
//extern bool pauseDisplay(bool offerToQuit);
extern uint32_t kDebugLevel;
uint8_t printDLineCount;

static void printchar(char **str, int c)
{
   26c80:	55                   	push   ebp
   26c81:	89 e5                	mov    ebp,esp
   26c83:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/printf.c:43
	
	if (str) {
   26c86:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   26c8a:	74 19                	je     26ca5 <printchar+0x25>
/home/yogi/src/os/chrisOS/src/printf.c:44
		**str = c;
   26c8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26c8f:	8b 00                	mov    eax,DWORD PTR [eax]
   26c91:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   26c94:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/printf.c:45
		++(*str);
   26c96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26c99:	8b 00                	mov    eax,DWORD PTR [eax]
   26c9b:	8d 50 01             	lea    edx,[eax+0x1]
   26c9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26ca1:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/printf.c:48
	}
	else terminal_putchar((unsigned char)c);
}
   26ca3:	eb 12                	jmp    26cb7 <printchar+0x37>
/home/yogi/src/os/chrisOS/src/printf.c:47
	
	if (str) {
		**str = c;
		++(*str);
	}
	else terminal_putchar((unsigned char)c);
   26ca5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ca8:	0f b6 c0             	movzx  eax,al
   26cab:	83 ec 0c             	sub    esp,0xc
   26cae:	50                   	push   eax
   26caf:	e8 4a 10 ff ff       	call   17cfe <terminal_putchar>
   26cb4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:48
}
   26cb7:	90                   	nop
   26cb8:	c9                   	leave  
   26cb9:	c3                   	ret    

00026cba <prints>:
prints():
/home/yogi/src/os/chrisOS/src/printf.c:54

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   26cba:	55                   	push   ebp
   26cbb:	89 e5                	mov    ebp,esp
   26cbd:	57                   	push   edi
   26cbe:	56                   	push   esi
   26cbf:	53                   	push   ebx
   26cc0:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/printf.c:55
	register int pc = 0, padchar = ' ';
   26cc3:	bb 00 00 00 00       	mov    ebx,0x0
   26cc8:	c7 45 e4 20 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/chrisOS/src/printf.c:57

	if (width > 0) {
   26ccf:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   26cd3:	7e 39                	jle    26d0e <prints+0x54>
/home/yogi/src/os/chrisOS/src/printf.c:58
		register int len = 0;
   26cd5:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOS/src/printf.c:60
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   26cda:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
   26cdd:	eb 06                	jmp    26ce5 <prints+0x2b>
/home/yogi/src/os/chrisOS/src/printf.c:60 (discriminator 3)
   26cdf:	83 c6 01             	add    esi,0x1
   26ce2:	83 c7 01             	add    edi,0x1
/home/yogi/src/os/chrisOS/src/printf.c:60 (discriminator 1)
   26ce5:	0f b6 07             	movzx  eax,BYTE PTR [edi]
   26ce8:	84 c0                	test   al,al
   26cea:	75 f3                	jne    26cdf <prints+0x25>
/home/yogi/src/os/chrisOS/src/printf.c:61
		if (len >= width) width = 0;
   26cec:	3b 75 10             	cmp    esi,DWORD PTR [ebp+0x10]
   26cef:	7c 09                	jl     26cfa <prints+0x40>
/home/yogi/src/os/chrisOS/src/printf.c:61 (discriminator 1)
   26cf1:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
   26cf8:	eb 03                	jmp    26cfd <prints+0x43>
/home/yogi/src/os/chrisOS/src/printf.c:62
		else width -= len;
   26cfa:	29 75 10             	sub    DWORD PTR [ebp+0x10],esi
/home/yogi/src/os/chrisOS/src/printf.c:63
		if (pad & PAD_ZERO) padchar = '0';
   26cfd:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   26d00:	83 e0 02             	and    eax,0x2
   26d03:	85 c0                	test   eax,eax
   26d05:	74 07                	je     26d0e <prints+0x54>
/home/yogi/src/os/chrisOS/src/printf.c:63 (discriminator 1)
   26d07:	c7 45 e4 30 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x30
/home/yogi/src/os/chrisOS/src/printf.c:65
	}
	if (!(pad & PAD_RIGHT)) {
   26d0e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   26d11:	83 e0 01             	and    eax,0x1
   26d14:	85 c0                	test   eax,eax
   26d16:	75 41                	jne    26d59 <prints+0x9f>
/home/yogi/src/os/chrisOS/src/printf.c:66
		for ( ; width > 0; --width) {
   26d18:	eb 18                	jmp    26d32 <prints+0x78>
/home/yogi/src/os/chrisOS/src/printf.c:67 (discriminator 2)
			printchar (out, padchar);
   26d1a:	83 ec 08             	sub    esp,0x8
   26d1d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   26d20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26d23:	e8 58 ff ff ff       	call   26c80 <printchar>
   26d28:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:68 (discriminator 2)
			++pc;
   26d2b:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOS/src/printf.c:66 (discriminator 2)
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
   26d2e:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/chrisOS/src/printf.c:66 (discriminator 1)
   26d32:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   26d36:	7f e2                	jg     26d1a <prints+0x60>
/home/yogi/src/os/chrisOS/src/printf.c:71
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   26d38:	eb 1f                	jmp    26d59 <prints+0x9f>
/home/yogi/src/os/chrisOS/src/printf.c:72 (discriminator 2)
		printchar (out, *string);
   26d3a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26d3d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26d40:	0f be c0             	movsx  eax,al
   26d43:	83 ec 08             	sub    esp,0x8
   26d46:	50                   	push   eax
   26d47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26d4a:	e8 31 ff ff ff       	call   26c80 <printchar>
   26d4f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:73 (discriminator 2)
		++pc;
   26d52:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOS/src/printf.c:71 (discriminator 2)
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   26d55:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:71 (discriminator 1)
   26d59:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26d5c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26d5f:	84 c0                	test   al,al
   26d61:	75 d7                	jne    26d3a <prints+0x80>
/home/yogi/src/os/chrisOS/src/printf.c:75
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
   26d63:	eb 18                	jmp    26d7d <prints+0xc3>
/home/yogi/src/os/chrisOS/src/printf.c:76 (discriminator 2)
		printchar (out, padchar);
   26d65:	83 ec 08             	sub    esp,0x8
   26d68:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   26d6b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26d6e:	e8 0d ff ff ff       	call   26c80 <printchar>
   26d73:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:77 (discriminator 2)
		++pc;
   26d76:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOS/src/printf.c:75 (discriminator 2)
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
   26d79:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/chrisOS/src/printf.c:75 (discriminator 1)
   26d7d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   26d81:	7f e2                	jg     26d65 <prints+0xab>
/home/yogi/src/os/chrisOS/src/printf.c:80
		printchar (out, padchar);
		++pc;
	}

	return pc;
   26d83:	89 d8                	mov    eax,ebx
/home/yogi/src/os/chrisOS/src/printf.c:81
}
   26d85:	8d 65 f4             	lea    esp,[ebp-0xc]
   26d88:	5b                   	pop    ebx
   26d89:	5e                   	pop    esi
   26d8a:	5f                   	pop    edi
   26d8b:	5d                   	pop    ebp
   26d8c:	c3                   	ret    

00026d8d <printi>:
printi():
/home/yogi/src/os/chrisOS/src/printf.c:87

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   26d8d:	55                   	push   ebp
   26d8e:	89 e5                	mov    ebp,esp
   26d90:	57                   	push   edi
   26d91:	56                   	push   esi
   26d92:	53                   	push   ebx
   26d93:	83 ec 2c             	sub    esp,0x2c
/home/yogi/src/os/chrisOS/src/printf.c:90
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
   26d96:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
   26d9d:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
/home/yogi/src/os/chrisOS/src/printf.c:91
	register unsigned int u = i;
   26da4:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/printf.c:93

	if (i == 0) {
   26da7:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   26dab:	75 22                	jne    26dcf <printi+0x42>
/home/yogi/src/os/chrisOS/src/printf.c:94
		print_buf[0] = '0';
   26dad:	c6 45 dc 30          	mov    BYTE PTR [ebp-0x24],0x30
/home/yogi/src/os/chrisOS/src/printf.c:95
		print_buf[1] = '\0';
   26db1:	c6 45 dd 00          	mov    BYTE PTR [ebp-0x23],0x0
/home/yogi/src/os/chrisOS/src/printf.c:96
		return prints (out, print_buf, width, pad);
   26db5:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
   26db8:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   26dbb:	8d 45 dc             	lea    eax,[ebp-0x24]
   26dbe:	50                   	push   eax
   26dbf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26dc2:	e8 f3 fe ff ff       	call   26cba <prints>
   26dc7:	83 c4 10             	add    esp,0x10
   26dca:	e9 af 00 00 00       	jmp    26e7e <printi+0xf1>
/home/yogi/src/os/chrisOS/src/printf.c:99
	}

	if (sg && b == 10 && i < 0) {
   26dcf:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   26dd3:	74 1a                	je     26def <printi+0x62>
/home/yogi/src/os/chrisOS/src/printf.c:99 (discriminator 1)
   26dd5:	83 7d 10 0a          	cmp    DWORD PTR [ebp+0x10],0xa
   26dd9:	75 14                	jne    26def <printi+0x62>
/home/yogi/src/os/chrisOS/src/printf.c:99 (discriminator 2)
   26ddb:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   26ddf:	79 0e                	jns    26def <printi+0x62>
/home/yogi/src/os/chrisOS/src/printf.c:100
		neg = 1;
   26de1:	c7 45 d4 01 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x1
/home/yogi/src/os/chrisOS/src/printf.c:101
		u = -i;
   26de8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26deb:	f7 d8                	neg    eax
   26ded:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOS/src/printf.c:104
	}

	s = print_buf + PRINT_BUF_LEN-1;
   26def:	8d 5d dc             	lea    ebx,[ebp-0x24]
   26df2:	83 c3 0b             	add    ebx,0xb
/home/yogi/src/os/chrisOS/src/printf.c:105
	*s = '\0';
   26df5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
/home/yogi/src/os/chrisOS/src/printf.c:107

	while (u) {
   26df8:	eb 35                	jmp    26e2f <printi+0xa2>
/home/yogi/src/os/chrisOS/src/printf.c:108
		t = u % b;
   26dfa:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   26dfd:	89 f0                	mov    eax,esi
   26dff:	ba 00 00 00 00       	mov    edx,0x0
   26e04:	f7 f1                	div    ecx
   26e06:	89 d0                	mov    eax,edx
   26e08:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOS/src/printf.c:109
		if( t >= 10 )
   26e0a:	83 ff 09             	cmp    edi,0x9
   26e0d:	7e 08                	jle    26e17 <printi+0x8a>
/home/yogi/src/os/chrisOS/src/printf.c:110
			t += letbase - '0' - 10;
   26e0f:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
   26e12:	83 e8 3a             	sub    eax,0x3a
   26e15:	01 c7                	add    edi,eax
/home/yogi/src/os/chrisOS/src/printf.c:111
		*--s = t + '0';
   26e17:	83 eb 01             	sub    ebx,0x1
   26e1a:	89 f8                	mov    eax,edi
   26e1c:	83 c0 30             	add    eax,0x30
   26e1f:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/chrisOS/src/printf.c:112
		u /= b;
   26e21:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   26e24:	89 f0                	mov    eax,esi
   26e26:	ba 00 00 00 00       	mov    edx,0x0
   26e2b:	f7 f1                	div    ecx
   26e2d:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOS/src/printf.c:107
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
   26e2f:	85 f6                	test   esi,esi
   26e31:	75 c7                	jne    26dfa <printi+0x6d>
/home/yogi/src/os/chrisOS/src/printf.c:115
			t += letbase - '0' - 10;
		*--s = t + '0';
		u /= b;
	}

	if (neg) {
   26e33:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
   26e37:	74 30                	je     26e69 <printi+0xdc>
/home/yogi/src/os/chrisOS/src/printf.c:116
		if( width && (pad & PAD_ZERO) ) {
   26e39:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   26e3d:	74 24                	je     26e63 <printi+0xd6>
/home/yogi/src/os/chrisOS/src/printf.c:116 (discriminator 1)
   26e3f:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
   26e42:	83 e0 02             	and    eax,0x2
   26e45:	85 c0                	test   eax,eax
   26e47:	74 1a                	je     26e63 <printi+0xd6>
/home/yogi/src/os/chrisOS/src/printf.c:117
			printchar (out, '-');
   26e49:	83 ec 08             	sub    esp,0x8
   26e4c:	6a 2d                	push   0x2d
   26e4e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26e51:	e8 2a fe ff ff       	call   26c80 <printchar>
   26e56:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:118
			++pc;
   26e59:	83 45 d0 01          	add    DWORD PTR [ebp-0x30],0x1
/home/yogi/src/os/chrisOS/src/printf.c:119
			--width;
   26e5d:	83 6d 18 01          	sub    DWORD PTR [ebp+0x18],0x1
   26e61:	eb 06                	jmp    26e69 <printi+0xdc>
/home/yogi/src/os/chrisOS/src/printf.c:122
		}
		else {
			*--s = '-';
   26e63:	83 eb 01             	sub    ebx,0x1
   26e66:	c6 03 2d             	mov    BYTE PTR [ebx],0x2d
/home/yogi/src/os/chrisOS/src/printf.c:126
		}
	}

	return pc + prints (out, s, width, pad);
   26e69:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
   26e6c:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   26e6f:	53                   	push   ebx
   26e70:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26e73:	e8 42 fe ff ff       	call   26cba <prints>
   26e78:	83 c4 10             	add    esp,0x10
   26e7b:	03 45 d0             	add    eax,DWORD PTR [ebp-0x30]
/home/yogi/src/os/chrisOS/src/printf.c:127 (discriminator 1)
}
   26e7e:	8d 65 f4             	lea    esp,[ebp-0xc]
   26e81:	5b                   	pop    ebx
   26e82:	5e                   	pop    esi
   26e83:	5f                   	pop    edi
   26e84:	5d                   	pop    ebp
   26e85:	c3                   	ret    

00026e86 <print>:
print():
/home/yogi/src/os/chrisOS/src/printf.c:130

static int print(char **out, const char *format, va_list args )
{
   26e86:	55                   	push   ebp
   26e87:	89 e5                	mov    ebp,esp
   26e89:	57                   	push   edi
   26e8a:	56                   	push   esi
   26e8b:	53                   	push   ebx
   26e8c:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/printf.c:132
	register int width, pad;
	register int pc = 0;
   26e8f:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOS/src/printf.c:135
	char scr[2];

	for (; *format != 0; ++format) {
   26e94:	e9 da 01 00 00       	jmp    27073 <print+0x1ed>
/home/yogi/src/os/chrisOS/src/printf.c:136
		if (*format == '%') {
   26e99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e9c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26e9f:	3c 25                	cmp    al,0x25
   26ea1:	0f 85 ad 01 00 00    	jne    27054 <print+0x1ce>
/home/yogi/src/os/chrisOS/src/printf.c:137
			++format;
   26ea7:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:138
			width = pad = 0;
   26eab:	bf 00 00 00 00       	mov    edi,0x0
   26eb0:	89 fe                	mov    esi,edi
/home/yogi/src/os/chrisOS/src/printf.c:139
			if (*format == '\0') break;
   26eb2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26eb5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26eb8:	84 c0                	test   al,al
   26eba:	0f 84 c3 01 00 00    	je     27083 <print+0x1fd>
/home/yogi/src/os/chrisOS/src/printf.c:140
			if (*format == '%') goto out;
   26ec0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ec3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26ec6:	3c 25                	cmp    al,0x25
   26ec8:	0f 84 85 01 00 00    	je     27053 <print+0x1cd>
/home/yogi/src/os/chrisOS/src/printf.c:141
			if (*format == '-') {
   26ece:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ed1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26ed4:	3c 2d                	cmp    al,0x2d
   26ed6:	75 12                	jne    26eea <print+0x64>
/home/yogi/src/os/chrisOS/src/printf.c:142
				++format;
   26ed8:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:143
				pad = PAD_RIGHT;
   26edc:	bf 01 00 00 00       	mov    edi,0x1
/home/yogi/src/os/chrisOS/src/printf.c:145
			}
			while (*format == '0') {
   26ee1:	eb 07                	jmp    26eea <print+0x64>
/home/yogi/src/os/chrisOS/src/printf.c:146
				++format;
   26ee3:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:147
				pad |= PAD_ZERO;
   26ee7:	83 cf 02             	or     edi,0x2
/home/yogi/src/os/chrisOS/src/printf.c:145
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
   26eea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26eed:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26ef0:	3c 30                	cmp    al,0x30
   26ef2:	74 ef                	je     26ee3 <print+0x5d>
/home/yogi/src/os/chrisOS/src/printf.c:149
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   26ef4:	eb 1d                	jmp    26f13 <print+0x8d>
/home/yogi/src/os/chrisOS/src/printf.c:150 (discriminator 3)
				width *= 10;
   26ef6:	89 f0                	mov    eax,esi
   26ef8:	c1 e0 02             	shl    eax,0x2
   26efb:	01 f0                	add    eax,esi
   26efd:	01 c0                	add    eax,eax
   26eff:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOS/src/printf.c:151 (discriminator 3)
				width += *format - '0';
   26f01:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26f04:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26f07:	0f be c0             	movsx  eax,al
   26f0a:	83 e8 30             	sub    eax,0x30
   26f0d:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOS/src/printf.c:149 (discriminator 3)
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   26f0f:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:149 (discriminator 1)
   26f13:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26f16:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26f19:	3c 2f                	cmp    al,0x2f
   26f1b:	7e 0a                	jle    26f27 <print+0xa1>
/home/yogi/src/os/chrisOS/src/printf.c:149 (discriminator 2)
   26f1d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26f20:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26f23:	3c 39                	cmp    al,0x39
   26f25:	7e cf                	jle    26ef6 <print+0x70>
/home/yogi/src/os/chrisOS/src/printf.c:153
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
   26f27:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26f2a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26f2d:	3c 73                	cmp    al,0x73
   26f2f:	75 2b                	jne    26f5c <print+0xd6>
/home/yogi/src/os/chrisOS/src/printf.c:154
				register char *s = (char *)va_arg( args, int );
   26f31:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26f34:	8d 50 04             	lea    edx,[eax+0x4]
   26f37:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   26f3a:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/printf.c:155
				pc += prints (out, s?s:"(null)", width, pad);
   26f3c:	85 c0                	test   eax,eax
   26f3e:	74 02                	je     26f42 <print+0xbc>
   26f40:	eb 05                	jmp    26f47 <print+0xc1>
/home/yogi/src/os/chrisOS/src/printf.c:155 (discriminator 2)
   26f42:	b8 5f 5f 08 00       	mov    eax,0x85f5f
/home/yogi/src/os/chrisOS/src/printf.c:155 (discriminator 4)
   26f47:	57                   	push   edi
   26f48:	56                   	push   esi
   26f49:	50                   	push   eax
   26f4a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26f4d:	e8 68 fd ff ff       	call   26cba <prints>
   26f52:	83 c4 10             	add    esp,0x10
   26f55:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:156 (discriminator 4)
				continue;
   26f57:	e9 13 01 00 00       	jmp    2706f <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:158
			}
			if( *format == 'd' ) {
   26f5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26f5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26f62:	3c 64                	cmp    al,0x64
   26f64:	75 29                	jne    26f8f <print+0x109>
/home/yogi/src/os/chrisOS/src/printf.c:159
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   26f66:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26f69:	8d 50 04             	lea    edx,[eax+0x4]
   26f6c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   26f6f:	8b 00                	mov    eax,DWORD PTR [eax]
   26f71:	83 ec 04             	sub    esp,0x4
   26f74:	6a 61                	push   0x61
   26f76:	57                   	push   edi
   26f77:	56                   	push   esi
   26f78:	6a 01                	push   0x1
   26f7a:	6a 0a                	push   0xa
   26f7c:	50                   	push   eax
   26f7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26f80:	e8 08 fe ff ff       	call   26d8d <printi>
   26f85:	83 c4 20             	add    esp,0x20
   26f88:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:160
				continue;
   26f8a:	e9 e0 00 00 00       	jmp    2706f <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:162
			}
			if( *format == 'x' ) {
   26f8f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26f92:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26f95:	3c 78                	cmp    al,0x78
   26f97:	75 29                	jne    26fc2 <print+0x13c>
/home/yogi/src/os/chrisOS/src/printf.c:163
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   26f99:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26f9c:	8d 50 04             	lea    edx,[eax+0x4]
   26f9f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   26fa2:	8b 00                	mov    eax,DWORD PTR [eax]
   26fa4:	83 ec 04             	sub    esp,0x4
   26fa7:	6a 61                	push   0x61
   26fa9:	57                   	push   edi
   26faa:	56                   	push   esi
   26fab:	6a 00                	push   0x0
   26fad:	6a 10                	push   0x10
   26faf:	50                   	push   eax
   26fb0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26fb3:	e8 d5 fd ff ff       	call   26d8d <printi>
   26fb8:	83 c4 20             	add    esp,0x20
   26fbb:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:164
				continue;
   26fbd:	e9 ad 00 00 00       	jmp    2706f <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:166
			}
			if( *format == 'X' ) {
   26fc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26fc5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26fc8:	3c 58                	cmp    al,0x58
   26fca:	75 26                	jne    26ff2 <print+0x16c>
/home/yogi/src/os/chrisOS/src/printf.c:167
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   26fcc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26fcf:	8d 50 04             	lea    edx,[eax+0x4]
   26fd2:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   26fd5:	8b 00                	mov    eax,DWORD PTR [eax]
   26fd7:	83 ec 04             	sub    esp,0x4
   26fda:	6a 41                	push   0x41
   26fdc:	57                   	push   edi
   26fdd:	56                   	push   esi
   26fde:	6a 00                	push   0x0
   26fe0:	6a 10                	push   0x10
   26fe2:	50                   	push   eax
   26fe3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26fe6:	e8 a2 fd ff ff       	call   26d8d <printi>
   26feb:	83 c4 20             	add    esp,0x20
   26fee:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:168
				continue;
   26ff0:	eb 7d                	jmp    2706f <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:170
			}
			if( *format == 'u' ) {
   26ff2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ff5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26ff8:	3c 75                	cmp    al,0x75
   26ffa:	75 26                	jne    27022 <print+0x19c>
/home/yogi/src/os/chrisOS/src/printf.c:171
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   26ffc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26fff:	8d 50 04             	lea    edx,[eax+0x4]
   27002:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   27005:	8b 00                	mov    eax,DWORD PTR [eax]
   27007:	83 ec 04             	sub    esp,0x4
   2700a:	6a 61                	push   0x61
   2700c:	57                   	push   edi
   2700d:	56                   	push   esi
   2700e:	6a 00                	push   0x0
   27010:	6a 0a                	push   0xa
   27012:	50                   	push   eax
   27013:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27016:	e8 72 fd ff ff       	call   26d8d <printi>
   2701b:	83 c4 20             	add    esp,0x20
   2701e:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:172
				continue;
   27020:	eb 4d                	jmp    2706f <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:174
			}
			if( *format == 'c' ) {
   27022:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27025:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27028:	3c 63                	cmp    al,0x63
   2702a:	75 43                	jne    2706f <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:176
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   2702c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2702f:	8d 50 04             	lea    edx,[eax+0x4]
   27032:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   27035:	8b 00                	mov    eax,DWORD PTR [eax]
   27037:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/chrisOS/src/printf.c:177
				scr[1] = '\0';
   2703a:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
/home/yogi/src/os/chrisOS/src/printf.c:178
				pc += prints (out, scr, width, pad);
   2703e:	57                   	push   edi
   2703f:	56                   	push   esi
   27040:	8d 45 e6             	lea    eax,[ebp-0x1a]
   27043:	50                   	push   eax
   27044:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27047:	e8 6e fc ff ff       	call   26cba <prints>
   2704c:	83 c4 10             	add    esp,0x10
   2704f:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:179
				continue;
   27051:	eb 1c                	jmp    2706f <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:140
	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
   27053:	90                   	nop
/home/yogi/src/os/chrisOS/src/printf.c:184
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
   27054:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27057:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2705a:	0f be c0             	movsx  eax,al
   2705d:	83 ec 08             	sub    esp,0x8
   27060:	50                   	push   eax
   27061:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27064:	e8 17 fc ff ff       	call   26c80 <printchar>
   27069:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:185
			++pc;
   2706c:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOS/src/printf.c:135
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   2706f:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:135 (discriminator 1)
   27073:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27076:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27079:	84 c0                	test   al,al
   2707b:	0f 85 18 fe ff ff    	jne    26e99 <print+0x13>
   27081:	eb 01                	jmp    27084 <print+0x1fe>
/home/yogi/src/os/chrisOS/src/printf.c:139
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
   27083:	90                   	nop
/home/yogi/src/os/chrisOS/src/printf.c:188
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
   27084:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   27088:	74 08                	je     27092 <print+0x20c>
/home/yogi/src/os/chrisOS/src/printf.c:188 (discriminator 1)
   2708a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2708d:	8b 00                	mov    eax,DWORD PTR [eax]
   2708f:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/printf.c:190
	va_end( args );
	return pc;
   27092:	89 d8                	mov    eax,ebx
/home/yogi/src/os/chrisOS/src/printf.c:191
}
   27094:	8d 65 f4             	lea    esp,[ebp-0xc]
   27097:	5b                   	pop    ebx
   27098:	5e                   	pop    esi
   27099:	5f                   	pop    edi
   2709a:	5d                   	pop    ebp
   2709b:	c3                   	ret    

0002709c <printk_valist>:
printk_valist():
/home/yogi/src/os/chrisOS/src/printf.c:194

int printk_valist(const char *format, va_list args)
{
   2709c:	55                   	push   ebp
   2709d:	89 e5                	mov    ebp,esp
   2709f:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/printf.c:195
    return print(0, format, args);
   270a2:	83 ec 04             	sub    esp,0x4
   270a5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   270a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   270ab:	6a 00                	push   0x0
   270ad:	e8 d4 fd ff ff       	call   26e86 <print>
   270b2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:196
}
   270b5:	c9                   	leave  
   270b6:	c3                   	ret    

000270b7 <printk>:
printk():
/home/yogi/src/os/chrisOS/src/printf.c:199

int printk(const char *format, ...)
{
   270b7:	55                   	push   ebp
   270b8:	89 e5                	mov    ebp,esp
   270ba:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/printf.c:201
        va_list args;
        va_start( args, format );
   270bd:	8d 45 0c             	lea    eax,[ebp+0xc]
   270c0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/printf.c:202
        return printk_valist(format, args);
   270c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   270c6:	83 ec 08             	sub    esp,0x8
   270c9:	50                   	push   eax
   270ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   270cd:	e8 ca ff ff ff       	call   2709c <printk_valist>
   270d2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:203
}
   270d5:	c9                   	leave  
   270d6:	c3                   	ret    

000270d7 <printd>:
printd():
/home/yogi/src/os/chrisOS/src/printf.c:209

#ifdef DEBUG_NONE
int printd() {}
#else
int printd(uint32_t DebugLevel, const char *format, ...)
{
   270d7:	55                   	push   ebp
   270d8:	89 e5                	mov    ebp,esp
   270da:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/printf.c:210
    if ((kDebugLevel & DebugLevel) == DebugLevel)    
   270dd:	a1 38 03 12 00       	mov    eax,ds:0x120338
   270e2:	23 45 08             	and    eax,DWORD PTR [ebp+0x8]
   270e5:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   270e8:	75 1a                	jne    27104 <printd+0x2d>
/home/yogi/src/os/chrisOS/src/printf.c:214
    {
        va_list args;

        va_start( args, format );
   270ea:	8d 45 10             	lea    eax,[ebp+0x10]
   270ed:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/printf.c:220
//        if (++printDLineCount==SYS_VGA_HEIGHT-1)
//        {
//            pauseDisplay(false);
//            printDLineCount=0;
//        }
        return printk_valist(format, args);
   270f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   270f3:	83 ec 08             	sub    esp,0x8
   270f6:	50                   	push   eax
   270f7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   270fa:	e8 9d ff ff ff       	call   2709c <printk_valist>
   270ff:	83 c4 10             	add    esp,0x10
   27102:	eb 05                	jmp    27109 <printd+0x32>
/home/yogi/src/os/chrisOS/src/printf.c:222
    }
    return 0;
   27104:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/printf.c:223 (discriminator 1)
}
   27109:	c9                   	leave  
   2710a:	c3                   	ret    

0002710b <sprintf>:
sprintf():
/home/yogi/src/os/chrisOS/src/printf.c:227
#endif

int sprintf(char *out, const char *format, ...)
{
   2710b:	55                   	push   ebp
   2710c:	89 e5                	mov    ebp,esp
   2710e:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/printf.c:230
        va_list args;
        
        va_start( args, format );
   27111:	8d 45 10             	lea    eax,[ebp+0x10]
   27114:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/printf.c:231
        return print( &out, format, args );
   27117:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2711a:	83 ec 04             	sub    esp,0x4
   2711d:	50                   	push   eax
   2711e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   27121:	8d 45 08             	lea    eax,[ebp+0x8]
   27124:	50                   	push   eax
   27125:	e8 5c fd ff ff       	call   26e86 <print>
   2712a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:232
}
   2712d:	c9                   	leave  
   2712e:	c3                   	ret    
   2712f:	90                   	nop

00027130 <strcat>:
strcat():
/home/yogi/src/os/chrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   char *
   STRCAT (char *dest, const char *src)
   {
   27130:	55                   	push   ebp
   27131:	89 e5                	mov    ebp,esp
   27133:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/strings/strcat.c:31
     strcpy (dest + strlen (dest), src);
   27136:	83 ec 0c             	sub    esp,0xc
   27139:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2713c:	e8 47 01 00 00       	call   27288 <strlen>
   27141:	83 c4 10             	add    esp,0x10
   27144:	89 c2                	mov    edx,eax
   27146:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27149:	01 d0                	add    eax,edx
   2714b:	83 ec 08             	sub    esp,0x8
   2714e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   27151:	50                   	push   eax
   27152:	e8 c1 00 00 00       	call   27218 <strcpy>
   27157:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcat.c:32
     return dest;
   2715a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strcat.c:33
   }
   2715d:	c9                   	leave  
   2715e:	c3                   	ret    

0002715f <concatenate>:
concatenate():
/home/yogi/src/os/chrisOS/src/strings/strcat.c:35

   void concatenate(char p[], char q[]) {
   2715f:	55                   	push   ebp
   27160:	89 e5                	mov    ebp,esp
   27162:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcat.c:38
   int c, d;
 
   c = 0;
   27165:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/strings/strcat.c:40
 
   while (p[c] != '\0') {
   2716c:	eb 04                	jmp    27172 <concatenate+0x13>
/home/yogi/src/os/chrisOS/src/strings/strcat.c:41
      c++;  	
   2716e:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/strings/strcat.c:40
   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
   27172:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   27175:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27178:	01 d0                	add    eax,edx
   2717a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2717d:	84 c0                	test   al,al
   2717f:	75 ed                	jne    2716e <concatenate+0xf>
/home/yogi/src/os/chrisOS/src/strings/strcat.c:44
      c++;  	
   }
 
   d = 0;
   27181:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/chrisOS/src/strings/strcat.c:46
 
   while (q[d] != '\0') {
   27188:	eb 1d                	jmp    271a7 <concatenate+0x48>
/home/yogi/src/os/chrisOS/src/strings/strcat.c:47
      p[c] = q[d];
   2718a:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   2718d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27190:	01 c2                	add    edx,eax
   27192:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27195:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27198:	01 c8                	add    eax,ecx
   2719a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2719d:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/strings/strcat.c:48
      d++;
   2719f:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/strings/strcat.c:49
      c++;	
   271a3:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/strings/strcat.c:46
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
   271a7:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   271aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   271ad:	01 d0                	add    eax,edx
   271af:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   271b2:	84 c0                	test   al,al
   271b4:	75 d4                	jne    2718a <concatenate+0x2b>
/home/yogi/src/os/chrisOS/src/strings/strcat.c:52
      p[c] = q[d];
      d++;
      c++;	
   }
 
   p[c] = '\0';
   271b6:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   271b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   271bc:	01 d0                	add    eax,edx
   271be:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/strings/strcat.c:53
   271c1:	90                   	nop
   271c2:	c9                   	leave  
   271c3:	c3                   	ret    

000271c4 <strcmp>:
strcmp():
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:25

/* Compare S1 and S2, returning less than, equal to or
   greater than zero if S1 is lexicographically less than,
   equal to or greater than S2.  */
int strcmp (const char *p1, const char *p2)
{
   271c4:	55                   	push   ebp
   271c5:	89 e5                	mov    ebp,esp
   271c7:	56                   	push   esi
   271c8:	53                   	push   ebx
   271c9:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:26
  register const unsigned char *s1 = (const unsigned char *) p1;
   271cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:27
  register const unsigned char *s2 = (const unsigned char *) p2;
   271cf:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:32
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
   271d2:	89 d8                	mov    eax,ebx
   271d4:	8d 58 01             	lea    ebx,[eax+0x1]
   271d7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   271da:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:33
      c2 = (unsigned char) *s2++;
   271dd:	89 f0                	mov    eax,esi
   271df:	8d 70 01             	lea    esi,[eax+0x1]
   271e2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   271e5:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:34
      if (c1 == '\0')
   271e8:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
   271ec:	75 0e                	jne    271fc <strcmp+0x38>
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:35
	return c1 - c2;
   271ee:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   271f2:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   271f6:	29 c2                	sub    edx,eax
   271f8:	89 d0                	mov    eax,edx
   271fa:	eb 15                	jmp    27211 <strcmp+0x4d>
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:37
    }
  while (c1 == c2);
   271fc:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27200:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
   27203:	74 cd                	je     271d2 <strcmp+0xe>
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:39

  return c1 - c2;
   27205:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   27209:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   2720d:	29 c2                	sub    edx,eax
   2720f:	89 d0                	mov    eax,edx
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:40
}
   27211:	83 c4 10             	add    esp,0x10
   27214:	5b                   	pop    ebx
   27215:	5e                   	pop    esi
   27216:	5d                   	pop    ebp
   27217:	c3                   	ret    

00027218 <strcpy>:
strcpy():
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:5
#include "strings.h"

char *
strcpy(char *s1, const char *s2)
{
   27218:	55                   	push   ebp
   27219:	89 e5                	mov    ebp,esp
   2721b:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:6
    char *s = s1;
   2721e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27221:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
   27224:	90                   	nop
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:7 (discriminator 1)
   27225:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   27228:	8d 50 01             	lea    edx,[eax+0x1]
   2722b:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   2722e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   27231:	8d 4a 01             	lea    ecx,[edx+0x1]
   27234:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   27237:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   2723a:	88 10                	mov    BYTE PTR [eax],dl
   2723c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2723f:	84 c0                	test   al,al
   27241:	75 e2                	jne    27225 <strcpy+0xd>
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:9
	;
    return (s1);
   27243:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:10
}
   27246:	c9                   	leave  
   27247:	c3                   	ret    

00027248 <strcpyc>:
strcpyc():
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:14

char *
strcpyc(char *s1, const char *s2, unsigned count)
{
   27248:	55                   	push   ebp
   27249:	89 e5                	mov    ebp,esp
   2724b:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:15
    char *s = s1;
   2724e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27251:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:16
    while ((*s++ = *s2++) != 0 && count-->0)
   27254:	90                   	nop
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:16 (discriminator 2)
   27255:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   27258:	8d 50 01             	lea    edx,[eax+0x1]
   2725b:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   2725e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   27261:	8d 4a 01             	lea    ecx,[edx+0x1]
   27264:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   27267:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   2726a:	88 10                	mov    BYTE PTR [eax],dl
   2726c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2726f:	84 c0                	test   al,al
   27271:	74 0d                	je     27280 <strcpyc+0x38>
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:16 (discriminator 1)
   27273:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   27276:	8d 50 ff             	lea    edx,[eax-0x1]
   27279:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   2727c:	85 c0                	test   eax,eax
   2727e:	75 d5                	jne    27255 <strcpyc+0xd>
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:18
	;
    return (s1);
   27280:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:19
}
   27283:	c9                   	leave  
   27284:	c3                   	ret    
   27285:	66 90                	xchg   ax,ax
   27287:	90                   	nop

00027288 <strlen>:
strlen():
/home/yogi/src/os/chrisOS/src/strings/strlen.c:3
#include <stddef.h>

size_t strlen(const char* str) {
   27288:	55                   	push   ebp
   27289:	89 e5                	mov    ebp,esp
   2728b:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strlen.c:4
          size_t ret = 0;
   2728e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/strings/strlen.c:5
        while ( str[ret] != 0 )
   27295:	eb 04                	jmp    2729b <strlen+0x13>
/home/yogi/src/os/chrisOS/src/strings/strlen.c:6
                ret++;
   27297:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/strings/strlen.c:5
#include <stddef.h>

size_t strlen(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
   2729b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2729e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   272a1:	01 d0                	add    eax,edx
   272a3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   272a6:	84 c0                	test   al,al
   272a8:	75 ed                	jne    27297 <strlen+0xf>
/home/yogi/src/os/chrisOS/src/strings/strlen.c:7
                ret++;
        return ret;
   272aa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/strings/strlen.c:8
}
   272ad:	c9                   	leave  
   272ae:	c3                   	ret    
   272af:	90                   	nop

000272b0 <strtoul>:
strtoul():
/home/yogi/src/os/chrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
strtoul(const char *nptr, char **endptr, register int base)
{
   272b0:	55                   	push   ebp
   272b1:	89 e5                	mov    ebp,esp
   272b3:	57                   	push   edi
   272b4:	56                   	push   esi
   272b5:	53                   	push   ebx
   272b6:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
   272b9:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
   272bc:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   272c3:	89 f0                	mov    eax,esi
   272c5:	8d 70 01             	lea    esi,[eax+0x1]
   272c8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   272cb:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
   272ce:	83 fb 20             	cmp    ebx,0x20
   272d1:	74 f0                	je     272c3 <strtoul+0x13>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:73
	if (c == '-') {
   272d3:	83 fb 2d             	cmp    ebx,0x2d
   272d6:	75 14                	jne    272ec <strtoul+0x3c>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:74
		neg = 1;
   272d8:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/strings/stroul.c:75
		c = *s++;
   272df:	89 f0                	mov    eax,esi
   272e1:	8d 70 01             	lea    esi,[eax+0x1]
   272e4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   272e7:	0f be d8             	movsx  ebx,al
   272ea:	eb 10                	jmp    272fc <strtoul+0x4c>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:76
	} else if (c == '+')
   272ec:	83 fb 2b             	cmp    ebx,0x2b
   272ef:	75 0b                	jne    272fc <strtoul+0x4c>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:77
		c = *s++;
   272f1:	89 f0                	mov    eax,esi
   272f3:	8d 70 01             	lea    esi,[eax+0x1]
   272f6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   272f9:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
   272fc:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   27300:	74 06                	je     27308 <strtoul+0x58>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:78 (discriminator 2)
   27302:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
   27306:	75 26                	jne    2732e <strtoul+0x7e>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:78 (discriminator 3)
   27308:	83 fb 30             	cmp    ebx,0x30
   2730b:	75 21                	jne    2732e <strtoul+0x7e>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2730d:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   27310:	3c 78                	cmp    al,0x78
   27312:	74 07                	je     2731b <strtoul+0x6b>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:79 (discriminator 1)
   27314:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   27317:	3c 58                	cmp    al,0x58
   27319:	75 13                	jne    2732e <strtoul+0x7e>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:80
		c = s[1];
   2731b:	8d 46 01             	lea    eax,[esi+0x1]
   2731e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27321:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/stroul.c:81
		s += 2;
   27324:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/chrisOS/src/strings/stroul.c:82
		base = 16;
   27327:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/chrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
   2732e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   27332:	75 14                	jne    27348 <strtoul+0x98>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
   27334:	83 fb 30             	cmp    ebx,0x30
   27337:	75 07                	jne    27340 <strtoul+0x90>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:85 (discriminator 1)
   27339:	b8 08 00 00 00       	mov    eax,0x8
   2733e:	eb 05                	jmp    27345 <strtoul+0x95>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:85 (discriminator 2)
   27340:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/chrisOS/src/strings/stroul.c:85 (discriminator 4)
   27345:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   27348:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   2734b:	b8 ff ff ff ff       	mov    eax,0xffffffff
   27350:	ba 00 00 00 00       	mov    edx,0x0
   27355:	f7 f1                	div    ecx
   27357:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   2735a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   2735d:	b8 ff ff ff ff       	mov    eax,0xffffffff
   27362:	ba 00 00 00 00       	mov    edx,0x0
   27367:	f7 f1                	div    ecx
   27369:	89 d0                	mov    eax,edx
   2736b:	89 c2                	mov    edx,eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
   2736d:	bf 00 00 00 00       	mov    edi,0x0
   27372:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/chrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
   27377:	8d 43 d0             	lea    eax,[ebx-0x30]
   2737a:	83 f8 09             	cmp    eax,0x9
   2737d:	77 05                	ja     27384 <strtoul+0xd4>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:90
			c -= '0';
   2737f:	83 eb 30             	sub    ebx,0x30
   27382:	eb 25                	jmp    273a9 <strtoul+0xf9>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
   27384:	89 d8                	mov    eax,ebx
   27386:	83 c8 20             	or     eax,0x20
   27389:	83 e8 61             	sub    eax,0x61
   2738c:	83 f8 19             	cmp    eax,0x19
   2738f:	77 56                	ja     273e7 <strtoul+0x137>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
   27391:	83 fb 40             	cmp    ebx,0x40
   27394:	7e 0c                	jle    273a2 <strtoul+0xf2>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92 (discriminator 1)
   27396:	83 fb 5a             	cmp    ebx,0x5a
   27399:	7f 07                	jg     273a2 <strtoul+0xf2>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92 (discriminator 3)
   2739b:	b8 37 00 00 00       	mov    eax,0x37
   273a0:	eb 05                	jmp    273a7 <strtoul+0xf7>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92 (discriminator 4)
   273a2:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92 (discriminator 6)
   273a7:	29 c3                	sub    ebx,eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
   273a9:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
   273ac:	7d 3c                	jge    273ea <strtoul+0x13a>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
   273ae:	89 c8                	mov    eax,ecx
   273b0:	85 c0                	test   eax,eax
   273b2:	78 10                	js     273c4 <strtoul+0x114>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:97 (discriminator 1)
   273b4:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   273b7:	77 0b                	ja     273c4 <strtoul+0x114>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:97 (discriminator 2)
   273b9:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   273bc:	75 0d                	jne    273cb <strtoul+0x11b>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:97 (discriminator 3)
   273be:	89 d0                	mov    eax,edx
   273c0:	39 c3                	cmp    ebx,eax
   273c2:	7e 07                	jle    273cb <strtoul+0x11b>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:98
			any = -1;
   273c4:	b9 ff ff ff ff       	mov    ecx,0xffffffff
   273c9:	eb 0f                	jmp    273da <strtoul+0x12a>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:100
		else {
			any = 1;
   273cb:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/chrisOS/src/strings/stroul.c:101
			acc *= base;
   273d0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   273d3:	0f af f8             	imul   edi,eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:102
			acc += c;
   273d6:	89 d8                	mov    eax,ebx
   273d8:	01 c7                	add    edi,eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   273da:	89 f0                	mov    eax,esi
   273dc:	8d 70 01             	lea    esi,[eax+0x1]
   273df:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   273e2:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
   273e5:	eb 90                	jmp    27377 <strtoul+0xc7>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
   273e7:	90                   	nop
   273e8:	eb 01                	jmp    273eb <strtoul+0x13b>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
   273ea:	90                   	nop
/home/yogi/src/os/chrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
   273eb:	89 c8                	mov    eax,ecx
   273ed:	85 c0                	test   eax,eax
   273ef:	79 07                	jns    273f8 <strtoul+0x148>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
   273f1:	bf ff ff ff ff       	mov    edi,0xffffffff
   273f6:	eb 08                	jmp    27400 <strtoul+0x150>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:107
	} else if (neg)
   273f8:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   273fc:	74 02                	je     27400 <strtoul+0x150>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:108
		acc = -acc;
   273fe:	f7 df                	neg    edi
/home/yogi/src/os/chrisOS/src/strings/stroul.c:109
	if (endptr != 0)
   27400:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   27404:	74 13                	je     27419 <strtoul+0x169>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
   27406:	89 c8                	mov    eax,ecx
   27408:	85 c0                	test   eax,eax
   2740a:	74 05                	je     27411 <strtoul+0x161>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:110 (discriminator 1)
   2740c:	8d 46 ff             	lea    eax,[esi-0x1]
   2740f:	eb 03                	jmp    27414 <strtoul+0x164>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:110 (discriminator 2)
   27411:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/stroul.c:110 (discriminator 4)
   27414:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   27417:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:111
	return (acc);
   27419:	89 f8                	mov    eax,edi
/home/yogi/src/os/chrisOS/src/strings/stroul.c:112
}
   2741b:	83 c4 08             	add    esp,0x8
   2741e:	5b                   	pop    ebx
   2741f:	5e                   	pop    esi
   27420:	5f                   	pop    edi
   27421:	5d                   	pop    ebp
   27422:	c3                   	ret    
   27423:	90                   	nop

00027424 <strleft>:
strleft():
/home/yogi/src/os/chrisOS/src/strings/strparts.c:2
char* strleft(char* val, int cnt)
{
   27424:	55                   	push   ebp
   27425:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
   27427:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   2742a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2742d:	01 d0                	add    eax,edx
   2742f:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/strings/strparts.c:4
    return val;
   27432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strparts.c:5
}
   27435:	5d                   	pop    ebp
   27436:	c3                   	ret    
   27437:	90                   	nop

00027438 <strtol>:
strtol():
/home/yogi/src/os/chrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long
strtol(const char *nptr, char **endptr, register int base)
{
   27438:	55                   	push   ebp
   27439:	89 e5                	mov    ebp,esp
   2743b:	57                   	push   edi
   2743c:	56                   	push   esi
   2743d:	53                   	push   ebx
   2743e:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
   27441:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
   27444:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   2744b:	89 f0                	mov    eax,esi
   2744d:	8d 70 01             	lea    esi,[eax+0x1]
   27450:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27453:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
   27456:	83 fb 20             	cmp    ebx,0x20
   27459:	74 f0                	je     2744b <strtol+0x13>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:103
	if (c == '-') {
   2745b:	83 fb 2d             	cmp    ebx,0x2d
   2745e:	75 14                	jne    27474 <strtol+0x3c>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:104
		neg = 1;
   27460:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/strings/strtol.c:105
		c = *s++;
   27467:	89 f0                	mov    eax,esi
   27469:	8d 70 01             	lea    esi,[eax+0x1]
   2746c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2746f:	0f be d8             	movsx  ebx,al
   27472:	eb 10                	jmp    27484 <strtol+0x4c>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:106
	} else if (c == '+')
   27474:	83 fb 2b             	cmp    ebx,0x2b
   27477:	75 0b                	jne    27484 <strtol+0x4c>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:107
		c = *s++;
   27479:	89 f0                	mov    eax,esi
   2747b:	8d 70 01             	lea    esi,[eax+0x1]
   2747e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27481:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
   27484:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   27488:	74 06                	je     27490 <strtol+0x58>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:108 (discriminator 2)
   2748a:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
   2748e:	75 26                	jne    274b6 <strtol+0x7e>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:108 (discriminator 3)
   27490:	83 fb 30             	cmp    ebx,0x30
   27493:	75 21                	jne    274b6 <strtol+0x7e>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
   27495:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   27498:	3c 78                	cmp    al,0x78
   2749a:	74 07                	je     274a3 <strtol+0x6b>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:109 (discriminator 1)
   2749c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   2749f:	3c 58                	cmp    al,0x58
   274a1:	75 13                	jne    274b6 <strtol+0x7e>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:110
		c = s[1];
   274a3:	8d 46 01             	lea    eax,[esi+0x1]
   274a6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   274a9:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/strtol.c:111
		s += 2;
   274ac:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/chrisOS/src/strings/strtol.c:112
		base = 16;
   274af:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/chrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
   274b6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   274ba:	75 14                	jne    274d0 <strtol+0x98>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
   274bc:	83 fb 30             	cmp    ebx,0x30
   274bf:	75 07                	jne    274c8 <strtol+0x90>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:115 (discriminator 1)
   274c1:	b8 08 00 00 00       	mov    eax,0x8
   274c6:	eb 05                	jmp    274cd <strtol+0x95>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:115 (discriminator 2)
   274c8:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/chrisOS/src/strings/strtol.c:115 (discriminator 4)
   274cd:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   274d0:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   274d4:	74 07                	je     274dd <strtol+0xa5>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:134 (discriminator 1)
   274d6:	b8 00 00 00 80       	mov    eax,0x80000000
   274db:	eb 05                	jmp    274e2 <strtol+0xaa>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:134 (discriminator 2)
   274dd:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/chrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
   274e2:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   274e5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
   274e8:	ba 00 00 00 00       	mov    edx,0x0
   274ed:	f7 f1                	div    ecx
   274ef:	89 d1                	mov    ecx,edx
   274f1:	89 c8                	mov    eax,ecx
   274f3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
   274f6:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
   274f9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   274fc:	ba 00 00 00 00       	mov    edx,0x0
   27501:	f7 f7                	div    edi
   27503:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
   27506:	bf 00 00 00 00       	mov    edi,0x0
   2750b:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/chrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
   27510:	8d 43 d0             	lea    eax,[ebx-0x30]
   27513:	83 f8 09             	cmp    eax,0x9
   27516:	77 05                	ja     2751d <strtol+0xe5>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:139
			c -= '0';
   27518:	83 eb 30             	sub    ebx,0x30
   2751b:	eb 25                	jmp    27542 <strtol+0x10a>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
   2751d:	89 d8                	mov    eax,ebx
   2751f:	83 c8 20             	or     eax,0x20
   27522:	83 e8 61             	sub    eax,0x61
   27525:	83 f8 19             	cmp    eax,0x19
   27528:	77 55                	ja     2757f <strtol+0x147>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
   2752a:	83 fb 40             	cmp    ebx,0x40
   2752d:	7e 0c                	jle    2753b <strtol+0x103>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141 (discriminator 1)
   2752f:	83 fb 5a             	cmp    ebx,0x5a
   27532:	7f 07                	jg     2753b <strtol+0x103>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141 (discriminator 3)
   27534:	b8 37 00 00 00       	mov    eax,0x37
   27539:	eb 05                	jmp    27540 <strtol+0x108>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141 (discriminator 4)
   2753b:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141 (discriminator 6)
   27540:	29 c3                	sub    ebx,eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
   27542:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
   27545:	7d 3b                	jge    27582 <strtol+0x14a>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
   27547:	89 c8                	mov    eax,ecx
   27549:	85 c0                	test   eax,eax
   2754b:	78 0f                	js     2755c <strtol+0x124>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:146 (discriminator 1)
   2754d:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   27550:	77 0a                	ja     2755c <strtol+0x124>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:146 (discriminator 2)
   27552:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   27555:	75 0c                	jne    27563 <strtol+0x12b>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:146 (discriminator 3)
   27557:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
   2755a:	7e 07                	jle    27563 <strtol+0x12b>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:147
			any = -1;
   2755c:	b9 ff ff ff ff       	mov    ecx,0xffffffff
   27561:	eb 0f                	jmp    27572 <strtol+0x13a>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:149
		else {
			any = 1;
   27563:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/chrisOS/src/strings/strtol.c:150
			acc *= base;
   27568:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2756b:	0f af f8             	imul   edi,eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:151
			acc += c;
   2756e:	89 d8                	mov    eax,ebx
   27570:	01 c7                	add    edi,eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   27572:	89 f0                	mov    eax,esi
   27574:	8d 70 01             	lea    esi,[eax+0x1]
   27577:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2757a:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
   2757d:	eb 91                	jmp    27510 <strtol+0xd8>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
   2757f:	90                   	nop
   27580:	eb 01                	jmp    27583 <strtol+0x14b>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
   27582:	90                   	nop
/home/yogi/src/os/chrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
   27583:	89 c8                	mov    eax,ecx
   27585:	85 c0                	test   eax,eax
   27587:	79 16                	jns    2759f <strtol+0x167>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
   27589:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   2758d:	74 07                	je     27596 <strtol+0x15e>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:155 (discriminator 1)
   2758f:	b8 00 00 00 80       	mov    eax,0x80000000
   27594:	eb 05                	jmp    2759b <strtol+0x163>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:155 (discriminator 2)
   27596:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/chrisOS/src/strings/strtol.c:155 (discriminator 4)
   2759b:	89 c7                	mov    edi,eax
   2759d:	eb 08                	jmp    275a7 <strtol+0x16f>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:156
	} else if (neg)
   2759f:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   275a3:	74 02                	je     275a7 <strtol+0x16f>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:157
		acc = -acc;
   275a5:	f7 df                	neg    edi
/home/yogi/src/os/chrisOS/src/strings/strtol.c:158
	if (endptr != 0)
   275a7:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   275ab:	74 13                	je     275c0 <strtol+0x188>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
   275ad:	89 c8                	mov    eax,ecx
   275af:	85 c0                	test   eax,eax
   275b1:	74 05                	je     275b8 <strtol+0x180>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:159 (discriminator 1)
   275b3:	8d 46 ff             	lea    eax,[esi-0x1]
   275b6:	eb 03                	jmp    275bb <strtol+0x183>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:159 (discriminator 2)
   275b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strtol.c:159 (discriminator 4)
   275bb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   275be:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:160
	return (acc);
   275c0:	89 f8                	mov    eax,edi
/home/yogi/src/os/chrisOS/src/strings/strtol.c:161
}
   275c2:	83 c4 0c             	add    esp,0xc
   275c5:	5b                   	pop    ebx
   275c6:	5e                   	pop    esi
   275c7:	5f                   	pop    edi
   275c8:	5d                   	pop    ebp
   275c9:	c3                   	ret    
   275ca:	66 90                	xchg   ax,ax

000275cc <strtrim>:
strtrim():
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:5
#include "strings.h"

/*FROM: http://codereview.stackexchange.com/questions/20897/trim-function-in-c*/
char * strtrim(char * *pointerToString)
{
   275cc:	55                   	push   ebp
   275cd:	89 e5                	mov    ebp,esp
   275cf:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:6
    uint8_t start=0, length=0;
   275d2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   275d6:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:9

        // Trim.Start:
        length = strlen(*pointerToString);
   275da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   275dd:	8b 00                	mov    eax,DWORD PTR [eax]
   275df:	83 ec 0c             	sub    esp,0xc
   275e2:	50                   	push   eax
   275e3:	e8 a0 fc ff ff       	call   27288 <strlen>
   275e8:	83 c4 10             	add    esp,0x10
   275eb:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:10
        while ((*pointerToString)[start]==' ') start++;
   275ee:	eb 0a                	jmp    275fa <strtrim+0x2e>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:10 (discriminator 2)
   275f0:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   275f4:	83 c0 01             	add    eax,0x1
   275f7:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:10 (discriminator 1)
   275fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   275fd:	8b 10                	mov    edx,DWORD PTR [eax]
   275ff:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27603:	01 d0                	add    eax,edx
   27605:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27608:	3c 20                	cmp    al,0x20
   2760a:	74 e4                	je     275f0 <strtrim+0x24>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:11
        (*pointerToString) += start;
   2760c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2760f:	8b 10                	mov    edx,DWORD PTR [eax]
   27611:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27615:	01 c2                	add    edx,eax
   27617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2761a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:13

        if (start < length) // Required for empty (ex. "    ") input
   2761c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27620:	3a 45 f5             	cmp    al,BYTE PTR [ebp-0xb]
   27623:	73 46                	jae    2766b <strtrim+0x9f>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:16
        {
            // Trim.End:
            uint8_t end = strlen(*pointerToString)-1; // Get string length again (after Trim.Start)
   27625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27628:	8b 00                	mov    eax,DWORD PTR [eax]
   2762a:	83 ec 0c             	sub    esp,0xc
   2762d:	50                   	push   eax
   2762e:	e8 55 fc ff ff       	call   27288 <strlen>
   27633:	83 c4 10             	add    esp,0x10
   27636:	83 e8 01             	sub    eax,0x1
   27639:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:17
            while ((*pointerToString)[end]==' ') end--;
   2763c:	eb 0a                	jmp    27648 <strtrim+0x7c>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:17 (discriminator 2)
   2763e:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   27642:	83 e8 01             	sub    eax,0x1
   27645:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:17 (discriminator 1)
   27648:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2764b:	8b 10                	mov    edx,DWORD PTR [eax]
   2764d:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   27651:	01 d0                	add    eax,edx
   27653:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27656:	3c 20                	cmp    al,0x20
   27658:	74 e4                	je     2763e <strtrim+0x72>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:18
            (*pointerToString)[end+1] = 0;
   2765a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2765d:	8b 00                	mov    eax,DWORD PTR [eax]
   2765f:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   27663:	83 c2 01             	add    edx,0x1
   27666:	01 d0                	add    eax,edx
   27668:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:21
        }

    return *pointerToString;
   2766b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2766e:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:22
}
   27670:	c9                   	leave  
   27671:	c3                   	ret    

00027672 <strtrim2>:
strtrim2():
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:25

char * strtrim2(char* pointerToString)
{
   27672:	55                   	push   ebp
   27673:	89 e5                	mov    ebp,esp
   27675:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:26
    uint8_t start=0, length=0;
   27678:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   2767c:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:29

        // Trim.Start:
        length = strlen(pointerToString);
   27680:	83 ec 0c             	sub    esp,0xc
   27683:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27686:	e8 fd fb ff ff       	call   27288 <strlen>
   2768b:	83 c4 10             	add    esp,0x10
   2768e:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:30
        while ((pointerToString)[start]==' ') start++;
   27691:	eb 0a                	jmp    2769d <strtrim2+0x2b>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:30 (discriminator 2)
   27693:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27697:	83 c0 01             	add    eax,0x1
   2769a:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:30 (discriminator 1)
   2769d:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   276a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   276a4:	01 d0                	add    eax,edx
   276a6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   276a9:	3c 20                	cmp    al,0x20
   276ab:	74 e6                	je     27693 <strtrim2+0x21>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:31
        (pointerToString) += start;
   276ad:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   276b1:	01 45 08             	add    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:33

        if (start < length) // Required for empty (ex. "    ") input
   276b4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   276b8:	3a 45 f5             	cmp    al,BYTE PTR [ebp-0xb]
   276bb:	73 3f                	jae    276fc <strtrim2+0x8a>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:36
        {
            // Trim.End:
            uint8_t end = strlen(pointerToString)-1; // Get string length again (after Trim.Start)
   276bd:	83 ec 0c             	sub    esp,0xc
   276c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   276c3:	e8 c0 fb ff ff       	call   27288 <strlen>
   276c8:	83 c4 10             	add    esp,0x10
   276cb:	83 e8 01             	sub    eax,0x1
   276ce:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:37
            while ((pointerToString)[end]==' ') end--;
   276d1:	eb 0a                	jmp    276dd <strtrim2+0x6b>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:37 (discriminator 2)
   276d3:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   276d7:	83 e8 01             	sub    eax,0x1
   276da:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:37 (discriminator 1)
   276dd:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   276e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   276e4:	01 d0                	add    eax,edx
   276e6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   276e9:	3c 20                	cmp    al,0x20
   276eb:	74 e6                	je     276d3 <strtrim2+0x61>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:38
            (pointerToString)[end+1] = 0;
   276ed:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   276f1:	8d 50 01             	lea    edx,[eax+0x1]
   276f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   276f7:	01 d0                	add    eax,edx
   276f9:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:41
        }

    return pointerToString;
   276fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:42
}
   276ff:	c9                   	leave  
   27700:	c3                   	ret    
   27701:	66 90                	xchg   ax,ax
   27703:	90                   	nop

00027704 <time>:
time():
/home/yogi/src/os/chrisOS/src/time.c:83
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

extern time_t kSystemCurrentTime;
time_t time(time_t* arg)
{
   27704:	55                   	push   ebp
   27705:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/time.c:84
    *arg = kSystemCurrentTime;
   27707:	8b 15 8c 02 12 00    	mov    edx,DWORD PTR ds:0x12028c
   2770d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27710:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/time.c:85
    return kSystemCurrentTime;
   27712:	a1 8c 02 12 00       	mov    eax,ds:0x12028c
/home/yogi/src/os/chrisOS/src/time.c:86
}
   27717:	5d                   	pop    ebp
   27718:	c3                   	ret    

00027719 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/chrisOS/src/time.c:88

struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) {
   27719:	55                   	push   ebp
   2771a:	89 e5                	mov    ebp,esp
   2771c:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/time.c:89
  time_t time = *timer;
   2771f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27722:	8b 00                	mov    eax,DWORD PTR [eax]
   27724:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:91
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
   27727:	c7 45 f8 b2 07 00 00 	mov    DWORD PTR [ebp-0x8],0x7b2
/home/yogi/src/os/chrisOS/src/time.c:93

  dayclock = (unsigned long) time % SECS_DAY;
   2772e:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   27731:	ba 07 45 2e c2       	mov    edx,0xc22e4507
   27736:	89 c8                	mov    eax,ecx
   27738:	f7 e2                	mul    edx
   2773a:	89 d0                	mov    eax,edx
   2773c:	c1 e8 10             	shr    eax,0x10
   2773f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   27742:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   27745:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
   2774b:	29 c1                	sub    ecx,eax
   2774d:	89 c8                	mov    eax,ecx
   2774f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/time.c:94
  dayno = (unsigned long) time / SECS_DAY;
   27752:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   27755:	ba 07 45 2e c2       	mov    edx,0xc22e4507
   2775a:	f7 e2                	mul    edx
   2775c:	89 d0                	mov    eax,edx
   2775e:	c1 e8 10             	shr    eax,0x10
   27761:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:96

  tmbuf->tm_sec = dayclock % 60;
   27764:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   27767:	ba 89 88 88 88       	mov    edx,0x88888889
   2776c:	89 c8                	mov    eax,ecx
   2776e:	f7 e2                	mul    edx
   27770:	89 d0                	mov    eax,edx
   27772:	c1 e8 05             	shr    eax,0x5
   27775:	89 c2                	mov    edx,eax
   27777:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
   2777e:	89 c2                	mov    edx,eax
   27780:	89 d0                	mov    eax,edx
   27782:	c1 e0 04             	shl    eax,0x4
   27785:	29 d0                	sub    eax,edx
   27787:	29 c1                	sub    ecx,eax
   27789:	89 c8                	mov    eax,ecx
   2778b:	89 c2                	mov    edx,eax
   2778d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27790:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/time.c:97
  tmbuf->tm_min = (dayclock % 3600) / 60;
   27792:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   27795:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   2779a:	89 c8                	mov    eax,ecx
   2779c:	f7 e2                	mul    edx
   2779e:	89 d0                	mov    eax,edx
   277a0:	c1 e8 0b             	shr    eax,0xb
   277a3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
   277a9:	29 c1                	sub    ecx,eax
   277ab:	89 c8                	mov    eax,ecx
   277ad:	ba 89 88 88 88       	mov    edx,0x88888889
   277b2:	f7 e2                	mul    edx
   277b4:	89 d0                	mov    eax,edx
   277b6:	c1 e8 05             	shr    eax,0x5
   277b9:	89 c2                	mov    edx,eax
   277bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   277be:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/time.c:98
  tmbuf->tm_hour = dayclock / 3600;
   277c1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   277c4:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   277c9:	f7 e2                	mul    edx
   277cb:	89 d0                	mov    eax,edx
   277cd:	c1 e8 0b             	shr    eax,0xb
   277d0:	89 c2                	mov    edx,eax
   277d2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   277d5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:99
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
   277d8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   277db:	8d 48 04             	lea    ecx,[eax+0x4]
   277de:	ba 25 49 92 24       	mov    edx,0x24924925
   277e3:	89 c8                	mov    eax,ecx
   277e5:	f7 e2                	mul    edx
   277e7:	89 c8                	mov    eax,ecx
   277e9:	29 d0                	sub    eax,edx
   277eb:	d1 e8                	shr    eax,1
   277ed:	01 d0                	add    eax,edx
   277ef:	c1 e8 02             	shr    eax,0x2
   277f2:	89 c2                	mov    edx,eax
   277f4:	c1 e2 03             	shl    edx,0x3
   277f7:	29 c2                	sub    edx,eax
   277f9:	89 c8                	mov    eax,ecx
   277fb:	29 d0                	sub    eax,edx
   277fd:	89 c2                	mov    edx,eax
   277ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27802:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/time.c:100
  while (dayno >= (unsigned long) YEARSIZE(year)) {
   27805:	eb 66                	jmp    2786d <gmtime_r+0x154>
/home/yogi/src/os/chrisOS/src/time.c:101
    dayno -= YEARSIZE(year);
   27807:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   2780a:	83 e0 03             	and    eax,0x3
   2780d:	85 c0                	test   eax,eax
   2780f:	75 50                	jne    27861 <gmtime_r+0x148>
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 1)
   27811:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27814:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27819:	89 c8                	mov    eax,ecx
   2781b:	f7 ea                	imul   edx
   2781d:	c1 fa 05             	sar    edx,0x5
   27820:	89 c8                	mov    eax,ecx
   27822:	c1 f8 1f             	sar    eax,0x1f
   27825:	29 c2                	sub    edx,eax
   27827:	89 d0                	mov    eax,edx
   27829:	6b c0 64             	imul   eax,eax,0x64
   2782c:	29 c1                	sub    ecx,eax
   2782e:	89 c8                	mov    eax,ecx
   27830:	85 c0                	test   eax,eax
   27832:	75 26                	jne    2785a <gmtime_r+0x141>
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 4)
   27834:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27837:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2783c:	89 c8                	mov    eax,ecx
   2783e:	f7 ea                	imul   edx
   27840:	c1 fa 07             	sar    edx,0x7
   27843:	89 c8                	mov    eax,ecx
   27845:	c1 f8 1f             	sar    eax,0x1f
   27848:	29 c2                	sub    edx,eax
   2784a:	89 d0                	mov    eax,edx
   2784c:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   27852:	29 c1                	sub    ecx,eax
   27854:	89 c8                	mov    eax,ecx
   27856:	85 c0                	test   eax,eax
   27858:	75 07                	jne    27861 <gmtime_r+0x148>
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 5)
   2785a:	b8 6e 01 00 00       	mov    eax,0x16e
   2785f:	eb 05                	jmp    27866 <gmtime_r+0x14d>
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 6)
   27861:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 8)
   27866:	29 45 fc             	sub    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:102 (discriminator 8)
    year++;
   27869:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/time.c:100

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
   2786d:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   27870:	83 e0 03             	and    eax,0x3
   27873:	85 c0                	test   eax,eax
   27875:	75 50                	jne    278c7 <gmtime_r+0x1ae>
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 1)
   27877:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   2787a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2787f:	89 c8                	mov    eax,ecx
   27881:	f7 ea                	imul   edx
   27883:	c1 fa 05             	sar    edx,0x5
   27886:	89 c8                	mov    eax,ecx
   27888:	c1 f8 1f             	sar    eax,0x1f
   2788b:	29 c2                	sub    edx,eax
   2788d:	89 d0                	mov    eax,edx
   2788f:	6b c0 64             	imul   eax,eax,0x64
   27892:	29 c1                	sub    ecx,eax
   27894:	89 c8                	mov    eax,ecx
   27896:	85 c0                	test   eax,eax
   27898:	75 26                	jne    278c0 <gmtime_r+0x1a7>
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 4)
   2789a:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   2789d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   278a2:	89 c8                	mov    eax,ecx
   278a4:	f7 ea                	imul   edx
   278a6:	c1 fa 07             	sar    edx,0x7
   278a9:	89 c8                	mov    eax,ecx
   278ab:	c1 f8 1f             	sar    eax,0x1f
   278ae:	29 c2                	sub    edx,eax
   278b0:	89 d0                	mov    eax,edx
   278b2:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   278b8:	29 c1                	sub    ecx,eax
   278ba:	89 c8                	mov    eax,ecx
   278bc:	85 c0                	test   eax,eax
   278be:	75 07                	jne    278c7 <gmtime_r+0x1ae>
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 5)
   278c0:	b8 6e 01 00 00       	mov    eax,0x16e
   278c5:	eb 05                	jmp    278cc <gmtime_r+0x1b3>
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 6)
   278c7:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 8)
   278cc:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   278cf:	0f 86 32 ff ff ff    	jbe    27807 <gmtime_r+0xee>
/home/yogi/src/os/chrisOS/src/time.c:104
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
   278d5:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   278d8:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
   278de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   278e1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:105
  tmbuf->tm_yday = dayno;
   278e4:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   278e7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   278ea:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/time.c:106
  tmbuf->tm_mon = 0;
   278ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   278f0:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/time.c:107
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
   278f7:	e9 89 00 00 00       	jmp    27985 <gmtime_r+0x26c>
/home/yogi/src/os/chrisOS/src/time.c:108
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
   278fc:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   278ff:	83 e0 03             	and    eax,0x3
   27902:	85 c0                	test   eax,eax
   27904:	75 50                	jne    27956 <gmtime_r+0x23d>
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 1)
   27906:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27909:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2790e:	89 c8                	mov    eax,ecx
   27910:	f7 ea                	imul   edx
   27912:	c1 fa 05             	sar    edx,0x5
   27915:	89 c8                	mov    eax,ecx
   27917:	c1 f8 1f             	sar    eax,0x1f
   2791a:	29 c2                	sub    edx,eax
   2791c:	89 d0                	mov    eax,edx
   2791e:	6b c0 64             	imul   eax,eax,0x64
   27921:	29 c1                	sub    ecx,eax
   27923:	89 c8                	mov    eax,ecx
   27925:	85 c0                	test   eax,eax
   27927:	75 26                	jne    2794f <gmtime_r+0x236>
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 4)
   27929:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   2792c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27931:	89 c8                	mov    eax,ecx
   27933:	f7 ea                	imul   edx
   27935:	c1 fa 07             	sar    edx,0x7
   27938:	89 c8                	mov    eax,ecx
   2793a:	c1 f8 1f             	sar    eax,0x1f
   2793d:	29 c2                	sub    edx,eax
   2793f:	89 d0                	mov    eax,edx
   27941:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   27947:	29 c1                	sub    ecx,eax
   27949:	89 c8                	mov    eax,ecx
   2794b:	85 c0                	test   eax,eax
   2794d:	75 07                	jne    27956 <gmtime_r+0x23d>
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 5)
   2794f:	ba 01 00 00 00       	mov    edx,0x1
   27954:	eb 05                	jmp    2795b <gmtime_r+0x242>
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 6)
   27956:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 8)
   2795b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2795e:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   27961:	89 d0                	mov    eax,edx
   27963:	01 c0                	add    eax,eax
   27965:	01 d0                	add    eax,edx
   27967:	c1 e0 02             	shl    eax,0x2
   2796a:	01 c8                	add    eax,ecx
   2796c:	8b 04 85 80 5f 08 00 	mov    eax,DWORD PTR [eax*4+0x85f80]
   27973:	29 45 fc             	sub    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:109 (discriminator 8)
    tmbuf->tm_mon++;
   27976:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27979:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   2797c:	8d 50 01             	lea    edx,[eax+0x1]
   2797f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27982:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/time.c:107
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
   27985:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   27988:	83 e0 03             	and    eax,0x3
   2798b:	85 c0                	test   eax,eax
   2798d:	75 50                	jne    279df <gmtime_r+0x2c6>
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 1)
   2798f:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27992:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27997:	89 c8                	mov    eax,ecx
   27999:	f7 ea                	imul   edx
   2799b:	c1 fa 05             	sar    edx,0x5
   2799e:	89 c8                	mov    eax,ecx
   279a0:	c1 f8 1f             	sar    eax,0x1f
   279a3:	29 c2                	sub    edx,eax
   279a5:	89 d0                	mov    eax,edx
   279a7:	6b c0 64             	imul   eax,eax,0x64
   279aa:	29 c1                	sub    ecx,eax
   279ac:	89 c8                	mov    eax,ecx
   279ae:	85 c0                	test   eax,eax
   279b0:	75 26                	jne    279d8 <gmtime_r+0x2bf>
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 4)
   279b2:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   279b5:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   279ba:	89 c8                	mov    eax,ecx
   279bc:	f7 ea                	imul   edx
   279be:	c1 fa 07             	sar    edx,0x7
   279c1:	89 c8                	mov    eax,ecx
   279c3:	c1 f8 1f             	sar    eax,0x1f
   279c6:	29 c2                	sub    edx,eax
   279c8:	89 d0                	mov    eax,edx
   279ca:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   279d0:	29 c1                	sub    ecx,eax
   279d2:	89 c8                	mov    eax,ecx
   279d4:	85 c0                	test   eax,eax
   279d6:	75 07                	jne    279df <gmtime_r+0x2c6>
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 5)
   279d8:	ba 01 00 00 00       	mov    edx,0x1
   279dd:	eb 05                	jmp    279e4 <gmtime_r+0x2cb>
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 6)
   279df:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 8)
   279e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   279e7:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   279ea:	89 d0                	mov    eax,edx
   279ec:	01 c0                	add    eax,eax
   279ee:	01 d0                	add    eax,edx
   279f0:	c1 e0 02             	shl    eax,0x2
   279f3:	01 c8                	add    eax,ecx
   279f5:	8b 04 85 80 5f 08 00 	mov    eax,DWORD PTR [eax*4+0x85f80]
   279fc:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   279ff:	0f 86 f7 fe ff ff    	jbe    278fc <gmtime_r+0x1e3>
/home/yogi/src/os/chrisOS/src/time.c:111
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
   27a05:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   27a08:	83 c0 01             	add    eax,0x1
   27a0b:	89 c2                	mov    edx,eax
   27a0d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27a10:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/time.c:112
  tmbuf->tm_isdst = 0;
   27a13:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27a16:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/chrisOS/src/time.c:113
  return tmbuf;
   27a1d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/time.c:114
}
   27a20:	c9                   	leave  
   27a21:	c3                   	ret    

00027a22 <localtime>:
localtime():
/home/yogi/src/os/chrisOS/src/time.c:116

struct tm *localtime(const time_t *timer) {
   27a22:	55                   	push   ebp
   27a23:	89 e5                	mov    ebp,esp
   27a25:	83 ec 30             	sub    esp,0x30
/home/yogi/src/os/chrisOS/src/time.c:120
  time_t t;
  struct tm tmbuf;
  
  t = *timer - kTimeZone;
   27a28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27a2b:	8b 10                	mov    edx,DWORD PTR [eax]
   27a2d:	a1 90 02 12 00       	mov    eax,ds:0x120290
   27a32:	29 c2                	sub    edx,eax
   27a34:	89 d0                	mov    eax,edx
   27a36:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:121
  return gmtime_r(&t, &tmbuf);
   27a39:	8d 45 d0             	lea    eax,[ebp-0x30]
   27a3c:	50                   	push   eax
   27a3d:	8d 45 fc             	lea    eax,[ebp-0x4]
   27a40:	50                   	push   eax
   27a41:	e8 d3 fc ff ff       	call   27719 <gmtime_r>
   27a46:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/time.c:122
}
   27a49:	c9                   	leave  
   27a4a:	c3                   	ret    

00027a4b <localtime_r>:
localtime_r():
/home/yogi/src/os/chrisOS/src/time.c:124

struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
   27a4b:	55                   	push   ebp
   27a4c:	89 e5                	mov    ebp,esp
   27a4e:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/time.c:127
  time_t t;

  t = *timer - kTimeZone;
   27a51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27a54:	8b 10                	mov    edx,DWORD PTR [eax]
   27a56:	a1 90 02 12 00       	mov    eax,ds:0x120290
   27a5b:	29 c2                	sub    edx,eax
   27a5d:	89 d0                	mov    eax,edx
   27a5f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:128
  return gmtime_r(&t, tmbuf);
   27a62:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   27a65:	8d 45 fc             	lea    eax,[ebp-0x4]
   27a68:	50                   	push   eax
   27a69:	e8 ab fc ff ff       	call   27719 <gmtime_r>
   27a6e:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/time.c:129
}
   27a71:	c9                   	leave  
   27a72:	c3                   	ret    

00027a73 <mktime>:
mktime():
/home/yogi/src/os/chrisOS/src/time.c:131

time_t mktime(struct tm *tmbuf) {
   27a73:	55                   	push   ebp
   27a74:	89 e5                	mov    ebp,esp
   27a76:	56                   	push   esi
   27a77:	53                   	push   ebx
   27a78:	83 ec 20             	sub    esp,0x20
/home/yogi/src/os/chrisOS/src/time.c:139
  int yday, month;
  /*unsigned*/ long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
   27a7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27a7e:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
   27a81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27a84:	8b 08                	mov    ecx,DWORD PTR [eax]
   27a86:	ba 89 88 88 88       	mov    edx,0x88888889
   27a8b:	89 c8                	mov    eax,ecx
   27a8d:	f7 ea                	imul   edx
   27a8f:	8d 04 0a             	lea    eax,[edx+ecx*1]
   27a92:	c1 f8 05             	sar    eax,0x5
   27a95:	89 c2                	mov    edx,eax
   27a97:	89 c8                	mov    eax,ecx
   27a99:	c1 f8 1f             	sar    eax,0x1f
   27a9c:	29 c2                	sub    edx,eax
   27a9e:	89 d0                	mov    eax,edx
   27aa0:	8d 14 03             	lea    edx,[ebx+eax*1]
   27aa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27aa6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/time.c:140
  tmbuf->tm_sec %= 60;
   27aa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27aac:	8b 08                	mov    ecx,DWORD PTR [eax]
   27aae:	ba 89 88 88 88       	mov    edx,0x88888889
   27ab3:	89 c8                	mov    eax,ecx
   27ab5:	f7 ea                	imul   edx
   27ab7:	8d 04 0a             	lea    eax,[edx+ecx*1]
   27aba:	c1 f8 05             	sar    eax,0x5
   27abd:	89 c2                	mov    edx,eax
   27abf:	89 c8                	mov    eax,ecx
   27ac1:	c1 f8 1f             	sar    eax,0x1f
   27ac4:	29 c2                	sub    edx,eax
   27ac6:	89 d0                	mov    eax,edx
   27ac8:	89 c2                	mov    edx,eax
   27aca:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
   27ad1:	89 c2                	mov    edx,eax
   27ad3:	89 d0                	mov    eax,edx
   27ad5:	c1 e0 04             	shl    eax,0x4
   27ad8:	29 d0                	sub    eax,edx
   27ada:	29 c1                	sub    ecx,eax
   27adc:	89 c8                	mov    eax,ecx
   27ade:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   27ae1:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/time.c:141
  if (tmbuf->tm_sec < 0) {
   27ae3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27ae6:	8b 00                	mov    eax,DWORD PTR [eax]
   27ae8:	85 c0                	test   eax,eax
   27aea:	79 1c                	jns    27b08 <mktime+0x95>
/home/yogi/src/os/chrisOS/src/time.c:142
    tmbuf->tm_sec += 60;
   27aec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27aef:	8b 00                	mov    eax,DWORD PTR [eax]
   27af1:	8d 50 3c             	lea    edx,[eax+0x3c]
   27af4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27af7:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/time.c:143
    tmbuf->tm_min--;
   27af9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27afc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   27aff:	8d 50 ff             	lea    edx,[eax-0x1]
   27b02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b05:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/time.c:145
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
   27b08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b0b:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
   27b0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b11:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   27b14:	ba 89 88 88 88       	mov    edx,0x88888889
   27b19:	89 c8                	mov    eax,ecx
   27b1b:	f7 ea                	imul   edx
   27b1d:	8d 04 0a             	lea    eax,[edx+ecx*1]
   27b20:	c1 f8 05             	sar    eax,0x5
   27b23:	89 c2                	mov    edx,eax
   27b25:	89 c8                	mov    eax,ecx
   27b27:	c1 f8 1f             	sar    eax,0x1f
   27b2a:	29 c2                	sub    edx,eax
   27b2c:	89 d0                	mov    eax,edx
   27b2e:	8d 14 03             	lea    edx,[ebx+eax*1]
   27b31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b34:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:146
  tmbuf->tm_min = tmbuf->tm_min % 60;
   27b37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b3a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   27b3d:	ba 89 88 88 88       	mov    edx,0x88888889
   27b42:	89 c8                	mov    eax,ecx
   27b44:	f7 ea                	imul   edx
   27b46:	8d 04 0a             	lea    eax,[edx+ecx*1]
   27b49:	c1 f8 05             	sar    eax,0x5
   27b4c:	89 c2                	mov    edx,eax
   27b4e:	89 c8                	mov    eax,ecx
   27b50:	c1 f8 1f             	sar    eax,0x1f
   27b53:	29 c2                	sub    edx,eax
   27b55:	89 d0                	mov    eax,edx
   27b57:	89 c2                	mov    edx,eax
   27b59:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
   27b60:	89 c2                	mov    edx,eax
   27b62:	89 d0                	mov    eax,edx
   27b64:	c1 e0 04             	shl    eax,0x4
   27b67:	29 d0                	sub    eax,edx
   27b69:	29 c1                	sub    ecx,eax
   27b6b:	89 c8                	mov    eax,ecx
   27b6d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   27b70:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:147
  if (tmbuf->tm_min < 0) {
   27b73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   27b79:	85 c0                	test   eax,eax
   27b7b:	79 1e                	jns    27b9b <mktime+0x128>
/home/yogi/src/os/chrisOS/src/time.c:148
    tmbuf->tm_min += 60;
   27b7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   27b83:	8d 50 3c             	lea    edx,[eax+0x3c]
   27b86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b89:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/time.c:149
    tmbuf->tm_hour--;
   27b8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b8f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   27b92:	8d 50 ff             	lea    edx,[eax-0x1]
   27b95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b98:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:151
  }
  day = tmbuf->tm_hour / 24;
   27b9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b9e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   27ba1:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   27ba6:	89 c8                	mov    eax,ecx
   27ba8:	f7 ea                	imul   edx
   27baa:	c1 fa 02             	sar    edx,0x2
   27bad:	89 c8                	mov    eax,ecx
   27baf:	c1 f8 1f             	sar    eax,0x1f
   27bb2:	29 c2                	sub    edx,eax
   27bb4:	89 d0                	mov    eax,edx
   27bb6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:152
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
   27bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27bbc:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   27bbf:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   27bc4:	89 c8                	mov    eax,ecx
   27bc6:	f7 ea                	imul   edx
   27bc8:	c1 fa 02             	sar    edx,0x2
   27bcb:	89 c8                	mov    eax,ecx
   27bcd:	c1 f8 1f             	sar    eax,0x1f
   27bd0:	29 c2                	sub    edx,eax
   27bd2:	89 d0                	mov    eax,edx
   27bd4:	01 c0                	add    eax,eax
   27bd6:	01 d0                	add    eax,edx
   27bd8:	c1 e0 03             	shl    eax,0x3
   27bdb:	29 c1                	sub    ecx,eax
   27bdd:	89 ca                	mov    edx,ecx
   27bdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27be2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:153
  if (tmbuf->tm_hour < 0) {
   27be5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27be8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   27beb:	85 c0                	test   eax,eax
   27bed:	79 13                	jns    27c02 <mktime+0x18f>
/home/yogi/src/os/chrisOS/src/time.c:154
    tmbuf->tm_hour += 24;
   27bef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27bf2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   27bf5:	8d 50 18             	lea    edx,[eax+0x18]
   27bf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27bfb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:155
    day--;
   27bfe:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/time.c:157
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
   27c02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c05:	8b 58 14             	mov    ebx,DWORD PTR [eax+0x14]
   27c08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c0b:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   27c0e:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   27c13:	89 c8                	mov    eax,ecx
   27c15:	f7 ea                	imul   edx
   27c17:	d1 fa                	sar    edx,1
   27c19:	89 c8                	mov    eax,ecx
   27c1b:	c1 f8 1f             	sar    eax,0x1f
   27c1e:	29 c2                	sub    edx,eax
   27c20:	89 d0                	mov    eax,edx
   27c22:	8d 14 03             	lea    edx,[ebx+eax*1]
   27c25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c28:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:158
  tmbuf->tm_mon %= 12;
   27c2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c2e:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   27c31:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   27c36:	89 c8                	mov    eax,ecx
   27c38:	f7 ea                	imul   edx
   27c3a:	d1 fa                	sar    edx,1
   27c3c:	89 c8                	mov    eax,ecx
   27c3e:	c1 f8 1f             	sar    eax,0x1f
   27c41:	29 c2                	sub    edx,eax
   27c43:	89 d0                	mov    eax,edx
   27c45:	01 c0                	add    eax,eax
   27c47:	01 d0                	add    eax,edx
   27c49:	c1 e0 02             	shl    eax,0x2
   27c4c:	29 c1                	sub    ecx,eax
   27c4e:	89 ca                	mov    edx,ecx
   27c50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c53:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/time.c:159
  if (tmbuf->tm_mon < 0) {
   27c56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c59:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   27c5c:	85 c0                	test   eax,eax
   27c5e:	79 1e                	jns    27c7e <mktime+0x20b>
/home/yogi/src/os/chrisOS/src/time.c:160
    tmbuf->tm_mon += 12;
   27c60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c63:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   27c66:	8d 50 0c             	lea    edx,[eax+0xc]
   27c69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c6c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/time.c:161
    tmbuf->tm_year--;
   27c6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c72:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27c75:	8d 50 ff             	lea    edx,[eax-0x1]
   27c78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c7b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:163
  }
  day += (tmbuf->tm_mday - 1);
   27c7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c81:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   27c84:	83 e8 01             	sub    eax,0x1
   27c87:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:164
  while (day < 0) {
   27c8a:	e9 c1 00 00 00       	jmp    27d50 <mktime+0x2dd>
/home/yogi/src/os/chrisOS/src/time.c:165
    if(--tmbuf->tm_mon < 0) {
   27c8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c92:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   27c95:	8d 50 ff             	lea    edx,[eax-0x1]
   27c98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c9b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
   27c9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27ca1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   27ca4:	85 c0                	test   eax,eax
   27ca6:	79 19                	jns    27cc1 <mktime+0x24e>
/home/yogi/src/os/chrisOS/src/time.c:166
      tmbuf->tm_year--;
   27ca8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27cab:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27cae:	8d 50 ff             	lea    edx,[eax-0x1]
   27cb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27cb4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:167
      tmbuf->tm_mon = 11;
   27cb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27cba:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/chrisOS/src/time.c:169
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
   27cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27cc4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27cc7:	83 e0 03             	and    eax,0x3
   27cca:	85 c0                	test   eax,eax
   27ccc:	75 62                	jne    27d30 <mktime+0x2bd>
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 1)
   27cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27cd1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27cd4:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   27cda:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27cdf:	89 c8                	mov    eax,ecx
   27ce1:	f7 ea                	imul   edx
   27ce3:	c1 fa 05             	sar    edx,0x5
   27ce6:	89 c8                	mov    eax,ecx
   27ce8:	c1 f8 1f             	sar    eax,0x1f
   27ceb:	29 c2                	sub    edx,eax
   27ced:	89 d0                	mov    eax,edx
   27cef:	6b c0 64             	imul   eax,eax,0x64
   27cf2:	29 c1                	sub    ecx,eax
   27cf4:	89 c8                	mov    eax,ecx
   27cf6:	85 c0                	test   eax,eax
   27cf8:	75 2f                	jne    27d29 <mktime+0x2b6>
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 4)
   27cfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27cfd:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27d00:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   27d06:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27d0b:	89 c8                	mov    eax,ecx
   27d0d:	f7 ea                	imul   edx
   27d0f:	c1 fa 07             	sar    edx,0x7
   27d12:	89 c8                	mov    eax,ecx
   27d14:	c1 f8 1f             	sar    eax,0x1f
   27d17:	29 c2                	sub    edx,eax
   27d19:	89 d0                	mov    eax,edx
   27d1b:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   27d21:	29 c1                	sub    ecx,eax
   27d23:	89 c8                	mov    eax,ecx
   27d25:	85 c0                	test   eax,eax
   27d27:	75 07                	jne    27d30 <mktime+0x2bd>
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 5)
   27d29:	ba 01 00 00 00       	mov    edx,0x1
   27d2e:	eb 05                	jmp    27d35 <mktime+0x2c2>
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 6)
   27d30:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 8)
   27d35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d38:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   27d3b:	89 d0                	mov    eax,edx
   27d3d:	01 c0                	add    eax,eax
   27d3f:	01 d0                	add    eax,edx
   27d41:	c1 e0 02             	shl    eax,0x2
   27d44:	01 c8                	add    eax,ecx
   27d46:	8b 04 85 80 5f 08 00 	mov    eax,DWORD PTR [eax*4+0x85f80]
   27d4d:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:164
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
   27d50:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   27d54:	0f 88 35 ff ff ff    	js     27c8f <mktime+0x21c>
/home/yogi/src/os/chrisOS/src/time.c:171
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
   27d5a:	e9 c2 00 00 00       	jmp    27e21 <mktime+0x3ae>
/home/yogi/src/os/chrisOS/src/time.c:172
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
   27d5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d62:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27d65:	83 e0 03             	and    eax,0x3
   27d68:	85 c0                	test   eax,eax
   27d6a:	75 62                	jne    27dce <mktime+0x35b>
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 1)
   27d6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d6f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27d72:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   27d78:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27d7d:	89 c8                	mov    eax,ecx
   27d7f:	f7 ea                	imul   edx
   27d81:	c1 fa 05             	sar    edx,0x5
   27d84:	89 c8                	mov    eax,ecx
   27d86:	c1 f8 1f             	sar    eax,0x1f
   27d89:	29 c2                	sub    edx,eax
   27d8b:	89 d0                	mov    eax,edx
   27d8d:	6b c0 64             	imul   eax,eax,0x64
   27d90:	29 c1                	sub    ecx,eax
   27d92:	89 c8                	mov    eax,ecx
   27d94:	85 c0                	test   eax,eax
   27d96:	75 2f                	jne    27dc7 <mktime+0x354>
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 4)
   27d98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d9b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27d9e:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   27da4:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27da9:	89 c8                	mov    eax,ecx
   27dab:	f7 ea                	imul   edx
   27dad:	c1 fa 07             	sar    edx,0x7
   27db0:	89 c8                	mov    eax,ecx
   27db2:	c1 f8 1f             	sar    eax,0x1f
   27db5:	29 c2                	sub    edx,eax
   27db7:	89 d0                	mov    eax,edx
   27db9:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   27dbf:	29 c1                	sub    ecx,eax
   27dc1:	89 c8                	mov    eax,ecx
   27dc3:	85 c0                	test   eax,eax
   27dc5:	75 07                	jne    27dce <mktime+0x35b>
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 5)
   27dc7:	ba 01 00 00 00       	mov    edx,0x1
   27dcc:	eb 05                	jmp    27dd3 <mktime+0x360>
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 6)
   27dce:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 8)
   27dd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27dd6:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   27dd9:	89 d0                	mov    eax,edx
   27ddb:	01 c0                	add    eax,eax
   27ddd:	01 d0                	add    eax,edx
   27ddf:	c1 e0 02             	shl    eax,0x2
   27de2:	01 c8                	add    eax,ecx
   27de4:	8b 04 85 80 5f 08 00 	mov    eax,DWORD PTR [eax*4+0x85f80]
   27deb:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:173 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
   27dee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27df1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   27df4:	8d 50 01             	lea    edx,[eax+0x1]
   27df7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27dfa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
   27dfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   27e03:	83 f8 0c             	cmp    eax,0xc
   27e06:	75 19                	jne    27e21 <mktime+0x3ae>
/home/yogi/src/os/chrisOS/src/time.c:174
      tmbuf->tm_mon = 0;
   27e08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e0b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/time.c:175
      tmbuf->tm_year++;
   27e12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e15:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27e18:	8d 50 01             	lea    edx,[eax+0x1]
   27e1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e1e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:171
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
   27e21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e24:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27e27:	83 e0 03             	and    eax,0x3
   27e2a:	85 c0                	test   eax,eax
   27e2c:	75 62                	jne    27e90 <mktime+0x41d>
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 1)
   27e2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e31:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27e34:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   27e3a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27e3f:	89 c8                	mov    eax,ecx
   27e41:	f7 ea                	imul   edx
   27e43:	c1 fa 05             	sar    edx,0x5
   27e46:	89 c8                	mov    eax,ecx
   27e48:	c1 f8 1f             	sar    eax,0x1f
   27e4b:	29 c2                	sub    edx,eax
   27e4d:	89 d0                	mov    eax,edx
   27e4f:	6b c0 64             	imul   eax,eax,0x64
   27e52:	29 c1                	sub    ecx,eax
   27e54:	89 c8                	mov    eax,ecx
   27e56:	85 c0                	test   eax,eax
   27e58:	75 2f                	jne    27e89 <mktime+0x416>
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 4)
   27e5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e5d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27e60:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   27e66:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27e6b:	89 c8                	mov    eax,ecx
   27e6d:	f7 ea                	imul   edx
   27e6f:	c1 fa 07             	sar    edx,0x7
   27e72:	89 c8                	mov    eax,ecx
   27e74:	c1 f8 1f             	sar    eax,0x1f
   27e77:	29 c2                	sub    edx,eax
   27e79:	89 d0                	mov    eax,edx
   27e7b:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   27e81:	29 c1                	sub    ecx,eax
   27e83:	89 c8                	mov    eax,ecx
   27e85:	85 c0                	test   eax,eax
   27e87:	75 07                	jne    27e90 <mktime+0x41d>
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 5)
   27e89:	ba 01 00 00 00       	mov    edx,0x1
   27e8e:	eb 05                	jmp    27e95 <mktime+0x422>
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 6)
   27e90:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 8)
   27e95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e98:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   27e9b:	89 d0                	mov    eax,edx
   27e9d:	01 c0                	add    eax,eax
   27e9f:	01 d0                	add    eax,edx
   27ea1:	c1 e0 02             	shl    eax,0x2
   27ea4:	01 c8                	add    eax,ecx
   27ea6:	8b 04 85 80 5f 08 00 	mov    eax,DWORD PTR [eax*4+0x85f80]
   27ead:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   27eb0:	0f 8e a9 fe ff ff    	jle    27d5f <mktime+0x2ec>
/home/yogi/src/os/chrisOS/src/time.c:178
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
   27eb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   27eb9:	8d 50 01             	lea    edx,[eax+0x1]
   27ebc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27ebf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/time.c:179
  year = EPOCH_YR;
   27ec2:	c7 45 e0 b2 07 00 00 	mov    DWORD PTR [ebp-0x20],0x7b2
/home/yogi/src/os/chrisOS/src/time.c:180
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
   27ec9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27ecc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27ecf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   27ed2:	81 ea 6c 07 00 00    	sub    edx,0x76c
   27ed8:	39 d0                	cmp    eax,edx
   27eda:	7d 0a                	jge    27ee6 <mktime+0x473>
/home/yogi/src/os/chrisOS/src/time.c:180 (discriminator 1)
   27edc:	b8 19 fc ff ff       	mov    eax,0xfffffc19
   27ee1:	e9 c0 03 00 00       	jmp    282a6 <mktime+0x833>
/home/yogi/src/os/chrisOS/src/time.c:181
  seconds = 0;
   27ee6:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/chrisOS/src/time.c:182
  day = 0;                      // Means days since day 0 now
   27eed:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/time.c:183
  overflow = 0;
   27ef4:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/time.c:190
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
   27efb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27efe:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27f01:	05 6c 07 00 00       	add    eax,0x76c
   27f06:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/time.c:192

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
   27f09:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   27f0c:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   27f0f:	3d 7c c6 59 00       	cmp    eax,0x59c67c
   27f14:	7e 07                	jle    27f1d <mktime+0x4aa>
/home/yogi/src/os/chrisOS/src/time.c:192 (discriminator 1)
   27f16:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/time.c:193
  day = (tm_year - year) * 365;
   27f1d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   27f20:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   27f23:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
   27f29:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:194
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
   27f2c:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
   27f31:	2b 45 f4             	sub    eax,DWORD PTR [ebp-0xc]
   27f34:	89 c2                	mov    edx,eax
   27f36:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   27f39:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   27f3c:	8d 48 03             	lea    ecx,[eax+0x3]
   27f3f:	85 c0                	test   eax,eax
   27f41:	0f 48 c1             	cmovs  eax,ecx
   27f44:	c1 f8 02             	sar    eax,0x2
   27f47:	83 c0 01             	add    eax,0x1
   27f4a:	39 c2                	cmp    edx,eax
   27f4c:	7d 04                	jge    27f52 <mktime+0x4df>
/home/yogi/src/os/chrisOS/src/time.c:194 (discriminator 1)
   27f4e:	83 4d e8 02          	or     DWORD PTR [ebp-0x18],0x2
/home/yogi/src/os/chrisOS/src/time.c:195
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
   27f52:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   27f55:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   27f58:	8d 50 03             	lea    edx,[eax+0x3]
   27f5b:	85 c0                	test   eax,eax
   27f5d:	0f 48 c2             	cmovs  eax,edx
   27f60:	c1 f8 02             	sar    eax,0x2
   27f63:	89 c1                	mov    ecx,eax
   27f65:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   27f68:	83 e0 03             	and    eax,0x3
   27f6b:	85 c0                	test   eax,eax
   27f6d:	74 29                	je     27f98 <mktime+0x525>
/home/yogi/src/os/chrisOS/src/time.c:195 (discriminator 1)
   27f6f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   27f72:	99                   	cdq    
   27f73:	c1 ea 1e             	shr    edx,0x1e
   27f76:	01 d0                	add    eax,edx
   27f78:	83 e0 03             	and    eax,0x3
   27f7b:	29 d0                	sub    eax,edx
   27f7d:	89 c3                	mov    ebx,eax
   27f7f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   27f82:	99                   	cdq    
   27f83:	c1 ea 1e             	shr    edx,0x1e
   27f86:	01 d0                	add    eax,edx
   27f88:	83 e0 03             	and    eax,0x3
   27f8b:	29 d0                	sub    eax,edx
   27f8d:	39 c3                	cmp    ebx,eax
   27f8f:	7d 07                	jge    27f98 <mktime+0x525>
/home/yogi/src/os/chrisOS/src/time.c:195 (discriminator 3)
   27f91:	b8 01 00 00 00       	mov    eax,0x1
   27f96:	eb 05                	jmp    27f9d <mktime+0x52a>
/home/yogi/src/os/chrisOS/src/time.c:195 (discriminator 4)
   27f98:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/time.c:195 (discriminator 6)
   27f9d:	01 c8                	add    eax,ecx
   27f9f:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
   27fa2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   27fa5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   27fa8:	89 c1                	mov    ecx,eax
   27faa:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27faf:	89 c8                	mov    eax,ecx
   27fb1:	f7 ea                	imul   edx
   27fb3:	c1 fa 05             	sar    edx,0x5
   27fb6:	89 c8                	mov    eax,ecx
   27fb8:	c1 f8 1f             	sar    eax,0x1f
   27fbb:	89 d6                	mov    esi,edx
   27fbd:	29 c6                	sub    esi,eax
   27fbf:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   27fc2:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27fc7:	89 c8                	mov    eax,ecx
   27fc9:	f7 ea                	imul   edx
   27fcb:	c1 fa 05             	sar    edx,0x5
   27fce:	89 c8                	mov    eax,ecx
   27fd0:	c1 f8 1f             	sar    eax,0x1f
   27fd3:	29 c2                	sub    edx,eax
   27fd5:	89 d0                	mov    eax,edx
   27fd7:	6b c0 64             	imul   eax,eax,0x64
   27fda:	29 c1                	sub    ecx,eax
   27fdc:	89 c8                	mov    eax,ecx
   27fde:	85 c0                	test   eax,eax
   27fe0:	74 49                	je     2802b <mktime+0x5b8>
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 1)
   27fe2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   27fe5:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27fea:	89 c8                	mov    eax,ecx
   27fec:	f7 ea                	imul   edx
   27fee:	c1 fa 05             	sar    edx,0x5
   27ff1:	89 c8                	mov    eax,ecx
   27ff3:	c1 f8 1f             	sar    eax,0x1f
   27ff6:	89 d3                	mov    ebx,edx
   27ff8:	29 c3                	sub    ebx,eax
   27ffa:	6b c3 64             	imul   eax,ebx,0x64
   27ffd:	89 cb                	mov    ebx,ecx
   27fff:	29 c3                	sub    ebx,eax
   28001:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   28004:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28009:	89 c8                	mov    eax,ecx
   2800b:	f7 ea                	imul   edx
   2800d:	c1 fa 05             	sar    edx,0x5
   28010:	89 c8                	mov    eax,ecx
   28012:	c1 f8 1f             	sar    eax,0x1f
   28015:	29 c2                	sub    edx,eax
   28017:	89 d0                	mov    eax,edx
   28019:	6b c0 64             	imul   eax,eax,0x64
   2801c:	29 c1                	sub    ecx,eax
   2801e:	89 c8                	mov    eax,ecx
   28020:	39 c3                	cmp    ebx,eax
   28022:	7d 07                	jge    2802b <mktime+0x5b8>
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 3)
   28024:	b8 01 00 00 00       	mov    eax,0x1
   28029:	eb 05                	jmp    28030 <mktime+0x5bd>
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 4)
   2802b:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 6)
   28030:	01 f0                	add    eax,esi
   28032:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
   28035:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   28038:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   2803b:	89 c1                	mov    ecx,eax
   2803d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28042:	89 c8                	mov    eax,ecx
   28044:	f7 ea                	imul   edx
   28046:	c1 fa 07             	sar    edx,0x7
   28049:	89 c8                	mov    eax,ecx
   2804b:	c1 f8 1f             	sar    eax,0x1f
   2804e:	89 d6                	mov    esi,edx
   28050:	29 c6                	sub    esi,eax
   28052:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   28055:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2805a:	89 c8                	mov    eax,ecx
   2805c:	f7 ea                	imul   edx
   2805e:	c1 fa 07             	sar    edx,0x7
   28061:	89 c8                	mov    eax,ecx
   28063:	c1 f8 1f             	sar    eax,0x1f
   28066:	29 c2                	sub    edx,eax
   28068:	89 d0                	mov    eax,edx
   2806a:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   28070:	29 c1                	sub    ecx,eax
   28072:	89 c8                	mov    eax,ecx
   28074:	85 c0                	test   eax,eax
   28076:	74 4f                	je     280c7 <mktime+0x654>
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 1)
   28078:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   2807b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28080:	89 c8                	mov    eax,ecx
   28082:	f7 ea                	imul   edx
   28084:	c1 fa 07             	sar    edx,0x7
   28087:	89 c8                	mov    eax,ecx
   28089:	c1 f8 1f             	sar    eax,0x1f
   2808c:	89 d3                	mov    ebx,edx
   2808e:	29 c3                	sub    ebx,eax
   28090:	69 c3 90 01 00 00    	imul   eax,ebx,0x190
   28096:	89 cb                	mov    ebx,ecx
   28098:	29 c3                	sub    ebx,eax
   2809a:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   2809d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   280a2:	89 c8                	mov    eax,ecx
   280a4:	f7 ea                	imul   edx
   280a6:	c1 fa 07             	sar    edx,0x7
   280a9:	89 c8                	mov    eax,ecx
   280ab:	c1 f8 1f             	sar    eax,0x1f
   280ae:	29 c2                	sub    edx,eax
   280b0:	89 d0                	mov    eax,edx
   280b2:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   280b8:	29 c1                	sub    ecx,eax
   280ba:	89 c8                	mov    eax,ecx
   280bc:	39 c3                	cmp    ebx,eax
   280be:	7d 07                	jge    280c7 <mktime+0x654>
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 3)
   280c0:	b8 01 00 00 00       	mov    eax,0x1
   280c5:	eb 05                	jmp    280cc <mktime+0x659>
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 4)
   280c7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 6)
   280cc:	01 f0                	add    eax,esi
   280ce:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:199 (discriminator 6)

  yday = month = 0;
   280d1:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   280d8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   280db:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/time.c:200 (discriminator 6)
  while (month < tmbuf->tm_mon) {
   280de:	eb 7b                	jmp    2815b <mktime+0x6e8>
/home/yogi/src/os/chrisOS/src/time.c:201
    yday += _ytab[LEAPYEAR(tm_year)][month];
   280e0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   280e3:	83 e0 03             	and    eax,0x3
   280e6:	85 c0                	test   eax,eax
   280e8:	75 50                	jne    2813a <mktime+0x6c7>
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 1)
   280ea:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   280ed:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   280f2:	89 c8                	mov    eax,ecx
   280f4:	f7 ea                	imul   edx
   280f6:	c1 fa 05             	sar    edx,0x5
   280f9:	89 c8                	mov    eax,ecx
   280fb:	c1 f8 1f             	sar    eax,0x1f
   280fe:	29 c2                	sub    edx,eax
   28100:	89 d0                	mov    eax,edx
   28102:	6b c0 64             	imul   eax,eax,0x64
   28105:	29 c1                	sub    ecx,eax
   28107:	89 c8                	mov    eax,ecx
   28109:	85 c0                	test   eax,eax
   2810b:	75 26                	jne    28133 <mktime+0x6c0>
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 4)
   2810d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   28110:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28115:	89 c8                	mov    eax,ecx
   28117:	f7 ea                	imul   edx
   28119:	c1 fa 07             	sar    edx,0x7
   2811c:	89 c8                	mov    eax,ecx
   2811e:	c1 f8 1f             	sar    eax,0x1f
   28121:	29 c2                	sub    edx,eax
   28123:	89 d0                	mov    eax,edx
   28125:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   2812b:	29 c1                	sub    ecx,eax
   2812d:	89 c8                	mov    eax,ecx
   2812f:	85 c0                	test   eax,eax
   28131:	75 07                	jne    2813a <mktime+0x6c7>
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 5)
   28133:	ba 01 00 00 00       	mov    edx,0x1
   28138:	eb 05                	jmp    2813f <mktime+0x6cc>
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 6)
   2813a:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 8)
   2813f:	89 d0                	mov    eax,edx
   28141:	01 c0                	add    eax,eax
   28143:	01 d0                	add    eax,edx
   28145:	c1 e0 02             	shl    eax,0x2
   28148:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   2814b:	01 d0                	add    eax,edx
   2814d:	8b 04 85 80 5f 08 00 	mov    eax,DWORD PTR [eax*4+0x85f80]
   28154:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/time.c:202 (discriminator 8)
    month++;
   28157:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/time.c:200
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
   2815b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2815e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   28161:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   28164:	0f 8f 76 ff ff ff    	jg     280e0 <mktime+0x66d>
/home/yogi/src/os/chrisOS/src/time.c:204
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
   2816a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2816d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   28170:	83 e8 01             	sub    eax,0x1
   28173:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/time.c:205
  if (day + yday < 0) overflow|=4;
   28176:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   28179:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2817c:	01 d0                	add    eax,edx
   2817e:	85 c0                	test   eax,eax
   28180:	79 04                	jns    28186 <mktime+0x713>
/home/yogi/src/os/chrisOS/src/time.c:205 (discriminator 1)
   28182:	83 4d e8 04          	or     DWORD PTR [ebp-0x18],0x4
/home/yogi/src/os/chrisOS/src/time.c:206
  day += yday;
   28186:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   28189:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:208

  tmbuf->tm_yday = yday;
   2818c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2818f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   28192:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/time.c:209
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
   28195:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   28198:	8d 48 04             	lea    ecx,[eax+0x4]
   2819b:	ba 93 24 49 92       	mov    edx,0x92492493
   281a0:	89 c8                	mov    eax,ecx
   281a2:	f7 ea                	imul   edx
   281a4:	8d 04 0a             	lea    eax,[edx+ecx*1]
   281a7:	c1 f8 02             	sar    eax,0x2
   281aa:	89 c2                	mov    edx,eax
   281ac:	89 c8                	mov    eax,ecx
   281ae:	c1 f8 1f             	sar    eax,0x1f
   281b1:	29 c2                	sub    edx,eax
   281b3:	89 d0                	mov    eax,edx
   281b5:	89 c2                	mov    edx,eax
   281b7:	c1 e2 03             	shl    edx,0x3
   281ba:	29 c2                	sub    edx,eax
   281bc:	89 c8                	mov    eax,ecx
   281be:	29 d0                	sub    eax,edx
   281c0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   281c3:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/chrisOS/src/time.c:211

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
   281c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   281c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   281cc:	c1 e0 02             	shl    eax,0x2
   281cf:	89 c2                	mov    edx,eax
   281d1:	c1 e2 04             	shl    edx,0x4
   281d4:	29 c2                	sub    edx,eax
   281d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   281d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   281dc:	01 d0                	add    eax,edx
   281de:	c1 e0 02             	shl    eax,0x2
   281e1:	89 c2                	mov    edx,eax
   281e3:	c1 e2 04             	shl    edx,0x4
   281e6:	29 c2                	sub    edx,eax
   281e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   281eb:	8b 00                	mov    eax,DWORD PTR [eax]
   281ed:	01 d0                	add    eax,edx
   281ef:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/time.c:213

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
   281f2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
   281f7:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
   281fa:	89 c1                	mov    ecx,eax
   281fc:	ba 07 45 2e c2       	mov    edx,0xc22e4507
   28201:	89 c8                	mov    eax,ecx
   28203:	f7 ea                	imul   edx
   28205:	8d 04 0a             	lea    eax,[edx+ecx*1]
   28208:	c1 f8 10             	sar    eax,0x10
   2820b:	89 c2                	mov    edx,eax
   2820d:	89 c8                	mov    eax,ecx
   2820f:	c1 f8 1f             	sar    eax,0x1f
   28212:	29 c2                	sub    edx,eax
   28214:	89 d0                	mov    eax,edx
   28216:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   28219:	7d 04                	jge    2821f <mktime+0x7ac>
/home/yogi/src/os/chrisOS/src/time.c:213 (discriminator 1)
   2821b:	83 4d e8 08          	or     DWORD PTR [ebp-0x18],0x8
/home/yogi/src/os/chrisOS/src/time.c:214
  seconds += day * SECS_DAY;
   2821f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   28222:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
   28228:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/time.c:217

  // Now adjust according to timezone and daylight saving time
  if (((kTimeZone > 0) && (TIME_MAX - kTimeZone < seconds)) || 
   2822b:	a1 90 02 12 00       	mov    eax,ds:0x120290
   28230:	85 c0                	test   eax,eax
   28232:	7e 13                	jle    28247 <mktime+0x7d4>
/home/yogi/src/os/chrisOS/src/time.c:217 (discriminator 1)
   28234:	a1 90 02 12 00       	mov    eax,ds:0x120290
   28239:	ba ff ff ff 7f       	mov    edx,0x7fffffff
   2823e:	29 c2                	sub    edx,eax
   28240:	89 d0                	mov    eax,edx
   28242:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   28245:	7c 15                	jl     2825c <mktime+0x7e9>
/home/yogi/src/os/chrisOS/src/time.c:218 (discriminator 3)
      ((kTimeZone < 0) && (seconds < -kTimeZone))) {
   28247:	a1 90 02 12 00       	mov    eax,ds:0x120290
/home/yogi/src/os/chrisOS/src/time.c:217 (discriminator 3)

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
  seconds += day * SECS_DAY;

  // Now adjust according to timezone and daylight saving time
  if (((kTimeZone > 0) && (TIME_MAX - kTimeZone < seconds)) || 
   2824c:	85 c0                	test   eax,eax
   2824e:	79 10                	jns    28260 <mktime+0x7ed>
/home/yogi/src/os/chrisOS/src/time.c:218
      ((kTimeZone < 0) && (seconds < -kTimeZone))) {
   28250:	a1 90 02 12 00       	mov    eax,ds:0x120290
   28255:	f7 d8                	neg    eax
   28257:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   2825a:	7e 04                	jle    28260 <mktime+0x7ed>
/home/yogi/src/os/chrisOS/src/time.c:219
          overflow|=16;
   2825c:	83 4d e8 10          	or     DWORD PTR [ebp-0x18],0x10
/home/yogi/src/os/chrisOS/src/time.c:221
  }
  seconds += kTimeZone;
   28260:	a1 90 02 12 00       	mov    eax,ds:0x120290
   28265:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/time.c:223

  if (tmbuf->tm_isdst) {
   28268:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2826b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   2826e:	85 c0                	test   eax,eax
   28270:	74 0a                	je     2827c <mktime+0x809>
/home/yogi/src/os/chrisOS/src/time.c:224
    dst = _dstbias;
   28272:	a1 2c 04 12 00       	mov    eax,ds:0x12042c
   28277:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
   2827a:	eb 07                	jmp    28283 <mktime+0x810>
/home/yogi/src/os/chrisOS/src/time.c:226
  } else {
    dst = 0;
   2827c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/time.c:229
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
   28283:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   28286:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   28289:	7e 04                	jle    2828f <mktime+0x81c>
/home/yogi/src/os/chrisOS/src/time.c:229 (discriminator 1)
   2828b:	83 4d e8 20          	or     DWORD PTR [ebp-0x18],0x20
/home/yogi/src/os/chrisOS/src/time.c:230
  seconds -= dst;
   2828f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   28292:	29 45 dc             	sub    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/time.c:232

  if (overflow) return (time_t) overflow-2;
   28295:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   28299:	74 08                	je     282a3 <mktime+0x830>
/home/yogi/src/os/chrisOS/src/time.c:232 (discriminator 1)
   2829b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2829e:	83 e8 02             	sub    eax,0x2
   282a1:	eb 03                	jmp    282a6 <mktime+0x833>
/home/yogi/src/os/chrisOS/src/time.c:235

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
   282a3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
/home/yogi/src/os/chrisOS/src/time.c:236
}
   282a6:	83 c4 20             	add    esp,0x20
   282a9:	5b                   	pop    ebx
   282aa:	5e                   	pop    esi
   282ab:	5d                   	pop    ebp
   282ac:	c3                   	ret    

000282ad <_strdate>:
_strdate():
/home/yogi/src/os/chrisOS/src/time.c:241

#if !defined(KERNEL) && !defined(OS_LIB)


char *_strdate(char *s) {
   282ad:	55                   	push   ebp
   282ae:	89 e5                	mov    ebp,esp
   282b0:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/time.c:244
  time_t now;

  time(&now);
   282b3:	8d 45 fc             	lea    eax,[ebp-0x4]
   282b6:	50                   	push   eax
   282b7:	e8 48 f4 ff ff       	call   27704 <time>
   282bc:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/time.c:247
  //fix me!
  //  strftime(s, 9, "%D", localtime(&now));
  return s;
   282bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/time.c:248
}
   282c2:	c9                   	leave  
   282c3:	c3                   	ret    

000282c4 <_strtime>:
_strtime():
/home/yogi/src/os/chrisOS/src/time.c:250

char *_strtime(char *s) {
   282c4:	55                   	push   ebp
   282c5:	89 e5                	mov    ebp,esp
   282c7:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/time.c:253
  time_t now;

  time(&now);
   282ca:	8d 45 fc             	lea    eax,[ebp-0x4]
   282cd:	50                   	push   eax
   282ce:	e8 31 f4 ff ff       	call   27704 <time>
   282d3:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/time.c:256
  //fix me
  //  strftime(s, 9, "%T", localtime(&now));
  return s;
   282d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/time.c:257
}
   282d9:	c9                   	leave  
   282da:	c3                   	ret    

000282db <waitTicks>:
waitTicks():
/home/yogi/src/os/chrisOS/src/time.c:260

void __attribute__((noinline))waitTicks(int TicksToWait)
{
   282db:	55                   	push   ebp
   282dc:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/time.c:262
    //printf("ttw=%u",ttw);
    if (TicksToWait==0)
   282de:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   282e2:	74 0f                	je     282f3 <waitTicks+0x18>
/home/yogi/src/os/chrisOS/src/time.c:267 (discriminator 1)
        return;
    //printd(DEBUG_TIMER,"ttw=%08X", TicksToWait);
    do
    {
        __asm("sti\nhlt\n");
   282e4:	fb                   	sti    
   282e5:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/time.c:268 (discriminator 1)
        TicksToWait--;
   282e6:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/time.c:269 (discriminator 1)
    } while (TicksToWait>0);
   282ea:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   282ee:	7f f4                	jg     282e4 <waitTicks+0x9>
/home/yogi/src/os/chrisOS/src/time.c:270 (discriminator 2)
    return;
   282f0:	90                   	nop
   282f1:	eb 01                	jmp    282f4 <waitTicks+0x19>
/home/yogi/src/os/chrisOS/src/time.c:263

void __attribute__((noinline))waitTicks(int TicksToWait)
{
    //printf("ttw=%u",ttw);
    if (TicksToWait==0)
        return;
   282f3:	90                   	nop
/home/yogi/src/os/chrisOS/src/time.c:271
    {
        __asm("sti\nhlt\n");
        TicksToWait--;
    } while (TicksToWait>0);
    return;
}
   282f4:	5d                   	pop    ebp
   282f5:	c3                   	ret    

000282f6 <wait>:
wait():
/home/yogi/src/os/chrisOS/src/time.c:274

void /*__attribute__((noinline))*/wait(int msToWait)
{
   282f6:	55                   	push   ebp
   282f7:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/time.c:277
    //printk("msToWait=%u, ticksperms=%u, ticksToWait=%u",msToWait, kTicksPerMS, msToWait*kTicksPerMS);
    //STOPHERE2
    waitTicks(msToWait/kTicksPerMS);
   282f9:	8b 0d 84 02 12 00    	mov    ecx,DWORD PTR ds:0x120284
   282ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28302:	99                   	cdq    
   28303:	f7 f9                	idiv   ecx
   28305:	50                   	push   eax
   28306:	e8 d0 ff ff ff       	call   282db <waitTicks>
   2830b:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/time.c:278
}
   2830e:	90                   	nop
   2830f:	c9                   	leave  
   28310:	c3                   	ret    

00028311 <wait3>:
wait3():
/home/yogi/src/os/chrisOS/src/time.c:281

void wait3(double msToWait)
{
   28311:	55                   	push   ebp
   28312:	89 e5                	mov    ebp,esp
   28314:	83 ec 28             	sub    esp,0x28
   28317:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2831a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   2831d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   28320:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/time.c:282
volatile double endTicks = (double)*kTicksSinceStart + msToWait/ (1000/kTicksPerSecond);
   28323:	a1 60 02 12 00       	mov    eax,ds:0x120260
   28328:	8b 00                	mov    eax,DWORD PTR [eax]
   2832a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   2832d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   28334:	df 6d d8             	fild   QWORD PTR [ebp-0x28]
   28337:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   2833a:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   2833d:	dd 45 e8             	fld    QWORD PTR [ebp-0x18]
   28340:	8b 0d 80 02 12 00    	mov    ecx,DWORD PTR ds:0x120280
   28346:	b8 e8 03 00 00       	mov    eax,0x3e8
   2834b:	ba 00 00 00 00       	mov    edx,0x0
   28350:	f7 f1                	div    ecx
   28352:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   28355:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   2835c:	df 6d d8             	fild   QWORD PTR [ebp-0x28]
   2835f:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   28362:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   28365:	de f9                	fdivp  st(1),st
   28367:	de c1                	faddp  st(1),st
   28369:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   2836c:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   2836f:	dd 5d f8             	fstp   QWORD PTR [ebp-0x8]
/home/yogi/src/os/chrisOS/src/time.c:284

while (endTicks > (double)*kTicksSinceStart)
   28372:	eb 02                	jmp    28376 <wait3+0x65>
/home/yogi/src/os/chrisOS/src/time.c:285
    {__asm__("sti\n hlt\n");}
   28374:	fb                   	sti    
   28375:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/time.c:284

void wait3(double msToWait)
{
volatile double endTicks = (double)*kTicksSinceStart + msToWait/ (1000/kTicksPerSecond);

while (endTicks > (double)*kTicksSinceStart)
   28376:	a1 60 02 12 00       	mov    eax,ds:0x120260
   2837b:	8b 00                	mov    eax,DWORD PTR [eax]
   2837d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   28380:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   28387:	df 6d d8             	fild   QWORD PTR [ebp-0x28]
   2838a:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   2838d:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   28390:	dd 45 f8             	fld    QWORD PTR [ebp-0x8]
   28393:	df e9                	fucomip st,st(1)
   28395:	dd d8                	fstp   st(0)
   28397:	77 db                	ja     28374 <wait3+0x63>
/home/yogi/src/os/chrisOS/src/time.c:287
    {__asm__("sti\n hlt\n");}
    
}
   28399:	90                   	nop
   2839a:	c9                   	leave  
   2839b:	c3                   	ret    

0002839c <wait2>:
wait2():
/home/yogi/src/os/chrisOS/src/time.c:290

void wait2(unsigned msToWait)
{
   2839c:	55                   	push   ebp
   2839d:	89 e5                	mov    ebp,esp
   2839f:	53                   	push   ebx
   283a0:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/time.c:291
    uint64_t startTicks = *kTicksSinceStart;             //25
   283a3:	a1 60 02 12 00       	mov    eax,ds:0x120260
   283a8:	8b 00                	mov    eax,DWORD PTR [eax]
   283aa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   283ad:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/time.c:292
    unsigned msPerTick = 1000 / kTicksPerSecond;         //18
   283b4:	8b 1d 80 02 12 00    	mov    ebx,DWORD PTR ds:0x120280
   283ba:	b8 e8 03 00 00       	mov    eax,0x3e8
   283bf:	ba 00 00 00 00       	mov    edx,0x0
   283c4:	f7 f3                	div    ebx
   283c6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/time.c:293
    uint64_t totalTicksToWait = msToWait/msPerTick;     //4321/18
   283c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   283cc:	ba 00 00 00 00       	mov    edx,0x0
   283d1:	f7 75 ec             	div    DWORD PTR [ebp-0x14]
   283d4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
   283d7:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/time.c:294
    uint64_t endTicks = startTicks + totalTicksToWait;
   283de:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   283e1:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
   283e4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   283e7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   283ea:	01 c8                	add    eax,ecx
   283ec:	11 da                	adc    edx,ebx
   283ee:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   283f1:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
/home/yogi/src/os/chrisOS/src/time.c:296

    if (endTicks < *kTicksSinceStart)
   283f4:	a1 60 02 12 00       	mov    eax,ds:0x120260
   283f9:	8b 00                	mov    eax,DWORD PTR [eax]
   283fb:	ba 00 00 00 00       	mov    edx,0x0
   28400:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   28403:	72 0d                	jb     28412 <wait2+0x76>
   28405:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   28408:	77 25                	ja     2842f <wait2+0x93>
   2840a:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
   2840d:	77 20                	ja     2842f <wait2+0x93>
/home/yogi/src/os/chrisOS/src/time.c:304
    //waitTicks(totalTicksToWait);
    //return;
    //printf("Waiting %u, ticks since start=%u  ms", msToWait, kTicksSinceStart);
    //printf ("startTicks=%u, msPerTick=%u, totalTicksToWait=%u, endTicks=%u, kTicksSinceStart=%u", startTicks, msPerTick, totalTicksToWait, endTicks, kTicksSinceStart);
    //printf("\nStart waiting ... endTicks=%u, kTicksSinceStart=%u\n",endTicks, kTicksSinceStart);
    while (endTicks > *kTicksSinceStart)
   2840f:	eb 01                	jmp    28412 <wait2+0x76>
/home/yogi/src/os/chrisOS/src/time.c:305
    {__asm__("hlt\n");}
   28411:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/time.c:304
    //waitTicks(totalTicksToWait);
    //return;
    //printf("Waiting %u, ticks since start=%u  ms", msToWait, kTicksSinceStart);
    //printf ("startTicks=%u, msPerTick=%u, totalTicksToWait=%u, endTicks=%u, kTicksSinceStart=%u", startTicks, msPerTick, totalTicksToWait, endTicks, kTicksSinceStart);
    //printf("\nStart waiting ... endTicks=%u, kTicksSinceStart=%u\n",endTicks, kTicksSinceStart);
    while (endTicks > *kTicksSinceStart)
   28412:	a1 60 02 12 00       	mov    eax,ds:0x120260
   28417:	8b 00                	mov    eax,DWORD PTR [eax]
   28419:	ba 00 00 00 00       	mov    edx,0x0
   2841e:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   28421:	72 ee                	jb     28411 <wait2+0x75>
   28423:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   28426:	77 08                	ja     28430 <wait2+0x94>
   28428:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
   2842b:	72 e4                	jb     28411 <wait2+0x75>
   2842d:	eb 01                	jmp    28430 <wait2+0x94>
/home/yogi/src/os/chrisOS/src/time.c:297
    unsigned msPerTick = 1000 / kTicksPerSecond;         //18
    uint64_t totalTicksToWait = msToWait/msPerTick;     //4321/18
    uint64_t endTicks = startTicks + totalTicksToWait;

    if (endTicks < *kTicksSinceStart)
        return;
   2842f:	90                   	nop
/home/yogi/src/os/chrisOS/src/time.c:307
    //printf ("startTicks=%u, msPerTick=%u, totalTicksToWait=%u, endTicks=%u, kTicksSinceStart=%u", startTicks, msPerTick, totalTicksToWait, endTicks, kTicksSinceStart);
    //printf("\nStart waiting ... endTicks=%u, kTicksSinceStart=%u\n",endTicks, kTicksSinceStart);
    while (endTicks > *kTicksSinceStart)
    {__asm__("hlt\n");}
    //printf("done waiting!\n");
}
   28430:	83 c4 24             	add    esp,0x24
   28433:	5b                   	pop    ebx
   28434:	5d                   	pop    ebp
   28435:	c3                   	ret    
   28436:	66 90                	xchg   ax,ax
   28438:	66 90                	xchg   ax,ax
   2843a:	66 90                	xchg   ax,ax
   2843c:	66 90                	xchg   ax,ax
   2843e:	66 90                	xchg   ax,ax

00028440 <__udivdi3>:
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1287
#endif

#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
   28440:	55                   	push   ebp
   28441:	57                   	push   edi
   28442:	56                   	push   esi
   28443:	53                   	push   ebx
   28444:	83 ec 1c             	sub    esp,0x1c
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1014
#endif
UDWtype
__udivmoddi4 (UDWtype n, UDWtype d, UDWtype *rp)
{
  const DWunion nn = {.ll = n};
  const DWunion dd = {.ll = d};
   28447:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1287
#endif

#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
   2844b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
   2844f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
   28453:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1026
  d1 = dd.s.high;
  n0 = nn.s.low;
  n1 = nn.s.high;

#if !UDIV_NEEDS_NORMALIZATION
  if (d1 == 0)
   28457:	85 f6                	test   esi,esi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1013
static inline __attribute__ ((__always_inline__))
#endif
UDWtype
__udivmoddi4 (UDWtype n, UDWtype d, UDWtype *rp)
{
  const DWunion nn = {.ll = n};
   28459:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
   2845d:	89 ca                	mov    edx,ecx
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1014
  const DWunion dd = {.ll = d};
   2845f:	89 f8                	mov    eax,edi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1026
  d1 = dd.s.high;
  n0 = nn.s.low;
  n1 = nn.s.high;

#if !UDIV_NEEDS_NORMALIZATION
  if (d1 == 0)
   28461:	75 3d                	jne    284a0 <__udivdi3+0x60>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1028
    {
      if (d0 > n1)
   28463:	39 cf                	cmp    edi,ecx
   28465:	0f 87 c5 00 00 00    	ja     28530 <__udivdi3+0xf0>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1041
	}
      else
	{
	  /* qq = NN / 0d */

	  if (d0 == 0)
   2846b:	85 ff                	test   edi,edi
   2846d:	89 fd                	mov    ebp,edi
   2846f:	75 0b                	jne    2847c <__udivdi3+0x3c>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1042
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */
   28471:	b8 01 00 00 00       	mov    eax,0x1
   28476:	31 d2                	xor    edx,edx
   28478:	f7 f7                	div    edi
   2847a:	89 c5                	mov    ebp,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1044

	  udiv_qrnnd (q1, n1, 0, n1, d0);
   2847c:	89 c8                	mov    eax,ecx
   2847e:	31 d2                	xor    edx,edx
   28480:	f7 f5                	div    ebp
   28482:	89 c1                	mov    ecx,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1045
	  udiv_qrnnd (q0, n0, n1, n0, d0);
   28484:	89 d8                	mov    eax,ebx
   28486:	89 cf                	mov    edi,ecx
   28488:	f7 f5                	div    ebp
   2848a:	89 c3                	mov    ebx,eax
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   2848c:	89 d8                	mov    eax,ebx
   2848e:	89 fa                	mov    edx,edi
   28490:	83 c4 1c             	add    esp,0x1c
   28493:	5b                   	pop    ebx
   28494:	5e                   	pop    esi
   28495:	5f                   	pop    edi
   28496:	5d                   	pop    ebp
   28497:	c3                   	ret    
   28498:	90                   	nop
   28499:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1136
    }
#endif /* UDIV_NEEDS_NORMALIZATION */

  else
    {
      if (d1 > n1)
   284a0:	39 ce                	cmp    esi,ecx
   284a2:	77 74                	ja     28518 <__udivdi3+0xd8>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1155
	}
      else
	{
	  /* 0q = NN / dd */

	  count_leading_zeros (bm, d1);
   284a4:	0f bd fe             	bsr    edi,esi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1156
	  if (bm == 0)
   284a7:	83 f7 1f             	xor    edi,0x1f
   284aa:	0f 84 98 00 00 00    	je     28548 <__udivdi3+0x108>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1188
	  else
	    {
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;
   284b0:	bb 20 00 00 00       	mov    ebx,0x20
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1190

	      d1 = (d1 << bm) | (d0 >> b);
   284b5:	89 f9                	mov    ecx,edi
   284b7:	89 c5                	mov    ebp,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1188
	  else
	    {
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;
   284b9:	29 fb                	sub    ebx,edi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1190

	      d1 = (d1 << bm) | (d0 >> b);
   284bb:	d3 e6                	shl    esi,cl
   284bd:	89 d9                	mov    ecx,ebx
   284bf:	d3 ed                	shr    ebp,cl
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1191
	      d0 = d0 << bm;
   284c1:	89 f9                	mov    ecx,edi
   284c3:	d3 e0                	shl    eax,cl
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1190
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
   284c5:	09 ee                	or     esi,ebp
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1192
	      d0 = d0 << bm;
	      n2 = n1 >> b;
   284c7:	89 d9                	mov    ecx,ebx
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1191
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
	      d0 = d0 << bm;
   284c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1192
	      n2 = n1 >> b;
   284cd:	89 d5                	mov    ebp,edx
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1193
	      n1 = (n1 << bm) | (n0 >> b);
   284cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1192

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
	      d0 = d0 << bm;
	      n2 = n1 >> b;
   284d3:	d3 ed                	shr    ebp,cl
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1193
	      n1 = (n1 << bm) | (n0 >> b);
   284d5:	89 f9                	mov    ecx,edi
   284d7:	d3 e2                	shl    edx,cl
   284d9:	89 d9                	mov    ecx,ebx
   284db:	d3 e8                	shr    eax,cl
   284dd:	09 c2                	or     edx,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1196
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
   284df:	89 d0                	mov    eax,edx
   284e1:	89 ea                	mov    edx,ebp
   284e3:	f7 f6                	div    esi
   284e5:	89 d5                	mov    ebp,edx
   284e7:	89 c3                	mov    ebx,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1197
	      umul_ppmm (m1, m0, q0, d0);
   284e9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1199

	      if (m1 > n1 || (m1 == n1 && m0 > n0))
   284ed:	39 d5                	cmp    ebp,edx
   284ef:	72 10                	jb     28501 <__udivdi3+0xc1>
   284f1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
   284f5:	89 f9                	mov    ecx,edi
   284f7:	d3 e6                	shl    esi,cl
   284f9:	39 c6                	cmp    esi,eax
   284fb:	73 07                	jae    28504 <__udivdi3+0xc4>
   284fd:	39 d5                	cmp    ebp,edx
   284ff:	75 03                	jne    28504 <__udivdi3+0xc4>
   28501:	83 eb 01             	sub    ebx,0x1
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1202
		{
		  q0--;
		  sub_ddmmss (m1, m0, m1, m0, d1, d0);
   28504:	31 ff                	xor    edi,edi
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   28506:	89 d8                	mov    eax,ebx
   28508:	89 fa                	mov    edx,edi
   2850a:	83 c4 1c             	add    esp,0x1c
   2850d:	5b                   	pop    ebx
   2850e:	5e                   	pop    esi
   2850f:	5f                   	pop    edi
   28510:	5d                   	pop    ebp
   28511:	c3                   	ret    
   28512:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1136
    }
#endif /* UDIV_NEEDS_NORMALIZATION */

  else
    {
      if (d1 > n1)
   28518:	31 ff                	xor    edi,edi
   2851a:	31 db                	xor    ebx,ebx
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   2851c:	89 d8                	mov    eax,ebx
   2851e:	89 fa                	mov    edx,edi
   28520:	83 c4 1c             	add    esp,0x1c
   28523:	5b                   	pop    ebx
   28524:	5e                   	pop    esi
   28525:	5f                   	pop    edi
   28526:	5d                   	pop    ebp
   28527:	c3                   	ret    
   28528:	90                   	nop
   28529:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1032
    {
      if (d0 > n1)
	{
	  /* 0q = nn / 0D */

	  udiv_qrnnd (q0, n0, n1, n0, d0);
   28530:	89 d8                	mov    eax,ebx
   28532:	f7 f7                	div    edi
   28534:	31 ff                	xor    edi,edi
   28536:	89 c3                	mov    ebx,eax
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   28538:	89 d8                	mov    eax,ebx
   2853a:	89 fa                	mov    edx,edi
   2853c:	83 c4 1c             	add    esp,0x1c
   2853f:	5b                   	pop    ebx
   28540:	5e                   	pop    esi
   28541:	5f                   	pop    edi
   28542:	5d                   	pop    ebp
   28543:	c3                   	ret    
   28544:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1166

		 This special case is necessary, not an optimization.  */

	      /* The condition on the next line takes advantage of that
		 n1 >= d1 (true due to program flow).  */
	      if (n1 > d1 || n0 >= d0)
   28548:	39 ce                	cmp    esi,ecx
   2854a:	72 0c                	jb     28558 <__udivdi3+0x118>
   2854c:	31 db                	xor    ebx,ebx
   2854e:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
   28552:	0f 87 34 ff ff ff    	ja     2848c <__udivdi3+0x4c>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1169
		{
		  q0 = 1;
		  sub_ddmmss (n1, n0, n1, n0, d1, d0);
   28558:	bb 01 00 00 00       	mov    ebx,0x1
   2855d:	e9 2a ff ff ff       	jmp    2848c <__udivdi3+0x4c>
